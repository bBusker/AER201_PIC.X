

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 28 16:19:24 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88  0000                     
    89                           ; Version 1.40
    90                           ; Generated 01/12/2016 GMT
    91                           ; 
    92                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC18F4620 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     
   124                           	psect	idataBANK0
   125  003134                     __pidataBANK0:
   126                           	opt stack 0
   127                           
   128                           ;initializer for _bottle_count_disp
   129  003134  FFFF               	dw	65535
   130                           
   131                           	psect	mediumconst
   132  00FE36                     __pmediumconst:
   133                           	opt stack 0
   134  00FE36  00                 	db	0
   135  00FE37                     _keys:
   136                           	opt stack 0
   137  00FE37  31                 	db	49
   138  00FE38  32                 	db	50
   139  00FE39  33                 	db	51
   140  00FE3A  41                 	db	65
   141  00FE3B  34                 	db	52
   142  00FE3C  35                 	db	53
   143  00FE3D  36                 	db	54
   144  00FE3E  42                 	db	66
   145  00FE3F  37                 	db	55
   146  00FE40  38                 	db	56
   147  00FE41  39                 	db	57
   148  00FE42  43                 	db	67
   149  00FE43  2A                 	db	42
   150  00FE44  30                 	db	48
   151  00FE45  23                 	db	35
   152  00FE46  44                 	db	68
   153  00FE47  00                 	db	0
   154  00FE48                     __end_of_keys:
   155                           	opt stack 0
   156  00FE48                     _dpowers:
   157                           	opt stack 0
   158  00FE48  0001               	dw	1
   159  00FE4A  000A               	dw	10
   160  00FE4C  0064               	dw	100
   161  00FE4E  03E8               	dw	1000
   162  00FE50  2710               	dw	10000
   163  00FE52                     __end_of_dpowers:
   164                           	opt stack 0
   165  00FE52                     _hexpowers:
   166                           	opt stack 0
   167  00FE52  0001               	dw	1
   168  00FE54  0010               	dw	16
   169  00FE56  0100               	dw	256
   170  00FE58  1000               	dw	4096
   171  00FE5A                     __end_of_hexpowers:
   172                           	opt stack 0
   173  00FE5A                     _timeset:
   174                           	opt stack 0
   175  00FE5A  50                 	db	80
   176  00FE5B  35                 	db	53
   177  00FE5C  21                 	db	33
   178  00FE5D  08                 	db	8
   179  00FE5E  05                 	db	5
   180  00FE5F  02                 	db	2
   181  00FE60  17                 	db	23
   182  00FE61                     __end_of_timeset:
   183                           	opt stack 0
   184  00FE61                     exp@coeff:
   185                           	opt stack 0
   186  00FE61  00                 	db	0
   187  00FE62  80                 	db	128
   188  00FE63  3F                 	db	63
   189  00FE64  72                 	db	114
   190  00FE65  31                 	db	49
   191  00FE66  3F                 	db	63
   192  00FE67  FE                 	db	254
   193  00FE68  75                 	db	117
   194  00FE69  3E                 	db	62
   195  00FE6A  58                 	db	88
   196  00FE6B  63                 	db	99
   197  00FE6C  3D                 	db	61
   198  00FE6D  95                 	db	149
   199  00FE6E  1D                 	db	29
   200  00FE6F  3C                 	db	60
   201  00FE70  C5                 	db	197
   202  00FE71  AE                 	db	174
   203  00FE72  3A                 	db	58
   204  00FE73  79                 	db	121
   205  00FE74  21                 	db	33
   206  00FE75  39                 	db	57
   207  00FE76  94                 	db	148
   208  00FE77  80                 	db	128
   209  00FE78  37                 	db	55
   210  00FE79  93                 	db	147
   211  00FE7A  A7                 	db	167
   212  00FE7B  35                 	db	53
   213  00FE7C  56                 	db	86
   214  00FE7D  15                 	db	21
   215  00FE7E  34                 	db	52
   216  00FE7F                     __end_ofexp@coeff:
   217                           	opt stack 0
   218  00FE7F                     log@coeff:
   219                           	opt stack 0
   220  00FE7F  00                 	db	0
   221  00FE80  00                 	db	0
   222  00FE81  00                 	db	0
   223  00FE82  00                 	db	0
   224  00FE83  80                 	db	128
   225  00FE84  3F                 	db	63
   226  00FE85  F0                 	db	240
   227  00FE86  FF                 	db	255
   228  00FE87  BE                 	db	190
   229  00FE88  E2                 	db	226
   230  00FE89  A9                 	db	169
   231  00FE8A  3E                 	db	62
   232  00FE8B  83                 	db	131
   233  00FE8C  76                 	db	118
   234  00FE8D  BE                 	db	190
   235  00FE8E  AE                 	db	174
   236  00FE8F  2B                 	db	43
   237  00FE90  3E                 	db	62
   238  00FE91  3C                 	db	60
   239  00FE92  C3                 	db	195
   240  00FE93  BD                 	db	189
   241  00FE94  D2                 	db	210
   242  00FE95  13                 	db	19
   243  00FE96  3D                 	db	61
   244  00FE97  78                 	db	120
   245  00FE98  D3                 	db	211
   246  00FE99  BB                 	db	187
   247  00FE9A                     __end_oflog@coeff:
   248                           	opt stack 0
   249  0000                     _TMR0	set	4054
   250  0000                     _ADCON0	set	4034
   251  0000                     _ADCON1	set	4033
   252  0000                     _INTCONbits	set	4082
   253  0000                     _LATA	set	3977
   254  0000                     _LATAbits	set	3977
   255  0000                     _LATB	set	3978
   256  0000                     _LATC	set	3979
   257  0000                     _LATCbits	set	3979
   258  0000                     _LATD	set	3980
   259  0000                     _LATDbits	set	3980
   260  0000                     _LATE	set	3981
   261  0000                     _PORTAbits	set	3968
   262  0000                     _PORTB	set	3969
   263  0000                     _SSPADD	set	4040
   264  0000                     _SSPBUF	set	4041
   265  0000                     _SSPCON1	set	4038
   266  0000                     _SSPCON2	set	4037
   267  0000                     _SSPSTAT	set	4039
   268  0000                     _TRISA	set	3986
   269  0000                     _TRISB	set	3987
   270  0000                     _TRISC	set	3988
   271  0000                     _TRISD	set	3989
   272  0000                     _TRISE	set	3990
   273  0000                     _ACKDT	set	32301
   274  0000                     _ACKEN	set	32300
   275  0000                     _GIE	set	32663
   276  0000                     _INT0IE	set	32660
   277  0000                     _INT1IE	set	32643
   278  0000                     _INT1IF	set	32640
   279  0000                     _INT2IE	set	32644
   280  0000                     _PEN	set	32298
   281  0000                     _PSA	set	32427
   282  0000                     _RCEN	set	32299
   283  0000                     _RSEN	set	32297
   284  0000                     _SEN	set	32296
   285  0000                     _T08BIT	set	32430
   286  0000                     _T0CS	set	32429
   287  0000                     _T0PS0	set	32424
   288  0000                     _T0PS1	set	32425
   289  0000                     _T0PS2	set	32426
   290  0000                     _TMR0IE	set	32661
   291  0000                     _TMR0IF	set	32658
   292  0000                     _TMR0ON	set	32431
   293  0000                     _TRISC3	set	31907
   294  0000                     _TRISC4	set	31908
   295  0000                     _nRBPU	set	32655
   296  00FE9A                     STR_3:
   297  00FE9A  47                 	db	71	;'G'
   298  00FE9B  25                 	db	37
   299  00FE9C  75                 	db	117	;'u'
   300  00FE9D  20                 	db	32
   301  00FE9E  42                 	db	66	;'B'
   302  00FE9F  25                 	db	37
   303  00FEA0  75                 	db	117	;'u'
   304  00FEA1  20                 	db	32
   305  00FEA2  20                 	db	32
   306  00FEA3  20                 	db	32
   307  00FEA4  20                 	db	32
   308  00FEA5  20                 	db	32
   309  00FEA6  20                 	db	32
   310  00FEA7  20                 	db	32
   311  00FEA8  20                 	db	32
   312  00FEA9  20                 	db	32
   313  00FEAA  20                 	db	32
   314  00FEAB  20                 	db	32
   315  00FEAC  20                 	db	32
   316  00FEAD  20                 	db	32
   317  00FEAE  20                 	db	32
   318  00FEAF  20                 	db	32
   319  00FEB0  20                 	db	32
   320  00FEB1  00                 	db	0
   321  00FEB2                     STR_2:
   322  00FEB2  43                 	db	67	;'C'
   323  00FEB3  25                 	db	37
   324  00FEB4  75                 	db	117	;'u'
   325  00FEB5  20                 	db	32
   326  00FEB6  52                 	db	82	;'R'
   327  00FEB7  25                 	db	37
   328  00FEB8  75                 	db	117	;'u'
   329  00FEB9  20                 	db	32
   330  00FEBA  20                 	db	32
   331  00FEBB  20                 	db	32
   332  00FEBC  20                 	db	32
   333  00FEBD  20                 	db	32
   334  00FEBE  20                 	db	32
   335  00FEBF  20                 	db	32
   336  00FEC0  20                 	db	32
   337  00FEC1  20                 	db	32
   338  00FEC2  20                 	db	32
   339  00FEC3  20                 	db	32
   340  00FEC4  20                 	db	32
   341  00FEC5  20                 	db	32
   342  00FEC6  20                 	db	32
   343  00FEC7  20                 	db	32
   344  00FEC8  20                 	db	32
   345  00FEC9  00                 	db	0
   346  00FECA                     STR_17:
   347  00FECA  54                 	db	84	;'T'
   348  00FECB  6F                 	db	111	;'o'
   349  00FECC  74                 	db	116	;'t'
   350  00FECD  61                 	db	97	;'a'
   351  00FECE  6C                 	db	108	;'l'
   352  00FECF  20                 	db	32
   353  00FED0  4F                 	db	79	;'O'
   354  00FED1  70                 	db	112	;'p'
   355  00FED2  65                 	db	101	;'e'
   356  00FED3  72                 	db	114	;'r'
   357  00FED4  61                 	db	97	;'a'
   358  00FED5  74                 	db	116	;'t'
   359  00FED6  69                 	db	105	;'i'
   360  00FED7  6F                 	db	111	;'o'
   361  00FED8  6E                 	db	110	;'n'
   362  00FED9  20                 	db	32
   363  00FEDA  20                 	db	32
   364  00FEDB  20                 	db	32
   365  00FEDC  20                 	db	32
   366  00FEDD  20                 	db	32
   367  00FEDE  20                 	db	32
   368  00FEDF  20                 	db	32
   369  00FEE0  00                 	db	0
   370  00FEE1                     STR_8:
   371  00FEE1  44                 	db	68	;'D'
   372  00FEE2  61                 	db	97	;'a'
   373  00FEE3  74                 	db	116	;'t'
   374  00FEE4  65                 	db	101	;'e'
   375  00FEE5  3A                 	db	58	;':'
   376  00FEE6  20                 	db	32
   377  00FEE7  25                 	db	37
   378  00FEE8  30                 	db	48	;'0'
   379  00FEE9  32                 	db	50	;'2'
   380  00FEEA  78                 	db	120	;'x'
   381  00FEEB  2F                 	db	47
   382  00FEEC  25                 	db	37
   383  00FEED  30                 	db	48	;'0'
   384  00FEEE  32                 	db	50	;'2'
   385  00FEEF  78                 	db	120	;'x'
   386  00FEF0  2F                 	db	47
   387  00FEF1  25                 	db	37
   388  00FEF2  30                 	db	48	;'0'
   389  00FEF3  32                 	db	50	;'2'
   390  00FEF4  78                 	db	120	;'x'
   391  00FEF5  20                 	db	32
   392  00FEF6  20                 	db	32
   393  00FEF7  00                 	db	0
   394  00FEF8                     STR_9:
   395  00FEF8  54                 	db	84	;'T'
   396  00FEF9  69                 	db	105	;'i'
   397  00FEFA  6D                 	db	109	;'m'
   398  00FEFB  65                 	db	101	;'e'
   399  00FEFC  3A                 	db	58	;':'
   400  00FEFD  20                 	db	32
   401  00FEFE  25                 	db	37
   402  00FEFF  30                 	db	48	;'0'
   403  00FF00  32                 	db	50	;'2'
   404  00FF01  78                 	db	120	;'x'
   405  00FF02  3A                 	db	58	;':'
   406  00FF03  25                 	db	37
   407  00FF04  30                 	db	48	;'0'
   408  00FF05  32                 	db	50	;'2'
   409  00FF06  78                 	db	120	;'x'
   410  00FF07  3A                 	db	58	;':'
   411  00FF08  25                 	db	37
   412  00FF09  30                 	db	48	;'0'
   413  00FF0A  32                 	db	50	;'2'
   414  00FF0B  78                 	db	120	;'x'
   415  00FF0C  20                 	db	32
   416  00FF0D  20                 	db	32
   417  00FF0E  00                 	db	0
   418  00FF0F                     STR_18:
   419  00FF0F  54                 	db	84	;'T'
   420  00FF10  69                 	db	105	;'i'
   421  00FF11  6D                 	db	109	;'m'
   422  00FF12  65                 	db	101	;'e'
   423  00FF13  3A                 	db	58	;':'
   424  00FF14  20                 	db	32
   425  00FF15  25                 	db	37
   426  00FF16  64                 	db	100	;'d'
   427  00FF17  20                 	db	32
   428  00FF18  73                 	db	115	;'s'
   429  00FF19  20                 	db	32
   430  00FF1A  20                 	db	32
   431  00FF1B  20                 	db	32
   432  00FF1C  20                 	db	32
   433  00FF1D  20                 	db	32
   434  00FF1E  20                 	db	32
   435  00FF1F  20                 	db	32
   436  00FF20  00                 	db	0
   437  00FF21                     STR_22:
   438  00FF21  30                 	db	48	;'0'
   439  00FF22  31                 	db	49	;'1'
   440  00FF23  32                 	db	50	;'2'
   441  00FF24  33                 	db	51	;'3'
   442  00FF25  34                 	db	52	;'4'
   443  00FF26  35                 	db	53	;'5'
   444  00FF27  36                 	db	54	;'6'
   445  00FF28  37                 	db	55	;'7'
   446  00FF29  38                 	db	56	;'8'
   447  00FF2A  39                 	db	57	;'9'
   448  00FF2B  61                 	db	97	;'a'
   449  00FF2C  62                 	db	98	;'b'
   450  00FF2D  63                 	db	99	;'c'
   451  00FF2E  64                 	db	100	;'d'
   452  00FF2F  65                 	db	101	;'e'
   453  00FF30  66                 	db	102	;'f'
   454  00FF31  00                 	db	0
   455  00FF32                     STR_11:
   456  00FF32  54                 	db	84	;'T'
   457  00FF33  6F                 	db	111	;'o'
   458  00FF34  74                 	db	116	;'t'
   459  00FF35  61                 	db	97	;'a'
   460  00FF36  6C                 	db	108	;'l'
   461  00FF37  3A                 	db	58	;':'
   462  00FF38  20                 	db	32
   463  00FF39  25                 	db	37
   464  00FF3A  64                 	db	100	;'d'
   465  00FF3B  20                 	db	32
   466  00FF3C  20                 	db	32
   467  00FF3D  20                 	db	32
   468  00FF3E  20                 	db	32
   469  00FF3F  20                 	db	32
   470  00FF40  20                 	db	32
   471  00FF41  20                 	db	32
   472  00FF42  00                 	db	0
   473  00FF43                     STR_10:
   474  00FF43  42                 	db	66	;'B'
   475  00FF44  6F                 	db	111	;'o'
   476  00FF45  74                 	db	116	;'t'
   477  00FF46  74                 	db	116	;'t'
   478  00FF47  6C                 	db	108	;'l'
   479  00FF48  65                 	db	101	;'e'
   480  00FF49  20                 	db	32
   481  00FF4A  43                 	db	67	;'C'
   482  00FF4B  6F                 	db	111	;'o'
   483  00FF4C  75                 	db	117	;'u'
   484  00FF4D  6E                 	db	110	;'n'
   485  00FF4E  74                 	db	116	;'t'
   486  00FF4F  20                 	db	32
   487  00FF50  20                 	db	32
   488  00FF51  20                 	db	32
   489  00FF52  20                 	db	32
   490  00FF53  00                 	db	0
   491  00FF54                     STR_12:
   492  00FF54  59                 	db	89	;'Y'
   493  00FF55  4F                 	db	79	;'O'
   494  00FF56  50                 	db	80	;'P'
   495  00FF57  20                 	db	32
   496  00FF58  57                 	db	87	;'W'
   497  00FF59  2F                 	db	47
   498  00FF5A  20                 	db	32
   499  00FF5B  43                 	db	67	;'C'
   500  00FF5C  41                 	db	65	;'A'
   501  00FF5D  50                 	db	80	;'P'
   502  00FF5E  3A                 	db	58	;':'
   503  00FF5F  20                 	db	32
   504  00FF60  25                 	db	37
   505  00FF61  64                 	db	100	;'d'
   506  00FF62  20                 	db	32
   507  00FF63  20                 	db	32
   508  00FF64  00                 	db	0
   509  00FF65                     STR_13:
   510  00FF65  59                 	db	89	;'Y'
   511  00FF66  4F                 	db	79	;'O'
   512  00FF67  50                 	db	80	;'P'
   513  00FF68  20                 	db	32
   514  00FF69  4E                 	db	78	;'N'
   515  00FF6A  4F                 	db	79	;'O'
   516  00FF6B  20                 	db	32
   517  00FF6C  43                 	db	67	;'C'
   518  00FF6D  41                 	db	65	;'A'
   519  00FF6E  50                 	db	80	;'P'
   520  00FF6F  3A                 	db	58	;':'
   521  00FF70  20                 	db	32
   522  00FF71  25                 	db	37
   523  00FF72  64                 	db	100	;'d'
   524  00FF73  20                 	db	32
   525  00FF74  20                 	db	32
   526  00FF75  00                 	db	0
   527  00FF76                     STR_14:
   528  00FF76  45                 	db	69	;'E'
   529  00FF77  53                 	db	83	;'S'
   530  00FF78  4B                 	db	75	;'K'
   531  00FF79  41                 	db	65	;'A'
   532  00FF7A  20                 	db	32
   533  00FF7B  57                 	db	87	;'W'
   534  00FF7C  2F                 	db	47
   535  00FF7D  20                 	db	32
   536  00FF7E  43                 	db	67	;'C'
   537  00FF7F  41                 	db	65	;'A'
   538  00FF80  50                 	db	80	;'P'
   539  00FF81  3A                 	db	58	;':'
   540  00FF82  20                 	db	32
   541  00FF83  25                 	db	37
   542  00FF84  64                 	db	100	;'d'
   543  00FF85  20                 	db	32
   544  00FF86  00                 	db	0
   545  00FF87                     STR_15:
   546  00FF87  45                 	db	69	;'E'
   547  00FF88  53                 	db	83	;'S'
   548  00FF89  4B                 	db	75	;'K'
   549  00FF8A  41                 	db	65	;'A'
   550  00FF8B  20                 	db	32
   551  00FF8C  4E                 	db	78	;'N'
   552  00FF8D  4F                 	db	79	;'O'
   553  00FF8E  20                 	db	32
   554  00FF8F  43                 	db	67	;'C'
   555  00FF90  41                 	db	65	;'A'
   556  00FF91  50                 	db	80	;'P'
   557  00FF92  3A                 	db	58	;':'
   558  00FF93  20                 	db	32
   559  00FF94  25                 	db	37
   560  00FF95  64                 	db	100	;'d'
   561  00FF96  20                 	db	32
   562  00FF97  00                 	db	0
   563  00FF98                     STR_20:
   564  00FF98  4F                 	db	79	;'O'
   565  00FF99  70                 	db	112	;'p'
   566  00FF9A  65                 	db	101	;'e'
   567  00FF9B  72                 	db	114	;'r'
   568  00FF9C  61                 	db	97	;'a'
   569  00FF9D  74                 	db	116	;'t'
   570  00FF9E  69                 	db	105	;'i'
   571  00FF9F  6F                 	db	111	;'o'
   572  00FFA0  6E                 	db	110	;'n'
   573  00FFA1  20                 	db	32
   574  00FFA2  44                 	db	68	;'D'
   575  00FFA3  6F                 	db	111	;'o'
   576  00FFA4  6E                 	db	110	;'n'
   577  00FFA5  65                 	db	101	;'e'
   578  00FFA6  21                 	db	33
   579  00FFA7  00                 	db	0
   580  00FFA8                     STR_16:
   581  00FFA8  45                 	db	69	;'E'
   582  00FFA9  52                 	db	82	;'R'
   583  00FFAA  52                 	db	82	;'R'
   584  00FFAB  3A                 	db	58	;':'
   585  00FFAC  20                 	db	32
   586  00FFAD  42                 	db	66	;'B'
   587  00FFAE  41                 	db	65	;'A'
   588  00FFAF  44                 	db	68	;'D'
   589  00FFB0  20                 	db	32
   590  00FFB1  42                 	db	66	;'B'
   591  00FFB2  54                 	db	84	;'T'
   592  00FFB3  4C                 	db	76	;'L'
   593  00FFB4  43                 	db	67	;'C'
   594  00FFB5  4E                 	db	78	;'N'
   595  00FFB6  54                 	db	84	;'T'
   596  00FFB7  00                 	db	0
   597  00FFB8                     STR_21:
   598  00FFB8  45                 	db	69	;'E'
   599  00FFB9  4D                 	db	77	;'M'
   600  00FFBA  45                 	db	69	;'E'
   601  00FFBB  52                 	db	82	;'R'
   602  00FFBC  47                 	db	71	;'G'
   603  00FFBD  45                 	db	69	;'E'
   604  00FFBE  4E                 	db	78	;'N'
   605  00FFBF  43                 	db	67	;'C'
   606  00FFC0  59                 	db	89	;'Y'
   607  00FFC1  20                 	db	32
   608  00FFC2  53                 	db	83	;'S'
   609  00FFC3  54                 	db	84	;'T'
   610  00FFC4  4F                 	db	79	;'O'
   611  00FFC5  50                 	db	80	;'P'
   612  00FFC6  00                 	db	0
   613  00FFC7                     STR_5:
   614  00FFC7  45                 	db	69	;'E'
   615  00FFC8  52                 	db	82	;'R'
   616  00FFC9  52                 	db	82	;'R'
   617  00FFCA  3A                 	db	58	;':'
   618  00FFCB  20                 	db	32
   619  00FFCC  42                 	db	66	;'B'
   620  00FFCD  41                 	db	65	;'A'
   621  00FFCE  44                 	db	68	;'D'
   622  00FFCF  20                 	db	32
   623  00FFD0  49                 	db	73	;'I'
   624  00FFD1  53                 	db	83	;'S'
   625  00FFD2  52                 	db	82	;'R'
   626  00FFD3  00                 	db	0
   627  00FFD4                     STR_19:
   628  00FFD4  20                 	db	32
   629  00FFD5  20                 	db	32
   630  00FFD6  20                 	db	32
   631  00FFD7  20                 	db	32
   632  00FFD8  25                 	db	37
   633  00FFD9  64                 	db	100	;'d'
   634  00FFDA  2C                 	db	44
   635  00FFDB  20                 	db	32
   636  00FFDC  25                 	db	37
   637  00FFDD  64                 	db	100	;'d'
   638  00FFDE  00                 	db	0
   639  00FFDF                     STR_7:
   640  00FFDF  25                 	db	37
   641  00FFE0  64                 	db	100	;'d'
   642  00FFE1  20                 	db	32
   643  00FFE2  20                 	db	32
   644  00FFE3  20                 	db	32
   645  00FFE4  20                 	db	32
   646  00FFE5  20                 	db	32
   647  00FFE6  20                 	db	32
   648  00FFE7  00                 	db	0
   649  00FFE8                     STR_1:
   650  00FFE8  72                 	db	114	;'r'
   651  00FFE9  75                 	db	117	;'u'
   652  00FFEA  6E                 	db	110	;'n'
   653  00FFEB  6E                 	db	110	;'n'
   654  00FFEC  69                 	db	105	;'i'
   655  00FFED  6E                 	db	110	;'n'
   656  00FFEE  67                 	db	103	;'g'
   657  00FFEF  00                 	db	0
   658  00FFF0                     STR_6:
   659  00FFF0  73                 	db	115	;'s'
   660  00FFF1  74                 	db	116	;'t'
   661  00FFF2  61                 	db	97	;'a'
   662  00FFF3  6E                 	db	110	;'n'
   663  00FFF4  64                 	db	100	;'d'
   664  00FFF5  62                 	db	98	;'b'
   665  00FFF6  79                 	db	121	;'y'
   666  00FFF7  00                 	db	0
   667  00FFF8                     STR_4:
   668  00FFF8  64                 	db	100	;'d'
   669  00FFF9  65                 	db	101	;'e'
   670  00FFFA  62                 	db	98	;'b'
   671  00FFFB  75                 	db	117	;'u'
   672  00FFFC  67                 	db	103	;'g'
   673  00FFFD  31                 	db	49	;'1'
   674  00FFFE  00                 	db	0
   675                           
   676                           ; #config settings
   677  00FFFF  00                 	db	0	; dummy byte at the end
   678  0000                     
   679                           	psect	cinit
   680  002EA0                     __pcinit:
   681                           	opt stack 0
   682  002EA0                     start_initialization:
   683                           	opt stack 0
   684  002EA0                     __initialization:
   685                           	opt stack 0
   686                           
   687                           ; Initialize objects allocated to BANK0 (2 bytes)
   688                           ; load TBLPTR registers with __pidataBANK0
   689  002EA0  0E34               	movlw	low __pidataBANK0
   690  002EA2  6EF6               	movwf	tblptrl,c
   691  002EA4  0E31               	movlw	high __pidataBANK0
   692  002EA6  6EF7               	movwf	tblptrh,c
   693  002EA8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   694  002EAA  6EF8               	movwf	tblptru,c
   695  002EAC  0009               	tblrd		*+	;fetch initializer
   696  002EAE  CFF5 F0ED          	movff	tablat,__pdataBANK0
   697  002EB2  0009               	tblrd		*+	;fetch initializer
   698  002EB4  CFF5 F0EE          	movff	tablat,__pdataBANK0+1
   699                           
   700                           ; Clear objects allocated to BANK0 (62 bytes)
   701  002EB8  EE00  F080         	lfsr	0,__pbssBANK0
   702  002EBC  0E3E               	movlw	62
   703  002EBE                     clear_0:
   704  002EBE  6AEE               	clrf	postinc0,c
   705  002EC0  06E8               	decf	wreg,f,c
   706  002EC2  E1FD               	bnz	clear_0
   707                           
   708                           ; Clear objects allocated to COMRAM (8 bytes)
   709  002EC4  EE00  F076         	lfsr	0,__pbssCOMRAM
   710  002EC8  0E08               	movlw	8
   711  002ECA                     clear_1:
   712  002ECA  6AEE               	clrf	postinc0,c
   713  002ECC  06E8               	decf	wreg,f,c
   714  002ECE  E1FD               	bnz	clear_1
   715  002ED0                     end_of_initialization:
   716                           	opt stack 0
   717  002ED0                     __end_of__initialization:
   718                           	opt stack 0
   719  002ED0  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   720  002ED2  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   721  002ED4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   722  002ED6  6EF8               	movwf	tblptru,c
   723  002ED8  0100               	movlb	0
   724  002EDA  EFBF  F00E         	goto	_main	;jump to C main() function
   725                           tblptru	equ	0xFF8
   726                           tblptrh	equ	0xFF7
   727                           tblptrl	equ	0xFF6
   728                           tablat	equ	0xFF5
   729                           postinc0	equ	0xFEE
   730                           wreg	equ	0xFE8
   731                           
   732                           	psect	bssCOMRAM
   733  000076                     __pbssCOMRAM:
   734                           	opt stack 0
   735  000076                     _end_time:
   736                           	opt stack 0
   737  000076                     	ds	2
   738  000078                     _etime:
   739                           	opt stack 0
   740  000078                     	ds	2
   741  00007A                     _start_time:
   742                           	opt stack 0
   743  00007A                     	ds	2
   744  00007C                     _stime:
   745                           	opt stack 0
   746  00007C                     	ds	2
   747                           tblptru	equ	0xFF8
   748                           tblptrh	equ	0xFF7
   749                           tblptrl	equ	0xFF6
   750                           tablat	equ	0xFF5
   751                           postinc0	equ	0xFEE
   752                           wreg	equ	0xFE8
   753                           
   754                           	psect	bssBANK0
   755  000080                     __pbssBANK0:
   756                           	opt stack 0
   757  000080                     _bottle_count_array:
   758                           	opt stack 0
   759  000080                     	ds	10
   760  00008A                     _color:
   761                           	opt stack 0
   762  00008A                     	ds	8
   763  000092                     _colorprev:
   764                           	opt stack 0
   765  000092                     	ds	8
   766  00009A                     _time:
   767                           	opt stack 0
   768  00009A                     	ds	7
   769  0000A1                     _testint:
   770                           	opt stack 0
   771  0000A1                     	ds	6
   772  0000A7                     _bottle_read_bot:
   773                           	opt stack 0
   774  0000A7                     	ds	2
   775  0000A9                     _bottle_read_top:
   776                           	opt stack 0
   777  0000A9                     	ds	2
   778  0000AB                     _errno:
   779                           	opt stack 0
   780  0000AB                     	ds	2
   781  0000AD                     _flag_bottle:
   782                           	opt stack 0
   783  0000AD                     	ds	2
   784  0000AF                     _flag_bottle_high:
   785                           	opt stack 0
   786  0000AF                     	ds	2
   787  0000B1                     _flag_picbug:
   788                           	opt stack 0
   789  0000B1                     	ds	2
   790  0000B3                     _flag_top_read:
   791                           	opt stack 0
   792  0000B3                     	ds	2
   793  0000B5                     _flag_yopNC:
   794                           	opt stack 0
   795  0000B5                     	ds	2
   796  0000B7                     _operation_disp:
   797                           	opt stack 0
   798  0000B7                     	ds	2
   799  0000B9                     _operation_time:
   800                           	opt stack 0
   801  0000B9                     	ds	2
   802  0000BB                     _testflag:
   803                           	opt stack 0
   804  0000BB                     	ds	2
   805  0000BD                     _curr_state:
   806                           	opt stack 0
   807  0000BD                     	ds	1
   808                           tblptru	equ	0xFF8
   809                           tblptrh	equ	0xFF7
   810                           tblptrl	equ	0xFF6
   811                           tablat	equ	0xFF5
   812                           postinc0	equ	0xFEE
   813                           wreg	equ	0xFE8
   814                           
   815                           	psect	dataBANK0
   816  0000ED                     __pdataBANK0:
   817                           	opt stack 0
   818  0000ED                     _bottle_count_disp:
   819                           	opt stack 0
   820  0000ED                     	ds	2
   821                           tblptru	equ	0xFF8
   822                           tblptrh	equ	0xFF7
   823                           tblptrl	equ	0xFF6
   824                           tablat	equ	0xFF5
   825                           postinc0	equ	0xFEE
   826                           wreg	equ	0xFE8
   827                           
   828                           	psect	cstackBANK1
   829  000100                     __pcstackBANK1:
   830                           	opt stack 0
   831  000100                     printf@idx:
   832                           	opt stack 0
   833  000100                     ___ftge@ff1:
   834                           	opt stack 0
   835                           
   836                           ; 3 bytes @ 0x0
   837  000100                     	ds	1
   838  000101                     printf@ap:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x1
   842  000101                     	ds	2
   843  000103                     printf@prec:
   844                           	opt stack 0
   845  000103                     ___ftge@ff2:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0x3
   849  000103                     	ds	1
   850  000104                     printf@val:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x4
   854  000104                     	ds	2
   855  000106                     printf@flag:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x6
   859  000106                     	ds	1
   860  000107                     printf@width:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x7
   864  000107                     	ds	2
   865  000109                     printf@c:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x9
   869  000109                     	ds	1
   870  00010A                     operation@i:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0xA
   874  00010A                     	ds	2
   875                           tblptru	equ	0xFF8
   876                           tblptrh	equ	0xFF7
   877                           tblptrl	equ	0xFF6
   878                           tablat	equ	0xFF5
   879                           postinc0	equ	0xFEE
   880                           wreg	equ	0xFE8
   881                           
   882                           	psect	cstackBANK0
   883  0000BE                     __pcstackBANK0:
   884                           	opt stack 0
   885  0000BE                     ??_isr:
   886                           
   887                           ; 1 bytes @ 0x0
   888  0000BE                     	ds	16
   889  0000CE                     ??_isdigit:
   890  0000CE                     ??_I2C_Master_Wait:
   891  0000CE                     ?___wmul:
   892                           	opt stack 0
   893  0000CE                     ?___awmod:
   894                           	opt stack 0
   895  0000CE                     ?___lwdiv:
   896                           	opt stack 0
   897  0000CE                     ?___ftpack:
   898                           	opt stack 0
   899  0000CE                     ?___lldiv:
   900                           	opt stack 0
   901  0000CE                     lcdNibble@temp:
   902                           	opt stack 0
   903  0000CE                     servo_rotate0@degree:
   904                           	opt stack 0
   905  0000CE                     servo_rotate1@degree:
   906                           	opt stack 0
   907  0000CE                     ___wmul@multiplier:
   908                           	opt stack 0
   909  0000CE                     ___awmod@dividend:
   910                           	opt stack 0
   911  0000CE                     ___lwdiv@dividend:
   912                           	opt stack 0
   913  0000CE                     ___ftpack@arg:
   914                           	opt stack 0
   915  0000CE                     ___lldiv@dividend:
   916                           	opt stack 0
   917                           
   918                           ; 4 bytes @ 0x10
   919  0000CE                     	ds	1
   920  0000CF                     I2C_Master_Read@a:
   921                           	opt stack 0
   922  0000CF                     lcdNibble@data:
   923                           	opt stack 0
   924  0000CF                     _isdigit$806:
   925                           	opt stack 0
   926  0000CF                     I2C_Master_Write@d:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x11
   930  0000CF                     	ds	1
   931  0000D0                     ??_servo_rotate1:
   932  0000D0                     ??_servo_rotate0:
   933  0000D0                     I2C_Master_Read@temp:
   934                           	opt stack 0
   935  0000D0                     lcdInst@data:
   936                           	opt stack 0
   937  0000D0                     putch@data:
   938                           	opt stack 0
   939  0000D0                     isdigit@c:
   940                           	opt stack 0
   941  0000D0                     ___wmul@multiplicand:
   942                           	opt stack 0
   943  0000D0                     ___awmod@divisor:
   944                           	opt stack 0
   945  0000D0                     ___lwdiv@divisor:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x12
   949  0000D0                     	ds	1
   950  0000D1                     ??_read_colorsensor:
   951  0000D1                     ??_I2C_ColorSens_Init:
   952  0000D1                     ??_initLCD:
   953  0000D1                     ___ftpack@exp:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x13
   957  0000D1                     	ds	1
   958  0000D2                     ___awmod@counter:
   959                           	opt stack 0
   960  0000D2                     ___ftpack@sign:
   961                           	opt stack 0
   962  0000D2                     ___lwdiv@counter:
   963                           	opt stack 0
   964  0000D2                     servo_rotate0@duty:
   965                           	opt stack 0
   966  0000D2                     servo_rotate1@duty:
   967                           	opt stack 0
   968  0000D2                     ___wmul@product:
   969                           	opt stack 0
   970  0000D2                     ___lldiv@divisor:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x14
   974  0000D2                     	ds	1
   975  0000D3                     ??___ftpack:
   976  0000D3                     ___awmod@sign:
   977                           	opt stack 0
   978  0000D3                     ___lwdiv@quotient:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x15
   982  0000D3                     	ds	1
   983  0000D4                     servo_rotate0@i:
   984                           	opt stack 0
   985  0000D4                     servo_rotate1@i:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x16
   989  0000D4                     	ds	1
   990  0000D5                     ?___lwmod:
   991                           	opt stack 0
   992  0000D5                     ___lwmod@dividend:
   993                           	opt stack 0
   994  0000D5                     read_colorsensor@color_low:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0x17
   998  0000D5                     	ds	1
   999  0000D6                     ?___awtoft:
  1000                           	opt stack 0
  1001  0000D6                     servo_rotate0@j:
  1002                           	opt stack 0
  1003  0000D6                     servo_rotate1@j:
  1004                           	opt stack 0
  1005  0000D6                     ___awtoft@c:
  1006                           	opt stack 0
  1007  0000D6                     ___lldiv@quotient:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x18
  1011  0000D6                     	ds	1
  1012  0000D7                     ___lwmod@divisor:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x19
  1016  0000D7                     	ds	2
  1017  0000D9                     ___awtoft@sign:
  1018                           	opt stack 0
  1019  0000D9                     ___lwmod@counter:
  1020                           	opt stack 0
  1021  0000D9                     read_colorsensor@color_high:
  1022                           	opt stack 0
  1023                           
  1024                           ; 4 bytes @ 0x1B
  1025  0000D9                     	ds	1
  1026  0000DA                     ?_printf:
  1027                           	opt stack 0
  1028  0000DA                     ?___ftmul:
  1029                           	opt stack 0
  1030  0000DA                     ___lldiv@counter:
  1031                           	opt stack 0
  1032  0000DA                     printf@f:
  1033                           	opt stack 0
  1034  0000DA                     ___ftmul@f1:
  1035                           	opt stack 0
  1036                           
  1037                           ; 3 bytes @ 0x1C
  1038  0000DA                     	ds	1
  1039  0000DB                     I2C_Master_Init@c:
  1040                           	opt stack 0
  1041                           
  1042                           ; 4 bytes @ 0x1D
  1043  0000DB                     	ds	2
  1044  0000DD                     read_colorsensor@i:
  1045                           	opt stack 0
  1046  0000DD                     ___ftmul@f2:
  1047                           	opt stack 0
  1048                           
  1049                           ; 3 bytes @ 0x1F
  1050  0000DD                     	ds	2
  1051  0000DF                     ??_I2C_Master_Init:
  1052                           
  1053                           ; 1 bytes @ 0x21
  1054  0000DF                     	ds	1
  1055  0000E0                     ??___ftmul:
  1056                           
  1057                           ; 1 bytes @ 0x22
  1058  0000E0                     	ds	2
  1059  0000E2                     ??_printf:
  1060                           
  1061                           ; 1 bytes @ 0x24
  1062  0000E2                     	ds	1
  1063  0000E3                     ___ftmul@exp:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x25
  1067  0000E3                     	ds	1
  1068  0000E4                     ___ftmul@f3_as_product:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0x26
  1072  0000E4                     	ds	2
  1073  0000E6                     ??_standby:
  1074  0000E6                     ??_date_time:
  1075  0000E6                     ??_bottle_count:
  1076  0000E6                     
  1077                           ; 1 bytes @ 0x28
  1078  0000E6                     	ds	1
  1079  0000E7                     ___ftmul@cntr:
  1080                           	opt stack 0
  1081                           
  1082                           ; 1 bytes @ 0x29
  1083  0000E7                     	ds	1
  1084  0000E8                     date_time@i:
  1085                           	opt stack 0
  1086  0000E8                     ___ftmul@sign:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x2A
  1090  0000E8                     	ds	1
  1091  0000E9                     ??___ftge:
  1092                           
  1093                           ; 1 bytes @ 0x2B
  1094  0000E9                     	ds	3
  1095  0000EC                     ??_operation:
  1096                           
  1097                           ; 1 bytes @ 0x2E
  1098  0000EC                     	ds	1
  1099  0000ED                     tblptru	equ	0xFF8
  1100                           tblptrh	equ	0xFF7
  1101                           tblptrl	equ	0xFF6
  1102                           tablat	equ	0xFF5
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           
  1106                           ; 1 bytes @ 0x2F
  1107                           
  1108                           	psect	cstackCOMRAM
  1109  000001                     __pcstackCOMRAM:
  1110                           	opt stack 0
  1111  000001                     ??i2_I2C_Master_Wait:
  1112  000001                     ??i2_isdigit:
  1113  000001                     ?___awdiv:
  1114                           	opt stack 0
  1115  000001                     ?i2___wmul:
  1116                           	opt stack 0
  1117  000001                     ?i2___lwdiv:
  1118                           	opt stack 0
  1119  000001                     ?_frexp:
  1120                           	opt stack 0
  1121  000001                     ?___ftneg:
  1122                           	opt stack 0
  1123  000001                     ?i2___ftpack:
  1124                           	opt stack 0
  1125  000001                     i2lcdNibble@temp:
  1126                           	opt stack 0
  1127  000001                     ___awdiv@dividend:
  1128                           	opt stack 0
  1129  000001                     i2servo_rotate1@degree:
  1130                           	opt stack 0
  1131  000001                     i2___wmul@multiplier:
  1132                           	opt stack 0
  1133  000001                     i2___lwdiv@dividend:
  1134                           	opt stack 0
  1135  000001                     ___ftneg@f1:
  1136                           	opt stack 0
  1137  000001                     frexp@value:
  1138                           	opt stack 0
  1139  000001                     i2___ftpack@arg:
  1140                           	opt stack 0
  1141  000001                     i2___ftge@ff1:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x0
  1145  000001                     	ds	1
  1146  000002                     i2I2C_Master_Read@a:
  1147                           	opt stack 0
  1148  000002                     i2lcdNibble@data:
  1149                           	opt stack 0
  1150  000002                     i2_isdigit$806:
  1151                           	opt stack 0
  1152  000002                     i2I2C_Master_Write@d:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x1
  1156  000002                     	ds	1
  1157  000003                     ??i2_servo_rotate1:
  1158  000003                     i2I2C_Master_Read@temp:
  1159                           	opt stack 0
  1160  000003                     i2lcdInst@data:
  1161                           	opt stack 0
  1162  000003                     i2putch@data:
  1163                           	opt stack 0
  1164  000003                     i2isdigit@c:
  1165                           	opt stack 0
  1166  000003                     ___awdiv@divisor:
  1167                           	opt stack 0
  1168  000003                     i2___wmul@multiplicand:
  1169                           	opt stack 0
  1170  000003                     i2___lwdiv@divisor:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x2
  1174  000003                     	ds	1
  1175  000004                     ??i2_read_colorsensor:
  1176  000004                     read_time@i:
  1177                           	opt stack 0
  1178  000004                     i2___ftpack@exp:
  1179                           	opt stack 0
  1180  000004                     frexp@eptr:
  1181                           	opt stack 0
  1182  000004                     i2___ftge@ff2:
  1183                           	opt stack 0
  1184                           
  1185                           ; 3 bytes @ 0x3
  1186  000004                     	ds	1
  1187  000005                     ___awdiv@counter:
  1188                           	opt stack 0
  1189  000005                     i2___ftpack@sign:
  1190                           	opt stack 0
  1191  000005                     i2servo_rotate1@duty:
  1192                           	opt stack 0
  1193  000005                     i2___wmul@product:
  1194                           	opt stack 0
  1195  000005                     i2___lwdiv@quotient:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x4
  1199  000005                     	ds	1
  1200  000006                     ??_frexp:
  1201  000006                     ??i2___ftpack:
  1202  000006                     ___awdiv@sign:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x5
  1206  000006                     	ds	1
  1207  000007                     ??i2___ftge:
  1208  000007                     i2___lwdiv@counter:
  1209                           	opt stack 0
  1210  000007                     ___awdiv@quotient:
  1211                           	opt stack 0
  1212  000007                     i2servo_rotate1@i:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x6
  1216  000007                     	ds	1
  1217  000008                     ?i2___lwmod:
  1218                           	opt stack 0
  1219  000008                     i2___lwmod@dividend:
  1220                           	opt stack 0
  1221  000008                     i2read_colorsensor@color_low:
  1222                           	opt stack 0
  1223                           
  1224                           ; 4 bytes @ 0x7
  1225  000008                     	ds	1
  1226  000009                     ?___ftdiv:
  1227                           	opt stack 0
  1228  000009                     ?___lltoft:
  1229                           	opt stack 0
  1230  000009                     ?i2___awtoft:
  1231                           	opt stack 0
  1232  000009                     i2servo_rotate1@j:
  1233                           	opt stack 0
  1234  000009                     i2___awtoft@c:
  1235                           	opt stack 0
  1236  000009                     ___ftdiv@f1:
  1237                           	opt stack 0
  1238  000009                     ___lltoft@c:
  1239                           	opt stack 0
  1240                           
  1241                           ; 4 bytes @ 0x8
  1242  000009                     	ds	1
  1243  00000A                     i2___lwmod@divisor:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x9
  1247  00000A                     	ds	2
  1248  00000C                     i2___awtoft@sign:
  1249                           	opt stack 0
  1250  00000C                     i2___lwmod@counter:
  1251                           	opt stack 0
  1252  00000C                     ___ftdiv@f2:
  1253                           	opt stack 0
  1254  00000C                     i2read_colorsensor@color_high:
  1255                           	opt stack 0
  1256                           
  1257                           ; 4 bytes @ 0xB
  1258  00000C                     	ds	1
  1259  00000D                     ??___lltoft:
  1260  00000D                     ?i2_printf:
  1261                           	opt stack 0
  1262  00000D                     ?i2___ftmul:
  1263                           	opt stack 0
  1264  00000D                     i2printf@f:
  1265                           	opt stack 0
  1266  00000D                     i2___ftmul@f1:
  1267                           	opt stack 0
  1268                           
  1269                           ; 3 bytes @ 0xC
  1270  00000D                     	ds	2
  1271  00000F                     ??___ftdiv:
  1272                           
  1273                           ; 1 bytes @ 0xE
  1274  00000F                     	ds	1
  1275  000010                     i2read_colorsensor@i:
  1276                           	opt stack 0
  1277  000010                     i2___ftmul@f2:
  1278                           	opt stack 0
  1279                           
  1280                           ; 3 bytes @ 0xF
  1281  000010                     	ds	1
  1282  000011                     ___lltoft@exp:
  1283                           	opt stack 0
  1284                           
  1285                           ; 1 bytes @ 0x10
  1286  000011                     	ds	1
  1287  000012                     ___ftdiv@cntr:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x11
  1291  000012                     	ds	1
  1292  000013                     ??i2_printf:
  1293  000013                     ??i2___ftmul:
  1294  000013                     ___ftdiv@f3:
  1295                           	opt stack 0
  1296                           
  1297                           ; 3 bytes @ 0x12
  1298  000013                     	ds	3
  1299  000016                     ___ftdiv@exp:
  1300                           	opt stack 0
  1301  000016                     i2___ftmul@exp:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0x15
  1305  000016                     	ds	1
  1306  000017                     ___ftdiv@sign:
  1307                           	opt stack 0
  1308  000017                     i2printf@idx:
  1309                           	opt stack 0
  1310  000017                     i2___ftmul@f3_as_product:
  1311                           	opt stack 0
  1312                           
  1313                           ; 3 bytes @ 0x16
  1314  000017                     	ds	1
  1315  000018                     i2printf@ap:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x17
  1319  000018                     	ds	2
  1320  00001A                     i2printf@prec:
  1321                           	opt stack 0
  1322  00001A                     i2___ftmul@cntr:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x19
  1326  00001A                     	ds	1
  1327  00001B                     i2___ftmul@sign:
  1328                           	opt stack 0
  1329  00001B                     i2printf@val:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x1A
  1333  00001B                     	ds	1
  1334  00001C                     ?___ftadd:
  1335                           	opt stack 0
  1336  00001C                     ___ftadd@f1:
  1337                           	opt stack 0
  1338                           
  1339                           ; 3 bytes @ 0x1B
  1340  00001C                     	ds	1
  1341  00001D                     i2printf@flag:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x1C
  1345  00001D                     	ds	1
  1346  00001E                     i2printf@width:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x1D
  1350  00001E                     	ds	1
  1351  00001F                     ___ftadd@f2:
  1352                           	opt stack 0
  1353                           
  1354                           ; 3 bytes @ 0x1E
  1355  00001F                     	ds	1
  1356  000020                     i2printf@c:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x1F
  1360  000020                     	ds	2
  1361  000022                     ??___ftadd:
  1362                           
  1363                           ; 1 bytes @ 0x21
  1364  000022                     	ds	3
  1365  000025                     ___ftadd@sign:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x24
  1369  000025                     	ds	1
  1370  000026                     ___ftadd@exp2:
  1371                           	opt stack 0
  1372                           
  1373                           ; 1 bytes @ 0x25
  1374  000026                     	ds	1
  1375  000027                     ___ftadd@exp1:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x26
  1379  000027                     	ds	1
  1380  000028                     ?___ftsub:
  1381                           	opt stack 0
  1382  000028                     ?_eval_poly:
  1383                           	opt stack 0
  1384  000028                     ?___fttol:
  1385                           	opt stack 0
  1386  000028                     ___ftsub@f1:
  1387                           	opt stack 0
  1388  000028                     ___fttol@f1:
  1389                           	opt stack 0
  1390  000028                     eval_poly@x:
  1391                           	opt stack 0
  1392                           
  1393                           ; 3 bytes @ 0x27
  1394  000028                     	ds	3
  1395  00002B                     eval_poly@d:
  1396                           	opt stack 0
  1397  00002B                     ___ftsub@f2:
  1398                           	opt stack 0
  1399                           
  1400                           ; 3 bytes @ 0x2A
  1401  00002B                     	ds	1
  1402  00002C                     ??___fttol:
  1403                           
  1404                           ; 1 bytes @ 0x2B
  1405  00002C                     	ds	1
  1406  00002D                     eval_poly@n:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x2C
  1410  00002D                     	ds	1
  1411  00002E                     
  1412                           ; 1 bytes @ 0x2D
  1413  00002E                     	ds	1
  1414  00002F                     ??_eval_poly:
  1415                           
  1416                           ; 1 bytes @ 0x2E
  1417  00002F                     	ds	2
  1418  000031                     ___fttol@sign1:
  1419                           	opt stack 0
  1420  000031                     eval_poly@res:
  1421                           	opt stack 0
  1422                           
  1423                           ; 3 bytes @ 0x30
  1424  000031                     	ds	1
  1425  000032                     ___fttol@lval:
  1426                           	opt stack 0
  1427                           
  1428                           ; 4 bytes @ 0x31
  1429  000032                     	ds	2
  1430  000034                     ?_log:
  1431                           	opt stack 0
  1432  000034                     ?_ldexp:
  1433                           	opt stack 0
  1434  000034                     ldexp@value:
  1435                           	opt stack 0
  1436  000034                     log@x:
  1437                           	opt stack 0
  1438                           
  1439                           ; 3 bytes @ 0x33
  1440  000034                     	ds	2
  1441  000036                     ___fttol@exp1:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x35
  1445  000036                     	ds	1
  1446  000037                     ?___altoft:
  1447                           	opt stack 0
  1448  000037                     ldexp@newexp:
  1449                           	opt stack 0
  1450  000037                     log@exponent:
  1451                           	opt stack 0
  1452  000037                     ___altoft@c:
  1453                           	opt stack 0
  1454                           
  1455                           ; 4 bytes @ 0x36
  1456  000037                     	ds	2
  1457  000039                     ??_ldexp:
  1458                           
  1459                           ; 1 bytes @ 0x38
  1460  000039                     	ds	2
  1461  00003B                     ??___altoft:
  1462                           
  1463                           ; 1 bytes @ 0x3A
  1464  00003B                     	ds	4
  1465  00003F                     ___altoft@exp:
  1466                           	opt stack 0
  1467                           
  1468                           ; 1 bytes @ 0x3E
  1469  00003F                     	ds	1
  1470  000040                     ___altoft@sign:
  1471                           	opt stack 0
  1472                           
  1473                           ; 1 bytes @ 0x3F
  1474  000040                     	ds	1
  1475  000041                     ?_floor:
  1476                           	opt stack 0
  1477  000041                     floor@x:
  1478                           	opt stack 0
  1479                           
  1480                           ; 3 bytes @ 0x40
  1481  000041                     	ds	3
  1482  000044                     floor@i:
  1483                           	opt stack 0
  1484                           
  1485                           ; 3 bytes @ 0x43
  1486  000044                     	ds	3
  1487  000047                     floor@expon:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x46
  1491  000047                     	ds	2
  1492  000049                     ?_exp:
  1493                           	opt stack 0
  1494  000049                     exp@x:
  1495                           	opt stack 0
  1496                           
  1497                           ; 3 bytes @ 0x48
  1498  000049                     	ds	3
  1499  00004C                     _exp$1249:
  1500                           	opt stack 0
  1501                           
  1502                           ; 3 bytes @ 0x4B
  1503  00004C                     	ds	3
  1504  00004F                     exp@exponent:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x4E
  1508  00004F                     	ds	2
  1509  000051                     exp@sign:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x50
  1513  000051                     	ds	1
  1514  000052                     ?_pow:
  1515                           	opt stack 0
  1516  000052                     pow@x:
  1517                           	opt stack 0
  1518                           
  1519                           ; 3 bytes @ 0x51
  1520  000052                     	ds	3
  1521  000055                     pow@y:
  1522                           	opt stack 0
  1523                           
  1524                           ; 3 bytes @ 0x54
  1525  000055                     	ds	3
  1526  000058                     _pow$1380:
  1527                           	opt stack 0
  1528                           
  1529                           ; 3 bytes @ 0x57
  1530  000058                     	ds	3
  1531  00005B                     _pow$1381:
  1532                           	opt stack 0
  1533                           
  1534                           ; 3 bytes @ 0x5A
  1535  00005B                     	ds	3
  1536  00005E                     pow@sign:
  1537                           	opt stack 0
  1538                           
  1539                           ; 1 bytes @ 0x5D
  1540  00005E                     	ds	1
  1541  00005F                     pow@yi:
  1542                           	opt stack 0
  1543                           
  1544                           ; 4 bytes @ 0x5E
  1545  00005F                     	ds	4
  1546  000063                     ?_dec_to_hex:
  1547                           	opt stack 0
  1548  000063                     dec_to_hex@num:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x62
  1552  000063                     	ds	2
  1553  000065                     _dec_to_hex$1378:
  1554                           	opt stack 0
  1555                           
  1556                           ; 3 bytes @ 0x64
  1557  000065                     	ds	3
  1558  000068                     _dec_to_hex$1379:
  1559                           	opt stack 0
  1560                           
  1561                           ; 3 bytes @ 0x67
  1562  000068                     	ds	3
  1563  00006B                     dec_to_hex@temp:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x6A
  1567  00006B                     	ds	2
  1568  00006D                     dec_to_hex@i:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x6C
  1572  00006D                     	ds	2
  1573  00006F                     dec_to_hex@hexnum:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x6E
  1577  00006F                     	ds	2
  1578  000071                     dec_to_hex@quotient:
  1579                           	opt stack 0
  1580                           
  1581                           ; 2 bytes @ 0x70
  1582  000071                     	ds	2
  1583  000073                     isr@i:
  1584                           	opt stack 0
  1585                           
  1586                           ; 1 bytes @ 0x72
  1587  000073                     	ds	1
  1588  000074                     _isr$1377:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x73
  1592  000074                     	ds	2
  1593                           tblptru	equ	0xFF8
  1594                           tblptrh	equ	0xFF7
  1595                           tblptrl	equ	0xFF6
  1596                           tablat	equ	0xFF5
  1597                           postinc0	equ	0xFEE
  1598                           wreg	equ	0xFE8
  1599                           
  1600 ;;
  1601 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1602 ;;
  1603 ;; *************** function _main *****************
  1604 ;; Defined at:
  1605 ;;		line 16 in file "main.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;		None
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  1    wreg      void 
  1612 ;; Registers used:
  1613 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;Total ram usage:        0 bytes
  1624 ;; Hardware stack levels required when called:   11
  1625 ;; This function calls:
  1626 ;;		_I2C_ColorSens_Init
  1627 ;;		_I2C_Master_Init
  1628 ;;		_I2C_Master_Start
  1629 ;;		_I2C_Master_Stop
  1630 ;;		_I2C_Master_Write
  1631 ;;		_bottle_count
  1632 ;;		_bottle_time
  1633 ;;		_date_time
  1634 ;;		_emergencystop
  1635 ;;		_initLCD
  1636 ;;		_operation
  1637 ;;		_operationend
  1638 ;;		_standby
  1639 ;; This function is called by:
  1640 ;;		Startup code after reset
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text0
  1645  001D7E                     __ptext0:
  1646                           	opt stack 0
  1647  001D7E                     _main:
  1648                           	opt stack 20
  1649                           
  1650                           ;main.c: 23: TRISA = 0b11111011;
  1651                           
  1652                           ;incstack = 0
  1653  001D7E  0EFB               	movlw	251
  1654  001D80  6E92               	movwf	3986,c	;volatile
  1655                           
  1656                           ;main.c: 24: TRISB = 0xFF;
  1657  001D82  6893               	setf	3987,c	;volatile
  1658                           
  1659                           ;main.c: 25: TRISC = 0x00;
  1660  001D84  0E00               	movlw	0
  1661  001D86  6E94               	movwf	3988,c	;volatile
  1662                           
  1663                           ;main.c: 26: TRISD = 0x00;
  1664  001D88  0E00               	movlw	0
  1665  001D8A  6E95               	movwf	3989,c	;volatile
  1666                           
  1667                           ;main.c: 27: TRISE = 0x00;
  1668  001D8C  0E00               	movlw	0
  1669  001D8E  6E96               	movwf	3990,c	;volatile
  1670                           
  1671                           ;main.c: 29: LATA = 0x00;
  1672  001D90  0E00               	movlw	0
  1673  001D92  6E89               	movwf	3977,c	;volatile
  1674                           
  1675                           ;main.c: 30: LATB = 0x00;
  1676  001D94  0E00               	movlw	0
  1677  001D96  6E8A               	movwf	3978,c	;volatile
  1678                           
  1679                           ;main.c: 31: LATC = 0x00;
  1680  001D98  0E00               	movlw	0
  1681  001D9A  6E8B               	movwf	3979,c	;volatile
  1682                           
  1683                           ;main.c: 32: LATD = 0x00;
  1684  001D9C  0E00               	movlw	0
  1685  001D9E  6E8C               	movwf	3980,c	;volatile
  1686                           
  1687                           ;main.c: 33: LATE = 0x00;
  1688  001DA0  0E00               	movlw	0
  1689  001DA2  6E8D               	movwf	3981,c	;volatile
  1690                           
  1691                           ;main.c: 35: ADCON0 = 0x00;
  1692  001DA4  0E00               	movlw	0
  1693  001DA6  6EC2               	movwf	4034,c	;volatile
  1694                           
  1695                           ;main.c: 36: ADCON1 = 0xFF;
  1696  001DA8  68C1               	setf	4033,c	;volatile
  1697                           
  1698                           ;main.c: 39: GIE = 1;
  1699  001DAA  8EF2               	bsf	intcon,7,c	;volatile
  1700                           
  1701                           ;main.c: 40: INT1IE = 1;
  1702  001DAC  86F0               	bsf	intcon3,3,c	;volatile
  1703                           
  1704                           ;main.c: 41: INT0IE = 0;
  1705  001DAE  98F2               	bcf	intcon,4,c	;volatile
  1706                           
  1707                           ;main.c: 42: INT2IE = 0;
  1708  001DB0  98F0               	bcf	intcon3,4,c	;volatile
  1709                           
  1710                           ;main.c: 44: nRBPU = 0;
  1711  001DB2  9EF1               	bcf	intcon2,7,c	;volatile
  1712                           
  1713                           ;main.c: 46: initLCD();
  1714  001DB4  EC9E  F016         	call	_initLCD	;wreg free
  1715                           
  1716                           ;main.c: 47: I2C_Master_Init(10000);
  1717  001DB8  0E10               	movlw	16
  1718  001DBA  0100               	movlb	0	; () banked
  1719  001DBC  6FDB               	movwf	I2C_Master_Init@c& (0+255),b
  1720  001DBE  0E27               	movlw	39
  1721  001DC0  6FDC               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1722  001DC2  0E00               	movlw	0
  1723  001DC4  6FDD               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1724  001DC6  0E00               	movlw	0
  1725  001DC8  6FDE               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1726  001DCA  ECEC  F015         	call	_I2C_Master_Init	;wreg free
  1727                           
  1728                           ;main.c: 48: I2C_ColorSens_Init();
  1729  001DCE  EC17  F010         	call	_I2C_ColorSens_Init	;wreg free
  1730                           
  1731                           ;main.c: 50: I2C_Master_Start();
  1732  001DD2  EC8E  F018         	call	_I2C_Master_Start	;wreg free
  1733                           
  1734                           ;main.c: 51: I2C_Master_Write(0b01010010);
  1735  001DD6  0E00               	movlw	0
  1736  001DD8  0100               	movlb	0	; () banked
  1737  001DDA  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1738  001DDC  0E52               	movlw	82
  1739  001DDE  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  1740  001DE0  EC80  F018         	call	_I2C_Master_Write	;wreg free
  1741                           
  1742                           ;main.c: 52: I2C_Master_Write(0b10110100);
  1743  001DE4  0E00               	movlw	0
  1744  001DE6  0100               	movlb	0	; () banked
  1745  001DE8  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1746  001DEA  0EB4               	movlw	180
  1747  001DEC  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  1748  001DEE  EC80  F018         	call	_I2C_Master_Write	;wreg free
  1749                           
  1750                           ;main.c: 53: I2C_Master_Stop();
  1751  001DF2  EC8A  F018         	call	_I2C_Master_Stop	;wreg free
  1752                           
  1753                           ;main.c: 56: TMR0 = 0;
  1754  001DF6  0E00               	movlw	0
  1755  001DF8  6ED7               	movwf	4055,c	;volatile
  1756  001DFA  0E00               	movlw	0
  1757  001DFC  6ED6               	movwf	4054,c	;volatile
  1758                           
  1759                           ;main.c: 57: T08BIT = 0;
  1760  001DFE  9CD5               	bcf	4053,6,c	;volatile
  1761                           
  1762                           ;main.c: 58: T0CS = 0;
  1763  001E00  9AD5               	bcf	4053,5,c	;volatile
  1764                           
  1765                           ;main.c: 59: PSA = 0;
  1766  001E02  96D5               	bcf	4053,3,c	;volatile
  1767                           
  1768                           ;main.c: 60: T0PS2 = 1;
  1769  001E04  84D5               	bsf	4053,2,c	;volatile
  1770                           
  1771                           ;main.c: 61: T0PS1 = 1;
  1772  001E06  82D5               	bsf	4053,1,c	;volatile
  1773                           
  1774                           ;main.c: 62: T0PS0 = 1;
  1775  001E08  80D5               	bsf	4053,0,c	;volatile
  1776                           
  1777                           ;main.c: 65: curr_state = STANDBY;
  1778  001E0A  0E00               	movlw	0
  1779  001E0C  0100               	movlb	0	; () banked
  1780  001E0E  6FBD               	movwf	_curr_state& (0+255),b
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;main.c: 68: switch(curr_state){
  1784                           
  1785                           ;main.c: 67: while(1){
  1786  001E10  D014               	goto	l5784
  1787  001E12                     l5768:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;main.c: 70: standby();
  1791  001E12  EC4A  F016         	call	_standby	;wreg free
  1792                           
  1793                           ;main.c: 71: break;
  1794  001E16  D011               	goto	l5784
  1795  001E18                     l5770:
  1796                           
  1797                           ;main.c: 73: emergencystop();
  1798  001E18  EC25  F018         	call	_emergencystop	;wreg free
  1799                           
  1800                           ;main.c: 74: break;
  1801  001E1C  D00E               	goto	l5784
  1802  001E1E                     l5772:
  1803                           
  1804                           ;main.c: 76: operation();
  1805  001E1E  EC09  F000         	call	_operation	;wreg free
  1806                           
  1807                           ;main.c: 77: break;
  1808  001E22  D00B               	goto	l5784
  1809  001E24                     l5774:
  1810                           
  1811                           ;main.c: 79: operationend();
  1812  001E24  EC45  F018         	call	_operationend	;wreg free
  1813                           
  1814                           ;main.c: 80: break;
  1815  001E28  D008               	goto	l5784
  1816  001E2A                     l5776:
  1817                           
  1818                           ;main.c: 82: date_time();
  1819  001E2A  EC48  F00E         	call	_date_time	;wreg free
  1820                           
  1821                           ;main.c: 83: break;
  1822  001E2E  D005               	goto	l5784
  1823  001E30                     l5778:
  1824                           
  1825                           ;main.c: 85: bottle_count();
  1826  001E30  ECAA  F00A         	call	_bottle_count	;wreg free
  1827                           
  1828                           ;main.c: 86: break;
  1829  001E34  D002               	goto	l5784
  1830  001E36                     l5780:
  1831                           
  1832                           ;main.c: 88: bottle_time();
  1833  001E36  EC8B  F017         	call	_bottle_time	;wreg free
  1834  001E3A                     l5784:
  1835  001E3A  0100               	movlb	0	; () banked
  1836  001E3C  51BD               	movf	_curr_state& (0+255),w,b
  1837                           
  1838                           ; Switch size 1, requested type "space"
  1839                           ; Number of cases is 7, Range of values is 0 to 6
  1840                           ; switch strategies available:
  1841                           ; Name         Instructions Cycles
  1842                           ; simple_byte           22    12 (average)
  1843                           ;	Chosen strategy is simple_byte
  1844  001E3E  0A00               	xorlw	0	; case 0
  1845  001E40  B4D8               	btfsc	status,2,c
  1846  001E42  D7E7               	goto	l5768
  1847  001E44  0A01               	xorlw	1	; case 1
  1848  001E46  B4D8               	btfsc	status,2,c
  1849  001E48  D7E7               	goto	l5770
  1850  001E4A  0A03               	xorlw	3	; case 2
  1851  001E4C  B4D8               	btfsc	status,2,c
  1852  001E4E  D7E7               	goto	l5772
  1853  001E50  0A01               	xorlw	1	; case 3
  1854  001E52  B4D8               	btfsc	status,2,c
  1855  001E54  D7E7               	goto	l5774
  1856  001E56  0A07               	xorlw	7	; case 4
  1857  001E58  B4D8               	btfsc	status,2,c
  1858  001E5A  D7E7               	goto	l5776
  1859  001E5C  0A01               	xorlw	1	; case 5
  1860  001E5E  B4D8               	btfsc	status,2,c
  1861  001E60  D7E7               	goto	l5778
  1862  001E62  0A03               	xorlw	3	; case 6
  1863  001E64  B4D8               	btfsc	status,2,c
  1864  001E66  D7E7               	goto	l5780
  1865                           
  1866                           ; BSR set to: 0
  1867                           
  1868                           ; BSR set to: 0
  1869  001E68  D7E8               	goto	l5784
  1870  001E6A                     __end_of_main:
  1871                           	opt stack 0
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           intcon	equ	0xFF2
  1877                           intcon2	equ	0xFF1
  1878                           intcon3	equ	0xFF0
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _standby *****************
  1884 ;; Defined at:
  1885 ;;		line 202 in file "main.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;Total ram usage:        2 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:   10
  1906 ;; This function calls:
  1907 ;;		_lcdInst
  1908 ;;		_printf
  1909 ;;		_read_colorsensor
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text1
  1916  002C94                     __ptext1:
  1917                           	opt stack 0
  1918  002C94                     _standby:
  1919                           	opt stack 20
  1920                           
  1921                           ;main.c: 203: lcdInst(0b10000000);
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;incstack = 0
  1925  002C94  0E80               	movlw	128
  1926  002C96  EC6C  F018         	call	_lcdInst
  1927                           
  1928                           ;main.c: 204: printf("standby");
  1929  002C9A  0EF0               	movlw	low STR_6
  1930  002C9C  0100               	movlb	0	; () banked
  1931  002C9E  6FDA               	movwf	printf@f& (0+255),b
  1932  002CA0  0EFF               	movlw	high STR_6
  1933  002CA2  0100               	movlb	0	; () banked
  1934  002CA4  6FDB               	movwf	(printf@f+1)& (0+255),b
  1935  002CA6  ECF5  F003         	call	_printf	;wreg free
  1936                           
  1937                           ;main.c: 205: lcdInst(0b11000000);
  1938  002CAA  0EC0               	movlw	192
  1939  002CAC  EC6C  F018         	call	_lcdInst
  1940                           
  1941                           ;main.c: 206: read_colorsensor();
  1942  002CB0  ECCA  F00B         	call	_read_colorsensor	;wreg free
  1943                           
  1944                           ;main.c: 207: printf("%d      ", color[0]);
  1945  002CB4  0EDF               	movlw	low STR_7
  1946  002CB6  0100               	movlb	0	; () banked
  1947  002CB8  6FDA               	movwf	printf@f& (0+255),b
  1948  002CBA  0EFF               	movlw	high STR_7
  1949  002CBC  0100               	movlb	0	; () banked
  1950  002CBE  6FDB               	movwf	(printf@f+1)& (0+255),b
  1951  002CC0  C08A  F0DC         	movff	_color,?_printf+2
  1952  002CC4  C08B  F0DD         	movff	_color+1,?_printf+3
  1953  002CC8  ECF5  F003         	call	_printf	;wreg free
  1954                           
  1955                           ;main.c: 208: _delay((unsigned long)((500)*(10000000/4000.0)));
  1956  002CCC  0E07               	movlw	7
  1957  002CCE  0100               	movlb	0	; () banked
  1958  002CD0  6FE7               	movwf	(??_standby+1)& (0+255),b
  1959  002CD2  0E58               	movlw	88
  1960  002CD4  0100               	movlb	0	; () banked
  1961  002CD6  6FE6               	movwf	??_standby& (0+255),b
  1962  002CD8  0E59               	movlw	89
  1963  002CDA                     u5707:
  1964  002CDA  2EE8               	decfsz	wreg,f,c
  1965  002CDC  D7FE               	bra	u5707
  1966  002CDE  2FE6               	decfsz	??_standby& (0+255),f,b
  1967  002CE0  D7FC               	bra	u5707
  1968  002CE2  2FE7               	decfsz	(??_standby+1)& (0+255),f,b
  1969  002CE4  D7FA               	bra	u5707
  1970  002CE6  D000               	nop2	
  1971  002CE8  0012               	return	
  1972  002CEA                     __end_of_standby:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           tblptrh	equ	0xFF7
  1976                           tblptrl	equ	0xFF6
  1977                           tablat	equ	0xFF5
  1978                           intcon	equ	0xFF2
  1979                           intcon2	equ	0xFF1
  1980                           intcon3	equ	0xFF0
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _operationend *****************
  1986 ;; Defined at:
  1987 ;;		line 403 in file "main.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;Total ram usage:        0 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:   10
  2008 ;; This function calls:
  2009 ;;		_lcdInst
  2010 ;;		_printf
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text2
  2017  00308A                     __ptext2:
  2018                           	opt stack 0
  2019  00308A                     _operationend:
  2020                           	opt stack 20
  2021                           
  2022                           ;main.c: 404: lcdInst(0b10000000);
  2023                           
  2024                           ;incstack = 0
  2025  00308A  0E80               	movlw	128
  2026  00308C  EC6C  F018         	call	_lcdInst
  2027                           
  2028                           ;main.c: 405: printf("Operation Done!");
  2029  003090  0E98               	movlw	low STR_20
  2030  003092  0100               	movlb	0	; () banked
  2031  003094  6FDA               	movwf	printf@f& (0+255),b
  2032  003096  0EFF               	movlw	high STR_20
  2033  003098  0100               	movlb	0	; () banked
  2034  00309A  6FDB               	movwf	(printf@f+1)& (0+255),b
  2035  00309C  ECF5  F003         	call	_printf	;wreg free
  2036  0030A0  0012               	return	
  2037  0030A2                     __end_of_operationend:
  2038                           	opt stack 0
  2039                           tblptru	equ	0xFF8
  2040                           tblptrh	equ	0xFF7
  2041                           tblptrl	equ	0xFF6
  2042                           tablat	equ	0xFF5
  2043                           intcon	equ	0xFF2
  2044                           intcon2	equ	0xFF1
  2045                           intcon3	equ	0xFF0
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _operation *****************
  2051 ;; Defined at:
  2052 ;;		line 317 in file "main.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  i               2   10[BANK1 ] int 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;Total ram usage:        3 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:   10
  2073 ;; This function calls:
  2074 ;;		___awtoft
  2075 ;;		___ftge
  2076 ;;		___ftmul
  2077 ;;		_lcdInst
  2078 ;;		_printf
  2079 ;;		_read_colorsensor
  2080 ;;		_servo_rotate0
  2081 ;;		_servo_rotate1
  2082 ;; This function is called by:
  2083 ;;		_main
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           	psect	text3
  2088  000012                     __ptext3:
  2089                           	opt stack 0
  2090  000012                     _operation:
  2091                           	opt stack 20
  2092                           
  2093                           ;main.c: 335: int i;
  2094                           ;main.c: 336: for(i=0; i<4; i++){
  2095                           
  2096                           ;incstack = 0
  2097  000012  0E00               	movlw	0
  2098  000014  0101               	movlb	1	; () banked
  2099  000016  6F0B               	movwf	(operation@i+1)& (0+255),b
  2100  000018  0E00               	movlw	0
  2101  00001A  6F0A               	movwf	operation@i& (0+255),b
  2102                           
  2103                           ; BSR set to: 1
  2104  00001C  0101               	movlb	1	; () banked
  2105  00001E  BF0B               	btfsc	(operation@i+1)& (0+255),7,b
  2106  000020  D008               	goto	l5542
  2107  000022  0101               	movlb	1	; () banked
  2108  000024  510B               	movf	(operation@i+1)& (0+255),w,b
  2109  000026  E129               	bnz	l329
  2110  000028  0E04               	movlw	4
  2111  00002A  0101               	movlb	1	; () banked
  2112  00002C  5D0A               	subwf	operation@i& (0+255),w,b
  2113  00002E  B0D8               	btfsc	status,0,c
  2114  000030  D024               	goto	l329
  2115  000032                     l5542:
  2116                           
  2117                           ; BSR set to: 1
  2118                           ;main.c: 337: colorprev[i] = color[i];
  2119  000032  90D8               	bcf	status,0,c
  2120  000034  0101               	movlb	1	; () banked
  2121  000036  350A               	rlcf	operation@i& (0+255),w,b
  2122  000038  6ED9               	movwf	fsr2l,c
  2123  00003A  0101               	movlb	1	; () banked
  2124  00003C  350B               	rlcf	(operation@i+1)& (0+255),w,b
  2125  00003E  6EDA               	movwf	fsr2h,c
  2126  000040  0E8A               	movlw	low _color
  2127  000042  26D9               	addwf	fsr2l,f,c
  2128  000044  0E00               	movlw	high _color
  2129  000046  22DA               	addwfc	fsr2h,f,c
  2130  000048  90D8               	bcf	status,0,c
  2131  00004A  0101               	movlb	1	; () banked
  2132  00004C  350A               	rlcf	operation@i& (0+255),w,b
  2133  00004E  6EE1               	movwf	fsr1l,c
  2134  000050  0101               	movlb	1	; () banked
  2135  000052  350B               	rlcf	(operation@i+1)& (0+255),w,b
  2136  000054  6EE2               	movwf	fsr1h,c
  2137  000056  0E92               	movlw	low _colorprev
  2138  000058  26E1               	addwf	fsr1l,f,c
  2139  00005A  0E00               	movlw	high _colorprev
  2140  00005C  22E2               	addwfc	fsr1h,f,c
  2141  00005E  CFDE FFE6          	movff	postinc2,postinc1
  2142  000062  CFDD FFE5          	movff	postdec2,postdec1
  2143                           
  2144                           ; BSR set to: 1
  2145  000066  0101               	movlb	1	; () banked
  2146  000068  4B0A               	infsnz	operation@i& (0+255),f,b
  2147  00006A  2B0B               	incf	(operation@i+1)& (0+255),f,b
  2148                           
  2149                           ; BSR set to: 1
  2150  00006C  0101               	movlb	1	; () banked
  2151  00006E  BF0B               	btfsc	(operation@i+1)& (0+255),7,b
  2152  000070  D7E0               	goto	l5542
  2153  000072  0101               	movlb	1	; () banked
  2154  000074  510B               	movf	(operation@i+1)& (0+255),w,b
  2155  000076  E101               	bnz	u5480
  2156  000078  D7D7               	goto	L1
  2157  00007A                     u5480:
  2158  00007A                     l329:
  2159                           
  2160                           ; BSR set to: 1
  2161                           ;main.c: 338: }
  2162                           ;main.c: 339: GIE = 0;
  2163  00007A  9EF2               	bcf	intcon,7,c	;volatile
  2164                           
  2165                           ; BSR set to: 1
  2166                           ;main.c: 340: read_colorsensor();
  2167  00007C  ECCA  F00B         	call	_read_colorsensor	;wreg free
  2168                           
  2169                           ;main.c: 341: if(color[0]>22){
  2170  000080  0100               	movlb	0	; () banked
  2171  000082  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2172  000084  D12B               	goto	l5586
  2173  000086  0100               	movlb	0	; () banked
  2174  000088  518B               	movf	(_color+1)& (0+255),w,b
  2175  00008A  E105               	bnz	u5490
  2176  00008C  0E17               	movlw	23
  2177  00008E  0100               	movlb	0	; () banked
  2178  000090  5D8A               	subwf	_color& (0+255),w,b
  2179  000092  A0D8               	btfss	status,0,c
  2180  000094  D123               	goto	l5586
  2181  000096                     u5490:
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;main.c: 342: flag_bottle = 1;
  2185  000096  0E00               	movlw	0
  2186  000098  0100               	movlb	0	; () banked
  2187  00009A  6FAE               	movwf	(_flag_bottle+1)& (0+255),b
  2188  00009C  0E01               	movlw	1
  2189  00009E  6FAD               	movwf	_flag_bottle& (0+255),b
  2190                           
  2191                           ;main.c: 343: flag_picbug = 0;
  2192  0000A0  0E00               	movlw	0
  2193  0000A2  0100               	movlb	0	; () banked
  2194  0000A4  6FB2               	movwf	(_flag_picbug+1)& (0+255),b
  2195  0000A6  0E00               	movlw	0
  2196  0000A8  6FB1               	movwf	_flag_picbug& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;main.c: 344: if(color[0]>300)flag_yopNC = 1;
  2200  0000AA  0100               	movlb	0	; () banked
  2201  0000AC  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2202  0000AE  D00D               	goto	l5558
  2203  0000B0  0E2D               	movlw	45
  2204  0000B2  0100               	movlb	0	; () banked
  2205  0000B4  5D8A               	subwf	_color& (0+255),w,b
  2206  0000B6  0E01               	movlw	1
  2207  0000B8  0100               	movlb	0	; () banked
  2208  0000BA  598B               	subwfb	(_color+1)& (0+255),w,b
  2209  0000BC  A0D8               	btfss	status,0,c
  2210  0000BE  D005               	goto	l5558
  2211                           
  2212                           ; BSR set to: 0
  2213  0000C0  0E00               	movlw	0
  2214  0000C2  0100               	movlb	0	; () banked
  2215  0000C4  6FB6               	movwf	(_flag_yopNC+1)& (0+255),b
  2216  0000C6  0E01               	movlw	1
  2217  0000C8  6FB5               	movwf	_flag_yopNC& (0+255),b
  2218  0000CA                     l5558:
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;main.c: 345: if(color[0]>30){
  2222  0000CA  0100               	movlb	0	; () banked
  2223  0000CC  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2224  0000CE  D083               	goto	l5572
  2225  0000D0  0100               	movlb	0	; () banked
  2226  0000D2  518B               	movf	(_color+1)& (0+255),w,b
  2227  0000D4  E105               	bnz	u5510
  2228  0000D6  0E1F               	movlw	31
  2229  0000D8  0100               	movlb	0	; () banked
  2230  0000DA  5D8A               	subwf	_color& (0+255),w,b
  2231  0000DC  A0D8               	btfss	status,0,c
  2232  0000DE  D07B               	goto	l5572
  2233  0000E0                     u5510:
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 346: if(!flag_top_read){
  2237  0000E0  0100               	movlb	0	; () banked
  2238  0000E2  51B3               	movf	_flag_top_read& (0+255),w,b
  2239  0000E4  0100               	movlb	0	; () banked
  2240  0000E6  11B4               	iorwf	(_flag_top_read+1)& (0+255),w,b
  2241  0000E8  A4D8               	btfss	status,2,c
  2242  0000EA  D070               	goto	l333
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;main.c: 349: if(color[1] > 1.5*color[3]) bottle_read_top = 1;
  2246  0000EC  0E00               	movlw	0
  2247  0000EE  0100               	movlb	0	; () banked
  2248  0000F0  6FDD               	movwf	___ftmul@f2& (0+255),b
  2249  0000F2  0EC0               	movlw	192
  2250  0000F4  0100               	movlb	0	; () banked
  2251  0000F6  6FDE               	movwf	(___ftmul@f2+1)& (0+255),b
  2252  0000F8  0E3F               	movlw	63
  2253  0000FA  0100               	movlb	0	; () banked
  2254  0000FC  6FDF               	movwf	(___ftmul@f2+2)& (0+255),b
  2255  0000FE  C090  F0D6         	movff	_color+6,___awtoft@c
  2256  000102  C091  F0D7         	movff	_color+7,___awtoft@c+1
  2257  000106  ECED  F016         	call	___awtoft	;wreg free
  2258  00010A  C0D6  F0DA         	movff	?___awtoft,___ftmul@f1
  2259  00010E  C0D7  F0DB         	movff	?___awtoft+1,___ftmul@f1+1
  2260  000112  C0D8  F0DC         	movff	?___awtoft+2,___ftmul@f1+2
  2261  000116  ECFB  F009         	call	___ftmul	;wreg free
  2262  00011A  C0DA  F100         	movff	?___ftmul,___ftge@ff1
  2263  00011E  C0DB  F101         	movff	?___ftmul+1,___ftge@ff1+1
  2264  000122  C0DC  F102         	movff	?___ftmul+2,___ftge@ff1+2
  2265  000126  C08C  F0D6         	movff	_color+2,___awtoft@c
  2266  00012A  C08D  F0D7         	movff	_color+3,___awtoft@c+1
  2267  00012E  ECED  F016         	call	___awtoft	;wreg free
  2268  000132  C0D6  F103         	movff	?___awtoft,___ftge@ff2
  2269  000136  C0D7  F104         	movff	?___awtoft+1,___ftge@ff2+1
  2270  00013A  C0D8  F105         	movff	?___awtoft+2,___ftge@ff2+2
  2271  00013E  EC56  F011         	call	___ftge	;wreg free
  2272  000142  0101               	movlb	1	; () banked
  2273  000144  B0D8               	btfsc	status,0,c
  2274  000146  D005               	goto	l5566
  2275                           
  2276                           ; BSR set to: 1
  2277  000148  0E00               	movlw	0
  2278  00014A  0100               	movlb	0	; () banked
  2279  00014C  6FAA               	movwf	(_bottle_read_top+1)& (0+255),b
  2280  00014E  0E01               	movlw	1
  2281  000150  D037               	goto	L3
  2282  000152                     l5566:
  2283                           
  2284                           ;main.c: 350: else if(color[1] <= 0.75*color[3]) bottle_read_top = 2;
  2285  000152  0E00               	movlw	0
  2286  000154  0100               	movlb	0	; () banked
  2287  000156  6FDD               	movwf	___ftmul@f2& (0+255),b
  2288  000158  0E40               	movlw	64
  2289  00015A  0100               	movlb	0	; () banked
  2290  00015C  6FDE               	movwf	(___ftmul@f2+1)& (0+255),b
  2291  00015E  0E3F               	movlw	63
  2292  000160  0100               	movlb	0	; () banked
  2293  000162  6FDF               	movwf	(___ftmul@f2+2)& (0+255),b
  2294  000164  C090  F0D6         	movff	_color+6,___awtoft@c
  2295  000168  C091  F0D7         	movff	_color+7,___awtoft@c+1
  2296  00016C  ECED  F016         	call	___awtoft	;wreg free
  2297  000170  C0D6  F0DA         	movff	?___awtoft,___ftmul@f1
  2298  000174  C0D7  F0DB         	movff	?___awtoft+1,___ftmul@f1+1
  2299  000178  C0D8  F0DC         	movff	?___awtoft+2,___ftmul@f1+2
  2300  00017C  ECFB  F009         	call	___ftmul	;wreg free
  2301  000180  C0DA  F100         	movff	?___ftmul,___ftge@ff1
  2302  000184  C0DB  F101         	movff	?___ftmul+1,___ftge@ff1+1
  2303  000188  C0DC  F102         	movff	?___ftmul+2,___ftge@ff1+2
  2304  00018C  C08C  F0D6         	movff	_color+2,___awtoft@c
  2305  000190  C08D  F0D7         	movff	_color+3,___awtoft@c+1
  2306  000194  ECED  F016         	call	___awtoft	;wreg free
  2307  000198  C0D6  F103         	movff	?___awtoft,___ftge@ff2
  2308  00019C  C0D7  F104         	movff	?___awtoft+1,___ftge@ff2+1
  2309  0001A0  C0D8  F105         	movff	?___awtoft+2,___ftge@ff2+2
  2310  0001A4  EC56  F011         	call	___ftge	;wreg free
  2311  0001A8  0101               	movlb	1	; () banked
  2312  0001AA  A0D8               	btfss	status,0,c
  2313  0001AC  D005               	goto	l5570
  2314                           
  2315                           ; BSR set to: 1
  2316  0001AE  0E00               	movlw	0
  2317  0001B0  0100               	movlb	0	; () banked
  2318  0001B2  6FAA               	movwf	(_bottle_read_top+1)& (0+255),b
  2319  0001B4  0E02               	movlw	2
  2320  0001B6  D004               	goto	L3
  2321  0001B8                     l5570:
  2322                           
  2323                           ;main.c: 351: else bottle_read_top = 0;
  2324  0001B8  0E00               	movlw	0
  2325  0001BA  0100               	movlb	0	; () banked
  2326  0001BC  6FAA               	movwf	(_bottle_read_top+1)& (0+255),b
  2327  0001BE  0E00               	movlw	0
  2328  0001C0                     L3:
  2329  0001C0  6FA9               	movwf	_bottle_read_top& (0+255),b
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;main.c: 352: flag_top_read = 1;
  2333                           
  2334                           ; BSR set to: 0
  2335  0001C2  0E00               	movlw	0
  2336  0001C4  0100               	movlb	0	; () banked
  2337  0001C6  6FB4               	movwf	(_flag_top_read+1)& (0+255),b
  2338  0001C8  0E01               	movlw	1
  2339  0001CA  6FB3               	movwf	_flag_top_read& (0+255),b
  2340  0001CC                     l333:
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 353: }
  2344                           ;main.c: 354: flag_bottle_high = 1;
  2345  0001CC  0E00               	movlw	0
  2346  0001CE  0100               	movlb	0	; () banked
  2347  0001D0  6FB0               	movwf	(_flag_bottle_high+1)& (0+255),b
  2348  0001D2  0E01               	movlw	1
  2349  0001D4  D081               	goto	L4
  2350  0001D6                     l5572:
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;main.c: 356: else if(color[0]<30){
  2354  0001D6  0100               	movlb	0	; () banked
  2355  0001D8  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2356  0001DA  D008               	goto	l5574
  2357  0001DC  0100               	movlb	0	; () banked
  2358  0001DE  518B               	movf	(_color+1)& (0+255),w,b
  2359  0001E0  E104               	bnz	u5551
  2360  0001E2  0E1E               	movlw	30
  2361  0001E4  0100               	movlb	0	; () banked
  2362  0001E6  5D8A               	subwf	_color& (0+255),w,b
  2363  0001E8  B0D8               	btfsc	status,0,c
  2364  0001EA                     u5551:
  2365  0001EA  D108               	goto	l5636
  2366  0001EC                     l5574:
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;main.c: 357: if(flag_bottle_high){
  2370  0001EC  0100               	movlb	0	; () banked
  2371  0001EE  51AF               	movf	_flag_bottle_high& (0+255),w,b
  2372  0001F0  0100               	movlb	0	; () banked
  2373  0001F2  11B0               	iorwf	(_flag_bottle_high+1)& (0+255),w,b
  2374  0001F4  B4D8               	btfsc	status,2,c
  2375  0001F6  D102               	goto	l5636
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;main.c: 360: if(colorprev[1] > 1.5*colorprev[3]) bottle_read_bot = 1;
  2379  0001F8  0E00               	movlw	0
  2380  0001FA  0100               	movlb	0	; () banked
  2381  0001FC  6FDD               	movwf	___ftmul@f2& (0+255),b
  2382  0001FE  0EC0               	movlw	192
  2383  000200  0100               	movlb	0	; () banked
  2384  000202  6FDE               	movwf	(___ftmul@f2+1)& (0+255),b
  2385  000204  0E3F               	movlw	63
  2386  000206  0100               	movlb	0	; () banked
  2387  000208  6FDF               	movwf	(___ftmul@f2+2)& (0+255),b
  2388  00020A  C098  F0D6         	movff	_colorprev+6,___awtoft@c
  2389  00020E  C099  F0D7         	movff	_colorprev+7,___awtoft@c+1
  2390  000212  ECED  F016         	call	___awtoft	;wreg free
  2391  000216  C0D6  F0DA         	movff	?___awtoft,___ftmul@f1
  2392  00021A  C0D7  F0DB         	movff	?___awtoft+1,___ftmul@f1+1
  2393  00021E  C0D8  F0DC         	movff	?___awtoft+2,___ftmul@f1+2
  2394  000222  ECFB  F009         	call	___ftmul	;wreg free
  2395  000226  C0DA  F100         	movff	?___ftmul,___ftge@ff1
  2396  00022A  C0DB  F101         	movff	?___ftmul+1,___ftge@ff1+1
  2397  00022E  C0DC  F102         	movff	?___ftmul+2,___ftge@ff1+2
  2398  000232  C094  F0D6         	movff	_colorprev+2,___awtoft@c
  2399  000236  C095  F0D7         	movff	_colorprev+3,___awtoft@c+1
  2400  00023A  ECED  F016         	call	___awtoft	;wreg free
  2401  00023E  C0D6  F103         	movff	?___awtoft,___ftge@ff2
  2402  000242  C0D7  F104         	movff	?___awtoft+1,___ftge@ff2+1
  2403  000246  C0D8  F105         	movff	?___awtoft+2,___ftge@ff2+2
  2404  00024A  EC56  F011         	call	___ftge	;wreg free
  2405  00024E  0101               	movlb	1	; () banked
  2406  000250  B0D8               	btfsc	status,0,c
  2407  000252  D005               	goto	l5580
  2408                           
  2409                           ; BSR set to: 1
  2410  000254  0E00               	movlw	0
  2411  000256  0100               	movlb	0	; () banked
  2412  000258  6FA8               	movwf	(_bottle_read_bot+1)& (0+255),b
  2413  00025A  0E01               	movlw	1
  2414  00025C  D032               	goto	L5
  2415  00025E                     l5580:
  2416                           
  2417                           ;main.c: 361: else if(colorprev[1] <= 0.75*colorprev[3]) bottle_read_bot = 2;
  2418  00025E  0E00               	movlw	0
  2419  000260  0100               	movlb	0	; () banked
  2420  000262  6FDD               	movwf	___ftmul@f2& (0+255),b
  2421  000264  0E40               	movlw	64
  2422  000266  0100               	movlb	0	; () banked
  2423  000268  6FDE               	movwf	(___ftmul@f2+1)& (0+255),b
  2424  00026A  0E3F               	movlw	63
  2425  00026C  0100               	movlb	0	; () banked
  2426  00026E  6FDF               	movwf	(___ftmul@f2+2)& (0+255),b
  2427  000270  C098  F0D6         	movff	_colorprev+6,___awtoft@c
  2428  000274  C099  F0D7         	movff	_colorprev+7,___awtoft@c+1
  2429  000278  ECED  F016         	call	___awtoft	;wreg free
  2430  00027C  C0D6  F0DA         	movff	?___awtoft,___ftmul@f1
  2431  000280  C0D7  F0DB         	movff	?___awtoft+1,___ftmul@f1+1
  2432  000284  C0D8  F0DC         	movff	?___awtoft+2,___ftmul@f1+2
  2433  000288  ECFB  F009         	call	___ftmul	;wreg free
  2434  00028C  C0DA  F100         	movff	?___ftmul,___ftge@ff1
  2435  000290  C0DB  F101         	movff	?___ftmul+1,___ftge@ff1+1
  2436  000294  C0DC  F102         	movff	?___ftmul+2,___ftge@ff1+2
  2437  000298  C094  F0D6         	movff	_colorprev+2,___awtoft@c
  2438  00029C  C095  F0D7         	movff	_colorprev+3,___awtoft@c+1
  2439  0002A0  ECED  F016         	call	___awtoft	;wreg free
  2440  0002A4  C0D6  F103         	movff	?___awtoft,___ftge@ff2
  2441  0002A8  C0D7  F104         	movff	?___awtoft+1,___ftge@ff2+1
  2442  0002AC  C0D8  F105         	movff	?___awtoft+2,___ftge@ff2+2
  2443  0002B0  EC56  F011         	call	___ftge	;wreg free
  2444  0002B4  0101               	movlb	1	; () banked
  2445  0002B6  A0D8               	btfss	status,0,c
  2446  0002B8  D006               	goto	l5584
  2447                           
  2448                           ; BSR set to: 1
  2449  0002BA  0E00               	movlw	0
  2450  0002BC  0100               	movlb	0	; () banked
  2451  0002BE  6FA8               	movwf	(_bottle_read_bot+1)& (0+255),b
  2452  0002C0  0E02               	movlw	2
  2453  0002C2                     L5:
  2454  0002C2  6FA7               	movwf	_bottle_read_bot& (0+255),b
  2455  0002C4  D005               	goto	l342
  2456  0002C6                     l5584:
  2457                           
  2458                           ;main.c: 362: else bottle_read_top = 0;
  2459  0002C6  0E00               	movlw	0
  2460  0002C8  0100               	movlb	0	; () banked
  2461  0002CA  6FAA               	movwf	(_bottle_read_top+1)& (0+255),b
  2462  0002CC  0E00               	movlw	0
  2463  0002CE  6FA9               	movwf	_bottle_read_top& (0+255),b
  2464  0002D0                     l342:
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;main.c: 363: flag_bottle_high = 0;
  2468  0002D0  0E00               	movlw	0
  2469  0002D2  0100               	movlb	0	; () banked
  2470  0002D4  6FB0               	movwf	(_flag_bottle_high+1)& (0+255),b
  2471  0002D6  0E00               	movlw	0
  2472  0002D8                     L4:
  2473  0002D8  6FAF               	movwf	_flag_bottle_high& (0+255),b
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;main.c: 364: }
  2477                           ;main.c: 365: }
  2478                           ;main.c: 366: }
  2479                           
  2480                           ; BSR set to: 0
  2481                           
  2482                           ; BSR set to: 0
  2483  0002DA  D090               	goto	l5636
  2484  0002DC                     l5586:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;main.c: 368: else if(flag_bottle){
  2488  0002DC  0100               	movlb	0	; () banked
  2489  0002DE  51AD               	movf	_flag_bottle& (0+255),w,b
  2490  0002E0  0100               	movlb	0	; () banked
  2491  0002E2  11AE               	iorwf	(_flag_bottle+1)& (0+255),w,b
  2492  0002E4  B4D8               	btfsc	status,2,c
  2493  0002E6  D08A               	goto	l5636
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;main.c: 369: flag_picbug += 1;
  2497  0002E8  0100               	movlb	0	; () banked
  2498  0002EA  4BB1               	infsnz	_flag_picbug& (0+255),f,b
  2499  0002EC  2BB2               	incf	(_flag_picbug+1)& (0+255),f,b
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;main.c: 370: if(flag_picbug>7){
  2503  0002EE  0100               	movlb	0	; () banked
  2504  0002F0  BFB2               	btfsc	(_flag_picbug+1)& (0+255),7,b
  2505  0002F2  D084               	goto	l5636
  2506  0002F4  0100               	movlb	0	; () banked
  2507  0002F6  51B2               	movf	(_flag_picbug+1)& (0+255),w,b
  2508  0002F8  E105               	bnz	u5600
  2509  0002FA  0E08               	movlw	8
  2510  0002FC  0100               	movlb	0	; () banked
  2511  0002FE  5DB1               	subwf	_flag_picbug& (0+255),w,b
  2512  000300  A0D8               	btfss	status,0,c
  2513  000302  D07C               	goto	l5636
  2514  000304                     u5600:
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;main.c: 371: bottle_count_array[0] += 1;
  2518  000304  0100               	movlb	0	; () banked
  2519  000306  4B80               	infsnz	_bottle_count_array& (0+255),f,b
  2520  000308  2B81               	incf	(_bottle_count_array+1)& (0+255),f,b
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;main.c: 372: TMR0 = 0;
  2524  00030A  0E00               	movlw	0
  2525  00030C  6ED7               	movwf	4055,c	;volatile
  2526  00030E  0E00               	movlw	0
  2527  000310  6ED6               	movwf	4054,c	;volatile
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;main.c: 373: if(bottle_read_top == 1 || bottle_read_bot == 1){
  2531  000312  0100               	movlb	0	; () banked
  2532  000314  05A9               	decf	_bottle_read_top& (0+255),w,b
  2533  000316  0100               	movlb	0	; () banked
  2534  000318  11AA               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  2535  00031A  B4D8               	btfsc	status,2,c
  2536  00031C  D006               	goto	l5600
  2537                           
  2538                           ; BSR set to: 0
  2539  00031E  0100               	movlb	0	; () banked
  2540  000320  05A7               	decf	_bottle_read_bot& (0+255),w,b
  2541  000322  0100               	movlb	0	; () banked
  2542  000324  11A8               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  2543  000326  A4D8               	btfss	status,2,c
  2544  000328  D00B               	goto	l5604
  2545  00032A                     l5600:
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;main.c: 374: bottle_count_array[1] += 1;
  2549  00032A  0100               	movlb	0	; () banked
  2550  00032C  4B82               	infsnz	(_bottle_count_array+2)& (0+255),f,b
  2551  00032E  2B83               	incf	(_bottle_count_array+3)& (0+255),f,b
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;main.c: 375: servo_rotate0(8);
  2555  000330  0E00               	movlw	0
  2556  000332  0100               	movlb	0	; () banked
  2557  000334  6FCF               	movwf	(servo_rotate0@degree+1)& (0+255),b
  2558  000336  0E08               	movlw	8
  2559  000338  6FCE               	movwf	servo_rotate0@degree& (0+255),b
  2560  00033A  EC26  F013         	call	_servo_rotate0	;wreg free
  2561                           
  2562                           ;main.c: 376: }
  2563  00033E  D034               	goto	l5622
  2564  000340                     l5604:
  2565                           
  2566                           ;main.c: 377: else if(bottle_read_top == 2 || bottle_read_bot == 2){
  2567  000340  0E02               	movlw	2
  2568  000342  0100               	movlb	0	; () banked
  2569  000344  19A9               	xorwf	_bottle_read_top& (0+255),w,b
  2570  000346  0100               	movlb	0	; () banked
  2571  000348  11AA               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  2572  00034A  B4D8               	btfsc	status,2,c
  2573  00034C  D007               	goto	l5608
  2574                           
  2575                           ; BSR set to: 0
  2576  00034E  0E02               	movlw	2
  2577  000350  0100               	movlb	0	; () banked
  2578  000352  19A7               	xorwf	_bottle_read_bot& (0+255),w,b
  2579  000354  0100               	movlb	0	; () banked
  2580  000356  11A8               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  2581  000358  A4D8               	btfss	status,2,c
  2582  00035A  D00B               	goto	l5612
  2583  00035C                     l5608:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 378: bottle_count_array[3] += 1;
  2587  00035C  0100               	movlb	0	; () banked
  2588  00035E  4B86               	infsnz	(_bottle_count_array+6)& (0+255),f,b
  2589  000360  2B87               	incf	(_bottle_count_array+7)& (0+255),f,b
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;main.c: 379: servo_rotate1(8);
  2593  000362  0E00               	movlw	0
  2594  000364  0100               	movlb	0	; () banked
  2595  000366  6FCF               	movwf	(servo_rotate1@degree+1)& (0+255),b
  2596  000368  0E08               	movlw	8
  2597  00036A  6FCE               	movwf	servo_rotate1@degree& (0+255),b
  2598  00036C  ECD2  F012         	call	_servo_rotate1	;wreg free
  2599                           
  2600                           ;main.c: 380: }
  2601  000370  D01B               	goto	l5622
  2602  000372                     l5612:
  2603                           
  2604                           ;main.c: 381: else if(flag_yopNC){
  2605  000372  0100               	movlb	0	; () banked
  2606  000374  51B5               	movf	_flag_yopNC& (0+255),w,b
  2607  000376  0100               	movlb	0	; () banked
  2608  000378  11B6               	iorwf	(_flag_yopNC+1)& (0+255),w,b
  2609  00037A  B4D8               	btfsc	status,2,c
  2610  00037C  D00B               	goto	l5618
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;main.c: 382: bottle_count_array[2] += 1;
  2614  00037E  0100               	movlb	0	; () banked
  2615  000380  4B84               	infsnz	(_bottle_count_array+4)& (0+255),f,b
  2616  000382  2B85               	incf	(_bottle_count_array+5)& (0+255),f,b
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 383: servo_rotate0(18);
  2620  000384  0E00               	movlw	0
  2621  000386  0100               	movlb	0	; () banked
  2622  000388  6FCF               	movwf	(servo_rotate0@degree+1)& (0+255),b
  2623  00038A  0E12               	movlw	18
  2624  00038C  6FCE               	movwf	servo_rotate0@degree& (0+255),b
  2625  00038E  EC26  F013         	call	_servo_rotate0	;wreg free
  2626                           
  2627                           ;main.c: 384: }
  2628  000392  D00A               	goto	l5622
  2629  000394                     l5618:
  2630                           
  2631                           ;main.c: 385: else{
  2632                           ;main.c: 386: bottle_count_array[4] += 1;
  2633  000394  0100               	movlb	0	; () banked
  2634  000396  4B88               	infsnz	(_bottle_count_array+8)& (0+255),f,b
  2635  000398  2B89               	incf	(_bottle_count_array+9)& (0+255),f,b
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;main.c: 387: servo_rotate1(18);
  2639  00039A  0E00               	movlw	0
  2640  00039C  0100               	movlb	0	; () banked
  2641  00039E  6FCF               	movwf	(servo_rotate1@degree+1)& (0+255),b
  2642  0003A0  0E12               	movlw	18
  2643  0003A2  6FCE               	movwf	servo_rotate1@degree& (0+255),b
  2644  0003A4  ECD2  F012         	call	_servo_rotate1	;wreg free
  2645  0003A8                     l5622:
  2646                           
  2647                           ;main.c: 388: }
  2648                           ;main.c: 389: flag_bottle = 0;
  2649  0003A8  0E00               	movlw	0
  2650  0003AA  0100               	movlb	0	; () banked
  2651  0003AC  6FAE               	movwf	(_flag_bottle+1)& (0+255),b
  2652  0003AE  0E00               	movlw	0
  2653  0003B0  6FAD               	movwf	_flag_bottle& (0+255),b
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;main.c: 390: flag_bottle_high = 0;
  2657  0003B2  0E00               	movlw	0
  2658  0003B4  0100               	movlb	0	; () banked
  2659  0003B6  6FB0               	movwf	(_flag_bottle_high+1)& (0+255),b
  2660  0003B8  0E00               	movlw	0
  2661  0003BA  6FAF               	movwf	_flag_bottle_high& (0+255),b
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;main.c: 391: flag_top_read = 0;
  2665  0003BC  0E00               	movlw	0
  2666  0003BE  0100               	movlb	0	; () banked
  2667  0003C0  6FB4               	movwf	(_flag_top_read+1)& (0+255),b
  2668  0003C2  0E00               	movlw	0
  2669  0003C4  6FB3               	movwf	_flag_top_read& (0+255),b
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;main.c: 392: flag_yopNC = 0;
  2673  0003C6  0E00               	movlw	0
  2674  0003C8  0100               	movlb	0	; () banked
  2675  0003CA  6FB6               	movwf	(_flag_yopNC+1)& (0+255),b
  2676  0003CC  0E00               	movlw	0
  2677  0003CE  6FB5               	movwf	_flag_yopNC& (0+255),b
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;main.c: 393: lcdInst(0b10000000);
  2681  0003D0  0E80               	movlw	128
  2682  0003D2  EC6C  F018         	call	_lcdInst
  2683                           
  2684                           ;main.c: 394: lcdInst(0b11000000);
  2685  0003D6  0EC0               	movlw	192
  2686  0003D8  EC6C  F018         	call	_lcdInst
  2687                           
  2688                           ;main.c: 395: printf("    %d, %d", bottle_read_top, bottle_read_bot);
  2689  0003DC  0ED4               	movlw	low STR_19
  2690  0003DE  0100               	movlb	0	; () banked
  2691  0003E0  6FDA               	movwf	printf@f& (0+255),b
  2692  0003E2  0EFF               	movlw	high STR_19
  2693  0003E4  0100               	movlb	0	; () banked
  2694  0003E6  6FDB               	movwf	(printf@f+1)& (0+255),b
  2695  0003E8  C0A9  F0DC         	movff	_bottle_read_top,?_printf+2
  2696  0003EC  C0AA  F0DD         	movff	_bottle_read_top+1,?_printf+3
  2697  0003F0  C0A7  F0DE         	movff	_bottle_read_bot,?_printf+4
  2698  0003F4  C0A8  F0DF         	movff	_bottle_read_bot+1,?_printf+5
  2699  0003F8  ECF5  F003         	call	_printf	;wreg free
  2700  0003FC                     l5636:
  2701                           
  2702                           ;main.c: 396: }
  2703                           ;main.c: 397: }
  2704                           ;main.c: 398: GIE = 1;
  2705  0003FC  8EF2               	bsf	intcon,7,c	;volatile
  2706                           
  2707                           ;main.c: 399: _delay((unsigned long)((3)*(10000000/4000.0)));
  2708  0003FE  0E0A               	movlw	10
  2709  000400  0100               	movlb	0	; () banked
  2710  000402  6FEC               	movwf	??_operation& (0+255),b
  2711  000404  0EBC               	movlw	188
  2712  000406                     u5717:
  2713  000406  2EE8               	decfsz	wreg,f,c
  2714  000408  D7FE               	bra	u5717
  2715  00040A  2FEC               	decfsz	??_operation& (0+255),f,b
  2716  00040C  D7FC               	bra	u5717
  2717  00040E  F000               	nop	
  2718  000410  0012               	return	
  2719  000412                     __end_of_operation:
  2720                           	opt stack 0
  2721                           tblptru	equ	0xFF8
  2722                           tblptrh	equ	0xFF7
  2723                           tblptrl	equ	0xFF6
  2724                           tablat	equ	0xFF5
  2725                           intcon	equ	0xFF2
  2726                           intcon2	equ	0xFF1
  2727                           intcon3	equ	0xFF0
  2728                           postinc0	equ	0xFEE
  2729                           wreg	equ	0xFE8
  2730                           postinc1	equ	0xFE6
  2731                           postdec1	equ	0xFE5
  2732                           fsr1h	equ	0xFE2
  2733                           fsr1l	equ	0xFE1
  2734                           postinc2	equ	0xFDE
  2735                           postdec2	equ	0xFDD
  2736                           fsr2h	equ	0xFDA
  2737                           fsr2l	equ	0xFD9
  2738                           status	equ	0xFD8
  2739                           
  2740 ;; *************** function _servo_rotate1 *****************
  2741 ;; Defined at:
  2742 ;;		line 438 in file "main.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  degree          2   16[BANK0 ] int 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  j               2   24[BANK0 ] unsigned int 
  2747 ;;  i               2   22[BANK0 ] unsigned int 
  2748 ;;  duty            2   20[BANK0 ] int 
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      void 
  2751 ;; Registers used:
  2752 ;;		wreg, status,2, status,0
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2758 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;Total ram usage:       10 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    7
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_operation
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           	psect	text4
  2773  0025A4                     __ptext4:
  2774                           	opt stack 0
  2775  0025A4                     _servo_rotate1:
  2776                           	opt stack 22
  2777                           
  2778                           ;main.c: 443: unsigned int i;
  2779                           ;main.c: 444: unsigned int j;
  2780                           ;main.c: 445: int duty = degree;
  2781                           
  2782                           ;incstack = 0
  2783  0025A4  C0CE  F0D2         	movff	servo_rotate1@degree,servo_rotate1@duty
  2784  0025A8  C0CF  F0D3         	movff	servo_rotate1@degree+1,servo_rotate1@duty+1
  2785                           
  2786                           ;main.c: 446: for (i=0; i<10; i++) {
  2787  0025AC  0E00               	movlw	0
  2788  0025AE  0100               	movlb	0	; () banked
  2789  0025B0  6FD5               	movwf	(servo_rotate1@i+1)& (0+255),b
  2790  0025B2  0E00               	movlw	0
  2791  0025B4  6FD4               	movwf	servo_rotate1@i& (0+255),b
  2792  0025B6                     l5342:
  2793                           
  2794                           ; BSR set to: 0
  2795  0025B6  0100               	movlb	0	; () banked
  2796  0025B8  51D5               	movf	(servo_rotate1@i+1)& (0+255),w,b
  2797  0025BA  E147               	bnz	l389
  2798  0025BC  0E0A               	movlw	10
  2799  0025BE  0100               	movlb	0	; () banked
  2800  0025C0  5DD4               	subwf	servo_rotate1@i& (0+255),w,b
  2801  0025C2  B0D8               	btfsc	status,0,c
  2802  0025C4  0012               	return	
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;main.c: 447: LATCbits.LATC1` = 1;
  2806                           
  2807                           ; BSR set to: 0
  2808  0025C6  828B               	bsf	3979,1,c	;volatile
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;main.c: 448: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  2812  0025C8  0E00               	movlw	0
  2813  0025CA  0100               	movlb	0	; () banked
  2814  0025CC  6FD7               	movwf	(servo_rotate1@j+1)& (0+255),b
  2815  0025CE  0E00               	movlw	0
  2816  0025D0  6FD6               	movwf	servo_rotate1@j& (0+255),b
  2817  0025D2  D007               	goto	l383
  2818  0025D4                     l5348:
  2819                           
  2820                           ; BSR set to: 0
  2821  0025D4  0E53               	movlw	83
  2822  0025D6                     u5727:
  2823  0025D6  2EE8               	decfsz	wreg,f,c
  2824  0025D8  D7FE               	bra	u5727
  2825  0025DA  F000               	nop	
  2826  0025DC  0100               	movlb	0	; () banked
  2827  0025DE  4BD6               	infsnz	servo_rotate1@j& (0+255),f,b
  2828  0025E0  2BD7               	incf	(servo_rotate1@j+1)& (0+255),f,b
  2829  0025E2                     l383:
  2830                           
  2831                           ; BSR set to: 0
  2832  0025E2  0100               	movlb	0	; () banked
  2833  0025E4  51D2               	movf	servo_rotate1@duty& (0+255),w,b
  2834  0025E6  0100               	movlb	0	; () banked
  2835  0025E8  5DD6               	subwf	servo_rotate1@j& (0+255),w,b
  2836  0025EA  0100               	movlb	0	; () banked
  2837  0025EC  51D3               	movf	(servo_rotate1@duty+1)& (0+255),w,b
  2838  0025EE  0100               	movlb	0	; () banked
  2839  0025F0  59D7               	subwfb	(servo_rotate1@j+1)& (0+255),w,b
  2840  0025F2  A0D8               	btfss	status,0,c
  2841  0025F4  D7EF               	goto	l5348
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;main.c: 449: LATCbits.LATC1 = 0;
  2845  0025F6  928B               	bcf	3979,1,c	;volatile
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;main.c: 450: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  2849  0025F8  0E00               	movlw	0
  2850  0025FA  0100               	movlb	0	; () banked
  2851  0025FC  6FD7               	movwf	(servo_rotate1@j+1)& (0+255),b
  2852  0025FE  0E00               	movlw	0
  2853  002600  6FD6               	movwf	servo_rotate1@j& (0+255),b
  2854  002602  D007               	goto	l386
  2855  002604                     l5354:
  2856                           
  2857                           ; BSR set to: 0
  2858  002604  0E53               	movlw	83
  2859  002606                     u5737:
  2860  002606  2EE8               	decfsz	wreg,f,c
  2861  002608  D7FE               	bra	u5737
  2862  00260A  F000               	nop	
  2863  00260C  0100               	movlb	0	; () banked
  2864  00260E  4BD6               	infsnz	servo_rotate1@j& (0+255),f,b
  2865  002610  2BD7               	incf	(servo_rotate1@j+1)& (0+255),f,b
  2866  002612                     l386:
  2867                           
  2868                           ; BSR set to: 0
  2869  002612  C0D2  F0D0         	movff	servo_rotate1@duty,??_servo_rotate1
  2870  002616  C0D3  F0D1         	movff	servo_rotate1@duty+1,??_servo_rotate1+1
  2871  00261A  0100               	movlb	0	; () banked
  2872  00261C  1FD0               	comf	??_servo_rotate1& (0+255),f,b
  2873  00261E  1FD1               	comf	(??_servo_rotate1+1)& (0+255),f,b
  2874  002620  4BD0               	infsnz	??_servo_rotate1& (0+255),f,b
  2875  002622  2BD1               	incf	(??_servo_rotate1+1)& (0+255),f,b
  2876  002624  0EC8               	movlw	200
  2877  002626  0100               	movlb	0	; () banked
  2878  002628  27D0               	addwf	??_servo_rotate1& (0+255),f,b
  2879  00262A  0E00               	movlw	0
  2880  00262C  23D1               	addwfc	(??_servo_rotate1+1)& (0+255),f,b
  2881  00262E  0100               	movlb	0	; () banked
  2882  002630  51D0               	movf	??_servo_rotate1& (0+255),w,b
  2883  002632  0100               	movlb	0	; () banked
  2884  002634  5DD6               	subwf	servo_rotate1@j& (0+255),w,b
  2885  002636  0100               	movlb	0	; () banked
  2886  002638  51D1               	movf	(??_servo_rotate1+1)& (0+255),w,b
  2887  00263A  0100               	movlb	0	; () banked
  2888  00263C  59D7               	subwfb	(servo_rotate1@j+1)& (0+255),w,b
  2889  00263E  A0D8               	btfss	status,0,c
  2890  002640  D7E1               	goto	l5354
  2891                           
  2892                           ; BSR set to: 0
  2893                           
  2894                           ; BSR set to: 0
  2895  002642  0100               	movlb	0	; () banked
  2896  002644  4BD4               	infsnz	servo_rotate1@i& (0+255),f,b
  2897  002646  2BD5               	incf	(servo_rotate1@i+1)& (0+255),f,b
  2898  002648  D7B6               	goto	l5342
  2899  00264A                     l389:
  2900                           
  2901                           ; BSR set to: 0
  2902  00264A  0012               	return		;funcret
  2903  00264C                     __end_of_servo_rotate1:
  2904                           	opt stack 0
  2905                           tblptru	equ	0xFF8
  2906                           tblptrh	equ	0xFF7
  2907                           tblptrl	equ	0xFF6
  2908                           tablat	equ	0xFF5
  2909                           intcon	equ	0xFF2
  2910                           intcon2	equ	0xFF1
  2911                           intcon3	equ	0xFF0
  2912                           postinc0	equ	0xFEE
  2913                           wreg	equ	0xFE8
  2914                           postinc1	equ	0xFE6
  2915                           postdec1	equ	0xFE5
  2916                           fsr1h	equ	0xFE2
  2917                           fsr1l	equ	0xFE1
  2918                           postinc2	equ	0xFDE
  2919                           postdec2	equ	0xFDD
  2920                           fsr2h	equ	0xFDA
  2921                           fsr2l	equ	0xFD9
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function _servo_rotate0 *****************
  2925 ;; Defined at:
  2926 ;;		line 419 in file "main.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  degree          2   16[BANK0 ] int 
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;  j               2   24[BANK0 ] unsigned int 
  2931 ;;  i               2   22[BANK0 ] unsigned int 
  2932 ;;  duty            2   20[BANK0 ] int 
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		wreg, status,2, status,0
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2942 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;Total ram usage:       10 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    7
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_operation
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text5
  2957  00264C                     __ptext5:
  2958                           	opt stack 0
  2959  00264C                     _servo_rotate0:
  2960                           	opt stack 22
  2961                           
  2962                           ;main.c: 426: unsigned int i;
  2963                           ;main.c: 427: unsigned int j;
  2964                           ;main.c: 428: int duty = degree;
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;incstack = 0
  2968  00264C  C0CE  F0D2         	movff	servo_rotate0@degree,servo_rotate0@duty
  2969  002650  C0CF  F0D3         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  2970                           
  2971                           ;main.c: 429: for (i=0; i<10; i++) {
  2972  002654  0E00               	movlw	0
  2973  002656  0100               	movlb	0	; () banked
  2974  002658  6FD5               	movwf	(servo_rotate0@i+1)& (0+255),b
  2975  00265A  0E00               	movlw	0
  2976  00265C  6FD4               	movwf	servo_rotate0@i& (0+255),b
  2977  00265E                     l5366:
  2978                           
  2979                           ; BSR set to: 0
  2980  00265E  0100               	movlb	0	; () banked
  2981  002660  51D5               	movf	(servo_rotate0@i+1)& (0+255),w,b
  2982  002662  E147               	bnz	l378
  2983  002664  0E0A               	movlw	10
  2984  002666  0100               	movlb	0	; () banked
  2985  002668  5DD4               	subwf	servo_rotate0@i& (0+255),w,b
  2986  00266A  B0D8               	btfsc	status,0,c
  2987  00266C  0012               	return	
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;main.c: 430: LATCbits.LATC0 = 1;
  2991                           
  2992                           ; BSR set to: 0
  2993  00266E  808B               	bsf	3979,0,c	;volatile
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;main.c: 431: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  2997  002670  0E00               	movlw	0
  2998  002672  0100               	movlb	0	; () banked
  2999  002674  6FD7               	movwf	(servo_rotate0@j+1)& (0+255),b
  3000  002676  0E00               	movlw	0
  3001  002678  6FD6               	movwf	servo_rotate0@j& (0+255),b
  3002  00267A  D007               	goto	l372
  3003  00267C                     l5372:
  3004                           
  3005                           ; BSR set to: 0
  3006  00267C  0E53               	movlw	83
  3007  00267E                     u5747:
  3008  00267E  2EE8               	decfsz	wreg,f,c
  3009  002680  D7FE               	bra	u5747
  3010  002682  F000               	nop	
  3011  002684  0100               	movlb	0	; () banked
  3012  002686  4BD6               	infsnz	servo_rotate0@j& (0+255),f,b
  3013  002688  2BD7               	incf	(servo_rotate0@j+1)& (0+255),f,b
  3014  00268A                     l372:
  3015                           
  3016                           ; BSR set to: 0
  3017  00268A  0100               	movlb	0	; () banked
  3018  00268C  51D2               	movf	servo_rotate0@duty& (0+255),w,b
  3019  00268E  0100               	movlb	0	; () banked
  3020  002690  5DD6               	subwf	servo_rotate0@j& (0+255),w,b
  3021  002692  0100               	movlb	0	; () banked
  3022  002694  51D3               	movf	(servo_rotate0@duty+1)& (0+255),w,b
  3023  002696  0100               	movlb	0	; () banked
  3024  002698  59D7               	subwfb	(servo_rotate0@j+1)& (0+255),w,b
  3025  00269A  A0D8               	btfss	status,0,c
  3026  00269C  D7EF               	goto	l5372
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;main.c: 432: LATCbits.LATC0 = 0;
  3030  00269E  908B               	bcf	3979,0,c	;volatile
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;main.c: 433: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  3034  0026A0  0E00               	movlw	0
  3035  0026A2  0100               	movlb	0	; () banked
  3036  0026A4  6FD7               	movwf	(servo_rotate0@j+1)& (0+255),b
  3037  0026A6  0E00               	movlw	0
  3038  0026A8  6FD6               	movwf	servo_rotate0@j& (0+255),b
  3039  0026AA  D007               	goto	l375
  3040  0026AC                     l5378:
  3041                           
  3042                           ; BSR set to: 0
  3043  0026AC  0E53               	movlw	83
  3044  0026AE                     u5757:
  3045  0026AE  2EE8               	decfsz	wreg,f,c
  3046  0026B0  D7FE               	bra	u5757
  3047  0026B2  F000               	nop	
  3048  0026B4  0100               	movlb	0	; () banked
  3049  0026B6  4BD6               	infsnz	servo_rotate0@j& (0+255),f,b
  3050  0026B8  2BD7               	incf	(servo_rotate0@j+1)& (0+255),f,b
  3051  0026BA                     l375:
  3052                           
  3053                           ; BSR set to: 0
  3054  0026BA  C0D2  F0D0         	movff	servo_rotate0@duty,??_servo_rotate0
  3055  0026BE  C0D3  F0D1         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  3056  0026C2  0100               	movlb	0	; () banked
  3057  0026C4  1FD0               	comf	??_servo_rotate0& (0+255),f,b
  3058  0026C6  1FD1               	comf	(??_servo_rotate0+1)& (0+255),f,b
  3059  0026C8  4BD0               	infsnz	??_servo_rotate0& (0+255),f,b
  3060  0026CA  2BD1               	incf	(??_servo_rotate0+1)& (0+255),f,b
  3061  0026CC  0EC8               	movlw	200
  3062  0026CE  0100               	movlb	0	; () banked
  3063  0026D0  27D0               	addwf	??_servo_rotate0& (0+255),f,b
  3064  0026D2  0E00               	movlw	0
  3065  0026D4  23D1               	addwfc	(??_servo_rotate0+1)& (0+255),f,b
  3066  0026D6  0100               	movlb	0	; () banked
  3067  0026D8  51D0               	movf	??_servo_rotate0& (0+255),w,b
  3068  0026DA  0100               	movlb	0	; () banked
  3069  0026DC  5DD6               	subwf	servo_rotate0@j& (0+255),w,b
  3070  0026DE  0100               	movlb	0	; () banked
  3071  0026E0  51D1               	movf	(??_servo_rotate0+1)& (0+255),w,b
  3072  0026E2  0100               	movlb	0	; () banked
  3073  0026E4  59D7               	subwfb	(servo_rotate0@j+1)& (0+255),w,b
  3074  0026E6  A0D8               	btfss	status,0,c
  3075  0026E8  D7E1               	goto	l5378
  3076                           
  3077                           ; BSR set to: 0
  3078                           
  3079                           ; BSR set to: 0
  3080  0026EA  0100               	movlb	0	; () banked
  3081  0026EC  4BD4               	infsnz	servo_rotate0@i& (0+255),f,b
  3082  0026EE  2BD5               	incf	(servo_rotate0@i+1)& (0+255),f,b
  3083  0026F0  D7B6               	goto	l5366
  3084  0026F2                     l378:
  3085                           
  3086                           ; BSR set to: 0
  3087  0026F2  0012               	return		;funcret
  3088  0026F4                     __end_of_servo_rotate0:
  3089                           	opt stack 0
  3090                           tblptru	equ	0xFF8
  3091                           tblptrh	equ	0xFF7
  3092                           tblptrl	equ	0xFF6
  3093                           tablat	equ	0xFF5
  3094                           intcon	equ	0xFF2
  3095                           intcon2	equ	0xFF1
  3096                           intcon3	equ	0xFF0
  3097                           postinc0	equ	0xFEE
  3098                           wreg	equ	0xFE8
  3099                           postinc1	equ	0xFE6
  3100                           postdec1	equ	0xFE5
  3101                           fsr1h	equ	0xFE2
  3102                           fsr1l	equ	0xFE1
  3103                           postinc2	equ	0xFDE
  3104                           postdec2	equ	0xFDD
  3105                           fsr2h	equ	0xFDA
  3106                           fsr2l	equ	0xFD9
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function _read_colorsensor *****************
  3110 ;; Defined at:
  3111 ;;		line 455 in file "main.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  color_high      4   27[BANK0 ] unsigned char [4]
  3116 ;;  color_low       4   23[BANK0 ] unsigned char [4]
  3117 ;;  i               2   31[BANK0 ] int 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;Total ram usage:       14 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    9
  3134 ;; This function calls:
  3135 ;;		_I2C_Master_Read
  3136 ;;		_I2C_Master_Start
  3137 ;;		_I2C_Master_Stop
  3138 ;;		_I2C_Master_Write
  3139 ;; This function is called by:
  3140 ;;		_standby
  3141 ;;		_operation
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text6
  3146  001794                     __ptext6:
  3147                           	opt stack 0
  3148  001794                     _read_colorsensor:
  3149                           	opt stack 20
  3150                           
  3151                           ;main.c: 456: unsigned char color_low[4];
  3152                           ;main.c: 457: unsigned char color_high[4];
  3153                           ;main.c: 458: int i;
  3154                           ;main.c: 480: I2C_Master_Start();
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;incstack = 0
  3158  001794  EC8E  F018         	call	_I2C_Master_Start	;wreg free
  3159                           
  3160                           ;main.c: 481: I2C_Master_Write(0b01010011);
  3161  001798  0E00               	movlw	0
  3162  00179A  0100               	movlb	0	; () banked
  3163  00179C  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3164  00179E  0E53               	movlw	83
  3165  0017A0  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  3166  0017A2  EC80  F018         	call	_I2C_Master_Write	;wreg free
  3167                           
  3168                           ;main.c: 482: for(i=0; i<3; i++){
  3169  0017A6  0E00               	movlw	0
  3170  0017A8  0100               	movlb	0	; () banked
  3171  0017AA  6FDE               	movwf	(read_colorsensor@i+1)& (0+255),b
  3172  0017AC  0E00               	movlw	0
  3173  0017AE  6FDD               	movwf	read_colorsensor@i& (0+255),b
  3174  0017B0                     l5314:
  3175                           
  3176                           ; BSR set to: 0
  3177  0017B0  0100               	movlb	0	; () banked
  3178  0017B2  BFDE               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  3179  0017B4  D008               	goto	l5318
  3180  0017B6  0100               	movlb	0	; () banked
  3181  0017B8  51DE               	movf	(read_colorsensor@i+1)& (0+255),w,b
  3182  0017BA  E121               	bnz	l5324
  3183  0017BC  0E03               	movlw	3
  3184  0017BE  0100               	movlb	0	; () banked
  3185  0017C0  5DDD               	subwf	read_colorsensor@i& (0+255),w,b
  3186  0017C2  B0D8               	btfsc	status,0,c
  3187  0017C4  D01C               	goto	l5324
  3188  0017C6                     l5318:
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;main.c: 483: color_low[i] = I2C_Master_Read(1);
  3192  0017C6  0ED5               	movlw	low read_colorsensor@color_low
  3193  0017C8  0100               	movlb	0	; () banked
  3194  0017CA  25DD               	addwf	read_colorsensor@i& (0+255),w,b
  3195  0017CC  6ED9               	movwf	fsr2l,c
  3196  0017CE  0E00               	movlw	high read_colorsensor@color_low
  3197  0017D0  0100               	movlb	0	; () banked
  3198  0017D2  21DE               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  3199  0017D4  6EDA               	movwf	fsr2h,c
  3200  0017D6  0E01               	movlw	1
  3201  0017D8  ECC1  F017         	call	_I2C_Master_Read
  3202  0017DC  6EDF               	movwf	indf2,c
  3203                           
  3204                           ;main.c: 484: color_high[i] = I2C_Master_Read(1);
  3205  0017DE  0ED9               	movlw	low read_colorsensor@color_high
  3206  0017E0  0100               	movlb	0	; () banked
  3207  0017E2  25DD               	addwf	read_colorsensor@i& (0+255),w,b
  3208  0017E4  6ED9               	movwf	fsr2l,c
  3209  0017E6  0E00               	movlw	high read_colorsensor@color_high
  3210  0017E8  0100               	movlb	0	; () banked
  3211  0017EA  21DE               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  3212  0017EC  6EDA               	movwf	fsr2h,c
  3213  0017EE  0E01               	movlw	1
  3214  0017F0  ECC1  F017         	call	_I2C_Master_Read
  3215  0017F4  6EDF               	movwf	indf2,c
  3216  0017F6  0100               	movlb	0	; () banked
  3217  0017F8  4BDD               	infsnz	read_colorsensor@i& (0+255),f,b
  3218  0017FA  2BDE               	incf	(read_colorsensor@i+1)& (0+255),f,b
  3219  0017FC  D7D9               	goto	l5314
  3220  0017FE                     l5324:
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;main.c: 485: }
  3224                           ;main.c: 486: color_low[3] = I2C_Master_Read(1);
  3225  0017FE  0E01               	movlw	1
  3226  001800  ECC1  F017         	call	_I2C_Master_Read
  3227  001804  0100               	movlb	0	; () banked
  3228  001806  6FD8               	movwf	(read_colorsensor@color_low+3)& (0+255),b
  3229                           
  3230                           ;main.c: 487: color_high[3] = I2C_Master_Read(0);
  3231  001808  0E00               	movlw	0
  3232  00180A  ECC1  F017         	call	_I2C_Master_Read
  3233  00180E  0100               	movlb	0	; () banked
  3234  001810  6FDC               	movwf	(read_colorsensor@color_high+3)& (0+255),b
  3235                           
  3236                           ;main.c: 488: I2C_Master_Stop();
  3237  001812  EC8A  F018         	call	_I2C_Master_Stop	;wreg free
  3238                           
  3239                           ;main.c: 489: for(i=0; i<4; i++){
  3240  001816  0E00               	movlw	0
  3241  001818  0100               	movlb	0	; () banked
  3242  00181A  6FDE               	movwf	(read_colorsensor@i+1)& (0+255),b
  3243  00181C  0E00               	movlw	0
  3244  00181E  6FDD               	movwf	read_colorsensor@i& (0+255),b
  3245  001820                     l5328:
  3246                           
  3247                           ; BSR set to: 0
  3248  001820  0100               	movlb	0	; () banked
  3249  001822  BFDE               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  3250  001824  D008               	goto	l5332
  3251  001826  0100               	movlb	0	; () banked
  3252  001828  51DE               	movf	(read_colorsensor@i+1)& (0+255),w,b
  3253  00182A  E139               	bnz	l396
  3254  00182C  0E04               	movlw	4
  3255  00182E  0100               	movlb	0	; () banked
  3256  001830  5DDD               	subwf	read_colorsensor@i& (0+255),w,b
  3257  001832  B0D8               	btfsc	status,0,c
  3258  001834  0012               	return	
  3259  001836                     l5332:
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;main.c: 490: color[i] = (color_high[i] << 8)|(color_low[i]);
  3263  001836  0ED9               	movlw	low read_colorsensor@color_high
  3264  001838  0100               	movlb	0	; () banked
  3265  00183A  25DD               	addwf	read_colorsensor@i& (0+255),w,b
  3266  00183C  6ED9               	movwf	fsr2l,c
  3267  00183E  0E00               	movlw	high read_colorsensor@color_high
  3268  001840  0100               	movlb	0	; () banked
  3269  001842  21DE               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  3270  001844  6EDA               	movwf	fsr2h,c
  3271  001846  50DF               	movf	indf2,w,c
  3272  001848  0100               	movlb	0	; () banked
  3273  00184A  6FD1               	movwf	??_read_colorsensor& (0+255),b
  3274  00184C  0100               	movlb	0	; () banked
  3275  00184E  51D1               	movf	??_read_colorsensor& (0+255),w,b
  3276  001850  0100               	movlb	0	; () banked
  3277  001852  6FD3               	movwf	(??_read_colorsensor+2)& (0+255),b
  3278  001854  6BD2               	clrf	(??_read_colorsensor+1)& (0+255),b
  3279  001856  0ED5               	movlw	low read_colorsensor@color_low
  3280  001858  0100               	movlb	0	; () banked
  3281  00185A  25DD               	addwf	read_colorsensor@i& (0+255),w,b
  3282  00185C  6ED9               	movwf	fsr2l,c
  3283  00185E  0E00               	movlw	high read_colorsensor@color_low
  3284  001860  0100               	movlb	0	; () banked
  3285  001862  21DE               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  3286  001864  6EDA               	movwf	fsr2h,c
  3287  001866  50DF               	movf	indf2,w,c
  3288  001868  0100               	movlb	0	; () banked
  3289  00186A  6FD4               	movwf	(??_read_colorsensor+3)& (0+255),b
  3290  00186C  0100               	movlb	0	; () banked
  3291  00186E  51D4               	movf	(??_read_colorsensor+3)& (0+255),w,b
  3292  001870  0100               	movlb	0	; () banked
  3293  001872  13D2               	iorwf	(??_read_colorsensor+1)& (0+255),f,b
  3294  001874  0E00               	movlw	0
  3295  001876  13D3               	iorwf	(??_read_colorsensor+2)& (0+255),f,b
  3296  001878  90D8               	bcf	status,0,c
  3297  00187A  0100               	movlb	0	; () banked
  3298  00187C  35DD               	rlcf	read_colorsensor@i& (0+255),w,b
  3299  00187E  6ED9               	movwf	fsr2l,c
  3300  001880  0100               	movlb	0	; () banked
  3301  001882  35DE               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  3302  001884  6EDA               	movwf	fsr2h,c
  3303  001886  0E8A               	movlw	low _color
  3304  001888  26D9               	addwf	fsr2l,f,c
  3305  00188A  0E00               	movlw	high _color
  3306  00188C  22DA               	addwfc	fsr2h,f,c
  3307  00188E  C0D2  FFDE         	movff	??_read_colorsensor+1,postinc2
  3308  001892  C0D3  FFDD         	movff	??_read_colorsensor+2,postdec2
  3309                           
  3310                           ; BSR set to: 0
  3311  001896  0100               	movlb	0	; () banked
  3312  001898  4BDD               	infsnz	read_colorsensor@i& (0+255),f,b
  3313  00189A  2BDE               	incf	(read_colorsensor@i+1)& (0+255),f,b
  3314  00189C  D7C1               	goto	l5328
  3315  00189E                     l396:
  3316                           
  3317                           ; BSR set to: 0
  3318  00189E  0012               	return		;funcret
  3319  0018A0                     __end_of_read_colorsensor:
  3320                           	opt stack 0
  3321                           tblptru	equ	0xFF8
  3322                           tblptrh	equ	0xFF7
  3323                           tblptrl	equ	0xFF6
  3324                           tablat	equ	0xFF5
  3325                           intcon	equ	0xFF2
  3326                           intcon2	equ	0xFF1
  3327                           intcon3	equ	0xFF0
  3328                           postinc0	equ	0xFEE
  3329                           wreg	equ	0xFE8
  3330                           postinc1	equ	0xFE6
  3331                           postdec1	equ	0xFE5
  3332                           fsr1h	equ	0xFE2
  3333                           fsr1l	equ	0xFE1
  3334                           indf2	equ	0xFDF
  3335                           postinc2	equ	0xFDE
  3336                           postdec2	equ	0xFDD
  3337                           fsr2h	equ	0xFDA
  3338                           fsr2l	equ	0xFD9
  3339                           status	equ	0xFD8
  3340                           
  3341 ;; *************** function ___ftmul *****************
  3342 ;; Defined at:
  3343 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;  f1              3   28[BANK0 ] float 
  3346 ;;  f2              3   31[BANK0 ] float 
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;  f3_as_produc    3   38[BANK0 ] unsigned um
  3349 ;;  sign            1   42[BANK0 ] unsigned char 
  3350 ;;  cntr            1   41[BANK0 ] unsigned char 
  3351 ;;  exp             1   37[BANK0 ] unsigned char 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  3   28[BANK0 ] float 
  3354 ;; Registers used:
  3355 ;;		wreg, status,2, status,0, cstack
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3361 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;Total ram usage:       15 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    8
  3368 ;; This function calls:
  3369 ;;		___ftpack
  3370 ;; This function is called by:
  3371 ;;		_operation
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           	psect	text7
  3376  0013F6                     __ptext7:
  3377                           	opt stack 0
  3378  0013F6                     ___ftmul:
  3379                           	opt stack 21
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;incstack = 0
  3383  0013F6  C0DC  F0E0         	movff	___ftmul@f1+2,??___ftmul
  3384  0013FA  0100               	movlb	0	; () banked
  3385  0013FC  6BE1               	clrf	(??___ftmul+1)& (0+255),b
  3386  0013FE  6BE2               	clrf	(??___ftmul+2)& (0+255),b
  3387  001400  0100               	movlb	0	; () banked
  3388  001402  35DB               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3389  001404  0100               	movlb	0	; () banked
  3390  001406  37E0               	rlcf	??___ftmul& (0+255),f,b
  3391  001408  E301               	bnc	u5371
  3392  00140A  81E1               	bsf	(??___ftmul+1)& (0+255),0,b
  3393  00140C                     u5371:
  3394  00140C  0100               	movlb	0	; () banked
  3395  00140E  51E0               	movf	??___ftmul& (0+255),w,b
  3396  001410  0100               	movlb	0	; () banked
  3397  001412  6FE3               	movwf	___ftmul@exp& (0+255),b
  3398  001414  0100               	movlb	0	; () banked
  3399  001416  51E3               	movf	___ftmul@exp& (0+255),w,b
  3400  001418  A4D8               	btfss	status,2,c
  3401  00141A  D00A               	goto	l5392
  3402                           
  3403                           ; BSR set to: 0
  3404  00141C  0E00               	movlw	0
  3405  00141E  0100               	movlb	0	; () banked
  3406  001420  6FDA               	movwf	?___ftmul& (0+255),b
  3407  001422  0E00               	movlw	0
  3408  001424  0100               	movlb	0	; () banked
  3409  001426  6FDB               	movwf	(?___ftmul+1)& (0+255),b
  3410  001428  0E00               	movlw	0
  3411  00142A  0100               	movlb	0	; () banked
  3412  00142C  6FDC               	movwf	(?___ftmul+2)& (0+255),b
  3413                           
  3414                           ; BSR set to: 0
  3415  00142E  0012               	return	
  3416  001430                     l5392:
  3417                           
  3418                           ; BSR set to: 0
  3419  001430  C0DF  F0E0         	movff	___ftmul@f2+2,??___ftmul
  3420  001434  0100               	movlb	0	; () banked
  3421  001436  6BE1               	clrf	(??___ftmul+1)& (0+255),b
  3422  001438  6BE2               	clrf	(??___ftmul+2)& (0+255),b
  3423  00143A  0100               	movlb	0	; () banked
  3424  00143C  35DE               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  3425  00143E  0100               	movlb	0	; () banked
  3426  001440  37E0               	rlcf	??___ftmul& (0+255),f,b
  3427  001442  E301               	bnc	u5391
  3428  001444  81E1               	bsf	(??___ftmul+1)& (0+255),0,b
  3429  001446                     u5391:
  3430  001446  0100               	movlb	0	; () banked
  3431  001448  51E0               	movf	??___ftmul& (0+255),w,b
  3432  00144A  0100               	movlb	0	; () banked
  3433  00144C  6FE8               	movwf	___ftmul@sign& (0+255),b
  3434  00144E  0100               	movlb	0	; () banked
  3435  001450  51E8               	movf	___ftmul@sign& (0+255),w,b
  3436  001452  A4D8               	btfss	status,2,c
  3437  001454  D00A               	goto	l5398
  3438                           
  3439                           ; BSR set to: 0
  3440  001456  0E00               	movlw	0
  3441  001458  0100               	movlb	0	; () banked
  3442  00145A  6FDA               	movwf	?___ftmul& (0+255),b
  3443  00145C  0E00               	movlw	0
  3444  00145E  0100               	movlb	0	; () banked
  3445  001460  6FDB               	movwf	(?___ftmul+1)& (0+255),b
  3446  001462  0E00               	movlw	0
  3447  001464  0100               	movlb	0	; () banked
  3448  001466  6FDC               	movwf	(?___ftmul+2)& (0+255),b
  3449                           
  3450                           ; BSR set to: 0
  3451  001468  0012               	return	
  3452  00146A                     l5398:
  3453                           
  3454                           ; BSR set to: 0
  3455  00146A  0100               	movlb	0	; () banked
  3456  00146C  51E8               	movf	___ftmul@sign& (0+255),w,b
  3457  00146E  0F7B               	addlw	123
  3458  001470  0100               	movlb	0	; () banked
  3459  001472  27E3               	addwf	___ftmul@exp& (0+255),f,b
  3460                           
  3461                           ; BSR set to: 0
  3462  001474  C0DC  F0E8         	movff	___ftmul@f1+2,___ftmul@sign
  3463  001478  0100               	movlb	0	; () banked
  3464  00147A  51DF               	movf	(___ftmul@f2+2)& (0+255),w,b
  3465  00147C  0100               	movlb	0	; () banked
  3466  00147E  1BE8               	xorwf	___ftmul@sign& (0+255),f,b
  3467  001480  0E80               	movlw	128
  3468  001482  0100               	movlb	0	; () banked
  3469  001484  17E8               	andwf	___ftmul@sign& (0+255),f,b
  3470                           
  3471                           ; BSR set to: 0
  3472  001486  0100               	movlb	0	; () banked
  3473  001488  8FDB               	bsf	(___ftmul@f1+1)& (0+255),7,b
  3474                           
  3475                           ; BSR set to: 0
  3476  00148A  0100               	movlb	0	; () banked
  3477  00148C  8FDE               	bsf	(___ftmul@f2+1)& (0+255),7,b
  3478                           
  3479                           ; BSR set to: 0
  3480  00148E  0EFF               	movlw	255
  3481  001490  0100               	movlb	0	; () banked
  3482  001492  17DD               	andwf	___ftmul@f2& (0+255),f,b
  3483  001494  0EFF               	movlw	255
  3484  001496  0100               	movlb	0	; () banked
  3485  001498  17DE               	andwf	(___ftmul@f2+1)& (0+255),f,b
  3486  00149A  0E00               	movlw	0
  3487  00149C  0100               	movlb	0	; () banked
  3488  00149E  17DF               	andwf	(___ftmul@f2+2)& (0+255),f,b
  3489                           
  3490                           ; BSR set to: 0
  3491  0014A0  0E00               	movlw	0
  3492  0014A2  0100               	movlb	0	; () banked
  3493  0014A4  6FE4               	movwf	___ftmul@f3_as_product& (0+255),b
  3494  0014A6  0E00               	movlw	0
  3495  0014A8  0100               	movlb	0	; () banked
  3496  0014AA  6FE5               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3497  0014AC  0E00               	movlw	0
  3498  0014AE  0100               	movlb	0	; () banked
  3499  0014B0  6FE6               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3500                           
  3501                           ; BSR set to: 0
  3502  0014B2  0E07               	movlw	7
  3503  0014B4  0100               	movlb	0	; () banked
  3504  0014B6  6FE7               	movwf	___ftmul@cntr& (0+255),b
  3505  0014B8                     l5412:
  3506                           
  3507                           ; BSR set to: 0
  3508  0014B8  0100               	movlb	0	; () banked
  3509  0014BA  A1DA               	btfss	___ftmul@f1& (0+255),0,b
  3510  0014BC  D00C               	goto	l5416
  3511                           
  3512                           ; BSR set to: 0
  3513  0014BE  0100               	movlb	0	; () banked
  3514  0014C0  51DD               	movf	___ftmul@f2& (0+255),w,b
  3515  0014C2  0100               	movlb	0	; () banked
  3516  0014C4  27E4               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3517  0014C6  0100               	movlb	0	; () banked
  3518  0014C8  51DE               	movf	(___ftmul@f2+1)& (0+255),w,b
  3519  0014CA  0100               	movlb	0	; () banked
  3520  0014CC  23E5               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3521  0014CE  0100               	movlb	0	; () banked
  3522  0014D0  51DF               	movf	(___ftmul@f2+2)& (0+255),w,b
  3523  0014D2  0100               	movlb	0	; () banked
  3524  0014D4  23E6               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3525  0014D6                     l5416:
  3526                           
  3527                           ; BSR set to: 0
  3528  0014D6  0100               	movlb	0	; () banked
  3529  0014D8  90D8               	bcf	status,0,c
  3530  0014DA  33DC               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3531  0014DC  33DB               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3532  0014DE  33DA               	rrcf	___ftmul@f1& (0+255),f,b
  3533  0014E0  0100               	movlb	0	; () banked
  3534  0014E2  90D8               	bcf	status,0,c
  3535  0014E4  37DD               	rlcf	___ftmul@f2& (0+255),f,b
  3536  0014E6  37DE               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  3537  0014E8  37DF               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  3538                           
  3539                           ; BSR set to: 0
  3540  0014EA  0100               	movlb	0	; () banked
  3541  0014EC  2FE7               	decfsz	___ftmul@cntr& (0+255),f,b
  3542  0014EE  D7E4               	goto	l5412
  3543                           
  3544                           ; BSR set to: 0
  3545                           
  3546                           ; BSR set to: 0
  3547  0014F0  0E09               	movlw	9
  3548  0014F2  0100               	movlb	0	; () banked
  3549  0014F4  6FE7               	movwf	___ftmul@cntr& (0+255),b
  3550  0014F6                     l5422:
  3551                           
  3552                           ; BSR set to: 0
  3553  0014F6  0100               	movlb	0	; () banked
  3554  0014F8  A1DA               	btfss	___ftmul@f1& (0+255),0,b
  3555  0014FA  D00C               	goto	l5426
  3556                           
  3557                           ; BSR set to: 0
  3558  0014FC  0100               	movlb	0	; () banked
  3559  0014FE  51DD               	movf	___ftmul@f2& (0+255),w,b
  3560  001500  0100               	movlb	0	; () banked
  3561  001502  27E4               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3562  001504  0100               	movlb	0	; () banked
  3563  001506  51DE               	movf	(___ftmul@f2+1)& (0+255),w,b
  3564  001508  0100               	movlb	0	; () banked
  3565  00150A  23E5               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3566  00150C  0100               	movlb	0	; () banked
  3567  00150E  51DF               	movf	(___ftmul@f2+2)& (0+255),w,b
  3568  001510  0100               	movlb	0	; () banked
  3569  001512  23E6               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3570  001514                     l5426:
  3571                           
  3572                           ; BSR set to: 0
  3573  001514  0100               	movlb	0	; () banked
  3574  001516  90D8               	bcf	status,0,c
  3575  001518  33DC               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3576  00151A  33DB               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3577  00151C  33DA               	rrcf	___ftmul@f1& (0+255),f,b
  3578  00151E  0100               	movlb	0	; () banked
  3579  001520  90D8               	bcf	status,0,c
  3580  001522  33E6               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3581  001524  33E5               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3582  001526  33E4               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3583                           
  3584                           ; BSR set to: 0
  3585  001528  0100               	movlb	0	; () banked
  3586  00152A  2FE7               	decfsz	___ftmul@cntr& (0+255),f,b
  3587  00152C  D7E4               	goto	l5422
  3588                           
  3589                           ; BSR set to: 0
  3590                           
  3591                           ; BSR set to: 0
  3592  00152E  C0E4  F0CE         	movff	___ftmul@f3_as_product,___ftpack@arg
  3593  001532  C0E5  F0CF         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3594  001536  C0E6  F0D0         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3595  00153A  C0E3  F0D1         	movff	___ftmul@exp,___ftpack@exp
  3596  00153E  C0E8  F0D2         	movff	___ftmul@sign,___ftpack@sign
  3597  001542  EC50  F00C         	call	___ftpack	;wreg free
  3598  001546  C0CE  F0DA         	movff	?___ftpack,?___ftmul
  3599  00154A  C0CF  F0DB         	movff	?___ftpack+1,?___ftmul+1
  3600  00154E  C0D0  F0DC         	movff	?___ftpack+2,?___ftmul+2
  3601  001552  0012               	return	
  3602  001554                     __end_of___ftmul:
  3603                           	opt stack 0
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           intcon	equ	0xFF2
  3609                           intcon2	equ	0xFF1
  3610                           intcon3	equ	0xFF0
  3611                           postinc0	equ	0xFEE
  3612                           wreg	equ	0xFE8
  3613                           postinc1	equ	0xFE6
  3614                           postdec1	equ	0xFE5
  3615                           fsr1h	equ	0xFE2
  3616                           fsr1l	equ	0xFE1
  3617                           indf2	equ	0xFDF
  3618                           postinc2	equ	0xFDE
  3619                           postdec2	equ	0xFDD
  3620                           fsr2h	equ	0xFDA
  3621                           fsr2l	equ	0xFD9
  3622                           status	equ	0xFD8
  3623                           
  3624 ;; *************** function ___ftge *****************
  3625 ;; Defined at:
  3626 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;  ff1             3    0[BANK1 ] float 
  3629 ;;  ff2             3    3[BANK1 ] float 
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;		None
  3632 ;; Return value:  Size  Location     Type
  3633 ;;		None               void
  3634 ;; Registers used:
  3635 ;;		wreg, status,2, status,0
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3641 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;      Totals:         0       3       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;Total ram usage:        9 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    7
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_operation
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           	psect	text8
  3656  0022AC                     __ptext8:
  3657                           	opt stack 0
  3658  0022AC                     ___ftge:
  3659                           	opt stack 22
  3660                           
  3661                           ;incstack = 0
  3662  0022AC  0101               	movlb	1	; () banked
  3663  0022AE  AF02               	btfss	(___ftge@ff1+2)& (0+255),7,b
  3664  0022B0  D01D               	goto	l5450
  3665                           
  3666                           ; BSR set to: 1
  3667  0022B2  C100  F0E9         	movff	___ftge@ff1,??___ftge
  3668  0022B6  C101  F0EA         	movff	___ftge@ff1+1,??___ftge+1
  3669  0022BA  C102  F0EB         	movff	___ftge@ff1+2,??___ftge+2
  3670  0022BE  0100               	movlb	0	; () banked
  3671  0022C0  1FE9               	comf	??___ftge& (0+255),f,b
  3672  0022C2  1FEA               	comf	(??___ftge+1)& (0+255),f,b
  3673  0022C4  1FEB               	comf	(??___ftge+2)& (0+255),f,b
  3674  0022C6  2BE9               	incf	??___ftge& (0+255),f,b
  3675  0022C8  0E00               	movlw	0
  3676  0022CA  23EA               	addwfc	(??___ftge+1)& (0+255),f,b
  3677  0022CC  23EB               	addwfc	(??___ftge+2)& (0+255),f,b
  3678  0022CE  0E00               	movlw	0
  3679  0022D0  0100               	movlb	0	; () banked
  3680  0022D2  25E9               	addwf	??___ftge& (0+255),w,b
  3681  0022D4  0101               	movlb	1	; () banked
  3682  0022D6  6F00               	movwf	___ftge@ff1& (0+255),b
  3683  0022D8  0E00               	movlw	0
  3684  0022DA  0100               	movlb	0	; () banked
  3685  0022DC  21EA               	addwfc	(??___ftge+1)& (0+255),w,b
  3686  0022DE  0101               	movlb	1	; () banked
  3687  0022E0  6F01               	movwf	(___ftge@ff1+1)& (0+255),b
  3688  0022E2  0E80               	movlw	128
  3689  0022E4  0100               	movlb	0	; () banked
  3690  0022E6  21EB               	addwfc	(??___ftge+2)& (0+255),w,b
  3691  0022E8  0101               	movlb	1	; () banked
  3692  0022EA  6F02               	movwf	(___ftge@ff1+2)& (0+255),b
  3693  0022EC                     l5450:
  3694                           
  3695                           ; BSR set to: 1
  3696  0022EC  0101               	movlb	1	; () banked
  3697  0022EE  AF05               	btfss	(___ftge@ff2+2)& (0+255),7,b
  3698  0022F0  D01D               	goto	l5454
  3699                           
  3700                           ; BSR set to: 1
  3701  0022F2  C103  F0E9         	movff	___ftge@ff2,??___ftge
  3702  0022F6  C104  F0EA         	movff	___ftge@ff2+1,??___ftge+1
  3703  0022FA  C105  F0EB         	movff	___ftge@ff2+2,??___ftge+2
  3704  0022FE  0100               	movlb	0	; () banked
  3705  002300  1FE9               	comf	??___ftge& (0+255),f,b
  3706  002302  1FEA               	comf	(??___ftge+1)& (0+255),f,b
  3707  002304  1FEB               	comf	(??___ftge+2)& (0+255),f,b
  3708  002306  2BE9               	incf	??___ftge& (0+255),f,b
  3709  002308  0E00               	movlw	0
  3710  00230A  23EA               	addwfc	(??___ftge+1)& (0+255),f,b
  3711  00230C  23EB               	addwfc	(??___ftge+2)& (0+255),f,b
  3712  00230E  0E00               	movlw	0
  3713  002310  0100               	movlb	0	; () banked
  3714  002312  25E9               	addwf	??___ftge& (0+255),w,b
  3715  002314  0101               	movlb	1	; () banked
  3716  002316  6F03               	movwf	___ftge@ff2& (0+255),b
  3717  002318  0E00               	movlw	0
  3718  00231A  0100               	movlb	0	; () banked
  3719  00231C  21EA               	addwfc	(??___ftge+1)& (0+255),w,b
  3720  00231E  0101               	movlb	1	; () banked
  3721  002320  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  3722  002322  0E80               	movlw	128
  3723  002324  0100               	movlb	0	; () banked
  3724  002326  21EB               	addwfc	(??___ftge+2)& (0+255),w,b
  3725  002328  0101               	movlb	1	; () banked
  3726  00232A  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  3727  00232C                     l5454:
  3728                           
  3729                           ; BSR set to: 1
  3730  00232C  0E00               	movlw	0
  3731  00232E  0101               	movlb	1	; () banked
  3732  002330  1B00               	xorwf	___ftge@ff1& (0+255),f,b
  3733  002332  0E00               	movlw	0
  3734  002334  0101               	movlb	1	; () banked
  3735  002336  1B01               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  3736  002338  0E80               	movlw	128
  3737  00233A  0101               	movlb	1	; () banked
  3738  00233C  1B02               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  3739                           
  3740                           ; BSR set to: 1
  3741  00233E  0E00               	movlw	0
  3742  002340  0101               	movlb	1	; () banked
  3743  002342  1B03               	xorwf	___ftge@ff2& (0+255),f,b
  3744  002344  0E00               	movlw	0
  3745  002346  0101               	movlb	1	; () banked
  3746  002348  1B04               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  3747  00234A  0E80               	movlw	128
  3748  00234C  0101               	movlb	1	; () banked
  3749  00234E  1B05               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  3750  002350  0101               	movlb	1	; () banked
  3751  002352  5103               	movf	___ftge@ff2& (0+255),w,b
  3752  002354  0101               	movlb	1	; () banked
  3753  002356  5D00               	subwf	___ftge@ff1& (0+255),w,b
  3754  002358  0101               	movlb	1	; () banked
  3755  00235A  5104               	movf	(___ftge@ff2+1)& (0+255),w,b
  3756  00235C  0101               	movlb	1	; () banked
  3757  00235E  5901               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  3758  002360  0101               	movlb	1	; () banked
  3759  002362  5105               	movf	(___ftge@ff2+2)& (0+255),w,b
  3760  002364  0101               	movlb	1	; () banked
  3761  002366  5902               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  3762  002368  B0D8               	btfsc	status,0,c
  3763  00236A  D002               	goto	l5460
  3764                           
  3765                           ; BSR set to: 1
  3766  00236C  90D8               	bcf	status,0,c
  3767  00236E  0012               	return	
  3768  002370                     l5460:
  3769                           
  3770                           ; BSR set to: 1
  3771  002370  80D8               	bsf	status,0,c
  3772                           
  3773                           ; BSR set to: 1
  3774  002372  0012               	return	
  3775  002374                     __end_of___ftge:
  3776                           	opt stack 0
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           intcon	equ	0xFF2
  3782                           intcon2	equ	0xFF1
  3783                           intcon3	equ	0xFF0
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           postinc1	equ	0xFE6
  3787                           postdec1	equ	0xFE5
  3788                           fsr1h	equ	0xFE2
  3789                           fsr1l	equ	0xFE1
  3790                           indf2	equ	0xFDF
  3791                           postinc2	equ	0xFDE
  3792                           postdec2	equ	0xFDD
  3793                           fsr2h	equ	0xFDA
  3794                           fsr2l	equ	0xFD9
  3795                           status	equ	0xFD8
  3796                           
  3797 ;; *************** function ___awtoft *****************
  3798 ;; Defined at:
  3799 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  c               2   24[BANK0 ] int 
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;  sign            1   27[BANK0 ] unsigned char 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  3   24[BANK0 ] float 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2, status,0, cstack
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3813 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3816 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3817 ;;Total ram usage:        4 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    8
  3820 ;; This function calls:
  3821 ;;		___ftpack
  3822 ;; This function is called by:
  3823 ;;		_operation
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text9
  3828  002DDA                     __ptext9:
  3829                           	opt stack 0
  3830  002DDA                     ___awtoft:
  3831                           	opt stack 21
  3832                           
  3833                           ; BSR set to: 1
  3834                           ;incstack = 0
  3835  002DDA  0E00               	movlw	0
  3836  002DDC  0100               	movlb	0	; () banked
  3837  002DDE  6FD9               	movwf	___awtoft@sign& (0+255),b
  3838                           
  3839                           ; BSR set to: 0
  3840  002DE0  0100               	movlb	0	; () banked
  3841  002DE2  AFD7               	btfss	(___awtoft@c+1)& (0+255),7,b
  3842  002DE4  D008               	goto	l5442
  3843                           
  3844                           ; BSR set to: 0
  3845  002DE6  0100               	movlb	0	; () banked
  3846  002DE8  6DD6               	negf	___awtoft@c& (0+255),b
  3847  002DEA  1FD7               	comf	(___awtoft@c+1)& (0+255),f,b
  3848  002DEC  B0D8               	btfsc	status,0,c
  3849  002DEE  2BD7               	incf	(___awtoft@c+1)& (0+255),f,b
  3850                           
  3851                           ; BSR set to: 0
  3852  002DF0  0E01               	movlw	1
  3853  002DF2  0100               	movlb	0	; () banked
  3854  002DF4  6FD9               	movwf	___awtoft@sign& (0+255),b
  3855  002DF6                     l5442:
  3856                           
  3857                           ; BSR set to: 0
  3858  002DF6  C0D6  F0CE         	movff	___awtoft@c,___ftpack@arg
  3859  002DFA  C0D7  F0CF         	movff	___awtoft@c+1,___ftpack@arg+1
  3860  002DFE  0100               	movlb	0	; () banked
  3861  002E00  6BD0               	clrf	(___ftpack@arg+2)& (0+255),b
  3862  002E02  0E8E               	movlw	142
  3863  002E04  0100               	movlb	0	; () banked
  3864  002E06  6FD1               	movwf	___ftpack@exp& (0+255),b
  3865  002E08  C0D9  F0D2         	movff	___awtoft@sign,___ftpack@sign
  3866  002E0C  EC50  F00C         	call	___ftpack	;wreg free
  3867  002E10  C0CE  F0D6         	movff	?___ftpack,?___awtoft
  3868  002E14  C0CF  F0D7         	movff	?___ftpack+1,?___awtoft+1
  3869  002E18  C0D0  F0D8         	movff	?___ftpack+2,?___awtoft+2
  3870  002E1C  0012               	return	
  3871  002E1E                     __end_of___awtoft:
  3872                           	opt stack 0
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           intcon	equ	0xFF2
  3878                           intcon2	equ	0xFF1
  3879                           intcon3	equ	0xFF0
  3880                           postinc0	equ	0xFEE
  3881                           wreg	equ	0xFE8
  3882                           postinc1	equ	0xFE6
  3883                           postdec1	equ	0xFE5
  3884                           fsr1h	equ	0xFE2
  3885                           fsr1l	equ	0xFE1
  3886                           indf2	equ	0xFDF
  3887                           postinc2	equ	0xFDE
  3888                           postdec2	equ	0xFDD
  3889                           fsr2h	equ	0xFDA
  3890                           fsr2l	equ	0xFD9
  3891                           status	equ	0xFD8
  3892                           
  3893 ;; *************** function ___ftpack *****************
  3894 ;; Defined at:
  3895 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;  arg             3   16[BANK0 ] unsigned um
  3898 ;;  exp             1   19[BANK0 ] unsigned char 
  3899 ;;  sign            1   20[BANK0 ] unsigned char 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  3   16[BANK0 ] float 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3911 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;Total ram usage:        8 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    7
  3918 ;; This function calls:
  3919 ;;		Nothing
  3920 ;; This function is called by:
  3921 ;;		___awtoft
  3922 ;;		___ftmul
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text10
  3927  0018A0                     __ptext10:
  3928                           	opt stack 0
  3929  0018A0                     ___ftpack:
  3930                           	opt stack 21
  3931                           
  3932                           ;incstack = 0
  3933  0018A0  0100               	movlb	0	; () banked
  3934  0018A2  51D1               	movf	___ftpack@exp& (0+255),w,b
  3935  0018A4  0100               	movlb	0	; () banked
  3936  0018A6  B4D8               	btfsc	status,2,c
  3937  0018A8  D008               	goto	l5102
  3938                           
  3939                           ; BSR set to: 0
  3940  0018AA  0100               	movlb	0	; () banked
  3941  0018AC  51CE               	movf	___ftpack@arg& (0+255),w,b
  3942  0018AE  0100               	movlb	0	; () banked
  3943  0018B0  11CF               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  3944  0018B2  0100               	movlb	0	; () banked
  3945  0018B4  11D0               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  3946  0018B6  A4D8               	btfss	status,2,c
  3947  0018B8  D011               	goto	l5108
  3948  0018BA                     l5102:
  3949                           
  3950                           ; BSR set to: 0
  3951  0018BA  0E00               	movlw	0
  3952  0018BC  0100               	movlb	0	; () banked
  3953  0018BE  6FCE               	movwf	?___ftpack& (0+255),b
  3954  0018C0  0E00               	movlw	0
  3955  0018C2  0100               	movlb	0	; () banked
  3956  0018C4  6FCF               	movwf	(?___ftpack+1)& (0+255),b
  3957  0018C6  0E00               	movlw	0
  3958  0018C8  0100               	movlb	0	; () banked
  3959  0018CA  6FD0               	movwf	(?___ftpack+2)& (0+255),b
  3960                           
  3961                           ; BSR set to: 0
  3962  0018CC  0012               	return	
  3963  0018CE                     l5106:
  3964                           
  3965                           ; BSR set to: 0
  3966  0018CE  0100               	movlb	0	; () banked
  3967  0018D0  2BD1               	incf	___ftpack@exp& (0+255),f,b
  3968  0018D2  0100               	movlb	0	; () banked
  3969  0018D4  90D8               	bcf	status,0,c
  3970  0018D6  33D0               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3971  0018D8  33CF               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3972  0018DA  33CE               	rrcf	___ftpack@arg& (0+255),f,b
  3973  0018DC                     l5108:
  3974                           
  3975                           ; BSR set to: 0
  3976  0018DC  0E00               	movlw	0
  3977  0018DE  0100               	movlb	0	; () banked
  3978  0018E0  15CE               	andwf	___ftpack@arg& (0+255),w,b
  3979  0018E2  0100               	movlb	0	; () banked
  3980  0018E4  6FD3               	movwf	??___ftpack& (0+255),b
  3981  0018E6  0E00               	movlw	0
  3982  0018E8  0100               	movlb	0	; () banked
  3983  0018EA  15CF               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3984  0018EC  0100               	movlb	0	; () banked
  3985  0018EE  6FD4               	movwf	(??___ftpack+1)& (0+255),b
  3986  0018F0  0EFE               	movlw	254
  3987  0018F2  0100               	movlb	0	; () banked
  3988  0018F4  15D0               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3989  0018F6  0100               	movlb	0	; () banked
  3990  0018F8  6FD5               	movwf	(??___ftpack+2)& (0+255),b
  3991  0018FA  0100               	movlb	0	; () banked
  3992  0018FC  51D3               	movf	??___ftpack& (0+255),w,b
  3993  0018FE  0100               	movlb	0	; () banked
  3994  001900  11D4               	iorwf	(??___ftpack+1)& (0+255),w,b
  3995  001902  0100               	movlb	0	; () banked
  3996  001904  11D5               	iorwf	(??___ftpack+2)& (0+255),w,b
  3997  001906  B4D8               	btfsc	status,2,c
  3998  001908  D011               	goto	l5114
  3999  00190A  D7E1               	goto	l5106
  4000  00190C                     l5110:
  4001                           
  4002                           ; BSR set to: 0
  4003  00190C  0100               	movlb	0	; () banked
  4004  00190E  2BD1               	incf	___ftpack@exp& (0+255),f,b
  4005                           
  4006                           ; BSR set to: 0
  4007  001910  0E01               	movlw	1
  4008  001912  0100               	movlb	0	; () banked
  4009  001914  27CE               	addwf	___ftpack@arg& (0+255),f,b
  4010  001916  0E00               	movlw	0
  4011  001918  0100               	movlb	0	; () banked
  4012  00191A  23CF               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  4013  00191C  0E00               	movlw	0
  4014  00191E  0100               	movlb	0	; () banked
  4015  001920  23D0               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  4016  001922  0100               	movlb	0	; () banked
  4017  001924  90D8               	bcf	status,0,c
  4018  001926  33D0               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  4019  001928  33CF               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  4020  00192A  33CE               	rrcf	___ftpack@arg& (0+255),f,b
  4021  00192C                     l5114:
  4022                           
  4023                           ; BSR set to: 0
  4024  00192C  0E00               	movlw	0
  4025  00192E  0100               	movlb	0	; () banked
  4026  001930  15CE               	andwf	___ftpack@arg& (0+255),w,b
  4027  001932  0100               	movlb	0	; () banked
  4028  001934  6FD3               	movwf	??___ftpack& (0+255),b
  4029  001936  0E00               	movlw	0
  4030  001938  0100               	movlb	0	; () banked
  4031  00193A  15CF               	andwf	(___ftpack@arg+1)& (0+255),w,b
  4032  00193C  0100               	movlb	0	; () banked
  4033  00193E  6FD4               	movwf	(??___ftpack+1)& (0+255),b
  4034  001940  0EFF               	movlw	255
  4035  001942  0100               	movlb	0	; () banked
  4036  001944  15D0               	andwf	(___ftpack@arg+2)& (0+255),w,b
  4037  001946  0100               	movlb	0	; () banked
  4038  001948  6FD5               	movwf	(??___ftpack+2)& (0+255),b
  4039  00194A  0100               	movlb	0	; () banked
  4040  00194C  51D3               	movf	??___ftpack& (0+255),w,b
  4041  00194E  0100               	movlb	0	; () banked
  4042  001950  11D4               	iorwf	(??___ftpack+1)& (0+255),w,b
  4043  001952  0100               	movlb	0	; () banked
  4044  001954  11D5               	iorwf	(??___ftpack+2)& (0+255),w,b
  4045  001956  B4D8               	btfsc	status,2,c
  4046  001958  D008               	goto	l5118
  4047  00195A  D7D8               	goto	l5110
  4048  00195C                     l5116:
  4049                           
  4050                           ; BSR set to: 0
  4051  00195C  0100               	movlb	0	; () banked
  4052  00195E  07D1               	decf	___ftpack@exp& (0+255),f,b
  4053  001960  0100               	movlb	0	; () banked
  4054  001962  90D8               	bcf	status,0,c
  4055  001964  37CE               	rlcf	___ftpack@arg& (0+255),f,b
  4056  001966  37CF               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  4057  001968  37D0               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  4058  00196A                     l5118:
  4059                           
  4060                           ; BSR set to: 0
  4061  00196A  0100               	movlb	0	; () banked
  4062  00196C  BFCF               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  4063  00196E  D004               	goto	l693
  4064                           
  4065                           ; BSR set to: 0
  4066  001970  0E02               	movlw	2
  4067  001972  0100               	movlb	0	; () banked
  4068  001974  61D1               	cpfslt	___ftpack@exp& (0+255),b
  4069  001976  D7F2               	goto	l5116
  4070  001978                     l693:
  4071                           
  4072                           ; BSR set to: 0
  4073  001978  0100               	movlb	0	; () banked
  4074  00197A  B1D1               	btfsc	___ftpack@exp& (0+255),0,b
  4075  00197C  D002               	goto	l5124
  4076                           
  4077                           ; BSR set to: 0
  4078  00197E  0100               	movlb	0	; () banked
  4079  001980  9FCF               	bcf	(___ftpack@arg+1)& (0+255),7,b
  4080  001982                     l5124:
  4081                           
  4082                           ; BSR set to: 0
  4083  001982  0100               	movlb	0	; () banked
  4084  001984  90D8               	bcf	status,0,c
  4085  001986  33D1               	rrcf	___ftpack@exp& (0+255),f,b
  4086  001988  0100               	movlb	0	; () banked
  4087  00198A  51D1               	movf	___ftpack@exp& (0+255),w,b
  4088  00198C  0100               	movlb	0	; () banked
  4089  00198E  13D0               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  4090                           
  4091                           ; BSR set to: 0
  4092  001990  0100               	movlb	0	; () banked
  4093  001992  51D2               	movf	___ftpack@sign& (0+255),w,b
  4094  001994  0100               	movlb	0	; () banked
  4095  001996  B4D8               	btfsc	status,2,c
  4096  001998  D002               	goto	l5130
  4097                           
  4098                           ; BSR set to: 0
  4099  00199A  0100               	movlb	0	; () banked
  4100  00199C  8FD0               	bsf	(___ftpack@arg+2)& (0+255),7,b
  4101  00199E                     l5130:
  4102                           
  4103                           ; BSR set to: 0
  4104  00199E  C0CE  F0CE         	movff	___ftpack@arg,?___ftpack
  4105  0019A2  C0CF  F0CF         	movff	___ftpack@arg+1,?___ftpack+1
  4106  0019A6  C0D0  F0D0         	movff	___ftpack@arg+2,?___ftpack+2
  4107  0019AA  0012               	return	
  4108  0019AC                     __end_of___ftpack:
  4109                           	opt stack 0
  4110                           tblptru	equ	0xFF8
  4111                           tblptrh	equ	0xFF7
  4112                           tblptrl	equ	0xFF6
  4113                           tablat	equ	0xFF5
  4114                           intcon	equ	0xFF2
  4115                           intcon2	equ	0xFF1
  4116                           intcon3	equ	0xFF0
  4117                           postinc0	equ	0xFEE
  4118                           wreg	equ	0xFE8
  4119                           postinc1	equ	0xFE6
  4120                           postdec1	equ	0xFE5
  4121                           fsr1h	equ	0xFE2
  4122                           fsr1l	equ	0xFE1
  4123                           indf2	equ	0xFDF
  4124                           postinc2	equ	0xFDE
  4125                           postdec2	equ	0xFDD
  4126                           fsr2h	equ	0xFDA
  4127                           fsr2l	equ	0xFD9
  4128                           status	equ	0xFD8
  4129                           
  4130 ;; *************** function _initLCD *****************
  4131 ;; Defined at:
  4132 ;;		line 14 in file "lcd.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;		None
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;		None
  4137 ;; Return value:  Size  Location     Type
  4138 ;;                  1    wreg      void 
  4139 ;; Registers used:
  4140 ;;		wreg, status,2, status,0, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;Total ram usage:        1 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    9
  4153 ;; This function calls:
  4154 ;;		_lcdInst
  4155 ;; This function is called by:
  4156 ;;		_main
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text11
  4161  002D3C                     __ptext11:
  4162                           	opt stack 0
  4163  002D3C                     _initLCD:
  4164                           	opt stack 21
  4165                           
  4166                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;incstack = 0
  4170  002D3C  0E31               	movlw	49
  4171  002D3E  0100               	movlb	0	; () banked
  4172  002D40  6FD1               	movwf	??_initLCD& (0+255),b
  4173  002D42  0EB2               	movlw	178
  4174  002D44                     u5767:
  4175  002D44  2EE8               	decfsz	wreg,f,c
  4176  002D46  D7FE               	bra	u5767
  4177  002D48  2FD1               	decfsz	??_initLCD& (0+255),f,b
  4178  002D4A  D7FC               	bra	u5767
  4179  002D4C  F000               	nop	
  4180                           
  4181                           ;lcd.c: 16: lcdInst(0b00110011);
  4182  002D4E  0E33               	movlw	51
  4183  002D50  EC6C  F018         	call	_lcdInst
  4184                           
  4185                           ;lcd.c: 17: lcdInst(0b00110011);
  4186  002D54  0E33               	movlw	51
  4187  002D56  EC6C  F018         	call	_lcdInst
  4188                           
  4189                           ;lcd.c: 18: lcdInst(0b00110010);
  4190  002D5A  0E32               	movlw	50
  4191  002D5C  EC6C  F018         	call	_lcdInst
  4192                           
  4193                           ;lcd.c: 19: lcdInst(0b00101000);
  4194  002D60  0E28               	movlw	40
  4195  002D62  EC6C  F018         	call	_lcdInst
  4196                           
  4197                           ;lcd.c: 20: lcdInst(0b00001111);
  4198  002D66  0E0F               	movlw	15
  4199  002D68  EC6C  F018         	call	_lcdInst
  4200                           
  4201                           ;lcd.c: 21: lcdInst(0b00000110);
  4202  002D6C  0E06               	movlw	6
  4203  002D6E  EC6C  F018         	call	_lcdInst
  4204                           
  4205                           ;lcd.c: 22: lcdInst(0b00000001);
  4206  002D72  0E01               	movlw	1
  4207  002D74  EC6C  F018         	call	_lcdInst
  4208                           
  4209                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  4210  002D78  0E31               	movlw	49
  4211  002D7A  0100               	movlb	0	; () banked
  4212  002D7C  6FD1               	movwf	??_initLCD& (0+255),b
  4213  002D7E  0EB2               	movlw	178
  4214  002D80                     u5777:
  4215  002D80  2EE8               	decfsz	wreg,f,c
  4216  002D82  D7FE               	bra	u5777
  4217  002D84  2FD1               	decfsz	??_initLCD& (0+255),f,b
  4218  002D86  D7FC               	bra	u5777
  4219  002D88  F000               	nop	
  4220  002D8A  0012               	return		;funcret
  4221  002D8C                     __end_of_initLCD:
  4222                           	opt stack 0
  4223                           tblptru	equ	0xFF8
  4224                           tblptrh	equ	0xFF7
  4225                           tblptrl	equ	0xFF6
  4226                           tablat	equ	0xFF5
  4227                           intcon	equ	0xFF2
  4228                           intcon2	equ	0xFF1
  4229                           intcon3	equ	0xFF0
  4230                           postinc0	equ	0xFEE
  4231                           wreg	equ	0xFE8
  4232                           postinc1	equ	0xFE6
  4233                           postdec1	equ	0xFE5
  4234                           fsr1h	equ	0xFE2
  4235                           fsr1l	equ	0xFE1
  4236                           indf2	equ	0xFDF
  4237                           postinc2	equ	0xFDE
  4238                           postdec2	equ	0xFDD
  4239                           fsr2h	equ	0xFDA
  4240                           fsr2l	equ	0xFD9
  4241                           status	equ	0xFD8
  4242                           
  4243 ;; *************** function _emergencystop *****************
  4244 ;; Defined at:
  4245 ;;		line 409 in file "main.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;Total ram usage:        0 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:   10
  4266 ;; This function calls:
  4267 ;;		_lcdInst
  4268 ;;		_printf
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text12
  4275  00304A                     __ptext12:
  4276                           	opt stack 0
  4277  00304A                     _emergencystop:
  4278                           	opt stack 20
  4279                           
  4280                           ;main.c: 410: (INTCONbits.GIE = 0);
  4281                           
  4282                           ;incstack = 0
  4283  00304A  9EF2               	bcf	intcon,7,c	;volatile
  4284                           
  4285                           ;main.c: 411: PORTAbits.RA2 = 0;
  4286  00304C  9480               	bcf	3968,2,c	;volatile
  4287                           
  4288                           ;main.c: 412: lcdInst(0b00000001);
  4289  00304E  0E01               	movlw	1
  4290  003050  EC6C  F018         	call	_lcdInst
  4291                           
  4292                           ;main.c: 413: lcdInst(0b10000000);
  4293  003054  0E80               	movlw	128
  4294  003056  EC6C  F018         	call	_lcdInst
  4295                           
  4296                           ;main.c: 414: printf("EMERGENCY STOP");
  4297  00305A  0EB8               	movlw	low STR_21
  4298  00305C  0100               	movlb	0	; () banked
  4299  00305E  6FDA               	movwf	printf@f& (0+255),b
  4300  003060  0EFF               	movlw	high STR_21
  4301  003062  0100               	movlb	0	; () banked
  4302  003064  6FDB               	movwf	(printf@f+1)& (0+255),b
  4303  003066  ECF5  F003         	call	_printf	;wreg free
  4304  00306A                     l364:
  4305  00306A  D7FF               	goto	l364
  4306  00306C                     __end_of_emergencystop:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           intcon	equ	0xFF2
  4313                           intcon2	equ	0xFF1
  4314                           intcon3	equ	0xFF0
  4315                           postinc0	equ	0xFEE
  4316                           wreg	equ	0xFE8
  4317                           postinc1	equ	0xFE6
  4318                           postdec1	equ	0xFE5
  4319                           fsr1h	equ	0xFE2
  4320                           fsr1l	equ	0xFE1
  4321                           indf2	equ	0xFDF
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function _date_time *****************
  4329 ;; Defined at:
  4330 ;;		line 234 in file "main.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;		None
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  i               1   42[BANK0 ] unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      void 
  4337 ;; Registers used:
  4338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;Total ram usage:        3 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:   10
  4351 ;; This function calls:
  4352 ;;		_I2C_Master_Read
  4353 ;;		_I2C_Master_Start
  4354 ;;		_I2C_Master_Stop
  4355 ;;		_I2C_Master_Write
  4356 ;;		_lcdInst
  4357 ;;		_printf
  4358 ;; This function is called by:
  4359 ;;		_main
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text13
  4364  001C90                     __ptext13:
  4365                           	opt stack 0
  4366  001C90                     _date_time:
  4367                           	opt stack 20
  4368                           
  4369                           ;main.c: 236: I2C_Master_Start();
  4370                           
  4371                           ;incstack = 0
  4372  001C90  EC8E  F018         	call	_I2C_Master_Start	;wreg free
  4373                           
  4374                           ;main.c: 237: I2C_Master_Write(0b11010000);
  4375  001C94  0E00               	movlw	0
  4376  001C96  0100               	movlb	0	; () banked
  4377  001C98  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4378  001C9A  0ED0               	movlw	208
  4379  001C9C  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  4380  001C9E  EC80  F018         	call	_I2C_Master_Write	;wreg free
  4381                           
  4382                           ;main.c: 238: I2C_Master_Write(0x00);
  4383  001CA2  0E00               	movlw	0
  4384  001CA4  0100               	movlb	0	; () banked
  4385  001CA6  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4386  001CA8  0E00               	movlw	0
  4387  001CAA  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  4388  001CAC  EC80  F018         	call	_I2C_Master_Write	;wreg free
  4389                           
  4390                           ;main.c: 239: I2C_Master_Stop();
  4391  001CB0  EC8A  F018         	call	_I2C_Master_Stop	;wreg free
  4392                           
  4393                           ;main.c: 242: I2C_Master_Start();
  4394  001CB4  EC8E  F018         	call	_I2C_Master_Start	;wreg free
  4395                           
  4396                           ;main.c: 243: I2C_Master_Write(0b11010001);
  4397  001CB8  0E00               	movlw	0
  4398  001CBA  0100               	movlb	0	; () banked
  4399  001CBC  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4400  001CBE  0ED1               	movlw	209
  4401  001CC0  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  4402  001CC2  EC80  F018         	call	_I2C_Master_Write	;wreg free
  4403                           
  4404                           ;main.c: 244: for(unsigned char i=0;i<0x06;i++){
  4405  001CC6  0E00               	movlw	0
  4406  001CC8  0100               	movlb	0	; () banked
  4407  001CCA  6FE8               	movwf	date_time@i& (0+255),b
  4408  001CCC                     l5652:
  4409                           
  4410                           ; BSR set to: 0
  4411  001CCC  0E05               	movlw	5
  4412  001CCE  0100               	movlb	0	; () banked
  4413  001CD0  65E8               	cpfsgt	date_time@i& (0+255),b
  4414  001CD2  D001               	goto	l5656
  4415  001CD4  D010               	goto	l5662
  4416  001CD6                     l5656:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;main.c: 245: time[i] = I2C_Master_Read(1);
  4420  001CD6  0100               	movlb	0	; () banked
  4421  001CD8  51E8               	movf	date_time@i& (0+255),w,b
  4422  001CDA  0D01               	mullw	1
  4423  001CDC  0E9A               	movlw	low _time
  4424  001CDE  24F3               	addwf	prodl,w,c
  4425  001CE0  6ED9               	movwf	fsr2l,c
  4426  001CE2  0E00               	movlw	high _time
  4427  001CE4  20F4               	addwfc	prodh,w,c
  4428  001CE6  6EDA               	movwf	fsr2h,c
  4429  001CE8  0E01               	movlw	1
  4430  001CEA  ECC1  F017         	call	_I2C_Master_Read
  4431  001CEE  6EDF               	movwf	indf2,c
  4432  001CF0  0100               	movlb	0	; () banked
  4433  001CF2  2BE8               	incf	date_time@i& (0+255),f,b
  4434  001CF4  D7EB               	goto	l5652
  4435  001CF6                     l5662:
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;main.c: 246: }
  4439                           ;main.c: 247: time[6] = I2C_Master_Read(0);
  4440  001CF6  0E00               	movlw	0
  4441  001CF8  ECC1  F017         	call	_I2C_Master_Read
  4442  001CFC  0100               	movlb	0	; () banked
  4443  001CFE  6FA0               	movwf	(_time+6)& (0+255),b
  4444                           
  4445                           ;main.c: 248: I2C_Master_Stop();
  4446  001D00  EC8A  F018         	call	_I2C_Master_Stop	;wreg free
  4447                           
  4448                           ;main.c: 251: lcdInst(0b10000000);
  4449  001D04  0E80               	movlw	128
  4450  001D06  EC6C  F018         	call	_lcdInst
  4451                           
  4452                           ;main.c: 252: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  4453  001D0A  0EE1               	movlw	low STR_8
  4454  001D0C  0100               	movlb	0	; () banked
  4455  001D0E  6FDA               	movwf	printf@f& (0+255),b
  4456  001D10  0EFE               	movlw	high STR_8
  4457  001D12  0100               	movlb	0	; () banked
  4458  001D14  6FDB               	movwf	(printf@f+1)& (0+255),b
  4459  001D16  C09F  F0DC         	movff	_time+5,?_printf+2
  4460  001D1A  0100               	movlb	0	; () banked
  4461  001D1C  6BDD               	clrf	(?_printf+3)& (0+255),b
  4462  001D1E  C09E  F0DE         	movff	_time+4,?_printf+4
  4463  001D22  0100               	movlb	0	; () banked
  4464  001D24  6BDF               	clrf	(?_printf+5)& (0+255),b
  4465  001D26  C0A0  F0E0         	movff	_time+6,?_printf+6
  4466  001D2A  0100               	movlb	0	; () banked
  4467  001D2C  6BE1               	clrf	(?_printf+7)& (0+255),b
  4468  001D2E  ECF5  F003         	call	_printf	;wreg free
  4469                           
  4470                           ;main.c: 253: lcdInst(0b11000000);
  4471  001D32  0EC0               	movlw	192
  4472  001D34  EC6C  F018         	call	_lcdInst
  4473                           
  4474                           ;main.c: 254: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  4475  001D38  0EF8               	movlw	low STR_9
  4476  001D3A  0100               	movlb	0	; () banked
  4477  001D3C  6FDA               	movwf	printf@f& (0+255),b
  4478  001D3E  0EFE               	movlw	high STR_9
  4479  001D40  0100               	movlb	0	; () banked
  4480  001D42  6FDB               	movwf	(printf@f+1)& (0+255),b
  4481  001D44  C09C  F0DC         	movff	_time+2,?_printf+2
  4482  001D48  0100               	movlb	0	; () banked
  4483  001D4A  6BDD               	clrf	(?_printf+3)& (0+255),b
  4484  001D4C  C09B  F0DE         	movff	_time+1,?_printf+4
  4485  001D50  0100               	movlb	0	; () banked
  4486  001D52  6BDF               	clrf	(?_printf+5)& (0+255),b
  4487  001D54  C09A  F0E0         	movff	_time,?_printf+6
  4488  001D58  0100               	movlb	0	; () banked
  4489  001D5A  6BE1               	clrf	(?_printf+7)& (0+255),b
  4490  001D5C  ECF5  F003         	call	_printf	;wreg free
  4491                           
  4492                           ;main.c: 256: _delay((unsigned long)((100)*(10000000/4000.0)));
  4493  001D60  0E02               	movlw	2
  4494  001D62  0100               	movlb	0	; () banked
  4495  001D64  6FE7               	movwf	(??_date_time+1)& (0+255),b
  4496  001D66  0E45               	movlw	69
  4497  001D68  0100               	movlb	0	; () banked
  4498  001D6A  6FE6               	movwf	??_date_time& (0+255),b
  4499  001D6C  0EA9               	movlw	169
  4500  001D6E                     u5787:
  4501  001D6E  2EE8               	decfsz	wreg,f,c
  4502  001D70  D7FE               	bra	u5787
  4503  001D72  2FE6               	decfsz	??_date_time& (0+255),f,b
  4504  001D74  D7FC               	bra	u5787
  4505  001D76  2FE7               	decfsz	(??_date_time+1)& (0+255),f,b
  4506  001D78  D7FA               	bra	u5787
  4507  001D7A  D000               	nop2	
  4508  001D7C  0012               	return	
  4509  001D7E                     __end_of_date_time:
  4510                           	opt stack 0
  4511                           tblptru	equ	0xFF8
  4512                           tblptrh	equ	0xFF7
  4513                           tblptrl	equ	0xFF6
  4514                           tablat	equ	0xFF5
  4515                           prodh	equ	0xFF4
  4516                           prodl	equ	0xFF3
  4517                           intcon	equ	0xFF2
  4518                           intcon2	equ	0xFF1
  4519                           intcon3	equ	0xFF0
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           postinc1	equ	0xFE6
  4523                           postdec1	equ	0xFE5
  4524                           fsr1h	equ	0xFE2
  4525                           fsr1l	equ	0xFE1
  4526                           indf2	equ	0xFDF
  4527                           postinc2	equ	0xFDE
  4528                           postdec2	equ	0xFDD
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function _I2C_Master_Read *****************
  4534 ;; Defined at:
  4535 ;;		line 105 in file "I2C.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  a               1    wreg     unsigned char 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  a               1   17[BANK0 ] unsigned char 
  4540 ;;  temp            1   18[BANK0 ] unsigned char 
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      unsigned char 
  4543 ;; Registers used:
  4544 ;;		wreg, status,2, status,0, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;Total ram usage:        2 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:    8
  4557 ;; This function calls:
  4558 ;;		_I2C_Master_Wait
  4559 ;; This function is called by:
  4560 ;;		_date_time
  4561 ;;		_read_colorsensor
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text14
  4566  002F82                     __ptext14:
  4567                           	opt stack 0
  4568  002F82                     _I2C_Master_Read:
  4569                           	opt stack 20
  4570                           
  4571                           ;incstack = 0
  4572                           ;I2C_Master_Read@a stored from wreg
  4573  002F82  0100               	movlb	0	; () banked
  4574  002F84  6FCF               	movwf	I2C_Master_Read@a& (0+255),b
  4575                           
  4576                           ;I2C.c: 107: unsigned char temp;
  4577                           ;I2C.c: 108: I2C_Master_Wait();
  4578  002F86  EC51  F018         	call	_I2C_Master_Wait	;wreg free
  4579                           
  4580                           ;I2C.c: 109: RCEN = 1;
  4581  002F8A  86C5               	bsf	4037,3,c	;volatile
  4582                           
  4583                           ;I2C.c: 110: I2C_Master_Wait();
  4584  002F8C  EC51  F018         	call	_I2C_Master_Wait	;wreg free
  4585                           
  4586                           ;I2C.c: 111: temp = SSPBUF;
  4587  002F90  CFC9 F0D0          	movff	4041,I2C_Master_Read@temp	;volatile
  4588                           
  4589                           ;I2C.c: 112: I2C_Master_Wait();
  4590  002F94  EC51  F018         	call	_I2C_Master_Wait	;wreg free
  4591                           
  4592                           ;I2C.c: 113: ACKDT = (a)?0:1;
  4593  002F98  0100               	movlb	0	; () banked
  4594  002F9A  51CF               	movf	I2C_Master_Read@a& (0+255),w,b
  4595  002F9C  0100               	movlb	0	; () banked
  4596  002F9E  A4D8               	btfss	status,2,c
  4597  002FA0  D002               	goto	u4840
  4598  002FA2  8AC5               	bsf	4037,5,c	;volatile
  4599  002FA4  D001               	goto	l5070
  4600  002FA6                     u4840:
  4601  002FA6  9AC5               	bcf	4037,5,c	;volatile
  4602  002FA8                     l5070:
  4603                           
  4604                           ;I2C.c: 114: ACKEN = 1;
  4605  002FA8  88C5               	bsf	4037,4,c	;volatile
  4606                           
  4607                           ;I2C.c: 115: return temp;
  4608  002FAA  0100               	movlb	0	; () banked
  4609  002FAC  51D0               	movf	I2C_Master_Read@temp& (0+255),w,b
  4610  002FAE  0012               	return	
  4611  002FB0                     __end_of_I2C_Master_Read:
  4612                           	opt stack 0
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           prodh	equ	0xFF4
  4618                           prodl	equ	0xFF3
  4619                           intcon	equ	0xFF2
  4620                           intcon2	equ	0xFF1
  4621                           intcon3	equ	0xFF0
  4622                           postinc0	equ	0xFEE
  4623                           wreg	equ	0xFE8
  4624                           postinc1	equ	0xFE6
  4625                           postdec1	equ	0xFE5
  4626                           fsr1h	equ	0xFE2
  4627                           fsr1l	equ	0xFE1
  4628                           indf2	equ	0xFDF
  4629                           postinc2	equ	0xFDE
  4630                           postdec2	equ	0xFDD
  4631                           fsr2h	equ	0xFDA
  4632                           fsr2l	equ	0xFD9
  4633                           status	equ	0xFD8
  4634                           
  4635 ;; *************** function _bottle_time *****************
  4636 ;; Defined at:
  4637 ;;		line 309 in file "main.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;		None
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      void 
  4644 ;; Registers used:
  4645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;Total ram usage:        0 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:   10
  4658 ;; This function calls:
  4659 ;;		_lcdInst
  4660 ;;		_printf
  4661 ;; This function is called by:
  4662 ;;		_main
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           	psect	text15
  4667  002F16                     __ptext15:
  4668                           	opt stack 0
  4669  002F16                     _bottle_time:
  4670                           	opt stack 20
  4671                           
  4672                           ;main.c: 310: lcdInst(0b10000000);
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;incstack = 0
  4676  002F16  0E80               	movlw	128
  4677  002F18  EC6C  F018         	call	_lcdInst
  4678                           
  4679                           ;main.c: 311: printf("Total Operation       ");
  4680  002F1C  0ECA               	movlw	low STR_17
  4681  002F1E  0100               	movlb	0	; () banked
  4682  002F20  6FDA               	movwf	printf@f& (0+255),b
  4683  002F22  0EFE               	movlw	high STR_17
  4684  002F24  0100               	movlb	0	; () banked
  4685  002F26  6FDB               	movwf	(printf@f+1)& (0+255),b
  4686  002F28  ECF5  F003         	call	_printf	;wreg free
  4687                           
  4688                           ;main.c: 312: lcdInst(0b11000000);
  4689  002F2C  0EC0               	movlw	192
  4690  002F2E  EC6C  F018         	call	_lcdInst
  4691                           
  4692                           ;main.c: 313: printf("Time: %d s       ", operation_time);
  4693  002F32  0E0F               	movlw	low STR_18
  4694  002F34  0100               	movlb	0	; () banked
  4695  002F36  6FDA               	movwf	printf@f& (0+255),b
  4696  002F38  0EFF               	movlw	high STR_18
  4697  002F3A  0100               	movlb	0	; () banked
  4698  002F3C  6FDB               	movwf	(printf@f+1)& (0+255),b
  4699  002F3E  C0B9  F0DC         	movff	_operation_time,?_printf+2
  4700  002F42  C0BA  F0DD         	movff	_operation_time+1,?_printf+3
  4701  002F46  ECF5  F003         	call	_printf	;wreg free
  4702  002F4A  0012               	return	
  4703  002F4C                     __end_of_bottle_time:
  4704                           	opt stack 0
  4705                           tblptru	equ	0xFF8
  4706                           tblptrh	equ	0xFF7
  4707                           tblptrl	equ	0xFF6
  4708                           tablat	equ	0xFF5
  4709                           prodh	equ	0xFF4
  4710                           prodl	equ	0xFF3
  4711                           intcon	equ	0xFF2
  4712                           intcon2	equ	0xFF1
  4713                           intcon3	equ	0xFF0
  4714                           postinc0	equ	0xFEE
  4715                           wreg	equ	0xFE8
  4716                           postinc1	equ	0xFE6
  4717                           postdec1	equ	0xFE5
  4718                           fsr1h	equ	0xFE2
  4719                           fsr1l	equ	0xFE1
  4720                           indf2	equ	0xFDF
  4721                           postinc2	equ	0xFDE
  4722                           postdec2	equ	0xFDD
  4723                           fsr2h	equ	0xFDA
  4724                           fsr2l	equ	0xFD9
  4725                           status	equ	0xFD8
  4726                           
  4727 ;; *************** function _bottle_count *****************
  4728 ;; Defined at:
  4729 ;;		line 278 in file "main.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;		None
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;		None
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4745 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;Total ram usage:        2 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; Hardware stack levels required when called:   10
  4750 ;; This function calls:
  4751 ;;		___awmod
  4752 ;;		_lcdInst
  4753 ;;		_printf
  4754 ;; This function is called by:
  4755 ;;		_main
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text16
  4760  001554                     __ptext16:
  4761                           	opt stack 0
  4762  001554                     _bottle_count:
  4763                           	opt stack 20
  4764                           
  4765                           ;main.c: 279: switch(bottle_count_disp % 3){
  4766                           
  4767                           ;incstack = 0
  4768  001554  D065               	goto	l5698
  4769  001556                     l5674:
  4770                           
  4771                           ;main.c: 281: lcdInst(0b10000000);
  4772  001556  0E80               	movlw	128
  4773  001558  EC6C  F018         	call	_lcdInst
  4774                           
  4775                           ;main.c: 282: printf("Bottle Count    ");
  4776  00155C  0E43               	movlw	low STR_10
  4777  00155E  0100               	movlb	0	; () banked
  4778  001560  6FDA               	movwf	printf@f& (0+255),b
  4779  001562  0EFF               	movlw	high STR_10
  4780  001564  0100               	movlb	0	; () banked
  4781  001566  6FDB               	movwf	(printf@f+1)& (0+255),b
  4782  001568  ECF5  F003         	call	_printf	;wreg free
  4783                           
  4784                           ;main.c: 283: lcdInst(0b11000000);
  4785  00156C  0EC0               	movlw	192
  4786  00156E  EC6C  F018         	call	_lcdInst
  4787                           
  4788                           ;main.c: 284: printf("Total: %d       ", bottle_count_array[0]);
  4789  001572  0E32               	movlw	low STR_11
  4790  001574  0100               	movlb	0	; () banked
  4791  001576  6FDA               	movwf	printf@f& (0+255),b
  4792  001578  0EFF               	movlw	high STR_11
  4793  00157A  0100               	movlb	0	; () banked
  4794  00157C  6FDB               	movwf	(printf@f+1)& (0+255),b
  4795  00157E  C080  F0DC         	movff	_bottle_count_array,?_printf+2
  4796  001582  C081  F0DD         	movff	_bottle_count_array+1,?_printf+3
  4797  001586  ECF5  F003         	call	_printf	;wreg free
  4798                           
  4799                           ;main.c: 285: break;
  4800  00158A  D066               	goto	l5700
  4801  00158C                     l5680:
  4802                           
  4803                           ;main.c: 287: lcdInst(0b10000000);
  4804  00158C  0E80               	movlw	128
  4805  00158E  EC6C  F018         	call	_lcdInst
  4806                           
  4807                           ;main.c: 288: printf("YOP W/ CAP: %d  ", bottle_count_array[1]);
  4808  001592  0E54               	movlw	low STR_12
  4809  001594  0100               	movlb	0	; () banked
  4810  001596  6FDA               	movwf	printf@f& (0+255),b
  4811  001598  0EFF               	movlw	high STR_12
  4812  00159A  0100               	movlb	0	; () banked
  4813  00159C  6FDB               	movwf	(printf@f+1)& (0+255),b
  4814  00159E  C082  F0DC         	movff	_bottle_count_array+2,?_printf+2
  4815  0015A2  C083  F0DD         	movff	_bottle_count_array+3,?_printf+3
  4816  0015A6  ECF5  F003         	call	_printf	;wreg free
  4817                           
  4818                           ;main.c: 289: lcdInst(0b11000000);
  4819  0015AA  0EC0               	movlw	192
  4820  0015AC  EC6C  F018         	call	_lcdInst
  4821                           
  4822                           ;main.c: 290: printf("YOP NO CAP: %d  ", bottle_count_array[2]);
  4823  0015B0  0E65               	movlw	low STR_13
  4824  0015B2  0100               	movlb	0	; () banked
  4825  0015B4  6FDA               	movwf	printf@f& (0+255),b
  4826  0015B6  0EFF               	movlw	high STR_13
  4827  0015B8  0100               	movlb	0	; () banked
  4828  0015BA  6FDB               	movwf	(printf@f+1)& (0+255),b
  4829  0015BC  C084  F0DC         	movff	_bottle_count_array+4,?_printf+2
  4830  0015C0  C085  F0DD         	movff	_bottle_count_array+5,?_printf+3
  4831  0015C4  ECF5  F003         	call	_printf	;wreg free
  4832                           
  4833                           ;main.c: 291: break;
  4834  0015C8  D047               	goto	l5700
  4835  0015CA                     l5686:
  4836                           
  4837                           ;main.c: 293: lcdInst(0b10000000);
  4838  0015CA  0E80               	movlw	128
  4839  0015CC  EC6C  F018         	call	_lcdInst
  4840                           
  4841                           ;main.c: 294: printf("ESKA W/ CAP: %d ", bottle_count_array[3]);
  4842  0015D0  0E76               	movlw	low STR_14
  4843  0015D2  0100               	movlb	0	; () banked
  4844  0015D4  6FDA               	movwf	printf@f& (0+255),b
  4845  0015D6  0EFF               	movlw	high STR_14
  4846  0015D8  0100               	movlb	0	; () banked
  4847  0015DA  6FDB               	movwf	(printf@f+1)& (0+255),b
  4848  0015DC  C086  F0DC         	movff	_bottle_count_array+6,?_printf+2
  4849  0015E0  C087  F0DD         	movff	_bottle_count_array+7,?_printf+3
  4850  0015E4  ECF5  F003         	call	_printf	;wreg free
  4851                           
  4852                           ;main.c: 295: lcdInst(0b11000000);
  4853  0015E8  0EC0               	movlw	192
  4854  0015EA  EC6C  F018         	call	_lcdInst
  4855                           
  4856                           ;main.c: 296: printf("ESKA NO CAP: %d ", bottle_count_array[4]);
  4857  0015EE  0E87               	movlw	low STR_15
  4858  0015F0  0100               	movlb	0	; () banked
  4859  0015F2  6FDA               	movwf	printf@f& (0+255),b
  4860  0015F4  0EFF               	movlw	high STR_15
  4861  0015F6  0100               	movlb	0	; () banked
  4862  0015F8  6FDB               	movwf	(printf@f+1)& (0+255),b
  4863  0015FA  C088  F0DC         	movff	_bottle_count_array+8,?_printf+2
  4864  0015FE  C089  F0DD         	movff	_bottle_count_array+9,?_printf+3
  4865  001602  ECF5  F003         	call	_printf	;wreg free
  4866                           
  4867                           ;main.c: 297: break;
  4868  001606  D028               	goto	l5700
  4869  001608                     l5692:
  4870                           
  4871                           ;main.c: 300: lcdInst(0b10000000);
  4872  001608  0E80               	movlw	128
  4873  00160A  EC6C  F018         	call	_lcdInst
  4874                           
  4875                           ;main.c: 301: printf("ERR: BAD BTLCNT");
  4876  00160E  0EA8               	movlw	low STR_16
  4877  001610  0100               	movlb	0	; () banked
  4878  001612  6FDA               	movwf	printf@f& (0+255),b
  4879  001614  0EFF               	movlw	high STR_16
  4880  001616  0100               	movlb	0	; () banked
  4881  001618  6FDB               	movwf	(printf@f+1)& (0+255),b
  4882  00161A  ECF5  F003         	call	_printf	;wreg free
  4883  00161E  D7F4               	goto	l5692
  4884  001620                     l5698:
  4885  001620  C0ED  F0CE         	movff	_bottle_count_disp,___awmod@dividend
  4886  001624  C0EE  F0CF         	movff	_bottle_count_disp+1,___awmod@dividend+1
  4887  001628  0E00               	movlw	0
  4888  00162A  0100               	movlb	0	; () banked
  4889  00162C  6FD1               	movwf	(___awmod@divisor+1)& (0+255),b
  4890  00162E  0E03               	movlw	3
  4891  001630  6FD0               	movwf	___awmod@divisor& (0+255),b
  4892  001632  EC7A  F013         	call	___awmod	;wreg free
  4893                           
  4894                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4895                           ; Switch size 1, requested type "space"
  4896                           ; Number of cases is 1, Range of values is 0 to 0
  4897                           ; switch strategies available:
  4898                           ; Name         Instructions Cycles
  4899                           ; simple_byte            4     3 (average)
  4900                           ;	Chosen strategy is simple_byte
  4901  001636  0100               	movlb	0	; () banked
  4902  001638  51CF               	movf	(?___awmod+1)& (0+255),w,b
  4903  00163A  0A00               	xorlw	0	; case 0
  4904  00163C  A4D8               	btfss	status,2,c
  4905  00163E  D7E4               	goto	l5692
  4906                           
  4907                           ; BSR set to: 0
  4908                           ; Switch size 1, requested type "space"
  4909                           ; Number of cases is 3, Range of values is 0 to 2
  4910                           ; switch strategies available:
  4911                           ; Name         Instructions Cycles
  4912                           ; simple_byte           10     6 (average)
  4913                           ;	Chosen strategy is simple_byte
  4914  001640  0100               	movlb	0	; () banked
  4915  001642  51CE               	movf	?___awmod& (0+255),w,b
  4916  001644  0A00               	xorlw	0	; case 0
  4917  001646  B4D8               	btfsc	status,2,c
  4918  001648  D786               	goto	l5674
  4919  00164A  0A01               	xorlw	1	; case 1
  4920  00164C  B4D8               	btfsc	status,2,c
  4921  00164E  D79E               	goto	l5680
  4922  001650  0A03               	xorlw	3	; case 2
  4923  001652  B4D8               	btfsc	status,2,c
  4924  001654  D7BA               	goto	l5686
  4925  001656  D7D8               	goto	l5692
  4926  001658                     l5700:
  4927                           
  4928                           ;main.c: 305: _delay((unsigned long)((100)*(10000000/4000.0)));
  4929  001658  0E02               	movlw	2
  4930  00165A  0100               	movlb	0	; () banked
  4931  00165C  6FE7               	movwf	(??_bottle_count+1)& (0+255),b
  4932  00165E  0E45               	movlw	69
  4933  001660  0100               	movlb	0	; () banked
  4934  001662  6FE6               	movwf	??_bottle_count& (0+255),b
  4935  001664  0EA9               	movlw	169
  4936  001666                     u5797:
  4937  001666  2EE8               	decfsz	wreg,f,c
  4938  001668  D7FE               	bra	u5797
  4939  00166A  2FE6               	decfsz	??_bottle_count& (0+255),f,b
  4940  00166C  D7FC               	bra	u5797
  4941  00166E  2FE7               	decfsz	(??_bottle_count+1)& (0+255),f,b
  4942  001670  D7FA               	bra	u5797
  4943  001672  D000               	nop2	
  4944  001674  0012               	return	
  4945  001676                     __end_of_bottle_count:
  4946                           	opt stack 0
  4947                           tblptru	equ	0xFF8
  4948                           tblptrh	equ	0xFF7
  4949                           tblptrl	equ	0xFF6
  4950                           tablat	equ	0xFF5
  4951                           prodh	equ	0xFF4
  4952                           prodl	equ	0xFF3
  4953                           intcon	equ	0xFF2
  4954                           intcon2	equ	0xFF1
  4955                           intcon3	equ	0xFF0
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           postinc1	equ	0xFE6
  4959                           postdec1	equ	0xFE5
  4960                           fsr1h	equ	0xFE2
  4961                           fsr1l	equ	0xFE1
  4962                           indf2	equ	0xFDF
  4963                           postinc2	equ	0xFDE
  4964                           postdec2	equ	0xFDD
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function _printf *****************
  4970 ;; Defined at:
  4971 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  4974 ;;		 -> STR_21(15), STR_20(16), STR_19(11), STR_18(18), 
  4975 ;;		 -> STR_17(23), STR_16(16), STR_15(17), STR_14(17), 
  4976 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  4977 ;;		 -> STR_9(23), STR_8(23), STR_7(9), STR_6(8), 
  4978 ;;		 -> STR_5(13), STR_4(7), STR_3(24), STR_2(24), 
  4979 ;;		 -> STR_1(8), 
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;  idx             1    0[BANK1 ] unsigned char 
  4982 ;;  tmpval          4    0        struct .
  4983 ;;  cp              3    0        PTR const unsigned char 
  4984 ;;  width           2    7[BANK1 ] int 
  4985 ;;  val             2    4[BANK1 ] unsigned int 
  4986 ;;  ap              2    1[BANK1 ] PTR void [1]
  4987 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4988 ;;  len             2    0        unsigned int 
  4989 ;;  c               1    9[BANK1 ] char 
  4990 ;;  flag            1    6[BANK1 ] unsigned char 
  4991 ;;  prec            1    3[BANK1 ] char 
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  2   28[BANK0 ] int 
  4994 ;; Registers used:
  4995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5001 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Totals:         0      12      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;Total ram usage:       22 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    9
  5008 ;; This function calls:
  5009 ;;		___lwdiv
  5010 ;;		___lwmod
  5011 ;;		___wmul
  5012 ;;		_isdigit
  5013 ;;		_putch
  5014 ;; This function is called by:
  5015 ;;		_standby
  5016 ;;		_date_time
  5017 ;;		_bottle_count
  5018 ;;		_bottle_time
  5019 ;;		_operation
  5020 ;;		_operationend
  5021 ;;		_emergencystop
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           	psect	text17
  5026  0007EA                     __ptext17:
  5027                           	opt stack 0
  5028  0007EA                     _printf:
  5029                           	opt stack 20
  5030                           
  5031                           ;doprnt.c: 466: va_list ap;
  5032                           ;doprnt.c: 499: signed char c;
  5033                           ;doprnt.c: 501: int width;
  5034                           ;doprnt.c: 506: signed char prec;
  5035                           ;doprnt.c: 508: unsigned char flag;
  5036                           ;doprnt.c: 523: union {
  5037                           ;doprnt.c: 524: unsigned long vd;
  5038                           ;doprnt.c: 525: double integ;
  5039                           ;doprnt.c: 526: } tmpval;
  5040                           ;doprnt.c: 528: unsigned int val;
  5041                           ;doprnt.c: 529: unsigned len;
  5042                           ;doprnt.c: 530: const char * cp;
  5043                           ;doprnt.c: 533: *ap = __va_start();
  5044                           
  5045                           ;incstack = 0
  5046  0007EA  0EDC               	movlw	low (?_printf+2)
  5047  0007EC  0101               	movlb	1	; () banked
  5048  0007EE  6F01               	movwf	printf@ap& (0+255),b
  5049  0007F0  0E00               	movlw	high (?_printf+2)
  5050  0007F2  0101               	movlb	1	; () banked
  5051  0007F4  6F02               	movwf	(printf@ap+1)& (0+255),b
  5052                           
  5053                           ;doprnt.c: 536: while(c = *f++) {
  5054  0007F6  D1D5               	goto	l5308
  5055  0007F8                     l5178:
  5056                           
  5057                           ; BSR set to: 1
  5058                           ;doprnt.c: 538: if(c != '%')
  5059  0007F8  0E25               	movlw	37
  5060  0007FA  0101               	movlb	1	; () banked
  5061  0007FC  1909               	xorwf	printf@c& (0+255),w,b
  5062  0007FE  B4D8               	btfsc	status,2,c
  5063  000800  D005               	goto	l5182
  5064                           
  5065                           ; BSR set to: 1
  5066                           ;doprnt.c: 540: {
  5067                           ;doprnt.c: 541: (putch(c) );
  5068  000802  0101               	movlb	1	; () banked
  5069  000804  5109               	movf	printf@c& (0+255),w,b
  5070  000806  EC64  F018         	call	_putch
  5071                           
  5072                           ;doprnt.c: 542: continue;
  5073  00080A  D1CB               	goto	l5308
  5074  00080C                     l5182:
  5075                           
  5076                           ;doprnt.c: 543: }
  5077                           ;doprnt.c: 546: width = 0;
  5078  00080C  0E00               	movlw	0
  5079  00080E  0101               	movlb	1	; () banked
  5080  000810  6F08               	movwf	(printf@width+1)& (0+255),b
  5081  000812  0E00               	movlw	0
  5082  000814  6F07               	movwf	printf@width& (0+255),b
  5083                           
  5084                           ;doprnt.c: 548: flag = 0;
  5085  000816  0E00               	movlw	0
  5086  000818  0101               	movlb	1	; () banked
  5087  00081A  6F06               	movwf	printf@flag& (0+255),b
  5088                           
  5089                           ; BSR set to: 1
  5090                           ;doprnt.c: 551: switch(*f) {
  5091                           
  5092                           ;doprnt.c: 550: for(;;) {
  5093  00081C  D005               	goto	l5188
  5094  00081E                     l5184:
  5095                           
  5096                           ;doprnt.c: 580: flag |= 0x04;
  5097  00081E  0101               	movlb	1	; () banked
  5098  000820  8506               	bsf	printf@flag& (0+255),2,b
  5099                           
  5100                           ;doprnt.c: 581: f++;
  5101  000822  0100               	movlb	0	; () banked
  5102  000824  4BDA               	infsnz	printf@f& (0+255),f,b
  5103  000826  2BDB               	incf	(printf@f+1)& (0+255),f,b
  5104  000828                     l5188:
  5105  000828  C0DA  FFF6         	movff	printf@f,tblptrl
  5106  00082C  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5107  000830                     	if	0	;tblptru may be non-zero
  5108  000830                     	endif
  5109  000830                     	if	0	;tblptru may be non-zero
  5110  000830                     	endif
  5111  000830  0008               	tblrd		*
  5112  000832  50F5               	movf	tablat,w,c
  5113                           
  5114                           ; Switch size 1, requested type "space"
  5115                           ; Number of cases is 1, Range of values is 48 to 48
  5116                           ; switch strategies available:
  5117                           ; Name         Instructions Cycles
  5118                           ; simple_byte            4     3 (average)
  5119                           ;	Chosen strategy is simple_byte
  5120  000834  0A30               	xorlw	48	; case 48
  5121  000836  B4D8               	btfsc	status,2,c
  5122  000838  D7F2               	goto	l5184
  5123                           
  5124                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5125                           
  5126                           ;doprnt.c: 586: }
  5127                           
  5128                           ;doprnt.c: 585: break;
  5129  00083A  C0DA  FFF6         	movff	printf@f,tblptrl
  5130  00083E  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5131  000842                     	if	0	;tblptru may be non-zero
  5132  000842                     	endif
  5133  000842                     	if	0	;tblptru may be non-zero
  5134  000842                     	endif
  5135  000842  0008               	tblrd		*
  5136  000844  50F5               	movf	tablat,w,c
  5137  000846  ECD8  F017         	call	_isdigit
  5138  00084A  A0D8               	btfss	status,0,c
  5139  00084C  D048               	goto	l5208
  5140                           
  5141                           ;doprnt.c: 598: width = 0;
  5142  00084E  0E00               	movlw	0
  5143  000850  0101               	movlb	1	; () banked
  5144  000852  6F08               	movwf	(printf@width+1)& (0+255),b
  5145  000854  0E00               	movlw	0
  5146  000856  6F07               	movwf	printf@width& (0+255),b
  5147  000858                     l5194:
  5148                           
  5149                           ;doprnt.c: 600: width *= 10;
  5150  000858  C107  F0CE         	movff	printf@width,___wmul@multiplier
  5151  00085C  C108  F0CF         	movff	printf@width+1,___wmul@multiplier+1
  5152  000860  0E00               	movlw	0
  5153  000862  0100               	movlb	0	; () banked
  5154  000864  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5155  000866  0E0A               	movlw	10
  5156  000868  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  5157  00086A  ECA6  F017         	call	___wmul	;wreg free
  5158  00086E  C0CE  F107         	movff	?___wmul,printf@width
  5159  000872  C0CF  F108         	movff	?___wmul+1,printf@width+1
  5160                           
  5161                           ;doprnt.c: 601: width += *f++ - '0';
  5162  000876  0ED0               	movlw	208
  5163  000878  0100               	movlb	0	; () banked
  5164  00087A  6FE2               	movwf	??_printf& (0+255),b
  5165  00087C  0EFF               	movlw	255
  5166  00087E  0100               	movlb	0	; () banked
  5167  000880  6FE3               	movwf	(??_printf+1)& (0+255),b
  5168  000882  C0DA  FFF6         	movff	printf@f,tblptrl
  5169  000886  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5170  00088A                     	if	0	;tblptru may be non-zero
  5171  00088A                     	endif
  5172  00088A                     	if	0	;tblptru may be non-zero
  5173  00088A                     	endif
  5174  00088A  0008               	tblrd		*
  5175  00088C  50F5               	movf	tablat,w,c
  5176  00088E  0100               	movlb	0	; () banked
  5177  000890  6FE4               	movwf	(??_printf+2)& (0+255),b
  5178  000892  6BE5               	clrf	(??_printf+3)& (0+255),b
  5179  000894  0100               	movlb	0	; () banked
  5180  000896  51E2               	movf	??_printf& (0+255),w,b
  5181  000898  0100               	movlb	0	; () banked
  5182  00089A  27E4               	addwf	(??_printf+2)& (0+255),f,b
  5183  00089C  0100               	movlb	0	; () banked
  5184  00089E  51E3               	movf	(??_printf+1)& (0+255),w,b
  5185  0008A0  0100               	movlb	0	; () banked
  5186  0008A2  23E5               	addwfc	(??_printf+3)& (0+255),f,b
  5187  0008A4  0100               	movlb	0	; () banked
  5188  0008A6  51E4               	movf	(??_printf+2)& (0+255),w,b
  5189  0008A8  0101               	movlb	1	; () banked
  5190  0008AA  2707               	addwf	printf@width& (0+255),f,b
  5191  0008AC  0100               	movlb	0	; () banked
  5192  0008AE  51E5               	movf	(??_printf+3)& (0+255),w,b
  5193  0008B0  0101               	movlb	1	; () banked
  5194  0008B2  2308               	addwfc	(printf@width+1)& (0+255),f,b
  5195                           
  5196                           ; BSR set to: 1
  5197  0008B4  0100               	movlb	0	; () banked
  5198  0008B6  4BDA               	infsnz	printf@f& (0+255),f,b
  5199  0008B8  2BDB               	incf	(printf@f+1)& (0+255),f,b
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5203  0008BA  C0DA  FFF6         	movff	printf@f,tblptrl
  5204  0008BE  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5205  0008C2                     	if	0	;tblptru may be non-zero
  5206  0008C2                     	endif
  5207  0008C2                     	if	0	;tblptru may be non-zero
  5208  0008C2                     	endif
  5209  0008C2  0008               	tblrd		*
  5210  0008C4  50F5               	movf	tablat,w,c
  5211  0008C6  ECD8  F017         	call	_isdigit
  5212  0008CA  A0D8               	btfss	status,0,c
  5213  0008CC  D008               	goto	l5208
  5214  0008CE  D7C4               	goto	l5194
  5215  0008D0                     l5202:
  5216                           
  5217                           ;doprnt.c: 721: flag |= 0x80;
  5218  0008D0  0101               	movlb	1	; () banked
  5219  0008D2  8F06               	bsf	printf@flag& (0+255),7,b
  5220                           
  5221                           ;doprnt.c: 723: break;
  5222  0008D4  D020               	goto	l5210
  5223  0008D6                     l5204:
  5224                           
  5225                           ; BSR set to: 1
  5226                           ;doprnt.c: 818: flag |= 0xC0;
  5227  0008D6  0EC0               	movlw	192
  5228  0008D8  0101               	movlb	1	; () banked
  5229  0008DA  1306               	iorwf	printf@flag& (0+255),f,b
  5230                           
  5231                           ; BSR set to: 1
  5232                           ;doprnt.c: 822: }
  5233                           
  5234                           ;doprnt.c: 819: break;
  5235  0008DC  D01C               	goto	l5210
  5236  0008DE                     l5208:
  5237  0008DE  C0DA  FFF6         	movff	printf@f,tblptrl
  5238  0008E2  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5239  0008E6  0100               	movlb	0	; () banked
  5240  0008E8  4BDA               	infsnz	printf@f& (0+255),f,b
  5241  0008EA  2BDB               	incf	(printf@f+1)& (0+255),f,b
  5242  0008EC                     	if	0	;tblptru may be non-zero
  5243  0008EC                     	endif
  5244  0008EC                     	if	0	;tblptru may be non-zero
  5245  0008EC                     	endif
  5246  0008EC  0008               	tblrd		*
  5247  0008EE  CFF5 F109          	movff	tablat,printf@c
  5248  0008F2  0101               	movlb	1	; () banked
  5249  0008F4  5109               	movf	printf@c& (0+255),w,b
  5250                           
  5251                           ; Switch size 1, requested type "space"
  5252                           ; Number of cases is 5, Range of values is 0 to 120
  5253                           ; switch strategies available:
  5254                           ; Name         Instructions Cycles
  5255                           ; simple_byte           16     9 (average)
  5256                           ;	Chosen strategy is simple_byte
  5257  0008F6  0A00               	xorlw	0	; case 0
  5258  0008F8  B4D8               	btfsc	status,2,c
  5259  0008FA  0012               	return	
  5260  0008FC  0A64               	xorlw	100	; case 100
  5261  0008FE  B4D8               	btfsc	status,2,c
  5262  000900  D00A               	goto	l5210
  5263  000902  0A0D               	xorlw	13	; case 105
  5264  000904  B4D8               	btfsc	status,2,c
  5265  000906  D007               	goto	l5210
  5266  000908  0A1C               	xorlw	28	; case 117
  5267  00090A  B4D8               	btfsc	status,2,c
  5268  00090C  D7E4               	goto	l5204
  5269  00090E  0A0D               	xorlw	13	; case 120
  5270  000910  B4D8               	btfsc	status,2,c
  5271  000912  D7DE               	goto	l5202
  5272  000914  D146               	goto	l5308
  5273  000916                     l5210:
  5274                           
  5275                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  5276  000916  C106  F0E2         	movff	printf@flag,??_printf
  5277  00091A  0EC0               	movlw	192
  5278  00091C  0100               	movlb	0	; () banked
  5279  00091E  17E2               	andwf	??_printf& (0+255),f,b
  5280  000920  A4D8               	btfss	status,2,c
  5281  000922  D019               	goto	l5222
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;doprnt.c: 1253: {
  5285                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5286  000924  C101  FFD9         	movff	printf@ap,fsr2l
  5287  000928  C102  FFDA         	movff	printf@ap+1,fsr2h
  5288  00092C  CFDE F104          	movff	postinc2,printf@val
  5289  000930  CFDD F105          	movff	postdec2,printf@val+1
  5290                           
  5291                           ; BSR set to: 0
  5292  000934  0E02               	movlw	2
  5293  000936  0101               	movlb	1	; () banked
  5294  000938  2701               	addwf	printf@ap& (0+255),f,b
  5295  00093A  0E00               	movlw	0
  5296  00093C  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  5297                           
  5298                           ; BSR set to: 1
  5299                           ;doprnt.c: 1261: if((int)val < 0) {
  5300  00093E  0101               	movlb	1	; () banked
  5301  000940  AF05               	btfss	(printf@val+1)& (0+255),7,b
  5302  000942  D053               	goto	l5256
  5303                           
  5304                           ; BSR set to: 1
  5305                           ;doprnt.c: 1262: flag |= 0x03;
  5306  000944  0E03               	movlw	3
  5307  000946  0101               	movlb	1	; () banked
  5308  000948  1306               	iorwf	printf@flag& (0+255),f,b
  5309                           
  5310                           ; BSR set to: 1
  5311                           ;doprnt.c: 1263: val = -val;
  5312  00094A  0101               	movlb	1	; () banked
  5313  00094C  6D04               	negf	printf@val& (0+255),b
  5314  00094E  1F05               	comf	(printf@val+1)& (0+255),f,b
  5315  000950  B0D8               	btfsc	status,0,c
  5316  000952  2B05               	incf	(printf@val+1)& (0+255),f,b
  5317                           
  5318                           ; BSR set to: 1
  5319                           ;doprnt.c: 1264: }
  5320                           ;doprnt.c: 1266: }
  5321  000954  D04A               	goto	l5256
  5322  000956                     l5222:
  5323                           
  5324                           ;doprnt.c: 1268: else
  5325                           ;doprnt.c: 1273: {
  5326                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5327  000956  C101  FFD9         	movff	printf@ap,fsr2l
  5328  00095A  C102  FFDA         	movff	printf@ap+1,fsr2h
  5329  00095E  CFDE F104          	movff	postinc2,printf@val
  5330  000962  CFDD F105          	movff	postdec2,printf@val+1
  5331  000966  0E02               	movlw	2
  5332  000968  0101               	movlb	1	; () banked
  5333  00096A  2701               	addwf	printf@ap& (0+255),f,b
  5334  00096C  0E00               	movlw	0
  5335  00096E  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  5336                           
  5337                           ; BSR set to: 1
  5338                           ;doprnt.c: 1287: }
  5339                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  5340  000970  D03C               	goto	l5256
  5341  000972                     l5226:
  5342                           
  5343                           ; BSR set to: 1
  5344                           ;doprnt.c: 1302: case 0xC0:
  5345                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5346  000972  0E01               	movlw	1
  5347  000974  0101               	movlb	1	; () banked
  5348  000976  6F09               	movwf	printf@c& (0+255),b
  5349  000978                     l5228:
  5350                           
  5351                           ; BSR set to: 1
  5352  000978  0E05               	movlw	5
  5353  00097A  0101               	movlb	1	; () banked
  5354  00097C  1909               	xorwf	printf@c& (0+255),w,b
  5355  00097E  B4D8               	btfsc	status,2,c
  5356  000980  D040               	goto	l5258
  5357                           
  5358                           ; BSR set to: 1
  5359                           ;doprnt.c: 1306: if(val < dpowers[c])
  5360                           
  5361                           ; BSR set to: 1
  5362                           
  5363                           ; BSR set to: 1
  5364  000982  0101               	movlb	1	; () banked
  5365  000984  5109               	movf	printf@c& (0+255),w,b
  5366  000986  0D02               	mullw	2
  5367  000988  0E48               	movlw	low _dpowers
  5368  00098A  24F3               	addwf	prodl,w,c
  5369  00098C  6EF6               	movwf	tblptrl,c
  5370  00098E  0EFE               	movlw	high _dpowers
  5371  000990  20F4               	addwfc	prodh,w,c
  5372  000992  6EF7               	movwf	tblptrh,c
  5373  000994                     	if	0	;There are less than 3 active tblptr bytes
  5374  000994                     	endif
  5375  000994  0009               	tblrd		*+
  5376  000996  50F5               	movf	tablat,w,c
  5377  000998  0101               	movlb	1	; () banked
  5378  00099A  5D04               	subwf	printf@val& (0+255),w,b
  5379  00099C  0009               	tblrd		*+
  5380  00099E  50F5               	movf	tablat,w,c
  5381  0009A0  0101               	movlb	1	; () banked
  5382  0009A2  5905               	subwfb	(printf@val+1)& (0+255),w,b
  5383  0009A4  A0D8               	btfss	status,0,c
  5384  0009A6  D02D               	goto	l5258
  5385                           
  5386                           ; BSR set to: 1
  5387                           
  5388                           ; BSR set to: 1
  5389                           
  5390                           ; BSR set to: 1
  5391                           ;doprnt.c: 1307: break;
  5392  0009A8  0101               	movlb	1	; () banked
  5393  0009AA  2B09               	incf	printf@c& (0+255),f,b
  5394  0009AC  D7E5               	goto	l5228
  5395  0009AE                     l5240:
  5396                           
  5397                           ; BSR set to: 1
  5398                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5399  0009AE  0E01               	movlw	1
  5400  0009B0  0101               	movlb	1	; () banked
  5401  0009B2  6F09               	movwf	printf@c& (0+255),b
  5402  0009B4                     l5242:
  5403                           
  5404                           ; BSR set to: 1
  5405  0009B4  0E04               	movlw	4
  5406  0009B6  0101               	movlb	1	; () banked
  5407  0009B8  1909               	xorwf	printf@c& (0+255),w,b
  5408  0009BA  B4D8               	btfsc	status,2,c
  5409  0009BC  D022               	goto	l5258
  5410                           
  5411                           ; BSR set to: 1
  5412                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5413                           
  5414                           ; BSR set to: 1
  5415                           
  5416                           ; BSR set to: 1
  5417  0009BE  0101               	movlb	1	; () banked
  5418  0009C0  5109               	movf	printf@c& (0+255),w,b
  5419  0009C2  0D02               	mullw	2
  5420  0009C4  0E52               	movlw	low _hexpowers
  5421  0009C6  24F3               	addwf	prodl,w,c
  5422  0009C8  6EF6               	movwf	tblptrl,c
  5423  0009CA  0EFE               	movlw	high _hexpowers
  5424  0009CC  20F4               	addwfc	prodh,w,c
  5425  0009CE  6EF7               	movwf	tblptrh,c
  5426  0009D0                     	if	0	;There are less than 3 active tblptr bytes
  5427  0009D0                     	endif
  5428  0009D0  0009               	tblrd		*+
  5429  0009D2  50F5               	movf	tablat,w,c
  5430  0009D4  0101               	movlb	1	; () banked
  5431  0009D6  5D04               	subwf	printf@val& (0+255),w,b
  5432  0009D8  0009               	tblrd		*+
  5433  0009DA  50F5               	movf	tablat,w,c
  5434  0009DC  0101               	movlb	1	; () banked
  5435  0009DE  5905               	subwfb	(printf@val+1)& (0+255),w,b
  5436  0009E0  A0D8               	btfss	status,0,c
  5437  0009E2  D00F               	goto	l5258
  5438                           
  5439                           ; BSR set to: 1
  5440                           
  5441                           ; BSR set to: 1
  5442                           
  5443                           ; BSR set to: 1
  5444                           ;doprnt.c: 1318: break;
  5445  0009E4  0101               	movlb	1	; () banked
  5446  0009E6  2B09               	incf	printf@c& (0+255),f,b
  5447  0009E8  D7E5               	goto	l5242
  5448  0009EA                     l5256:
  5449                           
  5450                           ; BSR set to: 1
  5451  0009EA  0101               	movlb	1	; () banked
  5452  0009EC  5106               	movf	printf@flag& (0+255),w,b
  5453  0009EE  0BC0               	andlw	192
  5454                           
  5455                           ; Switch size 1, requested type "space"
  5456                           ; Number of cases is 3, Range of values is 0 to 192
  5457                           ; switch strategies available:
  5458                           ; Name         Instructions Cycles
  5459                           ; simple_byte           10     6 (average)
  5460                           ;	Chosen strategy is simple_byte
  5461  0009F0  0A00               	xorlw	0	; case 0
  5462  0009F2  B4D8               	btfsc	status,2,c
  5463  0009F4  D7BE               	goto	l5226
  5464  0009F6  0A80               	xorlw	128	; case 128
  5465  0009F8  B4D8               	btfsc	status,2,c
  5466  0009FA  D7D9               	goto	l5240
  5467  0009FC  0A40               	xorlw	64	; case 192
  5468  0009FE  B4D8               	btfsc	status,2,c
  5469  000A00  D7B8               	goto	l5226
  5470  000A02                     l5258:
  5471                           
  5472                           ; BSR set to: 1
  5473                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5474  000A02  0101               	movlb	1	; () banked
  5475  000A04  5107               	movf	printf@width& (0+255),w,b
  5476  000A06  0101               	movlb	1	; () banked
  5477  000A08  1108               	iorwf	(printf@width+1)& (0+255),w,b
  5478  000A0A  B4D8               	btfsc	status,2,c
  5479  000A0C  D00B               	goto	l5264
  5480                           
  5481                           ; BSR set to: 1
  5482  000A0E  C106  F0E2         	movff	printf@flag,??_printf
  5483  000A12  0E03               	movlw	3
  5484  000A14  0100               	movlb	0	; () banked
  5485  000A16  17E2               	andwf	??_printf& (0+255),f,b
  5486  000A18  B4D8               	btfsc	status,2,c
  5487  000A1A  D004               	goto	l5264
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;doprnt.c: 1346: width--;
  5491  000A1C  0101               	movlb	1	; () banked
  5492  000A1E  0707               	decf	printf@width& (0+255),f,b
  5493  000A20  A0D8               	btfss	status,0,c
  5494  000A22  0708               	decf	(printf@width+1)& (0+255),f,b
  5495  000A24                     l5264:
  5496                           
  5497                           ;doprnt.c: 1381: if(width > c)
  5498  000A24  0E80               	movlw	128
  5499  000A26  0101               	movlb	1	; () banked
  5500  000A28  BF09               	btfsc	printf@c& (0+255),7,b
  5501  000A2A  0E7F               	movlw	127
  5502  000A2C  0100               	movlb	0	; () banked
  5503  000A2E  6FE2               	movwf	??_printf& (0+255),b
  5504  000A30  0101               	movlb	1	; () banked
  5505  000A32  5107               	movf	printf@width& (0+255),w,b
  5506  000A34  0101               	movlb	1	; () banked
  5507  000A36  5D09               	subwf	printf@c& (0+255),w,b
  5508  000A38  0101               	movlb	1	; () banked
  5509  000A3A  5108               	movf	(printf@width+1)& (0+255),w,b
  5510  000A3C  0A80               	xorlw	128
  5511  000A3E  0100               	movlb	0	; () banked
  5512  000A40  59E2               	subwfb	??_printf& (0+255),w,b
  5513  000A42  B0D8               	btfsc	status,0,c
  5514  000A44  D00B               	goto	l5268
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;doprnt.c: 1382: width -= c;
  5518  000A46  0101               	movlb	1	; () banked
  5519  000A48  5109               	movf	printf@c& (0+255),w,b
  5520  000A4A  0101               	movlb	1	; () banked
  5521  000A4C  5F07               	subwf	printf@width& (0+255),f,b
  5522  000A4E  0E00               	movlw	0
  5523  000A50  0101               	movlb	1	; () banked
  5524  000A52  BF09               	btfsc	printf@c& (0+255),7,b
  5525  000A54  0EFF               	movlw	255
  5526  000A56  0101               	movlb	1	; () banked
  5527  000A58  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  5528  000A5A  D005               	goto	l5270
  5529  000A5C                     l5268:
  5530                           
  5531                           ;doprnt.c: 1383: else
  5532                           ;doprnt.c: 1384: width = 0;
  5533  000A5C  0E00               	movlw	0
  5534  000A5E  0101               	movlb	1	; () banked
  5535  000A60  6F08               	movwf	(printf@width+1)& (0+255),b
  5536  000A62  0E00               	movlw	0
  5537  000A64  6F07               	movwf	printf@width& (0+255),b
  5538  000A66                     l5270:
  5539                           
  5540                           ; BSR set to: 1
  5541                           ;doprnt.c: 1387: if(flag & 0x04) {
  5542  000A66  0101               	movlb	1	; () banked
  5543  000A68  A506               	btfss	printf@flag& (0+255),2,b
  5544  000A6A  D018               	goto	l5282
  5545                           
  5546                           ; BSR set to: 1
  5547                           ;doprnt.c: 1392: if(flag & 0x03)
  5548  000A6C  C106  F0E2         	movff	printf@flag,??_printf
  5549  000A70  0E03               	movlw	3
  5550  000A72  0100               	movlb	0	; () banked
  5551  000A74  17E2               	andwf	??_printf& (0+255),f,b
  5552  000A76  B4D8               	btfsc	status,2,c
  5553  000A78  D003               	goto	l5276
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;doprnt.c: 1393: (putch('-') );
  5557  000A7A  0E2D               	movlw	45
  5558  000A7C  EC64  F018         	call	_putch
  5559  000A80                     l5276:
  5560                           
  5561                           ;doprnt.c: 1415: if(width)
  5562  000A80  0101               	movlb	1	; () banked
  5563  000A82  5107               	movf	printf@width& (0+255),w,b
  5564  000A84  0101               	movlb	1	; () banked
  5565  000A86  1108               	iorwf	(printf@width+1)& (0+255),w,b
  5566  000A88  B4D8               	btfsc	status,2,c
  5567  000A8A  D025               	goto	l5292
  5568                           
  5569                           ; BSR set to: 1
  5570                           ;doprnt.c: 1417: (putch('0') );
  5571                           
  5572                           ; BSR set to: 1
  5573                           
  5574                           ;doprnt.c: 1416: do
  5575  000A8C  0E30               	movlw	48
  5576  000A8E  EC64  F018         	call	_putch
  5577                           
  5578                           ;doprnt.c: 1418: while(--width);
  5579  000A92  0101               	movlb	1	; () banked
  5580  000A94  0707               	decf	printf@width& (0+255),f,b
  5581  000A96  A0D8               	btfss	status,0,c
  5582  000A98  0708               	decf	(printf@width+1)& (0+255),f,b
  5583  000A9A  D7F2               	goto	l5276
  5584  000A9C                     l5282:
  5585                           
  5586                           ; BSR set to: 1
  5587                           ;doprnt.c: 1422: {
  5588                           ;doprnt.c: 1424: if(width
  5589                           ;doprnt.c: 1428: )
  5590  000A9C  0101               	movlb	1	; () banked
  5591  000A9E  5107               	movf	printf@width& (0+255),w,b
  5592  000AA0  0101               	movlb	1	; () banked
  5593  000AA2  1108               	iorwf	(printf@width+1)& (0+255),w,b
  5594  000AA4  B4D8               	btfsc	status,2,c
  5595  000AA6  D00D               	goto	l5288
  5596  000AA8                     l5284:
  5597                           
  5598                           ; BSR set to: 1
  5599                           ;doprnt.c: 1430: (putch(' ') );
  5600  000AA8  0E20               	movlw	32
  5601  000AAA  EC64  F018         	call	_putch
  5602                           
  5603                           ;doprnt.c: 1431: while(--width);
  5604  000AAE  0101               	movlb	1	; () banked
  5605  000AB0  0707               	decf	printf@width& (0+255),f,b
  5606  000AB2  A0D8               	btfss	status,0,c
  5607  000AB4  0708               	decf	(printf@width+1)& (0+255),f,b
  5608  000AB6  0101               	movlb	1	; () banked
  5609  000AB8  5107               	movf	printf@width& (0+255),w,b
  5610  000ABA  0101               	movlb	1	; () banked
  5611  000ABC  1108               	iorwf	(printf@width+1)& (0+255),w,b
  5612  000ABE  A4D8               	btfss	status,2,c
  5613  000AC0  D7F3               	goto	l5284
  5614  000AC2                     l5288:
  5615                           
  5616                           ; BSR set to: 1
  5617                           ;doprnt.c: 1438: if(flag & 0x03)
  5618  000AC2  C106  F0E2         	movff	printf@flag,??_printf
  5619  000AC6  0E03               	movlw	3
  5620  000AC8  0100               	movlb	0	; () banked
  5621  000ACA  17E2               	andwf	??_printf& (0+255),f,b
  5622  000ACC  B4D8               	btfsc	status,2,c
  5623  000ACE  D003               	goto	l5292
  5624                           
  5625                           ; BSR set to: 0
  5626                           ;doprnt.c: 1439: (putch('-') );
  5627  000AD0  0E2D               	movlw	45
  5628  000AD2  EC64  F018         	call	_putch
  5629  000AD6                     l5292:
  5630                           
  5631                           ;doprnt.c: 1469: }
  5632                           ;doprnt.c: 1472: prec = c;
  5633  000AD6  C109  F103         	movff	printf@c,printf@prec
  5634                           
  5635                           ;doprnt.c: 1474: while(prec--) {
  5636  000ADA  D05D               	goto	l5306
  5637  000ADC                     l5294:
  5638                           
  5639                           ;doprnt.c: 1486: case 0xC0:
  5640                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5641  000ADC  0101               	movlb	1	; () banked
  5642  000ADE  5103               	movf	printf@prec& (0+255),w,b
  5643  000AE0  0D02               	mullw	2
  5644  000AE2  0E48               	movlw	low _dpowers
  5645  000AE4  24F3               	addwf	prodl,w,c
  5646  000AE6  6EF6               	movwf	tblptrl,c
  5647  000AE8  0EFE               	movlw	high _dpowers
  5648  000AEA  20F4               	addwfc	prodh,w,c
  5649  000AEC  6EF7               	movwf	tblptrh,c
  5650  000AEE                     	if	0	;There are less than 3 active tblptr bytes
  5651  000AEE                     	endif
  5652  000AEE  0009               	tblrd		*+
  5653  000AF0  CFF5 F0D0          	movff	tablat,___lwdiv@divisor
  5654  000AF4  000A               	tblrd		*-
  5655  000AF6  CFF5 F0D1          	movff	tablat,___lwdiv@divisor+1
  5656  000AFA  C104  F0CE         	movff	printf@val,___lwdiv@dividend
  5657  000AFE  C105  F0CF         	movff	printf@val+1,___lwdiv@dividend+1
  5658  000B02  ECDF  F014         	call	___lwdiv	;wreg free
  5659  000B06  C0CE  F0D5         	movff	?___lwdiv,___lwmod@dividend
  5660  000B0A  C0CF  F0D6         	movff	?___lwdiv+1,___lwmod@dividend+1
  5661  000B0E  0E00               	movlw	0
  5662  000B10  0100               	movlb	0	; () banked
  5663  000B12  6FD8               	movwf	(___lwmod@divisor+1)& (0+255),b
  5664  000B14  0E0A               	movlw	10
  5665  000B16  6FD7               	movwf	___lwmod@divisor& (0+255),b
  5666  000B18  EC8B  F015         	call	___lwmod	;wreg free
  5667  000B1C  0100               	movlb	0	; () banked
  5668  000B1E  51D5               	movf	?___lwmod& (0+255),w,b
  5669  000B20  0F30               	addlw	48
  5670  000B22  0101               	movlb	1	; () banked
  5671  000B24  6F09               	movwf	printf@c& (0+255),b
  5672                           
  5673                           ;doprnt.c: 1491: break;
  5674  000B26  D033               	goto	l5304
  5675  000B28                     l5296:
  5676                           
  5677                           ; BSR set to: 1
  5678                           ;doprnt.c: 1499: {
  5679                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5680  000B28  C104  F0CE         	movff	printf@val,___lwdiv@dividend
  5681  000B2C  C105  F0CF         	movff	printf@val+1,___lwdiv@dividend+1
  5682  000B30  0101               	movlb	1	; () banked
  5683  000B32  5103               	movf	printf@prec& (0+255),w,b
  5684  000B34  0D02               	mullw	2
  5685  000B36  0E52               	movlw	low _hexpowers
  5686  000B38  24F3               	addwf	prodl,w,c
  5687  000B3A  6EF6               	movwf	tblptrl,c
  5688  000B3C  0EFE               	movlw	high _hexpowers
  5689  000B3E  20F4               	addwfc	prodh,w,c
  5690  000B40  6EF7               	movwf	tblptrh,c
  5691  000B42                     	if	0	;There are less than 3 active tblptr bytes
  5692  000B42                     	endif
  5693  000B42  0009               	tblrd		*+
  5694  000B44  CFF5 F0D0          	movff	tablat,___lwdiv@divisor
  5695  000B48  000A               	tblrd		*-
  5696  000B4A  CFF5 F0D1          	movff	tablat,___lwdiv@divisor+1
  5697  000B4E  ECDF  F014         	call	___lwdiv	;wreg free
  5698  000B52  0100               	movlb	0	; () banked
  5699  000B54  51CE               	movf	?___lwdiv& (0+255),w,b
  5700  000B56  0B0F               	andlw	15
  5701  000B58  0101               	movlb	1	; () banked
  5702  000B5A  6F00               	movwf	printf@idx& (0+255),b
  5703                           
  5704                           ; BSR set to: 1
  5705                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5706  000B5C  0101               	movlb	1	; () banked
  5707  000B5E  5100               	movf	printf@idx& (0+255),w,b
  5708  000B60  0D01               	mullw	1
  5709  000B62  0E21               	movlw	low STR_22
  5710  000B64  24F3               	addwf	prodl,w,c
  5711  000B66  6EF6               	movwf	tblptrl,c
  5712  000B68  0EFF               	movlw	high STR_22
  5713  000B6A  20F4               	addwfc	prodh,w,c
  5714  000B6C  6EF7               	movwf	tblptrh,c
  5715  000B6E                     	if	0	;There are less than 3 active tblptr bytes
  5716  000B6E                     	endif
  5717  000B6E  0008               	tblrd		*
  5718  000B70  CFF5 F109          	movff	tablat,printf@c
  5719                           
  5720                           ; BSR set to: 1
  5721                           ;doprnt.c: 1523: }
  5722                           
  5723                           ;doprnt.c: 1508: }
  5724                           ;doprnt.c: 1510: break;
  5725  000B74  D00C               	goto	l5304
  5726  000B76                     l5302:
  5727  000B76  0101               	movlb	1	; () banked
  5728  000B78  5106               	movf	printf@flag& (0+255),w,b
  5729  000B7A  0BC0               	andlw	192
  5730                           
  5731                           ; Switch size 1, requested type "space"
  5732                           ; Number of cases is 3, Range of values is 0 to 192
  5733                           ; switch strategies available:
  5734                           ; Name         Instructions Cycles
  5735                           ; simple_byte           10     6 (average)
  5736                           ;	Chosen strategy is simple_byte
  5737  000B7C  0A00               	xorlw	0	; case 0
  5738  000B7E  B4D8               	btfsc	status,2,c
  5739  000B80  D7AD               	goto	l5294
  5740  000B82  0A80               	xorlw	128	; case 128
  5741  000B84  B4D8               	btfsc	status,2,c
  5742  000B86  D7D0               	goto	l5296
  5743  000B88  0A40               	xorlw	64	; case 192
  5744  000B8A  B4D8               	btfsc	status,2,c
  5745  000B8C  D7A7               	goto	l5294
  5746  000B8E                     l5304:
  5747                           
  5748                           ; BSR set to: 1
  5749                           ;doprnt.c: 1524: (putch(c) );
  5750  000B8E  0101               	movlb	1	; () banked
  5751  000B90  5109               	movf	printf@c& (0+255),w,b
  5752  000B92  EC64  F018         	call	_putch
  5753  000B96                     l5306:
  5754  000B96  0101               	movlb	1	; () banked
  5755  000B98  0703               	decf	printf@prec& (0+255),f,b
  5756  000B9A  0101               	movlb	1	; () banked
  5757  000B9C  2903               	incf	printf@prec& (0+255),w,b
  5758  000B9E  A4D8               	btfss	status,2,c
  5759  000BA0  D7EA               	goto	l5302
  5760  000BA2                     l5308:
  5761  000BA2  C0DA  FFF6         	movff	printf@f,tblptrl
  5762  000BA6  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5763  000BAA  0100               	movlb	0	; () banked
  5764  000BAC  4BDA               	infsnz	printf@f& (0+255),f,b
  5765  000BAE  2BDB               	incf	(printf@f+1)& (0+255),f,b
  5766  000BB0                     	if	0	;tblptru may be non-zero
  5767  000BB0                     	endif
  5768  000BB0                     	if	0	;tblptru may be non-zero
  5769  000BB0                     	endif
  5770  000BB0  0008               	tblrd		*
  5771  000BB2  CFF5 F109          	movff	tablat,printf@c
  5772  000BB6  0101               	movlb	1	; () banked
  5773  000BB8  5109               	movf	printf@c& (0+255),w,b
  5774  000BBA  B4D8               	btfsc	status,2,c
  5775  000BBC  0012               	return	
  5776  000BBE  D61C               	goto	l5178
  5777  000BC0                     __end_of_printf:
  5778                           	opt stack 0
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           intcon	equ	0xFF2
  5786                           intcon2	equ	0xFF1
  5787                           intcon3	equ	0xFF0
  5788                           postinc0	equ	0xFEE
  5789                           wreg	equ	0xFE8
  5790                           postinc1	equ	0xFE6
  5791                           postdec1	equ	0xFE5
  5792                           fsr1h	equ	0xFE2
  5793                           fsr1l	equ	0xFE1
  5794                           indf2	equ	0xFDF
  5795                           postinc2	equ	0xFDE
  5796                           postdec2	equ	0xFDD
  5797                           fsr2h	equ	0xFDA
  5798                           fsr2l	equ	0xFD9
  5799                           status	equ	0xFD8
  5800                           
  5801 ;; *************** function _putch *****************
  5802 ;; Defined at:
  5803 ;;		line 31 in file "lcd.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;  data            1    wreg     unsigned char 
  5806 ;; Auto vars:     Size  Location     Type
  5807 ;;  data            1   18[BANK0 ] unsigned char 
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  1    wreg      void 
  5810 ;; Registers used:
  5811 ;;		wreg, status,2, status,0, cstack
  5812 ;; Tracked objects:
  5813 ;;		On entry : 0/0
  5814 ;;		On exit  : 0/0
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5821 ;;Total ram usage:        1 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:    8
  5824 ;; This function calls:
  5825 ;;		_lcdNibble
  5826 ;; This function is called by:
  5827 ;;		_printf
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           	psect	text18
  5832  0030C8                     __ptext18:
  5833                           	opt stack 0
  5834  0030C8                     _putch:
  5835                           	opt stack 20
  5836                           
  5837                           ;incstack = 0
  5838                           ;putch@data stored from wreg
  5839  0030C8  0100               	movlb	0	; () banked
  5840  0030CA  6FD0               	movwf	putch@data& (0+255),b
  5841                           
  5842                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5843  0030CC  848C               	bsf	3980,2,c	;volatile
  5844                           
  5845                           ;lcd.c: 33: lcdNibble(data);
  5846  0030CE  0100               	movlb	0	; () banked
  5847  0030D0  51D0               	movf	putch@data& (0+255),w,b
  5848  0030D2  ECBC  F015         	call	_lcdNibble
  5849  0030D6  0012               	return		;funcret
  5850  0030D8                     __end_of_putch:
  5851                           	opt stack 0
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           intcon	equ	0xFF2
  5859                           intcon2	equ	0xFF1
  5860                           intcon3	equ	0xFF0
  5861                           postinc0	equ	0xFEE
  5862                           wreg	equ	0xFE8
  5863                           postinc1	equ	0xFE6
  5864                           postdec1	equ	0xFE5
  5865                           fsr1h	equ	0xFE2
  5866                           fsr1l	equ	0xFE1
  5867                           indf2	equ	0xFDF
  5868                           postinc2	equ	0xFDE
  5869                           postdec2	equ	0xFDD
  5870                           fsr2h	equ	0xFDA
  5871                           fsr2l	equ	0xFD9
  5872                           status	equ	0xFD8
  5873                           
  5874 ;; *************** function _isdigit *****************
  5875 ;; Defined at:
  5876 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  c               1    wreg     unsigned char 
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  c               1   18[BANK0 ] unsigned char 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;		None               void
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;Total ram usage:        3 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    7
  5897 ;; This function calls:
  5898 ;;		Nothing
  5899 ;; This function is called by:
  5900 ;;		_printf
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text19
  5905  002FB0                     __ptext19:
  5906                           	opt stack 0
  5907  002FB0                     _isdigit:
  5908                           	opt stack 21
  5909                           
  5910                           ;incstack = 0
  5911                           ;isdigit@c stored from wreg
  5912  002FB0  0100               	movlb	0	; () banked
  5913  002FB2  6FD0               	movwf	isdigit@c& (0+255),b
  5914  002FB4  0E00               	movlw	0
  5915  002FB6  0100               	movlb	0	; () banked
  5916  002FB8  6FCF               	movwf	_isdigit$806& (0+255),b
  5917                           
  5918                           ; BSR set to: 0
  5919  002FBA  0E3A               	movlw	58
  5920  002FBC  0100               	movlb	0	; () banked
  5921  002FBE  61D0               	cpfslt	isdigit@c& (0+255),b
  5922  002FC0  D007               	goto	l5088
  5923                           
  5924                           ; BSR set to: 0
  5925  002FC2  0E2F               	movlw	47
  5926  002FC4  0100               	movlb	0	; () banked
  5927  002FC6  65D0               	cpfsgt	isdigit@c& (0+255),b
  5928  002FC8  D003               	goto	l5088
  5929                           
  5930                           ; BSR set to: 0
  5931  002FCA  0E01               	movlw	1
  5932  002FCC  0100               	movlb	0	; () banked
  5933  002FCE  6FCF               	movwf	_isdigit$806& (0+255),b
  5934  002FD0                     l5088:
  5935                           
  5936                           ; BSR set to: 0
  5937  002FD0  C0CF  F0CE         	movff	_isdigit$806,??_isdigit
  5938  002FD4  0100               	movlb	0	; () banked
  5939  002FD6  31CE               	rrcf	??_isdigit& (0+255),w,b
  5940  002FD8  0012               	return	
  5941  002FDA                     __end_of_isdigit:
  5942                           	opt stack 0
  5943                           tblptru	equ	0xFF8
  5944                           tblptrh	equ	0xFF7
  5945                           tblptrl	equ	0xFF6
  5946                           tablat	equ	0xFF5
  5947                           prodh	equ	0xFF4
  5948                           prodl	equ	0xFF3
  5949                           intcon	equ	0xFF2
  5950                           intcon2	equ	0xFF1
  5951                           intcon3	equ	0xFF0
  5952                           postinc0	equ	0xFEE
  5953                           wreg	equ	0xFE8
  5954                           postinc1	equ	0xFE6
  5955                           postdec1	equ	0xFE5
  5956                           fsr1h	equ	0xFE2
  5957                           fsr1l	equ	0xFE1
  5958                           indf2	equ	0xFDF
  5959                           postinc2	equ	0xFDE
  5960                           postdec2	equ	0xFDD
  5961                           fsr2h	equ	0xFDA
  5962                           fsr2l	equ	0xFD9
  5963                           status	equ	0xFD8
  5964                           
  5965 ;; *************** function ___wmul *****************
  5966 ;; Defined at:
  5967 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;  multiplier      2   16[BANK0 ] unsigned int 
  5970 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;  product         2   20[BANK0 ] unsigned int 
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  2   16[BANK0 ] unsigned int 
  5975 ;; Registers used:
  5976 ;;		wreg, status,2, status,0, prodl, prodh
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5982 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;Total ram usage:        6 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; Hardware stack levels required when called:    7
  5989 ;; This function calls:
  5990 ;;		Nothing
  5991 ;; This function is called by:
  5992 ;;		_printf
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           	psect	text20
  5997  002F4C                     __ptext20:
  5998                           	opt stack 0
  5999  002F4C                     ___wmul:
  6000                           	opt stack 21
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;incstack = 0
  6004  002F4C  0100               	movlb	0	; () banked
  6005  002F4E  51CE               	movf	___wmul@multiplier& (0+255),w,b
  6006  002F50  0100               	movlb	0	; () banked
  6007  002F52  03D0               	mulwf	___wmul@multiplicand& (0+255),b
  6008  002F54  CFF3 F0D2          	movff	prodl,___wmul@product
  6009  002F58  CFF4 F0D3          	movff	prodh,___wmul@product+1
  6010  002F5C  0100               	movlb	0	; () banked
  6011  002F5E  51CE               	movf	___wmul@multiplier& (0+255),w,b
  6012  002F60  0100               	movlb	0	; () banked
  6013  002F62  03D1               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6014  002F64  50F3               	movf	prodl,w,c
  6015  002F66  0100               	movlb	0	; () banked
  6016  002F68  27D3               	addwf	(___wmul@product+1)& (0+255),f,b
  6017  002F6A  0100               	movlb	0	; () banked
  6018  002F6C  51CF               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6019  002F6E  0100               	movlb	0	; () banked
  6020  002F70  03D0               	mulwf	___wmul@multiplicand& (0+255),b
  6021  002F72  50F3               	movf	prodl,w,c
  6022  002F74  0100               	movlb	0	; () banked
  6023  002F76  27D3               	addwf	(___wmul@product+1)& (0+255),f,b
  6024                           
  6025                           ; BSR set to: 0
  6026  002F78  C0D2  F0CE         	movff	___wmul@product,?___wmul
  6027  002F7C  C0D3  F0CF         	movff	___wmul@product+1,?___wmul+1
  6028  002F80  0012               	return	
  6029  002F82                     __end_of___wmul:
  6030                           	opt stack 0
  6031                           tblptru	equ	0xFF8
  6032                           tblptrh	equ	0xFF7
  6033                           tblptrl	equ	0xFF6
  6034                           tablat	equ	0xFF5
  6035                           prodh	equ	0xFF4
  6036                           prodl	equ	0xFF3
  6037                           intcon	equ	0xFF2
  6038                           intcon2	equ	0xFF1
  6039                           intcon3	equ	0xFF0
  6040                           postinc0	equ	0xFEE
  6041                           wreg	equ	0xFE8
  6042                           postinc1	equ	0xFE6
  6043                           postdec1	equ	0xFE5
  6044                           fsr1h	equ	0xFE2
  6045                           fsr1l	equ	0xFE1
  6046                           indf2	equ	0xFDF
  6047                           postinc2	equ	0xFDE
  6048                           postdec2	equ	0xFDD
  6049                           fsr2h	equ	0xFDA
  6050                           fsr2l	equ	0xFD9
  6051                           status	equ	0xFD8
  6052                           
  6053 ;; *************** function ___lwmod *****************
  6054 ;; Defined at:
  6055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  dividend        2   23[BANK0 ] unsigned int 
  6058 ;;  divisor         2   25[BANK0 ] unsigned int 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  counter         1   27[BANK0 ] unsigned char 
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  2   23[BANK0 ] unsigned int 
  6063 ;; Registers used:
  6064 ;;		wreg, status,2, status,0
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6070 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6074 ;;Total ram usage:        5 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; Hardware stack levels required when called:    7
  6077 ;; This function calls:
  6078 ;;		Nothing
  6079 ;; This function is called by:
  6080 ;;		_printf
  6081 ;; This function uses a non-reentrant model
  6082 ;;
  6083                           
  6084                           	psect	text21
  6085  002B16                     __ptext21:
  6086                           	opt stack 0
  6087  002B16                     ___lwmod:
  6088                           	opt stack 21
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;incstack = 0
  6092  002B16  0100               	movlb	0	; () banked
  6093  002B18  51D7               	movf	___lwmod@divisor& (0+255),w,b
  6094  002B1A  0100               	movlb	0	; () banked
  6095  002B1C  11D8               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6096  002B1E  B4D8               	btfsc	status,2,c
  6097  002B20  D026               	goto	l886
  6098                           
  6099                           ; BSR set to: 0
  6100  002B22  0E01               	movlw	1
  6101  002B24  0100               	movlb	0	; () banked
  6102  002B26  6FD9               	movwf	___lwmod@counter& (0+255),b
  6103  002B28  D006               	goto	l5162
  6104  002B2A                     l5160:
  6105                           
  6106                           ; BSR set to: 0
  6107  002B2A  0100               	movlb	0	; () banked
  6108  002B2C  90D8               	bcf	status,0,c
  6109  002B2E  37D7               	rlcf	___lwmod@divisor& (0+255),f,b
  6110  002B30  37D8               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6111  002B32  0100               	movlb	0	; () banked
  6112  002B34  2BD9               	incf	___lwmod@counter& (0+255),f,b
  6113  002B36                     l5162:
  6114                           
  6115                           ; BSR set to: 0
  6116  002B36  0100               	movlb	0	; () banked
  6117  002B38  AFD8               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6118  002B3A  D7F7               	goto	l5160
  6119  002B3C                     l5164:
  6120                           
  6121                           ; BSR set to: 0
  6122  002B3C  0100               	movlb	0	; () banked
  6123  002B3E  51D7               	movf	___lwmod@divisor& (0+255),w,b
  6124  002B40  0100               	movlb	0	; () banked
  6125  002B42  5DD5               	subwf	___lwmod@dividend& (0+255),w,b
  6126  002B44  0100               	movlb	0	; () banked
  6127  002B46  51D8               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6128  002B48  0100               	movlb	0	; () banked
  6129  002B4A  59D6               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6130  002B4C  A0D8               	btfss	status,0,c
  6131  002B4E  D008               	goto	l5168
  6132                           
  6133                           ; BSR set to: 0
  6134  002B50  0100               	movlb	0	; () banked
  6135  002B52  51D7               	movf	___lwmod@divisor& (0+255),w,b
  6136  002B54  0100               	movlb	0	; () banked
  6137  002B56  5FD5               	subwf	___lwmod@dividend& (0+255),f,b
  6138  002B58  0100               	movlb	0	; () banked
  6139  002B5A  51D8               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6140  002B5C  0100               	movlb	0	; () banked
  6141  002B5E  5BD6               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6142  002B60                     l5168:
  6143                           
  6144                           ; BSR set to: 0
  6145  002B60  0100               	movlb	0	; () banked
  6146  002B62  90D8               	bcf	status,0,c
  6147  002B64  33D8               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6148  002B66  33D7               	rrcf	___lwmod@divisor& (0+255),f,b
  6149                           
  6150                           ; BSR set to: 0
  6151  002B68  0100               	movlb	0	; () banked
  6152  002B6A  2FD9               	decfsz	___lwmod@counter& (0+255),f,b
  6153  002B6C  D7E7               	goto	l5164
  6154  002B6E                     l886:
  6155                           
  6156                           ; BSR set to: 0
  6157  002B6E  C0D5  F0D5         	movff	___lwmod@dividend,?___lwmod
  6158  002B72  C0D6  F0D6         	movff	___lwmod@dividend+1,?___lwmod+1
  6159                           
  6160                           ; BSR set to: 0
  6161  002B76  0012               	return		;funcret
  6162  002B78                     __end_of___lwmod:
  6163                           	opt stack 0
  6164                           tblptru	equ	0xFF8
  6165                           tblptrh	equ	0xFF7
  6166                           tblptrl	equ	0xFF6
  6167                           tablat	equ	0xFF5
  6168                           prodh	equ	0xFF4
  6169                           prodl	equ	0xFF3
  6170                           intcon	equ	0xFF2
  6171                           intcon2	equ	0xFF1
  6172                           intcon3	equ	0xFF0
  6173                           postinc0	equ	0xFEE
  6174                           wreg	equ	0xFE8
  6175                           postinc1	equ	0xFE6
  6176                           postdec1	equ	0xFE5
  6177                           fsr1h	equ	0xFE2
  6178                           fsr1l	equ	0xFE1
  6179                           indf2	equ	0xFDF
  6180                           postinc2	equ	0xFDE
  6181                           postdec2	equ	0xFDD
  6182                           fsr2h	equ	0xFDA
  6183                           fsr2l	equ	0xFD9
  6184                           status	equ	0xFD8
  6185                           
  6186 ;; *************** function ___lwdiv *****************
  6187 ;; Defined at:
  6188 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  dividend        2   16[BANK0 ] unsigned int 
  6191 ;;  divisor         2   18[BANK0 ] unsigned int 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  quotient        2   21[BANK0 ] unsigned int 
  6194 ;;  counter         1   20[BANK0 ] unsigned char 
  6195 ;; Return value:  Size  Location     Type
  6196 ;;                  2   16[BANK0 ] unsigned int 
  6197 ;; Registers used:
  6198 ;;		wreg, status,2, status,0
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6204 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6208 ;;Total ram usage:        7 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    7
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		_printf
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           	psect	text22
  6219  0029BE                     __ptext22:
  6220                           	opt stack 0
  6221  0029BE                     ___lwdiv:
  6222                           	opt stack 21
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;incstack = 0
  6226  0029BE  0E00               	movlw	0
  6227  0029C0  0100               	movlb	0	; () banked
  6228  0029C2  6FD4               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6229  0029C4  0E00               	movlw	0
  6230  0029C6  6FD3               	movwf	___lwdiv@quotient& (0+255),b
  6231                           
  6232                           ; BSR set to: 0
  6233  0029C8  0100               	movlb	0	; () banked
  6234  0029CA  51D0               	movf	___lwdiv@divisor& (0+255),w,b
  6235  0029CC  0100               	movlb	0	; () banked
  6236  0029CE  11D1               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6237  0029D0  B4D8               	btfsc	status,2,c
  6238  0029D2  D02C               	goto	l876
  6239                           
  6240                           ; BSR set to: 0
  6241  0029D4  0E01               	movlw	1
  6242  0029D6  0100               	movlb	0	; () banked
  6243  0029D8  6FD2               	movwf	___lwdiv@counter& (0+255),b
  6244  0029DA  D006               	goto	l5142
  6245  0029DC                     l5140:
  6246                           
  6247                           ; BSR set to: 0
  6248  0029DC  0100               	movlb	0	; () banked
  6249  0029DE  90D8               	bcf	status,0,c
  6250  0029E0  37D0               	rlcf	___lwdiv@divisor& (0+255),f,b
  6251  0029E2  37D1               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6252  0029E4  0100               	movlb	0	; () banked
  6253  0029E6  2BD2               	incf	___lwdiv@counter& (0+255),f,b
  6254  0029E8                     l5142:
  6255                           
  6256                           ; BSR set to: 0
  6257  0029E8  0100               	movlb	0	; () banked
  6258  0029EA  AFD1               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6259  0029EC  D7F7               	goto	l5140
  6260  0029EE                     l5144:
  6261                           
  6262                           ; BSR set to: 0
  6263  0029EE  0100               	movlb	0	; () banked
  6264  0029F0  90D8               	bcf	status,0,c
  6265  0029F2  37D3               	rlcf	___lwdiv@quotient& (0+255),f,b
  6266  0029F4  37D4               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6267                           
  6268                           ; BSR set to: 0
  6269  0029F6  0100               	movlb	0	; () banked
  6270  0029F8  51D0               	movf	___lwdiv@divisor& (0+255),w,b
  6271  0029FA  0100               	movlb	0	; () banked
  6272  0029FC  5DCE               	subwf	___lwdiv@dividend& (0+255),w,b
  6273  0029FE  0100               	movlb	0	; () banked
  6274  002A00  51D1               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6275  002A02  0100               	movlb	0	; () banked
  6276  002A04  59CF               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6277  002A06  A0D8               	btfss	status,0,c
  6278  002A08  D00A               	goto	l5152
  6279                           
  6280                           ; BSR set to: 0
  6281  002A0A  0100               	movlb	0	; () banked
  6282  002A0C  51D0               	movf	___lwdiv@divisor& (0+255),w,b
  6283  002A0E  0100               	movlb	0	; () banked
  6284  002A10  5FCE               	subwf	___lwdiv@dividend& (0+255),f,b
  6285  002A12  0100               	movlb	0	; () banked
  6286  002A14  51D1               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6287  002A16  0100               	movlb	0	; () banked
  6288  002A18  5BCF               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6289                           
  6290                           ; BSR set to: 0
  6291  002A1A  0100               	movlb	0	; () banked
  6292  002A1C  81D3               	bsf	___lwdiv@quotient& (0+255),0,b
  6293  002A1E                     l5152:
  6294                           
  6295                           ; BSR set to: 0
  6296  002A1E  0100               	movlb	0	; () banked
  6297  002A20  90D8               	bcf	status,0,c
  6298  002A22  33D1               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6299  002A24  33D0               	rrcf	___lwdiv@divisor& (0+255),f,b
  6300                           
  6301                           ; BSR set to: 0
  6302  002A26  0100               	movlb	0	; () banked
  6303  002A28  2FD2               	decfsz	___lwdiv@counter& (0+255),f,b
  6304  002A2A  D7E1               	goto	l5144
  6305  002A2C                     l876:
  6306                           
  6307                           ; BSR set to: 0
  6308  002A2C  C0D3  F0CE         	movff	___lwdiv@quotient,?___lwdiv
  6309  002A30  C0D4  F0CF         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6310                           
  6311                           ; BSR set to: 0
  6312  002A34  0012               	return		;funcret
  6313  002A36                     __end_of___lwdiv:
  6314                           	opt stack 0
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           prodh	equ	0xFF4
  6320                           prodl	equ	0xFF3
  6321                           intcon	equ	0xFF2
  6322                           intcon2	equ	0xFF1
  6323                           intcon3	equ	0xFF0
  6324                           postinc0	equ	0xFEE
  6325                           wreg	equ	0xFE8
  6326                           postinc1	equ	0xFE6
  6327                           postdec1	equ	0xFE5
  6328                           fsr1h	equ	0xFE2
  6329                           fsr1l	equ	0xFE1
  6330                           indf2	equ	0xFDF
  6331                           postinc2	equ	0xFDE
  6332                           postdec2	equ	0xFDD
  6333                           fsr2h	equ	0xFDA
  6334                           fsr2l	equ	0xFD9
  6335                           status	equ	0xFD8
  6336                           
  6337 ;; *************** function _lcdInst *****************
  6338 ;; Defined at:
  6339 ;;		line 26 in file "lcd.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;  data            1    wreg     unsigned char 
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;  data            1   18[BANK0 ] unsigned char 
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  1    wreg      void 
  6346 ;; Registers used:
  6347 ;;		wreg, status,2, status,0, cstack
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;Total ram usage:        1 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; Hardware stack levels required when called:    8
  6360 ;; This function calls:
  6361 ;;		_lcdNibble
  6362 ;; This function is called by:
  6363 ;;		_initLCD
  6364 ;;		_standby
  6365 ;;		_date_time
  6366 ;;		_bottle_count
  6367 ;;		_bottle_time
  6368 ;;		_operation
  6369 ;;		_operationend
  6370 ;;		_emergencystop
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text23
  6375  0030D8                     __ptext23:
  6376                           	opt stack 0
  6377  0030D8                     _lcdInst:
  6378                           	opt stack 21
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;incstack = 0
  6382                           ;lcdInst@data stored from wreg
  6383  0030D8  0100               	movlb	0	; () banked
  6384  0030DA  6FD0               	movwf	lcdInst@data& (0+255),b
  6385                           
  6386                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  6387  0030DC  948C               	bcf	3980,2,c	;volatile
  6388                           
  6389                           ;lcd.c: 28: lcdNibble(data);
  6390  0030DE  0100               	movlb	0	; () banked
  6391  0030E0  51D0               	movf	lcdInst@data& (0+255),w,b
  6392  0030E2  ECBC  F015         	call	_lcdNibble
  6393  0030E6  0012               	return		;funcret
  6394  0030E8                     __end_of_lcdInst:
  6395                           	opt stack 0
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           intcon	equ	0xFF2
  6403                           intcon2	equ	0xFF1
  6404                           intcon3	equ	0xFF0
  6405                           postinc0	equ	0xFEE
  6406                           wreg	equ	0xFE8
  6407                           postinc1	equ	0xFE6
  6408                           postdec1	equ	0xFE5
  6409                           fsr1h	equ	0xFE2
  6410                           fsr1l	equ	0xFE1
  6411                           indf2	equ	0xFDF
  6412                           postinc2	equ	0xFDE
  6413                           postdec2	equ	0xFDD
  6414                           fsr2h	equ	0xFDA
  6415                           fsr2l	equ	0xFD9
  6416                           status	equ	0xFD8
  6417                           
  6418 ;; *************** function _lcdNibble *****************
  6419 ;; Defined at:
  6420 ;;		line 36 in file "lcd.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;  data            1    wreg     unsigned char 
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;  data            1   17[BANK0 ] unsigned char 
  6425 ;;  temp            1   16[BANK0 ] unsigned char 
  6426 ;; Return value:  Size  Location     Type
  6427 ;;                  1    wreg      void 
  6428 ;; Registers used:
  6429 ;;		wreg, status,2, status,0
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6436 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;Total ram usage:        2 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; Hardware stack levels required when called:    7
  6442 ;; This function calls:
  6443 ;;		Nothing
  6444 ;; This function is called by:
  6445 ;;		_lcdInst
  6446 ;;		_putch
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           	psect	text24
  6451  002B78                     __ptext24:
  6452                           	opt stack 0
  6453  002B78                     _lcdNibble:
  6454                           	opt stack 20
  6455                           
  6456                           ;incstack = 0
  6457                           ;lcdNibble@data stored from wreg
  6458  002B78  0100               	movlb	0	; () banked
  6459  002B7A  6FCF               	movwf	lcdNibble@data& (0+255),b
  6460                           
  6461                           ;lcd.c: 38: char temp = data & 0xF0;
  6462  002B7C  0100               	movlb	0	; () banked
  6463  002B7E  51CF               	movf	lcdNibble@data& (0+255),w,b
  6464  002B80  0BF0               	andlw	240
  6465  002B82  0100               	movlb	0	; () banked
  6466  002B84  6FCE               	movwf	lcdNibble@temp& (0+255),b
  6467                           
  6468                           ;lcd.c: 39: LATD = LATD & 0x0F;
  6469  002B86  508C               	movf	3980,w,c	;volatile
  6470  002B88  0B0F               	andlw	15
  6471  002B8A  6E8C               	movwf	3980,c	;volatile
  6472                           
  6473                           ;lcd.c: 40: LATD = temp | LATD;
  6474  002B8C  0100               	movlb	0	; () banked
  6475  002B8E  51CE               	movf	lcdNibble@temp& (0+255),w,b
  6476  002B90  108C               	iorwf	3980,w,c	;volatile
  6477  002B92  6E8C               	movwf	3980,c	;volatile
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  6481  002B94  968C               	bcf	3980,3,c	;volatile
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6485  002B96  0E19               	movlw	25
  6486  002B98                     u5807:
  6487  002B98  2EE8               	decfsz	wreg,f,c
  6488  002B9A  D7FE               	bra	u5807
  6489                           
  6490                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  6491  002B9C  868C               	bsf	3980,3,c	;volatile
  6492                           
  6493                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6494  002B9E  0E19               	movlw	25
  6495  002BA0                     u5817:
  6496  002BA0  2EE8               	decfsz	wreg,f,c
  6497  002BA2  D7FE               	bra	u5817
  6498                           
  6499                           ;lcd.c: 47: data = data << 4;
  6500  002BA4  0100               	movlb	0	; () banked
  6501  002BA6  39CF               	swapf	lcdNibble@data& (0+255),w,b
  6502  002BA8  0BF0               	andlw	240
  6503  002BAA  0100               	movlb	0	; () banked
  6504  002BAC  6FCF               	movwf	lcdNibble@data& (0+255),b
  6505                           
  6506                           ;lcd.c: 49: temp = data & 0xF0;
  6507  002BAE  0100               	movlb	0	; () banked
  6508  002BB0  51CF               	movf	lcdNibble@data& (0+255),w,b
  6509  002BB2  0BF0               	andlw	240
  6510  002BB4  0100               	movlb	0	; () banked
  6511  002BB6  6FCE               	movwf	lcdNibble@temp& (0+255),b
  6512                           
  6513                           ;lcd.c: 50: LATD = LATD & 0x0F;
  6514  002BB8  508C               	movf	3980,w,c	;volatile
  6515  002BBA  0B0F               	andlw	15
  6516  002BBC  6E8C               	movwf	3980,c	;volatile
  6517                           
  6518                           ;lcd.c: 51: LATD = temp | LATD;
  6519  002BBE  0100               	movlb	0	; () banked
  6520  002BC0  51CE               	movf	lcdNibble@temp& (0+255),w,b
  6521  002BC2  108C               	iorwf	3980,w,c	;volatile
  6522  002BC4  6E8C               	movwf	3980,c	;volatile
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  6526  002BC6  968C               	bcf	3980,3,c	;volatile
  6527                           
  6528                           ; BSR set to: 0
  6529                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6530  002BC8  0E19               	movlw	25
  6531  002BCA                     u5827:
  6532  002BCA  2EE8               	decfsz	wreg,f,c
  6533  002BCC  D7FE               	bra	u5827
  6534                           
  6535                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  6536  002BCE  868C               	bsf	3980,3,c	;volatile
  6537                           
  6538                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6539  002BD0  0E19               	movlw	25
  6540  002BD2                     u5837:
  6541  002BD2  2EE8               	decfsz	wreg,f,c
  6542  002BD4  D7FE               	bra	u5837
  6543  002BD6  0012               	return		;funcret
  6544  002BD8                     __end_of_lcdNibble:
  6545                           	opt stack 0
  6546                           tblptru	equ	0xFF8
  6547                           tblptrh	equ	0xFF7
  6548                           tblptrl	equ	0xFF6
  6549                           tablat	equ	0xFF5
  6550                           prodh	equ	0xFF4
  6551                           prodl	equ	0xFF3
  6552                           intcon	equ	0xFF2
  6553                           intcon2	equ	0xFF1
  6554                           intcon3	equ	0xFF0
  6555                           postinc0	equ	0xFEE
  6556                           wreg	equ	0xFE8
  6557                           postinc1	equ	0xFE6
  6558                           postdec1	equ	0xFE5
  6559                           fsr1h	equ	0xFE2
  6560                           fsr1l	equ	0xFE1
  6561                           indf2	equ	0xFDF
  6562                           postinc2	equ	0xFDE
  6563                           postdec2	equ	0xFDD
  6564                           fsr2h	equ	0xFDA
  6565                           fsr2l	equ	0xFD9
  6566                           status	equ	0xFD8
  6567                           
  6568 ;; *************** function ___awmod *****************
  6569 ;; Defined at:
  6570 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  dividend        2   16[BANK0 ] int 
  6573 ;;  divisor         2   18[BANK0 ] int 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;  sign            1   21[BANK0 ] unsigned char 
  6576 ;;  counter         1   20[BANK0 ] unsigned char 
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  2   16[BANK0 ] int 
  6579 ;; Registers used:
  6580 ;;		wreg, status,2, status,0
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6590 ;;Total ram usage:        6 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    7
  6593 ;; This function calls:
  6594 ;;		Nothing
  6595 ;; This function is called by:
  6596 ;;		_bottle_count
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           	psect	text25
  6601  0026F4                     __ptext25:
  6602                           	opt stack 0
  6603  0026F4                     ___awmod:
  6604                           	opt stack 22
  6605                           
  6606                           ;incstack = 0
  6607  0026F4  0E00               	movlw	0
  6608  0026F6  0100               	movlb	0	; () banked
  6609  0026F8  6FD3               	movwf	___awmod@sign& (0+255),b
  6610                           
  6611                           ; BSR set to: 0
  6612  0026FA  0100               	movlb	0	; () banked
  6613  0026FC  AFCF               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6614  0026FE  D008               	goto	l4106
  6615                           
  6616                           ; BSR set to: 0
  6617  002700  0100               	movlb	0	; () banked
  6618  002702  6DCE               	negf	___awmod@dividend& (0+255),b
  6619  002704  1FCF               	comf	(___awmod@dividend+1)& (0+255),f,b
  6620  002706  B0D8               	btfsc	status,0,c
  6621  002708  2BCF               	incf	(___awmod@dividend+1)& (0+255),f,b
  6622                           
  6623                           ; BSR set to: 0
  6624  00270A  0E01               	movlw	1
  6625  00270C  0100               	movlb	0	; () banked
  6626  00270E  6FD3               	movwf	___awmod@sign& (0+255),b
  6627  002710                     l4106:
  6628                           
  6629                           ; BSR set to: 0
  6630  002710  0100               	movlb	0	; () banked
  6631  002712  AFD1               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6632  002714  D005               	goto	l4110
  6633                           
  6634                           ; BSR set to: 0
  6635  002716  0100               	movlb	0	; () banked
  6636  002718  6DD0               	negf	___awmod@divisor& (0+255),b
  6637  00271A  1FD1               	comf	(___awmod@divisor+1)& (0+255),f,b
  6638  00271C  B0D8               	btfsc	status,0,c
  6639  00271E  2BD1               	incf	(___awmod@divisor+1)& (0+255),f,b
  6640  002720                     l4110:
  6641                           
  6642                           ; BSR set to: 0
  6643  002720  0100               	movlb	0	; () banked
  6644  002722  51D0               	movf	___awmod@divisor& (0+255),w,b
  6645  002724  0100               	movlb	0	; () banked
  6646  002726  11D1               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6647  002728  B4D8               	btfsc	status,2,c
  6648  00272A  D026               	goto	l4126
  6649                           
  6650                           ; BSR set to: 0
  6651  00272C  0E01               	movlw	1
  6652  00272E  0100               	movlb	0	; () banked
  6653  002730  6FD2               	movwf	___awmod@counter& (0+255),b
  6654  002732  D006               	goto	l4116
  6655  002734                     l4114:
  6656                           
  6657                           ; BSR set to: 0
  6658  002734  0100               	movlb	0	; () banked
  6659  002736  90D8               	bcf	status,0,c
  6660  002738  37D0               	rlcf	___awmod@divisor& (0+255),f,b
  6661  00273A  37D1               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6662  00273C  0100               	movlb	0	; () banked
  6663  00273E  2BD2               	incf	___awmod@counter& (0+255),f,b
  6664  002740                     l4116:
  6665                           
  6666                           ; BSR set to: 0
  6667  002740  0100               	movlb	0	; () banked
  6668  002742  AFD1               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6669  002744  D7F7               	goto	l4114
  6670  002746                     l4118:
  6671                           
  6672                           ; BSR set to: 0
  6673  002746  0100               	movlb	0	; () banked
  6674  002748  51D0               	movf	___awmod@divisor& (0+255),w,b
  6675  00274A  0100               	movlb	0	; () banked
  6676  00274C  5DCE               	subwf	___awmod@dividend& (0+255),w,b
  6677  00274E  0100               	movlb	0	; () banked
  6678  002750  51D1               	movf	(___awmod@divisor+1)& (0+255),w,b
  6679  002752  0100               	movlb	0	; () banked
  6680  002754  59CF               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6681  002756  A0D8               	btfss	status,0,c
  6682  002758  D008               	goto	l4122
  6683                           
  6684                           ; BSR set to: 0
  6685  00275A  0100               	movlb	0	; () banked
  6686  00275C  51D0               	movf	___awmod@divisor& (0+255),w,b
  6687  00275E  0100               	movlb	0	; () banked
  6688  002760  5FCE               	subwf	___awmod@dividend& (0+255),f,b
  6689  002762  0100               	movlb	0	; () banked
  6690  002764  51D1               	movf	(___awmod@divisor+1)& (0+255),w,b
  6691  002766  0100               	movlb	0	; () banked
  6692  002768  5BCF               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6693  00276A                     l4122:
  6694                           
  6695                           ; BSR set to: 0
  6696  00276A  0100               	movlb	0	; () banked
  6697  00276C  90D8               	bcf	status,0,c
  6698  00276E  33D1               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6699  002770  33D0               	rrcf	___awmod@divisor& (0+255),f,b
  6700                           
  6701                           ; BSR set to: 0
  6702  002772  0100               	movlb	0	; () banked
  6703  002774  2FD2               	decfsz	___awmod@counter& (0+255),f,b
  6704  002776  D7E7               	goto	l4118
  6705  002778                     l4126:
  6706                           
  6707                           ; BSR set to: 0
  6708  002778  0100               	movlb	0	; () banked
  6709  00277A  51D3               	movf	___awmod@sign& (0+255),w,b
  6710  00277C  0100               	movlb	0	; () banked
  6711  00277E  B4D8               	btfsc	status,2,c
  6712  002780  D005               	goto	l4130
  6713                           
  6714                           ; BSR set to: 0
  6715  002782  0100               	movlb	0	; () banked
  6716  002784  6DCE               	negf	___awmod@dividend& (0+255),b
  6717  002786  1FCF               	comf	(___awmod@dividend+1)& (0+255),f,b
  6718  002788  B0D8               	btfsc	status,0,c
  6719  00278A  2BCF               	incf	(___awmod@dividend+1)& (0+255),f,b
  6720  00278C                     l4130:
  6721                           
  6722                           ; BSR set to: 0
  6723  00278C  C0CE  F0CE         	movff	___awmod@dividend,?___awmod
  6724  002790  C0CF  F0CF         	movff	___awmod@dividend+1,?___awmod+1
  6725  002794  0012               	return	
  6726  002796                     __end_of___awmod:
  6727                           	opt stack 0
  6728                           tblptru	equ	0xFF8
  6729                           tblptrh	equ	0xFF7
  6730                           tblptrl	equ	0xFF6
  6731                           tablat	equ	0xFF5
  6732                           prodh	equ	0xFF4
  6733                           prodl	equ	0xFF3
  6734                           intcon	equ	0xFF2
  6735                           intcon2	equ	0xFF1
  6736                           intcon3	equ	0xFF0
  6737                           postinc0	equ	0xFEE
  6738                           wreg	equ	0xFE8
  6739                           postinc1	equ	0xFE6
  6740                           postdec1	equ	0xFE5
  6741                           fsr1h	equ	0xFE2
  6742                           fsr1l	equ	0xFE1
  6743                           indf2	equ	0xFDF
  6744                           postinc2	equ	0xFDE
  6745                           postdec2	equ	0xFDD
  6746                           fsr2h	equ	0xFDA
  6747                           fsr2l	equ	0xFD9
  6748                           status	equ	0xFD8
  6749                           
  6750 ;; *************** function _I2C_Master_Init *****************
  6751 ;; Defined at:
  6752 ;;		line 14 in file "I2C.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;  c               4   29[BANK0 ] const unsigned long 
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;		None
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  1    wreg      void 
  6759 ;; Registers used:
  6760 ;;		wreg, status,2, status,0, cstack
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6766 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;Total ram usage:        8 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    8
  6773 ;; This function calls:
  6774 ;;		___lldiv
  6775 ;; This function is called by:
  6776 ;;		_main
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           	psect	text26
  6781  002BD8                     __ptext26:
  6782                           	opt stack 0
  6783  002BD8                     _I2C_Master_Init:
  6784                           	opt stack 22
  6785                           
  6786                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;incstack = 0
  6790  002BD8  0E00               	movlw	0
  6791  002BDA  6EC7               	movwf	4039,c	;volatile
  6792                           
  6793                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  6794  002BDC  0E28               	movlw	40
  6795  002BDE  6EC6               	movwf	4038,c	;volatile
  6796                           
  6797                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  6798  002BE0  0E00               	movlw	0
  6799  002BE2  6EC5               	movwf	4037,c	;volatile
  6800                           
  6801                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
  6802  002BE4  0E80               	movlw	128
  6803  002BE6  0100               	movlb	0	; () banked
  6804  002BE8  6FCE               	movwf	___lldiv@dividend& (0+255),b
  6805  002BEA  0E96               	movlw	150
  6806  002BEC  6FCF               	movwf	(___lldiv@dividend+1)& (0+255),b
  6807  002BEE  0E98               	movlw	152
  6808  002BF0  6FD0               	movwf	(___lldiv@dividend+2)& (0+255),b
  6809  002BF2  0E00               	movlw	0
  6810  002BF4  6FD1               	movwf	(___lldiv@dividend+3)& (0+255),b
  6811  002BF6  C0DB  F0DF         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6812  002BFA  C0DC  F0E0         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6813  002BFE  C0DD  F0E1         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6814  002C02  C0DE  F0E2         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6815  002C06  0E02               	movlw	2
  6816  002C08                     u4195:
  6817  002C08  90D8               	bcf	status,0,c
  6818  002C0A  0100               	movlb	0	; () banked
  6819  002C0C  37DF               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6820  002C0E  37E0               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6821  002C10  37E1               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6822  002C12  37E2               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6823  002C14  2EE8               	decfsz	wreg,f,c
  6824  002C16  D7F8               	goto	u4195
  6825  002C18  C0DF  F0D2         	movff	??_I2C_Master_Init,___lldiv@divisor
  6826  002C1C  C0E0  F0D3         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6827  002C20  C0E1  F0D4         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6828  002C24  C0E2  F0D5         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6829  002C28  EC1D  F012         	call	___lldiv	;wreg free
  6830  002C2C  0100               	movlb	0	; () banked
  6831  002C2E  05CE               	decf	?___lldiv& (0+255),w,b
  6832  002C30  6EC8               	movwf	4040,c	;volatile
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;I2C.c: 21: TRISC3 = 1;
  6836  002C32  8694               	bsf	3988,3,c	;volatile
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;I2C.c: 22: TRISC4 = 1;
  6840  002C34  8894               	bsf	3988,4,c	;volatile
  6841                           
  6842                           ; BSR set to: 0
  6843  002C36  0012               	return		;funcret
  6844  002C38                     __end_of_I2C_Master_Init:
  6845                           	opt stack 0
  6846                           tblptru	equ	0xFF8
  6847                           tblptrh	equ	0xFF7
  6848                           tblptrl	equ	0xFF6
  6849                           tablat	equ	0xFF5
  6850                           prodh	equ	0xFF4
  6851                           prodl	equ	0xFF3
  6852                           intcon	equ	0xFF2
  6853                           intcon2	equ	0xFF1
  6854                           intcon3	equ	0xFF0
  6855                           postinc0	equ	0xFEE
  6856                           wreg	equ	0xFE8
  6857                           postinc1	equ	0xFE6
  6858                           postdec1	equ	0xFE5
  6859                           fsr1h	equ	0xFE2
  6860                           fsr1l	equ	0xFE1
  6861                           indf2	equ	0xFDF
  6862                           postinc2	equ	0xFDE
  6863                           postdec2	equ	0xFDD
  6864                           fsr2h	equ	0xFDA
  6865                           fsr2l	equ	0xFD9
  6866                           status	equ	0xFD8
  6867                           
  6868 ;; *************** function ___lldiv *****************
  6869 ;; Defined at:
  6870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;  dividend        4   16[BANK0 ] unsigned long 
  6873 ;;  divisor         4   20[BANK0 ] unsigned long 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  quotient        4   24[BANK0 ] unsigned long 
  6876 ;;  counter         1   28[BANK0 ] unsigned char 
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  4   16[BANK0 ] unsigned long 
  6879 ;; Registers used:
  6880 ;;		wreg, status,2, status,0
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6886 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6890 ;;Total ram usage:       13 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    7
  6893 ;; This function calls:
  6894 ;;		Nothing
  6895 ;; This function is called by:
  6896 ;;		_I2C_Master_Init
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           	psect	text27
  6901  00243A                     __ptext27:
  6902                           	opt stack 0
  6903  00243A                     ___lldiv:
  6904                           	opt stack 22
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;incstack = 0
  6908  00243A  0E00               	movlw	0
  6909  00243C  0100               	movlb	0	; () banked
  6910  00243E  6FD6               	movwf	___lldiv@quotient& (0+255),b
  6911  002440  0E00               	movlw	0
  6912  002442  6FD7               	movwf	(___lldiv@quotient+1)& (0+255),b
  6913  002444  0E00               	movlw	0
  6914  002446  6FD8               	movwf	(___lldiv@quotient+2)& (0+255),b
  6915  002448  0E00               	movlw	0
  6916  00244A  6FD9               	movwf	(___lldiv@quotient+3)& (0+255),b
  6917                           
  6918                           ; BSR set to: 0
  6919  00244C  0100               	movlb	0	; () banked
  6920  00244E  51D2               	movf	___lldiv@divisor& (0+255),w,b
  6921  002450  0100               	movlb	0	; () banked
  6922  002452  11D3               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6923  002454  0100               	movlb	0	; () banked
  6924  002456  11D4               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6925  002458  0100               	movlb	0	; () banked
  6926  00245A  11D5               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6927  00245C  B4D8               	btfsc	status,2,c
  6928  00245E  D042               	goto	l823
  6929                           
  6930                           ; BSR set to: 0
  6931  002460  0E01               	movlw	1
  6932  002462  0100               	movlb	0	; () banked
  6933  002464  6FDA               	movwf	___lldiv@counter& (0+255),b
  6934  002466  D008               	goto	l4172
  6935  002468                     l4170:
  6936                           
  6937                           ; BSR set to: 0
  6938  002468  0100               	movlb	0	; () banked
  6939  00246A  90D8               	bcf	status,0,c
  6940  00246C  37D2               	rlcf	___lldiv@divisor& (0+255),f,b
  6941  00246E  37D3               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6942  002470  37D4               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6943  002472  37D5               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6944  002474  0100               	movlb	0	; () banked
  6945  002476  2BDA               	incf	___lldiv@counter& (0+255),f,b
  6946  002478                     l4172:
  6947                           
  6948                           ; BSR set to: 0
  6949  002478  0100               	movlb	0	; () banked
  6950  00247A  AFD5               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6951  00247C  D7F5               	goto	l4170
  6952  00247E                     l4174:
  6953                           
  6954                           ; BSR set to: 0
  6955  00247E  0100               	movlb	0	; () banked
  6956  002480  90D8               	bcf	status,0,c
  6957  002482  37D6               	rlcf	___lldiv@quotient& (0+255),f,b
  6958  002484  37D7               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6959  002486  37D8               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6960  002488  37D9               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6961                           
  6962                           ; BSR set to: 0
  6963  00248A  0100               	movlb	0	; () banked
  6964  00248C  51D2               	movf	___lldiv@divisor& (0+255),w,b
  6965  00248E  0100               	movlb	0	; () banked
  6966  002490  5DCE               	subwf	___lldiv@dividend& (0+255),w,b
  6967  002492  0100               	movlb	0	; () banked
  6968  002494  51D3               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6969  002496  0100               	movlb	0	; () banked
  6970  002498  59CF               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6971  00249A  0100               	movlb	0	; () banked
  6972  00249C  51D4               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6973  00249E  0100               	movlb	0	; () banked
  6974  0024A0  59D0               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6975  0024A2  0100               	movlb	0	; () banked
  6976  0024A4  51D5               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6977  0024A6  0100               	movlb	0	; () banked
  6978  0024A8  59D1               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6979  0024AA  A0D8               	btfss	status,0,c
  6980  0024AC  D012               	goto	l4182
  6981                           
  6982                           ; BSR set to: 0
  6983  0024AE  0100               	movlb	0	; () banked
  6984  0024B0  51D2               	movf	___lldiv@divisor& (0+255),w,b
  6985  0024B2  0100               	movlb	0	; () banked
  6986  0024B4  5FCE               	subwf	___lldiv@dividend& (0+255),f,b
  6987  0024B6  0100               	movlb	0	; () banked
  6988  0024B8  51D3               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6989  0024BA  0100               	movlb	0	; () banked
  6990  0024BC  5BCF               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6991  0024BE  0100               	movlb	0	; () banked
  6992  0024C0  51D4               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6993  0024C2  0100               	movlb	0	; () banked
  6994  0024C4  5BD0               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6995  0024C6  0100               	movlb	0	; () banked
  6996  0024C8  51D5               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6997  0024CA  0100               	movlb	0	; () banked
  6998  0024CC  5BD1               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6999                           
  7000                           ; BSR set to: 0
  7001  0024CE  0100               	movlb	0	; () banked
  7002  0024D0  81D6               	bsf	___lldiv@quotient& (0+255),0,b
  7003  0024D2                     l4182:
  7004                           
  7005                           ; BSR set to: 0
  7006  0024D2  0100               	movlb	0	; () banked
  7007  0024D4  90D8               	bcf	status,0,c
  7008  0024D6  33D5               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7009  0024D8  33D4               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7010  0024DA  33D3               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7011  0024DC  33D2               	rrcf	___lldiv@divisor& (0+255),f,b
  7012                           
  7013                           ; BSR set to: 0
  7014  0024DE  0100               	movlb	0	; () banked
  7015  0024E0  2FDA               	decfsz	___lldiv@counter& (0+255),f,b
  7016  0024E2  D7CD               	goto	l4174
  7017  0024E4                     l823:
  7018                           
  7019                           ; BSR set to: 0
  7020  0024E4  C0D6  F0CE         	movff	___lldiv@quotient,?___lldiv
  7021  0024E8  C0D7  F0CF         	movff	___lldiv@quotient+1,?___lldiv+1
  7022  0024EC  C0D8  F0D0         	movff	___lldiv@quotient+2,?___lldiv+2
  7023  0024F0  C0D9  F0D1         	movff	___lldiv@quotient+3,?___lldiv+3
  7024                           
  7025                           ; BSR set to: 0
  7026  0024F4  0012               	return		;funcret
  7027  0024F6                     __end_of___lldiv:
  7028                           	opt stack 0
  7029                           tblptru	equ	0xFF8
  7030                           tblptrh	equ	0xFF7
  7031                           tblptrl	equ	0xFF6
  7032                           tablat	equ	0xFF5
  7033                           prodh	equ	0xFF4
  7034                           prodl	equ	0xFF3
  7035                           intcon	equ	0xFF2
  7036                           intcon2	equ	0xFF1
  7037                           intcon3	equ	0xFF0
  7038                           postinc0	equ	0xFEE
  7039                           wreg	equ	0xFE8
  7040                           postinc1	equ	0xFE6
  7041                           postdec1	equ	0xFE5
  7042                           fsr1h	equ	0xFE2
  7043                           fsr1l	equ	0xFE1
  7044                           indf2	equ	0xFDF
  7045                           postinc2	equ	0xFDE
  7046                           postdec2	equ	0xFDD
  7047                           fsr2h	equ	0xFDA
  7048                           fsr2l	equ	0xFD9
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function _I2C_ColorSens_Init *****************
  7052 ;; Defined at:
  7053 ;;		line 54 in file "I2C.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;		None
  7058 ;; Return value:  Size  Location     Type
  7059 ;;                  1    wreg      void 
  7060 ;; Registers used:
  7061 ;;		wreg, status,2, status,0, cstack
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;Total ram usage:        1 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:    9
  7074 ;; This function calls:
  7075 ;;		_I2C_Master_Start
  7076 ;;		_I2C_Master_Stop
  7077 ;;		_I2C_Master_Write
  7078 ;; This function is called by:
  7079 ;;		_main
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           	psect	text28
  7084  00202E                     __ptext28:
  7085                           	opt stack 0
  7086  00202E                     _I2C_ColorSens_Init:
  7087                           	opt stack 21
  7088                           
  7089                           ;I2C.c: 55: I2C_Master_Start();
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;incstack = 0
  7093  00202E  EC8E  F018         	call	_I2C_Master_Start	;wreg free
  7094                           
  7095                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  7096  002032  0E00               	movlw	0
  7097  002034  0100               	movlb	0	; () banked
  7098  002036  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7099  002038  0E52               	movlw	82
  7100  00203A  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7101  00203C  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7102                           
  7103                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  7104  002040  0E00               	movlw	0
  7105  002042  0100               	movlb	0	; () banked
  7106  002044  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7107  002046  0E80               	movlw	128
  7108  002048  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7109  00204A  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7110                           
  7111                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  7112  00204E  0E00               	movlw	0
  7113  002050  0100               	movlb	0	; () banked
  7114  002052  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7115  002054  0E01               	movlw	1
  7116  002056  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7117  002058  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7118                           
  7119                           ;I2C.c: 59: I2C_Master_Stop();
  7120  00205C  EC8A  F018         	call	_I2C_Master_Stop	;wreg free
  7121                           
  7122                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  7123  002060  0E0A               	movlw	10
  7124  002062  0100               	movlb	0	; () banked
  7125  002064  6FD1               	movwf	??_I2C_ColorSens_Init& (0+255),b
  7126  002066  0EBC               	movlw	188
  7127  002068                     u5847:
  7128  002068  2EE8               	decfsz	wreg,f,c
  7129  00206A  D7FE               	bra	u5847
  7130  00206C  2FD1               	decfsz	??_I2C_ColorSens_Init& (0+255),f,b
  7131  00206E  D7FC               	bra	u5847
  7132  002070  F000               	nop	
  7133                           
  7134                           ;I2C.c: 63: I2C_Master_Start();
  7135  002072  EC8E  F018         	call	_I2C_Master_Start	;wreg free
  7136                           
  7137                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  7138  002076  0E00               	movlw	0
  7139  002078  0100               	movlb	0	; () banked
  7140  00207A  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7141  00207C  0E52               	movlw	82
  7142  00207E  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7143  002080  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7144                           
  7145                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  7146  002084  0E00               	movlw	0
  7147  002086  0100               	movlb	0	; () banked
  7148  002088  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7149  00208A  0E80               	movlw	128
  7150  00208C  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7151  00208E  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7152                           
  7153                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
  7154  002092  0E00               	movlw	0
  7155  002094  0100               	movlb	0	; () banked
  7156  002096  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7157  002098  0E03               	movlw	3
  7158  00209A  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7159  00209C  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7160                           
  7161                           ;I2C.c: 67: I2C_Master_Stop();
  7162  0020A0  EC8A  F018         	call	_I2C_Master_Stop	;wreg free
  7163                           
  7164                           ;I2C.c: 69: I2C_Master_Start();
  7165  0020A4  EC8E  F018         	call	_I2C_Master_Start	;wreg free
  7166                           
  7167                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  7168  0020A8  0E00               	movlw	0
  7169  0020AA  0100               	movlb	0	; () banked
  7170  0020AC  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7171  0020AE  0E52               	movlw	82
  7172  0020B0  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7173  0020B2  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7174                           
  7175                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  7176  0020B6  0E00               	movlw	0
  7177  0020B8  0100               	movlb	0	; () banked
  7178  0020BA  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7179  0020BC  0E8F               	movlw	143
  7180  0020BE  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7181  0020C0  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7182                           
  7183                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  7184  0020C4  0E00               	movlw	0
  7185  0020C6  0100               	movlb	0	; () banked
  7186  0020C8  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7187  0020CA  0E02               	movlw	2
  7188  0020CC  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7189  0020CE  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7190                           
  7191                           ;I2C.c: 73: I2C_Master_Stop();
  7192  0020D2  EC8A  F018         	call	_I2C_Master_Stop	;wreg free
  7193                           
  7194                           ;I2C.c: 90: I2C_Master_Start();
  7195  0020D6  EC8E  F018         	call	_I2C_Master_Start	;wreg free
  7196                           
  7197                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
  7198  0020DA  0E00               	movlw	0
  7199  0020DC  0100               	movlb	0	; () banked
  7200  0020DE  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7201  0020E0  0E52               	movlw	82
  7202  0020E2  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7203  0020E4  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7204                           
  7205                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
  7206  0020E8  0E00               	movlw	0
  7207  0020EA  0100               	movlb	0	; () banked
  7208  0020EC  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7209  0020EE  0E81               	movlw	129
  7210  0020F0  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7211  0020F2  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7212                           
  7213                           ;I2C.c: 93: I2C_Master_Write(0b11111111);
  7214  0020F6  0E00               	movlw	0
  7215  0020F8  0100               	movlb	0	; () banked
  7216  0020FA  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7217  0020FC  69CF               	setf	I2C_Master_Write@d& (0+255),b
  7218  0020FE  EC80  F018         	call	_I2C_Master_Write	;wreg free
  7219                           
  7220                           ;I2C.c: 94: I2C_Master_Stop();
  7221  002102  EC8A  F018         	call	_I2C_Master_Stop	;wreg free
  7222  002106  0012               	return		;funcret
  7223  002108                     __end_of_I2C_ColorSens_Init:
  7224                           	opt stack 0
  7225                           tblptru	equ	0xFF8
  7226                           tblptrh	equ	0xFF7
  7227                           tblptrl	equ	0xFF6
  7228                           tablat	equ	0xFF5
  7229                           prodh	equ	0xFF4
  7230                           prodl	equ	0xFF3
  7231                           intcon	equ	0xFF2
  7232                           intcon2	equ	0xFF1
  7233                           intcon3	equ	0xFF0
  7234                           postinc0	equ	0xFEE
  7235                           wreg	equ	0xFE8
  7236                           postinc1	equ	0xFE6
  7237                           postdec1	equ	0xFE5
  7238                           fsr1h	equ	0xFE2
  7239                           fsr1l	equ	0xFE1
  7240                           indf2	equ	0xFDF
  7241                           postinc2	equ	0xFDE
  7242                           postdec2	equ	0xFDD
  7243                           fsr2h	equ	0xFDA
  7244                           fsr2l	equ	0xFD9
  7245                           status	equ	0xFD8
  7246                           
  7247 ;; *************** function _I2C_Master_Write *****************
  7248 ;; Defined at:
  7249 ;;		line 48 in file "I2C.c"
  7250 ;; Parameters:    Size  Location     Type
  7251 ;;  d               2   17[BANK0 ] unsigned int 
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;		None
  7254 ;; Return value:  Size  Location     Type
  7255 ;;                  1    wreg      void 
  7256 ;; Registers used:
  7257 ;;		wreg, status,2, status,0, cstack
  7258 ;; Tracked objects:
  7259 ;;		On entry : 0/0
  7260 ;;		On exit  : 0/0
  7261 ;;		Unchanged: 0/0
  7262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7263 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;Total ram usage:        2 bytes
  7268 ;; Hardware stack levels used:    1
  7269 ;; Hardware stack levels required when called:    8
  7270 ;; This function calls:
  7271 ;;		_I2C_Master_Wait
  7272 ;; This function is called by:
  7273 ;;		_I2C_ColorSens_Init
  7274 ;;		_main
  7275 ;;		_date_time
  7276 ;;		_read_colorsensor
  7277 ;;		_I2C_ColorSens_ClearInt
  7278 ;;		_set_time
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	text29
  7283  003100                     __ptext29:
  7284                           	opt stack 0
  7285  003100                     _I2C_Master_Write:
  7286                           	opt stack 20
  7287                           
  7288                           ;I2C.c: 50: I2C_Master_Wait();
  7289                           
  7290                           ;incstack = 0
  7291  003100  EC51  F018         	call	_I2C_Master_Wait	;wreg free
  7292                           
  7293                           ;I2C.c: 51: SSPBUF = d;
  7294  003104  C0CF  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7295  003108  0012               	return		;funcret
  7296  00310A                     __end_of_I2C_Master_Write:
  7297                           	opt stack 0
  7298                           tblptru	equ	0xFF8
  7299                           tblptrh	equ	0xFF7
  7300                           tblptrl	equ	0xFF6
  7301                           tablat	equ	0xFF5
  7302                           prodh	equ	0xFF4
  7303                           prodl	equ	0xFF3
  7304                           intcon	equ	0xFF2
  7305                           intcon2	equ	0xFF1
  7306                           intcon3	equ	0xFF0
  7307                           postinc0	equ	0xFEE
  7308                           wreg	equ	0xFE8
  7309                           postinc1	equ	0xFE6
  7310                           postdec1	equ	0xFE5
  7311                           fsr1h	equ	0xFE2
  7312                           fsr1l	equ	0xFE1
  7313                           indf2	equ	0xFDF
  7314                           postinc2	equ	0xFDE
  7315                           postdec2	equ	0xFDD
  7316                           fsr2h	equ	0xFDA
  7317                           fsr2l	equ	0xFD9
  7318                           status	equ	0xFD8
  7319                           
  7320 ;; *************** function _I2C_Master_Stop *****************
  7321 ;; Defined at:
  7322 ;;		line 42 in file "I2C.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;		None
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;		None
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  1    wreg      void 
  7329 ;; Registers used:
  7330 ;;		wreg, status,2, status,0, cstack
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;Total ram usage:        0 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; Hardware stack levels required when called:    8
  7343 ;; This function calls:
  7344 ;;		_I2C_Master_Wait
  7345 ;; This function is called by:
  7346 ;;		_I2C_ColorSens_Init
  7347 ;;		_main
  7348 ;;		_date_time
  7349 ;;		_read_colorsensor
  7350 ;;		_I2C_ColorSens_ClearInt
  7351 ;;		_set_time
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           	psect	text30
  7356  003114                     __ptext30:
  7357                           	opt stack 0
  7358  003114                     _I2C_Master_Stop:
  7359                           	opt stack 20
  7360                           
  7361                           ;I2C.c: 44: I2C_Master_Wait();
  7362                           
  7363                           ;incstack = 0
  7364  003114  EC51  F018         	call	_I2C_Master_Wait	;wreg free
  7365                           
  7366                           ;I2C.c: 45: PEN = 1;
  7367  003118  84C5               	bsf	4037,2,c	;volatile
  7368  00311A  0012               	return		;funcret
  7369  00311C                     __end_of_I2C_Master_Stop:
  7370                           	opt stack 0
  7371                           tblptru	equ	0xFF8
  7372                           tblptrh	equ	0xFF7
  7373                           tblptrl	equ	0xFF6
  7374                           tablat	equ	0xFF5
  7375                           prodh	equ	0xFF4
  7376                           prodl	equ	0xFF3
  7377                           intcon	equ	0xFF2
  7378                           intcon2	equ	0xFF1
  7379                           intcon3	equ	0xFF0
  7380                           postinc0	equ	0xFEE
  7381                           wreg	equ	0xFE8
  7382                           postinc1	equ	0xFE6
  7383                           postdec1	equ	0xFE5
  7384                           fsr1h	equ	0xFE2
  7385                           fsr1l	equ	0xFE1
  7386                           indf2	equ	0xFDF
  7387                           postinc2	equ	0xFDE
  7388                           postdec2	equ	0xFDD
  7389                           fsr2h	equ	0xFDA
  7390                           fsr2l	equ	0xFD9
  7391                           status	equ	0xFD8
  7392                           
  7393 ;; *************** function _I2C_Master_Start *****************
  7394 ;; Defined at:
  7395 ;;		line 30 in file "I2C.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;		None
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;		None
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  1    wreg      void 
  7402 ;; Registers used:
  7403 ;;		wreg, status,2, status,0, cstack
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;Total ram usage:        0 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:    8
  7416 ;; This function calls:
  7417 ;;		_I2C_Master_Wait
  7418 ;; This function is called by:
  7419 ;;		_I2C_ColorSens_Init
  7420 ;;		_main
  7421 ;;		_date_time
  7422 ;;		_read_colorsensor
  7423 ;;		_I2C_ColorSens_ClearInt
  7424 ;;		_set_time
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text31
  7429  00311C                     __ptext31:
  7430                           	opt stack 0
  7431  00311C                     _I2C_Master_Start:
  7432                           	opt stack 20
  7433                           
  7434                           ;I2C.c: 32: I2C_Master_Wait();
  7435                           
  7436                           ;incstack = 0
  7437  00311C  EC51  F018         	call	_I2C_Master_Wait	;wreg free
  7438                           
  7439                           ;I2C.c: 33: SEN = 1;
  7440  003120  80C5               	bsf	4037,0,c	;volatile
  7441  003122  0012               	return		;funcret
  7442  003124                     __end_of_I2C_Master_Start:
  7443                           	opt stack 0
  7444                           tblptru	equ	0xFF8
  7445                           tblptrh	equ	0xFF7
  7446                           tblptrl	equ	0xFF6
  7447                           tablat	equ	0xFF5
  7448                           prodh	equ	0xFF4
  7449                           prodl	equ	0xFF3
  7450                           intcon	equ	0xFF2
  7451                           intcon2	equ	0xFF1
  7452                           intcon3	equ	0xFF0
  7453                           postinc0	equ	0xFEE
  7454                           wreg	equ	0xFE8
  7455                           postinc1	equ	0xFE6
  7456                           postdec1	equ	0xFE5
  7457                           fsr1h	equ	0xFE2
  7458                           fsr1l	equ	0xFE1
  7459                           indf2	equ	0xFDF
  7460                           postinc2	equ	0xFDE
  7461                           postdec2	equ	0xFDD
  7462                           fsr2h	equ	0xFDA
  7463                           fsr2l	equ	0xFD9
  7464                           status	equ	0xFD8
  7465                           
  7466 ;; *************** function _I2C_Master_Wait *****************
  7467 ;; Defined at:
  7468 ;;		line 25 in file "I2C.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;		None
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;		None
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      void 
  7475 ;; Registers used:
  7476 ;;		wreg, status,2, status,0
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;Total ram usage:        1 bytes
  7487 ;; Hardware stack levels used:    1
  7488 ;; Hardware stack levels required when called:    7
  7489 ;; This function calls:
  7490 ;;		Nothing
  7491 ;; This function is called by:
  7492 ;;		_I2C_Master_Start
  7493 ;;		_I2C_Master_Stop
  7494 ;;		_I2C_Master_Write
  7495 ;;		_I2C_Master_Read
  7496 ;;		_I2C_Master_RepeatedStart
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           	psect	text32
  7501  0030A2                     __ptext32:
  7502                           	opt stack 0
  7503  0030A2                     _I2C_Master_Wait:
  7504                           	opt stack 20
  7505  0030A2                     l34:
  7506  0030A2  B4C7               	btfsc	4039,2,c	;volatile
  7507  0030A4  D7FE               	goto	l34
  7508  0030A6  CFC5 F0CE          	movff	4037,??_I2C_Master_Wait	;volatile
  7509  0030AA  0E1F               	movlw	31
  7510  0030AC  0100               	movlb	0	; () banked
  7511  0030AE  17CE               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7512  0030B0  B4D8               	btfsc	status,2,c
  7513  0030B2  0012               	return	
  7514  0030B4  D7F6               	goto	l34
  7515  0030B6                     __end_of_I2C_Master_Wait:
  7516                           	opt stack 0
  7517                           tblptru	equ	0xFF8
  7518                           tblptrh	equ	0xFF7
  7519                           tblptrl	equ	0xFF6
  7520                           tablat	equ	0xFF5
  7521                           prodh	equ	0xFF4
  7522                           prodl	equ	0xFF3
  7523                           intcon	equ	0xFF2
  7524                           intcon2	equ	0xFF1
  7525                           intcon3	equ	0xFF0
  7526                           postinc0	equ	0xFEE
  7527                           wreg	equ	0xFE8
  7528                           postinc1	equ	0xFE6
  7529                           postdec1	equ	0xFE5
  7530                           fsr1h	equ	0xFE2
  7531                           fsr1l	equ	0xFE1
  7532                           indf2	equ	0xFDF
  7533                           postinc2	equ	0xFDE
  7534                           postdec2	equ	0xFDD
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function _isr *****************
  7540 ;; Defined at:
  7541 ;;		line 97 in file "main.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;		None
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;  i               1  114[COMRAM] unsigned char 
  7546 ;; Return value:  Size  Location     Type
  7547 ;;                  1    wreg      void 
  7548 ;; Registers used:
  7549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7556 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7558 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;Total ram usage:       19 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    6
  7562 ;; This function calls:
  7563 ;;		_dec_to_hex
  7564 ;;		_read_time
  7565 ;;		i2___wmul
  7566 ;;		i2_lcdInst
  7567 ;;		i2_printf
  7568 ;;		i2_read_colorsensor
  7569 ;;		i2_servo_rotate1
  7570 ;; This function is called by:
  7571 ;;		Interrupt level 2
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           	psect	intcode
  7576  000008                     __pintcode:
  7577                           	opt stack 0
  7578  000008                     _isr:
  7579                           	opt stack 20
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;incstack = 0
  7583  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7584  00000A  ED09  F002         	call	int_func,f	;refresh shadow registers
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           prodh	equ	0xFF4
  7590                           prodl	equ	0xFF3
  7591                           intcon	equ	0xFF2
  7592                           intcon2	equ	0xFF1
  7593                           intcon3	equ	0xFF0
  7594                           postinc0	equ	0xFEE
  7595                           wreg	equ	0xFE8
  7596                           postinc1	equ	0xFE6
  7597                           postdec1	equ	0xFE5
  7598                           fsr1h	equ	0xFE2
  7599                           fsr1l	equ	0xFE1
  7600                           indf2	equ	0xFDF
  7601                           postinc2	equ	0xFDE
  7602                           postdec2	equ	0xFDD
  7603                           fsr2h	equ	0xFDA
  7604                           fsr2l	equ	0xFD9
  7605                           status	equ	0xFD8
  7606                           
  7607                           	psect	intcode_body
  7608  000412                     __pintcode_body:
  7609                           	opt stack 20
  7610  000412                     int_func:
  7611                           	opt stack 20
  7612  000412  0006               	pop		; remove dummy address from shadow register refresh
  7613  000414  CFFA F0C0          	movff	pclath,??_isr+2
  7614  000418  CFFB F0C1          	movff	pclatu,??_isr+3
  7615  00041C  CFE9 F0C2          	movff	fsr0l,??_isr+4
  7616  000420  CFEA F0C3          	movff	fsr0h,??_isr+5
  7617  000424  CFE1 F0C4          	movff	fsr1l,??_isr+6
  7618  000428  CFE2 F0C5          	movff	fsr1h,??_isr+7
  7619  00042C  CFD9 F0C6          	movff	fsr2l,??_isr+8
  7620  000430  CFDA F0C7          	movff	fsr2h,??_isr+9
  7621  000434  CFF3 F0C8          	movff	prodl,??_isr+10
  7622  000438  CFF4 F0C9          	movff	prodh,??_isr+11
  7623  00043C  CFF6 F0CA          	movff	tblptrl,??_isr+12
  7624  000440  CFF7 F0CB          	movff	tblptrh,??_isr+13
  7625  000444  CFF8 F0CC          	movff	tblptru,??_isr+14
  7626  000448  CFF5 F0CD          	movff	tablat,??_isr+15
  7627                           
  7628                           ;main.c: 98: if (INT1IF) {
  7629  00044C  B0F0               	btfsc	intcon3,0,c	;volatile
  7630  00044E  D109               	goto	i2l4912
  7631  000450  D134               	goto	i2l262
  7632  000452                     i2l264:
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;main.c: 101: LATAbits.LATA2 = 1;
  7636  000452  8489               	bsf	3977,2,c	;volatile
  7637                           
  7638                           ;main.c: 102: TMR0IE = 1;
  7639  000454  8AF2               	bsf	intcon,5,c	;volatile
  7640                           
  7641                           ;main.c: 103: TMR0ON = 1;
  7642  000456  8ED5               	bsf	4053,7,c	;volatile
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;main.c: 104: TMR0 = 0;
  7646  000458  0E00               	movlw	0
  7647  00045A  6ED7               	movwf	4055,c	;volatile
  7648  00045C  0E00               	movlw	0
  7649  00045E  6ED6               	movwf	4054,c	;volatile
  7650                           
  7651                           ; BSR set to: 0
  7652                           ;main.c: 106: read_time();
  7653  000460  EC57  F015         	call	_read_time	;wreg free
  7654                           
  7655                           ;main.c: 107: start_time[1] = time[1];
  7656  000464  C09B  F07B         	movff	_time+1,_start_time+1
  7657                           
  7658                           ;main.c: 108: start_time[0] = time[0];
  7659  000468  C09A  F07A         	movff	_time,_start_time
  7660                           
  7661                           ;main.c: 110: bottle_count_array[0] = 0;
  7662  00046C  0E00               	movlw	0
  7663  00046E  0100               	movlb	0	; () banked
  7664  000470  6F81               	movwf	(_bottle_count_array+1)& (0+255),b
  7665  000472  0E00               	movlw	0
  7666  000474  6F80               	movwf	_bottle_count_array& (0+255),b
  7667                           
  7668                           ; BSR set to: 0
  7669                           ;main.c: 111: bottle_count_array[1] = 0;
  7670  000476  0E00               	movlw	0
  7671  000478  0100               	movlb	0	; () banked
  7672  00047A  6F83               	movwf	(_bottle_count_array+3)& (0+255),b
  7673  00047C  0E00               	movlw	0
  7674  00047E  6F82               	movwf	(_bottle_count_array+2)& (0+255),b
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;main.c: 112: bottle_count_array[2] = 0;
  7678  000480  0E00               	movlw	0
  7679  000482  0100               	movlb	0	; () banked
  7680  000484  6F85               	movwf	(_bottle_count_array+5)& (0+255),b
  7681  000486  0E00               	movlw	0
  7682  000488  6F84               	movwf	(_bottle_count_array+4)& (0+255),b
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;main.c: 113: bottle_count_array[3] = 0;
  7686  00048A  0E00               	movlw	0
  7687  00048C  0100               	movlb	0	; () banked
  7688  00048E  6F87               	movwf	(_bottle_count_array+7)& (0+255),b
  7689  000490  0E00               	movlw	0
  7690  000492  6F86               	movwf	(_bottle_count_array+6)& (0+255),b
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;main.c: 114: bottle_count_array[4] = 0;
  7694  000494  0E00               	movlw	0
  7695  000496  0100               	movlb	0	; () banked
  7696  000498  6F89               	movwf	(_bottle_count_array+9)& (0+255),b
  7697  00049A  0E00               	movlw	0
  7698  00049C  6F88               	movwf	(_bottle_count_array+8)& (0+255),b
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;main.c: 116: lcdInst(0b00000001);
  7702  00049E  0E01               	movlw	1
  7703  0004A0  EC7A  F018         	call	i2_lcdInst
  7704                           
  7705                           ;main.c: 117: _delay((unsigned long)((100)*(10000000/4000.0)));
  7706  0004A4  0E02               	movlw	2
  7707  0004A6  0100               	movlb	0	; () banked
  7708  0004A8  6FBF               	movwf	(??_isr+1)& (0+255),b
  7709  0004AA  0E45               	movlw	69
  7710  0004AC  0100               	movlb	0	; () banked
  7711  0004AE  6FBE               	movwf	??_isr& (0+255),b
  7712  0004B0  0EA9               	movlw	169
  7713  0004B2                     i2u585_47:
  7714  0004B2  2EE8               	decfsz	wreg,f,c
  7715  0004B4  D7FE               	bra	i2u585_47
  7716  0004B6  2FBE               	decfsz	??_isr& (0+255),f,b
  7717  0004B8  D7FC               	bra	i2u585_47
  7718  0004BA  2FBF               	decfsz	(??_isr+1)& (0+255),f,b
  7719  0004BC  D7FA               	bra	i2u585_47
  7720  0004BE  D000               	nop2	
  7721                           
  7722                           ;main.c: 118: lcdInst(0b10000000);
  7723  0004C0  0E80               	movlw	128
  7724  0004C2  EC7A  F018         	call	i2_lcdInst
  7725                           
  7726                           ;main.c: 119: printf("running");
  7727  0004C6  0EE8               	movlw	low STR_1
  7728  0004C8  6E0D               	movwf	i2printf@f,c
  7729  0004CA  0EFF               	movlw	high STR_1
  7730  0004CC  6E0E               	movwf	i2printf@f+1,c
  7731  0004CE  ECE0  F005         	call	i2_printf	;wreg free
  7732                           
  7733                           ;main.c: 120: bottle_count_disp = -1;
  7734  0004D2  0100               	movlb	0	; () banked
  7735  0004D4  69ED               	setf	_bottle_count_disp& (0+255),b
  7736  0004D6  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;main.c: 121: curr_state = OPERATION;
  7740  0004D8  0E02               	movlw	2
  7741  0004DA  D0B2               	goto	L10
  7742  0004DC                     i2l4856:
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;main.c: 124: bottle_count_disp += 1;
  7746  0004DC  0100               	movlb	0	; () banked
  7747  0004DE  4BED               	infsnz	_bottle_count_disp& (0+255),f,b
  7748  0004E0  2BEE               	incf	(_bottle_count_disp+1)& (0+255),f,b
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;main.c: 125: curr_state = BOTTLECOUNT;
  7752  0004E2  0E05               	movlw	5
  7753  0004E4  0100               	movlb	0	; () banked
  7754  0004E6  6FBD               	movwf	_curr_state& (0+255),b
  7755  0004E8                     i2l4860:
  7756  0004E8  0E1F               	movlw	31
  7757  0004EA  1881               	xorwf	3969,w,c	;volatile
  7758  0004EC  A4D8               	btfss	status,2,c
  7759  0004EE  D0E3               	goto	i2l265
  7760  0004F0  D7FB               	goto	i2l4860
  7761  0004F2                     i2l4862:
  7762                           
  7763                           ;main.c: 129: operation_time = etime - stime;
  7764  0004F2  C07C  F0BE         	movff	_stime,??_isr
  7765  0004F6  C07D  F0BF         	movff	_stime+1,??_isr+1
  7766  0004FA  0100               	movlb	0	; () banked
  7767  0004FC  1FBE               	comf	??_isr& (0+255),f,b
  7768  0004FE  1FBF               	comf	(??_isr+1)& (0+255),f,b
  7769  000500  4BBE               	infsnz	??_isr& (0+255),f,b
  7770  000502  2BBF               	incf	(??_isr+1)& (0+255),f,b
  7771  000504  5078               	movf	_etime,w,c
  7772  000506  0100               	movlb	0	; () banked
  7773  000508  25BE               	addwf	??_isr& (0+255),w,b
  7774  00050A  0100               	movlb	0	; () banked
  7775  00050C  6FB9               	movwf	_operation_time& (0+255),b
  7776  00050E  5079               	movf	_etime+1,w,c
  7777  000510  0100               	movlb	0	; () banked
  7778  000512  21BF               	addwfc	(??_isr+1)& (0+255),w,b
  7779  000514  0100               	movlb	0	; () banked
  7780  000516  6FBA               	movwf	(_operation_time+1)& (0+255),b
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;main.c: 130: bottle_count_disp = -1;
  7784  000518  0100               	movlb	0	; () banked
  7785  00051A  69ED               	setf	_bottle_count_disp& (0+255),b
  7786  00051C  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;main.c: 131: curr_state = BOTTLETIME;
  7790  00051E  0E06               	movlw	6
  7791  000520  D08F               	goto	L10
  7792  000522                     i2l271:
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;main.c: 134: bottle_count_disp = -1;
  7796  000522  0100               	movlb	0	; () banked
  7797  000524  69ED               	setf	_bottle_count_disp& (0+255),b
  7798  000526  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;main.c: 135: curr_state = DATETIME;
  7802  000528  0E04               	movlw	4
  7803  00052A  D08A               	goto	L10
  7804  00052C                     i2l272:
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;main.c: 138: LATAbits.LATA2 = 0;
  7808  00052C  9489               	bcf	3977,2,c	;volatile
  7809                           
  7810                           ;main.c: 139: TMR0IE = 0;
  7811  00052E  9AF2               	bcf	intcon,5,c	;volatile
  7812                           
  7813                           ;main.c: 140: TMR0ON = 0;
  7814  000530  9ED5               	bcf	4053,7,c	;volatile
  7815                           
  7816                           ; BSR set to: 0
  7817                           ;main.c: 142: read_time();
  7818  000532  EC57  F015         	call	_read_time	;wreg free
  7819                           
  7820                           ;main.c: 143: end_time[1] = time[1];
  7821  000536  C09B  F077         	movff	_time+1,_end_time+1
  7822                           
  7823                           ;main.c: 144: end_time[0] = time[0];
  7824  00053A  C09A  F076         	movff	_time,_end_time
  7825                           
  7826                           ;main.c: 145: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7827  00053E  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  7828  000542  6A64               	clrf	dec_to_hex@num+1,c
  7829  000544  ECD6  F00C         	call	_dec_to_hex	;wreg free
  7830  000548  C063  F074         	movff	?_dec_to_hex,_isr$1377
  7831  00054C  C064  F075         	movff	?_dec_to_hex+1,_isr$1377+1
  7832                           
  7833                           ;main.c: 145: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7834  000550  C074  F001         	movff	_isr$1377,i2___wmul@multiplier
  7835  000554  C075  F002         	movff	_isr$1377+1,i2___wmul@multiplier+1
  7836  000558  0E00               	movlw	0
  7837  00055A  6E04               	movwf	i2___wmul@multiplicand+1,c
  7838  00055C  0E3C               	movlw	60
  7839  00055E  6E03               	movwf	i2___wmul@multiplicand,c
  7840  000560  EC00  F018         	call	i2___wmul	;wreg free
  7841  000564  C001  F0BE         	movff	?i2___wmul,??_isr
  7842  000568  C002  F0BF         	movff	?i2___wmul+1,??_isr+1
  7843  00056C  C07A  F063         	movff	_start_time,dec_to_hex@num
  7844  000570  6A64               	clrf	dec_to_hex@num+1,c
  7845  000572  ECD6  F00C         	call	_dec_to_hex	;wreg free
  7846  000576  5063               	movf	?_dec_to_hex,w,c
  7847  000578  0100               	movlb	0	; () banked
  7848  00057A  25BE               	addwf	??_isr& (0+255),w,b
  7849  00057C  6E7C               	movwf	_stime,c
  7850  00057E  5064               	movf	?_dec_to_hex+1,w,c
  7851  000580  0100               	movlb	0	; () banked
  7852  000582  21BF               	addwfc	(??_isr+1)& (0+255),w,b
  7853  000584  6E7D               	movwf	_stime+1,c
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;main.c: 146: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7857  000586  C077  F063         	movff	_end_time+1,dec_to_hex@num
  7858  00058A  6A64               	clrf	dec_to_hex@num+1,c
  7859  00058C  ECD6  F00C         	call	_dec_to_hex	;wreg free
  7860  000590  C063  F074         	movff	?_dec_to_hex,_isr$1377
  7861  000594  C064  F075         	movff	?_dec_to_hex+1,_isr$1377+1
  7862                           
  7863                           ;main.c: 146: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7864  000598  C074  F001         	movff	_isr$1377,i2___wmul@multiplier
  7865  00059C  C075  F002         	movff	_isr$1377+1,i2___wmul@multiplier+1
  7866  0005A0  0E00               	movlw	0
  7867  0005A2  6E04               	movwf	i2___wmul@multiplicand+1,c
  7868  0005A4  0E3C               	movlw	60
  7869  0005A6  6E03               	movwf	i2___wmul@multiplicand,c
  7870  0005A8  EC00  F018         	call	i2___wmul	;wreg free
  7871  0005AC  C001  F0BE         	movff	?i2___wmul,??_isr
  7872  0005B0  C002  F0BF         	movff	?i2___wmul+1,??_isr+1
  7873  0005B4  C076  F063         	movff	_end_time,dec_to_hex@num
  7874  0005B8  6A64               	clrf	dec_to_hex@num+1,c
  7875  0005BA  ECD6  F00C         	call	_dec_to_hex	;wreg free
  7876  0005BE  5063               	movf	?_dec_to_hex,w,c
  7877  0005C0  0100               	movlb	0	; () banked
  7878  0005C2  25BE               	addwf	??_isr& (0+255),w,b
  7879  0005C4  6E78               	movwf	_etime,c
  7880  0005C6  5064               	movf	?_dec_to_hex+1,w,c
  7881  0005C8  0100               	movlb	0	; () banked
  7882  0005CA  21BF               	addwfc	(??_isr+1)& (0+255),w,b
  7883  0005CC  6E79               	movwf	_etime+1,c
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;main.c: 147: lcdInst(0b00000001);
  7887  0005CE  0E01               	movlw	1
  7888  0005D0  EC7A  F018         	call	i2_lcdInst
  7889                           
  7890                           ;main.c: 148: bottle_count_disp = -1;
  7891  0005D4  0100               	movlb	0	; () banked
  7892  0005D6  69ED               	setf	_bottle_count_disp& (0+255),b
  7893  0005D8  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;main.c: 149: curr_state = OPERATIONEND;
  7897  0005DA  0E03               	movlw	3
  7898  0005DC  D031               	goto	L10
  7899  0005DE                     i2l4890:
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;main.c: 152: read_colorsensor();
  7903  0005DE  EC84  F010         	call	i2_read_colorsensor	;wreg free
  7904                           
  7905                           ;main.c: 153: lcdInst(0b10000000);
  7906  0005E2  0E80               	movlw	128
  7907  0005E4  EC7A  F018         	call	i2_lcdInst
  7908                           
  7909                           ;main.c: 154: printf("C%u R%u                ", color[0], color[1]);
  7910  0005E8  0EB2               	movlw	low STR_2
  7911  0005EA  6E0D               	movwf	i2printf@f,c
  7912  0005EC  0EFE               	movlw	high STR_2
  7913  0005EE  6E0E               	movwf	i2printf@f+1,c
  7914  0005F0  C08A  F00F         	movff	_color,?i2_printf+2
  7915  0005F4  C08B  F010         	movff	_color+1,?i2_printf+3
  7916  0005F8  C08C  F011         	movff	_color+2,?i2_printf+4
  7917  0005FC  C08D  F012         	movff	_color+3,?i2_printf+5
  7918  000600  ECE0  F005         	call	i2_printf	;wreg free
  7919                           
  7920                           ;main.c: 155: lcdInst(0b11000000);
  7921  000604  0EC0               	movlw	192
  7922  000606  EC7A  F018         	call	i2_lcdInst
  7923                           
  7924                           ;main.c: 156: printf("G%u B%u                ", color[2], color[3]);
  7925  00060A  0E9A               	movlw	low STR_3
  7926  00060C  6E0D               	movwf	i2printf@f,c
  7927  00060E  0EFE               	movlw	high STR_3
  7928  000610  6E0E               	movwf	i2printf@f+1,c
  7929  000612  C08E  F00F         	movff	_color+4,?i2_printf+2
  7930  000616  C08F  F010         	movff	_color+5,?i2_printf+3
  7931  00061A  C090  F011         	movff	_color+6,?i2_printf+4
  7932  00061E  C091  F012         	movff	_color+7,?i2_printf+5
  7933  000622  ECE0  F005         	call	i2_printf	;wreg free
  7934                           
  7935                           ;main.c: 157: break;
  7936  000626  D047               	goto	i2l265
  7937  000628                     i2l274:
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;main.c: 159: LATAbits.LATA2 = 0;
  7941  000628  9489               	bcf	3977,2,c	;volatile
  7942                           
  7943                           ;main.c: 160: (INTCONbits.GIE = 0);
  7944  00062A  9EF2               	bcf	intcon,7,c	;volatile
  7945                           
  7946                           ;main.c: 161: TMR0ON = 0;
  7947  00062C  9ED5               	bcf	4053,7,c	;volatile
  7948                           
  7949                           ; BSR set to: 0
  7950                           ;main.c: 162: lcdInst(0b00000001);
  7951  00062E  0E01               	movlw	1
  7952  000630  EC7A  F018         	call	i2_lcdInst
  7953                           
  7954                           ;main.c: 163: curr_state = EMERGENCYSTOP;
  7955  000634  0E01               	movlw	1
  7956  000636  D004               	goto	L10
  7957  000638                     i2l275:
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;main.c: 166: bottle_count_disp = -1;
  7961  000638  0100               	movlb	0	; () banked
  7962  00063A  69ED               	setf	_bottle_count_disp& (0+255),b
  7963  00063C  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;main.c: 167: curr_state = STANDBY;
  7967  00063E  0E00               	movlw	0
  7968  000640                     L10:
  7969  000640  0100               	movlb	0	; () banked
  7970  000642  6FBD               	movwf	_curr_state& (0+255),b
  7971                           
  7972                           ;main.c: 169: break;
  7973  000644  D038               	goto	i2l265
  7974  000646                     i2l4906:
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;main.c: 171: servo_rotate1(8);
  7978  000646  0E00               	movlw	0
  7979  000648  6E02               	movwf	i2servo_rotate1@degree+1,c
  7980  00064A  0E08               	movlw	8
  7981  00064C  6E01               	movwf	i2servo_rotate1@degree,c
  7982  00064E  EC5B  F014         	call	i2_servo_rotate1	;wreg free
  7983                           
  7984                           ;main.c: 172: break;
  7985  000652  D031               	goto	i2l265
  7986  000654                     i2l4908:
  7987                           
  7988                           ;main.c: 174: servo_rotate1(18);
  7989  000654  0E00               	movlw	0
  7990  000656  6E02               	movwf	i2servo_rotate1@degree+1,c
  7991  000658  0E12               	movlw	18
  7992  00065A  6E01               	movwf	i2servo_rotate1@degree,c
  7993  00065C  EC5B  F014         	call	i2_servo_rotate1	;wreg free
  7994                           
  7995                           ;main.c: 176: }
  7996                           
  7997                           ;main.c: 175: break;
  7998  000660  D02A               	goto	i2l265
  7999  000662                     i2l4912:
  8000  000662  3881               	swapf	3969,w,c	;volatile
  8001  000664  0B0F               	andlw	15
  8002  000666  0100               	movlb	0	; () banked
  8003  000668  6FBE               	movwf	??_isr& (0+255),b
  8004  00066A  6BBF               	clrf	(??_isr+1)& (0+255),b
  8005                           
  8006                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8007                           ; Switch size 1, requested type "space"
  8008                           ; Number of cases is 1, Range of values is 0 to 0
  8009                           ; switch strategies available:
  8010                           ; Name         Instructions Cycles
  8011                           ; simple_byte            4     3 (average)
  8012                           ;	Chosen strategy is simple_byte
  8013  00066C  0100               	movlb	0	; () banked
  8014  00066E  51BF               	movf	(??_isr+1)& (0+255),w,b
  8015  000670  0A00               	xorlw	0	; case 0
  8016  000672  A4D8               	btfss	status,2,c
  8017  000674  D020               	goto	i2l265
  8018                           
  8019                           ; BSR set to: 0
  8020                           ; Switch size 1, requested type "space"
  8021                           ; Number of cases is 10, Range of values is 0 to 14
  8022                           ; switch strategies available:
  8023                           ; Name         Instructions Cycles
  8024                           ; simple_byte           31    16 (average)
  8025                           ;	Chosen strategy is simple_byte
  8026  000676  0100               	movlb	0	; () banked
  8027  000678  51BE               	movf	??_isr& (0+255),w,b
  8028  00067A  0A00               	xorlw	0	; case 0
  8029  00067C  B4D8               	btfsc	status,2,c
  8030  00067E  D6E9               	goto	i2l264
  8031  000680  0A01               	xorlw	1	; case 1
  8032  000682  B4D8               	btfsc	status,2,c
  8033  000684  D72B               	goto	i2l4856
  8034  000686  0A03               	xorlw	3	; case 2
  8035  000688  B4D8               	btfsc	status,2,c
  8036  00068A  D733               	goto	i2l4862
  8037  00068C  0A01               	xorlw	1	; case 3
  8038  00068E  B4D8               	btfsc	status,2,c
  8039  000690  D748               	goto	i2l271
  8040  000692  0A07               	xorlw	7	; case 4
  8041  000694  B4D8               	btfsc	status,2,c
  8042  000696  D74A               	goto	i2l272
  8043  000698  0A01               	xorlw	1	; case 5
  8044  00069A  B4D8               	btfsc	status,2,c
  8045  00069C  D7A0               	goto	i2l4890
  8046  00069E  0A02               	xorlw	2	; case 7
  8047  0006A0  B4D8               	btfsc	status,2,c
  8048  0006A2  D7D1               	goto	i2l4906
  8049  0006A4  0A0C               	xorlw	12	; case 11
  8050  0006A6  B4D8               	btfsc	status,2,c
  8051  0006A8  D7D5               	goto	i2l4908
  8052  0006AA  0A07               	xorlw	7	; case 12
  8053  0006AC  B4D8               	btfsc	status,2,c
  8054  0006AE  D7BC               	goto	i2l274
  8055  0006B0  0A02               	xorlw	2	; case 14
  8056  0006B2  B4D8               	btfsc	status,2,c
  8057  0006B4  D7C1               	goto	i2l275
  8058  0006B6                     i2l265:
  8059                           
  8060                           ;main.c: 177: INT1IF = 0;
  8061  0006B6  90F0               	bcf	intcon3,0,c	;volatile
  8062                           
  8063                           ;main.c: 178: }
  8064  0006B8  D07A               	goto	i2l286
  8065  0006BA                     i2l262:
  8066                           
  8067                           ;main.c: 179: else if (TMR0IF){
  8068  0006BA  A4F2               	btfss	intcon,2,c	;volatile
  8069  0006BC  D05E               	goto	i2l4938
  8070                           
  8071                           ;main.c: 180: LATAbits.LATA2 = 0;
  8072  0006BE  9489               	bcf	3977,2,c	;volatile
  8073                           
  8074                           ;main.c: 181: TMR0ON = 0;
  8075  0006C0  9ED5               	bcf	4053,7,c	;volatile
  8076                           
  8077                           ;main.c: 182: read_time();
  8078  0006C2  EC57  F015         	call	_read_time	;wreg free
  8079                           
  8080                           ;main.c: 183: end_time[1] = time[1];
  8081  0006C6  C09B  F077         	movff	_time+1,_end_time+1
  8082                           
  8083                           ;main.c: 184: end_time[0] = time[0];
  8084  0006CA  C09A  F076         	movff	_time,_end_time
  8085                           
  8086                           ;main.c: 185: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  8087  0006CE  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  8088  0006D2  6A64               	clrf	dec_to_hex@num+1,c
  8089  0006D4  ECD6  F00C         	call	_dec_to_hex	;wreg free
  8090  0006D8  C063  F074         	movff	?_dec_to_hex,_isr$1377
  8091  0006DC  C064  F075         	movff	?_dec_to_hex+1,_isr$1377+1
  8092                           
  8093                           ;main.c: 185: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  8094  0006E0  C074  F001         	movff	_isr$1377,i2___wmul@multiplier
  8095  0006E4  C075  F002         	movff	_isr$1377+1,i2___wmul@multiplier+1
  8096  0006E8  0E00               	movlw	0
  8097  0006EA  6E04               	movwf	i2___wmul@multiplicand+1,c
  8098  0006EC  0E3C               	movlw	60
  8099  0006EE  6E03               	movwf	i2___wmul@multiplicand,c
  8100  0006F0  EC00  F018         	call	i2___wmul	;wreg free
  8101  0006F4  C001  F0BE         	movff	?i2___wmul,??_isr
  8102  0006F8  C002  F0BF         	movff	?i2___wmul+1,??_isr+1
  8103  0006FC  C07A  F063         	movff	_start_time,dec_to_hex@num
  8104  000700  6A64               	clrf	dec_to_hex@num+1,c
  8105  000702  ECD6  F00C         	call	_dec_to_hex	;wreg free
  8106  000706  5063               	movf	?_dec_to_hex,w,c
  8107  000708  0100               	movlb	0	; () banked
  8108  00070A  25BE               	addwf	??_isr& (0+255),w,b
  8109  00070C  6E7C               	movwf	_stime,c
  8110  00070E  5064               	movf	?_dec_to_hex+1,w,c
  8111  000710  0100               	movlb	0	; () banked
  8112  000712  21BF               	addwfc	(??_isr+1)& (0+255),w,b
  8113  000714  6E7D               	movwf	_stime+1,c
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;main.c: 186: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  8117  000716  C077  F063         	movff	_end_time+1,dec_to_hex@num
  8118  00071A  6A64               	clrf	dec_to_hex@num+1,c
  8119  00071C  ECD6  F00C         	call	_dec_to_hex	;wreg free
  8120  000720  C063  F074         	movff	?_dec_to_hex,_isr$1377
  8121  000724  C064  F075         	movff	?_dec_to_hex+1,_isr$1377+1
  8122                           
  8123                           ;main.c: 186: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  8124  000728  C074  F001         	movff	_isr$1377,i2___wmul@multiplier
  8125  00072C  C075  F002         	movff	_isr$1377+1,i2___wmul@multiplier+1
  8126  000730  0E00               	movlw	0
  8127  000732  6E04               	movwf	i2___wmul@multiplicand+1,c
  8128  000734  0E3C               	movlw	60
  8129  000736  6E03               	movwf	i2___wmul@multiplicand,c
  8130  000738  EC00  F018         	call	i2___wmul	;wreg free
  8131  00073C  C001  F0BE         	movff	?i2___wmul,??_isr
  8132  000740  C002  F0BF         	movff	?i2___wmul+1,??_isr+1
  8133  000744  C076  F063         	movff	_end_time,dec_to_hex@num
  8134  000748  6A64               	clrf	dec_to_hex@num+1,c
  8135  00074A  ECD6  F00C         	call	_dec_to_hex	;wreg free
  8136  00074E  5063               	movf	?_dec_to_hex,w,c
  8137  000750  0100               	movlb	0	; () banked
  8138  000752  25BE               	addwf	??_isr& (0+255),w,b
  8139  000754  6E78               	movwf	_etime,c
  8140  000756  5064               	movf	?_dec_to_hex+1,w,c
  8141  000758  0100               	movlb	0	; () banked
  8142  00075A  21BF               	addwfc	(??_isr+1)& (0+255),w,b
  8143  00075C  6E79               	movwf	_etime+1,c
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;main.c: 187: curr_state = OPERATIONEND;
  8147  00075E  0E03               	movlw	3
  8148  000760  0100               	movlb	0	; () banked
  8149  000762  6FBD               	movwf	_curr_state& (0+255),b
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;main.c: 188: bottle_count_disp = -1;
  8153  000764  0100               	movlb	0	; () banked
  8154  000766  69ED               	setf	_bottle_count_disp& (0+255),b
  8155  000768  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;main.c: 189: TMR0IF = 0;
  8159  00076A  94F2               	bcf	intcon,2,c	;volatile
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;main.c: 190: printf("debug1");
  8163  00076C  0EF8               	movlw	low STR_4
  8164  00076E  6E0D               	movwf	i2printf@f,c
  8165  000770  0EFF               	movlw	high STR_4
  8166  000772  6E0E               	movwf	i2printf@f+1,c
  8167  000774  ECE0  F005         	call	i2_printf	;wreg free
  8168                           
  8169                           ;main.c: 191: }
  8170  000778  D01A               	goto	i2l286
  8171  00077A                     i2l4938:
  8172                           
  8173                           ;main.c: 194: lcdInst(0b10000000);
  8174  00077A  0E80               	movlw	128
  8175  00077C  EC7A  F018         	call	i2_lcdInst
  8176                           
  8177                           ;main.c: 195: printf("ERR: BAD ISR");
  8178  000780  0EC7               	movlw	low STR_5
  8179  000782  6E0D               	movwf	i2printf@f,c
  8180  000784  0EFF               	movlw	high STR_5
  8181  000786  6E0E               	movwf	i2printf@f+1,c
  8182  000788  ECE0  F005         	call	i2_printf	;wreg free
  8183                           
  8184                           ;main.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  8185  00078C  0E00               	movlw	0
  8186  00078E  6E73               	movwf	isr@i,c
  8187  000790                     i2l4944:
  8188  000790  0E63               	movlw	99
  8189  000792  6473               	cpfsgt	isr@i,c
  8190  000794  D001               	goto	i2l4948
  8191  000796  D7F1               	goto	i2l4938
  8192  000798                     i2l4948:
  8193  000798  0E21               	movlw	33
  8194  00079A  0100               	movlb	0	; () banked
  8195  00079C  6FBE               	movwf	??_isr& (0+255),b
  8196  00079E  0E76               	movlw	118
  8197  0007A0                     i2u586_47:
  8198  0007A0  2EE8               	decfsz	wreg,f,c
  8199  0007A2  D7FE               	bra	i2u586_47
  8200  0007A4  2FBE               	decfsz	??_isr& (0+255),f,b
  8201  0007A6  D7FC               	bra	i2u586_47
  8202  0007A8  F000               	nop	
  8203  0007AA  2A73               	incf	isr@i,f,c
  8204  0007AC  D7F1               	goto	i2l4944
  8205  0007AE                     i2l286:
  8206  0007AE  C0CD  FFF5         	movff	??_isr+15,tablat
  8207  0007B2  C0CC  FFF8         	movff	??_isr+14,tblptru
  8208  0007B6  C0CB  FFF7         	movff	??_isr+13,tblptrh
  8209  0007BA  C0CA  FFF6         	movff	??_isr+12,tblptrl
  8210  0007BE  C0C9  FFF4         	movff	??_isr+11,prodh
  8211  0007C2  C0C8  FFF3         	movff	??_isr+10,prodl
  8212  0007C6  C0C7  FFDA         	movff	??_isr+9,fsr2h
  8213  0007CA  C0C6  FFD9         	movff	??_isr+8,fsr2l
  8214  0007CE  C0C5  FFE2         	movff	??_isr+7,fsr1h
  8215  0007D2  C0C4  FFE1         	movff	??_isr+6,fsr1l
  8216  0007D6  C0C3  FFEA         	movff	??_isr+5,fsr0h
  8217  0007DA  C0C2  FFE9         	movff	??_isr+4,fsr0l
  8218  0007DE  C0C1  FFFB         	movff	??_isr+3,pclatu
  8219  0007E2  C0C0  FFFA         	movff	??_isr+2,pclath
  8220  0007E6  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8221  0007E8  0011               	retfie		f
  8222  0007EA                     __end_of_isr:
  8223                           	opt stack 0
  8224                           pclatu	equ	0xFFB
  8225                           pclath	equ	0xFFA
  8226                           tblptru	equ	0xFF8
  8227                           tblptrh	equ	0xFF7
  8228                           tblptrl	equ	0xFF6
  8229                           tablat	equ	0xFF5
  8230                           prodh	equ	0xFF4
  8231                           prodl	equ	0xFF3
  8232                           intcon	equ	0xFF2
  8233                           intcon2	equ	0xFF1
  8234                           intcon3	equ	0xFF0
  8235                           postinc0	equ	0xFEE
  8236                           fsr0h	equ	0xFEA
  8237                           fsr0l	equ	0xFE9
  8238                           wreg	equ	0xFE8
  8239                           postinc1	equ	0xFE6
  8240                           postdec1	equ	0xFE5
  8241                           fsr1h	equ	0xFE2
  8242                           fsr1l	equ	0xFE1
  8243                           indf2	equ	0xFDF
  8244                           postinc2	equ	0xFDE
  8245                           postdec2	equ	0xFDD
  8246                           fsr2h	equ	0xFDA
  8247                           fsr2l	equ	0xFD9
  8248                           status	equ	0xFD8
  8249                           
  8250 ;; *************** function i2_servo_rotate1 *****************
  8251 ;; Defined at:
  8252 ;;		line 438 in file "main.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;  degree          2    0[COMRAM] int 
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;  servo_rotate    2    8[COMRAM] unsigned int 
  8257 ;;  servo_rotate    2    6[COMRAM] unsigned int 
  8258 ;;  servo_rotate    2    4[COMRAM] int 
  8259 ;; Return value:  Size  Location     Type
  8260 ;;                  1    wreg      void 
  8261 ;; Registers used:
  8262 ;;		wreg, status,2, status,0
  8263 ;; Tracked objects:
  8264 ;;		On entry : 0/0
  8265 ;;		On exit  : 0/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8268 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8269 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8270 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8271 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8272 ;;Total ram usage:       10 bytes
  8273 ;; Hardware stack levels used:    1
  8274 ;; This function calls:
  8275 ;;		Nothing
  8276 ;; This function is called by:
  8277 ;;		_isr
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281                           	psect	text34
  8282  0028B6                     __ptext34:
  8283                           	opt stack 0
  8284  0028B6                     i2_servo_rotate1:
  8285                           	opt stack 25
  8286                           
  8287                           ;main.c: 443: unsigned int i;
  8288                           ;main.c: 444: unsigned int j;
  8289                           ;main.c: 445: int duty = degree;
  8290                           
  8291                           ;incstack = 0
  8292  0028B6  C001  F005         	movff	i2servo_rotate1@degree,i2servo_rotate1@duty
  8293  0028BA  C002  F006         	movff	i2servo_rotate1@degree+1,i2servo_rotate1@duty+1
  8294                           
  8295                           ;main.c: 446: for (i=0; i<10; i++) {
  8296  0028BE  0E00               	movlw	0
  8297  0028C0  6E08               	movwf	i2servo_rotate1@i+1,c
  8298  0028C2  0E00               	movlw	0
  8299  0028C4  6E07               	movwf	i2servo_rotate1@i,c
  8300  0028C6                     i2l4570:
  8301  0028C6  5008               	movf	i2servo_rotate1@i+1,w,c
  8302  0028C8  E137               	bnz	i2l389
  8303  0028CA  0E0A               	movlw	10
  8304  0028CC  5C07               	subwf	i2servo_rotate1@i,w,c
  8305  0028CE  B0D8               	btfsc	status,0,c
  8306  0028D0  0012               	return	
  8307                           
  8308                           ;main.c: 447: LATCbits.LATC1` = 1;
  8309  0028D2  828B               	bsf	3979,1,c	;volatile
  8310                           
  8311                           ;main.c: 448: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8312  0028D4  0E00               	movlw	0
  8313  0028D6  6E0A               	movwf	i2servo_rotate1@j+1,c
  8314  0028D8  0E00               	movlw	0
  8315  0028DA  6E09               	movwf	i2servo_rotate1@j,c
  8316  0028DC  D006               	goto	i2l383
  8317  0028DE                     i2l4576:
  8318  0028DE  0E53               	movlw	83
  8319  0028E0                     i2u587_47:
  8320  0028E0  2EE8               	decfsz	wreg,f,c
  8321  0028E2  D7FE               	bra	i2u587_47
  8322  0028E4  F000               	nop	
  8323  0028E6  4A09               	infsnz	i2servo_rotate1@j,f,c
  8324  0028E8  2A0A               	incf	i2servo_rotate1@j+1,f,c
  8325  0028EA                     i2l383:
  8326  0028EA  5005               	movf	i2servo_rotate1@duty,w,c
  8327  0028EC  5C09               	subwf	i2servo_rotate1@j,w,c
  8328  0028EE  5006               	movf	i2servo_rotate1@duty+1,w,c
  8329  0028F0  580A               	subwfb	i2servo_rotate1@j+1,w,c
  8330  0028F2  A0D8               	btfss	status,0,c
  8331  0028F4  D7F4               	goto	i2l4576
  8332                           
  8333                           ;main.c: 449: LATCbits.LATC1 = 0;
  8334  0028F6  928B               	bcf	3979,1,c	;volatile
  8335                           
  8336                           ;main.c: 450: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8337  0028F8  0E00               	movlw	0
  8338  0028FA  6E0A               	movwf	i2servo_rotate1@j+1,c
  8339  0028FC  0E00               	movlw	0
  8340  0028FE  6E09               	movwf	i2servo_rotate1@j,c
  8341  002900  D006               	goto	i2l386
  8342  002902                     i2l4582:
  8343  002902  0E53               	movlw	83
  8344  002904                     i2u588_47:
  8345  002904  2EE8               	decfsz	wreg,f,c
  8346  002906  D7FE               	bra	i2u588_47
  8347  002908  F000               	nop	
  8348  00290A  4A09               	infsnz	i2servo_rotate1@j,f,c
  8349  00290C  2A0A               	incf	i2servo_rotate1@j+1,f,c
  8350  00290E                     i2l386:
  8351  00290E  C005  F003         	movff	i2servo_rotate1@duty,??i2_servo_rotate1
  8352  002912  C006  F004         	movff	i2servo_rotate1@duty+1,??i2_servo_rotate1+1
  8353  002916  1E03               	comf	??i2_servo_rotate1,f,c
  8354  002918  1E04               	comf	??i2_servo_rotate1+1,f,c
  8355  00291A  4A03               	infsnz	??i2_servo_rotate1,f,c
  8356  00291C  2A04               	incf	??i2_servo_rotate1+1,f,c
  8357  00291E  0EC8               	movlw	200
  8358  002920  2603               	addwf	??i2_servo_rotate1,f,c
  8359  002922  0E00               	movlw	0
  8360  002924  2204               	addwfc	??i2_servo_rotate1+1,f,c
  8361  002926  5003               	movf	??i2_servo_rotate1,w,c
  8362  002928  5C09               	subwf	i2servo_rotate1@j,w,c
  8363  00292A  5004               	movf	??i2_servo_rotate1+1,w,c
  8364  00292C  580A               	subwfb	i2servo_rotate1@j+1,w,c
  8365  00292E  A0D8               	btfss	status,0,c
  8366  002930  D7E8               	goto	i2l4582
  8367  002932  4A07               	infsnz	i2servo_rotate1@i,f,c
  8368  002934  2A08               	incf	i2servo_rotate1@i+1,f,c
  8369  002936  D7C7               	goto	i2l4570
  8370  002938                     i2l389:
  8371  002938  0012               	return		;funcret
  8372  00293A                     __end_ofi2_servo_rotate1:
  8373                           	opt stack 0
  8374                           pclatu	equ	0xFFB
  8375                           pclath	equ	0xFFA
  8376                           tblptru	equ	0xFF8
  8377                           tblptrh	equ	0xFF7
  8378                           tblptrl	equ	0xFF6
  8379                           tablat	equ	0xFF5
  8380                           prodh	equ	0xFF4
  8381                           prodl	equ	0xFF3
  8382                           intcon	equ	0xFF2
  8383                           intcon2	equ	0xFF1
  8384                           intcon3	equ	0xFF0
  8385                           postinc0	equ	0xFEE
  8386                           fsr0h	equ	0xFEA
  8387                           fsr0l	equ	0xFE9
  8388                           wreg	equ	0xFE8
  8389                           postinc1	equ	0xFE6
  8390                           postdec1	equ	0xFE5
  8391                           fsr1h	equ	0xFE2
  8392                           fsr1l	equ	0xFE1
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function i2_read_colorsensor *****************
  8401 ;; Defined at:
  8402 ;;		line 455 in file "main.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  read_colorse    4   11[COMRAM] unsigned char [4]
  8407 ;;  read_colorse    4    7[COMRAM] unsigned char [4]
  8408 ;;  read_colorse    2   15[COMRAM] int 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  1    wreg      void 
  8411 ;; Registers used:
  8412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8421 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8422 ;;Total ram usage:       14 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    2
  8425 ;; This function calls:
  8426 ;;		i2_I2C_Master_Read
  8427 ;;		i2_I2C_Master_Start
  8428 ;;		i2_I2C_Master_Stop
  8429 ;;		i2_I2C_Master_Write
  8430 ;; This function is called by:
  8431 ;;		_isr
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           	psect	text35
  8436  002108                     __ptext35:
  8437                           	opt stack 0
  8438  002108                     i2_read_colorsensor:
  8439                           	opt stack 23
  8440                           
  8441                           ;main.c: 456: unsigned char color_low[4];
  8442                           ;main.c: 457: unsigned char color_high[4];
  8443                           ;main.c: 458: int i;
  8444                           ;main.c: 480: I2C_Master_Start();
  8445                           
  8446                           ;incstack = 0
  8447  002108  EC96  F018         	call	i2_I2C_Master_Start	;wreg free
  8448                           
  8449                           ;main.c: 481: I2C_Master_Write(0b01010011);
  8450  00210C  0E00               	movlw	0
  8451  00210E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8452  002110  0E53               	movlw	83
  8453  002112  6E02               	movwf	i2I2C_Master_Write@d,c
  8454  002114  EC85  F018         	call	i2_I2C_Master_Write	;wreg free
  8455                           
  8456                           ;main.c: 482: for(i=0; i<3; i++){
  8457  002118  0E00               	movlw	0
  8458  00211A  6E11               	movwf	i2read_colorsensor@i+1,c
  8459  00211C  0E00               	movlw	0
  8460  00211E  6E10               	movwf	i2read_colorsensor@i,c
  8461  002120                     i2l4594:
  8462  002120  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  8463  002122  D006               	goto	i2l4598
  8464  002124  5011               	movf	i2read_colorsensor@i+1,w,c
  8465  002126  E11B               	bnz	i2l4604
  8466  002128  0E03               	movlw	3
  8467  00212A  5C10               	subwf	i2read_colorsensor@i,w,c
  8468  00212C  B0D8               	btfsc	status,0,c
  8469  00212E  D017               	goto	i2l4604
  8470  002130                     i2l4598:
  8471                           
  8472                           ;main.c: 483: color_low[i] = I2C_Master_Read(1);
  8473  002130  0E08               	movlw	low i2read_colorsensor@color_low
  8474  002132  2410               	addwf	i2read_colorsensor@i,w,c
  8475  002134  6ED9               	movwf	fsr2l,c
  8476  002136  0E00               	movlw	high i2read_colorsensor@color_low
  8477  002138  2011               	addwfc	i2read_colorsensor@i+1,w,c
  8478  00213A  6EDA               	movwf	fsr2h,c
  8479  00213C  0E01               	movlw	1
  8480  00213E  ECED  F017         	call	i2_I2C_Master_Read
  8481  002142  6EDF               	movwf	indf2,c
  8482                           
  8483                           ;main.c: 484: color_high[i] = I2C_Master_Read(1);
  8484  002144  0E0C               	movlw	low i2read_colorsensor@color_high
  8485  002146  2410               	addwf	i2read_colorsensor@i,w,c
  8486  002148  6ED9               	movwf	fsr2l,c
  8487  00214A  0E00               	movlw	high i2read_colorsensor@color_high
  8488  00214C  2011               	addwfc	i2read_colorsensor@i+1,w,c
  8489  00214E  6EDA               	movwf	fsr2h,c
  8490  002150  0E01               	movlw	1
  8491  002152  ECED  F017         	call	i2_I2C_Master_Read
  8492  002156  6EDF               	movwf	indf2,c
  8493  002158  4A10               	infsnz	i2read_colorsensor@i,f,c
  8494  00215A  2A11               	incf	i2read_colorsensor@i+1,f,c
  8495  00215C  D7E1               	goto	i2l4594
  8496  00215E                     i2l4604:
  8497                           
  8498                           ;main.c: 485: }
  8499                           ;main.c: 486: color_low[3] = I2C_Master_Read(1);
  8500  00215E  0E01               	movlw	1
  8501  002160  ECED  F017         	call	i2_I2C_Master_Read
  8502  002164  6E0B               	movwf	i2read_colorsensor@color_low+3,c
  8503                           
  8504                           ;main.c: 487: color_high[3] = I2C_Master_Read(0);
  8505  002166  0E00               	movlw	0
  8506  002168  ECED  F017         	call	i2_I2C_Master_Read
  8507  00216C  6E0F               	movwf	i2read_colorsensor@color_high+3,c
  8508                           
  8509                           ;main.c: 488: I2C_Master_Stop();
  8510  00216E  EC92  F018         	call	i2_I2C_Master_Stop	;wreg free
  8511                           
  8512                           ;main.c: 489: for(i=0; i<4; i++){
  8513  002172  0E00               	movlw	0
  8514  002174  6E11               	movwf	i2read_colorsensor@i+1,c
  8515  002176  0E00               	movlw	0
  8516  002178  6E10               	movwf	i2read_colorsensor@i,c
  8517  00217A                     i2l4608:
  8518  00217A  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  8519  00217C  D006               	goto	i2l4612
  8520  00217E  5011               	movf	i2read_colorsensor@i+1,w,c
  8521  002180  E12B               	bnz	i2l396
  8522  002182  0E04               	movlw	4
  8523  002184  5C10               	subwf	i2read_colorsensor@i,w,c
  8524  002186  B0D8               	btfsc	status,0,c
  8525  002188  0012               	return	
  8526  00218A                     i2l4612:
  8527                           
  8528                           ;main.c: 490: color[i] = (color_high[i] << 8)|(color_low[i]);
  8529  00218A  0E0C               	movlw	low i2read_colorsensor@color_high
  8530  00218C  2410               	addwf	i2read_colorsensor@i,w,c
  8531  00218E  6ED9               	movwf	fsr2l,c
  8532  002190  0E00               	movlw	high i2read_colorsensor@color_high
  8533  002192  2011               	addwfc	i2read_colorsensor@i+1,w,c
  8534  002194  6EDA               	movwf	fsr2h,c
  8535  002196  50DF               	movf	indf2,w,c
  8536  002198  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  8537  00219A  5004               	movf	??i2_read_colorsensor,w,c
  8538  00219C  6E06               	movwf	(??i2_read_colorsensor+2)& (0+255),c
  8539  00219E  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  8540  0021A0  0E08               	movlw	low i2read_colorsensor@color_low
  8541  0021A2  2410               	addwf	i2read_colorsensor@i,w,c
  8542  0021A4  6ED9               	movwf	fsr2l,c
  8543  0021A6  0E00               	movlw	high i2read_colorsensor@color_low
  8544  0021A8  2011               	addwfc	i2read_colorsensor@i+1,w,c
  8545  0021AA  6EDA               	movwf	fsr2h,c
  8546  0021AC  50DF               	movf	indf2,w,c
  8547  0021AE  6E07               	movwf	(??i2_read_colorsensor+3)& (0+255),c
  8548  0021B0  5007               	movf	??i2_read_colorsensor+3,w,c
  8549  0021B2  1205               	iorwf	??i2_read_colorsensor+1,f,c
  8550  0021B4  0E00               	movlw	0
  8551  0021B6  1206               	iorwf	??i2_read_colorsensor+2,f,c
  8552  0021B8  90D8               	bcf	status,0,c
  8553  0021BA  3410               	rlcf	i2read_colorsensor@i,w,c
  8554  0021BC  6ED9               	movwf	fsr2l,c
  8555  0021BE  3411               	rlcf	i2read_colorsensor@i+1,w,c
  8556  0021C0  6EDA               	movwf	fsr2h,c
  8557  0021C2  0E8A               	movlw	low _color
  8558  0021C4  26D9               	addwf	fsr2l,f,c
  8559  0021C6  0E00               	movlw	high _color
  8560  0021C8  22DA               	addwfc	fsr2h,f,c
  8561  0021CA  C005  FFDE         	movff	??i2_read_colorsensor+1,postinc2
  8562  0021CE  C006  FFDD         	movff	??i2_read_colorsensor+2,postdec2
  8563  0021D2  4A10               	infsnz	i2read_colorsensor@i,f,c
  8564  0021D4  2A11               	incf	i2read_colorsensor@i+1,f,c
  8565  0021D6  D7D1               	goto	i2l4608
  8566  0021D8                     i2l396:
  8567  0021D8  0012               	return		;funcret
  8568  0021DA                     __end_ofi2_read_colorsensor:
  8569                           	opt stack 0
  8570                           pclatu	equ	0xFFB
  8571                           pclath	equ	0xFFA
  8572                           tblptru	equ	0xFF8
  8573                           tblptrh	equ	0xFF7
  8574                           tblptrl	equ	0xFF6
  8575                           tablat	equ	0xFF5
  8576                           prodh	equ	0xFF4
  8577                           prodl	equ	0xFF3
  8578                           intcon	equ	0xFF2
  8579                           intcon2	equ	0xFF1
  8580                           intcon3	equ	0xFF0
  8581                           postinc0	equ	0xFEE
  8582                           fsr0h	equ	0xFEA
  8583                           fsr0l	equ	0xFE9
  8584                           wreg	equ	0xFE8
  8585                           postinc1	equ	0xFE6
  8586                           postdec1	equ	0xFE5
  8587                           fsr1h	equ	0xFE2
  8588                           fsr1l	equ	0xFE1
  8589                           indf2	equ	0xFDF
  8590                           postinc2	equ	0xFDE
  8591                           postdec2	equ	0xFDD
  8592                           fsr2h	equ	0xFDA
  8593                           fsr2l	equ	0xFD9
  8594                           status	equ	0xFD8
  8595                           
  8596 ;; *************** function i2_printf *****************
  8597 ;; Defined at:
  8598 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8601 ;;		 -> STR_21(15), STR_20(16), STR_19(11), STR_18(18), 
  8602 ;;		 -> STR_17(23), STR_16(16), STR_15(17), STR_14(17), 
  8603 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  8604 ;;		 -> STR_9(23), STR_8(23), STR_7(9), STR_6(8), 
  8605 ;;		 -> STR_5(13), STR_4(7), STR_3(24), STR_2(24), 
  8606 ;;		 -> STR_1(8), 
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;  printf          4    0        struct .
  8609 ;;  printf          3    0        PTR const unsigned char 
  8610 ;;  printf          2   29[COMRAM] int 
  8611 ;;  printf          2   26[COMRAM] unsigned int 
  8612 ;;  printf          2   23[COMRAM] PTR void [1]
  8613 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8614 ;;  printf          2    0        unsigned int 
  8615 ;;  printf          1   31[COMRAM] char 
  8616 ;;  printf          1   28[COMRAM] unsigned char 
  8617 ;;  printf          1   25[COMRAM] char 
  8618 ;;  printf          1   22[COMRAM] unsigned char 
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  2   12[COMRAM] int 
  8621 ;; Registers used:
  8622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8628 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8630 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8631 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8632 ;;Total ram usage:       20 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    2
  8635 ;; This function calls:
  8636 ;;		i2___lwdiv
  8637 ;;		i2___lwmod
  8638 ;;		i2___wmul
  8639 ;;		i2_isdigit
  8640 ;;		i2_putch
  8641 ;; This function is called by:
  8642 ;;		_isr
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           	psect	text36
  8647  000BC0                     __ptext36:
  8648                           	opt stack 0
  8649  000BC0                     i2_printf:
  8650                           	opt stack 23
  8651                           
  8652                           ;doprnt.c: 466: va_list ap;
  8653                           ;doprnt.c: 499: signed char c;
  8654                           ;doprnt.c: 501: int width;
  8655                           ;doprnt.c: 506: signed char prec;
  8656                           ;doprnt.c: 508: unsigned char flag;
  8657                           ;doprnt.c: 523: union {
  8658                           ;doprnt.c: 524: unsigned long vd;
  8659                           ;doprnt.c: 525: double integ;
  8660                           ;doprnt.c: 526: } tmpval;
  8661                           ;doprnt.c: 528: unsigned int val;
  8662                           ;doprnt.c: 529: unsigned len;
  8663                           ;doprnt.c: 530: const char * cp;
  8664                           ;doprnt.c: 533: *ap = __va_start();
  8665                           
  8666                           ;incstack = 0
  8667  000BC0  0E0F               	movlw	low (?i2_printf+2)
  8668  000BC2  6E18               	movwf	i2printf@ap,c
  8669  000BC4  0E00               	movlw	high (?i2_printf+2)
  8670  000BC6  6E19               	movwf	i2printf@ap+1,c
  8671                           
  8672                           ;doprnt.c: 536: while(c = *f++) {
  8673  000BC8  D184               	goto	i2l4750
  8674  000BCA                     i2l4620:
  8675                           
  8676                           ;doprnt.c: 538: if(c != '%')
  8677  000BCA  0E25               	movlw	37
  8678  000BCC  1820               	xorwf	i2printf@c,w,c
  8679  000BCE  B4D8               	btfsc	status,2,c
  8680  000BD0  D004               	goto	i2l4624
  8681                           
  8682                           ;doprnt.c: 540: {
  8683                           ;doprnt.c: 541: (putch(c) );
  8684  000BD2  5020               	movf	i2printf@c,w,c
  8685  000BD4  EC74  F018         	call	i2_putch
  8686                           
  8687                           ;doprnt.c: 542: continue;
  8688  000BD8  D17C               	goto	i2l4750
  8689  000BDA                     i2l4624:
  8690                           
  8691                           ;doprnt.c: 543: }
  8692                           ;doprnt.c: 546: width = 0;
  8693  000BDA  0E00               	movlw	0
  8694  000BDC  6E1F               	movwf	i2printf@width+1,c
  8695  000BDE  0E00               	movlw	0
  8696  000BE0  6E1E               	movwf	i2printf@width,c
  8697                           
  8698                           ;doprnt.c: 548: flag = 0;
  8699  000BE2  0E00               	movlw	0
  8700  000BE4  6E1D               	movwf	i2printf@flag,c
  8701                           
  8702                           ;doprnt.c: 551: switch(*f) {
  8703                           
  8704                           ;doprnt.c: 550: for(;;) {
  8705  000BE6  D003               	goto	i2l4630
  8706  000BE8                     i2l4626:
  8707                           
  8708                           ;doprnt.c: 580: flag |= 0x04;
  8709  000BE8  841D               	bsf	i2printf@flag,2,c
  8710                           
  8711                           ;doprnt.c: 581: f++;
  8712  000BEA  4A0D               	infsnz	i2printf@f,f,c
  8713  000BEC  2A0E               	incf	i2printf@f+1,f,c
  8714  000BEE                     i2l4630:
  8715  000BEE  C00D  FFF6         	movff	i2printf@f,tblptrl
  8716  000BF2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8717  000BF6                     	if	0	;tblptru may be non-zero
  8718  000BF6                     	endif
  8719  000BF6                     	if	0	;tblptru may be non-zero
  8720  000BF6                     	endif
  8721  000BF6  0008               	tblrd		*
  8722  000BF8  50F5               	movf	tablat,w,c
  8723                           
  8724                           ; Switch size 1, requested type "space"
  8725                           ; Number of cases is 1, Range of values is 48 to 48
  8726                           ; switch strategies available:
  8727                           ; Name         Instructions Cycles
  8728                           ; simple_byte            4     3 (average)
  8729                           ;	Chosen strategy is simple_byte
  8730  000BFA  0A30               	xorlw	48	; case 48
  8731  000BFC  B4D8               	btfsc	status,2,c
  8732  000BFE  D7F4               	goto	i2l4626
  8733                           
  8734                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8735                           
  8736                           ;doprnt.c: 586: }
  8737                           
  8738                           ;doprnt.c: 585: break;
  8739  000C00  C00D  FFF6         	movff	i2printf@f,tblptrl
  8740  000C04  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8741  000C08                     	if	0	;tblptru may be non-zero
  8742  000C08                     	endif
  8743  000C08                     	if	0	;tblptru may be non-zero
  8744  000C08                     	endif
  8745  000C08  0008               	tblrd		*
  8746  000C0A  50F5               	movf	tablat,w,c
  8747  000C0C  EC36  F018         	call	i2_isdigit
  8748  000C10  A0D8               	btfss	status,0,c
  8749  000C12  D038               	goto	i2l4650
  8750                           
  8751                           ;doprnt.c: 598: width = 0;
  8752  000C14  0E00               	movlw	0
  8753  000C16  6E1F               	movwf	i2printf@width+1,c
  8754  000C18  0E00               	movlw	0
  8755  000C1A  6E1E               	movwf	i2printf@width,c
  8756  000C1C                     i2l4636:
  8757                           
  8758                           ;doprnt.c: 600: width *= 10;
  8759  000C1C  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  8760  000C20  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8761  000C24  0E00               	movlw	0
  8762  000C26  6E04               	movwf	i2___wmul@multiplicand+1,c
  8763  000C28  0E0A               	movlw	10
  8764  000C2A  6E03               	movwf	i2___wmul@multiplicand,c
  8765  000C2C  EC00  F018         	call	i2___wmul	;wreg free
  8766  000C30  C001  F01E         	movff	?i2___wmul,i2printf@width
  8767  000C34  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  8768                           
  8769                           ;doprnt.c: 601: width += *f++ - '0';
  8770  000C38  0ED0               	movlw	208
  8771  000C3A  6E13               	movwf	??i2_printf& (0+255),c
  8772  000C3C  0EFF               	movlw	255
  8773  000C3E  6E14               	movwf	(??i2_printf+1)& (0+255),c
  8774  000C40  C00D  FFF6         	movff	i2printf@f,tblptrl
  8775  000C44  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8776  000C48                     	if	0	;tblptru may be non-zero
  8777  000C48                     	endif
  8778  000C48                     	if	0	;tblptru may be non-zero
  8779  000C48                     	endif
  8780  000C48  0008               	tblrd		*
  8781  000C4A  50F5               	movf	tablat,w,c
  8782  000C4C  6E15               	movwf	(??i2_printf+2)& (0+255),c
  8783  000C4E  6A16               	clrf	(??i2_printf+3)& (0+255),c
  8784  000C50  5013               	movf	??i2_printf,w,c
  8785  000C52  2615               	addwf	??i2_printf+2,f,c
  8786  000C54  5014               	movf	??i2_printf+1,w,c
  8787  000C56  2216               	addwfc	??i2_printf+3,f,c
  8788  000C58  5015               	movf	??i2_printf+2,w,c
  8789  000C5A  261E               	addwf	i2printf@width,f,c
  8790  000C5C  5016               	movf	??i2_printf+3,w,c
  8791  000C5E  221F               	addwfc	i2printf@width+1,f,c
  8792  000C60  4A0D               	infsnz	i2printf@f,f,c
  8793  000C62  2A0E               	incf	i2printf@f+1,f,c
  8794                           
  8795                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8796  000C64  C00D  FFF6         	movff	i2printf@f,tblptrl
  8797  000C68  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8798  000C6C                     	if	0	;tblptru may be non-zero
  8799  000C6C                     	endif
  8800  000C6C                     	if	0	;tblptru may be non-zero
  8801  000C6C                     	endif
  8802  000C6C  0008               	tblrd		*
  8803  000C6E  50F5               	movf	tablat,w,c
  8804  000C70  EC36  F018         	call	i2_isdigit
  8805  000C74  A0D8               	btfss	status,0,c
  8806  000C76  D006               	goto	i2l4650
  8807  000C78  D7D1               	goto	i2l4636
  8808  000C7A                     i2l4644:
  8809                           
  8810                           ;doprnt.c: 721: flag |= 0x80;
  8811  000C7A  8E1D               	bsf	i2printf@flag,7,c
  8812                           
  8813                           ;doprnt.c: 723: break;
  8814  000C7C  D01D               	goto	i2l4652
  8815  000C7E                     i2l4646:
  8816                           
  8817                           ;doprnt.c: 818: flag |= 0xC0;
  8818  000C7E  0EC0               	movlw	192
  8819  000C80  121D               	iorwf	i2printf@flag,f,c
  8820                           
  8821                           ;doprnt.c: 822: }
  8822                           
  8823                           ;doprnt.c: 819: break;
  8824  000C82  D01A               	goto	i2l4652
  8825  000C84                     i2l4650:
  8826  000C84  C00D  FFF6         	movff	i2printf@f,tblptrl
  8827  000C88  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8828  000C8C  4A0D               	infsnz	i2printf@f,f,c
  8829  000C8E  2A0E               	incf	i2printf@f+1,f,c
  8830  000C90                     	if	0	;tblptru may be non-zero
  8831  000C90                     	endif
  8832  000C90                     	if	0	;tblptru may be non-zero
  8833  000C90                     	endif
  8834  000C90  0008               	tblrd		*
  8835  000C92  CFF5 F020          	movff	tablat,i2printf@c
  8836  000C96  5020               	movf	i2printf@c,w,c
  8837                           
  8838                           ; Switch size 1, requested type "space"
  8839                           ; Number of cases is 5, Range of values is 0 to 120
  8840                           ; switch strategies available:
  8841                           ; Name         Instructions Cycles
  8842                           ; simple_byte           16     9 (average)
  8843                           ;	Chosen strategy is simple_byte
  8844  000C98  0A00               	xorlw	0	; case 0
  8845  000C9A  B4D8               	btfsc	status,2,c
  8846  000C9C  0012               	return	
  8847  000C9E  0A64               	xorlw	100	; case 100
  8848  000CA0  B4D8               	btfsc	status,2,c
  8849  000CA2  D00A               	goto	i2l4652
  8850  000CA4  0A0D               	xorlw	13	; case 105
  8851  000CA6  B4D8               	btfsc	status,2,c
  8852  000CA8  D007               	goto	i2l4652
  8853  000CAA  0A1C               	xorlw	28	; case 117
  8854  000CAC  B4D8               	btfsc	status,2,c
  8855  000CAE  D7E7               	goto	i2l4646
  8856  000CB0  0A0D               	xorlw	13	; case 120
  8857  000CB2  B4D8               	btfsc	status,2,c
  8858  000CB4  D7E2               	goto	i2l4644
  8859  000CB6  D10D               	goto	i2l4750
  8860  000CB8                     i2l4652:
  8861                           
  8862                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  8863  000CB8  C01D  F013         	movff	i2printf@flag,??i2_printf
  8864  000CBC  0EC0               	movlw	192
  8865  000CBE  1613               	andwf	??i2_printf,f,c
  8866  000CC0  A4D8               	btfss	status,2,c
  8867  000CC2  D015               	goto	i2l4664
  8868                           
  8869                           ;doprnt.c: 1253: {
  8870                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8871  000CC4  C018  FFD9         	movff	i2printf@ap,fsr2l
  8872  000CC8  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8873  000CCC  CFDE F01B          	movff	postinc2,i2printf@val
  8874  000CD0  CFDD F01C          	movff	postdec2,i2printf@val+1
  8875  000CD4  0E02               	movlw	2
  8876  000CD6  2618               	addwf	i2printf@ap,f,c
  8877  000CD8  0E00               	movlw	0
  8878  000CDA  2219               	addwfc	i2printf@ap+1,f,c
  8879                           
  8880                           ;doprnt.c: 1261: if((int)val < 0) {
  8881  000CDC  AE1C               	btfss	i2printf@val+1,7,c
  8882  000CDE  D044               	goto	i2l4698
  8883                           
  8884                           ;doprnt.c: 1262: flag |= 0x03;
  8885  000CE0  0E03               	movlw	3
  8886  000CE2  121D               	iorwf	i2printf@flag,f,c
  8887                           
  8888                           ;doprnt.c: 1263: val = -val;
  8889  000CE4  6C1B               	negf	i2printf@val,c
  8890  000CE6  1E1C               	comf	i2printf@val+1,f,c
  8891  000CE8  B0D8               	btfsc	status,0,c
  8892  000CEA  2A1C               	incf	i2printf@val+1,f,c
  8893                           
  8894                           ;doprnt.c: 1264: }
  8895                           ;doprnt.c: 1266: }
  8896  000CEC  D03D               	goto	i2l4698
  8897  000CEE                     i2l4664:
  8898                           
  8899                           ;doprnt.c: 1268: else
  8900                           ;doprnt.c: 1273: {
  8901                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8902  000CEE  C018  FFD9         	movff	i2printf@ap,fsr2l
  8903  000CF2  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8904  000CF6  CFDE F01B          	movff	postinc2,i2printf@val
  8905  000CFA  CFDD F01C          	movff	postdec2,i2printf@val+1
  8906  000CFE  0E02               	movlw	2
  8907  000D00  2618               	addwf	i2printf@ap,f,c
  8908  000D02  0E00               	movlw	0
  8909  000D04  2219               	addwfc	i2printf@ap+1,f,c
  8910                           
  8911                           ;doprnt.c: 1287: }
  8912                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  8913  000D06  D030               	goto	i2l4698
  8914  000D08                     i2l4668:
  8915                           
  8916                           ;doprnt.c: 1302: case 0xC0:
  8917                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8918  000D08  0E01               	movlw	1
  8919  000D0A  6E20               	movwf	i2printf@c,c
  8920  000D0C                     i2l4670:
  8921  000D0C  0E05               	movlw	5
  8922  000D0E  1820               	xorwf	i2printf@c,w,c
  8923  000D10  B4D8               	btfsc	status,2,c
  8924  000D12  D035               	goto	i2l4700
  8925                           
  8926                           ;doprnt.c: 1306: if(val < dpowers[c])
  8927  000D14  5020               	movf	i2printf@c,w,c
  8928  000D16  0D02               	mullw	2
  8929  000D18  0E48               	movlw	low _dpowers
  8930  000D1A  24F3               	addwf	prodl,w,c
  8931  000D1C  6EF6               	movwf	tblptrl,c
  8932  000D1E  0EFE               	movlw	high _dpowers
  8933  000D20  20F4               	addwfc	prodh,w,c
  8934  000D22  6EF7               	movwf	tblptrh,c
  8935  000D24                     	if	0	;There are less than 3 active tblptr bytes
  8936  000D24                     	endif
  8937  000D24  0009               	tblrd		*+
  8938  000D26  50F5               	movf	tablat,w,c
  8939  000D28  5C1B               	subwf	i2printf@val,w,c
  8940  000D2A  0009               	tblrd		*+
  8941  000D2C  50F5               	movf	tablat,w,c
  8942  000D2E  581C               	subwfb	i2printf@val+1,w,c
  8943  000D30  A0D8               	btfss	status,0,c
  8944  000D32  D025               	goto	i2l4700
  8945                           
  8946                           ;doprnt.c: 1307: break;
  8947  000D34  2A20               	incf	i2printf@c,f,c
  8948  000D36  D7EA               	goto	i2l4670
  8949  000D38                     i2l4682:
  8950                           
  8951                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8952  000D38  0E01               	movlw	1
  8953  000D3A  6E20               	movwf	i2printf@c,c
  8954  000D3C                     i2l4684:
  8955  000D3C  0E04               	movlw	4
  8956  000D3E  1820               	xorwf	i2printf@c,w,c
  8957  000D40  B4D8               	btfsc	status,2,c
  8958  000D42  D01D               	goto	i2l4700
  8959                           
  8960                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8961  000D44  5020               	movf	i2printf@c,w,c
  8962  000D46  0D02               	mullw	2
  8963  000D48  0E52               	movlw	low _hexpowers
  8964  000D4A  24F3               	addwf	prodl,w,c
  8965  000D4C  6EF6               	movwf	tblptrl,c
  8966  000D4E  0EFE               	movlw	high _hexpowers
  8967  000D50  20F4               	addwfc	prodh,w,c
  8968  000D52  6EF7               	movwf	tblptrh,c
  8969  000D54                     	if	0	;There are less than 3 active tblptr bytes
  8970  000D54                     	endif
  8971  000D54  0009               	tblrd		*+
  8972  000D56  50F5               	movf	tablat,w,c
  8973  000D58  5C1B               	subwf	i2printf@val,w,c
  8974  000D5A  0009               	tblrd		*+
  8975  000D5C  50F5               	movf	tablat,w,c
  8976  000D5E  581C               	subwfb	i2printf@val+1,w,c
  8977  000D60  A0D8               	btfss	status,0,c
  8978  000D62  D00D               	goto	i2l4700
  8979                           
  8980                           ;doprnt.c: 1318: break;
  8981  000D64  2A20               	incf	i2printf@c,f,c
  8982  000D66  D7EA               	goto	i2l4684
  8983  000D68                     i2l4698:
  8984  000D68  501D               	movf	i2printf@flag,w,c
  8985  000D6A  0BC0               	andlw	192
  8986                           
  8987                           ; Switch size 1, requested type "space"
  8988                           ; Number of cases is 3, Range of values is 0 to 192
  8989                           ; switch strategies available:
  8990                           ; Name         Instructions Cycles
  8991                           ; simple_byte           10     6 (average)
  8992                           ;	Chosen strategy is simple_byte
  8993  000D6C  0A00               	xorlw	0	; case 0
  8994  000D6E  B4D8               	btfsc	status,2,c
  8995  000D70  D7CB               	goto	i2l4668
  8996  000D72  0A80               	xorlw	128	; case 128
  8997  000D74  B4D8               	btfsc	status,2,c
  8998  000D76  D7E0               	goto	i2l4682
  8999  000D78  0A40               	xorlw	64	; case 192
  9000  000D7A  B4D8               	btfsc	status,2,c
  9001  000D7C  D7C5               	goto	i2l4668
  9002  000D7E                     i2l4700:
  9003                           
  9004                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9005  000D7E  501E               	movf	i2printf@width,w,c
  9006  000D80  101F               	iorwf	i2printf@width+1,w,c
  9007  000D82  B4D8               	btfsc	status,2,c
  9008  000D84  D009               	goto	i2l4706
  9009  000D86  C01D  F013         	movff	i2printf@flag,??i2_printf
  9010  000D8A  0E03               	movlw	3
  9011  000D8C  1613               	andwf	??i2_printf,f,c
  9012  000D8E  B4D8               	btfsc	status,2,c
  9013  000D90  D003               	goto	i2l4706
  9014                           
  9015                           ;doprnt.c: 1346: width--;
  9016  000D92  061E               	decf	i2printf@width,f,c
  9017  000D94  A0D8               	btfss	status,0,c
  9018  000D96  061F               	decf	i2printf@width+1,f,c
  9019  000D98                     i2l4706:
  9020                           
  9021                           ;doprnt.c: 1381: if(width > c)
  9022  000D98  0E80               	movlw	128
  9023  000D9A  BE20               	btfsc	i2printf@c,7,c
  9024  000D9C  0E7F               	movlw	127
  9025  000D9E  6E13               	movwf	??i2_printf& (0+255),c
  9026  000DA0  501E               	movf	i2printf@width,w,c
  9027  000DA2  5C20               	subwf	i2printf@c,w,c
  9028  000DA4  501F               	movf	i2printf@width+1,w,c
  9029  000DA6  0A80               	xorlw	128
  9030  000DA8  5813               	subwfb	??i2_printf& (0+255),w,c
  9031  000DAA  B0D8               	btfsc	status,0,c
  9032  000DAC  D007               	goto	i2l4710
  9033                           
  9034                           ;doprnt.c: 1382: width -= c;
  9035  000DAE  5020               	movf	i2printf@c,w,c
  9036  000DB0  5E1E               	subwf	i2printf@width,f,c
  9037  000DB2  0E00               	movlw	0
  9038  000DB4  BE20               	btfsc	i2printf@c,7,c
  9039  000DB6  0EFF               	movlw	255
  9040  000DB8  5A1F               	subwfb	i2printf@width+1,f,c
  9041  000DBA  D004               	goto	i2l4712
  9042  000DBC                     i2l4710:
  9043                           
  9044                           ;doprnt.c: 1383: else
  9045                           ;doprnt.c: 1384: width = 0;
  9046  000DBC  0E00               	movlw	0
  9047  000DBE  6E1F               	movwf	i2printf@width+1,c
  9048  000DC0  0E00               	movlw	0
  9049  000DC2  6E1E               	movwf	i2printf@width,c
  9050  000DC4                     i2l4712:
  9051                           
  9052                           ;doprnt.c: 1387: if(flag & 0x04) {
  9053  000DC4  A41D               	btfss	i2printf@flag,2,c
  9054  000DC6  D014               	goto	i2l4724
  9055                           
  9056                           ;doprnt.c: 1392: if(flag & 0x03)
  9057  000DC8  C01D  F013         	movff	i2printf@flag,??i2_printf
  9058  000DCC  0E03               	movlw	3
  9059  000DCE  1613               	andwf	??i2_printf,f,c
  9060  000DD0  B4D8               	btfsc	status,2,c
  9061  000DD2  D003               	goto	i2l4718
  9062                           
  9063                           ;doprnt.c: 1393: (putch('-') );
  9064  000DD4  0E2D               	movlw	45
  9065  000DD6  EC74  F018         	call	i2_putch
  9066  000DDA                     i2l4718:
  9067                           
  9068                           ;doprnt.c: 1415: if(width)
  9069  000DDA  501E               	movf	i2printf@width,w,c
  9070  000DDC  101F               	iorwf	i2printf@width+1,w,c
  9071  000DDE  B4D8               	btfsc	status,2,c
  9072  000DE0  D01E               	goto	i2l4734
  9073                           
  9074                           ;doprnt.c: 1417: (putch('0') );
  9075                           
  9076                           ;doprnt.c: 1416: do
  9077  000DE2  0E30               	movlw	48
  9078  000DE4  EC74  F018         	call	i2_putch
  9079                           
  9080                           ;doprnt.c: 1418: while(--width);
  9081  000DE8  061E               	decf	i2printf@width,f,c
  9082  000DEA  A0D8               	btfss	status,0,c
  9083  000DEC  061F               	decf	i2printf@width+1,f,c
  9084  000DEE  D7F5               	goto	i2l4718
  9085  000DF0                     i2l4724:
  9086                           
  9087                           ;doprnt.c: 1422: {
  9088                           ;doprnt.c: 1424: if(width
  9089                           ;doprnt.c: 1428: )
  9090  000DF0  501E               	movf	i2printf@width,w,c
  9091  000DF2  101F               	iorwf	i2printf@width+1,w,c
  9092  000DF4  B4D8               	btfsc	status,2,c
  9093  000DF6  D00A               	goto	i2l4730
  9094  000DF8                     i2l4726:
  9095                           
  9096                           ;doprnt.c: 1430: (putch(' ') );
  9097  000DF8  0E20               	movlw	32
  9098  000DFA  EC74  F018         	call	i2_putch
  9099                           
  9100                           ;doprnt.c: 1431: while(--width);
  9101  000DFE  061E               	decf	i2printf@width,f,c
  9102  000E00  A0D8               	btfss	status,0,c
  9103  000E02  061F               	decf	i2printf@width+1,f,c
  9104  000E04  501E               	movf	i2printf@width,w,c
  9105  000E06  101F               	iorwf	i2printf@width+1,w,c
  9106  000E08  A4D8               	btfss	status,2,c
  9107  000E0A  D7F6               	goto	i2l4726
  9108  000E0C                     i2l4730:
  9109                           
  9110                           ;doprnt.c: 1438: if(flag & 0x03)
  9111  000E0C  C01D  F013         	movff	i2printf@flag,??i2_printf
  9112  000E10  0E03               	movlw	3
  9113  000E12  1613               	andwf	??i2_printf,f,c
  9114  000E14  B4D8               	btfsc	status,2,c
  9115  000E16  D003               	goto	i2l4734
  9116                           
  9117                           ;doprnt.c: 1439: (putch('-') );
  9118  000E18  0E2D               	movlw	45
  9119  000E1A  EC74  F018         	call	i2_putch
  9120  000E1E                     i2l4734:
  9121                           
  9122                           ;doprnt.c: 1469: }
  9123                           ;doprnt.c: 1472: prec = c;
  9124  000E1E  C020  F01A         	movff	i2printf@c,i2printf@prec
  9125                           
  9126                           ;doprnt.c: 1474: while(prec--) {
  9127  000E22  D053               	goto	i2l4748
  9128  000E24                     i2l4736:
  9129                           
  9130                           ;doprnt.c: 1486: case 0xC0:
  9131                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9132  000E24  501A               	movf	i2printf@prec,w,c
  9133  000E26  0D02               	mullw	2
  9134  000E28  0E48               	movlw	low _dpowers
  9135  000E2A  24F3               	addwf	prodl,w,c
  9136  000E2C  6EF6               	movwf	tblptrl,c
  9137  000E2E  0EFE               	movlw	high _dpowers
  9138  000E30  20F4               	addwfc	prodh,w,c
  9139  000E32  6EF7               	movwf	tblptrh,c
  9140  000E34                     	if	0	;There are less than 3 active tblptr bytes
  9141  000E34                     	endif
  9142  000E34  0009               	tblrd		*+
  9143  000E36  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9144  000E3A  000A               	tblrd		*-
  9145  000E3C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9146  000E40  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9147  000E44  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9148  000E48  EC75  F016         	call	i2___lwdiv	;wreg free
  9149  000E4C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  9150  000E50  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  9151  000E54  0E00               	movlw	0
  9152  000E56  6E0B               	movwf	i2___lwmod@divisor+1,c
  9153  000E58  0E0A               	movlw	10
  9154  000E5A  6E0A               	movwf	i2___lwmod@divisor,c
  9155  000E5C  EC0F  F017         	call	i2___lwmod	;wreg free
  9156  000E60  5008               	movf	?i2___lwmod,w,c
  9157  000E62  0F30               	addlw	48
  9158  000E64  6E20               	movwf	i2printf@c,c
  9159                           
  9160                           ;doprnt.c: 1491: break;
  9161  000E66  D02E               	goto	i2l4746
  9162  000E68                     i2l4738:
  9163                           
  9164                           ;doprnt.c: 1499: {
  9165                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9166  000E68  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9167  000E6C  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9168  000E70  501A               	movf	i2printf@prec,w,c
  9169  000E72  0D02               	mullw	2
  9170  000E74  0E52               	movlw	low _hexpowers
  9171  000E76  24F3               	addwf	prodl,w,c
  9172  000E78  6EF6               	movwf	tblptrl,c
  9173  000E7A  0EFE               	movlw	high _hexpowers
  9174  000E7C  20F4               	addwfc	prodh,w,c
  9175  000E7E  6EF7               	movwf	tblptrh,c
  9176  000E80                     	if	0	;There are less than 3 active tblptr bytes
  9177  000E80                     	endif
  9178  000E80  0009               	tblrd		*+
  9179  000E82  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9180  000E86  000A               	tblrd		*-
  9181  000E88  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9182  000E8C  EC75  F016         	call	i2___lwdiv	;wreg free
  9183  000E90  5001               	movf	?i2___lwdiv,w,c
  9184  000E92  0B0F               	andlw	15
  9185  000E94  6E17               	movwf	i2printf@idx,c
  9186                           
  9187                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9188  000E96  5017               	movf	i2printf@idx,w,c
  9189  000E98  0D01               	mullw	1
  9190  000E9A  0E21               	movlw	low STR_22
  9191  000E9C  24F3               	addwf	prodl,w,c
  9192  000E9E  6EF6               	movwf	tblptrl,c
  9193  000EA0  0EFF               	movlw	high STR_22
  9194  000EA2  20F4               	addwfc	prodh,w,c
  9195  000EA4  6EF7               	movwf	tblptrh,c
  9196  000EA6                     	if	0	;There are less than 3 active tblptr bytes
  9197  000EA6                     	endif
  9198  000EA6  0008               	tblrd		*
  9199  000EA8  CFF5 F020          	movff	tablat,i2printf@c
  9200                           
  9201                           ;doprnt.c: 1523: }
  9202                           
  9203                           ;doprnt.c: 1508: }
  9204                           ;doprnt.c: 1510: break;
  9205  000EAC  D00B               	goto	i2l4746
  9206  000EAE                     i2l4744:
  9207  000EAE  501D               	movf	i2printf@flag,w,c
  9208  000EB0  0BC0               	andlw	192
  9209                           
  9210                           ; Switch size 1, requested type "space"
  9211                           ; Number of cases is 3, Range of values is 0 to 192
  9212                           ; switch strategies available:
  9213                           ; Name         Instructions Cycles
  9214                           ; simple_byte           10     6 (average)
  9215                           ;	Chosen strategy is simple_byte
  9216  000EB2  0A00               	xorlw	0	; case 0
  9217  000EB4  B4D8               	btfsc	status,2,c
  9218  000EB6  D7B6               	goto	i2l4736
  9219  000EB8  0A80               	xorlw	128	; case 128
  9220  000EBA  B4D8               	btfsc	status,2,c
  9221  000EBC  D7D5               	goto	i2l4738
  9222  000EBE  0A40               	xorlw	64	; case 192
  9223  000EC0  B4D8               	btfsc	status,2,c
  9224  000EC2  D7B0               	goto	i2l4736
  9225  000EC4                     i2l4746:
  9226                           
  9227                           ;doprnt.c: 1524: (putch(c) );
  9228  000EC4  5020               	movf	i2printf@c,w,c
  9229  000EC6  EC74  F018         	call	i2_putch
  9230  000ECA                     i2l4748:
  9231  000ECA  061A               	decf	i2printf@prec,f,c
  9232  000ECC  281A               	incf	i2printf@prec,w,c
  9233  000ECE  A4D8               	btfss	status,2,c
  9234  000ED0  D7EE               	goto	i2l4744
  9235  000ED2                     i2l4750:
  9236  000ED2  C00D  FFF6         	movff	i2printf@f,tblptrl
  9237  000ED6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9238  000EDA  4A0D               	infsnz	i2printf@f,f,c
  9239  000EDC  2A0E               	incf	i2printf@f+1,f,c
  9240  000EDE                     	if	0	;tblptru may be non-zero
  9241  000EDE                     	endif
  9242  000EDE                     	if	0	;tblptru may be non-zero
  9243  000EDE                     	endif
  9244  000EDE  0008               	tblrd		*
  9245  000EE0  CFF5 F020          	movff	tablat,i2printf@c
  9246  000EE4  5020               	movf	i2printf@c,w,c
  9247  000EE6  B4D8               	btfsc	status,2,c
  9248  000EE8  0012               	return	
  9249  000EEA  D66F               	goto	i2l4620
  9250  000EEC                     __end_ofi2_printf:
  9251                           	opt stack 0
  9252                           pclatu	equ	0xFFB
  9253                           pclath	equ	0xFFA
  9254                           tblptru	equ	0xFF8
  9255                           tblptrh	equ	0xFF7
  9256                           tblptrl	equ	0xFF6
  9257                           tablat	equ	0xFF5
  9258                           prodh	equ	0xFF4
  9259                           prodl	equ	0xFF3
  9260                           intcon	equ	0xFF2
  9261                           intcon2	equ	0xFF1
  9262                           intcon3	equ	0xFF0
  9263                           postinc0	equ	0xFEE
  9264                           fsr0h	equ	0xFEA
  9265                           fsr0l	equ	0xFE9
  9266                           wreg	equ	0xFE8
  9267                           postinc1	equ	0xFE6
  9268                           postdec1	equ	0xFE5
  9269                           fsr1h	equ	0xFE2
  9270                           fsr1l	equ	0xFE1
  9271                           indf2	equ	0xFDF
  9272                           postinc2	equ	0xFDE
  9273                           postdec2	equ	0xFDD
  9274                           fsr2h	equ	0xFDA
  9275                           fsr2l	equ	0xFD9
  9276                           status	equ	0xFD8
  9277                           
  9278 ;; *************** function i2_putch *****************
  9279 ;; Defined at:
  9280 ;;		line 31 in file "lcd.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  data            1    wreg     unsigned char 
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  data            1    2[COMRAM] unsigned char 
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  1    wreg      void 
  9287 ;; Registers used:
  9288 ;;		wreg, status,2, status,0, cstack
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;Total ram usage:        1 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    1
  9301 ;; This function calls:
  9302 ;;		i2_lcdNibble
  9303 ;; This function is called by:
  9304 ;;		i2_printf
  9305 ;; This function uses a non-reentrant model
  9306 ;;
  9307                           
  9308                           	psect	text37
  9309  0030E8                     __ptext37:
  9310                           	opt stack 0
  9311  0030E8                     i2_putch:
  9312                           	opt stack 23
  9313                           
  9314                           ;incstack = 0
  9315                           ;i2putch@data stored from wreg
  9316  0030E8  6E03               	movwf	i2putch@data,c
  9317                           
  9318                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  9319  0030EA  848C               	bsf	3980,2,c	;volatile
  9320                           
  9321                           ;lcd.c: 33: lcdNibble(data);
  9322  0030EC  5003               	movf	i2putch@data,w,c
  9323  0030EE  ECC6  F016         	call	i2_lcdNibble
  9324  0030F2  0012               	return		;funcret
  9325  0030F4                     __end_ofi2_putch:
  9326                           	opt stack 0
  9327                           pclatu	equ	0xFFB
  9328                           pclath	equ	0xFFA
  9329                           tblptru	equ	0xFF8
  9330                           tblptrh	equ	0xFF7
  9331                           tblptrl	equ	0xFF6
  9332                           tablat	equ	0xFF5
  9333                           prodh	equ	0xFF4
  9334                           prodl	equ	0xFF3
  9335                           intcon	equ	0xFF2
  9336                           intcon2	equ	0xFF1
  9337                           intcon3	equ	0xFF0
  9338                           postinc0	equ	0xFEE
  9339                           fsr0h	equ	0xFEA
  9340                           fsr0l	equ	0xFE9
  9341                           wreg	equ	0xFE8
  9342                           postinc1	equ	0xFE6
  9343                           postdec1	equ	0xFE5
  9344                           fsr1h	equ	0xFE2
  9345                           fsr1l	equ	0xFE1
  9346                           indf2	equ	0xFDF
  9347                           postinc2	equ	0xFDE
  9348                           postdec2	equ	0xFDD
  9349                           fsr2h	equ	0xFDA
  9350                           fsr2l	equ	0xFD9
  9351                           status	equ	0xFD8
  9352                           
  9353 ;; *************** function i2_isdigit *****************
  9354 ;; Defined at:
  9355 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;  c               1    wreg     unsigned char 
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;  c               1    2[COMRAM] unsigned char 
  9360 ;; Return value:  Size  Location     Type
  9361 ;;		None               void
  9362 ;; Registers used:
  9363 ;;		wreg, status,2, status,0
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9370 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9371 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9372 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;Total ram usage:        3 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; This function calls:
  9376 ;;		Nothing
  9377 ;; This function is called by:
  9378 ;;		i2_printf
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           	psect	text38
  9383  00306C                     __ptext38:
  9384                           	opt stack 0
  9385  00306C                     i2_isdigit:
  9386                           	opt stack 24
  9387                           
  9388                           ;incstack = 0
  9389                           ;i2isdigit@c stored from wreg
  9390  00306C  6E03               	movwf	i2isdigit@c,c
  9391  00306E  0E00               	movlw	0
  9392  003070  6E02               	movwf	i2_isdigit$806,c
  9393  003072  0E3A               	movlw	58
  9394  003074  6003               	cpfslt	i2isdigit@c,c
  9395  003076  D005               	goto	i2l4224
  9396  003078  0E2F               	movlw	47
  9397  00307A  6403               	cpfsgt	i2isdigit@c,c
  9398  00307C  D002               	goto	i2l4224
  9399  00307E  0E01               	movlw	1
  9400  003080  6E02               	movwf	i2_isdigit$806,c
  9401  003082                     i2l4224:
  9402  003082  C002  F001         	movff	i2_isdigit$806,??i2_isdigit
  9403  003086  3001               	rrcf	??i2_isdigit,w,c
  9404  003088  0012               	return	
  9405  00308A                     __end_ofi2_isdigit:
  9406                           	opt stack 0
  9407                           pclatu	equ	0xFFB
  9408                           pclath	equ	0xFFA
  9409                           tblptru	equ	0xFF8
  9410                           tblptrh	equ	0xFF7
  9411                           tblptrl	equ	0xFF6
  9412                           tablat	equ	0xFF5
  9413                           prodh	equ	0xFF4
  9414                           prodl	equ	0xFF3
  9415                           intcon	equ	0xFF2
  9416                           intcon2	equ	0xFF1
  9417                           intcon3	equ	0xFF0
  9418                           postinc0	equ	0xFEE
  9419                           fsr0h	equ	0xFEA
  9420                           fsr0l	equ	0xFE9
  9421                           wreg	equ	0xFE8
  9422                           postinc1	equ	0xFE6
  9423                           postdec1	equ	0xFE5
  9424                           fsr1h	equ	0xFE2
  9425                           fsr1l	equ	0xFE1
  9426                           indf2	equ	0xFDF
  9427                           postinc2	equ	0xFDE
  9428                           postdec2	equ	0xFDD
  9429                           fsr2h	equ	0xFDA
  9430                           fsr2l	equ	0xFD9
  9431                           status	equ	0xFD8
  9432                           
  9433 ;; *************** function i2___lwmod *****************
  9434 ;; Defined at:
  9435 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;  dividend        2    7[COMRAM] unsigned int 
  9438 ;;  divisor         2    9[COMRAM] unsigned int 
  9439 ;; Auto vars:     Size  Location     Type
  9440 ;;  __lwmod         1   11[COMRAM] unsigned char 
  9441 ;; Return value:  Size  Location     Type
  9442 ;;                  2    7[COMRAM] unsigned int 
  9443 ;; Registers used:
  9444 ;;		wreg, status,2, status,0
  9445 ;; Tracked objects:
  9446 ;;		On entry : 0/0
  9447 ;;		On exit  : 0/0
  9448 ;;		Unchanged: 0/0
  9449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9450 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9451 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9453 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9454 ;;Total ram usage:        5 bytes
  9455 ;; Hardware stack levels used:    1
  9456 ;; This function calls:
  9457 ;;		Nothing
  9458 ;; This function is called by:
  9459 ;;		i2_printf
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           	psect	text39
  9464  002E1E                     __ptext39:
  9465                           	opt stack 0
  9466  002E1E                     i2___lwmod:
  9467                           	opt stack 24
  9468                           
  9469                           ;incstack = 0
  9470  002E1E  500A               	movf	i2___lwmod@divisor,w,c
  9471  002E20  100B               	iorwf	i2___lwmod@divisor+1,w,c
  9472  002E22  B4D8               	btfsc	status,2,c
  9473  002E24  D018               	goto	i2l886
  9474  002E26  0E01               	movlw	1
  9475  002E28  6E0C               	movwf	i2___lwmod@counter,c
  9476  002E2A  D004               	goto	i2l4256
  9477  002E2C                     i2l4254:
  9478  002E2C  90D8               	bcf	status,0,c
  9479  002E2E  360A               	rlcf	i2___lwmod@divisor,f,c
  9480  002E30  360B               	rlcf	i2___lwmod@divisor+1,f,c
  9481  002E32  2A0C               	incf	i2___lwmod@counter,f,c
  9482  002E34                     i2l4256:
  9483  002E34  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  9484  002E36  D7FA               	goto	i2l4254
  9485  002E38                     i2l4258:
  9486  002E38  500A               	movf	i2___lwmod@divisor,w,c
  9487  002E3A  5C08               	subwf	i2___lwmod@dividend,w,c
  9488  002E3C  500B               	movf	i2___lwmod@divisor+1,w,c
  9489  002E3E  5809               	subwfb	i2___lwmod@dividend+1,w,c
  9490  002E40  A0D8               	btfss	status,0,c
  9491  002E42  D004               	goto	i2l4262
  9492  002E44  500A               	movf	i2___lwmod@divisor,w,c
  9493  002E46  5E08               	subwf	i2___lwmod@dividend,f,c
  9494  002E48  500B               	movf	i2___lwmod@divisor+1,w,c
  9495  002E4A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  9496  002E4C                     i2l4262:
  9497  002E4C  90D8               	bcf	status,0,c
  9498  002E4E  320B               	rrcf	i2___lwmod@divisor+1,f,c
  9499  002E50  320A               	rrcf	i2___lwmod@divisor,f,c
  9500  002E52  2E0C               	decfsz	i2___lwmod@counter,f,c
  9501  002E54  D7F1               	goto	i2l4258
  9502  002E56                     i2l886:
  9503  002E56  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  9504  002E5A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  9505  002E5E  0012               	return		;funcret
  9506  002E60                     __end_ofi2___lwmod:
  9507                           	opt stack 0
  9508                           pclatu	equ	0xFFB
  9509                           pclath	equ	0xFFA
  9510                           tblptru	equ	0xFF8
  9511                           tblptrh	equ	0xFF7
  9512                           tblptrl	equ	0xFF6
  9513                           tablat	equ	0xFF5
  9514                           prodh	equ	0xFF4
  9515                           prodl	equ	0xFF3
  9516                           intcon	equ	0xFF2
  9517                           intcon2	equ	0xFF1
  9518                           intcon3	equ	0xFF0
  9519                           postinc0	equ	0xFEE
  9520                           fsr0h	equ	0xFEA
  9521                           fsr0l	equ	0xFE9
  9522                           wreg	equ	0xFE8
  9523                           postinc1	equ	0xFE6
  9524                           postdec1	equ	0xFE5
  9525                           fsr1h	equ	0xFE2
  9526                           fsr1l	equ	0xFE1
  9527                           indf2	equ	0xFDF
  9528                           postinc2	equ	0xFDE
  9529                           postdec2	equ	0xFDD
  9530                           fsr2h	equ	0xFDA
  9531                           fsr2l	equ	0xFD9
  9532                           status	equ	0xFD8
  9533                           
  9534 ;; *************** function i2___lwdiv *****************
  9535 ;; Defined at:
  9536 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  dividend        2    0[COMRAM] unsigned int 
  9539 ;;  divisor         2    2[COMRAM] unsigned int 
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9542 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9543 ;; Return value:  Size  Location     Type
  9544 ;;                  2    0[COMRAM] unsigned int 
  9545 ;; Registers used:
  9546 ;;		wreg, status,2, status,0
  9547 ;; Tracked objects:
  9548 ;;		On entry : 0/0
  9549 ;;		On exit  : 0/0
  9550 ;;		Unchanged: 0/0
  9551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9552 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9553 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;Total ram usage:        7 bytes
  9557 ;; Hardware stack levels used:    1
  9558 ;; This function calls:
  9559 ;;		Nothing
  9560 ;; This function is called by:
  9561 ;;		i2_printf
  9562 ;; This function uses a non-reentrant model
  9563 ;;
  9564                           
  9565                           	psect	text40
  9566  002CEA                     __ptext40:
  9567                           	opt stack 0
  9568  002CEA                     i2___lwdiv:
  9569                           	opt stack 24
  9570                           
  9571                           ;incstack = 0
  9572  002CEA  0E00               	movlw	0
  9573  002CEC  6E06               	movwf	i2___lwdiv@quotient+1,c
  9574  002CEE  0E00               	movlw	0
  9575  002CF0  6E05               	movwf	i2___lwdiv@quotient,c
  9576  002CF2  5003               	movf	i2___lwdiv@divisor,w,c
  9577  002CF4  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9578  002CF6  B4D8               	btfsc	status,2,c
  9579  002CF8  D01C               	goto	i2l876
  9580  002CFA  0E01               	movlw	1
  9581  002CFC  6E07               	movwf	i2___lwdiv@counter,c
  9582  002CFE  D004               	goto	i2l4236
  9583  002D00                     i2l4234:
  9584  002D00  90D8               	bcf	status,0,c
  9585  002D02  3603               	rlcf	i2___lwdiv@divisor,f,c
  9586  002D04  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9587  002D06  2A07               	incf	i2___lwdiv@counter,f,c
  9588  002D08                     i2l4236:
  9589  002D08  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9590  002D0A  D7FA               	goto	i2l4234
  9591  002D0C                     i2l4238:
  9592  002D0C  90D8               	bcf	status,0,c
  9593  002D0E  3605               	rlcf	i2___lwdiv@quotient,f,c
  9594  002D10  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9595  002D12  5003               	movf	i2___lwdiv@divisor,w,c
  9596  002D14  5C01               	subwf	i2___lwdiv@dividend,w,c
  9597  002D16  5004               	movf	i2___lwdiv@divisor+1,w,c
  9598  002D18  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9599  002D1A  A0D8               	btfss	status,0,c
  9600  002D1C  D005               	goto	i2l4246
  9601  002D1E  5003               	movf	i2___lwdiv@divisor,w,c
  9602  002D20  5E01               	subwf	i2___lwdiv@dividend,f,c
  9603  002D22  5004               	movf	i2___lwdiv@divisor+1,w,c
  9604  002D24  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9605  002D26  8005               	bsf	i2___lwdiv@quotient,0,c
  9606  002D28                     i2l4246:
  9607  002D28  90D8               	bcf	status,0,c
  9608  002D2A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9609  002D2C  3203               	rrcf	i2___lwdiv@divisor,f,c
  9610  002D2E  2E07               	decfsz	i2___lwdiv@counter,f,c
  9611  002D30  D7ED               	goto	i2l4238
  9612  002D32                     i2l876:
  9613  002D32  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9614  002D36  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9615  002D3A  0012               	return		;funcret
  9616  002D3C                     __end_ofi2___lwdiv:
  9617                           	opt stack 0
  9618                           pclatu	equ	0xFFB
  9619                           pclath	equ	0xFFA
  9620                           tblptru	equ	0xFF8
  9621                           tblptrh	equ	0xFF7
  9622                           tblptrl	equ	0xFF6
  9623                           tablat	equ	0xFF5
  9624                           prodh	equ	0xFF4
  9625                           prodl	equ	0xFF3
  9626                           intcon	equ	0xFF2
  9627                           intcon2	equ	0xFF1
  9628                           intcon3	equ	0xFF0
  9629                           postinc0	equ	0xFEE
  9630                           fsr0h	equ	0xFEA
  9631                           fsr0l	equ	0xFE9
  9632                           wreg	equ	0xFE8
  9633                           postinc1	equ	0xFE6
  9634                           postdec1	equ	0xFE5
  9635                           fsr1h	equ	0xFE2
  9636                           fsr1l	equ	0xFE1
  9637                           indf2	equ	0xFDF
  9638                           postinc2	equ	0xFDE
  9639                           postdec2	equ	0xFDD
  9640                           fsr2h	equ	0xFDA
  9641                           fsr2l	equ	0xFD9
  9642                           status	equ	0xFD8
  9643                           
  9644 ;; *************** function i2_lcdInst *****************
  9645 ;; Defined at:
  9646 ;;		line 26 in file "lcd.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;  data            1    wreg     unsigned char 
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;  data            1    2[COMRAM] unsigned char 
  9651 ;; Return value:  Size  Location     Type
  9652 ;;                  1    wreg      void 
  9653 ;; Registers used:
  9654 ;;		wreg, status,2, status,0, cstack
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9661 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;Total ram usage:        1 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:    1
  9667 ;; This function calls:
  9668 ;;		i2_lcdNibble
  9669 ;; This function is called by:
  9670 ;;		_isr
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           	psect	text41
  9675  0030F4                     __ptext41:
  9676                           	opt stack 0
  9677  0030F4                     i2_lcdInst:
  9678                           	opt stack 24
  9679                           
  9680                           ;incstack = 0
  9681                           ;i2lcdInst@data stored from wreg
  9682  0030F4  6E03               	movwf	i2lcdInst@data,c
  9683                           
  9684                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  9685  0030F6  948C               	bcf	3980,2,c	;volatile
  9686                           
  9687                           ;lcd.c: 28: lcdNibble(data);
  9688  0030F8  5003               	movf	i2lcdInst@data,w,c
  9689  0030FA  ECC6  F016         	call	i2_lcdNibble
  9690  0030FE  0012               	return		;funcret
  9691  003100                     __end_ofi2_lcdInst:
  9692                           	opt stack 0
  9693                           pclatu	equ	0xFFB
  9694                           pclath	equ	0xFFA
  9695                           tblptru	equ	0xFF8
  9696                           tblptrh	equ	0xFF7
  9697                           tblptrl	equ	0xFF6
  9698                           tablat	equ	0xFF5
  9699                           prodh	equ	0xFF4
  9700                           prodl	equ	0xFF3
  9701                           intcon	equ	0xFF2
  9702                           intcon2	equ	0xFF1
  9703                           intcon3	equ	0xFF0
  9704                           postinc0	equ	0xFEE
  9705                           fsr0h	equ	0xFEA
  9706                           fsr0l	equ	0xFE9
  9707                           wreg	equ	0xFE8
  9708                           postinc1	equ	0xFE6
  9709                           postdec1	equ	0xFE5
  9710                           fsr1h	equ	0xFE2
  9711                           fsr1l	equ	0xFE1
  9712                           indf2	equ	0xFDF
  9713                           postinc2	equ	0xFDE
  9714                           postdec2	equ	0xFDD
  9715                           fsr2h	equ	0xFDA
  9716                           fsr2l	equ	0xFD9
  9717                           status	equ	0xFD8
  9718                           
  9719 ;; *************** function i2_lcdNibble *****************
  9720 ;; Defined at:
  9721 ;;		line 36 in file "lcd.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;  data            1    wreg     unsigned char 
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;  data            1    1[COMRAM] unsigned char 
  9726 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9727 ;; Return value:  Size  Location     Type
  9728 ;;                  1    wreg      void 
  9729 ;; Registers used:
  9730 ;;		wreg, status,2, status,0
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;Total ram usage:        2 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; This function calls:
  9743 ;;		Nothing
  9744 ;; This function is called by:
  9745 ;;		i2_lcdInst
  9746 ;;		i2_putch
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           	psect	text42
  9751  002D8C                     __ptext42:
  9752                           	opt stack 0
  9753  002D8C                     i2_lcdNibble:
  9754                           	opt stack 23
  9755                           
  9756                           ;incstack = 0
  9757                           ;i2lcdNibble@data stored from wreg
  9758  002D8C  6E02               	movwf	i2lcdNibble@data,c
  9759                           
  9760                           ;lcd.c: 38: char temp = data & 0xF0;
  9761  002D8E  5002               	movf	i2lcdNibble@data,w,c
  9762  002D90  0BF0               	andlw	240
  9763  002D92  6E01               	movwf	i2lcdNibble@temp,c
  9764                           
  9765                           ;lcd.c: 39: LATD = LATD & 0x0F;
  9766  002D94  508C               	movf	3980,w,c	;volatile
  9767  002D96  0B0F               	andlw	15
  9768  002D98  6E8C               	movwf	3980,c	;volatile
  9769                           
  9770                           ;lcd.c: 40: LATD = temp | LATD;
  9771  002D9A  5001               	movf	i2lcdNibble@temp,w,c
  9772  002D9C  108C               	iorwf	3980,w,c	;volatile
  9773  002D9E  6E8C               	movwf	3980,c	;volatile
  9774                           
  9775                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  9776  002DA0  968C               	bcf	3980,3,c	;volatile
  9777                           
  9778                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9779  002DA2  0E19               	movlw	25
  9780  002DA4                     i2u589_47:
  9781  002DA4  2EE8               	decfsz	wreg,f,c
  9782  002DA6  D7FE               	bra	i2u589_47
  9783                           
  9784                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  9785  002DA8  868C               	bsf	3980,3,c	;volatile
  9786                           
  9787                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9788  002DAA  0E19               	movlw	25
  9789  002DAC                     i2u590_47:
  9790  002DAC  2EE8               	decfsz	wreg,f,c
  9791  002DAE  D7FE               	bra	i2u590_47
  9792                           
  9793                           ;lcd.c: 47: data = data << 4;
  9794  002DB0  3802               	swapf	i2lcdNibble@data,w,c
  9795  002DB2  0BF0               	andlw	240
  9796  002DB4  6E02               	movwf	i2lcdNibble@data,c
  9797                           
  9798                           ;lcd.c: 49: temp = data & 0xF0;
  9799  002DB6  5002               	movf	i2lcdNibble@data,w,c
  9800  002DB8  0BF0               	andlw	240
  9801  002DBA  6E01               	movwf	i2lcdNibble@temp,c
  9802                           
  9803                           ;lcd.c: 50: LATD = LATD & 0x0F;
  9804  002DBC  508C               	movf	3980,w,c	;volatile
  9805  002DBE  0B0F               	andlw	15
  9806  002DC0  6E8C               	movwf	3980,c	;volatile
  9807                           
  9808                           ;lcd.c: 51: LATD = temp | LATD;
  9809  002DC2  5001               	movf	i2lcdNibble@temp,w,c
  9810  002DC4  108C               	iorwf	3980,w,c	;volatile
  9811  002DC6  6E8C               	movwf	3980,c	;volatile
  9812                           
  9813                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  9814  002DC8  968C               	bcf	3980,3,c	;volatile
  9815                           
  9816                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9817  002DCA  0E19               	movlw	25
  9818  002DCC                     i2u591_47:
  9819  002DCC  2EE8               	decfsz	wreg,f,c
  9820  002DCE  D7FE               	bra	i2u591_47
  9821                           
  9822                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  9823  002DD0  868C               	bsf	3980,3,c	;volatile
  9824                           
  9825                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9826  002DD2  0E19               	movlw	25
  9827  002DD4                     i2u592_47:
  9828  002DD4  2EE8               	decfsz	wreg,f,c
  9829  002DD6  D7FE               	bra	i2u592_47
  9830  002DD8  0012               	return		;funcret
  9831  002DDA                     __end_ofi2_lcdNibble:
  9832                           	opt stack 0
  9833                           pclatu	equ	0xFFB
  9834                           pclath	equ	0xFFA
  9835                           tblptru	equ	0xFF8
  9836                           tblptrh	equ	0xFF7
  9837                           tblptrl	equ	0xFF6
  9838                           tablat	equ	0xFF5
  9839                           prodh	equ	0xFF4
  9840                           prodl	equ	0xFF3
  9841                           intcon	equ	0xFF2
  9842                           intcon2	equ	0xFF1
  9843                           intcon3	equ	0xFF0
  9844                           postinc0	equ	0xFEE
  9845                           fsr0h	equ	0xFEA
  9846                           fsr0l	equ	0xFE9
  9847                           wreg	equ	0xFE8
  9848                           postinc1	equ	0xFE6
  9849                           postdec1	equ	0xFE5
  9850                           fsr1h	equ	0xFE2
  9851                           fsr1l	equ	0xFE1
  9852                           indf2	equ	0xFDF
  9853                           postinc2	equ	0xFDE
  9854                           postdec2	equ	0xFDD
  9855                           fsr2h	equ	0xFDA
  9856                           fsr2l	equ	0xFD9
  9857                           status	equ	0xFD8
  9858                           
  9859 ;; *************** function _read_time *****************
  9860 ;; Defined at:
  9861 ;;		line 260 in file "main.c"
  9862 ;; Parameters:    Size  Location     Type
  9863 ;;		None
  9864 ;; Auto vars:     Size  Location     Type
  9865 ;;  i               1    3[COMRAM] unsigned char 
  9866 ;; Return value:  Size  Location     Type
  9867 ;;                  1    wreg      void 
  9868 ;; Registers used:
  9869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9870 ;; Tracked objects:
  9871 ;;		On entry : 0/0
  9872 ;;		On exit  : 0/0
  9873 ;;		Unchanged: 0/0
  9874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;Total ram usage:        1 bytes
  9880 ;; Hardware stack levels used:    1
  9881 ;; Hardware stack levels required when called:    2
  9882 ;; This function calls:
  9883 ;;		i2_I2C_Master_Read
  9884 ;;		i2_I2C_Master_Start
  9885 ;;		i2_I2C_Master_Stop
  9886 ;;		i2_I2C_Master_Write
  9887 ;; This function is called by:
  9888 ;;		_isr
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           	psect	text43
  9893  002AAE                     __ptext43:
  9894                           	opt stack 0
  9895  002AAE                     _read_time:
  9896                           	opt stack 23
  9897                           
  9898                           ;main.c: 262: I2C_Master_Start();
  9899                           
  9900                           ;incstack = 0
  9901  002AAE  EC96  F018         	call	i2_I2C_Master_Start	;wreg free
  9902                           
  9903                           ;main.c: 263: I2C_Master_Write(0b11010000);
  9904  002AB2  0E00               	movlw	0
  9905  002AB4  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9906  002AB6  0ED0               	movlw	208
  9907  002AB8  6E02               	movwf	i2I2C_Master_Write@d,c
  9908  002ABA  EC85  F018         	call	i2_I2C_Master_Write	;wreg free
  9909                           
  9910                           ;main.c: 264: I2C_Master_Write(0x00);
  9911  002ABE  0E00               	movlw	0
  9912  002AC0  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9913  002AC2  0E00               	movlw	0
  9914  002AC4  6E02               	movwf	i2I2C_Master_Write@d,c
  9915  002AC6  EC85  F018         	call	i2_I2C_Master_Write	;wreg free
  9916                           
  9917                           ;main.c: 265: I2C_Master_Stop();
  9918  002ACA  EC92  F018         	call	i2_I2C_Master_Stop	;wreg free
  9919                           
  9920                           ;main.c: 268: I2C_Master_Start();
  9921  002ACE  EC96  F018         	call	i2_I2C_Master_Start	;wreg free
  9922                           
  9923                           ;main.c: 269: I2C_Master_Write(0b11010001);
  9924  002AD2  0E00               	movlw	0
  9925  002AD4  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9926  002AD6  0ED1               	movlw	209
  9927  002AD8  6E02               	movwf	i2I2C_Master_Write@d,c
  9928  002ADA  EC85  F018         	call	i2_I2C_Master_Write	;wreg free
  9929                           
  9930                           ;main.c: 270: for(unsigned char i=0;i<0x06;i++){
  9931  002ADE  0E00               	movlw	0
  9932  002AE0  6E04               	movwf	read_time@i,c
  9933  002AE2                     i2l4530:
  9934  002AE2  0E05               	movlw	5
  9935  002AE4  6404               	cpfsgt	read_time@i,c
  9936  002AE6  D001               	goto	i2l4534
  9937  002AE8  D00E               	goto	i2l4540
  9938  002AEA                     i2l4534:
  9939                           
  9940                           ;main.c: 271: time[i] = I2C_Master_Read(1);
  9941  002AEA  5004               	movf	read_time@i,w,c
  9942  002AEC  0D01               	mullw	1
  9943  002AEE  0E9A               	movlw	low _time
  9944  002AF0  24F3               	addwf	prodl,w,c
  9945  002AF2  6ED9               	movwf	fsr2l,c
  9946  002AF4  0E00               	movlw	high _time
  9947  002AF6  20F4               	addwfc	prodh,w,c
  9948  002AF8  6EDA               	movwf	fsr2h,c
  9949  002AFA  0E01               	movlw	1
  9950  002AFC  ECED  F017         	call	i2_I2C_Master_Read
  9951  002B00  6EDF               	movwf	indf2,c
  9952  002B02  2A04               	incf	read_time@i,f,c
  9953  002B04  D7EE               	goto	i2l4530
  9954  002B06                     i2l4540:
  9955                           
  9956                           ;main.c: 272: }
  9957                           ;main.c: 273: time[6] = I2C_Master_Read(0);
  9958  002B06  0E00               	movlw	0
  9959  002B08  ECED  F017         	call	i2_I2C_Master_Read
  9960  002B0C  0100               	movlb	0	; () banked
  9961  002B0E  6FA0               	movwf	(_time+6)& (0+255),b
  9962                           
  9963                           ;main.c: 274: I2C_Master_Stop();
  9964  002B10  EC92  F018         	call	i2_I2C_Master_Stop	;wreg free
  9965  002B14  0012               	return	
  9966  002B16                     __end_of_read_time:
  9967                           	opt stack 0
  9968                           pclatu	equ	0xFFB
  9969                           pclath	equ	0xFFA
  9970                           tblptru	equ	0xFF8
  9971                           tblptrh	equ	0xFF7
  9972                           tblptrl	equ	0xFF6
  9973                           tablat	equ	0xFF5
  9974                           prodh	equ	0xFF4
  9975                           prodl	equ	0xFF3
  9976                           intcon	equ	0xFF2
  9977                           intcon2	equ	0xFF1
  9978                           intcon3	equ	0xFF0
  9979                           postinc0	equ	0xFEE
  9980                           fsr0h	equ	0xFEA
  9981                           fsr0l	equ	0xFE9
  9982                           wreg	equ	0xFE8
  9983                           postinc1	equ	0xFE6
  9984                           postdec1	equ	0xFE5
  9985                           fsr1h	equ	0xFE2
  9986                           fsr1l	equ	0xFE1
  9987                           indf2	equ	0xFDF
  9988                           postinc2	equ	0xFDE
  9989                           postdec2	equ	0xFDD
  9990                           fsr2h	equ	0xFDA
  9991                           fsr2l	equ	0xFD9
  9992                           status	equ	0xFD8
  9993                           
  9994 ;; *************** function i2_I2C_Master_Write *****************
  9995 ;; Defined at:
  9996 ;;		line 48 in file "I2C.c"
  9997 ;; Parameters:    Size  Location     Type
  9998 ;;  d               2    1[COMRAM] unsigned int 
  9999 ;; Auto vars:     Size  Location     Type
 10000 ;;		None
 10001 ;; Return value:  Size  Location     Type
 10002 ;;                  1    wreg      void 
 10003 ;; Registers used:
 10004 ;;		wreg, status,2, status,0, cstack
 10005 ;; Tracked objects:
 10006 ;;		On entry : 0/0
 10007 ;;		On exit  : 0/0
 10008 ;;		Unchanged: 0/0
 10009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10010 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10014 ;;Total ram usage:        2 bytes
 10015 ;; Hardware stack levels used:    1
 10016 ;; Hardware stack levels required when called:    1
 10017 ;; This function calls:
 10018 ;;		i2_I2C_Master_Wait
 10019 ;; This function is called by:
 10020 ;;		_read_time
 10021 ;;		i2_read_colorsensor
 10022 ;; This function uses a non-reentrant model
 10023 ;;
 10024                           
 10025                           	psect	text44
 10026  00310A                     __ptext44:
 10027                           	opt stack 0
 10028  00310A                     i2_I2C_Master_Write:
 10029                           	opt stack 23
 10030                           
 10031                           ;I2C.c: 50: I2C_Master_Wait();
 10032                           
 10033                           ;incstack = 0
 10034  00310A  EC5B  F018         	call	i2_I2C_Master_Wait	;wreg free
 10035                           
 10036                           ;I2C.c: 51: SSPBUF = d;
 10037  00310E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 10038  003112  0012               	return		;funcret
 10039  003114                     __end_ofi2_I2C_Master_Write:
 10040                           	opt stack 0
 10041                           pclatu	equ	0xFFB
 10042                           pclath	equ	0xFFA
 10043                           tblptru	equ	0xFF8
 10044                           tblptrh	equ	0xFF7
 10045                           tblptrl	equ	0xFF6
 10046                           tablat	equ	0xFF5
 10047                           prodh	equ	0xFF4
 10048                           prodl	equ	0xFF3
 10049                           intcon	equ	0xFF2
 10050                           intcon2	equ	0xFF1
 10051                           intcon3	equ	0xFF0
 10052                           postinc0	equ	0xFEE
 10053                           fsr0h	equ	0xFEA
 10054                           fsr0l	equ	0xFE9
 10055                           wreg	equ	0xFE8
 10056                           postinc1	equ	0xFE6
 10057                           postdec1	equ	0xFE5
 10058                           fsr1h	equ	0xFE2
 10059                           fsr1l	equ	0xFE1
 10060                           indf2	equ	0xFDF
 10061                           postinc2	equ	0xFDE
 10062                           postdec2	equ	0xFDD
 10063                           fsr2h	equ	0xFDA
 10064                           fsr2l	equ	0xFD9
 10065                           status	equ	0xFD8
 10066                           
 10067 ;; *************** function i2_I2C_Master_Stop *****************
 10068 ;; Defined at:
 10069 ;;		line 42 in file "I2C.c"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;		None
 10072 ;; Auto vars:     Size  Location     Type
 10073 ;;		None
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  1    wreg      void 
 10076 ;; Registers used:
 10077 ;;		wreg, status,2, status,0, cstack
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10087 ;;Total ram usage:        0 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    1
 10090 ;; This function calls:
 10091 ;;		i2_I2C_Master_Wait
 10092 ;; This function is called by:
 10093 ;;		_read_time
 10094 ;;		i2_read_colorsensor
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           	psect	text45
 10099  003124                     __ptext45:
 10100                           	opt stack 0
 10101  003124                     i2_I2C_Master_Stop:
 10102                           	opt stack 23
 10103                           
 10104                           ;I2C.c: 44: I2C_Master_Wait();
 10105                           
 10106                           ;incstack = 0
 10107  003124  EC5B  F018         	call	i2_I2C_Master_Wait	;wreg free
 10108                           
 10109                           ;I2C.c: 45: PEN = 1;
 10110  003128  84C5               	bsf	4037,2,c	;volatile
 10111  00312A  0012               	return		;funcret
 10112  00312C                     __end_ofi2_I2C_Master_Stop:
 10113                           	opt stack 0
 10114                           pclatu	equ	0xFFB
 10115                           pclath	equ	0xFFA
 10116                           tblptru	equ	0xFF8
 10117                           tblptrh	equ	0xFF7
 10118                           tblptrl	equ	0xFF6
 10119                           tablat	equ	0xFF5
 10120                           prodh	equ	0xFF4
 10121                           prodl	equ	0xFF3
 10122                           intcon	equ	0xFF2
 10123                           intcon2	equ	0xFF1
 10124                           intcon3	equ	0xFF0
 10125                           postinc0	equ	0xFEE
 10126                           fsr0h	equ	0xFEA
 10127                           fsr0l	equ	0xFE9
 10128                           wreg	equ	0xFE8
 10129                           postinc1	equ	0xFE6
 10130                           postdec1	equ	0xFE5
 10131                           fsr1h	equ	0xFE2
 10132                           fsr1l	equ	0xFE1
 10133                           indf2	equ	0xFDF
 10134                           postinc2	equ	0xFDE
 10135                           postdec2	equ	0xFDD
 10136                           fsr2h	equ	0xFDA
 10137                           fsr2l	equ	0xFD9
 10138                           status	equ	0xFD8
 10139                           
 10140 ;; *************** function i2_I2C_Master_Start *****************
 10141 ;; Defined at:
 10142 ;;		line 30 in file "I2C.c"
 10143 ;; Parameters:    Size  Location     Type
 10144 ;;		None
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;		None
 10147 ;; Return value:  Size  Location     Type
 10148 ;;                  1    wreg      void 
 10149 ;; Registers used:
 10150 ;;		wreg, status,2, status,0, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10160 ;;Total ram usage:        0 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    1
 10163 ;; This function calls:
 10164 ;;		i2_I2C_Master_Wait
 10165 ;; This function is called by:
 10166 ;;		_read_time
 10167 ;;		i2_read_colorsensor
 10168 ;; This function uses a non-reentrant model
 10169 ;;
 10170                           
 10171                           	psect	text46
 10172  00312C                     __ptext46:
 10173                           	opt stack 0
 10174  00312C                     i2_I2C_Master_Start:
 10175                           	opt stack 23
 10176                           
 10177                           ;I2C.c: 32: I2C_Master_Wait();
 10178                           
 10179                           ;incstack = 0
 10180  00312C  EC5B  F018         	call	i2_I2C_Master_Wait	;wreg free
 10181                           
 10182                           ;I2C.c: 33: SEN = 1;
 10183  003130  80C5               	bsf	4037,0,c	;volatile
 10184  003132  0012               	return		;funcret
 10185  003134                     __end_ofi2_I2C_Master_Start:
 10186                           	opt stack 0
 10187                           pclatu	equ	0xFFB
 10188                           pclath	equ	0xFFA
 10189                           tblptru	equ	0xFF8
 10190                           tblptrh	equ	0xFF7
 10191                           tblptrl	equ	0xFF6
 10192                           tablat	equ	0xFF5
 10193                           prodh	equ	0xFF4
 10194                           prodl	equ	0xFF3
 10195                           intcon	equ	0xFF2
 10196                           intcon2	equ	0xFF1
 10197                           intcon3	equ	0xFF0
 10198                           postinc0	equ	0xFEE
 10199                           fsr0h	equ	0xFEA
 10200                           fsr0l	equ	0xFE9
 10201                           wreg	equ	0xFE8
 10202                           postinc1	equ	0xFE6
 10203                           postdec1	equ	0xFE5
 10204                           fsr1h	equ	0xFE2
 10205                           fsr1l	equ	0xFE1
 10206                           indf2	equ	0xFDF
 10207                           postinc2	equ	0xFDE
 10208                           postdec2	equ	0xFDD
 10209                           fsr2h	equ	0xFDA
 10210                           fsr2l	equ	0xFD9
 10211                           status	equ	0xFD8
 10212                           
 10213 ;; *************** function i2_I2C_Master_Read *****************
 10214 ;; Defined at:
 10215 ;;		line 105 in file "I2C.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;  a               1    wreg     unsigned char 
 10218 ;; Auto vars:     Size  Location     Type
 10219 ;;  a               1    1[COMRAM] unsigned char 
 10220 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 10221 ;; Return value:  Size  Location     Type
 10222 ;;                  1    wreg      unsigned char 
 10223 ;; Registers used:
 10224 ;;		wreg, status,2, status,0, cstack
 10225 ;; Tracked objects:
 10226 ;;		On entry : 0/0
 10227 ;;		On exit  : 0/0
 10228 ;;		Unchanged: 0/0
 10229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;Total ram usage:        2 bytes
 10235 ;; Hardware stack levels used:    1
 10236 ;; Hardware stack levels required when called:    1
 10237 ;; This function calls:
 10238 ;;		i2_I2C_Master_Wait
 10239 ;; This function is called by:
 10240 ;;		_read_time
 10241 ;;		i2_read_colorsensor
 10242 ;; This function uses a non-reentrant model
 10243 ;;
 10244                           
 10245                           	psect	text47
 10246  002FDA                     __ptext47:
 10247                           	opt stack 0
 10248  002FDA                     i2_I2C_Master_Read:
 10249                           	opt stack 23
 10250                           
 10251                           ;incstack = 0
 10252                           ;i2I2C_Master_Read@a stored from wreg
 10253  002FDA  6E02               	movwf	i2I2C_Master_Read@a,c
 10254                           
 10255                           ;I2C.c: 107: unsigned char temp;
 10256                           ;I2C.c: 108: I2C_Master_Wait();
 10257  002FDC  EC5B  F018         	call	i2_I2C_Master_Wait	;wreg free
 10258                           
 10259                           ;I2C.c: 109: RCEN = 1;
 10260  002FE0  86C5               	bsf	4037,3,c	;volatile
 10261                           
 10262                           ;I2C.c: 110: I2C_Master_Wait();
 10263  002FE2  EC5B  F018         	call	i2_I2C_Master_Wait	;wreg free
 10264                           
 10265                           ;I2C.c: 111: temp = SSPBUF;
 10266  002FE6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 10267                           
 10268                           ;I2C.c: 112: I2C_Master_Wait();
 10269  002FEA  EC5B  F018         	call	i2_I2C_Master_Wait	;wreg free
 10270                           
 10271                           ;I2C.c: 113: ACKDT = (a)?0:1;
 10272  002FEE  5002               	movf	i2I2C_Master_Read@a,w,c
 10273  002FF0  A4D8               	btfss	status,2,c
 10274  002FF2  D002               	goto	i2u409_40
 10275  002FF4  8AC5               	bsf	4037,5,c	;volatile
 10276  002FF6  D001               	goto	i2l4206
 10277  002FF8                     i2u409_40:
 10278  002FF8  9AC5               	bcf	4037,5,c	;volatile
 10279  002FFA                     i2l4206:
 10280                           
 10281                           ;I2C.c: 114: ACKEN = 1;
 10282  002FFA  88C5               	bsf	4037,4,c	;volatile
 10283                           
 10284                           ;I2C.c: 115: return temp;
 10285  002FFC  5003               	movf	i2I2C_Master_Read@temp,w,c
 10286  002FFE  0012               	return	
 10287  003000                     __end_ofi2_I2C_Master_Read:
 10288                           	opt stack 0
 10289                           pclatu	equ	0xFFB
 10290                           pclath	equ	0xFFA
 10291                           tblptru	equ	0xFF8
 10292                           tblptrh	equ	0xFF7
 10293                           tblptrl	equ	0xFF6
 10294                           tablat	equ	0xFF5
 10295                           prodh	equ	0xFF4
 10296                           prodl	equ	0xFF3
 10297                           intcon	equ	0xFF2
 10298                           intcon2	equ	0xFF1
 10299                           intcon3	equ	0xFF0
 10300                           postinc0	equ	0xFEE
 10301                           fsr0h	equ	0xFEA
 10302                           fsr0l	equ	0xFE9
 10303                           wreg	equ	0xFE8
 10304                           postinc1	equ	0xFE6
 10305                           postdec1	equ	0xFE5
 10306                           fsr1h	equ	0xFE2
 10307                           fsr1l	equ	0xFE1
 10308                           indf2	equ	0xFDF
 10309                           postinc2	equ	0xFDE
 10310                           postdec2	equ	0xFDD
 10311                           fsr2h	equ	0xFDA
 10312                           fsr2l	equ	0xFD9
 10313                           status	equ	0xFD8
 10314                           
 10315 ;; *************** function i2_I2C_Master_Wait *****************
 10316 ;; Defined at:
 10317 ;;		line 25 in file "I2C.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;		None
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;		None
 10322 ;; Return value:  Size  Location     Type
 10323 ;;                  1    wreg      void 
 10324 ;; Registers used:
 10325 ;;		wreg, status,2, status,0
 10326 ;; Tracked objects:
 10327 ;;		On entry : 0/0
 10328 ;;		On exit  : 0/0
 10329 ;;		Unchanged: 0/0
 10330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10333 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10334 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10335 ;;Total ram usage:        1 bytes
 10336 ;; Hardware stack levels used:    1
 10337 ;; This function calls:
 10338 ;;		Nothing
 10339 ;; This function is called by:
 10340 ;;		i2_I2C_Master_Start
 10341 ;;		i2_I2C_Master_Stop
 10342 ;;		i2_I2C_Master_Write
 10343 ;;		i2_I2C_Master_Read
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           	psect	text48
 10348  0030B6                     __ptext48:
 10349                           	opt stack 0
 10350  0030B6                     i2_I2C_Master_Wait:
 10351                           	opt stack 23
 10352  0030B6                     i2l34:
 10353  0030B6  B4C7               	btfsc	4039,2,c	;volatile
 10354  0030B8  D7FE               	goto	i2l34
 10355  0030BA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 10356  0030BE  0E1F               	movlw	31
 10357  0030C0  1601               	andwf	??i2_I2C_Master_Wait,f,c
 10358  0030C2  B4D8               	btfsc	status,2,c
 10359  0030C4  0012               	return	
 10360  0030C6  D7F7               	goto	i2l34
 10361  0030C8                     __end_ofi2_I2C_Master_Wait:
 10362                           	opt stack 0
 10363                           pclatu	equ	0xFFB
 10364                           pclath	equ	0xFFA
 10365                           tblptru	equ	0xFF8
 10366                           tblptrh	equ	0xFF7
 10367                           tblptrl	equ	0xFF6
 10368                           tablat	equ	0xFF5
 10369                           prodh	equ	0xFF4
 10370                           prodl	equ	0xFF3
 10371                           intcon	equ	0xFF2
 10372                           intcon2	equ	0xFF1
 10373                           intcon3	equ	0xFF0
 10374                           postinc0	equ	0xFEE
 10375                           fsr0h	equ	0xFEA
 10376                           fsr0l	equ	0xFE9
 10377                           wreg	equ	0xFE8
 10378                           postinc1	equ	0xFE6
 10379                           postdec1	equ	0xFE5
 10380                           fsr1h	equ	0xFE2
 10381                           fsr1l	equ	0xFE1
 10382                           indf2	equ	0xFDF
 10383                           postinc2	equ	0xFDE
 10384                           postdec2	equ	0xFDD
 10385                           fsr2h	equ	0xFDA
 10386                           fsr2l	equ	0xFD9
 10387                           status	equ	0xFD8
 10388                           
 10389 ;; *************** function _dec_to_hex *****************
 10390 ;; Defined at:
 10391 ;;		line 222 in file "main.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;  num             2   98[COMRAM] int 
 10394 ;; Auto vars:     Size  Location     Type
 10395 ;;  quotient        2  112[COMRAM] int 
 10396 ;;  hexnum          2  110[COMRAM] int 
 10397 ;;  i               2  108[COMRAM] int 
 10398 ;;  temp            2  106[COMRAM] int 
 10399 ;; Return value:  Size  Location     Type
 10400 ;;                  2   98[COMRAM] int 
 10401 ;; Registers used:
 10402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10403 ;; Tracked objects:
 10404 ;;		On entry : 0/0
 10405 ;;		On exit  : 0/0
 10406 ;;		Unchanged: 0/0
 10407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10408 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;Total ram usage:       16 bytes
 10413 ;; Hardware stack levels used:    1
 10414 ;; Hardware stack levels required when called:    5
 10415 ;; This function calls:
 10416 ;;		___awdiv
 10417 ;;		___ftadd
 10418 ;;		___fttol
 10419 ;;		_pow
 10420 ;;		i2___awtoft
 10421 ;;		i2___ftmul
 10422 ;; This function is called by:
 10423 ;;		_isr
 10424 ;; This function uses a non-reentrant model
 10425 ;;
 10426                           
 10427                           	psect	text49
 10428  0019AC                     __ptext49:
 10429                           	opt stack 0
 10430  0019AC                     _dec_to_hex:
 10431                           	opt stack 20
 10432                           
 10433                           ;main.c: 223: int i = 0, quotient = num, temp, hexnum = 0;
 10434                           
 10435                           ;incstack = 0
 10436  0019AC  0E00               	movlw	0
 10437  0019AE  6E6E               	movwf	dec_to_hex@i+1,c
 10438  0019B0  0E00               	movlw	0
 10439  0019B2  6E6D               	movwf	dec_to_hex@i,c
 10440  0019B4  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
 10441  0019B8  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
 10442  0019BC  0E00               	movlw	0
 10443  0019BE  6E70               	movwf	dec_to_hex@hexnum+1,c
 10444  0019C0  0E00               	movlw	0
 10445  0019C2  6E6F               	movwf	dec_to_hex@hexnum,c
 10446                           
 10447                           ;main.c: 225: while (quotient != 0) {
 10448  0019C4  D068               	goto	i2l4560
 10449  0019C6                     i2l4548:
 10450                           
 10451                           ;main.c: 226: temp = quotient % 16;
 10452  0019C6  0E0F               	movlw	15
 10453  0019C8  1471               	andwf	dec_to_hex@quotient,w,c
 10454  0019CA  6E6B               	movwf	dec_to_hex@temp,c
 10455  0019CC  6A6C               	clrf	dec_to_hex@temp+1,c
 10456                           
 10457                           ;main.c: 227: hexnum += temp*pow(10,i);
 10458  0019CE  C06D  F009         	movff	dec_to_hex@i,i2___awtoft@c
 10459  0019D2  C06E  F00A         	movff	dec_to_hex@i+1,i2___awtoft@c+1
 10460  0019D6  EC6F  F017         	call	i2___awtoft	;wreg free
 10461  0019DA  C009  F065         	movff	?i2___awtoft,_dec_to_hex$1378
 10462  0019DE  C00A  F066         	movff	?i2___awtoft+1,_dec_to_hex$1378+1
 10463  0019E2  C00B  F067         	movff	?i2___awtoft+2,_dec_to_hex$1378+2
 10464                           
 10465                           ;main.c: 227: hexnum += temp*pow(10,i);
 10466  0019E6  C065  F055         	movff	_dec_to_hex$1378,pow@y
 10467  0019EA  C066  F056         	movff	_dec_to_hex$1378+1,pow@y+1
 10468  0019EE  C067  F057         	movff	_dec_to_hex$1378+2,pow@y+2
 10469  0019F2  0E00               	movlw	0
 10470  0019F4  6E52               	movwf	pow@x,c
 10471  0019F6  0E20               	movlw	32
 10472  0019F8  6E53               	movwf	pow@x+1,c
 10473  0019FA  0E41               	movlw	65
 10474  0019FC  6E54               	movwf	pow@x+2,c
 10475  0019FE  EC40  F009         	call	_pow	;wreg free
 10476  001A02  C052  F068         	movff	?_pow,_dec_to_hex$1379
 10477  001A06  C053  F069         	movff	?_pow+1,_dec_to_hex$1379+1
 10478  001A0A  C054  F06A         	movff	?_pow+2,_dec_to_hex$1379+2
 10479                           
 10480                           ;main.c: 227: hexnum += temp*pow(10,i);
 10481  001A0E  C068  F010         	movff	_dec_to_hex$1379,i2___ftmul@f2
 10482  001A12  C069  F011         	movff	_dec_to_hex$1379+1,i2___ftmul@f2+1
 10483  001A16  C06A  F012         	movff	_dec_to_hex$1379+2,i2___ftmul@f2+2
 10484  001A1A  C06B  F009         	movff	dec_to_hex@temp,i2___awtoft@c
 10485  001A1E  C06C  F00A         	movff	dec_to_hex@temp+1,i2___awtoft@c+1
 10486  001A22  EC6F  F017         	call	i2___awtoft	;wreg free
 10487  001A26  C009  F00D         	movff	?i2___awtoft,i2___ftmul@f1
 10488  001A2A  C00A  F00E         	movff	?i2___awtoft+1,i2___ftmul@f1+1
 10489  001A2E  C00B  F00F         	movff	?i2___awtoft+2,i2___ftmul@f1+2
 10490  001A32  ECCE  F00D         	call	i2___ftmul	;wreg free
 10491  001A36  C00D  F01F         	movff	?i2___ftmul,___ftadd@f2
 10492  001A3A  C00E  F020         	movff	?i2___ftmul+1,___ftadd@f2+1
 10493  001A3E  C00F  F021         	movff	?i2___ftmul+2,___ftadd@f2+2
 10494  001A42  C06F  F009         	movff	dec_to_hex@hexnum,i2___awtoft@c
 10495  001A46  C070  F00A         	movff	dec_to_hex@hexnum+1,i2___awtoft@c+1
 10496  001A4A  EC6F  F017         	call	i2___awtoft	;wreg free
 10497  001A4E  C009  F01C         	movff	?i2___awtoft,___ftadd@f1
 10498  001A52  C00A  F01D         	movff	?i2___awtoft+1,___ftadd@f1+1
 10499  001A56  C00B  F01E         	movff	?i2___awtoft+2,___ftadd@f1+2
 10500  001A5A  EC6A  F008         	call	___ftadd	;wreg free
 10501  001A5E  C01C  F028         	movff	?___ftadd,___fttol@f1
 10502  001A62  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
 10503  001A66  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
 10504  001A6A  EC54  F00D         	call	___fttol	;wreg free
 10505  001A6E  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
 10506  001A72  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
 10507                           
 10508                           ;main.c: 228: quotient = quotient / 16;
 10509  001A76  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
 10510  001A7A  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
 10511  001A7E  0E00               	movlw	0
 10512  001A80  6E04               	movwf	___awdiv@divisor+1,c
 10513  001A82  0E10               	movlw	16
 10514  001A84  6E03               	movwf	___awdiv@divisor,c
 10515  001A86  EC9D  F014         	call	___awdiv	;wreg free
 10516  001A8A  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
 10517  001A8E  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
 10518                           
 10519                           ;main.c: 229: i += 1;
 10520  001A92  4A6D               	infsnz	dec_to_hex@i,f,c
 10521  001A94  2A6E               	incf	dec_to_hex@i+1,f,c
 10522  001A96                     i2l4560:
 10523  001A96  5071               	movf	dec_to_hex@quotient,w,c
 10524  001A98  1072               	iorwf	dec_to_hex@quotient+1,w,c
 10525  001A9A  A4D8               	btfss	status,2,c
 10526  001A9C  D794               	goto	i2l4548
 10527                           
 10528                           ;main.c: 230: }
 10529                           ;main.c: 231: return hexnum;
 10530  001A9E  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
 10531  001AA2  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
 10532  001AA6  0012               	return		;funcret
 10533  001AA8                     __end_of_dec_to_hex:
 10534                           	opt stack 0
 10535                           pclatu	equ	0xFFB
 10536                           pclath	equ	0xFFA
 10537                           tblptru	equ	0xFF8
 10538                           tblptrh	equ	0xFF7
 10539                           tblptrl	equ	0xFF6
 10540                           tablat	equ	0xFF5
 10541                           prodh	equ	0xFF4
 10542                           prodl	equ	0xFF3
 10543                           intcon	equ	0xFF2
 10544                           intcon2	equ	0xFF1
 10545                           intcon3	equ	0xFF0
 10546                           postinc0	equ	0xFEE
 10547                           fsr0h	equ	0xFEA
 10548                           fsr0l	equ	0xFE9
 10549                           wreg	equ	0xFE8
 10550                           postinc1	equ	0xFE6
 10551                           postdec1	equ	0xFE5
 10552                           fsr1h	equ	0xFE2
 10553                           fsr1l	equ	0xFE1
 10554                           indf2	equ	0xFDF
 10555                           postinc2	equ	0xFDE
 10556                           postdec2	equ	0xFDD
 10557                           fsr2h	equ	0xFDA
 10558                           fsr2l	equ	0xFD9
 10559                           status	equ	0xFD8
 10560                           
 10561 ;; *************** function _pow *****************
 10562 ;; Defined at:
 10563 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
 10564 ;; Parameters:    Size  Location     Type
 10565 ;;  x               3   81[COMRAM] int 
 10566 ;;  y               3   84[COMRAM] int 
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;  yi              4   94[COMRAM] unsigned long 
 10569 ;;  sign            1   93[COMRAM] unsigned char 
 10570 ;; Return value:  Size  Location     Type
 10571 ;;                  3   81[COMRAM] unsigned char 
 10572 ;; Registers used:
 10573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10574 ;; Tracked objects:
 10575 ;;		On entry : 0/0
 10576 ;;		On exit  : 0/0
 10577 ;;		Unchanged: 0/0
 10578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10579 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10580 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10582 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10583 ;;Total ram usage:       17 bytes
 10584 ;; Hardware stack levels used:    1
 10585 ;; Hardware stack levels required when called:    4
 10586 ;; This function calls:
 10587 ;;		___ftneg
 10588 ;;		___fttol
 10589 ;;		___lltoft
 10590 ;;		_exp
 10591 ;;		_log
 10592 ;;		i2___ftge
 10593 ;;		i2___ftmul
 10594 ;; This function is called by:
 10595 ;;		_dec_to_hex
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text50
 10600  001280                     __ptext50:
 10601                           	opt stack 0
 10602  001280                     _pow:
 10603                           	opt stack 20
 10604                           
 10605                           ;incstack = 0
 10606  001280  0E00               	movlw	0
 10607  001282  6E5E               	movwf	pow@sign,c
 10608  001284  5052               	movf	pow@x,w,c
 10609  001286  1053               	iorwf	pow@x+1,w,c
 10610  001288  1054               	iorwf	pow@x+2,w,c
 10611  00128A  A4D8               	btfss	status,2,c
 10612  00128C  D01C               	goto	i2l3952
 10613  00128E  0E00               	movlw	0
 10614  001290  6E01               	movwf	i2___ftge@ff1,c
 10615  001292  0E00               	movlw	0
 10616  001294  6E02               	movwf	i2___ftge@ff1+1,c
 10617  001296  0E00               	movlw	0
 10618  001298  6E03               	movwf	i2___ftge@ff1+2,c
 10619  00129A  C055  F004         	movff	pow@y,i2___ftge@ff2
 10620  00129E  C056  F005         	movff	pow@y+1,i2___ftge@ff2+1
 10621  0012A2  C057  F006         	movff	pow@y+2,i2___ftge@ff2+2
 10622  0012A6  ECCB  F013         	call	i2___ftge	;wreg free
 10623  0012AA  A0D8               	btfss	status,0,c
 10624  0012AC  D005               	goto	i2l908
 10625  0012AE  0E00               	movlw	0
 10626  0012B0  0100               	movlb	0	; () banked
 10627  0012B2  6FAC               	movwf	(_errno+1)& (0+255),b
 10628  0012B4  0E21               	movlw	33
 10629  0012B6  6FAB               	movwf	_errno& (0+255),b
 10630  0012B8                     i2l908:
 10631  0012B8  0E00               	movlw	0
 10632  0012BA  6E52               	movwf	?_pow,c
 10633  0012BC  0E00               	movlw	0
 10634  0012BE  6E53               	movwf	?_pow+1,c
 10635  0012C0  0E00               	movlw	0
 10636  0012C2  6E54               	movwf	?_pow+2,c
 10637  0012C4  0012               	return	
 10638  0012C6                     i2l3952:
 10639  0012C6  5055               	movf	pow@y,w,c
 10640  0012C8  1056               	iorwf	pow@y+1,w,c
 10641  0012CA  1057               	iorwf	pow@y+2,w,c
 10642  0012CC  A4D8               	btfss	status,2,c
 10643  0012CE  D007               	goto	i2l3958
 10644  0012D0  0E00               	movlw	0
 10645  0012D2  6E52               	movwf	?_pow,c
 10646  0012D4  0E80               	movlw	128
 10647  0012D6  6E53               	movwf	?_pow+1,c
 10648  0012D8  0E3F               	movlw	63
 10649  0012DA  6E54               	movwf	?_pow+2,c
 10650  0012DC  0012               	return	
 10651  0012DE                     i2l3958:
 10652  0012DE  AE54               	btfss	pow@x+2,7,c
 10653  0012E0  D041               	goto	i2l3970
 10654  0012E2  C055  F028         	movff	pow@y,___fttol@f1
 10655  0012E6  C056  F029         	movff	pow@y+1,___fttol@f1+1
 10656  0012EA  C057  F02A         	movff	pow@y+2,___fttol@f1+2
 10657  0012EE  EC54  F00D         	call	___fttol	;wreg free
 10658  0012F2  C028  F05F         	movff	?___fttol,pow@yi
 10659  0012F6  C029  F060         	movff	?___fttol+1,pow@yi+1
 10660  0012FA  C02A  F061         	movff	?___fttol+2,pow@yi+2
 10661  0012FE  C02B  F062         	movff	?___fttol+3,pow@yi+3
 10662  001302  C05F  F009         	movff	pow@yi,___lltoft@c
 10663  001306  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
 10664  00130A  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
 10665  00130E  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
 10666  001312  EC1C  F016         	call	___lltoft	;wreg free
 10667  001316  5055               	movf	pow@y,w,c
 10668  001318  1809               	xorwf	?___lltoft,w,c
 10669  00131A  E107               	bnz	i2u378_40
 10670  00131C  5056               	movf	pow@y+1,w,c
 10671  00131E  180A               	xorwf	?___lltoft+1,w,c
 10672  001320  E104               	bnz	i2u378_40
 10673  001322  5057               	movf	pow@y+2,w,c
 10674  001324  180B               	xorwf	?___lltoft+2,w,c
 10675  001326  B4D8               	btfsc	status,2,c
 10676  001328  D00C               	goto	i2l3966
 10677  00132A                     i2u378_40:
 10678  00132A  0E00               	movlw	0
 10679  00132C  0100               	movlb	0	; () banked
 10680  00132E  6FAC               	movwf	(_errno+1)& (0+255),b
 10681  001330  0E21               	movlw	33
 10682  001332  6FAB               	movwf	_errno& (0+255),b
 10683  001334  0E00               	movlw	0
 10684  001336  6E52               	movwf	?_pow,c
 10685  001338  0E00               	movlw	0
 10686  00133A  6E53               	movwf	?_pow+1,c
 10687  00133C  0E00               	movlw	0
 10688  00133E  6E54               	movwf	?_pow+2,c
 10689                           
 10690                           ; BSR set to: 0
 10691  001340  0012               	return	
 10692  001342                     i2l3966:
 10693  001342  505F               	movf	pow@yi,w,c
 10694  001344  0B01               	andlw	1
 10695  001346  6E5E               	movwf	pow@sign,c
 10696  001348  C052  F001         	movff	pow@x,___ftneg@f1
 10697  00134C  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 10698  001350  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 10699  001354  EC13  F018         	call	___ftneg	;wreg free
 10700  001358  C001  F052         	movff	?___ftneg,pow@x
 10701  00135C  C002  F053         	movff	?___ftneg+1,pow@x+1
 10702  001360  C003  F054         	movff	?___ftneg+2,pow@x+2
 10703  001364                     i2l3970:
 10704  001364  C052  F034         	movff	pow@x,log@x
 10705  001368  C053  F035         	movff	pow@x+1,log@x+1
 10706  00136C  C054  F036         	movff	pow@x+2,log@x+2
 10707  001370  EC3B  F00B         	call	_log	;wreg free
 10708  001374  C034  F058         	movff	?_log,_pow$1380
 10709  001378  C035  F059         	movff	?_log+1,_pow$1380+1
 10710  00137C  C036  F05A         	movff	?_log+2,_pow$1380+2
 10711  001380  C058  F00D         	movff	_pow$1380,i2___ftmul@f1
 10712  001384  C059  F00E         	movff	_pow$1380+1,i2___ftmul@f1+1
 10713  001388  C05A  F00F         	movff	_pow$1380+2,i2___ftmul@f1+2
 10714  00138C  C055  F010         	movff	pow@y,i2___ftmul@f2
 10715  001390  C056  F011         	movff	pow@y+1,i2___ftmul@f2+1
 10716  001394  C057  F012         	movff	pow@y+2,i2___ftmul@f2+2
 10717  001398  ECCE  F00D         	call	i2___ftmul	;wreg free
 10718  00139C  C00D  F05B         	movff	?i2___ftmul,_pow$1381
 10719  0013A0  C00E  F05C         	movff	?i2___ftmul+1,_pow$1381+1
 10720  0013A4  C00F  F05D         	movff	?i2___ftmul+2,_pow$1381+2
 10721  0013A8  C05B  F049         	movff	_pow$1381,exp@x
 10722  0013AC  C05C  F04A         	movff	_pow$1381+1,exp@x+1
 10723  0013B0  C05D  F04B         	movff	_pow$1381+2,exp@x+2
 10724  0013B4  EC76  F007         	call	_exp	;wreg free
 10725  0013B8  C049  F052         	movff	?_exp,pow@x
 10726  0013BC  C04A  F053         	movff	?_exp+1,pow@x+1
 10727  0013C0  C04B  F054         	movff	?_exp+2,pow@x+2
 10728  0013C4  505E               	movf	pow@sign,w,c
 10729  0013C6  B4D8               	btfsc	status,2,c
 10730  0013C8  D00F               	goto	i2l913
 10731  0013CA  C052  F001         	movff	pow@x,___ftneg@f1
 10732  0013CE  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 10733  0013D2  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 10734  0013D6  EC13  F018         	call	___ftneg	;wreg free
 10735  0013DA  C001  F052         	movff	?___ftneg,?_pow
 10736  0013DE  C002  F053         	movff	?___ftneg+1,?_pow+1
 10737  0013E2  C003  F054         	movff	?___ftneg+2,?_pow+2
 10738  0013E6  0012               	return	
 10739  0013E8                     i2l913:
 10740  0013E8  C052  F052         	movff	pow@x,?_pow
 10741  0013EC  C053  F053         	movff	pow@x+1,?_pow+1
 10742  0013F0  C054  F054         	movff	pow@x+2,?_pow+2
 10743  0013F4  0012               	return		;funcret
 10744  0013F6                     __end_of_pow:
 10745                           	opt stack 0
 10746                           pclatu	equ	0xFFB
 10747                           pclath	equ	0xFFA
 10748                           tblptru	equ	0xFF8
 10749                           tblptrh	equ	0xFF7
 10750                           tblptrl	equ	0xFF6
 10751                           tablat	equ	0xFF5
 10752                           prodh	equ	0xFF4
 10753                           prodl	equ	0xFF3
 10754                           intcon	equ	0xFF2
 10755                           intcon2	equ	0xFF1
 10756                           intcon3	equ	0xFF0
 10757                           postinc0	equ	0xFEE
 10758                           fsr0h	equ	0xFEA
 10759                           fsr0l	equ	0xFE9
 10760                           wreg	equ	0xFE8
 10761                           postinc1	equ	0xFE6
 10762                           postdec1	equ	0xFE5
 10763                           fsr1h	equ	0xFE2
 10764                           fsr1l	equ	0xFE1
 10765                           indf2	equ	0xFDF
 10766                           postinc2	equ	0xFDE
 10767                           postdec2	equ	0xFDD
 10768                           fsr2h	equ	0xFDA
 10769                           fsr2l	equ	0xFD9
 10770                           status	equ	0xFD8
 10771                           
 10772 ;; *************** function _log *****************
 10773 ;; Defined at:
 10774 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;  x               3   51[COMRAM] unsigned char 
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;  exponent        2   54[COMRAM] int 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  3   51[COMRAM] int 
 10781 ;; Registers used:
 10782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10788 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10791 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10792 ;;Total ram usage:        5 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; Hardware stack levels required when called:    3
 10795 ;; This function calls:
 10796 ;;		___ftadd
 10797 ;;		_eval_poly
 10798 ;;		_frexp
 10799 ;;		i2___awtoft
 10800 ;;		i2___ftmul
 10801 ;; This function is called by:
 10802 ;;		_pow
 10803 ;; This function uses a non-reentrant model
 10804 ;;
 10805                           
 10806                           	psect	text51
 10807  001676                     __ptext51:
 10808                           	opt stack 0
 10809  001676                     _log:
 10810                           	opt stack 20
 10811                           
 10812                           ;incstack = 0
 10813  001676  AE36               	btfss	log@x+2,7,c
 10814  001678  D00C               	goto	i2l3670
 10815  00167A  0E00               	movlw	0
 10816  00167C  0100               	movlb	0	; () banked
 10817  00167E  6FAC               	movwf	(_errno+1)& (0+255),b
 10818  001680  0E21               	movlw	33
 10819  001682  6FAB               	movwf	_errno& (0+255),b
 10820  001684  0E00               	movlw	0
 10821  001686  6E34               	movwf	?_log,c
 10822  001688  0E00               	movlw	0
 10823  00168A  6E35               	movwf	?_log+1,c
 10824  00168C  0E00               	movlw	0
 10825  00168E  6E36               	movwf	?_log+2,c
 10826                           
 10827                           ; BSR set to: 0
 10828  001690  0012               	return	
 10829  001692                     i2l3670:
 10830  001692  5034               	movf	log@x,w,c
 10831  001694  1035               	iorwf	log@x+1,w,c
 10832  001696  1036               	iorwf	log@x+2,w,c
 10833  001698  A4D8               	btfss	status,2,c
 10834  00169A  D00C               	goto	i2l3676
 10835  00169C  0E00               	movlw	0
 10836  00169E  0100               	movlb	0	; () banked
 10837  0016A0  6FAC               	movwf	(_errno+1)& (0+255),b
 10838  0016A2  0E22               	movlw	34
 10839  0016A4  6FAB               	movwf	_errno& (0+255),b
 10840  0016A6  0E00               	movlw	0
 10841  0016A8  6E34               	movwf	?_log,c
 10842  0016AA  0E00               	movlw	0
 10843  0016AC  6E35               	movwf	?_log+1,c
 10844  0016AE  0E00               	movlw	0
 10845  0016B0  6E36               	movwf	?_log+2,c
 10846                           
 10847                           ; BSR set to: 0
 10848  0016B2  0012               	return	
 10849  0016B4                     i2l3676:
 10850  0016B4  0E00               	movlw	0
 10851  0016B6  6E10               	movwf	i2___ftmul@f2,c
 10852  0016B8  0E00               	movlw	0
 10853  0016BA  6E11               	movwf	i2___ftmul@f2+1,c
 10854  0016BC  0E40               	movlw	64
 10855  0016BE  6E12               	movwf	i2___ftmul@f2+2,c
 10856  0016C0  0E37               	movlw	low log@exponent
 10857  0016C2  6E04               	movwf	frexp@eptr,c
 10858  0016C4  0E00               	movlw	high log@exponent
 10859  0016C6  6E05               	movwf	frexp@eptr+1,c
 10860  0016C8  C034  F001         	movff	log@x,frexp@value
 10861  0016CC  C035  F002         	movff	log@x+1,frexp@value+1
 10862  0016D0  C036  F003         	movff	log@x+2,frexp@value+2
 10863  0016D4  EC13  F014         	call	_frexp	;wreg free
 10864  0016D8  C001  F00D         	movff	?_frexp,i2___ftmul@f1
 10865  0016DC  C002  F00E         	movff	?_frexp+1,i2___ftmul@f1+1
 10866  0016E0  C003  F00F         	movff	?_frexp+2,i2___ftmul@f1+2
 10867  0016E4  ECCE  F00D         	call	i2___ftmul	;wreg free
 10868  0016E8  C00D  F01C         	movff	?i2___ftmul,___ftadd@f1
 10869  0016EC  C00E  F01D         	movff	?i2___ftmul+1,___ftadd@f1+1
 10870  0016F0  C00F  F01E         	movff	?i2___ftmul+2,___ftadd@f1+2
 10871  0016F4  0E00               	movlw	0
 10872  0016F6  6E1F               	movwf	___ftadd@f2,c
 10873  0016F8  0E80               	movlw	128
 10874  0016FA  6E20               	movwf	___ftadd@f2+1,c
 10875  0016FC  0EBF               	movlw	191
 10876  0016FE  6E21               	movwf	___ftadd@f2+2,c
 10877  001700  EC6A  F008         	call	___ftadd	;wreg free
 10878  001704  C01C  F034         	movff	?___ftadd,log@x
 10879  001708  C01D  F035         	movff	?___ftadd+1,log@x+1
 10880  00170C  C01E  F036         	movff	?___ftadd+2,log@x+2
 10881  001710  0637               	decf	log@exponent,f,c
 10882  001712  A0D8               	btfss	status,0,c
 10883  001714  0638               	decf	log@exponent+1,f,c
 10884  001716  C034  F028         	movff	log@x,eval_poly@x
 10885  00171A  C035  F029         	movff	log@x+1,eval_poly@x+1
 10886  00171E  C036  F02A         	movff	log@x+2,eval_poly@x+2
 10887  001722  0E7F               	movlw	low log@coeff
 10888  001724  6E2B               	movwf	eval_poly@d,c
 10889  001726  0EFE               	movlw	high log@coeff
 10890  001728  6E2C               	movwf	eval_poly@d+1,c
 10891  00172A  0E00               	movlw	0
 10892  00172C  6E2E               	movwf	eval_poly@n+1,c
 10893  00172E  0E08               	movlw	8
 10894  001730  6E2D               	movwf	eval_poly@n,c
 10895  001732  ECED  F010         	call	_eval_poly	;wreg free
 10896  001736  C028  F034         	movff	?_eval_poly,log@x
 10897  00173A  C029  F035         	movff	?_eval_poly+1,log@x+1
 10898  00173E  C02A  F036         	movff	?_eval_poly+2,log@x+2
 10899  001742  0E72               	movlw	114
 10900  001744  6E10               	movwf	i2___ftmul@f2,c
 10901  001746  0E31               	movlw	49
 10902  001748  6E11               	movwf	i2___ftmul@f2+1,c
 10903  00174A  0E3F               	movlw	63
 10904  00174C  6E12               	movwf	i2___ftmul@f2+2,c
 10905  00174E  C037  F009         	movff	log@exponent,i2___awtoft@c
 10906  001752  C038  F00A         	movff	log@exponent+1,i2___awtoft@c+1
 10907  001756  EC6F  F017         	call	i2___awtoft	;wreg free
 10908  00175A  C009  F00D         	movff	?i2___awtoft,i2___ftmul@f1
 10909  00175E  C00A  F00E         	movff	?i2___awtoft+1,i2___ftmul@f1+1
 10910  001762  C00B  F00F         	movff	?i2___awtoft+2,i2___ftmul@f1+2
 10911  001766  ECCE  F00D         	call	i2___ftmul	;wreg free
 10912  00176A  C00D  F01C         	movff	?i2___ftmul,___ftadd@f1
 10913  00176E  C00E  F01D         	movff	?i2___ftmul+1,___ftadd@f1+1
 10914  001772  C00F  F01E         	movff	?i2___ftmul+2,___ftadd@f1+2
 10915  001776  C034  F01F         	movff	log@x,___ftadd@f2
 10916  00177A  C035  F020         	movff	log@x+1,___ftadd@f2+1
 10917  00177E  C036  F021         	movff	log@x+2,___ftadd@f2+2
 10918  001782  EC6A  F008         	call	___ftadd	;wreg free
 10919  001786  C01C  F034         	movff	?___ftadd,?_log
 10920  00178A  C01D  F035         	movff	?___ftadd+1,?_log+1
 10921  00178E  C01E  F036         	movff	?___ftadd+2,?_log+2
 10922  001792  0012               	return	
 10923  001794                     __end_of_log:
 10924                           	opt stack 0
 10925                           pclatu	equ	0xFFB
 10926                           pclath	equ	0xFFA
 10927                           tblptru	equ	0xFF8
 10928                           tblptrh	equ	0xFF7
 10929                           tblptrl	equ	0xFF6
 10930                           tablat	equ	0xFF5
 10931                           prodh	equ	0xFF4
 10932                           prodl	equ	0xFF3
 10933                           intcon	equ	0xFF2
 10934                           intcon2	equ	0xFF1
 10935                           intcon3	equ	0xFF0
 10936                           postinc0	equ	0xFEE
 10937                           fsr0h	equ	0xFEA
 10938                           fsr0l	equ	0xFE9
 10939                           wreg	equ	0xFE8
 10940                           postinc1	equ	0xFE6
 10941                           postdec1	equ	0xFE5
 10942                           fsr1h	equ	0xFE2
 10943                           fsr1l	equ	0xFE1
 10944                           indf2	equ	0xFDF
 10945                           postinc2	equ	0xFDE
 10946                           postdec2	equ	0xFDD
 10947                           fsr2h	equ	0xFDA
 10948                           fsr2l	equ	0xFD9
 10949                           status	equ	0xFD8
 10950                           
 10951 ;; *************** function _exp *****************
 10952 ;; Defined at:
 10953 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;  x               3   72[COMRAM] int 
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;  exponent        2   78[COMRAM] int 
 10958 ;;  sign            1   80[COMRAM] unsigned char 
 10959 ;; Return value:  Size  Location     Type
 10960 ;;                  3   72[COMRAM] unsigned char 
 10961 ;; Registers used:
 10962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10963 ;; Tracked objects:
 10964 ;;		On entry : 0/0
 10965 ;;		On exit  : 0/0
 10966 ;;		Unchanged: 0/0
 10967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10968 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10972 ;;Total ram usage:        9 bytes
 10973 ;; Hardware stack levels used:    1
 10974 ;; Hardware stack levels required when called:    3
 10975 ;; This function calls:
 10976 ;;		___ftdiv
 10977 ;;		___ftneg
 10978 ;;		___ftsub
 10979 ;;		___fttol
 10980 ;;		_eval_poly
 10981 ;;		_floor
 10982 ;;		_ldexp
 10983 ;;		i2___awtoft
 10984 ;;		i2___ftge
 10985 ;;		i2___ftmul
 10986 ;; This function is called by:
 10987 ;;		_pow
 10988 ;; This function uses a non-reentrant model
 10989 ;;
 10990                           
 10991                           	psect	text52
 10992  000EEC                     __ptext52:
 10993                           	opt stack 0
 10994  000EEC                     _exp:
 10995                           	opt stack 20
 10996                           
 10997                           ;incstack = 0
 10998  000EEC  5049               	movf	exp@x,w,c
 10999  000EEE  104A               	iorwf	exp@x+1,w,c
 11000  000EF0  104B               	iorwf	exp@x+2,w,c
 11001  000EF2  A4D8               	btfss	status,2,c
 11002  000EF4  D007               	goto	i2l3692
 11003  000EF6  0E00               	movlw	0
 11004  000EF8  6E49               	movwf	?_exp,c
 11005  000EFA  0E80               	movlw	128
 11006  000EFC  6E4A               	movwf	?_exp+1,c
 11007  000EFE  0E3F               	movlw	63
 11008  000F00  6E4B               	movwf	?_exp+2,c
 11009  000F02  0012               	return	
 11010  000F04                     i2l3692:
 11011  000F04  0E72               	movlw	114
 11012  000F06  6E01               	movwf	i2___ftge@ff1,c
 11013  000F08  0E31               	movlw	49
 11014  000F0A  6E02               	movwf	i2___ftge@ff1+1,c
 11015  000F0C  0E44               	movlw	68
 11016  000F0E  6E03               	movwf	i2___ftge@ff1+2,c
 11017  000F10  C049  F004         	movff	exp@x,i2___ftge@ff2
 11018  000F14  C04A  F005         	movff	exp@x+1,i2___ftge@ff2+1
 11019  000F18  C04B  F006         	movff	exp@x+2,i2___ftge@ff2+2
 11020  000F1C  ECCB  F013         	call	i2___ftge	;wreg free
 11021  000F20  B0D8               	btfsc	status,0,c
 11022  000F22  D00C               	goto	i2l3698
 11023  000F24  0E00               	movlw	0
 11024  000F26  0100               	movlb	0	; () banked
 11025  000F28  6FAC               	movwf	(_errno+1)& (0+255),b
 11026  000F2A  0E22               	movlw	34
 11027  000F2C  6FAB               	movwf	_errno& (0+255),b
 11028  000F2E  0EFF               	movlw	255
 11029  000F30  6E49               	movwf	?_exp,c
 11030  000F32  0E7F               	movlw	127
 11031  000F34  6E4A               	movwf	?_exp+1,c
 11032  000F36  0E7F               	movlw	127
 11033  000F38  6E4B               	movwf	?_exp+2,c
 11034                           
 11035                           ; BSR set to: 0
 11036  000F3A  0012               	return	
 11037  000F3C                     i2l3698:
 11038  000F3C  C049  F001         	movff	exp@x,i2___ftge@ff1
 11039  000F40  C04A  F002         	movff	exp@x+1,i2___ftge@ff1+1
 11040  000F44  C04B  F003         	movff	exp@x+2,i2___ftge@ff1+2
 11041  000F48  0E49               	movlw	73
 11042  000F4A  6E04               	movwf	i2___ftge@ff2,c
 11043  000F4C  0E3A               	movlw	58
 11044  000F4E  6E05               	movwf	i2___ftge@ff2+1,c
 11045  000F50  0EC4               	movlw	196
 11046  000F52  6E06               	movwf	i2___ftge@ff2+2,c
 11047  000F54  ECCB  F013         	call	i2___ftge	;wreg free
 11048  000F58  B0D8               	btfsc	status,0,c
 11049  000F5A  D00C               	goto	i2l3704
 11050  000F5C  0E00               	movlw	0
 11051  000F5E  0100               	movlb	0	; () banked
 11052  000F60  6FAC               	movwf	(_errno+1)& (0+255),b
 11053  000F62  0E22               	movlw	34
 11054  000F64  6FAB               	movwf	_errno& (0+255),b
 11055  000F66  0E00               	movlw	0
 11056  000F68  6E49               	movwf	?_exp,c
 11057  000F6A  0E00               	movlw	0
 11058  000F6C  6E4A               	movwf	?_exp+1,c
 11059  000F6E  0E00               	movlw	0
 11060  000F70  6E4B               	movwf	?_exp+2,c
 11061                           
 11062                           ; BSR set to: 0
 11063  000F72  0012               	return	
 11064  000F74                     i2l3704:
 11065  000F74  AE4B               	btfss	exp@x+2,7,c
 11066  000F76  D002               	goto	i2u336_40
 11067  000F78  0E01               	movlw	1
 11068  000F7A  D001               	goto	i2u337_40
 11069  000F7C                     i2u336_40:
 11070  000F7C  0E00               	movlw	0
 11071  000F7E                     i2u337_40:
 11072  000F7E  6E51               	movwf	exp@sign,c
 11073  000F80  5051               	movf	exp@sign,w,c
 11074  000F82  B4D8               	btfsc	status,2,c
 11075  000F84  D00E               	goto	i2l1071
 11076  000F86  C049  F001         	movff	exp@x,___ftneg@f1
 11077  000F8A  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
 11078  000F8E  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
 11079  000F92  EC13  F018         	call	___ftneg	;wreg free
 11080  000F96  C001  F049         	movff	?___ftneg,exp@x
 11081  000F9A  C002  F04A         	movff	?___ftneg+1,exp@x+1
 11082  000F9E  C003  F04B         	movff	?___ftneg+2,exp@x+2
 11083  000FA2                     i2l1071:
 11084  000FA2  C049  F00D         	movff	exp@x,i2___ftmul@f1
 11085  000FA6  C04A  F00E         	movff	exp@x+1,i2___ftmul@f1+1
 11086  000FAA  C04B  F00F         	movff	exp@x+2,i2___ftmul@f1+2
 11087  000FAE  0EAA               	movlw	170
 11088  000FB0  6E10               	movwf	i2___ftmul@f2,c
 11089  000FB2  0EB8               	movlw	184
 11090  000FB4  6E11               	movwf	i2___ftmul@f2+1,c
 11091  000FB6  0E3F               	movlw	63
 11092  000FB8  6E12               	movwf	i2___ftmul@f2+2,c
 11093  000FBA  ECCE  F00D         	call	i2___ftmul	;wreg free
 11094  000FBE  C00D  F049         	movff	?i2___ftmul,exp@x
 11095  000FC2  C00E  F04A         	movff	?i2___ftmul+1,exp@x+1
 11096  000FC6  C00F  F04B         	movff	?i2___ftmul+2,exp@x+2
 11097  000FCA  C049  F041         	movff	exp@x,floor@x
 11098  000FCE  C04A  F042         	movff	exp@x+1,floor@x+1
 11099  000FD2  C04B  F043         	movff	exp@x+2,floor@x+2
 11100  000FD6  ECA8  F00F         	call	_floor	;wreg free
 11101  000FDA  C041  F04C         	movff	?_floor,_exp$1249
 11102  000FDE  C042  F04D         	movff	?_floor+1,_exp$1249+1
 11103  000FE2  C043  F04E         	movff	?_floor+2,_exp$1249+2
 11104  000FE6  C04C  F028         	movff	_exp$1249,___fttol@f1
 11105  000FEA  C04D  F029         	movff	_exp$1249+1,___fttol@f1+1
 11106  000FEE  C04E  F02A         	movff	_exp$1249+2,___fttol@f1+2
 11107  000FF2  EC54  F00D         	call	___fttol	;wreg free
 11108  000FF6  C028  F04F         	movff	?___fttol,exp@exponent
 11109  000FFA  C029  F050         	movff	?___fttol+1,exp@exponent+1
 11110  000FFE  C049  F028         	movff	exp@x,___ftsub@f1
 11111  001002  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
 11112  001006  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
 11113  00100A  C04F  F009         	movff	exp@exponent,i2___awtoft@c
 11114  00100E  C050  F00A         	movff	exp@exponent+1,i2___awtoft@c+1
 11115  001012  EC6F  F017         	call	i2___awtoft	;wreg free
 11116  001016  C009  F02B         	movff	?i2___awtoft,___ftsub@f2
 11117  00101A  C00A  F02C         	movff	?i2___awtoft+1,___ftsub@f2+1
 11118  00101E  C00B  F02D         	movff	?i2___awtoft+2,___ftsub@f2+2
 11119  001022  EC30  F017         	call	___ftsub	;wreg free
 11120  001026  C028  F049         	movff	?___ftsub,exp@x
 11121  00102A  C029  F04A         	movff	?___ftsub+1,exp@x+1
 11122  00102E  C02A  F04B         	movff	?___ftsub+2,exp@x+2
 11123  001032  C049  F028         	movff	exp@x,eval_poly@x
 11124  001036  C04A  F029         	movff	exp@x+1,eval_poly@x+1
 11125  00103A  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
 11126  00103E  0E61               	movlw	low exp@coeff
 11127  001040  6E2B               	movwf	eval_poly@d,c
 11128  001042  0EFE               	movlw	high exp@coeff
 11129  001044  6E2C               	movwf	eval_poly@d+1,c
 11130  001046  0E00               	movlw	0
 11131  001048  6E2E               	movwf	eval_poly@n+1,c
 11132  00104A  0E09               	movlw	9
 11133  00104C  6E2D               	movwf	eval_poly@n,c
 11134  00104E  ECED  F010         	call	_eval_poly	;wreg free
 11135  001052  C028  F034         	movff	?_eval_poly,ldexp@value
 11136  001056  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 11137  00105A  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 11138  00105E  C04F  F037         	movff	exp@exponent,ldexp@newexp
 11139  001062  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 11140  001066  ECBA  F011         	call	_ldexp	;wreg free
 11141  00106A  C034  F049         	movff	?_ldexp,exp@x
 11142  00106E  C035  F04A         	movff	?_ldexp+1,exp@x+1
 11143  001072  C036  F04B         	movff	?_ldexp+2,exp@x+2
 11144  001076  5051               	movf	exp@sign,w,c
 11145  001078  B4D8               	btfsc	status,2,c
 11146  00107A  D025               	goto	i2l1072
 11147  00107C  2849               	incf	exp@x,w,c
 11148  00107E  E10E               	bnz	i2l3726
 11149  001080  0E7F               	movlw	127
 11150  001082  184A               	xorwf	exp@x+1,w,c
 11151  001084  E10B               	bnz	i2l3726
 11152  001086  0E7F               	movlw	127
 11153  001088  184B               	xorwf	exp@x+2,w,c
 11154  00108A  A4D8               	btfss	status,2,c
 11155  00108C  D007               	goto	i2l3726
 11156  00108E  0E00               	movlw	0
 11157  001090  6E49               	movwf	?_exp,c
 11158  001092  0E00               	movlw	0
 11159  001094  6E4A               	movwf	?_exp+1,c
 11160  001096  0E00               	movlw	0
 11161  001098  6E4B               	movwf	?_exp+2,c
 11162  00109A  0012               	return	
 11163  00109C                     i2l3726:
 11164  00109C  0E00               	movlw	0
 11165  00109E  6E09               	movwf	___ftdiv@f1,c
 11166  0010A0  0E80               	movlw	128
 11167  0010A2  6E0A               	movwf	___ftdiv@f1+1,c
 11168  0010A4  0E3F               	movlw	63
 11169  0010A6  6E0B               	movwf	___ftdiv@f1+2,c
 11170  0010A8  C049  F00C         	movff	exp@x,___ftdiv@f2
 11171  0010AC  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
 11172  0010B0  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
 11173  0010B4  EC35  F00F         	call	___ftdiv	;wreg free
 11174  0010B8  C009  F049         	movff	?___ftdiv,?_exp
 11175  0010BC  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
 11176  0010C0  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
 11177  0010C4  0012               	return	
 11178  0010C6                     i2l1072:
 11179  0010C6  C049  F049         	movff	exp@x,?_exp
 11180  0010CA  C04A  F04A         	movff	exp@x+1,?_exp+1
 11181  0010CE  C04B  F04B         	movff	exp@x+2,?_exp+2
 11182  0010D2  0012               	return		;funcret
 11183  0010D4                     __end_of_exp:
 11184                           	opt stack 0
 11185                           pclatu	equ	0xFFB
 11186                           pclath	equ	0xFFA
 11187                           tblptru	equ	0xFF8
 11188                           tblptrh	equ	0xFF7
 11189                           tblptrl	equ	0xFF6
 11190                           tablat	equ	0xFF5
 11191                           prodh	equ	0xFF4
 11192                           prodl	equ	0xFF3
 11193                           intcon	equ	0xFF2
 11194                           intcon2	equ	0xFF1
 11195                           intcon3	equ	0xFF0
 11196                           postinc0	equ	0xFEE
 11197                           fsr0h	equ	0xFEA
 11198                           fsr0l	equ	0xFE9
 11199                           wreg	equ	0xFE8
 11200                           postinc1	equ	0xFE6
 11201                           postdec1	equ	0xFE5
 11202                           fsr1h	equ	0xFE2
 11203                           fsr1l	equ	0xFE1
 11204                           indf2	equ	0xFDF
 11205                           postinc2	equ	0xFDE
 11206                           postdec2	equ	0xFDD
 11207                           fsr2h	equ	0xFDA
 11208                           fsr2l	equ	0xFD9
 11209                           status	equ	0xFD8
 11210                           
 11211 ;; *************** function i2___awtoft *****************
 11212 ;; Defined at:
 11213 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;  c               2    8[COMRAM] int 
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;  __awtoft        1   11[COMRAM] unsigned char 
 11218 ;; Return value:  Size  Location     Type
 11219 ;;                  3    8[COMRAM] float 
 11220 ;; Registers used:
 11221 ;;		wreg, status,2, status,0, cstack
 11222 ;; Tracked objects:
 11223 ;;		On entry : 0/0
 11224 ;;		On exit  : 0/0
 11225 ;;		Unchanged: 0/0
 11226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11227 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11230 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11231 ;;Total ram usage:        4 bytes
 11232 ;; Hardware stack levels used:    1
 11233 ;; Hardware stack levels required when called:    1
 11234 ;; This function calls:
 11235 ;;		i2___ftpack
 11236 ;; This function is called by:
 11237 ;;		_dec_to_hex
 11238 ;;		_exp
 11239 ;;		_log
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           	psect	text53
 11244  002EDE                     __ptext53:
 11245                           	opt stack 0
 11246  002EDE                     i2___awtoft:
 11247                           	opt stack 23
 11248                           
 11249                           ;incstack = 0
 11250  002EDE  0E00               	movlw	0
 11251  002EE0  6E0C               	movwf	i2___awtoft@sign,c
 11252  002EE2  AE0A               	btfss	i2___awtoft@c+1,7,c
 11253  002EE4  D006               	goto	i2l3528
 11254  002EE6  6C09               	negf	i2___awtoft@c,c
 11255  002EE8  1E0A               	comf	i2___awtoft@c+1,f,c
 11256  002EEA  B0D8               	btfsc	status,0,c
 11257  002EEC  2A0A               	incf	i2___awtoft@c+1,f,c
 11258  002EEE  0E01               	movlw	1
 11259  002EF0  6E0C               	movwf	i2___awtoft@sign,c
 11260  002EF2                     i2l3528:
 11261  002EF2  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
 11262  002EF6  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
 11263  002EFA  6A03               	clrf	i2___ftpack@arg+2,c
 11264  002EFC  0E8E               	movlw	142
 11265  002EFE  6E04               	movwf	i2___ftpack@exp,c
 11266  002F00  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
 11267  002F04  EC7B  F012         	call	i2___ftpack	;wreg free
 11268  002F08  C001  F009         	movff	?i2___ftpack,?i2___awtoft
 11269  002F0C  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
 11270  002F10  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
 11271  002F14  0012               	return	
 11272  002F16                     __end_ofi2___awtoft:
 11273                           	opt stack 0
 11274                           pclatu	equ	0xFFB
 11275                           pclath	equ	0xFFA
 11276                           tblptru	equ	0xFF8
 11277                           tblptrh	equ	0xFF7
 11278                           tblptrl	equ	0xFF6
 11279                           tablat	equ	0xFF5
 11280                           prodh	equ	0xFF4
 11281                           prodl	equ	0xFF3
 11282                           intcon	equ	0xFF2
 11283                           intcon2	equ	0xFF1
 11284                           intcon3	equ	0xFF0
 11285                           postinc0	equ	0xFEE
 11286                           fsr0h	equ	0xFEA
 11287                           fsr0l	equ	0xFE9
 11288                           wreg	equ	0xFE8
 11289                           postinc1	equ	0xFE6
 11290                           postdec1	equ	0xFE5
 11291                           fsr1h	equ	0xFE2
 11292                           fsr1l	equ	0xFE1
 11293                           indf2	equ	0xFDF
 11294                           postinc2	equ	0xFDE
 11295                           postdec2	equ	0xFDD
 11296                           fsr2h	equ	0xFDA
 11297                           fsr2l	equ	0xFD9
 11298                           status	equ	0xFD8
 11299                           
 11300 ;; *************** function _ldexp *****************
 11301 ;; Defined at:
 11302 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 11303 ;; Parameters:    Size  Location     Type
 11304 ;;  value           3   51[COMRAM] float 
 11305 ;;  newexp          2   54[COMRAM] int 
 11306 ;; Auto vars:     Size  Location     Type
 11307 ;;		None
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  3   51[COMRAM] int 
 11310 ;; Registers used:
 11311 ;;		wreg, status,2, status,0
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11317 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;Total ram usage:        7 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; This function calls:
 11324 ;;		Nothing
 11325 ;; This function is called by:
 11326 ;;		_exp
 11327 ;; This function uses a non-reentrant model
 11328 ;;
 11329                           
 11330                           	psect	text54
 11331  002374                     __ptext54:
 11332                           	opt stack 0
 11333  002374                     _ldexp:
 11334                           	opt stack 22
 11335                           
 11336                           ;incstack = 0
 11337  002374  5034               	movf	ldexp@value,w,c
 11338  002376  1035               	iorwf	ldexp@value+1,w,c
 11339  002378  1036               	iorwf	ldexp@value+2,w,c
 11340  00237A  A4D8               	btfss	status,2,c
 11341  00237C  D007               	goto	i2l3490
 11342  00237E  0E00               	movlw	0
 11343  002380  6E34               	movwf	?_ldexp,c
 11344  002382  0E00               	movlw	0
 11345  002384  6E35               	movwf	?_ldexp+1,c
 11346  002386  0E00               	movlw	0
 11347  002388  6E36               	movwf	?_ldexp+2,c
 11348  00238A  0012               	return	
 11349  00238C                     i2l3490:
 11350  00238C  5036               	movf	ldexp@value+2,w,c
 11351  00238E  0B7F               	andlw	127
 11352  002390  6E39               	movwf	??_ldexp& (0+255),c
 11353  002392  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 11354  002394  90D8               	bcf	status,0,c
 11355  002396  3639               	rlcf	??_ldexp,f,c
 11356  002398  363A               	rlcf	??_ldexp+1,f,c
 11357  00239A  5039               	movf	??_ldexp,w,c
 11358  00239C  2637               	addwf	ldexp@newexp,f,c
 11359  00239E  503A               	movf	??_ldexp+1,w,c
 11360  0023A0  2238               	addwfc	ldexp@newexp+1,f,c
 11361  0023A2  AE35               	btfss	ldexp@value+1,7,c
 11362  0023A4  D003               	goto	i2u307_40
 11363  0023A6  6A39               	clrf	??_ldexp& (0+255),c
 11364  0023A8  2A39               	incf	??_ldexp& (0+255),f,c
 11365  0023AA  D001               	goto	i2u307_48
 11366  0023AC                     i2u307_40:
 11367  0023AC  6A39               	clrf	??_ldexp& (0+255),c
 11368  0023AE                     i2u307_48:
 11369  0023AE  5039               	movf	??_ldexp,w,c
 11370  0023B0  2637               	addwf	ldexp@newexp,f,c
 11371  0023B2  0E00               	movlw	0
 11372  0023B4  2238               	addwfc	ldexp@newexp+1,f,c
 11373  0023B6  AE38               	btfss	ldexp@newexp+1,7,c
 11374  0023B8  D00C               	goto	i2l3498
 11375  0023BA  0E00               	movlw	0
 11376  0023BC  0100               	movlb	0	; () banked
 11377  0023BE  6FAC               	movwf	(_errno+1)& (0+255),b
 11378  0023C0  0E22               	movlw	34
 11379  0023C2  6FAB               	movwf	_errno& (0+255),b
 11380  0023C4  0E00               	movlw	0
 11381  0023C6  6E34               	movwf	?_ldexp,c
 11382  0023C8  0E00               	movlw	0
 11383  0023CA  6E35               	movwf	?_ldexp+1,c
 11384  0023CC  0E00               	movlw	0
 11385  0023CE                     L11:
 11386  0023CE  6E36               	movwf	?_ldexp+2,c
 11387                           
 11388                           ; BSR set to: 0
 11389  0023D0  0012               	return	
 11390  0023D2                     i2l3498:
 11391  0023D2  BE38               	btfsc	ldexp@newexp+1,7,c
 11392  0023D4  D016               	goto	i2l3514
 11393  0023D6  0438               	decf	ldexp@newexp+1,w,c
 11394  0023D8  A0D8               	btfss	status,0,c
 11395  0023DA  D013               	goto	i2l3514
 11396  0023DC  0E00               	movlw	0
 11397  0023DE  0100               	movlb	0	; () banked
 11398  0023E0  6FAC               	movwf	(_errno+1)& (0+255),b
 11399  0023E2  0E22               	movlw	34
 11400  0023E4  6FAB               	movwf	_errno& (0+255),b
 11401                           
 11402                           ; BSR set to: 0
 11403  0023E6  AE36               	btfss	ldexp@value+2,7,c
 11404  0023E8  D006               	goto	i2l3510
 11405                           
 11406                           ; BSR set to: 0
 11407  0023EA  0EFF               	movlw	255
 11408  0023EC  6E34               	movwf	?_ldexp,c
 11409  0023EE  0E7F               	movlw	127
 11410  0023F0  6E35               	movwf	?_ldexp+1,c
 11411  0023F2  0EFF               	movlw	255
 11412  0023F4  D7EC               	goto	L11
 11413  0023F6                     i2l3510:
 11414                           
 11415                           ; BSR set to: 0
 11416  0023F6  0EFF               	movlw	255
 11417  0023F8  6E34               	movwf	?_ldexp,c
 11418  0023FA  0E7F               	movlw	127
 11419  0023FC  6E35               	movwf	?_ldexp+1,c
 11420  0023FE  0E7F               	movlw	127
 11421  002400  D7E6               	goto	L11
 11422  002402                     i2l3514:
 11423  002402  3438               	rlcf	ldexp@newexp+1,w,c
 11424  002404  3038               	rrcf	ldexp@newexp+1,w,c
 11425  002406  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 11426  002408  3037               	rrcf	ldexp@newexp,w,c
 11427  00240A  6E39               	movwf	??_ldexp& (0+255),c
 11428  00240C  5036               	movf	ldexp@value+2,w,c
 11429  00240E  1839               	xorwf	??_ldexp,w,c
 11430  002410  0B80               	andlw	-128
 11431  002412  1839               	xorwf	??_ldexp,w,c
 11432  002414  6E36               	movwf	ldexp@value+2,c
 11433  002416  C037  F039         	movff	ldexp@newexp,??_ldexp
 11434  00241A  0E01               	movlw	1
 11435  00241C  1639               	andwf	??_ldexp,f,c
 11436  00241E  3239               	rrcf	??_ldexp,f,c
 11437  002420  3239               	rrcf	??_ldexp,f,c
 11438  002422  5035               	movf	ldexp@value+1,w,c
 11439  002424  1839               	xorwf	??_ldexp,w,c
 11440  002426  0B7F               	andlw	-129
 11441  002428  1839               	xorwf	??_ldexp,w,c
 11442  00242A  6E35               	movwf	ldexp@value+1,c
 11443  00242C  C034  F034         	movff	ldexp@value,?_ldexp
 11444  002430  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 11445  002434  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 11446  002438  0012               	return	
 11447  00243A                     __end_of_ldexp:
 11448                           	opt stack 0
 11449                           pclatu	equ	0xFFB
 11450                           pclath	equ	0xFFA
 11451                           tblptru	equ	0xFF8
 11452                           tblptrh	equ	0xFF7
 11453                           tblptrl	equ	0xFF6
 11454                           tablat	equ	0xFF5
 11455                           prodh	equ	0xFF4
 11456                           prodl	equ	0xFF3
 11457                           intcon	equ	0xFF2
 11458                           intcon2	equ	0xFF1
 11459                           intcon3	equ	0xFF0
 11460                           postinc0	equ	0xFEE
 11461                           fsr0h	equ	0xFEA
 11462                           fsr0l	equ	0xFE9
 11463                           wreg	equ	0xFE8
 11464                           postinc1	equ	0xFE6
 11465                           postdec1	equ	0xFE5
 11466                           fsr1h	equ	0xFE2
 11467                           fsr1l	equ	0xFE1
 11468                           indf2	equ	0xFDF
 11469                           postinc2	equ	0xFDE
 11470                           postdec2	equ	0xFDD
 11471                           fsr2h	equ	0xFDA
 11472                           fsr2l	equ	0xFD9
 11473                           status	equ	0xFD8
 11474                           
 11475 ;; *************** function _floor *****************
 11476 ;; Defined at:
 11477 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 11478 ;; Parameters:    Size  Location     Type
 11479 ;;  x               3   64[COMRAM] int 
 11480 ;; Auto vars:     Size  Location     Type
 11481 ;;  i               3   67[COMRAM] int 
 11482 ;;  expon           2   70[COMRAM] int 
 11483 ;; Return value:  Size  Location     Type
 11484 ;;                  3   64[COMRAM] int 
 11485 ;; Registers used:
 11486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11487 ;; Tracked objects:
 11488 ;;		On entry : 0/0
 11489 ;;		On exit  : 0/0
 11490 ;;		Unchanged: 0/0
 11491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11492 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;Total ram usage:        8 bytes
 11497 ;; Hardware stack levels used:    1
 11498 ;; Hardware stack levels required when called:    2
 11499 ;; This function calls:
 11500 ;;		___altoft
 11501 ;;		___ftadd
 11502 ;;		___fttol
 11503 ;;		_frexp
 11504 ;;		i2___ftge
 11505 ;; This function is called by:
 11506 ;;		_exp
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510                           	psect	text55
 11511  001F50                     __ptext55:
 11512                           	opt stack 0
 11513  001F50                     _floor:
 11514                           	opt stack 20
 11515                           
 11516                           ;incstack = 0
 11517  001F50  C041  F001         	movff	floor@x,frexp@value
 11518  001F54  C042  F002         	movff	floor@x+1,frexp@value+1
 11519  001F58  C043  F003         	movff	floor@x+2,frexp@value+2
 11520  001F5C  0E47               	movlw	low floor@expon
 11521  001F5E  6E04               	movwf	frexp@eptr,c
 11522  001F60  0E00               	movlw	high floor@expon
 11523  001F62  6E05               	movwf	frexp@eptr+1,c
 11524  001F64  EC13  F014         	call	_frexp	;wreg free
 11525  001F68  AE48               	btfss	floor@expon+1,7,c
 11526  001F6A  D010               	goto	i2l3468
 11527  001F6C  AE43               	btfss	floor@x+2,7,c
 11528  001F6E  D007               	goto	i2l3464
 11529  001F70  0E00               	movlw	0
 11530  001F72  6E41               	movwf	?_floor,c
 11531  001F74  0E80               	movlw	128
 11532  001F76  6E42               	movwf	?_floor+1,c
 11533  001F78  0EBF               	movlw	191
 11534  001F7A  6E43               	movwf	?_floor+2,c
 11535  001F7C  0012               	return	
 11536  001F7E                     i2l3464:
 11537  001F7E  0E00               	movlw	0
 11538  001F80  6E41               	movwf	?_floor,c
 11539  001F82  0E00               	movlw	0
 11540  001F84  6E42               	movwf	?_floor+1,c
 11541  001F86  0E00               	movlw	0
 11542  001F88  6E43               	movwf	?_floor+2,c
 11543  001F8A  0012               	return	
 11544  001F8C                     i2l3468:
 11545  001F8C  5048               	movf	floor@expon+1,w,c
 11546  001F8E  E104               	bnz	i2u303_40
 11547  001F90  0E15               	movlw	21
 11548  001F92  5C47               	subwf	floor@expon,w,c
 11549  001F94  A0D8               	btfss	status,0,c
 11550  001F96  D007               	goto	i2l3472
 11551  001F98                     i2u303_40:
 11552  001F98  C041  F041         	movff	floor@x,?_floor
 11553  001F9C  C042  F042         	movff	floor@x+1,?_floor+1
 11554  001FA0  C043  F043         	movff	floor@x+2,?_floor+2
 11555  001FA4  0012               	return	
 11556  001FA6                     i2l3472:
 11557  001FA6  C041  F028         	movff	floor@x,___fttol@f1
 11558  001FAA  C042  F029         	movff	floor@x+1,___fttol@f1+1
 11559  001FAE  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 11560  001FB2  EC54  F00D         	call	___fttol	;wreg free
 11561  001FB6  C028  F037         	movff	?___fttol,___altoft@c
 11562  001FBA  C029  F038         	movff	?___fttol+1,___altoft@c+1
 11563  001FBE  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 11564  001FC2  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 11565  001FC6  EC1B  F015         	call	___altoft	;wreg free
 11566  001FCA  C037  F044         	movff	?___altoft,floor@i
 11567  001FCE  C038  F045         	movff	?___altoft+1,floor@i+1
 11568  001FD2  C039  F046         	movff	?___altoft+2,floor@i+2
 11569  001FD6  C041  F001         	movff	floor@x,i2___ftge@ff1
 11570  001FDA  C042  F002         	movff	floor@x+1,i2___ftge@ff1+1
 11571  001FDE  C043  F003         	movff	floor@x+2,i2___ftge@ff1+2
 11572  001FE2  C044  F004         	movff	floor@i,i2___ftge@ff2
 11573  001FE6  C045  F005         	movff	floor@i+1,i2___ftge@ff2+1
 11574  001FEA  C046  F006         	movff	floor@i+2,i2___ftge@ff2+2
 11575  001FEE  ECCB  F013         	call	i2___ftge	;wreg free
 11576  001FF2  B0D8               	btfsc	status,0,c
 11577  001FF4  D015               	goto	i2l1082
 11578  001FF6  C044  F01C         	movff	floor@i,___ftadd@f1
 11579  001FFA  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 11580  001FFE  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 11581  002002  0E00               	movlw	0
 11582  002004  6E1F               	movwf	___ftadd@f2,c
 11583  002006  0E80               	movlw	128
 11584  002008  6E20               	movwf	___ftadd@f2+1,c
 11585  00200A  0EBF               	movlw	191
 11586  00200C  6E21               	movwf	___ftadd@f2+2,c
 11587  00200E  EC6A  F008         	call	___ftadd	;wreg free
 11588  002012  C01C  F041         	movff	?___ftadd,?_floor
 11589  002016  C01D  F042         	movff	?___ftadd+1,?_floor+1
 11590  00201A  C01E  F043         	movff	?___ftadd+2,?_floor+2
 11591  00201E  0012               	return	
 11592  002020                     i2l1082:
 11593  002020  C044  F041         	movff	floor@i,?_floor
 11594  002024  C045  F042         	movff	floor@i+1,?_floor+1
 11595  002028  C046  F043         	movff	floor@i+2,?_floor+2
 11596  00202C  0012               	return		;funcret
 11597  00202E                     __end_of_floor:
 11598                           	opt stack 0
 11599                           pclatu	equ	0xFFB
 11600                           pclath	equ	0xFFA
 11601                           tblptru	equ	0xFF8
 11602                           tblptrh	equ	0xFF7
 11603                           tblptrl	equ	0xFF6
 11604                           tablat	equ	0xFF5
 11605                           prodh	equ	0xFF4
 11606                           prodl	equ	0xFF3
 11607                           intcon	equ	0xFF2
 11608                           intcon2	equ	0xFF1
 11609                           intcon3	equ	0xFF0
 11610                           postinc0	equ	0xFEE
 11611                           fsr0h	equ	0xFEA
 11612                           fsr0l	equ	0xFE9
 11613                           wreg	equ	0xFE8
 11614                           postinc1	equ	0xFE6
 11615                           postdec1	equ	0xFE5
 11616                           fsr1h	equ	0xFE2
 11617                           fsr1l	equ	0xFE1
 11618                           indf2	equ	0xFDF
 11619                           postinc2	equ	0xFDE
 11620                           postdec2	equ	0xFDD
 11621                           fsr2h	equ	0xFDA
 11622                           fsr2l	equ	0xFD9
 11623                           status	equ	0xFD8
 11624                           
 11625 ;; *************** function i2___ftge *****************
 11626 ;; Defined at:
 11627 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;  ff1             3    0[COMRAM] float 
 11630 ;;  ff2             3    3[COMRAM] float 
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;		None
 11633 ;; Return value:  Size  Location     Type
 11634 ;;		None               void
 11635 ;; Registers used:
 11636 ;;		wreg, status,2, status,0
 11637 ;; Tracked objects:
 11638 ;;		On entry : 0/0
 11639 ;;		On exit  : 0/0
 11640 ;;		Unchanged: 0/0
 11641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11642 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11644 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11645 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11646 ;;Total ram usage:        9 bytes
 11647 ;; Hardware stack levels used:    1
 11648 ;; This function calls:
 11649 ;;		Nothing
 11650 ;; This function is called by:
 11651 ;;		_pow
 11652 ;;		_exp
 11653 ;;		_floor
 11654 ;; This function uses a non-reentrant model
 11655 ;;
 11656                           
 11657                           	psect	text56
 11658  002796                     __ptext56:
 11659                           	opt stack 0
 11660  002796                     i2___ftge:
 11661                           	opt stack 23
 11662                           
 11663                           ;incstack = 0
 11664  002796  AE03               	btfss	i2___ftge@ff1+2,7,c
 11665  002798  D016               	goto	i2l3312
 11666  00279A  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 11667  00279E  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 11668  0027A2  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 11669  0027A6  1E07               	comf	??i2___ftge,f,c
 11670  0027A8  1E08               	comf	??i2___ftge+1,f,c
 11671  0027AA  1E09               	comf	??i2___ftge+2,f,c
 11672  0027AC  2A07               	incf	??i2___ftge,f,c
 11673  0027AE  0E00               	movlw	0
 11674  0027B0  2208               	addwfc	??i2___ftge+1,f,c
 11675  0027B2  2209               	addwfc	??i2___ftge+2,f,c
 11676  0027B4  0E00               	movlw	0
 11677  0027B6  2407               	addwf	??i2___ftge,w,c
 11678  0027B8  6E01               	movwf	i2___ftge@ff1,c
 11679  0027BA  0E00               	movlw	0
 11680  0027BC  2008               	addwfc	??i2___ftge+1,w,c
 11681  0027BE  6E02               	movwf	i2___ftge@ff1+1,c
 11682  0027C0  0E80               	movlw	128
 11683  0027C2  2009               	addwfc	??i2___ftge+2,w,c
 11684  0027C4  6E03               	movwf	i2___ftge@ff1+2,c
 11685  0027C6                     i2l3312:
 11686  0027C6  AE06               	btfss	i2___ftge@ff2+2,7,c
 11687  0027C8  D016               	goto	i2l3316
 11688  0027CA  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 11689  0027CE  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 11690  0027D2  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 11691  0027D6  1E07               	comf	??i2___ftge,f,c
 11692  0027D8  1E08               	comf	??i2___ftge+1,f,c
 11693  0027DA  1E09               	comf	??i2___ftge+2,f,c
 11694  0027DC  2A07               	incf	??i2___ftge,f,c
 11695  0027DE  0E00               	movlw	0
 11696  0027E0  2208               	addwfc	??i2___ftge+1,f,c
 11697  0027E2  2209               	addwfc	??i2___ftge+2,f,c
 11698  0027E4  0E00               	movlw	0
 11699  0027E6  2407               	addwf	??i2___ftge,w,c
 11700  0027E8  6E04               	movwf	i2___ftge@ff2,c
 11701  0027EA  0E00               	movlw	0
 11702  0027EC  2008               	addwfc	??i2___ftge+1,w,c
 11703  0027EE  6E05               	movwf	i2___ftge@ff2+1,c
 11704  0027F0  0E80               	movlw	128
 11705  0027F2  2009               	addwfc	??i2___ftge+2,w,c
 11706  0027F4  6E06               	movwf	i2___ftge@ff2+2,c
 11707  0027F6                     i2l3316:
 11708  0027F6  0E00               	movlw	0
 11709  0027F8  1A01               	xorwf	i2___ftge@ff1,f,c
 11710  0027FA  0E00               	movlw	0
 11711  0027FC  1A02               	xorwf	i2___ftge@ff1+1,f,c
 11712  0027FE  0E80               	movlw	128
 11713  002800  1A03               	xorwf	i2___ftge@ff1+2,f,c
 11714  002802  0E00               	movlw	0
 11715  002804  1A04               	xorwf	i2___ftge@ff2,f,c
 11716  002806  0E00               	movlw	0
 11717  002808  1A05               	xorwf	i2___ftge@ff2+1,f,c
 11718  00280A  0E80               	movlw	128
 11719  00280C  1A06               	xorwf	i2___ftge@ff2+2,f,c
 11720  00280E  5004               	movf	i2___ftge@ff2,w,c
 11721  002810  5C01               	subwf	i2___ftge@ff1,w,c
 11722  002812  5005               	movf	i2___ftge@ff2+1,w,c
 11723  002814  5802               	subwfb	i2___ftge@ff1+1,w,c
 11724  002816  5006               	movf	i2___ftge@ff2+2,w,c
 11725  002818  5803               	subwfb	i2___ftge@ff1+2,w,c
 11726  00281A  B0D8               	btfsc	status,0,c
 11727  00281C  D002               	goto	i2l3322
 11728  00281E  90D8               	bcf	status,0,c
 11729  002820  0012               	return	
 11730  002822                     i2l3322:
 11731  002822  80D8               	bsf	status,0,c
 11732  002824  0012               	return	
 11733  002826                     __end_ofi2___ftge:
 11734                           	opt stack 0
 11735                           pclatu	equ	0xFFB
 11736                           pclath	equ	0xFFA
 11737                           tblptru	equ	0xFF8
 11738                           tblptrh	equ	0xFF7
 11739                           tblptrl	equ	0xFF6
 11740                           tablat	equ	0xFF5
 11741                           prodh	equ	0xFF4
 11742                           prodl	equ	0xFF3
 11743                           intcon	equ	0xFF2
 11744                           intcon2	equ	0xFF1
 11745                           intcon3	equ	0xFF0
 11746                           postinc0	equ	0xFEE
 11747                           fsr0h	equ	0xFEA
 11748                           fsr0l	equ	0xFE9
 11749                           wreg	equ	0xFE8
 11750                           postinc1	equ	0xFE6
 11751                           postdec1	equ	0xFE5
 11752                           fsr1h	equ	0xFE2
 11753                           fsr1l	equ	0xFE1
 11754                           indf2	equ	0xFDF
 11755                           postinc2	equ	0xFDE
 11756                           postdec2	equ	0xFDD
 11757                           fsr2h	equ	0xFDA
 11758                           fsr2l	equ	0xFD9
 11759                           status	equ	0xFD8
 11760                           
 11761 ;; *************** function _frexp *****************
 11762 ;; Defined at:
 11763 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 11764 ;; Parameters:    Size  Location     Type
 11765 ;;  value           3    0[COMRAM] float 
 11766 ;;  eptr            2    3[COMRAM] PTR int 
 11767 ;;		 -> log@exponent(2), floor@expon(2), 
 11768 ;; Auto vars:     Size  Location     Type
 11769 ;;		None
 11770 ;; Return value:  Size  Location     Type
 11771 ;;                  3    0[COMRAM] PTR int 
 11772 ;; Registers used:
 11773 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11774 ;; Tracked objects:
 11775 ;;		On entry : 0/0
 11776 ;;		On exit  : 0/0
 11777 ;;		Unchanged: 0/0
 11778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11779 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11781 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11782 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11783 ;;Total ram usage:        7 bytes
 11784 ;; Hardware stack levels used:    1
 11785 ;; This function calls:
 11786 ;;		Nothing
 11787 ;; This function is called by:
 11788 ;;		_floor
 11789 ;;		_log
 11790 ;; This function uses a non-reentrant model
 11791 ;;
 11792                           
 11793                           	psect	text57
 11794  002826                     __ptext57:
 11795                           	opt stack 0
 11796  002826                     _frexp:
 11797                           	opt stack 22
 11798                           
 11799                           ;incstack = 0
 11800  002826  5001               	movf	frexp@value,w,c
 11801  002828  1002               	iorwf	frexp@value+1,w,c
 11802  00282A  1003               	iorwf	frexp@value+2,w,c
 11803  00282C  A4D8               	btfss	status,2,c
 11804  00282E  D00F               	goto	i2l3290
 11805  002830  C004  FFD9         	movff	frexp@eptr,fsr2l
 11806  002834  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11807  002838  0E00               	movlw	0
 11808  00283A  6EDE               	movwf	postinc2,c
 11809  00283C  0E00               	movlw	0
 11810  00283E  6EDD               	movwf	postdec2,c
 11811  002840  0E00               	movlw	0
 11812  002842  6E01               	movwf	?_frexp,c
 11813  002844  0E00               	movlw	0
 11814  002846  6E02               	movwf	?_frexp+1,c
 11815  002848  0E00               	movlw	0
 11816  00284A  6E03               	movwf	?_frexp+2,c
 11817  00284C  0012               	return	
 11818  00284E                     i2l3290:
 11819  00284E  5003               	movf	frexp@value+2,w,c
 11820  002850  0B7F               	andlw	127
 11821  002852  6E06               	movwf	??_frexp& (0+255),c
 11822  002854  6A07               	clrf	(??_frexp+1)& (0+255),c
 11823  002856  90D8               	bcf	status,0,c
 11824  002858  3606               	rlcf	??_frexp,f,c
 11825  00285A  3607               	rlcf	??_frexp+1,f,c
 11826  00285C  C004  FFD9         	movff	frexp@eptr,fsr2l
 11827  002860  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11828  002864  C006  FFDE         	movff	??_frexp,postinc2
 11829  002868  C007  FFDD         	movff	??_frexp+1,postdec2
 11830  00286C  AE02               	btfss	frexp@value+1,7,c
 11831  00286E  D003               	goto	i2u282_40
 11832  002870  6A06               	clrf	??_frexp& (0+255),c
 11833  002872  2A06               	incf	??_frexp& (0+255),f,c
 11834  002874  D001               	goto	i2u282_48
 11835  002876                     i2u282_40:
 11836  002876  6A06               	clrf	??_frexp& (0+255),c
 11837  002878                     i2u282_48:
 11838  002878  5006               	movf	??_frexp,w,c
 11839  00287A  C004  FFD9         	movff	frexp@eptr,fsr2l
 11840  00287E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11841  002882  12DE               	iorwf	postinc2,f,c
 11842  002884  0E00               	movlw	0
 11843  002886  12DD               	iorwf	postdec2,f,c
 11844  002888  C004  FFD9         	movff	frexp@eptr,fsr2l
 11845  00288C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11846  002890  0E82               	movlw	130
 11847  002892  26DE               	addwf	postinc2,f,c
 11848  002894  0EFF               	movlw	255
 11849  002896  22DD               	addwfc	postdec2,f,c
 11850  002898  8003               	bsf	frexp@value+2,0,c
 11851  00289A  8203               	bsf	frexp@value+2,1,c
 11852  00289C  8403               	bsf	frexp@value+2,2,c
 11853  00289E  8603               	bsf	frexp@value+2,3,c
 11854  0028A0  8803               	bsf	frexp@value+2,4,c
 11855  0028A2  8A03               	bsf	frexp@value+2,5,c
 11856  0028A4  9C03               	bcf	frexp@value+2,6,c
 11857  0028A6  9E02               	bcf	frexp@value+1,7,c
 11858  0028A8  C001  F001         	movff	frexp@value,?_frexp
 11859  0028AC  C002  F002         	movff	frexp@value+1,?_frexp+1
 11860  0028B0  C003  F003         	movff	frexp@value+2,?_frexp+2
 11861  0028B4  0012               	return	
 11862  0028B6                     __end_of_frexp:
 11863                           	opt stack 0
 11864                           pclatu	equ	0xFFB
 11865                           pclath	equ	0xFFA
 11866                           tblptru	equ	0xFF8
 11867                           tblptrh	equ	0xFF7
 11868                           tblptrl	equ	0xFF6
 11869                           tablat	equ	0xFF5
 11870                           prodh	equ	0xFF4
 11871                           prodl	equ	0xFF3
 11872                           intcon	equ	0xFF2
 11873                           intcon2	equ	0xFF1
 11874                           intcon3	equ	0xFF0
 11875                           postinc0	equ	0xFEE
 11876                           fsr0h	equ	0xFEA
 11877                           fsr0l	equ	0xFE9
 11878                           wreg	equ	0xFE8
 11879                           postinc1	equ	0xFE6
 11880                           postdec1	equ	0xFE5
 11881                           fsr1h	equ	0xFE2
 11882                           fsr1l	equ	0xFE1
 11883                           indf2	equ	0xFDF
 11884                           postinc2	equ	0xFDE
 11885                           postdec2	equ	0xFDD
 11886                           fsr2h	equ	0xFDA
 11887                           fsr2l	equ	0xFD9
 11888                           status	equ	0xFD8
 11889                           
 11890 ;; *************** function ___fttol *****************
 11891 ;; Defined at:
 11892 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11893 ;; Parameters:    Size  Location     Type
 11894 ;;  f1              3   39[COMRAM] float 
 11895 ;; Auto vars:     Size  Location     Type
 11896 ;;  lval            4   49[COMRAM] unsigned long 
 11897 ;;  exp1            1   53[COMRAM] unsigned char 
 11898 ;;  sign1           1   48[COMRAM] unsigned char 
 11899 ;; Return value:  Size  Location     Type
 11900 ;;                  4   39[COMRAM] long 
 11901 ;; Registers used:
 11902 ;;		wreg, status,2, status,0
 11903 ;; Tracked objects:
 11904 ;;		On entry : 0/0
 11905 ;;		On exit  : 0/0
 11906 ;;		Unchanged: 0/0
 11907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11908 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11909 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11910 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11911 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11912 ;;Total ram usage:       15 bytes
 11913 ;; Hardware stack levels used:    1
 11914 ;; This function calls:
 11915 ;;		Nothing
 11916 ;; This function is called by:
 11917 ;;		_dec_to_hex
 11918 ;;		_pow
 11919 ;;		_exp
 11920 ;;		_floor
 11921 ;; This function uses a non-reentrant model
 11922 ;;
 11923                           
 11924                           	psect	text58
 11925  001AA8                     __ptext58:
 11926                           	opt stack 0
 11927  001AA8                     ___fttol:
 11928                           	opt stack 21
 11929                           
 11930                           ;incstack = 0
 11931  001AA8  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 11932  001AAC  6A2D               	clrf	(??___fttol+1)& (0+255),c
 11933  001AAE  6A2E               	clrf	(??___fttol+2)& (0+255),c
 11934  001AB0  3429               	rlcf	___fttol@f1+1,w,c
 11935  001AB2  362C               	rlcf	??___fttol& (0+255),f,c
 11936  001AB4  E301               	bnc	u273_41
 11937  001AB6  802D               	bsf	(??___fttol+1)& (0+255),0,c
 11938  001AB8                     u273_41:
 11939  001AB8  502C               	movf	??___fttol,w,c
 11940  001ABA  6E36               	movwf	___fttol@exp1,c
 11941  001ABC  5036               	movf	___fttol@exp1,w,c
 11942  001ABE  A4D8               	btfss	status,2,c
 11943  001AC0  D009               	goto	i2l3242
 11944  001AC2  0E00               	movlw	0
 11945  001AC4  6E28               	movwf	?___fttol,c
 11946  001AC6  0E00               	movlw	0
 11947  001AC8  6E29               	movwf	?___fttol+1,c
 11948  001ACA  0E00               	movlw	0
 11949  001ACC  6E2A               	movwf	?___fttol+2,c
 11950  001ACE  0E00               	movlw	0
 11951  001AD0  6E2B               	movwf	?___fttol+3,c
 11952  001AD2  0012               	return	
 11953  001AD4                     i2l3242:
 11954  001AD4  0E17               	movlw	23
 11955  001AD6  6E2C               	movwf	??___fttol& (0+255),c
 11956  001AD8  C028  F02D         	movff	___fttol@f1,??___fttol+1
 11957  001ADC  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 11958  001AE0  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 11959  001AE4  282C               	incf	??___fttol,w,c
 11960  001AE6  6E30               	movwf	(??___fttol+4)& (0+255),c
 11961  001AE8  D004               	goto	i2u275_40
 11962  001AEA                     i2u275_45:
 11963  001AEA  90D8               	bcf	status,0,c
 11964  001AEC  322F               	rrcf	??___fttol+3,f,c
 11965  001AEE  322E               	rrcf	??___fttol+2,f,c
 11966  001AF0  322D               	rrcf	??___fttol+1,f,c
 11967  001AF2                     i2u275_40:
 11968  001AF2  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 11969  001AF4  D7FA               	goto	i2u275_45
 11970  001AF6  502D               	movf	??___fttol+1,w,c
 11971  001AF8  6E31               	movwf	___fttol@sign1,c
 11972  001AFA  8E29               	bsf	___fttol@f1+1,7,c
 11973  001AFC  0EFF               	movlw	255
 11974  001AFE  1628               	andwf	___fttol@f1,f,c
 11975  001B00  0EFF               	movlw	255
 11976  001B02  1629               	andwf	___fttol@f1+1,f,c
 11977  001B04  0E00               	movlw	0
 11978  001B06  162A               	andwf	___fttol@f1+2,f,c
 11979  001B08  5028               	movf	___fttol@f1,w,c
 11980  001B0A  6E32               	movwf	___fttol@lval,c
 11981  001B0C  5029               	movf	___fttol@f1+1,w,c
 11982  001B0E  6E33               	movwf	___fttol@lval+1,c
 11983  001B10  502A               	movf	___fttol@f1+2,w,c
 11984  001B12  6E34               	movwf	___fttol@lval+2,c
 11985  001B14  6A35               	clrf	___fttol@lval+3,c
 11986  001B16  0E8E               	movlw	142
 11987  001B18  5E36               	subwf	___fttol@exp1,f,c
 11988  001B1A  AE36               	btfss	___fttol@exp1,7,c
 11989  001B1C  D016               	goto	i2l3264
 11990  001B1E  5036               	movf	___fttol@exp1,w,c
 11991  001B20  0A80               	xorlw	128
 11992  001B22  0F8F               	addlw	143
 11993  001B24  B0D8               	btfsc	status,0,c
 11994  001B26  D009               	goto	i2l3260
 11995  001B28  0E00               	movlw	0
 11996  001B2A  6E28               	movwf	?___fttol,c
 11997  001B2C  0E00               	movlw	0
 11998  001B2E  6E29               	movwf	?___fttol+1,c
 11999  001B30  0E00               	movlw	0
 12000  001B32  6E2A               	movwf	?___fttol+2,c
 12001  001B34  0E00               	movlw	0
 12002  001B36  6E2B               	movwf	?___fttol+3,c
 12003  001B38  0012               	return	
 12004  001B3A                     i2l3260:
 12005  001B3A  90D8               	bcf	status,0,c
 12006  001B3C  3235               	rrcf	___fttol@lval+3,f,c
 12007  001B3E  3234               	rrcf	___fttol@lval+2,f,c
 12008  001B40  3233               	rrcf	___fttol@lval+1,f,c
 12009  001B42  3232               	rrcf	___fttol@lval,f,c
 12010  001B44  3E36               	incfsz	___fttol@exp1,f,c
 12011  001B46  D7F9               	goto	i2l3260
 12012  001B48  D015               	goto	i2l3274
 12013  001B4A                     i2l3264:
 12014  001B4A  0E17               	movlw	23
 12015  001B4C  6436               	cpfsgt	___fttol@exp1,c
 12016  001B4E  D00F               	goto	i2l3272
 12017  001B50  0E00               	movlw	0
 12018  001B52  6E28               	movwf	?___fttol,c
 12019  001B54  0E00               	movlw	0
 12020  001B56  6E29               	movwf	?___fttol+1,c
 12021  001B58  0E00               	movlw	0
 12022  001B5A  6E2A               	movwf	?___fttol+2,c
 12023  001B5C  0E00               	movlw	0
 12024  001B5E  6E2B               	movwf	?___fttol+3,c
 12025  001B60  0012               	return	
 12026  001B62                     i2l3270:
 12027  001B62  90D8               	bcf	status,0,c
 12028  001B64  3632               	rlcf	___fttol@lval,f,c
 12029  001B66  3633               	rlcf	___fttol@lval+1,f,c
 12030  001B68  3634               	rlcf	___fttol@lval+2,f,c
 12031  001B6A  3635               	rlcf	___fttol@lval+3,f,c
 12032  001B6C  0636               	decf	___fttol@exp1,f,c
 12033  001B6E                     i2l3272:
 12034  001B6E  5036               	movf	___fttol@exp1,w,c
 12035  001B70  A4D8               	btfss	status,2,c
 12036  001B72  D7F7               	goto	i2l3270
 12037  001B74                     i2l3274:
 12038  001B74  5031               	movf	___fttol@sign1,w,c
 12039  001B76  B4D8               	btfsc	status,2,c
 12040  001B78  D008               	goto	i2l3278
 12041  001B7A  1E35               	comf	___fttol@lval+3,f,c
 12042  001B7C  1E34               	comf	___fttol@lval+2,f,c
 12043  001B7E  1E33               	comf	___fttol@lval+1,f,c
 12044  001B80  6C32               	negf	___fttol@lval,c
 12045  001B82  0E00               	movlw	0
 12046  001B84  2233               	addwfc	___fttol@lval+1,f,c
 12047  001B86  2234               	addwfc	___fttol@lval+2,f,c
 12048  001B88  2235               	addwfc	___fttol@lval+3,f,c
 12049  001B8A                     i2l3278:
 12050  001B8A  C032  F028         	movff	___fttol@lval,?___fttol
 12051  001B8E  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 12052  001B92  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 12053  001B96  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 12054  001B9A  0012               	return	
 12055  001B9C                     __end_of___fttol:
 12056                           	opt stack 0
 12057                           pclatu	equ	0xFFB
 12058                           pclath	equ	0xFFA
 12059                           tblptru	equ	0xFF8
 12060                           tblptrh	equ	0xFF7
 12061                           tblptrl	equ	0xFF6
 12062                           tablat	equ	0xFF5
 12063                           prodh	equ	0xFF4
 12064                           prodl	equ	0xFF3
 12065                           intcon	equ	0xFF2
 12066                           intcon2	equ	0xFF1
 12067                           intcon3	equ	0xFF0
 12068                           postinc0	equ	0xFEE
 12069                           fsr0h	equ	0xFEA
 12070                           fsr0l	equ	0xFE9
 12071                           wreg	equ	0xFE8
 12072                           postinc1	equ	0xFE6
 12073                           postdec1	equ	0xFE5
 12074                           fsr1h	equ	0xFE2
 12075                           fsr1l	equ	0xFE1
 12076                           indf2	equ	0xFDF
 12077                           postinc2	equ	0xFDE
 12078                           postdec2	equ	0xFDD
 12079                           fsr2h	equ	0xFDA
 12080                           fsr2l	equ	0xFD9
 12081                           status	equ	0xFD8
 12082                           
 12083 ;; *************** function ___altoft *****************
 12084 ;; Defined at:
 12085 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;  c               4   54[COMRAM] long 
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  sign            1   63[COMRAM] unsigned char 
 12090 ;;  exp             1   62[COMRAM] unsigned char 
 12091 ;; Return value:  Size  Location     Type
 12092 ;;                  3   54[COMRAM] float 
 12093 ;; Registers used:
 12094 ;;		wreg, status,2, status,0, cstack
 12095 ;; Tracked objects:
 12096 ;;		On entry : 0/0
 12097 ;;		On exit  : 0/0
 12098 ;;		Unchanged: 0/0
 12099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12100 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12102 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12103 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12104 ;;Total ram usage:       10 bytes
 12105 ;; Hardware stack levels used:    1
 12106 ;; Hardware stack levels required when called:    1
 12107 ;; This function calls:
 12108 ;;		i2___ftpack
 12109 ;; This function is called by:
 12110 ;;		_floor
 12111 ;; This function uses a non-reentrant model
 12112 ;;
 12113                           
 12114                           	psect	text59
 12115  002A36                     __ptext59:
 12116                           	opt stack 0
 12117  002A36                     ___altoft:
 12118                           	opt stack 20
 12119                           
 12120                           ;incstack = 0
 12121  002A36  0E00               	movlw	0
 12122  002A38  6E40               	movwf	___altoft@sign,c
 12123  002A3A  0E8E               	movlw	142
 12124  002A3C  6E3F               	movwf	___altoft@exp,c
 12125  002A3E  AE3A               	btfss	___altoft@c+3,7,c
 12126  002A40  D011               	goto	i2l3160
 12127  002A42  1E3A               	comf	___altoft@c+3,f,c
 12128  002A44  1E39               	comf	___altoft@c+2,f,c
 12129  002A46  1E38               	comf	___altoft@c+1,f,c
 12130  002A48  6C37               	negf	___altoft@c,c
 12131  002A4A  0E00               	movlw	0
 12132  002A4C  2238               	addwfc	___altoft@c+1,f,c
 12133  002A4E  2239               	addwfc	___altoft@c+2,f,c
 12134  002A50  223A               	addwfc	___altoft@c+3,f,c
 12135  002A52  0E01               	movlw	1
 12136  002A54  6E40               	movwf	___altoft@sign,c
 12137  002A56  D006               	goto	i2l3160
 12138  002A58                     i2l3158:
 12139  002A58  90D8               	bcf	status,0,c
 12140  002A5A  323A               	rrcf	___altoft@c+3,f,c
 12141  002A5C  3239               	rrcf	___altoft@c+2,f,c
 12142  002A5E  3238               	rrcf	___altoft@c+1,f,c
 12143  002A60  3237               	rrcf	___altoft@c,f,c
 12144  002A62  2A3F               	incf	___altoft@exp,f,c
 12145  002A64                     i2l3160:
 12146  002A64  0E00               	movlw	0
 12147  002A66  1437               	andwf	___altoft@c,w,c
 12148  002A68  6E3B               	movwf	??___altoft& (0+255),c
 12149  002A6A  0E00               	movlw	0
 12150  002A6C  1438               	andwf	___altoft@c+1,w,c
 12151  002A6E  6E3C               	movwf	(??___altoft+1)& (0+255),c
 12152  002A70  0E00               	movlw	0
 12153  002A72  1439               	andwf	___altoft@c+2,w,c
 12154  002A74  6E3D               	movwf	(??___altoft+2)& (0+255),c
 12155  002A76  0EFF               	movlw	255
 12156  002A78  143A               	andwf	___altoft@c+3,w,c
 12157  002A7A  6E3E               	movwf	(??___altoft+3)& (0+255),c
 12158  002A7C  503B               	movf	??___altoft,w,c
 12159  002A7E  103C               	iorwf	??___altoft+1,w,c
 12160  002A80  103D               	iorwf	??___altoft+2,w,c
 12161  002A82  103E               	iorwf	??___altoft+3,w,c
 12162  002A84  A4D8               	btfss	status,2,c
 12163  002A86  D7E8               	goto	i2l3158
 12164  002A88  C037  F001         	movff	___altoft@c,i2___ftpack@arg
 12165  002A8C  C038  F002         	movff	___altoft@c+1,i2___ftpack@arg+1
 12166  002A90  C039  F003         	movff	___altoft@c+2,i2___ftpack@arg+2
 12167  002A94  C03F  F004         	movff	___altoft@exp,i2___ftpack@exp
 12168  002A98  C040  F005         	movff	___altoft@sign,i2___ftpack@sign
 12169  002A9C  EC7B  F012         	call	i2___ftpack	;wreg free
 12170  002AA0  C001  F037         	movff	?i2___ftpack,?___altoft
 12171  002AA4  C002  F038         	movff	?i2___ftpack+1,?___altoft+1
 12172  002AA8  C003  F039         	movff	?i2___ftpack+2,?___altoft+2
 12173  002AAC  0012               	return	
 12174  002AAE                     __end_of___altoft:
 12175                           	opt stack 0
 12176                           pclatu	equ	0xFFB
 12177                           pclath	equ	0xFFA
 12178                           tblptru	equ	0xFF8
 12179                           tblptrh	equ	0xFF7
 12180                           tblptrl	equ	0xFF6
 12181                           tablat	equ	0xFF5
 12182                           prodh	equ	0xFF4
 12183                           prodl	equ	0xFF3
 12184                           intcon	equ	0xFF2
 12185                           intcon2	equ	0xFF1
 12186                           intcon3	equ	0xFF0
 12187                           postinc0	equ	0xFEE
 12188                           fsr0h	equ	0xFEA
 12189                           fsr0l	equ	0xFE9
 12190                           wreg	equ	0xFE8
 12191                           postinc1	equ	0xFE6
 12192                           postdec1	equ	0xFE5
 12193                           fsr1h	equ	0xFE2
 12194                           fsr1l	equ	0xFE1
 12195                           indf2	equ	0xFDF
 12196                           postinc2	equ	0xFDE
 12197                           postdec2	equ	0xFDD
 12198                           fsr2h	equ	0xFDA
 12199                           fsr2l	equ	0xFD9
 12200                           status	equ	0xFD8
 12201                           
 12202 ;; *************** function _eval_poly *****************
 12203 ;; Defined at:
 12204 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 12205 ;; Parameters:    Size  Location     Type
 12206 ;;  x               3   39[COMRAM] float 
 12207 ;;  d               2   42[COMRAM] PTR const 
 12208 ;;		 -> log@coeff(27), exp@coeff(30), 
 12209 ;;  n               2   44[COMRAM] int 
 12210 ;; Auto vars:     Size  Location     Type
 12211 ;;  res             3   48[COMRAM] int 
 12212 ;; Return value:  Size  Location     Type
 12213 ;;                  3   39[COMRAM] int 
 12214 ;; Registers used:
 12215 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12216 ;; Tracked objects:
 12217 ;;		On entry : 0/0
 12218 ;;		On exit  : 0/0
 12219 ;;		Unchanged: 0/0
 12220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12221 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12222 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12223 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12224 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12225 ;;Total ram usage:       12 bytes
 12226 ;; Hardware stack levels used:    1
 12227 ;; Hardware stack levels required when called:    2
 12228 ;; This function calls:
 12229 ;;		___ftadd
 12230 ;;		i2___ftmul
 12231 ;;		i2___wmul
 12232 ;; This function is called by:
 12233 ;;		_exp
 12234 ;;		_log
 12235 ;; This function uses a non-reentrant model
 12236 ;;
 12237                           
 12238                           	psect	text60
 12239  0021DA                     __ptext60:
 12240                           	opt stack 0
 12241  0021DA                     _eval_poly:
 12242                           	opt stack 20
 12243                           
 12244                           ;incstack = 0
 12245  0021DA  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 12246  0021DE  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 12247  0021E2  0E00               	movlw	0
 12248  0021E4  6E04               	movwf	i2___wmul@multiplicand+1,c
 12249  0021E6  0E03               	movlw	3
 12250  0021E8  6E03               	movwf	i2___wmul@multiplicand,c
 12251  0021EA  EC00  F018         	call	i2___wmul	;wreg free
 12252  0021EE  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 12253  0021F2  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 12254  0021F6  5001               	movf	?i2___wmul,w,c
 12255  0021F8  262F               	addwf	??_eval_poly,f,c
 12256  0021FA  5002               	movf	?i2___wmul+1,w,c
 12257  0021FC  2230               	addwfc	??_eval_poly+1,f,c
 12258  0021FE  C02F  FFF6         	movff	??_eval_poly,tblptrl
 12259  002202  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 12260  002206                     	if	0	;tblptru may be non-zero
 12261  002206                     	endif
 12262  002206                     	if	0	;tblptru may be non-zero
 12263  002206                     	endif
 12264  002206  0009               	tblrd		*+
 12265  002208  CFF5 F031          	movff	tablat,eval_poly@res
 12266  00220C  0009               	tblrd		*+
 12267  00220E  CFF5 F032          	movff	tablat,eval_poly@res+1
 12268  002212  000A               	tblrd		*-
 12269  002214  CFF5 F033          	movff	tablat,eval_poly@res+2
 12270  002218  D03E               	goto	i2l3482
 12271  00221A                     i2l3480:
 12272  00221A  C031  F010         	movff	eval_poly@res,i2___ftmul@f2
 12273  00221E  C032  F011         	movff	eval_poly@res+1,i2___ftmul@f2+1
 12274  002222  C033  F012         	movff	eval_poly@res+2,i2___ftmul@f2+2
 12275  002226  C028  F00D         	movff	eval_poly@x,i2___ftmul@f1
 12276  00222A  C029  F00E         	movff	eval_poly@x+1,i2___ftmul@f1+1
 12277  00222E  C02A  F00F         	movff	eval_poly@x+2,i2___ftmul@f1+2
 12278  002232  ECCE  F00D         	call	i2___ftmul	;wreg free
 12279  002236  C00D  F01C         	movff	?i2___ftmul,___ftadd@f1
 12280  00223A  C00E  F01D         	movff	?i2___ftmul+1,___ftadd@f1+1
 12281  00223E  C00F  F01E         	movff	?i2___ftmul+2,___ftadd@f1+2
 12282  002242  0E00               	movlw	0
 12283  002244  6E04               	movwf	i2___wmul@multiplicand+1,c
 12284  002246  0E03               	movlw	3
 12285  002248  6E03               	movwf	i2___wmul@multiplicand,c
 12286  00224A  062D               	decf	eval_poly@n,f,c
 12287  00224C  A0D8               	btfss	status,0,c
 12288  00224E  062E               	decf	eval_poly@n+1,f,c
 12289  002250  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 12290  002254  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 12291  002258  EC00  F018         	call	i2___wmul	;wreg free
 12292  00225C  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 12293  002260  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 12294  002264  5001               	movf	?i2___wmul,w,c
 12295  002266  262F               	addwf	??_eval_poly,f,c
 12296  002268  5002               	movf	?i2___wmul+1,w,c
 12297  00226A  2230               	addwfc	??_eval_poly+1,f,c
 12298  00226C  C02F  FFF6         	movff	??_eval_poly,tblptrl
 12299  002270  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 12300  002274                     	if	0	;tblptru may be non-zero
 12301  002274                     	endif
 12302  002274                     	if	0	;tblptru may be non-zero
 12303  002274                     	endif
 12304  002274  0009               	tblrd		*+
 12305  002276  CFF5 F01F          	movff	tablat,___ftadd@f2
 12306  00227A  0009               	tblrd		*+
 12307  00227C  CFF5 F020          	movff	tablat,___ftadd@f2+1
 12308  002280  000A               	tblrd		*-
 12309  002282  CFF5 F021          	movff	tablat,___ftadd@f2+2
 12310  002286  EC6A  F008         	call	___ftadd	;wreg free
 12311  00228A  C01C  F031         	movff	?___ftadd,eval_poly@res
 12312  00228E  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 12313  002292  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 12314  002296                     i2l3482:
 12315  002296  502D               	movf	eval_poly@n,w,c
 12316  002298  102E               	iorwf	eval_poly@n+1,w,c
 12317  00229A  A4D8               	btfss	status,2,c
 12318  00229C  D7BE               	goto	i2l3480
 12319  00229E  C031  F028         	movff	eval_poly@res,?_eval_poly
 12320  0022A2  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 12321  0022A6  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 12322  0022AA  0012               	return		;funcret
 12323  0022AC                     __end_of_eval_poly:
 12324                           	opt stack 0
 12325                           pclatu	equ	0xFFB
 12326                           pclath	equ	0xFFA
 12327                           tblptru	equ	0xFF8
 12328                           tblptrh	equ	0xFF7
 12329                           tblptrl	equ	0xFF6
 12330                           tablat	equ	0xFF5
 12331                           prodh	equ	0xFF4
 12332                           prodl	equ	0xFF3
 12333                           intcon	equ	0xFF2
 12334                           intcon2	equ	0xFF1
 12335                           intcon3	equ	0xFF0
 12336                           postinc0	equ	0xFEE
 12337                           fsr0h	equ	0xFEA
 12338                           fsr0l	equ	0xFE9
 12339                           wreg	equ	0xFE8
 12340                           postinc1	equ	0xFE6
 12341                           postdec1	equ	0xFE5
 12342                           fsr1h	equ	0xFE2
 12343                           fsr1l	equ	0xFE1
 12344                           indf2	equ	0xFDF
 12345                           postinc2	equ	0xFDE
 12346                           postdec2	equ	0xFDD
 12347                           fsr2h	equ	0xFDA
 12348                           fsr2l	equ	0xFD9
 12349                           status	equ	0xFD8
 12350                           
 12351 ;; *************** function i2___wmul *****************
 12352 ;; Defined at:
 12353 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;  multiplier      2    0[COMRAM] unsigned int 
 12356 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;  __wmul          2    4[COMRAM] unsigned int 
 12359 ;; Return value:  Size  Location     Type
 12360 ;;                  2    0[COMRAM] unsigned int 
 12361 ;; Registers used:
 12362 ;;		wreg, status,2, status,0, prodl, prodh
 12363 ;; Tracked objects:
 12364 ;;		On entry : 0/0
 12365 ;;		On exit  : 0/0
 12366 ;;		Unchanged: 0/0
 12367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12368 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12371 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12372 ;;Total ram usage:        6 bytes
 12373 ;; Hardware stack levels used:    1
 12374 ;; This function calls:
 12375 ;;		Nothing
 12376 ;; This function is called by:
 12377 ;;		_isr
 12378 ;;		_eval_poly
 12379 ;;		i2_printf
 12380 ;; This function uses a non-reentrant model
 12381 ;;
 12382                           
 12383                           	psect	text61
 12384  003000                     __ptext61:
 12385                           	opt stack 0
 12386  003000                     i2___wmul:
 12387                           	opt stack 24
 12388                           
 12389                           ;incstack = 0
 12390  003000  5001               	movf	i2___wmul@multiplier,w,c
 12391  003002  0203               	mulwf	i2___wmul@multiplicand,c
 12392  003004  CFF3 F005          	movff	prodl,i2___wmul@product
 12393  003008  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12394  00300C  5001               	movf	i2___wmul@multiplier,w,c
 12395  00300E  0204               	mulwf	i2___wmul@multiplicand+1,c
 12396  003010  50F3               	movf	prodl,w,c
 12397  003012  2606               	addwf	i2___wmul@product+1,f,c
 12398  003014  5002               	movf	i2___wmul@multiplier+1,w,c
 12399  003016  0203               	mulwf	i2___wmul@multiplicand,c
 12400  003018  50F3               	movf	prodl,w,c
 12401  00301A  2606               	addwf	i2___wmul@product+1,f,c
 12402  00301C  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12403  003020  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12404  003024  0012               	return	
 12405  003026                     __end_ofi2___wmul:
 12406                           	opt stack 0
 12407                           pclatu	equ	0xFFB
 12408                           pclath	equ	0xFFA
 12409                           tblptru	equ	0xFF8
 12410                           tblptrh	equ	0xFF7
 12411                           tblptrl	equ	0xFF6
 12412                           tablat	equ	0xFF5
 12413                           prodh	equ	0xFF4
 12414                           prodl	equ	0xFF3
 12415                           intcon	equ	0xFF2
 12416                           intcon2	equ	0xFF1
 12417                           intcon3	equ	0xFF0
 12418                           postinc0	equ	0xFEE
 12419                           fsr0h	equ	0xFEA
 12420                           fsr0l	equ	0xFE9
 12421                           wreg	equ	0xFE8
 12422                           postinc1	equ	0xFE6
 12423                           postdec1	equ	0xFE5
 12424                           fsr1h	equ	0xFE2
 12425                           fsr1l	equ	0xFE1
 12426                           indf2	equ	0xFDF
 12427                           postinc2	equ	0xFDE
 12428                           postdec2	equ	0xFDD
 12429                           fsr2h	equ	0xFDA
 12430                           fsr2l	equ	0xFD9
 12431                           status	equ	0xFD8
 12432                           
 12433 ;; *************** function i2___ftmul *****************
 12434 ;; Defined at:
 12435 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 12436 ;; Parameters:    Size  Location     Type
 12437 ;;  f1              3   12[COMRAM] float 
 12438 ;;  f2              3   15[COMRAM] float 
 12439 ;; Auto vars:     Size  Location     Type
 12440 ;;  __ftmul         3   22[COMRAM] unsigned um
 12441 ;;  __ftmul         1   26[COMRAM] unsigned char 
 12442 ;;  __ftmul         1   25[COMRAM] unsigned char 
 12443 ;;  __ftmul         1   21[COMRAM] unsigned char 
 12444 ;; Return value:  Size  Location     Type
 12445 ;;                  3   12[COMRAM] float 
 12446 ;; Registers used:
 12447 ;;		wreg, status,2, status,0, cstack
 12448 ;; Tracked objects:
 12449 ;;		On entry : 0/0
 12450 ;;		On exit  : 0/0
 12451 ;;		Unchanged: 0/0
 12452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12453 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12454 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12455 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12456 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12457 ;;Total ram usage:       15 bytes
 12458 ;; Hardware stack levels used:    1
 12459 ;; Hardware stack levels required when called:    1
 12460 ;; This function calls:
 12461 ;;		i2___ftpack
 12462 ;; This function is called by:
 12463 ;;		_dec_to_hex
 12464 ;;		_pow
 12465 ;;		_exp
 12466 ;;		_log
 12467 ;;		_eval_poly
 12468 ;; This function uses a non-reentrant model
 12469 ;;
 12470                           
 12471                           	psect	text62
 12472  001B9C                     __ptext62:
 12473                           	opt stack 0
 12474  001B9C                     i2___ftmul:
 12475                           	opt stack 23
 12476                           
 12477                           ;incstack = 0
 12478  001B9C  C00F  F013         	movff	i2___ftmul@f1+2,??i2___ftmul
 12479  001BA0  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
 12480  001BA2  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
 12481  001BA4  340E               	rlcf	i2___ftmul@f1+1,w,c
 12482  001BA6  3613               	rlcf	??i2___ftmul& (0+255),f,c
 12483  001BA8  E301               	bnc	u286_41
 12484  001BAA  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12485  001BAC                     u286_41:
 12486  001BAC  5013               	movf	??i2___ftmul,w,c
 12487  001BAE  6E16               	movwf	i2___ftmul@exp,c
 12488  001BB0  5016               	movf	i2___ftmul@exp,w,c
 12489  001BB2  A4D8               	btfss	status,2,c
 12490  001BB4  D007               	goto	i2l3332
 12491  001BB6  0E00               	movlw	0
 12492  001BB8  6E0D               	movwf	?i2___ftmul,c
 12493  001BBA  0E00               	movlw	0
 12494  001BBC  6E0E               	movwf	?i2___ftmul+1,c
 12495  001BBE  0E00               	movlw	0
 12496  001BC0  6E0F               	movwf	?i2___ftmul+2,c
 12497  001BC2  0012               	return	
 12498  001BC4                     i2l3332:
 12499  001BC4  C012  F013         	movff	i2___ftmul@f2+2,??i2___ftmul
 12500  001BC8  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
 12501  001BCA  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
 12502  001BCC  3411               	rlcf	i2___ftmul@f2+1,w,c
 12503  001BCE  3613               	rlcf	??i2___ftmul& (0+255),f,c
 12504  001BD0  E301               	bnc	u288_41
 12505  001BD2  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12506  001BD4                     u288_41:
 12507  001BD4  5013               	movf	??i2___ftmul,w,c
 12508  001BD6  6E1B               	movwf	i2___ftmul@sign,c
 12509  001BD8  501B               	movf	i2___ftmul@sign,w,c
 12510  001BDA  A4D8               	btfss	status,2,c
 12511  001BDC  D007               	goto	i2l3338
 12512  001BDE  0E00               	movlw	0
 12513  001BE0  6E0D               	movwf	?i2___ftmul,c
 12514  001BE2  0E00               	movlw	0
 12515  001BE4  6E0E               	movwf	?i2___ftmul+1,c
 12516  001BE6  0E00               	movlw	0
 12517  001BE8  6E0F               	movwf	?i2___ftmul+2,c
 12518  001BEA  0012               	return	
 12519  001BEC                     i2l3338:
 12520  001BEC  501B               	movf	i2___ftmul@sign,w,c
 12521  001BEE  0F7B               	addlw	123
 12522  001BF0  2616               	addwf	i2___ftmul@exp,f,c
 12523  001BF2  C00F  F01B         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 12524  001BF6  5012               	movf	i2___ftmul@f2+2,w,c
 12525  001BF8  1A1B               	xorwf	i2___ftmul@sign,f,c
 12526  001BFA  0E80               	movlw	128
 12527  001BFC  161B               	andwf	i2___ftmul@sign,f,c
 12528  001BFE  8E0E               	bsf	i2___ftmul@f1+1,7,c
 12529  001C00  8E11               	bsf	i2___ftmul@f2+1,7,c
 12530  001C02  0EFF               	movlw	255
 12531  001C04  1610               	andwf	i2___ftmul@f2,f,c
 12532  001C06  0EFF               	movlw	255
 12533  001C08  1611               	andwf	i2___ftmul@f2+1,f,c
 12534  001C0A  0E00               	movlw	0
 12535  001C0C  1612               	andwf	i2___ftmul@f2+2,f,c
 12536  001C0E  0E00               	movlw	0
 12537  001C10  6E17               	movwf	i2___ftmul@f3_as_product,c
 12538  001C12  0E00               	movlw	0
 12539  001C14  6E18               	movwf	i2___ftmul@f3_as_product+1,c
 12540  001C16  0E00               	movlw	0
 12541  001C18  6E19               	movwf	i2___ftmul@f3_as_product+2,c
 12542  001C1A  0E07               	movlw	7
 12543  001C1C  6E1A               	movwf	i2___ftmul@cntr,c
 12544  001C1E                     i2l3352:
 12545  001C1E  A00D               	btfss	i2___ftmul@f1,0,c
 12546  001C20  D006               	goto	i2l3356
 12547  001C22  5010               	movf	i2___ftmul@f2,w,c
 12548  001C24  2617               	addwf	i2___ftmul@f3_as_product,f,c
 12549  001C26  5011               	movf	i2___ftmul@f2+1,w,c
 12550  001C28  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
 12551  001C2A  5012               	movf	i2___ftmul@f2+2,w,c
 12552  001C2C  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
 12553  001C2E                     i2l3356:
 12554  001C2E  90D8               	bcf	status,0,c
 12555  001C30  320F               	rrcf	i2___ftmul@f1+2,f,c
 12556  001C32  320E               	rrcf	i2___ftmul@f1+1,f,c
 12557  001C34  320D               	rrcf	i2___ftmul@f1,f,c
 12558  001C36  90D8               	bcf	status,0,c
 12559  001C38  3610               	rlcf	i2___ftmul@f2,f,c
 12560  001C3A  3611               	rlcf	i2___ftmul@f2+1,f,c
 12561  001C3C  3612               	rlcf	i2___ftmul@f2+2,f,c
 12562  001C3E  2E1A               	decfsz	i2___ftmul@cntr,f,c
 12563  001C40  D7EE               	goto	i2l3352
 12564  001C42  0E09               	movlw	9
 12565  001C44  6E1A               	movwf	i2___ftmul@cntr,c
 12566  001C46                     i2l3362:
 12567  001C46  A00D               	btfss	i2___ftmul@f1,0,c
 12568  001C48  D006               	goto	i2l3366
 12569  001C4A  5010               	movf	i2___ftmul@f2,w,c
 12570  001C4C  2617               	addwf	i2___ftmul@f3_as_product,f,c
 12571  001C4E  5011               	movf	i2___ftmul@f2+1,w,c
 12572  001C50  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
 12573  001C52  5012               	movf	i2___ftmul@f2+2,w,c
 12574  001C54  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
 12575  001C56                     i2l3366:
 12576  001C56  90D8               	bcf	status,0,c
 12577  001C58  320F               	rrcf	i2___ftmul@f1+2,f,c
 12578  001C5A  320E               	rrcf	i2___ftmul@f1+1,f,c
 12579  001C5C  320D               	rrcf	i2___ftmul@f1,f,c
 12580  001C5E  90D8               	bcf	status,0,c
 12581  001C60  3219               	rrcf	i2___ftmul@f3_as_product+2,f,c
 12582  001C62  3218               	rrcf	i2___ftmul@f3_as_product+1,f,c
 12583  001C64  3217               	rrcf	i2___ftmul@f3_as_product,f,c
 12584  001C66  2E1A               	decfsz	i2___ftmul@cntr,f,c
 12585  001C68  D7EE               	goto	i2l3362
 12586  001C6A  C017  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 12587  001C6E  C018  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 12588  001C72  C019  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 12589  001C76  C016  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 12590  001C7A  C01B  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 12591  001C7E  EC7B  F012         	call	i2___ftpack	;wreg free
 12592  001C82  C001  F00D         	movff	?i2___ftpack,?i2___ftmul
 12593  001C86  C002  F00E         	movff	?i2___ftpack+1,?i2___ftmul+1
 12594  001C8A  C003  F00F         	movff	?i2___ftpack+2,?i2___ftmul+2
 12595  001C8E  0012               	return	
 12596  001C90                     __end_ofi2___ftmul:
 12597                           	opt stack 0
 12598                           pclatu	equ	0xFFB
 12599                           pclath	equ	0xFFA
 12600                           tblptru	equ	0xFF8
 12601                           tblptrh	equ	0xFF7
 12602                           tblptrl	equ	0xFF6
 12603                           tablat	equ	0xFF5
 12604                           prodh	equ	0xFF4
 12605                           prodl	equ	0xFF3
 12606                           intcon	equ	0xFF2
 12607                           intcon2	equ	0xFF1
 12608                           intcon3	equ	0xFF0
 12609                           postinc0	equ	0xFEE
 12610                           fsr0h	equ	0xFEA
 12611                           fsr0l	equ	0xFE9
 12612                           wreg	equ	0xFE8
 12613                           postinc1	equ	0xFE6
 12614                           postdec1	equ	0xFE5
 12615                           fsr1h	equ	0xFE2
 12616                           fsr1l	equ	0xFE1
 12617                           indf2	equ	0xFDF
 12618                           postinc2	equ	0xFDE
 12619                           postdec2	equ	0xFDD
 12620                           fsr2h	equ	0xFDA
 12621                           fsr2l	equ	0xFD9
 12622                           status	equ	0xFD8
 12623                           
 12624 ;; *************** function ___ftsub *****************
 12625 ;; Defined at:
 12626 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 12627 ;; Parameters:    Size  Location     Type
 12628 ;;  f1              3   39[COMRAM] float 
 12629 ;;  f2              3   42[COMRAM] float 
 12630 ;; Auto vars:     Size  Location     Type
 12631 ;;		None
 12632 ;; Return value:  Size  Location     Type
 12633 ;;                  3   39[COMRAM] float 
 12634 ;; Registers used:
 12635 ;;		wreg, status,2, status,0, cstack
 12636 ;; Tracked objects:
 12637 ;;		On entry : 0/0
 12638 ;;		On exit  : 0/0
 12639 ;;		Unchanged: 0/0
 12640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12641 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12644 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12645 ;;Total ram usage:        6 bytes
 12646 ;; Hardware stack levels used:    1
 12647 ;; Hardware stack levels required when called:    2
 12648 ;; This function calls:
 12649 ;;		___ftadd
 12650 ;; This function is called by:
 12651 ;;		_exp
 12652 ;; This function uses a non-reentrant model
 12653 ;;
 12654                           
 12655                           	psect	text63
 12656  002E60                     __ptext63:
 12657                           	opt stack 0
 12658  002E60                     ___ftsub:
 12659                           	opt stack 20
 12660                           
 12661                           ;incstack = 0
 12662  002E60  502B               	movf	___ftsub@f2,w,c
 12663  002E62  102C               	iorwf	___ftsub@f2+1,w,c
 12664  002E64  102D               	iorwf	___ftsub@f2+2,w,c
 12665  002E66  B4D8               	btfsc	status,2,c
 12666  002E68  D006               	goto	i2l3446
 12667  002E6A  0E00               	movlw	0
 12668  002E6C  1A2B               	xorwf	___ftsub@f2,f,c
 12669  002E6E  0E00               	movlw	0
 12670  002E70  1A2C               	xorwf	___ftsub@f2+1,f,c
 12671  002E72  0E80               	movlw	128
 12672  002E74  1A2D               	xorwf	___ftsub@f2+2,f,c
 12673  002E76                     i2l3446:
 12674  002E76  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 12675  002E7A  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 12676  002E7E  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 12677  002E82  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 12678  002E86  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 12679  002E8A  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 12680  002E8E  EC6A  F008         	call	___ftadd	;wreg free
 12681  002E92  C01C  F028         	movff	?___ftadd,?___ftsub
 12682  002E96  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 12683  002E9A  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 12684  002E9E  0012               	return	
 12685  002EA0                     __end_of___ftsub:
 12686                           	opt stack 0
 12687                           pclatu	equ	0xFFB
 12688                           pclath	equ	0xFFA
 12689                           tblptru	equ	0xFF8
 12690                           tblptrh	equ	0xFF7
 12691                           tblptrl	equ	0xFF6
 12692                           tablat	equ	0xFF5
 12693                           prodh	equ	0xFF4
 12694                           prodl	equ	0xFF3
 12695                           intcon	equ	0xFF2
 12696                           intcon2	equ	0xFF1
 12697                           intcon3	equ	0xFF0
 12698                           postinc0	equ	0xFEE
 12699                           fsr0h	equ	0xFEA
 12700                           fsr0l	equ	0xFE9
 12701                           wreg	equ	0xFE8
 12702                           postinc1	equ	0xFE6
 12703                           postdec1	equ	0xFE5
 12704                           fsr1h	equ	0xFE2
 12705                           fsr1l	equ	0xFE1
 12706                           indf2	equ	0xFDF
 12707                           postinc2	equ	0xFDE
 12708                           postdec2	equ	0xFDD
 12709                           fsr2h	equ	0xFDA
 12710                           fsr2l	equ	0xFD9
 12711                           status	equ	0xFD8
 12712                           
 12713 ;; *************** function ___ftadd *****************
 12714 ;; Defined at:
 12715 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;  f1              3   27[COMRAM] float 
 12718 ;;  f2              3   30[COMRAM] float 
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;  exp1            1   38[COMRAM] unsigned char 
 12721 ;;  exp2            1   37[COMRAM] unsigned char 
 12722 ;;  sign            1   36[COMRAM] unsigned char 
 12723 ;; Return value:  Size  Location     Type
 12724 ;;                  3   27[COMRAM] float 
 12725 ;; Registers used:
 12726 ;;		wreg, status,2, status,0, cstack
 12727 ;; Tracked objects:
 12728 ;;		On entry : 0/0
 12729 ;;		On exit  : 0/0
 12730 ;;		Unchanged: 0/0
 12731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12732 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12733 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12734 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12735 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12736 ;;Total ram usage:       12 bytes
 12737 ;; Hardware stack levels used:    1
 12738 ;; Hardware stack levels required when called:    1
 12739 ;; This function calls:
 12740 ;;		i2___ftpack
 12741 ;; This function is called by:
 12742 ;;		_dec_to_hex
 12743 ;;		___ftsub
 12744 ;;		_floor
 12745 ;;		_log
 12746 ;;		_eval_poly
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           	psect	text64
 12751  0010D4                     __ptext64:
 12752                           	opt stack 0
 12753  0010D4                     ___ftadd:
 12754                           	opt stack 20
 12755                           
 12756                           ;incstack = 0
 12757  0010D4  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 12758  0010D8  6A23               	clrf	(??___ftadd+1)& (0+255),c
 12759  0010DA  6A24               	clrf	(??___ftadd+2)& (0+255),c
 12760  0010DC  341D               	rlcf	___ftadd@f1+1,w,c
 12761  0010DE  3622               	rlcf	??___ftadd& (0+255),f,c
 12762  0010E0  E301               	bnc	u252_41
 12763  0010E2  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 12764  0010E4                     u252_41:
 12765  0010E4  5022               	movf	??___ftadd,w,c
 12766  0010E6  6E27               	movwf	___ftadd@exp1,c
 12767  0010E8  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 12768  0010EC  6A23               	clrf	(??___ftadd+1)& (0+255),c
 12769  0010EE  6A24               	clrf	(??___ftadd+2)& (0+255),c
 12770  0010F0  3420               	rlcf	___ftadd@f2+1,w,c
 12771  0010F2  3622               	rlcf	??___ftadd& (0+255),f,c
 12772  0010F4  E301               	bnc	u253_41
 12773  0010F6  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 12774  0010F8                     u253_41:
 12775  0010F8  5022               	movf	??___ftadd,w,c
 12776  0010FA  6E26               	movwf	___ftadd@exp2,c
 12777  0010FC  5027               	movf	___ftadd@exp1,w,c
 12778  0010FE  B4D8               	btfsc	status,2,c
 12779  001100  D00B               	goto	i2l716
 12780  001102  5026               	movf	___ftadd@exp2,w,c
 12781  001104  5C27               	subwf	___ftadd@exp1,w,c
 12782  001106  B0D8               	btfsc	status,0,c
 12783  001108  D00E               	goto	i2l3174
 12784  00110A  5027               	movf	___ftadd@exp1,w,c
 12785  00110C  0800               	sublw	0
 12786  00110E  2426               	addwf	___ftadd@exp2,w,c
 12787  001110  6E22               	movwf	??___ftadd& (0+255),c
 12788  001112  0E18               	movlw	24
 12789  001114  6422               	cpfsgt	??___ftadd,c
 12790  001116  D007               	goto	i2l3174
 12791  001118                     i2l716:
 12792  001118  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 12793  00111C  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 12794  001120  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 12795  001124  0012               	return	
 12796  001126                     i2l3174:
 12797  001126  5026               	movf	___ftadd@exp2,w,c
 12798  001128  B4D8               	btfsc	status,2,c
 12799  00112A  D00B               	goto	i2l720
 12800  00112C  5027               	movf	___ftadd@exp1,w,c
 12801  00112E  5C26               	subwf	___ftadd@exp2,w,c
 12802  001130  B0D8               	btfsc	status,0,c
 12803  001132  D00E               	goto	i2l3180
 12804  001134  5026               	movf	___ftadd@exp2,w,c
 12805  001136  0800               	sublw	0
 12806  001138  2427               	addwf	___ftadd@exp1,w,c
 12807  00113A  6E22               	movwf	??___ftadd& (0+255),c
 12808  00113C  0E18               	movlw	24
 12809  00113E  6422               	cpfsgt	??___ftadd,c
 12810  001140  D007               	goto	i2l3180
 12811  001142                     i2l720:
 12812  001142  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 12813  001146  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 12814  00114A  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 12815  00114E  0012               	return	
 12816  001150                     i2l3180:
 12817  001150  0E06               	movlw	6
 12818  001152  6E25               	movwf	___ftadd@sign,c
 12819  001154  BE1E               	btfsc	___ftadd@f1+2,7,c
 12820  001156  8E25               	bsf	___ftadd@sign,7,c
 12821  001158  BE21               	btfsc	___ftadd@f2+2,7,c
 12822  00115A  8C25               	bsf	___ftadd@sign,6,c
 12823  00115C  8E1D               	bsf	___ftadd@f1+1,7,c
 12824  00115E  0EFF               	movlw	255
 12825  001160  161C               	andwf	___ftadd@f1,f,c
 12826  001162  0EFF               	movlw	255
 12827  001164  161D               	andwf	___ftadd@f1+1,f,c
 12828  001166  0E00               	movlw	0
 12829  001168  161E               	andwf	___ftadd@f1+2,f,c
 12830  00116A  8E20               	bsf	___ftadd@f2+1,7,c
 12831  00116C  0EFF               	movlw	255
 12832  00116E  161F               	andwf	___ftadd@f2,f,c
 12833  001170  0EFF               	movlw	255
 12834  001172  1620               	andwf	___ftadd@f2+1,f,c
 12835  001174  0E00               	movlw	0
 12836  001176  1621               	andwf	___ftadd@f2+2,f,c
 12837  001178  5026               	movf	___ftadd@exp2,w,c
 12838  00117A  5C27               	subwf	___ftadd@exp1,w,c
 12839  00117C  B0D8               	btfsc	status,0,c
 12840  00117E  D01B               	goto	i2l3206
 12841  001180                     i2l3196:
 12842  001180  90D8               	bcf	status,0,c
 12843  001182  361F               	rlcf	___ftadd@f2,f,c
 12844  001184  3620               	rlcf	___ftadd@f2+1,f,c
 12845  001186  3621               	rlcf	___ftadd@f2+2,f,c
 12846  001188  0626               	decf	___ftadd@exp2,f,c
 12847  00118A  5027               	movf	___ftadd@exp1,w,c
 12848  00118C  1826               	xorwf	___ftadd@exp2,w,c
 12849  00118E  B4D8               	btfsc	status,2,c
 12850  001190  D00D               	goto	i2l3204
 12851  001192  0625               	decf	___ftadd@sign,f,c
 12852  001194  C025  F022         	movff	___ftadd@sign,??___ftadd
 12853  001198  0E07               	movlw	7
 12854  00119A  1622               	andwf	??___ftadd,f,c
 12855  00119C  B4D8               	btfsc	status,2,c
 12856  00119E  D006               	goto	i2l3204
 12857  0011A0  D7EF               	goto	i2l3196
 12858  0011A2                     i2l3202:
 12859  0011A2  90D8               	bcf	status,0,c
 12860  0011A4  321E               	rrcf	___ftadd@f1+2,f,c
 12861  0011A6  321D               	rrcf	___ftadd@f1+1,f,c
 12862  0011A8  321C               	rrcf	___ftadd@f1,f,c
 12863  0011AA  2A27               	incf	___ftadd@exp1,f,c
 12864  0011AC                     i2l3204:
 12865  0011AC  5026               	movf	___ftadd@exp2,w,c
 12866  0011AE  1827               	xorwf	___ftadd@exp1,w,c
 12867  0011B0  B4D8               	btfsc	status,2,c
 12868  0011B2  D01F               	goto	i2l731
 12869  0011B4  D7F6               	goto	i2l3202
 12870  0011B6                     i2l3206:
 12871  0011B6  5027               	movf	___ftadd@exp1,w,c
 12872  0011B8  5C26               	subwf	___ftadd@exp2,w,c
 12873  0011BA  B0D8               	btfsc	status,0,c
 12874  0011BC  D01A               	goto	i2l731
 12875  0011BE                     i2l3208:
 12876  0011BE  90D8               	bcf	status,0,c
 12877  0011C0  361C               	rlcf	___ftadd@f1,f,c
 12878  0011C2  361D               	rlcf	___ftadd@f1+1,f,c
 12879  0011C4  361E               	rlcf	___ftadd@f1+2,f,c
 12880  0011C6  0627               	decf	___ftadd@exp1,f,c
 12881  0011C8  5027               	movf	___ftadd@exp1,w,c
 12882  0011CA  1826               	xorwf	___ftadd@exp2,w,c
 12883  0011CC  B4D8               	btfsc	status,2,c
 12884  0011CE  D00D               	goto	i2l3216
 12885  0011D0  0625               	decf	___ftadd@sign,f,c
 12886  0011D2  C025  F022         	movff	___ftadd@sign,??___ftadd
 12887  0011D6  0E07               	movlw	7
 12888  0011D8  1622               	andwf	??___ftadd,f,c
 12889  0011DA  B4D8               	btfsc	status,2,c
 12890  0011DC  D006               	goto	i2l3216
 12891  0011DE  D7EF               	goto	i2l3208
 12892  0011E0                     i2l3214:
 12893  0011E0  90D8               	bcf	status,0,c
 12894  0011E2  3221               	rrcf	___ftadd@f2+2,f,c
 12895  0011E4  3220               	rrcf	___ftadd@f2+1,f,c
 12896  0011E6  321F               	rrcf	___ftadd@f2,f,c
 12897  0011E8  2A26               	incf	___ftadd@exp2,f,c
 12898  0011EA                     i2l3216:
 12899  0011EA  5026               	movf	___ftadd@exp2,w,c
 12900  0011EC  1827               	xorwf	___ftadd@exp1,w,c
 12901  0011EE  A4D8               	btfss	status,2,c
 12902  0011F0  D7F7               	goto	i2l3214
 12903  0011F2                     i2l731:
 12904  0011F2  AE25               	btfss	___ftadd@sign,7,c
 12905  0011F4  D00C               	goto	i2l740
 12906  0011F6  0EFF               	movlw	255
 12907  0011F8  1A1C               	xorwf	___ftadd@f1,f,c
 12908  0011FA  0EFF               	movlw	255
 12909  0011FC  1A1D               	xorwf	___ftadd@f1+1,f,c
 12910  0011FE  0EFF               	movlw	255
 12911  001200  1A1E               	xorwf	___ftadd@f1+2,f,c
 12912  001202  0E01               	movlw	1
 12913  001204  261C               	addwf	___ftadd@f1,f,c
 12914  001206  0E00               	movlw	0
 12915  001208  221D               	addwfc	___ftadd@f1+1,f,c
 12916  00120A  0E00               	movlw	0
 12917  00120C  221E               	addwfc	___ftadd@f1+2,f,c
 12918  00120E                     i2l740:
 12919  00120E  AC25               	btfss	___ftadd@sign,6,c
 12920  001210  D00C               	goto	i2l3222
 12921  001212  0EFF               	movlw	255
 12922  001214  1A1F               	xorwf	___ftadd@f2,f,c
 12923  001216  0EFF               	movlw	255
 12924  001218  1A20               	xorwf	___ftadd@f2+1,f,c
 12925  00121A  0EFF               	movlw	255
 12926  00121C  1A21               	xorwf	___ftadd@f2+2,f,c
 12927  00121E  0E01               	movlw	1
 12928  001220  261F               	addwf	___ftadd@f2,f,c
 12929  001222  0E00               	movlw	0
 12930  001224  2220               	addwfc	___ftadd@f2+1,f,c
 12931  001226  0E00               	movlw	0
 12932  001228  2221               	addwfc	___ftadd@f2+2,f,c
 12933  00122A                     i2l3222:
 12934  00122A  0E00               	movlw	0
 12935  00122C  6E25               	movwf	___ftadd@sign,c
 12936  00122E  501C               	movf	___ftadd@f1,w,c
 12937  001230  261F               	addwf	___ftadd@f2,f,c
 12938  001232  501D               	movf	___ftadd@f1+1,w,c
 12939  001234  2220               	addwfc	___ftadd@f2+1,f,c
 12940  001236  501E               	movf	___ftadd@f1+2,w,c
 12941  001238  2221               	addwfc	___ftadd@f2+2,f,c
 12942  00123A  AE21               	btfss	___ftadd@f2+2,7,c
 12943  00123C  D00E               	goto	i2l3232
 12944  00123E  0EFF               	movlw	255
 12945  001240  1A1F               	xorwf	___ftadd@f2,f,c
 12946  001242  0EFF               	movlw	255
 12947  001244  1A20               	xorwf	___ftadd@f2+1,f,c
 12948  001246  0EFF               	movlw	255
 12949  001248  1A21               	xorwf	___ftadd@f2+2,f,c
 12950  00124A  0E01               	movlw	1
 12951  00124C  261F               	addwf	___ftadd@f2,f,c
 12952  00124E  0E00               	movlw	0
 12953  001250  2220               	addwfc	___ftadd@f2+1,f,c
 12954  001252  0E00               	movlw	0
 12955  001254  2221               	addwfc	___ftadd@f2+2,f,c
 12956  001256  0E01               	movlw	1
 12957  001258  6E25               	movwf	___ftadd@sign,c
 12958  00125A                     i2l3232:
 12959  00125A  C01F  F001         	movff	___ftadd@f2,i2___ftpack@arg
 12960  00125E  C020  F002         	movff	___ftadd@f2+1,i2___ftpack@arg+1
 12961  001262  C021  F003         	movff	___ftadd@f2+2,i2___ftpack@arg+2
 12962  001266  C027  F004         	movff	___ftadd@exp1,i2___ftpack@exp
 12963  00126A  C025  F005         	movff	___ftadd@sign,i2___ftpack@sign
 12964  00126E  EC7B  F012         	call	i2___ftpack	;wreg free
 12965  001272  C001  F01C         	movff	?i2___ftpack,?___ftadd
 12966  001276  C002  F01D         	movff	?i2___ftpack+1,?___ftadd+1
 12967  00127A  C003  F01E         	movff	?i2___ftpack+2,?___ftadd+2
 12968  00127E  0012               	return	
 12969  001280                     __end_of___ftadd:
 12970                           	opt stack 0
 12971                           pclatu	equ	0xFFB
 12972                           pclath	equ	0xFFA
 12973                           tblptru	equ	0xFF8
 12974                           tblptrh	equ	0xFF7
 12975                           tblptrl	equ	0xFF6
 12976                           tablat	equ	0xFF5
 12977                           prodh	equ	0xFF4
 12978                           prodl	equ	0xFF3
 12979                           intcon	equ	0xFF2
 12980                           intcon2	equ	0xFF1
 12981                           intcon3	equ	0xFF0
 12982                           postinc0	equ	0xFEE
 12983                           fsr0h	equ	0xFEA
 12984                           fsr0l	equ	0xFE9
 12985                           wreg	equ	0xFE8
 12986                           postinc1	equ	0xFE6
 12987                           postdec1	equ	0xFE5
 12988                           fsr1h	equ	0xFE2
 12989                           fsr1l	equ	0xFE1
 12990                           indf2	equ	0xFDF
 12991                           postinc2	equ	0xFDE
 12992                           postdec2	equ	0xFDD
 12993                           fsr2h	equ	0xFDA
 12994                           fsr2l	equ	0xFD9
 12995                           status	equ	0xFD8
 12996                           
 12997 ;; *************** function ___ftneg *****************
 12998 ;; Defined at:
 12999 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 13000 ;; Parameters:    Size  Location     Type
 13001 ;;  f1              3    0[COMRAM] float 
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;		None
 13004 ;; Return value:  Size  Location     Type
 13005 ;;                  3    0[COMRAM] float 
 13006 ;; Registers used:
 13007 ;;		wreg, status,2, status,0
 13008 ;; Tracked objects:
 13009 ;;		On entry : 0/0
 13010 ;;		On exit  : 0/0
 13011 ;;		Unchanged: 0/0
 13012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13013 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13017 ;;Total ram usage:        3 bytes
 13018 ;; Hardware stack levels used:    1
 13019 ;; This function calls:
 13020 ;;		Nothing
 13021 ;; This function is called by:
 13022 ;;		_pow
 13023 ;;		_exp
 13024 ;; This function uses a non-reentrant model
 13025 ;;
 13026                           
 13027                           	psect	text65
 13028  003026                     __ptext65:
 13029                           	opt stack 0
 13030  003026                     ___ftneg:
 13031                           	opt stack 22
 13032                           
 13033                           ;incstack = 0
 13034  003026  5001               	movf	___ftneg@f1,w,c
 13035  003028  1002               	iorwf	___ftneg@f1+1,w,c
 13036  00302A  1003               	iorwf	___ftneg@f1+2,w,c
 13037  00302C  B4D8               	btfsc	status,2,c
 13038  00302E  D006               	goto	i2l773
 13039  003030  0E00               	movlw	0
 13040  003032  1A01               	xorwf	___ftneg@f1,f,c
 13041  003034  0E00               	movlw	0
 13042  003036  1A02               	xorwf	___ftneg@f1+1,f,c
 13043  003038  0E80               	movlw	128
 13044  00303A  1A03               	xorwf	___ftneg@f1+2,f,c
 13045  00303C                     i2l773:
 13046  00303C  C001  F001         	movff	___ftneg@f1,?___ftneg
 13047  003040  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 13048  003044  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 13049  003048  0012               	return		;funcret
 13050  00304A                     __end_of___ftneg:
 13051                           	opt stack 0
 13052                           pclatu	equ	0xFFB
 13053                           pclath	equ	0xFFA
 13054                           tblptru	equ	0xFF8
 13055                           tblptrh	equ	0xFF7
 13056                           tblptrl	equ	0xFF6
 13057                           tablat	equ	0xFF5
 13058                           prodh	equ	0xFF4
 13059                           prodl	equ	0xFF3
 13060                           intcon	equ	0xFF2
 13061                           intcon2	equ	0xFF1
 13062                           intcon3	equ	0xFF0
 13063                           postinc0	equ	0xFEE
 13064                           fsr0h	equ	0xFEA
 13065                           fsr0l	equ	0xFE9
 13066                           wreg	equ	0xFE8
 13067                           postinc1	equ	0xFE6
 13068                           postdec1	equ	0xFE5
 13069                           fsr1h	equ	0xFE2
 13070                           fsr1l	equ	0xFE1
 13071                           indf2	equ	0xFDF
 13072                           postinc2	equ	0xFDE
 13073                           postdec2	equ	0xFDD
 13074                           fsr2h	equ	0xFDA
 13075                           fsr2l	equ	0xFD9
 13076                           status	equ	0xFD8
 13077                           
 13078 ;; *************** function ___ftdiv *****************
 13079 ;; Defined at:
 13080 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 13081 ;; Parameters:    Size  Location     Type
 13082 ;;  f1              3    8[COMRAM] float 
 13083 ;;  f2              3   11[COMRAM] float 
 13084 ;; Auto vars:     Size  Location     Type
 13085 ;;  f3              3   18[COMRAM] float 
 13086 ;;  sign            1   22[COMRAM] unsigned char 
 13087 ;;  exp             1   21[COMRAM] unsigned char 
 13088 ;;  cntr            1   17[COMRAM] unsigned char 
 13089 ;; Return value:  Size  Location     Type
 13090 ;;                  3    8[COMRAM] float 
 13091 ;; Registers used:
 13092 ;;		wreg, status,2, status,0, cstack
 13093 ;; Tracked objects:
 13094 ;;		On entry : 0/0
 13095 ;;		On exit  : 0/0
 13096 ;;		Unchanged: 0/0
 13097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13098 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13099 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13100 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;Total ram usage:       15 bytes
 13103 ;; Hardware stack levels used:    1
 13104 ;; Hardware stack levels required when called:    1
 13105 ;; This function calls:
 13106 ;;		i2___ftpack
 13107 ;; This function is called by:
 13108 ;;		_exp
 13109 ;; This function uses a non-reentrant model
 13110 ;;
 13111                           
 13112                           	psect	text66
 13113  001E6A                     __ptext66:
 13114                           	opt stack 0
 13115  001E6A                     ___ftdiv:
 13116                           	opt stack 21
 13117                           
 13118                           ;incstack = 0
 13119  001E6A  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 13120  001E6E  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 13121  001E70  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 13122  001E72  340A               	rlcf	___ftdiv@f1+1,w,c
 13123  001E74  360F               	rlcf	??___ftdiv& (0+255),f,c
 13124  001E76  E301               	bnc	u294_41
 13125  001E78  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 13126  001E7A                     u294_41:
 13127  001E7A  500F               	movf	??___ftdiv,w,c
 13128  001E7C  6E16               	movwf	___ftdiv@exp,c
 13129  001E7E  5016               	movf	___ftdiv@exp,w,c
 13130  001E80  A4D8               	btfss	status,2,c
 13131  001E82  D007               	goto	i2l3402
 13132  001E84  0E00               	movlw	0
 13133  001E86  6E09               	movwf	?___ftdiv,c
 13134  001E88  0E00               	movlw	0
 13135  001E8A  6E0A               	movwf	?___ftdiv+1,c
 13136  001E8C  0E00               	movlw	0
 13137  001E8E  6E0B               	movwf	?___ftdiv+2,c
 13138  001E90  0012               	return	
 13139  001E92                     i2l3402:
 13140  001E92  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 13141  001E96  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 13142  001E98  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 13143  001E9A  340D               	rlcf	___ftdiv@f2+1,w,c
 13144  001E9C  360F               	rlcf	??___ftdiv& (0+255),f,c
 13145  001E9E  E301               	bnc	u296_41
 13146  001EA0  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 13147  001EA2                     u296_41:
 13148  001EA2  500F               	movf	??___ftdiv,w,c
 13149  001EA4  6E17               	movwf	___ftdiv@sign,c
 13150  001EA6  5017               	movf	___ftdiv@sign,w,c
 13151  001EA8  A4D8               	btfss	status,2,c
 13152  001EAA  D007               	goto	i2l3408
 13153  001EAC  0E00               	movlw	0
 13154  001EAE  6E09               	movwf	?___ftdiv,c
 13155  001EB0  0E00               	movlw	0
 13156  001EB2  6E0A               	movwf	?___ftdiv+1,c
 13157  001EB4  0E00               	movlw	0
 13158  001EB6  6E0B               	movwf	?___ftdiv+2,c
 13159  001EB8  0012               	return	
 13160  001EBA                     i2l3408:
 13161  001EBA  0E00               	movlw	0
 13162  001EBC  6E13               	movwf	___ftdiv@f3,c
 13163  001EBE  0E00               	movlw	0
 13164  001EC0  6E14               	movwf	___ftdiv@f3+1,c
 13165  001EC2  0E00               	movlw	0
 13166  001EC4  6E15               	movwf	___ftdiv@f3+2,c
 13167  001EC6  5017               	movf	___ftdiv@sign,w,c
 13168  001EC8  0F89               	addlw	137
 13169  001ECA  5E16               	subwf	___ftdiv@exp,f,c
 13170  001ECC  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 13171  001ED0  500E               	movf	___ftdiv@f2+2,w,c
 13172  001ED2  1A17               	xorwf	___ftdiv@sign,f,c
 13173  001ED4  0E80               	movlw	128
 13174  001ED6  1617               	andwf	___ftdiv@sign,f,c
 13175  001ED8  8E0A               	bsf	___ftdiv@f1+1,7,c
 13176  001EDA  0EFF               	movlw	255
 13177  001EDC  1609               	andwf	___ftdiv@f1,f,c
 13178  001EDE  0EFF               	movlw	255
 13179  001EE0  160A               	andwf	___ftdiv@f1+1,f,c
 13180  001EE2  0E00               	movlw	0
 13181  001EE4  160B               	andwf	___ftdiv@f1+2,f,c
 13182  001EE6  8E0D               	bsf	___ftdiv@f2+1,7,c
 13183  001EE8  0EFF               	movlw	255
 13184  001EEA  160C               	andwf	___ftdiv@f2,f,c
 13185  001EEC  0EFF               	movlw	255
 13186  001EEE  160D               	andwf	___ftdiv@f2+1,f,c
 13187  001EF0  0E00               	movlw	0
 13188  001EF2  160E               	andwf	___ftdiv@f2+2,f,c
 13189  001EF4  0E18               	movlw	24
 13190  001EF6  6E12               	movwf	___ftdiv@cntr,c
 13191  001EF8                     i2l3428:
 13192  001EF8  90D8               	bcf	status,0,c
 13193  001EFA  3613               	rlcf	___ftdiv@f3,f,c
 13194  001EFC  3614               	rlcf	___ftdiv@f3+1,f,c
 13195  001EFE  3615               	rlcf	___ftdiv@f3+2,f,c
 13196  001F00  500C               	movf	___ftdiv@f2,w,c
 13197  001F02  5C09               	subwf	___ftdiv@f1,w,c
 13198  001F04  500D               	movf	___ftdiv@f2+1,w,c
 13199  001F06  580A               	subwfb	___ftdiv@f1+1,w,c
 13200  001F08  500E               	movf	___ftdiv@f2+2,w,c
 13201  001F0A  580B               	subwfb	___ftdiv@f1+2,w,c
 13202  001F0C  A0D8               	btfss	status,0,c
 13203  001F0E  D007               	goto	i2l751
 13204  001F10  500C               	movf	___ftdiv@f2,w,c
 13205  001F12  5E09               	subwf	___ftdiv@f1,f,c
 13206  001F14  500D               	movf	___ftdiv@f2+1,w,c
 13207  001F16  5A0A               	subwfb	___ftdiv@f1+1,f,c
 13208  001F18  500E               	movf	___ftdiv@f2+2,w,c
 13209  001F1A  5A0B               	subwfb	___ftdiv@f1+2,f,c
 13210  001F1C  8013               	bsf	___ftdiv@f3,0,c
 13211  001F1E                     i2l751:
 13212  001F1E  90D8               	bcf	status,0,c
 13213  001F20  3609               	rlcf	___ftdiv@f1,f,c
 13214  001F22  360A               	rlcf	___ftdiv@f1+1,f,c
 13215  001F24  360B               	rlcf	___ftdiv@f1+2,f,c
 13216  001F26  2E12               	decfsz	___ftdiv@cntr,f,c
 13217  001F28  D7E7               	goto	i2l3428
 13218  001F2A  C013  F001         	movff	___ftdiv@f3,i2___ftpack@arg
 13219  001F2E  C014  F002         	movff	___ftdiv@f3+1,i2___ftpack@arg+1
 13220  001F32  C015  F003         	movff	___ftdiv@f3+2,i2___ftpack@arg+2
 13221  001F36  C016  F004         	movff	___ftdiv@exp,i2___ftpack@exp
 13222  001F3A  C017  F005         	movff	___ftdiv@sign,i2___ftpack@sign
 13223  001F3E  EC7B  F012         	call	i2___ftpack	;wreg free
 13224  001F42  C001  F009         	movff	?i2___ftpack,?___ftdiv
 13225  001F46  C002  F00A         	movff	?i2___ftpack+1,?___ftdiv+1
 13226  001F4A  C003  F00B         	movff	?i2___ftpack+2,?___ftdiv+2
 13227  001F4E  0012               	return	
 13228  001F50                     __end_of___ftdiv:
 13229                           	opt stack 0
 13230                           pclatu	equ	0xFFB
 13231                           pclath	equ	0xFFA
 13232                           tblptru	equ	0xFF8
 13233                           tblptrh	equ	0xFF7
 13234                           tblptrl	equ	0xFF6
 13235                           tablat	equ	0xFF5
 13236                           prodh	equ	0xFF4
 13237                           prodl	equ	0xFF3
 13238                           intcon	equ	0xFF2
 13239                           intcon2	equ	0xFF1
 13240                           intcon3	equ	0xFF0
 13241                           postinc0	equ	0xFEE
 13242                           fsr0h	equ	0xFEA
 13243                           fsr0l	equ	0xFE9
 13244                           wreg	equ	0xFE8
 13245                           postinc1	equ	0xFE6
 13246                           postdec1	equ	0xFE5
 13247                           fsr1h	equ	0xFE2
 13248                           fsr1l	equ	0xFE1
 13249                           indf2	equ	0xFDF
 13250                           postinc2	equ	0xFDE
 13251                           postdec2	equ	0xFDD
 13252                           fsr2h	equ	0xFDA
 13253                           fsr2l	equ	0xFD9
 13254                           status	equ	0xFD8
 13255                           
 13256 ;; *************** function ___lltoft *****************
 13257 ;; Defined at:
 13258 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 13259 ;; Parameters:    Size  Location     Type
 13260 ;;  c               4    8[COMRAM] unsigned long 
 13261 ;; Auto vars:     Size  Location     Type
 13262 ;;  exp             1   16[COMRAM] unsigned char 
 13263 ;; Return value:  Size  Location     Type
 13264 ;;                  3    8[COMRAM] float 
 13265 ;; Registers used:
 13266 ;;		wreg, status,2, status,0, cstack
 13267 ;; Tracked objects:
 13268 ;;		On entry : 0/0
 13269 ;;		On exit  : 0/0
 13270 ;;		Unchanged: 0/0
 13271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13272 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13273 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13274 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13275 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13276 ;;Total ram usage:        9 bytes
 13277 ;; Hardware stack levels used:    1
 13278 ;; Hardware stack levels required when called:    1
 13279 ;; This function calls:
 13280 ;;		i2___ftpack
 13281 ;; This function is called by:
 13282 ;;		_pow
 13283 ;; This function uses a non-reentrant model
 13284 ;;
 13285                           
 13286                           	psect	text67
 13287  002C38                     __ptext67:
 13288                           	opt stack 0
 13289  002C38                     ___lltoft:
 13290                           	opt stack 22
 13291                           
 13292                           ;incstack = 0
 13293  002C38  0E8E               	movlw	142
 13294  002C3A  6E11               	movwf	___lltoft@exp,c
 13295  002C3C  D006               	goto	i2l3620
 13296  002C3E                     i2l3618:
 13297  002C3E  90D8               	bcf	status,0,c
 13298  002C40  320C               	rrcf	___lltoft@c+3,f,c
 13299  002C42  320B               	rrcf	___lltoft@c+2,f,c
 13300  002C44  320A               	rrcf	___lltoft@c+1,f,c
 13301  002C46  3209               	rrcf	___lltoft@c,f,c
 13302  002C48  2A11               	incf	___lltoft@exp,f,c
 13303  002C4A                     i2l3620:
 13304  002C4A  0E00               	movlw	0
 13305  002C4C  1409               	andwf	___lltoft@c,w,c
 13306  002C4E  6E0D               	movwf	??___lltoft& (0+255),c
 13307  002C50  0E00               	movlw	0
 13308  002C52  140A               	andwf	___lltoft@c+1,w,c
 13309  002C54  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 13310  002C56  0E00               	movlw	0
 13311  002C58  140B               	andwf	___lltoft@c+2,w,c
 13312  002C5A  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 13313  002C5C  0EFF               	movlw	255
 13314  002C5E  140C               	andwf	___lltoft@c+3,w,c
 13315  002C60  6E10               	movwf	(??___lltoft+3)& (0+255),c
 13316  002C62  500D               	movf	??___lltoft,w,c
 13317  002C64  100E               	iorwf	??___lltoft+1,w,c
 13318  002C66  100F               	iorwf	??___lltoft+2,w,c
 13319  002C68  1010               	iorwf	??___lltoft+3,w,c
 13320  002C6A  A4D8               	btfss	status,2,c
 13321  002C6C  D7E8               	goto	i2l3618
 13322  002C6E  C009  F001         	movff	___lltoft@c,i2___ftpack@arg
 13323  002C72  C00A  F002         	movff	___lltoft@c+1,i2___ftpack@arg+1
 13324  002C76  C00B  F003         	movff	___lltoft@c+2,i2___ftpack@arg+2
 13325  002C7A  C011  F004         	movff	___lltoft@exp,i2___ftpack@exp
 13326  002C7E  0E00               	movlw	0
 13327  002C80  6E05               	movwf	i2___ftpack@sign,c
 13328  002C82  EC7B  F012         	call	i2___ftpack	;wreg free
 13329  002C86  C001  F009         	movff	?i2___ftpack,?___lltoft
 13330  002C8A  C002  F00A         	movff	?i2___ftpack+1,?___lltoft+1
 13331  002C8E  C003  F00B         	movff	?i2___ftpack+2,?___lltoft+2
 13332  002C92  0012               	return	
 13333  002C94                     __end_of___lltoft:
 13334                           	opt stack 0
 13335                           pclatu	equ	0xFFB
 13336                           pclath	equ	0xFFA
 13337                           tblptru	equ	0xFF8
 13338                           tblptrh	equ	0xFF7
 13339                           tblptrl	equ	0xFF6
 13340                           tablat	equ	0xFF5
 13341                           prodh	equ	0xFF4
 13342                           prodl	equ	0xFF3
 13343                           intcon	equ	0xFF2
 13344                           intcon2	equ	0xFF1
 13345                           intcon3	equ	0xFF0
 13346                           postinc0	equ	0xFEE
 13347                           fsr0h	equ	0xFEA
 13348                           fsr0l	equ	0xFE9
 13349                           wreg	equ	0xFE8
 13350                           postinc1	equ	0xFE6
 13351                           postdec1	equ	0xFE5
 13352                           fsr1h	equ	0xFE2
 13353                           fsr1l	equ	0xFE1
 13354                           indf2	equ	0xFDF
 13355                           postinc2	equ	0xFDE
 13356                           postdec2	equ	0xFDD
 13357                           fsr2h	equ	0xFDA
 13358                           fsr2l	equ	0xFD9
 13359                           status	equ	0xFD8
 13360                           
 13361 ;; *************** function i2___ftpack *****************
 13362 ;; Defined at:
 13363 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 13364 ;; Parameters:    Size  Location     Type
 13365 ;;  arg             3    0[COMRAM] unsigned um
 13366 ;;  exp             1    3[COMRAM] unsigned char 
 13367 ;;  sign            1    4[COMRAM] unsigned char 
 13368 ;; Auto vars:     Size  Location     Type
 13369 ;;		None
 13370 ;; Return value:  Size  Location     Type
 13371 ;;                  3    0[COMRAM] float 
 13372 ;; Registers used:
 13373 ;;		wreg, status,2, status,0
 13374 ;; Tracked objects:
 13375 ;;		On entry : 0/0
 13376 ;;		On exit  : 0/0
 13377 ;;		Unchanged: 0/0
 13378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13379 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13381 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13382 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13383 ;;Total ram usage:        8 bytes
 13384 ;; Hardware stack levels used:    1
 13385 ;; This function calls:
 13386 ;;		Nothing
 13387 ;; This function is called by:
 13388 ;;		___altoft
 13389 ;;		___ftadd
 13390 ;;		___ftdiv
 13391 ;;		___lltoft
 13392 ;;		i2___awtoft
 13393 ;;		i2___ftmul
 13394 ;; This function uses a non-reentrant model
 13395 ;;
 13396                           
 13397                           	psect	text68
 13398  0024F6                     __ptext68:
 13399                           	opt stack 0
 13400  0024F6                     i2___ftpack:
 13401                           	opt stack 23
 13402                           
 13403                           ;incstack = 0
 13404  0024F6  5004               	movf	i2___ftpack@exp,w,c
 13405  0024F8  B4D8               	btfsc	status,2,c
 13406  0024FA  D005               	goto	i2l3118
 13407  0024FC  5001               	movf	i2___ftpack@arg,w,c
 13408  0024FE  1002               	iorwf	i2___ftpack@arg+1,w,c
 13409  002500  1003               	iorwf	i2___ftpack@arg+2,w,c
 13410  002502  A4D8               	btfss	status,2,c
 13411  002504  D00C               	goto	i2l3124
 13412  002506                     i2l3118:
 13413  002506  0E00               	movlw	0
 13414  002508  6E01               	movwf	?i2___ftpack,c
 13415  00250A  0E00               	movlw	0
 13416  00250C  6E02               	movwf	?i2___ftpack+1,c
 13417  00250E  0E00               	movlw	0
 13418  002510  6E03               	movwf	?i2___ftpack+2,c
 13419  002512  0012               	return	
 13420  002514                     i2l3122:
 13421  002514  2A04               	incf	i2___ftpack@exp,f,c
 13422  002516  90D8               	bcf	status,0,c
 13423  002518  3203               	rrcf	i2___ftpack@arg+2,f,c
 13424  00251A  3202               	rrcf	i2___ftpack@arg+1,f,c
 13425  00251C  3201               	rrcf	i2___ftpack@arg,f,c
 13426  00251E                     i2l3124:
 13427  00251E  0E00               	movlw	0
 13428  002520  1401               	andwf	i2___ftpack@arg,w,c
 13429  002522  6E06               	movwf	??i2___ftpack& (0+255),c
 13430  002524  0E00               	movlw	0
 13431  002526  1402               	andwf	i2___ftpack@arg+1,w,c
 13432  002528  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13433  00252A  0EFE               	movlw	254
 13434  00252C  1403               	andwf	i2___ftpack@arg+2,w,c
 13435  00252E  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13436  002530  5006               	movf	??i2___ftpack,w,c
 13437  002532  1007               	iorwf	??i2___ftpack+1,w,c
 13438  002534  1008               	iorwf	??i2___ftpack+2,w,c
 13439  002536  B4D8               	btfsc	status,2,c
 13440  002538  D00C               	goto	i2l3130
 13441  00253A  D7EC               	goto	i2l3122
 13442  00253C                     i2l3126:
 13443  00253C  2A04               	incf	i2___ftpack@exp,f,c
 13444  00253E  0E01               	movlw	1
 13445  002540  2601               	addwf	i2___ftpack@arg,f,c
 13446  002542  0E00               	movlw	0
 13447  002544  2202               	addwfc	i2___ftpack@arg+1,f,c
 13448  002546  0E00               	movlw	0
 13449  002548  2203               	addwfc	i2___ftpack@arg+2,f,c
 13450  00254A  90D8               	bcf	status,0,c
 13451  00254C  3203               	rrcf	i2___ftpack@arg+2,f,c
 13452  00254E  3202               	rrcf	i2___ftpack@arg+1,f,c
 13453  002550  3201               	rrcf	i2___ftpack@arg,f,c
 13454  002552                     i2l3130:
 13455  002552  0E00               	movlw	0
 13456  002554  1401               	andwf	i2___ftpack@arg,w,c
 13457  002556  6E06               	movwf	??i2___ftpack& (0+255),c
 13458  002558  0E00               	movlw	0
 13459  00255A  1402               	andwf	i2___ftpack@arg+1,w,c
 13460  00255C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13461  00255E  0EFF               	movlw	255
 13462  002560  1403               	andwf	i2___ftpack@arg+2,w,c
 13463  002562  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13464  002564  5006               	movf	??i2___ftpack,w,c
 13465  002566  1007               	iorwf	??i2___ftpack+1,w,c
 13466  002568  1008               	iorwf	??i2___ftpack+2,w,c
 13467  00256A  B4D8               	btfsc	status,2,c
 13468  00256C  D006               	goto	i2l3134
 13469  00256E  D7E6               	goto	i2l3126
 13470  002570                     i2l3132:
 13471  002570  0604               	decf	i2___ftpack@exp,f,c
 13472  002572  90D8               	bcf	status,0,c
 13473  002574  3601               	rlcf	i2___ftpack@arg,f,c
 13474  002576  3602               	rlcf	i2___ftpack@arg+1,f,c
 13475  002578  3603               	rlcf	i2___ftpack@arg+2,f,c
 13476  00257A                     i2l3134:
 13477  00257A  BE02               	btfsc	i2___ftpack@arg+1,7,c
 13478  00257C  D003               	goto	i2l693
 13479  00257E  0E02               	movlw	2
 13480  002580  6004               	cpfslt	i2___ftpack@exp,c
 13481  002582  D7F6               	goto	i2l3132
 13482  002584                     i2l693:
 13483  002584  A004               	btfss	i2___ftpack@exp,0,c
 13484  002586  9E02               	bcf	i2___ftpack@arg+1,7,c
 13485  002588  90D8               	bcf	status,0,c
 13486  00258A  3204               	rrcf	i2___ftpack@exp,f,c
 13487  00258C  5004               	movf	i2___ftpack@exp,w,c
 13488  00258E  1203               	iorwf	i2___ftpack@arg+2,f,c
 13489  002590  5005               	movf	i2___ftpack@sign,w,c
 13490  002592  A4D8               	btfss	status,2,c
 13491  002594  8E03               	bsf	i2___ftpack@arg+2,7,c
 13492  002596  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 13493  00259A  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 13494  00259E  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 13495  0025A2  0012               	return	
 13496  0025A4                     __end_ofi2___ftpack:
 13497                           	opt stack 0
 13498                           pclatu	equ	0xFFB
 13499                           pclath	equ	0xFFA
 13500                           tblptru	equ	0xFF8
 13501                           tblptrh	equ	0xFF7
 13502                           tblptrl	equ	0xFF6
 13503                           tablat	equ	0xFF5
 13504                           prodh	equ	0xFF4
 13505                           prodl	equ	0xFF3
 13506                           intcon	equ	0xFF2
 13507                           intcon2	equ	0xFF1
 13508                           intcon3	equ	0xFF0
 13509                           postinc0	equ	0xFEE
 13510                           fsr0h	equ	0xFEA
 13511                           fsr0l	equ	0xFE9
 13512                           wreg	equ	0xFE8
 13513                           postinc1	equ	0xFE6
 13514                           postdec1	equ	0xFE5
 13515                           fsr1h	equ	0xFE2
 13516                           fsr1l	equ	0xFE1
 13517                           indf2	equ	0xFDF
 13518                           postinc2	equ	0xFDE
 13519                           postdec2	equ	0xFDD
 13520                           fsr2h	equ	0xFDA
 13521                           fsr2l	equ	0xFD9
 13522                           status	equ	0xFD8
 13523                           
 13524 ;; *************** function ___awdiv *****************
 13525 ;; Defined at:
 13526 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 13527 ;; Parameters:    Size  Location     Type
 13528 ;;  dividend        2    0[COMRAM] int 
 13529 ;;  divisor         2    2[COMRAM] int 
 13530 ;; Auto vars:     Size  Location     Type
 13531 ;;  quotient        2    6[COMRAM] int 
 13532 ;;  sign            1    5[COMRAM] unsigned char 
 13533 ;;  counter         1    4[COMRAM] unsigned char 
 13534 ;; Return value:  Size  Location     Type
 13535 ;;                  2    0[COMRAM] int 
 13536 ;; Registers used:
 13537 ;;		wreg, status,2, status,0
 13538 ;; Tracked objects:
 13539 ;;		On entry : 0/0
 13540 ;;		On exit  : 0/0
 13541 ;;		Unchanged: 0/0
 13542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13543 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13544 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13546 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13547 ;;Total ram usage:        8 bytes
 13548 ;; Hardware stack levels used:    1
 13549 ;; This function calls:
 13550 ;;		Nothing
 13551 ;; This function is called by:
 13552 ;;		_dec_to_hex
 13553 ;; This function uses a non-reentrant model
 13554 ;;
 13555                           
 13556                           	psect	text69
 13557  00293A                     __ptext69:
 13558                           	opt stack 0
 13559  00293A                     ___awdiv:
 13560                           	opt stack 24
 13561                           
 13562                           ;incstack = 0
 13563  00293A  0E00               	movlw	0
 13564  00293C  6E06               	movwf	___awdiv@sign,c
 13565  00293E  AE04               	btfss	___awdiv@divisor+1,7,c
 13566  002940  D006               	goto	i2l4062
 13567  002942  6C03               	negf	___awdiv@divisor,c
 13568  002944  1E04               	comf	___awdiv@divisor+1,f,c
 13569  002946  B0D8               	btfsc	status,0,c
 13570  002948  2A04               	incf	___awdiv@divisor+1,f,c
 13571  00294A  0E01               	movlw	1
 13572  00294C  6E06               	movwf	___awdiv@sign,c
 13573  00294E                     i2l4062:
 13574  00294E  AE02               	btfss	___awdiv@dividend+1,7,c
 13575  002950  D006               	goto	i2l4068
 13576  002952  6C01               	negf	___awdiv@dividend,c
 13577  002954  1E02               	comf	___awdiv@dividend+1,f,c
 13578  002956  B0D8               	btfsc	status,0,c
 13579  002958  2A02               	incf	___awdiv@dividend+1,f,c
 13580  00295A  0E01               	movlw	1
 13581  00295C  1A06               	xorwf	___awdiv@sign,f,c
 13582  00295E                     i2l4068:
 13583  00295E  0E00               	movlw	0
 13584  002960  6E08               	movwf	___awdiv@quotient+1,c
 13585  002962  0E00               	movlw	0
 13586  002964  6E07               	movwf	___awdiv@quotient,c
 13587  002966  5003               	movf	___awdiv@divisor,w,c
 13588  002968  1004               	iorwf	___awdiv@divisor+1,w,c
 13589  00296A  B4D8               	btfsc	status,2,c
 13590  00296C  D01C               	goto	i2l4090
 13591  00296E  0E01               	movlw	1
 13592  002970  6E05               	movwf	___awdiv@counter,c
 13593  002972  D004               	goto	i2l4076
 13594  002974                     i2l4074:
 13595  002974  90D8               	bcf	status,0,c
 13596  002976  3603               	rlcf	___awdiv@divisor,f,c
 13597  002978  3604               	rlcf	___awdiv@divisor+1,f,c
 13598  00297A  2A05               	incf	___awdiv@counter,f,c
 13599  00297C                     i2l4076:
 13600  00297C  AE04               	btfss	___awdiv@divisor+1,7,c
 13601  00297E  D7FA               	goto	i2l4074
 13602  002980                     i2l4078:
 13603  002980  90D8               	bcf	status,0,c
 13604  002982  3607               	rlcf	___awdiv@quotient,f,c
 13605  002984  3608               	rlcf	___awdiv@quotient+1,f,c
 13606  002986  5003               	movf	___awdiv@divisor,w,c
 13607  002988  5C01               	subwf	___awdiv@dividend,w,c
 13608  00298A  5004               	movf	___awdiv@divisor+1,w,c
 13609  00298C  5802               	subwfb	___awdiv@dividend+1,w,c
 13610  00298E  A0D8               	btfss	status,0,c
 13611  002990  D005               	goto	i2l4086
 13612  002992  5003               	movf	___awdiv@divisor,w,c
 13613  002994  5E01               	subwf	___awdiv@dividend,f,c
 13614  002996  5004               	movf	___awdiv@divisor+1,w,c
 13615  002998  5A02               	subwfb	___awdiv@dividend+1,f,c
 13616  00299A  8007               	bsf	___awdiv@quotient,0,c
 13617  00299C                     i2l4086:
 13618  00299C  90D8               	bcf	status,0,c
 13619  00299E  3204               	rrcf	___awdiv@divisor+1,f,c
 13620  0029A0  3203               	rrcf	___awdiv@divisor,f,c
 13621  0029A2  2E05               	decfsz	___awdiv@counter,f,c
 13622  0029A4  D7ED               	goto	i2l4078
 13623  0029A6                     i2l4090:
 13624  0029A6  5006               	movf	___awdiv@sign,w,c
 13625  0029A8  B4D8               	btfsc	status,2,c
 13626  0029AA  D004               	goto	i2l4094
 13627  0029AC  6C07               	negf	___awdiv@quotient,c
 13628  0029AE  1E08               	comf	___awdiv@quotient+1,f,c
 13629  0029B0  B0D8               	btfsc	status,0,c
 13630  0029B2  2A08               	incf	___awdiv@quotient+1,f,c
 13631  0029B4                     i2l4094:
 13632  0029B4  C007  F001         	movff	___awdiv@quotient,?___awdiv
 13633  0029B8  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 13634  0029BC  0012               	return	
 13635  0029BE                     __end_of___awdiv:
 13636                           	opt stack 0
 13637                           pclatu	equ	0xFFB
 13638                           pclath	equ	0xFFA
 13639                           tblptru	equ	0xFF8
 13640                           tblptrh	equ	0xFF7
 13641                           tblptrl	equ	0xFF6
 13642                           tablat	equ	0xFF5
 13643                           prodh	equ	0xFF4
 13644                           prodl	equ	0xFF3
 13645                           intcon	equ	0xFF2
 13646                           intcon2	equ	0xFF1
 13647                           intcon3	equ	0xFF0
 13648                           postinc0	equ	0xFEE
 13649                           fsr0h	equ	0xFEA
 13650                           fsr0l	equ	0xFE9
 13651                           wreg	equ	0xFE8
 13652                           postinc1	equ	0xFE6
 13653                           postdec1	equ	0xFE5
 13654                           fsr1h	equ	0xFE2
 13655                           fsr1l	equ	0xFE1
 13656                           indf2	equ	0xFDF
 13657                           postinc2	equ	0xFDE
 13658                           postdec2	equ	0xFDD
 13659                           fsr2h	equ	0xFDA
 13660                           fsr2l	equ	0xFD9
 13661                           status	equ	0xFD8
 13662                           pclatu	equ	0xFFB
 13663                           pclath	equ	0xFFA
 13664                           tblptru	equ	0xFF8
 13665                           tblptrh	equ	0xFF7
 13666                           tblptrl	equ	0xFF6
 13667                           tablat	equ	0xFF5
 13668                           prodh	equ	0xFF4
 13669                           prodl	equ	0xFF3
 13670                           intcon	equ	0xFF2
 13671                           intcon2	equ	0xFF1
 13672                           intcon3	equ	0xFF0
 13673                           postinc0	equ	0xFEE
 13674                           fsr0h	equ	0xFEA
 13675                           fsr0l	equ	0xFE9
 13676                           wreg	equ	0xFE8
 13677                           postinc1	equ	0xFE6
 13678                           postdec1	equ	0xFE5
 13679                           fsr1h	equ	0xFE2
 13680                           fsr1l	equ	0xFE1
 13681                           indf2	equ	0xFDF
 13682                           postinc2	equ	0xFDE
 13683                           postdec2	equ	0xFDD
 13684                           fsr2h	equ	0xFDA
 13685                           fsr2l	equ	0xFD9
 13686                           status	equ	0xFD8
 13687                           
 13688                           	psect	rparam
 13689  0000                     pclatu	equ	0xFFB
 13690                           pclath	equ	0xFFA
 13691                           tblptru	equ	0xFF8
 13692                           tblptrh	equ	0xFF7
 13693                           tblptrl	equ	0xFF6
 13694                           tablat	equ	0xFF5
 13695                           prodh	equ	0xFF4
 13696                           prodl	equ	0xFF3
 13697                           intcon	equ	0xFF2
 13698                           intcon2	equ	0xFF1
 13699                           intcon3	equ	0xFF0
 13700                           postinc0	equ	0xFEE
 13701                           fsr0h	equ	0xFEA
 13702                           fsr0l	equ	0xFE9
 13703                           wreg	equ	0xFE8
 13704                           postinc1	equ	0xFE6
 13705                           postdec1	equ	0xFE5
 13706                           fsr1h	equ	0xFE2
 13707                           fsr1l	equ	0xFE1
 13708                           indf2	equ	0xFDF
 13709                           postinc2	equ	0xFDE
 13710                           postdec2	equ	0xFDD
 13711                           fsr2h	equ	0xFDA
 13712                           fsr2l	equ	0xFD9
 13713                           status	equ	0xFD8
 13714                           
 13715                           	psect	temp
 13716  00007E                     btemp:
 13717                           	opt stack 0
 13718  00007E                     	ds	1
 13719  0000                     int$flags	set	btemp
 13720                           pclatu	equ	0xFFB
 13721                           pclath	equ	0xFFA
 13722                           tblptru	equ	0xFF8
 13723                           tblptrh	equ	0xFF7
 13724                           tblptrl	equ	0xFF6
 13725                           tablat	equ	0xFF5
 13726                           prodh	equ	0xFF4
 13727                           prodl	equ	0xFF3
 13728                           intcon	equ	0xFF2
 13729                           intcon2	equ	0xFF1
 13730                           intcon3	equ	0xFF0
 13731                           postinc0	equ	0xFEE
 13732                           fsr0h	equ	0xFEA
 13733                           fsr0l	equ	0xFE9
 13734                           wreg	equ	0xFE8
 13735                           postinc1	equ	0xFE6
 13736                           postdec1	equ	0xFE5
 13737                           fsr1h	equ	0xFE2
 13738                           fsr1l	equ	0xFE1
 13739                           indf2	equ	0xFDF
 13740                           postinc2	equ	0xFDE
 13741                           postdec2	equ	0xFDD
 13742                           fsr2h	equ	0xFDA
 13743                           fsr2l	equ	0xFD9
 13744                           status	equ	0xFD8


Data Sizes:
    Strings     357
    Constant    99
    Data        2
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     47     111
    BANK1           256     12      12
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_21(CODE[15]), STR_20(CODE[16]), STR_19(CODE[11]), STR_18(CODE[18]), 
		 -> STR_17(CODE[23]), STR_16(CODE[16]), STR_15(CODE[17]), STR_14(CODE[17]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), 
		 -> STR_9(CODE[23]), STR_8(CODE[23]), STR_7(CODE[9]), STR_6(CODE[8]), 
		 -> STR_5(CODE[13]), STR_4(CODE[7]), STR_3(CODE[24]), STR_2(CODE[24]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    i2___awtoft->i2___ftpack
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    i2___ftmul->i2___awtoft
    ___ftsub->___ftadd
    ___ftadd->i2___ftmul
    ___ftdiv->i2___ftpack
    ___lltoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->___ftge
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    ___ftmul->___awtoft
    ___ftge->___ftmul
    ___awtoft->___ftpack
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   58171
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              2     2      0    7823
                                             40 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    5216
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            3     3      0   17094
                                             46 BANK0      1     1      0
                                             10 BANK1      2     2      0
                           ___awtoft
                             ___ftge
                            ___ftmul
                            _lcdInst
                             _printf
                   _read_colorsensor
                      _servo_rotate0
                      _servo_rotate1
 ---------------------------------------------------------------------------------
 (2) _servo_rotate1                                       10     8      2     476
                                             16 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (2) _servo_rotate0                                       10     8      2     392
                                             16 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    14    14      0    2607
                                             19 BANK0     14    14      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4000
                                             28 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1150
                                             43 BANK0      3     3      0
                                              0 BANK1      6     0      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3123
                                             24 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2164
                                             16 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    5216
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            3     3      0    7385
                                             40 BANK0      3     3      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    5216
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         2     2      0    5640
                                             40 BANK0      2     2      0
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    5021
                                             28 BANK0     12     4      8
                                              0 BANK1     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     896
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   1     1      0    2005
                                             19 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    2005
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   42567
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
                    i2_servo_rotate1
 ---------------------------------------------------------------------------------
 (6) i2_servo_rotate1                                     10     8      2     213
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  14    14      0     505
                                              3 COMRAM    14    14      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    2329
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     239
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     126
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   38211
                                             98 COMRAM    16    14      2
                            ___awdiv
                            ___ftadd
                            ___fttol
                                _pow
                         i2___awtoft
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   31868
                                             81 COMRAM    17    11      6
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
                           i2___ftge
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   10255
                                             51 COMRAM     5     2      3
                            ___ftadd
                          _eval_poly
                              _frexp
                         i2___awtoft
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   17868
                                             72 COMRAM     9     6      3
                            ___ftdiv
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                         i2___awtoft
                           i2___ftge
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (7) i2___awtoft                                           4     1      3     920
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    4957
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                            ___fttol
                              _frexp
                           i2___ftge
 ---------------------------------------------------------------------------------
 (8) i2___ftge                                             9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                            ___ftadd (ARG)
                         i2___awtoft (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4     901
                                             54 COMRAM    10     6      4
                            ___fttol (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    4829
                                             39 COMRAM    12     5      7
                            ___ftadd
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     521
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___ftmul                                           15     9      6    1337
                                             12 COMRAM    15     9      6
                              _frexp (ARG)
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    2706
                                             39 COMRAM     6     0      6
                            ___ftadd
                         i2___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    2409
                                             27 COMRAM    12     6      6
                              _frexp (ARG)
                         i2___awtoft (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1209
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4     832
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) i2___ftpack                                           8     3      5     699
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     ___awtoft
       ___ftpack
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _servo_rotate0
     _servo_rotate1
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___ftadd
       _frexp (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftmul (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
     ___fttol
       ___ftadd (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftmul (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftmul (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
     _pow
       ___ftneg
       ___fttol
         ___ftadd (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftmul (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
       ___lltoft
         i2___ftpack
       _exp
         ___ftdiv
           i2___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
           i2___awtoft (ARG)
             i2___ftpack
         ___fttol
           ___ftadd (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
         _eval_poly
           ___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
           i2___ftmul
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___wmul
         _floor
           ___altoft
             ___fttol (ARG)
               ___ftadd (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftmul (ARG)
                   _frexp (ARG)
                   i2___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
             i2___ftpack (ARG)
           ___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___fttol
             ___ftadd (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
           _frexp
           i2___ftge
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
             i2___ftmul
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___wmul
         i2___awtoft
           i2___ftpack
         i2___ftge
         i2___ftmul
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
       _log
         ___ftadd
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
         _eval_poly
           ___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
           i2___ftmul
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___wmul
         _frexp
         i2___awtoft
           i2___ftpack
         i2___ftmul
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
       i2___ftge
       i2___ftmul
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
     i2___awtoft
       i2___ftpack
     i2___ftmul
       _frexp (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2_servo_rotate1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C       C       7        4.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2F      6F       5       86.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F8      34        0.0%
DATA                 0      0      F8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 28 16:19:24 2017

            i2servo_rotate1@i 0007              i2servo_rotate1@j 0009                  ___altoft@exp 003F  
          i2_I2C_Master_Start 312C            i2_I2C_Master_Write 310A                 ___altoft@sign 0040  
                          l34 30A2                ?_emergencystop 0001                  ___awdiv@sign 0006  
         ___wmul@multiplicand 00D0            i2___lwdiv@dividend 0001                   __CFG_BORV$3 000000  
                  i2___awtoft 2EDE                    i2___ftpack 24F6                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                 __CFG_OSC$HS 000000                  ___ftadd@exp1 0027                  ___ftadd@exp2 0026  
                ___ftadd@sign 0025                           l333 01CC                           l342 02D0  
                         l329 007A                           l364 306A                           l372 268A  
                         l375 26BA                           l383 25E2                           l378 26F2  
                         l386 2612                           l396 189E                           l389 264A  
                         l823 24E4                           l693 1978                           l876 2A2C  
                         l886 2B6E                           _GIE 007F97                  __CFG_CPB$OFF 000000  
         i2servo_rotate1@duty 0005                           _PEN 007E2A                  __CFG_CPD$OFF 000000  
                         _SEN 007E28                           _PSA 007EAB           ?i2_I2C_Master_Start 0001  
         ?i2_I2C_Master_Write 0002                           _exp 0EEC                           _log 1676  
                         _isr 0008                           _pow 1280                  ___awmod@sign 00D3  
                         prod 000FF3                           wreg 000FE8                  ?_bottle_time 0001  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0012                  ___ftdiv@sign 0017  
                __CFG_WDT$OFF 000000                          l4110 2720                          l4130 278C  
                        l4122 276A                          l4114 2734                          l4106 2710  
                        l4116 2740                          l4118 2746                          l4126 2778  
                        l5110 190C                          l5102 18BA                          l4170 2468  
                        l5202 08D0                          l5210 0916                          l5130 199E  
                        l5114 192C                          l5106 18CE                          l4172 2478  
                        l5140 29DC                          l5204 08D6                          l5124 1982  
                        l5116 195C                          l5108 18DC                          l4182 24D2  
                        l4174 247E                          l5142 29E8                          l5302 0B76  
                        l5222 0956                          l5070 2FA8                          l5118 196A  
                        l5152 2A1E                          l5144 29EE                          l5160 2B2A  
                        l5304 0B8E                          l5240 09AE                          l5208 08DE  
                        l5162 2B36                          l5306 0B96                          l5242 09B4  
                        l5226 0972                          l5314 17B0                          l5164 2B3C  
                        l5228 0978                          l5308 0BA2                          l5412 14B8  
                        l5332 1836                          l5324 17FE                          l5270 0A66  
                        l5182 080C                          l5422 14F6                          l5318 17C6  
                        l5342 25B6                          l5168 2B60                          l5088 2FD0  
                        l5264 0A24                          l5256 09EA                          l5184 081E  
                        l5416 14D6                          l5328 1820                          l5600 032A  
                        l5282 0A9C                          l5258 0A02                          l5194 0858  
                        l5178 07F8                          l5442 2DF6                          l5450 22EC  
                        l5426 1514                          l5354 2604                          l5284 0AA8  
                        l5292 0AD6                          l5276 0A80                          l5268 0A5C  
                        l5188 0828                          l5700 1658                          l5460 2370  
                        l5372 267C                          l5348 25D4                          l5612 0372  
                        l5604 0340                          l5294 0ADC                          l5454 232C  
                        l5366 265E                          l5622 03A8                          l5542 0032  
                        l5296 0B28                          l5288 0AC2                          l5392 1430  
                        l5608 035C                          l5378 26AC                          l5618 0394  
                        l5570 01B8                          l5652 1CCC                          l5580 025E  
                        l5636 03FC                          l5572 01D6                          ?_exp 0049  
                        ?_log 0034                          l5662 1CF6                          l5398 146A  
                        l5574 01EC                          l5566 0152                          l5558 00CA  
                        l5680 158C                          l5656 1CD6                          l5584 02C6  
                        l5674 1556                          l5586 02DC                          l5770 1E18  
                        l5692 1608                          l5780 1E36                          l5772 1E1E  
                        ?_isr 0001                          l5686 15CA                          l5774 1E24  
                        l5776 1E2A                          l5768 1E12                          l5784 1E3A  
                        l5698 1620                          l5778 1E30                          ?_pow 0052  
          i2_read_colorsensor 2108                          STR_1 FFE8                          STR_2 FEB2  
                        STR_3 FE9A                          STR_4 FFF8                          STR_5 FFC7  
                        STR_6 FFF0                          STR_7 FFDF                          STR_8 FEE1  
                        STR_9 FEF8                          _T0CS 007EAD                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u4195 2C08                          u5510 00E0  
                        u5600 0304                          u5371 140C                          _RCEN 007E2B  
                        u5391 1446                          u5551 01EA                          u4840 2FA6  
                        u5480 007A                          i2l34 30B6                          u5490 0096  
                        u5707 2CDA                          u5717 0406                          u5807 2B98  
                        u5727 25D6                          u5817 2BA0                          u5737 2606  
                        u5827 2BCA                          u5747 267E                          u5837 2BD2  
                        u5757 26AE                          u5847 2068                          u5767 2D44  
                        u5777 2D80                          u5787 1D6E                          u5797 1666  
                        _TMR0 000FD6                          _RSEN 007E29                          _main 1D7E  
                ___ftpack@arg 00CE                          _keys FE37                  ___ftpack@exp 00D1  
                        _time 009A                          fsr0h 000FEA                          fsr1h 000FE2  
          i2___lwdiv@quotient 0005                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 007E                          exp@x 0049                          log@x 0034  
                        isr@i 0073          ??i2_I2C_Master_Start 0002                  i2___ftge@ff1 0001  
                i2___ftge@ff2 0004          ??i2_I2C_Master_Write 0004                          pow@x 0052  
                        pow@y 0055                          prodh 000FF4                          prodl 000FF3  
                        start 000E           ?i2_read_colorsensor 0001                 __CFG_IESO$OFF 000000  
             __end_ofi2_putch 30F4                  i2___awtoft@c 0009                 __CFG_MCLRE$ON 000000  
                ___ftmul@cntr 00E7                  i2___ftmul@f1 000D                  i2___ftmul@f2 0010  
                ___param_bank 000000                  ___ftmul@sign 00E8                   i2_lcdNibble 2D8C  
               ?_bottle_count 0001                  ___fttol@exp1 0036                         ??_exp 004C  
                       ??_log 0037                  ___fttol@lval 0032                         ??_isr 00BE  
                       ??_pow 0058              ?_I2C_Master_Init 00DB              ?_I2C_Master_Read 0001  
            ?_I2C_Master_Wait 0001             ??i2_servo_rotate1 0003              ?_I2C_Master_Stop 0001  
       i2servo_rotate1@degree 0001                         ?_main 0001                         _ACKEN 007E2C  
                       _ACKDT 007E2D               __end_of___awdiv 29BE               __end_of___ftadd 1280  
                       STR_10 FF43                         STR_11 FF32                         STR_20 FF98  
                       STR_12 FF54                         STR_21 FFB8                         STR_13 FF65  
                       STR_14 FF76                         STR_22 FF21                         STR_15 FF87  
                       STR_16 FFA8                         STR_17 FECA                         STR_18 FF0F  
                       STR_19 FFD4               __end_of___awmod 2796               __end_of___ftdiv 1F50  
             __end_of___ftneg 304A               __end_of___lldiv 24F6               __end_of___ftmul 1554  
             ___awdiv@divisor 0003               __end_of___ftsub 2EA0               __end_of___fttol 1B9C  
                       _T0PS0 007EA8                         _T0PS1 007EA9                         _T0PS2 007EAA  
             __end_of___lwdiv 2A36               __end_of___lwmod 2B78                         i2l262 06BA  
                       i2l271 0522                         i2l272 052C                         i2l264 0452  
                       i2l265 06B6                         i2l274 0628                         i2l275 0638  
                       i2l286 07AE                         i2l383 28EA                         i2l720 1142  
                       i2l386 290E                         i2l731 11F2                         i2l740 120E  
                       i2l716 1118                         i2l396 21D8                         i2l389 2938  
                       i2l751 1F1E                         i2l913 13E8                         i2l908 12B8  
                       i2l693 2584                         i2l773 303C                         i2l876 2D32  
             ___awdiv@counter 0005                         i2l886 2E56          ??i2_read_colorsensor 0004  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
             ??_servo_rotate0 00D0               ??_servo_rotate1 00D0                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000             read_colorsensor@i 00DD  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011  
             __end_of_lcdInst 30E8                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _nRBPU 007F8F                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD 2D8C                __CFG_EBTRB$OFF 000000  
                  i2isdigit@c 0003                 ___awtoft@sign 00D9               __end_of_dpowers FE52  
                       _color 008A                         _floor 1F50                         _etime 0078  
                       _ldexp 2374                         _frexp 2826                         _errno 00AB  
             __end_of_isdigit 2FDA                 ___ftpack@sign 00D2                         _putch 30C8  
                       _stime 007C                         pclath 000FFA                         tablat 000FF5  
            __end_ofi2___ftge 2826                         pow@yi 005F               __end_of_timeset FE61  
            __end_ofi2___wmul 3026               __end_of_standby 2CEA                         status 000FD8  
              __CFG_PBADEN$ON 000000                 i2printf@width 001E                   exp@exponent 004F  
          __size_ofi2___ftmul 00F4              __end_ofi2_printf 0EEC            __size_ofi2___lwdiv 0052  
          __size_ofi2___lwmod 0042                   ldexp@newexp 0037               __initialization 2EA0  
                 log@exponent 0037            __size_ofi2_lcdInst 000C               ??_emergencystop 00E6  
              ??_bottle_count 00E6                  __end_of_main 1E6A                  __end_of_keys FE48  
               i2___ftmul@exp 0016                    i2printf@ap 0018            __size_ofi2_isdigit 001E  
                 ?i2___awtoft 0009                   ?i2___ftpack 0001                        ??_main 00ED  
               ___fttol@sign1 0031                 __activetblptr 000002             ?_I2C_Master_Start 0001  
           ?_I2C_Master_Write 00CF                servo_rotate0@i 00D4                servo_rotate0@j 00D6  
              servo_rotate1@i 00D4                servo_rotate1@j 00D6            ??_I2C_Master_Start 00CF  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 00D1  
                      ?_floor 0041                        ?_ldexp 0034                        ?_frexp 0001  
            __end_of___altoft 2AAE                        _T08BIT 007EAE              ___awdiv@dividend 0001  
             i2lcdNibble@data 0002              __end_of___awtoft 2E1E                        ?_putch 0001  
            __end_of___ftpack 19AC               i2lcdNibble@temp 0001              __end_of___lltoft 2C94  
                      _INT0IE 007F94                        _INT1IE 007F83                        _INT1IF 007F80  
                      _INT2IE 007F84                        i2l1071 0FA2                        i2l1072 10C6  
                      i2l1082 2020                        i2l3130 2552                        i2l3122 2514  
                      i2l3202 11A2                        i2l3132 2570                        i2l3124 251E  
                      i2l3204 11AC                        i2l3134 257A                        i2l3126 253C  
                      i2l3118 2506                        i2l3222 122A                        i2l3214 11E0  
                      i2l3206 11B6                        i2l3232 125A                        i2l3216 11EA  
                      i2l3208 11BE                        i2l3160 2A64                        i2l3312 27C6  
                      i2l3402 1E92                        i2l3242 1AD4                        i2l3322 2822  
                      i2l3180 1150                        i2l3332 1BC4                        i2l3260 1B3A  
                      i2l3316 27F6                        i2l4062 294E                        i2l3174 1126  
                      i2l3158 2A58                        i2l3270 1B62                        i2l3510 23F6  
                      i2l4206 2FFA                        i2l3408 1EBA                        i2l3352 1C1E  
                      i2l3272 1B6E                        i2l3264 1B4A                        i2l4224 3082  
                      i2l4074 2974                        i2l4090 29A6                        i2l3362 1C46  
                      i2l3338 1BEC                        i2l3274 1B74                        i2l3290 284E  
                      i2l3514 2402                        i2l4234 2D00                        i2l4076 297C  
                      i2l4068 295E                        i2l3620 2C4A                        i2l3428 1EF8  
                      i2l3196 1180                        i2l3356 1C2E                        i2l4236 2D08  
                      i2l4094 29B4                        i2l4086 299C                        i2l4078 2980  
                      i2l3446 2E76                        i2l3366 1C56                        i2l3278 1B8A  
                      i2l4246 2D28                        i2l4238 2D0C                        i2l4262 2E4C  
                      i2l4254 2E2C                        i2l3480 221A                        i2l3472 1FA6  
                      i2l3464 1F7E                        i2l3528 2EF2                        i2l3704 0F74  
                      i2l4256 2E34                        i2l3618 2C3E                        i2l3482 2296  
                      i2l3490 238C                        i2l4530 2AE2                        i2l4258 2E38  
                      i2l3468 1F8C                        i2l4540 2B06                        i2l4700 0D7E  
                      i2l4620 0BCA                        i2l4612 218A                        i2l4604 215E  
                      i2l3726 109C                        i2l3670 1692                        i2l4534 2AEA  
                      i2l4710 0DBC                        i2l4630 0BEE                        i2l4560 1A96  
                      i2l4712 0DC4                        i2l4624 0BDA                        i2l4608 217A  
                      i2l3498 23D2                        i2l4730 0E0C                        i2l4706 0D98  
                      i2l4650 0C84                        i2l4626 0BE8                        i2l4570 28C6  
                      i2l3692 0F04                        i2l3676 16B4                        i2l4548 19C6  
                      i2l4724 0DF0                        i2l4644 0C7A                        i2l4652 0CB8  
                      i2l4636 0C1C                        i2l4726 0DF8                        i2l4734 0E1E  
                      i2l4718 0DDA                        i2l4670 0D0C                        i2l4646 0C7E  
                      i2l4750 0ED2                        i2l4582 2902                        i2l3952 12C6  
                      i2l4736 0E24                        i2l4744 0EAE                        i2l4664 0CEE  
                      i2l4576 28DE                        i2l4912 0662                        i2l3698 0F3C  
                      i2l3970 1364                        i2l4738 0E68                        i2l4746 0EC4  
                      i2l4682 0D38                        i2l4594 2120                        i2l4906 0646  
                      i2l4748 0ECA                        i2l4684 0D3C                        i2l4668 0D08  
                      i2l4908 0654                        i2l4860 04E8                        i2l3966 1342  
                      i2l3958 12DE                        i2l4598 2130                        i2l4862 04F2  
                      i2l4944 0790                        i2l4856 04DC                        i2l4698 0D68  
                      i2l4938 077A                        i2l4890 05DE                        i2l4948 0798  
                      u252_41 10E4                        u253_41 10F8                        u273_41 1AB8  
                      u294_41 1E7A                        u286_41 1BAC                        u296_41 1EA2  
                      u288_41 1BD4                        _TMR0IE 007F95                        _TMR0IF 007F92  
                   ??i2_putch 0003                        _TMR0ON 007EAF                        _SSPADD 000FC8  
                      _TRISC3 007CA3                        _TRISC4 007CA4                        _SSPBUF 000FC9  
              __CFG_XINST$OFF 000000             ?_read_colorsensor 0001                        ___ftge 22AC  
                      ___wmul 2F4C            ??_read_colorsensor 00D1                     ??___awdiv 0005  
                   ??___ftadd 0022                __CFG_STVREN$ON 000000                     ??___awmod 00D2  
                   ??___ftdiv 000F                     ??___ftneg 0004                     ??___lldiv 00D6  
                   ??___ftmul 00E0                     ??___ftsub 002E                     ??___fttol 002C  
                   ??___lwdiv 00D2                     ??___lwmod 00D9                 dec_to_hex@num 0063  
                      clear_0 2EBE                        clear_1 2ECA              ___awdiv@quotient 0007  
             ___awmod@divisor 00D0               ___awmod@counter 00D2                     ??_lcdInst 00D0  
                      _printf 07EA                        floor@i 0044                        floor@x 0041  
       ___ftmul@f3_as_product 00E4                     ??_initLCD 00D1                     ??_isdigit 00CE  
           __end_ofi2___ftmul 1C90             __end_ofi2___lwdiv 2D3C                  __mediumconst FE36  
           __end_ofi2___lwmod 2E60                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_standby 00E6             __end_ofi2_lcdInst 3100  
           __end_ofi2_isdigit 308A              __end_ofexp@coeff FE7F          __size_of_bottle_time 0036  
            __end_oflog@coeff FE9A                    __accesstop 0080       __end_of__initialization 2ED0  
                  ___altoft@c 0037                    ___ftadd@f1 001C                    ___ftadd@f2 001F  
         __size_ofi2___awtoft 0038           __size_ofi2___ftpack 00AE                    ___ftge@ff1 0100  
                  ___ftge@ff2 0103                  eval_poly@res 0031                 ___rparam_used 000001  
                  ___ftdiv@f1 0009                    ___ftdiv@f2 000C                    ___ftdiv@f3 0013  
                  ___ftneg@f1 0001                    ___awtoft@c 00D6                i2___ftpack@arg 0001  
              i2___ftpack@exp 0004                    ___ftmul@f1 00DA                    ___ftmul@f2 00DD  
                  ___ftsub@f1 0028                    ___ftsub@f2 002B                    ___fttol@f1 0028  
          i2___lwmod@dividend 0008                __pcstackCOMRAM 0001                  __pidataBANK0 3134  
                  ___lltoft@c 0009                 __end_of_floor 202E                 __end_of_ldexp 243A  
               __end_of_frexp 28B6                i2___ftmul@cntr 001A                i2___ftmul@sign 001B  
               __end_of_putch 30D8                   i2printf@idx 0017                   i2printf@val 001B  
          __size_of_date_time 00EE           servo_rotate0@degree 00CE                     ?i2___ftge 0001  
         servo_rotate1@degree 00CE                     ?i2___wmul 0001            __size_of_lcdNibble 0060  
                 i2putch@data 0003                     ?i2_printf 000D              _flag_bottle_high 00AF  
 __size_of_I2C_ColorSens_Init 00DA                       ??_floor 0044                       ??_ldexp 0039  
                     ??_frexp 0006          __end_of_bottle_count 1676                    _dec_to_hex 19AC  
                     ??_putch 00D0                    __pbssBANK0 0080            __size_of_eval_poly 00D2  
           servo_rotate0@duty 00D2             servo_rotate1@duty 00D2               i2_servo_rotate1 28B6  
          __size_of_read_time 0068                       ?___ftge 0100                  ?i2_lcdNibble 0001  
                     ?___wmul 00CE                     ?___altoft 0037                     ?___awtoft 00D6  
                   ?___ftpack 00CE                       ?_printf 00DA            __size_of_operation 0400  
                   ?___lltoft 0009                    _flag_yopNC 00B5               _bottle_read_bot 00A7  
                  ??i2___ftge 0007               _bottle_read_top 00A9                    ??i2___wmul 0005  
                  ??i2_printf 0013                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7             __end_of_date_time 1D7E                       i2_putch 30E8  
           _bottle_count_disp 00ED   __size_ofi2_I2C_Master_Start 0008             __end_of_lcdNibble 2BD8  
 __size_ofi2_I2C_Master_Write 000A                 ?_operationend 0001                       __Hparam 0000  
                     __Lparam 0000               __size_of___ftge 00C8                       ___awdiv 293A  
                     ___ftadd 10D4                       ___awmod 26F4                       ___ftdiv 1E6A  
                     ___ftneg 3026                       ___lldiv 243A               __size_of___wmul 0036  
                     ___ftmul 13F6                       ___ftsub 2E60                       ___fttol 1AA8  
                     ___lwdiv 29BE                       ___lwmod 2B16                    _curr_state 00BD  
                  ??___altoft 003B                       __pcinit 2EA0                  ??i2___awtoft 000C  
                ??i2___ftpack 0006                    ??___awtoft 00D9                    ??___ftpack 00D3  
           __end_of_eval_poly 22AC       i2___ftmul@f3_as_product 0017                       __ramtop 1000  
                     _lcdInst 30D8                    ??___lltoft 000D                       __ptext0 1D7E  
                     __ptext1 2C94                       __ptext2 308A                       __ptext3 0012  
                     __ptext4 25A4                       __ptext5 264C                       __ptext6 1794  
                     __ptext7 13F6                       __ptext8 22AC                       __ptext9 2DDA  
             __size_of_printf 03D6                dec_to_hex@temp 006B                       _initLCD 2D3C  
           __end_of_hexpowers FE5A                 i2_isdigit$806 0002                       _dpowers FE48  
                __size_of_exp 01E8                  __size_of_log 011E                       _isdigit 2FB0  
                __size_of_isr 07E2   __size_ofi2_read_colorsensor 00D2                  __size_of_pow 0176  
            ___awmod@dividend 00CE             __end_of_read_time 2B16      __size_of_I2C_Master_Init 0060  
    __size_of_I2C_Master_Read 002E      __size_of_I2C_Master_Wait 0014                    date_time@i 00E8  
    __size_of_I2C_Master_Stop 0008         __end_of_servo_rotate0 26F4         __end_of_servo_rotate1 264C  
                     _timeset FE5A                       _testint 00A1                       _standby 2C94  
                 ?_dec_to_hex 0063       __end_ofi2_servo_rotate1 293A                __pintcode_body 0412  
        end_of_initialization 2ED0                       exp@sign 0051                 __Lmediumconst FE36  
                     int_func 0412           i2___wmul@multiplier 0001             __end_of_operation 0412  
              _operation_disp 00B7            __end_ofi2___awtoft 2F16            __end_ofi2___ftpack 25A4  
              _operation_time 00B9                ??_operationend 00E6     __size_of_I2C_Master_Start 0008  
   __size_of_I2C_Master_Write 000A               ___lldiv@divisor 00D2                       pow@sign 005E  
             ___lldiv@counter 00DA                       printf@c 0109                       printf@f 00DA  
            I2C_Master_Init@c 00DB              I2C_Master_Read@a 00CF                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc1 000FE6  
                     postinc2 000FDE         __end_of_emergencystop 306C                     _PORTAbits 000F80  
       __size_of_bottle_count 0122     __size_of_read_colorsensor 010C     read_colorsensor@color_low 00D5  
           i2_I2C_Master_Read 2FDA             i2_I2C_Master_Wait 30B6             i2_I2C_Master_Stop 3124  
           i2___lwdiv@divisor 0003                     i2___ftmul 1B9C                     i2___lwdiv 2CEA  
                   i2___lwmod 2E1E             i2___lwdiv@counter 0007            ?i2_I2C_Master_Read 0001  
          ?i2_I2C_Master_Wait 0001  i2read_colorsensor@color_high 000C            ?i2_I2C_Master_Stop 0001  
                  _start_time 007A                     i2_lcdInst 30F4                   ___ftdiv@exp 0016  
                 printf@width 0107               i2___awtoft@sign 000C           ??i2_I2C_Master_Read 0002  
             i2___ftpack@sign 0005                     i2_isdigit 306C           ??i2_I2C_Master_Wait 0001  
         ??i2_I2C_Master_Stop 0002                   ___ftmul@exp 00E3                  _bottle_count 1554  
              __end_of___ftge 2374                __end_of___wmul 2F82           __size_of_dec_to_hex 00FC  
        __size_ofi2_lcdNibble 004E                 i2lcdInst@data 0003                    floor@expon 0047  
            i2___wmul@product 0005                __end_of_printf 0BC0                  i2printf@flag 001D  
   __end_ofi2_I2C_Master_Read 3000     __end_ofi2_I2C_Master_Wait 30C8                  i2printf@prec 001A  
         start_initialization 2EA0     __end_ofi2_I2C_Master_Stop 312C             __size_ofi2___ftge 0090  
                  eval_poly@d 002B                    eval_poly@n 002D                    eval_poly@x 0028  
           __size_ofi2___wmul 0026                    ldexp@value 0034                   __end_of_exp 10D4  
                 __end_of_log 1794                   __end_of_isr 07EA                   __end_of_pow 13F6  
                   i2printf@c 0020                     i2printf@f 000D                 ??_bottle_time 00E6  
       i2I2C_Master_Read@temp 0003                    ?i2___ftmul 000D                    ?i2___lwdiv 0001  
                  ?i2___lwmod 0008              ?i2_servo_rotate1 0001             __size_ofi2_printf 032C  
                  frexp@value 0001             ??_I2C_Master_Init 00DF             ??_I2C_Master_Read 00CF  
           ??_I2C_Master_Wait 00CE                    ?i2_lcdInst 0001             ??_I2C_Master_Stop 00CF  
  read_colorsensor@color_high 00D9                    ?i2_isdigit 0001                      ??___ftge 00E9  
                    ??___wmul 00D2                   __pdataBANK0 00ED              __CFG_LPT1OSC$OFF 000000  
                    ??_printf 00E2             __size_of___altoft 0078                    read_time@i 0004  
           __size_of___awtoft 0044             __size_of___ftpack 010C             __size_of___lltoft 005C  
  __end_of_I2C_ColorSens_Init 2108                   __pbssCOMRAM 0076          __end_of_operationend 30A2  
               __pcstackBANK0 00BE                 __pcstackBANK1 0100             i2___lwmod@divisor 000A  
           i2___lwmod@counter 000C                      ?i2_putch 0001           __end_of_bottle_time 2F4C  
            _I2C_Master_Start 311C           i2I2C_Master_Write@d 0002              _I2C_Master_Write 3100  
                   _date_time 1C90              ___lwdiv@dividend 00CE             __CFG_CCP2MX$PORTC 000000  
                   __pintcode 0008                 __pmediumconst FE36                     _lcdNibble 2B78  
                    ?___awdiv 0001                      ?___ftadd 001C                      ?___awmod 00CE  
                    ?___ftdiv 0009                      ?___ftneg 0001                      ?___lldiv 00CE  
                    ?___ftmul 00DA                      ?___ftsub 0028                      ?___fttol 0028  
                    ?___lwdiv 00CE                      ?___lwmod 00D5                      ?_lcdInst 0001  
            dec_to_hex@hexnum 006F                      ?_initLCD 0001                     _colorprev 0092  
                    ?_isdigit 0001              _read_colorsensor 1794    __size_ofi2_I2C_Master_Read 0026  
  __size_ofi2_I2C_Master_Wait 0012                     _eval_poly 21DA    __size_ofi2_I2C_Master_Stop 0008  
                 _flag_bottle 00AD                   _flag_picbug 00B1                     _hexpowers FE52  
                    ?_standby 0001              ___lwdiv@quotient 00D3                __size_of_floor 00DE  
              __size_of_ldexp 00C6                __size_of_frexp 0090                  ??_dec_to_hex 0065  
                 ??i2___ftmul 0013                   ??i2___lwdiv 0005                   ??i2___lwmod 000C  
                   _read_time 2AAE                __size_of_putch 0010                    operation@i 010A  
  __end_ofi2_I2C_Master_Start 3134    __end_ofi2_I2C_Master_Write 3114                   ??i2_lcdInst 0003  
              ___wmul@product 00D2                      _LATAbits 000F89                      _LATCbits 000F8B  
                    _LATDbits 000F8C                   ??i2_isdigit 0001                    ?_date_time 0001  
                    i2u303_40 1F98                      i2u307_40 23AC                      i2u307_48 23AE  
                    i2u336_40 0F7C                      i2u337_40 0F7E                      i2u409_40 2FF8  
                    i2u282_40 2876                      i2u275_40 1AF2                      i2u282_48 2878  
                    i2u275_45 1AEA                     _operation 0012                      i2u378_40 132A  
                    i2u590_47 2DAC                      i2u591_47 2DCC                      i2u592_47 2DD4  
                    i2u585_47 04B2                      i2u586_47 07A0                      i2u587_47 28E0  
                    i2u588_47 2904                      i2u589_47 2DA4              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001            __end_of_dec_to_hex 1AA8    __end_ofi2_read_colorsensor 21DA  
           ___wmul@multiplier 00CE                      i2___ftge 2796                      i2___wmul 3000  
               lcdNibble@data 00CF                    printf@flag 0106                 lcdNibble@temp 00CE  
                  printf@prec 0103                    ?_eval_poly 0028                      i2_printf 0BC0  
                 _bottle_time 2F16           I2C_Master_Read@temp 00D0            _bottle_count_array 0080  
                  ?_read_time 0001            dec_to_hex@quotient 0071              __size_ofi2_putch 000C  
                   frexp@eptr 0004                      __Hrparam 0000           i2read_colorsensor@i 0010  
                  ?_operation 0001                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
                 dec_to_hex@i 006D        __size_of_servo_rotate0 00A8        __size_of_servo_rotate1 00A8  
            __size_of___awdiv 0084              __size_of___ftadd 01AC              __size_of___awmod 00A2  
            __size_of___ftdiv 00E6              __size_of___ftneg 0024         i2___wmul@multiplicand 0003  
            __size_of___lldiv 00BC                      ___altoft 2A36              __size_of___ftmul 015E  
            __size_of___ftsub 0040              __size_of___fttol 00F4              __size_of___lwdiv 0078  
            __size_of___lwmod 0062         __size_of_operationend 0018                      ___awtoft 2DDA  
                    ___ftpack 18A0                      ___lltoft 2C38                 _flag_top_read 00B3  
                 _isdigit$806 00CF            i2I2C_Master_Read@a 0002              __size_of_lcdInst 0010  
                    _exp$1249 004C               _I2C_Master_Init 2BD8               _I2C_Master_Read 2F82  
            __size_of_initLCD 0050               _I2C_Master_Wait 30A2               _I2C_Master_Stop 3114  
                    _isr$1377 0074              __size_of_isdigit 002A               ___lwdiv@divisor 00D0  
             ___lwdiv@counter 00D2                      __ptext10 18A0                      __ptext11 2D3C  
                    __ptext20 2F4C                      __ptext12 304A                      __ptext21 2B16  
                    __ptext13 1C90                      __ptext30 3114                      __ptext22 29BE  
                    __ptext14 2F82                      __ptext31 311C                      __ptext23 30D8  
                    __ptext15 2F16                      __ptext40 2CEA                      __ptext32 30A2  
                    __ptext24 2B78                      __ptext16 1554                      __ptext41 30F4  
                    __ptext25 26F4                      __ptext17 07EA                      __ptext50 1280  
                    __ptext42 2D8C                      __ptext34 28B6                      __ptext26 2BD8  
                    __ptext18 30C8                      __ptext51 1676                      __ptext43 2AAE  
                    __ptext35 2108                      __ptext27 243A                      __ptext19 2FB0  
                    __ptext60 21DA                      __ptext52 0EEC                      __ptext44 310A  
                    __ptext36 0BC0                      __ptext28 202E                      __ptext61 3000  
                    __ptext53 2EDE                      __ptext45 3124                      __ptext37 30E8  
                    __ptext29 3100                      __ptext62 1B9C                      __ptext54 2374  
                    __ptext46 312C                      __ptext38 306C                      __ptext63 2E60  
                    __ptext55 1F50                      __ptext47 2FDA                      __ptext39 2E1E  
                    __ptext64 10D4                      __ptext56 2796                      __ptext48 30B6  
                    __ptext65 3026                      __ptext57 2826                      __ptext49 19AC  
                    __ptext66 1E6A                      __ptext58 1AA8                      __ptext67 2C38  
                    __ptext59 2A36                      __ptext68 24F6                      __ptext69 293A  
                    _end_time 0076              __size_of_standby 0056                      _pow$1380 0058  
                    _pow$1381 005B        __size_of_emergencystop 0022                 __size_of_main 00EC  
             _dec_to_hex$1378 0065               _dec_to_hex$1379 0068                   ??_date_time 00E6  
                _operationend 308A                 ??i2_lcdNibble 0001                   ??_lcdNibble 00CE  
                    _testflag 00BB                      int$flags 007E                     printf@idx 0100  
                   printf@val 0104                      exp@coeff FE61                      log@coeff FE7F  
                   putch@data 00D0      __end_of_I2C_Master_Start 3124      __end_of_I2C_Master_Write 310A  
                  _INTCONbits 000FF2                   ??_eval_poly 002F                      isdigit@c 00D0  
               _servo_rotate0 264C                 _servo_rotate1 25A4                   ??_read_time 0004  
                    intlevel2 0000              ___lwmod@dividend 00D5              ___lldiv@dividend 00CE  
          _I2C_ColorSens_Init 202E      __end_of_read_colorsensor 18A0      __size_ofi2_servo_rotate1 0084  
                 ??_operation 00EC           ?_I2C_ColorSens_Init 0001                      printf@ap 0101  
     __end_of_I2C_Master_Init 2C38       __end_of_I2C_Master_Read 2FB0       __end_of_I2C_Master_Wait 30B6  
     __end_of_I2C_Master_Stop 311C                   lcdInst@data 00D0                 _emergencystop 304A  
         __end_ofi2_lcdNibble 2DDA              ___lldiv@quotient 00D6             I2C_Master_Write@d 00CF  
             ___lwmod@divisor 00D7   i2read_colorsensor@color_low 0008               ___lwmod@counter 00D9  
        ??_I2C_ColorSens_Init 00D1                ?_servo_rotate0 00CE                ?_servo_rotate1 00CE  

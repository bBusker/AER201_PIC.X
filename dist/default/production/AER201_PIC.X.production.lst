

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 06 00:15:52 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           ; Version 1.40
    46                           ; Generated 01/12/2016 GMT
    47                           ; 
    48                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4620 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	smallconst
    81  001000                     __psmallconst:
    82                           	opt stack 0
    83  001000  00                 	db	0
    84  001001                     _keys:
    85                           	opt stack 0
    86  001001  31                 	db	49
    87  001002  32                 	db	50
    88  001003  33                 	db	51
    89  001004  41                 	db	65
    90  001005  34                 	db	52
    91  001006  35                 	db	53
    92  001007  36                 	db	54
    93  001008  42                 	db	66
    94  001009  37                 	db	55
    95  00100A  38                 	db	56
    96  00100B  39                 	db	57
    97  00100C  43                 	db	67
    98  00100D  2A                 	db	42
    99  00100E  30                 	db	48
   100  00100F  23                 	db	35
   101  001010  44                 	db	68
   102  001011  00                 	db	0
   103  001012                     __end_of_keys:
   104                           	opt stack 0
   105  001012                     _dpowers:
   106                           	opt stack 0
   107  001012  0001               	dw	1
   108  001014  000A               	dw	10
   109  001016  0064               	dw	100
   110  001018  03E8               	dw	1000
   111  00101A  2710               	dw	10000
   112  00101C                     __end_of_dpowers:
   113                           	opt stack 0
   114  00101C                     _hexpowers:
   115                           	opt stack 0
   116  00101C  0001               	dw	1
   117  00101E  0010               	dw	16
   118  001020  0100               	dw	256
   119  001022  1000               	dw	4096
   120  001024                     __end_of_hexpowers:
   121                           	opt stack 0
   122  001024                     _timeset:
   123                           	opt stack 0
   124  001024  50                 	db	80
   125  001025  35                 	db	53
   126  001026  21                 	db	33
   127  001027  08                 	db	8
   128  001028  05                 	db	5
   129  001029  02                 	db	2
   130  00102A  17                 	db	23
   131  00102B                     __end_of_timeset:
   132                           	opt stack 0
   133  0000                     _ADCON0	set	4034
   134  0000                     _ADCON1	set	4033
   135  0000                     _INTCONbits	set	4082
   136  0000                     _LATA	set	3977
   137  0000                     _LATB	set	3978
   138  0000                     _LATC	set	3979
   139  0000                     _LATD	set	3980
   140  0000                     _LATDbits	set	3980
   141  0000                     _LATE	set	3981
   142  0000                     _PORTB	set	3969
   143  0000                     _SSPADD	set	4040
   144  0000                     _SSPBUF	set	4041
   145  0000                     _SSPCON1	set	4038
   146  0000                     _SSPCON2	set	4037
   147  0000                     _SSPSTAT	set	4039
   148  0000                     _TRISA	set	3986
   149  0000                     _TRISB	set	3987
   150  0000                     _TRISC	set	3988
   151  0000                     _TRISD	set	3989
   152  0000                     _TRISE	set	3990
   153  0000                     _ACKDT	set	32301
   154  0000                     _ACKEN	set	32300
   155  0000                     _INT1IE	set	32643
   156  0000                     _INT1IF	set	32640
   157  0000                     _PEN	set	32298
   158  0000                     _RCEN	set	32299
   159  0000                     _RSEN	set	32297
   160  0000                     _SEN	set	32296
   161  0000                     _TRISC3	set	31907
   162  0000                     _TRISC4	set	31908
   163  0000                     _nRBPU	set	32655
   164  00102B                     STR_4:
   165  00102B  25                 	db	37
   166  00102C  30                 	db	48	;'0'
   167  00102D  32                 	db	50	;'2'
   168  00102E  78                 	db	120	;'x'
   169  00102F  2F                 	db	47
   170  001030  25                 	db	37
   171  001031  30                 	db	48	;'0'
   172  001032  32                 	db	50	;'2'
   173  001033  78                 	db	120	;'x'
   174  001034  2F                 	db	47
   175  001035  25                 	db	37
   176  001036  30                 	db	48	;'0'
   177  001037  32                 	db	50	;'2'
   178  001038  78                 	db	120	;'x'
   179  001039  20                 	db	32
   180  00103A  20                 	db	32
   181  00103B  20                 	db	32
   182  00103C  20                 	db	32
   183  00103D  20                 	db	32
   184  00103E  20                 	db	32
   185  00103F  20                 	db	32
   186  001040  20                 	db	32
   187  001041  00                 	db	0
   188  001042                     STR_5:
   189  001042  25                 	db	37
   190  001043  30                 	db	48	;'0'
   191  001044  32                 	db	50	;'2'
   192  001045  78                 	db	120	;'x'
   193  001046  3A                 	db	58	;':'
   194  001047  25                 	db	37
   195  001048  30                 	db	48	;'0'
   196  001049  32                 	db	50	;'2'
   197  00104A  78                 	db	120	;'x'
   198  00104B  3A                 	db	58	;':'
   199  00104C  25                 	db	37
   200  00104D  30                 	db	48	;'0'
   201  00104E  32                 	db	50	;'2'
   202  00104F  78                 	db	120	;'x'
   203  001050  20                 	db	32
   204  001051  20                 	db	32
   205  001052  20                 	db	32
   206  001053  20                 	db	32
   207  001054  20                 	db	32
   208  001055  20                 	db	32
   209  001056  20                 	db	32
   210  001057  20                 	db	32
   211  001058  00                 	db	0
   212  001059                     STR_6:
   213  001059  30                 	db	48	;'0'
   214  00105A  31                 	db	49	;'1'
   215  00105B  32                 	db	50	;'2'
   216  00105C  33                 	db	51	;'3'
   217  00105D  34                 	db	52	;'4'
   218  00105E  35                 	db	53	;'5'
   219  00105F  36                 	db	54	;'6'
   220  001060  37                 	db	55	;'7'
   221  001061  38                 	db	56	;'8'
   222  001062  39                 	db	57	;'9'
   223  001063  61                 	db	97	;'a'
   224  001064  62                 	db	98	;'b'
   225  001065  63                 	db	99	;'c'
   226  001066  64                 	db	100	;'d'
   227  001067  65                 	db	101	;'e'
   228  001068  66                 	db	102	;'f'
   229  001069  00                 	db	0
   230  00106A                     STR_1:
   231  00106A  62                 	db	98	;'b'
   232  00106B  61                 	db	97	;'a'
   233  00106C  64                 	db	100	;'d'
   234  00106D  20                 	db	32
   235  00106E  69                 	db	105	;'i'
   236  00106F  6E                 	db	110	;'n'
   237  001070  74                 	db	116	;'t'
   238  001071  65                 	db	101	;'e'
   239  001072  72                 	db	114	;'r'
   240  001073  72                 	db	114	;'r'
   241  001074  75                 	db	117	;'u'
   242  001075  70                 	db	112	;'p'
   243  001076  74                 	db	116	;'t'
   244  001077  00                 	db	0
   245  001078                     STR_3:
   246  001078  50                 	db	80	;'P'
   247  001079  4F                 	db	79	;'O'
   248  00107A  52                 	db	82	;'R'
   249  00107B  54                 	db	84	;'T'
   250  00107C  42                 	db	66	;'B'
   251  00107D  3A                 	db	58	;':'
   252  00107E  20                 	db	32
   253  00107F  25                 	db	37
   254  001080  64                 	db	100	;'d'
   255  001081  00                 	db	0
   256  001082                     STR_2:
   257  001082  73                 	db	115	;'s'
   258  001083  74                 	db	116	;'t'
   259  001084  61                 	db	97	;'a'
   260  001085  6E                 	db	110	;'n'
   261  001086  64                 	db	100	;'d'
   262  001087  62                 	db	98	;'b'
   263  001088  79                 	db	121	;'y'
   264  001089  00                 	db	0
   265                           
   266                           ; #config settings
   267  00108A  00                 	db	0	; dummy byte at the end
   268  0000                     
   269                           	psect	cinit
   270  001CF6                     __pcinit:
   271                           	opt stack 0
   272  001CF6                     start_initialization:
   273                           	opt stack 0
   274  001CF6                     __initialization:
   275                           	opt stack 0
   276                           
   277                           ; Clear objects allocated to COMRAM (8 bytes)
   278  001CF6  EE00  F048         	lfsr	0,__pbssCOMRAM
   279  001CFA  0E08               	movlw	8
   280  001CFC                     clear_0:
   281  001CFC  6AEE               	clrf	postinc0,c
   282  001CFE  06E8               	decf	wreg,f,c
   283  001D00  E1FD               	bnz	clear_0
   284  001D02                     end_of_initialization:
   285                           	opt stack 0
   286  001D02                     __end_of__initialization:
   287                           	opt stack 0
   288  001D02  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   289  001D04  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   290  001D06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   291  001D08  6EF8               	movwf	tblptru,c
   292  001D0A  0100               	movlb	0
   293  001D0C  EF4C  F00C         	goto	_main	;jump to C main() function
   294                           tblptru	equ	0xFF8
   295                           postinc0	equ	0xFEE
   296                           wreg	equ	0xFE8
   297                           
   298                           	psect	bssCOMRAM
   299  000048                     __pbssCOMRAM:
   300                           	opt stack 0
   301  000048                     _time:
   302                           	opt stack 0
   303  000048                     	ds	7
   304  00004F                     _curr_state:
   305                           	opt stack 0
   306  00004F                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           
   311                           	psect	cstackBANK0
   312  000080                     __pcstackBANK0:
   313                           	opt stack 0
   314  000080                     printf@idx:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0x0
   318  000080                     	ds	1
   319  000081                     printf@ap:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x1
   323  000081                     	ds	2
   324  000083                     printf@prec:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0x3
   328  000083                     	ds	1
   329  000084                     printf@val:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x4
   333  000084                     	ds	2
   334  000086                     printf@flag:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x6
   338  000086                     	ds	1
   339  000087                     printf@width:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x7
   343  000087                     	ds	2
   344  000089                     printf@c:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x9
   348  000089                     	ds	1
   349                           tblptru	equ	0xFF8
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           
   353                           	psect	cstackCOMRAM
   354  000001                     __pcstackCOMRAM:
   355                           	opt stack 0
   356  000001                     ??i2_isdigit:
   357  000001                     ?i2___wmul:
   358                           	opt stack 0
   359  000001                     ?i2___lwdiv:
   360                           	opt stack 0
   361  000001                     i2lcdNibble@temp:
   362                           	opt stack 0
   363  000001                     i2___wmul@multiplier:
   364                           	opt stack 0
   365  000001                     i2___lwdiv@dividend:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x0
   369  000001                     	ds	1
   370  000002                     i2lcdNibble@data:
   371                           	opt stack 0
   372  000002                     i2_isdigit$506:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x1
   376  000002                     	ds	1
   377  000003                     i2lcdInst@data:
   378                           	opt stack 0
   379  000003                     i2putch@data:
   380                           	opt stack 0
   381  000003                     i2isdigit@c:
   382                           	opt stack 0
   383  000003                     i2___wmul@multiplicand:
   384                           	opt stack 0
   385  000003                     i2___lwdiv@divisor:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x2
   389  000003                     	ds	2
   390  000005                     i2___wmul@product:
   391                           	opt stack 0
   392  000005                     i2___lwdiv@quotient:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x4
   396  000005                     	ds	2
   397  000007                     i2___lwdiv@counter:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0x6
   401  000007                     	ds	1
   402  000008                     ?i2___lwmod:
   403                           	opt stack 0
   404  000008                     i2___lwmod@dividend:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x7
   408  000008                     	ds	2
   409  00000A                     i2___lwmod@divisor:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x9
   413  00000A                     	ds	2
   414  00000C                     i2___lwmod@counter:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0xB
   418  00000C                     	ds	1
   419  00000D                     ?i2_printf:
   420                           	opt stack 0
   421  00000D                     i2printf@f:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0xC
   425  00000D                     	ds	2
   426  00000F                     ??i2_printf:
   427                           
   428                           ; 1 bytes @ 0xE
   429  00000F                     	ds	4
   430  000013                     i2printf@idx:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x12
   434  000013                     	ds	1
   435  000014                     i2printf@ap:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x13
   439  000014                     	ds	2
   440  000016                     i2printf@prec:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x15
   444  000016                     	ds	1
   445  000017                     i2printf@val:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x16
   449  000017                     	ds	2
   450  000019                     i2printf@flag:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x18
   454  000019                     	ds	1
   455  00001A                     i2printf@width:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x19
   459  00001A                     	ds	2
   460  00001C                     i2printf@c:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x1B
   464  00001C                     	ds	1
   465  00001D                     ??_isr:
   466                           
   467                           ; 1 bytes @ 0x1C
   468  00001D                     	ds	15
   469  00002C                     isr@i:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x2B
   473  00002C                     	ds	1
   474  00002D                     ??_isdigit:
   475  00002D                     ??_I2C_Master_Wait:
   476  00002D                     ?___wmul:
   477                           	opt stack 0
   478  00002D                     ?___lwdiv:
   479                           	opt stack 0
   480  00002D                     ?___lldiv:
   481                           	opt stack 0
   482  00002D                     lcdNibble@temp:
   483                           	opt stack 0
   484  00002D                     ___wmul@multiplier:
   485                           	opt stack 0
   486  00002D                     ___lwdiv@dividend:
   487                           	opt stack 0
   488  00002D                     ___lldiv@dividend:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x2C
   492  00002D                     	ds	1
   493  00002E                     I2C_Master_Read@a:
   494                           	opt stack 0
   495  00002E                     lcdNibble@data:
   496                           	opt stack 0
   497  00002E                     _isdigit$506:
   498                           	opt stack 0
   499  00002E                     I2C_Master_Write@d:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x2D
   503  00002E                     	ds	1
   504  00002F                     I2C_Master_Read@temp:
   505                           	opt stack 0
   506  00002F                     lcdInst@data:
   507                           	opt stack 0
   508  00002F                     putch@data:
   509                           	opt stack 0
   510  00002F                     isdigit@c:
   511                           	opt stack 0
   512  00002F                     ___wmul@multiplicand:
   513                           	opt stack 0
   514  00002F                     ___lwdiv@divisor:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x2E
   518  00002F                     	ds	1
   519  000030                     ??_initLCD:
   520                           
   521                           ; 1 bytes @ 0x2F
   522  000030                     	ds	1
   523  000031                     ___lwdiv@counter:
   524                           	opt stack 0
   525  000031                     ___wmul@product:
   526                           	opt stack 0
   527  000031                     ___lldiv@divisor:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x30
   531  000031                     	ds	1
   532  000032                     ___lwdiv@quotient:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x31
   536  000032                     	ds	2
   537  000034                     ?___lwmod:
   538                           	opt stack 0
   539  000034                     ___lwmod@dividend:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x33
   543  000034                     	ds	1
   544  000035                     ___lldiv@quotient:
   545                           	opt stack 0
   546                           
   547                           ; 4 bytes @ 0x34
   548  000035                     	ds	1
   549  000036                     ___lwmod@divisor:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x35
   553  000036                     	ds	2
   554  000038                     ___lwmod@counter:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x37
   558  000038                     	ds	1
   559  000039                     ?_printf:
   560                           	opt stack 0
   561  000039                     ___lldiv@counter:
   562                           	opt stack 0
   563  000039                     printf@f:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x38
   567  000039                     	ds	1
   568  00003A                     I2C_Master_Init@c:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x39
   572  00003A                     	ds	4
   573  00003E                     ??_I2C_Master_Init:
   574                           
   575                           ; 1 bytes @ 0x3D
   576  00003E                     	ds	3
   577  000041                     ??_printf:
   578                           
   579                           ; 1 bytes @ 0x40
   580  000041                     	ds	4
   581  000045                     date_time@i:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x44
   585  000045                     	ds	1
   586  000046                     ??_main:
   587                           
   588                           ; 1 bytes @ 0x45
   589  000046                     	ds	2
   590                           tblptru	equ	0xFF8
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           
   594 ;;
   595 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   596 ;;
   597 ;; *************** function _main *****************
   598 ;; Defined at:
   599 ;;		line 39 in file "main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;		None
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   615 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   616 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   617 ;;Total ram usage:        2 bytes
   618 ;; Hardware stack levels required when called:    8
   619 ;; This function calls:
   620 ;;		_I2C_Master_Init
   621 ;;		_bottle_count
   622 ;;		_bottle_time
   623 ;;		_date_time
   624 ;;		_initLCD
   625 ;;		_standby
   626 ;; This function is called by:
   627 ;;		Startup code after reset
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           	psect	text0
   632  001898                     __ptext0:
   633                           	opt stack 0
   634  001898                     _main:
   635                           	opt stack 23
   636                           
   637                           ;main.c: 43: TRISA = 0xFF;
   638                           
   639                           ;incstack = 0
   640  001898  6892               	setf	3986,c	;volatile
   641                           
   642                           ;main.c: 44: TRISB = 0xFF;
   643  00189A  6893               	setf	3987,c	;volatile
   644                           
   645                           ;main.c: 45: TRISC = 0x00;
   646  00189C  0E00               	movlw	0
   647  00189E  6E94               	movwf	3988,c	;volatile
   648                           
   649                           ;main.c: 46: TRISD = 0x00;
   650  0018A0  0E00               	movlw	0
   651  0018A2  6E95               	movwf	3989,c	;volatile
   652                           
   653                           ;main.c: 47: TRISE = 0x00;
   654  0018A4  0E00               	movlw	0
   655  0018A6  6E96               	movwf	3990,c	;volatile
   656                           
   657                           ;main.c: 49: LATA = 0x00;
   658  0018A8  0E00               	movlw	0
   659  0018AA  6E89               	movwf	3977,c	;volatile
   660                           
   661                           ;main.c: 50: LATB = 0x00;
   662  0018AC  0E00               	movlw	0
   663  0018AE  6E8A               	movwf	3978,c	;volatile
   664                           
   665                           ;main.c: 51: LATC = 0x00;
   666  0018B0  0E00               	movlw	0
   667  0018B2  6E8B               	movwf	3979,c	;volatile
   668                           
   669                           ;main.c: 52: LATD = 0x00;
   670  0018B4  0E00               	movlw	0
   671  0018B6  6E8C               	movwf	3980,c	;volatile
   672                           
   673                           ;main.c: 53: LATE = 0x00;
   674  0018B8  0E00               	movlw	0
   675  0018BA  6E8D               	movwf	3981,c	;volatile
   676                           
   677                           ;main.c: 55: ADCON0 = 0x00;
   678  0018BC  0E00               	movlw	0
   679  0018BE  6EC2               	movwf	4034,c	;volatile
   680                           
   681                           ;main.c: 56: ADCON1 = 0xFF;
   682  0018C0  68C1               	setf	4033,c	;volatile
   683                           
   684                           ;main.c: 58: INT1IE = 1;
   685  0018C2  86F0               	bsf	intcon3,3,c	;volatile
   686                           
   687                           ;main.c: 60: nRBPU = 0;
   688  0018C4  9EF1               	bcf	intcon2,7,c	;volatile
   689                           
   690                           ;main.c: 62: initLCD();
   691  0018C6  ECA6  F00D         	call	_initLCD	;wreg free
   692                           
   693                           ;main.c: 63: I2C_Master_Init(10000);
   694  0018CA  0E10               	movlw	16
   695  0018CC  6E3A               	movwf	I2C_Master_Init@c,c
   696  0018CE  0E27               	movlw	39
   697  0018D0  6E3B               	movwf	I2C_Master_Init@c+1,c
   698  0018D2  0E00               	movlw	0
   699  0018D4  6E3C               	movwf	I2C_Master_Init@c+2,c
   700  0018D6  0E00               	movlw	0
   701  0018D8  6E3D               	movwf	I2C_Master_Init@c+3,c
   702  0018DA  ECD9  F00C         	call	_I2C_Master_Init	;wreg free
   703                           
   704                           ;main.c: 67: (INTCONbits.GIE = 1);
   705  0018DE  8EF2               	bsf	intcon,7,c	;volatile
   706                           
   707                           ;main.c: 69: curr_state = STANDBY;
   708  0018E0  0E00               	movlw	0
   709  0018E2  6E4F               	movwf	_curr_state,c
   710                           
   711                           ;main.c: 72: switch(curr_state){
   712                           
   713                           ;main.c: 71: while(1){
   714  0018E4  D00C               	goto	l2319
   715  0018E6                     l2309:
   716                           
   717                           ;main.c: 74: standby();
   718  0018E6  EC0E  F00E         	call	_standby	;wreg free
   719                           
   720                           ;main.c: 75: break;
   721  0018EA  D016               	goto	l2321
   722  0018EC                     l2311:
   723                           
   724                           ;main.c: 77: date_time();
   725  0018EC  ECF5  F00B         	call	_date_time	;wreg free
   726                           
   727                           ;main.c: 78: break;
   728  0018F0  D013               	goto	l2321
   729  0018F2                     l2313:
   730                           
   731                           ;main.c: 80: bottle_count();
   732  0018F2  ECB7  F00E         	call	_bottle_count	;wreg free
   733                           
   734                           ;main.c: 81: break;
   735  0018F6  D010               	goto	l2321
   736  0018F8                     l2315:
   737                           
   738                           ;main.c: 83: bottle_time();
   739  0018F8  ECB6  F00E         	call	_bottle_time	;wreg free
   740                           
   741                           ;main.c: 85: }
   742                           
   743                           ;main.c: 84: break;
   744  0018FC  D00D               	goto	l2321
   745  0018FE                     l2319:
   746  0018FE  504F               	movf	_curr_state,w,c
   747                           
   748                           ; Switch size 1, requested type "space"
   749                           ; Number of cases is 4, Range of values is 0 to 3
   750                           ; switch strategies available:
   751                           ; Name         Instructions Cycles
   752                           ; simple_byte           13     7 (average)
   753                           ;	Chosen strategy is simple_byte
   754  001900  0A00               	xorlw	0	; case 0
   755  001902  B4D8               	btfsc	status,2,c
   756  001904  D7F0               	goto	l2309
   757  001906  0A01               	xorlw	1	; case 1
   758  001908  B4D8               	btfsc	status,2,c
   759  00190A  D7F0               	goto	l2311
   760  00190C  0A03               	xorlw	3	; case 2
   761  00190E  B4D8               	btfsc	status,2,c
   762  001910  D7F0               	goto	l2313
   763  001912  0A01               	xorlw	1	; case 3
   764  001914  B4D8               	btfsc	status,2,c
   765  001916  D7F0               	goto	l2315
   766  001918                     l2321:
   767                           
   768                           ;main.c: 86: _delay((unsigned long)((200)*(10000000/4000.0)));
   769  001918  0E03               	movlw	3
   770  00191A  6E47               	movwf	(??_main+1)& (0+255),c
   771  00191C  0E8A               	movlw	138
   772  00191E  6E46               	movwf	??_main& (0+255),c
   773  001920  0E56               	movlw	86
   774  001922                     u1857:
   775  001922  2EE8               	decfsz	wreg,f,c
   776  001924  D7FE               	bra	u1857
   777  001926  2E46               	decfsz	??_main& (0+255),f,c
   778  001928  D7FC               	bra	u1857
   779  00192A  2E47               	decfsz	(??_main+1)& (0+255),f,c
   780  00192C  D7FA               	bra	u1857
   781  00192E  D7E7               	goto	l2319
   782  001930                     __end_of_main:
   783                           	opt stack 0
   784                           tblptru	equ	0xFF8
   785                           intcon	equ	0xFF2
   786                           intcon2	equ	0xFF1
   787                           intcon3	equ	0xFF0
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           status	equ	0xFD8
   791                           
   792 ;; *************** function _standby *****************
   793 ;; Defined at:
   794 ;;		line 114 in file "main.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;		None
   797 ;; Auto vars:     Size  Location     Type
   798 ;;		None
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   812 ;;Total ram usage:        0 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    7
   815 ;; This function calls:
   816 ;;		_lcdInst
   817 ;;		_printf
   818 ;; This function is called by:
   819 ;;		_main
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text1
   824  001C1C                     __ptext1:
   825                           	opt stack 0
   826  001C1C                     _standby:
   827                           	opt stack 23
   828                           
   829                           ;main.c: 115: lcdInst(0b10000000);
   830                           
   831                           ;incstack = 0
   832  001C1C  0E80               	movlw	128
   833  001C1E  EC97  F00E         	call	_lcdInst
   834                           
   835                           ;main.c: 116: printf("standby");
   836  001C22  0E82               	movlw	low STR_2
   837  001C24  6E39               	movwf	printf@f,c
   838  001C26  0E10               	movlw	high STR_2
   839  001C28  6E3A               	movwf	printf@f+1,c
   840  001C2A  EC46  F008         	call	_printf	;wreg free
   841                           
   842                           ;main.c: 117: lcdInst(0b11000000);
   843  001C2E  0EC0               	movlw	192
   844  001C30  EC97  F00E         	call	_lcdInst
   845                           
   846                           ;main.c: 118: printf("PORTB: %d", PORTB);
   847  001C34  0E78               	movlw	low STR_3
   848  001C36  6E39               	movwf	printf@f,c
   849  001C38  0E10               	movlw	high STR_3
   850  001C3A  6E3A               	movwf	printf@f+1,c
   851  001C3C  CF81 F03B          	movff	3969,?_printf+2	;volatile
   852  001C40  6A3C               	clrf	?_printf+3,c
   853  001C42  EC46  F008         	call	_printf	;wreg free
   854  001C46  0012               	return	
   855  001C48                     __end_of_standby:
   856                           	opt stack 0
   857                           tblptru	equ	0xFF8
   858                           intcon	equ	0xFF2
   859                           intcon2	equ	0xFF1
   860                           intcon3	equ	0xFF0
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           status	equ	0xFD8
   864                           
   865 ;; *************** function _initLCD *****************
   866 ;; Defined at:
   867 ;;		line 14 in file "lcd.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;		None
   870 ;; Auto vars:     Size  Location     Type
   871 ;;		None
   872 ;; Return value:  Size  Location     Type
   873 ;;                  1    wreg      void 
   874 ;; Registers used:
   875 ;;		wreg, status,2, status,0, cstack
   876 ;; Tracked objects:
   877 ;;		On entry : 0/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;Total ram usage:        1 bytes
   886 ;; Hardware stack levels used:    1
   887 ;; Hardware stack levels required when called:    6
   888 ;; This function calls:
   889 ;;		_lcdInst
   890 ;; This function is called by:
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text2
   896  001B4C                     __ptext2:
   897                           	opt stack 0
   898  001B4C                     _initLCD:
   899                           	opt stack 24
   900                           
   901                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
   902                           
   903                           ;incstack = 0
   904  001B4C  0E31               	movlw	49
   905  001B4E  6E30               	movwf	??_initLCD& (0+255),c
   906  001B50  0EB2               	movlw	178
   907  001B52                     u1867:
   908  001B52  2EE8               	decfsz	wreg,f,c
   909  001B54  D7FE               	bra	u1867
   910  001B56  2E30               	decfsz	??_initLCD& (0+255),f,c
   911  001B58  D7FC               	bra	u1867
   912  001B5A  D000               	nop2	
   913                           
   914                           ;lcd.c: 16: lcdInst(0b00110011);
   915  001B5C  0E33               	movlw	51
   916  001B5E  EC97  F00E         	call	_lcdInst
   917                           
   918                           ;lcd.c: 17: lcdInst(0b00110011);
   919  001B62  0E33               	movlw	51
   920  001B64  EC97  F00E         	call	_lcdInst
   921                           
   922                           ;lcd.c: 18: lcdInst(0b00110010);
   923  001B68  0E32               	movlw	50
   924  001B6A  EC97  F00E         	call	_lcdInst
   925                           
   926                           ;lcd.c: 19: lcdInst(0b00101000);
   927  001B6E  0E28               	movlw	40
   928  001B70  EC97  F00E         	call	_lcdInst
   929                           
   930                           ;lcd.c: 20: lcdInst(0b00001111);
   931  001B74  0E0F               	movlw	15
   932  001B76  EC97  F00E         	call	_lcdInst
   933                           
   934                           ;lcd.c: 21: lcdInst(0b00000110);
   935  001B7A  0E06               	movlw	6
   936  001B7C  EC97  F00E         	call	_lcdInst
   937                           
   938                           ;lcd.c: 22: lcdInst(0b00000001);
   939  001B80  0E01               	movlw	1
   940  001B82  EC97  F00E         	call	_lcdInst
   941                           
   942                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
   943  001B86  0E31               	movlw	49
   944  001B88  6E30               	movwf	??_initLCD& (0+255),c
   945  001B8A  0EB2               	movlw	178
   946  001B8C                     u1877:
   947  001B8C  2EE8               	decfsz	wreg,f,c
   948  001B8E  D7FE               	bra	u1877
   949  001B90  2E30               	decfsz	??_initLCD& (0+255),f,c
   950  001B92  D7FC               	bra	u1877
   951  001B94  D000               	nop2	
   952  001B96  0012               	return		;funcret
   953  001B98                     __end_of_initLCD:
   954                           	opt stack 0
   955                           tblptru	equ	0xFF8
   956                           intcon	equ	0xFF2
   957                           intcon2	equ	0xFF1
   958                           intcon3	equ	0xFF0
   959                           postinc0	equ	0xFEE
   960                           wreg	equ	0xFE8
   961                           status	equ	0xFD8
   962                           
   963 ;; *************** function _date_time *****************
   964 ;; Defined at:
   965 ;;		line 132 in file "main.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;		None
   968 ;; Auto vars:     Size  Location     Type
   969 ;;  i               1   68[COMRAM] unsigned char 
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      void 
   972 ;; Registers used:
   973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   982 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   983 ;;Total ram usage:        1 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; Hardware stack levels required when called:    7
   986 ;; This function calls:
   987 ;;		_I2C_Master_Read
   988 ;;		_I2C_Master_Start
   989 ;;		_I2C_Master_Stop
   990 ;;		_I2C_Master_Write
   991 ;;		_lcdInst
   992 ;;		_printf
   993 ;; This function is called by:
   994 ;;		_main
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text3
   999  0017EA                     __ptext3:
  1000                           	opt stack 0
  1001  0017EA                     _date_time:
  1002                           	opt stack 23
  1003                           
  1004                           ;main.c: 134: I2C_Master_Start();
  1005                           
  1006                           ;incstack = 0
  1007  0017EA  ECB2  F00E         	call	_I2C_Master_Start	;wreg free
  1008                           
  1009                           ;main.c: 135: I2C_Master_Write(0b11010000);
  1010  0017EE  0E00               	movlw	0
  1011  0017F0  6E2F               	movwf	I2C_Master_Write@d+1,c
  1012  0017F2  0ED0               	movlw	208
  1013  0017F4  6E2E               	movwf	I2C_Master_Write@d,c
  1014  0017F6  ECA9  F00E         	call	_I2C_Master_Write	;wreg free
  1015                           
  1016                           ;main.c: 136: I2C_Master_Write(0x00);
  1017  0017FA  0E00               	movlw	0
  1018  0017FC  6E2F               	movwf	I2C_Master_Write@d+1,c
  1019  0017FE  0E00               	movlw	0
  1020  001800  6E2E               	movwf	I2C_Master_Write@d,c
  1021  001802  ECA9  F00E         	call	_I2C_Master_Write	;wreg free
  1022                           
  1023                           ;main.c: 137: I2C_Master_Stop();
  1024  001806  ECAE  F00E         	call	_I2C_Master_Stop	;wreg free
  1025                           
  1026                           ;main.c: 140: I2C_Master_Start();
  1027  00180A  ECB2  F00E         	call	_I2C_Master_Start	;wreg free
  1028                           
  1029                           ;main.c: 141: I2C_Master_Write(0b11010001);
  1030  00180E  0E00               	movlw	0
  1031  001810  6E2F               	movwf	I2C_Master_Write@d+1,c
  1032  001812  0ED1               	movlw	209
  1033  001814  6E2E               	movwf	I2C_Master_Write@d,c
  1034  001816  ECA9  F00E         	call	_I2C_Master_Write	;wreg free
  1035                           
  1036                           ;main.c: 142: for(unsigned char i=0;i<0x06;i++){
  1037  00181A  0E00               	movlw	0
  1038  00181C  6E45               	movwf	date_time@i,c
  1039  00181E                     l2275:
  1040  00181E  0E05               	movlw	5
  1041  001820  6445               	cpfsgt	date_time@i,c
  1042  001822  D001               	goto	l2279
  1043  001824  D00E               	goto	l2285
  1044  001826                     l2279:
  1045                           
  1046                           ;main.c: 143: time[i] = I2C_Master_Read(1);
  1047  001826  5045               	movf	date_time@i,w,c
  1048  001828  0D01               	mullw	1
  1049  00182A  0E48               	movlw	low _time
  1050  00182C  24F3               	addwf	prodl,w,c
  1051  00182E  6ED9               	movwf	fsr2l,c
  1052  001830  0E00               	movlw	high _time
  1053  001832  20F4               	addwfc	prodh,w,c
  1054  001834  6EDA               	movwf	fsr2h,c
  1055  001836  0E01               	movlw	1
  1056  001838  EC37  F00E         	call	_I2C_Master_Read
  1057  00183C  6EDF               	movwf	indf2,c
  1058  00183E  2A45               	incf	date_time@i,f,c
  1059  001840  D7EE               	goto	l2275
  1060  001842                     l2285:
  1061                           
  1062                           ;main.c: 144: }
  1063                           ;main.c: 145: time[6] = I2C_Master_Read(0);
  1064  001842  0E00               	movlw	0
  1065  001844  EC37  F00E         	call	_I2C_Master_Read
  1066  001848  6E4E               	movwf	_time+6,c
  1067                           
  1068                           ;main.c: 146: I2C_Master_Stop();
  1069  00184A  ECAE  F00E         	call	_I2C_Master_Stop	;wreg free
  1070                           
  1071                           ;main.c: 149: lcdInst(0b10000000);
  1072  00184E  0E80               	movlw	128
  1073  001850  EC97  F00E         	call	_lcdInst
  1074                           
  1075                           ;main.c: 150: printf("%02x/%02x/%02x        ", time[5],time[4],time[6]);
  1076  001854  0E2B               	movlw	low STR_4
  1077  001856  6E39               	movwf	printf@f,c
  1078  001858  0E10               	movlw	high STR_4
  1079  00185A  6E3A               	movwf	printf@f+1,c
  1080  00185C  C04D  F03B         	movff	_time+5,?_printf+2
  1081  001860  6A3C               	clrf	?_printf+3,c
  1082  001862  C04C  F03D         	movff	_time+4,?_printf+4
  1083  001866  6A3E               	clrf	?_printf+5,c
  1084  001868  C04E  F03F         	movff	_time+6,?_printf+6
  1085  00186C  6A40               	clrf	?_printf+7,c
  1086  00186E  EC46  F008         	call	_printf	;wreg free
  1087                           
  1088                           ;main.c: 151: lcdInst(0b11000000);
  1089  001872  0EC0               	movlw	192
  1090  001874  EC97  F00E         	call	_lcdInst
  1091                           
  1092                           ;main.c: 152: printf("%02x:%02x:%02x        ", time[2],time[1],time[0]);
  1093  001878  0E42               	movlw	low STR_5
  1094  00187A  6E39               	movwf	printf@f,c
  1095  00187C  0E10               	movlw	high STR_5
  1096  00187E  6E3A               	movwf	printf@f+1,c
  1097  001880  C04A  F03B         	movff	_time+2,?_printf+2
  1098  001884  6A3C               	clrf	?_printf+3,c
  1099  001886  C049  F03D         	movff	_time+1,?_printf+4
  1100  00188A  6A3E               	clrf	?_printf+5,c
  1101  00188C  C048  F03F         	movff	_time,?_printf+6
  1102  001890  6A40               	clrf	?_printf+7,c
  1103  001892  EC46  F008         	call	_printf	;wreg free
  1104  001896  0012               	return	
  1105  001898                     __end_of_date_time:
  1106                           	opt stack 0
  1107                           tblptru	equ	0xFF8
  1108                           prodh	equ	0xFF4
  1109                           prodl	equ	0xFF3
  1110                           intcon	equ	0xFF2
  1111                           intcon2	equ	0xFF1
  1112                           intcon3	equ	0xFF0
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           indf2	equ	0xFDF
  1116                           fsr2h	equ	0xFDA
  1117                           fsr2l	equ	0xFD9
  1118                           status	equ	0xFD8
  1119                           
  1120 ;; *************** function _printf *****************
  1121 ;; Defined at:
  1122 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  f               2   56[COMRAM] PTR const unsigned char 
  1125 ;;		 -> STR_5(23), STR_4(23), STR_3(10), STR_2(8), 
  1126 ;;		 -> STR_1(14), 
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  idx             1    0[BANK0 ] unsigned char 
  1129 ;;  tmpval          4    0        struct .
  1130 ;;  cp              3    0        PTR const unsigned char 
  1131 ;;  width           2    7[BANK0 ] int 
  1132 ;;  val             2    4[BANK0 ] unsigned int 
  1133 ;;  ap              2    1[BANK0 ] PTR void [1]
  1134 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1135 ;;  len             2    0        unsigned int 
  1136 ;;  c               1    9[BANK0 ] char 
  1137 ;;  flag            1    6[BANK0 ] unsigned char 
  1138 ;;  prec            1    3[BANK0 ] char 
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  2   56[COMRAM] int 
  1141 ;; Registers used:
  1142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 0/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1148 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1149 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1150 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1151 ;;      Totals:        12      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1152 ;;Total ram usage:       22 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; Hardware stack levels required when called:    6
  1155 ;; This function calls:
  1156 ;;		___lwdiv
  1157 ;;		___lwmod
  1158 ;;		___wmul
  1159 ;;		_isdigit
  1160 ;;		_putch
  1161 ;; This function is called by:
  1162 ;;		_standby
  1163 ;;		_date_time
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text4
  1168  00108C                     __ptext4:
  1169                           	opt stack 0
  1170  00108C                     _printf:
  1171                           	opt stack 23
  1172                           
  1173                           ;doprnt.c: 466: va_list ap;
  1174                           ;doprnt.c: 499: signed char c;
  1175                           ;doprnt.c: 501: int width;
  1176                           ;doprnt.c: 506: signed char prec;
  1177                           ;doprnt.c: 508: unsigned char flag;
  1178                           ;doprnt.c: 523: union {
  1179                           ;doprnt.c: 524: unsigned long vd;
  1180                           ;doprnt.c: 525: double integ;
  1181                           ;doprnt.c: 526: } tmpval;
  1182                           ;doprnt.c: 528: unsigned int val;
  1183                           ;doprnt.c: 529: unsigned len;
  1184                           ;doprnt.c: 530: const char * cp;
  1185                           ;doprnt.c: 533: *ap = __va_start();
  1186                           
  1187                           ;incstack = 0
  1188  00108C  0E3B               	movlw	low (?_printf+2)
  1189  00108E  0100               	movlb	0	; () banked
  1190  001090  6F81               	movwf	printf@ap& (0+255),b
  1191  001092  0E00               	movlw	high (?_printf+2)
  1192  001094  0100               	movlb	0	; () banked
  1193  001096  6F82               	movwf	(printf@ap+1)& (0+255),b
  1194                           
  1195                           ;doprnt.c: 536: while(c = *f++) {
  1196  001098  D1AF               	goto	l2243
  1197  00109A                     l2117:
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;doprnt.c: 538: if(c != '%')
  1201  00109A  0E25               	movlw	37
  1202  00109C  0100               	movlb	0	; () banked
  1203  00109E  1989               	xorwf	printf@c& (0+255),w,b
  1204  0010A0  B4D8               	btfsc	status,2,c
  1205  0010A2  D005               	goto	l2121
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;doprnt.c: 540: {
  1209                           ;doprnt.c: 541: (putch(c) );
  1210  0010A4  0100               	movlb	0	; () banked
  1211  0010A6  5189               	movf	printf@c& (0+255),w,b
  1212  0010A8  EC91  F00E         	call	_putch
  1213                           
  1214                           ;doprnt.c: 542: continue;
  1215  0010AC  D1A5               	goto	l2243
  1216  0010AE                     l2121:
  1217                           
  1218                           ;doprnt.c: 543: }
  1219                           ;doprnt.c: 546: width = 0;
  1220  0010AE  0E00               	movlw	0
  1221  0010B0  0100               	movlb	0	; () banked
  1222  0010B2  6F88               	movwf	(printf@width+1)& (0+255),b
  1223  0010B4  0E00               	movlw	0
  1224  0010B6  6F87               	movwf	printf@width& (0+255),b
  1225                           
  1226                           ;doprnt.c: 548: flag = 0;
  1227  0010B8  0E00               	movlw	0
  1228  0010BA  0100               	movlb	0	; () banked
  1229  0010BC  6F86               	movwf	printf@flag& (0+255),b
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;doprnt.c: 551: switch(*f) {
  1233                           
  1234                           ;doprnt.c: 550: for(;;) {
  1235  0010BE  D004               	goto	l2127
  1236  0010C0                     l2123:
  1237                           
  1238                           ;doprnt.c: 580: flag |= 0x04;
  1239  0010C0  0100               	movlb	0	; () banked
  1240  0010C2  8586               	bsf	printf@flag& (0+255),2,b
  1241                           
  1242                           ;doprnt.c: 581: f++;
  1243  0010C4  4A39               	infsnz	printf@f,f,c
  1244  0010C6  2A3A               	incf	printf@f+1,f,c
  1245  0010C8                     l2127:
  1246  0010C8  C039  FFF6         	movff	printf@f,tblptrl
  1247  0010CC  C03A  FFF7         	movff	printf@f+1,tblptrh
  1248  0010D0                     	if	0	;tblptru may be non-zero
  1249  0010D0                     	endif
  1250  0010D0                     	if	0	;tblptru may be non-zero
  1251  0010D0                     	endif
  1252  0010D0  0008               	tblrd		*
  1253  0010D2  50F5               	movf	tablat,w,c
  1254                           
  1255                           ; Switch size 1, requested type "space"
  1256                           ; Number of cases is 1, Range of values is 48 to 48
  1257                           ; switch strategies available:
  1258                           ; Name         Instructions Cycles
  1259                           ; simple_byte            4     3 (average)
  1260                           ;	Chosen strategy is simple_byte
  1261  0010D4  0A30               	xorlw	48	; case 48
  1262  0010D6  B4D8               	btfsc	status,2,c
  1263  0010D8  D7F3               	goto	l2123
  1264                           
  1265                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1266                           
  1267                           ;doprnt.c: 586: }
  1268                           
  1269                           ;doprnt.c: 585: break;
  1270  0010DA  C039  FFF6         	movff	printf@f,tblptrl
  1271  0010DE  C03A  FFF7         	movff	printf@f+1,tblptrh
  1272  0010E2                     	if	0	;tblptru may be non-zero
  1273  0010E2                     	endif
  1274  0010E2                     	if	0	;tblptru may be non-zero
  1275  0010E2                     	endif
  1276  0010E2  0008               	tblrd		*
  1277  0010E4  50F5               	movf	tablat,w,c
  1278  0010E6  EC5D  F00E         	call	_isdigit
  1279  0010EA  A0D8               	btfss	status,0,c
  1280  0010EC  D039               	goto	l2145
  1281                           
  1282                           ;doprnt.c: 598: width = 0;
  1283  0010EE  0E00               	movlw	0
  1284  0010F0  0100               	movlb	0	; () banked
  1285  0010F2  6F88               	movwf	(printf@width+1)& (0+255),b
  1286  0010F4  0E00               	movlw	0
  1287  0010F6  6F87               	movwf	printf@width& (0+255),b
  1288  0010F8                     l2133:
  1289                           
  1290                           ;doprnt.c: 600: width *= 10;
  1291  0010F8  C087  F02D         	movff	printf@width,___wmul@multiplier
  1292  0010FC  C088  F02E         	movff	printf@width+1,___wmul@multiplier+1
  1293  001100  0E00               	movlw	0
  1294  001102  6E30               	movwf	___wmul@multiplicand+1,c
  1295  001104  0E0A               	movlw	10
  1296  001106  6E2F               	movwf	___wmul@multiplicand,c
  1297  001108  EC24  F00E         	call	___wmul	;wreg free
  1298  00110C  C02D  F087         	movff	?___wmul,printf@width
  1299  001110  C02E  F088         	movff	?___wmul+1,printf@width+1
  1300                           
  1301                           ;doprnt.c: 601: width += *f++ - '0';
  1302  001114  0ED0               	movlw	208
  1303  001116  6E41               	movwf	??_printf& (0+255),c
  1304  001118  0EFF               	movlw	255
  1305  00111A  6E42               	movwf	(??_printf+1)& (0+255),c
  1306  00111C  C039  FFF6         	movff	printf@f,tblptrl
  1307  001120  C03A  FFF7         	movff	printf@f+1,tblptrh
  1308  001124                     	if	0	;tblptru may be non-zero
  1309  001124                     	endif
  1310  001124                     	if	0	;tblptru may be non-zero
  1311  001124                     	endif
  1312  001124  0008               	tblrd		*
  1313  001126  50F5               	movf	tablat,w,c
  1314  001128  6E43               	movwf	(??_printf+2)& (0+255),c
  1315  00112A  6A44               	clrf	(??_printf+3)& (0+255),c
  1316  00112C  5041               	movf	??_printf,w,c
  1317  00112E  2643               	addwf	??_printf+2,f,c
  1318  001130  5042               	movf	??_printf+1,w,c
  1319  001132  2244               	addwfc	??_printf+3,f,c
  1320  001134  5043               	movf	??_printf+2,w,c
  1321  001136  0100               	movlb	0	; () banked
  1322  001138  2787               	addwf	printf@width& (0+255),f,b
  1323  00113A  5044               	movf	??_printf+3,w,c
  1324  00113C  0100               	movlb	0	; () banked
  1325  00113E  2388               	addwfc	(printf@width+1)& (0+255),f,b
  1326                           
  1327                           ; BSR set to: 0
  1328  001140  4A39               	infsnz	printf@f,f,c
  1329  001142  2A3A               	incf	printf@f+1,f,c
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1333  001144  C039  FFF6         	movff	printf@f,tblptrl
  1334  001148  C03A  FFF7         	movff	printf@f+1,tblptrh
  1335  00114C                     	if	0	;tblptru may be non-zero
  1336  00114C                     	endif
  1337  00114C                     	if	0	;tblptru may be non-zero
  1338  00114C                     	endif
  1339  00114C  0008               	tblrd		*
  1340  00114E  50F5               	movf	tablat,w,c
  1341  001150  EC5D  F00E         	call	_isdigit
  1342  001154  A0D8               	btfss	status,0,c
  1343  001156  D004               	goto	l2145
  1344  001158  D7CF               	goto	l2133
  1345  00115A                     l2141:
  1346                           
  1347                           ;doprnt.c: 721: flag |= 0x80;
  1348  00115A  0100               	movlb	0	; () banked
  1349  00115C  8F86               	bsf	printf@flag& (0+255),7,b
  1350                           
  1351                           ;doprnt.c: 723: break;
  1352  00115E  D018               	goto	l225
  1353  001160                     l2145:
  1354  001160  C039  FFF6         	movff	printf@f,tblptrl
  1355  001164  C03A  FFF7         	movff	printf@f+1,tblptrh
  1356  001168  4A39               	infsnz	printf@f,f,c
  1357  00116A  2A3A               	incf	printf@f+1,f,c
  1358  00116C                     	if	0	;tblptru may be non-zero
  1359  00116C                     	endif
  1360  00116C                     	if	0	;tblptru may be non-zero
  1361  00116C                     	endif
  1362  00116C  0008               	tblrd		*
  1363  00116E  CFF5 F089          	movff	tablat,printf@c
  1364  001172  0100               	movlb	0	; () banked
  1365  001174  5189               	movf	printf@c& (0+255),w,b
  1366                           
  1367                           ; Switch size 1, requested type "space"
  1368                           ; Number of cases is 4, Range of values is 0 to 120
  1369                           ; switch strategies available:
  1370                           ; Name         Instructions Cycles
  1371                           ; simple_byte           13     7 (average)
  1372                           ;	Chosen strategy is simple_byte
  1373  001176  0A00               	xorlw	0	; case 0
  1374  001178  B4D8               	btfsc	status,2,c
  1375  00117A  0012               	return	
  1376  00117C  0A64               	xorlw	100	; case 100
  1377  00117E  B4D8               	btfsc	status,2,c
  1378  001180  D007               	goto	l225
  1379  001182  0A0D               	xorlw	13	; case 105
  1380  001184  B4D8               	btfsc	status,2,c
  1381  001186  D004               	goto	l225
  1382  001188  0A11               	xorlw	17	; case 120
  1383  00118A  B4D8               	btfsc	status,2,c
  1384  00118C  D7E6               	goto	l2141
  1385  00118E  D134               	goto	l2243
  1386  001190                     l225:
  1387                           
  1388                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1389  001190  0100               	movlb	0	; () banked
  1390  001192  BF86               	btfsc	printf@flag& (0+255),7,b
  1391  001194  D019               	goto	l2157
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;doprnt.c: 1253: {
  1395                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1396  001196  C081  FFD9         	movff	printf@ap,fsr2l
  1397  00119A  C082  FFDA         	movff	printf@ap+1,fsr2h
  1398  00119E  CFDE F084          	movff	postinc2,printf@val
  1399  0011A2  CFDD F085          	movff	postdec2,printf@val+1
  1400                           
  1401                           ; BSR set to: 0
  1402  0011A6  0E02               	movlw	2
  1403  0011A8  0100               	movlb	0	; () banked
  1404  0011AA  2781               	addwf	printf@ap& (0+255),f,b
  1405  0011AC  0E00               	movlw	0
  1406  0011AE  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;doprnt.c: 1261: if((int)val < 0) {
  1410  0011B0  0100               	movlb	0	; () banked
  1411  0011B2  AF85               	btfss	(printf@val+1)& (0+255),7,b
  1412  0011B4  D053               	goto	l2191
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;doprnt.c: 1262: flag |= 0x03;
  1416  0011B6  0E03               	movlw	3
  1417  0011B8  0100               	movlb	0	; () banked
  1418  0011BA  1386               	iorwf	printf@flag& (0+255),f,b
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;doprnt.c: 1263: val = -val;
  1422  0011BC  0100               	movlb	0	; () banked
  1423  0011BE  6D84               	negf	printf@val& (0+255),b
  1424  0011C0  1F85               	comf	(printf@val+1)& (0+255),f,b
  1425  0011C2  B0D8               	btfsc	status,0,c
  1426  0011C4  2B85               	incf	(printf@val+1)& (0+255),f,b
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;doprnt.c: 1264: }
  1430                           ;doprnt.c: 1266: }
  1431  0011C6  D04A               	goto	l2191
  1432  0011C8                     l2157:
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;doprnt.c: 1268: else
  1436                           ;doprnt.c: 1273: {
  1437                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1438  0011C8  C081  FFD9         	movff	printf@ap,fsr2l
  1439  0011CC  C082  FFDA         	movff	printf@ap+1,fsr2h
  1440  0011D0  CFDE F084          	movff	postinc2,printf@val
  1441  0011D4  CFDD F085          	movff	postdec2,printf@val+1
  1442                           
  1443                           ; BSR set to: 0
  1444  0011D8  0E02               	movlw	2
  1445  0011DA  0100               	movlb	0	; () banked
  1446  0011DC  2781               	addwf	printf@ap& (0+255),f,b
  1447  0011DE  0E00               	movlw	0
  1448  0011E0  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;doprnt.c: 1287: }
  1452                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1453  0011E2  D03C               	goto	l2191
  1454  0011E4                     l2161:
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1458  0011E4  0E01               	movlw	1
  1459  0011E6  0100               	movlb	0	; () banked
  1460  0011E8  6F89               	movwf	printf@c& (0+255),b
  1461  0011EA                     l2163:
  1462                           
  1463                           ; BSR set to: 0
  1464  0011EA  0E05               	movlw	5
  1465  0011EC  0100               	movlb	0	; () banked
  1466  0011EE  1989               	xorwf	printf@c& (0+255),w,b
  1467  0011F0  B4D8               	btfsc	status,2,c
  1468  0011F2  D03D               	goto	l2193
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;doprnt.c: 1306: if(val < dpowers[c])
  1472                           
  1473                           ; BSR set to: 0
  1474                           
  1475                           ; BSR set to: 0
  1476  0011F4  0100               	movlb	0	; () banked
  1477  0011F6  5189               	movf	printf@c& (0+255),w,b
  1478  0011F8  0D02               	mullw	2
  1479  0011FA  0E12               	movlw	low _dpowers
  1480  0011FC  24F3               	addwf	prodl,w,c
  1481  0011FE  6EF6               	movwf	tblptrl,c
  1482  001200  0E10               	movlw	high _dpowers
  1483  001202  20F4               	addwfc	prodh,w,c
  1484  001204  6EF7               	movwf	tblptrh,c
  1485  001206                     	if	0	;There are less than 3 active tblptr bytes
  1486  001206                     	endif
  1487  001206  0009               	tblrd		*+
  1488  001208  50F5               	movf	tablat,w,c
  1489  00120A  0100               	movlb	0	; () banked
  1490  00120C  5D84               	subwf	printf@val& (0+255),w,b
  1491  00120E  0009               	tblrd		*+
  1492  001210  50F5               	movf	tablat,w,c
  1493  001212  0100               	movlb	0	; () banked
  1494  001214  5985               	subwfb	(printf@val+1)& (0+255),w,b
  1495  001216  A0D8               	btfss	status,0,c
  1496  001218  D02A               	goto	l2193
  1497                           
  1498                           ; BSR set to: 0
  1499                           
  1500                           ; BSR set to: 0
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;doprnt.c: 1307: break;
  1504  00121A  0100               	movlb	0	; () banked
  1505  00121C  2B89               	incf	printf@c& (0+255),f,b
  1506  00121E  D7E5               	goto	l2163
  1507  001220                     l2175:
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1511  001220  0E01               	movlw	1
  1512  001222  0100               	movlb	0	; () banked
  1513  001224  6F89               	movwf	printf@c& (0+255),b
  1514  001226                     l2177:
  1515                           
  1516                           ; BSR set to: 0
  1517  001226  0E04               	movlw	4
  1518  001228  0100               	movlb	0	; () banked
  1519  00122A  1989               	xorwf	printf@c& (0+255),w,b
  1520  00122C  B4D8               	btfsc	status,2,c
  1521  00122E  D01F               	goto	l2193
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1525                           
  1526                           ; BSR set to: 0
  1527                           
  1528                           ; BSR set to: 0
  1529  001230  0100               	movlb	0	; () banked
  1530  001232  5189               	movf	printf@c& (0+255),w,b
  1531  001234  0D02               	mullw	2
  1532  001236  0E1C               	movlw	low _hexpowers
  1533  001238  24F3               	addwf	prodl,w,c
  1534  00123A  6EF6               	movwf	tblptrl,c
  1535  00123C  0E10               	movlw	high _hexpowers
  1536  00123E  20F4               	addwfc	prodh,w,c
  1537  001240  6EF7               	movwf	tblptrh,c
  1538  001242                     	if	0	;There are less than 3 active tblptr bytes
  1539  001242                     	endif
  1540  001242  0009               	tblrd		*+
  1541  001244  50F5               	movf	tablat,w,c
  1542  001246  0100               	movlb	0	; () banked
  1543  001248  5D84               	subwf	printf@val& (0+255),w,b
  1544  00124A  0009               	tblrd		*+
  1545  00124C  50F5               	movf	tablat,w,c
  1546  00124E  0100               	movlb	0	; () banked
  1547  001250  5985               	subwfb	(printf@val+1)& (0+255),w,b
  1548  001252  A0D8               	btfss	status,0,c
  1549  001254  D00C               	goto	l2193
  1550                           
  1551                           ; BSR set to: 0
  1552                           
  1553                           ; BSR set to: 0
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;doprnt.c: 1318: break;
  1557  001256  0100               	movlb	0	; () banked
  1558  001258  2B89               	incf	printf@c& (0+255),f,b
  1559  00125A  D7E5               	goto	l2177
  1560  00125C                     l2191:
  1561                           
  1562                           ; BSR set to: 0
  1563  00125C  0100               	movlb	0	; () banked
  1564  00125E  5186               	movf	printf@flag& (0+255),w,b
  1565  001260  0B80               	andlw	128
  1566                           
  1567                           ; Switch size 1, requested type "space"
  1568                           ; Number of cases is 2, Range of values is 0 to 128
  1569                           ; switch strategies available:
  1570                           ; Name         Instructions Cycles
  1571                           ; simple_byte            7     4 (average)
  1572                           ;	Chosen strategy is simple_byte
  1573  001262  0A00               	xorlw	0	; case 0
  1574  001264  B4D8               	btfsc	status,2,c
  1575  001266  D7BE               	goto	l2161
  1576  001268  0A80               	xorlw	128	; case 128
  1577  00126A  B4D8               	btfsc	status,2,c
  1578  00126C  D7D9               	goto	l2175
  1579  00126E                     l2193:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1583  00126E  0100               	movlb	0	; () banked
  1584  001270  5187               	movf	printf@width& (0+255),w,b
  1585  001272  0100               	movlb	0	; () banked
  1586  001274  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1587  001276  B4D8               	btfsc	status,2,c
  1588  001278  D00A               	goto	l2199
  1589                           
  1590                           ; BSR set to: 0
  1591  00127A  C086  F041         	movff	printf@flag,??_printf
  1592  00127E  0E03               	movlw	3
  1593  001280  1641               	andwf	??_printf,f,c
  1594  001282  B4D8               	btfsc	status,2,c
  1595  001284  D004               	goto	l2199
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;doprnt.c: 1346: width--;
  1599  001286  0100               	movlb	0	; () banked
  1600  001288  0787               	decf	printf@width& (0+255),f,b
  1601  00128A  A0D8               	btfss	status,0,c
  1602  00128C  0788               	decf	(printf@width+1)& (0+255),f,b
  1603  00128E                     l2199:
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;doprnt.c: 1381: if(width > c)
  1607  00128E  0E80               	movlw	128
  1608  001290  0100               	movlb	0	; () banked
  1609  001292  BF89               	btfsc	printf@c& (0+255),7,b
  1610  001294  0E7F               	movlw	127
  1611  001296  6E41               	movwf	??_printf& (0+255),c
  1612  001298  0100               	movlb	0	; () banked
  1613  00129A  5187               	movf	printf@width& (0+255),w,b
  1614  00129C  0100               	movlb	0	; () banked
  1615  00129E  5D89               	subwf	printf@c& (0+255),w,b
  1616  0012A0  0100               	movlb	0	; () banked
  1617  0012A2  5188               	movf	(printf@width+1)& (0+255),w,b
  1618  0012A4  0A80               	xorlw	128
  1619  0012A6  5841               	subwfb	??_printf& (0+255),w,c
  1620  0012A8  B0D8               	btfsc	status,0,c
  1621  0012AA  D00B               	goto	l2203
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;doprnt.c: 1382: width -= c;
  1625  0012AC  0100               	movlb	0	; () banked
  1626  0012AE  5189               	movf	printf@c& (0+255),w,b
  1627  0012B0  0100               	movlb	0	; () banked
  1628  0012B2  5F87               	subwf	printf@width& (0+255),f,b
  1629  0012B4  0E00               	movlw	0
  1630  0012B6  0100               	movlb	0	; () banked
  1631  0012B8  BF89               	btfsc	printf@c& (0+255),7,b
  1632  0012BA  0EFF               	movlw	255
  1633  0012BC  0100               	movlb	0	; () banked
  1634  0012BE  5B88               	subwfb	(printf@width+1)& (0+255),f,b
  1635  0012C0  D005               	goto	l2205
  1636  0012C2                     l2203:
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;doprnt.c: 1383: else
  1640                           ;doprnt.c: 1384: width = 0;
  1641  0012C2  0E00               	movlw	0
  1642  0012C4  0100               	movlb	0	; () banked
  1643  0012C6  6F88               	movwf	(printf@width+1)& (0+255),b
  1644  0012C8  0E00               	movlw	0
  1645  0012CA  6F87               	movwf	printf@width& (0+255),b
  1646  0012CC                     l2205:
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;doprnt.c: 1387: if(flag & 0x04) {
  1650  0012CC  0100               	movlb	0	; () banked
  1651  0012CE  A586               	btfss	printf@flag& (0+255),2,b
  1652  0012D0  D017               	goto	l2217
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;doprnt.c: 1392: if(flag & 0x03)
  1656  0012D2  C086  F041         	movff	printf@flag,??_printf
  1657  0012D6  0E03               	movlw	3
  1658  0012D8  1641               	andwf	??_printf,f,c
  1659  0012DA  B4D8               	btfsc	status,2,c
  1660  0012DC  D003               	goto	l2211
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;doprnt.c: 1393: (putch('-') );
  1664  0012DE  0E2D               	movlw	45
  1665  0012E0  EC91  F00E         	call	_putch
  1666  0012E4                     l2211:
  1667                           
  1668                           ;doprnt.c: 1415: if(width)
  1669  0012E4  0100               	movlb	0	; () banked
  1670  0012E6  5187               	movf	printf@width& (0+255),w,b
  1671  0012E8  0100               	movlb	0	; () banked
  1672  0012EA  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1673  0012EC  B4D8               	btfsc	status,2,c
  1674  0012EE  D024               	goto	l2227
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;doprnt.c: 1417: (putch('0') );
  1678                           
  1679                           ; BSR set to: 0
  1680                           
  1681                           ;doprnt.c: 1416: do
  1682  0012F0  0E30               	movlw	48
  1683  0012F2  EC91  F00E         	call	_putch
  1684                           
  1685                           ;doprnt.c: 1418: while(--width);
  1686  0012F6  0100               	movlb	0	; () banked
  1687  0012F8  0787               	decf	printf@width& (0+255),f,b
  1688  0012FA  A0D8               	btfss	status,0,c
  1689  0012FC  0788               	decf	(printf@width+1)& (0+255),f,b
  1690  0012FE  D7F2               	goto	l2211
  1691  001300                     l2217:
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;doprnt.c: 1422: {
  1695                           ;doprnt.c: 1424: if(width
  1696                           ;doprnt.c: 1428: )
  1697  001300  0100               	movlb	0	; () banked
  1698  001302  5187               	movf	printf@width& (0+255),w,b
  1699  001304  0100               	movlb	0	; () banked
  1700  001306  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1701  001308  B4D8               	btfsc	status,2,c
  1702  00130A  D00D               	goto	l2223
  1703  00130C                     l2219:
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;doprnt.c: 1430: (putch(' ') );
  1707  00130C  0E20               	movlw	32
  1708  00130E  EC91  F00E         	call	_putch
  1709                           
  1710                           ;doprnt.c: 1431: while(--width);
  1711  001312  0100               	movlb	0	; () banked
  1712  001314  0787               	decf	printf@width& (0+255),f,b
  1713  001316  A0D8               	btfss	status,0,c
  1714  001318  0788               	decf	(printf@width+1)& (0+255),f,b
  1715  00131A  0100               	movlb	0	; () banked
  1716  00131C  5187               	movf	printf@width& (0+255),w,b
  1717  00131E  0100               	movlb	0	; () banked
  1718  001320  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1719  001322  A4D8               	btfss	status,2,c
  1720  001324  D7F3               	goto	l2219
  1721  001326                     l2223:
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;doprnt.c: 1438: if(flag & 0x03)
  1725  001326  C086  F041         	movff	printf@flag,??_printf
  1726  00132A  0E03               	movlw	3
  1727  00132C  1641               	andwf	??_printf,f,c
  1728  00132E  B4D8               	btfsc	status,2,c
  1729  001330  D003               	goto	l2227
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;doprnt.c: 1439: (putch('-') );
  1733  001332  0E2D               	movlw	45
  1734  001334  EC91  F00E         	call	_putch
  1735  001338                     l2227:
  1736                           
  1737                           ;doprnt.c: 1469: }
  1738                           ;doprnt.c: 1472: prec = c;
  1739  001338  C089  F083         	movff	printf@c,printf@prec
  1740                           
  1741                           ;doprnt.c: 1474: while(prec--) {
  1742  00133C  D057               	goto	l2241
  1743  00133E                     l2229:
  1744                           
  1745                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1746  00133E  0100               	movlb	0	; () banked
  1747  001340  5183               	movf	printf@prec& (0+255),w,b
  1748  001342  0D02               	mullw	2
  1749  001344  0E12               	movlw	low _dpowers
  1750  001346  24F3               	addwf	prodl,w,c
  1751  001348  6EF6               	movwf	tblptrl,c
  1752  00134A  0E10               	movlw	high _dpowers
  1753  00134C  20F4               	addwfc	prodh,w,c
  1754  00134E  6EF7               	movwf	tblptrh,c
  1755  001350                     	if	0	;There are less than 3 active tblptr bytes
  1756  001350                     	endif
  1757  001350  0009               	tblrd		*+
  1758  001352  CFF5 F02F          	movff	tablat,___lwdiv@divisor
  1759  001356  000A               	tblrd		*-
  1760  001358  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
  1761  00135C  C084  F02D         	movff	printf@val,___lwdiv@dividend
  1762  001360  C085  F02E         	movff	printf@val+1,___lwdiv@dividend+1
  1763  001364  EC06  F00D         	call	___lwdiv	;wreg free
  1764  001368  C02D  F034         	movff	?___lwdiv,___lwmod@dividend
  1765  00136C  C02E  F035         	movff	?___lwdiv+1,___lwmod@dividend+1
  1766  001370  0E00               	movlw	0
  1767  001372  6E37               	movwf	___lwmod@divisor+1,c
  1768  001374  0E0A               	movlw	10
  1769  001376  6E36               	movwf	___lwmod@divisor,c
  1770  001378  ECCC  F00D         	call	___lwmod	;wreg free
  1771  00137C  5034               	movf	?___lwmod,w,c
  1772  00137E  0F30               	addlw	48
  1773  001380  0100               	movlb	0	; () banked
  1774  001382  6F89               	movwf	printf@c& (0+255),b
  1775                           
  1776                           ;doprnt.c: 1491: break;
  1777  001384  D02F               	goto	l2239
  1778  001386                     l2231:
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;doprnt.c: 1499: {
  1782                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1783  001386  C084  F02D         	movff	printf@val,___lwdiv@dividend
  1784  00138A  C085  F02E         	movff	printf@val+1,___lwdiv@dividend+1
  1785  00138E  0100               	movlb	0	; () banked
  1786  001390  5183               	movf	printf@prec& (0+255),w,b
  1787  001392  0D02               	mullw	2
  1788  001394  0E1C               	movlw	low _hexpowers
  1789  001396  24F3               	addwf	prodl,w,c
  1790  001398  6EF6               	movwf	tblptrl,c
  1791  00139A  0E10               	movlw	high _hexpowers
  1792  00139C  20F4               	addwfc	prodh,w,c
  1793  00139E  6EF7               	movwf	tblptrh,c
  1794  0013A0                     	if	0	;There are less than 3 active tblptr bytes
  1795  0013A0                     	endif
  1796  0013A0  0009               	tblrd		*+
  1797  0013A2  CFF5 F02F          	movff	tablat,___lwdiv@divisor
  1798  0013A6  000A               	tblrd		*-
  1799  0013A8  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
  1800  0013AC  EC06  F00D         	call	___lwdiv	;wreg free
  1801  0013B0  502D               	movf	?___lwdiv,w,c
  1802  0013B2  0B0F               	andlw	15
  1803  0013B4  0100               	movlb	0	; () banked
  1804  0013B6  6F80               	movwf	printf@idx& (0+255),b
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1808  0013B8  0100               	movlb	0	; () banked
  1809  0013BA  5180               	movf	printf@idx& (0+255),w,b
  1810  0013BC  0D01               	mullw	1
  1811  0013BE  0E59               	movlw	low STR_6
  1812  0013C0  24F3               	addwf	prodl,w,c
  1813  0013C2  6EF6               	movwf	tblptrl,c
  1814  0013C4  0E10               	movlw	high STR_6
  1815  0013C6  20F4               	addwfc	prodh,w,c
  1816  0013C8  6EF7               	movwf	tblptrh,c
  1817  0013CA                     	if	0	;There are less than 3 active tblptr bytes
  1818  0013CA                     	endif
  1819  0013CA  0008               	tblrd		*
  1820  0013CC  CFF5 F089          	movff	tablat,printf@c
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;doprnt.c: 1523: }
  1824                           
  1825                           ;doprnt.c: 1508: }
  1826                           ;doprnt.c: 1510: break;
  1827  0013D0  D009               	goto	l2239
  1828  0013D2                     l2237:
  1829  0013D2  0100               	movlb	0	; () banked
  1830  0013D4  5186               	movf	printf@flag& (0+255),w,b
  1831  0013D6  0B80               	andlw	128
  1832                           
  1833                           ; Switch size 1, requested type "space"
  1834                           ; Number of cases is 2, Range of values is 0 to 128
  1835                           ; switch strategies available:
  1836                           ; Name         Instructions Cycles
  1837                           ; simple_byte            7     4 (average)
  1838                           ;	Chosen strategy is simple_byte
  1839  0013D8  0A00               	xorlw	0	; case 0
  1840  0013DA  B4D8               	btfsc	status,2,c
  1841  0013DC  D7B0               	goto	l2229
  1842  0013DE  0A80               	xorlw	128	; case 128
  1843  0013E0  B4D8               	btfsc	status,2,c
  1844  0013E2  D7D1               	goto	l2231
  1845  0013E4                     l2239:
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;doprnt.c: 1524: (putch(c) );
  1849  0013E4  0100               	movlb	0	; () banked
  1850  0013E6  5189               	movf	printf@c& (0+255),w,b
  1851  0013E8  EC91  F00E         	call	_putch
  1852  0013EC                     l2241:
  1853  0013EC  0100               	movlb	0	; () banked
  1854  0013EE  0783               	decf	printf@prec& (0+255),f,b
  1855  0013F0  0100               	movlb	0	; () banked
  1856  0013F2  2983               	incf	printf@prec& (0+255),w,b
  1857  0013F4  A4D8               	btfss	status,2,c
  1858  0013F6  D7ED               	goto	l2237
  1859  0013F8                     l2243:
  1860  0013F8  C039  FFF6         	movff	printf@f,tblptrl
  1861  0013FC  C03A  FFF7         	movff	printf@f+1,tblptrh
  1862  001400  4A39               	infsnz	printf@f,f,c
  1863  001402  2A3A               	incf	printf@f+1,f,c
  1864  001404                     	if	0	;tblptru may be non-zero
  1865  001404                     	endif
  1866  001404                     	if	0	;tblptru may be non-zero
  1867  001404                     	endif
  1868  001404  0008               	tblrd		*
  1869  001406  CFF5 F089          	movff	tablat,printf@c
  1870  00140A  0100               	movlb	0	; () banked
  1871  00140C  5189               	movf	printf@c& (0+255),w,b
  1872  00140E  B4D8               	btfsc	status,2,c
  1873  001410  0012               	return	
  1874  001412  D643               	goto	l2117
  1875  001414                     __end_of_printf:
  1876                           	opt stack 0
  1877                           tblptru	equ	0xFF8
  1878                           tblptrh	equ	0xFF7
  1879                           tblptrl	equ	0xFF6
  1880                           tablat	equ	0xFF5
  1881                           prodh	equ	0xFF4
  1882                           prodl	equ	0xFF3
  1883                           intcon	equ	0xFF2
  1884                           intcon2	equ	0xFF1
  1885                           intcon3	equ	0xFF0
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           indf2	equ	0xFDF
  1889                           postinc2	equ	0xFDE
  1890                           postdec2	equ	0xFDD
  1891                           fsr2h	equ	0xFDA
  1892                           fsr2l	equ	0xFD9
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _putch *****************
  1896 ;; Defined at:
  1897 ;;		line 31 in file "lcd.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  data            1    wreg     unsigned char 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  data            1   46[COMRAM] unsigned char 
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      void 
  1904 ;; Registers used:
  1905 ;;		wreg, status,2, status,0, cstack
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;Total ram usage:        1 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    5
  1918 ;; This function calls:
  1919 ;;		_lcdNibble
  1920 ;; This function is called by:
  1921 ;;		_printf
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text5
  1926  001D22                     __ptext5:
  1927                           	opt stack 0
  1928  001D22                     _putch:
  1929                           	opt stack 23
  1930                           
  1931                           ;incstack = 0
  1932                           ;putch@data stored from wreg
  1933  001D22  6E2F               	movwf	putch@data,c
  1934                           
  1935                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1936  001D24  848C               	bsf	3980,2,c	;volatile
  1937                           
  1938                           ;lcd.c: 33: lcdNibble(data);
  1939  001D26  502F               	movf	putch@data,w,c
  1940  001D28  EC58  F00D         	call	_lcdNibble
  1941  001D2C  0012               	return		;funcret
  1942  001D2E                     __end_of_putch:
  1943                           	opt stack 0
  1944                           tblptru	equ	0xFF8
  1945                           tblptrh	equ	0xFF7
  1946                           tblptrl	equ	0xFF6
  1947                           tablat	equ	0xFF5
  1948                           prodh	equ	0xFF4
  1949                           prodl	equ	0xFF3
  1950                           intcon	equ	0xFF2
  1951                           intcon2	equ	0xFF1
  1952                           intcon3	equ	0xFF0
  1953                           postinc0	equ	0xFEE
  1954                           wreg	equ	0xFE8
  1955                           indf2	equ	0xFDF
  1956                           postinc2	equ	0xFDE
  1957                           postdec2	equ	0xFDD
  1958                           fsr2h	equ	0xFDA
  1959                           fsr2l	equ	0xFD9
  1960                           status	equ	0xFD8
  1961                           
  1962 ;; *************** function _isdigit *****************
  1963 ;; Defined at:
  1964 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;  c               1    wreg     unsigned char 
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;  c               1   46[COMRAM] unsigned char 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;		None               void
  1971 ;; Registers used:
  1972 ;;		wreg, status,2, status,0
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;Total ram usage:        3 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:    4
  1985 ;; This function calls:
  1986 ;;		Nothing
  1987 ;; This function is called by:
  1988 ;;		_printf
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           	psect	text6
  1993  001CBA                     __ptext6:
  1994                           	opt stack 0
  1995  001CBA                     _isdigit:
  1996                           	opt stack 24
  1997                           
  1998                           ;incstack = 0
  1999                           ;isdigit@c stored from wreg
  2000  001CBA  6E2F               	movwf	isdigit@c,c
  2001  001CBC  0E00               	movlw	0
  2002  001CBE  6E2E               	movwf	_isdigit$506,c
  2003  001CC0  0E3A               	movlw	58
  2004  001CC2  602F               	cpfslt	isdigit@c,c
  2005  001CC4  D005               	goto	l2063
  2006  001CC6  0E2F               	movlw	47
  2007  001CC8  642F               	cpfsgt	isdigit@c,c
  2008  001CCA  D002               	goto	l2063
  2009  001CCC  0E01               	movlw	1
  2010  001CCE  6E2E               	movwf	_isdigit$506,c
  2011  001CD0                     l2063:
  2012  001CD0  C02E  F02D         	movff	_isdigit$506,??_isdigit
  2013  001CD4  302D               	rrcf	??_isdigit,w,c
  2014  001CD6  0012               	return	
  2015  001CD8                     __end_of_isdigit:
  2016                           	opt stack 0
  2017                           tblptru	equ	0xFF8
  2018                           tblptrh	equ	0xFF7
  2019                           tblptrl	equ	0xFF6
  2020                           tablat	equ	0xFF5
  2021                           prodh	equ	0xFF4
  2022                           prodl	equ	0xFF3
  2023                           intcon	equ	0xFF2
  2024                           intcon2	equ	0xFF1
  2025                           intcon3	equ	0xFF0
  2026                           postinc0	equ	0xFEE
  2027                           wreg	equ	0xFE8
  2028                           indf2	equ	0xFDF
  2029                           postinc2	equ	0xFDE
  2030                           postdec2	equ	0xFDD
  2031                           fsr2h	equ	0xFDA
  2032                           fsr2l	equ	0xFD9
  2033                           status	equ	0xFD8
  2034                           
  2035 ;; *************** function ___wmul *****************
  2036 ;; Defined at:
  2037 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  multiplier      2   44[COMRAM] unsigned int 
  2040 ;;  multiplicand    2   46[COMRAM] unsigned int 
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  product         2   48[COMRAM] unsigned int 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  2   44[COMRAM] unsigned int 
  2045 ;; Registers used:
  2046 ;;		wreg, status,2, status,0, prodl, prodh
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2052 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2053 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2055 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2056 ;;Total ram usage:        6 bytes
  2057 ;; Hardware stack levels used:    1
  2058 ;; Hardware stack levels required when called:    4
  2059 ;; This function calls:
  2060 ;;		Nothing
  2061 ;; This function is called by:
  2062 ;;		_printf
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text7
  2067  001C48                     __ptext7:
  2068                           	opt stack 0
  2069  001C48                     ___wmul:
  2070                           	opt stack 24
  2071                           
  2072                           ;incstack = 0
  2073  001C48  502D               	movf	___wmul@multiplier,w,c
  2074  001C4A  022F               	mulwf	___wmul@multiplicand,c
  2075  001C4C  CFF3 F031          	movff	prodl,___wmul@product
  2076  001C50  CFF4 F032          	movff	prodh,___wmul@product+1
  2077  001C54  502D               	movf	___wmul@multiplier,w,c
  2078  001C56  0230               	mulwf	___wmul@multiplicand+1,c
  2079  001C58  50F3               	movf	prodl,w,c
  2080  001C5A  2632               	addwf	___wmul@product+1,f,c
  2081  001C5C  502E               	movf	___wmul@multiplier+1,w,c
  2082  001C5E  022F               	mulwf	___wmul@multiplicand,c
  2083  001C60  50F3               	movf	prodl,w,c
  2084  001C62  2632               	addwf	___wmul@product+1,f,c
  2085  001C64  C031  F02D         	movff	___wmul@product,?___wmul
  2086  001C68  C032  F02E         	movff	___wmul@product+1,?___wmul+1
  2087  001C6C  0012               	return	
  2088  001C6E                     __end_of___wmul:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           prodh	equ	0xFF4
  2095                           prodl	equ	0xFF3
  2096                           intcon	equ	0xFF2
  2097                           intcon2	equ	0xFF1
  2098                           intcon3	equ	0xFF0
  2099                           postinc0	equ	0xFEE
  2100                           wreg	equ	0xFE8
  2101                           indf2	equ	0xFDF
  2102                           postinc2	equ	0xFDE
  2103                           postdec2	equ	0xFDD
  2104                           fsr2h	equ	0xFDA
  2105                           fsr2l	equ	0xFD9
  2106                           status	equ	0xFD8
  2107                           
  2108 ;; *************** function ___lwmod *****************
  2109 ;; Defined at:
  2110 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2111 ;; Parameters:    Size  Location     Type
  2112 ;;  dividend        2   51[COMRAM] unsigned int 
  2113 ;;  divisor         2   53[COMRAM] unsigned int 
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;  counter         1   55[COMRAM] unsigned char 
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  2   51[COMRAM] unsigned int 
  2118 ;; Registers used:
  2119 ;;		wreg, status,2, status,0
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2125 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;Total ram usage:        5 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; Hardware stack levels required when called:    4
  2132 ;; This function calls:
  2133 ;;		Nothing
  2134 ;; This function is called by:
  2135 ;;		_printf
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           	psect	text8
  2140  001B98                     __ptext8:
  2141                           	opt stack 0
  2142  001B98                     ___lwmod:
  2143                           	opt stack 24
  2144                           
  2145                           ;incstack = 0
  2146  001B98  5036               	movf	___lwmod@divisor,w,c
  2147  001B9A  1037               	iorwf	___lwmod@divisor+1,w,c
  2148  001B9C  B4D8               	btfsc	status,2,c
  2149  001B9E  D018               	goto	l680
  2150  001BA0  0E01               	movlw	1
  2151  001BA2  6E38               	movwf	___lwmod@counter,c
  2152  001BA4  D004               	goto	l2101
  2153  001BA6                     l2099:
  2154  001BA6  90D8               	bcf	status,0,c
  2155  001BA8  3636               	rlcf	___lwmod@divisor,f,c
  2156  001BAA  3637               	rlcf	___lwmod@divisor+1,f,c
  2157  001BAC  2A38               	incf	___lwmod@counter,f,c
  2158  001BAE                     l2101:
  2159  001BAE  AE37               	btfss	___lwmod@divisor+1,7,c
  2160  001BB0  D7FA               	goto	l2099
  2161  001BB2                     l2103:
  2162  001BB2  5036               	movf	___lwmod@divisor,w,c
  2163  001BB4  5C34               	subwf	___lwmod@dividend,w,c
  2164  001BB6  5037               	movf	___lwmod@divisor+1,w,c
  2165  001BB8  5835               	subwfb	___lwmod@dividend+1,w,c
  2166  001BBA  A0D8               	btfss	status,0,c
  2167  001BBC  D004               	goto	l2107
  2168  001BBE  5036               	movf	___lwmod@divisor,w,c
  2169  001BC0  5E34               	subwf	___lwmod@dividend,f,c
  2170  001BC2  5037               	movf	___lwmod@divisor+1,w,c
  2171  001BC4  5A35               	subwfb	___lwmod@dividend+1,f,c
  2172  001BC6                     l2107:
  2173  001BC6  90D8               	bcf	status,0,c
  2174  001BC8  3237               	rrcf	___lwmod@divisor+1,f,c
  2175  001BCA  3236               	rrcf	___lwmod@divisor,f,c
  2176  001BCC  2E38               	decfsz	___lwmod@counter,f,c
  2177  001BCE  D7F1               	goto	l2103
  2178  001BD0                     l680:
  2179  001BD0  C034  F034         	movff	___lwmod@dividend,?___lwmod
  2180  001BD4  C035  F035         	movff	___lwmod@dividend+1,?___lwmod+1
  2181  001BD8  0012               	return		;funcret
  2182  001BDA                     __end_of___lwmod:
  2183                           	opt stack 0
  2184                           tblptru	equ	0xFF8
  2185                           tblptrh	equ	0xFF7
  2186                           tblptrl	equ	0xFF6
  2187                           tablat	equ	0xFF5
  2188                           prodh	equ	0xFF4
  2189                           prodl	equ	0xFF3
  2190                           intcon	equ	0xFF2
  2191                           intcon2	equ	0xFF1
  2192                           intcon3	equ	0xFF0
  2193                           postinc0	equ	0xFEE
  2194                           wreg	equ	0xFE8
  2195                           indf2	equ	0xFDF
  2196                           postinc2	equ	0xFDE
  2197                           postdec2	equ	0xFDD
  2198                           fsr2h	equ	0xFDA
  2199                           fsr2l	equ	0xFD9
  2200                           status	equ	0xFD8
  2201                           
  2202 ;; *************** function ___lwdiv *****************
  2203 ;; Defined at:
  2204 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  dividend        2   44[COMRAM] unsigned int 
  2207 ;;  divisor         2   46[COMRAM] unsigned int 
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  quotient        2   49[COMRAM] unsigned int 
  2210 ;;  counter         1   48[COMRAM] unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  2   44[COMRAM] unsigned int 
  2213 ;; Registers used:
  2214 ;;		wreg, status,2, status,0
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2220 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;Total ram usage:        7 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    4
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_printf
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text9
  2235  001A0C                     __ptext9:
  2236                           	opt stack 0
  2237  001A0C                     ___lwdiv:
  2238                           	opt stack 24
  2239                           
  2240                           ;incstack = 0
  2241  001A0C  0E00               	movlw	0
  2242  001A0E  6E33               	movwf	___lwdiv@quotient+1,c
  2243  001A10  0E00               	movlw	0
  2244  001A12  6E32               	movwf	___lwdiv@quotient,c
  2245  001A14  502F               	movf	___lwdiv@divisor,w,c
  2246  001A16  1030               	iorwf	___lwdiv@divisor+1,w,c
  2247  001A18  B4D8               	btfsc	status,2,c
  2248  001A1A  D01C               	goto	l670
  2249  001A1C  0E01               	movlw	1
  2250  001A1E  6E31               	movwf	___lwdiv@counter,c
  2251  001A20  D004               	goto	l2081
  2252  001A22                     l2079:
  2253  001A22  90D8               	bcf	status,0,c
  2254  001A24  362F               	rlcf	___lwdiv@divisor,f,c
  2255  001A26  3630               	rlcf	___lwdiv@divisor+1,f,c
  2256  001A28  2A31               	incf	___lwdiv@counter,f,c
  2257  001A2A                     l2081:
  2258  001A2A  AE30               	btfss	___lwdiv@divisor+1,7,c
  2259  001A2C  D7FA               	goto	l2079
  2260  001A2E                     l2083:
  2261  001A2E  90D8               	bcf	status,0,c
  2262  001A30  3632               	rlcf	___lwdiv@quotient,f,c
  2263  001A32  3633               	rlcf	___lwdiv@quotient+1,f,c
  2264  001A34  502F               	movf	___lwdiv@divisor,w,c
  2265  001A36  5C2D               	subwf	___lwdiv@dividend,w,c
  2266  001A38  5030               	movf	___lwdiv@divisor+1,w,c
  2267  001A3A  582E               	subwfb	___lwdiv@dividend+1,w,c
  2268  001A3C  A0D8               	btfss	status,0,c
  2269  001A3E  D005               	goto	l2091
  2270  001A40  502F               	movf	___lwdiv@divisor,w,c
  2271  001A42  5E2D               	subwf	___lwdiv@dividend,f,c
  2272  001A44  5030               	movf	___lwdiv@divisor+1,w,c
  2273  001A46  5A2E               	subwfb	___lwdiv@dividend+1,f,c
  2274  001A48  8032               	bsf	___lwdiv@quotient,0,c
  2275  001A4A                     l2091:
  2276  001A4A  90D8               	bcf	status,0,c
  2277  001A4C  3230               	rrcf	___lwdiv@divisor+1,f,c
  2278  001A4E  322F               	rrcf	___lwdiv@divisor,f,c
  2279  001A50  2E31               	decfsz	___lwdiv@counter,f,c
  2280  001A52  D7ED               	goto	l2083
  2281  001A54                     l670:
  2282  001A54  C032  F02D         	movff	___lwdiv@quotient,?___lwdiv
  2283  001A58  C033  F02E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2284  001A5C  0012               	return		;funcret
  2285  001A5E                     __end_of___lwdiv:
  2286                           	opt stack 0
  2287                           tblptru	equ	0xFF8
  2288                           tblptrh	equ	0xFF7
  2289                           tblptrl	equ	0xFF6
  2290                           tablat	equ	0xFF5
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           intcon	equ	0xFF2
  2294                           intcon2	equ	0xFF1
  2295                           intcon3	equ	0xFF0
  2296                           postinc0	equ	0xFEE
  2297                           wreg	equ	0xFE8
  2298                           indf2	equ	0xFDF
  2299                           postinc2	equ	0xFDE
  2300                           postdec2	equ	0xFDD
  2301                           fsr2h	equ	0xFDA
  2302                           fsr2l	equ	0xFD9
  2303                           status	equ	0xFD8
  2304                           
  2305 ;; *************** function _lcdInst *****************
  2306 ;; Defined at:
  2307 ;;		line 26 in file "lcd.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;  data            1    wreg     unsigned char 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  data            1   46[COMRAM] unsigned char 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      void 
  2314 ;; Registers used:
  2315 ;;		wreg, status,2, status,0, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;Total ram usage:        1 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    5
  2328 ;; This function calls:
  2329 ;;		_lcdNibble
  2330 ;; This function is called by:
  2331 ;;		_initLCD
  2332 ;;		_standby
  2333 ;;		_date_time
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text10
  2338  001D2E                     __ptext10:
  2339                           	opt stack 0
  2340  001D2E                     _lcdInst:
  2341                           	opt stack 24
  2342                           
  2343                           ;incstack = 0
  2344                           ;lcdInst@data stored from wreg
  2345  001D2E  6E2F               	movwf	lcdInst@data,c
  2346                           
  2347                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  2348  001D30  948C               	bcf	3980,2,c	;volatile
  2349                           
  2350                           ;lcd.c: 28: lcdNibble(data);
  2351  001D32  502F               	movf	lcdInst@data,w,c
  2352  001D34  EC58  F00D         	call	_lcdNibble
  2353  001D38  0012               	return		;funcret
  2354  001D3A                     __end_of_lcdInst:
  2355                           	opt stack 0
  2356                           tblptru	equ	0xFF8
  2357                           tblptrh	equ	0xFF7
  2358                           tblptrl	equ	0xFF6
  2359                           tablat	equ	0xFF5
  2360                           prodh	equ	0xFF4
  2361                           prodl	equ	0xFF3
  2362                           intcon	equ	0xFF2
  2363                           intcon2	equ	0xFF1
  2364                           intcon3	equ	0xFF0
  2365                           postinc0	equ	0xFEE
  2366                           wreg	equ	0xFE8
  2367                           indf2	equ	0xFDF
  2368                           postinc2	equ	0xFDE
  2369                           postdec2	equ	0xFDD
  2370                           fsr2h	equ	0xFDA
  2371                           fsr2l	equ	0xFD9
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function _lcdNibble *****************
  2375 ;; Defined at:
  2376 ;;		line 36 in file "lcd.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  data            1    wreg     unsigned char 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  data            1   45[COMRAM] unsigned char 
  2381 ;;  temp            1   44[COMRAM] unsigned char 
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  1    wreg      void 
  2384 ;; Registers used:
  2385 ;;		wreg, status,2, status,0
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;Total ram usage:        2 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; Hardware stack levels required when called:    4
  2398 ;; This function calls:
  2399 ;;		Nothing
  2400 ;; This function is called by:
  2401 ;;		_lcdInst
  2402 ;;		_putch
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text11
  2407  001AB0                     __ptext11:
  2408                           	opt stack 0
  2409  001AB0                     _lcdNibble:
  2410                           	opt stack 23
  2411                           
  2412                           ;incstack = 0
  2413                           ;lcdNibble@data stored from wreg
  2414  001AB0  6E2E               	movwf	lcdNibble@data,c
  2415                           
  2416                           ;lcd.c: 38: char temp = data & 0xF0;
  2417  001AB2  502E               	movf	lcdNibble@data,w,c
  2418  001AB4  0BF0               	andlw	240
  2419  001AB6  6E2D               	movwf	lcdNibble@temp,c
  2420                           
  2421                           ;lcd.c: 39: LATD = LATD & 0x0F;
  2422  001AB8  508C               	movf	3980,w,c	;volatile
  2423  001ABA  0B0F               	andlw	15
  2424  001ABC  6E8C               	movwf	3980,c	;volatile
  2425                           
  2426                           ;lcd.c: 40: LATD = temp | LATD;
  2427  001ABE  502D               	movf	lcdNibble@temp,w,c
  2428  001AC0  108C               	iorwf	3980,w,c	;volatile
  2429  001AC2  6E8C               	movwf	3980,c	;volatile
  2430                           
  2431                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  2432  001AC4  968C               	bcf	3980,3,c	;volatile
  2433                           
  2434                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2435  001AC6  0E19               	movlw	25
  2436  001AC8                     u1887:
  2437  001AC8  2EE8               	decfsz	wreg,f,c
  2438  001ACA  D7FE               	bra	u1887
  2439                           
  2440                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  2441  001ACC  868C               	bsf	3980,3,c	;volatile
  2442                           
  2443                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2444  001ACE  0E19               	movlw	25
  2445  001AD0                     u1897:
  2446  001AD0  2EE8               	decfsz	wreg,f,c
  2447  001AD2  D7FE               	bra	u1897
  2448                           
  2449                           ;lcd.c: 47: data = data << 4;
  2450  001AD4  382E               	swapf	lcdNibble@data,w,c
  2451  001AD6  0BF0               	andlw	240
  2452  001AD8  6E2E               	movwf	lcdNibble@data,c
  2453                           
  2454                           ;lcd.c: 49: temp = data & 0xF0;
  2455  001ADA  502E               	movf	lcdNibble@data,w,c
  2456  001ADC  0BF0               	andlw	240
  2457  001ADE  6E2D               	movwf	lcdNibble@temp,c
  2458                           
  2459                           ;lcd.c: 50: LATD = LATD & 0x0F;
  2460  001AE0  508C               	movf	3980,w,c	;volatile
  2461  001AE2  0B0F               	andlw	15
  2462  001AE4  6E8C               	movwf	3980,c	;volatile
  2463                           
  2464                           ;lcd.c: 51: LATD = temp | LATD;
  2465  001AE6  502D               	movf	lcdNibble@temp,w,c
  2466  001AE8  108C               	iorwf	3980,w,c	;volatile
  2467  001AEA  6E8C               	movwf	3980,c	;volatile
  2468                           
  2469                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  2470  001AEC  968C               	bcf	3980,3,c	;volatile
  2471                           
  2472                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2473  001AEE  0E19               	movlw	25
  2474  001AF0                     u1907:
  2475  001AF0  2EE8               	decfsz	wreg,f,c
  2476  001AF2  D7FE               	bra	u1907
  2477                           
  2478                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  2479  001AF4  868C               	bsf	3980,3,c	;volatile
  2480                           
  2481                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2482  001AF6  0E19               	movlw	25
  2483  001AF8                     u1917:
  2484  001AF8  2EE8               	decfsz	wreg,f,c
  2485  001AFA  D7FE               	bra	u1917
  2486  001AFC  0012               	return		;funcret
  2487  001AFE                     __end_of_lcdNibble:
  2488                           	opt stack 0
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           prodh	equ	0xFF4
  2494                           prodl	equ	0xFF3
  2495                           intcon	equ	0xFF2
  2496                           intcon2	equ	0xFF1
  2497                           intcon3	equ	0xFF0
  2498                           postinc0	equ	0xFEE
  2499                           wreg	equ	0xFE8
  2500                           indf2	equ	0xFDF
  2501                           postinc2	equ	0xFDE
  2502                           postdec2	equ	0xFDD
  2503                           fsr2h	equ	0xFDA
  2504                           fsr2l	equ	0xFD9
  2505                           status	equ	0xFD8
  2506                           
  2507 ;; *************** function _I2C_Master_Write *****************
  2508 ;; Defined at:
  2509 ;;		line 47 in file "I2C.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;  d               2   45[COMRAM] unsigned int 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;		None
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      void 
  2516 ;; Registers used:
  2517 ;;		wreg, status,2, status,0, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2523 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;Total ram usage:        2 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    5
  2530 ;; This function calls:
  2531 ;;		_I2C_Master_Wait
  2532 ;; This function is called by:
  2533 ;;		_date_time
  2534 ;;		_set_time
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text12
  2539  001D52                     __ptext12:
  2540                           	opt stack 0
  2541  001D52                     _I2C_Master_Write:
  2542                           	opt stack 24
  2543                           
  2544                           ;I2C.c: 49: I2C_Master_Wait();
  2545                           
  2546                           ;incstack = 0
  2547  001D52  EC88  F00E         	call	_I2C_Master_Wait	;wreg free
  2548                           
  2549                           ;I2C.c: 50: SSPBUF = d;
  2550  001D56  C02E  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2551  001D5A  0012               	return		;funcret
  2552  001D5C                     __end_of_I2C_Master_Write:
  2553                           	opt stack 0
  2554                           tblptru	equ	0xFF8
  2555                           tblptrh	equ	0xFF7
  2556                           tblptrl	equ	0xFF6
  2557                           tablat	equ	0xFF5
  2558                           prodh	equ	0xFF4
  2559                           prodl	equ	0xFF3
  2560                           intcon	equ	0xFF2
  2561                           intcon2	equ	0xFF1
  2562                           intcon3	equ	0xFF0
  2563                           postinc0	equ	0xFEE
  2564                           wreg	equ	0xFE8
  2565                           indf2	equ	0xFDF
  2566                           postinc2	equ	0xFDE
  2567                           postdec2	equ	0xFDD
  2568                           fsr2h	equ	0xFDA
  2569                           fsr2l	equ	0xFD9
  2570                           status	equ	0xFD8
  2571                           
  2572 ;; *************** function _I2C_Master_Stop *****************
  2573 ;; Defined at:
  2574 ;;		line 41 in file "I2C.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;		None
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;		None
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg, status,2, status,0, cstack
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;Total ram usage:        0 bytes
  2593 ;; Hardware stack levels used:    1
  2594 ;; Hardware stack levels required when called:    5
  2595 ;; This function calls:
  2596 ;;		_I2C_Master_Wait
  2597 ;; This function is called by:
  2598 ;;		_date_time
  2599 ;;		_set_time
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text13
  2604  001D5C                     __ptext13:
  2605                           	opt stack 0
  2606  001D5C                     _I2C_Master_Stop:
  2607                           	opt stack 24
  2608                           
  2609                           ;I2C.c: 43: I2C_Master_Wait();
  2610                           
  2611                           ;incstack = 0
  2612  001D5C  EC88  F00E         	call	_I2C_Master_Wait	;wreg free
  2613                           
  2614                           ;I2C.c: 44: PEN = 1;
  2615  001D60  84C5               	bsf	4037,2,c	;volatile
  2616  001D62  0012               	return		;funcret
  2617  001D64                     __end_of_I2C_Master_Stop:
  2618                           	opt stack 0
  2619                           tblptru	equ	0xFF8
  2620                           tblptrh	equ	0xFF7
  2621                           tblptrl	equ	0xFF6
  2622                           tablat	equ	0xFF5
  2623                           prodh	equ	0xFF4
  2624                           prodl	equ	0xFF3
  2625                           intcon	equ	0xFF2
  2626                           intcon2	equ	0xFF1
  2627                           intcon3	equ	0xFF0
  2628                           postinc0	equ	0xFEE
  2629                           wreg	equ	0xFE8
  2630                           indf2	equ	0xFDF
  2631                           postinc2	equ	0xFDE
  2632                           postdec2	equ	0xFDD
  2633                           fsr2h	equ	0xFDA
  2634                           fsr2l	equ	0xFD9
  2635                           status	equ	0xFD8
  2636                           
  2637 ;; *************** function _I2C_Master_Start *****************
  2638 ;; Defined at:
  2639 ;;		line 29 in file "I2C.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;		None
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;		None
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, status,2, status,0, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;Total ram usage:        0 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    5
  2660 ;; This function calls:
  2661 ;;		_I2C_Master_Wait
  2662 ;; This function is called by:
  2663 ;;		_date_time
  2664 ;;		_set_time
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text14
  2669  001D64                     __ptext14:
  2670                           	opt stack 0
  2671  001D64                     _I2C_Master_Start:
  2672                           	opt stack 24
  2673                           
  2674                           ;I2C.c: 31: I2C_Master_Wait();
  2675                           
  2676                           ;incstack = 0
  2677  001D64  EC88  F00E         	call	_I2C_Master_Wait	;wreg free
  2678                           
  2679                           ;I2C.c: 32: SEN = 1;
  2680  001D68  80C5               	bsf	4037,0,c	;volatile
  2681  001D6A  0012               	return		;funcret
  2682  001D6C                     __end_of_I2C_Master_Start:
  2683                           	opt stack 0
  2684                           tblptru	equ	0xFF8
  2685                           tblptrh	equ	0xFF7
  2686                           tblptrl	equ	0xFF6
  2687                           tablat	equ	0xFF5
  2688                           prodh	equ	0xFF4
  2689                           prodl	equ	0xFF3
  2690                           intcon	equ	0xFF2
  2691                           intcon2	equ	0xFF1
  2692                           intcon3	equ	0xFF0
  2693                           postinc0	equ	0xFEE
  2694                           wreg	equ	0xFE8
  2695                           indf2	equ	0xFDF
  2696                           postinc2	equ	0xFDE
  2697                           postdec2	equ	0xFDD
  2698                           fsr2h	equ	0xFDA
  2699                           fsr2l	equ	0xFD9
  2700                           status	equ	0xFD8
  2701                           
  2702 ;; *************** function _I2C_Master_Read *****************
  2703 ;; Defined at:
  2704 ;;		line 53 in file "I2C.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  a               1    wreg     unsigned char 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  a               1   45[COMRAM] unsigned char 
  2709 ;;  temp            1   46[COMRAM] unsigned char 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      unsigned char 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;Total ram usage:        2 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    5
  2726 ;; This function calls:
  2727 ;;		_I2C_Master_Wait
  2728 ;; This function is called by:
  2729 ;;		_date_time
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text15
  2734  001C6E                     __ptext15:
  2735                           	opt stack 0
  2736  001C6E                     _I2C_Master_Read:
  2737                           	opt stack 24
  2738                           
  2739                           ;incstack = 0
  2740                           ;I2C_Master_Read@a stored from wreg
  2741  001C6E  6E2E               	movwf	I2C_Master_Read@a,c
  2742                           
  2743                           ;I2C.c: 55: unsigned char temp;
  2744                           ;I2C.c: 56: I2C_Master_Wait();
  2745  001C70  EC88  F00E         	call	_I2C_Master_Wait	;wreg free
  2746                           
  2747                           ;I2C.c: 57: RCEN = 1;
  2748  001C74  86C5               	bsf	4037,3,c	;volatile
  2749                           
  2750                           ;I2C.c: 58: I2C_Master_Wait();
  2751  001C76  EC88  F00E         	call	_I2C_Master_Wait	;wreg free
  2752                           
  2753                           ;I2C.c: 59: temp = SSPBUF;
  2754  001C7A  CFC9 F02F          	movff	4041,I2C_Master_Read@temp	;volatile
  2755                           
  2756                           ;I2C.c: 60: I2C_Master_Wait();
  2757  001C7E  EC88  F00E         	call	_I2C_Master_Wait	;wreg free
  2758                           
  2759                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2760  001C82  502E               	movf	I2C_Master_Read@a,w,c
  2761  001C84  A4D8               	btfss	status,2,c
  2762  001C86  D002               	goto	u110
  2763  001C88  8AC5               	bsf	4037,5,c	;volatile
  2764  001C8A  D001               	goto	l1001
  2765  001C8C                     u110:
  2766  001C8C  9AC5               	bcf	4037,5,c	;volatile
  2767  001C8E                     l1001:
  2768                           
  2769                           ;I2C.c: 62: ACKEN = 1;
  2770  001C8E  88C5               	bsf	4037,4,c	;volatile
  2771                           
  2772                           ;I2C.c: 63: return temp;
  2773  001C90  502F               	movf	I2C_Master_Read@temp,w,c
  2774  001C92  0012               	return	
  2775  001C94                     __end_of_I2C_Master_Read:
  2776                           	opt stack 0
  2777                           tblptru	equ	0xFF8
  2778                           tblptrh	equ	0xFF7
  2779                           tblptrl	equ	0xFF6
  2780                           tablat	equ	0xFF5
  2781                           prodh	equ	0xFF4
  2782                           prodl	equ	0xFF3
  2783                           intcon	equ	0xFF2
  2784                           intcon2	equ	0xFF1
  2785                           intcon3	equ	0xFF0
  2786                           postinc0	equ	0xFEE
  2787                           wreg	equ	0xFE8
  2788                           indf2	equ	0xFDF
  2789                           postinc2	equ	0xFDE
  2790                           postdec2	equ	0xFDD
  2791                           fsr2h	equ	0xFDA
  2792                           fsr2l	equ	0xFD9
  2793                           status	equ	0xFD8
  2794                           
  2795 ;; *************** function _I2C_Master_Wait *****************
  2796 ;; Defined at:
  2797 ;;		line 24 in file "I2C.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;Total ram usage:        1 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    4
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_I2C_Master_Start
  2822 ;;		_I2C_Master_Stop
  2823 ;;		_I2C_Master_Write
  2824 ;;		_I2C_Master_Read
  2825 ;;		_I2C_Master_RepeatedStart
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           	psect	text16
  2830  001D10                     __ptext16:
  2831                           	opt stack 0
  2832  001D10                     _I2C_Master_Wait:
  2833                           	opt stack 24
  2834  001D10                     l34:
  2835  001D10  B4C7               	btfsc	4039,2,c	;volatile
  2836  001D12  D7FE               	goto	l34
  2837  001D14  CFC5 F02D          	movff	4037,??_I2C_Master_Wait	;volatile
  2838  001D18  0E1F               	movlw	31
  2839  001D1A  162D               	andwf	??_I2C_Master_Wait,f,c
  2840  001D1C  B4D8               	btfsc	status,2,c
  2841  001D1E  0012               	return	
  2842  001D20  D7F7               	goto	l34
  2843  001D22                     __end_of_I2C_Master_Wait:
  2844                           	opt stack 0
  2845                           tblptru	equ	0xFF8
  2846                           tblptrh	equ	0xFF7
  2847                           tblptrl	equ	0xFF6
  2848                           tablat	equ	0xFF5
  2849                           prodh	equ	0xFF4
  2850                           prodl	equ	0xFF3
  2851                           intcon	equ	0xFF2
  2852                           intcon2	equ	0xFF1
  2853                           intcon3	equ	0xFF0
  2854                           postinc0	equ	0xFEE
  2855                           wreg	equ	0xFE8
  2856                           indf2	equ	0xFDF
  2857                           postinc2	equ	0xFDE
  2858                           postdec2	equ	0xFDD
  2859                           fsr2h	equ	0xFDA
  2860                           fsr2l	equ	0xFD9
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _bottle_time *****************
  2864 ;; Defined at:
  2865 ;;		line 161 in file "main.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		None
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    4
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_main
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text17
  2894  001D6C                     __ptext17:
  2895                           	opt stack 0
  2896  001D6C                     _bottle_time:
  2897                           	opt stack 26
  2898                           
  2899                           ;main.c: 162: return;
  2900                           
  2901                           ;incstack = 0
  2902  001D6C  0012               	return		;funcret
  2903  001D6E                     __end_of_bottle_time:
  2904                           	opt stack 0
  2905                           tblptru	equ	0xFF8
  2906                           tblptrh	equ	0xFF7
  2907                           tblptrl	equ	0xFF6
  2908                           tablat	equ	0xFF5
  2909                           prodh	equ	0xFF4
  2910                           prodl	equ	0xFF3
  2911                           intcon	equ	0xFF2
  2912                           intcon2	equ	0xFF1
  2913                           intcon3	equ	0xFF0
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           indf2	equ	0xFDF
  2917                           postinc2	equ	0xFDE
  2918                           postdec2	equ	0xFDD
  2919                           fsr2h	equ	0xFDA
  2920                           fsr2l	equ	0xFD9
  2921                           status	equ	0xFD8
  2922                           
  2923 ;; *************** function _bottle_count *****************
  2924 ;; Defined at:
  2925 ;;		line 157 in file "main.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;		None
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;		None
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		None
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;Total ram usage:        0 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    4
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_main
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text18
  2954  001D6E                     __ptext18:
  2955                           	opt stack 0
  2956  001D6E                     _bottle_count:
  2957                           	opt stack 26
  2958                           
  2959                           ;main.c: 158: return;
  2960                           
  2961                           ;incstack = 0
  2962  001D6E  0012               	return		;funcret
  2963  001D70                     __end_of_bottle_count:
  2964                           	opt stack 0
  2965                           tblptru	equ	0xFF8
  2966                           tblptrh	equ	0xFF7
  2967                           tblptrl	equ	0xFF6
  2968                           tablat	equ	0xFF5
  2969                           prodh	equ	0xFF4
  2970                           prodl	equ	0xFF3
  2971                           intcon	equ	0xFF2
  2972                           intcon2	equ	0xFF1
  2973                           intcon3	equ	0xFF0
  2974                           postinc0	equ	0xFEE
  2975                           wreg	equ	0xFE8
  2976                           indf2	equ	0xFDF
  2977                           postinc2	equ	0xFDE
  2978                           postdec2	equ	0xFDD
  2979                           fsr2h	equ	0xFDA
  2980                           fsr2l	equ	0xFD9
  2981                           status	equ	0xFD8
  2982                           
  2983 ;; *************** function _I2C_Master_Init *****************
  2984 ;; Defined at:
  2985 ;;		line 13 in file "I2C.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;  c               4   57[COMRAM] const unsigned long 
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;		None
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  1    wreg      void 
  2992 ;; Registers used:
  2993 ;;		wreg, status,2, status,0, cstack
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2999 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;Total ram usage:        8 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    5
  3006 ;; This function calls:
  3007 ;;		___lldiv
  3008 ;; This function is called by:
  3009 ;;		_main
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text19
  3014  0019B2                     __ptext19:
  3015                           	opt stack 0
  3016  0019B2                     _I2C_Master_Init:
  3017                           	opt stack 25
  3018                           
  3019                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3020                           
  3021                           ;incstack = 0
  3022  0019B2  0E00               	movlw	0
  3023  0019B4  6EC7               	movwf	4039,c	;volatile
  3024                           
  3025                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3026  0019B6  0E28               	movlw	40
  3027  0019B8  6EC6               	movwf	4038,c	;volatile
  3028                           
  3029                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3030  0019BA  0E00               	movlw	0
  3031  0019BC  6EC5               	movwf	4037,c	;volatile
  3032                           
  3033                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3034  0019BE  0E80               	movlw	128
  3035  0019C0  6E2D               	movwf	___lldiv@dividend,c
  3036  0019C2  0E96               	movlw	150
  3037  0019C4  6E2E               	movwf	___lldiv@dividend+1,c
  3038  0019C6  0E98               	movlw	152
  3039  0019C8  6E2F               	movwf	___lldiv@dividend+2,c
  3040  0019CA  0E00               	movlw	0
  3041  0019CC  6E30               	movwf	___lldiv@dividend+3,c
  3042  0019CE  C03A  F03E         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3043  0019D2  C03B  F03F         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3044  0019D6  C03C  F040         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3045  0019DA  C03D  F041         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3046  0019DE  0E02               	movlw	2
  3047  0019E0                     u1215:
  3048  0019E0  90D8               	bcf	status,0,c
  3049  0019E2  363E               	rlcf	??_I2C_Master_Init,f,c
  3050  0019E4  363F               	rlcf	??_I2C_Master_Init+1,f,c
  3051  0019E6  3640               	rlcf	??_I2C_Master_Init+2,f,c
  3052  0019E8  3641               	rlcf	??_I2C_Master_Init+3,f,c
  3053  0019EA  2EE8               	decfsz	wreg,f,c
  3054  0019EC  D7F9               	goto	u1215
  3055  0019EE  C03E  F031         	movff	??_I2C_Master_Init,___lldiv@divisor
  3056  0019F2  C03F  F032         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3057  0019F6  C040  F033         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3058  0019FA  C041  F034         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3059  0019FE  EC98  F00C         	call	___lldiv	;wreg free
  3060  001A02  042D               	decf	?___lldiv,w,c
  3061  001A04  6EC8               	movwf	4040,c	;volatile
  3062                           
  3063                           ;I2C.c: 20: TRISC3 = 1;
  3064  001A06  8694               	bsf	3988,3,c	;volatile
  3065                           
  3066                           ;I2C.c: 21: TRISC4 = 1;
  3067  001A08  8894               	bsf	3988,4,c	;volatile
  3068  001A0A  0012               	return		;funcret
  3069  001A0C                     __end_of_I2C_Master_Init:
  3070                           	opt stack 0
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           prodh	equ	0xFF4
  3076                           prodl	equ	0xFF3
  3077                           intcon	equ	0xFF2
  3078                           intcon2	equ	0xFF1
  3079                           intcon3	equ	0xFF0
  3080                           postinc0	equ	0xFEE
  3081                           wreg	equ	0xFE8
  3082                           indf2	equ	0xFDF
  3083                           postinc2	equ	0xFDE
  3084                           postdec2	equ	0xFDD
  3085                           fsr2h	equ	0xFDA
  3086                           fsr2l	equ	0xFD9
  3087                           status	equ	0xFD8
  3088                           
  3089 ;; *************** function ___lldiv *****************
  3090 ;; Defined at:
  3091 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;  dividend        4   44[COMRAM] unsigned long 
  3094 ;;  divisor         4   48[COMRAM] unsigned long 
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  quotient        4   52[COMRAM] unsigned long 
  3097 ;;  counter         1   56[COMRAM] unsigned char 
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  4   44[COMRAM] unsigned long 
  3100 ;; Registers used:
  3101 ;;		wreg, status,2, status,0
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3107 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3111 ;;Total ram usage:       13 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; Hardware stack levels required when called:    4
  3114 ;; This function calls:
  3115 ;;		Nothing
  3116 ;; This function is called by:
  3117 ;;		_I2C_Master_Init
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text20
  3122  001930                     __ptext20:
  3123                           	opt stack 0
  3124  001930                     ___lldiv:
  3125                           	opt stack 25
  3126                           
  3127                           ;incstack = 0
  3128  001930  0E00               	movlw	0
  3129  001932  6E35               	movwf	___lldiv@quotient,c
  3130  001934  0E00               	movlw	0
  3131  001936  6E36               	movwf	___lldiv@quotient+1,c
  3132  001938  0E00               	movlw	0
  3133  00193A  6E37               	movwf	___lldiv@quotient+2,c
  3134  00193C  0E00               	movlw	0
  3135  00193E  6E38               	movwf	___lldiv@quotient+3,c
  3136  001940  5031               	movf	___lldiv@divisor,w,c
  3137  001942  1032               	iorwf	___lldiv@divisor+1,w,c
  3138  001944  1033               	iorwf	___lldiv@divisor+2,w,c
  3139  001946  1034               	iorwf	___lldiv@divisor+3,w,c
  3140  001948  B4D8               	btfsc	status,2,c
  3141  00194A  D02A               	goto	l617
  3142  00194C  0E01               	movlw	1
  3143  00194E  6E39               	movwf	___lldiv@counter,c
  3144  001950  D006               	goto	l1715
  3145  001952                     l1713:
  3146  001952  90D8               	bcf	status,0,c
  3147  001954  3631               	rlcf	___lldiv@divisor,f,c
  3148  001956  3632               	rlcf	___lldiv@divisor+1,f,c
  3149  001958  3633               	rlcf	___lldiv@divisor+2,f,c
  3150  00195A  3634               	rlcf	___lldiv@divisor+3,f,c
  3151  00195C  2A39               	incf	___lldiv@counter,f,c
  3152  00195E                     l1715:
  3153  00195E  AE34               	btfss	___lldiv@divisor+3,7,c
  3154  001960  D7F8               	goto	l1713
  3155  001962                     l1717:
  3156  001962  90D8               	bcf	status,0,c
  3157  001964  3635               	rlcf	___lldiv@quotient,f,c
  3158  001966  3636               	rlcf	___lldiv@quotient+1,f,c
  3159  001968  3637               	rlcf	___lldiv@quotient+2,f,c
  3160  00196A  3638               	rlcf	___lldiv@quotient+3,f,c
  3161  00196C  5031               	movf	___lldiv@divisor,w,c
  3162  00196E  5C2D               	subwf	___lldiv@dividend,w,c
  3163  001970  5032               	movf	___lldiv@divisor+1,w,c
  3164  001972  582E               	subwfb	___lldiv@dividend+1,w,c
  3165  001974  5033               	movf	___lldiv@divisor+2,w,c
  3166  001976  582F               	subwfb	___lldiv@dividend+2,w,c
  3167  001978  5034               	movf	___lldiv@divisor+3,w,c
  3168  00197A  5830               	subwfb	___lldiv@dividend+3,w,c
  3169  00197C  A0D8               	btfss	status,0,c
  3170  00197E  D009               	goto	l1725
  3171  001980  5031               	movf	___lldiv@divisor,w,c
  3172  001982  5E2D               	subwf	___lldiv@dividend,f,c
  3173  001984  5032               	movf	___lldiv@divisor+1,w,c
  3174  001986  5A2E               	subwfb	___lldiv@dividend+1,f,c
  3175  001988  5033               	movf	___lldiv@divisor+2,w,c
  3176  00198A  5A2F               	subwfb	___lldiv@dividend+2,f,c
  3177  00198C  5034               	movf	___lldiv@divisor+3,w,c
  3178  00198E  5A30               	subwfb	___lldiv@dividend+3,f,c
  3179  001990  8035               	bsf	___lldiv@quotient,0,c
  3180  001992                     l1725:
  3181  001992  90D8               	bcf	status,0,c
  3182  001994  3234               	rrcf	___lldiv@divisor+3,f,c
  3183  001996  3233               	rrcf	___lldiv@divisor+2,f,c
  3184  001998  3232               	rrcf	___lldiv@divisor+1,f,c
  3185  00199A  3231               	rrcf	___lldiv@divisor,f,c
  3186  00199C  2E39               	decfsz	___lldiv@counter,f,c
  3187  00199E  D7E1               	goto	l1717
  3188  0019A0                     l617:
  3189  0019A0  C035  F02D         	movff	___lldiv@quotient,?___lldiv
  3190  0019A4  C036  F02E         	movff	___lldiv@quotient+1,?___lldiv+1
  3191  0019A8  C037  F02F         	movff	___lldiv@quotient+2,?___lldiv+2
  3192  0019AC  C038  F030         	movff	___lldiv@quotient+3,?___lldiv+3
  3193  0019B0  0012               	return		;funcret
  3194  0019B2                     __end_of___lldiv:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           prodh	equ	0xFF4
  3201                           prodl	equ	0xFF3
  3202                           intcon	equ	0xFF2
  3203                           intcon2	equ	0xFF1
  3204                           intcon3	equ	0xFF0
  3205                           postinc0	equ	0xFEE
  3206                           wreg	equ	0xFE8
  3207                           indf2	equ	0xFDF
  3208                           postinc2	equ	0xFDE
  3209                           postdec2	equ	0xFDD
  3210                           fsr2h	equ	0xFDA
  3211                           fsr2l	equ	0xFD9
  3212                           status	equ	0xFD8
  3213                           
  3214 ;; *************** function _isr *****************
  3215 ;; Defined at:
  3216 ;;		line 92 in file "main.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;		None
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  i               1   43[COMRAM] unsigned char 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      void 
  3223 ;; Registers used:
  3224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;Total ram usage:       16 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    3
  3237 ;; This function calls:
  3238 ;;		i2_lcdInst
  3239 ;;		i2_printf
  3240 ;; This function is called by:
  3241 ;;		Interrupt level 2
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	intcode
  3246  000008                     __pintcode:
  3247                           	opt stack 0
  3248  000008                     _isr:
  3249                           	opt stack 23
  3250                           
  3251                           ;incstack = 0
  3252  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3253  00000A  ED90  F00B         	call	int_func,f	;refresh shadow registers
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           intcon	equ	0xFF2
  3261                           intcon2	equ	0xFF1
  3262                           intcon3	equ	0xFF0
  3263                           postinc0	equ	0xFEE
  3264                           wreg	equ	0xFE8
  3265                           indf2	equ	0xFDF
  3266                           postinc2	equ	0xFDE
  3267                           postdec2	equ	0xFDD
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272                           	psect	intcode_body
  3273  001720                     __pintcode_body:
  3274                           	opt stack 23
  3275  001720                     int_func:
  3276                           	opt stack 23
  3277  001720  0006               	pop		; remove dummy address from shadow register refresh
  3278  001722  CFFA F01E          	movff	pclath,??_isr+1
  3279  001726  CFFB F01F          	movff	pclatu,??_isr+2
  3280  00172A  CFE9 F020          	movff	fsr0l,??_isr+3
  3281  00172E  CFEA F021          	movff	fsr0h,??_isr+4
  3282  001732  CFE1 F022          	movff	fsr1l,??_isr+5
  3283  001736  CFE2 F023          	movff	fsr1h,??_isr+6
  3284  00173A  CFD9 F024          	movff	fsr2l,??_isr+7
  3285  00173E  CFDA F025          	movff	fsr2h,??_isr+8
  3286  001742  CFF3 F026          	movff	prodl,??_isr+9
  3287  001746  CFF4 F027          	movff	prodh,??_isr+10
  3288  00174A  CFF6 F028          	movff	tblptrl,??_isr+11
  3289  00174E  CFF7 F029          	movff	tblptrh,??_isr+12
  3290  001752  CFF8 F02A          	movff	tblptru,??_isr+13
  3291  001756  CFF5 F02B          	movff	tablat,??_isr+14
  3292                           
  3293                           ;main.c: 93: if (INT1IF) {
  3294  00175A  B0F0               	btfsc	intcon3,0,c	;volatile
  3295  00175C  D006               	goto	i2l2001
  3296  00175E  D00D               	goto	i2l2003
  3297  001760                     i2l1995:
  3298                           
  3299                           ;main.c: 96: curr_state = STANDBY;
  3300  001760  0E00               	movlw	0
  3301  001762  D001               	goto	L1
  3302  001764                     i2l1997:
  3303                           
  3304                           ;main.c: 99: curr_state = DATETIME;
  3305  001764  0E01               	movlw	1
  3306  001766                     L1:
  3307  001766  6E4F               	movwf	_curr_state,c
  3308                           
  3309                           ;main.c: 101: }
  3310                           
  3311                           ;main.c: 100: break;
  3312  001768  D021               	goto	i2l168
  3313  00176A                     i2l2001:
  3314  00176A  5081               	movf	3969,w,c	;volatile
  3315                           
  3316                           ; Switch size 1, requested type "space"
  3317                           ; Number of cases is 2, Range of values is 15 to 63
  3318                           ; switch strategies available:
  3319                           ; Name         Instructions Cycles
  3320                           ; simple_byte            7     4 (average)
  3321                           ;	Chosen strategy is simple_byte
  3322  00176C  0A0F               	xorlw	15	; case 15
  3323  00176E  B4D8               	btfsc	status,2,c
  3324  001770  D7F7               	goto	i2l1995
  3325  001772  0A30               	xorlw	48	; case 63
  3326  001774  B4D8               	btfsc	status,2,c
  3327  001776  D7F6               	goto	i2l1997
  3328                           
  3329                           ;main.c: 102: }
  3330  001778  D019               	goto	i2l168
  3331  00177A                     i2l2003:
  3332                           
  3333                           ;main.c: 105: lcdInst(0b10000000);
  3334  00177A  0E80               	movlw	128
  3335  00177C  ECA3  F00E         	call	i2_lcdInst
  3336                           
  3337                           ;main.c: 106: printf("bad interrupt");
  3338  001780  0E6A               	movlw	low STR_1
  3339  001782  6E0D               	movwf	i2printf@f,c
  3340  001784  0E10               	movlw	high STR_1
  3341  001786  6E0E               	movwf	i2printf@f+1,c
  3342  001788  EC0A  F00A         	call	i2_printf	;wreg free
  3343                           
  3344                           ;main.c: 107: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  3345  00178C  0E00               	movlw	0
  3346  00178E  6E2C               	movwf	isr@i,c
  3347  001790                     i2l2009:
  3348  001790  0E63               	movlw	99
  3349  001792  642C               	cpfsgt	isr@i,c
  3350  001794  D001               	goto	i2l2013
  3351  001796  D7F1               	goto	i2l2003
  3352  001798                     i2l2013:
  3353  001798  0E21               	movlw	33
  3354  00179A  6E1D               	movwf	??_isr& (0+255),c
  3355  00179C  0E76               	movlw	118
  3356  00179E                     i2u192_47:
  3357  00179E  2EE8               	decfsz	wreg,f,c
  3358  0017A0  D7FE               	bra	i2u192_47
  3359  0017A2  2E1D               	decfsz	??_isr& (0+255),f,c
  3360  0017A4  D7FC               	bra	i2u192_47
  3361  0017A6  D000               	nop2	
  3362  0017A8  2A2C               	incf	isr@i,f,c
  3363  0017AA  D7F2               	goto	i2l2009
  3364  0017AC                     i2l168:
  3365                           
  3366                           ;main.c: 108: }
  3367                           ;main.c: 109: }
  3368                           ;main.c: 110: INT1IF = 0;
  3369  0017AC  90F0               	bcf	intcon3,0,c	;volatile
  3370                           
  3371                           ;main.c: 111: return;
  3372  0017AE  C02B  FFF5         	movff	??_isr+14,tablat
  3373  0017B2  C02A  FFF8         	movff	??_isr+13,tblptru
  3374  0017B6  C029  FFF7         	movff	??_isr+12,tblptrh
  3375  0017BA  C028  FFF6         	movff	??_isr+11,tblptrl
  3376  0017BE  C027  FFF4         	movff	??_isr+10,prodh
  3377  0017C2  C026  FFF3         	movff	??_isr+9,prodl
  3378  0017C6  C025  FFDA         	movff	??_isr+8,fsr2h
  3379  0017CA  C024  FFD9         	movff	??_isr+7,fsr2l
  3380  0017CE  C023  FFE2         	movff	??_isr+6,fsr1h
  3381  0017D2  C022  FFE1         	movff	??_isr+5,fsr1l
  3382  0017D6  C021  FFEA         	movff	??_isr+4,fsr0h
  3383  0017DA  C020  FFE9         	movff	??_isr+3,fsr0l
  3384  0017DE  C01F  FFFB         	movff	??_isr+2,pclatu
  3385  0017E2  C01E  FFFA         	movff	??_isr+1,pclath
  3386  0017E6  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3387  0017E8  0011               	retfie		f
  3388  0017EA                     __end_of_isr:
  3389                           	opt stack 0
  3390                           pclatu	equ	0xFFB
  3391                           pclath	equ	0xFFA
  3392                           tblptru	equ	0xFF8
  3393                           tblptrh	equ	0xFF7
  3394                           tblptrl	equ	0xFF6
  3395                           tablat	equ	0xFF5
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           intcon	equ	0xFF2
  3399                           intcon2	equ	0xFF1
  3400                           intcon3	equ	0xFF0
  3401                           postinc0	equ	0xFEE
  3402                           fsr0h	equ	0xFEA
  3403                           fsr0l	equ	0xFE9
  3404                           wreg	equ	0xFE8
  3405                           fsr1h	equ	0xFE2
  3406                           fsr1l	equ	0xFE1
  3407                           indf2	equ	0xFDF
  3408                           postinc2	equ	0xFDE
  3409                           postdec2	equ	0xFDD
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function i2_printf *****************
  3415 ;; Defined at:
  3416 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  f               2   12[COMRAM] PTR const unsigned char 
  3419 ;;		 -> STR_5(23), STR_4(23), STR_3(10), STR_2(8), 
  3420 ;;		 -> STR_1(14), 
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;  printf          4    0        struct .
  3423 ;;  printf          3    0        PTR const unsigned char 
  3424 ;;  printf          2   25[COMRAM] int 
  3425 ;;  printf          2   22[COMRAM] unsigned int 
  3426 ;;  printf          2   19[COMRAM] PTR void [1]
  3427 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3428 ;;  printf          2    0        unsigned int 
  3429 ;;  printf          1   27[COMRAM] char 
  3430 ;;  printf          1   24[COMRAM] unsigned char 
  3431 ;;  printf          1   21[COMRAM] char 
  3432 ;;  printf          1   18[COMRAM] unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  2   12[COMRAM] int 
  3435 ;; Registers used:
  3436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;Total ram usage:       16 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    2
  3449 ;; This function calls:
  3450 ;;		i2___lwdiv
  3451 ;;		i2___lwmod
  3452 ;;		i2___wmul
  3453 ;;		i2_isdigit
  3454 ;;		i2_putch
  3455 ;; This function is called by:
  3456 ;;		_isr
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text22
  3461  001414                     __ptext22:
  3462                           	opt stack 0
  3463  001414                     i2_printf:
  3464                           	opt stack 23
  3465                           
  3466                           ;doprnt.c: 466: va_list ap;
  3467                           ;doprnt.c: 499: signed char c;
  3468                           ;doprnt.c: 501: int width;
  3469                           ;doprnt.c: 506: signed char prec;
  3470                           ;doprnt.c: 508: unsigned char flag;
  3471                           ;doprnt.c: 523: union {
  3472                           ;doprnt.c: 524: unsigned long vd;
  3473                           ;doprnt.c: 525: double integ;
  3474                           ;doprnt.c: 526: } tmpval;
  3475                           ;doprnt.c: 528: unsigned int val;
  3476                           ;doprnt.c: 529: unsigned len;
  3477                           ;doprnt.c: 530: const char * cp;
  3478                           ;doprnt.c: 533: *ap = __va_start();
  3479                           
  3480                           ;incstack = 0
  3481  001414  0E0F               	movlw	low (?i2_printf+2)
  3482  001416  6E14               	movwf	i2printf@ap,c
  3483  001418  0E00               	movlw	high (?i2_printf+2)
  3484  00141A  6E15               	movwf	i2printf@ap+1,c
  3485                           
  3486                           ;doprnt.c: 536: while(c = *f++) {
  3487  00141C  D174               	goto	i2l1959
  3488  00141E                     i2l1833:
  3489                           
  3490                           ;doprnt.c: 538: if(c != '%')
  3491  00141E  0E25               	movlw	37
  3492  001420  181C               	xorwf	i2printf@c,w,c
  3493  001422  B4D8               	btfsc	status,2,c
  3494  001424  D004               	goto	i2l1837
  3495                           
  3496                           ;doprnt.c: 540: {
  3497                           ;doprnt.c: 541: (putch(c) );
  3498  001426  501C               	movf	i2printf@c,w,c
  3499  001428  EC9D  F00E         	call	i2_putch
  3500                           
  3501                           ;doprnt.c: 542: continue;
  3502  00142C  D16C               	goto	i2l1959
  3503  00142E                     i2l1837:
  3504                           
  3505                           ;doprnt.c: 543: }
  3506                           ;doprnt.c: 546: width = 0;
  3507  00142E  0E00               	movlw	0
  3508  001430  6E1B               	movwf	i2printf@width+1,c
  3509  001432  0E00               	movlw	0
  3510  001434  6E1A               	movwf	i2printf@width,c
  3511                           
  3512                           ;doprnt.c: 548: flag = 0;
  3513  001436  0E00               	movlw	0
  3514  001438  6E19               	movwf	i2printf@flag,c
  3515                           
  3516                           ;doprnt.c: 551: switch(*f) {
  3517                           
  3518                           ;doprnt.c: 550: for(;;) {
  3519  00143A  D003               	goto	i2l1843
  3520  00143C                     i2l1839:
  3521                           
  3522                           ;doprnt.c: 580: flag |= 0x04;
  3523  00143C  8419               	bsf	i2printf@flag,2,c
  3524                           
  3525                           ;doprnt.c: 581: f++;
  3526  00143E  4A0D               	infsnz	i2printf@f,f,c
  3527  001440  2A0E               	incf	i2printf@f+1,f,c
  3528  001442                     i2l1843:
  3529  001442  C00D  FFF6         	movff	i2printf@f,tblptrl
  3530  001446  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3531  00144A                     	if	0	;tblptru may be non-zero
  3532  00144A                     	endif
  3533  00144A                     	if	0	;tblptru may be non-zero
  3534  00144A                     	endif
  3535  00144A  0008               	tblrd		*
  3536  00144C  50F5               	movf	tablat,w,c
  3537                           
  3538                           ; Switch size 1, requested type "space"
  3539                           ; Number of cases is 1, Range of values is 48 to 48
  3540                           ; switch strategies available:
  3541                           ; Name         Instructions Cycles
  3542                           ; simple_byte            4     3 (average)
  3543                           ;	Chosen strategy is simple_byte
  3544  00144E  0A30               	xorlw	48	; case 48
  3545  001450  B4D8               	btfsc	status,2,c
  3546  001452  D7F4               	goto	i2l1839
  3547                           
  3548                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3549                           
  3550                           ;doprnt.c: 586: }
  3551                           
  3552                           ;doprnt.c: 585: break;
  3553  001454  C00D  FFF6         	movff	i2printf@f,tblptrl
  3554  001458  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3555  00145C                     	if	0	;tblptru may be non-zero
  3556  00145C                     	endif
  3557  00145C                     	if	0	;tblptru may be non-zero
  3558  00145C                     	endif
  3559  00145C  0008               	tblrd		*
  3560  00145E  50F5               	movf	tablat,w,c
  3561  001460  EC6C  F00E         	call	i2_isdigit
  3562  001464  A0D8               	btfss	status,0,c
  3563  001466  D035               	goto	i2l1861
  3564                           
  3565                           ;doprnt.c: 598: width = 0;
  3566  001468  0E00               	movlw	0
  3567  00146A  6E1B               	movwf	i2printf@width+1,c
  3568  00146C  0E00               	movlw	0
  3569  00146E  6E1A               	movwf	i2printf@width,c
  3570  001470                     i2l1849:
  3571                           
  3572                           ;doprnt.c: 600: width *= 10;
  3573  001470  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  3574  001474  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  3575  001478  0E00               	movlw	0
  3576  00147A  6E04               	movwf	i2___wmul@multiplicand+1,c
  3577  00147C  0E0A               	movlw	10
  3578  00147E  6E03               	movwf	i2___wmul@multiplicand,c
  3579  001480  EC4A  F00E         	call	i2___wmul	;wreg free
  3580  001484  C001  F01A         	movff	?i2___wmul,i2printf@width
  3581  001488  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  3582                           
  3583                           ;doprnt.c: 601: width += *f++ - '0';
  3584  00148C  0ED0               	movlw	208
  3585  00148E  6E0F               	movwf	??i2_printf& (0+255),c
  3586  001490  0EFF               	movlw	255
  3587  001492  6E10               	movwf	(??i2_printf+1)& (0+255),c
  3588  001494  C00D  FFF6         	movff	i2printf@f,tblptrl
  3589  001498  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3590  00149C                     	if	0	;tblptru may be non-zero
  3591  00149C                     	endif
  3592  00149C                     	if	0	;tblptru may be non-zero
  3593  00149C                     	endif
  3594  00149C  0008               	tblrd		*
  3595  00149E  50F5               	movf	tablat,w,c
  3596  0014A0  6E11               	movwf	(??i2_printf+2)& (0+255),c
  3597  0014A2  6A12               	clrf	(??i2_printf+3)& (0+255),c
  3598  0014A4  500F               	movf	??i2_printf,w,c
  3599  0014A6  2611               	addwf	??i2_printf+2,f,c
  3600  0014A8  5010               	movf	??i2_printf+1,w,c
  3601  0014AA  2212               	addwfc	??i2_printf+3,f,c
  3602  0014AC  5011               	movf	??i2_printf+2,w,c
  3603  0014AE  261A               	addwf	i2printf@width,f,c
  3604  0014B0  5012               	movf	??i2_printf+3,w,c
  3605  0014B2  221B               	addwfc	i2printf@width+1,f,c
  3606  0014B4  4A0D               	infsnz	i2printf@f,f,c
  3607  0014B6  2A0E               	incf	i2printf@f+1,f,c
  3608                           
  3609                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3610  0014B8  C00D  FFF6         	movff	i2printf@f,tblptrl
  3611  0014BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3612  0014C0                     	if	0	;tblptru may be non-zero
  3613  0014C0                     	endif
  3614  0014C0                     	if	0	;tblptru may be non-zero
  3615  0014C0                     	endif
  3616  0014C0  0008               	tblrd		*
  3617  0014C2  50F5               	movf	tablat,w,c
  3618  0014C4  EC6C  F00E         	call	i2_isdigit
  3619  0014C8  A0D8               	btfss	status,0,c
  3620  0014CA  D003               	goto	i2l1861
  3621  0014CC  D7D1               	goto	i2l1849
  3622  0014CE                     i2l1857:
  3623                           
  3624                           ;doprnt.c: 721: flag |= 0x80;
  3625  0014CE  8E19               	bsf	i2printf@flag,7,c
  3626                           
  3627                           ;doprnt.c: 723: break;
  3628  0014D0  D017               	goto	i2l225
  3629  0014D2                     i2l1861:
  3630  0014D2  C00D  FFF6         	movff	i2printf@f,tblptrl
  3631  0014D6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3632  0014DA  4A0D               	infsnz	i2printf@f,f,c
  3633  0014DC  2A0E               	incf	i2printf@f+1,f,c
  3634  0014DE                     	if	0	;tblptru may be non-zero
  3635  0014DE                     	endif
  3636  0014DE                     	if	0	;tblptru may be non-zero
  3637  0014DE                     	endif
  3638  0014DE  0008               	tblrd		*
  3639  0014E0  CFF5 F01C          	movff	tablat,i2printf@c
  3640  0014E4  501C               	movf	i2printf@c,w,c
  3641                           
  3642                           ; Switch size 1, requested type "space"
  3643                           ; Number of cases is 4, Range of values is 0 to 120
  3644                           ; switch strategies available:
  3645                           ; Name         Instructions Cycles
  3646                           ; simple_byte           13     7 (average)
  3647                           ;	Chosen strategy is simple_byte
  3648  0014E6  0A00               	xorlw	0	; case 0
  3649  0014E8  B4D8               	btfsc	status,2,c
  3650  0014EA  0012               	return	
  3651  0014EC  0A64               	xorlw	100	; case 100
  3652  0014EE  B4D8               	btfsc	status,2,c
  3653  0014F0  D007               	goto	i2l225
  3654  0014F2  0A0D               	xorlw	13	; case 105
  3655  0014F4  B4D8               	btfsc	status,2,c
  3656  0014F6  D004               	goto	i2l225
  3657  0014F8  0A11               	xorlw	17	; case 120
  3658  0014FA  B4D8               	btfsc	status,2,c
  3659  0014FC  D7E8               	goto	i2l1857
  3660  0014FE  D103               	goto	i2l1959
  3661  001500                     i2l225:
  3662                           
  3663                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3664  001500  BE19               	btfsc	i2printf@flag,7,c
  3665  001502  D015               	goto	i2l1873
  3666                           
  3667                           ;doprnt.c: 1253: {
  3668                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3669  001504  C014  FFD9         	movff	i2printf@ap,fsr2l
  3670  001508  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  3671  00150C  CFDE F017          	movff	postinc2,i2printf@val
  3672  001510  CFDD F018          	movff	postdec2,i2printf@val+1
  3673  001514  0E02               	movlw	2
  3674  001516  2614               	addwf	i2printf@ap,f,c
  3675  001518  0E00               	movlw	0
  3676  00151A  2215               	addwfc	i2printf@ap+1,f,c
  3677                           
  3678                           ;doprnt.c: 1261: if((int)val < 0) {
  3679  00151C  AE18               	btfss	i2printf@val+1,7,c
  3680  00151E  D044               	goto	i2l1907
  3681                           
  3682                           ;doprnt.c: 1262: flag |= 0x03;
  3683  001520  0E03               	movlw	3
  3684  001522  1219               	iorwf	i2printf@flag,f,c
  3685                           
  3686                           ;doprnt.c: 1263: val = -val;
  3687  001524  6C17               	negf	i2printf@val,c
  3688  001526  1E18               	comf	i2printf@val+1,f,c
  3689  001528  B0D8               	btfsc	status,0,c
  3690  00152A  2A18               	incf	i2printf@val+1,f,c
  3691                           
  3692                           ;doprnt.c: 1264: }
  3693                           ;doprnt.c: 1266: }
  3694  00152C  D03D               	goto	i2l1907
  3695  00152E                     i2l1873:
  3696                           
  3697                           ;doprnt.c: 1268: else
  3698                           ;doprnt.c: 1273: {
  3699                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3700  00152E  C014  FFD9         	movff	i2printf@ap,fsr2l
  3701  001532  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  3702  001536  CFDE F017          	movff	postinc2,i2printf@val
  3703  00153A  CFDD F018          	movff	postdec2,i2printf@val+1
  3704  00153E  0E02               	movlw	2
  3705  001540  2614               	addwf	i2printf@ap,f,c
  3706  001542  0E00               	movlw	0
  3707  001544  2215               	addwfc	i2printf@ap+1,f,c
  3708                           
  3709                           ;doprnt.c: 1287: }
  3710                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3711  001546  D030               	goto	i2l1907
  3712  001548                     i2l1877:
  3713                           
  3714                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3715  001548  0E01               	movlw	1
  3716  00154A  6E1C               	movwf	i2printf@c,c
  3717  00154C                     i2l1879:
  3718  00154C  0E05               	movlw	5
  3719  00154E  181C               	xorwf	i2printf@c,w,c
  3720  001550  B4D8               	btfsc	status,2,c
  3721  001552  D032               	goto	i2l1909
  3722                           
  3723                           ;doprnt.c: 1306: if(val < dpowers[c])
  3724  001554  501C               	movf	i2printf@c,w,c
  3725  001556  0D02               	mullw	2
  3726  001558  0E12               	movlw	low _dpowers
  3727  00155A  24F3               	addwf	prodl,w,c
  3728  00155C  6EF6               	movwf	tblptrl,c
  3729  00155E  0E10               	movlw	high _dpowers
  3730  001560  20F4               	addwfc	prodh,w,c
  3731  001562  6EF7               	movwf	tblptrh,c
  3732  001564                     	if	0	;There are less than 3 active tblptr bytes
  3733  001564                     	endif
  3734  001564  0009               	tblrd		*+
  3735  001566  50F5               	movf	tablat,w,c
  3736  001568  5C17               	subwf	i2printf@val,w,c
  3737  00156A  0009               	tblrd		*+
  3738  00156C  50F5               	movf	tablat,w,c
  3739  00156E  5818               	subwfb	i2printf@val+1,w,c
  3740  001570  A0D8               	btfss	status,0,c
  3741  001572  D022               	goto	i2l1909
  3742                           
  3743                           ;doprnt.c: 1307: break;
  3744  001574  2A1C               	incf	i2printf@c,f,c
  3745  001576  D7EA               	goto	i2l1879
  3746  001578                     i2l1891:
  3747                           
  3748                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3749  001578  0E01               	movlw	1
  3750  00157A  6E1C               	movwf	i2printf@c,c
  3751  00157C                     i2l1893:
  3752  00157C  0E04               	movlw	4
  3753  00157E  181C               	xorwf	i2printf@c,w,c
  3754  001580  B4D8               	btfsc	status,2,c
  3755  001582  D01A               	goto	i2l1909
  3756                           
  3757                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3758  001584  501C               	movf	i2printf@c,w,c
  3759  001586  0D02               	mullw	2
  3760  001588  0E1C               	movlw	low _hexpowers
  3761  00158A  24F3               	addwf	prodl,w,c
  3762  00158C  6EF6               	movwf	tblptrl,c
  3763  00158E  0E10               	movlw	high _hexpowers
  3764  001590  20F4               	addwfc	prodh,w,c
  3765  001592  6EF7               	movwf	tblptrh,c
  3766  001594                     	if	0	;There are less than 3 active tblptr bytes
  3767  001594                     	endif
  3768  001594  0009               	tblrd		*+
  3769  001596  50F5               	movf	tablat,w,c
  3770  001598  5C17               	subwf	i2printf@val,w,c
  3771  00159A  0009               	tblrd		*+
  3772  00159C  50F5               	movf	tablat,w,c
  3773  00159E  5818               	subwfb	i2printf@val+1,w,c
  3774  0015A0  A0D8               	btfss	status,0,c
  3775  0015A2  D00A               	goto	i2l1909
  3776                           
  3777                           ;doprnt.c: 1318: break;
  3778  0015A4  2A1C               	incf	i2printf@c,f,c
  3779  0015A6  D7EA               	goto	i2l1893
  3780  0015A8                     i2l1907:
  3781  0015A8  5019               	movf	i2printf@flag,w,c
  3782  0015AA  0B80               	andlw	128
  3783                           
  3784                           ; Switch size 1, requested type "space"
  3785                           ; Number of cases is 2, Range of values is 0 to 128
  3786                           ; switch strategies available:
  3787                           ; Name         Instructions Cycles
  3788                           ; simple_byte            7     4 (average)
  3789                           ;	Chosen strategy is simple_byte
  3790  0015AC  0A00               	xorlw	0	; case 0
  3791  0015AE  B4D8               	btfsc	status,2,c
  3792  0015B0  D7CB               	goto	i2l1877
  3793  0015B2  0A80               	xorlw	128	; case 128
  3794  0015B4  B4D8               	btfsc	status,2,c
  3795  0015B6  D7E0               	goto	i2l1891
  3796  0015B8                     i2l1909:
  3797                           
  3798                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3799  0015B8  501A               	movf	i2printf@width,w,c
  3800  0015BA  101B               	iorwf	i2printf@width+1,w,c
  3801  0015BC  B4D8               	btfsc	status,2,c
  3802  0015BE  D009               	goto	i2l1915
  3803  0015C0  C019  F00F         	movff	i2printf@flag,??i2_printf
  3804  0015C4  0E03               	movlw	3
  3805  0015C6  160F               	andwf	??i2_printf,f,c
  3806  0015C8  B4D8               	btfsc	status,2,c
  3807  0015CA  D003               	goto	i2l1915
  3808                           
  3809                           ;doprnt.c: 1346: width--;
  3810  0015CC  061A               	decf	i2printf@width,f,c
  3811  0015CE  A0D8               	btfss	status,0,c
  3812  0015D0  061B               	decf	i2printf@width+1,f,c
  3813  0015D2                     i2l1915:
  3814                           
  3815                           ;doprnt.c: 1381: if(width > c)
  3816  0015D2  0E80               	movlw	128
  3817  0015D4  BE1C               	btfsc	i2printf@c,7,c
  3818  0015D6  0E7F               	movlw	127
  3819  0015D8  6E0F               	movwf	??i2_printf& (0+255),c
  3820  0015DA  501A               	movf	i2printf@width,w,c
  3821  0015DC  5C1C               	subwf	i2printf@c,w,c
  3822  0015DE  501B               	movf	i2printf@width+1,w,c
  3823  0015E0  0A80               	xorlw	128
  3824  0015E2  580F               	subwfb	??i2_printf& (0+255),w,c
  3825  0015E4  B0D8               	btfsc	status,0,c
  3826  0015E6  D007               	goto	i2l1919
  3827                           
  3828                           ;doprnt.c: 1382: width -= c;
  3829  0015E8  501C               	movf	i2printf@c,w,c
  3830  0015EA  5E1A               	subwf	i2printf@width,f,c
  3831  0015EC  0E00               	movlw	0
  3832  0015EE  BE1C               	btfsc	i2printf@c,7,c
  3833  0015F0  0EFF               	movlw	255
  3834  0015F2  5A1B               	subwfb	i2printf@width+1,f,c
  3835  0015F4  D004               	goto	i2l1921
  3836  0015F6                     i2l1919:
  3837                           
  3838                           ;doprnt.c: 1383: else
  3839                           ;doprnt.c: 1384: width = 0;
  3840  0015F6  0E00               	movlw	0
  3841  0015F8  6E1B               	movwf	i2printf@width+1,c
  3842  0015FA  0E00               	movlw	0
  3843  0015FC  6E1A               	movwf	i2printf@width,c
  3844  0015FE                     i2l1921:
  3845                           
  3846                           ;doprnt.c: 1387: if(flag & 0x04) {
  3847  0015FE  A419               	btfss	i2printf@flag,2,c
  3848  001600  D014               	goto	i2l1933
  3849                           
  3850                           ;doprnt.c: 1392: if(flag & 0x03)
  3851  001602  C019  F00F         	movff	i2printf@flag,??i2_printf
  3852  001606  0E03               	movlw	3
  3853  001608  160F               	andwf	??i2_printf,f,c
  3854  00160A  B4D8               	btfsc	status,2,c
  3855  00160C  D003               	goto	i2l1927
  3856                           
  3857                           ;doprnt.c: 1393: (putch('-') );
  3858  00160E  0E2D               	movlw	45
  3859  001610  EC9D  F00E         	call	i2_putch
  3860  001614                     i2l1927:
  3861                           
  3862                           ;doprnt.c: 1415: if(width)
  3863  001614  501A               	movf	i2printf@width,w,c
  3864  001616  101B               	iorwf	i2printf@width+1,w,c
  3865  001618  B4D8               	btfsc	status,2,c
  3866  00161A  D01E               	goto	i2l1943
  3867                           
  3868                           ;doprnt.c: 1417: (putch('0') );
  3869                           
  3870                           ;doprnt.c: 1416: do
  3871  00161C  0E30               	movlw	48
  3872  00161E  EC9D  F00E         	call	i2_putch
  3873                           
  3874                           ;doprnt.c: 1418: while(--width);
  3875  001622  061A               	decf	i2printf@width,f,c
  3876  001624  A0D8               	btfss	status,0,c
  3877  001626  061B               	decf	i2printf@width+1,f,c
  3878  001628  D7F5               	goto	i2l1927
  3879  00162A                     i2l1933:
  3880                           
  3881                           ;doprnt.c: 1422: {
  3882                           ;doprnt.c: 1424: if(width
  3883                           ;doprnt.c: 1428: )
  3884  00162A  501A               	movf	i2printf@width,w,c
  3885  00162C  101B               	iorwf	i2printf@width+1,w,c
  3886  00162E  B4D8               	btfsc	status,2,c
  3887  001630  D00A               	goto	i2l1939
  3888  001632                     i2l1935:
  3889                           
  3890                           ;doprnt.c: 1430: (putch(' ') );
  3891  001632  0E20               	movlw	32
  3892  001634  EC9D  F00E         	call	i2_putch
  3893                           
  3894                           ;doprnt.c: 1431: while(--width);
  3895  001638  061A               	decf	i2printf@width,f,c
  3896  00163A  A0D8               	btfss	status,0,c
  3897  00163C  061B               	decf	i2printf@width+1,f,c
  3898  00163E  501A               	movf	i2printf@width,w,c
  3899  001640  101B               	iorwf	i2printf@width+1,w,c
  3900  001642  A4D8               	btfss	status,2,c
  3901  001644  D7F6               	goto	i2l1935
  3902  001646                     i2l1939:
  3903                           
  3904                           ;doprnt.c: 1438: if(flag & 0x03)
  3905  001646  C019  F00F         	movff	i2printf@flag,??i2_printf
  3906  00164A  0E03               	movlw	3
  3907  00164C  160F               	andwf	??i2_printf,f,c
  3908  00164E  B4D8               	btfsc	status,2,c
  3909  001650  D003               	goto	i2l1943
  3910                           
  3911                           ;doprnt.c: 1439: (putch('-') );
  3912  001652  0E2D               	movlw	45
  3913  001654  EC9D  F00E         	call	i2_putch
  3914  001658                     i2l1943:
  3915                           
  3916                           ;doprnt.c: 1469: }
  3917                           ;doprnt.c: 1472: prec = c;
  3918  001658  C01C  F016         	movff	i2printf@c,i2printf@prec
  3919                           
  3920                           ;doprnt.c: 1474: while(prec--) {
  3921  00165C  D050               	goto	i2l1957
  3922  00165E                     i2l1945:
  3923                           
  3924                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3925  00165E  5016               	movf	i2printf@prec,w,c
  3926  001660  0D02               	mullw	2
  3927  001662  0E12               	movlw	low _dpowers
  3928  001664  24F3               	addwf	prodl,w,c
  3929  001666  6EF6               	movwf	tblptrl,c
  3930  001668  0E10               	movlw	high _dpowers
  3931  00166A  20F4               	addwfc	prodh,w,c
  3932  00166C  6EF7               	movwf	tblptrh,c
  3933  00166E                     	if	0	;There are less than 3 active tblptr bytes
  3934  00166E                     	endif
  3935  00166E  0009               	tblrd		*+
  3936  001670  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3937  001674  000A               	tblrd		*-
  3938  001676  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3939  00167A  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  3940  00167E  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  3941  001682  EC2F  F00D         	call	i2___lwdiv	;wreg free
  3942  001686  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  3943  00168A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  3944  00168E  0E00               	movlw	0
  3945  001690  6E0B               	movwf	i2___lwmod@divisor+1,c
  3946  001692  0E0A               	movlw	10
  3947  001694  6E0A               	movwf	i2___lwmod@divisor,c
  3948  001696  ECED  F00D         	call	i2___lwmod	;wreg free
  3949  00169A  5008               	movf	?i2___lwmod,w,c
  3950  00169C  0F30               	addlw	48
  3951  00169E  6E1C               	movwf	i2printf@c,c
  3952                           
  3953                           ;doprnt.c: 1491: break;
  3954  0016A0  D02B               	goto	i2l1955
  3955  0016A2                     i2l1947:
  3956                           
  3957                           ;doprnt.c: 1499: {
  3958                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3959  0016A2  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  3960  0016A6  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  3961  0016AA  5016               	movf	i2printf@prec,w,c
  3962  0016AC  0D02               	mullw	2
  3963  0016AE  0E1C               	movlw	low _hexpowers
  3964  0016B0  24F3               	addwf	prodl,w,c
  3965  0016B2  6EF6               	movwf	tblptrl,c
  3966  0016B4  0E10               	movlw	high _hexpowers
  3967  0016B6  20F4               	addwfc	prodh,w,c
  3968  0016B8  6EF7               	movwf	tblptrh,c
  3969  0016BA                     	if	0	;There are less than 3 active tblptr bytes
  3970  0016BA                     	endif
  3971  0016BA  0009               	tblrd		*+
  3972  0016BC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3973  0016C0  000A               	tblrd		*-
  3974  0016C2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3975  0016C6  EC2F  F00D         	call	i2___lwdiv	;wreg free
  3976  0016CA  5001               	movf	?i2___lwdiv,w,c
  3977  0016CC  0B0F               	andlw	15
  3978  0016CE  6E13               	movwf	i2printf@idx,c
  3979                           
  3980                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3981  0016D0  5013               	movf	i2printf@idx,w,c
  3982  0016D2  0D01               	mullw	1
  3983  0016D4  0E59               	movlw	low STR_6
  3984  0016D6  24F3               	addwf	prodl,w,c
  3985  0016D8  6EF6               	movwf	tblptrl,c
  3986  0016DA  0E10               	movlw	high STR_6
  3987  0016DC  20F4               	addwfc	prodh,w,c
  3988  0016DE  6EF7               	movwf	tblptrh,c
  3989  0016E0                     	if	0	;There are less than 3 active tblptr bytes
  3990  0016E0                     	endif
  3991  0016E0  0008               	tblrd		*
  3992  0016E2  CFF5 F01C          	movff	tablat,i2printf@c
  3993                           
  3994                           ;doprnt.c: 1523: }
  3995                           
  3996                           ;doprnt.c: 1508: }
  3997                           ;doprnt.c: 1510: break;
  3998  0016E6  D008               	goto	i2l1955
  3999  0016E8                     i2l1953:
  4000  0016E8  5019               	movf	i2printf@flag,w,c
  4001  0016EA  0B80               	andlw	128
  4002                           
  4003                           ; Switch size 1, requested type "space"
  4004                           ; Number of cases is 2, Range of values is 0 to 128
  4005                           ; switch strategies available:
  4006                           ; Name         Instructions Cycles
  4007                           ; simple_byte            7     4 (average)
  4008                           ;	Chosen strategy is simple_byte
  4009  0016EC  0A00               	xorlw	0	; case 0
  4010  0016EE  B4D8               	btfsc	status,2,c
  4011  0016F0  D7B6               	goto	i2l1945
  4012  0016F2  0A80               	xorlw	128	; case 128
  4013  0016F4  B4D8               	btfsc	status,2,c
  4014  0016F6  D7D5               	goto	i2l1947
  4015  0016F8                     i2l1955:
  4016                           
  4017                           ;doprnt.c: 1524: (putch(c) );
  4018  0016F8  501C               	movf	i2printf@c,w,c
  4019  0016FA  EC9D  F00E         	call	i2_putch
  4020  0016FE                     i2l1957:
  4021  0016FE  0616               	decf	i2printf@prec,f,c
  4022  001700  2816               	incf	i2printf@prec,w,c
  4023  001702  A4D8               	btfss	status,2,c
  4024  001704  D7F1               	goto	i2l1953
  4025  001706                     i2l1959:
  4026  001706  C00D  FFF6         	movff	i2printf@f,tblptrl
  4027  00170A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4028  00170E  4A0D               	infsnz	i2printf@f,f,c
  4029  001710  2A0E               	incf	i2printf@f+1,f,c
  4030  001712                     	if	0	;tblptru may be non-zero
  4031  001712                     	endif
  4032  001712                     	if	0	;tblptru may be non-zero
  4033  001712                     	endif
  4034  001712  0008               	tblrd		*
  4035  001714  CFF5 F01C          	movff	tablat,i2printf@c
  4036  001718  501C               	movf	i2printf@c,w,c
  4037  00171A  B4D8               	btfsc	status,2,c
  4038  00171C  0012               	return	
  4039  00171E  D67F               	goto	i2l1833
  4040  001720                     __end_ofi2_printf:
  4041                           	opt stack 0
  4042                           pclatu	equ	0xFFB
  4043                           pclath	equ	0xFFA
  4044                           tblptru	equ	0xFF8
  4045                           tblptrh	equ	0xFF7
  4046                           tblptrl	equ	0xFF6
  4047                           tablat	equ	0xFF5
  4048                           prodh	equ	0xFF4
  4049                           prodl	equ	0xFF3
  4050                           intcon	equ	0xFF2
  4051                           intcon2	equ	0xFF1
  4052                           intcon3	equ	0xFF0
  4053                           postinc0	equ	0xFEE
  4054                           fsr0h	equ	0xFEA
  4055                           fsr0l	equ	0xFE9
  4056                           wreg	equ	0xFE8
  4057                           fsr1h	equ	0xFE2
  4058                           fsr1l	equ	0xFE1
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066 ;; *************** function i2_putch *****************
  4067 ;; Defined at:
  4068 ;;		line 31 in file "lcd.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  data            1    wreg     unsigned char 
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;  data            1    2[COMRAM] unsigned char 
  4073 ;; Return value:  Size  Location     Type
  4074 ;;                  1    wreg      void 
  4075 ;; Registers used:
  4076 ;;		wreg, status,2, status,0, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4085 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;Total ram usage:        1 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    1
  4089 ;; This function calls:
  4090 ;;		i2_lcdNibble
  4091 ;; This function is called by:
  4092 ;;		i2_printf
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           	psect	text23
  4097  001D3A                     __ptext23:
  4098                           	opt stack 0
  4099  001D3A                     i2_putch:
  4100                           	opt stack 23
  4101                           
  4102                           ;incstack = 0
  4103                           ;i2putch@data stored from wreg
  4104  001D3A  6E03               	movwf	i2putch@data,c
  4105                           
  4106                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4107  001D3C  848C               	bsf	3980,2,c	;volatile
  4108                           
  4109                           ;lcd.c: 33: lcdNibble(data);
  4110  001D3E  5003               	movf	i2putch@data,w,c
  4111  001D40  EC7F  F00D         	call	i2_lcdNibble
  4112  001D44  0012               	return		;funcret
  4113  001D46                     __end_ofi2_putch:
  4114                           	opt stack 0
  4115                           pclatu	equ	0xFFB
  4116                           pclath	equ	0xFFA
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           prodh	equ	0xFF4
  4122                           prodl	equ	0xFF3
  4123                           intcon	equ	0xFF2
  4124                           intcon2	equ	0xFF1
  4125                           intcon3	equ	0xFF0
  4126                           postinc0	equ	0xFEE
  4127                           fsr0h	equ	0xFEA
  4128                           fsr0l	equ	0xFE9
  4129                           wreg	equ	0xFE8
  4130                           fsr1h	equ	0xFE2
  4131                           fsr1l	equ	0xFE1
  4132                           indf2	equ	0xFDF
  4133                           postinc2	equ	0xFDE
  4134                           postdec2	equ	0xFDD
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function i2_isdigit *****************
  4140 ;; Defined at:
  4141 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  c               1    wreg     unsigned char 
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;  c               1    2[COMRAM] unsigned char 
  4146 ;; Return value:  Size  Location     Type
  4147 ;;		None               void
  4148 ;; Registers used:
  4149 ;;		wreg, status,2, status,0
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;Total ram usage:        3 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		i2_printf
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text24
  4169  001CD8                     __ptext24:
  4170                           	opt stack 0
  4171  001CD8                     i2_isdigit:
  4172                           	opt stack 24
  4173                           
  4174                           ;incstack = 0
  4175                           ;i2isdigit@c stored from wreg
  4176  001CD8  6E03               	movwf	i2isdigit@c,c
  4177  001CDA  0E00               	movlw	0
  4178  001CDC  6E02               	movwf	i2_isdigit$506,c
  4179  001CDE  0E3A               	movlw	58
  4180  001CE0  6003               	cpfslt	i2isdigit@c,c
  4181  001CE2  D005               	goto	i2l1747
  4182  001CE4  0E2F               	movlw	47
  4183  001CE6  6403               	cpfsgt	i2isdigit@c,c
  4184  001CE8  D002               	goto	i2l1747
  4185  001CEA  0E01               	movlw	1
  4186  001CEC  6E02               	movwf	i2_isdigit$506,c
  4187  001CEE                     i2l1747:
  4188  001CEE  C002  F001         	movff	i2_isdigit$506,??i2_isdigit
  4189  001CF2  3001               	rrcf	??i2_isdigit,w,c
  4190  001CF4  0012               	return	
  4191  001CF6                     __end_ofi2_isdigit:
  4192                           	opt stack 0
  4193                           pclatu	equ	0xFFB
  4194                           pclath	equ	0xFFA
  4195                           tblptru	equ	0xFF8
  4196                           tblptrh	equ	0xFF7
  4197                           tblptrl	equ	0xFF6
  4198                           tablat	equ	0xFF5
  4199                           prodh	equ	0xFF4
  4200                           prodl	equ	0xFF3
  4201                           intcon	equ	0xFF2
  4202                           intcon2	equ	0xFF1
  4203                           intcon3	equ	0xFF0
  4204                           postinc0	equ	0xFEE
  4205                           fsr0h	equ	0xFEA
  4206                           fsr0l	equ	0xFE9
  4207                           wreg	equ	0xFE8
  4208                           fsr1h	equ	0xFE2
  4209                           fsr1l	equ	0xFE1
  4210                           indf2	equ	0xFDF
  4211                           postinc2	equ	0xFDE
  4212                           postdec2	equ	0xFDD
  4213                           fsr2h	equ	0xFDA
  4214                           fsr2l	equ	0xFD9
  4215                           status	equ	0xFD8
  4216                           
  4217 ;; *************** function i2___wmul *****************
  4218 ;; Defined at:
  4219 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  multiplier      2    0[COMRAM] unsigned int 
  4222 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  __wmul          2    4[COMRAM] unsigned int 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  2    0[COMRAM] unsigned int 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0, prodl, prodh
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4234 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;Total ram usage:        6 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; This function calls:
  4241 ;;		Nothing
  4242 ;; This function is called by:
  4243 ;;		i2_printf
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text25
  4248  001C94                     __ptext25:
  4249                           	opt stack 0
  4250  001C94                     i2___wmul:
  4251                           	opt stack 24
  4252                           
  4253                           ;incstack = 0
  4254  001C94  5001               	movf	i2___wmul@multiplier,w,c
  4255  001C96  0203               	mulwf	i2___wmul@multiplicand,c
  4256  001C98  CFF3 F005          	movff	prodl,i2___wmul@product
  4257  001C9C  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4258  001CA0  5001               	movf	i2___wmul@multiplier,w,c
  4259  001CA2  0204               	mulwf	i2___wmul@multiplicand+1,c
  4260  001CA4  50F3               	movf	prodl,w,c
  4261  001CA6  2606               	addwf	i2___wmul@product+1,f,c
  4262  001CA8  5002               	movf	i2___wmul@multiplier+1,w,c
  4263  001CAA  0203               	mulwf	i2___wmul@multiplicand,c
  4264  001CAC  50F3               	movf	prodl,w,c
  4265  001CAE  2606               	addwf	i2___wmul@product+1,f,c
  4266  001CB0  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4267  001CB4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4268  001CB8  0012               	return	
  4269  001CBA                     __end_ofi2___wmul:
  4270                           	opt stack 0
  4271                           pclatu	equ	0xFFB
  4272                           pclath	equ	0xFFA
  4273                           tblptru	equ	0xFF8
  4274                           tblptrh	equ	0xFF7
  4275                           tblptrl	equ	0xFF6
  4276                           tablat	equ	0xFF5
  4277                           prodh	equ	0xFF4
  4278                           prodl	equ	0xFF3
  4279                           intcon	equ	0xFF2
  4280                           intcon2	equ	0xFF1
  4281                           intcon3	equ	0xFF0
  4282                           postinc0	equ	0xFEE
  4283                           fsr0h	equ	0xFEA
  4284                           fsr0l	equ	0xFE9
  4285                           wreg	equ	0xFE8
  4286                           fsr1h	equ	0xFE2
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           postinc2	equ	0xFDE
  4290                           postdec2	equ	0xFDD
  4291                           fsr2h	equ	0xFDA
  4292                           fsr2l	equ	0xFD9
  4293                           status	equ	0xFD8
  4294                           
  4295 ;; *************** function i2___lwmod *****************
  4296 ;; Defined at:
  4297 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  dividend        2    7[COMRAM] unsigned int 
  4300 ;;  divisor         2    9[COMRAM] unsigned int 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  2    7[COMRAM] unsigned int 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4312 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;Total ram usage:        5 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; This function calls:
  4319 ;;		Nothing
  4320 ;; This function is called by:
  4321 ;;		i2_printf
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text26
  4326  001BDA                     __ptext26:
  4327                           	opt stack 0
  4328  001BDA                     i2___lwmod:
  4329                           	opt stack 24
  4330                           
  4331                           ;incstack = 0
  4332  001BDA  500A               	movf	i2___lwmod@divisor,w,c
  4333  001BDC  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4334  001BDE  B4D8               	btfsc	status,2,c
  4335  001BE0  D018               	goto	i2l680
  4336  001BE2  0E01               	movlw	1
  4337  001BE4  6E0C               	movwf	i2___lwmod@counter,c
  4338  001BE6  D004               	goto	i2l1779
  4339  001BE8                     i2l1777:
  4340  001BE8  90D8               	bcf	status,0,c
  4341  001BEA  360A               	rlcf	i2___lwmod@divisor,f,c
  4342  001BEC  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4343  001BEE  2A0C               	incf	i2___lwmod@counter,f,c
  4344  001BF0                     i2l1779:
  4345  001BF0  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4346  001BF2  D7FA               	goto	i2l1777
  4347  001BF4                     i2l1781:
  4348  001BF4  500A               	movf	i2___lwmod@divisor,w,c
  4349  001BF6  5C08               	subwf	i2___lwmod@dividend,w,c
  4350  001BF8  500B               	movf	i2___lwmod@divisor+1,w,c
  4351  001BFA  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4352  001BFC  A0D8               	btfss	status,0,c
  4353  001BFE  D004               	goto	i2l1785
  4354  001C00  500A               	movf	i2___lwmod@divisor,w,c
  4355  001C02  5E08               	subwf	i2___lwmod@dividend,f,c
  4356  001C04  500B               	movf	i2___lwmod@divisor+1,w,c
  4357  001C06  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4358  001C08                     i2l1785:
  4359  001C08  90D8               	bcf	status,0,c
  4360  001C0A  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4361  001C0C  320A               	rrcf	i2___lwmod@divisor,f,c
  4362  001C0E  2E0C               	decfsz	i2___lwmod@counter,f,c
  4363  001C10  D7F1               	goto	i2l1781
  4364  001C12                     i2l680:
  4365  001C12  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4366  001C16  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4367  001C1A  0012               	return		;funcret
  4368  001C1C                     __end_ofi2___lwmod:
  4369                           	opt stack 0
  4370                           pclatu	equ	0xFFB
  4371                           pclath	equ	0xFFA
  4372                           tblptru	equ	0xFF8
  4373                           tblptrh	equ	0xFF7
  4374                           tblptrl	equ	0xFF6
  4375                           tablat	equ	0xFF5
  4376                           prodh	equ	0xFF4
  4377                           prodl	equ	0xFF3
  4378                           intcon	equ	0xFF2
  4379                           intcon2	equ	0xFF1
  4380                           intcon3	equ	0xFF0
  4381                           postinc0	equ	0xFEE
  4382                           fsr0h	equ	0xFEA
  4383                           fsr0l	equ	0xFE9
  4384                           wreg	equ	0xFE8
  4385                           fsr1h	equ	0xFE2
  4386                           fsr1l	equ	0xFE1
  4387                           indf2	equ	0xFDF
  4388                           postinc2	equ	0xFDE
  4389                           postdec2	equ	0xFDD
  4390                           fsr2h	equ	0xFDA
  4391                           fsr2l	equ	0xFD9
  4392                           status	equ	0xFD8
  4393                           
  4394 ;; *************** function i2___lwdiv *****************
  4395 ;; Defined at:
  4396 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;  dividend        2    0[COMRAM] unsigned int 
  4399 ;;  divisor         2    2[COMRAM] unsigned int 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4402 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  2    0[COMRAM] unsigned int 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4412 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;Total ram usage:        7 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; This function calls:
  4419 ;;		Nothing
  4420 ;; This function is called by:
  4421 ;;		i2_printf
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           	psect	text27
  4426  001A5E                     __ptext27:
  4427                           	opt stack 0
  4428  001A5E                     i2___lwdiv:
  4429                           	opt stack 24
  4430                           
  4431                           ;incstack = 0
  4432  001A5E  0E00               	movlw	0
  4433  001A60  6E06               	movwf	i2___lwdiv@quotient+1,c
  4434  001A62  0E00               	movlw	0
  4435  001A64  6E05               	movwf	i2___lwdiv@quotient,c
  4436  001A66  5003               	movf	i2___lwdiv@divisor,w,c
  4437  001A68  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4438  001A6A  B4D8               	btfsc	status,2,c
  4439  001A6C  D01C               	goto	i2l670
  4440  001A6E  0E01               	movlw	1
  4441  001A70  6E07               	movwf	i2___lwdiv@counter,c
  4442  001A72  D004               	goto	i2l1759
  4443  001A74                     i2l1757:
  4444  001A74  90D8               	bcf	status,0,c
  4445  001A76  3603               	rlcf	i2___lwdiv@divisor,f,c
  4446  001A78  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4447  001A7A  2A07               	incf	i2___lwdiv@counter,f,c
  4448  001A7C                     i2l1759:
  4449  001A7C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4450  001A7E  D7FA               	goto	i2l1757
  4451  001A80                     i2l1761:
  4452  001A80  90D8               	bcf	status,0,c
  4453  001A82  3605               	rlcf	i2___lwdiv@quotient,f,c
  4454  001A84  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4455  001A86  5003               	movf	i2___lwdiv@divisor,w,c
  4456  001A88  5C01               	subwf	i2___lwdiv@dividend,w,c
  4457  001A8A  5004               	movf	i2___lwdiv@divisor+1,w,c
  4458  001A8C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4459  001A8E  A0D8               	btfss	status,0,c
  4460  001A90  D005               	goto	i2l1769
  4461  001A92  5003               	movf	i2___lwdiv@divisor,w,c
  4462  001A94  5E01               	subwf	i2___lwdiv@dividend,f,c
  4463  001A96  5004               	movf	i2___lwdiv@divisor+1,w,c
  4464  001A98  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4465  001A9A  8005               	bsf	i2___lwdiv@quotient,0,c
  4466  001A9C                     i2l1769:
  4467  001A9C  90D8               	bcf	status,0,c
  4468  001A9E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4469  001AA0  3203               	rrcf	i2___lwdiv@divisor,f,c
  4470  001AA2  2E07               	decfsz	i2___lwdiv@counter,f,c
  4471  001AA4  D7ED               	goto	i2l1761
  4472  001AA6                     i2l670:
  4473  001AA6  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4474  001AAA  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4475  001AAE  0012               	return		;funcret
  4476  001AB0                     __end_ofi2___lwdiv:
  4477                           	opt stack 0
  4478                           pclatu	equ	0xFFB
  4479                           pclath	equ	0xFFA
  4480                           tblptru	equ	0xFF8
  4481                           tblptrh	equ	0xFF7
  4482                           tblptrl	equ	0xFF6
  4483                           tablat	equ	0xFF5
  4484                           prodh	equ	0xFF4
  4485                           prodl	equ	0xFF3
  4486                           intcon	equ	0xFF2
  4487                           intcon2	equ	0xFF1
  4488                           intcon3	equ	0xFF0
  4489                           postinc0	equ	0xFEE
  4490                           fsr0h	equ	0xFEA
  4491                           fsr0l	equ	0xFE9
  4492                           wreg	equ	0xFE8
  4493                           fsr1h	equ	0xFE2
  4494                           fsr1l	equ	0xFE1
  4495                           indf2	equ	0xFDF
  4496                           postinc2	equ	0xFDE
  4497                           postdec2	equ	0xFDD
  4498                           fsr2h	equ	0xFDA
  4499                           fsr2l	equ	0xFD9
  4500                           status	equ	0xFD8
  4501                           
  4502 ;; *************** function i2_lcdInst *****************
  4503 ;; Defined at:
  4504 ;;		line 26 in file "lcd.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;  data            1    wreg     unsigned char 
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  data            1    2[COMRAM] unsigned char 
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      void 
  4511 ;; Registers used:
  4512 ;;		wreg, status,2, status,0, cstack
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;Total ram usage:        1 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    1
  4525 ;; This function calls:
  4526 ;;		i2_lcdNibble
  4527 ;; This function is called by:
  4528 ;;		_isr
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text28
  4533  001D46                     __ptext28:
  4534                           	opt stack 0
  4535  001D46                     i2_lcdInst:
  4536                           	opt stack 24
  4537                           
  4538                           ;incstack = 0
  4539                           ;i2lcdInst@data stored from wreg
  4540  001D46  6E03               	movwf	i2lcdInst@data,c
  4541                           
  4542                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4543  001D48  948C               	bcf	3980,2,c	;volatile
  4544                           
  4545                           ;lcd.c: 28: lcdNibble(data);
  4546  001D4A  5003               	movf	i2lcdInst@data,w,c
  4547  001D4C  EC7F  F00D         	call	i2_lcdNibble
  4548  001D50  0012               	return		;funcret
  4549  001D52                     __end_ofi2_lcdInst:
  4550                           	opt stack 0
  4551                           pclatu	equ	0xFFB
  4552                           pclath	equ	0xFFA
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           intcon	equ	0xFF2
  4560                           intcon2	equ	0xFF1
  4561                           intcon3	equ	0xFF0
  4562                           postinc0	equ	0xFEE
  4563                           fsr0h	equ	0xFEA
  4564                           fsr0l	equ	0xFE9
  4565                           wreg	equ	0xFE8
  4566                           fsr1h	equ	0xFE2
  4567                           fsr1l	equ	0xFE1
  4568                           indf2	equ	0xFDF
  4569                           postinc2	equ	0xFDE
  4570                           postdec2	equ	0xFDD
  4571                           fsr2h	equ	0xFDA
  4572                           fsr2l	equ	0xFD9
  4573                           status	equ	0xFD8
  4574                           
  4575 ;; *************** function i2_lcdNibble *****************
  4576 ;; Defined at:
  4577 ;;		line 36 in file "lcd.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  data            1    wreg     unsigned char 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  data            1    1[COMRAM] unsigned char 
  4582 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  1    wreg      void 
  4585 ;; Registers used:
  4586 ;;		wreg, status,2, status,0
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;Total ram usage:        2 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		i2_lcdInst
  4602 ;;		i2_putch
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           	psect	text29
  4607  001AFE                     __ptext29:
  4608                           	opt stack 0
  4609  001AFE                     i2_lcdNibble:
  4610                           	opt stack 23
  4611                           
  4612                           ;incstack = 0
  4613                           ;i2lcdNibble@data stored from wreg
  4614  001AFE  6E02               	movwf	i2lcdNibble@data,c
  4615                           
  4616                           ;lcd.c: 38: char temp = data & 0xF0;
  4617  001B00  5002               	movf	i2lcdNibble@data,w,c
  4618  001B02  0BF0               	andlw	240
  4619  001B04  6E01               	movwf	i2lcdNibble@temp,c
  4620                           
  4621                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4622  001B06  508C               	movf	3980,w,c	;volatile
  4623  001B08  0B0F               	andlw	15
  4624  001B0A  6E8C               	movwf	3980,c	;volatile
  4625                           
  4626                           ;lcd.c: 40: LATD = temp | LATD;
  4627  001B0C  5001               	movf	i2lcdNibble@temp,w,c
  4628  001B0E  108C               	iorwf	3980,w,c	;volatile
  4629  001B10  6E8C               	movwf	3980,c	;volatile
  4630                           
  4631                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4632  001B12  968C               	bcf	3980,3,c	;volatile
  4633                           
  4634                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4635  001B14  0E19               	movlw	25
  4636  001B16                     i2u193_47:
  4637  001B16  2EE8               	decfsz	wreg,f,c
  4638  001B18  D7FE               	bra	i2u193_47
  4639                           
  4640                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4641  001B1A  868C               	bsf	3980,3,c	;volatile
  4642                           
  4643                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4644  001B1C  0E19               	movlw	25
  4645  001B1E                     i2u194_47:
  4646  001B1E  2EE8               	decfsz	wreg,f,c
  4647  001B20  D7FE               	bra	i2u194_47
  4648                           
  4649                           ;lcd.c: 47: data = data << 4;
  4650  001B22  3802               	swapf	i2lcdNibble@data,w,c
  4651  001B24  0BF0               	andlw	240
  4652  001B26  6E02               	movwf	i2lcdNibble@data,c
  4653                           
  4654                           ;lcd.c: 49: temp = data & 0xF0;
  4655  001B28  5002               	movf	i2lcdNibble@data,w,c
  4656  001B2A  0BF0               	andlw	240
  4657  001B2C  6E01               	movwf	i2lcdNibble@temp,c
  4658                           
  4659                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4660  001B2E  508C               	movf	3980,w,c	;volatile
  4661  001B30  0B0F               	andlw	15
  4662  001B32  6E8C               	movwf	3980,c	;volatile
  4663                           
  4664                           ;lcd.c: 51: LATD = temp | LATD;
  4665  001B34  5001               	movf	i2lcdNibble@temp,w,c
  4666  001B36  108C               	iorwf	3980,w,c	;volatile
  4667  001B38  6E8C               	movwf	3980,c	;volatile
  4668                           
  4669                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4670  001B3A  968C               	bcf	3980,3,c	;volatile
  4671                           
  4672                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4673  001B3C  0E19               	movlw	25
  4674  001B3E                     i2u195_47:
  4675  001B3E  2EE8               	decfsz	wreg,f,c
  4676  001B40  D7FE               	bra	i2u195_47
  4677                           
  4678                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4679  001B42  868C               	bsf	3980,3,c	;volatile
  4680                           
  4681                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4682  001B44  0E19               	movlw	25
  4683  001B46                     i2u196_47:
  4684  001B46  2EE8               	decfsz	wreg,f,c
  4685  001B48  D7FE               	bra	i2u196_47
  4686  001B4A  0012               	return		;funcret
  4687  001B4C                     __end_ofi2_lcdNibble:
  4688                           	opt stack 0
  4689                           pclatu	equ	0xFFB
  4690                           pclath	equ	0xFFA
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           prodh	equ	0xFF4
  4696                           prodl	equ	0xFF3
  4697                           intcon	equ	0xFF2
  4698                           intcon2	equ	0xFF1
  4699                           intcon3	equ	0xFF0
  4700                           postinc0	equ	0xFEE
  4701                           fsr0h	equ	0xFEA
  4702                           fsr0l	equ	0xFE9
  4703                           wreg	equ	0xFE8
  4704                           fsr1h	equ	0xFE2
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           postinc2	equ	0xFDE
  4708                           postdec2	equ	0xFDD
  4709                           fsr2h	equ	0xFDA
  4710                           fsr2l	equ	0xFD9
  4711                           status	equ	0xFD8
  4712                           pclatu	equ	0xFFB
  4713                           pclath	equ	0xFFA
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           intcon	equ	0xFF2
  4721                           intcon2	equ	0xFF1
  4722                           intcon3	equ	0xFF0
  4723                           postinc0	equ	0xFEE
  4724                           fsr0h	equ	0xFEA
  4725                           fsr0l	equ	0xFE9
  4726                           wreg	equ	0xFE8
  4727                           fsr1h	equ	0xFE2
  4728                           fsr1l	equ	0xFE1
  4729                           indf2	equ	0xFDF
  4730                           postinc2	equ	0xFDE
  4731                           postdec2	equ	0xFDD
  4732                           fsr2h	equ	0xFDA
  4733                           fsr2l	equ	0xFD9
  4734                           status	equ	0xFD8
  4735                           
  4736                           	psect	rparam
  4737  0000                     pclatu	equ	0xFFB
  4738                           pclath	equ	0xFFA
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           prodh	equ	0xFF4
  4744                           prodl	equ	0xFF3
  4745                           intcon	equ	0xFF2
  4746                           intcon2	equ	0xFF1
  4747                           intcon3	equ	0xFF0
  4748                           postinc0	equ	0xFEE
  4749                           fsr0h	equ	0xFEA
  4750                           fsr0l	equ	0xFE9
  4751                           wreg	equ	0xFE8
  4752                           fsr1h	equ	0xFE2
  4753                           fsr1l	equ	0xFE1
  4754                           indf2	equ	0xFDF
  4755                           postinc2	equ	0xFDE
  4756                           postdec2	equ	0xFDD
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761                           	psect	temp
  4762  000050                     btemp:
  4763                           	opt stack 0
  4764  000050                     	ds	1
  4765  0000                     int$flags	set	btemp
  4766                           pclatu	equ	0xFFB
  4767                           pclath	equ	0xFFA
  4768                           tblptru	equ	0xFF8
  4769                           tblptrh	equ	0xFF7
  4770                           tblptrl	equ	0xFF6
  4771                           tablat	equ	0xFF5
  4772                           prodh	equ	0xFF4
  4773                           prodl	equ	0xFF3
  4774                           intcon	equ	0xFF2
  4775                           intcon2	equ	0xFF1
  4776                           intcon3	equ	0xFF0
  4777                           postinc0	equ	0xFEE
  4778                           fsr0h	equ	0xFEA
  4779                           fsr0l	equ	0xFE9
  4780                           wreg	equ	0xFE8
  4781                           fsr1h	equ	0xFE2
  4782                           fsr1l	equ	0xFE1
  4783                           indf2	equ	0xFDF
  4784                           postinc2	equ	0xFDE
  4785                           postdec2	equ	0xFDD
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8


Data Sizes:
    Strings     95
    Constant    42
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     71      79
    BANK0           128     10      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_5(CODE[23]), STR_4(CODE[23]), STR_3(CODE[10]), STR_2(CODE[8]), 
		 -> STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_date_time
    _standby->_printf
    _initLCD->_lcdInst
    _date_time->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in COMRAM

    _isr->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _standby->_printf
    _date_time->_printf

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8040
                                             69 COMRAM     2     2      0
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                            _initLCD
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    3497
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             47 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    4032
                                             68 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    3362
                                             56 COMRAM    12     4      8
                                              0 BANK0     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             44 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     392
                                             44 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             51 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             44 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             44 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             45 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                             45 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             44 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             57 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             44 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 16    16      0    2093
                                             28 COMRAM    16    16      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            25    23      2    1912
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
   _bottle_time
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A       A       5        7.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     47      4F       1       62.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      59      34        0.0%
DATA                 0      0      59       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 06 00:15:52 2017

                       l34 1D10        ___wmul@multiplicand 002F         i2___lwdiv@dividend 0001  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l225 1190                        l617 19A0                        l670 1A54  
                      l680 1BD0               __CFG_CPB$OFF 000000                        u110 1C8C  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      _isr 0008                        prod 000FF3                        wreg 000FE8  
             ?_bottle_time 0001               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l1001 1C8E                       l2101 1BAE                       l2103 1BB2  
                     l2121 10AE                       l2107 1BC6                       l2211 12E4  
                     l2203 12C2                       l2123 10C0                       l2205 12CC  
                     l2141 115A                       l2133 10F8                       l2117 109A  
                     l2063 1CD0                       l2231 1386                       l2223 1326  
                     l2127 10C8                       l2311 18EC                       l2081 1A2A  
                     l2241 13EC                       l2217 1300                       l2161 11E4  
                     l2145 1160                       l2313 18F2                       l2321 1918  
                     l2091 1A4A                       l2083 1A2E                       l2219 130C  
                     l2227 1338                       l2163 11EA                       l2243 13F8  
                     l2315 18F8                       l2229 133E                       l2237 13D2  
                     l2157 11C8                       l2309 18E6                       l2079 1A22  
                     l2239 13E4                       l2175 1220                       l2191 125C  
                     l2319 18FE                       l1713 1952                       l2177 1226  
                     l2193 126E                       l1715 195E                       l2099 1BA6  
                     l2275 181E                       l1725 1992                       l1717 1962  
                     l2285 1842                       l2199 128E                       l2279 1826  
                     ?_isr 0001                       STR_1 106A                       STR_2 1082  
                     STR_3 1078                       STR_4 102B                       STR_5 1042  
                     STR_6 1059                       u1215 19E0                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     _LATE 000F8D                       u1907 1AF0                       u1917 1AF8  
                     u1857 1922                       u1867 1B52                       u1877 1B8C  
                     u1887 1AC8                       u1897 1AD0                       _RCEN 007E2B  
                     _RSEN 007E29                       _main 1898                       _keys 1001  
                     _time 0048                       fsr0h 000FEA                       fsr1h 000FE2  
       i2___lwdiv@quotient 0005                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0050                       isr@i 002C                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
          __end_ofi2_putch 1D46              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              i2_lcdNibble 1AFE              ?_bottle_count 0001                      ??_isr 001D  
         ?_I2C_Master_Init 003A           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___lldiv 19B2            __end_of___lwdiv 1A5E  
          __end_of___lwmod 1BDA                      i2l225 1500                      i2l168 17AC  
                    i2l670 1AA6                      i2l680 1C12                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 1D3A             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 1B98  
           __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003            __end_of_dpowers 101C  
          __end_of_isdigit 1CD8                      _putch 1D22                      pclath 000FFA  
                    tablat 000FF5            __end_of_timeset 102B           __end_ofi2___wmul 1CBA  
          __end_of_standby 1C48                      status 000FD8             __CFG_PBADEN$ON 000000  
            i2printf@width 001A           __end_ofi2_printf 1720         __size_ofi2___lwdiv 0052  
       __size_ofi2___lwmod 0042            __initialization 1CF6         __size_ofi2_lcdInst 000C  
           ??_bottle_count 002D               __end_of_main 1930               __end_of_keys 1012  
               i2printf@ap 0014         __size_ofi2_isdigit 001E                     ??_main 0046  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 002E  
       ??_I2C_Master_Start 002E                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0030            i2lcdNibble@data 0002                     ?_putch 0001  
          i2lcdNibble@temp 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l2001 176A                     i2l2003 177A                     i2l2013 1798  
                   i2l2009 1790                     i2l1761 1A80                     i2l1921 15FE  
                   i2l1833 141E                     i2l1747 1CEE                     i2l1915 15D2  
                   i2l1907 15A8                     i2l1843 1442                     i2l1757 1A74  
                   i2l1781 1BF4                     i2l1933 162A                     i2l1909 15B8  
                   i2l1861 14D2                     i2l1837 142E                     i2l1759 1A7C  
                   i2l1935 1632                     i2l1943 1658                     i2l1927 1614  
                   i2l1919 15F6                     i2l1839 143C                     i2l1769 1A9C  
                   i2l1785 1C08                     i2l1777 1BE8                     i2l1945 165E  
                   i2l1953 16E8                     i2l1873 152E                     i2l1857 14CE  
                   i2l1849 1470                     i2l1779 1BF0                     i2l1947 16A2  
                   i2l1955 16F8                     i2l1939 1646                     i2l1891 1578  
                   i2l1957 16FE                     i2l1893 157C                     i2l1877 1548  
                   i2l1879 154C                     i2l1959 1706                     i2l1995 1760  
                   i2l1997 1764                  ??i2_putch 0003                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000                     ___wmul 1C48             __CFG_STVREN$ON 000000  
                ??___lldiv 0035                  ??___lwdiv 0031                  ??___lwmod 0038  
                   clear_0 1CFC                  ??_lcdInst 002F                     _printf 108C  
                ??_initLCD 0030                  ??_isdigit 002D          __end_ofi2___lwdiv 1AB0  
             __mediumconst 0000          __end_ofi2___lwmod 1C1C                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_standby 0045  
        __end_ofi2_lcdInst 1D52          __end_ofi2_isdigit 1CF6       __size_of_bottle_time 0002  
               __accesstop 0080    __end_of__initialization 1D02              ___rparam_used 000001  
       i2___lwmod@dividend 0008             __pcstackCOMRAM 0001              __end_of_putch 1D2E  
              i2printf@idx 0013                i2printf@val 0017         __size_of_date_time 00AE  
                ?i2___wmul 0001         __size_of_lcdNibble 004E                i2putch@data 0003  
                ?i2_printf 000D       __end_of_bottle_count 1D70                    ??_putch 002F  
             ?i2_lcdNibble 0001                    ?___wmul 002D                    ?_printf 0039  
               ??i2___wmul 0005                 ??i2_printf 000F                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7          __end_of_date_time 1898  
                  i2_putch 1D3A          __end_of_lcdNibble 1AFE                    __Hparam 0000  
                  __Lparam 0000                    ___lldiv 1930            __size_of___wmul 0026  
                  ___lwdiv 1A0C                    ___lwmod 1B98               __psmallconst 1000  
               _curr_state 004F                    __pcinit 1CF6                    __ramtop 1000  
                  _lcdInst 1D2E                    __ptext0 1898                    __ptext1 1C1C  
                  __ptext2 1B4C                    __ptext3 17EA                    __ptext4 108C  
                  __ptext5 1D22                    __ptext6 1CBA                    __ptext7 1C48  
                  __ptext8 1B98                    __ptext9 1A0C            __size_of_printf 0388  
                  _initLCD 1B4C          __end_of_hexpowers 1024              i2_isdigit$506 0002  
                  _dpowers 1012                    _isdigit 1CBA               __size_of_isr 17E2  
 __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012  
               date_time@i 0045   __size_of_I2C_Master_Stop 0008                    _timeset 1024  
                  _standby 1C1C             __pintcode_body 1720       end_of_initialization 1D02  
            __Lmediumconst 0000                    int_func 1720        i2___wmul@multiplier 0001  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0031  
          ___lldiv@counter 0039                    printf@c 0089                    printf@f 0039  
         I2C_Master_Init@c 003A           I2C_Master_Read@a 002E                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE      __size_of_bottle_count 0002  
        i2___lwdiv@divisor 0003                  i2___lwdiv 1A5E                  i2___lwmod 1BDA  
        i2___lwdiv@counter 0007                  i2_lcdInst 1D46                printf@width 0087  
                i2_isdigit 1CD8               _bottle_count 1D6E             __end_of___wmul 1C6E  
     __size_ofi2_lcdNibble 004E              i2lcdInst@data 0003           i2___wmul@product 0005  
           __end_of_printf 1414               i2printf@flag 0019               i2printf@prec 0016  
      start_initialization 1CF6          __size_ofi2___wmul 0026                __end_of_isr 17EA  
                i2printf@c 001C                  i2printf@f 000D              ??_bottle_time 002D  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 030C  
        ??_I2C_Master_Init 003E          ??_I2C_Master_Read 002E          ??_I2C_Master_Wait 002D  
               ?i2_lcdInst 0001          ??_I2C_Master_Stop 002E                 ?i2_isdigit 0001  
                 ??___wmul 0031           __CFG_LPT1OSC$OFF 000000                   ??_printf 0041  
              __pbssCOMRAM 0048              __pcstackBANK0 0080          i2___lwmod@divisor 000A  
        i2___lwmod@counter 000C                   ?i2_putch 0001        __end_of_bottle_time 1D6E  
         _I2C_Master_Start 1D64           _I2C_Master_Write 1D52                  _date_time 17EA  
         ___lwdiv@dividend 002D          __CFG_CCP2MX$PORTC 000000                  __pintcode 0008  
                _lcdNibble 1AB0                   ?___lldiv 002D                   ?___lwdiv 002D  
                 ?___lwmod 0034                   ?_lcdInst 0001                   ?_initLCD 0001  
              __smallconst 1000                   ?_isdigit 0001                  _hexpowers 101C  
                 ?_standby 0001           ___lwdiv@quotient 0032                ??i2___lwdiv 0005  
              ??i2___lwmod 000C             __size_of_putch 000C                ??i2_lcdInst 0003  
           ___wmul@product 0031                   _LATDbits 000F8C                ??i2_isdigit 0001  
               ?_date_time 0001                   i2u192_47 179E                   i2u193_47 1B16  
                 i2u194_47 1B1E                   i2u195_47 1B3E                   i2u196_47 1B46  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001          ___wmul@multiplier 002D  
                 i2___wmul 1C94              lcdNibble@data 002E                 printf@flag 0086  
            lcdNibble@temp 002D                 printf@prec 0083                   i2_printf 1414  
              _bottle_time 1D6C        I2C_Master_Read@temp 002F           __size_ofi2_putch 000C  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
    i2___wmul@multiplicand 0003           __size_of___lldiv 0082           __size_of___lwdiv 0052  
         __size_of___lwmod 0042                _isdigit$506 002E           __size_of_lcdInst 000C  
          _I2C_Master_Init 19B2            _I2C_Master_Read 1C6E           __size_of_initLCD 004C  
          _I2C_Master_Wait 1D10            _I2C_Master_Stop 1D5C           __size_of_isdigit 001E  
          ___lwdiv@divisor 002F            ___lwdiv@counter 0031                   __ptext10 1D2E  
                 __ptext11 1AB0                   __ptext20 1930                   __ptext12 1D52  
                 __ptext13 1D5C                   __ptext22 1414                   __ptext14 1D64  
                 __ptext23 1D3A                   __ptext15 1C6E                   __ptext24 1CD8  
                 __ptext16 1D10                   __ptext25 1C94                   __ptext17 1D6C  
                 __ptext26 1BDA                   __ptext18 1D6E                   __ptext27 1A5E  
                 __ptext19 19B2                   __ptext28 1D46                   __ptext29 1AFE  
         __size_of_standby 002C              __size_of_main 0098                ??_date_time 0045  
            ??i2_lcdNibble 0001                ??_lcdNibble 002D                   int$flags 0050  
                printf@idx 0080                  printf@val 0084                  putch@data 002F  
 __end_of_I2C_Master_Start 1D6C   __end_of_I2C_Master_Write 1D5C                 _INTCONbits 000FF2  
                 isdigit@c 002F                   intlevel2 0000           ___lwmod@dividend 0034  
         ___lldiv@dividend 002D                   printf@ap 0081    __end_of_I2C_Master_Init 1A0C  
  __end_of_I2C_Master_Read 1C94    __end_of_I2C_Master_Wait 1D22    __end_of_I2C_Master_Stop 1D64  
              lcdInst@data 002F        __end_ofi2_lcdNibble 1B4C           ___lldiv@quotient 0035  
        I2C_Master_Write@d 002E            ___lwmod@divisor 0036            ___lwmod@counter 0038  

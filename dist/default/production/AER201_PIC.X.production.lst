

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 06 00:27:51 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           ; Version 1.40
    46                           ; Generated 01/12/2016 GMT
    47                           ; 
    48                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4620 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	smallconst
    81  001000                     __psmallconst:
    82                           	opt stack 0
    83  001000  00                 	db	0
    84  001001                     _keys:
    85                           	opt stack 0
    86  001001  31                 	db	49
    87  001002  32                 	db	50
    88  001003  33                 	db	51
    89  001004  41                 	db	65
    90  001005  34                 	db	52
    91  001006  35                 	db	53
    92  001007  36                 	db	54
    93  001008  42                 	db	66
    94  001009  37                 	db	55
    95  00100A  38                 	db	56
    96  00100B  39                 	db	57
    97  00100C  43                 	db	67
    98  00100D  2A                 	db	42
    99  00100E  30                 	db	48
   100  00100F  23                 	db	35
   101  001010  44                 	db	68
   102  001011  00                 	db	0
   103  001012                     __end_of_keys:
   104                           	opt stack 0
   105  001012                     _dpowers:
   106                           	opt stack 0
   107  001012  0001               	dw	1
   108  001014  000A               	dw	10
   109  001016  0064               	dw	100
   110  001018  03E8               	dw	1000
   111  00101A  2710               	dw	10000
   112  00101C                     __end_of_dpowers:
   113                           	opt stack 0
   114  00101C                     _hexpowers:
   115                           	opt stack 0
   116  00101C  0001               	dw	1
   117  00101E  0010               	dw	16
   118  001020  0100               	dw	256
   119  001022  1000               	dw	4096
   120  001024                     __end_of_hexpowers:
   121                           	opt stack 0
   122  001024                     _timeset:
   123                           	opt stack 0
   124  001024  50                 	db	80
   125  001025  35                 	db	53
   126  001026  21                 	db	33
   127  001027  08                 	db	8
   128  001028  05                 	db	5
   129  001029  02                 	db	2
   130  00102A  17                 	db	23
   131  00102B                     __end_of_timeset:
   132                           	opt stack 0
   133  0000                     _ADCON0	set	4034
   134  0000                     _ADCON1	set	4033
   135  0000                     _INTCONbits	set	4082
   136  0000                     _LATA	set	3977
   137  0000                     _LATB	set	3978
   138  0000                     _LATC	set	3979
   139  0000                     _LATD	set	3980
   140  0000                     _LATDbits	set	3980
   141  0000                     _LATE	set	3981
   142  0000                     _PORTB	set	3969
   143  0000                     _SSPADD	set	4040
   144  0000                     _SSPBUF	set	4041
   145  0000                     _SSPCON1	set	4038
   146  0000                     _SSPCON2	set	4037
   147  0000                     _SSPSTAT	set	4039
   148  0000                     _TRISA	set	3986
   149  0000                     _TRISB	set	3987
   150  0000                     _TRISC	set	3988
   151  0000                     _TRISD	set	3989
   152  0000                     _TRISE	set	3990
   153  0000                     _ACKDT	set	32301
   154  0000                     _ACKEN	set	32300
   155  0000                     _INT1IE	set	32643
   156  0000                     _INT1IF	set	32640
   157  0000                     _PEN	set	32298
   158  0000                     _RCEN	set	32299
   159  0000                     _RSEN	set	32297
   160  0000                     _SEN	set	32296
   161  0000                     _TRISC3	set	31907
   162  0000                     _TRISC4	set	31908
   163  0000                     _nRBPU	set	32655
   164  00102B                     STR_4:
   165  00102B  25                 	db	37
   166  00102C  30                 	db	48	;'0'
   167  00102D  32                 	db	50	;'2'
   168  00102E  78                 	db	120	;'x'
   169  00102F  2F                 	db	47
   170  001030  25                 	db	37
   171  001031  30                 	db	48	;'0'
   172  001032  32                 	db	50	;'2'
   173  001033  78                 	db	120	;'x'
   174  001034  2F                 	db	47
   175  001035  25                 	db	37
   176  001036  30                 	db	48	;'0'
   177  001037  32                 	db	50	;'2'
   178  001038  78                 	db	120	;'x'
   179  001039  20                 	db	32
   180  00103A  20                 	db	32
   181  00103B  20                 	db	32
   182  00103C  20                 	db	32
   183  00103D  20                 	db	32
   184  00103E  20                 	db	32
   185  00103F  20                 	db	32
   186  001040  20                 	db	32
   187  001041  00                 	db	0
   188  001042                     STR_5:
   189  001042  25                 	db	37
   190  001043  30                 	db	48	;'0'
   191  001044  32                 	db	50	;'2'
   192  001045  78                 	db	120	;'x'
   193  001046  3A                 	db	58	;':'
   194  001047  25                 	db	37
   195  001048  30                 	db	48	;'0'
   196  001049  32                 	db	50	;'2'
   197  00104A  78                 	db	120	;'x'
   198  00104B  3A                 	db	58	;':'
   199  00104C  25                 	db	37
   200  00104D  30                 	db	48	;'0'
   201  00104E  32                 	db	50	;'2'
   202  00104F  78                 	db	120	;'x'
   203  001050  20                 	db	32
   204  001051  20                 	db	32
   205  001052  20                 	db	32
   206  001053  20                 	db	32
   207  001054  20                 	db	32
   208  001055  20                 	db	32
   209  001056  20                 	db	32
   210  001057  20                 	db	32
   211  001058  00                 	db	0
   212  001059                     STR_6:
   213  001059  30                 	db	48	;'0'
   214  00105A  31                 	db	49	;'1'
   215  00105B  32                 	db	50	;'2'
   216  00105C  33                 	db	51	;'3'
   217  00105D  34                 	db	52	;'4'
   218  00105E  35                 	db	53	;'5'
   219  00105F  36                 	db	54	;'6'
   220  001060  37                 	db	55	;'7'
   221  001061  38                 	db	56	;'8'
   222  001062  39                 	db	57	;'9'
   223  001063  61                 	db	97	;'a'
   224  001064  62                 	db	98	;'b'
   225  001065  63                 	db	99	;'c'
   226  001066  64                 	db	100	;'d'
   227  001067  65                 	db	101	;'e'
   228  001068  66                 	db	102	;'f'
   229  001069  00                 	db	0
   230  00106A                     STR_2:
   231  00106A  73                 	db	115	;'s'
   232  00106B  74                 	db	116	;'t'
   233  00106C  61                 	db	97	;'a'
   234  00106D  6E                 	db	110	;'n'
   235  00106E  64                 	db	100	;'d'
   236  00106F  62                 	db	98	;'b'
   237  001070  79                 	db	121	;'y'
   238  001071  20                 	db	32
   239  001072  20                 	db	32
   240  001073  20                 	db	32
   241  001074  20                 	db	32
   242  001075  20                 	db	32
   243  001076  20                 	db	32
   244  001077  20                 	db	32
   245  001078  20                 	db	32
   246  001079  20                 	db	32
   247  00107A  00                 	db	0
   248  00107B                     STR_1:
   249  00107B  62                 	db	98	;'b'
   250  00107C  61                 	db	97	;'a'
   251  00107D  64                 	db	100	;'d'
   252  00107E  20                 	db	32
   253  00107F  69                 	db	105	;'i'
   254  001080  6E                 	db	110	;'n'
   255  001081  74                 	db	116	;'t'
   256  001082  65                 	db	101	;'e'
   257  001083  72                 	db	114	;'r'
   258  001084  72                 	db	114	;'r'
   259  001085  75                 	db	117	;'u'
   260  001086  70                 	db	112	;'p'
   261  001087  74                 	db	116	;'t'
   262  001088  00                 	db	0
   263  001089                     STR_3:
   264  001089  50                 	db	80	;'P'
   265  00108A  4F                 	db	79	;'O'
   266  00108B  52                 	db	82	;'R'
   267  00108C  54                 	db	84	;'T'
   268  00108D  42                 	db	66	;'B'
   269  00108E  3A                 	db	58	;':'
   270  00108F  20                 	db	32
   271  001090  25                 	db	37
   272  001091  64                 	db	100	;'d'
   273  001092  20                 	db	32
   274  001093  20                 	db	32
   275  001094  20                 	db	32
   276  001095  00                 	db	0
   277                           
   278                           ; #config settings
   279  001096  00                 	db	0	; dummy byte at the end
   280  0000                     
   281                           	psect	cinit
   282  001D08                     __pcinit:
   283                           	opt stack 0
   284  001D08                     start_initialization:
   285                           	opt stack 0
   286  001D08                     __initialization:
   287                           	opt stack 0
   288                           
   289                           ; Clear objects allocated to COMRAM (8 bytes)
   290  001D08  EE00  F048         	lfsr	0,__pbssCOMRAM
   291  001D0C  0E08               	movlw	8
   292  001D0E                     clear_0:
   293  001D0E  6AEE               	clrf	postinc0,c
   294  001D10  06E8               	decf	wreg,f,c
   295  001D12  E1FD               	bnz	clear_0
   296  001D14                     end_of_initialization:
   297                           	opt stack 0
   298  001D14                     __end_of__initialization:
   299                           	opt stack 0
   300  001D14  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   301  001D16  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   302  001D18  0E00               	movlw	low (__Lmediumconst shr (0+16))
   303  001D1A  6EF8               	movwf	tblptru,c
   304  001D1C  0100               	movlb	0
   305  001D1E  EF55  F00C         	goto	_main	;jump to C main() function
   306                           tblptru	equ	0xFF8
   307                           postinc0	equ	0xFEE
   308                           wreg	equ	0xFE8
   309                           
   310                           	psect	bssCOMRAM
   311  000048                     __pbssCOMRAM:
   312                           	opt stack 0
   313  000048                     _time:
   314                           	opt stack 0
   315  000048                     	ds	7
   316  00004F                     _curr_state:
   317                           	opt stack 0
   318  00004F                     	ds	1
   319                           tblptru	equ	0xFF8
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           
   323                           	psect	cstackBANK0
   324  000080                     __pcstackBANK0:
   325                           	opt stack 0
   326  000080                     printf@idx:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0x0
   330  000080                     	ds	1
   331  000081                     printf@ap:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x1
   335  000081                     	ds	2
   336  000083                     printf@prec:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x3
   340  000083                     	ds	1
   341  000084                     printf@val:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x4
   345  000084                     	ds	2
   346  000086                     printf@flag:
   347                           	opt stack 0
   348                           
   349                           ; 1 bytes @ 0x6
   350  000086                     	ds	1
   351  000087                     printf@width:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x7
   355  000087                     	ds	2
   356  000089                     printf@c:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x9
   360  000089                     	ds	1
   361                           tblptru	equ	0xFF8
   362                           postinc0	equ	0xFEE
   363                           wreg	equ	0xFE8
   364                           
   365                           	psect	cstackCOMRAM
   366  000001                     __pcstackCOMRAM:
   367                           	opt stack 0
   368  000001                     ??i2_isdigit:
   369  000001                     ?i2___wmul:
   370                           	opt stack 0
   371  000001                     ?i2___lwdiv:
   372                           	opt stack 0
   373  000001                     i2lcdNibble@temp:
   374                           	opt stack 0
   375  000001                     i2___wmul@multiplier:
   376                           	opt stack 0
   377  000001                     i2___lwdiv@dividend:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x0
   381  000001                     	ds	1
   382  000002                     i2lcdNibble@data:
   383                           	opt stack 0
   384  000002                     i2_isdigit$506:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x1
   388  000002                     	ds	1
   389  000003                     i2lcdInst@data:
   390                           	opt stack 0
   391  000003                     i2putch@data:
   392                           	opt stack 0
   393  000003                     i2isdigit@c:
   394                           	opt stack 0
   395  000003                     i2___wmul@multiplicand:
   396                           	opt stack 0
   397  000003                     i2___lwdiv@divisor:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x2
   401  000003                     	ds	2
   402  000005                     i2___wmul@product:
   403                           	opt stack 0
   404  000005                     i2___lwdiv@quotient:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x4
   408  000005                     	ds	2
   409  000007                     i2___lwdiv@counter:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x6
   413  000007                     	ds	1
   414  000008                     ?i2___lwmod:
   415                           	opt stack 0
   416  000008                     i2___lwmod@dividend:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x7
   420  000008                     	ds	2
   421  00000A                     i2___lwmod@divisor:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x9
   425  00000A                     	ds	2
   426  00000C                     i2___lwmod@counter:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0xB
   430  00000C                     	ds	1
   431  00000D                     ?i2_printf:
   432                           	opt stack 0
   433  00000D                     i2printf@f:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0xC
   437  00000D                     	ds	2
   438  00000F                     ??i2_printf:
   439                           
   440                           ; 1 bytes @ 0xE
   441  00000F                     	ds	4
   442  000013                     i2printf@idx:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0x12
   446  000013                     	ds	1
   447  000014                     i2printf@ap:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x13
   451  000014                     	ds	2
   452  000016                     i2printf@prec:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x15
   456  000016                     	ds	1
   457  000017                     i2printf@val:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x16
   461  000017                     	ds	2
   462  000019                     i2printf@flag:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x18
   466  000019                     	ds	1
   467  00001A                     i2printf@width:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0x19
   471  00001A                     	ds	2
   472  00001C                     i2printf@c:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x1B
   476  00001C                     	ds	1
   477  00001D                     ??_isr:
   478                           
   479                           ; 1 bytes @ 0x1C
   480  00001D                     	ds	15
   481  00002C                     isr@i:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x2B
   485  00002C                     	ds	1
   486  00002D                     ??_isdigit:
   487  00002D                     ??_I2C_Master_Wait:
   488  00002D                     ?___wmul:
   489                           	opt stack 0
   490  00002D                     ?___lwdiv:
   491                           	opt stack 0
   492  00002D                     ?___lldiv:
   493                           	opt stack 0
   494  00002D                     lcdNibble@temp:
   495                           	opt stack 0
   496  00002D                     ___wmul@multiplier:
   497                           	opt stack 0
   498  00002D                     ___lwdiv@dividend:
   499                           	opt stack 0
   500  00002D                     ___lldiv@dividend:
   501                           	opt stack 0
   502                           
   503                           ; 4 bytes @ 0x2C
   504  00002D                     	ds	1
   505  00002E                     I2C_Master_Read@a:
   506                           	opt stack 0
   507  00002E                     lcdNibble@data:
   508                           	opt stack 0
   509  00002E                     _isdigit$506:
   510                           	opt stack 0
   511  00002E                     I2C_Master_Write@d:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x2D
   515  00002E                     	ds	1
   516  00002F                     I2C_Master_Read@temp:
   517                           	opt stack 0
   518  00002F                     lcdInst@data:
   519                           	opt stack 0
   520  00002F                     putch@data:
   521                           	opt stack 0
   522  00002F                     isdigit@c:
   523                           	opt stack 0
   524  00002F                     ___wmul@multiplicand:
   525                           	opt stack 0
   526  00002F                     ___lwdiv@divisor:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x2E
   530  00002F                     	ds	1
   531  000030                     ??_initLCD:
   532                           
   533                           ; 1 bytes @ 0x2F
   534  000030                     	ds	1
   535  000031                     ___lwdiv@counter:
   536                           	opt stack 0
   537  000031                     ___wmul@product:
   538                           	opt stack 0
   539  000031                     ___lldiv@divisor:
   540                           	opt stack 0
   541                           
   542                           ; 4 bytes @ 0x30
   543  000031                     	ds	1
   544  000032                     ___lwdiv@quotient:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x31
   548  000032                     	ds	2
   549  000034                     ?___lwmod:
   550                           	opt stack 0
   551  000034                     ___lwmod@dividend:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x33
   555  000034                     	ds	1
   556  000035                     ___lldiv@quotient:
   557                           	opt stack 0
   558                           
   559                           ; 4 bytes @ 0x34
   560  000035                     	ds	1
   561  000036                     ___lwmod@divisor:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x35
   565  000036                     	ds	2
   566  000038                     ___lwmod@counter:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x37
   570  000038                     	ds	1
   571  000039                     ?_printf:
   572                           	opt stack 0
   573  000039                     ___lldiv@counter:
   574                           	opt stack 0
   575  000039                     printf@f:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x38
   579  000039                     	ds	1
   580  00003A                     I2C_Master_Init@c:
   581                           	opt stack 0
   582                           
   583                           ; 4 bytes @ 0x39
   584  00003A                     	ds	4
   585  00003E                     ??_I2C_Master_Init:
   586                           
   587                           ; 1 bytes @ 0x3D
   588  00003E                     	ds	3
   589  000041                     ??_printf:
   590                           
   591                           ; 1 bytes @ 0x40
   592  000041                     	ds	4
   593  000045                     date_time@i:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x44
   597  000045                     	ds	1
   598  000046                     ??_main:
   599                           
   600                           ; 1 bytes @ 0x45
   601  000046                     	ds	2
   602                           tblptru	equ	0xFF8
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           
   606 ;;
   607 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   608 ;;
   609 ;; *************** function _main *****************
   610 ;; Defined at:
   611 ;;		line 39 in file "main.c"
   612 ;; Parameters:    Size  Location     Type
   613 ;;		None
   614 ;; Auto vars:     Size  Location     Type
   615 ;;		None
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   627 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   628 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   629 ;;Total ram usage:        2 bytes
   630 ;; Hardware stack levels required when called:    8
   631 ;; This function calls:
   632 ;;		_I2C_Master_Init
   633 ;;		_bottle_count
   634 ;;		_bottle_time
   635 ;;		_date_time
   636 ;;		_initLCD
   637 ;;		_standby
   638 ;; This function is called by:
   639 ;;		Startup code after reset
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           	psect	text0
   644  0018AA                     __ptext0:
   645                           	opt stack 0
   646  0018AA                     _main:
   647                           	opt stack 23
   648                           
   649                           ;main.c: 43: TRISA = 0xFF;
   650                           
   651                           ;incstack = 0
   652  0018AA  6892               	setf	3986,c	;volatile
   653                           
   654                           ;main.c: 44: TRISB = 0xFF;
   655  0018AC  6893               	setf	3987,c	;volatile
   656                           
   657                           ;main.c: 45: TRISC = 0x00;
   658  0018AE  0E00               	movlw	0
   659  0018B0  6E94               	movwf	3988,c	;volatile
   660                           
   661                           ;main.c: 46: TRISD = 0x00;
   662  0018B2  0E00               	movlw	0
   663  0018B4  6E95               	movwf	3989,c	;volatile
   664                           
   665                           ;main.c: 47: TRISE = 0x00;
   666  0018B6  0E00               	movlw	0
   667  0018B8  6E96               	movwf	3990,c	;volatile
   668                           
   669                           ;main.c: 49: LATA = 0x00;
   670  0018BA  0E00               	movlw	0
   671  0018BC  6E89               	movwf	3977,c	;volatile
   672                           
   673                           ;main.c: 50: LATB = 0x00;
   674  0018BE  0E00               	movlw	0
   675  0018C0  6E8A               	movwf	3978,c	;volatile
   676                           
   677                           ;main.c: 51: LATC = 0x00;
   678  0018C2  0E00               	movlw	0
   679  0018C4  6E8B               	movwf	3979,c	;volatile
   680                           
   681                           ;main.c: 52: LATD = 0x00;
   682  0018C6  0E00               	movlw	0
   683  0018C8  6E8C               	movwf	3980,c	;volatile
   684                           
   685                           ;main.c: 53: LATE = 0x00;
   686  0018CA  0E00               	movlw	0
   687  0018CC  6E8D               	movwf	3981,c	;volatile
   688                           
   689                           ;main.c: 55: ADCON0 = 0x00;
   690  0018CE  0E00               	movlw	0
   691  0018D0  6EC2               	movwf	4034,c	;volatile
   692                           
   693                           ;main.c: 56: ADCON1 = 0xFF;
   694  0018D2  68C1               	setf	4033,c	;volatile
   695                           
   696                           ;main.c: 58: INT1IE = 1;
   697  0018D4  86F0               	bsf	intcon3,3,c	;volatile
   698                           
   699                           ;main.c: 60: nRBPU = 0;
   700  0018D6  9EF1               	bcf	intcon2,7,c	;volatile
   701                           
   702                           ;main.c: 62: initLCD();
   703  0018D8  ECAF  F00D         	call	_initLCD	;wreg free
   704                           
   705                           ;main.c: 63: I2C_Master_Init(10000);
   706  0018DC  0E10               	movlw	16
   707  0018DE  6E3A               	movwf	I2C_Master_Init@c,c
   708  0018E0  0E27               	movlw	39
   709  0018E2  6E3B               	movwf	I2C_Master_Init@c+1,c
   710  0018E4  0E00               	movlw	0
   711  0018E6  6E3C               	movwf	I2C_Master_Init@c+2,c
   712  0018E8  0E00               	movlw	0
   713  0018EA  6E3D               	movwf	I2C_Master_Init@c+3,c
   714  0018EC  ECE2  F00C         	call	_I2C_Master_Init	;wreg free
   715                           
   716                           ;main.c: 67: (INTCONbits.GIE = 1);
   717  0018F0  8EF2               	bsf	intcon,7,c	;volatile
   718                           
   719                           ;main.c: 69: curr_state = STANDBY;
   720  0018F2  0E00               	movlw	0
   721  0018F4  6E4F               	movwf	_curr_state,c
   722                           
   723                           ;main.c: 72: switch(curr_state){
   724                           
   725                           ;main.c: 71: while(1){
   726  0018F6  D00C               	goto	l2324
   727  0018F8                     l2314:
   728                           
   729                           ;main.c: 74: standby();
   730  0018F8  EC17  F00E         	call	_standby	;wreg free
   731                           
   732                           ;main.c: 75: break;
   733  0018FC  D016               	goto	l2326
   734  0018FE                     l2316:
   735                           
   736                           ;main.c: 77: date_time();
   737  0018FE  ECFE  F00B         	call	_date_time	;wreg free
   738                           
   739                           ;main.c: 78: break;
   740  001902  D013               	goto	l2326
   741  001904                     l2318:
   742                           
   743                           ;main.c: 80: bottle_count();
   744  001904  ECC0  F00E         	call	_bottle_count	;wreg free
   745                           
   746                           ;main.c: 81: break;
   747  001908  D010               	goto	l2326
   748  00190A                     l2320:
   749                           
   750                           ;main.c: 83: bottle_time();
   751  00190A  ECBF  F00E         	call	_bottle_time	;wreg free
   752                           
   753                           ;main.c: 85: }
   754                           
   755                           ;main.c: 84: break;
   756  00190E  D00D               	goto	l2326
   757  001910                     l2324:
   758  001910  504F               	movf	_curr_state,w,c
   759                           
   760                           ; Switch size 1, requested type "space"
   761                           ; Number of cases is 4, Range of values is 0 to 3
   762                           ; switch strategies available:
   763                           ; Name         Instructions Cycles
   764                           ; simple_byte           13     7 (average)
   765                           ;	Chosen strategy is simple_byte
   766  001912  0A00               	xorlw	0	; case 0
   767  001914  B4D8               	btfsc	status,2,c
   768  001916  D7F0               	goto	l2314
   769  001918  0A01               	xorlw	1	; case 1
   770  00191A  B4D8               	btfsc	status,2,c
   771  00191C  D7F0               	goto	l2316
   772  00191E  0A03               	xorlw	3	; case 2
   773  001920  B4D8               	btfsc	status,2,c
   774  001922  D7F0               	goto	l2318
   775  001924  0A01               	xorlw	1	; case 3
   776  001926  B4D8               	btfsc	status,2,c
   777  001928  D7F0               	goto	l2320
   778  00192A                     l2326:
   779                           
   780                           ;main.c: 86: _delay((unsigned long)((200)*(10000000/4000.0)));
   781  00192A  0E03               	movlw	3
   782  00192C  6E47               	movwf	(??_main+1)& (0+255),c
   783  00192E  0E8A               	movlw	138
   784  001930  6E46               	movwf	??_main& (0+255),c
   785  001932  0E56               	movlw	86
   786  001934                     u1857:
   787  001934  2EE8               	decfsz	wreg,f,c
   788  001936  D7FE               	bra	u1857
   789  001938  2E46               	decfsz	??_main& (0+255),f,c
   790  00193A  D7FC               	bra	u1857
   791  00193C  2E47               	decfsz	(??_main+1)& (0+255),f,c
   792  00193E  D7FA               	bra	u1857
   793  001940  D7E7               	goto	l2324
   794  001942                     __end_of_main:
   795                           	opt stack 0
   796                           tblptru	equ	0xFF8
   797                           intcon	equ	0xFF2
   798                           intcon2	equ	0xFF1
   799                           intcon3	equ	0xFF0
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           status	equ	0xFD8
   803                           
   804 ;; *************** function _standby *****************
   805 ;; Defined at:
   806 ;;		line 117 in file "main.c"
   807 ;; Parameters:    Size  Location     Type
   808 ;;		None
   809 ;; Auto vars:     Size  Location     Type
   810 ;;		None
   811 ;; Return value:  Size  Location     Type
   812 ;;                  1    wreg      void 
   813 ;; Registers used:
   814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   824 ;;Total ram usage:        0 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; Hardware stack levels required when called:    7
   827 ;; This function calls:
   828 ;;		_lcdInst
   829 ;;		_printf
   830 ;; This function is called by:
   831 ;;		_main
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           	psect	text1
   836  001C2E                     __ptext1:
   837                           	opt stack 0
   838  001C2E                     _standby:
   839                           	opt stack 23
   840                           
   841                           ;main.c: 118: lcdInst(0b10000000);
   842                           
   843                           ;incstack = 0
   844  001C2E  0E80               	movlw	128
   845  001C30  ECA0  F00E         	call	_lcdInst
   846                           
   847                           ;main.c: 119: printf("standby         ");
   848  001C34  0E6A               	movlw	low STR_2
   849  001C36  6E39               	movwf	printf@f,c
   850  001C38  0E10               	movlw	high STR_2
   851  001C3A  6E3A               	movwf	printf@f+1,c
   852  001C3C  EC4C  F008         	call	_printf	;wreg free
   853                           
   854                           ;main.c: 120: lcdInst(0b11000000);
   855  001C40  0EC0               	movlw	192
   856  001C42  ECA0  F00E         	call	_lcdInst
   857                           
   858                           ;main.c: 121: printf("PORTB: %d   ", PORTB);
   859  001C46  0E89               	movlw	low STR_3
   860  001C48  6E39               	movwf	printf@f,c
   861  001C4A  0E10               	movlw	high STR_3
   862  001C4C  6E3A               	movwf	printf@f+1,c
   863  001C4E  CF81 F03B          	movff	3969,?_printf+2	;volatile
   864  001C52  6A3C               	clrf	?_printf+3,c
   865  001C54  EC4C  F008         	call	_printf	;wreg free
   866  001C58  0012               	return	
   867  001C5A                     __end_of_standby:
   868                           	opt stack 0
   869                           tblptru	equ	0xFF8
   870                           intcon	equ	0xFF2
   871                           intcon2	equ	0xFF1
   872                           intcon3	equ	0xFF0
   873                           postinc0	equ	0xFEE
   874                           wreg	equ	0xFE8
   875                           status	equ	0xFD8
   876                           
   877 ;; *************** function _initLCD *****************
   878 ;; Defined at:
   879 ;;		line 14 in file "lcd.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;		None
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2, status,0, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   896 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   897 ;;Total ram usage:        1 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; Hardware stack levels required when called:    6
   900 ;; This function calls:
   901 ;;		_lcdInst
   902 ;; This function is called by:
   903 ;;		_main
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907                           	psect	text2
   908  001B5E                     __ptext2:
   909                           	opt stack 0
   910  001B5E                     _initLCD:
   911                           	opt stack 24
   912                           
   913                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
   914                           
   915                           ;incstack = 0
   916  001B5E  0E31               	movlw	49
   917  001B60  6E30               	movwf	??_initLCD& (0+255),c
   918  001B62  0EB2               	movlw	178
   919  001B64                     u1867:
   920  001B64  2EE8               	decfsz	wreg,f,c
   921  001B66  D7FE               	bra	u1867
   922  001B68  2E30               	decfsz	??_initLCD& (0+255),f,c
   923  001B6A  D7FC               	bra	u1867
   924  001B6C  D000               	nop2	
   925                           
   926                           ;lcd.c: 16: lcdInst(0b00110011);
   927  001B6E  0E33               	movlw	51
   928  001B70  ECA0  F00E         	call	_lcdInst
   929                           
   930                           ;lcd.c: 17: lcdInst(0b00110011);
   931  001B74  0E33               	movlw	51
   932  001B76  ECA0  F00E         	call	_lcdInst
   933                           
   934                           ;lcd.c: 18: lcdInst(0b00110010);
   935  001B7A  0E32               	movlw	50
   936  001B7C  ECA0  F00E         	call	_lcdInst
   937                           
   938                           ;lcd.c: 19: lcdInst(0b00101000);
   939  001B80  0E28               	movlw	40
   940  001B82  ECA0  F00E         	call	_lcdInst
   941                           
   942                           ;lcd.c: 20: lcdInst(0b00001111);
   943  001B86  0E0F               	movlw	15
   944  001B88  ECA0  F00E         	call	_lcdInst
   945                           
   946                           ;lcd.c: 21: lcdInst(0b00000110);
   947  001B8C  0E06               	movlw	6
   948  001B8E  ECA0  F00E         	call	_lcdInst
   949                           
   950                           ;lcd.c: 22: lcdInst(0b00000001);
   951  001B92  0E01               	movlw	1
   952  001B94  ECA0  F00E         	call	_lcdInst
   953                           
   954                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
   955  001B98  0E31               	movlw	49
   956  001B9A  6E30               	movwf	??_initLCD& (0+255),c
   957  001B9C  0EB2               	movlw	178
   958  001B9E                     u1877:
   959  001B9E  2EE8               	decfsz	wreg,f,c
   960  001BA0  D7FE               	bra	u1877
   961  001BA2  2E30               	decfsz	??_initLCD& (0+255),f,c
   962  001BA4  D7FC               	bra	u1877
   963  001BA6  D000               	nop2	
   964  001BA8  0012               	return		;funcret
   965  001BAA                     __end_of_initLCD:
   966                           	opt stack 0
   967                           tblptru	equ	0xFF8
   968                           intcon	equ	0xFF2
   969                           intcon2	equ	0xFF1
   970                           intcon3	equ	0xFF0
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           status	equ	0xFD8
   974                           
   975 ;; *************** function _date_time *****************
   976 ;; Defined at:
   977 ;;		line 135 in file "main.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;		None
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  i               1   68[COMRAM] unsigned char 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   994 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   995 ;;Total ram usage:        1 bytes
   996 ;; Hardware stack levels used:    1
   997 ;; Hardware stack levels required when called:    7
   998 ;; This function calls:
   999 ;;		_I2C_Master_Read
  1000 ;;		_I2C_Master_Start
  1001 ;;		_I2C_Master_Stop
  1002 ;;		_I2C_Master_Write
  1003 ;;		_lcdInst
  1004 ;;		_printf
  1005 ;; This function is called by:
  1006 ;;		_main
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text3
  1011  0017FC                     __ptext3:
  1012                           	opt stack 0
  1013  0017FC                     _date_time:
  1014                           	opt stack 23
  1015                           
  1016                           ;main.c: 137: I2C_Master_Start();
  1017                           
  1018                           ;incstack = 0
  1019  0017FC  ECBB  F00E         	call	_I2C_Master_Start	;wreg free
  1020                           
  1021                           ;main.c: 138: I2C_Master_Write(0b11010000);
  1022  001800  0E00               	movlw	0
  1023  001802  6E2F               	movwf	I2C_Master_Write@d+1,c
  1024  001804  0ED0               	movlw	208
  1025  001806  6E2E               	movwf	I2C_Master_Write@d,c
  1026  001808  ECB2  F00E         	call	_I2C_Master_Write	;wreg free
  1027                           
  1028                           ;main.c: 139: I2C_Master_Write(0x00);
  1029  00180C  0E00               	movlw	0
  1030  00180E  6E2F               	movwf	I2C_Master_Write@d+1,c
  1031  001810  0E00               	movlw	0
  1032  001812  6E2E               	movwf	I2C_Master_Write@d,c
  1033  001814  ECB2  F00E         	call	_I2C_Master_Write	;wreg free
  1034                           
  1035                           ;main.c: 140: I2C_Master_Stop();
  1036  001818  ECB7  F00E         	call	_I2C_Master_Stop	;wreg free
  1037                           
  1038                           ;main.c: 143: I2C_Master_Start();
  1039  00181C  ECBB  F00E         	call	_I2C_Master_Start	;wreg free
  1040                           
  1041                           ;main.c: 144: I2C_Master_Write(0b11010001);
  1042  001820  0E00               	movlw	0
  1043  001822  6E2F               	movwf	I2C_Master_Write@d+1,c
  1044  001824  0ED1               	movlw	209
  1045  001826  6E2E               	movwf	I2C_Master_Write@d,c
  1046  001828  ECB2  F00E         	call	_I2C_Master_Write	;wreg free
  1047                           
  1048                           ;main.c: 145: for(unsigned char i=0;i<0x06;i++){
  1049  00182C  0E00               	movlw	0
  1050  00182E  6E45               	movwf	date_time@i,c
  1051  001830                     l2280:
  1052  001830  0E05               	movlw	5
  1053  001832  6445               	cpfsgt	date_time@i,c
  1054  001834  D001               	goto	l2284
  1055  001836  D00E               	goto	l2290
  1056  001838                     l2284:
  1057                           
  1058                           ;main.c: 146: time[i] = I2C_Master_Read(1);
  1059  001838  5045               	movf	date_time@i,w,c
  1060  00183A  0D01               	mullw	1
  1061  00183C  0E48               	movlw	low _time
  1062  00183E  24F3               	addwf	prodl,w,c
  1063  001840  6ED9               	movwf	fsr2l,c
  1064  001842  0E00               	movlw	high _time
  1065  001844  20F4               	addwfc	prodh,w,c
  1066  001846  6EDA               	movwf	fsr2h,c
  1067  001848  0E01               	movlw	1
  1068  00184A  EC40  F00E         	call	_I2C_Master_Read
  1069  00184E  6EDF               	movwf	indf2,c
  1070  001850  2A45               	incf	date_time@i,f,c
  1071  001852  D7EE               	goto	l2280
  1072  001854                     l2290:
  1073                           
  1074                           ;main.c: 147: }
  1075                           ;main.c: 148: time[6] = I2C_Master_Read(0);
  1076  001854  0E00               	movlw	0
  1077  001856  EC40  F00E         	call	_I2C_Master_Read
  1078  00185A  6E4E               	movwf	_time+6,c
  1079                           
  1080                           ;main.c: 149: I2C_Master_Stop();
  1081  00185C  ECB7  F00E         	call	_I2C_Master_Stop	;wreg free
  1082                           
  1083                           ;main.c: 152: lcdInst(0b10000000);
  1084  001860  0E80               	movlw	128
  1085  001862  ECA0  F00E         	call	_lcdInst
  1086                           
  1087                           ;main.c: 153: printf("%02x/%02x/%02x        ", time[5],time[4],time[6]);
  1088  001866  0E2B               	movlw	low STR_4
  1089  001868  6E39               	movwf	printf@f,c
  1090  00186A  0E10               	movlw	high STR_4
  1091  00186C  6E3A               	movwf	printf@f+1,c
  1092  00186E  C04D  F03B         	movff	_time+5,?_printf+2
  1093  001872  6A3C               	clrf	?_printf+3,c
  1094  001874  C04C  F03D         	movff	_time+4,?_printf+4
  1095  001878  6A3E               	clrf	?_printf+5,c
  1096  00187A  C04E  F03F         	movff	_time+6,?_printf+6
  1097  00187E  6A40               	clrf	?_printf+7,c
  1098  001880  EC4C  F008         	call	_printf	;wreg free
  1099                           
  1100                           ;main.c: 154: lcdInst(0b11000000);
  1101  001884  0EC0               	movlw	192
  1102  001886  ECA0  F00E         	call	_lcdInst
  1103                           
  1104                           ;main.c: 155: printf("%02x:%02x:%02x        ", time[2],time[1],time[0]);
  1105  00188A  0E42               	movlw	low STR_5
  1106  00188C  6E39               	movwf	printf@f,c
  1107  00188E  0E10               	movlw	high STR_5
  1108  001890  6E3A               	movwf	printf@f+1,c
  1109  001892  C04A  F03B         	movff	_time+2,?_printf+2
  1110  001896  6A3C               	clrf	?_printf+3,c
  1111  001898  C049  F03D         	movff	_time+1,?_printf+4
  1112  00189C  6A3E               	clrf	?_printf+5,c
  1113  00189E  C048  F03F         	movff	_time,?_printf+6
  1114  0018A2  6A40               	clrf	?_printf+7,c
  1115  0018A4  EC4C  F008         	call	_printf	;wreg free
  1116  0018A8  0012               	return	
  1117  0018AA                     __end_of_date_time:
  1118                           	opt stack 0
  1119                           tblptru	equ	0xFF8
  1120                           prodh	equ	0xFF4
  1121                           prodl	equ	0xFF3
  1122                           intcon	equ	0xFF2
  1123                           intcon2	equ	0xFF1
  1124                           intcon3	equ	0xFF0
  1125                           postinc0	equ	0xFEE
  1126                           wreg	equ	0xFE8
  1127                           indf2	equ	0xFDF
  1128                           fsr2h	equ	0xFDA
  1129                           fsr2l	equ	0xFD9
  1130                           status	equ	0xFD8
  1131                           
  1132 ;; *************** function _printf *****************
  1133 ;; Defined at:
  1134 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;  f               2   56[COMRAM] PTR const unsigned char 
  1137 ;;		 -> STR_5(23), STR_4(23), STR_3(13), STR_2(17), 
  1138 ;;		 -> STR_1(14), 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  idx             1    0[BANK0 ] unsigned char 
  1141 ;;  tmpval          4    0        struct .
  1142 ;;  cp              3    0        PTR const unsigned char 
  1143 ;;  width           2    7[BANK0 ] int 
  1144 ;;  val             2    4[BANK0 ] unsigned int 
  1145 ;;  ap              2    1[BANK0 ] PTR void [1]
  1146 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1147 ;;  len             2    0        unsigned int 
  1148 ;;  c               1    9[BANK0 ] char 
  1149 ;;  flag            1    6[BANK0 ] unsigned char 
  1150 ;;  prec            1    3[BANK0 ] char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  2   56[COMRAM] int 
  1153 ;; Registers used:
  1154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1160 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1161 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1162 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1163 ;;      Totals:        12      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1164 ;;Total ram usage:       22 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    6
  1167 ;; This function calls:
  1168 ;;		___lwdiv
  1169 ;;		___lwmod
  1170 ;;		___wmul
  1171 ;;		_isdigit
  1172 ;;		_putch
  1173 ;; This function is called by:
  1174 ;;		_standby
  1175 ;;		_date_time
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179                           	psect	text4
  1180  001098                     __ptext4:
  1181                           	opt stack 0
  1182  001098                     _printf:
  1183                           	opt stack 23
  1184                           
  1185                           ;doprnt.c: 466: va_list ap;
  1186                           ;doprnt.c: 499: signed char c;
  1187                           ;doprnt.c: 501: int width;
  1188                           ;doprnt.c: 506: signed char prec;
  1189                           ;doprnt.c: 508: unsigned char flag;
  1190                           ;doprnt.c: 523: union {
  1191                           ;doprnt.c: 524: unsigned long vd;
  1192                           ;doprnt.c: 525: double integ;
  1193                           ;doprnt.c: 526: } tmpval;
  1194                           ;doprnt.c: 528: unsigned int val;
  1195                           ;doprnt.c: 529: unsigned len;
  1196                           ;doprnt.c: 530: const char * cp;
  1197                           ;doprnt.c: 533: *ap = __va_start();
  1198                           
  1199                           ;incstack = 0
  1200  001098  0E3B               	movlw	low (?_printf+2)
  1201  00109A  0100               	movlb	0	; () banked
  1202  00109C  6F81               	movwf	printf@ap& (0+255),b
  1203  00109E  0E00               	movlw	high (?_printf+2)
  1204  0010A0  0100               	movlb	0	; () banked
  1205  0010A2  6F82               	movwf	(printf@ap+1)& (0+255),b
  1206                           
  1207                           ;doprnt.c: 536: while(c = *f++) {
  1208  0010A4  D1AF               	goto	l2248
  1209  0010A6                     l2122:
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;doprnt.c: 538: if(c != '%')
  1213  0010A6  0E25               	movlw	37
  1214  0010A8  0100               	movlb	0	; () banked
  1215  0010AA  1989               	xorwf	printf@c& (0+255),w,b
  1216  0010AC  B4D8               	btfsc	status,2,c
  1217  0010AE  D005               	goto	l2126
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;doprnt.c: 540: {
  1221                           ;doprnt.c: 541: (putch(c) );
  1222  0010B0  0100               	movlb	0	; () banked
  1223  0010B2  5189               	movf	printf@c& (0+255),w,b
  1224  0010B4  EC9A  F00E         	call	_putch
  1225                           
  1226                           ;doprnt.c: 542: continue;
  1227  0010B8  D1A5               	goto	l2248
  1228  0010BA                     l2126:
  1229                           
  1230                           ;doprnt.c: 543: }
  1231                           ;doprnt.c: 546: width = 0;
  1232  0010BA  0E00               	movlw	0
  1233  0010BC  0100               	movlb	0	; () banked
  1234  0010BE  6F88               	movwf	(printf@width+1)& (0+255),b
  1235  0010C0  0E00               	movlw	0
  1236  0010C2  6F87               	movwf	printf@width& (0+255),b
  1237                           
  1238                           ;doprnt.c: 548: flag = 0;
  1239  0010C4  0E00               	movlw	0
  1240  0010C6  0100               	movlb	0	; () banked
  1241  0010C8  6F86               	movwf	printf@flag& (0+255),b
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;doprnt.c: 551: switch(*f) {
  1245                           
  1246                           ;doprnt.c: 550: for(;;) {
  1247  0010CA  D004               	goto	l2132
  1248  0010CC                     l2128:
  1249                           
  1250                           ;doprnt.c: 580: flag |= 0x04;
  1251  0010CC  0100               	movlb	0	; () banked
  1252  0010CE  8586               	bsf	printf@flag& (0+255),2,b
  1253                           
  1254                           ;doprnt.c: 581: f++;
  1255  0010D0  4A39               	infsnz	printf@f,f,c
  1256  0010D2  2A3A               	incf	printf@f+1,f,c
  1257  0010D4                     l2132:
  1258  0010D4  C039  FFF6         	movff	printf@f,tblptrl
  1259  0010D8  C03A  FFF7         	movff	printf@f+1,tblptrh
  1260  0010DC                     	if	0	;tblptru may be non-zero
  1261  0010DC                     	endif
  1262  0010DC                     	if	0	;tblptru may be non-zero
  1263  0010DC                     	endif
  1264  0010DC  0008               	tblrd		*
  1265  0010DE  50F5               	movf	tablat,w,c
  1266                           
  1267                           ; Switch size 1, requested type "space"
  1268                           ; Number of cases is 1, Range of values is 48 to 48
  1269                           ; switch strategies available:
  1270                           ; Name         Instructions Cycles
  1271                           ; simple_byte            4     3 (average)
  1272                           ;	Chosen strategy is simple_byte
  1273  0010E0  0A30               	xorlw	48	; case 48
  1274  0010E2  B4D8               	btfsc	status,2,c
  1275  0010E4  D7F3               	goto	l2128
  1276                           
  1277                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1278                           
  1279                           ;doprnt.c: 586: }
  1280                           
  1281                           ;doprnt.c: 585: break;
  1282  0010E6  C039  FFF6         	movff	printf@f,tblptrl
  1283  0010EA  C03A  FFF7         	movff	printf@f+1,tblptrh
  1284  0010EE                     	if	0	;tblptru may be non-zero
  1285  0010EE                     	endif
  1286  0010EE                     	if	0	;tblptru may be non-zero
  1287  0010EE                     	endif
  1288  0010EE  0008               	tblrd		*
  1289  0010F0  50F5               	movf	tablat,w,c
  1290  0010F2  EC66  F00E         	call	_isdigit
  1291  0010F6  A0D8               	btfss	status,0,c
  1292  0010F8  D039               	goto	l2150
  1293                           
  1294                           ;doprnt.c: 598: width = 0;
  1295  0010FA  0E00               	movlw	0
  1296  0010FC  0100               	movlb	0	; () banked
  1297  0010FE  6F88               	movwf	(printf@width+1)& (0+255),b
  1298  001100  0E00               	movlw	0
  1299  001102  6F87               	movwf	printf@width& (0+255),b
  1300  001104                     l2138:
  1301                           
  1302                           ;doprnt.c: 600: width *= 10;
  1303  001104  C087  F02D         	movff	printf@width,___wmul@multiplier
  1304  001108  C088  F02E         	movff	printf@width+1,___wmul@multiplier+1
  1305  00110C  0E00               	movlw	0
  1306  00110E  6E30               	movwf	___wmul@multiplicand+1,c
  1307  001110  0E0A               	movlw	10
  1308  001112  6E2F               	movwf	___wmul@multiplicand,c
  1309  001114  EC2D  F00E         	call	___wmul	;wreg free
  1310  001118  C02D  F087         	movff	?___wmul,printf@width
  1311  00111C  C02E  F088         	movff	?___wmul+1,printf@width+1
  1312                           
  1313                           ;doprnt.c: 601: width += *f++ - '0';
  1314  001120  0ED0               	movlw	208
  1315  001122  6E41               	movwf	??_printf& (0+255),c
  1316  001124  0EFF               	movlw	255
  1317  001126  6E42               	movwf	(??_printf+1)& (0+255),c
  1318  001128  C039  FFF6         	movff	printf@f,tblptrl
  1319  00112C  C03A  FFF7         	movff	printf@f+1,tblptrh
  1320  001130                     	if	0	;tblptru may be non-zero
  1321  001130                     	endif
  1322  001130                     	if	0	;tblptru may be non-zero
  1323  001130                     	endif
  1324  001130  0008               	tblrd		*
  1325  001132  50F5               	movf	tablat,w,c
  1326  001134  6E43               	movwf	(??_printf+2)& (0+255),c
  1327  001136  6A44               	clrf	(??_printf+3)& (0+255),c
  1328  001138  5041               	movf	??_printf,w,c
  1329  00113A  2643               	addwf	??_printf+2,f,c
  1330  00113C  5042               	movf	??_printf+1,w,c
  1331  00113E  2244               	addwfc	??_printf+3,f,c
  1332  001140  5043               	movf	??_printf+2,w,c
  1333  001142  0100               	movlb	0	; () banked
  1334  001144  2787               	addwf	printf@width& (0+255),f,b
  1335  001146  5044               	movf	??_printf+3,w,c
  1336  001148  0100               	movlb	0	; () banked
  1337  00114A  2388               	addwfc	(printf@width+1)& (0+255),f,b
  1338                           
  1339                           ; BSR set to: 0
  1340  00114C  4A39               	infsnz	printf@f,f,c
  1341  00114E  2A3A               	incf	printf@f+1,f,c
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1345  001150  C039  FFF6         	movff	printf@f,tblptrl
  1346  001154  C03A  FFF7         	movff	printf@f+1,tblptrh
  1347  001158                     	if	0	;tblptru may be non-zero
  1348  001158                     	endif
  1349  001158                     	if	0	;tblptru may be non-zero
  1350  001158                     	endif
  1351  001158  0008               	tblrd		*
  1352  00115A  50F5               	movf	tablat,w,c
  1353  00115C  EC66  F00E         	call	_isdigit
  1354  001160  A0D8               	btfss	status,0,c
  1355  001162  D004               	goto	l2150
  1356  001164  D7CF               	goto	l2138
  1357  001166                     l2146:
  1358                           
  1359                           ;doprnt.c: 721: flag |= 0x80;
  1360  001166  0100               	movlb	0	; () banked
  1361  001168  8F86               	bsf	printf@flag& (0+255),7,b
  1362                           
  1363                           ;doprnt.c: 723: break;
  1364  00116A  D018               	goto	l226
  1365  00116C                     l2150:
  1366  00116C  C039  FFF6         	movff	printf@f,tblptrl
  1367  001170  C03A  FFF7         	movff	printf@f+1,tblptrh
  1368  001174  4A39               	infsnz	printf@f,f,c
  1369  001176  2A3A               	incf	printf@f+1,f,c
  1370  001178                     	if	0	;tblptru may be non-zero
  1371  001178                     	endif
  1372  001178                     	if	0	;tblptru may be non-zero
  1373  001178                     	endif
  1374  001178  0008               	tblrd		*
  1375  00117A  CFF5 F089          	movff	tablat,printf@c
  1376  00117E  0100               	movlb	0	; () banked
  1377  001180  5189               	movf	printf@c& (0+255),w,b
  1378                           
  1379                           ; Switch size 1, requested type "space"
  1380                           ; Number of cases is 4, Range of values is 0 to 120
  1381                           ; switch strategies available:
  1382                           ; Name         Instructions Cycles
  1383                           ; simple_byte           13     7 (average)
  1384                           ;	Chosen strategy is simple_byte
  1385  001182  0A00               	xorlw	0	; case 0
  1386  001184  B4D8               	btfsc	status,2,c
  1387  001186  0012               	return	
  1388  001188  0A64               	xorlw	100	; case 100
  1389  00118A  B4D8               	btfsc	status,2,c
  1390  00118C  D007               	goto	l226
  1391  00118E  0A0D               	xorlw	13	; case 105
  1392  001190  B4D8               	btfsc	status,2,c
  1393  001192  D004               	goto	l226
  1394  001194  0A11               	xorlw	17	; case 120
  1395  001196  B4D8               	btfsc	status,2,c
  1396  001198  D7E6               	goto	l2146
  1397  00119A  D134               	goto	l2248
  1398  00119C                     l226:
  1399                           
  1400                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1401  00119C  0100               	movlb	0	; () banked
  1402  00119E  BF86               	btfsc	printf@flag& (0+255),7,b
  1403  0011A0  D019               	goto	l2162
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;doprnt.c: 1253: {
  1407                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1408  0011A2  C081  FFD9         	movff	printf@ap,fsr2l
  1409  0011A6  C082  FFDA         	movff	printf@ap+1,fsr2h
  1410  0011AA  CFDE F084          	movff	postinc2,printf@val
  1411  0011AE  CFDD F085          	movff	postdec2,printf@val+1
  1412                           
  1413                           ; BSR set to: 0
  1414  0011B2  0E02               	movlw	2
  1415  0011B4  0100               	movlb	0	; () banked
  1416  0011B6  2781               	addwf	printf@ap& (0+255),f,b
  1417  0011B8  0E00               	movlw	0
  1418  0011BA  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;doprnt.c: 1261: if((int)val < 0) {
  1422  0011BC  0100               	movlb	0	; () banked
  1423  0011BE  AF85               	btfss	(printf@val+1)& (0+255),7,b
  1424  0011C0  D053               	goto	l2196
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;doprnt.c: 1262: flag |= 0x03;
  1428  0011C2  0E03               	movlw	3
  1429  0011C4  0100               	movlb	0	; () banked
  1430  0011C6  1386               	iorwf	printf@flag& (0+255),f,b
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;doprnt.c: 1263: val = -val;
  1434  0011C8  0100               	movlb	0	; () banked
  1435  0011CA  6D84               	negf	printf@val& (0+255),b
  1436  0011CC  1F85               	comf	(printf@val+1)& (0+255),f,b
  1437  0011CE  B0D8               	btfsc	status,0,c
  1438  0011D0  2B85               	incf	(printf@val+1)& (0+255),f,b
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;doprnt.c: 1264: }
  1442                           ;doprnt.c: 1266: }
  1443  0011D2  D04A               	goto	l2196
  1444  0011D4                     l2162:
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;doprnt.c: 1268: else
  1448                           ;doprnt.c: 1273: {
  1449                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1450  0011D4  C081  FFD9         	movff	printf@ap,fsr2l
  1451  0011D8  C082  FFDA         	movff	printf@ap+1,fsr2h
  1452  0011DC  CFDE F084          	movff	postinc2,printf@val
  1453  0011E0  CFDD F085          	movff	postdec2,printf@val+1
  1454                           
  1455                           ; BSR set to: 0
  1456  0011E4  0E02               	movlw	2
  1457  0011E6  0100               	movlb	0	; () banked
  1458  0011E8  2781               	addwf	printf@ap& (0+255),f,b
  1459  0011EA  0E00               	movlw	0
  1460  0011EC  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;doprnt.c: 1287: }
  1464                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1465  0011EE  D03C               	goto	l2196
  1466  0011F0                     l2166:
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1470  0011F0  0E01               	movlw	1
  1471  0011F2  0100               	movlb	0	; () banked
  1472  0011F4  6F89               	movwf	printf@c& (0+255),b
  1473  0011F6                     l2168:
  1474                           
  1475                           ; BSR set to: 0
  1476  0011F6  0E05               	movlw	5
  1477  0011F8  0100               	movlb	0	; () banked
  1478  0011FA  1989               	xorwf	printf@c& (0+255),w,b
  1479  0011FC  B4D8               	btfsc	status,2,c
  1480  0011FE  D03D               	goto	l2198
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;doprnt.c: 1306: if(val < dpowers[c])
  1484                           
  1485                           ; BSR set to: 0
  1486                           
  1487                           ; BSR set to: 0
  1488  001200  0100               	movlb	0	; () banked
  1489  001202  5189               	movf	printf@c& (0+255),w,b
  1490  001204  0D02               	mullw	2
  1491  001206  0E12               	movlw	low _dpowers
  1492  001208  24F3               	addwf	prodl,w,c
  1493  00120A  6EF6               	movwf	tblptrl,c
  1494  00120C  0E10               	movlw	high _dpowers
  1495  00120E  20F4               	addwfc	prodh,w,c
  1496  001210  6EF7               	movwf	tblptrh,c
  1497  001212                     	if	0	;There are less than 3 active tblptr bytes
  1498  001212                     	endif
  1499  001212  0009               	tblrd		*+
  1500  001214  50F5               	movf	tablat,w,c
  1501  001216  0100               	movlb	0	; () banked
  1502  001218  5D84               	subwf	printf@val& (0+255),w,b
  1503  00121A  0009               	tblrd		*+
  1504  00121C  50F5               	movf	tablat,w,c
  1505  00121E  0100               	movlb	0	; () banked
  1506  001220  5985               	subwfb	(printf@val+1)& (0+255),w,b
  1507  001222  A0D8               	btfss	status,0,c
  1508  001224  D02A               	goto	l2198
  1509                           
  1510                           ; BSR set to: 0
  1511                           
  1512                           ; BSR set to: 0
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;doprnt.c: 1307: break;
  1516  001226  0100               	movlb	0	; () banked
  1517  001228  2B89               	incf	printf@c& (0+255),f,b
  1518  00122A  D7E5               	goto	l2168
  1519  00122C                     l2180:
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1523  00122C  0E01               	movlw	1
  1524  00122E  0100               	movlb	0	; () banked
  1525  001230  6F89               	movwf	printf@c& (0+255),b
  1526  001232                     l2182:
  1527                           
  1528                           ; BSR set to: 0
  1529  001232  0E04               	movlw	4
  1530  001234  0100               	movlb	0	; () banked
  1531  001236  1989               	xorwf	printf@c& (0+255),w,b
  1532  001238  B4D8               	btfsc	status,2,c
  1533  00123A  D01F               	goto	l2198
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1537                           
  1538                           ; BSR set to: 0
  1539                           
  1540                           ; BSR set to: 0
  1541  00123C  0100               	movlb	0	; () banked
  1542  00123E  5189               	movf	printf@c& (0+255),w,b
  1543  001240  0D02               	mullw	2
  1544  001242  0E1C               	movlw	low _hexpowers
  1545  001244  24F3               	addwf	prodl,w,c
  1546  001246  6EF6               	movwf	tblptrl,c
  1547  001248  0E10               	movlw	high _hexpowers
  1548  00124A  20F4               	addwfc	prodh,w,c
  1549  00124C  6EF7               	movwf	tblptrh,c
  1550  00124E                     	if	0	;There are less than 3 active tblptr bytes
  1551  00124E                     	endif
  1552  00124E  0009               	tblrd		*+
  1553  001250  50F5               	movf	tablat,w,c
  1554  001252  0100               	movlb	0	; () banked
  1555  001254  5D84               	subwf	printf@val& (0+255),w,b
  1556  001256  0009               	tblrd		*+
  1557  001258  50F5               	movf	tablat,w,c
  1558  00125A  0100               	movlb	0	; () banked
  1559  00125C  5985               	subwfb	(printf@val+1)& (0+255),w,b
  1560  00125E  A0D8               	btfss	status,0,c
  1561  001260  D00C               	goto	l2198
  1562                           
  1563                           ; BSR set to: 0
  1564                           
  1565                           ; BSR set to: 0
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;doprnt.c: 1318: break;
  1569  001262  0100               	movlb	0	; () banked
  1570  001264  2B89               	incf	printf@c& (0+255),f,b
  1571  001266  D7E5               	goto	l2182
  1572  001268                     l2196:
  1573                           
  1574                           ; BSR set to: 0
  1575  001268  0100               	movlb	0	; () banked
  1576  00126A  5186               	movf	printf@flag& (0+255),w,b
  1577  00126C  0B80               	andlw	128
  1578                           
  1579                           ; Switch size 1, requested type "space"
  1580                           ; Number of cases is 2, Range of values is 0 to 128
  1581                           ; switch strategies available:
  1582                           ; Name         Instructions Cycles
  1583                           ; simple_byte            7     4 (average)
  1584                           ;	Chosen strategy is simple_byte
  1585  00126E  0A00               	xorlw	0	; case 0
  1586  001270  B4D8               	btfsc	status,2,c
  1587  001272  D7BE               	goto	l2166
  1588  001274  0A80               	xorlw	128	; case 128
  1589  001276  B4D8               	btfsc	status,2,c
  1590  001278  D7D9               	goto	l2180
  1591  00127A                     l2198:
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1595  00127A  0100               	movlb	0	; () banked
  1596  00127C  5187               	movf	printf@width& (0+255),w,b
  1597  00127E  0100               	movlb	0	; () banked
  1598  001280  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1599  001282  B4D8               	btfsc	status,2,c
  1600  001284  D00A               	goto	l2204
  1601                           
  1602                           ; BSR set to: 0
  1603  001286  C086  F041         	movff	printf@flag,??_printf
  1604  00128A  0E03               	movlw	3
  1605  00128C  1641               	andwf	??_printf,f,c
  1606  00128E  B4D8               	btfsc	status,2,c
  1607  001290  D004               	goto	l2204
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;doprnt.c: 1346: width--;
  1611  001292  0100               	movlb	0	; () banked
  1612  001294  0787               	decf	printf@width& (0+255),f,b
  1613  001296  A0D8               	btfss	status,0,c
  1614  001298  0788               	decf	(printf@width+1)& (0+255),f,b
  1615  00129A                     l2204:
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;doprnt.c: 1381: if(width > c)
  1619  00129A  0E80               	movlw	128
  1620  00129C  0100               	movlb	0	; () banked
  1621  00129E  BF89               	btfsc	printf@c& (0+255),7,b
  1622  0012A0  0E7F               	movlw	127
  1623  0012A2  6E41               	movwf	??_printf& (0+255),c
  1624  0012A4  0100               	movlb	0	; () banked
  1625  0012A6  5187               	movf	printf@width& (0+255),w,b
  1626  0012A8  0100               	movlb	0	; () banked
  1627  0012AA  5D89               	subwf	printf@c& (0+255),w,b
  1628  0012AC  0100               	movlb	0	; () banked
  1629  0012AE  5188               	movf	(printf@width+1)& (0+255),w,b
  1630  0012B0  0A80               	xorlw	128
  1631  0012B2  5841               	subwfb	??_printf& (0+255),w,c
  1632  0012B4  B0D8               	btfsc	status,0,c
  1633  0012B6  D00B               	goto	l2208
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;doprnt.c: 1382: width -= c;
  1637  0012B8  0100               	movlb	0	; () banked
  1638  0012BA  5189               	movf	printf@c& (0+255),w,b
  1639  0012BC  0100               	movlb	0	; () banked
  1640  0012BE  5F87               	subwf	printf@width& (0+255),f,b
  1641  0012C0  0E00               	movlw	0
  1642  0012C2  0100               	movlb	0	; () banked
  1643  0012C4  BF89               	btfsc	printf@c& (0+255),7,b
  1644  0012C6  0EFF               	movlw	255
  1645  0012C8  0100               	movlb	0	; () banked
  1646  0012CA  5B88               	subwfb	(printf@width+1)& (0+255),f,b
  1647  0012CC  D005               	goto	l2210
  1648  0012CE                     l2208:
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;doprnt.c: 1383: else
  1652                           ;doprnt.c: 1384: width = 0;
  1653  0012CE  0E00               	movlw	0
  1654  0012D0  0100               	movlb	0	; () banked
  1655  0012D2  6F88               	movwf	(printf@width+1)& (0+255),b
  1656  0012D4  0E00               	movlw	0
  1657  0012D6  6F87               	movwf	printf@width& (0+255),b
  1658  0012D8                     l2210:
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;doprnt.c: 1387: if(flag & 0x04) {
  1662  0012D8  0100               	movlb	0	; () banked
  1663  0012DA  A586               	btfss	printf@flag& (0+255),2,b
  1664  0012DC  D017               	goto	l2222
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;doprnt.c: 1392: if(flag & 0x03)
  1668  0012DE  C086  F041         	movff	printf@flag,??_printf
  1669  0012E2  0E03               	movlw	3
  1670  0012E4  1641               	andwf	??_printf,f,c
  1671  0012E6  B4D8               	btfsc	status,2,c
  1672  0012E8  D003               	goto	l2216
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;doprnt.c: 1393: (putch('-') );
  1676  0012EA  0E2D               	movlw	45
  1677  0012EC  EC9A  F00E         	call	_putch
  1678  0012F0                     l2216:
  1679                           
  1680                           ;doprnt.c: 1415: if(width)
  1681  0012F0  0100               	movlb	0	; () banked
  1682  0012F2  5187               	movf	printf@width& (0+255),w,b
  1683  0012F4  0100               	movlb	0	; () banked
  1684  0012F6  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1685  0012F8  B4D8               	btfsc	status,2,c
  1686  0012FA  D024               	goto	l2232
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;doprnt.c: 1417: (putch('0') );
  1690                           
  1691                           ; BSR set to: 0
  1692                           
  1693                           ;doprnt.c: 1416: do
  1694  0012FC  0E30               	movlw	48
  1695  0012FE  EC9A  F00E         	call	_putch
  1696                           
  1697                           ;doprnt.c: 1418: while(--width);
  1698  001302  0100               	movlb	0	; () banked
  1699  001304  0787               	decf	printf@width& (0+255),f,b
  1700  001306  A0D8               	btfss	status,0,c
  1701  001308  0788               	decf	(printf@width+1)& (0+255),f,b
  1702  00130A  D7F2               	goto	l2216
  1703  00130C                     l2222:
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;doprnt.c: 1422: {
  1707                           ;doprnt.c: 1424: if(width
  1708                           ;doprnt.c: 1428: )
  1709  00130C  0100               	movlb	0	; () banked
  1710  00130E  5187               	movf	printf@width& (0+255),w,b
  1711  001310  0100               	movlb	0	; () banked
  1712  001312  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1713  001314  B4D8               	btfsc	status,2,c
  1714  001316  D00D               	goto	l2228
  1715  001318                     l2224:
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;doprnt.c: 1430: (putch(' ') );
  1719  001318  0E20               	movlw	32
  1720  00131A  EC9A  F00E         	call	_putch
  1721                           
  1722                           ;doprnt.c: 1431: while(--width);
  1723  00131E  0100               	movlb	0	; () banked
  1724  001320  0787               	decf	printf@width& (0+255),f,b
  1725  001322  A0D8               	btfss	status,0,c
  1726  001324  0788               	decf	(printf@width+1)& (0+255),f,b
  1727  001326  0100               	movlb	0	; () banked
  1728  001328  5187               	movf	printf@width& (0+255),w,b
  1729  00132A  0100               	movlb	0	; () banked
  1730  00132C  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1731  00132E  A4D8               	btfss	status,2,c
  1732  001330  D7F3               	goto	l2224
  1733  001332                     l2228:
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;doprnt.c: 1438: if(flag & 0x03)
  1737  001332  C086  F041         	movff	printf@flag,??_printf
  1738  001336  0E03               	movlw	3
  1739  001338  1641               	andwf	??_printf,f,c
  1740  00133A  B4D8               	btfsc	status,2,c
  1741  00133C  D003               	goto	l2232
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;doprnt.c: 1439: (putch('-') );
  1745  00133E  0E2D               	movlw	45
  1746  001340  EC9A  F00E         	call	_putch
  1747  001344                     l2232:
  1748                           
  1749                           ;doprnt.c: 1469: }
  1750                           ;doprnt.c: 1472: prec = c;
  1751  001344  C089  F083         	movff	printf@c,printf@prec
  1752                           
  1753                           ;doprnt.c: 1474: while(prec--) {
  1754  001348  D057               	goto	l2246
  1755  00134A                     l2234:
  1756                           
  1757                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1758  00134A  0100               	movlb	0	; () banked
  1759  00134C  5183               	movf	printf@prec& (0+255),w,b
  1760  00134E  0D02               	mullw	2
  1761  001350  0E12               	movlw	low _dpowers
  1762  001352  24F3               	addwf	prodl,w,c
  1763  001354  6EF6               	movwf	tblptrl,c
  1764  001356  0E10               	movlw	high _dpowers
  1765  001358  20F4               	addwfc	prodh,w,c
  1766  00135A  6EF7               	movwf	tblptrh,c
  1767  00135C                     	if	0	;There are less than 3 active tblptr bytes
  1768  00135C                     	endif
  1769  00135C  0009               	tblrd		*+
  1770  00135E  CFF5 F02F          	movff	tablat,___lwdiv@divisor
  1771  001362  000A               	tblrd		*-
  1772  001364  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
  1773  001368  C084  F02D         	movff	printf@val,___lwdiv@dividend
  1774  00136C  C085  F02E         	movff	printf@val+1,___lwdiv@dividend+1
  1775  001370  EC0F  F00D         	call	___lwdiv	;wreg free
  1776  001374  C02D  F034         	movff	?___lwdiv,___lwmod@dividend
  1777  001378  C02E  F035         	movff	?___lwdiv+1,___lwmod@dividend+1
  1778  00137C  0E00               	movlw	0
  1779  00137E  6E37               	movwf	___lwmod@divisor+1,c
  1780  001380  0E0A               	movlw	10
  1781  001382  6E36               	movwf	___lwmod@divisor,c
  1782  001384  ECD5  F00D         	call	___lwmod	;wreg free
  1783  001388  5034               	movf	?___lwmod,w,c
  1784  00138A  0F30               	addlw	48
  1785  00138C  0100               	movlb	0	; () banked
  1786  00138E  6F89               	movwf	printf@c& (0+255),b
  1787                           
  1788                           ;doprnt.c: 1491: break;
  1789  001390  D02F               	goto	l2244
  1790  001392                     l2236:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;doprnt.c: 1499: {
  1794                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1795  001392  C084  F02D         	movff	printf@val,___lwdiv@dividend
  1796  001396  C085  F02E         	movff	printf@val+1,___lwdiv@dividend+1
  1797  00139A  0100               	movlb	0	; () banked
  1798  00139C  5183               	movf	printf@prec& (0+255),w,b
  1799  00139E  0D02               	mullw	2
  1800  0013A0  0E1C               	movlw	low _hexpowers
  1801  0013A2  24F3               	addwf	prodl,w,c
  1802  0013A4  6EF6               	movwf	tblptrl,c
  1803  0013A6  0E10               	movlw	high _hexpowers
  1804  0013A8  20F4               	addwfc	prodh,w,c
  1805  0013AA  6EF7               	movwf	tblptrh,c
  1806  0013AC                     	if	0	;There are less than 3 active tblptr bytes
  1807  0013AC                     	endif
  1808  0013AC  0009               	tblrd		*+
  1809  0013AE  CFF5 F02F          	movff	tablat,___lwdiv@divisor
  1810  0013B2  000A               	tblrd		*-
  1811  0013B4  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
  1812  0013B8  EC0F  F00D         	call	___lwdiv	;wreg free
  1813  0013BC  502D               	movf	?___lwdiv,w,c
  1814  0013BE  0B0F               	andlw	15
  1815  0013C0  0100               	movlb	0	; () banked
  1816  0013C2  6F80               	movwf	printf@idx& (0+255),b
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1820  0013C4  0100               	movlb	0	; () banked
  1821  0013C6  5180               	movf	printf@idx& (0+255),w,b
  1822  0013C8  0D01               	mullw	1
  1823  0013CA  0E59               	movlw	low STR_6
  1824  0013CC  24F3               	addwf	prodl,w,c
  1825  0013CE  6EF6               	movwf	tblptrl,c
  1826  0013D0  0E10               	movlw	high STR_6
  1827  0013D2  20F4               	addwfc	prodh,w,c
  1828  0013D4  6EF7               	movwf	tblptrh,c
  1829  0013D6                     	if	0	;There are less than 3 active tblptr bytes
  1830  0013D6                     	endif
  1831  0013D6  0008               	tblrd		*
  1832  0013D8  CFF5 F089          	movff	tablat,printf@c
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;doprnt.c: 1523: }
  1836                           
  1837                           ;doprnt.c: 1508: }
  1838                           ;doprnt.c: 1510: break;
  1839  0013DC  D009               	goto	l2244
  1840  0013DE                     l2242:
  1841  0013DE  0100               	movlb	0	; () banked
  1842  0013E0  5186               	movf	printf@flag& (0+255),w,b
  1843  0013E2  0B80               	andlw	128
  1844                           
  1845                           ; Switch size 1, requested type "space"
  1846                           ; Number of cases is 2, Range of values is 0 to 128
  1847                           ; switch strategies available:
  1848                           ; Name         Instructions Cycles
  1849                           ; simple_byte            7     4 (average)
  1850                           ;	Chosen strategy is simple_byte
  1851  0013E4  0A00               	xorlw	0	; case 0
  1852  0013E6  B4D8               	btfsc	status,2,c
  1853  0013E8  D7B0               	goto	l2234
  1854  0013EA  0A80               	xorlw	128	; case 128
  1855  0013EC  B4D8               	btfsc	status,2,c
  1856  0013EE  D7D1               	goto	l2236
  1857  0013F0                     l2244:
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;doprnt.c: 1524: (putch(c) );
  1861  0013F0  0100               	movlb	0	; () banked
  1862  0013F2  5189               	movf	printf@c& (0+255),w,b
  1863  0013F4  EC9A  F00E         	call	_putch
  1864  0013F8                     l2246:
  1865  0013F8  0100               	movlb	0	; () banked
  1866  0013FA  0783               	decf	printf@prec& (0+255),f,b
  1867  0013FC  0100               	movlb	0	; () banked
  1868  0013FE  2983               	incf	printf@prec& (0+255),w,b
  1869  001400  A4D8               	btfss	status,2,c
  1870  001402  D7ED               	goto	l2242
  1871  001404                     l2248:
  1872  001404  C039  FFF6         	movff	printf@f,tblptrl
  1873  001408  C03A  FFF7         	movff	printf@f+1,tblptrh
  1874  00140C  4A39               	infsnz	printf@f,f,c
  1875  00140E  2A3A               	incf	printf@f+1,f,c
  1876  001410                     	if	0	;tblptru may be non-zero
  1877  001410                     	endif
  1878  001410                     	if	0	;tblptru may be non-zero
  1879  001410                     	endif
  1880  001410  0008               	tblrd		*
  1881  001412  CFF5 F089          	movff	tablat,printf@c
  1882  001416  0100               	movlb	0	; () banked
  1883  001418  5189               	movf	printf@c& (0+255),w,b
  1884  00141A  B4D8               	btfsc	status,2,c
  1885  00141C  0012               	return	
  1886  00141E  D643               	goto	l2122
  1887  001420                     __end_of_printf:
  1888                           	opt stack 0
  1889                           tblptru	equ	0xFF8
  1890                           tblptrh	equ	0xFF7
  1891                           tblptrl	equ	0xFF6
  1892                           tablat	equ	0xFF5
  1893                           prodh	equ	0xFF4
  1894                           prodl	equ	0xFF3
  1895                           intcon	equ	0xFF2
  1896                           intcon2	equ	0xFF1
  1897                           intcon3	equ	0xFF0
  1898                           postinc0	equ	0xFEE
  1899                           wreg	equ	0xFE8
  1900                           indf2	equ	0xFDF
  1901                           postinc2	equ	0xFDE
  1902                           postdec2	equ	0xFDD
  1903                           fsr2h	equ	0xFDA
  1904                           fsr2l	equ	0xFD9
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _putch *****************
  1908 ;; Defined at:
  1909 ;;		line 31 in file "lcd.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  data            1    wreg     unsigned char 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  data            1   46[COMRAM] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;Total ram usage:        1 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    5
  1930 ;; This function calls:
  1931 ;;		_lcdNibble
  1932 ;; This function is called by:
  1933 ;;		_printf
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text5
  1938  001D34                     __ptext5:
  1939                           	opt stack 0
  1940  001D34                     _putch:
  1941                           	opt stack 23
  1942                           
  1943                           ;incstack = 0
  1944                           ;putch@data stored from wreg
  1945  001D34  6E2F               	movwf	putch@data,c
  1946                           
  1947                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1948  001D36  848C               	bsf	3980,2,c	;volatile
  1949                           
  1950                           ;lcd.c: 33: lcdNibble(data);
  1951  001D38  502F               	movf	putch@data,w,c
  1952  001D3A  EC61  F00D         	call	_lcdNibble
  1953  001D3E  0012               	return		;funcret
  1954  001D40                     __end_of_putch:
  1955                           	opt stack 0
  1956                           tblptru	equ	0xFF8
  1957                           tblptrh	equ	0xFF7
  1958                           tblptrl	equ	0xFF6
  1959                           tablat	equ	0xFF5
  1960                           prodh	equ	0xFF4
  1961                           prodl	equ	0xFF3
  1962                           intcon	equ	0xFF2
  1963                           intcon2	equ	0xFF1
  1964                           intcon3	equ	0xFF0
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           indf2	equ	0xFDF
  1968                           postinc2	equ	0xFDE
  1969                           postdec2	equ	0xFDD
  1970                           fsr2h	equ	0xFDA
  1971                           fsr2l	equ	0xFD9
  1972                           status	equ	0xFD8
  1973                           
  1974 ;; *************** function _isdigit *****************
  1975 ;; Defined at:
  1976 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  c               1    wreg     unsigned char 
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;  c               1   46[COMRAM] unsigned char 
  1981 ;; Return value:  Size  Location     Type
  1982 ;;		None               void
  1983 ;; Registers used:
  1984 ;;		wreg, status,2, status,0
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;Total ram usage:        3 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    4
  1997 ;; This function calls:
  1998 ;;		Nothing
  1999 ;; This function is called by:
  2000 ;;		_printf
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	text6
  2005  001CCC                     __ptext6:
  2006                           	opt stack 0
  2007  001CCC                     _isdigit:
  2008                           	opt stack 24
  2009                           
  2010                           ;incstack = 0
  2011                           ;isdigit@c stored from wreg
  2012  001CCC  6E2F               	movwf	isdigit@c,c
  2013  001CCE  0E00               	movlw	0
  2014  001CD0  6E2E               	movwf	_isdigit$506,c
  2015  001CD2  0E3A               	movlw	58
  2016  001CD4  602F               	cpfslt	isdigit@c,c
  2017  001CD6  D005               	goto	l2068
  2018  001CD8  0E2F               	movlw	47
  2019  001CDA  642F               	cpfsgt	isdigit@c,c
  2020  001CDC  D002               	goto	l2068
  2021  001CDE  0E01               	movlw	1
  2022  001CE0  6E2E               	movwf	_isdigit$506,c
  2023  001CE2                     l2068:
  2024  001CE2  C02E  F02D         	movff	_isdigit$506,??_isdigit
  2025  001CE6  302D               	rrcf	??_isdigit,w,c
  2026  001CE8  0012               	return	
  2027  001CEA                     __end_of_isdigit:
  2028                           	opt stack 0
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           prodh	equ	0xFF4
  2034                           prodl	equ	0xFF3
  2035                           intcon	equ	0xFF2
  2036                           intcon2	equ	0xFF1
  2037                           intcon3	equ	0xFF0
  2038                           postinc0	equ	0xFEE
  2039                           wreg	equ	0xFE8
  2040                           indf2	equ	0xFDF
  2041                           postinc2	equ	0xFDE
  2042                           postdec2	equ	0xFDD
  2043                           fsr2h	equ	0xFDA
  2044                           fsr2l	equ	0xFD9
  2045                           status	equ	0xFD8
  2046                           
  2047 ;; *************** function ___wmul *****************
  2048 ;; Defined at:
  2049 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;  multiplier      2   44[COMRAM] unsigned int 
  2052 ;;  multiplicand    2   46[COMRAM] unsigned int 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  product         2   48[COMRAM] unsigned int 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  2   44[COMRAM] unsigned int 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0, prodl, prodh
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;Total ram usage:        6 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:    4
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_printf
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text7
  2079  001C5A                     __ptext7:
  2080                           	opt stack 0
  2081  001C5A                     ___wmul:
  2082                           	opt stack 24
  2083                           
  2084                           ;incstack = 0
  2085  001C5A  502D               	movf	___wmul@multiplier,w,c
  2086  001C5C  022F               	mulwf	___wmul@multiplicand,c
  2087  001C5E  CFF3 F031          	movff	prodl,___wmul@product
  2088  001C62  CFF4 F032          	movff	prodh,___wmul@product+1
  2089  001C66  502D               	movf	___wmul@multiplier,w,c
  2090  001C68  0230               	mulwf	___wmul@multiplicand+1,c
  2091  001C6A  50F3               	movf	prodl,w,c
  2092  001C6C  2632               	addwf	___wmul@product+1,f,c
  2093  001C6E  502E               	movf	___wmul@multiplier+1,w,c
  2094  001C70  022F               	mulwf	___wmul@multiplicand,c
  2095  001C72  50F3               	movf	prodl,w,c
  2096  001C74  2632               	addwf	___wmul@product+1,f,c
  2097  001C76  C031  F02D         	movff	___wmul@product,?___wmul
  2098  001C7A  C032  F02E         	movff	___wmul@product+1,?___wmul+1
  2099  001C7E  0012               	return	
  2100  001C80                     __end_of___wmul:
  2101                           	opt stack 0
  2102                           tblptru	equ	0xFF8
  2103                           tblptrh	equ	0xFF7
  2104                           tblptrl	equ	0xFF6
  2105                           tablat	equ	0xFF5
  2106                           prodh	equ	0xFF4
  2107                           prodl	equ	0xFF3
  2108                           intcon	equ	0xFF2
  2109                           intcon2	equ	0xFF1
  2110                           intcon3	equ	0xFF0
  2111                           postinc0	equ	0xFEE
  2112                           wreg	equ	0xFE8
  2113                           indf2	equ	0xFDF
  2114                           postinc2	equ	0xFDE
  2115                           postdec2	equ	0xFDD
  2116                           fsr2h	equ	0xFDA
  2117                           fsr2l	equ	0xFD9
  2118                           status	equ	0xFD8
  2119                           
  2120 ;; *************** function ___lwmod *****************
  2121 ;; Defined at:
  2122 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  dividend        2   51[COMRAM] unsigned int 
  2125 ;;  divisor         2   53[COMRAM] unsigned int 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  counter         1   55[COMRAM] unsigned char 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  2   51[COMRAM] unsigned int 
  2130 ;; Registers used:
  2131 ;;		wreg, status,2, status,0
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;Total ram usage:        5 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    4
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_printf
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text8
  2152  001BAA                     __ptext8:
  2153                           	opt stack 0
  2154  001BAA                     ___lwmod:
  2155                           	opt stack 24
  2156                           
  2157                           ;incstack = 0
  2158  001BAA  5036               	movf	___lwmod@divisor,w,c
  2159  001BAC  1037               	iorwf	___lwmod@divisor+1,w,c
  2160  001BAE  B4D8               	btfsc	status,2,c
  2161  001BB0  D018               	goto	l681
  2162  001BB2  0E01               	movlw	1
  2163  001BB4  6E38               	movwf	___lwmod@counter,c
  2164  001BB6  D004               	goto	l2106
  2165  001BB8                     l2104:
  2166  001BB8  90D8               	bcf	status,0,c
  2167  001BBA  3636               	rlcf	___lwmod@divisor,f,c
  2168  001BBC  3637               	rlcf	___lwmod@divisor+1,f,c
  2169  001BBE  2A38               	incf	___lwmod@counter,f,c
  2170  001BC0                     l2106:
  2171  001BC0  AE37               	btfss	___lwmod@divisor+1,7,c
  2172  001BC2  D7FA               	goto	l2104
  2173  001BC4                     l2108:
  2174  001BC4  5036               	movf	___lwmod@divisor,w,c
  2175  001BC6  5C34               	subwf	___lwmod@dividend,w,c
  2176  001BC8  5037               	movf	___lwmod@divisor+1,w,c
  2177  001BCA  5835               	subwfb	___lwmod@dividend+1,w,c
  2178  001BCC  A0D8               	btfss	status,0,c
  2179  001BCE  D004               	goto	l2112
  2180  001BD0  5036               	movf	___lwmod@divisor,w,c
  2181  001BD2  5E34               	subwf	___lwmod@dividend,f,c
  2182  001BD4  5037               	movf	___lwmod@divisor+1,w,c
  2183  001BD6  5A35               	subwfb	___lwmod@dividend+1,f,c
  2184  001BD8                     l2112:
  2185  001BD8  90D8               	bcf	status,0,c
  2186  001BDA  3237               	rrcf	___lwmod@divisor+1,f,c
  2187  001BDC  3236               	rrcf	___lwmod@divisor,f,c
  2188  001BDE  2E38               	decfsz	___lwmod@counter,f,c
  2189  001BE0  D7F1               	goto	l2108
  2190  001BE2                     l681:
  2191  001BE2  C034  F034         	movff	___lwmod@dividend,?___lwmod
  2192  001BE6  C035  F035         	movff	___lwmod@dividend+1,?___lwmod+1
  2193  001BEA  0012               	return		;funcret
  2194  001BEC                     __end_of___lwmod:
  2195                           	opt stack 0
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           intcon	equ	0xFF2
  2203                           intcon2	equ	0xFF1
  2204                           intcon3	equ	0xFF0
  2205                           postinc0	equ	0xFEE
  2206                           wreg	equ	0xFE8
  2207                           indf2	equ	0xFDF
  2208                           postinc2	equ	0xFDE
  2209                           postdec2	equ	0xFDD
  2210                           fsr2h	equ	0xFDA
  2211                           fsr2l	equ	0xFD9
  2212                           status	equ	0xFD8
  2213                           
  2214 ;; *************** function ___lwdiv *****************
  2215 ;; Defined at:
  2216 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  dividend        2   44[COMRAM] unsigned int 
  2219 ;;  divisor         2   46[COMRAM] unsigned int 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  quotient        2   49[COMRAM] unsigned int 
  2222 ;;  counter         1   48[COMRAM] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  2   44[COMRAM] unsigned int 
  2225 ;; Registers used:
  2226 ;;		wreg, status,2, status,0
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;Total ram usage:        7 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    4
  2239 ;; This function calls:
  2240 ;;		Nothing
  2241 ;; This function is called by:
  2242 ;;		_printf
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text9
  2247  001A1E                     __ptext9:
  2248                           	opt stack 0
  2249  001A1E                     ___lwdiv:
  2250                           	opt stack 24
  2251                           
  2252                           ;incstack = 0
  2253  001A1E  0E00               	movlw	0
  2254  001A20  6E33               	movwf	___lwdiv@quotient+1,c
  2255  001A22  0E00               	movlw	0
  2256  001A24  6E32               	movwf	___lwdiv@quotient,c
  2257  001A26  502F               	movf	___lwdiv@divisor,w,c
  2258  001A28  1030               	iorwf	___lwdiv@divisor+1,w,c
  2259  001A2A  B4D8               	btfsc	status,2,c
  2260  001A2C  D01C               	goto	l671
  2261  001A2E  0E01               	movlw	1
  2262  001A30  6E31               	movwf	___lwdiv@counter,c
  2263  001A32  D004               	goto	l2086
  2264  001A34                     l2084:
  2265  001A34  90D8               	bcf	status,0,c
  2266  001A36  362F               	rlcf	___lwdiv@divisor,f,c
  2267  001A38  3630               	rlcf	___lwdiv@divisor+1,f,c
  2268  001A3A  2A31               	incf	___lwdiv@counter,f,c
  2269  001A3C                     l2086:
  2270  001A3C  AE30               	btfss	___lwdiv@divisor+1,7,c
  2271  001A3E  D7FA               	goto	l2084
  2272  001A40                     l2088:
  2273  001A40  90D8               	bcf	status,0,c
  2274  001A42  3632               	rlcf	___lwdiv@quotient,f,c
  2275  001A44  3633               	rlcf	___lwdiv@quotient+1,f,c
  2276  001A46  502F               	movf	___lwdiv@divisor,w,c
  2277  001A48  5C2D               	subwf	___lwdiv@dividend,w,c
  2278  001A4A  5030               	movf	___lwdiv@divisor+1,w,c
  2279  001A4C  582E               	subwfb	___lwdiv@dividend+1,w,c
  2280  001A4E  A0D8               	btfss	status,0,c
  2281  001A50  D005               	goto	l2096
  2282  001A52  502F               	movf	___lwdiv@divisor,w,c
  2283  001A54  5E2D               	subwf	___lwdiv@dividend,f,c
  2284  001A56  5030               	movf	___lwdiv@divisor+1,w,c
  2285  001A58  5A2E               	subwfb	___lwdiv@dividend+1,f,c
  2286  001A5A  8032               	bsf	___lwdiv@quotient,0,c
  2287  001A5C                     l2096:
  2288  001A5C  90D8               	bcf	status,0,c
  2289  001A5E  3230               	rrcf	___lwdiv@divisor+1,f,c
  2290  001A60  322F               	rrcf	___lwdiv@divisor,f,c
  2291  001A62  2E31               	decfsz	___lwdiv@counter,f,c
  2292  001A64  D7ED               	goto	l2088
  2293  001A66                     l671:
  2294  001A66  C032  F02D         	movff	___lwdiv@quotient,?___lwdiv
  2295  001A6A  C033  F02E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2296  001A6E  0012               	return		;funcret
  2297  001A70                     __end_of___lwdiv:
  2298                           	opt stack 0
  2299                           tblptru	equ	0xFF8
  2300                           tblptrh	equ	0xFF7
  2301                           tblptrl	equ	0xFF6
  2302                           tablat	equ	0xFF5
  2303                           prodh	equ	0xFF4
  2304                           prodl	equ	0xFF3
  2305                           intcon	equ	0xFF2
  2306                           intcon2	equ	0xFF1
  2307                           intcon3	equ	0xFF0
  2308                           postinc0	equ	0xFEE
  2309                           wreg	equ	0xFE8
  2310                           indf2	equ	0xFDF
  2311                           postinc2	equ	0xFDE
  2312                           postdec2	equ	0xFDD
  2313                           fsr2h	equ	0xFDA
  2314                           fsr2l	equ	0xFD9
  2315                           status	equ	0xFD8
  2316                           
  2317 ;; *************** function _lcdInst *****************
  2318 ;; Defined at:
  2319 ;;		line 26 in file "lcd.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;  data            1    wreg     unsigned char 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  data            1   46[COMRAM] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;Total ram usage:        1 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    5
  2340 ;; This function calls:
  2341 ;;		_lcdNibble
  2342 ;; This function is called by:
  2343 ;;		_initLCD
  2344 ;;		_standby
  2345 ;;		_date_time
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	text10
  2350  001D40                     __ptext10:
  2351                           	opt stack 0
  2352  001D40                     _lcdInst:
  2353                           	opt stack 24
  2354                           
  2355                           ;incstack = 0
  2356                           ;lcdInst@data stored from wreg
  2357  001D40  6E2F               	movwf	lcdInst@data,c
  2358                           
  2359                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  2360  001D42  948C               	bcf	3980,2,c	;volatile
  2361                           
  2362                           ;lcd.c: 28: lcdNibble(data);
  2363  001D44  502F               	movf	lcdInst@data,w,c
  2364  001D46  EC61  F00D         	call	_lcdNibble
  2365  001D4A  0012               	return		;funcret
  2366  001D4C                     __end_of_lcdInst:
  2367                           	opt stack 0
  2368                           tblptru	equ	0xFF8
  2369                           tblptrh	equ	0xFF7
  2370                           tblptrl	equ	0xFF6
  2371                           tablat	equ	0xFF5
  2372                           prodh	equ	0xFF4
  2373                           prodl	equ	0xFF3
  2374                           intcon	equ	0xFF2
  2375                           intcon2	equ	0xFF1
  2376                           intcon3	equ	0xFF0
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           indf2	equ	0xFDF
  2380                           postinc2	equ	0xFDE
  2381                           postdec2	equ	0xFDD
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _lcdNibble *****************
  2387 ;; Defined at:
  2388 ;;		line 36 in file "lcd.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  data            1    wreg     unsigned char 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  data            1   45[COMRAM] unsigned char 
  2393 ;;  temp            1   44[COMRAM] unsigned char 
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;Total ram usage:        2 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    4
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_lcdInst
  2414 ;;		_putch
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           	psect	text11
  2419  001AC2                     __ptext11:
  2420                           	opt stack 0
  2421  001AC2                     _lcdNibble:
  2422                           	opt stack 23
  2423                           
  2424                           ;incstack = 0
  2425                           ;lcdNibble@data stored from wreg
  2426  001AC2  6E2E               	movwf	lcdNibble@data,c
  2427                           
  2428                           ;lcd.c: 38: char temp = data & 0xF0;
  2429  001AC4  502E               	movf	lcdNibble@data,w,c
  2430  001AC6  0BF0               	andlw	240
  2431  001AC8  6E2D               	movwf	lcdNibble@temp,c
  2432                           
  2433                           ;lcd.c: 39: LATD = LATD & 0x0F;
  2434  001ACA  508C               	movf	3980,w,c	;volatile
  2435  001ACC  0B0F               	andlw	15
  2436  001ACE  6E8C               	movwf	3980,c	;volatile
  2437                           
  2438                           ;lcd.c: 40: LATD = temp | LATD;
  2439  001AD0  502D               	movf	lcdNibble@temp,w,c
  2440  001AD2  108C               	iorwf	3980,w,c	;volatile
  2441  001AD4  6E8C               	movwf	3980,c	;volatile
  2442                           
  2443                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  2444  001AD6  968C               	bcf	3980,3,c	;volatile
  2445                           
  2446                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2447  001AD8  0E19               	movlw	25
  2448  001ADA                     u1887:
  2449  001ADA  2EE8               	decfsz	wreg,f,c
  2450  001ADC  D7FE               	bra	u1887
  2451                           
  2452                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  2453  001ADE  868C               	bsf	3980,3,c	;volatile
  2454                           
  2455                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2456  001AE0  0E19               	movlw	25
  2457  001AE2                     u1897:
  2458  001AE2  2EE8               	decfsz	wreg,f,c
  2459  001AE4  D7FE               	bra	u1897
  2460                           
  2461                           ;lcd.c: 47: data = data << 4;
  2462  001AE6  382E               	swapf	lcdNibble@data,w,c
  2463  001AE8  0BF0               	andlw	240
  2464  001AEA  6E2E               	movwf	lcdNibble@data,c
  2465                           
  2466                           ;lcd.c: 49: temp = data & 0xF0;
  2467  001AEC  502E               	movf	lcdNibble@data,w,c
  2468  001AEE  0BF0               	andlw	240
  2469  001AF0  6E2D               	movwf	lcdNibble@temp,c
  2470                           
  2471                           ;lcd.c: 50: LATD = LATD & 0x0F;
  2472  001AF2  508C               	movf	3980,w,c	;volatile
  2473  001AF4  0B0F               	andlw	15
  2474  001AF6  6E8C               	movwf	3980,c	;volatile
  2475                           
  2476                           ;lcd.c: 51: LATD = temp | LATD;
  2477  001AF8  502D               	movf	lcdNibble@temp,w,c
  2478  001AFA  108C               	iorwf	3980,w,c	;volatile
  2479  001AFC  6E8C               	movwf	3980,c	;volatile
  2480                           
  2481                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  2482  001AFE  968C               	bcf	3980,3,c	;volatile
  2483                           
  2484                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2485  001B00  0E19               	movlw	25
  2486  001B02                     u1907:
  2487  001B02  2EE8               	decfsz	wreg,f,c
  2488  001B04  D7FE               	bra	u1907
  2489                           
  2490                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  2491  001B06  868C               	bsf	3980,3,c	;volatile
  2492                           
  2493                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2494  001B08  0E19               	movlw	25
  2495  001B0A                     u1917:
  2496  001B0A  2EE8               	decfsz	wreg,f,c
  2497  001B0C  D7FE               	bra	u1917
  2498  001B0E  0012               	return		;funcret
  2499  001B10                     __end_of_lcdNibble:
  2500                           	opt stack 0
  2501                           tblptru	equ	0xFF8
  2502                           tblptrh	equ	0xFF7
  2503                           tblptrl	equ	0xFF6
  2504                           tablat	equ	0xFF5
  2505                           prodh	equ	0xFF4
  2506                           prodl	equ	0xFF3
  2507                           intcon	equ	0xFF2
  2508                           intcon2	equ	0xFF1
  2509                           intcon3	equ	0xFF0
  2510                           postinc0	equ	0xFEE
  2511                           wreg	equ	0xFE8
  2512                           indf2	equ	0xFDF
  2513                           postinc2	equ	0xFDE
  2514                           postdec2	equ	0xFDD
  2515                           fsr2h	equ	0xFDA
  2516                           fsr2l	equ	0xFD9
  2517                           status	equ	0xFD8
  2518                           
  2519 ;; *************** function _I2C_Master_Write *****************
  2520 ;; Defined at:
  2521 ;;		line 47 in file "I2C.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;  d               2   45[COMRAM] unsigned int 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;		None
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  1    wreg      void 
  2528 ;; Registers used:
  2529 ;;		wreg, status,2, status,0, cstack
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2535 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;Total ram usage:        2 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; Hardware stack levels required when called:    5
  2542 ;; This function calls:
  2543 ;;		_I2C_Master_Wait
  2544 ;; This function is called by:
  2545 ;;		_date_time
  2546 ;;		_set_time
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text12
  2551  001D64                     __ptext12:
  2552                           	opt stack 0
  2553  001D64                     _I2C_Master_Write:
  2554                           	opt stack 24
  2555                           
  2556                           ;I2C.c: 49: I2C_Master_Wait();
  2557                           
  2558                           ;incstack = 0
  2559  001D64  EC91  F00E         	call	_I2C_Master_Wait	;wreg free
  2560                           
  2561                           ;I2C.c: 50: SSPBUF = d;
  2562  001D68  C02E  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2563  001D6C  0012               	return		;funcret
  2564  001D6E                     __end_of_I2C_Master_Write:
  2565                           	opt stack 0
  2566                           tblptru	equ	0xFF8
  2567                           tblptrh	equ	0xFF7
  2568                           tblptrl	equ	0xFF6
  2569                           tablat	equ	0xFF5
  2570                           prodh	equ	0xFF4
  2571                           prodl	equ	0xFF3
  2572                           intcon	equ	0xFF2
  2573                           intcon2	equ	0xFF1
  2574                           intcon3	equ	0xFF0
  2575                           postinc0	equ	0xFEE
  2576                           wreg	equ	0xFE8
  2577                           indf2	equ	0xFDF
  2578                           postinc2	equ	0xFDE
  2579                           postdec2	equ	0xFDD
  2580                           fsr2h	equ	0xFDA
  2581                           fsr2l	equ	0xFD9
  2582                           status	equ	0xFD8
  2583                           
  2584 ;; *************** function _I2C_Master_Stop *****************
  2585 ;; Defined at:
  2586 ;;		line 41 in file "I2C.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;		None
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;		None
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  1    wreg      void 
  2593 ;; Registers used:
  2594 ;;		wreg, status,2, status,0, cstack
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;Total ram usage:        0 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    5
  2607 ;; This function calls:
  2608 ;;		_I2C_Master_Wait
  2609 ;; This function is called by:
  2610 ;;		_date_time
  2611 ;;		_set_time
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text13
  2616  001D6E                     __ptext13:
  2617                           	opt stack 0
  2618  001D6E                     _I2C_Master_Stop:
  2619                           	opt stack 24
  2620                           
  2621                           ;I2C.c: 43: I2C_Master_Wait();
  2622                           
  2623                           ;incstack = 0
  2624  001D6E  EC91  F00E         	call	_I2C_Master_Wait	;wreg free
  2625                           
  2626                           ;I2C.c: 44: PEN = 1;
  2627  001D72  84C5               	bsf	4037,2,c	;volatile
  2628  001D74  0012               	return		;funcret
  2629  001D76                     __end_of_I2C_Master_Stop:
  2630                           	opt stack 0
  2631                           tblptru	equ	0xFF8
  2632                           tblptrh	equ	0xFF7
  2633                           tblptrl	equ	0xFF6
  2634                           tablat	equ	0xFF5
  2635                           prodh	equ	0xFF4
  2636                           prodl	equ	0xFF3
  2637                           intcon	equ	0xFF2
  2638                           intcon2	equ	0xFF1
  2639                           intcon3	equ	0xFF0
  2640                           postinc0	equ	0xFEE
  2641                           wreg	equ	0xFE8
  2642                           indf2	equ	0xFDF
  2643                           postinc2	equ	0xFDE
  2644                           postdec2	equ	0xFDD
  2645                           fsr2h	equ	0xFDA
  2646                           fsr2l	equ	0xFD9
  2647                           status	equ	0xFD8
  2648                           
  2649 ;; *************** function _I2C_Master_Start *****************
  2650 ;; Defined at:
  2651 ;;		line 29 in file "I2C.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;		None
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;		None
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, status,2, status,0, cstack
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;Total ram usage:        0 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; Hardware stack levels required when called:    5
  2672 ;; This function calls:
  2673 ;;		_I2C_Master_Wait
  2674 ;; This function is called by:
  2675 ;;		_date_time
  2676 ;;		_set_time
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text14
  2681  001D76                     __ptext14:
  2682                           	opt stack 0
  2683  001D76                     _I2C_Master_Start:
  2684                           	opt stack 24
  2685                           
  2686                           ;I2C.c: 31: I2C_Master_Wait();
  2687                           
  2688                           ;incstack = 0
  2689  001D76  EC91  F00E         	call	_I2C_Master_Wait	;wreg free
  2690                           
  2691                           ;I2C.c: 32: SEN = 1;
  2692  001D7A  80C5               	bsf	4037,0,c	;volatile
  2693  001D7C  0012               	return		;funcret
  2694  001D7E                     __end_of_I2C_Master_Start:
  2695                           	opt stack 0
  2696                           tblptru	equ	0xFF8
  2697                           tblptrh	equ	0xFF7
  2698                           tblptrl	equ	0xFF6
  2699                           tablat	equ	0xFF5
  2700                           prodh	equ	0xFF4
  2701                           prodl	equ	0xFF3
  2702                           intcon	equ	0xFF2
  2703                           intcon2	equ	0xFF1
  2704                           intcon3	equ	0xFF0
  2705                           postinc0	equ	0xFEE
  2706                           wreg	equ	0xFE8
  2707                           indf2	equ	0xFDF
  2708                           postinc2	equ	0xFDE
  2709                           postdec2	equ	0xFDD
  2710                           fsr2h	equ	0xFDA
  2711                           fsr2l	equ	0xFD9
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _I2C_Master_Read *****************
  2715 ;; Defined at:
  2716 ;;		line 53 in file "I2C.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  a               1    wreg     unsigned char 
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;  a               1   45[COMRAM] unsigned char 
  2721 ;;  temp            1   46[COMRAM] unsigned char 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      unsigned char 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2, status,0, cstack
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;Total ram usage:        2 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:    5
  2738 ;; This function calls:
  2739 ;;		_I2C_Master_Wait
  2740 ;; This function is called by:
  2741 ;;		_date_time
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text15
  2746  001C80                     __ptext15:
  2747                           	opt stack 0
  2748  001C80                     _I2C_Master_Read:
  2749                           	opt stack 24
  2750                           
  2751                           ;incstack = 0
  2752                           ;I2C_Master_Read@a stored from wreg
  2753  001C80  6E2E               	movwf	I2C_Master_Read@a,c
  2754                           
  2755                           ;I2C.c: 55: unsigned char temp;
  2756                           ;I2C.c: 56: I2C_Master_Wait();
  2757  001C82  EC91  F00E         	call	_I2C_Master_Wait	;wreg free
  2758                           
  2759                           ;I2C.c: 57: RCEN = 1;
  2760  001C86  86C5               	bsf	4037,3,c	;volatile
  2761                           
  2762                           ;I2C.c: 58: I2C_Master_Wait();
  2763  001C88  EC91  F00E         	call	_I2C_Master_Wait	;wreg free
  2764                           
  2765                           ;I2C.c: 59: temp = SSPBUF;
  2766  001C8C  CFC9 F02F          	movff	4041,I2C_Master_Read@temp	;volatile
  2767                           
  2768                           ;I2C.c: 60: I2C_Master_Wait();
  2769  001C90  EC91  F00E         	call	_I2C_Master_Wait	;wreg free
  2770                           
  2771                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2772  001C94  502E               	movf	I2C_Master_Read@a,w,c
  2773  001C96  A4D8               	btfss	status,2,c
  2774  001C98  D002               	goto	u110
  2775  001C9A  8AC5               	bsf	4037,5,c	;volatile
  2776  001C9C  D001               	goto	l1002
  2777  001C9E                     u110:
  2778  001C9E  9AC5               	bcf	4037,5,c	;volatile
  2779  001CA0                     l1002:
  2780                           
  2781                           ;I2C.c: 62: ACKEN = 1;
  2782  001CA0  88C5               	bsf	4037,4,c	;volatile
  2783                           
  2784                           ;I2C.c: 63: return temp;
  2785  001CA2  502F               	movf	I2C_Master_Read@temp,w,c
  2786  001CA4  0012               	return	
  2787  001CA6                     __end_of_I2C_Master_Read:
  2788                           	opt stack 0
  2789                           tblptru	equ	0xFF8
  2790                           tblptrh	equ	0xFF7
  2791                           tblptrl	equ	0xFF6
  2792                           tablat	equ	0xFF5
  2793                           prodh	equ	0xFF4
  2794                           prodl	equ	0xFF3
  2795                           intcon	equ	0xFF2
  2796                           intcon2	equ	0xFF1
  2797                           intcon3	equ	0xFF0
  2798                           postinc0	equ	0xFEE
  2799                           wreg	equ	0xFE8
  2800                           indf2	equ	0xFDF
  2801                           postinc2	equ	0xFDE
  2802                           postdec2	equ	0xFDD
  2803                           fsr2h	equ	0xFDA
  2804                           fsr2l	equ	0xFD9
  2805                           status	equ	0xFD8
  2806                           
  2807 ;; *************** function _I2C_Master_Wait *****************
  2808 ;; Defined at:
  2809 ;;		line 24 in file "I2C.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, status,0
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;Total ram usage:        1 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    4
  2830 ;; This function calls:
  2831 ;;		Nothing
  2832 ;; This function is called by:
  2833 ;;		_I2C_Master_Start
  2834 ;;		_I2C_Master_Stop
  2835 ;;		_I2C_Master_Write
  2836 ;;		_I2C_Master_Read
  2837 ;;		_I2C_Master_RepeatedStart
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text16
  2842  001D22                     __ptext16:
  2843                           	opt stack 0
  2844  001D22                     _I2C_Master_Wait:
  2845                           	opt stack 24
  2846  001D22                     l34:
  2847  001D22  B4C7               	btfsc	4039,2,c	;volatile
  2848  001D24  D7FE               	goto	l34
  2849  001D26  CFC5 F02D          	movff	4037,??_I2C_Master_Wait	;volatile
  2850  001D2A  0E1F               	movlw	31
  2851  001D2C  162D               	andwf	??_I2C_Master_Wait,f,c
  2852  001D2E  B4D8               	btfsc	status,2,c
  2853  001D30  0012               	return	
  2854  001D32  D7F7               	goto	l34
  2855  001D34                     __end_of_I2C_Master_Wait:
  2856                           	opt stack 0
  2857                           tblptru	equ	0xFF8
  2858                           tblptrh	equ	0xFF7
  2859                           tblptrl	equ	0xFF6
  2860                           tablat	equ	0xFF5
  2861                           prodh	equ	0xFF4
  2862                           prodl	equ	0xFF3
  2863                           intcon	equ	0xFF2
  2864                           intcon2	equ	0xFF1
  2865                           intcon3	equ	0xFF0
  2866                           postinc0	equ	0xFEE
  2867                           wreg	equ	0xFE8
  2868                           indf2	equ	0xFDF
  2869                           postinc2	equ	0xFDE
  2870                           postdec2	equ	0xFDD
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _bottle_time *****************
  2876 ;; Defined at:
  2877 ;;		line 164 in file "main.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;		None
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		None
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;Total ram usage:        0 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    4
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_main
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text17
  2906  001D7E                     __ptext17:
  2907                           	opt stack 0
  2908  001D7E                     _bottle_time:
  2909                           	opt stack 26
  2910                           
  2911                           ;main.c: 165: return;
  2912                           
  2913                           ;incstack = 0
  2914  001D7E  0012               	return		;funcret
  2915  001D80                     __end_of_bottle_time:
  2916                           	opt stack 0
  2917                           tblptru	equ	0xFF8
  2918                           tblptrh	equ	0xFF7
  2919                           tblptrl	equ	0xFF6
  2920                           tablat	equ	0xFF5
  2921                           prodh	equ	0xFF4
  2922                           prodl	equ	0xFF3
  2923                           intcon	equ	0xFF2
  2924                           intcon2	equ	0xFF1
  2925                           intcon3	equ	0xFF0
  2926                           postinc0	equ	0xFEE
  2927                           wreg	equ	0xFE8
  2928                           indf2	equ	0xFDF
  2929                           postinc2	equ	0xFDE
  2930                           postdec2	equ	0xFDD
  2931                           fsr2h	equ	0xFDA
  2932                           fsr2l	equ	0xFD9
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function _bottle_count *****************
  2936 ;; Defined at:
  2937 ;;		line 160 in file "main.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		None
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;Total ram usage:        0 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    4
  2958 ;; This function calls:
  2959 ;;		Nothing
  2960 ;; This function is called by:
  2961 ;;		_main
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text18
  2966  001D80                     __ptext18:
  2967                           	opt stack 0
  2968  001D80                     _bottle_count:
  2969                           	opt stack 26
  2970                           
  2971                           ;main.c: 161: return;
  2972                           
  2973                           ;incstack = 0
  2974  001D80  0012               	return		;funcret
  2975  001D82                     __end_of_bottle_count:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           intcon	equ	0xFF2
  2984                           intcon2	equ	0xFF1
  2985                           intcon3	equ	0xFF0
  2986                           postinc0	equ	0xFEE
  2987                           wreg	equ	0xFE8
  2988                           indf2	equ	0xFDF
  2989                           postinc2	equ	0xFDE
  2990                           postdec2	equ	0xFDD
  2991                           fsr2h	equ	0xFDA
  2992                           fsr2l	equ	0xFD9
  2993                           status	equ	0xFD8
  2994                           
  2995 ;; *************** function _I2C_Master_Init *****************
  2996 ;; Defined at:
  2997 ;;		line 13 in file "I2C.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;  c               4   57[COMRAM] const unsigned long 
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;		None
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      void 
  3004 ;; Registers used:
  3005 ;;		wreg, status,2, status,0, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3011 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;Total ram usage:        8 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:    5
  3018 ;; This function calls:
  3019 ;;		___lldiv
  3020 ;; This function is called by:
  3021 ;;		_main
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text19
  3026  0019C4                     __ptext19:
  3027                           	opt stack 0
  3028  0019C4                     _I2C_Master_Init:
  3029                           	opt stack 25
  3030                           
  3031                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3032                           
  3033                           ;incstack = 0
  3034  0019C4  0E00               	movlw	0
  3035  0019C6  6EC7               	movwf	4039,c	;volatile
  3036                           
  3037                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3038  0019C8  0E28               	movlw	40
  3039  0019CA  6EC6               	movwf	4038,c	;volatile
  3040                           
  3041                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3042  0019CC  0E00               	movlw	0
  3043  0019CE  6EC5               	movwf	4037,c	;volatile
  3044                           
  3045                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3046  0019D0  0E80               	movlw	128
  3047  0019D2  6E2D               	movwf	___lldiv@dividend,c
  3048  0019D4  0E96               	movlw	150
  3049  0019D6  6E2E               	movwf	___lldiv@dividend+1,c
  3050  0019D8  0E98               	movlw	152
  3051  0019DA  6E2F               	movwf	___lldiv@dividend+2,c
  3052  0019DC  0E00               	movlw	0
  3053  0019DE  6E30               	movwf	___lldiv@dividend+3,c
  3054  0019E0  C03A  F03E         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3055  0019E4  C03B  F03F         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3056  0019E8  C03C  F040         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3057  0019EC  C03D  F041         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3058  0019F0  0E02               	movlw	2
  3059  0019F2                     u1215:
  3060  0019F2  90D8               	bcf	status,0,c
  3061  0019F4  363E               	rlcf	??_I2C_Master_Init,f,c
  3062  0019F6  363F               	rlcf	??_I2C_Master_Init+1,f,c
  3063  0019F8  3640               	rlcf	??_I2C_Master_Init+2,f,c
  3064  0019FA  3641               	rlcf	??_I2C_Master_Init+3,f,c
  3065  0019FC  2EE8               	decfsz	wreg,f,c
  3066  0019FE  D7F9               	goto	u1215
  3067  001A00  C03E  F031         	movff	??_I2C_Master_Init,___lldiv@divisor
  3068  001A04  C03F  F032         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3069  001A08  C040  F033         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3070  001A0C  C041  F034         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3071  001A10  ECA1  F00C         	call	___lldiv	;wreg free
  3072  001A14  042D               	decf	?___lldiv,w,c
  3073  001A16  6EC8               	movwf	4040,c	;volatile
  3074                           
  3075                           ;I2C.c: 20: TRISC3 = 1;
  3076  001A18  8694               	bsf	3988,3,c	;volatile
  3077                           
  3078                           ;I2C.c: 21: TRISC4 = 1;
  3079  001A1A  8894               	bsf	3988,4,c	;volatile
  3080  001A1C  0012               	return		;funcret
  3081  001A1E                     __end_of_I2C_Master_Init:
  3082                           	opt stack 0
  3083                           tblptru	equ	0xFF8
  3084                           tblptrh	equ	0xFF7
  3085                           tblptrl	equ	0xFF6
  3086                           tablat	equ	0xFF5
  3087                           prodh	equ	0xFF4
  3088                           prodl	equ	0xFF3
  3089                           intcon	equ	0xFF2
  3090                           intcon2	equ	0xFF1
  3091                           intcon3	equ	0xFF0
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           indf2	equ	0xFDF
  3095                           postinc2	equ	0xFDE
  3096                           postdec2	equ	0xFDD
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function ___lldiv *****************
  3102 ;; Defined at:
  3103 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  dividend        4   44[COMRAM] unsigned long 
  3106 ;;  divisor         4   48[COMRAM] unsigned long 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;  quotient        4   52[COMRAM] unsigned long 
  3109 ;;  counter         1   56[COMRAM] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  4   44[COMRAM] unsigned long 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2, status,0
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3119 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;Total ram usage:       13 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    4
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_I2C_Master_Init
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           	psect	text20
  3134  001942                     __ptext20:
  3135                           	opt stack 0
  3136  001942                     ___lldiv:
  3137                           	opt stack 25
  3138                           
  3139                           ;incstack = 0
  3140  001942  0E00               	movlw	0
  3141  001944  6E35               	movwf	___lldiv@quotient,c
  3142  001946  0E00               	movlw	0
  3143  001948  6E36               	movwf	___lldiv@quotient+1,c
  3144  00194A  0E00               	movlw	0
  3145  00194C  6E37               	movwf	___lldiv@quotient+2,c
  3146  00194E  0E00               	movlw	0
  3147  001950  6E38               	movwf	___lldiv@quotient+3,c
  3148  001952  5031               	movf	___lldiv@divisor,w,c
  3149  001954  1032               	iorwf	___lldiv@divisor+1,w,c
  3150  001956  1033               	iorwf	___lldiv@divisor+2,w,c
  3151  001958  1034               	iorwf	___lldiv@divisor+3,w,c
  3152  00195A  B4D8               	btfsc	status,2,c
  3153  00195C  D02A               	goto	l618
  3154  00195E  0E01               	movlw	1
  3155  001960  6E39               	movwf	___lldiv@counter,c
  3156  001962  D006               	goto	l1718
  3157  001964                     l1716:
  3158  001964  90D8               	bcf	status,0,c
  3159  001966  3631               	rlcf	___lldiv@divisor,f,c
  3160  001968  3632               	rlcf	___lldiv@divisor+1,f,c
  3161  00196A  3633               	rlcf	___lldiv@divisor+2,f,c
  3162  00196C  3634               	rlcf	___lldiv@divisor+3,f,c
  3163  00196E  2A39               	incf	___lldiv@counter,f,c
  3164  001970                     l1718:
  3165  001970  AE34               	btfss	___lldiv@divisor+3,7,c
  3166  001972  D7F8               	goto	l1716
  3167  001974                     l1720:
  3168  001974  90D8               	bcf	status,0,c
  3169  001976  3635               	rlcf	___lldiv@quotient,f,c
  3170  001978  3636               	rlcf	___lldiv@quotient+1,f,c
  3171  00197A  3637               	rlcf	___lldiv@quotient+2,f,c
  3172  00197C  3638               	rlcf	___lldiv@quotient+3,f,c
  3173  00197E  5031               	movf	___lldiv@divisor,w,c
  3174  001980  5C2D               	subwf	___lldiv@dividend,w,c
  3175  001982  5032               	movf	___lldiv@divisor+1,w,c
  3176  001984  582E               	subwfb	___lldiv@dividend+1,w,c
  3177  001986  5033               	movf	___lldiv@divisor+2,w,c
  3178  001988  582F               	subwfb	___lldiv@dividend+2,w,c
  3179  00198A  5034               	movf	___lldiv@divisor+3,w,c
  3180  00198C  5830               	subwfb	___lldiv@dividend+3,w,c
  3181  00198E  A0D8               	btfss	status,0,c
  3182  001990  D009               	goto	l1728
  3183  001992  5031               	movf	___lldiv@divisor,w,c
  3184  001994  5E2D               	subwf	___lldiv@dividend,f,c
  3185  001996  5032               	movf	___lldiv@divisor+1,w,c
  3186  001998  5A2E               	subwfb	___lldiv@dividend+1,f,c
  3187  00199A  5033               	movf	___lldiv@divisor+2,w,c
  3188  00199C  5A2F               	subwfb	___lldiv@dividend+2,f,c
  3189  00199E  5034               	movf	___lldiv@divisor+3,w,c
  3190  0019A0  5A30               	subwfb	___lldiv@dividend+3,f,c
  3191  0019A2  8035               	bsf	___lldiv@quotient,0,c
  3192  0019A4                     l1728:
  3193  0019A4  90D8               	bcf	status,0,c
  3194  0019A6  3234               	rrcf	___lldiv@divisor+3,f,c
  3195  0019A8  3233               	rrcf	___lldiv@divisor+2,f,c
  3196  0019AA  3232               	rrcf	___lldiv@divisor+1,f,c
  3197  0019AC  3231               	rrcf	___lldiv@divisor,f,c
  3198  0019AE  2E39               	decfsz	___lldiv@counter,f,c
  3199  0019B0  D7E1               	goto	l1720
  3200  0019B2                     l618:
  3201  0019B2  C035  F02D         	movff	___lldiv@quotient,?___lldiv
  3202  0019B6  C036  F02E         	movff	___lldiv@quotient+1,?___lldiv+1
  3203  0019BA  C037  F02F         	movff	___lldiv@quotient+2,?___lldiv+2
  3204  0019BE  C038  F030         	movff	___lldiv@quotient+3,?___lldiv+3
  3205  0019C2  0012               	return		;funcret
  3206  0019C4                     __end_of___lldiv:
  3207                           	opt stack 0
  3208                           tblptru	equ	0xFF8
  3209                           tblptrh	equ	0xFF7
  3210                           tblptrl	equ	0xFF6
  3211                           tablat	equ	0xFF5
  3212                           prodh	equ	0xFF4
  3213                           prodl	equ	0xFF3
  3214                           intcon	equ	0xFF2
  3215                           intcon2	equ	0xFF1
  3216                           intcon3	equ	0xFF0
  3217                           postinc0	equ	0xFEE
  3218                           wreg	equ	0xFE8
  3219                           indf2	equ	0xFDF
  3220                           postinc2	equ	0xFDE
  3221                           postdec2	equ	0xFDD
  3222                           fsr2h	equ	0xFDA
  3223                           fsr2l	equ	0xFD9
  3224                           status	equ	0xFD8
  3225                           
  3226 ;; *************** function _isr *****************
  3227 ;; Defined at:
  3228 ;;		line 92 in file "main.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;		None
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  i               1   43[COMRAM] unsigned char 
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  1    wreg      void 
  3235 ;; Registers used:
  3236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;Total ram usage:       16 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    3
  3249 ;; This function calls:
  3250 ;;		i2_lcdInst
  3251 ;;		i2_printf
  3252 ;; This function is called by:
  3253 ;;		Interrupt level 2
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	intcode
  3258  000008                     __pintcode:
  3259                           	opt stack 0
  3260  000008                     _isr:
  3261                           	opt stack 23
  3262                           
  3263                           ;incstack = 0
  3264  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3265  00000A  ED96  F00B         	call	int_func,f	;refresh shadow registers
  3266                           tblptru	equ	0xFF8
  3267                           tblptrh	equ	0xFF7
  3268                           tblptrl	equ	0xFF6
  3269                           tablat	equ	0xFF5
  3270                           prodh	equ	0xFF4
  3271                           prodl	equ	0xFF3
  3272                           intcon	equ	0xFF2
  3273                           intcon2	equ	0xFF1
  3274                           intcon3	equ	0xFF0
  3275                           postinc0	equ	0xFEE
  3276                           wreg	equ	0xFE8
  3277                           indf2	equ	0xFDF
  3278                           postinc2	equ	0xFDE
  3279                           postdec2	equ	0xFDD
  3280                           fsr2h	equ	0xFDA
  3281                           fsr2l	equ	0xFD9
  3282                           status	equ	0xFD8
  3283                           
  3284                           	psect	intcode_body
  3285  00172C                     __pintcode_body:
  3286                           	opt stack 23
  3287  00172C                     int_func:
  3288                           	opt stack 23
  3289  00172C  0006               	pop		; remove dummy address from shadow register refresh
  3290  00172E  CFFA F01E          	movff	pclath,??_isr+1
  3291  001732  CFFB F01F          	movff	pclatu,??_isr+2
  3292  001736  CFE9 F020          	movff	fsr0l,??_isr+3
  3293  00173A  CFEA F021          	movff	fsr0h,??_isr+4
  3294  00173E  CFE1 F022          	movff	fsr1l,??_isr+5
  3295  001742  CFE2 F023          	movff	fsr1h,??_isr+6
  3296  001746  CFD9 F024          	movff	fsr2l,??_isr+7
  3297  00174A  CFDA F025          	movff	fsr2h,??_isr+8
  3298  00174E  CFF3 F026          	movff	prodl,??_isr+9
  3299  001752  CFF4 F027          	movff	prodh,??_isr+10
  3300  001756  CFF6 F028          	movff	tblptrl,??_isr+11
  3301  00175A  CFF7 F029          	movff	tblptrh,??_isr+12
  3302  00175E  CFF8 F02A          	movff	tblptru,??_isr+13
  3303  001762  CFF5 F02B          	movff	tablat,??_isr+14
  3304                           
  3305                           ;main.c: 93: if (INT1IF) {
  3306  001766  B0F0               	btfsc	intcon3,0,c	;volatile
  3307  001768  D006               	goto	i2l2006
  3308  00176A  D010               	goto	i2l2008
  3309  00176C                     i2l1998:
  3310                           
  3311                           ;main.c: 96: curr_state = STANDBY;
  3312  00176C  0E00               	movlw	0
  3313  00176E                     L1:
  3314  00176E  6E4F               	movwf	_curr_state,c
  3315                           
  3316                           ;main.c: 100: break;
  3317  001770  D026               	goto	i2l169
  3318  001772                     i2l2002:
  3319                           
  3320                           ;main.c: 102: curr_state = DATETIME;
  3321  001772  0E01               	movlw	1
  3322  001774  D7FC               	goto	L1
  3323  001776                     i2l2006:
  3324  001776  5081               	movf	3969,w,c	;volatile
  3325                           
  3326                           ; Switch size 1, requested type "space"
  3327                           ; Number of cases is 3, Range of values is 61 to 239
  3328                           ; switch strategies available:
  3329                           ; Name         Instructions Cycles
  3330                           ; simple_byte           10     6 (average)
  3331                           ;	Chosen strategy is simple_byte
  3332  001778  0A3D               	xorlw	61	; case 61
  3333  00177A  B4D8               	btfsc	status,2,c
  3334  00177C  D7FA               	goto	i2l2002
  3335  00177E  0A82               	xorlw	130	; case 191
  3336  001780  B4D8               	btfsc	status,2,c
  3337  001782  D7F7               	goto	i2l2002
  3338  001784  0A50               	xorlw	80	; case 239
  3339  001786  B4D8               	btfsc	status,2,c
  3340  001788  D7F1               	goto	i2l1998
  3341                           
  3342                           ;main.c: 105: }
  3343  00178A  D019               	goto	i2l169
  3344  00178C                     i2l2008:
  3345                           
  3346                           ;main.c: 108: lcdInst(0b10000000);
  3347  00178C  0E80               	movlw	128
  3348  00178E  ECAC  F00E         	call	i2_lcdInst
  3349                           
  3350                           ;main.c: 109: printf("bad interrupt");
  3351  001792  0E7B               	movlw	low STR_1
  3352  001794  6E0D               	movwf	i2printf@f,c
  3353  001796  0E10               	movlw	high STR_1
  3354  001798  6E0E               	movwf	i2printf@f+1,c
  3355  00179A  EC10  F00A         	call	i2_printf	;wreg free
  3356                           
  3357                           ;main.c: 110: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  3358  00179E  0E00               	movlw	0
  3359  0017A0  6E2C               	movwf	isr@i,c
  3360  0017A2                     i2l2014:
  3361  0017A2  0E63               	movlw	99
  3362  0017A4  642C               	cpfsgt	isr@i,c
  3363  0017A6  D001               	goto	i2l2018
  3364  0017A8  D7F1               	goto	i2l2008
  3365  0017AA                     i2l2018:
  3366  0017AA  0E21               	movlw	33
  3367  0017AC  6E1D               	movwf	??_isr& (0+255),c
  3368  0017AE  0E76               	movlw	118
  3369  0017B0                     i2u192_47:
  3370  0017B0  2EE8               	decfsz	wreg,f,c
  3371  0017B2  D7FE               	bra	i2u192_47
  3372  0017B4  2E1D               	decfsz	??_isr& (0+255),f,c
  3373  0017B6  D7FC               	bra	i2u192_47
  3374  0017B8  D000               	nop2	
  3375  0017BA  2A2C               	incf	isr@i,f,c
  3376  0017BC  D7F2               	goto	i2l2014
  3377  0017BE                     i2l169:
  3378                           
  3379                           ;main.c: 111: }
  3380                           ;main.c: 112: }
  3381                           ;main.c: 113: INT1IF = 0;
  3382  0017BE  90F0               	bcf	intcon3,0,c	;volatile
  3383                           
  3384                           ;main.c: 114: return;
  3385  0017C0  C02B  FFF5         	movff	??_isr+14,tablat
  3386  0017C4  C02A  FFF8         	movff	??_isr+13,tblptru
  3387  0017C8  C029  FFF7         	movff	??_isr+12,tblptrh
  3388  0017CC  C028  FFF6         	movff	??_isr+11,tblptrl
  3389  0017D0  C027  FFF4         	movff	??_isr+10,prodh
  3390  0017D4  C026  FFF3         	movff	??_isr+9,prodl
  3391  0017D8  C025  FFDA         	movff	??_isr+8,fsr2h
  3392  0017DC  C024  FFD9         	movff	??_isr+7,fsr2l
  3393  0017E0  C023  FFE2         	movff	??_isr+6,fsr1h
  3394  0017E4  C022  FFE1         	movff	??_isr+5,fsr1l
  3395  0017E8  C021  FFEA         	movff	??_isr+4,fsr0h
  3396  0017EC  C020  FFE9         	movff	??_isr+3,fsr0l
  3397  0017F0  C01F  FFFB         	movff	??_isr+2,pclatu
  3398  0017F4  C01E  FFFA         	movff	??_isr+1,pclath
  3399  0017F8  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3400  0017FA  0011               	retfie		f
  3401  0017FC                     __end_of_isr:
  3402                           	opt stack 0
  3403                           pclatu	equ	0xFFB
  3404                           pclath	equ	0xFFA
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           prodh	equ	0xFF4
  3410                           prodl	equ	0xFF3
  3411                           intcon	equ	0xFF2
  3412                           intcon2	equ	0xFF1
  3413                           intcon3	equ	0xFF0
  3414                           postinc0	equ	0xFEE
  3415                           fsr0h	equ	0xFEA
  3416                           fsr0l	equ	0xFE9
  3417                           wreg	equ	0xFE8
  3418                           fsr1h	equ	0xFE2
  3419                           fsr1l	equ	0xFE1
  3420                           indf2	equ	0xFDF
  3421                           postinc2	equ	0xFDE
  3422                           postdec2	equ	0xFDD
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function i2_printf *****************
  3428 ;; Defined at:
  3429 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;  f               2   12[COMRAM] PTR const unsigned char 
  3432 ;;		 -> STR_5(23), STR_4(23), STR_3(13), STR_2(17), 
  3433 ;;		 -> STR_1(14), 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  printf          4    0        struct .
  3436 ;;  printf          3    0        PTR const unsigned char 
  3437 ;;  printf          2   25[COMRAM] int 
  3438 ;;  printf          2   22[COMRAM] unsigned int 
  3439 ;;  printf          2   19[COMRAM] PTR void [1]
  3440 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3441 ;;  printf          2    0        unsigned int 
  3442 ;;  printf          1   27[COMRAM] char 
  3443 ;;  printf          1   24[COMRAM] unsigned char 
  3444 ;;  printf          1   21[COMRAM] char 
  3445 ;;  printf          1   18[COMRAM] unsigned char 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  2   12[COMRAM] int 
  3448 ;; Registers used:
  3449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3455 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;Total ram usage:       16 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    2
  3462 ;; This function calls:
  3463 ;;		i2___lwdiv
  3464 ;;		i2___lwmod
  3465 ;;		i2___wmul
  3466 ;;		i2_isdigit
  3467 ;;		i2_putch
  3468 ;; This function is called by:
  3469 ;;		_isr
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text22
  3474  001420                     __ptext22:
  3475                           	opt stack 0
  3476  001420                     i2_printf:
  3477                           	opt stack 23
  3478                           
  3479                           ;doprnt.c: 466: va_list ap;
  3480                           ;doprnt.c: 499: signed char c;
  3481                           ;doprnt.c: 501: int width;
  3482                           ;doprnt.c: 506: signed char prec;
  3483                           ;doprnt.c: 508: unsigned char flag;
  3484                           ;doprnt.c: 523: union {
  3485                           ;doprnt.c: 524: unsigned long vd;
  3486                           ;doprnt.c: 525: double integ;
  3487                           ;doprnt.c: 526: } tmpval;
  3488                           ;doprnt.c: 528: unsigned int val;
  3489                           ;doprnt.c: 529: unsigned len;
  3490                           ;doprnt.c: 530: const char * cp;
  3491                           ;doprnt.c: 533: *ap = __va_start();
  3492                           
  3493                           ;incstack = 0
  3494  001420  0E0F               	movlw	low (?i2_printf+2)
  3495  001422  6E14               	movwf	i2printf@ap,c
  3496  001424  0E00               	movlw	high (?i2_printf+2)
  3497  001426  6E15               	movwf	i2printf@ap+1,c
  3498                           
  3499                           ;doprnt.c: 536: while(c = *f++) {
  3500  001428  D174               	goto	i2l1962
  3501  00142A                     i2l1836:
  3502                           
  3503                           ;doprnt.c: 538: if(c != '%')
  3504  00142A  0E25               	movlw	37
  3505  00142C  181C               	xorwf	i2printf@c,w,c
  3506  00142E  B4D8               	btfsc	status,2,c
  3507  001430  D004               	goto	i2l1840
  3508                           
  3509                           ;doprnt.c: 540: {
  3510                           ;doprnt.c: 541: (putch(c) );
  3511  001432  501C               	movf	i2printf@c,w,c
  3512  001434  ECA6  F00E         	call	i2_putch
  3513                           
  3514                           ;doprnt.c: 542: continue;
  3515  001438  D16C               	goto	i2l1962
  3516  00143A                     i2l1840:
  3517                           
  3518                           ;doprnt.c: 543: }
  3519                           ;doprnt.c: 546: width = 0;
  3520  00143A  0E00               	movlw	0
  3521  00143C  6E1B               	movwf	i2printf@width+1,c
  3522  00143E  0E00               	movlw	0
  3523  001440  6E1A               	movwf	i2printf@width,c
  3524                           
  3525                           ;doprnt.c: 548: flag = 0;
  3526  001442  0E00               	movlw	0
  3527  001444  6E19               	movwf	i2printf@flag,c
  3528                           
  3529                           ;doprnt.c: 551: switch(*f) {
  3530                           
  3531                           ;doprnt.c: 550: for(;;) {
  3532  001446  D003               	goto	i2l1846
  3533  001448                     i2l1842:
  3534                           
  3535                           ;doprnt.c: 580: flag |= 0x04;
  3536  001448  8419               	bsf	i2printf@flag,2,c
  3537                           
  3538                           ;doprnt.c: 581: f++;
  3539  00144A  4A0D               	infsnz	i2printf@f,f,c
  3540  00144C  2A0E               	incf	i2printf@f+1,f,c
  3541  00144E                     i2l1846:
  3542  00144E  C00D  FFF6         	movff	i2printf@f,tblptrl
  3543  001452  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3544  001456                     	if	0	;tblptru may be non-zero
  3545  001456                     	endif
  3546  001456                     	if	0	;tblptru may be non-zero
  3547  001456                     	endif
  3548  001456  0008               	tblrd		*
  3549  001458  50F5               	movf	tablat,w,c
  3550                           
  3551                           ; Switch size 1, requested type "space"
  3552                           ; Number of cases is 1, Range of values is 48 to 48
  3553                           ; switch strategies available:
  3554                           ; Name         Instructions Cycles
  3555                           ; simple_byte            4     3 (average)
  3556                           ;	Chosen strategy is simple_byte
  3557  00145A  0A30               	xorlw	48	; case 48
  3558  00145C  B4D8               	btfsc	status,2,c
  3559  00145E  D7F4               	goto	i2l1842
  3560                           
  3561                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3562                           
  3563                           ;doprnt.c: 586: }
  3564                           
  3565                           ;doprnt.c: 585: break;
  3566  001460  C00D  FFF6         	movff	i2printf@f,tblptrl
  3567  001464  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3568  001468                     	if	0	;tblptru may be non-zero
  3569  001468                     	endif
  3570  001468                     	if	0	;tblptru may be non-zero
  3571  001468                     	endif
  3572  001468  0008               	tblrd		*
  3573  00146A  50F5               	movf	tablat,w,c
  3574  00146C  EC75  F00E         	call	i2_isdigit
  3575  001470  A0D8               	btfss	status,0,c
  3576  001472  D035               	goto	i2l1864
  3577                           
  3578                           ;doprnt.c: 598: width = 0;
  3579  001474  0E00               	movlw	0
  3580  001476  6E1B               	movwf	i2printf@width+1,c
  3581  001478  0E00               	movlw	0
  3582  00147A  6E1A               	movwf	i2printf@width,c
  3583  00147C                     i2l1852:
  3584                           
  3585                           ;doprnt.c: 600: width *= 10;
  3586  00147C  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  3587  001480  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  3588  001484  0E00               	movlw	0
  3589  001486  6E04               	movwf	i2___wmul@multiplicand+1,c
  3590  001488  0E0A               	movlw	10
  3591  00148A  6E03               	movwf	i2___wmul@multiplicand,c
  3592  00148C  EC53  F00E         	call	i2___wmul	;wreg free
  3593  001490  C001  F01A         	movff	?i2___wmul,i2printf@width
  3594  001494  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  3595                           
  3596                           ;doprnt.c: 601: width += *f++ - '0';
  3597  001498  0ED0               	movlw	208
  3598  00149A  6E0F               	movwf	??i2_printf& (0+255),c
  3599  00149C  0EFF               	movlw	255
  3600  00149E  6E10               	movwf	(??i2_printf+1)& (0+255),c
  3601  0014A0  C00D  FFF6         	movff	i2printf@f,tblptrl
  3602  0014A4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3603  0014A8                     	if	0	;tblptru may be non-zero
  3604  0014A8                     	endif
  3605  0014A8                     	if	0	;tblptru may be non-zero
  3606  0014A8                     	endif
  3607  0014A8  0008               	tblrd		*
  3608  0014AA  50F5               	movf	tablat,w,c
  3609  0014AC  6E11               	movwf	(??i2_printf+2)& (0+255),c
  3610  0014AE  6A12               	clrf	(??i2_printf+3)& (0+255),c
  3611  0014B0  500F               	movf	??i2_printf,w,c
  3612  0014B2  2611               	addwf	??i2_printf+2,f,c
  3613  0014B4  5010               	movf	??i2_printf+1,w,c
  3614  0014B6  2212               	addwfc	??i2_printf+3,f,c
  3615  0014B8  5011               	movf	??i2_printf+2,w,c
  3616  0014BA  261A               	addwf	i2printf@width,f,c
  3617  0014BC  5012               	movf	??i2_printf+3,w,c
  3618  0014BE  221B               	addwfc	i2printf@width+1,f,c
  3619  0014C0  4A0D               	infsnz	i2printf@f,f,c
  3620  0014C2  2A0E               	incf	i2printf@f+1,f,c
  3621                           
  3622                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3623  0014C4  C00D  FFF6         	movff	i2printf@f,tblptrl
  3624  0014C8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3625  0014CC                     	if	0	;tblptru may be non-zero
  3626  0014CC                     	endif
  3627  0014CC                     	if	0	;tblptru may be non-zero
  3628  0014CC                     	endif
  3629  0014CC  0008               	tblrd		*
  3630  0014CE  50F5               	movf	tablat,w,c
  3631  0014D0  EC75  F00E         	call	i2_isdigit
  3632  0014D4  A0D8               	btfss	status,0,c
  3633  0014D6  D003               	goto	i2l1864
  3634  0014D8  D7D1               	goto	i2l1852
  3635  0014DA                     i2l1860:
  3636                           
  3637                           ;doprnt.c: 721: flag |= 0x80;
  3638  0014DA  8E19               	bsf	i2printf@flag,7,c
  3639                           
  3640                           ;doprnt.c: 723: break;
  3641  0014DC  D017               	goto	i2l226
  3642  0014DE                     i2l1864:
  3643  0014DE  C00D  FFF6         	movff	i2printf@f,tblptrl
  3644  0014E2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3645  0014E6  4A0D               	infsnz	i2printf@f,f,c
  3646  0014E8  2A0E               	incf	i2printf@f+1,f,c
  3647  0014EA                     	if	0	;tblptru may be non-zero
  3648  0014EA                     	endif
  3649  0014EA                     	if	0	;tblptru may be non-zero
  3650  0014EA                     	endif
  3651  0014EA  0008               	tblrd		*
  3652  0014EC  CFF5 F01C          	movff	tablat,i2printf@c
  3653  0014F0  501C               	movf	i2printf@c,w,c
  3654                           
  3655                           ; Switch size 1, requested type "space"
  3656                           ; Number of cases is 4, Range of values is 0 to 120
  3657                           ; switch strategies available:
  3658                           ; Name         Instructions Cycles
  3659                           ; simple_byte           13     7 (average)
  3660                           ;	Chosen strategy is simple_byte
  3661  0014F2  0A00               	xorlw	0	; case 0
  3662  0014F4  B4D8               	btfsc	status,2,c
  3663  0014F6  0012               	return	
  3664  0014F8  0A64               	xorlw	100	; case 100
  3665  0014FA  B4D8               	btfsc	status,2,c
  3666  0014FC  D007               	goto	i2l226
  3667  0014FE  0A0D               	xorlw	13	; case 105
  3668  001500  B4D8               	btfsc	status,2,c
  3669  001502  D004               	goto	i2l226
  3670  001504  0A11               	xorlw	17	; case 120
  3671  001506  B4D8               	btfsc	status,2,c
  3672  001508  D7E8               	goto	i2l1860
  3673  00150A  D103               	goto	i2l1962
  3674  00150C                     i2l226:
  3675                           
  3676                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3677  00150C  BE19               	btfsc	i2printf@flag,7,c
  3678  00150E  D015               	goto	i2l1876
  3679                           
  3680                           ;doprnt.c: 1253: {
  3681                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3682  001510  C014  FFD9         	movff	i2printf@ap,fsr2l
  3683  001514  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  3684  001518  CFDE F017          	movff	postinc2,i2printf@val
  3685  00151C  CFDD F018          	movff	postdec2,i2printf@val+1
  3686  001520  0E02               	movlw	2
  3687  001522  2614               	addwf	i2printf@ap,f,c
  3688  001524  0E00               	movlw	0
  3689  001526  2215               	addwfc	i2printf@ap+1,f,c
  3690                           
  3691                           ;doprnt.c: 1261: if((int)val < 0) {
  3692  001528  AE18               	btfss	i2printf@val+1,7,c
  3693  00152A  D044               	goto	i2l1910
  3694                           
  3695                           ;doprnt.c: 1262: flag |= 0x03;
  3696  00152C  0E03               	movlw	3
  3697  00152E  1219               	iorwf	i2printf@flag,f,c
  3698                           
  3699                           ;doprnt.c: 1263: val = -val;
  3700  001530  6C17               	negf	i2printf@val,c
  3701  001532  1E18               	comf	i2printf@val+1,f,c
  3702  001534  B0D8               	btfsc	status,0,c
  3703  001536  2A18               	incf	i2printf@val+1,f,c
  3704                           
  3705                           ;doprnt.c: 1264: }
  3706                           ;doprnt.c: 1266: }
  3707  001538  D03D               	goto	i2l1910
  3708  00153A                     i2l1876:
  3709                           
  3710                           ;doprnt.c: 1268: else
  3711                           ;doprnt.c: 1273: {
  3712                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3713  00153A  C014  FFD9         	movff	i2printf@ap,fsr2l
  3714  00153E  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  3715  001542  CFDE F017          	movff	postinc2,i2printf@val
  3716  001546  CFDD F018          	movff	postdec2,i2printf@val+1
  3717  00154A  0E02               	movlw	2
  3718  00154C  2614               	addwf	i2printf@ap,f,c
  3719  00154E  0E00               	movlw	0
  3720  001550  2215               	addwfc	i2printf@ap+1,f,c
  3721                           
  3722                           ;doprnt.c: 1287: }
  3723                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3724  001552  D030               	goto	i2l1910
  3725  001554                     i2l1880:
  3726                           
  3727                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3728  001554  0E01               	movlw	1
  3729  001556  6E1C               	movwf	i2printf@c,c
  3730  001558                     i2l1882:
  3731  001558  0E05               	movlw	5
  3732  00155A  181C               	xorwf	i2printf@c,w,c
  3733  00155C  B4D8               	btfsc	status,2,c
  3734  00155E  D032               	goto	i2l1912
  3735                           
  3736                           ;doprnt.c: 1306: if(val < dpowers[c])
  3737  001560  501C               	movf	i2printf@c,w,c
  3738  001562  0D02               	mullw	2
  3739  001564  0E12               	movlw	low _dpowers
  3740  001566  24F3               	addwf	prodl,w,c
  3741  001568  6EF6               	movwf	tblptrl,c
  3742  00156A  0E10               	movlw	high _dpowers
  3743  00156C  20F4               	addwfc	prodh,w,c
  3744  00156E  6EF7               	movwf	tblptrh,c
  3745  001570                     	if	0	;There are less than 3 active tblptr bytes
  3746  001570                     	endif
  3747  001570  0009               	tblrd		*+
  3748  001572  50F5               	movf	tablat,w,c
  3749  001574  5C17               	subwf	i2printf@val,w,c
  3750  001576  0009               	tblrd		*+
  3751  001578  50F5               	movf	tablat,w,c
  3752  00157A  5818               	subwfb	i2printf@val+1,w,c
  3753  00157C  A0D8               	btfss	status,0,c
  3754  00157E  D022               	goto	i2l1912
  3755                           
  3756                           ;doprnt.c: 1307: break;
  3757  001580  2A1C               	incf	i2printf@c,f,c
  3758  001582  D7EA               	goto	i2l1882
  3759  001584                     i2l1894:
  3760                           
  3761                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3762  001584  0E01               	movlw	1
  3763  001586  6E1C               	movwf	i2printf@c,c
  3764  001588                     i2l1896:
  3765  001588  0E04               	movlw	4
  3766  00158A  181C               	xorwf	i2printf@c,w,c
  3767  00158C  B4D8               	btfsc	status,2,c
  3768  00158E  D01A               	goto	i2l1912
  3769                           
  3770                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3771  001590  501C               	movf	i2printf@c,w,c
  3772  001592  0D02               	mullw	2
  3773  001594  0E1C               	movlw	low _hexpowers
  3774  001596  24F3               	addwf	prodl,w,c
  3775  001598  6EF6               	movwf	tblptrl,c
  3776  00159A  0E10               	movlw	high _hexpowers
  3777  00159C  20F4               	addwfc	prodh,w,c
  3778  00159E  6EF7               	movwf	tblptrh,c
  3779  0015A0                     	if	0	;There are less than 3 active tblptr bytes
  3780  0015A0                     	endif
  3781  0015A0  0009               	tblrd		*+
  3782  0015A2  50F5               	movf	tablat,w,c
  3783  0015A4  5C17               	subwf	i2printf@val,w,c
  3784  0015A6  0009               	tblrd		*+
  3785  0015A8  50F5               	movf	tablat,w,c
  3786  0015AA  5818               	subwfb	i2printf@val+1,w,c
  3787  0015AC  A0D8               	btfss	status,0,c
  3788  0015AE  D00A               	goto	i2l1912
  3789                           
  3790                           ;doprnt.c: 1318: break;
  3791  0015B0  2A1C               	incf	i2printf@c,f,c
  3792  0015B2  D7EA               	goto	i2l1896
  3793  0015B4                     i2l1910:
  3794  0015B4  5019               	movf	i2printf@flag,w,c
  3795  0015B6  0B80               	andlw	128
  3796                           
  3797                           ; Switch size 1, requested type "space"
  3798                           ; Number of cases is 2, Range of values is 0 to 128
  3799                           ; switch strategies available:
  3800                           ; Name         Instructions Cycles
  3801                           ; simple_byte            7     4 (average)
  3802                           ;	Chosen strategy is simple_byte
  3803  0015B8  0A00               	xorlw	0	; case 0
  3804  0015BA  B4D8               	btfsc	status,2,c
  3805  0015BC  D7CB               	goto	i2l1880
  3806  0015BE  0A80               	xorlw	128	; case 128
  3807  0015C0  B4D8               	btfsc	status,2,c
  3808  0015C2  D7E0               	goto	i2l1894
  3809  0015C4                     i2l1912:
  3810                           
  3811                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3812  0015C4  501A               	movf	i2printf@width,w,c
  3813  0015C6  101B               	iorwf	i2printf@width+1,w,c
  3814  0015C8  B4D8               	btfsc	status,2,c
  3815  0015CA  D009               	goto	i2l1918
  3816  0015CC  C019  F00F         	movff	i2printf@flag,??i2_printf
  3817  0015D0  0E03               	movlw	3
  3818  0015D2  160F               	andwf	??i2_printf,f,c
  3819  0015D4  B4D8               	btfsc	status,2,c
  3820  0015D6  D003               	goto	i2l1918
  3821                           
  3822                           ;doprnt.c: 1346: width--;
  3823  0015D8  061A               	decf	i2printf@width,f,c
  3824  0015DA  A0D8               	btfss	status,0,c
  3825  0015DC  061B               	decf	i2printf@width+1,f,c
  3826  0015DE                     i2l1918:
  3827                           
  3828                           ;doprnt.c: 1381: if(width > c)
  3829  0015DE  0E80               	movlw	128
  3830  0015E0  BE1C               	btfsc	i2printf@c,7,c
  3831  0015E2  0E7F               	movlw	127
  3832  0015E4  6E0F               	movwf	??i2_printf& (0+255),c
  3833  0015E6  501A               	movf	i2printf@width,w,c
  3834  0015E8  5C1C               	subwf	i2printf@c,w,c
  3835  0015EA  501B               	movf	i2printf@width+1,w,c
  3836  0015EC  0A80               	xorlw	128
  3837  0015EE  580F               	subwfb	??i2_printf& (0+255),w,c
  3838  0015F0  B0D8               	btfsc	status,0,c
  3839  0015F2  D007               	goto	i2l1922
  3840                           
  3841                           ;doprnt.c: 1382: width -= c;
  3842  0015F4  501C               	movf	i2printf@c,w,c
  3843  0015F6  5E1A               	subwf	i2printf@width,f,c
  3844  0015F8  0E00               	movlw	0
  3845  0015FA  BE1C               	btfsc	i2printf@c,7,c
  3846  0015FC  0EFF               	movlw	255
  3847  0015FE  5A1B               	subwfb	i2printf@width+1,f,c
  3848  001600  D004               	goto	i2l1924
  3849  001602                     i2l1922:
  3850                           
  3851                           ;doprnt.c: 1383: else
  3852                           ;doprnt.c: 1384: width = 0;
  3853  001602  0E00               	movlw	0
  3854  001604  6E1B               	movwf	i2printf@width+1,c
  3855  001606  0E00               	movlw	0
  3856  001608  6E1A               	movwf	i2printf@width,c
  3857  00160A                     i2l1924:
  3858                           
  3859                           ;doprnt.c: 1387: if(flag & 0x04) {
  3860  00160A  A419               	btfss	i2printf@flag,2,c
  3861  00160C  D014               	goto	i2l1936
  3862                           
  3863                           ;doprnt.c: 1392: if(flag & 0x03)
  3864  00160E  C019  F00F         	movff	i2printf@flag,??i2_printf
  3865  001612  0E03               	movlw	3
  3866  001614  160F               	andwf	??i2_printf,f,c
  3867  001616  B4D8               	btfsc	status,2,c
  3868  001618  D003               	goto	i2l1930
  3869                           
  3870                           ;doprnt.c: 1393: (putch('-') );
  3871  00161A  0E2D               	movlw	45
  3872  00161C  ECA6  F00E         	call	i2_putch
  3873  001620                     i2l1930:
  3874                           
  3875                           ;doprnt.c: 1415: if(width)
  3876  001620  501A               	movf	i2printf@width,w,c
  3877  001622  101B               	iorwf	i2printf@width+1,w,c
  3878  001624  B4D8               	btfsc	status,2,c
  3879  001626  D01E               	goto	i2l1946
  3880                           
  3881                           ;doprnt.c: 1417: (putch('0') );
  3882                           
  3883                           ;doprnt.c: 1416: do
  3884  001628  0E30               	movlw	48
  3885  00162A  ECA6  F00E         	call	i2_putch
  3886                           
  3887                           ;doprnt.c: 1418: while(--width);
  3888  00162E  061A               	decf	i2printf@width,f,c
  3889  001630  A0D8               	btfss	status,0,c
  3890  001632  061B               	decf	i2printf@width+1,f,c
  3891  001634  D7F5               	goto	i2l1930
  3892  001636                     i2l1936:
  3893                           
  3894                           ;doprnt.c: 1422: {
  3895                           ;doprnt.c: 1424: if(width
  3896                           ;doprnt.c: 1428: )
  3897  001636  501A               	movf	i2printf@width,w,c
  3898  001638  101B               	iorwf	i2printf@width+1,w,c
  3899  00163A  B4D8               	btfsc	status,2,c
  3900  00163C  D00A               	goto	i2l1942
  3901  00163E                     i2l1938:
  3902                           
  3903                           ;doprnt.c: 1430: (putch(' ') );
  3904  00163E  0E20               	movlw	32
  3905  001640  ECA6  F00E         	call	i2_putch
  3906                           
  3907                           ;doprnt.c: 1431: while(--width);
  3908  001644  061A               	decf	i2printf@width,f,c
  3909  001646  A0D8               	btfss	status,0,c
  3910  001648  061B               	decf	i2printf@width+1,f,c
  3911  00164A  501A               	movf	i2printf@width,w,c
  3912  00164C  101B               	iorwf	i2printf@width+1,w,c
  3913  00164E  A4D8               	btfss	status,2,c
  3914  001650  D7F6               	goto	i2l1938
  3915  001652                     i2l1942:
  3916                           
  3917                           ;doprnt.c: 1438: if(flag & 0x03)
  3918  001652  C019  F00F         	movff	i2printf@flag,??i2_printf
  3919  001656  0E03               	movlw	3
  3920  001658  160F               	andwf	??i2_printf,f,c
  3921  00165A  B4D8               	btfsc	status,2,c
  3922  00165C  D003               	goto	i2l1946
  3923                           
  3924                           ;doprnt.c: 1439: (putch('-') );
  3925  00165E  0E2D               	movlw	45
  3926  001660  ECA6  F00E         	call	i2_putch
  3927  001664                     i2l1946:
  3928                           
  3929                           ;doprnt.c: 1469: }
  3930                           ;doprnt.c: 1472: prec = c;
  3931  001664  C01C  F016         	movff	i2printf@c,i2printf@prec
  3932                           
  3933                           ;doprnt.c: 1474: while(prec--) {
  3934  001668  D050               	goto	i2l1960
  3935  00166A                     i2l1948:
  3936                           
  3937                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3938  00166A  5016               	movf	i2printf@prec,w,c
  3939  00166C  0D02               	mullw	2
  3940  00166E  0E12               	movlw	low _dpowers
  3941  001670  24F3               	addwf	prodl,w,c
  3942  001672  6EF6               	movwf	tblptrl,c
  3943  001674  0E10               	movlw	high _dpowers
  3944  001676  20F4               	addwfc	prodh,w,c
  3945  001678  6EF7               	movwf	tblptrh,c
  3946  00167A                     	if	0	;There are less than 3 active tblptr bytes
  3947  00167A                     	endif
  3948  00167A  0009               	tblrd		*+
  3949  00167C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3950  001680  000A               	tblrd		*-
  3951  001682  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3952  001686  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  3953  00168A  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  3954  00168E  EC38  F00D         	call	i2___lwdiv	;wreg free
  3955  001692  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  3956  001696  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  3957  00169A  0E00               	movlw	0
  3958  00169C  6E0B               	movwf	i2___lwmod@divisor+1,c
  3959  00169E  0E0A               	movlw	10
  3960  0016A0  6E0A               	movwf	i2___lwmod@divisor,c
  3961  0016A2  ECF6  F00D         	call	i2___lwmod	;wreg free
  3962  0016A6  5008               	movf	?i2___lwmod,w,c
  3963  0016A8  0F30               	addlw	48
  3964  0016AA  6E1C               	movwf	i2printf@c,c
  3965                           
  3966                           ;doprnt.c: 1491: break;
  3967  0016AC  D02B               	goto	i2l1958
  3968  0016AE                     i2l1950:
  3969                           
  3970                           ;doprnt.c: 1499: {
  3971                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3972  0016AE  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  3973  0016B2  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  3974  0016B6  5016               	movf	i2printf@prec,w,c
  3975  0016B8  0D02               	mullw	2
  3976  0016BA  0E1C               	movlw	low _hexpowers
  3977  0016BC  24F3               	addwf	prodl,w,c
  3978  0016BE  6EF6               	movwf	tblptrl,c
  3979  0016C0  0E10               	movlw	high _hexpowers
  3980  0016C2  20F4               	addwfc	prodh,w,c
  3981  0016C4  6EF7               	movwf	tblptrh,c
  3982  0016C6                     	if	0	;There are less than 3 active tblptr bytes
  3983  0016C6                     	endif
  3984  0016C6  0009               	tblrd		*+
  3985  0016C8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3986  0016CC  000A               	tblrd		*-
  3987  0016CE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3988  0016D2  EC38  F00D         	call	i2___lwdiv	;wreg free
  3989  0016D6  5001               	movf	?i2___lwdiv,w,c
  3990  0016D8  0B0F               	andlw	15
  3991  0016DA  6E13               	movwf	i2printf@idx,c
  3992                           
  3993                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3994  0016DC  5013               	movf	i2printf@idx,w,c
  3995  0016DE  0D01               	mullw	1
  3996  0016E0  0E59               	movlw	low STR_6
  3997  0016E2  24F3               	addwf	prodl,w,c
  3998  0016E4  6EF6               	movwf	tblptrl,c
  3999  0016E6  0E10               	movlw	high STR_6
  4000  0016E8  20F4               	addwfc	prodh,w,c
  4001  0016EA  6EF7               	movwf	tblptrh,c
  4002  0016EC                     	if	0	;There are less than 3 active tblptr bytes
  4003  0016EC                     	endif
  4004  0016EC  0008               	tblrd		*
  4005  0016EE  CFF5 F01C          	movff	tablat,i2printf@c
  4006                           
  4007                           ;doprnt.c: 1523: }
  4008                           
  4009                           ;doprnt.c: 1508: }
  4010                           ;doprnt.c: 1510: break;
  4011  0016F2  D008               	goto	i2l1958
  4012  0016F4                     i2l1956:
  4013  0016F4  5019               	movf	i2printf@flag,w,c
  4014  0016F6  0B80               	andlw	128
  4015                           
  4016                           ; Switch size 1, requested type "space"
  4017                           ; Number of cases is 2, Range of values is 0 to 128
  4018                           ; switch strategies available:
  4019                           ; Name         Instructions Cycles
  4020                           ; simple_byte            7     4 (average)
  4021                           ;	Chosen strategy is simple_byte
  4022  0016F8  0A00               	xorlw	0	; case 0
  4023  0016FA  B4D8               	btfsc	status,2,c
  4024  0016FC  D7B6               	goto	i2l1948
  4025  0016FE  0A80               	xorlw	128	; case 128
  4026  001700  B4D8               	btfsc	status,2,c
  4027  001702  D7D5               	goto	i2l1950
  4028  001704                     i2l1958:
  4029                           
  4030                           ;doprnt.c: 1524: (putch(c) );
  4031  001704  501C               	movf	i2printf@c,w,c
  4032  001706  ECA6  F00E         	call	i2_putch
  4033  00170A                     i2l1960:
  4034  00170A  0616               	decf	i2printf@prec,f,c
  4035  00170C  2816               	incf	i2printf@prec,w,c
  4036  00170E  A4D8               	btfss	status,2,c
  4037  001710  D7F1               	goto	i2l1956
  4038  001712                     i2l1962:
  4039  001712  C00D  FFF6         	movff	i2printf@f,tblptrl
  4040  001716  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4041  00171A  4A0D               	infsnz	i2printf@f,f,c
  4042  00171C  2A0E               	incf	i2printf@f+1,f,c
  4043  00171E                     	if	0	;tblptru may be non-zero
  4044  00171E                     	endif
  4045  00171E                     	if	0	;tblptru may be non-zero
  4046  00171E                     	endif
  4047  00171E  0008               	tblrd		*
  4048  001720  CFF5 F01C          	movff	tablat,i2printf@c
  4049  001724  501C               	movf	i2printf@c,w,c
  4050  001726  B4D8               	btfsc	status,2,c
  4051  001728  0012               	return	
  4052  00172A  D67F               	goto	i2l1836
  4053  00172C                     __end_ofi2_printf:
  4054                           	opt stack 0
  4055                           pclatu	equ	0xFFB
  4056                           pclath	equ	0xFFA
  4057                           tblptru	equ	0xFF8
  4058                           tblptrh	equ	0xFF7
  4059                           tblptrl	equ	0xFF6
  4060                           tablat	equ	0xFF5
  4061                           prodh	equ	0xFF4
  4062                           prodl	equ	0xFF3
  4063                           intcon	equ	0xFF2
  4064                           intcon2	equ	0xFF1
  4065                           intcon3	equ	0xFF0
  4066                           postinc0	equ	0xFEE
  4067                           fsr0h	equ	0xFEA
  4068                           fsr0l	equ	0xFE9
  4069                           wreg	equ	0xFE8
  4070                           fsr1h	equ	0xFE2
  4071                           fsr1l	equ	0xFE1
  4072                           indf2	equ	0xFDF
  4073                           postinc2	equ	0xFDE
  4074                           postdec2	equ	0xFDD
  4075                           fsr2h	equ	0xFDA
  4076                           fsr2l	equ	0xFD9
  4077                           status	equ	0xFD8
  4078                           
  4079 ;; *************** function i2_putch *****************
  4080 ;; Defined at:
  4081 ;;		line 31 in file "lcd.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;  data            1    wreg     unsigned char 
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;  data            1    2[COMRAM] unsigned char 
  4086 ;; Return value:  Size  Location     Type
  4087 ;;                  1    wreg      void 
  4088 ;; Registers used:
  4089 ;;		wreg, status,2, status,0, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;Total ram usage:        1 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    1
  4102 ;; This function calls:
  4103 ;;		i2_lcdNibble
  4104 ;; This function is called by:
  4105 ;;		i2_printf
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text23
  4110  001D4C                     __ptext23:
  4111                           	opt stack 0
  4112  001D4C                     i2_putch:
  4113                           	opt stack 23
  4114                           
  4115                           ;incstack = 0
  4116                           ;i2putch@data stored from wreg
  4117  001D4C  6E03               	movwf	i2putch@data,c
  4118                           
  4119                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4120  001D4E  848C               	bsf	3980,2,c	;volatile
  4121                           
  4122                           ;lcd.c: 33: lcdNibble(data);
  4123  001D50  5003               	movf	i2putch@data,w,c
  4124  001D52  EC88  F00D         	call	i2_lcdNibble
  4125  001D56  0012               	return		;funcret
  4126  001D58                     __end_ofi2_putch:
  4127                           	opt stack 0
  4128                           pclatu	equ	0xFFB
  4129                           pclath	equ	0xFFA
  4130                           tblptru	equ	0xFF8
  4131                           tblptrh	equ	0xFF7
  4132                           tblptrl	equ	0xFF6
  4133                           tablat	equ	0xFF5
  4134                           prodh	equ	0xFF4
  4135                           prodl	equ	0xFF3
  4136                           intcon	equ	0xFF2
  4137                           intcon2	equ	0xFF1
  4138                           intcon3	equ	0xFF0
  4139                           postinc0	equ	0xFEE
  4140                           fsr0h	equ	0xFEA
  4141                           fsr0l	equ	0xFE9
  4142                           wreg	equ	0xFE8
  4143                           fsr1h	equ	0xFE2
  4144                           fsr1l	equ	0xFE1
  4145                           indf2	equ	0xFDF
  4146                           postinc2	equ	0xFDE
  4147                           postdec2	equ	0xFDD
  4148                           fsr2h	equ	0xFDA
  4149                           fsr2l	equ	0xFD9
  4150                           status	equ	0xFD8
  4151                           
  4152 ;; *************** function i2_isdigit *****************
  4153 ;; Defined at:
  4154 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;  c               1    wreg     unsigned char 
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;  c               1    2[COMRAM] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, status,2, status,0
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;Total ram usage:        3 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		i2_printf
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text24
  4182  001CEA                     __ptext24:
  4183                           	opt stack 0
  4184  001CEA                     i2_isdigit:
  4185                           	opt stack 24
  4186                           
  4187                           ;incstack = 0
  4188                           ;i2isdigit@c stored from wreg
  4189  001CEA  6E03               	movwf	i2isdigit@c,c
  4190  001CEC  0E00               	movlw	0
  4191  001CEE  6E02               	movwf	i2_isdigit$506,c
  4192  001CF0  0E3A               	movlw	58
  4193  001CF2  6003               	cpfslt	i2isdigit@c,c
  4194  001CF4  D005               	goto	i2l1750
  4195  001CF6  0E2F               	movlw	47
  4196  001CF8  6403               	cpfsgt	i2isdigit@c,c
  4197  001CFA  D002               	goto	i2l1750
  4198  001CFC  0E01               	movlw	1
  4199  001CFE  6E02               	movwf	i2_isdigit$506,c
  4200  001D00                     i2l1750:
  4201  001D00  C002  F001         	movff	i2_isdigit$506,??i2_isdigit
  4202  001D04  3001               	rrcf	??i2_isdigit,w,c
  4203  001D06  0012               	return	
  4204  001D08                     __end_ofi2_isdigit:
  4205                           	opt stack 0
  4206                           pclatu	equ	0xFFB
  4207                           pclath	equ	0xFFA
  4208                           tblptru	equ	0xFF8
  4209                           tblptrh	equ	0xFF7
  4210                           tblptrl	equ	0xFF6
  4211                           tablat	equ	0xFF5
  4212                           prodh	equ	0xFF4
  4213                           prodl	equ	0xFF3
  4214                           intcon	equ	0xFF2
  4215                           intcon2	equ	0xFF1
  4216                           intcon3	equ	0xFF0
  4217                           postinc0	equ	0xFEE
  4218                           fsr0h	equ	0xFEA
  4219                           fsr0l	equ	0xFE9
  4220                           wreg	equ	0xFE8
  4221                           fsr1h	equ	0xFE2
  4222                           fsr1l	equ	0xFE1
  4223                           indf2	equ	0xFDF
  4224                           postinc2	equ	0xFDE
  4225                           postdec2	equ	0xFDD
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function i2___wmul *****************
  4231 ;; Defined at:
  4232 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  multiplier      2    0[COMRAM] unsigned int 
  4235 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  __wmul          2    4[COMRAM] unsigned int 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  2    0[COMRAM] unsigned int 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0, prodl, prodh
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;Total ram usage:        6 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; This function calls:
  4254 ;;		Nothing
  4255 ;; This function is called by:
  4256 ;;		i2_printf
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           	psect	text25
  4261  001CA6                     __ptext25:
  4262                           	opt stack 0
  4263  001CA6                     i2___wmul:
  4264                           	opt stack 24
  4265                           
  4266                           ;incstack = 0
  4267  001CA6  5001               	movf	i2___wmul@multiplier,w,c
  4268  001CA8  0203               	mulwf	i2___wmul@multiplicand,c
  4269  001CAA  CFF3 F005          	movff	prodl,i2___wmul@product
  4270  001CAE  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4271  001CB2  5001               	movf	i2___wmul@multiplier,w,c
  4272  001CB4  0204               	mulwf	i2___wmul@multiplicand+1,c
  4273  001CB6  50F3               	movf	prodl,w,c
  4274  001CB8  2606               	addwf	i2___wmul@product+1,f,c
  4275  001CBA  5002               	movf	i2___wmul@multiplier+1,w,c
  4276  001CBC  0203               	mulwf	i2___wmul@multiplicand,c
  4277  001CBE  50F3               	movf	prodl,w,c
  4278  001CC0  2606               	addwf	i2___wmul@product+1,f,c
  4279  001CC2  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4280  001CC6  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4281  001CCA  0012               	return	
  4282  001CCC                     __end_ofi2___wmul:
  4283                           	opt stack 0
  4284                           pclatu	equ	0xFFB
  4285                           pclath	equ	0xFFA
  4286                           tblptru	equ	0xFF8
  4287                           tblptrh	equ	0xFF7
  4288                           tblptrl	equ	0xFF6
  4289                           tablat	equ	0xFF5
  4290                           prodh	equ	0xFF4
  4291                           prodl	equ	0xFF3
  4292                           intcon	equ	0xFF2
  4293                           intcon2	equ	0xFF1
  4294                           intcon3	equ	0xFF0
  4295                           postinc0	equ	0xFEE
  4296                           fsr0h	equ	0xFEA
  4297                           fsr0l	equ	0xFE9
  4298                           wreg	equ	0xFE8
  4299                           fsr1h	equ	0xFE2
  4300                           fsr1l	equ	0xFE1
  4301                           indf2	equ	0xFDF
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function i2___lwmod *****************
  4309 ;; Defined at:
  4310 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  dividend        2    7[COMRAM] unsigned int 
  4313 ;;  divisor         2    9[COMRAM] unsigned int 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  2    7[COMRAM] unsigned int 
  4318 ;; Registers used:
  4319 ;;		wreg, status,2, status,0
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4325 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;Total ram usage:        5 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; This function calls:
  4332 ;;		Nothing
  4333 ;; This function is called by:
  4334 ;;		i2_printf
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text26
  4339  001BEC                     __ptext26:
  4340                           	opt stack 0
  4341  001BEC                     i2___lwmod:
  4342                           	opt stack 24
  4343                           
  4344                           ;incstack = 0
  4345  001BEC  500A               	movf	i2___lwmod@divisor,w,c
  4346  001BEE  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4347  001BF0  B4D8               	btfsc	status,2,c
  4348  001BF2  D018               	goto	i2l681
  4349  001BF4  0E01               	movlw	1
  4350  001BF6  6E0C               	movwf	i2___lwmod@counter,c
  4351  001BF8  D004               	goto	i2l1782
  4352  001BFA                     i2l1780:
  4353  001BFA  90D8               	bcf	status,0,c
  4354  001BFC  360A               	rlcf	i2___lwmod@divisor,f,c
  4355  001BFE  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4356  001C00  2A0C               	incf	i2___lwmod@counter,f,c
  4357  001C02                     i2l1782:
  4358  001C02  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4359  001C04  D7FA               	goto	i2l1780
  4360  001C06                     i2l1784:
  4361  001C06  500A               	movf	i2___lwmod@divisor,w,c
  4362  001C08  5C08               	subwf	i2___lwmod@dividend,w,c
  4363  001C0A  500B               	movf	i2___lwmod@divisor+1,w,c
  4364  001C0C  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4365  001C0E  A0D8               	btfss	status,0,c
  4366  001C10  D004               	goto	i2l1788
  4367  001C12  500A               	movf	i2___lwmod@divisor,w,c
  4368  001C14  5E08               	subwf	i2___lwmod@dividend,f,c
  4369  001C16  500B               	movf	i2___lwmod@divisor+1,w,c
  4370  001C18  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4371  001C1A                     i2l1788:
  4372  001C1A  90D8               	bcf	status,0,c
  4373  001C1C  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4374  001C1E  320A               	rrcf	i2___lwmod@divisor,f,c
  4375  001C20  2E0C               	decfsz	i2___lwmod@counter,f,c
  4376  001C22  D7F1               	goto	i2l1784
  4377  001C24                     i2l681:
  4378  001C24  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4379  001C28  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4380  001C2C  0012               	return		;funcret
  4381  001C2E                     __end_ofi2___lwmod:
  4382                           	opt stack 0
  4383                           pclatu	equ	0xFFB
  4384                           pclath	equ	0xFFA
  4385                           tblptru	equ	0xFF8
  4386                           tblptrh	equ	0xFF7
  4387                           tblptrl	equ	0xFF6
  4388                           tablat	equ	0xFF5
  4389                           prodh	equ	0xFF4
  4390                           prodl	equ	0xFF3
  4391                           intcon	equ	0xFF2
  4392                           intcon2	equ	0xFF1
  4393                           intcon3	equ	0xFF0
  4394                           postinc0	equ	0xFEE
  4395                           fsr0h	equ	0xFEA
  4396                           fsr0l	equ	0xFE9
  4397                           wreg	equ	0xFE8
  4398                           fsr1h	equ	0xFE2
  4399                           fsr1l	equ	0xFE1
  4400                           indf2	equ	0xFDF
  4401                           postinc2	equ	0xFDE
  4402                           postdec2	equ	0xFDD
  4403                           fsr2h	equ	0xFDA
  4404                           fsr2l	equ	0xFD9
  4405                           status	equ	0xFD8
  4406                           
  4407 ;; *************** function i2___lwdiv *****************
  4408 ;; Defined at:
  4409 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  dividend        2    0[COMRAM] unsigned int 
  4412 ;;  divisor         2    2[COMRAM] unsigned int 
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4415 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  2    0[COMRAM] unsigned int 
  4418 ;; Registers used:
  4419 ;;		wreg, status,2, status,0
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;Total ram usage:        7 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; This function calls:
  4432 ;;		Nothing
  4433 ;; This function is called by:
  4434 ;;		i2_printf
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           	psect	text27
  4439  001A70                     __ptext27:
  4440                           	opt stack 0
  4441  001A70                     i2___lwdiv:
  4442                           	opt stack 24
  4443                           
  4444                           ;incstack = 0
  4445  001A70  0E00               	movlw	0
  4446  001A72  6E06               	movwf	i2___lwdiv@quotient+1,c
  4447  001A74  0E00               	movlw	0
  4448  001A76  6E05               	movwf	i2___lwdiv@quotient,c
  4449  001A78  5003               	movf	i2___lwdiv@divisor,w,c
  4450  001A7A  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4451  001A7C  B4D8               	btfsc	status,2,c
  4452  001A7E  D01C               	goto	i2l671
  4453  001A80  0E01               	movlw	1
  4454  001A82  6E07               	movwf	i2___lwdiv@counter,c
  4455  001A84  D004               	goto	i2l1762
  4456  001A86                     i2l1760:
  4457  001A86  90D8               	bcf	status,0,c
  4458  001A88  3603               	rlcf	i2___lwdiv@divisor,f,c
  4459  001A8A  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4460  001A8C  2A07               	incf	i2___lwdiv@counter,f,c
  4461  001A8E                     i2l1762:
  4462  001A8E  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4463  001A90  D7FA               	goto	i2l1760
  4464  001A92                     i2l1764:
  4465  001A92  90D8               	bcf	status,0,c
  4466  001A94  3605               	rlcf	i2___lwdiv@quotient,f,c
  4467  001A96  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4468  001A98  5003               	movf	i2___lwdiv@divisor,w,c
  4469  001A9A  5C01               	subwf	i2___lwdiv@dividend,w,c
  4470  001A9C  5004               	movf	i2___lwdiv@divisor+1,w,c
  4471  001A9E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4472  001AA0  A0D8               	btfss	status,0,c
  4473  001AA2  D005               	goto	i2l1772
  4474  001AA4  5003               	movf	i2___lwdiv@divisor,w,c
  4475  001AA6  5E01               	subwf	i2___lwdiv@dividend,f,c
  4476  001AA8  5004               	movf	i2___lwdiv@divisor+1,w,c
  4477  001AAA  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4478  001AAC  8005               	bsf	i2___lwdiv@quotient,0,c
  4479  001AAE                     i2l1772:
  4480  001AAE  90D8               	bcf	status,0,c
  4481  001AB0  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4482  001AB2  3203               	rrcf	i2___lwdiv@divisor,f,c
  4483  001AB4  2E07               	decfsz	i2___lwdiv@counter,f,c
  4484  001AB6  D7ED               	goto	i2l1764
  4485  001AB8                     i2l671:
  4486  001AB8  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4487  001ABC  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4488  001AC0  0012               	return		;funcret
  4489  001AC2                     __end_ofi2___lwdiv:
  4490                           	opt stack 0
  4491                           pclatu	equ	0xFFB
  4492                           pclath	equ	0xFFA
  4493                           tblptru	equ	0xFF8
  4494                           tblptrh	equ	0xFF7
  4495                           tblptrl	equ	0xFF6
  4496                           tablat	equ	0xFF5
  4497                           prodh	equ	0xFF4
  4498                           prodl	equ	0xFF3
  4499                           intcon	equ	0xFF2
  4500                           intcon2	equ	0xFF1
  4501                           intcon3	equ	0xFF0
  4502                           postinc0	equ	0xFEE
  4503                           fsr0h	equ	0xFEA
  4504                           fsr0l	equ	0xFE9
  4505                           wreg	equ	0xFE8
  4506                           fsr1h	equ	0xFE2
  4507                           fsr1l	equ	0xFE1
  4508                           indf2	equ	0xFDF
  4509                           postinc2	equ	0xFDE
  4510                           postdec2	equ	0xFDD
  4511                           fsr2h	equ	0xFDA
  4512                           fsr2l	equ	0xFD9
  4513                           status	equ	0xFD8
  4514                           
  4515 ;; *************** function i2_lcdInst *****************
  4516 ;; Defined at:
  4517 ;;		line 26 in file "lcd.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  data            1    wreg     unsigned char 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  data            1    2[COMRAM] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  1    wreg      void 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4535 ;;Total ram usage:        1 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    1
  4538 ;; This function calls:
  4539 ;;		i2_lcdNibble
  4540 ;; This function is called by:
  4541 ;;		_isr
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           	psect	text28
  4546  001D58                     __ptext28:
  4547                           	opt stack 0
  4548  001D58                     i2_lcdInst:
  4549                           	opt stack 24
  4550                           
  4551                           ;incstack = 0
  4552                           ;i2lcdInst@data stored from wreg
  4553  001D58  6E03               	movwf	i2lcdInst@data,c
  4554                           
  4555                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4556  001D5A  948C               	bcf	3980,2,c	;volatile
  4557                           
  4558                           ;lcd.c: 28: lcdNibble(data);
  4559  001D5C  5003               	movf	i2lcdInst@data,w,c
  4560  001D5E  EC88  F00D         	call	i2_lcdNibble
  4561  001D62  0012               	return		;funcret
  4562  001D64                     __end_ofi2_lcdInst:
  4563                           	opt stack 0
  4564                           pclatu	equ	0xFFB
  4565                           pclath	equ	0xFFA
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           prodh	equ	0xFF4
  4571                           prodl	equ	0xFF3
  4572                           intcon	equ	0xFF2
  4573                           intcon2	equ	0xFF1
  4574                           intcon3	equ	0xFF0
  4575                           postinc0	equ	0xFEE
  4576                           fsr0h	equ	0xFEA
  4577                           fsr0l	equ	0xFE9
  4578                           wreg	equ	0xFE8
  4579                           fsr1h	equ	0xFE2
  4580                           fsr1l	equ	0xFE1
  4581                           indf2	equ	0xFDF
  4582                           postinc2	equ	0xFDE
  4583                           postdec2	equ	0xFDD
  4584                           fsr2h	equ	0xFDA
  4585                           fsr2l	equ	0xFD9
  4586                           status	equ	0xFD8
  4587                           
  4588 ;; *************** function i2_lcdNibble *****************
  4589 ;; Defined at:
  4590 ;;		line 36 in file "lcd.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;  data            1    wreg     unsigned char 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  data            1    1[COMRAM] unsigned char 
  4595 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  1    wreg      void 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, status,0
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;Total ram usage:        2 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; This function calls:
  4612 ;;		Nothing
  4613 ;; This function is called by:
  4614 ;;		i2_lcdInst
  4615 ;;		i2_putch
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           	psect	text29
  4620  001B10                     __ptext29:
  4621                           	opt stack 0
  4622  001B10                     i2_lcdNibble:
  4623                           	opt stack 23
  4624                           
  4625                           ;incstack = 0
  4626                           ;i2lcdNibble@data stored from wreg
  4627  001B10  6E02               	movwf	i2lcdNibble@data,c
  4628                           
  4629                           ;lcd.c: 38: char temp = data & 0xF0;
  4630  001B12  5002               	movf	i2lcdNibble@data,w,c
  4631  001B14  0BF0               	andlw	240
  4632  001B16  6E01               	movwf	i2lcdNibble@temp,c
  4633                           
  4634                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4635  001B18  508C               	movf	3980,w,c	;volatile
  4636  001B1A  0B0F               	andlw	15
  4637  001B1C  6E8C               	movwf	3980,c	;volatile
  4638                           
  4639                           ;lcd.c: 40: LATD = temp | LATD;
  4640  001B1E  5001               	movf	i2lcdNibble@temp,w,c
  4641  001B20  108C               	iorwf	3980,w,c	;volatile
  4642  001B22  6E8C               	movwf	3980,c	;volatile
  4643                           
  4644                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4645  001B24  968C               	bcf	3980,3,c	;volatile
  4646                           
  4647                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4648  001B26  0E19               	movlw	25
  4649  001B28                     i2u193_47:
  4650  001B28  2EE8               	decfsz	wreg,f,c
  4651  001B2A  D7FE               	bra	i2u193_47
  4652                           
  4653                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4654  001B2C  868C               	bsf	3980,3,c	;volatile
  4655                           
  4656                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4657  001B2E  0E19               	movlw	25
  4658  001B30                     i2u194_47:
  4659  001B30  2EE8               	decfsz	wreg,f,c
  4660  001B32  D7FE               	bra	i2u194_47
  4661                           
  4662                           ;lcd.c: 47: data = data << 4;
  4663  001B34  3802               	swapf	i2lcdNibble@data,w,c
  4664  001B36  0BF0               	andlw	240
  4665  001B38  6E02               	movwf	i2lcdNibble@data,c
  4666                           
  4667                           ;lcd.c: 49: temp = data & 0xF0;
  4668  001B3A  5002               	movf	i2lcdNibble@data,w,c
  4669  001B3C  0BF0               	andlw	240
  4670  001B3E  6E01               	movwf	i2lcdNibble@temp,c
  4671                           
  4672                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4673  001B40  508C               	movf	3980,w,c	;volatile
  4674  001B42  0B0F               	andlw	15
  4675  001B44  6E8C               	movwf	3980,c	;volatile
  4676                           
  4677                           ;lcd.c: 51: LATD = temp | LATD;
  4678  001B46  5001               	movf	i2lcdNibble@temp,w,c
  4679  001B48  108C               	iorwf	3980,w,c	;volatile
  4680  001B4A  6E8C               	movwf	3980,c	;volatile
  4681                           
  4682                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4683  001B4C  968C               	bcf	3980,3,c	;volatile
  4684                           
  4685                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4686  001B4E  0E19               	movlw	25
  4687  001B50                     i2u195_47:
  4688  001B50  2EE8               	decfsz	wreg,f,c
  4689  001B52  D7FE               	bra	i2u195_47
  4690                           
  4691                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4692  001B54  868C               	bsf	3980,3,c	;volatile
  4693                           
  4694                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4695  001B56  0E19               	movlw	25
  4696  001B58                     i2u196_47:
  4697  001B58  2EE8               	decfsz	wreg,f,c
  4698  001B5A  D7FE               	bra	i2u196_47
  4699  001B5C  0012               	return		;funcret
  4700  001B5E                     __end_ofi2_lcdNibble:
  4701                           	opt stack 0
  4702                           pclatu	equ	0xFFB
  4703                           pclath	equ	0xFFA
  4704                           tblptru	equ	0xFF8
  4705                           tblptrh	equ	0xFF7
  4706                           tblptrl	equ	0xFF6
  4707                           tablat	equ	0xFF5
  4708                           prodh	equ	0xFF4
  4709                           prodl	equ	0xFF3
  4710                           intcon	equ	0xFF2
  4711                           intcon2	equ	0xFF1
  4712                           intcon3	equ	0xFF0
  4713                           postinc0	equ	0xFEE
  4714                           fsr0h	equ	0xFEA
  4715                           fsr0l	equ	0xFE9
  4716                           wreg	equ	0xFE8
  4717                           fsr1h	equ	0xFE2
  4718                           fsr1l	equ	0xFE1
  4719                           indf2	equ	0xFDF
  4720                           postinc2	equ	0xFDE
  4721                           postdec2	equ	0xFDD
  4722                           fsr2h	equ	0xFDA
  4723                           fsr2l	equ	0xFD9
  4724                           status	equ	0xFD8
  4725                           pclatu	equ	0xFFB
  4726                           pclath	equ	0xFFA
  4727                           tblptru	equ	0xFF8
  4728                           tblptrh	equ	0xFF7
  4729                           tblptrl	equ	0xFF6
  4730                           tablat	equ	0xFF5
  4731                           prodh	equ	0xFF4
  4732                           prodl	equ	0xFF3
  4733                           intcon	equ	0xFF2
  4734                           intcon2	equ	0xFF1
  4735                           intcon3	equ	0xFF0
  4736                           postinc0	equ	0xFEE
  4737                           fsr0h	equ	0xFEA
  4738                           fsr0l	equ	0xFE9
  4739                           wreg	equ	0xFE8
  4740                           fsr1h	equ	0xFE2
  4741                           fsr1l	equ	0xFE1
  4742                           indf2	equ	0xFDF
  4743                           postinc2	equ	0xFDE
  4744                           postdec2	equ	0xFDD
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749                           	psect	rparam
  4750  0000                     pclatu	equ	0xFFB
  4751                           pclath	equ	0xFFA
  4752                           tblptru	equ	0xFF8
  4753                           tblptrh	equ	0xFF7
  4754                           tblptrl	equ	0xFF6
  4755                           tablat	equ	0xFF5
  4756                           prodh	equ	0xFF4
  4757                           prodl	equ	0xFF3
  4758                           intcon	equ	0xFF2
  4759                           intcon2	equ	0xFF1
  4760                           intcon3	equ	0xFF0
  4761                           postinc0	equ	0xFEE
  4762                           fsr0h	equ	0xFEA
  4763                           fsr0l	equ	0xFE9
  4764                           wreg	equ	0xFE8
  4765                           fsr1h	equ	0xFE2
  4766                           fsr1l	equ	0xFE1
  4767                           indf2	equ	0xFDF
  4768                           postinc2	equ	0xFDE
  4769                           postdec2	equ	0xFDD
  4770                           fsr2h	equ	0xFDA
  4771                           fsr2l	equ	0xFD9
  4772                           status	equ	0xFD8
  4773                           
  4774                           	psect	temp
  4775  000050                     btemp:
  4776                           	opt stack 0
  4777  000050                     	ds	1
  4778  0000                     int$flags	set	btemp
  4779                           pclatu	equ	0xFFB
  4780                           pclath	equ	0xFFA
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           prodh	equ	0xFF4
  4786                           prodl	equ	0xFF3
  4787                           intcon	equ	0xFF2
  4788                           intcon2	equ	0xFF1
  4789                           intcon3	equ	0xFF0
  4790                           postinc0	equ	0xFEE
  4791                           fsr0h	equ	0xFEA
  4792                           fsr0l	equ	0xFE9
  4793                           wreg	equ	0xFE8
  4794                           fsr1h	equ	0xFE2
  4795                           fsr1l	equ	0xFE1
  4796                           indf2	equ	0xFDF
  4797                           postinc2	equ	0xFDE
  4798                           postdec2	equ	0xFDD
  4799                           fsr2h	equ	0xFDA
  4800                           fsr2l	equ	0xFD9
  4801                           status	equ	0xFD8


Data Sizes:
    Strings     107
    Constant    42
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     71      79
    BANK0           128     10      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_5(CODE[23]), STR_4(CODE[23]), STR_3(CODE[13]), STR_2(CODE[17]), 
		 -> STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_date_time
    _standby->_printf
    _initLCD->_lcdInst
    _date_time->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in COMRAM

    _isr->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _standby->_printf
    _date_time->_printf

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8040
                                             69 COMRAM     2     2      0
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                            _initLCD
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    3497
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             47 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    4032
                                             68 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    3362
                                             56 COMRAM    12     4      8
                                              0 BANK0     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             44 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     392
                                             44 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             51 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             44 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             44 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             45 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                             45 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             44 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             57 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             44 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 16    16      0    2093
                                             28 COMRAM    16    16      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            25    23      2    1912
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
   _bottle_time
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A       A       5        7.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     47      4F       1       62.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      59      34        0.0%
DATA                 0      0      59       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 06 00:27:51 2017

                       l34 1D22        ___wmul@multiplicand 002F         i2___lwdiv@dividend 0001  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l226 119C                        l618 19B2                        l671 1A66  
                      l681 1BE2               __CFG_CPB$OFF 000000                        u110 1C9E  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      _isr 0008                        prod 000FF3                        wreg 000FE8  
             ?_bottle_time 0001               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l1002 1CA0                       l2112 1BD8                       l2104 1BB8  
                     l2106 1BC0                       l2210 12D8                       l2122 10A6  
                     l2108 1BC4                       l2204 129A                       l2132 10D4  
                     l2222 130C                       l2150 116C                       l2126 10BA  
                     l2224 1318                       l2232 1344                       l2216 12F0  
                     l2208 12CE                       l2128 10CC                       l2320 190A  
                     l2234 134A                       l2242 13DE                       l2162 11D4  
                     l2146 1166                       l2138 1104                       l2314 18F8  
                     l2084 1A34                       l2068 1CE2                       l2236 1392  
                     l2244 13F0                       l2228 1332                       l2180 122C  
                     l2316 18FE                       l2324 1910                       l2086 1A3C  
                     l2246 13F8                       l2182 1232                       l2166 11F0  
                     l2318 1904                       l2326 192A                       l1720 1974  
                     l2096 1A5C                       l2088 1A40                       l2168 11F6  
                     l2248 1404                       l2280 1830                       l2290 1854  
                     l1716 1964                       l2196 1268                       l2284 1838  
                     l1718 1970                       l2198 127A                       l1728 19A4  
                     ?_isr 0001                       STR_1 107B                       STR_2 106A  
                     STR_3 1089                       STR_4 102B                       STR_5 1042  
                     STR_6 1059                       u1215 19F2                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     _LATE 000F8D                       u1907 1B02                       u1917 1B0A  
                     u1857 1934                       u1867 1B64                       u1877 1B9E  
                     u1887 1ADA                       u1897 1AE2                       _RCEN 007E2B  
                     _RSEN 007E29                       _main 18AA                       _keys 1001  
                     _time 0048                       fsr0h 000FEA                       fsr1h 000FE2  
       i2___lwdiv@quotient 0005                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0050                       isr@i 002C                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
          __end_ofi2_putch 1D58              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              i2_lcdNibble 1B10              ?_bottle_count 0001                      ??_isr 001D  
         ?_I2C_Master_Init 003A           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___lldiv 19C4            __end_of___lwdiv 1A70  
          __end_of___lwmod 1BEC                      i2l226 150C                      i2l169 17BE  
                    i2l671 1AB8                      i2l681 1C24                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 1D4C             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 1BAA  
           __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003            __end_of_dpowers 101C  
          __end_of_isdigit 1CEA                      _putch 1D34                      pclath 000FFA  
                    tablat 000FF5            __end_of_timeset 102B           __end_ofi2___wmul 1CCC  
          __end_of_standby 1C5A                      status 000FD8             __CFG_PBADEN$ON 000000  
            i2printf@width 001A           __end_ofi2_printf 172C         __size_ofi2___lwdiv 0052  
       __size_ofi2___lwmod 0042            __initialization 1D08         __size_ofi2_lcdInst 000C  
           ??_bottle_count 002D               __end_of_main 1942               __end_of_keys 1012  
               i2printf@ap 0014         __size_ofi2_isdigit 001E                     ??_main 0046  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 002E  
       ??_I2C_Master_Start 002E                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0030            i2lcdNibble@data 0002                     ?_putch 0001  
          i2lcdNibble@temp 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l2002 1772                     i2l2014 17A2                     i2l2006 1776  
                   i2l2008 178C                     i2l2018 17AA                     i2l1750 1D00  
                   i2l1910 15B4                     i2l1760 1A86                     i2l1912 15C4  
                   i2l1840 143A                     i2l1762 1A8E                     i2l1930 1620  
                   i2l1922 1602                     i2l1842 1448                     i2l1772 1AAE  
                   i2l1764 1A92                     i2l1780 1BFA                     i2l1924 160A  
                   i2l1860 14DA                     i2l1852 147C                     i2l1836 142A  
                   i2l1782 1C02                     i2l1950 16AE                     i2l1942 1652  
                   i2l1918 15DE                     i2l1846 144E                     i2l1784 1C06  
                   i2l1960 170A                     i2l1936 1636                     i2l1880 1554  
                   i2l1864 14DE                     i2l1938 163E                     i2l1946 1664  
                   i2l1882 1558                     i2l1962 1712                     i2l1788 1C1A  
                   i2l1948 166A                     i2l1956 16F4                     i2l1876 153A  
                   i2l1958 1704                     i2l1894 1584                     i2l1896 1588  
                   i2l1998 176C                  ??i2_putch 0003                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000                     ___wmul 1C5A             __CFG_STVREN$ON 000000  
                ??___lldiv 0035                  ??___lwdiv 0031                  ??___lwmod 0038  
                   clear_0 1D0E                  ??_lcdInst 002F                     _printf 1098  
                ??_initLCD 0030                  ??_isdigit 002D          __end_ofi2___lwdiv 1AC2  
             __mediumconst 0000          __end_ofi2___lwmod 1C2E                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_standby 0045  
        __end_ofi2_lcdInst 1D64          __end_ofi2_isdigit 1D08       __size_of_bottle_time 0002  
               __accesstop 0080    __end_of__initialization 1D14              ___rparam_used 000001  
       i2___lwmod@dividend 0008             __pcstackCOMRAM 0001              __end_of_putch 1D40  
              i2printf@idx 0013                i2printf@val 0017         __size_of_date_time 00AE  
                ?i2___wmul 0001         __size_of_lcdNibble 004E                i2putch@data 0003  
                ?i2_printf 000D       __end_of_bottle_count 1D82                    ??_putch 002F  
             ?i2_lcdNibble 0001                    ?___wmul 002D                    ?_printf 0039  
               ??i2___wmul 0005                 ??i2_printf 000F                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7          __end_of_date_time 18AA  
                  i2_putch 1D4C          __end_of_lcdNibble 1B10                    __Hparam 0000  
                  __Lparam 0000                    ___lldiv 1942            __size_of___wmul 0026  
                  ___lwdiv 1A1E                    ___lwmod 1BAA               __psmallconst 1000  
               _curr_state 004F                    __pcinit 1D08                    __ramtop 1000  
                  _lcdInst 1D40                    __ptext0 18AA                    __ptext1 1C2E  
                  __ptext2 1B5E                    __ptext3 17FC                    __ptext4 1098  
                  __ptext5 1D34                    __ptext6 1CCC                    __ptext7 1C5A  
                  __ptext8 1BAA                    __ptext9 1A1E            __size_of_printf 0388  
                  _initLCD 1B5E          __end_of_hexpowers 1024              i2_isdigit$506 0002  
                  _dpowers 1012                    _isdigit 1CCC               __size_of_isr 17F4  
 __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012  
               date_time@i 0045   __size_of_I2C_Master_Stop 0008                    _timeset 1024  
                  _standby 1C2E             __pintcode_body 172C       end_of_initialization 1D14  
            __Lmediumconst 0000                    int_func 172C        i2___wmul@multiplier 0001  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0031  
          ___lldiv@counter 0039                    printf@c 0089                    printf@f 0039  
         I2C_Master_Init@c 003A           I2C_Master_Read@a 002E                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE      __size_of_bottle_count 0002  
        i2___lwdiv@divisor 0003                  i2___lwdiv 1A70                  i2___lwmod 1BEC  
        i2___lwdiv@counter 0007                  i2_lcdInst 1D58                printf@width 0087  
                i2_isdigit 1CEA               _bottle_count 1D80             __end_of___wmul 1C80  
     __size_ofi2_lcdNibble 004E              i2lcdInst@data 0003           i2___wmul@product 0005  
           __end_of_printf 1420               i2printf@flag 0019               i2printf@prec 0016  
      start_initialization 1D08          __size_ofi2___wmul 0026                __end_of_isr 17FC  
                i2printf@c 001C                  i2printf@f 000D              ??_bottle_time 002D  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 030C  
        ??_I2C_Master_Init 003E          ??_I2C_Master_Read 002E          ??_I2C_Master_Wait 002D  
               ?i2_lcdInst 0001          ??_I2C_Master_Stop 002E                 ?i2_isdigit 0001  
                 ??___wmul 0031           __CFG_LPT1OSC$OFF 000000                   ??_printf 0041  
              __pbssCOMRAM 0048              __pcstackBANK0 0080          i2___lwmod@divisor 000A  
        i2___lwmod@counter 000C                   ?i2_putch 0001        __end_of_bottle_time 1D80  
         _I2C_Master_Start 1D76           _I2C_Master_Write 1D64                  _date_time 17FC  
         ___lwdiv@dividend 002D          __CFG_CCP2MX$PORTC 000000                  __pintcode 0008  
                _lcdNibble 1AC2                   ?___lldiv 002D                   ?___lwdiv 002D  
                 ?___lwmod 0034                   ?_lcdInst 0001                   ?_initLCD 0001  
              __smallconst 1000                   ?_isdigit 0001                  _hexpowers 101C  
                 ?_standby 0001           ___lwdiv@quotient 0032                ??i2___lwdiv 0005  
              ??i2___lwmod 000C             __size_of_putch 000C                ??i2_lcdInst 0003  
           ___wmul@product 0031                   _LATDbits 000F8C                ??i2_isdigit 0001  
               ?_date_time 0001                   i2u192_47 17B0                   i2u193_47 1B28  
                 i2u194_47 1B30                   i2u195_47 1B50                   i2u196_47 1B58  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001          ___wmul@multiplier 002D  
                 i2___wmul 1CA6              lcdNibble@data 002E                 printf@flag 0086  
            lcdNibble@temp 002D                 printf@prec 0083                   i2_printf 1420  
              _bottle_time 1D7E        I2C_Master_Read@temp 002F           __size_ofi2_putch 000C  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
    i2___wmul@multiplicand 0003           __size_of___lldiv 0082           __size_of___lwdiv 0052  
         __size_of___lwmod 0042                _isdigit$506 002E           __size_of_lcdInst 000C  
          _I2C_Master_Init 19C4            _I2C_Master_Read 1C80           __size_of_initLCD 004C  
          _I2C_Master_Wait 1D22            _I2C_Master_Stop 1D6E           __size_of_isdigit 001E  
          ___lwdiv@divisor 002F            ___lwdiv@counter 0031                   __ptext10 1D40  
                 __ptext11 1AC2                   __ptext20 1942                   __ptext12 1D64  
                 __ptext13 1D6E                   __ptext22 1420                   __ptext14 1D76  
                 __ptext23 1D4C                   __ptext15 1C80                   __ptext24 1CEA  
                 __ptext16 1D22                   __ptext25 1CA6                   __ptext17 1D7E  
                 __ptext26 1BEC                   __ptext18 1D80                   __ptext27 1A70  
                 __ptext19 19C4                   __ptext28 1D58                   __ptext29 1B10  
         __size_of_standby 002C              __size_of_main 0098                ??_date_time 0045  
            ??i2_lcdNibble 0001                ??_lcdNibble 002D                   int$flags 0050  
                printf@idx 0080                  printf@val 0084                  putch@data 002F  
 __end_of_I2C_Master_Start 1D7E   __end_of_I2C_Master_Write 1D6E                 _INTCONbits 000FF2  
                 isdigit@c 002F                   intlevel2 0000           ___lwmod@dividend 0034  
         ___lldiv@dividend 002D                   printf@ap 0081    __end_of_I2C_Master_Init 1A1E  
  __end_of_I2C_Master_Read 1CA6    __end_of_I2C_Master_Wait 1D34    __end_of_I2C_Master_Stop 1D76  
              lcdInst@data 002F        __end_ofi2_lcdNibble 1B5E           ___lldiv@quotient 0035  
        I2C_Master_Write@d 002E            ___lwmod@divisor 0036            ___lwmod@counter 0038  

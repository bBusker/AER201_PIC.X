

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 07 17:56:03 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    86  0000                     
    87                           ; Version 1.40
    88                           ; Generated 01/12/2016 GMT
    89                           ; 
    90                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC18F4620 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     
   122                           	psect	idataBANK0
   123  002D08                     __pidataBANK0:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _bottle_count_disp
   127  002D08  FFFF               	dw	65535
   128                           
   129                           	psect	mediumconst
   130  00FDB6                     __pmediumconst:
   131                           	opt stack 0
   132  00FDB6  00                 	db	0
   133  00FDB7                     _keys:
   134                           	opt stack 0
   135  00FDB7  31                 	db	49
   136  00FDB8  32                 	db	50
   137  00FDB9  33                 	db	51
   138  00FDBA  41                 	db	65
   139  00FDBB  34                 	db	52
   140  00FDBC  35                 	db	53
   141  00FDBD  36                 	db	54
   142  00FDBE  42                 	db	66
   143  00FDBF  37                 	db	55
   144  00FDC0  38                 	db	56
   145  00FDC1  39                 	db	57
   146  00FDC2  43                 	db	67
   147  00FDC3  2A                 	db	42
   148  00FDC4  30                 	db	48
   149  00FDC5  23                 	db	35
   150  00FDC6  44                 	db	68
   151  00FDC7  00                 	db	0
   152  00FDC8                     __end_of_keys:
   153                           	opt stack 0
   154  00FDC8                     _dpowers:
   155                           	opt stack 0
   156  00FDC8  0001               	dw	1
   157  00FDCA  000A               	dw	10
   158  00FDCC  0064               	dw	100
   159  00FDCE  03E8               	dw	1000
   160  00FDD0  2710               	dw	10000
   161  00FDD2                     __end_of_dpowers:
   162                           	opt stack 0
   163  00FDD2                     _hexpowers:
   164                           	opt stack 0
   165  00FDD2  0001               	dw	1
   166  00FDD4  0010               	dw	16
   167  00FDD6  0100               	dw	256
   168  00FDD8  1000               	dw	4096
   169  00FDDA                     __end_of_hexpowers:
   170                           	opt stack 0
   171  00FDDA                     _timeset:
   172                           	opt stack 0
   173  00FDDA  50                 	db	80
   174  00FDDB  35                 	db	53
   175  00FDDC  21                 	db	33
   176  00FDDD  08                 	db	8
   177  00FDDE  05                 	db	5
   178  00FDDF  02                 	db	2
   179  00FDE0  17                 	db	23
   180  00FDE1                     __end_of_timeset:
   181                           	opt stack 0
   182  00FDE1                     exp@coeff:
   183                           	opt stack 0
   184  00FDE1  00                 	db	0
   185  00FDE2  80                 	db	128
   186  00FDE3  3F                 	db	63
   187  00FDE4  72                 	db	114
   188  00FDE5  31                 	db	49
   189  00FDE6  3F                 	db	63
   190  00FDE7  FE                 	db	254
   191  00FDE8  75                 	db	117
   192  00FDE9  3E                 	db	62
   193  00FDEA  58                 	db	88
   194  00FDEB  63                 	db	99
   195  00FDEC  3D                 	db	61
   196  00FDED  95                 	db	149
   197  00FDEE  1D                 	db	29
   198  00FDEF  3C                 	db	60
   199  00FDF0  C5                 	db	197
   200  00FDF1  AE                 	db	174
   201  00FDF2  3A                 	db	58
   202  00FDF3  79                 	db	121
   203  00FDF4  21                 	db	33
   204  00FDF5  39                 	db	57
   205  00FDF6  94                 	db	148
   206  00FDF7  80                 	db	128
   207  00FDF8  37                 	db	55
   208  00FDF9  93                 	db	147
   209  00FDFA  A7                 	db	167
   210  00FDFB  35                 	db	53
   211  00FDFC  56                 	db	86
   212  00FDFD  15                 	db	21
   213  00FDFE  34                 	db	52
   214  00FDFF                     __end_ofexp@coeff:
   215                           	opt stack 0
   216  00FDFF                     log@coeff:
   217                           	opt stack 0
   218  00FDFF  00                 	db	0
   219  00FE00  00                 	db	0
   220  00FE01  00                 	db	0
   221  00FE02  00                 	db	0
   222  00FE03  80                 	db	128
   223  00FE04  3F                 	db	63
   224  00FE05  F0                 	db	240
   225  00FE06  FF                 	db	255
   226  00FE07  BE                 	db	190
   227  00FE08  E2                 	db	226
   228  00FE09  A9                 	db	169
   229  00FE0A  3E                 	db	62
   230  00FE0B  83                 	db	131
   231  00FE0C  76                 	db	118
   232  00FE0D  BE                 	db	190
   233  00FE0E  AE                 	db	174
   234  00FE0F  2B                 	db	43
   235  00FE10  3E                 	db	62
   236  00FE11  3C                 	db	60
   237  00FE12  C3                 	db	195
   238  00FE13  BD                 	db	189
   239  00FE14  D2                 	db	210
   240  00FE15  13                 	db	19
   241  00FE16  3D                 	db	61
   242  00FE17  78                 	db	120
   243  00FE18  D3                 	db	211
   244  00FE19  BB                 	db	187
   245  00FE1A                     __end_oflog@coeff:
   246                           	opt stack 0
   247  0000                     _TMR0	set	4054
   248  0000                     _ADCON0	set	4034
   249  0000                     _ADCON1	set	4033
   250  0000                     _INTCONbits	set	4082
   251  0000                     _LATA	set	3977
   252  0000                     _LATAbits	set	3977
   253  0000                     _LATB	set	3978
   254  0000                     _LATC	set	3979
   255  0000                     _LATCbits	set	3979
   256  0000                     _LATD	set	3980
   257  0000                     _LATDbits	set	3980
   258  0000                     _LATE	set	3981
   259  0000                     _PORTAbits	set	3968
   260  0000                     _PORTB	set	3969
   261  0000                     _SSPADD	set	4040
   262  0000                     _SSPBUF	set	4041
   263  0000                     _SSPCON1	set	4038
   264  0000                     _SSPCON2	set	4037
   265  0000                     _SSPSTAT	set	4039
   266  0000                     _TRISA	set	3986
   267  0000                     _TRISB	set	3987
   268  0000                     _TRISC	set	3988
   269  0000                     _TRISD	set	3989
   270  0000                     _TRISE	set	3990
   271  0000                     _ACKDT	set	32301
   272  0000                     _ACKEN	set	32300
   273  0000                     _GIE	set	32663
   274  0000                     _INT0IE	set	32660
   275  0000                     _INT0IF	set	32657
   276  0000                     _INT1IE	set	32643
   277  0000                     _INT1IF	set	32640
   278  0000                     _INT2IE	set	32644
   279  0000                     _INT2IF	set	32641
   280  0000                     _PEN	set	32298
   281  0000                     _PSA	set	32427
   282  0000                     _RCEN	set	32299
   283  0000                     _RSEN	set	32297
   284  0000                     _SEN	set	32296
   285  0000                     _T08BIT	set	32430
   286  0000                     _T0CS	set	32429
   287  0000                     _T0PS0	set	32424
   288  0000                     _T0PS1	set	32425
   289  0000                     _T0PS2	set	32426
   290  0000                     _TMR0IE	set	32661
   291  0000                     _TMR0IF	set	32658
   292  0000                     _TMR0ON	set	32431
   293  0000                     _TRISC3	set	31907
   294  0000                     _TRISC4	set	31908
   295  0000                     _nRBPU	set	32655
   296  00FE1A                     STR_22:
   297  00FE1A  52                 	db	82	;'R'
   298  00FE1B  25                 	db	37
   299  00FE1C  64                 	db	100	;'d'
   300  00FE1D  20                 	db	32
   301  00FE1E  47                 	db	71	;'G'
   302  00FE1F  25                 	db	37
   303  00FE20  64                 	db	100	;'d'
   304  00FE21  20                 	db	32
   305  00FE22  42                 	db	66	;'B'
   306  00FE23  25                 	db	37
   307  00FE24  64                 	db	100	;'d'
   308  00FE25  20                 	db	32
   309  00FE26  20                 	db	32
   310  00FE27  20                 	db	32
   311  00FE28  20                 	db	32
   312  00FE29  20                 	db	32
   313  00FE2A  20                 	db	32
   314  00FE2B  20                 	db	32
   315  00FE2C  20                 	db	32
   316  00FE2D  20                 	db	32
   317  00FE2E  20                 	db	32
   318  00FE2F  20                 	db	32
   319  00FE30  20                 	db	32
   320  00FE31  20                 	db	32
   321  00FE32  20                 	db	32
   322  00FE33  20                 	db	32
   323  00FE34  20                 	db	32
   324  00FE35  00                 	db	0
   325  00FE36                     STR_21:
   326  00FE36  52                 	db	82	;'R'
   327  00FE37  75                 	db	117	;'u'
   328  00FE38  6E                 	db	110	;'n'
   329  00FE39  6E                 	db	110	;'n'
   330  00FE3A  69                 	db	105	;'i'
   331  00FE3B  6E                 	db	110	;'n'
   332  00FE3C  67                 	db	103	;'g'
   333  00FE3D  7E                 	db	126
   334  00FE3E  7E                 	db	126
   335  00FE3F  7E                 	db	126
   336  00FE40  20                 	db	32
   337  00FE41  20                 	db	32
   338  00FE42  20                 	db	32
   339  00FE43  20                 	db	32
   340  00FE44  20                 	db	32
   341  00FE45  20                 	db	32
   342  00FE46  20                 	db	32
   343  00FE47  20                 	db	32
   344  00FE48  20                 	db	32
   345  00FE49  20                 	db	32
   346  00FE4A  20                 	db	32
   347  00FE4B  20                 	db	32
   348  00FE4C  20                 	db	32
   349  00FE4D  20                 	db	32
   350  00FE4E  00                 	db	0
   351  00FE4F                     STR_2:
   352  00FE4F  47                 	db	71	;'G'
   353  00FE50  25                 	db	37
   354  00FE51  75                 	db	117	;'u'
   355  00FE52  20                 	db	32
   356  00FE53  42                 	db	66	;'B'
   357  00FE54  25                 	db	37
   358  00FE55  75                 	db	117	;'u'
   359  00FE56  20                 	db	32
   360  00FE57  20                 	db	32
   361  00FE58  20                 	db	32
   362  00FE59  20                 	db	32
   363  00FE5A  20                 	db	32
   364  00FE5B  20                 	db	32
   365  00FE5C  20                 	db	32
   366  00FE5D  20                 	db	32
   367  00FE5E  20                 	db	32
   368  00FE5F  20                 	db	32
   369  00FE60  20                 	db	32
   370  00FE61  20                 	db	32
   371  00FE62  20                 	db	32
   372  00FE63  20                 	db	32
   373  00FE64  20                 	db	32
   374  00FE65  20                 	db	32
   375  00FE66  00                 	db	0
   376  00FE67                     STR_1:
   377  00FE67  43                 	db	67	;'C'
   378  00FE68  25                 	db	37
   379  00FE69  75                 	db	117	;'u'
   380  00FE6A  20                 	db	32
   381  00FE6B  52                 	db	82	;'R'
   382  00FE6C  25                 	db	37
   383  00FE6D  75                 	db	117	;'u'
   384  00FE6E  20                 	db	32
   385  00FE6F  20                 	db	32
   386  00FE70  20                 	db	32
   387  00FE71  20                 	db	32
   388  00FE72  20                 	db	32
   389  00FE73  20                 	db	32
   390  00FE74  20                 	db	32
   391  00FE75  20                 	db	32
   392  00FE76  20                 	db	32
   393  00FE77  20                 	db	32
   394  00FE78  20                 	db	32
   395  00FE79  20                 	db	32
   396  00FE7A  20                 	db	32
   397  00FE7B  20                 	db	32
   398  00FE7C  20                 	db	32
   399  00FE7D  20                 	db	32
   400  00FE7E  00                 	db	0
   401  00FE7F                     STR_20:
   402  00FE7F  52                 	db	82	;'R'
   403  00FE80  75                 	db	117	;'u'
   404  00FE81  6E                 	db	110	;'n'
   405  00FE82  6E                 	db	110	;'n'
   406  00FE83  69                 	db	105	;'i'
   407  00FE84  6E                 	db	110	;'n'
   408  00FE85  67                 	db	103	;'g'
   409  00FE86  7E                 	db	126
   410  00FE87  7E                 	db	126
   411  00FE88  20                 	db	32
   412  00FE89  20                 	db	32
   413  00FE8A  20                 	db	32
   414  00FE8B  20                 	db	32
   415  00FE8C  20                 	db	32
   416  00FE8D  20                 	db	32
   417  00FE8E  20                 	db	32
   418  00FE8F  20                 	db	32
   419  00FE90  20                 	db	32
   420  00FE91  20                 	db	32
   421  00FE92  20                 	db	32
   422  00FE93  20                 	db	32
   423  00FE94  20                 	db	32
   424  00FE95  20                 	db	32
   425  00FE96  00                 	db	0
   426  00FE97                     STR_19:
   427  00FE97  52                 	db	82	;'R'
   428  00FE98  75                 	db	117	;'u'
   429  00FE99  6E                 	db	110	;'n'
   430  00FE9A  6E                 	db	110	;'n'
   431  00FE9B  69                 	db	105	;'i'
   432  00FE9C  6E                 	db	110	;'n'
   433  00FE9D  67                 	db	103	;'g'
   434  00FE9E  7E                 	db	126
   435  00FE9F  20                 	db	32
   436  00FEA0  20                 	db	32
   437  00FEA1  20                 	db	32
   438  00FEA2  20                 	db	32
   439  00FEA3  20                 	db	32
   440  00FEA4  20                 	db	32
   441  00FEA5  20                 	db	32
   442  00FEA6  20                 	db	32
   443  00FEA7  20                 	db	32
   444  00FEA8  20                 	db	32
   445  00FEA9  20                 	db	32
   446  00FEAA  20                 	db	32
   447  00FEAB  20                 	db	32
   448  00FEAC  20                 	db	32
   449  00FEAD  00                 	db	0
   450  00FEAE                     STR_17:
   451  00FEAE  54                 	db	84	;'T'
   452  00FEAF  6F                 	db	111	;'o'
   453  00FEB0  74                 	db	116	;'t'
   454  00FEB1  61                 	db	97	;'a'
   455  00FEB2  6C                 	db	108	;'l'
   456  00FEB3  20                 	db	32
   457  00FEB4  4F                 	db	79	;'O'
   458  00FEB5  70                 	db	112	;'p'
   459  00FEB6  65                 	db	101	;'e'
   460  00FEB7  72                 	db	114	;'r'
   461  00FEB8  61                 	db	97	;'a'
   462  00FEB9  74                 	db	116	;'t'
   463  00FEBA  69                 	db	105	;'i'
   464  00FEBB  6F                 	db	111	;'o'
   465  00FEBC  6E                 	db	110	;'n'
   466  00FEBD  20                 	db	32
   467  00FEBE  20                 	db	32
   468  00FEBF  20                 	db	32
   469  00FEC0  20                 	db	32
   470  00FEC1  20                 	db	32
   471  00FEC2  20                 	db	32
   472  00FEC3  20                 	db	32
   473  00FEC4  00                 	db	0
   474  00FEC5                     STR_4:
   475  00FEC5  44                 	db	68	;'D'
   476  00FEC6  61                 	db	97	;'a'
   477  00FEC7  74                 	db	116	;'t'
   478  00FEC8  65                 	db	101	;'e'
   479  00FEC9  3A                 	db	58	;':'
   480  00FECA  20                 	db	32
   481  00FECB  25                 	db	37
   482  00FECC  30                 	db	48	;'0'
   483  00FECD  32                 	db	50	;'2'
   484  00FECE  78                 	db	120	;'x'
   485  00FECF  2F                 	db	47
   486  00FED0  25                 	db	37
   487  00FED1  30                 	db	48	;'0'
   488  00FED2  32                 	db	50	;'2'
   489  00FED3  78                 	db	120	;'x'
   490  00FED4  2F                 	db	47
   491  00FED5  25                 	db	37
   492  00FED6  30                 	db	48	;'0'
   493  00FED7  32                 	db	50	;'2'
   494  00FED8  78                 	db	120	;'x'
   495  00FED9  20                 	db	32
   496  00FEDA  20                 	db	32
   497  00FEDB  00                 	db	0
   498  00FEDC                     STR_5:
   499  00FEDC  54                 	db	84	;'T'
   500  00FEDD  69                 	db	105	;'i'
   501  00FEDE  6D                 	db	109	;'m'
   502  00FEDF  65                 	db	101	;'e'
   503  00FEE0  3A                 	db	58	;':'
   504  00FEE1  20                 	db	32
   505  00FEE2  25                 	db	37
   506  00FEE3  30                 	db	48	;'0'
   507  00FEE4  32                 	db	50	;'2'
   508  00FEE5  78                 	db	120	;'x'
   509  00FEE6  3A                 	db	58	;':'
   510  00FEE7  25                 	db	37
   511  00FEE8  30                 	db	48	;'0'
   512  00FEE9  32                 	db	50	;'2'
   513  00FEEA  78                 	db	120	;'x'
   514  00FEEB  3A                 	db	58	;':'
   515  00FEEC  25                 	db	37
   516  00FEED  30                 	db	48	;'0'
   517  00FEEE  32                 	db	50	;'2'
   518  00FEEF  78                 	db	120	;'x'
   519  00FEF0  20                 	db	32
   520  00FEF1  20                 	db	32
   521  00FEF2  00                 	db	0
   522  00FEF3                     STR_18:
   523  00FEF3  54                 	db	84	;'T'
   524  00FEF4  69                 	db	105	;'i'
   525  00FEF5  6D                 	db	109	;'m'
   526  00FEF6  65                 	db	101	;'e'
   527  00FEF7  3A                 	db	58	;':'
   528  00FEF8  20                 	db	32
   529  00FEF9  25                 	db	37
   530  00FEFA  64                 	db	100	;'d'
   531  00FEFB  20                 	db	32
   532  00FEFC  73                 	db	115	;'s'
   533  00FEFD  20                 	db	32
   534  00FEFE  20                 	db	32
   535  00FEFF  20                 	db	32
   536  00FF00  20                 	db	32
   537  00FF01  20                 	db	32
   538  00FF02  20                 	db	32
   539  00FF03  20                 	db	32
   540  00FF04  00                 	db	0
   541  00FF05                     STR_8:
   542  00FF05  59                 	db	89	;'Y'
   543  00FF06  4F                 	db	79	;'O'
   544  00FF07  50                 	db	80	;'P'
   545  00FF08  2B                 	db	43
   546  00FF09  43                 	db	67	;'C'
   547  00FF0A  41                 	db	65	;'A'
   548  00FF0B  50                 	db	80	;'P'
   549  00FF0C  2B                 	db	43
   550  00FF0D  4C                 	db	76	;'L'
   551  00FF0E  42                 	db	66	;'B'
   552  00FF0F  4C                 	db	76	;'L'
   553  00FF10  3A                 	db	58	;':'
   554  00FF11  20                 	db	32
   555  00FF12  25                 	db	37
   556  00FF13  64                 	db	100	;'d'
   557  00FF14  20                 	db	32
   558  00FF15  20                 	db	32
   559  00FF16  00                 	db	0
   560  00FF17                     STR_10:
   561  00FF17  59                 	db	89	;'Y'
   562  00FF18  4F                 	db	79	;'O'
   563  00FF19  50                 	db	80	;'P'
   564  00FF1A  2D                 	db	45
   565  00FF1B  43                 	db	67	;'C'
   566  00FF1C  41                 	db	65	;'A'
   567  00FF1D  50                 	db	80	;'P'
   568  00FF1E  2B                 	db	43
   569  00FF1F  4C                 	db	76	;'L'
   570  00FF20  42                 	db	66	;'B'
   571  00FF21  4C                 	db	76	;'L'
   572  00FF22  3A                 	db	58	;':'
   573  00FF23  20                 	db	32
   574  00FF24  25                 	db	37
   575  00FF25  64                 	db	100	;'d'
   576  00FF26  20                 	db	32
   577  00FF27  20                 	db	32
   578  00FF28  00                 	db	0
   579  00FF29                     STR_9:
   580  00FF29  59                 	db	89	;'Y'
   581  00FF2A  4F                 	db	79	;'O'
   582  00FF2B  50                 	db	80	;'P'
   583  00FF2C  2B                 	db	43
   584  00FF2D  43                 	db	67	;'C'
   585  00FF2E  41                 	db	65	;'A'
   586  00FF2F  50                 	db	80	;'P'
   587  00FF30  2D                 	db	45
   588  00FF31  4C                 	db	76	;'L'
   589  00FF32  42                 	db	66	;'B'
   590  00FF33  4C                 	db	76	;'L'
   591  00FF34  3A                 	db	58	;':'
   592  00FF35  20                 	db	32
   593  00FF36  25                 	db	37
   594  00FF37  64                 	db	100	;'d'
   595  00FF38  20                 	db	32
   596  00FF39  20                 	db	32
   597  00FF3A  00                 	db	0
   598  00FF3B                     STR_11:
   599  00FF3B  59                 	db	89	;'Y'
   600  00FF3C  4F                 	db	79	;'O'
   601  00FF3D  50                 	db	80	;'P'
   602  00FF3E  2D                 	db	45
   603  00FF3F  43                 	db	67	;'C'
   604  00FF40  41                 	db	65	;'A'
   605  00FF41  50                 	db	80	;'P'
   606  00FF42  2D                 	db	45
   607  00FF43  4C                 	db	76	;'L'
   608  00FF44  42                 	db	66	;'B'
   609  00FF45  4C                 	db	76	;'L'
   610  00FF46  3A                 	db	58	;':'
   611  00FF47  20                 	db	32
   612  00FF48  25                 	db	37
   613  00FF49  64                 	db	100	;'d'
   614  00FF4A  20                 	db	32
   615  00FF4B  20                 	db	32
   616  00FF4C  00                 	db	0
   617  00FF4D                     STR_12:
   618  00FF4D  45                 	db	69	;'E'
   619  00FF4E  53                 	db	83	;'S'
   620  00FF4F  4B                 	db	75	;'K'
   621  00FF50  41                 	db	65	;'A'
   622  00FF51  2B                 	db	43
   623  00FF52  43                 	db	67	;'C'
   624  00FF53  41                 	db	65	;'A'
   625  00FF54  50                 	db	80	;'P'
   626  00FF55  2B                 	db	43
   627  00FF56  4C                 	db	76	;'L'
   628  00FF57  42                 	db	66	;'B'
   629  00FF58  4C                 	db	76	;'L'
   630  00FF59  3A                 	db	58	;':'
   631  00FF5A  20                 	db	32
   632  00FF5B  25                 	db	37
   633  00FF5C  64                 	db	100	;'d'
   634  00FF5D  20                 	db	32
   635  00FF5E  00                 	db	0
   636  00FF5F                     STR_14:
   637  00FF5F  45                 	db	69	;'E'
   638  00FF60  53                 	db	83	;'S'
   639  00FF61  4B                 	db	75	;'K'
   640  00FF62  41                 	db	65	;'A'
   641  00FF63  2D                 	db	45
   642  00FF64  43                 	db	67	;'C'
   643  00FF65  41                 	db	65	;'A'
   644  00FF66  50                 	db	80	;'P'
   645  00FF67  2B                 	db	43
   646  00FF68  4C                 	db	76	;'L'
   647  00FF69  42                 	db	66	;'B'
   648  00FF6A  4C                 	db	76	;'L'
   649  00FF6B  3A                 	db	58	;':'
   650  00FF6C  20                 	db	32
   651  00FF6D  25                 	db	37
   652  00FF6E  64                 	db	100	;'d'
   653  00FF6F  20                 	db	32
   654  00FF70  00                 	db	0
   655  00FF71                     STR_13:
   656  00FF71  45                 	db	69	;'E'
   657  00FF72  53                 	db	83	;'S'
   658  00FF73  4B                 	db	75	;'K'
   659  00FF74  41                 	db	65	;'A'
   660  00FF75  2B                 	db	43
   661  00FF76  43                 	db	67	;'C'
   662  00FF77  41                 	db	65	;'A'
   663  00FF78  50                 	db	80	;'P'
   664  00FF79  2D                 	db	45
   665  00FF7A  4C                 	db	76	;'L'
   666  00FF7B  42                 	db	66	;'B'
   667  00FF7C  4C                 	db	76	;'L'
   668  00FF7D  3A                 	db	58	;':'
   669  00FF7E  20                 	db	32
   670  00FF7F  25                 	db	37
   671  00FF80  64                 	db	100	;'d'
   672  00FF81  20                 	db	32
   673  00FF82  00                 	db	0
   674  00FF83                     STR_15:
   675  00FF83  45                 	db	69	;'E'
   676  00FF84  53                 	db	83	;'S'
   677  00FF85  4B                 	db	75	;'K'
   678  00FF86  41                 	db	65	;'A'
   679  00FF87  2D                 	db	45
   680  00FF88  43                 	db	67	;'C'
   681  00FF89  41                 	db	65	;'A'
   682  00FF8A  50                 	db	80	;'P'
   683  00FF8B  2D                 	db	45
   684  00FF8C  4C                 	db	76	;'L'
   685  00FF8D  42                 	db	66	;'B'
   686  00FF8E  4C                 	db	76	;'L'
   687  00FF8F  3A                 	db	58	;':'
   688  00FF90  20                 	db	32
   689  00FF91  25                 	db	37
   690  00FF92  64                 	db	100	;'d'
   691  00FF93  20                 	db	32
   692  00FF94  00                 	db	0
   693  00FF95                     STR_25:
   694  00FF95  30                 	db	48	;'0'
   695  00FF96  31                 	db	49	;'1'
   696  00FF97  32                 	db	50	;'2'
   697  00FF98  33                 	db	51	;'3'
   698  00FF99  34                 	db	52	;'4'
   699  00FF9A  35                 	db	53	;'5'
   700  00FF9B  36                 	db	54	;'6'
   701  00FF9C  37                 	db	55	;'7'
   702  00FF9D  38                 	db	56	;'8'
   703  00FF9E  39                 	db	57	;'9'
   704  00FF9F  61                 	db	97	;'a'
   705  00FFA0  62                 	db	98	;'b'
   706  00FFA1  63                 	db	99	;'c'
   707  00FFA2  64                 	db	100	;'d'
   708  00FFA3  65                 	db	101	;'e'
   709  00FFA4  66                 	db	102	;'f'
   710  00FFA5  00                 	db	0
   711  00FFA6                     STR_7:
   712  00FFA6  54                 	db	84	;'T'
   713  00FFA7  6F                 	db	111	;'o'
   714  00FFA8  74                 	db	116	;'t'
   715  00FFA9  61                 	db	97	;'a'
   716  00FFAA  6C                 	db	108	;'l'
   717  00FFAB  3A                 	db	58	;':'
   718  00FFAC  20                 	db	32
   719  00FFAD  25                 	db	37
   720  00FFAE  64                 	db	100	;'d'
   721  00FFAF  20                 	db	32
   722  00FFB0  20                 	db	32
   723  00FFB1  20                 	db	32
   724  00FFB2  20                 	db	32
   725  00FFB3  20                 	db	32
   726  00FFB4  20                 	db	32
   727  00FFB5  20                 	db	32
   728  00FFB6  00                 	db	0
   729  00FFB7                     STR_6:
   730  00FFB7  42                 	db	66	;'B'
   731  00FFB8  6F                 	db	111	;'o'
   732  00FFB9  74                 	db	116	;'t'
   733  00FFBA  74                 	db	116	;'t'
   734  00FFBB  6C                 	db	108	;'l'
   735  00FFBC  65                 	db	101	;'e'
   736  00FFBD  20                 	db	32
   737  00FFBE  43                 	db	67	;'C'
   738  00FFBF  6F                 	db	111	;'o'
   739  00FFC0  75                 	db	117	;'u'
   740  00FFC1  6E                 	db	110	;'n'
   741  00FFC2  74                 	db	116	;'t'
   742  00FFC3  20                 	db	32
   743  00FFC4  20                 	db	32
   744  00FFC5  20                 	db	32
   745  00FFC6  20                 	db	32
   746  00FFC7  00                 	db	0
   747  00FFC8                     STR_23:
   748  00FFC8  4F                 	db	79	;'O'
   749  00FFC9  70                 	db	112	;'p'
   750  00FFCA  65                 	db	101	;'e'
   751  00FFCB  72                 	db	114	;'r'
   752  00FFCC  61                 	db	97	;'a'
   753  00FFCD  74                 	db	116	;'t'
   754  00FFCE  69                 	db	105	;'i'
   755  00FFCF  6F                 	db	111	;'o'
   756  00FFD0  6E                 	db	110	;'n'
   757  00FFD1  20                 	db	32
   758  00FFD2  44                 	db	68	;'D'
   759  00FFD3  6F                 	db	111	;'o'
   760  00FFD4  6E                 	db	110	;'n'
   761  00FFD5  65                 	db	101	;'e'
   762  00FFD6  21                 	db	33
   763  00FFD7  00                 	db	0
   764  00FFD8                     STR_24:
   765  00FFD8  45                 	db	69	;'E'
   766  00FFD9  4D                 	db	77	;'M'
   767  00FFDA  45                 	db	69	;'E'
   768  00FFDB  52                 	db	82	;'R'
   769  00FFDC  47                 	db	71	;'G'
   770  00FFDD  45                 	db	69	;'E'
   771  00FFDE  4E                 	db	78	;'N'
   772  00FFDF  43                 	db	67	;'C'
   773  00FFE0  59                 	db	89	;'Y'
   774  00FFE1  20                 	db	32
   775  00FFE2  53                 	db	83	;'S'
   776  00FFE3  54                 	db	84	;'T'
   777  00FFE4  4F                 	db	79	;'O'
   778  00FFE5  50                 	db	80	;'P'
   779  00FFE6  00                 	db	0
   780  00FFE7                     STR_3:
   781  00FFE7  62                 	db	98	;'b'
   782  00FFE8  61                 	db	97	;'a'
   783  00FFE9  64                 	db	100	;'d'
   784  00FFEA  20                 	db	32
   785  00FFEB  69                 	db	105	;'i'
   786  00FFEC  6E                 	db	110	;'n'
   787  00FFED  74                 	db	116	;'t'
   788  00FFEE  65                 	db	101	;'e'
   789  00FFEF  72                 	db	114	;'r'
   790  00FFF0  72                 	db	114	;'r'
   791  00FFF1  75                 	db	117	;'u'
   792  00FFF2  70                 	db	112	;'p'
   793  00FFF3  74                 	db	116	;'t'
   794  00FFF4  00                 	db	0
   795  00FFF5                     STR_16:
   796  00FFF5  45                 	db	69	;'E'
   797  00FFF6  52                 	db	82	;'R'
   798  00FFF7  52                 	db	82	;'R'
   799  00FFF8  4F                 	db	79	;'O'
   800  00FFF9  52                 	db	82	;'R'
   801  00FFFA  3A                 	db	58	;':'
   802  00FFFB  20                 	db	32
   803  00FFFC  25                 	db	37
   804  00FFFD  64                 	db	100	;'d'
   805  00FFFE  00                 	db	0
   806                           
   807                           ; #config settings
   808  00FFFF  00                 	db	0	; dummy byte at the end
   809  0000                     
   810                           	psect	cinit
   811  002A5C                     __pcinit:
   812                           	opt stack 0
   813  002A5C                     start_initialization:
   814                           	opt stack 0
   815  002A5C                     __initialization:
   816                           	opt stack 0
   817                           
   818                           ; Initialize objects allocated to BANK0 (2 bytes)
   819                           ; load TBLPTR registers with __pidataBANK0
   820  002A5C  0E08               	movlw	low __pidataBANK0
   821  002A5E  6EF6               	movwf	tblptrl,c
   822  002A60  0E2D               	movlw	high __pidataBANK0
   823  002A62  6EF7               	movwf	tblptrh,c
   824  002A64  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   825  002A66  6EF8               	movwf	tblptru,c
   826  002A68  0009               	tblrd		*+	;fetch initializer
   827  002A6A  CFF5 F0EE          	movff	tablat,__pdataBANK0
   828  002A6E  0009               	tblrd		*+	;fetch initializer
   829  002A70  CFF5 F0EF          	movff	tablat,__pdataBANK0+1
   830                           
   831                           ; Clear objects allocated to BANK0 (68 bytes)
   832  002A74  EE00  F080         	lfsr	0,__pbssBANK0
   833  002A78  0E44               	movlw	68
   834  002A7A                     clear_0:
   835  002A7A  6AEE               	clrf	postinc0,c
   836  002A7C  06E8               	decf	wreg,f,c
   837  002A7E  E1FD               	bnz	clear_0
   838                           
   839                           ; Clear objects allocated to COMRAM (8 bytes)
   840  002A80  EE00  F076         	lfsr	0,__pbssCOMRAM
   841  002A84  0E08               	movlw	8
   842  002A86                     clear_1:
   843  002A86  6AEE               	clrf	postinc0,c
   844  002A88  06E8               	decf	wreg,f,c
   845  002A8A  E1FD               	bnz	clear_1
   846  002A8C                     end_of_initialization:
   847                           	opt stack 0
   848  002A8C                     __end_of__initialization:
   849                           	opt stack 0
   850  002A8C  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   851  002A8E  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   852  002A90  0E00               	movlw	low (__Lmediumconst shr (0+16))
   853  002A92  6EF8               	movwf	tblptru,c
   854  002A94  0100               	movlb	0
   855  002A96  EFBA  F00C         	goto	_main	;jump to C main() function
   856                           tblptru	equ	0xFF8
   857                           tblptrh	equ	0xFF7
   858                           tblptrl	equ	0xFF6
   859                           tablat	equ	0xFF5
   860                           postinc0	equ	0xFEE
   861                           wreg	equ	0xFE8
   862                           
   863                           	psect	bssCOMRAM
   864  000076                     __pbssCOMRAM:
   865                           	opt stack 0
   866  000076                     _color:
   867                           	opt stack 0
   868  000076                     	ds	8
   869                           tblptru	equ	0xFF8
   870                           tblptrh	equ	0xFF7
   871                           tblptrl	equ	0xFF6
   872                           tablat	equ	0xFF5
   873                           postinc0	equ	0xFEE
   874                           wreg	equ	0xFE8
   875                           
   876                           	psect	bssBANK0
   877  000080                     __pbssBANK0:
   878                           	opt stack 0
   879  000080                     _bottlequeue:
   880                           	opt stack 0
   881  000080                     	ds	22
   882  000096                     _time:
   883                           	opt stack 0
   884  000096                     	ds	7
   885  00009D                     _bottlequeue_head:
   886                           	opt stack 0
   887  00009D                     	ds	2
   888  00009F                     _bottlequeue_tail:
   889                           	opt stack 0
   890  00009F                     	ds	2
   891  0000A1                     _end_time:
   892                           	opt stack 0
   893  0000A1                     	ds	2
   894  0000A3                     _errno:
   895                           	opt stack 0
   896  0000A3                     	ds	2
   897  0000A5                     _eska_count:
   898                           	opt stack 0
   899  0000A5                     	ds	2
   900  0000A7                     _eskacap_count:
   901                           	opt stack 0
   902  0000A7                     	ds	2
   903  0000A9                     _eskacaplbl_count:
   904                           	opt stack 0
   905  0000A9                     	ds	2
   906  0000AB                     _eskalbl_count:
   907                           	opt stack 0
   908  0000AB                     	ds	2
   909  0000AD                     _etime:
   910                           	opt stack 0
   911  0000AD                     	ds	2
   912  0000AF                     _nodedata:
   913                           	opt stack 0
   914  0000AF                     	ds	2
   915  0000B1                     _operation_disp:
   916                           	opt stack 0
   917  0000B1                     	ds	2
   918  0000B3                     _operation_time:
   919                           	opt stack 0
   920  0000B3                     	ds	2
   921  0000B5                     _start_time:
   922                           	opt stack 0
   923  0000B5                     	ds	2
   924  0000B7                     _stime:
   925                           	opt stack 0
   926  0000B7                     	ds	2
   927  0000B9                     _total_bottle_count:
   928                           	opt stack 0
   929  0000B9                     	ds	2
   930  0000BB                     _yop_count:
   931                           	opt stack 0
   932  0000BB                     	ds	2
   933  0000BD                     _yopcap_count:
   934                           	opt stack 0
   935  0000BD                     	ds	2
   936  0000BF                     _yopcaplbl_count:
   937                           	opt stack 0
   938  0000BF                     	ds	2
   939  0000C1                     _yoplbl_count:
   940                           	opt stack 0
   941  0000C1                     	ds	2
   942  0000C3                     _curr_state:
   943                           	opt stack 0
   944  0000C3                     	ds	1
   945                           tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           postinc0	equ	0xFEE
   950                           wreg	equ	0xFE8
   951                           
   952                           	psect	dataBANK0
   953  0000EE                     __pdataBANK0:
   954                           	opt stack 0
   955  0000EE                     _bottle_count_disp:
   956                           	opt stack 0
   957  0000EE                     	ds	2
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           
   965                           	psect	cstackBANK1
   966  000100                     __pcstackBANK1:
   967                           	opt stack 0
   968  000100                     printf@idx:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x0
   972  000100                     	ds	1
   973  000101                     printf@ap:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x1
   977  000101                     	ds	2
   978  000103                     printf@prec:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x3
   982  000103                     	ds	1
   983  000104                     printf@val:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0x4
   987  000104                     	ds	2
   988  000106                     printf@flag:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x6
   992  000106                     	ds	1
   993  000107                     printf@width:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0x7
   997  000107                     	ds	2
   998  000109                     printf@c:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x9
  1002  000109                     	ds	1
  1003  00010A                     ??_main:
  1004                           
  1005                           ; 1 bytes @ 0xA
  1006  00010A                     	ds	2
  1007                           tblptru	equ	0xFF8
  1008                           tblptrh	equ	0xFF7
  1009                           tblptrl	equ	0xFF6
  1010                           tablat	equ	0xFF5
  1011                           postinc0	equ	0xFEE
  1012                           wreg	equ	0xFE8
  1013                           
  1014                           	psect	cstackBANK0
  1015  0000C4                     __pcstackBANK0:
  1016                           	opt stack 0
  1017  0000C4                     ??_isr:
  1018                           
  1019                           ; 1 bytes @ 0x0
  1020  0000C4                     	ds	16
  1021  0000D4                     ??_isdigit:
  1022  0000D4                     ??_I2C_Master_Wait:
  1023  0000D4                     ?___wmul:
  1024                           	opt stack 0
  1025  0000D4                     ?___awmod:
  1026                           	opt stack 0
  1027  0000D4                     ?___lwdiv:
  1028                           	opt stack 0
  1029  0000D4                     ?___lldiv:
  1030                           	opt stack 0
  1031  0000D4                     lcdNibble@temp:
  1032                           	opt stack 0
  1033  0000D4                     ___wmul@multiplier:
  1034                           	opt stack 0
  1035  0000D4                     ___awmod@dividend:
  1036                           	opt stack 0
  1037  0000D4                     ___lwdiv@dividend:
  1038                           	opt stack 0
  1039  0000D4                     ___lldiv@dividend:
  1040                           	opt stack 0
  1041                           
  1042                           ; 4 bytes @ 0x10
  1043  0000D4                     	ds	1
  1044  0000D5                     I2C_Master_Read@a:
  1045                           	opt stack 0
  1046  0000D5                     lcdNibble@data:
  1047                           	opt stack 0
  1048  0000D5                     _isdigit$824:
  1049                           	opt stack 0
  1050  0000D5                     I2C_Master_Write@d:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x11
  1054  0000D5                     	ds	1
  1055  0000D6                     I2C_Master_Read@temp:
  1056                           	opt stack 0
  1057  0000D6                     lcdInst@data:
  1058                           	opt stack 0
  1059  0000D6                     putch@data:
  1060                           	opt stack 0
  1061  0000D6                     isdigit@c:
  1062                           	opt stack 0
  1063  0000D6                     ___wmul@multiplicand:
  1064                           	opt stack 0
  1065  0000D6                     ___awmod@divisor:
  1066                           	opt stack 0
  1067  0000D6                     ___lwdiv@divisor:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x12
  1071  0000D6                     	ds	1
  1072  0000D7                     ??_read_colorsensor:
  1073  0000D7                     ??_initLCD:
  1074                           
  1075                           ; 1 bytes @ 0x13
  1076  0000D7                     	ds	1
  1077  0000D8                     ___awmod@counter:
  1078                           	opt stack 0
  1079  0000D8                     ___lwdiv@counter:
  1080                           	opt stack 0
  1081  0000D8                     ___wmul@product:
  1082                           	opt stack 0
  1083  0000D8                     ___lldiv@divisor:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x14
  1087  0000D8                     	ds	1
  1088  0000D9                     ___awmod@sign:
  1089                           	opt stack 0
  1090  0000D9                     read_colorsensor@color_comb:
  1091                           	opt stack 0
  1092  0000D9                     ___lwdiv@quotient:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x15
  1096  0000D9                     	ds	2
  1097  0000DB                     ?___lwmod:
  1098                           	opt stack 0
  1099  0000DB                     read_colorsensor@color_low:
  1100                           	opt stack 0
  1101  0000DB                     ___lwmod@dividend:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x17
  1105  0000DB                     	ds	1
  1106  0000DC                     read_colorsensor@color_high:
  1107                           	opt stack 0
  1108  0000DC                     ___lldiv@quotient:
  1109                           	opt stack 0
  1110                           
  1111                           ; 4 bytes @ 0x18
  1112  0000DC                     	ds	1
  1113  0000DD                     read_colorsensor@i:
  1114                           	opt stack 0
  1115  0000DD                     ___lwmod@divisor:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x19
  1119  0000DD                     	ds	2
  1120  0000DF                     ___lwmod@counter:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x1B
  1124  0000DF                     	ds	1
  1125  0000E0                     ?_printf:
  1126                           	opt stack 0
  1127  0000E0                     ___lldiv@counter:
  1128                           	opt stack 0
  1129  0000E0                     printf@f:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x1C
  1133  0000E0                     	ds	1
  1134  0000E1                     I2C_Master_Init@c:
  1135                           	opt stack 0
  1136                           
  1137                           ; 4 bytes @ 0x1D
  1138  0000E1                     	ds	4
  1139  0000E5                     ??_I2C_Master_Init:
  1140                           
  1141                           ; 1 bytes @ 0x21
  1142  0000E5                     	ds	3
  1143  0000E8                     ??_printf:
  1144                           
  1145                           ; 1 bytes @ 0x24
  1146  0000E8                     	ds	4
  1147  0000EC                     ??_operation:
  1148  0000EC                     date_time@i:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x28
  1152  0000EC                     	ds	2
  1153                           tblptru	equ	0xFF8
  1154                           tblptrh	equ	0xFF7
  1155                           tblptrl	equ	0xFF6
  1156                           tablat	equ	0xFF5
  1157                           postinc0	equ	0xFEE
  1158                           wreg	equ	0xFE8
  1159                           
  1160                           	psect	cstackCOMRAM
  1161  000001                     __pcstackCOMRAM:
  1162                           	opt stack 0
  1163  000001                     ??i2_I2C_Master_Wait:
  1164  000001                     ??i2_isdigit:
  1165  000001                     ?i2___wmul:
  1166                           	opt stack 0
  1167  000001                     ?i2___lwdiv:
  1168                           	opt stack 0
  1169  000001                     ?___ftpack:
  1170                           	opt stack 0
  1171  000001                     ?_frexp:
  1172                           	opt stack 0
  1173  000001                     ?___ftneg:
  1174                           	opt stack 0
  1175  000001                     i2lcdNibble@temp:
  1176                           	opt stack 0
  1177  000001                     servo_rotate0@degree:
  1178                           	opt stack 0
  1179  000001                     i2___wmul@multiplier:
  1180                           	opt stack 0
  1181  000001                     i2___lwdiv@dividend:
  1182                           	opt stack 0
  1183  000001                     ___ftpack@arg:
  1184                           	opt stack 0
  1185  000001                     ___ftge@ff1:
  1186                           	opt stack 0
  1187  000001                     ___ftneg@f1:
  1188                           	opt stack 0
  1189  000001                     frexp@value:
  1190                           	opt stack 0
  1191                           
  1192                           ; 3 bytes @ 0x0
  1193  000001                     	ds	1
  1194  000002                     i2I2C_Master_Read@a:
  1195                           	opt stack 0
  1196  000002                     i2lcdNibble@data:
  1197                           	opt stack 0
  1198  000002                     i2_isdigit$824:
  1199                           	opt stack 0
  1200  000002                     i2I2C_Master_Write@d:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x1
  1204  000002                     	ds	1
  1205  000003                     ??_servo_rotate0:
  1206  000003                     i2I2C_Master_Read@temp:
  1207                           	opt stack 0
  1208  000003                     i2lcdInst@data:
  1209                           	opt stack 0
  1210  000003                     i2putch@data:
  1211                           	opt stack 0
  1212  000003                     i2isdigit@c:
  1213                           	opt stack 0
  1214  000003                     i2___wmul@multiplicand:
  1215                           	opt stack 0
  1216  000003                     i2___lwdiv@divisor:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x2
  1220  000003                     	ds	1
  1221  000004                     ??i2_read_colorsensor:
  1222  000004                     read_time@i:
  1223                           	opt stack 0
  1224  000004                     ___ftpack@exp:
  1225                           	opt stack 0
  1226  000004                     frexp@eptr:
  1227                           	opt stack 0
  1228  000004                     ___ftge@ff2:
  1229                           	opt stack 0
  1230                           
  1231                           ; 3 bytes @ 0x3
  1232  000004                     	ds	1
  1233  000005                     ___ftpack@sign:
  1234                           	opt stack 0
  1235  000005                     servo_rotate0@duty:
  1236                           	opt stack 0
  1237  000005                     i2___wmul@product:
  1238                           	opt stack 0
  1239  000005                     i2___lwdiv@quotient:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x4
  1243  000005                     	ds	1
  1244  000006                     ??___ftpack:
  1245  000006                     ??_frexp:
  1246  000006                     i2read_colorsensor@color_comb:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x5
  1250  000006                     	ds	1
  1251  000007                     ??___ftge:
  1252  000007                     ?___awdiv:
  1253                           	opt stack 0
  1254  000007                     i2___lwdiv@counter:
  1255                           	opt stack 0
  1256  000007                     servo_rotate0@i:
  1257                           	opt stack 0
  1258  000007                     ___awdiv@dividend:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x6
  1262  000007                     	ds	1
  1263  000008                     ?i2___lwmod:
  1264                           	opt stack 0
  1265  000008                     i2read_colorsensor@color_low:
  1266                           	opt stack 0
  1267  000008                     i2___lwmod@dividend:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x7
  1271  000008                     	ds	1
  1272  000009                     ?___ftdiv:
  1273                           	opt stack 0
  1274  000009                     ?___awtoft:
  1275                           	opt stack 0
  1276  000009                     ?___lltoft:
  1277                           	opt stack 0
  1278  000009                     i2read_colorsensor@color_high:
  1279                           	opt stack 0
  1280  000009                     servo_rotate0@j:
  1281                           	opt stack 0
  1282  000009                     ___awdiv@divisor:
  1283                           	opt stack 0
  1284  000009                     ___awtoft@c:
  1285                           	opt stack 0
  1286  000009                     ___ftdiv@f1:
  1287                           	opt stack 0
  1288  000009                     ___lltoft@c:
  1289                           	opt stack 0
  1290                           
  1291                           ; 4 bytes @ 0x8
  1292  000009                     	ds	1
  1293  00000A                     i2read_colorsensor@i:
  1294                           	opt stack 0
  1295  00000A                     i2___lwmod@divisor:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x9
  1299  00000A                     	ds	1
  1300  00000B                     ___awdiv@counter:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0xA
  1304  00000B                     	ds	1
  1305  00000C                     ___awdiv@sign:
  1306                           	opt stack 0
  1307  00000C                     ___awtoft@sign:
  1308                           	opt stack 0
  1309  00000C                     i2___lwmod@counter:
  1310                           	opt stack 0
  1311  00000C                     ___ftdiv@f2:
  1312                           	opt stack 0
  1313                           
  1314                           ; 3 bytes @ 0xB
  1315  00000C                     	ds	1
  1316  00000D                     ??___lltoft:
  1317  00000D                     ?i2_printf:
  1318                           	opt stack 0
  1319  00000D                     ?___ftmul:
  1320                           	opt stack 0
  1321  00000D                     ___awdiv@quotient:
  1322                           	opt stack 0
  1323  00000D                     i2printf@f:
  1324                           	opt stack 0
  1325  00000D                     ___ftmul@f1:
  1326                           	opt stack 0
  1327                           
  1328                           ; 3 bytes @ 0xC
  1329  00000D                     	ds	2
  1330  00000F                     ??___ftdiv:
  1331  00000F                     servo_rotate1@degree:
  1332                           	opt stack 0
  1333  00000F                     servo_rotate2@degree:
  1334                           	opt stack 0
  1335                           
  1336                           ; 2 bytes @ 0xE
  1337  00000F                     	ds	1
  1338  000010                     ___ftmul@f2:
  1339                           	opt stack 0
  1340                           
  1341                           ; 3 bytes @ 0xF
  1342  000010                     	ds	1
  1343  000011                     ??_servo_rotate2:
  1344  000011                     ??_servo_rotate1:
  1345  000011                     ___lltoft@exp:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x10
  1349  000011                     	ds	1
  1350  000012                     ___ftdiv@cntr:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x11
  1354  000012                     	ds	1
  1355  000013                     ??___ftmul:
  1356  000013                     ??i2_printf:
  1357  000013                     servo_rotate1@duty:
  1358                           	opt stack 0
  1359  000013                     servo_rotate2@duty:
  1360                           	opt stack 0
  1361  000013                     ___ftdiv@f3:
  1362                           	opt stack 0
  1363                           
  1364                           ; 3 bytes @ 0x12
  1365  000013                     	ds	2
  1366  000015                     servo_rotate1@i:
  1367                           	opt stack 0
  1368  000015                     servo_rotate2@i:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x14
  1372  000015                     	ds	1
  1373  000016                     ___ftdiv@exp:
  1374                           	opt stack 0
  1375  000016                     ___ftmul@exp:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x15
  1379  000016                     	ds	1
  1380  000017                     ___ftdiv@sign:
  1381                           	opt stack 0
  1382  000017                     i2printf@idx:
  1383                           	opt stack 0
  1384  000017                     servo_rotate1@j:
  1385                           	opt stack 0
  1386  000017                     servo_rotate2@j:
  1387                           	opt stack 0
  1388  000017                     ___ftmul@f3_as_product:
  1389                           	opt stack 0
  1390                           
  1391                           ; 3 bytes @ 0x16
  1392  000017                     	ds	1
  1393  000018                     i2printf@ap:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x17
  1397  000018                     	ds	2
  1398  00001A                     ___ftmul@cntr:
  1399                           	opt stack 0
  1400  00001A                     i2printf@prec:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x19
  1404  00001A                     	ds	1
  1405  00001B                     ___ftmul@sign:
  1406                           	opt stack 0
  1407  00001B                     i2printf@val:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x1A
  1411  00001B                     	ds	1
  1412  00001C                     ?___ftadd:
  1413                           	opt stack 0
  1414  00001C                     ___ftadd@f1:
  1415                           	opt stack 0
  1416                           
  1417                           ; 3 bytes @ 0x1B
  1418  00001C                     	ds	1
  1419  00001D                     i2printf@flag:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x1C
  1423  00001D                     	ds	1
  1424  00001E                     i2printf@width:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x1D
  1428  00001E                     	ds	1
  1429  00001F                     ___ftadd@f2:
  1430                           	opt stack 0
  1431                           
  1432                           ; 3 bytes @ 0x1E
  1433  00001F                     	ds	1
  1434  000020                     i2printf@c:
  1435                           	opt stack 0
  1436                           
  1437                           ; 1 bytes @ 0x1F
  1438  000020                     	ds	2
  1439  000022                     ??___ftadd:
  1440                           
  1441                           ; 1 bytes @ 0x21
  1442  000022                     	ds	3
  1443  000025                     ___ftadd@sign:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x24
  1447  000025                     	ds	1
  1448  000026                     ___ftadd@exp2:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x25
  1452  000026                     	ds	1
  1453  000027                     ___ftadd@exp1:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x26
  1457  000027                     	ds	1
  1458  000028                     ?___ftsub:
  1459                           	opt stack 0
  1460  000028                     ?_eval_poly:
  1461                           	opt stack 0
  1462  000028                     ?___fttol:
  1463                           	opt stack 0
  1464  000028                     ___ftsub@f1:
  1465                           	opt stack 0
  1466  000028                     ___fttol@f1:
  1467                           	opt stack 0
  1468  000028                     eval_poly@x:
  1469                           	opt stack 0
  1470                           
  1471                           ; 3 bytes @ 0x27
  1472  000028                     	ds	3
  1473  00002B                     eval_poly@d:
  1474                           	opt stack 0
  1475  00002B                     ___ftsub@f2:
  1476                           	opt stack 0
  1477                           
  1478                           ; 3 bytes @ 0x2A
  1479  00002B                     	ds	1
  1480  00002C                     ??___fttol:
  1481                           
  1482                           ; 1 bytes @ 0x2B
  1483  00002C                     	ds	1
  1484  00002D                     eval_poly@n:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x2C
  1488  00002D                     	ds	1
  1489  00002E                     
  1490                           ; 1 bytes @ 0x2D
  1491  00002E                     	ds	1
  1492  00002F                     ??_eval_poly:
  1493                           
  1494                           ; 1 bytes @ 0x2E
  1495  00002F                     	ds	2
  1496  000031                     ___fttol@sign1:
  1497                           	opt stack 0
  1498  000031                     eval_poly@res:
  1499                           	opt stack 0
  1500                           
  1501                           ; 3 bytes @ 0x30
  1502  000031                     	ds	1
  1503  000032                     ___fttol@lval:
  1504                           	opt stack 0
  1505                           
  1506                           ; 4 bytes @ 0x31
  1507  000032                     	ds	2
  1508  000034                     ?_log:
  1509                           	opt stack 0
  1510  000034                     ?_ldexp:
  1511                           	opt stack 0
  1512  000034                     ldexp@value:
  1513                           	opt stack 0
  1514  000034                     log@x:
  1515                           	opt stack 0
  1516                           
  1517                           ; 3 bytes @ 0x33
  1518  000034                     	ds	2
  1519  000036                     ___fttol@exp1:
  1520                           	opt stack 0
  1521                           
  1522                           ; 1 bytes @ 0x35
  1523  000036                     	ds	1
  1524  000037                     ?___altoft:
  1525                           	opt stack 0
  1526  000037                     ldexp@newexp:
  1527                           	opt stack 0
  1528  000037                     log@exponent:
  1529                           	opt stack 0
  1530  000037                     ___altoft@c:
  1531                           	opt stack 0
  1532                           
  1533                           ; 4 bytes @ 0x36
  1534  000037                     	ds	2
  1535  000039                     ??_ldexp:
  1536                           
  1537                           ; 1 bytes @ 0x38
  1538  000039                     	ds	2
  1539  00003B                     ??___altoft:
  1540                           
  1541                           ; 1 bytes @ 0x3A
  1542  00003B                     	ds	4
  1543  00003F                     ___altoft@exp:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x3E
  1547  00003F                     	ds	1
  1548  000040                     ___altoft@sign:
  1549                           	opt stack 0
  1550                           
  1551                           ; 1 bytes @ 0x3F
  1552  000040                     	ds	1
  1553  000041                     ?_floor:
  1554                           	opt stack 0
  1555  000041                     floor@x:
  1556                           	opt stack 0
  1557                           
  1558                           ; 3 bytes @ 0x40
  1559  000041                     	ds	3
  1560  000044                     floor@i:
  1561                           	opt stack 0
  1562                           
  1563                           ; 3 bytes @ 0x43
  1564  000044                     	ds	3
  1565  000047                     floor@expon:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x46
  1569  000047                     	ds	2
  1570  000049                     ?_exp:
  1571                           	opt stack 0
  1572  000049                     exp@x:
  1573                           	opt stack 0
  1574                           
  1575                           ; 3 bytes @ 0x48
  1576  000049                     	ds	3
  1577  00004C                     _exp$1263:
  1578                           	opt stack 0
  1579                           
  1580                           ; 3 bytes @ 0x4B
  1581  00004C                     	ds	3
  1582  00004F                     exp@exponent:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x4E
  1586  00004F                     	ds	2
  1587  000051                     exp@sign:
  1588                           	opt stack 0
  1589                           
  1590                           ; 1 bytes @ 0x50
  1591  000051                     	ds	1
  1592  000052                     ?_pow:
  1593                           	opt stack 0
  1594  000052                     pow@x:
  1595                           	opt stack 0
  1596                           
  1597                           ; 3 bytes @ 0x51
  1598  000052                     	ds	3
  1599  000055                     pow@y:
  1600                           	opt stack 0
  1601                           
  1602                           ; 3 bytes @ 0x54
  1603  000055                     	ds	3
  1604  000058                     _pow$1261:
  1605                           	opt stack 0
  1606                           
  1607                           ; 3 bytes @ 0x57
  1608  000058                     	ds	3
  1609  00005B                     _pow$1262:
  1610                           	opt stack 0
  1611                           
  1612                           ; 3 bytes @ 0x5A
  1613  00005B                     	ds	3
  1614  00005E                     pow@sign:
  1615                           	opt stack 0
  1616                           
  1617                           ; 1 bytes @ 0x5D
  1618  00005E                     	ds	1
  1619  00005F                     pow@yi:
  1620                           	opt stack 0
  1621                           
  1622                           ; 4 bytes @ 0x5E
  1623  00005F                     	ds	4
  1624  000063                     ?_dec_to_hex:
  1625                           	opt stack 0
  1626  000063                     dec_to_hex@num:
  1627                           	opt stack 0
  1628                           
  1629                           ; 2 bytes @ 0x62
  1630  000063                     	ds	2
  1631  000065                     _dec_to_hex$1259:
  1632                           	opt stack 0
  1633                           
  1634                           ; 3 bytes @ 0x64
  1635  000065                     	ds	3
  1636  000068                     _dec_to_hex$1260:
  1637                           	opt stack 0
  1638                           
  1639                           ; 3 bytes @ 0x67
  1640  000068                     	ds	3
  1641  00006B                     dec_to_hex@temp:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x6A
  1645  00006B                     	ds	2
  1646  00006D                     dec_to_hex@i:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x6C
  1650  00006D                     	ds	2
  1651  00006F                     dec_to_hex@hexnum:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x6E
  1655  00006F                     	ds	2
  1656  000071                     dec_to_hex@quotient:
  1657                           	opt stack 0
  1658                           
  1659                           ; 2 bytes @ 0x70
  1660  000071                     	ds	2
  1661  000073                     isr@i:
  1662                           	opt stack 0
  1663                           
  1664                           ; 1 bytes @ 0x72
  1665  000073                     	ds	1
  1666  000074                     _isr$1359:
  1667                           	opt stack 0
  1668                           
  1669                           ; 2 bytes @ 0x73
  1670  000074                     	ds	2
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           
  1678 ;;
  1679 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1680 ;;
  1681 ;; *************** function _main *****************
  1682 ;; Defined at:
  1683 ;;		line 87 in file "main.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;		None
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;		None
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1699 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1700 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1701 ;;Total ram usage:        2 bytes
  1702 ;; Hardware stack levels required when called:   11
  1703 ;; This function calls:
  1704 ;;		_I2C_ColorSens_Init
  1705 ;;		_I2C_Master_Init
  1706 ;;		_bottle_count
  1707 ;;		_bottle_time
  1708 ;;		_date_time
  1709 ;;		_emergencystop
  1710 ;;		_initLCD
  1711 ;;		_operation
  1712 ;;		_operationend
  1713 ;;		_standby
  1714 ;; This function is called by:
  1715 ;;		Startup code after reset
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           	psect	text0
  1720  001974                     __ptext0:
  1721                           	opt stack 0
  1722  001974                     _main:
  1723                           	opt stack 20
  1724                           
  1725                           ;main.c: 94: TRISA = 0b11111011;
  1726                           
  1727                           ;incstack = 0
  1728  001974  0EFB               	movlw	251
  1729  001976  6E92               	movwf	3986,c	;volatile
  1730                           
  1731                           ;main.c: 95: TRISB = 0xFF;
  1732  001978  6893               	setf	3987,c	;volatile
  1733                           
  1734                           ;main.c: 96: TRISC = 0x00;
  1735  00197A  0E00               	movlw	0
  1736  00197C  6E94               	movwf	3988,c	;volatile
  1737                           
  1738                           ;main.c: 97: TRISD = 0x00;
  1739  00197E  0E00               	movlw	0
  1740  001980  6E95               	movwf	3989,c	;volatile
  1741                           
  1742                           ;main.c: 98: TRISE = 0x00;
  1743  001982  0E00               	movlw	0
  1744  001984  6E96               	movwf	3990,c	;volatile
  1745                           
  1746                           ;main.c: 100: LATA = 0x00;
  1747  001986  0E00               	movlw	0
  1748  001988  6E89               	movwf	3977,c	;volatile
  1749                           
  1750                           ;main.c: 101: LATB = 0x00;
  1751  00198A  0E00               	movlw	0
  1752  00198C  6E8A               	movwf	3978,c	;volatile
  1753                           
  1754                           ;main.c: 102: LATC = 0x00;
  1755  00198E  0E00               	movlw	0
  1756  001990  6E8B               	movwf	3979,c	;volatile
  1757                           
  1758                           ;main.c: 103: LATD = 0x00;
  1759  001992  0E00               	movlw	0
  1760  001994  6E8C               	movwf	3980,c	;volatile
  1761                           
  1762                           ;main.c: 104: LATE = 0x00;
  1763  001996  0E00               	movlw	0
  1764  001998  6E8D               	movwf	3981,c	;volatile
  1765                           
  1766                           ;main.c: 106: ADCON0 = 0x00;
  1767  00199A  0E00               	movlw	0
  1768  00199C  6EC2               	movwf	4034,c	;volatile
  1769                           
  1770                           ;main.c: 107: ADCON1 = 0xFF;
  1771  00199E  68C1               	setf	4033,c	;volatile
  1772                           
  1773                           ;main.c: 110: GIE = 1;
  1774  0019A0  8EF2               	bsf	intcon,7,c	;volatile
  1775                           
  1776                           ;main.c: 111: INT1IE = 1;
  1777  0019A2  86F0               	bsf	intcon3,3,c	;volatile
  1778                           
  1779                           ;main.c: 112: INT0IE = 0;
  1780  0019A4  98F2               	bcf	intcon,4,c	;volatile
  1781                           
  1782                           ;main.c: 113: INT2IE = 0;
  1783  0019A6  98F0               	bcf	intcon3,4,c	;volatile
  1784                           
  1785                           ;main.c: 115: nRBPU = 0;
  1786  0019A8  9EF1               	bcf	intcon2,7,c	;volatile
  1787                           
  1788                           ;main.c: 117: initLCD();
  1789  0019AA  EC9E  F014         	call	_initLCD	;wreg free
  1790                           
  1791                           ;main.c: 118: I2C_Master_Init(10000);
  1792  0019AE  0E10               	movlw	16
  1793  0019B0  0100               	movlb	0	; () banked
  1794  0019B2  6FE1               	movwf	I2C_Master_Init@c& (0+255),b
  1795  0019B4  0E27               	movlw	39
  1796  0019B6  6FE2               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1797  0019B8  0E00               	movlw	0
  1798  0019BA  6FE3               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1799  0019BC  0E00               	movlw	0
  1800  0019BE  6FE4               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1801  0019C0  EC17  F014         	call	_I2C_Master_Init	;wreg free
  1802                           
  1803                           ;main.c: 119: I2C_ColorSens_Init();
  1804  0019C4  EC83  F013         	call	_I2C_ColorSens_Init	;wreg free
  1805                           
  1806                           ;main.c: 122: TMR0 = 0;
  1807  0019C8  0E00               	movlw	0
  1808  0019CA  6ED7               	movwf	4055,c	;volatile
  1809  0019CC  0E00               	movlw	0
  1810  0019CE  6ED6               	movwf	4054,c	;volatile
  1811                           
  1812                           ;main.c: 123: T08BIT = 0;
  1813  0019D0  9CD5               	bcf	4053,6,c	;volatile
  1814                           
  1815                           ;main.c: 124: T0CS = 0;
  1816  0019D2  9AD5               	bcf	4053,5,c	;volatile
  1817                           
  1818                           ;main.c: 125: PSA = 0;
  1819  0019D4  96D5               	bcf	4053,3,c	;volatile
  1820                           
  1821                           ;main.c: 126: T0PS2 = 1;
  1822  0019D6  84D5               	bsf	4053,2,c	;volatile
  1823                           
  1824                           ;main.c: 127: T0PS1 = 1;
  1825  0019D8  82D5               	bsf	4053,1,c	;volatile
  1826                           
  1827                           ;main.c: 128: T0PS0 = 1;
  1828  0019DA  80D5               	bsf	4053,0,c	;volatile
  1829                           
  1830                           ;main.c: 132: curr_state = STANDBY;
  1831  0019DC  0E00               	movlw	0
  1832  0019DE  0100               	movlb	0	; () banked
  1833  0019E0  6FC3               	movwf	_curr_state& (0+255),b
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;main.c: 135: switch(curr_state){
  1837                           
  1838                           ;main.c: 134: while(1){
  1839  0019E2  D015               	goto	l5217
  1840  0019E4                     l5201:
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;main.c: 137: standby();
  1844  0019E4  EC68  F016         	call	_standby	;wreg free
  1845                           
  1846                           ;main.c: 138: break;
  1847  0019E8  D029               	goto	l5219
  1848  0019EA                     l5203:
  1849                           
  1850                           ;main.c: 140: emergencystop();
  1851  0019EA  EC03  F016         	call	_emergencystop	;wreg free
  1852                           
  1853                           ;main.c: 141: break;
  1854  0019EE  D026               	goto	l5219
  1855  0019F0                     l5205:
  1856                           
  1857                           ;main.c: 143: operation();
  1858  0019F0  EC44  F00F         	call	_operation	;wreg free
  1859                           
  1860                           ;main.c: 144: break;
  1861  0019F4  D023               	goto	l5219
  1862  0019F6                     l5207:
  1863                           
  1864                           ;main.c: 146: operationend();
  1865  0019F6  EC23  F016         	call	_operationend	;wreg free
  1866                           
  1867                           ;main.c: 147: break;
  1868  0019FA  D020               	goto	l5219
  1869  0019FC                     l5209:
  1870                           
  1871                           ;main.c: 149: date_time();
  1872  0019FC  EC0F  F00E         	call	_date_time	;wreg free
  1873                           
  1874                           ;main.c: 150: break;
  1875  001A00  D01D               	goto	l5219
  1876  001A02                     l5211:
  1877                           
  1878                           ;main.c: 152: bottle_count();
  1879  001A02  ECB9  F008         	call	_bottle_count	;wreg free
  1880                           
  1881                           ;main.c: 153: break;
  1882  001A06  D01A               	goto	l5219
  1883  001A08                     l5213:
  1884                           
  1885                           ;main.c: 155: bottle_time();
  1886  001A08  EC69  F015         	call	_bottle_time	;wreg free
  1887                           
  1888                           ;main.c: 157: }
  1889                           
  1890                           ;main.c: 156: break;
  1891  001A0C  D017               	goto	l5219
  1892  001A0E                     l5217:
  1893  001A0E  0100               	movlb	0	; () banked
  1894  001A10  51C3               	movf	_curr_state& (0+255),w,b
  1895                           
  1896                           ; Switch size 1, requested type "space"
  1897                           ; Number of cases is 7, Range of values is 0 to 6
  1898                           ; switch strategies available:
  1899                           ; Name         Instructions Cycles
  1900                           ; simple_byte           22    12 (average)
  1901                           ;	Chosen strategy is simple_byte
  1902  001A12  0A00               	xorlw	0	; case 0
  1903  001A14  B4D8               	btfsc	status,2,c
  1904  001A16  D7E6               	goto	l5201
  1905  001A18  0A01               	xorlw	1	; case 1
  1906  001A1A  B4D8               	btfsc	status,2,c
  1907  001A1C  D7E6               	goto	l5203
  1908  001A1E  0A03               	xorlw	3	; case 2
  1909  001A20  B4D8               	btfsc	status,2,c
  1910  001A22  D7E6               	goto	l5205
  1911  001A24  0A01               	xorlw	1	; case 3
  1912  001A26  B4D8               	btfsc	status,2,c
  1913  001A28  D7E6               	goto	l5207
  1914  001A2A  0A07               	xorlw	7	; case 4
  1915  001A2C  B4D8               	btfsc	status,2,c
  1916  001A2E  D7E6               	goto	l5209
  1917  001A30  0A01               	xorlw	1	; case 5
  1918  001A32  B4D8               	btfsc	status,2,c
  1919  001A34  D7E6               	goto	l5211
  1920  001A36  0A03               	xorlw	3	; case 6
  1921  001A38  B4D8               	btfsc	status,2,c
  1922  001A3A  D7E6               	goto	l5213
  1923  001A3C                     l5219:
  1924                           
  1925                           ;main.c: 158: _delay((unsigned long)((200)*(10000000/4000.0)));
  1926  001A3C  0E03               	movlw	3
  1927  001A3E  0101               	movlb	1	; () banked
  1928  001A40  6F0B               	movwf	(??_main+1)& (0+255),b
  1929  001A42  0E8A               	movlw	138
  1930  001A44  0101               	movlb	1	; () banked
  1931  001A46  6F0A               	movwf	??_main& (0+255),b
  1932  001A48  0E55               	movlw	85
  1933  001A4A                     u4757:
  1934  001A4A  2EE8               	decfsz	wreg,f,c
  1935  001A4C  D7FE               	bra	u4757
  1936  001A4E  2F0A               	decfsz	??_main& (0+255),f,b
  1937  001A50  D7FC               	bra	u4757
  1938  001A52  2F0B               	decfsz	(??_main+1)& (0+255),f,b
  1939  001A54  D7FA               	bra	u4757
  1940  001A56  D000               	nop2	
  1941  001A58  D7DA               	goto	l5217
  1942  001A5A                     __end_of_main:
  1943                           	opt stack 0
  1944                           tblptru	equ	0xFF8
  1945                           tblptrh	equ	0xFF7
  1946                           tblptrl	equ	0xFF6
  1947                           tablat	equ	0xFF5
  1948                           intcon	equ	0xFF2
  1949                           intcon2	equ	0xFF1
  1950                           intcon3	equ	0xFF0
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           status	equ	0xFD8
  1954                           
  1955 ;; *************** function _standby *****************
  1956 ;; Defined at:
  1957 ;;		line 329 in file "main.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;		None
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;		None
  1962 ;; Return value:  Size  Location     Type
  1963 ;;                  1    wreg      void 
  1964 ;; Registers used:
  1965 ;;		wreg, status,2, status,0, cstack
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;Total ram usage:        0 bytes
  1976 ;; Hardware stack levels used:    1
  1977 ;; Hardware stack levels required when called:    9
  1978 ;; This function calls:
  1979 ;;		_lcdInst
  1980 ;; This function is called by:
  1981 ;;		_main
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text1
  1986  002CD0                     __ptext1:
  1987                           	opt stack 0
  1988  002CD0                     _standby:
  1989                           	opt stack 21
  1990                           
  1991                           ;main.c: 330: lcdInst(0b10000000);
  1992                           
  1993                           ;incstack = 0
  1994  002CD0  0E80               	movlw	128
  1995  002CD2  EC4A  F016         	call	_lcdInst
  1996  002CD6  0012               	return	
  1997  002CD8                     __end_of_standby:
  1998                           	opt stack 0
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           intcon	equ	0xFF2
  2004                           intcon2	equ	0xFF1
  2005                           intcon3	equ	0xFF0
  2006                           postinc0	equ	0xFEE
  2007                           wreg	equ	0xFE8
  2008                           status	equ	0xFD8
  2009                           
  2010 ;; *************** function _operationend *****************
  2011 ;; Defined at:
  2012 ;;		line 479 in file "main.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;		None
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;Total ram usage:        0 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:   10
  2033 ;; This function calls:
  2034 ;;		_lcdInst
  2035 ;;		_printf
  2036 ;; This function is called by:
  2037 ;;		_main
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text2
  2042  002C46                     __ptext2:
  2043                           	opt stack 0
  2044  002C46                     _operationend:
  2045                           	opt stack 20
  2046                           
  2047                           ;main.c: 480: lcdInst(0b10000000);
  2048                           
  2049                           ;incstack = 0
  2050  002C46  0E80               	movlw	128
  2051  002C48  EC4A  F016         	call	_lcdInst
  2052                           
  2053                           ;main.c: 481: printf("Operation Done!");
  2054  002C4C  0EC8               	movlw	low STR_23
  2055  002C4E  0100               	movlb	0	; () banked
  2056  002C50  6FE0               	movwf	printf@f& (0+255),b
  2057  002C52  0EFF               	movlw	high STR_23
  2058  002C54  0100               	movlb	0	; () banked
  2059  002C56  6FE1               	movwf	(printf@f+1)& (0+255),b
  2060  002C58  EC6E  F003         	call	_printf	;wreg free
  2061  002C5C  0012               	return	
  2062  002C5E                     __end_of_operationend:
  2063                           	opt stack 0
  2064                           tblptru	equ	0xFF8
  2065                           tblptrh	equ	0xFF7
  2066                           tblptrl	equ	0xFF6
  2067                           tablat	equ	0xFF5
  2068                           intcon	equ	0xFF2
  2069                           intcon2	equ	0xFF1
  2070                           intcon3	equ	0xFF0
  2071                           postinc0	equ	0xFEE
  2072                           wreg	equ	0xFE8
  2073                           status	equ	0xFD8
  2074                           
  2075 ;; *************** function _operation *****************
  2076 ;; Defined at:
  2077 ;;		line 454 in file "main.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;		None
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;		None
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;Total ram usage:        2 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:   10
  2098 ;; This function calls:
  2099 ;;		_lcdInst
  2100 ;;		_printf
  2101 ;;		_read_colorsensor
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text3
  2108  001E88                     __ptext3:
  2109                           	opt stack 0
  2110  001E88                     _operation:
  2111                           	opt stack 20
  2112                           
  2113                           ;main.c: 455: switch(operation_disp){
  2114                           
  2115                           ;incstack = 0
  2116  001E88  D031               	goto	l5069
  2117  001E8A                     l5049:
  2118                           
  2119                           ;main.c: 457: lcdInst(0b10000000);
  2120  001E8A  0E80               	movlw	128
  2121  001E8C  EC4A  F016         	call	_lcdInst
  2122                           
  2123                           ;main.c: 458: printf("Running~              ");
  2124  001E90  0E97               	movlw	low STR_19
  2125  001E92  0100               	movlb	0	; () banked
  2126  001E94  6FE0               	movwf	printf@f& (0+255),b
  2127  001E96  0EFE               	movlw	high STR_19
  2128  001E98  0100               	movlb	0	; () banked
  2129  001E9A  6FE1               	movwf	(printf@f+1)& (0+255),b
  2130  001E9C  EC6E  F003         	call	_printf	;wreg free
  2131                           
  2132                           ;main.c: 459: operation_disp = 1;
  2133  001EA0  0E00               	movlw	0
  2134  001EA2  0100               	movlb	0	; () banked
  2135  001EA4  6FB2               	movwf	(_operation_disp+1)& (0+255),b
  2136  001EA6  0E01               	movlw	1
  2137  001EA8  D01F               	goto	L2
  2138  001EAA                     l5055:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;main.c: 462: lcdInst(0b10000000);
  2142  001EAA  0E80               	movlw	128
  2143  001EAC  EC4A  F016         	call	_lcdInst
  2144                           
  2145                           ;main.c: 463: printf("Running~~              ");
  2146  001EB0  0E7F               	movlw	low STR_20
  2147  001EB2  0100               	movlb	0	; () banked
  2148  001EB4  6FE0               	movwf	printf@f& (0+255),b
  2149  001EB6  0EFE               	movlw	high STR_20
  2150  001EB8  0100               	movlb	0	; () banked
  2151  001EBA  6FE1               	movwf	(printf@f+1)& (0+255),b
  2152  001EBC  EC6E  F003         	call	_printf	;wreg free
  2153                           
  2154                           ;main.c: 464: operation_disp = 2;
  2155  001EC0  0E00               	movlw	0
  2156  001EC2  0100               	movlb	0	; () banked
  2157  001EC4  6FB2               	movwf	(_operation_disp+1)& (0+255),b
  2158  001EC6  0E02               	movlw	2
  2159  001EC8  D00F               	goto	L2
  2160  001ECA                     l5061:
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;main.c: 467: lcdInst(0b10000000);
  2164  001ECA  0E80               	movlw	128
  2165  001ECC  EC4A  F016         	call	_lcdInst
  2166                           
  2167                           ;main.c: 468: printf("Running~~~              ");
  2168  001ED0  0E36               	movlw	low STR_21
  2169  001ED2  0100               	movlb	0	; () banked
  2170  001ED4  6FE0               	movwf	printf@f& (0+255),b
  2171  001ED6  0EFE               	movlw	high STR_21
  2172  001ED8  0100               	movlb	0	; () banked
  2173  001EDA  6FE1               	movwf	(printf@f+1)& (0+255),b
  2174  001EDC  EC6E  F003         	call	_printf	;wreg free
  2175                           
  2176                           ;main.c: 469: operation_disp = 0;
  2177  001EE0  0E00               	movlw	0
  2178  001EE2  0100               	movlb	0	; () banked
  2179  001EE4  6FB2               	movwf	(_operation_disp+1)& (0+255),b
  2180  001EE6  0E00               	movlw	0
  2181  001EE8                     L2:
  2182  001EE8  6FB1               	movwf	_operation_disp& (0+255),b
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;main.c: 471: }
  2186                           
  2187                           ;main.c: 470: break;
  2188  001EEA  D014               	goto	l5071
  2189  001EEC                     l5069:
  2190  001EEC  C0B1  F0EC         	movff	_operation_disp,??_operation
  2191  001EF0  C0B2  F0ED         	movff	_operation_disp+1,??_operation+1
  2192                           
  2193                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2194                           ; Switch size 1, requested type "space"
  2195                           ; Number of cases is 1, Range of values is 0 to 0
  2196                           ; switch strategies available:
  2197                           ; Name         Instructions Cycles
  2198                           ; simple_byte            4     3 (average)
  2199                           ;	Chosen strategy is simple_byte
  2200  001EF4  0100               	movlb	0	; () banked
  2201  001EF6  51ED               	movf	(??_operation+1)& (0+255),w,b
  2202  001EF8  0A00               	xorlw	0	; case 0
  2203  001EFA  A4D8               	btfss	status,2,c
  2204  001EFC  D00B               	goto	l5071
  2205                           
  2206                           ; BSR set to: 0
  2207                           ; Switch size 1, requested type "space"
  2208                           ; Number of cases is 3, Range of values is 0 to 2
  2209                           ; switch strategies available:
  2210                           ; Name         Instructions Cycles
  2211                           ; simple_byte           10     6 (average)
  2212                           ;	Chosen strategy is simple_byte
  2213  001EFE  0100               	movlb	0	; () banked
  2214  001F00  51EC               	movf	??_operation& (0+255),w,b
  2215  001F02  0A00               	xorlw	0	; case 0
  2216  001F04  B4D8               	btfsc	status,2,c
  2217  001F06  D7C1               	goto	l5049
  2218  001F08  0A01               	xorlw	1	; case 1
  2219  001F0A  B4D8               	btfsc	status,2,c
  2220  001F0C  D7CE               	goto	l5055
  2221  001F0E  0A03               	xorlw	3	; case 2
  2222  001F10  B4D8               	btfsc	status,2,c
  2223  001F12  D7DB               	goto	l5061
  2224  001F14                     l5071:
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;main.c: 473: lcdInst(0b11000000);
  2228  001F14  0EC0               	movlw	192
  2229  001F16  EC4A  F016         	call	_lcdInst
  2230                           
  2231                           ;main.c: 474: read_colorsensor();
  2232  001F1A  EC4B  F00B         	call	_read_colorsensor	;wreg free
  2233                           
  2234                           ;main.c: 475: printf("R%d G%d B%d                ", color[1], color[2], color[3]);
  2235  001F1E  0E1A               	movlw	low STR_22
  2236  001F20  0100               	movlb	0	; () banked
  2237  001F22  6FE0               	movwf	printf@f& (0+255),b
  2238  001F24  0EFE               	movlw	high STR_22
  2239  001F26  0100               	movlb	0	; () banked
  2240  001F28  6FE1               	movwf	(printf@f+1)& (0+255),b
  2241  001F2A  C078  F0E2         	movff	_color+2,?_printf+2
  2242  001F2E  C079  F0E3         	movff	_color+3,?_printf+3
  2243  001F32  C07A  F0E4         	movff	_color+4,?_printf+4
  2244  001F36  C07B  F0E5         	movff	_color+5,?_printf+5
  2245  001F3A  C07C  F0E6         	movff	_color+6,?_printf+6
  2246  001F3E  C07D  F0E7         	movff	_color+7,?_printf+7
  2247  001F42  EC6E  F003         	call	_printf	;wreg free
  2248  001F46  0012               	return	
  2249  001F48                     __end_of_operation:
  2250                           	opt stack 0
  2251                           tblptru	equ	0xFF8
  2252                           tblptrh	equ	0xFF7
  2253                           tblptrl	equ	0xFF6
  2254                           tablat	equ	0xFF5
  2255                           intcon	equ	0xFF2
  2256                           intcon2	equ	0xFF1
  2257                           intcon3	equ	0xFF0
  2258                           postinc0	equ	0xFEE
  2259                           wreg	equ	0xFE8
  2260                           status	equ	0xFD8
  2261                           
  2262 ;; *************** function _read_colorsensor *****************
  2263 ;; Defined at:
  2264 ;;		line 534 in file "main.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;		None
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  i               2   25[BANK0 ] int 
  2269 ;;  color_comb      2   21[BANK0 ] int 
  2270 ;;  color_high      1   24[BANK0 ] unsigned char 
  2271 ;;  color_low       1   23[BANK0 ] unsigned char 
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2282 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2283 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2285 ;;Total ram usage:        8 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    9
  2288 ;; This function calls:
  2289 ;;		_I2C_Master_Read
  2290 ;;		_I2C_Master_RepeatedStart
  2291 ;;		_I2C_Master_Start
  2292 ;;		_I2C_Master_Stop
  2293 ;;		_I2C_Master_Write
  2294 ;; This function is called by:
  2295 ;;		_operation
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           	psect	text4
  2300  001696                     __ptext4:
  2301                           	opt stack 0
  2302  001696                     _read_colorsensor:
  2303                           	opt stack 20
  2304                           
  2305                           ;main.c: 539: unsigned char color_low;
  2306                           ;main.c: 540: unsigned char color_high;
  2307                           ;main.c: 541: int color_comb;
  2308                           ;main.c: 542: int i;
  2309                           ;main.c: 545: I2C_Master_Start();
  2310                           
  2311                           ;incstack = 0
  2312  001696  EC74  F016         	call	_I2C_Master_Start	;wreg free
  2313                           
  2314                           ;main.c: 546: I2C_Master_Write(0b01010010);
  2315  00169A  0E00               	movlw	0
  2316  00169C  0100               	movlb	0	; () banked
  2317  00169E  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2318  0016A0  0E52               	movlw	82
  2319  0016A2  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2320  0016A4  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  2321                           
  2322                           ;main.c: 547: I2C_Master_Write(0b10110100);
  2323  0016A8  0E00               	movlw	0
  2324  0016AA  0100               	movlb	0	; () banked
  2325  0016AC  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2326  0016AE  0EB4               	movlw	180
  2327  0016B0  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2328  0016B2  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  2329                           
  2330                           ;main.c: 548: I2C_Master_RepeatedStart();
  2331  0016B6  EC6C  F016         	call	_I2C_Master_RepeatedStart	;wreg free
  2332                           
  2333                           ;main.c: 549: I2C_Master_Write(0b01010011);
  2334  0016BA  0E00               	movlw	0
  2335  0016BC  0100               	movlb	0	; () banked
  2336  0016BE  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2337  0016C0  0E53               	movlw	83
  2338  0016C2  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2339  0016C4  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  2340                           
  2341                           ;main.c: 550: for(i=0; i<3; i++){
  2342  0016C8  0E00               	movlw	0
  2343  0016CA  0100               	movlb	0	; () banked
  2344  0016CC  6FDE               	movwf	(read_colorsensor@i+1)& (0+255),b
  2345  0016CE  0E00               	movlw	0
  2346  0016D0  6FDD               	movwf	read_colorsensor@i& (0+255),b
  2347  0016D2                     l3621:
  2348                           
  2349                           ; BSR set to: 0
  2350  0016D2  0100               	movlb	0	; () banked
  2351  0016D4  BFDE               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2352  0016D6  D008               	goto	l3625
  2353  0016D8  0100               	movlb	0	; () banked
  2354  0016DA  51DE               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2355  0016DC  E134               	bnz	l3635
  2356  0016DE  0E03               	movlw	3
  2357  0016E0  0100               	movlb	0	; () banked
  2358  0016E2  5DDD               	subwf	read_colorsensor@i& (0+255),w,b
  2359  0016E4  B0D8               	btfsc	status,0,c
  2360  0016E6  D02F               	goto	l3635
  2361  0016E8                     l3625:
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;main.c: 551: color_low = I2C_Master_Read(1);
  2365  0016E8  0E01               	movlw	1
  2366  0016EA  EC9F  F015         	call	_I2C_Master_Read
  2367  0016EE  0100               	movlb	0	; () banked
  2368  0016F0  6FDB               	movwf	read_colorsensor@color_low& (0+255),b
  2369                           
  2370                           ;main.c: 552: color_high = I2C_Master_Read(1);
  2371  0016F2  0E01               	movlw	1
  2372  0016F4  EC9F  F015         	call	_I2C_Master_Read
  2373  0016F8  0100               	movlb	0	; () banked
  2374  0016FA  6FDC               	movwf	read_colorsensor@color_high& (0+255),b
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;main.c: 553: color_comb = (color_high << 8)|(color_low);
  2378  0016FC  0100               	movlb	0	; () banked
  2379  0016FE  51DB               	movf	read_colorsensor@color_low& (0+255),w,b
  2380  001700  C0DC  F0D7         	movff	read_colorsensor@color_high,??_read_colorsensor
  2381  001704  0100               	movlb	0	; () banked
  2382  001706  6BD8               	clrf	(??_read_colorsensor+1)& (0+255),b
  2383  001708  C0D7  F0D8         	movff	??_read_colorsensor,??_read_colorsensor+1
  2384  00170C  0100               	movlb	0	; () banked
  2385  00170E  6BD7               	clrf	??_read_colorsensor& (0+255),b
  2386  001710  0100               	movlb	0	; () banked
  2387  001712  11D7               	iorwf	??_read_colorsensor& (0+255),w,b
  2388  001714  0100               	movlb	0	; () banked
  2389  001716  6FD9               	movwf	read_colorsensor@color_comb& (0+255),b
  2390  001718  0100               	movlb	0	; () banked
  2391  00171A  51D8               	movf	(??_read_colorsensor+1)& (0+255),w,b
  2392  00171C  0100               	movlb	0	; () banked
  2393  00171E  6FDA               	movwf	(read_colorsensor@color_comb+1)& (0+255),b
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;main.c: 554: color[i] = color_comb;
  2397  001720  90D8               	bcf	status,0,c
  2398  001722  0100               	movlb	0	; () banked
  2399  001724  35DD               	rlcf	read_colorsensor@i& (0+255),w,b
  2400  001726  6ED9               	movwf	fsr2l,c
  2401  001728  0100               	movlb	0	; () banked
  2402  00172A  35DE               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2403  00172C  6EDA               	movwf	fsr2h,c
  2404  00172E  0E76               	movlw	low _color
  2405  001730  26D9               	addwf	fsr2l,f,c
  2406  001732  0E00               	movlw	high _color
  2407  001734  22DA               	addwfc	fsr2h,f,c
  2408  001736  C0D9  FFDE         	movff	read_colorsensor@color_comb,postinc2
  2409  00173A  C0DA  FFDD         	movff	read_colorsensor@color_comb+1,postdec2
  2410                           
  2411                           ; BSR set to: 0
  2412  00173E  0100               	movlb	0	; () banked
  2413  001740  4BDD               	infsnz	read_colorsensor@i& (0+255),f,b
  2414  001742  2BDE               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2415  001744  D7C6               	goto	l3621
  2416  001746                     l3635:
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;main.c: 555: }
  2420                           ;main.c: 556: color_low = I2C_Master_Read(1);
  2421  001746  0E01               	movlw	1
  2422  001748  EC9F  F015         	call	_I2C_Master_Read
  2423  00174C  0100               	movlb	0	; () banked
  2424  00174E  6FDB               	movwf	read_colorsensor@color_low& (0+255),b
  2425                           
  2426                           ;main.c: 557: color_high = I2C_Master_Read(0);
  2427  001750  0E00               	movlw	0
  2428  001752  EC9F  F015         	call	_I2C_Master_Read
  2429  001756  0100               	movlb	0	; () banked
  2430  001758  6FDC               	movwf	read_colorsensor@color_high& (0+255),b
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;main.c: 558: color_comb = (color_high << 8)|(color_low);
  2434  00175A  0100               	movlb	0	; () banked
  2435  00175C  51DB               	movf	read_colorsensor@color_low& (0+255),w,b
  2436  00175E  C0DC  F0D7         	movff	read_colorsensor@color_high,??_read_colorsensor
  2437  001762  0100               	movlb	0	; () banked
  2438  001764  6BD8               	clrf	(??_read_colorsensor+1)& (0+255),b
  2439  001766  C0D7  F0D8         	movff	??_read_colorsensor,??_read_colorsensor+1
  2440  00176A  0100               	movlb	0	; () banked
  2441  00176C  6BD7               	clrf	??_read_colorsensor& (0+255),b
  2442  00176E  0100               	movlb	0	; () banked
  2443  001770  11D7               	iorwf	??_read_colorsensor& (0+255),w,b
  2444  001772  0100               	movlb	0	; () banked
  2445  001774  6FD9               	movwf	read_colorsensor@color_comb& (0+255),b
  2446  001776  0100               	movlb	0	; () banked
  2447  001778  51D8               	movf	(??_read_colorsensor+1)& (0+255),w,b
  2448  00177A  0100               	movlb	0	; () banked
  2449  00177C  6FDA               	movwf	(read_colorsensor@color_comb+1)& (0+255),b
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;main.c: 559: color[3] = color_comb;
  2453  00177E  C0D9  F07C         	movff	read_colorsensor@color_comb,_color+6
  2454  001782  C0DA  F07D         	movff	read_colorsensor@color_comb+1,_color+7
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;main.c: 560: I2C_Master_Stop();
  2458  001786  EC70  F016         	call	_I2C_Master_Stop	;wreg free
  2459  00178A  0012               	return	
  2460  00178C                     __end_of_read_colorsensor:
  2461                           	opt stack 0
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           intcon	equ	0xFF2
  2467                           intcon2	equ	0xFF1
  2468                           intcon3	equ	0xFF0
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _I2C_Master_RepeatedStart *****************
  2478 ;; Defined at:
  2479 ;;		line 35 in file "I2C.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;		None
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;		None
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;Total ram usage:        0 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    8
  2500 ;; This function calls:
  2501 ;;		_I2C_Master_Wait
  2502 ;; This function is called by:
  2503 ;;		_read_colorsensor
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text5
  2508  002CD8                     __ptext5:
  2509                           	opt stack 0
  2510  002CD8                     _I2C_Master_RepeatedStart:
  2511                           	opt stack 20
  2512                           
  2513                           ;I2C.c: 37: I2C_Master_Wait();
  2514                           
  2515                           ;incstack = 0
  2516  002CD8  EC2F  F016         	call	_I2C_Master_Wait	;wreg free
  2517                           
  2518                           ;I2C.c: 38: RSEN = 1;
  2519  002CDC  82C5               	bsf	4037,1,c	;volatile
  2520  002CDE  0012               	return		;funcret
  2521  002CE0                     __end_of_I2C_Master_RepeatedStart:
  2522                           	opt stack 0
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           intcon	equ	0xFF2
  2528                           intcon2	equ	0xFF1
  2529                           intcon3	equ	0xFF0
  2530                           postinc0	equ	0xFEE
  2531                           wreg	equ	0xFE8
  2532                           postinc2	equ	0xFDE
  2533                           postdec2	equ	0xFDD
  2534                           fsr2h	equ	0xFDA
  2535                           fsr2l	equ	0xFD9
  2536                           status	equ	0xFD8
  2537                           
  2538 ;; *************** function _initLCD *****************
  2539 ;; Defined at:
  2540 ;;		line 14 in file "lcd.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, status,2, status,0, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;Total ram usage:        1 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    9
  2561 ;; This function calls:
  2562 ;;		_lcdInst
  2563 ;; This function is called by:
  2564 ;;		_main
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text6
  2569  00293C                     __ptext6:
  2570                           	opt stack 0
  2571  00293C                     _initLCD:
  2572                           	opt stack 21
  2573                           
  2574                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2575                           
  2576                           ;incstack = 0
  2577  00293C  0E31               	movlw	49
  2578  00293E  0100               	movlb	0	; () banked
  2579  002940  6FD7               	movwf	??_initLCD& (0+255),b
  2580  002942  0EB2               	movlw	178
  2581  002944                     u4767:
  2582  002944  2EE8               	decfsz	wreg,f,c
  2583  002946  D7FE               	bra	u4767
  2584  002948  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2585  00294A  D7FC               	bra	u4767
  2586  00294C  F000               	nop	
  2587                           
  2588                           ;lcd.c: 16: lcdInst(0b00110011);
  2589  00294E  0E33               	movlw	51
  2590  002950  EC4A  F016         	call	_lcdInst
  2591                           
  2592                           ;lcd.c: 17: lcdInst(0b00110011);
  2593  002954  0E33               	movlw	51
  2594  002956  EC4A  F016         	call	_lcdInst
  2595                           
  2596                           ;lcd.c: 18: lcdInst(0b00110010);
  2597  00295A  0E32               	movlw	50
  2598  00295C  EC4A  F016         	call	_lcdInst
  2599                           
  2600                           ;lcd.c: 19: lcdInst(0b00101000);
  2601  002960  0E28               	movlw	40
  2602  002962  EC4A  F016         	call	_lcdInst
  2603                           
  2604                           ;lcd.c: 20: lcdInst(0b00001111);
  2605  002966  0E0F               	movlw	15
  2606  002968  EC4A  F016         	call	_lcdInst
  2607                           
  2608                           ;lcd.c: 21: lcdInst(0b00000110);
  2609  00296C  0E06               	movlw	6
  2610  00296E  EC4A  F016         	call	_lcdInst
  2611                           
  2612                           ;lcd.c: 22: lcdInst(0b00000001);
  2613  002972  0E01               	movlw	1
  2614  002974  EC4A  F016         	call	_lcdInst
  2615                           
  2616                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2617  002978  0E31               	movlw	49
  2618  00297A  0100               	movlb	0	; () banked
  2619  00297C  6FD7               	movwf	??_initLCD& (0+255),b
  2620  00297E  0EB2               	movlw	178
  2621  002980                     u4777:
  2622  002980  2EE8               	decfsz	wreg,f,c
  2623  002982  D7FE               	bra	u4777
  2624  002984  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2625  002986  D7FC               	bra	u4777
  2626  002988  F000               	nop	
  2627  00298A  0012               	return		;funcret
  2628  00298C                     __end_of_initLCD:
  2629                           	opt stack 0
  2630                           tblptru	equ	0xFF8
  2631                           tblptrh	equ	0xFF7
  2632                           tblptrl	equ	0xFF6
  2633                           tablat	equ	0xFF5
  2634                           intcon	equ	0xFF2
  2635                           intcon2	equ	0xFF1
  2636                           intcon3	equ	0xFF0
  2637                           postinc0	equ	0xFEE
  2638                           wreg	equ	0xFE8
  2639                           postinc2	equ	0xFDE
  2640                           postdec2	equ	0xFDD
  2641                           fsr2h	equ	0xFDA
  2642                           fsr2l	equ	0xFD9
  2643                           status	equ	0xFD8
  2644                           
  2645 ;; *************** function _emergencystop *****************
  2646 ;; Defined at:
  2647 ;;		line 485 in file "main.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;		None
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;		None
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      void 
  2654 ;; Registers used:
  2655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;Total ram usage:        0 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; Hardware stack levels required when called:   10
  2668 ;; This function calls:
  2669 ;;		_lcdInst
  2670 ;;		_printf
  2671 ;; This function is called by:
  2672 ;;		_main
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           	psect	text7
  2677  002C06                     __ptext7:
  2678                           	opt stack 0
  2679  002C06                     _emergencystop:
  2680                           	opt stack 20
  2681                           
  2682                           ;main.c: 486: (INTCONbits.GIE = 0);
  2683                           
  2684                           ;incstack = 0
  2685  002C06  9EF2               	bcf	intcon,7,c	;volatile
  2686                           
  2687                           ;main.c: 487: PORTAbits.RA2 = 0;
  2688  002C08  9480               	bcf	3968,2,c	;volatile
  2689                           
  2690                           ;main.c: 488: lcdInst(0b00000001);
  2691  002C0A  0E01               	movlw	1
  2692  002C0C  EC4A  F016         	call	_lcdInst
  2693                           
  2694                           ;main.c: 489: lcdInst(0b10000000);
  2695  002C10  0E80               	movlw	128
  2696  002C12  EC4A  F016         	call	_lcdInst
  2697                           
  2698                           ;main.c: 490: printf("EMERGENCY STOP");
  2699  002C16  0ED8               	movlw	low STR_24
  2700  002C18  0100               	movlb	0	; () banked
  2701  002C1A  6FE0               	movwf	printf@f& (0+255),b
  2702  002C1C  0EFF               	movlw	high STR_24
  2703  002C1E  0100               	movlb	0	; () banked
  2704  002C20  6FE1               	movwf	(printf@f+1)& (0+255),b
  2705  002C22  EC6E  F003         	call	_printf	;wreg free
  2706  002C26                     l374:
  2707  002C26  D7FF               	goto	l374
  2708  002C28                     __end_of_emergencystop:
  2709                           	opt stack 0
  2710                           tblptru	equ	0xFF8
  2711                           tblptrh	equ	0xFF7
  2712                           tblptrl	equ	0xFF6
  2713                           tablat	equ	0xFF5
  2714                           intcon	equ	0xFF2
  2715                           intcon2	equ	0xFF1
  2716                           intcon3	equ	0xFF0
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           postinc2	equ	0xFDE
  2720                           postdec2	equ	0xFDD
  2721                           fsr2h	equ	0xFDA
  2722                           fsr2l	equ	0xFD9
  2723                           status	equ	0xFD8
  2724                           
  2725 ;; *************** function _date_time *****************
  2726 ;; Defined at:
  2727 ;;		line 361 in file "main.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;		None
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;  i               1   40[BANK0 ] unsigned char 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2745 ;;Total ram usage:        1 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:   10
  2748 ;; This function calls:
  2749 ;;		_I2C_Master_Read
  2750 ;;		_I2C_Master_Start
  2751 ;;		_I2C_Master_Stop
  2752 ;;		_I2C_Master_Write
  2753 ;;		_lcdInst
  2754 ;;		_printf
  2755 ;; This function is called by:
  2756 ;;		_main
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           	psect	text8
  2761  001C1E                     __ptext8:
  2762                           	opt stack 0
  2763  001C1E                     _date_time:
  2764                           	opt stack 20
  2765                           
  2766                           ;main.c: 363: I2C_Master_Start();
  2767                           
  2768                           ;incstack = 0
  2769  001C1E  EC74  F016         	call	_I2C_Master_Start	;wreg free
  2770                           
  2771                           ;main.c: 364: I2C_Master_Write(0b11010000);
  2772  001C22  0E00               	movlw	0
  2773  001C24  0100               	movlb	0	; () banked
  2774  001C26  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2775  001C28  0ED0               	movlw	208
  2776  001C2A  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2777  001C2C  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  2778                           
  2779                           ;main.c: 365: I2C_Master_Write(0x00);
  2780  001C30  0E00               	movlw	0
  2781  001C32  0100               	movlb	0	; () banked
  2782  001C34  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2783  001C36  0E00               	movlw	0
  2784  001C38  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2785  001C3A  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  2786                           
  2787                           ;main.c: 366: I2C_Master_Stop();
  2788  001C3E  EC70  F016         	call	_I2C_Master_Stop	;wreg free
  2789                           
  2790                           ;main.c: 369: I2C_Master_Start();
  2791  001C42  EC74  F016         	call	_I2C_Master_Start	;wreg free
  2792                           
  2793                           ;main.c: 370: I2C_Master_Write(0b11010001);
  2794  001C46  0E00               	movlw	0
  2795  001C48  0100               	movlb	0	; () banked
  2796  001C4A  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2797  001C4C  0ED1               	movlw	209
  2798  001C4E  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2799  001C50  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  2800                           
  2801                           ;main.c: 371: for(unsigned char i=0;i<0x06;i++){
  2802  001C54  0E00               	movlw	0
  2803  001C56  0100               	movlb	0	; () banked
  2804  001C58  6FEC               	movwf	date_time@i& (0+255),b
  2805  001C5A                     l5093:
  2806                           
  2807                           ; BSR set to: 0
  2808  001C5A  0E05               	movlw	5
  2809  001C5C  0100               	movlb	0	; () banked
  2810  001C5E  65EC               	cpfsgt	date_time@i& (0+255),b
  2811  001C60  D001               	goto	l5097
  2812  001C62  D010               	goto	l5103
  2813  001C64                     l5097:
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;main.c: 372: time[i] = I2C_Master_Read(1);
  2817  001C64  0100               	movlb	0	; () banked
  2818  001C66  51EC               	movf	date_time@i& (0+255),w,b
  2819  001C68  0D01               	mullw	1
  2820  001C6A  0E96               	movlw	low _time
  2821  001C6C  24F3               	addwf	prodl,w,c
  2822  001C6E  6ED9               	movwf	fsr2l,c
  2823  001C70  0E00               	movlw	high _time
  2824  001C72  20F4               	addwfc	prodh,w,c
  2825  001C74  6EDA               	movwf	fsr2h,c
  2826  001C76  0E01               	movlw	1
  2827  001C78  EC9F  F015         	call	_I2C_Master_Read
  2828  001C7C  6EDF               	movwf	indf2,c
  2829  001C7E  0100               	movlb	0	; () banked
  2830  001C80  2BEC               	incf	date_time@i& (0+255),f,b
  2831  001C82  D7EB               	goto	l5093
  2832  001C84                     l5103:
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 373: }
  2836                           ;main.c: 374: time[6] = I2C_Master_Read(0);
  2837  001C84  0E00               	movlw	0
  2838  001C86  EC9F  F015         	call	_I2C_Master_Read
  2839  001C8A  0100               	movlb	0	; () banked
  2840  001C8C  6F9C               	movwf	(_time+6)& (0+255),b
  2841                           
  2842                           ;main.c: 375: I2C_Master_Stop();
  2843  001C8E  EC70  F016         	call	_I2C_Master_Stop	;wreg free
  2844                           
  2845                           ;main.c: 378: lcdInst(0b10000000);
  2846  001C92  0E80               	movlw	128
  2847  001C94  EC4A  F016         	call	_lcdInst
  2848                           
  2849                           ;main.c: 379: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2850  001C98  0EC5               	movlw	low STR_4
  2851  001C9A  0100               	movlb	0	; () banked
  2852  001C9C  6FE0               	movwf	printf@f& (0+255),b
  2853  001C9E  0EFE               	movlw	high STR_4
  2854  001CA0  0100               	movlb	0	; () banked
  2855  001CA2  6FE1               	movwf	(printf@f+1)& (0+255),b
  2856  001CA4  C09B  F0E2         	movff	_time+5,?_printf+2
  2857  001CA8  0100               	movlb	0	; () banked
  2858  001CAA  6BE3               	clrf	(?_printf+3)& (0+255),b
  2859  001CAC  C09A  F0E4         	movff	_time+4,?_printf+4
  2860  001CB0  0100               	movlb	0	; () banked
  2861  001CB2  6BE5               	clrf	(?_printf+5)& (0+255),b
  2862  001CB4  C09C  F0E6         	movff	_time+6,?_printf+6
  2863  001CB8  0100               	movlb	0	; () banked
  2864  001CBA  6BE7               	clrf	(?_printf+7)& (0+255),b
  2865  001CBC  EC6E  F003         	call	_printf	;wreg free
  2866                           
  2867                           ;main.c: 380: lcdInst(0b11000000);
  2868  001CC0  0EC0               	movlw	192
  2869  001CC2  EC4A  F016         	call	_lcdInst
  2870                           
  2871                           ;main.c: 381: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2872  001CC6  0EDC               	movlw	low STR_5
  2873  001CC8  0100               	movlb	0	; () banked
  2874  001CCA  6FE0               	movwf	printf@f& (0+255),b
  2875  001CCC  0EFE               	movlw	high STR_5
  2876  001CCE  0100               	movlb	0	; () banked
  2877  001CD0  6FE1               	movwf	(printf@f+1)& (0+255),b
  2878  001CD2  C098  F0E2         	movff	_time+2,?_printf+2
  2879  001CD6  0100               	movlb	0	; () banked
  2880  001CD8  6BE3               	clrf	(?_printf+3)& (0+255),b
  2881  001CDA  C097  F0E4         	movff	_time+1,?_printf+4
  2882  001CDE  0100               	movlb	0	; () banked
  2883  001CE0  6BE5               	clrf	(?_printf+5)& (0+255),b
  2884  001CE2  C096  F0E6         	movff	_time,?_printf+6
  2885  001CE6  0100               	movlb	0	; () banked
  2886  001CE8  6BE7               	clrf	(?_printf+7)& (0+255),b
  2887  001CEA  EC6E  F003         	call	_printf	;wreg free
  2888  001CEE  0012               	return	
  2889  001CF0                     __end_of_date_time:
  2890                           	opt stack 0
  2891                           tblptru	equ	0xFF8
  2892                           tblptrh	equ	0xFF7
  2893                           tblptrl	equ	0xFF6
  2894                           tablat	equ	0xFF5
  2895                           prodh	equ	0xFF4
  2896                           prodl	equ	0xFF3
  2897                           intcon	equ	0xFF2
  2898                           intcon2	equ	0xFF1
  2899                           intcon3	equ	0xFF0
  2900                           postinc0	equ	0xFEE
  2901                           wreg	equ	0xFE8
  2902                           indf2	equ	0xFDF
  2903                           postinc2	equ	0xFDE
  2904                           postdec2	equ	0xFDD
  2905                           fsr2h	equ	0xFDA
  2906                           fsr2l	equ	0xFD9
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function _I2C_Master_Read *****************
  2910 ;; Defined at:
  2911 ;;		line 67 in file "I2C.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;  a               1    wreg     unsigned char 
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;  a               1   17[BANK0 ] unsigned char 
  2916 ;;  temp            1   18[BANK0 ] unsigned char 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      unsigned char 
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;Total ram usage:        2 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    8
  2933 ;; This function calls:
  2934 ;;		_I2C_Master_Wait
  2935 ;; This function is called by:
  2936 ;;		_date_time
  2937 ;;		_read_colorsensor
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text9
  2942  002B3E                     __ptext9:
  2943                           	opt stack 0
  2944  002B3E                     _I2C_Master_Read:
  2945                           	opt stack 20
  2946                           
  2947                           ;incstack = 0
  2948                           ;I2C_Master_Read@a stored from wreg
  2949  002B3E  0100               	movlb	0	; () banked
  2950  002B40  6FD5               	movwf	I2C_Master_Read@a& (0+255),b
  2951                           
  2952                           ;I2C.c: 69: unsigned char temp;
  2953                           ;I2C.c: 70: I2C_Master_Wait();
  2954  002B42  EC2F  F016         	call	_I2C_Master_Wait	;wreg free
  2955                           
  2956                           ;I2C.c: 71: RCEN = 1;
  2957  002B46  86C5               	bsf	4037,3,c	;volatile
  2958                           
  2959                           ;I2C.c: 72: I2C_Master_Wait();
  2960  002B48  EC2F  F016         	call	_I2C_Master_Wait	;wreg free
  2961                           
  2962                           ;I2C.c: 73: temp = SSPBUF;
  2963  002B4C  CFC9 F0D6          	movff	4041,I2C_Master_Read@temp	;volatile
  2964                           
  2965                           ;I2C.c: 74: I2C_Master_Wait();
  2966  002B50  EC2F  F016         	call	_I2C_Master_Wait	;wreg free
  2967                           
  2968                           ;I2C.c: 75: ACKDT = (a)?0:1;
  2969  002B54  0100               	movlb	0	; () banked
  2970  002B56  51D5               	movf	I2C_Master_Read@a& (0+255),w,b
  2971  002B58  0100               	movlb	0	; () banked
  2972  002B5A  A4D8               	btfss	status,2,c
  2973  002B5C  D002               	goto	u2920
  2974  002B5E  8AC5               	bsf	4037,5,c	;volatile
  2975  002B60  D001               	goto	l3449
  2976  002B62                     u2920:
  2977  002B62  9AC5               	bcf	4037,5,c	;volatile
  2978  002B64                     l3449:
  2979                           
  2980                           ;I2C.c: 76: ACKEN = 1;
  2981  002B64  88C5               	bsf	4037,4,c	;volatile
  2982                           
  2983                           ;I2C.c: 77: return temp;
  2984  002B66  0100               	movlb	0	; () banked
  2985  002B68  51D6               	movf	I2C_Master_Read@temp& (0+255),w,b
  2986  002B6A  0012               	return	
  2987  002B6C                     __end_of_I2C_Master_Read:
  2988                           	opt stack 0
  2989                           tblptru	equ	0xFF8
  2990                           tblptrh	equ	0xFF7
  2991                           tblptrl	equ	0xFF6
  2992                           tablat	equ	0xFF5
  2993                           prodh	equ	0xFF4
  2994                           prodl	equ	0xFF3
  2995                           intcon	equ	0xFF2
  2996                           intcon2	equ	0xFF1
  2997                           intcon3	equ	0xFF0
  2998                           postinc0	equ	0xFEE
  2999                           wreg	equ	0xFE8
  3000                           indf2	equ	0xFDF
  3001                           postinc2	equ	0xFDE
  3002                           postdec2	equ	0xFDD
  3003                           fsr2h	equ	0xFDA
  3004                           fsr2l	equ	0xFD9
  3005                           status	equ	0xFD8
  3006                           
  3007 ;; *************** function _bottle_time *****************
  3008 ;; Defined at:
  3009 ;;		line 446 in file "main.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;		None
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  1    wreg      void 
  3016 ;; Registers used:
  3017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;Total ram usage:        0 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:   10
  3030 ;; This function calls:
  3031 ;;		_lcdInst
  3032 ;;		_printf
  3033 ;; This function is called by:
  3034 ;;		_main
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           	psect	text10
  3039  002AD2                     __ptext10:
  3040                           	opt stack 0
  3041  002AD2                     _bottle_time:
  3042                           	opt stack 20
  3043                           
  3044                           ;main.c: 447: lcdInst(0b10000000);
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;incstack = 0
  3048  002AD2  0E80               	movlw	128
  3049  002AD4  EC4A  F016         	call	_lcdInst
  3050                           
  3051                           ;main.c: 448: printf("Total Operation       ");
  3052  002AD8  0EAE               	movlw	low STR_17
  3053  002ADA  0100               	movlb	0	; () banked
  3054  002ADC  6FE0               	movwf	printf@f& (0+255),b
  3055  002ADE  0EFE               	movlw	high STR_17
  3056  002AE0  0100               	movlb	0	; () banked
  3057  002AE2  6FE1               	movwf	(printf@f+1)& (0+255),b
  3058  002AE4  EC6E  F003         	call	_printf	;wreg free
  3059                           
  3060                           ;main.c: 449: lcdInst(0b11000000);
  3061  002AE8  0EC0               	movlw	192
  3062  002AEA  EC4A  F016         	call	_lcdInst
  3063                           
  3064                           ;main.c: 450: printf("Time: %d s       ", operation_time);
  3065  002AEE  0EF3               	movlw	low STR_18
  3066  002AF0  0100               	movlb	0	; () banked
  3067  002AF2  6FE0               	movwf	printf@f& (0+255),b
  3068  002AF4  0EFE               	movlw	high STR_18
  3069  002AF6  0100               	movlb	0	; () banked
  3070  002AF8  6FE1               	movwf	(printf@f+1)& (0+255),b
  3071  002AFA  C0B3  F0E2         	movff	_operation_time,?_printf+2
  3072  002AFE  C0B4  F0E3         	movff	_operation_time+1,?_printf+3
  3073  002B02  EC6E  F003         	call	_printf	;wreg free
  3074  002B06  0012               	return	
  3075  002B08                     __end_of_bottle_time:
  3076                           	opt stack 0
  3077                           tblptru	equ	0xFF8
  3078                           tblptrh	equ	0xFF7
  3079                           tblptrl	equ	0xFF6
  3080                           tablat	equ	0xFF5
  3081                           prodh	equ	0xFF4
  3082                           prodl	equ	0xFF3
  3083                           intcon	equ	0xFF2
  3084                           intcon2	equ	0xFF1
  3085                           intcon3	equ	0xFF0
  3086                           postinc0	equ	0xFEE
  3087                           wreg	equ	0xFE8
  3088                           indf2	equ	0xFDF
  3089                           postinc2	equ	0xFDE
  3090                           postdec2	equ	0xFDD
  3091                           fsr2h	equ	0xFDA
  3092                           fsr2l	equ	0xFD9
  3093                           status	equ	0xFD8
  3094                           
  3095 ;; *************** function _bottle_count *****************
  3096 ;; Defined at:
  3097 ;;		line 404 in file "main.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;		None
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;		None
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  1    wreg      void 
  3104 ;; Registers used:
  3105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3106 ;; Tracked objects:
  3107 ;;		On entry : 0/0
  3108 ;;		On exit  : 0/0
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;Total ram usage:        0 bytes
  3116 ;; Hardware stack levels used:    1
  3117 ;; Hardware stack levels required when called:   10
  3118 ;; This function calls:
  3119 ;;		___awmod
  3120 ;;		_lcdInst
  3121 ;;		_printf
  3122 ;; This function is called by:
  3123 ;;		_main
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text11
  3128  001172                     __ptext11:
  3129                           	opt stack 0
  3130  001172                     _bottle_count:
  3131                           	opt stack 20
  3132                           
  3133                           ;main.c: 405: switch(bottle_count_disp % 5){
  3134                           
  3135                           ;incstack = 0
  3136  001172  D0A7               	goto	l5149
  3137  001174                     l5113:
  3138                           
  3139                           ;main.c: 407: lcdInst(0b10000000);
  3140  001174  0E80               	movlw	128
  3141  001176  EC4A  F016         	call	_lcdInst
  3142                           
  3143                           ;main.c: 408: printf("Bottle Count    ");
  3144  00117A  0EB7               	movlw	low STR_6
  3145  00117C  0100               	movlb	0	; () banked
  3146  00117E  6FE0               	movwf	printf@f& (0+255),b
  3147  001180  0EFF               	movlw	high STR_6
  3148  001182  0100               	movlb	0	; () banked
  3149  001184  6FE1               	movwf	(printf@f+1)& (0+255),b
  3150  001186  EC6E  F003         	call	_printf	;wreg free
  3151                           
  3152                           ;main.c: 409: lcdInst(0b11000000);
  3153  00118A  0EC0               	movlw	192
  3154  00118C  EC4A  F016         	call	_lcdInst
  3155                           
  3156                           ;main.c: 410: printf("Total: %d       ", total_bottle_count);
  3157  001190  0EA6               	movlw	low STR_7
  3158  001192  0100               	movlb	0	; () banked
  3159  001194  6FE0               	movwf	printf@f& (0+255),b
  3160  001196  0EFF               	movlw	high STR_7
  3161  001198  0100               	movlb	0	; () banked
  3162  00119A  6FE1               	movwf	(printf@f+1)& (0+255),b
  3163  00119C  C0B9  F0E2         	movff	_total_bottle_count,?_printf+2
  3164  0011A0  C0BA  F0E3         	movff	_total_bottle_count+1,?_printf+3
  3165  0011A4  EC6E  F003         	call	_printf	;wreg free
  3166                           
  3167                           ;main.c: 411: break;
  3168  0011A8  0012               	return	
  3169  0011AA                     l5119:
  3170                           
  3171                           ;main.c: 413: lcdInst(0b10000000);
  3172  0011AA  0E80               	movlw	128
  3173  0011AC  EC4A  F016         	call	_lcdInst
  3174                           
  3175                           ;main.c: 414: printf("YOP+CAP+LBL: %d  ", yopcaplbl_count);
  3176  0011B0  0E05               	movlw	low STR_8
  3177  0011B2  0100               	movlb	0	; () banked
  3178  0011B4  6FE0               	movwf	printf@f& (0+255),b
  3179  0011B6  0EFF               	movlw	high STR_8
  3180  0011B8  0100               	movlb	0	; () banked
  3181  0011BA  6FE1               	movwf	(printf@f+1)& (0+255),b
  3182  0011BC  C0BF  F0E2         	movff	_yopcaplbl_count,?_printf+2
  3183  0011C0  C0C0  F0E3         	movff	_yopcaplbl_count+1,?_printf+3
  3184  0011C4  EC6E  F003         	call	_printf	;wreg free
  3185                           
  3186                           ;main.c: 415: lcdInst(0b11000000);
  3187  0011C8  0EC0               	movlw	192
  3188  0011CA  EC4A  F016         	call	_lcdInst
  3189                           
  3190                           ;main.c: 416: printf("YOP+CAP-LBL: %d  ", yopcap_count);
  3191  0011CE  0E29               	movlw	low STR_9
  3192  0011D0  0100               	movlb	0	; () banked
  3193  0011D2  6FE0               	movwf	printf@f& (0+255),b
  3194  0011D4  0EFF               	movlw	high STR_9
  3195  0011D6  0100               	movlb	0	; () banked
  3196  0011D8  6FE1               	movwf	(printf@f+1)& (0+255),b
  3197  0011DA  C0BD  F0E2         	movff	_yopcap_count,?_printf+2
  3198  0011DE  C0BE  F0E3         	movff	_yopcap_count+1,?_printf+3
  3199  0011E2  EC6E  F003         	call	_printf	;wreg free
  3200                           
  3201                           ;main.c: 417: break;
  3202  0011E6  0012               	return	
  3203  0011E8                     l5125:
  3204                           
  3205                           ;main.c: 419: lcdInst(0b10000000);
  3206  0011E8  0E80               	movlw	128
  3207  0011EA  EC4A  F016         	call	_lcdInst
  3208                           
  3209                           ;main.c: 420: printf("YOP-CAP+LBL: %d  ", yoplbl_count);
  3210  0011EE  0E17               	movlw	low STR_10
  3211  0011F0  0100               	movlb	0	; () banked
  3212  0011F2  6FE0               	movwf	printf@f& (0+255),b
  3213  0011F4  0EFF               	movlw	high STR_10
  3214  0011F6  0100               	movlb	0	; () banked
  3215  0011F8  6FE1               	movwf	(printf@f+1)& (0+255),b
  3216  0011FA  C0C1  F0E2         	movff	_yoplbl_count,?_printf+2
  3217  0011FE  C0C2  F0E3         	movff	_yoplbl_count+1,?_printf+3
  3218  001202  EC6E  F003         	call	_printf	;wreg free
  3219                           
  3220                           ;main.c: 421: lcdInst(0b11000000);
  3221  001206  0EC0               	movlw	192
  3222  001208  EC4A  F016         	call	_lcdInst
  3223                           
  3224                           ;main.c: 422: printf("YOP-CAP-LBL: %d  ", yop_count);
  3225  00120C  0E3B               	movlw	low STR_11
  3226  00120E  0100               	movlb	0	; () banked
  3227  001210  6FE0               	movwf	printf@f& (0+255),b
  3228  001212  0EFF               	movlw	high STR_11
  3229  001214  0100               	movlb	0	; () banked
  3230  001216  6FE1               	movwf	(printf@f+1)& (0+255),b
  3231  001218  C0BB  F0E2         	movff	_yop_count,?_printf+2
  3232  00121C  C0BC  F0E3         	movff	_yop_count+1,?_printf+3
  3233  001220  EC6E  F003         	call	_printf	;wreg free
  3234                           
  3235                           ;main.c: 423: break;
  3236  001224  0012               	return	
  3237  001226                     l5131:
  3238                           
  3239                           ;main.c: 425: lcdInst(0b10000000);
  3240  001226  0E80               	movlw	128
  3241  001228  EC4A  F016         	call	_lcdInst
  3242                           
  3243                           ;main.c: 426: printf("ESKA+CAP+LBL: %d ", eskacaplbl_count);
  3244  00122C  0E4D               	movlw	low STR_12
  3245  00122E  0100               	movlb	0	; () banked
  3246  001230  6FE0               	movwf	printf@f& (0+255),b
  3247  001232  0EFF               	movlw	high STR_12
  3248  001234  0100               	movlb	0	; () banked
  3249  001236  6FE1               	movwf	(printf@f+1)& (0+255),b
  3250  001238  C0A9  F0E2         	movff	_eskacaplbl_count,?_printf+2
  3251  00123C  C0AA  F0E3         	movff	_eskacaplbl_count+1,?_printf+3
  3252  001240  EC6E  F003         	call	_printf	;wreg free
  3253                           
  3254                           ;main.c: 427: lcdInst(0b11000000);
  3255  001244  0EC0               	movlw	192
  3256  001246  EC4A  F016         	call	_lcdInst
  3257                           
  3258                           ;main.c: 428: printf("ESKA+CAP-LBL: %d ", eskacap_count);
  3259  00124A  0E71               	movlw	low STR_13
  3260  00124C  0100               	movlb	0	; () banked
  3261  00124E  6FE0               	movwf	printf@f& (0+255),b
  3262  001250  0EFF               	movlw	high STR_13
  3263  001252  0100               	movlb	0	; () banked
  3264  001254  6FE1               	movwf	(printf@f+1)& (0+255),b
  3265  001256  C0A7  F0E2         	movff	_eskacap_count,?_printf+2
  3266  00125A  C0A8  F0E3         	movff	_eskacap_count+1,?_printf+3
  3267  00125E  EC6E  F003         	call	_printf	;wreg free
  3268                           
  3269                           ;main.c: 429: break;
  3270  001262  0012               	return	
  3271  001264                     l5137:
  3272                           
  3273                           ;main.c: 431: lcdInst(0b10000000);
  3274  001264  0E80               	movlw	128
  3275  001266  EC4A  F016         	call	_lcdInst
  3276                           
  3277                           ;main.c: 432: printf("ESKA-CAP+LBL: %d ", eskalbl_count);
  3278  00126A  0E5F               	movlw	low STR_14
  3279  00126C  0100               	movlb	0	; () banked
  3280  00126E  6FE0               	movwf	printf@f& (0+255),b
  3281  001270  0EFF               	movlw	high STR_14
  3282  001272  0100               	movlb	0	; () banked
  3283  001274  6FE1               	movwf	(printf@f+1)& (0+255),b
  3284  001276  C0AB  F0E2         	movff	_eskalbl_count,?_printf+2
  3285  00127A  C0AC  F0E3         	movff	_eskalbl_count+1,?_printf+3
  3286  00127E  EC6E  F003         	call	_printf	;wreg free
  3287                           
  3288                           ;main.c: 433: lcdInst(0b11000000);
  3289  001282  0EC0               	movlw	192
  3290  001284  EC4A  F016         	call	_lcdInst
  3291                           
  3292                           ;main.c: 434: printf("ESKA-CAP-LBL: %d ", eska_count);
  3293  001288  0E83               	movlw	low STR_15
  3294  00128A  0100               	movlb	0	; () banked
  3295  00128C  6FE0               	movwf	printf@f& (0+255),b
  3296  00128E  0EFF               	movlw	high STR_15
  3297  001290  0100               	movlb	0	; () banked
  3298  001292  6FE1               	movwf	(printf@f+1)& (0+255),b
  3299  001294  C0A5  F0E2         	movff	_eska_count,?_printf+2
  3300  001298  C0A6  F0E3         	movff	_eska_count+1,?_printf+3
  3301  00129C  EC6E  F003         	call	_printf	;wreg free
  3302                           
  3303                           ;main.c: 435: break;
  3304  0012A0  0012               	return	
  3305  0012A2                     l5143:
  3306                           
  3307                           ;main.c: 438: lcdInst(0b10000000);
  3308  0012A2  0E80               	movlw	128
  3309  0012A4  EC4A  F016         	call	_lcdInst
  3310                           
  3311                           ;main.c: 439: printf("ERROR: %d", bottle_count_disp);
  3312  0012A8  0EF5               	movlw	low STR_16
  3313  0012AA  0100               	movlb	0	; () banked
  3314  0012AC  6FE0               	movwf	printf@f& (0+255),b
  3315  0012AE  0EFF               	movlw	high STR_16
  3316  0012B0  0100               	movlb	0	; () banked
  3317  0012B2  6FE1               	movwf	(printf@f+1)& (0+255),b
  3318  0012B4  C0EE  F0E2         	movff	_bottle_count_disp,?_printf+2
  3319  0012B8  C0EF  F0E3         	movff	_bottle_count_disp+1,?_printf+3
  3320  0012BC  EC6E  F003         	call	_printf	;wreg free
  3321  0012C0  D7F0               	goto	l5143
  3322  0012C2                     l5149:
  3323  0012C2  C0EE  F0D4         	movff	_bottle_count_disp,___awmod@dividend
  3324  0012C6  C0EF  F0D5         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3325  0012CA  0E00               	movlw	0
  3326  0012CC  0100               	movlb	0	; () banked
  3327  0012CE  6FD7               	movwf	(___awmod@divisor+1)& (0+255),b
  3328  0012D0  0E05               	movlw	5
  3329  0012D2  6FD6               	movwf	___awmod@divisor& (0+255),b
  3330  0012D4  EC6C  F011         	call	___awmod	;wreg free
  3331                           
  3332                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3333                           ; Switch size 1, requested type "space"
  3334                           ; Number of cases is 1, Range of values is 0 to 0
  3335                           ; switch strategies available:
  3336                           ; Name         Instructions Cycles
  3337                           ; simple_byte            4     3 (average)
  3338                           ;	Chosen strategy is simple_byte
  3339  0012D8  0100               	movlb	0	; () banked
  3340  0012DA  51D5               	movf	(?___awmod+1)& (0+255),w,b
  3341  0012DC  0A00               	xorlw	0	; case 0
  3342  0012DE  A4D8               	btfss	status,2,c
  3343  0012E0  D7E0               	goto	l5143
  3344                           
  3345                           ; BSR set to: 0
  3346                           ; Switch size 1, requested type "space"
  3347                           ; Number of cases is 5, Range of values is 0 to 4
  3348                           ; switch strategies available:
  3349                           ; Name         Instructions Cycles
  3350                           ; simple_byte           16     9 (average)
  3351                           ;	Chosen strategy is simple_byte
  3352  0012E2  0100               	movlb	0	; () banked
  3353  0012E4  51D4               	movf	?___awmod& (0+255),w,b
  3354  0012E6  0A00               	xorlw	0	; case 0
  3355  0012E8  B4D8               	btfsc	status,2,c
  3356  0012EA  D744               	goto	l5113
  3357  0012EC  0A01               	xorlw	1	; case 1
  3358  0012EE  B4D8               	btfsc	status,2,c
  3359  0012F0  D75C               	goto	l5119
  3360  0012F2  0A03               	xorlw	3	; case 2
  3361  0012F4  B4D8               	btfsc	status,2,c
  3362  0012F6  D778               	goto	l5125
  3363  0012F8  0A01               	xorlw	1	; case 3
  3364  0012FA  B4D8               	btfsc	status,2,c
  3365  0012FC  D794               	goto	l5131
  3366  0012FE  0A07               	xorlw	7	; case 4
  3367  001300  B4D8               	btfsc	status,2,c
  3368  001302  D7B0               	goto	l5137
  3369  001304  D7CE               	goto	l5143
  3370  001306                     __end_of_bottle_count:
  3371                           	opt stack 0
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           intcon	equ	0xFF2
  3379                           intcon2	equ	0xFF1
  3380                           intcon3	equ	0xFF0
  3381                           postinc0	equ	0xFEE
  3382                           wreg	equ	0xFE8
  3383                           indf2	equ	0xFDF
  3384                           postinc2	equ	0xFDE
  3385                           postdec2	equ	0xFDD
  3386                           fsr2h	equ	0xFDA
  3387                           fsr2l	equ	0xFD9
  3388                           status	equ	0xFD8
  3389                           
  3390 ;; *************** function _printf *****************
  3391 ;; Defined at:
  3392 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3395 ;;		 -> STR_24(15), STR_23(16), STR_22(28), STR_21(25), 
  3396 ;;		 -> STR_20(24), STR_19(23), STR_18(18), STR_17(23), 
  3397 ;;		 -> STR_16(10), STR_15(18), STR_14(18), STR_13(18), 
  3398 ;;		 -> STR_12(18), STR_11(18), STR_10(18), STR_9(18), 
  3399 ;;		 -> STR_8(18), STR_7(17), STR_6(17), STR_5(23), 
  3400 ;;		 -> STR_4(23), STR_3(14), STR_2(24), STR_1(24), 
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  idx             1    0[BANK1 ] unsigned char 
  3403 ;;  tmpval          4    0        struct .
  3404 ;;  cp              3    0        PTR const unsigned char 
  3405 ;;  width           2    7[BANK1 ] int 
  3406 ;;  val             2    4[BANK1 ] unsigned int 
  3407 ;;  ap              2    1[BANK1 ] PTR void [1]
  3408 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3409 ;;  len             2    0        unsigned int 
  3410 ;;  c               1    9[BANK1 ] char 
  3411 ;;  flag            1    6[BANK1 ] unsigned char 
  3412 ;;  prec            1    3[BANK1 ] char 
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  2   28[BANK0 ] int 
  3415 ;; Registers used:
  3416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3422 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Totals:         0      12      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;Total ram usage:       22 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    9
  3429 ;; This function calls:
  3430 ;;		___lwdiv
  3431 ;;		___lwmod
  3432 ;;		___wmul
  3433 ;;		_isdigit
  3434 ;;		_putch
  3435 ;; This function is called by:
  3436 ;;		_date_time
  3437 ;;		_bottle_count
  3438 ;;		_bottle_time
  3439 ;;		_operation
  3440 ;;		_operationend
  3441 ;;		_emergencystop
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text12
  3446  0006DC                     __ptext12:
  3447                           	opt stack 0
  3448  0006DC                     _printf:
  3449                           	opt stack 20
  3450                           
  3451                           ;doprnt.c: 466: va_list ap;
  3452                           ;doprnt.c: 499: signed char c;
  3453                           ;doprnt.c: 501: int width;
  3454                           ;doprnt.c: 506: signed char prec;
  3455                           ;doprnt.c: 508: unsigned char flag;
  3456                           ;doprnt.c: 523: union {
  3457                           ;doprnt.c: 524: unsigned long vd;
  3458                           ;doprnt.c: 525: double integ;
  3459                           ;doprnt.c: 526: } tmpval;
  3460                           ;doprnt.c: 528: unsigned int val;
  3461                           ;doprnt.c: 529: unsigned len;
  3462                           ;doprnt.c: 530: const char * cp;
  3463                           ;doprnt.c: 533: *ap = __va_start();
  3464                           
  3465                           ;incstack = 0
  3466  0006DC  0EE2               	movlw	low (?_printf+2)
  3467  0006DE  0101               	movlb	1	; () banked
  3468  0006E0  6F01               	movwf	printf@ap& (0+255),b
  3469  0006E2  0E00               	movlw	high (?_printf+2)
  3470  0006E4  0101               	movlb	1	; () banked
  3471  0006E6  6F02               	movwf	(printf@ap+1)& (0+255),b
  3472                           
  3473                           ;doprnt.c: 536: while(c = *f++) {
  3474  0006E8  D1D5               	goto	l5017
  3475  0006EA                     l4887:
  3476                           
  3477                           ; BSR set to: 1
  3478                           ;doprnt.c: 538: if(c != '%')
  3479  0006EA  0E25               	movlw	37
  3480  0006EC  0101               	movlb	1	; () banked
  3481  0006EE  1909               	xorwf	printf@c& (0+255),w,b
  3482  0006F0  B4D8               	btfsc	status,2,c
  3483  0006F2  D005               	goto	l4891
  3484                           
  3485                           ; BSR set to: 1
  3486                           ;doprnt.c: 540: {
  3487                           ;doprnt.c: 541: (putch(c) );
  3488  0006F4  0101               	movlb	1	; () banked
  3489  0006F6  5109               	movf	printf@c& (0+255),w,b
  3490  0006F8  EC42  F016         	call	_putch
  3491                           
  3492                           ;doprnt.c: 542: continue;
  3493  0006FC  D1CB               	goto	l5017
  3494  0006FE                     l4891:
  3495                           
  3496                           ;doprnt.c: 543: }
  3497                           ;doprnt.c: 546: width = 0;
  3498  0006FE  0E00               	movlw	0
  3499  000700  0101               	movlb	1	; () banked
  3500  000702  6F08               	movwf	(printf@width+1)& (0+255),b
  3501  000704  0E00               	movlw	0
  3502  000706  6F07               	movwf	printf@width& (0+255),b
  3503                           
  3504                           ;doprnt.c: 548: flag = 0;
  3505  000708  0E00               	movlw	0
  3506  00070A  0101               	movlb	1	; () banked
  3507  00070C  6F06               	movwf	printf@flag& (0+255),b
  3508                           
  3509                           ; BSR set to: 1
  3510                           ;doprnt.c: 551: switch(*f) {
  3511                           
  3512                           ;doprnt.c: 550: for(;;) {
  3513  00070E  D005               	goto	l4897
  3514  000710                     l4893:
  3515                           
  3516                           ;doprnt.c: 580: flag |= 0x04;
  3517  000710  0101               	movlb	1	; () banked
  3518  000712  8506               	bsf	printf@flag& (0+255),2,b
  3519                           
  3520                           ;doprnt.c: 581: f++;
  3521  000714  0100               	movlb	0	; () banked
  3522  000716  4BE0               	infsnz	printf@f& (0+255),f,b
  3523  000718  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3524  00071A                     l4897:
  3525  00071A  C0E0  FFF6         	movff	printf@f,tblptrl
  3526  00071E  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3527  000722                     	if	0	;tblptru may be non-zero
  3528  000722                     	endif
  3529  000722                     	if	0	;tblptru may be non-zero
  3530  000722                     	endif
  3531  000722  0008               	tblrd		*
  3532  000724  50F5               	movf	tablat,w,c
  3533                           
  3534                           ; Switch size 1, requested type "space"
  3535                           ; Number of cases is 1, Range of values is 48 to 48
  3536                           ; switch strategies available:
  3537                           ; Name         Instructions Cycles
  3538                           ; simple_byte            4     3 (average)
  3539                           ;	Chosen strategy is simple_byte
  3540  000726  0A30               	xorlw	48	; case 48
  3541  000728  B4D8               	btfsc	status,2,c
  3542  00072A  D7F2               	goto	l4893
  3543                           
  3544                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3545                           
  3546                           ;doprnt.c: 586: }
  3547                           
  3548                           ;doprnt.c: 585: break;
  3549  00072C  C0E0  FFF6         	movff	printf@f,tblptrl
  3550  000730  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3551  000734                     	if	0	;tblptru may be non-zero
  3552  000734                     	endif
  3553  000734                     	if	0	;tblptru may be non-zero
  3554  000734                     	endif
  3555  000734  0008               	tblrd		*
  3556  000736  50F5               	movf	tablat,w,c
  3557  000738  ECB6  F015         	call	_isdigit
  3558  00073C  A0D8               	btfss	status,0,c
  3559  00073E  D048               	goto	l4917
  3560                           
  3561                           ;doprnt.c: 598: width = 0;
  3562  000740  0E00               	movlw	0
  3563  000742  0101               	movlb	1	; () banked
  3564  000744  6F08               	movwf	(printf@width+1)& (0+255),b
  3565  000746  0E00               	movlw	0
  3566  000748  6F07               	movwf	printf@width& (0+255),b
  3567  00074A                     l4903:
  3568                           
  3569                           ;doprnt.c: 600: width *= 10;
  3570  00074A  C107  F0D4         	movff	printf@width,___wmul@multiplier
  3571  00074E  C108  F0D5         	movff	printf@width+1,___wmul@multiplier+1
  3572  000752  0E00               	movlw	0
  3573  000754  0100               	movlb	0	; () banked
  3574  000756  6FD7               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3575  000758  0E0A               	movlw	10
  3576  00075A  6FD6               	movwf	___wmul@multiplicand& (0+255),b
  3577  00075C  EC84  F015         	call	___wmul	;wreg free
  3578  000760  C0D4  F107         	movff	?___wmul,printf@width
  3579  000764  C0D5  F108         	movff	?___wmul+1,printf@width+1
  3580                           
  3581                           ;doprnt.c: 601: width += *f++ - '0';
  3582  000768  0ED0               	movlw	208
  3583  00076A  0100               	movlb	0	; () banked
  3584  00076C  6FE8               	movwf	??_printf& (0+255),b
  3585  00076E  0EFF               	movlw	255
  3586  000770  0100               	movlb	0	; () banked
  3587  000772  6FE9               	movwf	(??_printf+1)& (0+255),b
  3588  000774  C0E0  FFF6         	movff	printf@f,tblptrl
  3589  000778  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3590  00077C                     	if	0	;tblptru may be non-zero
  3591  00077C                     	endif
  3592  00077C                     	if	0	;tblptru may be non-zero
  3593  00077C                     	endif
  3594  00077C  0008               	tblrd		*
  3595  00077E  50F5               	movf	tablat,w,c
  3596  000780  0100               	movlb	0	; () banked
  3597  000782  6FEA               	movwf	(??_printf+2)& (0+255),b
  3598  000784  6BEB               	clrf	(??_printf+3)& (0+255),b
  3599  000786  0100               	movlb	0	; () banked
  3600  000788  51E8               	movf	??_printf& (0+255),w,b
  3601  00078A  0100               	movlb	0	; () banked
  3602  00078C  27EA               	addwf	(??_printf+2)& (0+255),f,b
  3603  00078E  0100               	movlb	0	; () banked
  3604  000790  51E9               	movf	(??_printf+1)& (0+255),w,b
  3605  000792  0100               	movlb	0	; () banked
  3606  000794  23EB               	addwfc	(??_printf+3)& (0+255),f,b
  3607  000796  0100               	movlb	0	; () banked
  3608  000798  51EA               	movf	(??_printf+2)& (0+255),w,b
  3609  00079A  0101               	movlb	1	; () banked
  3610  00079C  2707               	addwf	printf@width& (0+255),f,b
  3611  00079E  0100               	movlb	0	; () banked
  3612  0007A0  51EB               	movf	(??_printf+3)& (0+255),w,b
  3613  0007A2  0101               	movlb	1	; () banked
  3614  0007A4  2308               	addwfc	(printf@width+1)& (0+255),f,b
  3615                           
  3616                           ; BSR set to: 1
  3617  0007A6  0100               	movlb	0	; () banked
  3618  0007A8  4BE0               	infsnz	printf@f& (0+255),f,b
  3619  0007AA  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3623  0007AC  C0E0  FFF6         	movff	printf@f,tblptrl
  3624  0007B0  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3625  0007B4                     	if	0	;tblptru may be non-zero
  3626  0007B4                     	endif
  3627  0007B4                     	if	0	;tblptru may be non-zero
  3628  0007B4                     	endif
  3629  0007B4  0008               	tblrd		*
  3630  0007B6  50F5               	movf	tablat,w,c
  3631  0007B8  ECB6  F015         	call	_isdigit
  3632  0007BC  A0D8               	btfss	status,0,c
  3633  0007BE  D008               	goto	l4917
  3634  0007C0  D7C4               	goto	l4903
  3635  0007C2                     l4911:
  3636                           
  3637                           ;doprnt.c: 721: flag |= 0x80;
  3638  0007C2  0101               	movlb	1	; () banked
  3639  0007C4  8F06               	bsf	printf@flag& (0+255),7,b
  3640                           
  3641                           ;doprnt.c: 723: break;
  3642  0007C6  D020               	goto	l4919
  3643  0007C8                     l4913:
  3644                           
  3645                           ; BSR set to: 1
  3646                           ;doprnt.c: 818: flag |= 0xC0;
  3647  0007C8  0EC0               	movlw	192
  3648  0007CA  0101               	movlb	1	; () banked
  3649  0007CC  1306               	iorwf	printf@flag& (0+255),f,b
  3650                           
  3651                           ; BSR set to: 1
  3652                           ;doprnt.c: 822: }
  3653                           
  3654                           ;doprnt.c: 819: break;
  3655  0007CE  D01C               	goto	l4919
  3656  0007D0                     l4917:
  3657  0007D0  C0E0  FFF6         	movff	printf@f,tblptrl
  3658  0007D4  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3659  0007D8  0100               	movlb	0	; () banked
  3660  0007DA  4BE0               	infsnz	printf@f& (0+255),f,b
  3661  0007DC  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3662  0007DE                     	if	0	;tblptru may be non-zero
  3663  0007DE                     	endif
  3664  0007DE                     	if	0	;tblptru may be non-zero
  3665  0007DE                     	endif
  3666  0007DE  0008               	tblrd		*
  3667  0007E0  CFF5 F109          	movff	tablat,printf@c
  3668  0007E4  0101               	movlb	1	; () banked
  3669  0007E6  5109               	movf	printf@c& (0+255),w,b
  3670                           
  3671                           ; Switch size 1, requested type "space"
  3672                           ; Number of cases is 5, Range of values is 0 to 120
  3673                           ; switch strategies available:
  3674                           ; Name         Instructions Cycles
  3675                           ; simple_byte           16     9 (average)
  3676                           ;	Chosen strategy is simple_byte
  3677  0007E8  0A00               	xorlw	0	; case 0
  3678  0007EA  B4D8               	btfsc	status,2,c
  3679  0007EC  0012               	return	
  3680  0007EE  0A64               	xorlw	100	; case 100
  3681  0007F0  B4D8               	btfsc	status,2,c
  3682  0007F2  D00A               	goto	l4919
  3683  0007F4  0A0D               	xorlw	13	; case 105
  3684  0007F6  B4D8               	btfsc	status,2,c
  3685  0007F8  D007               	goto	l4919
  3686  0007FA  0A1C               	xorlw	28	; case 117
  3687  0007FC  B4D8               	btfsc	status,2,c
  3688  0007FE  D7E4               	goto	l4913
  3689  000800  0A0D               	xorlw	13	; case 120
  3690  000802  B4D8               	btfsc	status,2,c
  3691  000804  D7DE               	goto	l4911
  3692  000806  D146               	goto	l5017
  3693  000808                     l4919:
  3694                           
  3695                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  3696  000808  C106  F0E8         	movff	printf@flag,??_printf
  3697  00080C  0EC0               	movlw	192
  3698  00080E  0100               	movlb	0	; () banked
  3699  000810  17E8               	andwf	??_printf& (0+255),f,b
  3700  000812  A4D8               	btfss	status,2,c
  3701  000814  D019               	goto	l4931
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;doprnt.c: 1253: {
  3705                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3706  000816  C101  FFD9         	movff	printf@ap,fsr2l
  3707  00081A  C102  FFDA         	movff	printf@ap+1,fsr2h
  3708  00081E  CFDE F104          	movff	postinc2,printf@val
  3709  000822  CFDD F105          	movff	postdec2,printf@val+1
  3710                           
  3711                           ; BSR set to: 0
  3712  000826  0E02               	movlw	2
  3713  000828  0101               	movlb	1	; () banked
  3714  00082A  2701               	addwf	printf@ap& (0+255),f,b
  3715  00082C  0E00               	movlw	0
  3716  00082E  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3717                           
  3718                           ; BSR set to: 1
  3719                           ;doprnt.c: 1261: if((int)val < 0) {
  3720  000830  0101               	movlb	1	; () banked
  3721  000832  AF05               	btfss	(printf@val+1)& (0+255),7,b
  3722  000834  D053               	goto	l4965
  3723                           
  3724                           ; BSR set to: 1
  3725                           ;doprnt.c: 1262: flag |= 0x03;
  3726  000836  0E03               	movlw	3
  3727  000838  0101               	movlb	1	; () banked
  3728  00083A  1306               	iorwf	printf@flag& (0+255),f,b
  3729                           
  3730                           ; BSR set to: 1
  3731                           ;doprnt.c: 1263: val = -val;
  3732  00083C  0101               	movlb	1	; () banked
  3733  00083E  6D04               	negf	printf@val& (0+255),b
  3734  000840  1F05               	comf	(printf@val+1)& (0+255),f,b
  3735  000842  B0D8               	btfsc	status,0,c
  3736  000844  2B05               	incf	(printf@val+1)& (0+255),f,b
  3737                           
  3738                           ; BSR set to: 1
  3739                           ;doprnt.c: 1264: }
  3740                           ;doprnt.c: 1266: }
  3741  000846  D04A               	goto	l4965
  3742  000848                     l4931:
  3743                           
  3744                           ;doprnt.c: 1268: else
  3745                           ;doprnt.c: 1273: {
  3746                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3747  000848  C101  FFD9         	movff	printf@ap,fsr2l
  3748  00084C  C102  FFDA         	movff	printf@ap+1,fsr2h
  3749  000850  CFDE F104          	movff	postinc2,printf@val
  3750  000854  CFDD F105          	movff	postdec2,printf@val+1
  3751  000858  0E02               	movlw	2
  3752  00085A  0101               	movlb	1	; () banked
  3753  00085C  2701               	addwf	printf@ap& (0+255),f,b
  3754  00085E  0E00               	movlw	0
  3755  000860  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3756                           
  3757                           ; BSR set to: 1
  3758                           ;doprnt.c: 1287: }
  3759                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3760  000862  D03C               	goto	l4965
  3761  000864                     l4935:
  3762                           
  3763                           ; BSR set to: 1
  3764                           ;doprnt.c: 1302: case 0xC0:
  3765                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3766  000864  0E01               	movlw	1
  3767  000866  0101               	movlb	1	; () banked
  3768  000868  6F09               	movwf	printf@c& (0+255),b
  3769  00086A                     l4937:
  3770                           
  3771                           ; BSR set to: 1
  3772  00086A  0E05               	movlw	5
  3773  00086C  0101               	movlb	1	; () banked
  3774  00086E  1909               	xorwf	printf@c& (0+255),w,b
  3775  000870  B4D8               	btfsc	status,2,c
  3776  000872  D040               	goto	l4967
  3777                           
  3778                           ; BSR set to: 1
  3779                           ;doprnt.c: 1306: if(val < dpowers[c])
  3780                           
  3781                           ; BSR set to: 1
  3782                           
  3783                           ; BSR set to: 1
  3784  000874  0101               	movlb	1	; () banked
  3785  000876  5109               	movf	printf@c& (0+255),w,b
  3786  000878  0D02               	mullw	2
  3787  00087A  0EC8               	movlw	low _dpowers
  3788  00087C  24F3               	addwf	prodl,w,c
  3789  00087E  6EF6               	movwf	tblptrl,c
  3790  000880  0EFD               	movlw	high _dpowers
  3791  000882  20F4               	addwfc	prodh,w,c
  3792  000884  6EF7               	movwf	tblptrh,c
  3793  000886                     	if	0	;There are less than 3 active tblptr bytes
  3794  000886                     	endif
  3795  000886  0009               	tblrd		*+
  3796  000888  50F5               	movf	tablat,w,c
  3797  00088A  0101               	movlb	1	; () banked
  3798  00088C  5D04               	subwf	printf@val& (0+255),w,b
  3799  00088E  0009               	tblrd		*+
  3800  000890  50F5               	movf	tablat,w,c
  3801  000892  0101               	movlb	1	; () banked
  3802  000894  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3803  000896  A0D8               	btfss	status,0,c
  3804  000898  D02D               	goto	l4967
  3805                           
  3806                           ; BSR set to: 1
  3807                           
  3808                           ; BSR set to: 1
  3809                           
  3810                           ; BSR set to: 1
  3811                           ;doprnt.c: 1307: break;
  3812  00089A  0101               	movlb	1	; () banked
  3813  00089C  2B09               	incf	printf@c& (0+255),f,b
  3814  00089E  D7E5               	goto	l4937
  3815  0008A0                     l4949:
  3816                           
  3817                           ; BSR set to: 1
  3818                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3819  0008A0  0E01               	movlw	1
  3820  0008A2  0101               	movlb	1	; () banked
  3821  0008A4  6F09               	movwf	printf@c& (0+255),b
  3822  0008A6                     l4951:
  3823                           
  3824                           ; BSR set to: 1
  3825  0008A6  0E04               	movlw	4
  3826  0008A8  0101               	movlb	1	; () banked
  3827  0008AA  1909               	xorwf	printf@c& (0+255),w,b
  3828  0008AC  B4D8               	btfsc	status,2,c
  3829  0008AE  D022               	goto	l4967
  3830                           
  3831                           ; BSR set to: 1
  3832                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3833                           
  3834                           ; BSR set to: 1
  3835                           
  3836                           ; BSR set to: 1
  3837  0008B0  0101               	movlb	1	; () banked
  3838  0008B2  5109               	movf	printf@c& (0+255),w,b
  3839  0008B4  0D02               	mullw	2
  3840  0008B6  0ED2               	movlw	low _hexpowers
  3841  0008B8  24F3               	addwf	prodl,w,c
  3842  0008BA  6EF6               	movwf	tblptrl,c
  3843  0008BC  0EFD               	movlw	high _hexpowers
  3844  0008BE  20F4               	addwfc	prodh,w,c
  3845  0008C0  6EF7               	movwf	tblptrh,c
  3846  0008C2                     	if	0	;There are less than 3 active tblptr bytes
  3847  0008C2                     	endif
  3848  0008C2  0009               	tblrd		*+
  3849  0008C4  50F5               	movf	tablat,w,c
  3850  0008C6  0101               	movlb	1	; () banked
  3851  0008C8  5D04               	subwf	printf@val& (0+255),w,b
  3852  0008CA  0009               	tblrd		*+
  3853  0008CC  50F5               	movf	tablat,w,c
  3854  0008CE  0101               	movlb	1	; () banked
  3855  0008D0  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3856  0008D2  A0D8               	btfss	status,0,c
  3857  0008D4  D00F               	goto	l4967
  3858                           
  3859                           ; BSR set to: 1
  3860                           
  3861                           ; BSR set to: 1
  3862                           
  3863                           ; BSR set to: 1
  3864                           ;doprnt.c: 1318: break;
  3865  0008D6  0101               	movlb	1	; () banked
  3866  0008D8  2B09               	incf	printf@c& (0+255),f,b
  3867  0008DA  D7E5               	goto	l4951
  3868  0008DC                     l4965:
  3869                           
  3870                           ; BSR set to: 1
  3871  0008DC  0101               	movlb	1	; () banked
  3872  0008DE  5106               	movf	printf@flag& (0+255),w,b
  3873  0008E0  0BC0               	andlw	192
  3874                           
  3875                           ; Switch size 1, requested type "space"
  3876                           ; Number of cases is 3, Range of values is 0 to 192
  3877                           ; switch strategies available:
  3878                           ; Name         Instructions Cycles
  3879                           ; simple_byte           10     6 (average)
  3880                           ;	Chosen strategy is simple_byte
  3881  0008E2  0A00               	xorlw	0	; case 0
  3882  0008E4  B4D8               	btfsc	status,2,c
  3883  0008E6  D7BE               	goto	l4935
  3884  0008E8  0A80               	xorlw	128	; case 128
  3885  0008EA  B4D8               	btfsc	status,2,c
  3886  0008EC  D7D9               	goto	l4949
  3887  0008EE  0A40               	xorlw	64	; case 192
  3888  0008F0  B4D8               	btfsc	status,2,c
  3889  0008F2  D7B8               	goto	l4935
  3890  0008F4                     l4967:
  3891                           
  3892                           ; BSR set to: 1
  3893                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3894  0008F4  0101               	movlb	1	; () banked
  3895  0008F6  5107               	movf	printf@width& (0+255),w,b
  3896  0008F8  0101               	movlb	1	; () banked
  3897  0008FA  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3898  0008FC  B4D8               	btfsc	status,2,c
  3899  0008FE  D00B               	goto	l4973
  3900                           
  3901                           ; BSR set to: 1
  3902  000900  C106  F0E8         	movff	printf@flag,??_printf
  3903  000904  0E03               	movlw	3
  3904  000906  0100               	movlb	0	; () banked
  3905  000908  17E8               	andwf	??_printf& (0+255),f,b
  3906  00090A  B4D8               	btfsc	status,2,c
  3907  00090C  D004               	goto	l4973
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;doprnt.c: 1346: width--;
  3911  00090E  0101               	movlb	1	; () banked
  3912  000910  0707               	decf	printf@width& (0+255),f,b
  3913  000912  A0D8               	btfss	status,0,c
  3914  000914  0708               	decf	(printf@width+1)& (0+255),f,b
  3915  000916                     l4973:
  3916                           
  3917                           ;doprnt.c: 1381: if(width > c)
  3918  000916  0E80               	movlw	128
  3919  000918  0101               	movlb	1	; () banked
  3920  00091A  BF09               	btfsc	printf@c& (0+255),7,b
  3921  00091C  0E7F               	movlw	127
  3922  00091E  0100               	movlb	0	; () banked
  3923  000920  6FE8               	movwf	??_printf& (0+255),b
  3924  000922  0101               	movlb	1	; () banked
  3925  000924  5107               	movf	printf@width& (0+255),w,b
  3926  000926  0101               	movlb	1	; () banked
  3927  000928  5D09               	subwf	printf@c& (0+255),w,b
  3928  00092A  0101               	movlb	1	; () banked
  3929  00092C  5108               	movf	(printf@width+1)& (0+255),w,b
  3930  00092E  0A80               	xorlw	128
  3931  000930  0100               	movlb	0	; () banked
  3932  000932  59E8               	subwfb	??_printf& (0+255),w,b
  3933  000934  B0D8               	btfsc	status,0,c
  3934  000936  D00B               	goto	l4977
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;doprnt.c: 1382: width -= c;
  3938  000938  0101               	movlb	1	; () banked
  3939  00093A  5109               	movf	printf@c& (0+255),w,b
  3940  00093C  0101               	movlb	1	; () banked
  3941  00093E  5F07               	subwf	printf@width& (0+255),f,b
  3942  000940  0E00               	movlw	0
  3943  000942  0101               	movlb	1	; () banked
  3944  000944  BF09               	btfsc	printf@c& (0+255),7,b
  3945  000946  0EFF               	movlw	255
  3946  000948  0101               	movlb	1	; () banked
  3947  00094A  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  3948  00094C  D005               	goto	l4979
  3949  00094E                     l4977:
  3950                           
  3951                           ;doprnt.c: 1383: else
  3952                           ;doprnt.c: 1384: width = 0;
  3953  00094E  0E00               	movlw	0
  3954  000950  0101               	movlb	1	; () banked
  3955  000952  6F08               	movwf	(printf@width+1)& (0+255),b
  3956  000954  0E00               	movlw	0
  3957  000956  6F07               	movwf	printf@width& (0+255),b
  3958  000958                     l4979:
  3959                           
  3960                           ; BSR set to: 1
  3961                           ;doprnt.c: 1387: if(flag & 0x04) {
  3962  000958  0101               	movlb	1	; () banked
  3963  00095A  A506               	btfss	printf@flag& (0+255),2,b
  3964  00095C  D018               	goto	l4991
  3965                           
  3966                           ; BSR set to: 1
  3967                           ;doprnt.c: 1392: if(flag & 0x03)
  3968  00095E  C106  F0E8         	movff	printf@flag,??_printf
  3969  000962  0E03               	movlw	3
  3970  000964  0100               	movlb	0	; () banked
  3971  000966  17E8               	andwf	??_printf& (0+255),f,b
  3972  000968  B4D8               	btfsc	status,2,c
  3973  00096A  D003               	goto	l4985
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;doprnt.c: 1393: (putch('-') );
  3977  00096C  0E2D               	movlw	45
  3978  00096E  EC42  F016         	call	_putch
  3979  000972                     l4985:
  3980                           
  3981                           ;doprnt.c: 1415: if(width)
  3982  000972  0101               	movlb	1	; () banked
  3983  000974  5107               	movf	printf@width& (0+255),w,b
  3984  000976  0101               	movlb	1	; () banked
  3985  000978  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3986  00097A  B4D8               	btfsc	status,2,c
  3987  00097C  D025               	goto	l5001
  3988                           
  3989                           ; BSR set to: 1
  3990                           ;doprnt.c: 1417: (putch('0') );
  3991                           
  3992                           ; BSR set to: 1
  3993                           
  3994                           ;doprnt.c: 1416: do
  3995  00097E  0E30               	movlw	48
  3996  000980  EC42  F016         	call	_putch
  3997                           
  3998                           ;doprnt.c: 1418: while(--width);
  3999  000984  0101               	movlb	1	; () banked
  4000  000986  0707               	decf	printf@width& (0+255),f,b
  4001  000988  A0D8               	btfss	status,0,c
  4002  00098A  0708               	decf	(printf@width+1)& (0+255),f,b
  4003  00098C  D7F2               	goto	l4985
  4004  00098E                     l4991:
  4005                           
  4006                           ; BSR set to: 1
  4007                           ;doprnt.c: 1422: {
  4008                           ;doprnt.c: 1424: if(width
  4009                           ;doprnt.c: 1428: )
  4010  00098E  0101               	movlb	1	; () banked
  4011  000990  5107               	movf	printf@width& (0+255),w,b
  4012  000992  0101               	movlb	1	; () banked
  4013  000994  1108               	iorwf	(printf@width+1)& (0+255),w,b
  4014  000996  B4D8               	btfsc	status,2,c
  4015  000998  D00D               	goto	l4997
  4016  00099A                     l4993:
  4017                           
  4018                           ; BSR set to: 1
  4019                           ;doprnt.c: 1430: (putch(' ') );
  4020  00099A  0E20               	movlw	32
  4021  00099C  EC42  F016         	call	_putch
  4022                           
  4023                           ;doprnt.c: 1431: while(--width);
  4024  0009A0  0101               	movlb	1	; () banked
  4025  0009A2  0707               	decf	printf@width& (0+255),f,b
  4026  0009A4  A0D8               	btfss	status,0,c
  4027  0009A6  0708               	decf	(printf@width+1)& (0+255),f,b
  4028  0009A8  0101               	movlb	1	; () banked
  4029  0009AA  5107               	movf	printf@width& (0+255),w,b
  4030  0009AC  0101               	movlb	1	; () banked
  4031  0009AE  1108               	iorwf	(printf@width+1)& (0+255),w,b
  4032  0009B0  A4D8               	btfss	status,2,c
  4033  0009B2  D7F3               	goto	l4993
  4034  0009B4                     l4997:
  4035                           
  4036                           ; BSR set to: 1
  4037                           ;doprnt.c: 1438: if(flag & 0x03)
  4038  0009B4  C106  F0E8         	movff	printf@flag,??_printf
  4039  0009B8  0E03               	movlw	3
  4040  0009BA  0100               	movlb	0	; () banked
  4041  0009BC  17E8               	andwf	??_printf& (0+255),f,b
  4042  0009BE  B4D8               	btfsc	status,2,c
  4043  0009C0  D003               	goto	l5001
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;doprnt.c: 1439: (putch('-') );
  4047  0009C2  0E2D               	movlw	45
  4048  0009C4  EC42  F016         	call	_putch
  4049  0009C8                     l5001:
  4050                           
  4051                           ;doprnt.c: 1469: }
  4052                           ;doprnt.c: 1472: prec = c;
  4053  0009C8  C109  F103         	movff	printf@c,printf@prec
  4054                           
  4055                           ;doprnt.c: 1474: while(prec--) {
  4056  0009CC  D05D               	goto	l5015
  4057  0009CE                     l5003:
  4058                           
  4059                           ;doprnt.c: 1486: case 0xC0:
  4060                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4061  0009CE  0101               	movlb	1	; () banked
  4062  0009D0  5103               	movf	printf@prec& (0+255),w,b
  4063  0009D2  0D02               	mullw	2
  4064  0009D4  0EC8               	movlw	low _dpowers
  4065  0009D6  24F3               	addwf	prodl,w,c
  4066  0009D8  6EF6               	movwf	tblptrl,c
  4067  0009DA  0EFD               	movlw	high _dpowers
  4068  0009DC  20F4               	addwfc	prodh,w,c
  4069  0009DE  6EF7               	movwf	tblptrh,c
  4070  0009E0                     	if	0	;There are less than 3 active tblptr bytes
  4071  0009E0                     	endif
  4072  0009E0  0009               	tblrd		*+
  4073  0009E2  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4074  0009E6  000A               	tblrd		*-
  4075  0009E8  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4076  0009EC  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4077  0009F0  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4078  0009F4  ECD7  F012         	call	___lwdiv	;wreg free
  4079  0009F8  C0D4  F0DB         	movff	?___lwdiv,___lwmod@dividend
  4080  0009FC  C0D5  F0DC         	movff	?___lwdiv+1,___lwmod@dividend+1
  4081  000A00  0E00               	movlw	0
  4082  000A02  0100               	movlb	0	; () banked
  4083  000A04  6FDE               	movwf	(___lwmod@divisor+1)& (0+255),b
  4084  000A06  0E0A               	movlw	10
  4085  000A08  6FDD               	movwf	___lwmod@divisor& (0+255),b
  4086  000A0A  ECB6  F013         	call	___lwmod	;wreg free
  4087  000A0E  0100               	movlb	0	; () banked
  4088  000A10  51DB               	movf	?___lwmod& (0+255),w,b
  4089  000A12  0F30               	addlw	48
  4090  000A14  0101               	movlb	1	; () banked
  4091  000A16  6F09               	movwf	printf@c& (0+255),b
  4092                           
  4093                           ;doprnt.c: 1491: break;
  4094  000A18  D033               	goto	l5013
  4095  000A1A                     l5005:
  4096                           
  4097                           ; BSR set to: 1
  4098                           ;doprnt.c: 1499: {
  4099                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4100  000A1A  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4101  000A1E  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4102  000A22  0101               	movlb	1	; () banked
  4103  000A24  5103               	movf	printf@prec& (0+255),w,b
  4104  000A26  0D02               	mullw	2
  4105  000A28  0ED2               	movlw	low _hexpowers
  4106  000A2A  24F3               	addwf	prodl,w,c
  4107  000A2C  6EF6               	movwf	tblptrl,c
  4108  000A2E  0EFD               	movlw	high _hexpowers
  4109  000A30  20F4               	addwfc	prodh,w,c
  4110  000A32  6EF7               	movwf	tblptrh,c
  4111  000A34                     	if	0	;There are less than 3 active tblptr bytes
  4112  000A34                     	endif
  4113  000A34  0009               	tblrd		*+
  4114  000A36  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4115  000A3A  000A               	tblrd		*-
  4116  000A3C  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4117  000A40  ECD7  F012         	call	___lwdiv	;wreg free
  4118  000A44  0100               	movlb	0	; () banked
  4119  000A46  51D4               	movf	?___lwdiv& (0+255),w,b
  4120  000A48  0B0F               	andlw	15
  4121  000A4A  0101               	movlb	1	; () banked
  4122  000A4C  6F00               	movwf	printf@idx& (0+255),b
  4123                           
  4124                           ; BSR set to: 1
  4125                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4126  000A4E  0101               	movlb	1	; () banked
  4127  000A50  5100               	movf	printf@idx& (0+255),w,b
  4128  000A52  0D01               	mullw	1
  4129  000A54  0E95               	movlw	low STR_25
  4130  000A56  24F3               	addwf	prodl,w,c
  4131  000A58  6EF6               	movwf	tblptrl,c
  4132  000A5A  0EFF               	movlw	high STR_25
  4133  000A5C  20F4               	addwfc	prodh,w,c
  4134  000A5E  6EF7               	movwf	tblptrh,c
  4135  000A60                     	if	0	;There are less than 3 active tblptr bytes
  4136  000A60                     	endif
  4137  000A60  0008               	tblrd		*
  4138  000A62  CFF5 F109          	movff	tablat,printf@c
  4139                           
  4140                           ; BSR set to: 1
  4141                           ;doprnt.c: 1523: }
  4142                           
  4143                           ;doprnt.c: 1508: }
  4144                           ;doprnt.c: 1510: break;
  4145  000A66  D00C               	goto	l5013
  4146  000A68                     l5011:
  4147  000A68  0101               	movlb	1	; () banked
  4148  000A6A  5106               	movf	printf@flag& (0+255),w,b
  4149  000A6C  0BC0               	andlw	192
  4150                           
  4151                           ; Switch size 1, requested type "space"
  4152                           ; Number of cases is 3, Range of values is 0 to 192
  4153                           ; switch strategies available:
  4154                           ; Name         Instructions Cycles
  4155                           ; simple_byte           10     6 (average)
  4156                           ;	Chosen strategy is simple_byte
  4157  000A6E  0A00               	xorlw	0	; case 0
  4158  000A70  B4D8               	btfsc	status,2,c
  4159  000A72  D7AD               	goto	l5003
  4160  000A74  0A80               	xorlw	128	; case 128
  4161  000A76  B4D8               	btfsc	status,2,c
  4162  000A78  D7D0               	goto	l5005
  4163  000A7A  0A40               	xorlw	64	; case 192
  4164  000A7C  B4D8               	btfsc	status,2,c
  4165  000A7E  D7A7               	goto	l5003
  4166  000A80                     l5013:
  4167                           
  4168                           ; BSR set to: 1
  4169                           ;doprnt.c: 1524: (putch(c) );
  4170  000A80  0101               	movlb	1	; () banked
  4171  000A82  5109               	movf	printf@c& (0+255),w,b
  4172  000A84  EC42  F016         	call	_putch
  4173  000A88                     l5015:
  4174  000A88  0101               	movlb	1	; () banked
  4175  000A8A  0703               	decf	printf@prec& (0+255),f,b
  4176  000A8C  0101               	movlb	1	; () banked
  4177  000A8E  2903               	incf	printf@prec& (0+255),w,b
  4178  000A90  A4D8               	btfss	status,2,c
  4179  000A92  D7EA               	goto	l5011
  4180  000A94                     l5017:
  4181  000A94  C0E0  FFF6         	movff	printf@f,tblptrl
  4182  000A98  C0E1  FFF7         	movff	printf@f+1,tblptrh
  4183  000A9C  0100               	movlb	0	; () banked
  4184  000A9E  4BE0               	infsnz	printf@f& (0+255),f,b
  4185  000AA0  2BE1               	incf	(printf@f+1)& (0+255),f,b
  4186  000AA2                     	if	0	;tblptru may be non-zero
  4187  000AA2                     	endif
  4188  000AA2                     	if	0	;tblptru may be non-zero
  4189  000AA2                     	endif
  4190  000AA2  0008               	tblrd		*
  4191  000AA4  CFF5 F109          	movff	tablat,printf@c
  4192  000AA8  0101               	movlb	1	; () banked
  4193  000AAA  5109               	movf	printf@c& (0+255),w,b
  4194  000AAC  B4D8               	btfsc	status,2,c
  4195  000AAE  0012               	return	
  4196  000AB0  D61C               	goto	l4887
  4197  000AB2                     __end_of_printf:
  4198                           	opt stack 0
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           prodh	equ	0xFF4
  4204                           prodl	equ	0xFF3
  4205                           intcon	equ	0xFF2
  4206                           intcon2	equ	0xFF1
  4207                           intcon3	equ	0xFF0
  4208                           postinc0	equ	0xFEE
  4209                           wreg	equ	0xFE8
  4210                           indf2	equ	0xFDF
  4211                           postinc2	equ	0xFDE
  4212                           postdec2	equ	0xFDD
  4213                           fsr2h	equ	0xFDA
  4214                           fsr2l	equ	0xFD9
  4215                           status	equ	0xFD8
  4216                           
  4217 ;; *************** function _putch *****************
  4218 ;; Defined at:
  4219 ;;		line 31 in file "lcd.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  data            1    wreg     unsigned char 
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;  data            1   18[BANK0 ] unsigned char 
  4224 ;; Return value:  Size  Location     Type
  4225 ;;                  1    wreg      void 
  4226 ;; Registers used:
  4227 ;;		wreg, status,2, status,0, cstack
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;Total ram usage:        1 bytes
  4238 ;; Hardware stack levels used:    1
  4239 ;; Hardware stack levels required when called:    8
  4240 ;; This function calls:
  4241 ;;		_lcdNibble
  4242 ;; This function is called by:
  4243 ;;		_printf
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text13
  4248  002C84                     __ptext13:
  4249                           	opt stack 0
  4250  002C84                     _putch:
  4251                           	opt stack 20
  4252                           
  4253                           ;incstack = 0
  4254                           ;putch@data stored from wreg
  4255  002C84  0100               	movlb	0	; () banked
  4256  002C86  6FD6               	movwf	putch@data& (0+255),b
  4257                           
  4258                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4259  002C88  848C               	bsf	3980,2,c	;volatile
  4260                           
  4261                           ;lcd.c: 33: lcdNibble(data);
  4262  002C8A  0100               	movlb	0	; () banked
  4263  002C8C  51D6               	movf	putch@data& (0+255),w,b
  4264  002C8E  ECE7  F013         	call	_lcdNibble
  4265  002C92  0012               	return		;funcret
  4266  002C94                     __end_of_putch:
  4267                           	opt stack 0
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           prodh	equ	0xFF4
  4273                           prodl	equ	0xFF3
  4274                           intcon	equ	0xFF2
  4275                           intcon2	equ	0xFF1
  4276                           intcon3	equ	0xFF0
  4277                           postinc0	equ	0xFEE
  4278                           wreg	equ	0xFE8
  4279                           indf2	equ	0xFDF
  4280                           postinc2	equ	0xFDE
  4281                           postdec2	equ	0xFDD
  4282                           fsr2h	equ	0xFDA
  4283                           fsr2l	equ	0xFD9
  4284                           status	equ	0xFD8
  4285                           
  4286 ;; *************** function _isdigit *****************
  4287 ;; Defined at:
  4288 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;  c               1    wreg     unsigned char 
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;  c               1   18[BANK0 ] unsigned char 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;		None               void
  4295 ;; Registers used:
  4296 ;;		wreg, status,2, status,0
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4305 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4306 ;;Total ram usage:        3 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    7
  4309 ;; This function calls:
  4310 ;;		Nothing
  4311 ;; This function is called by:
  4312 ;;		_printf
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text14
  4317  002B6C                     __ptext14:
  4318                           	opt stack 0
  4319  002B6C                     _isdigit:
  4320                           	opt stack 21
  4321                           
  4322                           ;incstack = 0
  4323                           ;isdigit@c stored from wreg
  4324  002B6C  0100               	movlb	0	; () banked
  4325  002B6E  6FD6               	movwf	isdigit@c& (0+255),b
  4326  002B70  0E00               	movlw	0
  4327  002B72  0100               	movlb	0	; () banked
  4328  002B74  6FD5               	movwf	_isdigit$824& (0+255),b
  4329                           
  4330                           ; BSR set to: 0
  4331  002B76  0E3A               	movlw	58
  4332  002B78  0100               	movlb	0	; () banked
  4333  002B7A  61D6               	cpfslt	isdigit@c& (0+255),b
  4334  002B7C  D007               	goto	l4833
  4335                           
  4336                           ; BSR set to: 0
  4337  002B7E  0E2F               	movlw	47
  4338  002B80  0100               	movlb	0	; () banked
  4339  002B82  65D6               	cpfsgt	isdigit@c& (0+255),b
  4340  002B84  D003               	goto	l4833
  4341                           
  4342                           ; BSR set to: 0
  4343  002B86  0E01               	movlw	1
  4344  002B88  0100               	movlb	0	; () banked
  4345  002B8A  6FD5               	movwf	_isdigit$824& (0+255),b
  4346  002B8C                     l4833:
  4347                           
  4348                           ; BSR set to: 0
  4349  002B8C  C0D5  F0D4         	movff	_isdigit$824,??_isdigit
  4350  002B90  0100               	movlb	0	; () banked
  4351  002B92  31D4               	rrcf	??_isdigit& (0+255),w,b
  4352  002B94  0012               	return	
  4353  002B96                     __end_of_isdigit:
  4354                           	opt stack 0
  4355                           tblptru	equ	0xFF8
  4356                           tblptrh	equ	0xFF7
  4357                           tblptrl	equ	0xFF6
  4358                           tablat	equ	0xFF5
  4359                           prodh	equ	0xFF4
  4360                           prodl	equ	0xFF3
  4361                           intcon	equ	0xFF2
  4362                           intcon2	equ	0xFF1
  4363                           intcon3	equ	0xFF0
  4364                           postinc0	equ	0xFEE
  4365                           wreg	equ	0xFE8
  4366                           indf2	equ	0xFDF
  4367                           postinc2	equ	0xFDE
  4368                           postdec2	equ	0xFDD
  4369                           fsr2h	equ	0xFDA
  4370                           fsr2l	equ	0xFD9
  4371                           status	equ	0xFD8
  4372                           
  4373 ;; *************** function ___wmul *****************
  4374 ;; Defined at:
  4375 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4378 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;  product         2   20[BANK0 ] unsigned int 
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  2   16[BANK0 ] unsigned int 
  4383 ;; Registers used:
  4384 ;;		wreg, status,2, status,0, prodl, prodh
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;Total ram usage:        6 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:    7
  4397 ;; This function calls:
  4398 ;;		Nothing
  4399 ;; This function is called by:
  4400 ;;		_printf
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text15
  4405  002B08                     __ptext15:
  4406                           	opt stack 0
  4407  002B08                     ___wmul:
  4408                           	opt stack 21
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;incstack = 0
  4412  002B08  0100               	movlb	0	; () banked
  4413  002B0A  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4414  002B0C  0100               	movlb	0	; () banked
  4415  002B0E  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4416  002B10  CFF3 F0D8          	movff	prodl,___wmul@product
  4417  002B14  CFF4 F0D9          	movff	prodh,___wmul@product+1
  4418  002B18  0100               	movlb	0	; () banked
  4419  002B1A  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4420  002B1C  0100               	movlb	0	; () banked
  4421  002B1E  03D7               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4422  002B20  50F3               	movf	prodl,w,c
  4423  002B22  0100               	movlb	0	; () banked
  4424  002B24  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4425  002B26  0100               	movlb	0	; () banked
  4426  002B28  51D5               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4427  002B2A  0100               	movlb	0	; () banked
  4428  002B2C  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4429  002B2E  50F3               	movf	prodl,w,c
  4430  002B30  0100               	movlb	0	; () banked
  4431  002B32  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4432                           
  4433                           ; BSR set to: 0
  4434  002B34  C0D8  F0D4         	movff	___wmul@product,?___wmul
  4435  002B38  C0D9  F0D5         	movff	___wmul@product+1,?___wmul+1
  4436  002B3C  0012               	return	
  4437  002B3E                     __end_of___wmul:
  4438                           	opt stack 0
  4439                           tblptru	equ	0xFF8
  4440                           tblptrh	equ	0xFF7
  4441                           tblptrl	equ	0xFF6
  4442                           tablat	equ	0xFF5
  4443                           prodh	equ	0xFF4
  4444                           prodl	equ	0xFF3
  4445                           intcon	equ	0xFF2
  4446                           intcon2	equ	0xFF1
  4447                           intcon3	equ	0xFF0
  4448                           postinc0	equ	0xFEE
  4449                           wreg	equ	0xFE8
  4450                           indf2	equ	0xFDF
  4451                           postinc2	equ	0xFDE
  4452                           postdec2	equ	0xFDD
  4453                           fsr2h	equ	0xFDA
  4454                           fsr2l	equ	0xFD9
  4455                           status	equ	0xFD8
  4456                           
  4457 ;; *************** function ___lwmod *****************
  4458 ;; Defined at:
  4459 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  dividend        2   23[BANK0 ] unsigned int 
  4462 ;;  divisor         2   25[BANK0 ] unsigned int 
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;  counter         1   27[BANK0 ] unsigned char 
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  2   23[BANK0 ] unsigned int 
  4467 ;; Registers used:
  4468 ;;		wreg, status,2, status,0
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4474 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;Total ram usage:        5 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    7
  4481 ;; This function calls:
  4482 ;;		Nothing
  4483 ;; This function is called by:
  4484 ;;		_printf
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text16
  4489  00276C                     __ptext16:
  4490                           	opt stack 0
  4491  00276C                     ___lwmod:
  4492                           	opt stack 21
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;incstack = 0
  4496  00276C  0100               	movlb	0	; () banked
  4497  00276E  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4498  002770  0100               	movlb	0	; () banked
  4499  002772  11DE               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4500  002774  B4D8               	btfsc	status,2,c
  4501  002776  D026               	goto	l905
  4502                           
  4503                           ; BSR set to: 0
  4504  002778  0E01               	movlw	1
  4505  00277A  0100               	movlb	0	; () banked
  4506  00277C  6FDF               	movwf	___lwmod@counter& (0+255),b
  4507  00277E  D006               	goto	l4871
  4508  002780                     l4869:
  4509                           
  4510                           ; BSR set to: 0
  4511  002780  0100               	movlb	0	; () banked
  4512  002782  90D8               	bcf	status,0,c
  4513  002784  37DD               	rlcf	___lwmod@divisor& (0+255),f,b
  4514  002786  37DE               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4515  002788  0100               	movlb	0	; () banked
  4516  00278A  2BDF               	incf	___lwmod@counter& (0+255),f,b
  4517  00278C                     l4871:
  4518                           
  4519                           ; BSR set to: 0
  4520  00278C  0100               	movlb	0	; () banked
  4521  00278E  AFDE               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4522  002790  D7F7               	goto	l4869
  4523  002792                     l4873:
  4524                           
  4525                           ; BSR set to: 0
  4526  002792  0100               	movlb	0	; () banked
  4527  002794  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4528  002796  0100               	movlb	0	; () banked
  4529  002798  5DDB               	subwf	___lwmod@dividend& (0+255),w,b
  4530  00279A  0100               	movlb	0	; () banked
  4531  00279C  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4532  00279E  0100               	movlb	0	; () banked
  4533  0027A0  59DC               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4534  0027A2  A0D8               	btfss	status,0,c
  4535  0027A4  D008               	goto	l4877
  4536                           
  4537                           ; BSR set to: 0
  4538  0027A6  0100               	movlb	0	; () banked
  4539  0027A8  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4540  0027AA  0100               	movlb	0	; () banked
  4541  0027AC  5FDB               	subwf	___lwmod@dividend& (0+255),f,b
  4542  0027AE  0100               	movlb	0	; () banked
  4543  0027B0  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4544  0027B2  0100               	movlb	0	; () banked
  4545  0027B4  5BDC               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4546  0027B6                     l4877:
  4547                           
  4548                           ; BSR set to: 0
  4549  0027B6  0100               	movlb	0	; () banked
  4550  0027B8  90D8               	bcf	status,0,c
  4551  0027BA  33DE               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4552  0027BC  33DD               	rrcf	___lwmod@divisor& (0+255),f,b
  4553                           
  4554                           ; BSR set to: 0
  4555  0027BE  0100               	movlb	0	; () banked
  4556  0027C0  2FDF               	decfsz	___lwmod@counter& (0+255),f,b
  4557  0027C2  D7E7               	goto	l4873
  4558  0027C4                     l905:
  4559                           
  4560                           ; BSR set to: 0
  4561  0027C4  C0DB  F0DB         	movff	___lwmod@dividend,?___lwmod
  4562  0027C8  C0DC  F0DC         	movff	___lwmod@dividend+1,?___lwmod+1
  4563                           
  4564                           ; BSR set to: 0
  4565  0027CC  0012               	return		;funcret
  4566  0027CE                     __end_of___lwmod:
  4567                           	opt stack 0
  4568                           tblptru	equ	0xFF8
  4569                           tblptrh	equ	0xFF7
  4570                           tblptrl	equ	0xFF6
  4571                           tablat	equ	0xFF5
  4572                           prodh	equ	0xFF4
  4573                           prodl	equ	0xFF3
  4574                           intcon	equ	0xFF2
  4575                           intcon2	equ	0xFF1
  4576                           intcon3	equ	0xFF0
  4577                           postinc0	equ	0xFEE
  4578                           wreg	equ	0xFE8
  4579                           indf2	equ	0xFDF
  4580                           postinc2	equ	0xFDE
  4581                           postdec2	equ	0xFDD
  4582                           fsr2h	equ	0xFDA
  4583                           fsr2l	equ	0xFD9
  4584                           status	equ	0xFD8
  4585                           
  4586 ;; *************** function ___lwdiv *****************
  4587 ;; Defined at:
  4588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;  dividend        2   16[BANK0 ] unsigned int 
  4591 ;;  divisor         2   18[BANK0 ] unsigned int 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  quotient        2   21[BANK0 ] unsigned int 
  4594 ;;  counter         1   20[BANK0 ] unsigned char 
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  2   16[BANK0 ] unsigned int 
  4597 ;; Registers used:
  4598 ;;		wreg, status,2, status,0
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4607 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;Total ram usage:        7 bytes
  4609 ;; Hardware stack levels used:    1
  4610 ;; Hardware stack levels required when called:    7
  4611 ;; This function calls:
  4612 ;;		Nothing
  4613 ;; This function is called by:
  4614 ;;		_printf
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           	psect	text17
  4619  0025AE                     __ptext17:
  4620                           	opt stack 0
  4621  0025AE                     ___lwdiv:
  4622                           	opt stack 21
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;incstack = 0
  4626  0025AE  0E00               	movlw	0
  4627  0025B0  0100               	movlb	0	; () banked
  4628  0025B2  6FDA               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4629  0025B4  0E00               	movlw	0
  4630  0025B6  6FD9               	movwf	___lwdiv@quotient& (0+255),b
  4631                           
  4632                           ; BSR set to: 0
  4633  0025B8  0100               	movlb	0	; () banked
  4634  0025BA  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4635  0025BC  0100               	movlb	0	; () banked
  4636  0025BE  11D7               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4637  0025C0  B4D8               	btfsc	status,2,c
  4638  0025C2  D02C               	goto	l895
  4639                           
  4640                           ; BSR set to: 0
  4641  0025C4  0E01               	movlw	1
  4642  0025C6  0100               	movlb	0	; () banked
  4643  0025C8  6FD8               	movwf	___lwdiv@counter& (0+255),b
  4644  0025CA  D006               	goto	l4851
  4645  0025CC                     l4849:
  4646                           
  4647                           ; BSR set to: 0
  4648  0025CC  0100               	movlb	0	; () banked
  4649  0025CE  90D8               	bcf	status,0,c
  4650  0025D0  37D6               	rlcf	___lwdiv@divisor& (0+255),f,b
  4651  0025D2  37D7               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4652  0025D4  0100               	movlb	0	; () banked
  4653  0025D6  2BD8               	incf	___lwdiv@counter& (0+255),f,b
  4654  0025D8                     l4851:
  4655                           
  4656                           ; BSR set to: 0
  4657  0025D8  0100               	movlb	0	; () banked
  4658  0025DA  AFD7               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4659  0025DC  D7F7               	goto	l4849
  4660  0025DE                     l4853:
  4661                           
  4662                           ; BSR set to: 0
  4663  0025DE  0100               	movlb	0	; () banked
  4664  0025E0  90D8               	bcf	status,0,c
  4665  0025E2  37D9               	rlcf	___lwdiv@quotient& (0+255),f,b
  4666  0025E4  37DA               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4667                           
  4668                           ; BSR set to: 0
  4669  0025E6  0100               	movlb	0	; () banked
  4670  0025E8  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4671  0025EA  0100               	movlb	0	; () banked
  4672  0025EC  5DD4               	subwf	___lwdiv@dividend& (0+255),w,b
  4673  0025EE  0100               	movlb	0	; () banked
  4674  0025F0  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4675  0025F2  0100               	movlb	0	; () banked
  4676  0025F4  59D5               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4677  0025F6  A0D8               	btfss	status,0,c
  4678  0025F8  D00A               	goto	l4861
  4679                           
  4680                           ; BSR set to: 0
  4681  0025FA  0100               	movlb	0	; () banked
  4682  0025FC  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4683  0025FE  0100               	movlb	0	; () banked
  4684  002600  5FD4               	subwf	___lwdiv@dividend& (0+255),f,b
  4685  002602  0100               	movlb	0	; () banked
  4686  002604  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4687  002606  0100               	movlb	0	; () banked
  4688  002608  5BD5               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4689                           
  4690                           ; BSR set to: 0
  4691  00260A  0100               	movlb	0	; () banked
  4692  00260C  81D9               	bsf	___lwdiv@quotient& (0+255),0,b
  4693  00260E                     l4861:
  4694                           
  4695                           ; BSR set to: 0
  4696  00260E  0100               	movlb	0	; () banked
  4697  002610  90D8               	bcf	status,0,c
  4698  002612  33D7               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4699  002614  33D6               	rrcf	___lwdiv@divisor& (0+255),f,b
  4700                           
  4701                           ; BSR set to: 0
  4702  002616  0100               	movlb	0	; () banked
  4703  002618  2FD8               	decfsz	___lwdiv@counter& (0+255),f,b
  4704  00261A  D7E1               	goto	l4853
  4705  00261C                     l895:
  4706                           
  4707                           ; BSR set to: 0
  4708  00261C  C0D9  F0D4         	movff	___lwdiv@quotient,?___lwdiv
  4709  002620  C0DA  F0D5         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4710                           
  4711                           ; BSR set to: 0
  4712  002624  0012               	return		;funcret
  4713  002626                     __end_of___lwdiv:
  4714                           	opt stack 0
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           intcon	equ	0xFF2
  4722                           intcon2	equ	0xFF1
  4723                           intcon3	equ	0xFF0
  4724                           postinc0	equ	0xFEE
  4725                           wreg	equ	0xFE8
  4726                           indf2	equ	0xFDF
  4727                           postinc2	equ	0xFDE
  4728                           postdec2	equ	0xFDD
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _lcdInst *****************
  4734 ;; Defined at:
  4735 ;;		line 26 in file "lcd.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  data            1    wreg     unsigned char 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  data            1   18[BANK0 ] unsigned char 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, status,2, status,0, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;Total ram usage:        1 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    8
  4756 ;; This function calls:
  4757 ;;		_lcdNibble
  4758 ;; This function is called by:
  4759 ;;		_initLCD
  4760 ;;		_standby
  4761 ;;		_date_time
  4762 ;;		_bottle_count
  4763 ;;		_bottle_time
  4764 ;;		_operation
  4765 ;;		_operationend
  4766 ;;		_emergencystop
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text18
  4771  002C94                     __ptext18:
  4772                           	opt stack 0
  4773  002C94                     _lcdInst:
  4774                           	opt stack 21
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;incstack = 0
  4778                           ;lcdInst@data stored from wreg
  4779  002C94  0100               	movlb	0	; () banked
  4780  002C96  6FD6               	movwf	lcdInst@data& (0+255),b
  4781                           
  4782                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4783  002C98  948C               	bcf	3980,2,c	;volatile
  4784                           
  4785                           ;lcd.c: 28: lcdNibble(data);
  4786  002C9A  0100               	movlb	0	; () banked
  4787  002C9C  51D6               	movf	lcdInst@data& (0+255),w,b
  4788  002C9E  ECE7  F013         	call	_lcdNibble
  4789  002CA2  0012               	return		;funcret
  4790  002CA4                     __end_of_lcdInst:
  4791                           	opt stack 0
  4792                           tblptru	equ	0xFF8
  4793                           tblptrh	equ	0xFF7
  4794                           tblptrl	equ	0xFF6
  4795                           tablat	equ	0xFF5
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           intcon	equ	0xFF2
  4799                           intcon2	equ	0xFF1
  4800                           intcon3	equ	0xFF0
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           postdec2	equ	0xFDD
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _lcdNibble *****************
  4811 ;; Defined at:
  4812 ;;		line 36 in file "lcd.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  data            1    wreg     unsigned char 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  data            1   17[BANK0 ] unsigned char 
  4817 ;;  temp            1   16[BANK0 ] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, status,2, status,0
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;Total ram usage:        2 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    7
  4834 ;; This function calls:
  4835 ;;		Nothing
  4836 ;; This function is called by:
  4837 ;;		_lcdInst
  4838 ;;		_putch
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text19
  4843  0027CE                     __ptext19:
  4844                           	opt stack 0
  4845  0027CE                     _lcdNibble:
  4846                           	opt stack 21
  4847                           
  4848                           ;incstack = 0
  4849                           ;lcdNibble@data stored from wreg
  4850  0027CE  0100               	movlb	0	; () banked
  4851  0027D0  6FD5               	movwf	lcdNibble@data& (0+255),b
  4852                           
  4853                           ;lcd.c: 38: char temp = data & 0xF0;
  4854  0027D2  0100               	movlb	0	; () banked
  4855  0027D4  51D5               	movf	lcdNibble@data& (0+255),w,b
  4856  0027D6  0BF0               	andlw	240
  4857  0027D8  0100               	movlb	0	; () banked
  4858  0027DA  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4859                           
  4860                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4861  0027DC  508C               	movf	3980,w,c	;volatile
  4862  0027DE  0B0F               	andlw	15
  4863  0027E0  6E8C               	movwf	3980,c	;volatile
  4864                           
  4865                           ;lcd.c: 40: LATD = temp | LATD;
  4866  0027E2  0100               	movlb	0	; () banked
  4867  0027E4  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4868  0027E6  108C               	iorwf	3980,w,c	;volatile
  4869  0027E8  6E8C               	movwf	3980,c	;volatile
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4873  0027EA  968C               	bcf	3980,3,c	;volatile
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4877  0027EC  0E19               	movlw	25
  4878  0027EE                     u4787:
  4879  0027EE  2EE8               	decfsz	wreg,f,c
  4880  0027F0  D7FE               	bra	u4787
  4881                           
  4882                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4883  0027F2  868C               	bsf	3980,3,c	;volatile
  4884                           
  4885                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4886  0027F4  0E19               	movlw	25
  4887  0027F6                     u4797:
  4888  0027F6  2EE8               	decfsz	wreg,f,c
  4889  0027F8  D7FE               	bra	u4797
  4890                           
  4891                           ;lcd.c: 47: data = data << 4;
  4892  0027FA  0100               	movlb	0	; () banked
  4893  0027FC  39D5               	swapf	lcdNibble@data& (0+255),w,b
  4894  0027FE  0BF0               	andlw	240
  4895  002800  0100               	movlb	0	; () banked
  4896  002802  6FD5               	movwf	lcdNibble@data& (0+255),b
  4897                           
  4898                           ;lcd.c: 49: temp = data & 0xF0;
  4899  002804  0100               	movlb	0	; () banked
  4900  002806  51D5               	movf	lcdNibble@data& (0+255),w,b
  4901  002808  0BF0               	andlw	240
  4902  00280A  0100               	movlb	0	; () banked
  4903  00280C  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4904                           
  4905                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4906  00280E  508C               	movf	3980,w,c	;volatile
  4907  002810  0B0F               	andlw	15
  4908  002812  6E8C               	movwf	3980,c	;volatile
  4909                           
  4910                           ;lcd.c: 51: LATD = temp | LATD;
  4911  002814  0100               	movlb	0	; () banked
  4912  002816  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4913  002818  108C               	iorwf	3980,w,c	;volatile
  4914  00281A  6E8C               	movwf	3980,c	;volatile
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4918  00281C  968C               	bcf	3980,3,c	;volatile
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4922  00281E  0E19               	movlw	25
  4923  002820                     u4807:
  4924  002820  2EE8               	decfsz	wreg,f,c
  4925  002822  D7FE               	bra	u4807
  4926                           
  4927                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4928  002824  868C               	bsf	3980,3,c	;volatile
  4929                           
  4930                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4931  002826  0E19               	movlw	25
  4932  002828                     u4817:
  4933  002828  2EE8               	decfsz	wreg,f,c
  4934  00282A  D7FE               	bra	u4817
  4935  00282C  0012               	return		;funcret
  4936  00282E                     __end_of_lcdNibble:
  4937                           	opt stack 0
  4938                           tblptru	equ	0xFF8
  4939                           tblptrh	equ	0xFF7
  4940                           tblptrl	equ	0xFF6
  4941                           tablat	equ	0xFF5
  4942                           prodh	equ	0xFF4
  4943                           prodl	equ	0xFF3
  4944                           intcon	equ	0xFF2
  4945                           intcon2	equ	0xFF1
  4946                           intcon3	equ	0xFF0
  4947                           postinc0	equ	0xFEE
  4948                           wreg	equ	0xFE8
  4949                           indf2	equ	0xFDF
  4950                           postinc2	equ	0xFDE
  4951                           postdec2	equ	0xFDD
  4952                           fsr2h	equ	0xFDA
  4953                           fsr2l	equ	0xFD9
  4954                           status	equ	0xFD8
  4955                           
  4956 ;; *************** function ___awmod *****************
  4957 ;; Defined at:
  4958 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;  dividend        2   16[BANK0 ] int 
  4961 ;;  divisor         2   18[BANK0 ] int 
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  sign            1   21[BANK0 ] unsigned char 
  4964 ;;  counter         1   20[BANK0 ] unsigned char 
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  2   16[BANK0 ] int 
  4967 ;; Registers used:
  4968 ;;		wreg, status,2, status,0
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4974 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;Total ram usage:        6 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:    7
  4981 ;; This function calls:
  4982 ;;		Nothing
  4983 ;; This function is called by:
  4984 ;;		_bottle_count
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text20
  4989  0022D8                     __ptext20:
  4990                           	opt stack 0
  4991  0022D8                     ___awmod:
  4992                           	opt stack 22
  4993                           
  4994                           ;incstack = 0
  4995  0022D8  0E00               	movlw	0
  4996  0022DA  0100               	movlb	0	; () banked
  4997  0022DC  6FD9               	movwf	___awmod@sign& (0+255),b
  4998                           
  4999                           ; BSR set to: 0
  5000  0022DE  0100               	movlb	0	; () banked
  5001  0022E0  AFD5               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5002  0022E2  D008               	goto	l3871
  5003                           
  5004                           ; BSR set to: 0
  5005  0022E4  0100               	movlb	0	; () banked
  5006  0022E6  6DD4               	negf	___awmod@dividend& (0+255),b
  5007  0022E8  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  5008  0022EA  B0D8               	btfsc	status,0,c
  5009  0022EC  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  5010                           
  5011                           ; BSR set to: 0
  5012  0022EE  0E01               	movlw	1
  5013  0022F0  0100               	movlb	0	; () banked
  5014  0022F2  6FD9               	movwf	___awmod@sign& (0+255),b
  5015  0022F4                     l3871:
  5016                           
  5017                           ; BSR set to: 0
  5018  0022F4  0100               	movlb	0	; () banked
  5019  0022F6  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5020  0022F8  D005               	goto	l3875
  5021                           
  5022                           ; BSR set to: 0
  5023  0022FA  0100               	movlb	0	; () banked
  5024  0022FC  6DD6               	negf	___awmod@divisor& (0+255),b
  5025  0022FE  1FD7               	comf	(___awmod@divisor+1)& (0+255),f,b
  5026  002300  B0D8               	btfsc	status,0,c
  5027  002302  2BD7               	incf	(___awmod@divisor+1)& (0+255),f,b
  5028  002304                     l3875:
  5029                           
  5030                           ; BSR set to: 0
  5031  002304  0100               	movlb	0	; () banked
  5032  002306  51D6               	movf	___awmod@divisor& (0+255),w,b
  5033  002308  0100               	movlb	0	; () banked
  5034  00230A  11D7               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5035  00230C  B4D8               	btfsc	status,2,c
  5036  00230E  D026               	goto	l3891
  5037                           
  5038                           ; BSR set to: 0
  5039  002310  0E01               	movlw	1
  5040  002312  0100               	movlb	0	; () banked
  5041  002314  6FD8               	movwf	___awmod@counter& (0+255),b
  5042  002316  D006               	goto	l3881
  5043  002318                     l3879:
  5044                           
  5045                           ; BSR set to: 0
  5046  002318  0100               	movlb	0	; () banked
  5047  00231A  90D8               	bcf	status,0,c
  5048  00231C  37D6               	rlcf	___awmod@divisor& (0+255),f,b
  5049  00231E  37D7               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5050  002320  0100               	movlb	0	; () banked
  5051  002322  2BD8               	incf	___awmod@counter& (0+255),f,b
  5052  002324                     l3881:
  5053                           
  5054                           ; BSR set to: 0
  5055  002324  0100               	movlb	0	; () banked
  5056  002326  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5057  002328  D7F7               	goto	l3879
  5058  00232A                     l3883:
  5059                           
  5060                           ; BSR set to: 0
  5061  00232A  0100               	movlb	0	; () banked
  5062  00232C  51D6               	movf	___awmod@divisor& (0+255),w,b
  5063  00232E  0100               	movlb	0	; () banked
  5064  002330  5DD4               	subwf	___awmod@dividend& (0+255),w,b
  5065  002332  0100               	movlb	0	; () banked
  5066  002334  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  5067  002336  0100               	movlb	0	; () banked
  5068  002338  59D5               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5069  00233A  A0D8               	btfss	status,0,c
  5070  00233C  D008               	goto	l3887
  5071                           
  5072                           ; BSR set to: 0
  5073  00233E  0100               	movlb	0	; () banked
  5074  002340  51D6               	movf	___awmod@divisor& (0+255),w,b
  5075  002342  0100               	movlb	0	; () banked
  5076  002344  5FD4               	subwf	___awmod@dividend& (0+255),f,b
  5077  002346  0100               	movlb	0	; () banked
  5078  002348  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  5079  00234A  0100               	movlb	0	; () banked
  5080  00234C  5BD5               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5081  00234E                     l3887:
  5082                           
  5083                           ; BSR set to: 0
  5084  00234E  0100               	movlb	0	; () banked
  5085  002350  90D8               	bcf	status,0,c
  5086  002352  33D7               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5087  002354  33D6               	rrcf	___awmod@divisor& (0+255),f,b
  5088                           
  5089                           ; BSR set to: 0
  5090  002356  0100               	movlb	0	; () banked
  5091  002358  2FD8               	decfsz	___awmod@counter& (0+255),f,b
  5092  00235A  D7E7               	goto	l3883
  5093  00235C                     l3891:
  5094                           
  5095                           ; BSR set to: 0
  5096  00235C  0100               	movlb	0	; () banked
  5097  00235E  51D9               	movf	___awmod@sign& (0+255),w,b
  5098  002360  0100               	movlb	0	; () banked
  5099  002362  B4D8               	btfsc	status,2,c
  5100  002364  D005               	goto	l3895
  5101                           
  5102                           ; BSR set to: 0
  5103  002366  0100               	movlb	0	; () banked
  5104  002368  6DD4               	negf	___awmod@dividend& (0+255),b
  5105  00236A  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  5106  00236C  B0D8               	btfsc	status,0,c
  5107  00236E  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  5108  002370                     l3895:
  5109                           
  5110                           ; BSR set to: 0
  5111  002370  C0D4  F0D4         	movff	___awmod@dividend,?___awmod
  5112  002374  C0D5  F0D5         	movff	___awmod@dividend+1,?___awmod+1
  5113  002378  0012               	return	
  5114  00237A                     __end_of___awmod:
  5115                           	opt stack 0
  5116                           tblptru	equ	0xFF8
  5117                           tblptrh	equ	0xFF7
  5118                           tblptrl	equ	0xFF6
  5119                           tablat	equ	0xFF5
  5120                           prodh	equ	0xFF4
  5121                           prodl	equ	0xFF3
  5122                           intcon	equ	0xFF2
  5123                           intcon2	equ	0xFF1
  5124                           intcon3	equ	0xFF0
  5125                           postinc0	equ	0xFEE
  5126                           wreg	equ	0xFE8
  5127                           indf2	equ	0xFDF
  5128                           postinc2	equ	0xFDE
  5129                           postdec2	equ	0xFDD
  5130                           fsr2h	equ	0xFDA
  5131                           fsr2l	equ	0xFD9
  5132                           status	equ	0xFD8
  5133                           
  5134 ;; *************** function _I2C_Master_Init *****************
  5135 ;; Defined at:
  5136 ;;		line 13 in file "I2C.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  c               4   29[BANK0 ] const unsigned long 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;		None
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      void 
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5150 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;Total ram usage:        8 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    8
  5157 ;; This function calls:
  5158 ;;		___lldiv
  5159 ;; This function is called by:
  5160 ;;		_main
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           	psect	text21
  5165  00282E                     __ptext21:
  5166                           	opt stack 0
  5167  00282E                     _I2C_Master_Init:
  5168                           	opt stack 22
  5169                           
  5170                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;incstack = 0
  5174  00282E  0E00               	movlw	0
  5175  002830  6EC7               	movwf	4039,c	;volatile
  5176                           
  5177                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  5178  002832  0E28               	movlw	40
  5179  002834  6EC6               	movwf	4038,c	;volatile
  5180                           
  5181                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  5182  002836  0E00               	movlw	0
  5183  002838  6EC5               	movwf	4037,c	;volatile
  5184                           
  5185                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  5186  00283A  0E80               	movlw	128
  5187  00283C  0100               	movlb	0	; () banked
  5188  00283E  6FD4               	movwf	___lldiv@dividend& (0+255),b
  5189  002840  0E96               	movlw	150
  5190  002842  6FD5               	movwf	(___lldiv@dividend+1)& (0+255),b
  5191  002844  0E98               	movlw	152
  5192  002846  6FD6               	movwf	(___lldiv@dividend+2)& (0+255),b
  5193  002848  0E00               	movlw	0
  5194  00284A  6FD7               	movwf	(___lldiv@dividend+3)& (0+255),b
  5195  00284C  C0E1  F0E5         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5196  002850  C0E2  F0E6         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5197  002854  C0E3  F0E7         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5198  002858  C0E4  F0E8         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5199  00285C  0E02               	movlw	2
  5200  00285E                     u3715:
  5201  00285E  90D8               	bcf	status,0,c
  5202  002860  0100               	movlb	0	; () banked
  5203  002862  37E5               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5204  002864  37E6               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5205  002866  37E7               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5206  002868  37E8               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5207  00286A  2EE8               	decfsz	wreg,f,c
  5208  00286C  D7F8               	goto	u3715
  5209  00286E  C0E5  F0D8         	movff	??_I2C_Master_Init,___lldiv@divisor
  5210  002872  C0E6  F0D9         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5211  002876  C0E7  F0DA         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5212  00287A  C0E8  F0DB         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5213  00287E  EC03  F010         	call	___lldiv	;wreg free
  5214  002882  0100               	movlb	0	; () banked
  5215  002884  05D4               	decf	?___lldiv& (0+255),w,b
  5216  002886  6EC8               	movwf	4040,c	;volatile
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;I2C.c: 20: TRISC3 = 1;
  5220  002888  8694               	bsf	3988,3,c	;volatile
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;I2C.c: 21: TRISC4 = 1;
  5224  00288A  8894               	bsf	3988,4,c	;volatile
  5225                           
  5226                           ; BSR set to: 0
  5227  00288C  0012               	return		;funcret
  5228  00288E                     __end_of_I2C_Master_Init:
  5229                           	opt stack 0
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           prodh	equ	0xFF4
  5235                           prodl	equ	0xFF3
  5236                           intcon	equ	0xFF2
  5237                           intcon2	equ	0xFF1
  5238                           intcon3	equ	0xFF0
  5239                           postinc0	equ	0xFEE
  5240                           wreg	equ	0xFE8
  5241                           indf2	equ	0xFDF
  5242                           postinc2	equ	0xFDE
  5243                           postdec2	equ	0xFDD
  5244                           fsr2h	equ	0xFDA
  5245                           fsr2l	equ	0xFD9
  5246                           status	equ	0xFD8
  5247                           
  5248 ;; *************** function ___lldiv *****************
  5249 ;; Defined at:
  5250 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;  dividend        4   16[BANK0 ] unsigned long 
  5253 ;;  divisor         4   20[BANK0 ] unsigned long 
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  quotient        4   24[BANK0 ] unsigned long 
  5256 ;;  counter         1   28[BANK0 ] unsigned char 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  4   16[BANK0 ] unsigned long 
  5259 ;; Registers used:
  5260 ;;		wreg, status,2, status,0
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5266 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5267 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;Total ram usage:       13 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    7
  5273 ;; This function calls:
  5274 ;;		Nothing
  5275 ;; This function is called by:
  5276 ;;		_I2C_Master_Init
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           	psect	text22
  5281  002006                     __ptext22:
  5282                           	opt stack 0
  5283  002006                     ___lldiv:
  5284                           	opt stack 22
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;incstack = 0
  5288  002006  0E00               	movlw	0
  5289  002008  0100               	movlb	0	; () banked
  5290  00200A  6FDC               	movwf	___lldiv@quotient& (0+255),b
  5291  00200C  0E00               	movlw	0
  5292  00200E  6FDD               	movwf	(___lldiv@quotient+1)& (0+255),b
  5293  002010  0E00               	movlw	0
  5294  002012  6FDE               	movwf	(___lldiv@quotient+2)& (0+255),b
  5295  002014  0E00               	movlw	0
  5296  002016  6FDF               	movwf	(___lldiv@quotient+3)& (0+255),b
  5297                           
  5298                           ; BSR set to: 0
  5299  002018  0100               	movlb	0	; () banked
  5300  00201A  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5301  00201C  0100               	movlb	0	; () banked
  5302  00201E  11D9               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5303  002020  0100               	movlb	0	; () banked
  5304  002022  11DA               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5305  002024  0100               	movlb	0	; () banked
  5306  002026  11DB               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5307  002028  B4D8               	btfsc	status,2,c
  5308  00202A  D042               	goto	l842
  5309                           
  5310                           ; BSR set to: 0
  5311  00202C  0E01               	movlw	1
  5312  00202E  0100               	movlb	0	; () banked
  5313  002030  6FE0               	movwf	___lldiv@counter& (0+255),b
  5314  002032  D008               	goto	l3907
  5315  002034                     l3905:
  5316                           
  5317                           ; BSR set to: 0
  5318  002034  0100               	movlb	0	; () banked
  5319  002036  90D8               	bcf	status,0,c
  5320  002038  37D8               	rlcf	___lldiv@divisor& (0+255),f,b
  5321  00203A  37D9               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5322  00203C  37DA               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5323  00203E  37DB               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5324  002040  0100               	movlb	0	; () banked
  5325  002042  2BE0               	incf	___lldiv@counter& (0+255),f,b
  5326  002044                     l3907:
  5327                           
  5328                           ; BSR set to: 0
  5329  002044  0100               	movlb	0	; () banked
  5330  002046  AFDB               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5331  002048  D7F5               	goto	l3905
  5332  00204A                     l3909:
  5333                           
  5334                           ; BSR set to: 0
  5335  00204A  0100               	movlb	0	; () banked
  5336  00204C  90D8               	bcf	status,0,c
  5337  00204E  37DC               	rlcf	___lldiv@quotient& (0+255),f,b
  5338  002050  37DD               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5339  002052  37DE               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5340  002054  37DF               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5341                           
  5342                           ; BSR set to: 0
  5343  002056  0100               	movlb	0	; () banked
  5344  002058  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5345  00205A  0100               	movlb	0	; () banked
  5346  00205C  5DD4               	subwf	___lldiv@dividend& (0+255),w,b
  5347  00205E  0100               	movlb	0	; () banked
  5348  002060  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5349  002062  0100               	movlb	0	; () banked
  5350  002064  59D5               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5351  002066  0100               	movlb	0	; () banked
  5352  002068  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5353  00206A  0100               	movlb	0	; () banked
  5354  00206C  59D6               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5355  00206E  0100               	movlb	0	; () banked
  5356  002070  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5357  002072  0100               	movlb	0	; () banked
  5358  002074  59D7               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5359  002076  A0D8               	btfss	status,0,c
  5360  002078  D012               	goto	l3917
  5361                           
  5362                           ; BSR set to: 0
  5363  00207A  0100               	movlb	0	; () banked
  5364  00207C  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5365  00207E  0100               	movlb	0	; () banked
  5366  002080  5FD4               	subwf	___lldiv@dividend& (0+255),f,b
  5367  002082  0100               	movlb	0	; () banked
  5368  002084  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5369  002086  0100               	movlb	0	; () banked
  5370  002088  5BD5               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5371  00208A  0100               	movlb	0	; () banked
  5372  00208C  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5373  00208E  0100               	movlb	0	; () banked
  5374  002090  5BD6               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5375  002092  0100               	movlb	0	; () banked
  5376  002094  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5377  002096  0100               	movlb	0	; () banked
  5378  002098  5BD7               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5379                           
  5380                           ; BSR set to: 0
  5381  00209A  0100               	movlb	0	; () banked
  5382  00209C  81DC               	bsf	___lldiv@quotient& (0+255),0,b
  5383  00209E                     l3917:
  5384                           
  5385                           ; BSR set to: 0
  5386  00209E  0100               	movlb	0	; () banked
  5387  0020A0  90D8               	bcf	status,0,c
  5388  0020A2  33DB               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5389  0020A4  33DA               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5390  0020A6  33D9               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5391  0020A8  33D8               	rrcf	___lldiv@divisor& (0+255),f,b
  5392                           
  5393                           ; BSR set to: 0
  5394  0020AA  0100               	movlb	0	; () banked
  5395  0020AC  2FE0               	decfsz	___lldiv@counter& (0+255),f,b
  5396  0020AE  D7CD               	goto	l3909
  5397  0020B0                     l842:
  5398                           
  5399                           ; BSR set to: 0
  5400  0020B0  C0DC  F0D4         	movff	___lldiv@quotient,?___lldiv
  5401  0020B4  C0DD  F0D5         	movff	___lldiv@quotient+1,?___lldiv+1
  5402  0020B8  C0DE  F0D6         	movff	___lldiv@quotient+2,?___lldiv+2
  5403  0020BC  C0DF  F0D7         	movff	___lldiv@quotient+3,?___lldiv+3
  5404                           
  5405                           ; BSR set to: 0
  5406  0020C0  0012               	return		;funcret
  5407  0020C2                     __end_of___lldiv:
  5408                           	opt stack 0
  5409                           tblptru	equ	0xFF8
  5410                           tblptrh	equ	0xFF7
  5411                           tblptrl	equ	0xFF6
  5412                           tablat	equ	0xFF5
  5413                           prodh	equ	0xFF4
  5414                           prodl	equ	0xFF3
  5415                           intcon	equ	0xFF2
  5416                           intcon2	equ	0xFF1
  5417                           intcon3	equ	0xFF0
  5418                           postinc0	equ	0xFEE
  5419                           wreg	equ	0xFE8
  5420                           indf2	equ	0xFDF
  5421                           postinc2	equ	0xFDE
  5422                           postdec2	equ	0xFDD
  5423                           fsr2h	equ	0xFDA
  5424                           fsr2l	equ	0xFD9
  5425                           status	equ	0xFD8
  5426                           
  5427 ;; *************** function _I2C_ColorSens_Init *****************
  5428 ;; Defined at:
  5429 ;;		line 53 in file "I2C.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;		None
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;		None
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  1    wreg      void 
  5436 ;; Registers used:
  5437 ;;		wreg, status,2, status,0, cstack
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5447 ;;Total ram usage:        0 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    9
  5450 ;; This function calls:
  5451 ;;		_I2C_Master_Start
  5452 ;;		_I2C_Master_Stop
  5453 ;;		_I2C_Master_Write
  5454 ;; This function is called by:
  5455 ;;		_main
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           	psect	text23
  5460  002706                     __ptext23:
  5461                           	opt stack 0
  5462  002706                     _I2C_ColorSens_Init:
  5463                           	opt stack 21
  5464                           
  5465                           ;I2C.c: 54: I2C_Master_Start();
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;incstack = 0
  5469  002706  EC74  F016         	call	_I2C_Master_Start	;wreg free
  5470                           
  5471                           ;I2C.c: 55: I2C_Master_Write(0b01010010);
  5472  00270A  0E00               	movlw	0
  5473  00270C  0100               	movlb	0	; () banked
  5474  00270E  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5475  002710  0E52               	movlw	82
  5476  002712  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5477  002714  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  5478                           
  5479                           ;I2C.c: 56: I2C_Master_Write(0b10000000);
  5480  002718  0E00               	movlw	0
  5481  00271A  0100               	movlb	0	; () banked
  5482  00271C  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5483  00271E  0E80               	movlw	128
  5484  002720  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5485  002722  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  5486                           
  5487                           ;I2C.c: 57: I2C_Master_Write(0b00000011);
  5488  002726  0E00               	movlw	0
  5489  002728  0100               	movlb	0	; () banked
  5490  00272A  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5491  00272C  0E03               	movlw	3
  5492  00272E  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5493  002730  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  5494                           
  5495                           ;I2C.c: 58: I2C_Master_Stop();
  5496  002734  EC70  F016         	call	_I2C_Master_Stop	;wreg free
  5497                           
  5498                           ;I2C.c: 59: I2C_Master_Start();
  5499  002738  EC74  F016         	call	_I2C_Master_Start	;wreg free
  5500                           
  5501                           ;I2C.c: 60: I2C_Master_Write(0b01010010);
  5502  00273C  0E00               	movlw	0
  5503  00273E  0100               	movlb	0	; () banked
  5504  002740  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5505  002742  0E52               	movlw	82
  5506  002744  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5507  002746  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  5508                           
  5509                           ;I2C.c: 61: I2C_Master_Write(0b10001111);
  5510  00274A  0E00               	movlw	0
  5511  00274C  0100               	movlb	0	; () banked
  5512  00274E  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5513  002750  0E8F               	movlw	143
  5514  002752  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5515  002754  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  5516                           
  5517                           ;I2C.c: 62: I2C_Master_Write(0b00000001);
  5518  002758  0E00               	movlw	0
  5519  00275A  0100               	movlb	0	; () banked
  5520  00275C  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5521  00275E  0E01               	movlw	1
  5522  002760  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5523  002762  EC5E  F016         	call	_I2C_Master_Write	;wreg free
  5524                           
  5525                           ;I2C.c: 63: I2C_Master_Stop();
  5526  002766  EC70  F016         	call	_I2C_Master_Stop	;wreg free
  5527  00276A  0012               	return		;funcret
  5528  00276C                     __end_of_I2C_ColorSens_Init:
  5529                           	opt stack 0
  5530                           tblptru	equ	0xFF8
  5531                           tblptrh	equ	0xFF7
  5532                           tblptrl	equ	0xFF6
  5533                           tablat	equ	0xFF5
  5534                           prodh	equ	0xFF4
  5535                           prodl	equ	0xFF3
  5536                           intcon	equ	0xFF2
  5537                           intcon2	equ	0xFF1
  5538                           intcon3	equ	0xFF0
  5539                           postinc0	equ	0xFEE
  5540                           wreg	equ	0xFE8
  5541                           indf2	equ	0xFDF
  5542                           postinc2	equ	0xFDE
  5543                           postdec2	equ	0xFDD
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function _I2C_Master_Write *****************
  5549 ;; Defined at:
  5550 ;;		line 47 in file "I2C.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;  d               2   17[BANK0 ] unsigned int 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, status,2, status,0, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;Total ram usage:        2 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    8
  5571 ;; This function calls:
  5572 ;;		_I2C_Master_Wait
  5573 ;; This function is called by:
  5574 ;;		_I2C_ColorSens_Init
  5575 ;;		_date_time
  5576 ;;		_read_colorsensor
  5577 ;;		_set_time
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           	psect	text24
  5582  002CBC                     __ptext24:
  5583                           	opt stack 0
  5584  002CBC                     _I2C_Master_Write:
  5585                           	opt stack 20
  5586                           
  5587                           ;I2C.c: 49: I2C_Master_Wait();
  5588                           
  5589                           ;incstack = 0
  5590  002CBC  EC2F  F016         	call	_I2C_Master_Wait	;wreg free
  5591                           
  5592                           ;I2C.c: 50: SSPBUF = d;
  5593  002CC0  C0D5  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5594  002CC4  0012               	return		;funcret
  5595  002CC6                     __end_of_I2C_Master_Write:
  5596                           	opt stack 0
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           prodh	equ	0xFF4
  5602                           prodl	equ	0xFF3
  5603                           intcon	equ	0xFF2
  5604                           intcon2	equ	0xFF1
  5605                           intcon3	equ	0xFF0
  5606                           postinc0	equ	0xFEE
  5607                           wreg	equ	0xFE8
  5608                           indf2	equ	0xFDF
  5609                           postinc2	equ	0xFDE
  5610                           postdec2	equ	0xFDD
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615 ;; *************** function _I2C_Master_Stop *****************
  5616 ;; Defined at:
  5617 ;;		line 41 in file "I2C.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;		None
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;		None
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      void 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2, status,0, cstack
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;Total ram usage:        0 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    8
  5638 ;; This function calls:
  5639 ;;		_I2C_Master_Wait
  5640 ;; This function is called by:
  5641 ;;		_I2C_ColorSens_Init
  5642 ;;		_date_time
  5643 ;;		_read_colorsensor
  5644 ;;		_set_time
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text25
  5649  002CE0                     __ptext25:
  5650                           	opt stack 0
  5651  002CE0                     _I2C_Master_Stop:
  5652                           	opt stack 20
  5653                           
  5654                           ;I2C.c: 43: I2C_Master_Wait();
  5655                           
  5656                           ;incstack = 0
  5657  002CE0  EC2F  F016         	call	_I2C_Master_Wait	;wreg free
  5658                           
  5659                           ;I2C.c: 44: PEN = 1;
  5660  002CE4  84C5               	bsf	4037,2,c	;volatile
  5661  002CE6  0012               	return		;funcret
  5662  002CE8                     __end_of_I2C_Master_Stop:
  5663                           	opt stack 0
  5664                           tblptru	equ	0xFF8
  5665                           tblptrh	equ	0xFF7
  5666                           tblptrl	equ	0xFF6
  5667                           tablat	equ	0xFF5
  5668                           prodh	equ	0xFF4
  5669                           prodl	equ	0xFF3
  5670                           intcon	equ	0xFF2
  5671                           intcon2	equ	0xFF1
  5672                           intcon3	equ	0xFF0
  5673                           postinc0	equ	0xFEE
  5674                           wreg	equ	0xFE8
  5675                           indf2	equ	0xFDF
  5676                           postinc2	equ	0xFDE
  5677                           postdec2	equ	0xFDD
  5678                           fsr2h	equ	0xFDA
  5679                           fsr2l	equ	0xFD9
  5680                           status	equ	0xFD8
  5681                           
  5682 ;; *************** function _I2C_Master_Start *****************
  5683 ;; Defined at:
  5684 ;;		line 29 in file "I2C.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;		None
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;		None
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  1    wreg      void 
  5691 ;; Registers used:
  5692 ;;		wreg, status,2, status,0, cstack
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 0/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;Total ram usage:        0 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; Hardware stack levels required when called:    8
  5705 ;; This function calls:
  5706 ;;		_I2C_Master_Wait
  5707 ;; This function is called by:
  5708 ;;		_I2C_ColorSens_Init
  5709 ;;		_date_time
  5710 ;;		_read_colorsensor
  5711 ;;		_set_time
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text26
  5716  002CE8                     __ptext26:
  5717                           	opt stack 0
  5718  002CE8                     _I2C_Master_Start:
  5719                           	opt stack 20
  5720                           
  5721                           ;I2C.c: 31: I2C_Master_Wait();
  5722                           
  5723                           ;incstack = 0
  5724  002CE8  EC2F  F016         	call	_I2C_Master_Wait	;wreg free
  5725                           
  5726                           ;I2C.c: 32: SEN = 1;
  5727  002CEC  80C5               	bsf	4037,0,c	;volatile
  5728  002CEE  0012               	return		;funcret
  5729  002CF0                     __end_of_I2C_Master_Start:
  5730                           	opt stack 0
  5731                           tblptru	equ	0xFF8
  5732                           tblptrh	equ	0xFF7
  5733                           tblptrl	equ	0xFF6
  5734                           tablat	equ	0xFF5
  5735                           prodh	equ	0xFF4
  5736                           prodl	equ	0xFF3
  5737                           intcon	equ	0xFF2
  5738                           intcon2	equ	0xFF1
  5739                           intcon3	equ	0xFF0
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function _I2C_Master_Wait *****************
  5750 ;; Defined at:
  5751 ;;		line 24 in file "I2C.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;Total ram usage:        1 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    7
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_I2C_Master_Start
  5776 ;;		_I2C_Master_RepeatedStart
  5777 ;;		_I2C_Master_Stop
  5778 ;;		_I2C_Master_Write
  5779 ;;		_I2C_Master_Read
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text27
  5784  002C5E                     __ptext27:
  5785                           	opt stack 0
  5786  002C5E                     _I2C_Master_Wait:
  5787                           	opt stack 20
  5788  002C5E                     l34:
  5789  002C5E  B4C7               	btfsc	4039,2,c	;volatile
  5790  002C60  D7FE               	goto	l34
  5791  002C62  CFC5 F0D4          	movff	4037,??_I2C_Master_Wait	;volatile
  5792  002C66  0E1F               	movlw	31
  5793  002C68  0100               	movlb	0	; () banked
  5794  002C6A  17D4               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5795  002C6C  B4D8               	btfsc	status,2,c
  5796  002C6E  0012               	return	
  5797  002C70  D7F6               	goto	l34
  5798  002C72                     __end_of_I2C_Master_Wait:
  5799                           	opt stack 0
  5800                           tblptru	equ	0xFF8
  5801                           tblptrh	equ	0xFF7
  5802                           tblptrl	equ	0xFF6
  5803                           tablat	equ	0xFF5
  5804                           prodh	equ	0xFF4
  5805                           prodl	equ	0xFF3
  5806                           intcon	equ	0xFF2
  5807                           intcon2	equ	0xFF1
  5808                           intcon3	equ	0xFF0
  5809                           postinc0	equ	0xFEE
  5810                           wreg	equ	0xFE8
  5811                           indf2	equ	0xFDF
  5812                           postinc2	equ	0xFDE
  5813                           postdec2	equ	0xFDD
  5814                           fsr2h	equ	0xFDA
  5815                           fsr2l	equ	0xFD9
  5816                           status	equ	0xFD8
  5817                           
  5818 ;; *************** function _isr *****************
  5819 ;; Defined at:
  5820 ;;		line 164 in file "main.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;		None
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;  i               1  114[COMRAM] unsigned char 
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      void 
  5827 ;; Registers used:
  5828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;Total ram usage:       19 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    6
  5841 ;; This function calls:
  5842 ;;		_dec_to_hex
  5843 ;;		_read_time
  5844 ;;		_servo_rotate0
  5845 ;;		_servo_rotate1
  5846 ;;		_servo_rotate2
  5847 ;;		i2___wmul
  5848 ;;		i2_lcdInst
  5849 ;;		i2_printf
  5850 ;;		i2_read_colorsensor
  5851 ;; This function is called by:
  5852 ;;		Interrupt level 2
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           	psect	intcode
  5857  000008                     __pintcode:
  5858                           	opt stack 0
  5859  000008                     _isr:
  5860                           	opt stack 20
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;incstack = 0
  5864  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5865  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  5866                           tblptru	equ	0xFF8
  5867                           tblptrh	equ	0xFF7
  5868                           tblptrl	equ	0xFF6
  5869                           tablat	equ	0xFF5
  5870                           prodh	equ	0xFF4
  5871                           prodl	equ	0xFF3
  5872                           intcon	equ	0xFF2
  5873                           intcon2	equ	0xFF1
  5874                           intcon3	equ	0xFF0
  5875                           postinc0	equ	0xFEE
  5876                           wreg	equ	0xFE8
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884                           	psect	intcode_body
  5885  000012                     __pintcode_body:
  5886                           	opt stack 20
  5887  000012                     int_func:
  5888                           	opt stack 20
  5889  000012  0006               	pop		; remove dummy address from shadow register refresh
  5890  000014  CFFA F0C6          	movff	pclath,??_isr+2
  5891  000018  CFFB F0C7          	movff	pclatu,??_isr+3
  5892  00001C  CFE9 F0C8          	movff	fsr0l,??_isr+4
  5893  000020  CFEA F0C9          	movff	fsr0h,??_isr+5
  5894  000024  CFE1 F0CA          	movff	fsr1l,??_isr+6
  5895  000028  CFE2 F0CB          	movff	fsr1h,??_isr+7
  5896  00002C  CFD9 F0CC          	movff	fsr2l,??_isr+8
  5897  000030  CFDA F0CD          	movff	fsr2h,??_isr+9
  5898  000034  CFF3 F0CE          	movff	prodl,??_isr+10
  5899  000038  CFF4 F0CF          	movff	prodh,??_isr+11
  5900  00003C  CFF6 F0D0          	movff	tblptrl,??_isr+12
  5901  000040  CFF7 F0D1          	movff	tblptrh,??_isr+13
  5902  000044  CFF8 F0D2          	movff	tblptru,??_isr+14
  5903  000048  CFF5 F0D3          	movff	tablat,??_isr+15
  5904                           
  5905                           ;main.c: 165: if (INT1IF) {
  5906  00004C  B0F0               	btfsc	intcon3,0,c	;volatile
  5907  00004E  D0EC               	goto	i2l4567
  5908  000050  D10C               	goto	i2l271
  5909  000052                     i2l273:
  5910                           
  5911                           ;main.c: 168: bottle_count_disp = -1;
  5912  000052  0100               	movlb	0	; () banked
  5913  000054  69EE               	setf	_bottle_count_disp& (0+255),b
  5914  000056  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;main.c: 169: curr_state = STANDBY;
  5918  000058  0E00               	movlw	0
  5919  00005A  D0D5               	goto	L7
  5920  00005C                     i2l275:
  5921                           
  5922                           ;main.c: 172: LATAbits.LATA2 = 1;
  5923  00005C  8489               	bsf	3977,2,c	;volatile
  5924                           
  5925                           ;main.c: 173: INT0IE = 1;
  5926  00005E  88F2               	bsf	intcon,4,c	;volatile
  5927                           
  5928                           ;main.c: 174: INT2IE = 1;
  5929  000060  88F0               	bsf	intcon3,4,c	;volatile
  5930                           
  5931                           ;main.c: 175: TMR0IE = 1;
  5932  000062  8AF2               	bsf	intcon,5,c	;volatile
  5933                           
  5934                           ;main.c: 176: TMR0ON = 1;
  5935  000064  8ED5               	bsf	4053,7,c	;volatile
  5936                           
  5937                           ;main.c: 177: TMR0 = 0;
  5938  000066  0E00               	movlw	0
  5939  000068  6ED7               	movwf	4055,c	;volatile
  5940  00006A  0E00               	movlw	0
  5941  00006C  6ED6               	movwf	4054,c	;volatile
  5942                           
  5943                           ;main.c: 179: read_time();
  5944  00006E  EC4F  F013         	call	_read_time	;wreg free
  5945                           
  5946                           ;main.c: 180: start_time[1] = time[1];
  5947  000072  C097  F0B6         	movff	_time+1,_start_time+1
  5948                           
  5949                           ;main.c: 181: start_time[0] = time[0];
  5950  000076  C096  F0B5         	movff	_time,_start_time
  5951                           
  5952                           ;main.c: 183: bottlequeue_head = bottlequeue_tail = 0;
  5953  00007A  0E00               	movlw	0
  5954  00007C  0100               	movlb	0	; () banked
  5955  00007E  6FA0               	movwf	(_bottlequeue_tail+1)& (0+255),b
  5956  000080  0E00               	movlw	0
  5957  000082  6F9F               	movwf	_bottlequeue_tail& (0+255),b
  5958  000084  C09F  F09D         	movff	_bottlequeue_tail,_bottlequeue_head
  5959  000088  C0A0  F09E         	movff	_bottlequeue_tail+1,_bottlequeue_head+1
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;main.c: 185: lcdInst(0b00000001);
  5963  00008C  0E01               	movlw	1
  5964  00008E  EC58  F016         	call	i2_lcdInst
  5965                           
  5966                           ;main.c: 186: bottle_count_disp = -1;
  5967  000092  0100               	movlb	0	; () banked
  5968  000094  69EE               	setf	_bottle_count_disp& (0+255),b
  5969  000096  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;main.c: 187: curr_state = OPERATION;
  5973  000098  0E02               	movlw	2
  5974  00009A  D0B5               	goto	L7
  5975  00009C                     i2l4513:
  5976                           
  5977                           ;main.c: 190: bottle_count_disp += 1;
  5978  00009C  0100               	movlb	0	; () banked
  5979  00009E  4BEE               	infsnz	_bottle_count_disp& (0+255),f,b
  5980  0000A0  2BEF               	incf	(_bottle_count_disp+1)& (0+255),f,b
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;main.c: 191: curr_state = BOTTLECOUNT;
  5984  0000A2  0E05               	movlw	5
  5985  0000A4  0100               	movlb	0	; () banked
  5986  0000A6  6FC3               	movwf	_curr_state& (0+255),b
  5987  0000A8                     i2l4517:
  5988  0000A8  0E1F               	movlw	31
  5989  0000AA  1881               	xorwf	3969,w,c	;volatile
  5990  0000AC  A4D8               	btfss	status,2,c
  5991  0000AE  D0DB               	goto	i2l274
  5992  0000B0  D7FB               	goto	i2l4517
  5993  0000B2                     i2l4519:
  5994                           
  5995                           ;main.c: 195: operation_time = etime - stime;
  5996  0000B2  C0B7  F0C4         	movff	_stime,??_isr
  5997  0000B6  C0B8  F0C5         	movff	_stime+1,??_isr+1
  5998  0000BA  0100               	movlb	0	; () banked
  5999  0000BC  1FC4               	comf	??_isr& (0+255),f,b
  6000  0000BE  1FC5               	comf	(??_isr+1)& (0+255),f,b
  6001  0000C0  4BC4               	infsnz	??_isr& (0+255),f,b
  6002  0000C2  2BC5               	incf	(??_isr+1)& (0+255),f,b
  6003  0000C4  0100               	movlb	0	; () banked
  6004  0000C6  51AD               	movf	_etime& (0+255),w,b
  6005  0000C8  0100               	movlb	0	; () banked
  6006  0000CA  25C4               	addwf	??_isr& (0+255),w,b
  6007  0000CC  0100               	movlb	0	; () banked
  6008  0000CE  6FB3               	movwf	_operation_time& (0+255),b
  6009  0000D0  0100               	movlb	0	; () banked
  6010  0000D2  51AE               	movf	(_etime+1)& (0+255),w,b
  6011  0000D4  0100               	movlb	0	; () banked
  6012  0000D6  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6013  0000D8  0100               	movlb	0	; () banked
  6014  0000DA  6FB4               	movwf	(_operation_time+1)& (0+255),b
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;main.c: 196: bottle_count_disp = -1;
  6018  0000DC  0100               	movlb	0	; () banked
  6019  0000DE  69EE               	setf	_bottle_count_disp& (0+255),b
  6020  0000E0  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;main.c: 197: curr_state = BOTTLETIME;
  6024  0000E2  0E06               	movlw	6
  6025  0000E4  D090               	goto	L7
  6026  0000E6                     i2l281:
  6027                           
  6028                           ;main.c: 200: bottle_count_disp = -1;
  6029  0000E6  0100               	movlb	0	; () banked
  6030  0000E8  69EE               	setf	_bottle_count_disp& (0+255),b
  6031  0000EA  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;main.c: 201: curr_state = DATETIME;
  6035  0000EC  0E04               	movlw	4
  6036  0000EE  D08B               	goto	L7
  6037  0000F0                     i2l282:
  6038                           
  6039                           ;main.c: 204: LATAbits.LATA2 = 0;
  6040  0000F0  9489               	bcf	3977,2,c	;volatile
  6041                           
  6042                           ;main.c: 205: INT0IE = 0;
  6043  0000F2  98F2               	bcf	intcon,4,c	;volatile
  6044                           
  6045                           ;main.c: 206: INT2IE = 0;
  6046  0000F4  98F0               	bcf	intcon3,4,c	;volatile
  6047                           
  6048                           ;main.c: 207: TMR0IE = 0;
  6049  0000F6  9AF2               	bcf	intcon,5,c	;volatile
  6050                           
  6051                           ;main.c: 208: TMR0ON = 0;
  6052  0000F8  9ED5               	bcf	4053,7,c	;volatile
  6053                           
  6054                           ;main.c: 210: read_time();
  6055  0000FA  EC4F  F013         	call	_read_time	;wreg free
  6056                           
  6057                           ;main.c: 211: end_time[1] = time[1];
  6058  0000FE  C097  F0A2         	movff	_time+1,_end_time+1
  6059                           
  6060                           ;main.c: 212: end_time[0] = time[0];
  6061  000102  C096  F0A1         	movff	_time,_end_time
  6062                           
  6063                           ;main.c: 213: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6064  000106  C0B6  F063         	movff	_start_time+1,dec_to_hex@num
  6065  00010A  6A64               	clrf	dec_to_hex@num+1,c
  6066  00010C  ECCD  F00A         	call	_dec_to_hex	;wreg free
  6067  000110  C063  F074         	movff	?_dec_to_hex,_isr$1359
  6068  000114  C064  F075         	movff	?_dec_to_hex+1,_isr$1359+1
  6069                           
  6070                           ;main.c: 213: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6071  000118  C074  F001         	movff	_isr$1359,i2___wmul@multiplier
  6072  00011C  C075  F002         	movff	_isr$1359+1,i2___wmul@multiplier+1
  6073  000120  0E00               	movlw	0
  6074  000122  6E04               	movwf	i2___wmul@multiplicand+1,c
  6075  000124  0E3C               	movlw	60
  6076  000126  6E03               	movwf	i2___wmul@multiplicand,c
  6077  000128  ECDE  F015         	call	i2___wmul	;wreg free
  6078  00012C  C001  F0C4         	movff	?i2___wmul,??_isr
  6079  000130  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6080  000134  C0B5  F063         	movff	_start_time,dec_to_hex@num
  6081  000138  6A64               	clrf	dec_to_hex@num+1,c
  6082  00013A  ECCD  F00A         	call	_dec_to_hex	;wreg free
  6083  00013E  5063               	movf	?_dec_to_hex,w,c
  6084  000140  0100               	movlb	0	; () banked
  6085  000142  25C4               	addwf	??_isr& (0+255),w,b
  6086  000144  0100               	movlb	0	; () banked
  6087  000146  6FB7               	movwf	_stime& (0+255),b
  6088  000148  5064               	movf	?_dec_to_hex+1,w,c
  6089  00014A  0100               	movlb	0	; () banked
  6090  00014C  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6091  00014E  0100               	movlb	0	; () banked
  6092  000150  6FB8               	movwf	(_stime+1)& (0+255),b
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;main.c: 214: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6096  000152  C0A2  F063         	movff	_end_time+1,dec_to_hex@num
  6097  000156  6A64               	clrf	dec_to_hex@num+1,c
  6098  000158  ECCD  F00A         	call	_dec_to_hex	;wreg free
  6099  00015C  C063  F074         	movff	?_dec_to_hex,_isr$1359
  6100  000160  C064  F075         	movff	?_dec_to_hex+1,_isr$1359+1
  6101                           
  6102                           ;main.c: 214: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6103  000164  C074  F001         	movff	_isr$1359,i2___wmul@multiplier
  6104  000168  C075  F002         	movff	_isr$1359+1,i2___wmul@multiplier+1
  6105  00016C  0E00               	movlw	0
  6106  00016E  6E04               	movwf	i2___wmul@multiplicand+1,c
  6107  000170  0E3C               	movlw	60
  6108  000172  6E03               	movwf	i2___wmul@multiplicand,c
  6109  000174  ECDE  F015         	call	i2___wmul	;wreg free
  6110  000178  C001  F0C4         	movff	?i2___wmul,??_isr
  6111  00017C  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6112  000180  C0A1  F063         	movff	_end_time,dec_to_hex@num
  6113  000184  6A64               	clrf	dec_to_hex@num+1,c
  6114  000186  ECCD  F00A         	call	_dec_to_hex	;wreg free
  6115  00018A  5063               	movf	?_dec_to_hex,w,c
  6116  00018C  0100               	movlb	0	; () banked
  6117  00018E  25C4               	addwf	??_isr& (0+255),w,b
  6118  000190  0100               	movlb	0	; () banked
  6119  000192  6FAD               	movwf	_etime& (0+255),b
  6120  000194  5064               	movf	?_dec_to_hex+1,w,c
  6121  000196  0100               	movlb	0	; () banked
  6122  000198  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6123  00019A  0100               	movlb	0	; () banked
  6124  00019C  6FAE               	movwf	(_etime+1)& (0+255),b
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;main.c: 215: lcdInst(0b00000001);
  6128  00019E  0E01               	movlw	1
  6129  0001A0  EC58  F016         	call	i2_lcdInst
  6130                           
  6131                           ;main.c: 216: bottle_count_disp = -1;
  6132  0001A4  0100               	movlb	0	; () banked
  6133  0001A6  69EE               	setf	_bottle_count_disp& (0+255),b
  6134  0001A8  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;main.c: 217: curr_state = OPERATIONEND;
  6138  0001AA  0E03               	movlw	3
  6139  0001AC  D02C               	goto	L7
  6140  0001AE                     i2l4547:
  6141                           
  6142                           ;main.c: 220: read_colorsensor();
  6143  0001AE  ECA4  F00F         	call	i2_read_colorsensor	;wreg free
  6144                           
  6145                           ;main.c: 221: lcdInst(0b10000000);
  6146  0001B2  0E80               	movlw	128
  6147  0001B4  EC58  F016         	call	i2_lcdInst
  6148                           
  6149                           ;main.c: 222: printf("C%u R%u                ", color[0], color[1]);
  6150  0001B8  0E67               	movlw	low STR_1
  6151  0001BA  6E0D               	movwf	i2printf@f,c
  6152  0001BC  0EFE               	movlw	high STR_1
  6153  0001BE  6E0E               	movwf	i2printf@f+1,c
  6154  0001C0  C076  F00F         	movff	_color,?i2_printf+2
  6155  0001C4  C077  F010         	movff	_color+1,?i2_printf+3
  6156  0001C8  C078  F011         	movff	_color+2,?i2_printf+4
  6157  0001CC  C079  F012         	movff	_color+3,?i2_printf+5
  6158  0001D0  EC59  F005         	call	i2_printf	;wreg free
  6159                           
  6160                           ;main.c: 223: lcdInst(0b11000000);
  6161  0001D4  0EC0               	movlw	192
  6162  0001D6  EC58  F016         	call	i2_lcdInst
  6163                           
  6164                           ;main.c: 224: printf("G%u B%u                ", color[2], color[3]);
  6165  0001DA  0E4F               	movlw	low STR_2
  6166  0001DC  6E0D               	movwf	i2printf@f,c
  6167  0001DE  0EFE               	movlw	high STR_2
  6168  0001E0  6E0E               	movwf	i2printf@f+1,c
  6169  0001E2  C07A  F00F         	movff	_color+4,?i2_printf+2
  6170  0001E6  C07B  F010         	movff	_color+5,?i2_printf+3
  6171  0001EA  C07C  F011         	movff	_color+6,?i2_printf+4
  6172  0001EE  C07D  F012         	movff	_color+7,?i2_printf+5
  6173  0001F2  EC59  F005         	call	i2_printf	;wreg free
  6174                           
  6175                           ;main.c: 225: break;
  6176  0001F6  D037               	goto	i2l274
  6177  0001F8                     i2l284:
  6178                           
  6179                           ;main.c: 227: LATAbits.LATA2 = 0;
  6180  0001F8  9489               	bcf	3977,2,c	;volatile
  6181                           
  6182                           ;main.c: 228: (INTCONbits.GIE = 0);
  6183  0001FA  9EF2               	bcf	intcon,7,c	;volatile
  6184                           
  6185                           ;main.c: 229: TMR0ON = 0;
  6186  0001FC  9ED5               	bcf	4053,7,c	;volatile
  6187                           
  6188                           ;main.c: 230: lcdInst(0b00000001);
  6189  0001FE  0E01               	movlw	1
  6190  000200  EC58  F016         	call	i2_lcdInst
  6191                           
  6192                           ;main.c: 231: curr_state = EMERGENCYSTOP;
  6193  000204  0E01               	movlw	1
  6194  000206                     L7:
  6195  000206  0100               	movlb	0	; () banked
  6196  000208  6FC3               	movwf	_curr_state& (0+255),b
  6197                           
  6198                           ;main.c: 232: break;
  6199  00020A  D02D               	goto	i2l274
  6200  00020C                     i2l4561:
  6201                           
  6202                           ;main.c: 234: servo_rotate0(1);
  6203  00020C  0E00               	movlw	0
  6204  00020E  6E02               	movwf	servo_rotate0@degree+1,c
  6205  000210  0E01               	movlw	1
  6206  000212  6E01               	movwf	servo_rotate0@degree,c
  6207  000214  ECBD  F011         	call	_servo_rotate0	;wreg free
  6208                           
  6209                           ;main.c: 235: break;
  6210  000218  D026               	goto	i2l274
  6211  00021A                     i2l4563:
  6212                           
  6213                           ;main.c: 237: servo_rotate0(2);
  6214  00021A  0E00               	movlw	0
  6215  00021C  6E02               	movwf	servo_rotate0@degree+1,c
  6216  00021E  0E02               	movlw	2
  6217  000220  6E01               	movwf	servo_rotate0@degree,c
  6218  000222  ECBD  F011         	call	_servo_rotate0	;wreg free
  6219                           
  6220                           ;main.c: 239: }
  6221                           
  6222                           ;main.c: 238: break;
  6223  000226  D01F               	goto	i2l274
  6224  000228                     i2l4567:
  6225  000228  5081               	movf	3969,w,c	;volatile
  6226                           
  6227                           ; Switch size 1, requested type "space"
  6228                           ; Number of cases is 10, Range of values is 15 to 239
  6229                           ; switch strategies available:
  6230                           ; Name         Instructions Cycles
  6231                           ; simple_byte           31    16 (average)
  6232                           ;	Chosen strategy is simple_byte
  6233  00022A  0A0F               	xorlw	15	; case 15
  6234  00022C  B4D8               	btfsc	status,2,c
  6235  00022E  D716               	goto	i2l275
  6236  000230  0A10               	xorlw	16	; case 31
  6237  000232  B4D8               	btfsc	status,2,c
  6238  000234  D733               	goto	i2l4513
  6239  000236  0A30               	xorlw	48	; case 47
  6240  000238  B4D8               	btfsc	status,2,c
  6241  00023A  D73B               	goto	i2l4519
  6242  00023C  0A10               	xorlw	16	; case 63
  6243  00023E  B4D8               	btfsc	status,2,c
  6244  000240  D752               	goto	i2l281
  6245  000242  0A70               	xorlw	112	; case 79
  6246  000244  B4D8               	btfsc	status,2,c
  6247  000246  D754               	goto	i2l282
  6248  000248  0A10               	xorlw	16	; case 95
  6249  00024A  B4D8               	btfsc	status,2,c
  6250  00024C  D7B0               	goto	i2l4547
  6251  00024E  0A20               	xorlw	32	; case 127
  6252  000250  B4D8               	btfsc	status,2,c
  6253  000252  D7DC               	goto	i2l4561
  6254  000254  0AC0               	xorlw	192	; case 191
  6255  000256  B4D8               	btfsc	status,2,c
  6256  000258  D7E0               	goto	i2l4563
  6257  00025A  0A70               	xorlw	112	; case 207
  6258  00025C  B4D8               	btfsc	status,2,c
  6259  00025E  D7CC               	goto	i2l284
  6260  000260  0A20               	xorlw	32	; case 239
  6261  000262  B4D8               	btfsc	status,2,c
  6262  000264  D6F6               	goto	i2l273
  6263  000266                     i2l274:
  6264                           
  6265                           ;main.c: 240: INT1IF = 0;
  6266  000266  90F0               	bcf	intcon3,0,c	;volatile
  6267                           
  6268                           ;main.c: 241: }
  6269  000268  D21B               	goto	i2l319
  6270  00026A                     i2l271:
  6271                           
  6272                           ;main.c: 242: else if (INT0IF){
  6273  00026A  A2F2               	btfss	intcon,1,c	;volatile
  6274  00026C  D0DF               	goto	i2l288
  6275                           
  6276                           ;main.c: 243: if(PORTAbits.RA3){
  6277  00026E  A680               	btfss	3968,3,c	;volatile
  6278  000270  D0DB               	goto	i2l4623
  6279                           
  6280                           ;main.c: 244: read_colorsensor();
  6281  000272  ECA4  F00F         	call	i2_read_colorsensor	;wreg free
  6282                           
  6283                           ;main.c: 245: if (color[0]>10000 && color[1]>10000 && color[2]>10000 && color[3]>10000) 
      +                          bottlequeue[bottlequeue_tail] = 2;
  6284  000276  BE77               	btfsc	_color+1,7,c
  6285  000278  D028               	goto	i2l4583
  6286  00027A  0E11               	movlw	17
  6287  00027C  5C76               	subwf	_color,w,c
  6288  00027E  0E27               	movlw	39
  6289  000280  5877               	subwfb	_color+1,w,c
  6290  000282  B0D8               	btfsc	status,0,c
  6291  000284  BE79               	btfsc	_color+3,7,c
  6292  000286  D021               	goto	i2l4583
  6293  000288  0E11               	movlw	17
  6294  00028A  5C78               	subwf	_color+2,w,c
  6295  00028C  0E27               	movlw	39
  6296  00028E  5879               	subwfb	_color+3,w,c
  6297  000290  B0D8               	btfsc	status,0,c
  6298  000292  BE7B               	btfsc	_color+5,7,c
  6299  000294  D01A               	goto	i2l4583
  6300  000296  0E11               	movlw	17
  6301  000298  5C7A               	subwf	_color+4,w,c
  6302  00029A  0E27               	movlw	39
  6303  00029C  587B               	subwfb	_color+5,w,c
  6304  00029E  B0D8               	btfsc	status,0,c
  6305  0002A0  BE7D               	btfsc	_color+7,7,c
  6306  0002A2  D013               	goto	i2l4583
  6307  0002A4  0E11               	movlw	17
  6308  0002A6  5C7C               	subwf	_color+6,w,c
  6309  0002A8  0E27               	movlw	39
  6310  0002AA  587D               	subwfb	_color+7,w,c
  6311  0002AC  A0D8               	btfss	status,0,c
  6312  0002AE  D00D               	goto	i2l4583
  6313  0002B0  90D8               	bcf	status,0,c
  6314  0002B2  0100               	movlb	0	; () banked
  6315  0002B4  359F               	rlcf	_bottlequeue_tail& (0+255),w,b
  6316  0002B6  6ED9               	movwf	fsr2l,c
  6317  0002B8  0100               	movlb	0	; () banked
  6318  0002BA  35A0               	rlcf	(_bottlequeue_tail+1)& (0+255),w,b
  6319  0002BC  6EDA               	movwf	fsr2h,c
  6320  0002BE  0E80               	movlw	low _bottlequeue
  6321  0002C0  26D9               	addwf	fsr2l,f,c
  6322  0002C2  0E00               	movlw	high _bottlequeue
  6323  0002C4  22DA               	addwfc	fsr2h,f,c
  6324  0002C6  0E02               	movlw	2
  6325  0002C8  D083               	goto	L10
  6326  0002CA                     i2l4583:
  6327                           
  6328                           ;main.c: 246: else if (color[0]<3000 && color[1]<1100 && color[2]<1100 && color[3]<1200)
      +                           bottlequeue[bottlequeue_tail] = 4;
  6329  0002CA  BE77               	btfsc	_color+1,7,c
  6330  0002CC  D006               	goto	i2l4585
  6331  0002CE  0EB8               	movlw	184
  6332  0002D0  5C76               	subwf	_color,w,c
  6333  0002D2  0E0B               	movlw	11
  6334  0002D4  5877               	subwfb	_color+1,w,c
  6335  0002D6  B0D8               	btfsc	status,0,c
  6336  0002D8  D025               	goto	i2l4593
  6337  0002DA                     i2l4585:
  6338  0002DA  BE79               	btfsc	_color+3,7,c
  6339  0002DC  D006               	goto	i2l4587
  6340  0002DE  0E4C               	movlw	76
  6341  0002E0  5C78               	subwf	_color+2,w,c
  6342  0002E2  0E04               	movlw	4
  6343  0002E4  5879               	subwfb	_color+3,w,c
  6344  0002E6  B0D8               	btfsc	status,0,c
  6345  0002E8  D01D               	goto	i2l4593
  6346  0002EA                     i2l4587:
  6347  0002EA  BE7B               	btfsc	_color+5,7,c
  6348  0002EC  D006               	goto	i2l4589
  6349  0002EE  0E4C               	movlw	76
  6350  0002F0  5C7A               	subwf	_color+4,w,c
  6351  0002F2  0E04               	movlw	4
  6352  0002F4  587B               	subwfb	_color+5,w,c
  6353  0002F6  B0D8               	btfsc	status,0,c
  6354  0002F8  D015               	goto	i2l4593
  6355  0002FA                     i2l4589:
  6356  0002FA  BE7D               	btfsc	_color+7,7,c
  6357  0002FC  D006               	goto	i2l4591
  6358  0002FE  0EB0               	movlw	176
  6359  000300  5C7C               	subwf	_color+6,w,c
  6360  000302  0E04               	movlw	4
  6361  000304  587D               	subwfb	_color+7,w,c
  6362  000306  B0D8               	btfsc	status,0,c
  6363  000308  D00D               	goto	i2l4593
  6364  00030A                     i2l4591:
  6365  00030A  90D8               	bcf	status,0,c
  6366  00030C  0100               	movlb	0	; () banked
  6367  00030E  359F               	rlcf	_bottlequeue_tail& (0+255),w,b
  6368  000310  6ED9               	movwf	fsr2l,c
  6369  000312  0100               	movlb	0	; () banked
  6370  000314  35A0               	rlcf	(_bottlequeue_tail+1)& (0+255),w,b
  6371  000316  6EDA               	movwf	fsr2h,c
  6372  000318  0E80               	movlw	low _bottlequeue
  6373  00031A  26D9               	addwf	fsr2l,f,c
  6374  00031C  0E00               	movlw	high _bottlequeue
  6375  00031E  22DA               	addwfc	fsr2h,f,c
  6376  000320  0E04               	movlw	4
  6377  000322  D056               	goto	L10
  6378  000324                     i2l4593:
  6379                           
  6380                           ;main.c: 247: else if (color[0]<5200 && color[1]<3200 && color[3]<1400 && color[3]<1300)
      +                           bottlequeue[bottlequeue_tail] = 0;
  6381  000324  BE77               	btfsc	_color+1,7,c
  6382  000326  D006               	goto	i2l4595
  6383  000328  0E50               	movlw	80
  6384  00032A  5C76               	subwf	_color,w,c
  6385  00032C  0E14               	movlw	20
  6386  00032E  5877               	subwfb	_color+1,w,c
  6387  000330  B0D8               	btfsc	status,0,c
  6388  000332  D025               	goto	i2l4603
  6389  000334                     i2l4595:
  6390  000334  BE79               	btfsc	_color+3,7,c
  6391  000336  D006               	goto	i2l4597
  6392  000338  0E80               	movlw	128
  6393  00033A  5C78               	subwf	_color+2,w,c
  6394  00033C  0E0C               	movlw	12
  6395  00033E  5879               	subwfb	_color+3,w,c
  6396  000340  B0D8               	btfsc	status,0,c
  6397  000342  D01D               	goto	i2l4603
  6398  000344                     i2l4597:
  6399  000344  BE7D               	btfsc	_color+7,7,c
  6400  000346  D006               	goto	i2l4599
  6401  000348  0E78               	movlw	120
  6402  00034A  5C7C               	subwf	_color+6,w,c
  6403  00034C  0E05               	movlw	5
  6404  00034E  587D               	subwfb	_color+7,w,c
  6405  000350  B0D8               	btfsc	status,0,c
  6406  000352  D015               	goto	i2l4603
  6407  000354                     i2l4599:
  6408  000354  BE7D               	btfsc	_color+7,7,c
  6409  000356  D006               	goto	i2l4601
  6410  000358  0E14               	movlw	20
  6411  00035A  5C7C               	subwf	_color+6,w,c
  6412  00035C  0E05               	movlw	5
  6413  00035E  587D               	subwfb	_color+7,w,c
  6414  000360  B0D8               	btfsc	status,0,c
  6415  000362  D00D               	goto	i2l4603
  6416  000364                     i2l4601:
  6417  000364  90D8               	bcf	status,0,c
  6418  000366  0100               	movlb	0	; () banked
  6419  000368  359F               	rlcf	_bottlequeue_tail& (0+255),w,b
  6420  00036A  6ED9               	movwf	fsr2l,c
  6421  00036C  0100               	movlb	0	; () banked
  6422  00036E  35A0               	rlcf	(_bottlequeue_tail+1)& (0+255),w,b
  6423  000370  6EDA               	movwf	fsr2h,c
  6424  000372  0E80               	movlw	low _bottlequeue
  6425  000374  26D9               	addwf	fsr2l,f,c
  6426  000376  0E00               	movlw	high _bottlequeue
  6427  000378  22DA               	addwfc	fsr2h,f,c
  6428  00037A  0E00               	movlw	0
  6429  00037C  D029               	goto	L10
  6430  00037E                     i2l4603:
  6431                           
  6432                           ;main.c: 248: else if (color[0]>10000 && color[1]>3600 && color[2]>3900 && color[3]>3400
      +                          ) bottlequeue[bottlequeue_tail] = 6;
  6433  00037E  BE77               	btfsc	_color+1,7,c
  6434  000380  D02A               	goto	i2l4613
  6435  000382  0E11               	movlw	17
  6436  000384  5C76               	subwf	_color,w,c
  6437  000386  0E27               	movlw	39
  6438  000388  5877               	subwfb	_color+1,w,c
  6439  00038A  B0D8               	btfsc	status,0,c
  6440  00038C  BE79               	btfsc	_color+3,7,c
  6441  00038E  D023               	goto	i2l4613
  6442  000390  0E11               	movlw	17
  6443  000392  5C78               	subwf	_color+2,w,c
  6444  000394  0E0E               	movlw	14
  6445  000396  5879               	subwfb	_color+3,w,c
  6446  000398  B0D8               	btfsc	status,0,c
  6447  00039A  BE7B               	btfsc	_color+5,7,c
  6448  00039C  D01C               	goto	i2l4613
  6449  00039E  0E3D               	movlw	61
  6450  0003A0  5C7A               	subwf	_color+4,w,c
  6451  0003A2  0E0F               	movlw	15
  6452  0003A4  587B               	subwfb	_color+5,w,c
  6453  0003A6  B0D8               	btfsc	status,0,c
  6454  0003A8  BE7D               	btfsc	_color+7,7,c
  6455  0003AA  D015               	goto	i2l4613
  6456  0003AC  0E49               	movlw	73
  6457  0003AE  5C7C               	subwf	_color+6,w,c
  6458  0003B0  0E0D               	movlw	13
  6459  0003B2  587D               	subwfb	_color+7,w,c
  6460  0003B4  A0D8               	btfss	status,0,c
  6461  0003B6  D00F               	goto	i2l4613
  6462  0003B8  90D8               	bcf	status,0,c
  6463  0003BA  0100               	movlb	0	; () banked
  6464  0003BC  359F               	rlcf	_bottlequeue_tail& (0+255),w,b
  6465  0003BE  6ED9               	movwf	fsr2l,c
  6466  0003C0  0100               	movlb	0	; () banked
  6467  0003C2  35A0               	rlcf	(_bottlequeue_tail+1)& (0+255),w,b
  6468  0003C4  6EDA               	movwf	fsr2h,c
  6469  0003C6  0E80               	movlw	low _bottlequeue
  6470  0003C8  26D9               	addwf	fsr2l,f,c
  6471  0003CA  0E00               	movlw	high _bottlequeue
  6472  0003CC  22DA               	addwfc	fsr2h,f,c
  6473  0003CE  0E06               	movlw	6
  6474  0003D0                     L10:
  6475  0003D0  6EDE               	movwf	postinc2,c
  6476  0003D2  0E00               	movlw	0
  6477  0003D4  6EDD               	movwf	postdec2,c
  6478  0003D6                     i2l4613:
  6479                           
  6480                           ;main.c: 249: _delay((unsigned long)((150)*(10000000/4000.0)));
  6481  0003D6  0E02               	movlw	2
  6482  0003D8  0100               	movlb	0	; () banked
  6483  0003DA  6FC5               	movwf	(??_isr+1)& (0+255),b
  6484  0003DC  0EE7               	movlw	231
  6485  0003DE  0100               	movlb	0	; () banked
  6486  0003E0  6FC4               	movwf	??_isr& (0+255),b
  6487  0003E2  0E00               	movlw	0
  6488  0003E4                     i2u482_47:
  6489  0003E4  2EE8               	decfsz	wreg,f,c
  6490  0003E6  D7FE               	bra	i2u482_47
  6491  0003E8  2FC4               	decfsz	??_isr& (0+255),f,b
  6492  0003EA  D7FC               	bra	i2u482_47
  6493  0003EC  2FC5               	decfsz	(??_isr+1)& (0+255),f,b
  6494  0003EE  D7FA               	bra	i2u482_47
  6495  0003F0  F000               	nop	
  6496                           
  6497                           ;main.c: 250: read_colorsensor();
  6498  0003F2  ECA4  F00F         	call	i2_read_colorsensor	;wreg free
  6499                           
  6500                           ;main.c: 251: if (color[0]>1000) bottlequeue[bottlequeue_tail] += 1;
  6501  0003F6  BE77               	btfsc	_color+1,7,c
  6502  0003F8  D014               	goto	i2l4621
  6503  0003FA  0EE9               	movlw	233
  6504  0003FC  5C76               	subwf	_color,w,c
  6505  0003FE  0E03               	movlw	3
  6506  000400  5877               	subwfb	_color+1,w,c
  6507  000402  A0D8               	btfss	status,0,c
  6508  000404  D00E               	goto	i2l4621
  6509  000406  90D8               	bcf	status,0,c
  6510  000408  0100               	movlb	0	; () banked
  6511  00040A  359F               	rlcf	_bottlequeue_tail& (0+255),w,b
  6512  00040C  6ED9               	movwf	fsr2l,c
  6513  00040E  0100               	movlb	0	; () banked
  6514  000410  35A0               	rlcf	(_bottlequeue_tail+1)& (0+255),w,b
  6515  000412  6EDA               	movwf	fsr2h,c
  6516  000414  0E80               	movlw	low _bottlequeue
  6517  000416  26D9               	addwf	fsr2l,f,c
  6518  000418  0E00               	movlw	high _bottlequeue
  6519  00041A  22DA               	addwfc	fsr2h,f,c
  6520  00041C  2ADE               	incf	postinc2,f,c
  6521  00041E  0E00               	movlw	0
  6522  000420  22DD               	addwfc	postdec2,f,c
  6523  000422                     i2l4621:
  6524                           
  6525                           ;main.c: 252: bottlequeue_tail += 1;
  6526  000422  0100               	movlb	0	; () banked
  6527  000424  4B9F               	infsnz	_bottlequeue_tail& (0+255),f,b
  6528  000426  2BA0               	incf	(_bottlequeue_tail+1)& (0+255),f,b
  6529  000428                     i2l4623:
  6530                           
  6531                           ;main.c: 253: }
  6532                           ;main.c: 254: INT0IF = 0;
  6533  000428  92F2               	bcf	intcon,1,c	;volatile
  6534                           
  6535                           ;main.c: 255: }
  6536  00042A  D13A               	goto	i2l319
  6537  00042C                     i2l288:
  6538                           
  6539                           ;main.c: 256: else if (INT2IF){
  6540  00042C  A2F0               	btfss	intcon3,1,c	;volatile
  6541  00042E  D0BD               	goto	i2l299
  6542                           
  6543                           ;main.c: 257: if(PORTAbits.RA4){
  6544  000430  A880               	btfss	3968,4,c	;volatile
  6545  000432  D0B9               	goto	i2l300
  6546                           
  6547                           ;main.c: 258: nodedata = bottlequeue[bottlequeue_head];
  6548  000434  90D8               	bcf	status,0,c
  6549  000436  0100               	movlb	0	; () banked
  6550  000438  359D               	rlcf	_bottlequeue_head& (0+255),w,b
  6551  00043A  6ED9               	movwf	fsr2l,c
  6552  00043C  0100               	movlb	0	; () banked
  6553  00043E  359E               	rlcf	(_bottlequeue_head+1)& (0+255),w,b
  6554  000440  6EDA               	movwf	fsr2h,c
  6555  000442  0E80               	movlw	low _bottlequeue
  6556  000444  26D9               	addwf	fsr2l,f,c
  6557  000446  0E00               	movlw	high _bottlequeue
  6558  000448  22DA               	addwfc	fsr2h,f,c
  6559  00044A  CFDE F0AF          	movff	postinc2,_nodedata
  6560  00044E  CFDD F0B0          	movff	postdec2,_nodedata+1
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;main.c: 259: bottlequeue_head += 1;
  6564  000452  0100               	movlb	0	; () banked
  6565  000454  4B9D               	infsnz	_bottlequeue_head& (0+255),f,b
  6566  000456  2B9E               	incf	(_bottlequeue_head+1)& (0+255),f,b
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;main.c: 260: total_bottle_count += 1;
  6570  000458  0100               	movlb	0	; () banked
  6571  00045A  4BB9               	infsnz	_total_bottle_count& (0+255),f,b
  6572  00045C  2BBA               	incf	(_total_bottle_count+1)& (0+255),f,b
  6573                           
  6574                           ;main.c: 261: switch (nodedata){
  6575  00045E  D080               	goto	i2l4683
  6576  000460                     i2l4633:
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;main.c: 263: servo_rotate0(0);
  6580  000460  0E00               	movlw	0
  6581  000462  6E02               	movwf	servo_rotate0@degree+1,c
  6582  000464  0E00               	movlw	0
  6583  000466  6E01               	movwf	servo_rotate0@degree,c
  6584  000468  ECBD  F011         	call	_servo_rotate0	;wreg free
  6585                           
  6586                           ;main.c: 264: servo_rotate2(0);
  6587  00046C  0E00               	movlw	0
  6588  00046E  6E10               	movwf	servo_rotate2@degree+1,c
  6589  000470  0E00               	movlw	0
  6590  000472  6E0F               	movwf	servo_rotate2@degree,c
  6591  000474  EC61  F010         	call	_servo_rotate2	;wreg free
  6592                           
  6593                           ;main.c: 265: yopcaplbl_count += 1;
  6594  000478  0100               	movlb	0	; () banked
  6595  00047A  4BBF               	infsnz	_yopcaplbl_count& (0+255),f,b
  6596  00047C  2BC0               	incf	(_yopcaplbl_count+1)& (0+255),f,b
  6597                           
  6598                           ;main.c: 266: break;
  6599  00047E  D093               	goto	i2l300
  6600  000480                     i2l4639:
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;main.c: 268: servo_rotate0(0);
  6604  000480  0E00               	movlw	0
  6605  000482  6E02               	movwf	servo_rotate0@degree+1,c
  6606  000484  0E00               	movlw	0
  6607  000486  6E01               	movwf	servo_rotate0@degree,c
  6608  000488  ECBD  F011         	call	_servo_rotate0	;wreg free
  6609                           
  6610                           ;main.c: 269: servo_rotate2(0);
  6611  00048C  0E00               	movlw	0
  6612  00048E  6E10               	movwf	servo_rotate2@degree+1,c
  6613  000490  0E00               	movlw	0
  6614  000492  6E0F               	movwf	servo_rotate2@degree,c
  6615  000494  EC61  F010         	call	_servo_rotate2	;wreg free
  6616                           
  6617                           ;main.c: 270: yopcap_count += 1;
  6618  000498  0100               	movlb	0	; () banked
  6619  00049A  4BBD               	infsnz	_yopcap_count& (0+255),f,b
  6620  00049C  2BBE               	incf	(_yopcap_count+1)& (0+255),f,b
  6621                           
  6622                           ;main.c: 271: break;
  6623  00049E  D083               	goto	i2l300
  6624  0004A0                     i2l4645:
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;main.c: 273: servo_rotate0(0);
  6628  0004A0  0E00               	movlw	0
  6629  0004A2  6E02               	movwf	servo_rotate0@degree+1,c
  6630  0004A4  0E00               	movlw	0
  6631  0004A6  6E01               	movwf	servo_rotate0@degree,c
  6632  0004A8  ECBD  F011         	call	_servo_rotate0	;wreg free
  6633                           
  6634                           ;main.c: 274: servo_rotate2(120);
  6635  0004AC  0E00               	movlw	0
  6636  0004AE  6E10               	movwf	servo_rotate2@degree+1,c
  6637  0004B0  0E78               	movlw	120
  6638  0004B2  6E0F               	movwf	servo_rotate2@degree,c
  6639  0004B4  EC61  F010         	call	_servo_rotate2	;wreg free
  6640                           
  6641                           ;main.c: 275: yoplbl_count += 1;
  6642  0004B8  0100               	movlb	0	; () banked
  6643  0004BA  4BC1               	infsnz	_yoplbl_count& (0+255),f,b
  6644  0004BC  2BC2               	incf	(_yoplbl_count+1)& (0+255),f,b
  6645                           
  6646                           ;main.c: 276: break;
  6647  0004BE  D073               	goto	i2l300
  6648  0004C0                     i2l4651:
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;main.c: 278: servo_rotate0(0);
  6652  0004C0  0E00               	movlw	0
  6653  0004C2  6E02               	movwf	servo_rotate0@degree+1,c
  6654  0004C4  0E00               	movlw	0
  6655  0004C6  6E01               	movwf	servo_rotate0@degree,c
  6656  0004C8  ECBD  F011         	call	_servo_rotate0	;wreg free
  6657                           
  6658                           ;main.c: 279: servo_rotate2(120);
  6659  0004CC  0E00               	movlw	0
  6660  0004CE  6E10               	movwf	servo_rotate2@degree+1,c
  6661  0004D0  0E78               	movlw	120
  6662  0004D2  6E0F               	movwf	servo_rotate2@degree,c
  6663  0004D4  EC61  F010         	call	_servo_rotate2	;wreg free
  6664                           
  6665                           ;main.c: 280: yop_count += 1;
  6666  0004D8  0100               	movlb	0	; () banked
  6667  0004DA  4BBB               	infsnz	_yop_count& (0+255),f,b
  6668  0004DC  2BBC               	incf	(_yop_count+1)& (0+255),f,b
  6669                           
  6670                           ;main.c: 281: break;
  6671  0004DE  D063               	goto	i2l300
  6672  0004E0                     i2l4657:
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;main.c: 283: servo_rotate0(120);
  6676  0004E0  0E00               	movlw	0
  6677  0004E2  6E02               	movwf	servo_rotate0@degree+1,c
  6678  0004E4  0E78               	movlw	120
  6679  0004E6  6E01               	movwf	servo_rotate0@degree,c
  6680  0004E8  ECBD  F011         	call	_servo_rotate0	;wreg free
  6681                           
  6682                           ;main.c: 284: servo_rotate1(0);
  6683  0004EC  0E00               	movlw	0
  6684  0004EE  6E10               	movwf	servo_rotate1@degree+1,c
  6685  0004F0  0E00               	movlw	0
  6686  0004F2  6E0F               	movwf	servo_rotate1@degree,c
  6687  0004F4  ECBB  F010         	call	_servo_rotate1	;wreg free
  6688                           
  6689                           ;main.c: 285: eskacaplbl_count += 1;
  6690  0004F8  0100               	movlb	0	; () banked
  6691  0004FA  4BA9               	infsnz	_eskacaplbl_count& (0+255),f,b
  6692  0004FC  2BAA               	incf	(_eskacaplbl_count+1)& (0+255),f,b
  6693                           
  6694                           ;main.c: 286: break;
  6695  0004FE  D053               	goto	i2l300
  6696  000500                     i2l4663:
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;main.c: 288: servo_rotate0(120);
  6700  000500  0E00               	movlw	0
  6701  000502  6E02               	movwf	servo_rotate0@degree+1,c
  6702  000504  0E78               	movlw	120
  6703  000506  6E01               	movwf	servo_rotate0@degree,c
  6704  000508  ECBD  F011         	call	_servo_rotate0	;wreg free
  6705                           
  6706                           ;main.c: 289: servo_rotate1(0);
  6707  00050C  0E00               	movlw	0
  6708  00050E  6E10               	movwf	servo_rotate1@degree+1,c
  6709  000510  0E00               	movlw	0
  6710  000512  6E0F               	movwf	servo_rotate1@degree,c
  6711  000514  ECBB  F010         	call	_servo_rotate1	;wreg free
  6712                           
  6713                           ;main.c: 290: eskacap_count += 1;
  6714  000518  0100               	movlb	0	; () banked
  6715  00051A  4BA7               	infsnz	_eskacap_count& (0+255),f,b
  6716  00051C  2BA8               	incf	(_eskacap_count+1)& (0+255),f,b
  6717                           
  6718                           ;main.c: 291: break;
  6719  00051E  D043               	goto	i2l300
  6720  000520                     i2l4669:
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;main.c: 293: servo_rotate0(120);
  6724  000520  0E00               	movlw	0
  6725  000522  6E02               	movwf	servo_rotate0@degree+1,c
  6726  000524  0E78               	movlw	120
  6727  000526  6E01               	movwf	servo_rotate0@degree,c
  6728  000528  ECBD  F011         	call	_servo_rotate0	;wreg free
  6729                           
  6730                           ;main.c: 294: servo_rotate1(120);
  6731  00052C  0E00               	movlw	0
  6732  00052E  6E10               	movwf	servo_rotate1@degree+1,c
  6733  000530  0E78               	movlw	120
  6734  000532  6E0F               	movwf	servo_rotate1@degree,c
  6735  000534  ECBB  F010         	call	_servo_rotate1	;wreg free
  6736                           
  6737                           ;main.c: 295: eskalbl_count += 1;
  6738  000538  0100               	movlb	0	; () banked
  6739  00053A  4BAB               	infsnz	_eskalbl_count& (0+255),f,b
  6740  00053C  2BAC               	incf	(_eskalbl_count+1)& (0+255),f,b
  6741                           
  6742                           ;main.c: 296: break;
  6743  00053E  D033               	goto	i2l300
  6744  000540                     i2l4675:
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;main.c: 298: servo_rotate0(120);
  6748  000540  0E00               	movlw	0
  6749  000542  6E02               	movwf	servo_rotate0@degree+1,c
  6750  000544  0E78               	movlw	120
  6751  000546  6E01               	movwf	servo_rotate0@degree,c
  6752  000548  ECBD  F011         	call	_servo_rotate0	;wreg free
  6753                           
  6754                           ;main.c: 299: servo_rotate1(120);
  6755  00054C  0E00               	movlw	0
  6756  00054E  6E10               	movwf	servo_rotate1@degree+1,c
  6757  000550  0E78               	movlw	120
  6758  000552  6E0F               	movwf	servo_rotate1@degree,c
  6759  000554  ECBB  F010         	call	_servo_rotate1	;wreg free
  6760                           
  6761                           ;main.c: 300: eska_count += 1;
  6762  000558  0100               	movlb	0	; () banked
  6763  00055A  4BA5               	infsnz	_eska_count& (0+255),f,b
  6764  00055C  2BA6               	incf	(_eska_count+1)& (0+255),f,b
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;main.c: 302: }
  6768                           
  6769                           ;main.c: 301: break;
  6770  00055E  D023               	goto	i2l300
  6771  000560                     i2l4683:
  6772                           
  6773                           ; BSR set to: 0
  6774  000560  C0AF  F0C4         	movff	_nodedata,??_isr
  6775  000564  C0B0  F0C5         	movff	_nodedata+1,??_isr+1
  6776                           
  6777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6778                           ; Switch size 1, requested type "space"
  6779                           ; Number of cases is 1, Range of values is 0 to 0
  6780                           ; switch strategies available:
  6781                           ; Name         Instructions Cycles
  6782                           ; simple_byte            4     3 (average)
  6783                           ;	Chosen strategy is simple_byte
  6784  000568  0100               	movlb	0	; () banked
  6785  00056A  51C5               	movf	(??_isr+1)& (0+255),w,b
  6786  00056C  0A00               	xorlw	0	; case 0
  6787  00056E  A4D8               	btfss	status,2,c
  6788  000570  D01A               	goto	i2l300
  6789                           
  6790                           ; BSR set to: 0
  6791                           ; Switch size 1, requested type "space"
  6792                           ; Number of cases is 8, Range of values is 0 to 7
  6793                           ; switch strategies available:
  6794                           ; Name         Instructions Cycles
  6795                           ; simple_byte           25    13 (average)
  6796                           ;	Chosen strategy is simple_byte
  6797  000572  0100               	movlb	0	; () banked
  6798  000574  51C4               	movf	??_isr& (0+255),w,b
  6799  000576  0A00               	xorlw	0	; case 0
  6800  000578  B4D8               	btfsc	status,2,c
  6801  00057A  D772               	goto	i2l4633
  6802  00057C  0A01               	xorlw	1	; case 1
  6803  00057E  B4D8               	btfsc	status,2,c
  6804  000580  D77F               	goto	i2l4639
  6805  000582  0A03               	xorlw	3	; case 2
  6806  000584  B4D8               	btfsc	status,2,c
  6807  000586  D78C               	goto	i2l4645
  6808  000588  0A01               	xorlw	1	; case 3
  6809  00058A  B4D8               	btfsc	status,2,c
  6810  00058C  D799               	goto	i2l4651
  6811  00058E  0A07               	xorlw	7	; case 4
  6812  000590  B4D8               	btfsc	status,2,c
  6813  000592  D7A6               	goto	i2l4657
  6814  000594  0A01               	xorlw	1	; case 5
  6815  000596  B4D8               	btfsc	status,2,c
  6816  000598  D7B3               	goto	i2l4663
  6817  00059A  0A03               	xorlw	3	; case 6
  6818  00059C  B4D8               	btfsc	status,2,c
  6819  00059E  D7C0               	goto	i2l4669
  6820  0005A0  0A01               	xorlw	1	; case 7
  6821  0005A2  B4D8               	btfsc	status,2,c
  6822  0005A4  D7CD               	goto	i2l4675
  6823  0005A6                     i2l300:
  6824                           
  6825                           ;main.c: 303: }
  6826                           ;main.c: 304: INT2IF = 0;
  6827  0005A6  92F0               	bcf	intcon3,1,c	;volatile
  6828                           
  6829                           ;main.c: 305: }
  6830  0005A8  D07B               	goto	i2l319
  6831  0005AA                     i2l299:
  6832                           
  6833                           ;main.c: 306: else if (TMR0IF){
  6834  0005AA  A4F2               	btfss	intcon,2,c	;volatile
  6835  0005AC  D05F               	goto	i2l4709
  6836                           
  6837                           ;main.c: 307: LATAbits.LATA2 = 0;
  6838  0005AE  9489               	bcf	3977,2,c	;volatile
  6839                           
  6840                           ;main.c: 308: TMR0ON = 0;
  6841  0005B0  9ED5               	bcf	4053,7,c	;volatile
  6842                           
  6843                           ;main.c: 309: read_time();
  6844  0005B2  EC4F  F013         	call	_read_time	;wreg free
  6845                           
  6846                           ;main.c: 310: end_time[1] = time[1];
  6847  0005B6  C097  F0A2         	movff	_time+1,_end_time+1
  6848                           
  6849                           ;main.c: 311: end_time[0] = time[0];
  6850  0005BA  C096  F0A1         	movff	_time,_end_time
  6851                           
  6852                           ;main.c: 312: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6853  0005BE  C0B6  F063         	movff	_start_time+1,dec_to_hex@num
  6854  0005C2  6A64               	clrf	dec_to_hex@num+1,c
  6855  0005C4  ECCD  F00A         	call	_dec_to_hex	;wreg free
  6856  0005C8  C063  F074         	movff	?_dec_to_hex,_isr$1359
  6857  0005CC  C064  F075         	movff	?_dec_to_hex+1,_isr$1359+1
  6858                           
  6859                           ;main.c: 312: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6860  0005D0  C074  F001         	movff	_isr$1359,i2___wmul@multiplier
  6861  0005D4  C075  F002         	movff	_isr$1359+1,i2___wmul@multiplier+1
  6862  0005D8  0E00               	movlw	0
  6863  0005DA  6E04               	movwf	i2___wmul@multiplicand+1,c
  6864  0005DC  0E3C               	movlw	60
  6865  0005DE  6E03               	movwf	i2___wmul@multiplicand,c
  6866  0005E0  ECDE  F015         	call	i2___wmul	;wreg free
  6867  0005E4  C001  F0C4         	movff	?i2___wmul,??_isr
  6868  0005E8  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6869  0005EC  C0B5  F063         	movff	_start_time,dec_to_hex@num
  6870  0005F0  6A64               	clrf	dec_to_hex@num+1,c
  6871  0005F2  ECCD  F00A         	call	_dec_to_hex	;wreg free
  6872  0005F6  5063               	movf	?_dec_to_hex,w,c
  6873  0005F8  0100               	movlb	0	; () banked
  6874  0005FA  25C4               	addwf	??_isr& (0+255),w,b
  6875  0005FC  0100               	movlb	0	; () banked
  6876  0005FE  6FB7               	movwf	_stime& (0+255),b
  6877  000600  5064               	movf	?_dec_to_hex+1,w,c
  6878  000602  0100               	movlb	0	; () banked
  6879  000604  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6880  000606  0100               	movlb	0	; () banked
  6881  000608  6FB8               	movwf	(_stime+1)& (0+255),b
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;main.c: 313: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6885  00060A  C0A2  F063         	movff	_end_time+1,dec_to_hex@num
  6886  00060E  6A64               	clrf	dec_to_hex@num+1,c
  6887  000610  ECCD  F00A         	call	_dec_to_hex	;wreg free
  6888  000614  C063  F074         	movff	?_dec_to_hex,_isr$1359
  6889  000618  C064  F075         	movff	?_dec_to_hex+1,_isr$1359+1
  6890                           
  6891                           ;main.c: 313: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6892  00061C  C074  F001         	movff	_isr$1359,i2___wmul@multiplier
  6893  000620  C075  F002         	movff	_isr$1359+1,i2___wmul@multiplier+1
  6894  000624  0E00               	movlw	0
  6895  000626  6E04               	movwf	i2___wmul@multiplicand+1,c
  6896  000628  0E3C               	movlw	60
  6897  00062A  6E03               	movwf	i2___wmul@multiplicand,c
  6898  00062C  ECDE  F015         	call	i2___wmul	;wreg free
  6899  000630  C001  F0C4         	movff	?i2___wmul,??_isr
  6900  000634  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6901  000638  C0A1  F063         	movff	_end_time,dec_to_hex@num
  6902  00063C  6A64               	clrf	dec_to_hex@num+1,c
  6903  00063E  ECCD  F00A         	call	_dec_to_hex	;wreg free
  6904  000642  5063               	movf	?_dec_to_hex,w,c
  6905  000644  0100               	movlb	0	; () banked
  6906  000646  25C4               	addwf	??_isr& (0+255),w,b
  6907  000648  0100               	movlb	0	; () banked
  6908  00064A  6FAD               	movwf	_etime& (0+255),b
  6909  00064C  5064               	movf	?_dec_to_hex+1,w,c
  6910  00064E  0100               	movlb	0	; () banked
  6911  000650  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6912  000652  0100               	movlb	0	; () banked
  6913  000654  6FAE               	movwf	(_etime+1)& (0+255),b
  6914                           
  6915                           ; BSR set to: 0
  6916                           ;main.c: 314: lcdInst(0b00000001);
  6917  000656  0E01               	movlw	1
  6918  000658  EC58  F016         	call	i2_lcdInst
  6919                           
  6920                           ;main.c: 315: curr_state = OPERATIONEND;
  6921  00065C  0E03               	movlw	3
  6922  00065E  0100               	movlb	0	; () banked
  6923  000660  6FC3               	movwf	_curr_state& (0+255),b
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;main.c: 316: bottle_count_disp = -1;
  6927  000662  0100               	movlb	0	; () banked
  6928  000664  69EE               	setf	_bottle_count_disp& (0+255),b
  6929  000666  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;main.c: 317: TMR0IF = 0;
  6933  000668  94F2               	bcf	intcon,2,c	;volatile
  6934                           
  6935                           ;main.c: 318: }
  6936  00066A  D01A               	goto	i2l319
  6937  00066C                     i2l4709:
  6938                           
  6939                           ;main.c: 321: lcdInst(0b10000000);
  6940  00066C  0E80               	movlw	128
  6941  00066E  EC58  F016         	call	i2_lcdInst
  6942                           
  6943                           ;main.c: 322: printf("bad interrupt");
  6944  000672  0EE7               	movlw	low STR_3
  6945  000674  6E0D               	movwf	i2printf@f,c
  6946  000676  0EFF               	movlw	high STR_3
  6947  000678  6E0E               	movwf	i2printf@f+1,c
  6948  00067A  EC59  F005         	call	i2_printf	;wreg free
  6949                           
  6950                           ;main.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  6951  00067E  0E00               	movlw	0
  6952  000680  6E73               	movwf	isr@i,c
  6953  000682                     i2l4715:
  6954  000682  0E63               	movlw	99
  6955  000684  6473               	cpfsgt	isr@i,c
  6956  000686  D001               	goto	i2l4719
  6957  000688  D7F1               	goto	i2l4709
  6958  00068A                     i2l4719:
  6959  00068A  0E21               	movlw	33
  6960  00068C  0100               	movlb	0	; () banked
  6961  00068E  6FC4               	movwf	??_isr& (0+255),b
  6962  000690  0E76               	movlw	118
  6963  000692                     i2u483_47:
  6964  000692  2EE8               	decfsz	wreg,f,c
  6965  000694  D7FE               	bra	i2u483_47
  6966  000696  2FC4               	decfsz	??_isr& (0+255),f,b
  6967  000698  D7FC               	bra	i2u483_47
  6968  00069A  F000               	nop	
  6969  00069C  2A73               	incf	isr@i,f,c
  6970  00069E  D7F1               	goto	i2l4715
  6971  0006A0                     i2l319:
  6972  0006A0  C0D3  FFF5         	movff	??_isr+15,tablat
  6973  0006A4  C0D2  FFF8         	movff	??_isr+14,tblptru
  6974  0006A8  C0D1  FFF7         	movff	??_isr+13,tblptrh
  6975  0006AC  C0D0  FFF6         	movff	??_isr+12,tblptrl
  6976  0006B0  C0CF  FFF4         	movff	??_isr+11,prodh
  6977  0006B4  C0CE  FFF3         	movff	??_isr+10,prodl
  6978  0006B8  C0CD  FFDA         	movff	??_isr+9,fsr2h
  6979  0006BC  C0CC  FFD9         	movff	??_isr+8,fsr2l
  6980  0006C0  C0CB  FFE2         	movff	??_isr+7,fsr1h
  6981  0006C4  C0CA  FFE1         	movff	??_isr+6,fsr1l
  6982  0006C8  C0C9  FFEA         	movff	??_isr+5,fsr0h
  6983  0006CC  C0C8  FFE9         	movff	??_isr+4,fsr0l
  6984  0006D0  C0C7  FFFB         	movff	??_isr+3,pclatu
  6985  0006D4  C0C6  FFFA         	movff	??_isr+2,pclath
  6986  0006D8  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6987  0006DA  0011               	retfie		f
  6988  0006DC                     __end_of_isr:
  6989                           	opt stack 0
  6990                           pclatu	equ	0xFFB
  6991                           pclath	equ	0xFFA
  6992                           tblptru	equ	0xFF8
  6993                           tblptrh	equ	0xFF7
  6994                           tblptrl	equ	0xFF6
  6995                           tablat	equ	0xFF5
  6996                           prodh	equ	0xFF4
  6997                           prodl	equ	0xFF3
  6998                           intcon	equ	0xFF2
  6999                           intcon2	equ	0xFF1
  7000                           intcon3	equ	0xFF0
  7001                           postinc0	equ	0xFEE
  7002                           fsr0h	equ	0xFEA
  7003                           fsr0l	equ	0xFE9
  7004                           wreg	equ	0xFE8
  7005                           fsr1h	equ	0xFE2
  7006                           fsr1l	equ	0xFE1
  7007                           indf2	equ	0xFDF
  7008                           postinc2	equ	0xFDE
  7009                           postdec2	equ	0xFDD
  7010                           fsr2h	equ	0xFDA
  7011                           fsr2l	equ	0xFD9
  7012                           status	equ	0xFD8
  7013                           
  7014 ;; *************** function i2_read_colorsensor *****************
  7015 ;; Defined at:
  7016 ;;		line 534 in file "main.c"
  7017 ;; Parameters:    Size  Location     Type
  7018 ;;		None
  7019 ;; Auto vars:     Size  Location     Type
  7020 ;;  read_colorse    2    9[COMRAM] int 
  7021 ;;  read_colorse    2    5[COMRAM] int 
  7022 ;;  read_colorse    1    8[COMRAM] unsigned char 
  7023 ;;  read_colorse    1    7[COMRAM] unsigned char 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  1    wreg      void 
  7026 ;; Registers used:
  7027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;Total ram usage:        8 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; Hardware stack levels required when called:    2
  7040 ;; This function calls:
  7041 ;;		i2_I2C_Master_Read
  7042 ;;		i2_I2C_Master_RepeatedStart
  7043 ;;		i2_I2C_Master_Start
  7044 ;;		i2_I2C_Master_Stop
  7045 ;;		i2_I2C_Master_Write
  7046 ;; This function is called by:
  7047 ;;		_isr
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           	psect	text29
  7052  001F48                     __ptext29:
  7053                           	opt stack 0
  7054  001F48                     i2_read_colorsensor:
  7055                           	opt stack 23
  7056                           
  7057                           ;main.c: 539: unsigned char color_low;
  7058                           ;main.c: 540: unsigned char color_high;
  7059                           ;main.c: 541: int color_comb;
  7060                           ;main.c: 542: int i;
  7061                           ;main.c: 545: I2C_Master_Start();
  7062                           
  7063                           ;incstack = 0
  7064  001F48  EC80  F016         	call	i2_I2C_Master_Start	;wreg free
  7065                           
  7066                           ;main.c: 546: I2C_Master_Write(0b01010010);
  7067  001F4C  0E00               	movlw	0
  7068  001F4E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7069  001F50  0E52               	movlw	82
  7070  001F52  6E02               	movwf	i2I2C_Master_Write@d,c
  7071  001F54  EC63  F016         	call	i2_I2C_Master_Write	;wreg free
  7072                           
  7073                           ;main.c: 547: I2C_Master_Write(0b10110100);
  7074  001F58  0E00               	movlw	0
  7075  001F5A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7076  001F5C  0EB4               	movlw	180
  7077  001F5E  6E02               	movwf	i2I2C_Master_Write@d,c
  7078  001F60  EC63  F016         	call	i2_I2C_Master_Write	;wreg free
  7079                           
  7080                           ;main.c: 548: I2C_Master_RepeatedStart();
  7081  001F64  EC78  F016         	call	i2_I2C_Master_RepeatedStart	;wreg free
  7082                           
  7083                           ;main.c: 549: I2C_Master_Write(0b01010011);
  7084  001F68  0E00               	movlw	0
  7085  001F6A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7086  001F6C  0E53               	movlw	83
  7087  001F6E  6E02               	movwf	i2I2C_Master_Write@d,c
  7088  001F70  EC63  F016         	call	i2_I2C_Master_Write	;wreg free
  7089                           
  7090                           ;main.c: 550: for(i=0; i<3; i++){
  7091  001F74  0E00               	movlw	0
  7092  001F76  6E0B               	movwf	i2read_colorsensor@i+1,c
  7093  001F78  0E00               	movlw	0
  7094  001F7A  6E0A               	movwf	i2read_colorsensor@i,c
  7095  001F7C                     i2l4275:
  7096  001F7C  BE0B               	btfsc	i2read_colorsensor@i+1,7,c
  7097  001F7E  D006               	goto	i2l4279
  7098  001F80  500B               	movf	i2read_colorsensor@i+1,w,c
  7099  001F82  E127               	bnz	i2l4289
  7100  001F84  0E03               	movlw	3
  7101  001F86  5C0A               	subwf	i2read_colorsensor@i,w,c
  7102  001F88  B0D8               	btfsc	status,0,c
  7103  001F8A  D023               	goto	i2l4289
  7104  001F8C                     i2l4279:
  7105                           
  7106                           ;main.c: 551: color_low = I2C_Master_Read(1);
  7107  001F8C  0E01               	movlw	1
  7108  001F8E  ECCB  F015         	call	i2_I2C_Master_Read
  7109  001F92  6E08               	movwf	i2read_colorsensor@color_low,c
  7110                           
  7111                           ;main.c: 552: color_high = I2C_Master_Read(1);
  7112  001F94  0E01               	movlw	1
  7113  001F96  ECCB  F015         	call	i2_I2C_Master_Read
  7114  001F9A  6E09               	movwf	i2read_colorsensor@color_high,c
  7115                           
  7116                           ;main.c: 553: color_comb = (color_high << 8)|(color_low);
  7117  001F9C  5008               	movf	i2read_colorsensor@color_low,w,c
  7118  001F9E  C009  F004         	movff	i2read_colorsensor@color_high,??i2_read_colorsensor
  7119  001FA2  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  7120  001FA4  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  7121  001FA8  6A04               	clrf	??i2_read_colorsensor,c
  7122  001FAA  1004               	iorwf	??i2_read_colorsensor,w,c
  7123  001FAC  6E06               	movwf	i2read_colorsensor@color_comb,c
  7124  001FAE  5005               	movf	??i2_read_colorsensor+1,w,c
  7125  001FB0  6E07               	movwf	i2read_colorsensor@color_comb+1,c
  7126                           
  7127                           ;main.c: 554: color[i] = color_comb;
  7128  001FB2  90D8               	bcf	status,0,c
  7129  001FB4  340A               	rlcf	i2read_colorsensor@i,w,c
  7130  001FB6  6ED9               	movwf	fsr2l,c
  7131  001FB8  340B               	rlcf	i2read_colorsensor@i+1,w,c
  7132  001FBA  6EDA               	movwf	fsr2h,c
  7133  001FBC  0E76               	movlw	low _color
  7134  001FBE  26D9               	addwf	fsr2l,f,c
  7135  001FC0  0E00               	movlw	high _color
  7136  001FC2  22DA               	addwfc	fsr2h,f,c
  7137  001FC4  C006  FFDE         	movff	i2read_colorsensor@color_comb,postinc2
  7138  001FC8  C007  FFDD         	movff	i2read_colorsensor@color_comb+1,postdec2
  7139  001FCC  4A0A               	infsnz	i2read_colorsensor@i,f,c
  7140  001FCE  2A0B               	incf	i2read_colorsensor@i+1,f,c
  7141  001FD0  D7D5               	goto	i2l4275
  7142  001FD2                     i2l4289:
  7143                           
  7144                           ;main.c: 555: }
  7145                           ;main.c: 556: color_low = I2C_Master_Read(1);
  7146  001FD2  0E01               	movlw	1
  7147  001FD4  ECCB  F015         	call	i2_I2C_Master_Read
  7148  001FD8  6E08               	movwf	i2read_colorsensor@color_low,c
  7149                           
  7150                           ;main.c: 557: color_high = I2C_Master_Read(0);
  7151  001FDA  0E00               	movlw	0
  7152  001FDC  ECCB  F015         	call	i2_I2C_Master_Read
  7153  001FE0  6E09               	movwf	i2read_colorsensor@color_high,c
  7154                           
  7155                           ;main.c: 558: color_comb = (color_high << 8)|(color_low);
  7156  001FE2  5008               	movf	i2read_colorsensor@color_low,w,c
  7157  001FE4  C009  F004         	movff	i2read_colorsensor@color_high,??i2_read_colorsensor
  7158  001FE8  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  7159  001FEA  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  7160  001FEE  6A04               	clrf	??i2_read_colorsensor,c
  7161  001FF0  1004               	iorwf	??i2_read_colorsensor,w,c
  7162  001FF2  6E06               	movwf	i2read_colorsensor@color_comb,c
  7163  001FF4  5005               	movf	??i2_read_colorsensor+1,w,c
  7164  001FF6  6E07               	movwf	i2read_colorsensor@color_comb+1,c
  7165                           
  7166                           ;main.c: 559: color[3] = color_comb;
  7167  001FF8  C006  F07C         	movff	i2read_colorsensor@color_comb,_color+6
  7168  001FFC  C007  F07D         	movff	i2read_colorsensor@color_comb+1,_color+7
  7169                           
  7170                           ;main.c: 560: I2C_Master_Stop();
  7171  002000  EC7C  F016         	call	i2_I2C_Master_Stop	;wreg free
  7172  002004  0012               	return	
  7173  002006                     __end_ofi2_read_colorsensor:
  7174                           	opt stack 0
  7175                           pclatu	equ	0xFFB
  7176                           pclath	equ	0xFFA
  7177                           tblptru	equ	0xFF8
  7178                           tblptrh	equ	0xFF7
  7179                           tblptrl	equ	0xFF6
  7180                           tablat	equ	0xFF5
  7181                           prodh	equ	0xFF4
  7182                           prodl	equ	0xFF3
  7183                           intcon	equ	0xFF2
  7184                           intcon2	equ	0xFF1
  7185                           intcon3	equ	0xFF0
  7186                           postinc0	equ	0xFEE
  7187                           fsr0h	equ	0xFEA
  7188                           fsr0l	equ	0xFE9
  7189                           wreg	equ	0xFE8
  7190                           fsr1h	equ	0xFE2
  7191                           fsr1l	equ	0xFE1
  7192                           indf2	equ	0xFDF
  7193                           postinc2	equ	0xFDE
  7194                           postdec2	equ	0xFDD
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function i2_I2C_Master_RepeatedStart *****************
  7200 ;; Defined at:
  7201 ;;		line 35 in file "I2C.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;		None
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;Total ram usage:        0 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    1
  7222 ;; This function calls:
  7223 ;;		i2_I2C_Master_Wait
  7224 ;; This function is called by:
  7225 ;;		i2_read_colorsensor
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text30
  7230  002CF0                     __ptext30:
  7231                           	opt stack 0
  7232  002CF0                     i2_I2C_Master_RepeatedStart:
  7233                           	opt stack 23
  7234                           
  7235                           ;I2C.c: 37: I2C_Master_Wait();
  7236                           
  7237                           ;incstack = 0
  7238  002CF0  EC39  F016         	call	i2_I2C_Master_Wait	;wreg free
  7239                           
  7240                           ;I2C.c: 38: RSEN = 1;
  7241  002CF4  82C5               	bsf	4037,1,c	;volatile
  7242  002CF6  0012               	return		;funcret
  7243  002CF8                     __end_ofi2_I2C_Master_RepeatedStart:
  7244                           	opt stack 0
  7245                           pclatu	equ	0xFFB
  7246                           pclath	equ	0xFFA
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           intcon2	equ	0xFF1
  7255                           intcon3	equ	0xFF0
  7256                           postinc0	equ	0xFEE
  7257                           fsr0h	equ	0xFEA
  7258                           fsr0l	equ	0xFE9
  7259                           wreg	equ	0xFE8
  7260                           fsr1h	equ	0xFE2
  7261                           fsr1l	equ	0xFE1
  7262                           indf2	equ	0xFDF
  7263                           postinc2	equ	0xFDE
  7264                           postdec2	equ	0xFDD
  7265                           fsr2h	equ	0xFDA
  7266                           fsr2l	equ	0xFD9
  7267                           status	equ	0xFD8
  7268                           
  7269 ;; *************** function i2_printf *****************
  7270 ;; Defined at:
  7271 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7274 ;;		 -> STR_24(15), STR_23(16), STR_22(28), STR_21(25), 
  7275 ;;		 -> STR_20(24), STR_19(23), STR_18(18), STR_17(23), 
  7276 ;;		 -> STR_16(10), STR_15(18), STR_14(18), STR_13(18), 
  7277 ;;		 -> STR_12(18), STR_11(18), STR_10(18), STR_9(18), 
  7278 ;;		 -> STR_8(18), STR_7(17), STR_6(17), STR_5(23), 
  7279 ;;		 -> STR_4(23), STR_3(14), STR_2(24), STR_1(24), 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  printf          4    0        struct .
  7282 ;;  printf          3    0        PTR const unsigned char 
  7283 ;;  printf          2   29[COMRAM] int 
  7284 ;;  printf          2   26[COMRAM] unsigned int 
  7285 ;;  printf          2   23[COMRAM] PTR void [1]
  7286 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7287 ;;  printf          2    0        unsigned int 
  7288 ;;  printf          1   31[COMRAM] char 
  7289 ;;  printf          1   28[COMRAM] unsigned char 
  7290 ;;  printf          1   25[COMRAM] char 
  7291 ;;  printf          1   22[COMRAM] unsigned char 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  2   12[COMRAM] int 
  7294 ;; Registers used:
  7295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7301 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;Total ram usage:       20 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    2
  7308 ;; This function calls:
  7309 ;;		i2___lwdiv
  7310 ;;		i2___lwmod
  7311 ;;		i2___wmul
  7312 ;;		i2_isdigit
  7313 ;;		i2_putch
  7314 ;; This function is called by:
  7315 ;;		_isr
  7316 ;; This function uses a non-reentrant model
  7317 ;;
  7318                           
  7319                           	psect	text31
  7320  000AB2                     __ptext31:
  7321                           	opt stack 0
  7322  000AB2                     i2_printf:
  7323                           	opt stack 23
  7324                           
  7325                           ;doprnt.c: 466: va_list ap;
  7326                           ;doprnt.c: 499: signed char c;
  7327                           ;doprnt.c: 501: int width;
  7328                           ;doprnt.c: 506: signed char prec;
  7329                           ;doprnt.c: 508: unsigned char flag;
  7330                           ;doprnt.c: 523: union {
  7331                           ;doprnt.c: 524: unsigned long vd;
  7332                           ;doprnt.c: 525: double integ;
  7333                           ;doprnt.c: 526: } tmpval;
  7334                           ;doprnt.c: 528: unsigned int val;
  7335                           ;doprnt.c: 529: unsigned len;
  7336                           ;doprnt.c: 530: const char * cp;
  7337                           ;doprnt.c: 533: *ap = __va_start();
  7338                           
  7339                           ;incstack = 0
  7340  000AB2  0E0F               	movlw	low (?i2_printf+2)
  7341  000AB4  6E18               	movwf	i2printf@ap,c
  7342  000AB6  0E00               	movlw	high (?i2_printf+2)
  7343  000AB8  6E19               	movwf	i2printf@ap+1,c
  7344                           
  7345                           ;doprnt.c: 536: while(c = *f++) {
  7346  000ABA  D184               	goto	i2l4431
  7347  000ABC                     i2l4301:
  7348                           
  7349                           ;doprnt.c: 538: if(c != '%')
  7350  000ABC  0E25               	movlw	37
  7351  000ABE  1820               	xorwf	i2printf@c,w,c
  7352  000AC0  B4D8               	btfsc	status,2,c
  7353  000AC2  D004               	goto	i2l4305
  7354                           
  7355                           ;doprnt.c: 540: {
  7356                           ;doprnt.c: 541: (putch(c) );
  7357  000AC4  5020               	movf	i2printf@c,w,c
  7358  000AC6  EC52  F016         	call	i2_putch
  7359                           
  7360                           ;doprnt.c: 542: continue;
  7361  000ACA  D17C               	goto	i2l4431
  7362  000ACC                     i2l4305:
  7363                           
  7364                           ;doprnt.c: 543: }
  7365                           ;doprnt.c: 546: width = 0;
  7366  000ACC  0E00               	movlw	0
  7367  000ACE  6E1F               	movwf	i2printf@width+1,c
  7368  000AD0  0E00               	movlw	0
  7369  000AD2  6E1E               	movwf	i2printf@width,c
  7370                           
  7371                           ;doprnt.c: 548: flag = 0;
  7372  000AD4  0E00               	movlw	0
  7373  000AD6  6E1D               	movwf	i2printf@flag,c
  7374                           
  7375                           ;doprnt.c: 551: switch(*f) {
  7376                           
  7377                           ;doprnt.c: 550: for(;;) {
  7378  000AD8  D003               	goto	i2l4311
  7379  000ADA                     i2l4307:
  7380                           
  7381                           ;doprnt.c: 580: flag |= 0x04;
  7382  000ADA  841D               	bsf	i2printf@flag,2,c
  7383                           
  7384                           ;doprnt.c: 581: f++;
  7385  000ADC  4A0D               	infsnz	i2printf@f,f,c
  7386  000ADE  2A0E               	incf	i2printf@f+1,f,c
  7387  000AE0                     i2l4311:
  7388  000AE0  C00D  FFF6         	movff	i2printf@f,tblptrl
  7389  000AE4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7390  000AE8                     	if	0	;tblptru may be non-zero
  7391  000AE8                     	endif
  7392  000AE8                     	if	0	;tblptru may be non-zero
  7393  000AE8                     	endif
  7394  000AE8  0008               	tblrd		*
  7395  000AEA  50F5               	movf	tablat,w,c
  7396                           
  7397                           ; Switch size 1, requested type "space"
  7398                           ; Number of cases is 1, Range of values is 48 to 48
  7399                           ; switch strategies available:
  7400                           ; Name         Instructions Cycles
  7401                           ; simple_byte            4     3 (average)
  7402                           ;	Chosen strategy is simple_byte
  7403  000AEC  0A30               	xorlw	48	; case 48
  7404  000AEE  B4D8               	btfsc	status,2,c
  7405  000AF0  D7F4               	goto	i2l4307
  7406                           
  7407                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7408                           
  7409                           ;doprnt.c: 586: }
  7410                           
  7411                           ;doprnt.c: 585: break;
  7412  000AF2  C00D  FFF6         	movff	i2printf@f,tblptrl
  7413  000AF6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7414  000AFA                     	if	0	;tblptru may be non-zero
  7415  000AFA                     	endif
  7416  000AFA                     	if	0	;tblptru may be non-zero
  7417  000AFA                     	endif
  7418  000AFA  0008               	tblrd		*
  7419  000AFC  50F5               	movf	tablat,w,c
  7420  000AFE  EC14  F016         	call	i2_isdigit
  7421  000B02  A0D8               	btfss	status,0,c
  7422  000B04  D038               	goto	i2l4331
  7423                           
  7424                           ;doprnt.c: 598: width = 0;
  7425  000B06  0E00               	movlw	0
  7426  000B08  6E1F               	movwf	i2printf@width+1,c
  7427  000B0A  0E00               	movlw	0
  7428  000B0C  6E1E               	movwf	i2printf@width,c
  7429  000B0E                     i2l4317:
  7430                           
  7431                           ;doprnt.c: 600: width *= 10;
  7432  000B0E  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  7433  000B12  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7434  000B16  0E00               	movlw	0
  7435  000B18  6E04               	movwf	i2___wmul@multiplicand+1,c
  7436  000B1A  0E0A               	movlw	10
  7437  000B1C  6E03               	movwf	i2___wmul@multiplicand,c
  7438  000B1E  ECDE  F015         	call	i2___wmul	;wreg free
  7439  000B22  C001  F01E         	movff	?i2___wmul,i2printf@width
  7440  000B26  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  7441                           
  7442                           ;doprnt.c: 601: width += *f++ - '0';
  7443  000B2A  0ED0               	movlw	208
  7444  000B2C  6E13               	movwf	??i2_printf& (0+255),c
  7445  000B2E  0EFF               	movlw	255
  7446  000B30  6E14               	movwf	(??i2_printf+1)& (0+255),c
  7447  000B32  C00D  FFF6         	movff	i2printf@f,tblptrl
  7448  000B36  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7449  000B3A                     	if	0	;tblptru may be non-zero
  7450  000B3A                     	endif
  7451  000B3A                     	if	0	;tblptru may be non-zero
  7452  000B3A                     	endif
  7453  000B3A  0008               	tblrd		*
  7454  000B3C  50F5               	movf	tablat,w,c
  7455  000B3E  6E15               	movwf	(??i2_printf+2)& (0+255),c
  7456  000B40  6A16               	clrf	(??i2_printf+3)& (0+255),c
  7457  000B42  5013               	movf	??i2_printf,w,c
  7458  000B44  2615               	addwf	??i2_printf+2,f,c
  7459  000B46  5014               	movf	??i2_printf+1,w,c
  7460  000B48  2216               	addwfc	??i2_printf+3,f,c
  7461  000B4A  5015               	movf	??i2_printf+2,w,c
  7462  000B4C  261E               	addwf	i2printf@width,f,c
  7463  000B4E  5016               	movf	??i2_printf+3,w,c
  7464  000B50  221F               	addwfc	i2printf@width+1,f,c
  7465  000B52  4A0D               	infsnz	i2printf@f,f,c
  7466  000B54  2A0E               	incf	i2printf@f+1,f,c
  7467                           
  7468                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7469  000B56  C00D  FFF6         	movff	i2printf@f,tblptrl
  7470  000B5A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7471  000B5E                     	if	0	;tblptru may be non-zero
  7472  000B5E                     	endif
  7473  000B5E                     	if	0	;tblptru may be non-zero
  7474  000B5E                     	endif
  7475  000B5E  0008               	tblrd		*
  7476  000B60  50F5               	movf	tablat,w,c
  7477  000B62  EC14  F016         	call	i2_isdigit
  7478  000B66  A0D8               	btfss	status,0,c
  7479  000B68  D006               	goto	i2l4331
  7480  000B6A  D7D1               	goto	i2l4317
  7481  000B6C                     i2l4325:
  7482                           
  7483                           ;doprnt.c: 721: flag |= 0x80;
  7484  000B6C  8E1D               	bsf	i2printf@flag,7,c
  7485                           
  7486                           ;doprnt.c: 723: break;
  7487  000B6E  D01D               	goto	i2l4333
  7488  000B70                     i2l4327:
  7489                           
  7490                           ;doprnt.c: 818: flag |= 0xC0;
  7491  000B70  0EC0               	movlw	192
  7492  000B72  121D               	iorwf	i2printf@flag,f,c
  7493                           
  7494                           ;doprnt.c: 822: }
  7495                           
  7496                           ;doprnt.c: 819: break;
  7497  000B74  D01A               	goto	i2l4333
  7498  000B76                     i2l4331:
  7499  000B76  C00D  FFF6         	movff	i2printf@f,tblptrl
  7500  000B7A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7501  000B7E  4A0D               	infsnz	i2printf@f,f,c
  7502  000B80  2A0E               	incf	i2printf@f+1,f,c
  7503  000B82                     	if	0	;tblptru may be non-zero
  7504  000B82                     	endif
  7505  000B82                     	if	0	;tblptru may be non-zero
  7506  000B82                     	endif
  7507  000B82  0008               	tblrd		*
  7508  000B84  CFF5 F020          	movff	tablat,i2printf@c
  7509  000B88  5020               	movf	i2printf@c,w,c
  7510                           
  7511                           ; Switch size 1, requested type "space"
  7512                           ; Number of cases is 5, Range of values is 0 to 120
  7513                           ; switch strategies available:
  7514                           ; Name         Instructions Cycles
  7515                           ; simple_byte           16     9 (average)
  7516                           ;	Chosen strategy is simple_byte
  7517  000B8A  0A00               	xorlw	0	; case 0
  7518  000B8C  B4D8               	btfsc	status,2,c
  7519  000B8E  0012               	return	
  7520  000B90  0A64               	xorlw	100	; case 100
  7521  000B92  B4D8               	btfsc	status,2,c
  7522  000B94  D00A               	goto	i2l4333
  7523  000B96  0A0D               	xorlw	13	; case 105
  7524  000B98  B4D8               	btfsc	status,2,c
  7525  000B9A  D007               	goto	i2l4333
  7526  000B9C  0A1C               	xorlw	28	; case 117
  7527  000B9E  B4D8               	btfsc	status,2,c
  7528  000BA0  D7E7               	goto	i2l4327
  7529  000BA2  0A0D               	xorlw	13	; case 120
  7530  000BA4  B4D8               	btfsc	status,2,c
  7531  000BA6  D7E2               	goto	i2l4325
  7532  000BA8  D10D               	goto	i2l4431
  7533  000BAA                     i2l4333:
  7534                           
  7535                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7536  000BAA  C01D  F013         	movff	i2printf@flag,??i2_printf
  7537  000BAE  0EC0               	movlw	192
  7538  000BB0  1613               	andwf	??i2_printf,f,c
  7539  000BB2  A4D8               	btfss	status,2,c
  7540  000BB4  D015               	goto	i2l4345
  7541                           
  7542                           ;doprnt.c: 1253: {
  7543                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7544  000BB6  C018  FFD9         	movff	i2printf@ap,fsr2l
  7545  000BBA  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7546  000BBE  CFDE F01B          	movff	postinc2,i2printf@val
  7547  000BC2  CFDD F01C          	movff	postdec2,i2printf@val+1
  7548  000BC6  0E02               	movlw	2
  7549  000BC8  2618               	addwf	i2printf@ap,f,c
  7550  000BCA  0E00               	movlw	0
  7551  000BCC  2219               	addwfc	i2printf@ap+1,f,c
  7552                           
  7553                           ;doprnt.c: 1261: if((int)val < 0) {
  7554  000BCE  AE1C               	btfss	i2printf@val+1,7,c
  7555  000BD0  D044               	goto	i2l4379
  7556                           
  7557                           ;doprnt.c: 1262: flag |= 0x03;
  7558  000BD2  0E03               	movlw	3
  7559  000BD4  121D               	iorwf	i2printf@flag,f,c
  7560                           
  7561                           ;doprnt.c: 1263: val = -val;
  7562  000BD6  6C1B               	negf	i2printf@val,c
  7563  000BD8  1E1C               	comf	i2printf@val+1,f,c
  7564  000BDA  B0D8               	btfsc	status,0,c
  7565  000BDC  2A1C               	incf	i2printf@val+1,f,c
  7566                           
  7567                           ;doprnt.c: 1264: }
  7568                           ;doprnt.c: 1266: }
  7569  000BDE  D03D               	goto	i2l4379
  7570  000BE0                     i2l4345:
  7571                           
  7572                           ;doprnt.c: 1268: else
  7573                           ;doprnt.c: 1273: {
  7574                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7575  000BE0  C018  FFD9         	movff	i2printf@ap,fsr2l
  7576  000BE4  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7577  000BE8  CFDE F01B          	movff	postinc2,i2printf@val
  7578  000BEC  CFDD F01C          	movff	postdec2,i2printf@val+1
  7579  000BF0  0E02               	movlw	2
  7580  000BF2  2618               	addwf	i2printf@ap,f,c
  7581  000BF4  0E00               	movlw	0
  7582  000BF6  2219               	addwfc	i2printf@ap+1,f,c
  7583                           
  7584                           ;doprnt.c: 1287: }
  7585                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7586  000BF8  D030               	goto	i2l4379
  7587  000BFA                     i2l4349:
  7588                           
  7589                           ;doprnt.c: 1302: case 0xC0:
  7590                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7591  000BFA  0E01               	movlw	1
  7592  000BFC  6E20               	movwf	i2printf@c,c
  7593  000BFE                     i2l4351:
  7594  000BFE  0E05               	movlw	5
  7595  000C00  1820               	xorwf	i2printf@c,w,c
  7596  000C02  B4D8               	btfsc	status,2,c
  7597  000C04  D035               	goto	i2l4381
  7598                           
  7599                           ;doprnt.c: 1306: if(val < dpowers[c])
  7600  000C06  5020               	movf	i2printf@c,w,c
  7601  000C08  0D02               	mullw	2
  7602  000C0A  0EC8               	movlw	low _dpowers
  7603  000C0C  24F3               	addwf	prodl,w,c
  7604  000C0E  6EF6               	movwf	tblptrl,c
  7605  000C10  0EFD               	movlw	high _dpowers
  7606  000C12  20F4               	addwfc	prodh,w,c
  7607  000C14  6EF7               	movwf	tblptrh,c
  7608  000C16                     	if	0	;There are less than 3 active tblptr bytes
  7609  000C16                     	endif
  7610  000C16  0009               	tblrd		*+
  7611  000C18  50F5               	movf	tablat,w,c
  7612  000C1A  5C1B               	subwf	i2printf@val,w,c
  7613  000C1C  0009               	tblrd		*+
  7614  000C1E  50F5               	movf	tablat,w,c
  7615  000C20  581C               	subwfb	i2printf@val+1,w,c
  7616  000C22  A0D8               	btfss	status,0,c
  7617  000C24  D025               	goto	i2l4381
  7618                           
  7619                           ;doprnt.c: 1307: break;
  7620  000C26  2A20               	incf	i2printf@c,f,c
  7621  000C28  D7EA               	goto	i2l4351
  7622  000C2A                     i2l4363:
  7623                           
  7624                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7625  000C2A  0E01               	movlw	1
  7626  000C2C  6E20               	movwf	i2printf@c,c
  7627  000C2E                     i2l4365:
  7628  000C2E  0E04               	movlw	4
  7629  000C30  1820               	xorwf	i2printf@c,w,c
  7630  000C32  B4D8               	btfsc	status,2,c
  7631  000C34  D01D               	goto	i2l4381
  7632                           
  7633                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7634  000C36  5020               	movf	i2printf@c,w,c
  7635  000C38  0D02               	mullw	2
  7636  000C3A  0ED2               	movlw	low _hexpowers
  7637  000C3C  24F3               	addwf	prodl,w,c
  7638  000C3E  6EF6               	movwf	tblptrl,c
  7639  000C40  0EFD               	movlw	high _hexpowers
  7640  000C42  20F4               	addwfc	prodh,w,c
  7641  000C44  6EF7               	movwf	tblptrh,c
  7642  000C46                     	if	0	;There are less than 3 active tblptr bytes
  7643  000C46                     	endif
  7644  000C46  0009               	tblrd		*+
  7645  000C48  50F5               	movf	tablat,w,c
  7646  000C4A  5C1B               	subwf	i2printf@val,w,c
  7647  000C4C  0009               	tblrd		*+
  7648  000C4E  50F5               	movf	tablat,w,c
  7649  000C50  581C               	subwfb	i2printf@val+1,w,c
  7650  000C52  A0D8               	btfss	status,0,c
  7651  000C54  D00D               	goto	i2l4381
  7652                           
  7653                           ;doprnt.c: 1318: break;
  7654  000C56  2A20               	incf	i2printf@c,f,c
  7655  000C58  D7EA               	goto	i2l4365
  7656  000C5A                     i2l4379:
  7657  000C5A  501D               	movf	i2printf@flag,w,c
  7658  000C5C  0BC0               	andlw	192
  7659                           
  7660                           ; Switch size 1, requested type "space"
  7661                           ; Number of cases is 3, Range of values is 0 to 192
  7662                           ; switch strategies available:
  7663                           ; Name         Instructions Cycles
  7664                           ; simple_byte           10     6 (average)
  7665                           ;	Chosen strategy is simple_byte
  7666  000C5E  0A00               	xorlw	0	; case 0
  7667  000C60  B4D8               	btfsc	status,2,c
  7668  000C62  D7CB               	goto	i2l4349
  7669  000C64  0A80               	xorlw	128	; case 128
  7670  000C66  B4D8               	btfsc	status,2,c
  7671  000C68  D7E0               	goto	i2l4363
  7672  000C6A  0A40               	xorlw	64	; case 192
  7673  000C6C  B4D8               	btfsc	status,2,c
  7674  000C6E  D7C5               	goto	i2l4349
  7675  000C70                     i2l4381:
  7676                           
  7677                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7678  000C70  501E               	movf	i2printf@width,w,c
  7679  000C72  101F               	iorwf	i2printf@width+1,w,c
  7680  000C74  B4D8               	btfsc	status,2,c
  7681  000C76  D009               	goto	i2l4387
  7682  000C78  C01D  F013         	movff	i2printf@flag,??i2_printf
  7683  000C7C  0E03               	movlw	3
  7684  000C7E  1613               	andwf	??i2_printf,f,c
  7685  000C80  B4D8               	btfsc	status,2,c
  7686  000C82  D003               	goto	i2l4387
  7687                           
  7688                           ;doprnt.c: 1346: width--;
  7689  000C84  061E               	decf	i2printf@width,f,c
  7690  000C86  A0D8               	btfss	status,0,c
  7691  000C88  061F               	decf	i2printf@width+1,f,c
  7692  000C8A                     i2l4387:
  7693                           
  7694                           ;doprnt.c: 1381: if(width > c)
  7695  000C8A  0E80               	movlw	128
  7696  000C8C  BE20               	btfsc	i2printf@c,7,c
  7697  000C8E  0E7F               	movlw	127
  7698  000C90  6E13               	movwf	??i2_printf& (0+255),c
  7699  000C92  501E               	movf	i2printf@width,w,c
  7700  000C94  5C20               	subwf	i2printf@c,w,c
  7701  000C96  501F               	movf	i2printf@width+1,w,c
  7702  000C98  0A80               	xorlw	128
  7703  000C9A  5813               	subwfb	??i2_printf& (0+255),w,c
  7704  000C9C  B0D8               	btfsc	status,0,c
  7705  000C9E  D007               	goto	i2l4391
  7706                           
  7707                           ;doprnt.c: 1382: width -= c;
  7708  000CA0  5020               	movf	i2printf@c,w,c
  7709  000CA2  5E1E               	subwf	i2printf@width,f,c
  7710  000CA4  0E00               	movlw	0
  7711  000CA6  BE20               	btfsc	i2printf@c,7,c
  7712  000CA8  0EFF               	movlw	255
  7713  000CAA  5A1F               	subwfb	i2printf@width+1,f,c
  7714  000CAC  D004               	goto	i2l4393
  7715  000CAE                     i2l4391:
  7716                           
  7717                           ;doprnt.c: 1383: else
  7718                           ;doprnt.c: 1384: width = 0;
  7719  000CAE  0E00               	movlw	0
  7720  000CB0  6E1F               	movwf	i2printf@width+1,c
  7721  000CB2  0E00               	movlw	0
  7722  000CB4  6E1E               	movwf	i2printf@width,c
  7723  000CB6                     i2l4393:
  7724                           
  7725                           ;doprnt.c: 1387: if(flag & 0x04) {
  7726  000CB6  A41D               	btfss	i2printf@flag,2,c
  7727  000CB8  D014               	goto	i2l4405
  7728                           
  7729                           ;doprnt.c: 1392: if(flag & 0x03)
  7730  000CBA  C01D  F013         	movff	i2printf@flag,??i2_printf
  7731  000CBE  0E03               	movlw	3
  7732  000CC0  1613               	andwf	??i2_printf,f,c
  7733  000CC2  B4D8               	btfsc	status,2,c
  7734  000CC4  D003               	goto	i2l4399
  7735                           
  7736                           ;doprnt.c: 1393: (putch('-') );
  7737  000CC6  0E2D               	movlw	45
  7738  000CC8  EC52  F016         	call	i2_putch
  7739  000CCC                     i2l4399:
  7740                           
  7741                           ;doprnt.c: 1415: if(width)
  7742  000CCC  501E               	movf	i2printf@width,w,c
  7743  000CCE  101F               	iorwf	i2printf@width+1,w,c
  7744  000CD0  B4D8               	btfsc	status,2,c
  7745  000CD2  D01E               	goto	i2l4415
  7746                           
  7747                           ;doprnt.c: 1417: (putch('0') );
  7748                           
  7749                           ;doprnt.c: 1416: do
  7750  000CD4  0E30               	movlw	48
  7751  000CD6  EC52  F016         	call	i2_putch
  7752                           
  7753                           ;doprnt.c: 1418: while(--width);
  7754  000CDA  061E               	decf	i2printf@width,f,c
  7755  000CDC  A0D8               	btfss	status,0,c
  7756  000CDE  061F               	decf	i2printf@width+1,f,c
  7757  000CE0  D7F5               	goto	i2l4399
  7758  000CE2                     i2l4405:
  7759                           
  7760                           ;doprnt.c: 1422: {
  7761                           ;doprnt.c: 1424: if(width
  7762                           ;doprnt.c: 1428: )
  7763  000CE2  501E               	movf	i2printf@width,w,c
  7764  000CE4  101F               	iorwf	i2printf@width+1,w,c
  7765  000CE6  B4D8               	btfsc	status,2,c
  7766  000CE8  D00A               	goto	i2l4411
  7767  000CEA                     i2l4407:
  7768                           
  7769                           ;doprnt.c: 1430: (putch(' ') );
  7770  000CEA  0E20               	movlw	32
  7771  000CEC  EC52  F016         	call	i2_putch
  7772                           
  7773                           ;doprnt.c: 1431: while(--width);
  7774  000CF0  061E               	decf	i2printf@width,f,c
  7775  000CF2  A0D8               	btfss	status,0,c
  7776  000CF4  061F               	decf	i2printf@width+1,f,c
  7777  000CF6  501E               	movf	i2printf@width,w,c
  7778  000CF8  101F               	iorwf	i2printf@width+1,w,c
  7779  000CFA  A4D8               	btfss	status,2,c
  7780  000CFC  D7F6               	goto	i2l4407
  7781  000CFE                     i2l4411:
  7782                           
  7783                           ;doprnt.c: 1438: if(flag & 0x03)
  7784  000CFE  C01D  F013         	movff	i2printf@flag,??i2_printf
  7785  000D02  0E03               	movlw	3
  7786  000D04  1613               	andwf	??i2_printf,f,c
  7787  000D06  B4D8               	btfsc	status,2,c
  7788  000D08  D003               	goto	i2l4415
  7789                           
  7790                           ;doprnt.c: 1439: (putch('-') );
  7791  000D0A  0E2D               	movlw	45
  7792  000D0C  EC52  F016         	call	i2_putch
  7793  000D10                     i2l4415:
  7794                           
  7795                           ;doprnt.c: 1469: }
  7796                           ;doprnt.c: 1472: prec = c;
  7797  000D10  C020  F01A         	movff	i2printf@c,i2printf@prec
  7798                           
  7799                           ;doprnt.c: 1474: while(prec--) {
  7800  000D14  D053               	goto	i2l4429
  7801  000D16                     i2l4417:
  7802                           
  7803                           ;doprnt.c: 1486: case 0xC0:
  7804                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7805  000D16  501A               	movf	i2printf@prec,w,c
  7806  000D18  0D02               	mullw	2
  7807  000D1A  0EC8               	movlw	low _dpowers
  7808  000D1C  24F3               	addwf	prodl,w,c
  7809  000D1E  6EF6               	movwf	tblptrl,c
  7810  000D20  0EFD               	movlw	high _dpowers
  7811  000D22  20F4               	addwfc	prodh,w,c
  7812  000D24  6EF7               	movwf	tblptrh,c
  7813  000D26                     	if	0	;There are less than 3 active tblptr bytes
  7814  000D26                     	endif
  7815  000D26  0009               	tblrd		*+
  7816  000D28  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7817  000D2C  000A               	tblrd		*-
  7818  000D2E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7819  000D32  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7820  000D36  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7821  000D3A  EC75  F014         	call	i2___lwdiv	;wreg free
  7822  000D3E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7823  000D42  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7824  000D46  0E00               	movlw	0
  7825  000D48  6E0B               	movwf	i2___lwmod@divisor+1,c
  7826  000D4A  0E0A               	movlw	10
  7827  000D4C  6E0A               	movwf	i2___lwmod@divisor,c
  7828  000D4E  ECED  F014         	call	i2___lwmod	;wreg free
  7829  000D52  5008               	movf	?i2___lwmod,w,c
  7830  000D54  0F30               	addlw	48
  7831  000D56  6E20               	movwf	i2printf@c,c
  7832                           
  7833                           ;doprnt.c: 1491: break;
  7834  000D58  D02E               	goto	i2l4427
  7835  000D5A                     i2l4419:
  7836                           
  7837                           ;doprnt.c: 1499: {
  7838                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7839  000D5A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7840  000D5E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7841  000D62  501A               	movf	i2printf@prec,w,c
  7842  000D64  0D02               	mullw	2
  7843  000D66  0ED2               	movlw	low _hexpowers
  7844  000D68  24F3               	addwf	prodl,w,c
  7845  000D6A  6EF6               	movwf	tblptrl,c
  7846  000D6C  0EFD               	movlw	high _hexpowers
  7847  000D6E  20F4               	addwfc	prodh,w,c
  7848  000D70  6EF7               	movwf	tblptrh,c
  7849  000D72                     	if	0	;There are less than 3 active tblptr bytes
  7850  000D72                     	endif
  7851  000D72  0009               	tblrd		*+
  7852  000D74  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7853  000D78  000A               	tblrd		*-
  7854  000D7A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7855  000D7E  EC75  F014         	call	i2___lwdiv	;wreg free
  7856  000D82  5001               	movf	?i2___lwdiv,w,c
  7857  000D84  0B0F               	andlw	15
  7858  000D86  6E17               	movwf	i2printf@idx,c
  7859                           
  7860                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7861  000D88  5017               	movf	i2printf@idx,w,c
  7862  000D8A  0D01               	mullw	1
  7863  000D8C  0E95               	movlw	low STR_25
  7864  000D8E  24F3               	addwf	prodl,w,c
  7865  000D90  6EF6               	movwf	tblptrl,c
  7866  000D92  0EFF               	movlw	high STR_25
  7867  000D94  20F4               	addwfc	prodh,w,c
  7868  000D96  6EF7               	movwf	tblptrh,c
  7869  000D98                     	if	0	;There are less than 3 active tblptr bytes
  7870  000D98                     	endif
  7871  000D98  0008               	tblrd		*
  7872  000D9A  CFF5 F020          	movff	tablat,i2printf@c
  7873                           
  7874                           ;doprnt.c: 1523: }
  7875                           
  7876                           ;doprnt.c: 1508: }
  7877                           ;doprnt.c: 1510: break;
  7878  000D9E  D00B               	goto	i2l4427
  7879  000DA0                     i2l4425:
  7880  000DA0  501D               	movf	i2printf@flag,w,c
  7881  000DA2  0BC0               	andlw	192
  7882                           
  7883                           ; Switch size 1, requested type "space"
  7884                           ; Number of cases is 3, Range of values is 0 to 192
  7885                           ; switch strategies available:
  7886                           ; Name         Instructions Cycles
  7887                           ; simple_byte           10     6 (average)
  7888                           ;	Chosen strategy is simple_byte
  7889  000DA4  0A00               	xorlw	0	; case 0
  7890  000DA6  B4D8               	btfsc	status,2,c
  7891  000DA8  D7B6               	goto	i2l4417
  7892  000DAA  0A80               	xorlw	128	; case 128
  7893  000DAC  B4D8               	btfsc	status,2,c
  7894  000DAE  D7D5               	goto	i2l4419
  7895  000DB0  0A40               	xorlw	64	; case 192
  7896  000DB2  B4D8               	btfsc	status,2,c
  7897  000DB4  D7B0               	goto	i2l4417
  7898  000DB6                     i2l4427:
  7899                           
  7900                           ;doprnt.c: 1524: (putch(c) );
  7901  000DB6  5020               	movf	i2printf@c,w,c
  7902  000DB8  EC52  F016         	call	i2_putch
  7903  000DBC                     i2l4429:
  7904  000DBC  061A               	decf	i2printf@prec,f,c
  7905  000DBE  281A               	incf	i2printf@prec,w,c
  7906  000DC0  A4D8               	btfss	status,2,c
  7907  000DC2  D7EE               	goto	i2l4425
  7908  000DC4                     i2l4431:
  7909  000DC4  C00D  FFF6         	movff	i2printf@f,tblptrl
  7910  000DC8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7911  000DCC  4A0D               	infsnz	i2printf@f,f,c
  7912  000DCE  2A0E               	incf	i2printf@f+1,f,c
  7913  000DD0                     	if	0	;tblptru may be non-zero
  7914  000DD0                     	endif
  7915  000DD0                     	if	0	;tblptru may be non-zero
  7916  000DD0                     	endif
  7917  000DD0  0008               	tblrd		*
  7918  000DD2  CFF5 F020          	movff	tablat,i2printf@c
  7919  000DD6  5020               	movf	i2printf@c,w,c
  7920  000DD8  B4D8               	btfsc	status,2,c
  7921  000DDA  0012               	return	
  7922  000DDC  D66F               	goto	i2l4301
  7923  000DDE                     __end_ofi2_printf:
  7924                           	opt stack 0
  7925                           pclatu	equ	0xFFB
  7926                           pclath	equ	0xFFA
  7927                           tblptru	equ	0xFF8
  7928                           tblptrh	equ	0xFF7
  7929                           tblptrl	equ	0xFF6
  7930                           tablat	equ	0xFF5
  7931                           prodh	equ	0xFF4
  7932                           prodl	equ	0xFF3
  7933                           intcon	equ	0xFF2
  7934                           intcon2	equ	0xFF1
  7935                           intcon3	equ	0xFF0
  7936                           postinc0	equ	0xFEE
  7937                           fsr0h	equ	0xFEA
  7938                           fsr0l	equ	0xFE9
  7939                           wreg	equ	0xFE8
  7940                           fsr1h	equ	0xFE2
  7941                           fsr1l	equ	0xFE1
  7942                           indf2	equ	0xFDF
  7943                           postinc2	equ	0xFDE
  7944                           postdec2	equ	0xFDD
  7945                           fsr2h	equ	0xFDA
  7946                           fsr2l	equ	0xFD9
  7947                           status	equ	0xFD8
  7948                           
  7949 ;; *************** function i2_putch *****************
  7950 ;; Defined at:
  7951 ;;		line 31 in file "lcd.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  data            1    wreg     unsigned char 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  data            1    2[COMRAM] unsigned char 
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  1    wreg      void 
  7958 ;; Registers used:
  7959 ;;		wreg, status,2, status,0, cstack
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;Total ram usage:        1 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; Hardware stack levels required when called:    1
  7972 ;; This function calls:
  7973 ;;		i2_lcdNibble
  7974 ;; This function is called by:
  7975 ;;		i2_printf
  7976 ;; This function uses a non-reentrant model
  7977 ;;
  7978                           
  7979                           	psect	text32
  7980  002CA4                     __ptext32:
  7981                           	opt stack 0
  7982  002CA4                     i2_putch:
  7983                           	opt stack 23
  7984                           
  7985                           ;incstack = 0
  7986                           ;i2putch@data stored from wreg
  7987  002CA4  6E03               	movwf	i2putch@data,c
  7988                           
  7989                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7990  002CA6  848C               	bsf	3980,2,c	;volatile
  7991                           
  7992                           ;lcd.c: 33: lcdNibble(data);
  7993  002CA8  5003               	movf	i2putch@data,w,c
  7994  002CAA  ECC6  F014         	call	i2_lcdNibble
  7995  002CAE  0012               	return		;funcret
  7996  002CB0                     __end_ofi2_putch:
  7997                           	opt stack 0
  7998                           pclatu	equ	0xFFB
  7999                           pclath	equ	0xFFA
  8000                           tblptru	equ	0xFF8
  8001                           tblptrh	equ	0xFF7
  8002                           tblptrl	equ	0xFF6
  8003                           tablat	equ	0xFF5
  8004                           prodh	equ	0xFF4
  8005                           prodl	equ	0xFF3
  8006                           intcon	equ	0xFF2
  8007                           intcon2	equ	0xFF1
  8008                           intcon3	equ	0xFF0
  8009                           postinc0	equ	0xFEE
  8010                           fsr0h	equ	0xFEA
  8011                           fsr0l	equ	0xFE9
  8012                           wreg	equ	0xFE8
  8013                           fsr1h	equ	0xFE2
  8014                           fsr1l	equ	0xFE1
  8015                           indf2	equ	0xFDF
  8016                           postinc2	equ	0xFDE
  8017                           postdec2	equ	0xFDD
  8018                           fsr2h	equ	0xFDA
  8019                           fsr2l	equ	0xFD9
  8020                           status	equ	0xFD8
  8021                           
  8022 ;; *************** function i2_isdigit *****************
  8023 ;; Defined at:
  8024 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;  c               1    wreg     unsigned char 
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;  c               1    2[COMRAM] unsigned char 
  8029 ;; Return value:  Size  Location     Type
  8030 ;;		None               void
  8031 ;; Registers used:
  8032 ;;		wreg, status,2, status,0
  8033 ;; Tracked objects:
  8034 ;;		On entry : 0/0
  8035 ;;		On exit  : 0/0
  8036 ;;		Unchanged: 0/0
  8037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;Total ram usage:        3 bytes
  8043 ;; Hardware stack levels used:    1
  8044 ;; This function calls:
  8045 ;;		Nothing
  8046 ;; This function is called by:
  8047 ;;		i2_printf
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           	psect	text33
  8052  002C28                     __ptext33:
  8053                           	opt stack 0
  8054  002C28                     i2_isdigit:
  8055                           	opt stack 24
  8056                           
  8057                           ;incstack = 0
  8058                           ;i2isdigit@c stored from wreg
  8059  002C28  6E03               	movwf	i2isdigit@c,c
  8060  002C2A  0E00               	movlw	0
  8061  002C2C  6E02               	movwf	i2_isdigit$824,c
  8062  002C2E  0E3A               	movlw	58
  8063  002C30  6003               	cpfslt	i2isdigit@c,c
  8064  002C32  D005               	goto	i2l3963
  8065  002C34  0E2F               	movlw	47
  8066  002C36  6403               	cpfsgt	i2isdigit@c,c
  8067  002C38  D002               	goto	i2l3963
  8068  002C3A  0E01               	movlw	1
  8069  002C3C  6E02               	movwf	i2_isdigit$824,c
  8070  002C3E                     i2l3963:
  8071  002C3E  C002  F001         	movff	i2_isdigit$824,??i2_isdigit
  8072  002C42  3001               	rrcf	??i2_isdigit,w,c
  8073  002C44  0012               	return	
  8074  002C46                     __end_ofi2_isdigit:
  8075                           	opt stack 0
  8076                           pclatu	equ	0xFFB
  8077                           pclath	equ	0xFFA
  8078                           tblptru	equ	0xFF8
  8079                           tblptrh	equ	0xFF7
  8080                           tblptrl	equ	0xFF6
  8081                           tablat	equ	0xFF5
  8082                           prodh	equ	0xFF4
  8083                           prodl	equ	0xFF3
  8084                           intcon	equ	0xFF2
  8085                           intcon2	equ	0xFF1
  8086                           intcon3	equ	0xFF0
  8087                           postinc0	equ	0xFEE
  8088                           fsr0h	equ	0xFEA
  8089                           fsr0l	equ	0xFE9
  8090                           wreg	equ	0xFE8
  8091                           fsr1h	equ	0xFE2
  8092                           fsr1l	equ	0xFE1
  8093                           indf2	equ	0xFDF
  8094                           postinc2	equ	0xFDE
  8095                           postdec2	equ	0xFDD
  8096                           fsr2h	equ	0xFDA
  8097                           fsr2l	equ	0xFD9
  8098                           status	equ	0xFD8
  8099                           
  8100 ;; *************** function i2___lwmod *****************
  8101 ;; Defined at:
  8102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;  dividend        2    7[COMRAM] unsigned int 
  8105 ;;  divisor         2    9[COMRAM] unsigned int 
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  2    7[COMRAM] unsigned int 
  8110 ;; Registers used:
  8111 ;;		wreg, status,2, status,0
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8117 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;Total ram usage:        5 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; This function calls:
  8124 ;;		Nothing
  8125 ;; This function is called by:
  8126 ;;		i2_printf
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           	psect	text34
  8131  0029DA                     __ptext34:
  8132                           	opt stack 0
  8133  0029DA                     i2___lwmod:
  8134                           	opt stack 24
  8135                           
  8136                           ;incstack = 0
  8137  0029DA  500A               	movf	i2___lwmod@divisor,w,c
  8138  0029DC  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8139  0029DE  B4D8               	btfsc	status,2,c
  8140  0029E0  D018               	goto	i2l905
  8141  0029E2  0E01               	movlw	1
  8142  0029E4  6E0C               	movwf	i2___lwmod@counter,c
  8143  0029E6  D004               	goto	i2l3995
  8144  0029E8                     i2l3993:
  8145  0029E8  90D8               	bcf	status,0,c
  8146  0029EA  360A               	rlcf	i2___lwmod@divisor,f,c
  8147  0029EC  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8148  0029EE  2A0C               	incf	i2___lwmod@counter,f,c
  8149  0029F0                     i2l3995:
  8150  0029F0  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8151  0029F2  D7FA               	goto	i2l3993
  8152  0029F4                     i2l3997:
  8153  0029F4  500A               	movf	i2___lwmod@divisor,w,c
  8154  0029F6  5C08               	subwf	i2___lwmod@dividend,w,c
  8155  0029F8  500B               	movf	i2___lwmod@divisor+1,w,c
  8156  0029FA  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8157  0029FC  A0D8               	btfss	status,0,c
  8158  0029FE  D004               	goto	i2l4001
  8159  002A00  500A               	movf	i2___lwmod@divisor,w,c
  8160  002A02  5E08               	subwf	i2___lwmod@dividend,f,c
  8161  002A04  500B               	movf	i2___lwmod@divisor+1,w,c
  8162  002A06  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8163  002A08                     i2l4001:
  8164  002A08  90D8               	bcf	status,0,c
  8165  002A0A  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8166  002A0C  320A               	rrcf	i2___lwmod@divisor,f,c
  8167  002A0E  2E0C               	decfsz	i2___lwmod@counter,f,c
  8168  002A10  D7F1               	goto	i2l3997
  8169  002A12                     i2l905:
  8170  002A12  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8171  002A16  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8172  002A1A  0012               	return		;funcret
  8173  002A1C                     __end_ofi2___lwmod:
  8174                           	opt stack 0
  8175                           pclatu	equ	0xFFB
  8176                           pclath	equ	0xFFA
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           intcon	equ	0xFF2
  8184                           intcon2	equ	0xFF1
  8185                           intcon3	equ	0xFF0
  8186                           postinc0	equ	0xFEE
  8187                           fsr0h	equ	0xFEA
  8188                           fsr0l	equ	0xFE9
  8189                           wreg	equ	0xFE8
  8190                           fsr1h	equ	0xFE2
  8191                           fsr1l	equ	0xFE1
  8192                           indf2	equ	0xFDF
  8193                           postinc2	equ	0xFDE
  8194                           postdec2	equ	0xFDD
  8195                           fsr2h	equ	0xFDA
  8196                           fsr2l	equ	0xFD9
  8197                           status	equ	0xFD8
  8198                           
  8199 ;; *************** function i2___lwdiv *****************
  8200 ;; Defined at:
  8201 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  dividend        2    0[COMRAM] unsigned int 
  8204 ;;  divisor         2    2[COMRAM] unsigned int 
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8207 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  2    0[COMRAM] unsigned int 
  8210 ;; Registers used:
  8211 ;;		wreg, status,2, status,0
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;Total ram usage:        7 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; This function calls:
  8224 ;;		Nothing
  8225 ;; This function is called by:
  8226 ;;		i2_printf
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           	psect	text35
  8231  0028EA                     __ptext35:
  8232                           	opt stack 0
  8233  0028EA                     i2___lwdiv:
  8234                           	opt stack 24
  8235                           
  8236                           ;incstack = 0
  8237  0028EA  0E00               	movlw	0
  8238  0028EC  6E06               	movwf	i2___lwdiv@quotient+1,c
  8239  0028EE  0E00               	movlw	0
  8240  0028F0  6E05               	movwf	i2___lwdiv@quotient,c
  8241  0028F2  5003               	movf	i2___lwdiv@divisor,w,c
  8242  0028F4  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8243  0028F6  B4D8               	btfsc	status,2,c
  8244  0028F8  D01C               	goto	i2l895
  8245  0028FA  0E01               	movlw	1
  8246  0028FC  6E07               	movwf	i2___lwdiv@counter,c
  8247  0028FE  D004               	goto	i2l3975
  8248  002900                     i2l3973:
  8249  002900  90D8               	bcf	status,0,c
  8250  002902  3603               	rlcf	i2___lwdiv@divisor,f,c
  8251  002904  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8252  002906  2A07               	incf	i2___lwdiv@counter,f,c
  8253  002908                     i2l3975:
  8254  002908  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8255  00290A  D7FA               	goto	i2l3973
  8256  00290C                     i2l3977:
  8257  00290C  90D8               	bcf	status,0,c
  8258  00290E  3605               	rlcf	i2___lwdiv@quotient,f,c
  8259  002910  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8260  002912  5003               	movf	i2___lwdiv@divisor,w,c
  8261  002914  5C01               	subwf	i2___lwdiv@dividend,w,c
  8262  002916  5004               	movf	i2___lwdiv@divisor+1,w,c
  8263  002918  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8264  00291A  A0D8               	btfss	status,0,c
  8265  00291C  D005               	goto	i2l3985
  8266  00291E  5003               	movf	i2___lwdiv@divisor,w,c
  8267  002920  5E01               	subwf	i2___lwdiv@dividend,f,c
  8268  002922  5004               	movf	i2___lwdiv@divisor+1,w,c
  8269  002924  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8270  002926  8005               	bsf	i2___lwdiv@quotient,0,c
  8271  002928                     i2l3985:
  8272  002928  90D8               	bcf	status,0,c
  8273  00292A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8274  00292C  3203               	rrcf	i2___lwdiv@divisor,f,c
  8275  00292E  2E07               	decfsz	i2___lwdiv@counter,f,c
  8276  002930  D7ED               	goto	i2l3977
  8277  002932                     i2l895:
  8278  002932  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8279  002936  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8280  00293A  0012               	return		;funcret
  8281  00293C                     __end_ofi2___lwdiv:
  8282                           	opt stack 0
  8283                           pclatu	equ	0xFFB
  8284                           pclath	equ	0xFFA
  8285                           tblptru	equ	0xFF8
  8286                           tblptrh	equ	0xFF7
  8287                           tblptrl	equ	0xFF6
  8288                           tablat	equ	0xFF5
  8289                           prodh	equ	0xFF4
  8290                           prodl	equ	0xFF3
  8291                           intcon	equ	0xFF2
  8292                           intcon2	equ	0xFF1
  8293                           intcon3	equ	0xFF0
  8294                           postinc0	equ	0xFEE
  8295                           fsr0h	equ	0xFEA
  8296                           fsr0l	equ	0xFE9
  8297                           wreg	equ	0xFE8
  8298                           fsr1h	equ	0xFE2
  8299                           fsr1l	equ	0xFE1
  8300                           indf2	equ	0xFDF
  8301                           postinc2	equ	0xFDE
  8302                           postdec2	equ	0xFDD
  8303                           fsr2h	equ	0xFDA
  8304                           fsr2l	equ	0xFD9
  8305                           status	equ	0xFD8
  8306                           
  8307 ;; *************** function i2_lcdInst *****************
  8308 ;; Defined at:
  8309 ;;		line 26 in file "lcd.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  data            1    wreg     unsigned char 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  data            1    2[COMRAM] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  1    wreg      void 
  8316 ;; Registers used:
  8317 ;;		wreg, status,2, status,0, cstack
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;Total ram usage:        1 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    1
  8330 ;; This function calls:
  8331 ;;		i2_lcdNibble
  8332 ;; This function is called by:
  8333 ;;		_isr
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           	psect	text36
  8338  002CB0                     __ptext36:
  8339                           	opt stack 0
  8340  002CB0                     i2_lcdInst:
  8341                           	opt stack 24
  8342                           
  8343                           ;incstack = 0
  8344                           ;i2lcdInst@data stored from wreg
  8345  002CB0  6E03               	movwf	i2lcdInst@data,c
  8346                           
  8347                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  8348  002CB2  948C               	bcf	3980,2,c	;volatile
  8349                           
  8350                           ;lcd.c: 28: lcdNibble(data);
  8351  002CB4  5003               	movf	i2lcdInst@data,w,c
  8352  002CB6  ECC6  F014         	call	i2_lcdNibble
  8353  002CBA  0012               	return		;funcret
  8354  002CBC                     __end_ofi2_lcdInst:
  8355                           	opt stack 0
  8356                           pclatu	equ	0xFFB
  8357                           pclath	equ	0xFFA
  8358                           tblptru	equ	0xFF8
  8359                           tblptrh	equ	0xFF7
  8360                           tblptrl	equ	0xFF6
  8361                           tablat	equ	0xFF5
  8362                           prodh	equ	0xFF4
  8363                           prodl	equ	0xFF3
  8364                           intcon	equ	0xFF2
  8365                           intcon2	equ	0xFF1
  8366                           intcon3	equ	0xFF0
  8367                           postinc0	equ	0xFEE
  8368                           fsr0h	equ	0xFEA
  8369                           fsr0l	equ	0xFE9
  8370                           wreg	equ	0xFE8
  8371                           fsr1h	equ	0xFE2
  8372                           fsr1l	equ	0xFE1
  8373                           indf2	equ	0xFDF
  8374                           postinc2	equ	0xFDE
  8375                           postdec2	equ	0xFDD
  8376                           fsr2h	equ	0xFDA
  8377                           fsr2l	equ	0xFD9
  8378                           status	equ	0xFD8
  8379                           
  8380 ;; *************** function i2_lcdNibble *****************
  8381 ;; Defined at:
  8382 ;;		line 36 in file "lcd.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  data            1    wreg     unsigned char 
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;  data            1    1[COMRAM] unsigned char 
  8387 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  1    wreg      void 
  8390 ;; Registers used:
  8391 ;;		wreg, status,2, status,0
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8400 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8401 ;;Total ram usage:        2 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; This function calls:
  8404 ;;		Nothing
  8405 ;; This function is called by:
  8406 ;;		i2_lcdInst
  8407 ;;		i2_putch
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           	psect	text37
  8412  00298C                     __ptext37:
  8413                           	opt stack 0
  8414  00298C                     i2_lcdNibble:
  8415                           	opt stack 23
  8416                           
  8417                           ;incstack = 0
  8418                           ;i2lcdNibble@data stored from wreg
  8419  00298C  6E02               	movwf	i2lcdNibble@data,c
  8420                           
  8421                           ;lcd.c: 38: char temp = data & 0xF0;
  8422  00298E  5002               	movf	i2lcdNibble@data,w,c
  8423  002990  0BF0               	andlw	240
  8424  002992  6E01               	movwf	i2lcdNibble@temp,c
  8425                           
  8426                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8427  002994  508C               	movf	3980,w,c	;volatile
  8428  002996  0B0F               	andlw	15
  8429  002998  6E8C               	movwf	3980,c	;volatile
  8430                           
  8431                           ;lcd.c: 40: LATD = temp | LATD;
  8432  00299A  5001               	movf	i2lcdNibble@temp,w,c
  8433  00299C  108C               	iorwf	3980,w,c	;volatile
  8434  00299E  6E8C               	movwf	3980,c	;volatile
  8435                           
  8436                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  8437  0029A0  968C               	bcf	3980,3,c	;volatile
  8438                           
  8439                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8440  0029A2  0E19               	movlw	25
  8441  0029A4                     i2u484_47:
  8442  0029A4  2EE8               	decfsz	wreg,f,c
  8443  0029A6  D7FE               	bra	i2u484_47
  8444                           
  8445                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  8446  0029A8  868C               	bsf	3980,3,c	;volatile
  8447                           
  8448                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8449  0029AA  0E19               	movlw	25
  8450  0029AC                     i2u485_47:
  8451  0029AC  2EE8               	decfsz	wreg,f,c
  8452  0029AE  D7FE               	bra	i2u485_47
  8453                           
  8454                           ;lcd.c: 47: data = data << 4;
  8455  0029B0  3802               	swapf	i2lcdNibble@data,w,c
  8456  0029B2  0BF0               	andlw	240
  8457  0029B4  6E02               	movwf	i2lcdNibble@data,c
  8458                           
  8459                           ;lcd.c: 49: temp = data & 0xF0;
  8460  0029B6  5002               	movf	i2lcdNibble@data,w,c
  8461  0029B8  0BF0               	andlw	240
  8462  0029BA  6E01               	movwf	i2lcdNibble@temp,c
  8463                           
  8464                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8465  0029BC  508C               	movf	3980,w,c	;volatile
  8466  0029BE  0B0F               	andlw	15
  8467  0029C0  6E8C               	movwf	3980,c	;volatile
  8468                           
  8469                           ;lcd.c: 51: LATD = temp | LATD;
  8470  0029C2  5001               	movf	i2lcdNibble@temp,w,c
  8471  0029C4  108C               	iorwf	3980,w,c	;volatile
  8472  0029C6  6E8C               	movwf	3980,c	;volatile
  8473                           
  8474                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8475  0029C8  968C               	bcf	3980,3,c	;volatile
  8476                           
  8477                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8478  0029CA  0E19               	movlw	25
  8479  0029CC                     i2u486_47:
  8480  0029CC  2EE8               	decfsz	wreg,f,c
  8481  0029CE  D7FE               	bra	i2u486_47
  8482                           
  8483                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8484  0029D0  868C               	bsf	3980,3,c	;volatile
  8485                           
  8486                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8487  0029D2  0E19               	movlw	25
  8488  0029D4                     i2u487_47:
  8489  0029D4  2EE8               	decfsz	wreg,f,c
  8490  0029D6  D7FE               	bra	i2u487_47
  8491  0029D8  0012               	return		;funcret
  8492  0029DA                     __end_ofi2_lcdNibble:
  8493                           	opt stack 0
  8494                           pclatu	equ	0xFFB
  8495                           pclath	equ	0xFFA
  8496                           tblptru	equ	0xFF8
  8497                           tblptrh	equ	0xFF7
  8498                           tblptrl	equ	0xFF6
  8499                           tablat	equ	0xFF5
  8500                           prodh	equ	0xFF4
  8501                           prodl	equ	0xFF3
  8502                           intcon	equ	0xFF2
  8503                           intcon2	equ	0xFF1
  8504                           intcon3	equ	0xFF0
  8505                           postinc0	equ	0xFEE
  8506                           fsr0h	equ	0xFEA
  8507                           fsr0l	equ	0xFE9
  8508                           wreg	equ	0xFE8
  8509                           fsr1h	equ	0xFE2
  8510                           fsr1l	equ	0xFE1
  8511                           indf2	equ	0xFDF
  8512                           postinc2	equ	0xFDE
  8513                           postdec2	equ	0xFDD
  8514                           fsr2h	equ	0xFDA
  8515                           fsr2l	equ	0xFD9
  8516                           status	equ	0xFD8
  8517                           
  8518 ;; *************** function _servo_rotate2 *****************
  8519 ;; Defined at:
  8520 ;;		line 521 in file "main.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;  degree          2   14[COMRAM] int 
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;  j               2   22[COMRAM] unsigned int 
  8525 ;;  i               2   20[COMRAM] unsigned int 
  8526 ;;  duty            2   18[COMRAM] int 
  8527 ;; Return value:  Size  Location     Type
  8528 ;;                  1    wreg      void 
  8529 ;; Registers used:
  8530 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8531 ;; Tracked objects:
  8532 ;;		On entry : 0/0
  8533 ;;		On exit  : 0/0
  8534 ;;		Unchanged: 0/0
  8535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8536 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8537 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;Total ram usage:       10 bytes
  8541 ;; Hardware stack levels used:    1
  8542 ;; Hardware stack levels required when called:    1
  8543 ;; This function calls:
  8544 ;;		___awdiv
  8545 ;;		i2___wmul
  8546 ;; This function is called by:
  8547 ;;		_isr
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           	psect	text38
  8552  0020C2                     __ptext38:
  8553                           	opt stack 0
  8554  0020C2                     _servo_rotate2:
  8555                           	opt stack 24
  8556                           
  8557                           ;main.c: 522: unsigned int i;
  8558                           ;main.c: 523: unsigned int j;
  8559                           ;main.c: 524: int duty = ((degree+90)*5/90)+10;
  8560                           
  8561                           ;incstack = 0
  8562  0020C2  0E5A               	movlw	90
  8563  0020C4  240F               	addwf	servo_rotate2@degree,w,c
  8564  0020C6  6E01               	movwf	i2___wmul@multiplier,c
  8565  0020C8  0E00               	movlw	0
  8566  0020CA  2010               	addwfc	servo_rotate2@degree+1,w,c
  8567  0020CC  6E02               	movwf	i2___wmul@multiplier+1,c
  8568  0020CE  0E00               	movlw	0
  8569  0020D0  6E04               	movwf	i2___wmul@multiplicand+1,c
  8570  0020D2  0E05               	movlw	5
  8571  0020D4  6E03               	movwf	i2___wmul@multiplicand,c
  8572  0020D6  ECDE  F015         	call	i2___wmul	;wreg free
  8573  0020DA  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8574  0020DE  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8575  0020E2  0E00               	movlw	0
  8576  0020E4  6E0A               	movwf	___awdiv@divisor+1,c
  8577  0020E6  0E5A               	movlw	90
  8578  0020E8  6E09               	movwf	___awdiv@divisor,c
  8579  0020EA  EC95  F012         	call	___awdiv	;wreg free
  8580  0020EE  0E0A               	movlw	10
  8581  0020F0  2407               	addwf	?___awdiv,w,c
  8582  0020F2  6E13               	movwf	servo_rotate2@duty,c
  8583  0020F4  0E00               	movlw	0
  8584  0020F6  2008               	addwfc	?___awdiv+1,w,c
  8585  0020F8  6E14               	movwf	servo_rotate2@duty+1,c
  8586                           
  8587                           ;main.c: 525: for (i=0; i<50; i++) {
  8588  0020FA  0E00               	movlw	0
  8589  0020FC  6E16               	movwf	servo_rotate2@i+1,c
  8590  0020FE  0E00               	movlw	0
  8591  002100  6E15               	movwf	servo_rotate2@i,c
  8592  002102                     i2l4223:
  8593  002102  5016               	movf	servo_rotate2@i+1,w,c
  8594  002104  E137               	bnz	i2l410
  8595  002106  0E32               	movlw	50
  8596  002108  5C15               	subwf	servo_rotate2@i,w,c
  8597  00210A  B0D8               	btfsc	status,0,c
  8598  00210C  0012               	return	
  8599                           
  8600                           ;main.c: 526: LATCbits.LATC2 = 1;
  8601  00210E  848B               	bsf	3979,2,c	;volatile
  8602                           
  8603                           ;main.c: 527: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8604  002110  0E00               	movlw	0
  8605  002112  6E18               	movwf	servo_rotate2@j+1,c
  8606  002114  0E00               	movlw	0
  8607  002116  6E17               	movwf	servo_rotate2@j,c
  8608  002118  D006               	goto	i2l404
  8609  00211A                     i2l4229:
  8610  00211A  0E53               	movlw	83
  8611  00211C                     i2u488_47:
  8612  00211C  2EE8               	decfsz	wreg,f,c
  8613  00211E  D7FE               	bra	i2u488_47
  8614  002120  F000               	nop	
  8615  002122  4A17               	infsnz	servo_rotate2@j,f,c
  8616  002124  2A18               	incf	servo_rotate2@j+1,f,c
  8617  002126                     i2l404:
  8618  002126  5013               	movf	servo_rotate2@duty,w,c
  8619  002128  5C17               	subwf	servo_rotate2@j,w,c
  8620  00212A  5014               	movf	servo_rotate2@duty+1,w,c
  8621  00212C  5818               	subwfb	servo_rotate2@j+1,w,c
  8622  00212E  A0D8               	btfss	status,0,c
  8623  002130  D7F4               	goto	i2l4229
  8624                           
  8625                           ;main.c: 528: LATCbits.LATC2 = 0;
  8626  002132  948B               	bcf	3979,2,c	;volatile
  8627                           
  8628                           ;main.c: 529: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8629  002134  0E00               	movlw	0
  8630  002136  6E18               	movwf	servo_rotate2@j+1,c
  8631  002138  0E00               	movlw	0
  8632  00213A  6E17               	movwf	servo_rotate2@j,c
  8633  00213C  D006               	goto	i2l407
  8634  00213E                     i2l4235:
  8635  00213E  0E53               	movlw	83
  8636  002140                     i2u489_47:
  8637  002140  2EE8               	decfsz	wreg,f,c
  8638  002142  D7FE               	bra	i2u489_47
  8639  002144  F000               	nop	
  8640  002146  4A17               	infsnz	servo_rotate2@j,f,c
  8641  002148  2A18               	incf	servo_rotate2@j+1,f,c
  8642  00214A                     i2l407:
  8643  00214A  C013  F011         	movff	servo_rotate2@duty,??_servo_rotate2
  8644  00214E  C014  F012         	movff	servo_rotate2@duty+1,??_servo_rotate2+1
  8645  002152  1E11               	comf	??_servo_rotate2,f,c
  8646  002154  1E12               	comf	??_servo_rotate2+1,f,c
  8647  002156  4A11               	infsnz	??_servo_rotate2,f,c
  8648  002158  2A12               	incf	??_servo_rotate2+1,f,c
  8649  00215A  0EC8               	movlw	200
  8650  00215C  2611               	addwf	??_servo_rotate2,f,c
  8651  00215E  0E00               	movlw	0
  8652  002160  2212               	addwfc	??_servo_rotate2+1,f,c
  8653  002162  5011               	movf	??_servo_rotate2,w,c
  8654  002164  5C17               	subwf	servo_rotate2@j,w,c
  8655  002166  5012               	movf	??_servo_rotate2+1,w,c
  8656  002168  5818               	subwfb	servo_rotate2@j+1,w,c
  8657  00216A  A0D8               	btfss	status,0,c
  8658  00216C  D7E8               	goto	i2l4235
  8659  00216E  4A15               	infsnz	servo_rotate2@i,f,c
  8660  002170  2A16               	incf	servo_rotate2@i+1,f,c
  8661  002172  D7C7               	goto	i2l4223
  8662  002174                     i2l410:
  8663  002174  0012               	return		;funcret
  8664  002176                     __end_of_servo_rotate2:
  8665                           	opt stack 0
  8666                           pclatu	equ	0xFFB
  8667                           pclath	equ	0xFFA
  8668                           tblptru	equ	0xFF8
  8669                           tblptrh	equ	0xFF7
  8670                           tblptrl	equ	0xFF6
  8671                           tablat	equ	0xFF5
  8672                           prodh	equ	0xFF4
  8673                           prodl	equ	0xFF3
  8674                           intcon	equ	0xFF2
  8675                           intcon2	equ	0xFF1
  8676                           intcon3	equ	0xFF0
  8677                           postinc0	equ	0xFEE
  8678                           fsr0h	equ	0xFEA
  8679                           fsr0l	equ	0xFE9
  8680                           wreg	equ	0xFE8
  8681                           fsr1h	equ	0xFE2
  8682                           fsr1l	equ	0xFE1
  8683                           indf2	equ	0xFDF
  8684                           postinc2	equ	0xFDE
  8685                           postdec2	equ	0xFDD
  8686                           fsr2h	equ	0xFDA
  8687                           fsr2l	equ	0xFD9
  8688                           status	equ	0xFD8
  8689                           
  8690 ;; *************** function _servo_rotate1 *****************
  8691 ;; Defined at:
  8692 ;;		line 508 in file "main.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;  degree          2   14[COMRAM] int 
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;  j               2   22[COMRAM] unsigned int 
  8697 ;;  i               2   20[COMRAM] unsigned int 
  8698 ;;  duty            2   18[COMRAM] int 
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  1    wreg      void 
  8701 ;; Registers used:
  8702 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8708 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8711 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8712 ;;Total ram usage:       10 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    1
  8715 ;; This function calls:
  8716 ;;		___awdiv
  8717 ;;		i2___wmul
  8718 ;; This function is called by:
  8719 ;;		_isr
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           	psect	text39
  8724  002176                     __ptext39:
  8725                           	opt stack 0
  8726  002176                     _servo_rotate1:
  8727                           	opt stack 24
  8728                           
  8729                           ;main.c: 509: unsigned int i;
  8730                           ;main.c: 510: unsigned int j;
  8731                           ;main.c: 511: int duty = ((degree+90)*5/90)+10;
  8732                           
  8733                           ;incstack = 0
  8734  002176  0E5A               	movlw	90
  8735  002178  240F               	addwf	servo_rotate1@degree,w,c
  8736  00217A  6E01               	movwf	i2___wmul@multiplier,c
  8737  00217C  0E00               	movlw	0
  8738  00217E  2010               	addwfc	servo_rotate1@degree+1,w,c
  8739  002180  6E02               	movwf	i2___wmul@multiplier+1,c
  8740  002182  0E00               	movlw	0
  8741  002184  6E04               	movwf	i2___wmul@multiplicand+1,c
  8742  002186  0E05               	movlw	5
  8743  002188  6E03               	movwf	i2___wmul@multiplicand,c
  8744  00218A  ECDE  F015         	call	i2___wmul	;wreg free
  8745  00218E  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8746  002192  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8747  002196  0E00               	movlw	0
  8748  002198  6E0A               	movwf	___awdiv@divisor+1,c
  8749  00219A  0E5A               	movlw	90
  8750  00219C  6E09               	movwf	___awdiv@divisor,c
  8751  00219E  EC95  F012         	call	___awdiv	;wreg free
  8752  0021A2  0E0A               	movlw	10
  8753  0021A4  2407               	addwf	?___awdiv,w,c
  8754  0021A6  6E13               	movwf	servo_rotate1@duty,c
  8755  0021A8  0E00               	movlw	0
  8756  0021AA  2008               	addwfc	?___awdiv+1,w,c
  8757  0021AC  6E14               	movwf	servo_rotate1@duty+1,c
  8758                           
  8759                           ;main.c: 512: for (i=0; i<50; i++) {
  8760  0021AE  0E00               	movlw	0
  8761  0021B0  6E16               	movwf	servo_rotate1@i+1,c
  8762  0021B2  0E00               	movlw	0
  8763  0021B4  6E15               	movwf	servo_rotate1@i,c
  8764  0021B6                     i2l4247:
  8765  0021B6  5016               	movf	servo_rotate1@i+1,w,c
  8766  0021B8  E137               	bnz	i2l399
  8767  0021BA  0E32               	movlw	50
  8768  0021BC  5C15               	subwf	servo_rotate1@i,w,c
  8769  0021BE  B0D8               	btfsc	status,0,c
  8770  0021C0  0012               	return	
  8771                           
  8772                           ;main.c: 513: LATCbits.LATC1 = 1;
  8773  0021C2  828B               	bsf	3979,1,c	;volatile
  8774                           
  8775                           ;main.c: 514: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8776  0021C4  0E00               	movlw	0
  8777  0021C6  6E18               	movwf	servo_rotate1@j+1,c
  8778  0021C8  0E00               	movlw	0
  8779  0021CA  6E17               	movwf	servo_rotate1@j,c
  8780  0021CC  D006               	goto	i2l393
  8781  0021CE                     i2l4253:
  8782  0021CE  0E53               	movlw	83
  8783  0021D0                     i2u490_47:
  8784  0021D0  2EE8               	decfsz	wreg,f,c
  8785  0021D2  D7FE               	bra	i2u490_47
  8786  0021D4  F000               	nop	
  8787  0021D6  4A17               	infsnz	servo_rotate1@j,f,c
  8788  0021D8  2A18               	incf	servo_rotate1@j+1,f,c
  8789  0021DA                     i2l393:
  8790  0021DA  5013               	movf	servo_rotate1@duty,w,c
  8791  0021DC  5C17               	subwf	servo_rotate1@j,w,c
  8792  0021DE  5014               	movf	servo_rotate1@duty+1,w,c
  8793  0021E0  5818               	subwfb	servo_rotate1@j+1,w,c
  8794  0021E2  A0D8               	btfss	status,0,c
  8795  0021E4  D7F4               	goto	i2l4253
  8796                           
  8797                           ;main.c: 515: LATCbits.LATC1 = 0;
  8798  0021E6  928B               	bcf	3979,1,c	;volatile
  8799                           
  8800                           ;main.c: 516: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8801  0021E8  0E00               	movlw	0
  8802  0021EA  6E18               	movwf	servo_rotate1@j+1,c
  8803  0021EC  0E00               	movlw	0
  8804  0021EE  6E17               	movwf	servo_rotate1@j,c
  8805  0021F0  D006               	goto	i2l396
  8806  0021F2                     i2l4259:
  8807  0021F2  0E53               	movlw	83
  8808  0021F4                     i2u491_47:
  8809  0021F4  2EE8               	decfsz	wreg,f,c
  8810  0021F6  D7FE               	bra	i2u491_47
  8811  0021F8  F000               	nop	
  8812  0021FA  4A17               	infsnz	servo_rotate1@j,f,c
  8813  0021FC  2A18               	incf	servo_rotate1@j+1,f,c
  8814  0021FE                     i2l396:
  8815  0021FE  C013  F011         	movff	servo_rotate1@duty,??_servo_rotate1
  8816  002202  C014  F012         	movff	servo_rotate1@duty+1,??_servo_rotate1+1
  8817  002206  1E11               	comf	??_servo_rotate1,f,c
  8818  002208  1E12               	comf	??_servo_rotate1+1,f,c
  8819  00220A  4A11               	infsnz	??_servo_rotate1,f,c
  8820  00220C  2A12               	incf	??_servo_rotate1+1,f,c
  8821  00220E  0EC8               	movlw	200
  8822  002210  2611               	addwf	??_servo_rotate1,f,c
  8823  002212  0E00               	movlw	0
  8824  002214  2212               	addwfc	??_servo_rotate1+1,f,c
  8825  002216  5011               	movf	??_servo_rotate1,w,c
  8826  002218  5C17               	subwf	servo_rotate1@j,w,c
  8827  00221A  5012               	movf	??_servo_rotate1+1,w,c
  8828  00221C  5818               	subwfb	servo_rotate1@j+1,w,c
  8829  00221E  A0D8               	btfss	status,0,c
  8830  002220  D7E8               	goto	i2l4259
  8831  002222  4A15               	infsnz	servo_rotate1@i,f,c
  8832  002224  2A16               	incf	servo_rotate1@i+1,f,c
  8833  002226  D7C7               	goto	i2l4247
  8834  002228                     i2l399:
  8835  002228  0012               	return		;funcret
  8836  00222A                     __end_of_servo_rotate1:
  8837                           	opt stack 0
  8838                           pclatu	equ	0xFFB
  8839                           pclath	equ	0xFFA
  8840                           tblptru	equ	0xFF8
  8841                           tblptrh	equ	0xFF7
  8842                           tblptrl	equ	0xFF6
  8843                           tablat	equ	0xFF5
  8844                           prodh	equ	0xFF4
  8845                           prodl	equ	0xFF3
  8846                           intcon	equ	0xFF2
  8847                           intcon2	equ	0xFF1
  8848                           intcon3	equ	0xFF0
  8849                           postinc0	equ	0xFEE
  8850                           fsr0h	equ	0xFEA
  8851                           fsr0l	equ	0xFE9
  8852                           wreg	equ	0xFE8
  8853                           fsr1h	equ	0xFE2
  8854                           fsr1l	equ	0xFE1
  8855                           indf2	equ	0xFDF
  8856                           postinc2	equ	0xFDE
  8857                           postdec2	equ	0xFDD
  8858                           fsr2h	equ	0xFDA
  8859                           fsr2l	equ	0xFD9
  8860                           status	equ	0xFD8
  8861                           
  8862 ;; *************** function _servo_rotate0 *****************
  8863 ;; Defined at:
  8864 ;;		line 495 in file "main.c"
  8865 ;; Parameters:    Size  Location     Type
  8866 ;;  degree          2    0[COMRAM] int 
  8867 ;; Auto vars:     Size  Location     Type
  8868 ;;  j               2    8[COMRAM] unsigned int 
  8869 ;;  i               2    6[COMRAM] unsigned int 
  8870 ;;  duty            2    4[COMRAM] int 
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  1    wreg      void 
  8873 ;; Registers used:
  8874 ;;		wreg, status,2, status,0
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8880 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8881 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8882 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8883 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8884 ;;Total ram usage:       10 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; This function calls:
  8887 ;;		Nothing
  8888 ;; This function is called by:
  8889 ;;		_isr
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           	psect	text40
  8894  00237A                     __ptext40:
  8895                           	opt stack 0
  8896  00237A                     _servo_rotate0:
  8897                           	opt stack 25
  8898                           
  8899                           ;main.c: 496: unsigned int i;
  8900                           ;main.c: 497: unsigned int j;
  8901                           ;main.c: 498: int duty = degree;
  8902                           
  8903                           ;incstack = 0
  8904  00237A  C001  F005         	movff	servo_rotate0@degree,servo_rotate0@duty
  8905  00237E  C002  F006         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  8906                           
  8907                           ;main.c: 499: for (i=0; i<50; i++) {
  8908  002382  0E00               	movlw	0
  8909  002384  6E08               	movwf	servo_rotate0@i+1,c
  8910  002386  0E00               	movlw	0
  8911  002388  6E07               	movwf	servo_rotate0@i,c
  8912  00238A                     i2l4199:
  8913  00238A  5008               	movf	servo_rotate0@i+1,w,c
  8914  00238C  E13D               	bnz	i2l388
  8915  00238E  0E32               	movlw	50
  8916  002390  5C07               	subwf	servo_rotate0@i,w,c
  8917  002392  B0D8               	btfsc	status,0,c
  8918  002394  0012               	return	
  8919                           
  8920                           ;main.c: 500: LATCbits.LATC0 = 1;
  8921  002396  808B               	bsf	3979,0,c	;volatile
  8922                           
  8923                           ;main.c: 501: for(j=0; j<duty; j++) _delay((unsigned long)((1)*(10000000/4000.0)));
  8924  002398  0E00               	movlw	0
  8925  00239A  6E0A               	movwf	servo_rotate0@j+1,c
  8926  00239C  0E00               	movlw	0
  8927  00239E  6E09               	movwf	servo_rotate0@j,c
  8928  0023A0  D009               	goto	i2l382
  8929  0023A2                     i2l4205:
  8930  0023A2  0E04               	movlw	4
  8931  0023A4  6E03               	movwf	??_servo_rotate0& (0+255),c
  8932  0023A6  0E3E               	movlw	62
  8933  0023A8                     i2u492_47:
  8934  0023A8  2EE8               	decfsz	wreg,f,c
  8935  0023AA  D7FE               	bra	i2u492_47
  8936  0023AC  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8937  0023AE  D7FC               	bra	i2u492_47
  8938  0023B0  4A09               	infsnz	servo_rotate0@j,f,c
  8939  0023B2  2A0A               	incf	servo_rotate0@j+1,f,c
  8940  0023B4                     i2l382:
  8941  0023B4  5005               	movf	servo_rotate0@duty,w,c
  8942  0023B6  5C09               	subwf	servo_rotate0@j,w,c
  8943  0023B8  5006               	movf	servo_rotate0@duty+1,w,c
  8944  0023BA  580A               	subwfb	servo_rotate0@j+1,w,c
  8945  0023BC  A0D8               	btfss	status,0,c
  8946  0023BE  D7F1               	goto	i2l4205
  8947                           
  8948                           ;main.c: 502: LATCbits.LATC0 = 0;
  8949  0023C0  908B               	bcf	3979,0,c	;volatile
  8950                           
  8951                           ;main.c: 503: for(j=0; j<(20 - duty); j++) _delay((unsigned long)((1)*(10000000/4000.0))
      +                          );
  8952  0023C2  0E00               	movlw	0
  8953  0023C4  6E0A               	movwf	servo_rotate0@j+1,c
  8954  0023C6  0E00               	movlw	0
  8955  0023C8  6E09               	movwf	servo_rotate0@j,c
  8956  0023CA  D009               	goto	i2l385
  8957  0023CC                     i2l4211:
  8958  0023CC  0E04               	movlw	4
  8959  0023CE  6E03               	movwf	??_servo_rotate0& (0+255),c
  8960  0023D0  0E3E               	movlw	62
  8961  0023D2                     i2u493_47:
  8962  0023D2  2EE8               	decfsz	wreg,f,c
  8963  0023D4  D7FE               	bra	i2u493_47
  8964  0023D6  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8965  0023D8  D7FC               	bra	i2u493_47
  8966  0023DA  4A09               	infsnz	servo_rotate0@j,f,c
  8967  0023DC  2A0A               	incf	servo_rotate0@j+1,f,c
  8968  0023DE                     i2l385:
  8969  0023DE  C005  F003         	movff	servo_rotate0@duty,??_servo_rotate0
  8970  0023E2  C006  F004         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  8971  0023E6  1E03               	comf	??_servo_rotate0,f,c
  8972  0023E8  1E04               	comf	??_servo_rotate0+1,f,c
  8973  0023EA  4A03               	infsnz	??_servo_rotate0,f,c
  8974  0023EC  2A04               	incf	??_servo_rotate0+1,f,c
  8975  0023EE  0E14               	movlw	20
  8976  0023F0  2603               	addwf	??_servo_rotate0,f,c
  8977  0023F2  0E00               	movlw	0
  8978  0023F4  2204               	addwfc	??_servo_rotate0+1,f,c
  8979  0023F6  5003               	movf	??_servo_rotate0,w,c
  8980  0023F8  5C09               	subwf	servo_rotate0@j,w,c
  8981  0023FA  5004               	movf	??_servo_rotate0+1,w,c
  8982  0023FC  580A               	subwfb	servo_rotate0@j+1,w,c
  8983  0023FE  A0D8               	btfss	status,0,c
  8984  002400  D7E5               	goto	i2l4211
  8985  002402  4A07               	infsnz	servo_rotate0@i,f,c
  8986  002404  2A08               	incf	servo_rotate0@i+1,f,c
  8987  002406  D7C1               	goto	i2l4199
  8988  002408                     i2l388:
  8989  002408  0012               	return		;funcret
  8990  00240A                     __end_of_servo_rotate0:
  8991                           	opt stack 0
  8992                           pclatu	equ	0xFFB
  8993                           pclath	equ	0xFFA
  8994                           tblptru	equ	0xFF8
  8995                           tblptrh	equ	0xFF7
  8996                           tblptrl	equ	0xFF6
  8997                           tablat	equ	0xFF5
  8998                           prodh	equ	0xFF4
  8999                           prodl	equ	0xFF3
  9000                           intcon	equ	0xFF2
  9001                           intcon2	equ	0xFF1
  9002                           intcon3	equ	0xFF0
  9003                           postinc0	equ	0xFEE
  9004                           fsr0h	equ	0xFEA
  9005                           fsr0l	equ	0xFE9
  9006                           wreg	equ	0xFE8
  9007                           fsr1h	equ	0xFE2
  9008                           fsr1l	equ	0xFE1
  9009                           indf2	equ	0xFDF
  9010                           postinc2	equ	0xFDE
  9011                           postdec2	equ	0xFDD
  9012                           fsr2h	equ	0xFDA
  9013                           fsr2l	equ	0xFD9
  9014                           status	equ	0xFD8
  9015                           
  9016 ;; *************** function _read_time *****************
  9017 ;; Defined at:
  9018 ;;		line 386 in file "main.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;		None
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;  i               1    3[COMRAM] unsigned char 
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      void 
  9025 ;; Registers used:
  9026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9035 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9036 ;;Total ram usage:        1 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:    2
  9039 ;; This function calls:
  9040 ;;		i2_I2C_Master_Read
  9041 ;;		i2_I2C_Master_Start
  9042 ;;		i2_I2C_Master_Stop
  9043 ;;		i2_I2C_Master_Write
  9044 ;; This function is called by:
  9045 ;;		_isr
  9046 ;; This function uses a non-reentrant model
  9047 ;;
  9048                           
  9049                           	psect	text41
  9050  00269E                     __ptext41:
  9051                           	opt stack 0
  9052  00269E                     _read_time:
  9053                           	opt stack 23
  9054                           
  9055                           ;main.c: 388: I2C_Master_Start();
  9056                           
  9057                           ;incstack = 0
  9058  00269E  EC80  F016         	call	i2_I2C_Master_Start	;wreg free
  9059                           
  9060                           ;main.c: 389: I2C_Master_Write(0b11010000);
  9061  0026A2  0E00               	movlw	0
  9062  0026A4  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9063  0026A6  0ED0               	movlw	208
  9064  0026A8  6E02               	movwf	i2I2C_Master_Write@d,c
  9065  0026AA  EC63  F016         	call	i2_I2C_Master_Write	;wreg free
  9066                           
  9067                           ;main.c: 390: I2C_Master_Write(0x00);
  9068  0026AE  0E00               	movlw	0
  9069  0026B0  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9070  0026B2  0E00               	movlw	0
  9071  0026B4  6E02               	movwf	i2I2C_Master_Write@d,c
  9072  0026B6  EC63  F016         	call	i2_I2C_Master_Write	;wreg free
  9073                           
  9074                           ;main.c: 391: I2C_Master_Stop();
  9075  0026BA  EC7C  F016         	call	i2_I2C_Master_Stop	;wreg free
  9076                           
  9077                           ;main.c: 394: I2C_Master_Start();
  9078  0026BE  EC80  F016         	call	i2_I2C_Master_Start	;wreg free
  9079                           
  9080                           ;main.c: 395: I2C_Master_Write(0b11010001);
  9081  0026C2  0E00               	movlw	0
  9082  0026C4  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9083  0026C6  0ED1               	movlw	209
  9084  0026C8  6E02               	movwf	i2I2C_Master_Write@d,c
  9085  0026CA  EC63  F016         	call	i2_I2C_Master_Write	;wreg free
  9086                           
  9087                           ;main.c: 396: for(unsigned char i=0;i<0x06;i++){
  9088  0026CE  0E00               	movlw	0
  9089  0026D0  6E04               	movwf	read_time@i,c
  9090  0026D2                     i2l4163:
  9091  0026D2  0E05               	movlw	5
  9092  0026D4  6404               	cpfsgt	read_time@i,c
  9093  0026D6  D001               	goto	i2l4167
  9094  0026D8  D00E               	goto	i2l4173
  9095  0026DA                     i2l4167:
  9096                           
  9097                           ;main.c: 397: time[i] = I2C_Master_Read(1);
  9098  0026DA  5004               	movf	read_time@i,w,c
  9099  0026DC  0D01               	mullw	1
  9100  0026DE  0E96               	movlw	low _time
  9101  0026E0  24F3               	addwf	prodl,w,c
  9102  0026E2  6ED9               	movwf	fsr2l,c
  9103  0026E4  0E00               	movlw	high _time
  9104  0026E6  20F4               	addwfc	prodh,w,c
  9105  0026E8  6EDA               	movwf	fsr2h,c
  9106  0026EA  0E01               	movlw	1
  9107  0026EC  ECCB  F015         	call	i2_I2C_Master_Read
  9108  0026F0  6EDF               	movwf	indf2,c
  9109  0026F2  2A04               	incf	read_time@i,f,c
  9110  0026F4  D7EE               	goto	i2l4163
  9111  0026F6                     i2l4173:
  9112                           
  9113                           ;main.c: 398: }
  9114                           ;main.c: 399: time[6] = I2C_Master_Read(0);
  9115  0026F6  0E00               	movlw	0
  9116  0026F8  ECCB  F015         	call	i2_I2C_Master_Read
  9117  0026FC  0100               	movlb	0	; () banked
  9118  0026FE  6F9C               	movwf	(_time+6)& (0+255),b
  9119                           
  9120                           ;main.c: 400: I2C_Master_Stop();
  9121  002700  EC7C  F016         	call	i2_I2C_Master_Stop	;wreg free
  9122  002704  0012               	return	
  9123  002706                     __end_of_read_time:
  9124                           	opt stack 0
  9125                           pclatu	equ	0xFFB
  9126                           pclath	equ	0xFFA
  9127                           tblptru	equ	0xFF8
  9128                           tblptrh	equ	0xFF7
  9129                           tblptrl	equ	0xFF6
  9130                           tablat	equ	0xFF5
  9131                           prodh	equ	0xFF4
  9132                           prodl	equ	0xFF3
  9133                           intcon	equ	0xFF2
  9134                           intcon2	equ	0xFF1
  9135                           intcon3	equ	0xFF0
  9136                           postinc0	equ	0xFEE
  9137                           fsr0h	equ	0xFEA
  9138                           fsr0l	equ	0xFE9
  9139                           wreg	equ	0xFE8
  9140                           fsr1h	equ	0xFE2
  9141                           fsr1l	equ	0xFE1
  9142                           indf2	equ	0xFDF
  9143                           postinc2	equ	0xFDE
  9144                           postdec2	equ	0xFDD
  9145                           fsr2h	equ	0xFDA
  9146                           fsr2l	equ	0xFD9
  9147                           status	equ	0xFD8
  9148                           
  9149 ;; *************** function i2_I2C_Master_Write *****************
  9150 ;; Defined at:
  9151 ;;		line 47 in file "I2C.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;  d               2    1[COMRAM] unsigned int 
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;		None
  9156 ;; Return value:  Size  Location     Type
  9157 ;;                  1    wreg      void 
  9158 ;; Registers used:
  9159 ;;		wreg, status,2, status,0, cstack
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9165 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9169 ;;Total ram usage:        2 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    1
  9172 ;; This function calls:
  9173 ;;		i2_I2C_Master_Wait
  9174 ;; This function is called by:
  9175 ;;		_read_time
  9176 ;;		i2_read_colorsensor
  9177 ;; This function uses a non-reentrant model
  9178 ;;
  9179                           
  9180                           	psect	text42
  9181  002CC6                     __ptext42:
  9182                           	opt stack 0
  9183  002CC6                     i2_I2C_Master_Write:
  9184                           	opt stack 23
  9185                           
  9186                           ;I2C.c: 49: I2C_Master_Wait();
  9187                           
  9188                           ;incstack = 0
  9189  002CC6  EC39  F016         	call	i2_I2C_Master_Wait	;wreg free
  9190                           
  9191                           ;I2C.c: 50: SSPBUF = d;
  9192  002CCA  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  9193  002CCE  0012               	return		;funcret
  9194  002CD0                     __end_ofi2_I2C_Master_Write:
  9195                           	opt stack 0
  9196                           pclatu	equ	0xFFB
  9197                           pclath	equ	0xFFA
  9198                           tblptru	equ	0xFF8
  9199                           tblptrh	equ	0xFF7
  9200                           tblptrl	equ	0xFF6
  9201                           tablat	equ	0xFF5
  9202                           prodh	equ	0xFF4
  9203                           prodl	equ	0xFF3
  9204                           intcon	equ	0xFF2
  9205                           intcon2	equ	0xFF1
  9206                           intcon3	equ	0xFF0
  9207                           postinc0	equ	0xFEE
  9208                           fsr0h	equ	0xFEA
  9209                           fsr0l	equ	0xFE9
  9210                           wreg	equ	0xFE8
  9211                           fsr1h	equ	0xFE2
  9212                           fsr1l	equ	0xFE1
  9213                           indf2	equ	0xFDF
  9214                           postinc2	equ	0xFDE
  9215                           postdec2	equ	0xFDD
  9216                           fsr2h	equ	0xFDA
  9217                           fsr2l	equ	0xFD9
  9218                           status	equ	0xFD8
  9219                           
  9220 ;; *************** function i2_I2C_Master_Stop *****************
  9221 ;; Defined at:
  9222 ;;		line 41 in file "I2C.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;		None
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;		None
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  1    wreg      void 
  9229 ;; Registers used:
  9230 ;;		wreg, status,2, status,0, cstack
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;Total ram usage:        0 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; Hardware stack levels required when called:    1
  9243 ;; This function calls:
  9244 ;;		i2_I2C_Master_Wait
  9245 ;; This function is called by:
  9246 ;;		_read_time
  9247 ;;		i2_read_colorsensor
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           	psect	text43
  9252  002CF8                     __ptext43:
  9253                           	opt stack 0
  9254  002CF8                     i2_I2C_Master_Stop:
  9255                           	opt stack 23
  9256                           
  9257                           ;I2C.c: 43: I2C_Master_Wait();
  9258                           
  9259                           ;incstack = 0
  9260  002CF8  EC39  F016         	call	i2_I2C_Master_Wait	;wreg free
  9261                           
  9262                           ;I2C.c: 44: PEN = 1;
  9263  002CFC  84C5               	bsf	4037,2,c	;volatile
  9264  002CFE  0012               	return		;funcret
  9265  002D00                     __end_ofi2_I2C_Master_Stop:
  9266                           	opt stack 0
  9267                           pclatu	equ	0xFFB
  9268                           pclath	equ	0xFFA
  9269                           tblptru	equ	0xFF8
  9270                           tblptrh	equ	0xFF7
  9271                           tblptrl	equ	0xFF6
  9272                           tablat	equ	0xFF5
  9273                           prodh	equ	0xFF4
  9274                           prodl	equ	0xFF3
  9275                           intcon	equ	0xFF2
  9276                           intcon2	equ	0xFF1
  9277                           intcon3	equ	0xFF0
  9278                           postinc0	equ	0xFEE
  9279                           fsr0h	equ	0xFEA
  9280                           fsr0l	equ	0xFE9
  9281                           wreg	equ	0xFE8
  9282                           fsr1h	equ	0xFE2
  9283                           fsr1l	equ	0xFE1
  9284                           indf2	equ	0xFDF
  9285                           postinc2	equ	0xFDE
  9286                           postdec2	equ	0xFDD
  9287                           fsr2h	equ	0xFDA
  9288                           fsr2l	equ	0xFD9
  9289                           status	equ	0xFD8
  9290                           
  9291 ;; *************** function i2_I2C_Master_Start *****************
  9292 ;; Defined at:
  9293 ;;		line 29 in file "I2C.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;		None
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      void 
  9300 ;; Registers used:
  9301 ;;		wreg, status,2, status,0, cstack
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9311 ;;Total ram usage:        0 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    1
  9314 ;; This function calls:
  9315 ;;		i2_I2C_Master_Wait
  9316 ;; This function is called by:
  9317 ;;		_read_time
  9318 ;;		i2_read_colorsensor
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           	psect	text44
  9323  002D00                     __ptext44:
  9324                           	opt stack 0
  9325  002D00                     i2_I2C_Master_Start:
  9326                           	opt stack 23
  9327                           
  9328                           ;I2C.c: 31: I2C_Master_Wait();
  9329                           
  9330                           ;incstack = 0
  9331  002D00  EC39  F016         	call	i2_I2C_Master_Wait	;wreg free
  9332                           
  9333                           ;I2C.c: 32: SEN = 1;
  9334  002D04  80C5               	bsf	4037,0,c	;volatile
  9335  002D06  0012               	return		;funcret
  9336  002D08                     __end_ofi2_I2C_Master_Start:
  9337                           	opt stack 0
  9338                           pclatu	equ	0xFFB
  9339                           pclath	equ	0xFFA
  9340                           tblptru	equ	0xFF8
  9341                           tblptrh	equ	0xFF7
  9342                           tblptrl	equ	0xFF6
  9343                           tablat	equ	0xFF5
  9344                           prodh	equ	0xFF4
  9345                           prodl	equ	0xFF3
  9346                           intcon	equ	0xFF2
  9347                           intcon2	equ	0xFF1
  9348                           intcon3	equ	0xFF0
  9349                           postinc0	equ	0xFEE
  9350                           fsr0h	equ	0xFEA
  9351                           fsr0l	equ	0xFE9
  9352                           wreg	equ	0xFE8
  9353                           fsr1h	equ	0xFE2
  9354                           fsr1l	equ	0xFE1
  9355                           indf2	equ	0xFDF
  9356                           postinc2	equ	0xFDE
  9357                           postdec2	equ	0xFDD
  9358                           fsr2h	equ	0xFDA
  9359                           fsr2l	equ	0xFD9
  9360                           status	equ	0xFD8
  9361                           
  9362 ;; *************** function i2_I2C_Master_Read *****************
  9363 ;; Defined at:
  9364 ;;		line 67 in file "I2C.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;  a               1    wreg     unsigned char 
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;  a               1    1[COMRAM] unsigned char 
  9369 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  1    wreg      unsigned char 
  9372 ;; Registers used:
  9373 ;;		wreg, status,2, status,0, cstack
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;Total ram usage:        2 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    1
  9386 ;; This function calls:
  9387 ;;		i2_I2C_Master_Wait
  9388 ;; This function is called by:
  9389 ;;		_read_time
  9390 ;;		i2_read_colorsensor
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           	psect	text45
  9395  002B96                     __ptext45:
  9396                           	opt stack 0
  9397  002B96                     i2_I2C_Master_Read:
  9398                           	opt stack 23
  9399                           
  9400                           ;incstack = 0
  9401                           ;i2I2C_Master_Read@a stored from wreg
  9402  002B96  6E02               	movwf	i2I2C_Master_Read@a,c
  9403                           
  9404                           ;I2C.c: 69: unsigned char temp;
  9405                           ;I2C.c: 70: I2C_Master_Wait();
  9406  002B98  EC39  F016         	call	i2_I2C_Master_Wait	;wreg free
  9407                           
  9408                           ;I2C.c: 71: RCEN = 1;
  9409  002B9C  86C5               	bsf	4037,3,c	;volatile
  9410                           
  9411                           ;I2C.c: 72: I2C_Master_Wait();
  9412  002B9E  EC39  F016         	call	i2_I2C_Master_Wait	;wreg free
  9413                           
  9414                           ;I2C.c: 73: temp = SSPBUF;
  9415  002BA2  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9416                           
  9417                           ;I2C.c: 74: I2C_Master_Wait();
  9418  002BA6  EC39  F016         	call	i2_I2C_Master_Wait	;wreg free
  9419                           
  9420                           ;I2C.c: 75: ACKDT = (a)?0:1;
  9421  002BAA  5002               	movf	i2I2C_Master_Read@a,w,c
  9422  002BAC  A4D8               	btfss	status,2,c
  9423  002BAE  D002               	goto	i2u361_40
  9424  002BB0  8AC5               	bsf	4037,5,c	;volatile
  9425  002BB2  D001               	goto	i2l3945
  9426  002BB4                     i2u361_40:
  9427  002BB4  9AC5               	bcf	4037,5,c	;volatile
  9428  002BB6                     i2l3945:
  9429                           
  9430                           ;I2C.c: 76: ACKEN = 1;
  9431  002BB6  88C5               	bsf	4037,4,c	;volatile
  9432                           
  9433                           ;I2C.c: 77: return temp;
  9434  002BB8  5003               	movf	i2I2C_Master_Read@temp,w,c
  9435  002BBA  0012               	return	
  9436  002BBC                     __end_ofi2_I2C_Master_Read:
  9437                           	opt stack 0
  9438                           pclatu	equ	0xFFB
  9439                           pclath	equ	0xFFA
  9440                           tblptru	equ	0xFF8
  9441                           tblptrh	equ	0xFF7
  9442                           tblptrl	equ	0xFF6
  9443                           tablat	equ	0xFF5
  9444                           prodh	equ	0xFF4
  9445                           prodl	equ	0xFF3
  9446                           intcon	equ	0xFF2
  9447                           intcon2	equ	0xFF1
  9448                           intcon3	equ	0xFF0
  9449                           postinc0	equ	0xFEE
  9450                           fsr0h	equ	0xFEA
  9451                           fsr0l	equ	0xFE9
  9452                           wreg	equ	0xFE8
  9453                           fsr1h	equ	0xFE2
  9454                           fsr1l	equ	0xFE1
  9455                           indf2	equ	0xFDF
  9456                           postinc2	equ	0xFDE
  9457                           postdec2	equ	0xFDD
  9458                           fsr2h	equ	0xFDA
  9459                           fsr2l	equ	0xFD9
  9460                           status	equ	0xFD8
  9461                           
  9462 ;; *************** function i2_I2C_Master_Wait *****************
  9463 ;; Defined at:
  9464 ;;		line 24 in file "I2C.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;		None
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;		None
  9469 ;; Return value:  Size  Location     Type
  9470 ;;                  1    wreg      void 
  9471 ;; Registers used:
  9472 ;;		wreg, status,2, status,0
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;Total ram usage:        1 bytes
  9483 ;; Hardware stack levels used:    1
  9484 ;; This function calls:
  9485 ;;		Nothing
  9486 ;; This function is called by:
  9487 ;;		i2_I2C_Master_Start
  9488 ;;		i2_I2C_Master_RepeatedStart
  9489 ;;		i2_I2C_Master_Stop
  9490 ;;		i2_I2C_Master_Write
  9491 ;;		i2_I2C_Master_Read
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text46
  9496  002C72                     __ptext46:
  9497                           	opt stack 0
  9498  002C72                     i2_I2C_Master_Wait:
  9499                           	opt stack 23
  9500  002C72                     i2l34:
  9501  002C72  B4C7               	btfsc	4039,2,c	;volatile
  9502  002C74  D7FE               	goto	i2l34
  9503  002C76  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  9504  002C7A  0E1F               	movlw	31
  9505  002C7C  1601               	andwf	??i2_I2C_Master_Wait,f,c
  9506  002C7E  B4D8               	btfsc	status,2,c
  9507  002C80  0012               	return	
  9508  002C82  D7F7               	goto	i2l34
  9509  002C84                     __end_ofi2_I2C_Master_Wait:
  9510                           	opt stack 0
  9511                           pclatu	equ	0xFFB
  9512                           pclath	equ	0xFFA
  9513                           tblptru	equ	0xFF8
  9514                           tblptrh	equ	0xFF7
  9515                           tblptrl	equ	0xFF6
  9516                           tablat	equ	0xFF5
  9517                           prodh	equ	0xFF4
  9518                           prodl	equ	0xFF3
  9519                           intcon	equ	0xFF2
  9520                           intcon2	equ	0xFF1
  9521                           intcon3	equ	0xFF0
  9522                           postinc0	equ	0xFEE
  9523                           fsr0h	equ	0xFEA
  9524                           fsr0l	equ	0xFE9
  9525                           wreg	equ	0xFE8
  9526                           fsr1h	equ	0xFE2
  9527                           fsr1l	equ	0xFE1
  9528                           indf2	equ	0xFDF
  9529                           postinc2	equ	0xFDE
  9530                           postdec2	equ	0xFDD
  9531                           fsr2h	equ	0xFDA
  9532                           fsr2l	equ	0xFD9
  9533                           status	equ	0xFD8
  9534                           
  9535 ;; *************** function _dec_to_hex *****************
  9536 ;; Defined at:
  9537 ;;		line 347 in file "main.c"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;  num             2   98[COMRAM] int 
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;  quotient        2  112[COMRAM] int 
  9542 ;;  hexnum          2  110[COMRAM] int 
  9543 ;;  i               2  108[COMRAM] int 
  9544 ;;  temp            2  106[COMRAM] int 
  9545 ;; Return value:  Size  Location     Type
  9546 ;;                  2   98[COMRAM] int 
  9547 ;; Registers used:
  9548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9549 ;; Tracked objects:
  9550 ;;		On entry : 0/0
  9551 ;;		On exit  : 0/0
  9552 ;;		Unchanged: 0/0
  9553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9557 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9558 ;;Total ram usage:       16 bytes
  9559 ;; Hardware stack levels used:    1
  9560 ;; Hardware stack levels required when called:    5
  9561 ;; This function calls:
  9562 ;;		___awdiv
  9563 ;;		___awtoft
  9564 ;;		___ftadd
  9565 ;;		___ftmul
  9566 ;;		___fttol
  9567 ;;		_pow
  9568 ;; This function is called by:
  9569 ;;		_isr
  9570 ;; This function uses a non-reentrant model
  9571 ;;
  9572                           
  9573                           	psect	text47
  9574  00159A                     __ptext47:
  9575                           	opt stack 0
  9576  00159A                     _dec_to_hex:
  9577                           	opt stack 20
  9578                           
  9579                           ;main.c: 348: int i = 0, quotient = num, temp, hexnum = 0;
  9580                           
  9581                           ;incstack = 0
  9582  00159A  0E00               	movlw	0
  9583  00159C  6E6E               	movwf	dec_to_hex@i+1,c
  9584  00159E  0E00               	movlw	0
  9585  0015A0  6E6D               	movwf	dec_to_hex@i,c
  9586  0015A2  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  9587  0015A6  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  9588  0015AA  0E00               	movlw	0
  9589  0015AC  6E70               	movwf	dec_to_hex@hexnum+1,c
  9590  0015AE  0E00               	movlw	0
  9591  0015B0  6E6F               	movwf	dec_to_hex@hexnum,c
  9592                           
  9593                           ;main.c: 350: while (quotient != 0) {
  9594  0015B2  D068               	goto	i2l4193
  9595  0015B4                     i2l4181:
  9596                           
  9597                           ;main.c: 351: temp = quotient % 16;
  9598  0015B4  0E0F               	movlw	15
  9599  0015B6  1471               	andwf	dec_to_hex@quotient,w,c
  9600  0015B8  6E6B               	movwf	dec_to_hex@temp,c
  9601  0015BA  6A6C               	clrf	dec_to_hex@temp+1,c
  9602                           
  9603                           ;main.c: 353: hexnum += temp*pow(10,i);
  9604  0015BC  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  9605  0015C0  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  9606  0015C4  EC4D  F015         	call	___awtoft	;wreg free
  9607  0015C8  C009  F065         	movff	?___awtoft,_dec_to_hex$1259
  9608  0015CC  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1259+1
  9609  0015D0  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1259+2
  9610                           
  9611                           ;main.c: 353: hexnum += temp*pow(10,i);
  9612  0015D4  C065  F055         	movff	_dec_to_hex$1259,pow@y
  9613  0015D8  C066  F056         	movff	_dec_to_hex$1259+1,pow@y+1
  9614  0015DC  C067  F057         	movff	_dec_to_hex$1259+2,pow@y+2
  9615  0015E0  0E00               	movlw	0
  9616  0015E2  6E52               	movwf	pow@x,c
  9617  0015E4  0E20               	movlw	32
  9618  0015E6  6E53               	movwf	pow@x+1,c
  9619  0015E8  0E41               	movlw	65
  9620  0015EA  6E54               	movwf	pow@x+2,c
  9621  0015EC  EC83  F009         	call	_pow	;wreg free
  9622  0015F0  C052  F068         	movff	?_pow,_dec_to_hex$1260
  9623  0015F4  C053  F069         	movff	?_pow+1,_dec_to_hex$1260+1
  9624  0015F8  C054  F06A         	movff	?_pow+2,_dec_to_hex$1260+2
  9625                           
  9626                           ;main.c: 353: hexnum += temp*pow(10,i);
  9627  0015FC  C068  F010         	movff	_dec_to_hex$1260,___ftmul@f2
  9628  001600  C069  F011         	movff	_dec_to_hex$1260+1,___ftmul@f2+1
  9629  001604  C06A  F012         	movff	_dec_to_hex$1260+2,___ftmul@f2+2
  9630  001608  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  9631  00160C  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  9632  001610  EC4D  F015         	call	___awtoft	;wreg free
  9633  001614  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9634  001618  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9635  00161C  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9636  001620  EC40  F00C         	call	___ftmul	;wreg free
  9637  001624  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  9638  001628  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  9639  00162C  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  9640  001630  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  9641  001634  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  9642  001638  EC4D  F015         	call	___awtoft	;wreg free
  9643  00163C  C009  F01C         	movff	?___awtoft,___ftadd@f1
  9644  001640  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  9645  001644  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  9646  001648  ECE3  F007         	call	___ftadd	;wreg free
  9647  00164C  C01C  F028         	movff	?___ftadd,___fttol@f1
  9648  001650  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  9649  001654  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  9650  001658  ECC6  F00B         	call	___fttol	;wreg free
  9651  00165C  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  9652  001660  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  9653                           
  9654                           ;main.c: 355: quotient = quotient / 16;
  9655  001664  C071  F007         	movff	dec_to_hex@quotient,___awdiv@dividend
  9656  001668  C072  F008         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  9657  00166C  0E00               	movlw	0
  9658  00166E  6E0A               	movwf	___awdiv@divisor+1,c
  9659  001670  0E10               	movlw	16
  9660  001672  6E09               	movwf	___awdiv@divisor,c
  9661  001674  EC95  F012         	call	___awdiv	;wreg free
  9662  001678  C007  F071         	movff	?___awdiv,dec_to_hex@quotient
  9663  00167C  C008  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  9664                           
  9665                           ;main.c: 356: i += 1;
  9666  001680  4A6D               	infsnz	dec_to_hex@i,f,c
  9667  001682  2A6E               	incf	dec_to_hex@i+1,f,c
  9668  001684                     i2l4193:
  9669  001684  5071               	movf	dec_to_hex@quotient,w,c
  9670  001686  1072               	iorwf	dec_to_hex@quotient+1,w,c
  9671  001688  A4D8               	btfss	status,2,c
  9672  00168A  D794               	goto	i2l4181
  9673                           
  9674                           ;main.c: 357: }
  9675                           ;main.c: 358: return hexnum;
  9676  00168C  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  9677  001690  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  9678  001694  0012               	return		;funcret
  9679  001696                     __end_of_dec_to_hex:
  9680                           	opt stack 0
  9681                           pclatu	equ	0xFFB
  9682                           pclath	equ	0xFFA
  9683                           tblptru	equ	0xFF8
  9684                           tblptrh	equ	0xFF7
  9685                           tblptrl	equ	0xFF6
  9686                           tablat	equ	0xFF5
  9687                           prodh	equ	0xFF4
  9688                           prodl	equ	0xFF3
  9689                           intcon	equ	0xFF2
  9690                           intcon2	equ	0xFF1
  9691                           intcon3	equ	0xFF0
  9692                           postinc0	equ	0xFEE
  9693                           fsr0h	equ	0xFEA
  9694                           fsr0l	equ	0xFE9
  9695                           wreg	equ	0xFE8
  9696                           fsr1h	equ	0xFE2
  9697                           fsr1l	equ	0xFE1
  9698                           indf2	equ	0xFDF
  9699                           postinc2	equ	0xFDE
  9700                           postdec2	equ	0xFDD
  9701                           fsr2h	equ	0xFDA
  9702                           fsr2l	equ	0xFD9
  9703                           status	equ	0xFD8
  9704                           
  9705 ;; *************** function _pow *****************
  9706 ;; Defined at:
  9707 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  9708 ;; Parameters:    Size  Location     Type
  9709 ;;  x               3   81[COMRAM] int 
  9710 ;;  y               3   84[COMRAM] int 
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;  yi              4   94[COMRAM] unsigned long 
  9713 ;;  sign            1   93[COMRAM] unsigned char 
  9714 ;; Return value:  Size  Location     Type
  9715 ;;                  3   81[COMRAM] unsigned char 
  9716 ;; Registers used:
  9717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9718 ;; Tracked objects:
  9719 ;;		On entry : 0/0
  9720 ;;		On exit  : 0/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9723 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9724 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;Total ram usage:       17 bytes
  9728 ;; Hardware stack levels used:    1
  9729 ;; Hardware stack levels required when called:    4
  9730 ;; This function calls:
  9731 ;;		___ftge
  9732 ;;		___ftmul
  9733 ;;		___ftneg
  9734 ;;		___fttol
  9735 ;;		___lltoft
  9736 ;;		_exp
  9737 ;;		_log
  9738 ;; This function is called by:
  9739 ;;		_dec_to_hex
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           	psect	text48
  9744  001306                     __ptext48:
  9745                           	opt stack 0
  9746  001306                     _pow:
  9747                           	opt stack 20
  9748                           
  9749                           ;incstack = 0
  9750  001306  0E00               	movlw	0
  9751  001308  6E5E               	movwf	pow@sign,c
  9752  00130A  5052               	movf	pow@x,w,c
  9753  00130C  1053               	iorwf	pow@x+1,w,c
  9754  00130E  1054               	iorwf	pow@x+2,w,c
  9755  001310  A4D8               	btfss	status,2,c
  9756  001312  D01C               	goto	i2l3789
  9757  001314  0E00               	movlw	0
  9758  001316  6E01               	movwf	___ftge@ff1,c
  9759  001318  0E00               	movlw	0
  9760  00131A  6E02               	movwf	___ftge@ff1+1,c
  9761  00131C  0E00               	movlw	0
  9762  00131E  6E03               	movwf	___ftge@ff1+2,c
  9763  001320  C055  F004         	movff	pow@y,___ftge@ff2
  9764  001324  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  9765  001328  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  9766  00132C  EC4D  F012         	call	___ftge	;wreg free
  9767  001330  A0D8               	btfss	status,0,c
  9768  001332  D005               	goto	i2l927
  9769  001334  0E00               	movlw	0
  9770  001336  0100               	movlb	0	; () banked
  9771  001338  6FA4               	movwf	(_errno+1)& (0+255),b
  9772  00133A  0E21               	movlw	33
  9773  00133C  6FA3               	movwf	_errno& (0+255),b
  9774  00133E                     i2l927:
  9775  00133E  0E00               	movlw	0
  9776  001340  6E52               	movwf	?_pow,c
  9777  001342  0E00               	movlw	0
  9778  001344  6E53               	movwf	?_pow+1,c
  9779  001346  0E00               	movlw	0
  9780  001348  6E54               	movwf	?_pow+2,c
  9781  00134A  0012               	return	
  9782  00134C                     i2l3789:
  9783  00134C  5055               	movf	pow@y,w,c
  9784  00134E  1056               	iorwf	pow@y+1,w,c
  9785  001350  1057               	iorwf	pow@y+2,w,c
  9786  001352  A4D8               	btfss	status,2,c
  9787  001354  D007               	goto	i2l3795
  9788  001356  0E00               	movlw	0
  9789  001358  6E52               	movwf	?_pow,c
  9790  00135A  0E80               	movlw	128
  9791  00135C  6E53               	movwf	?_pow+1,c
  9792  00135E  0E3F               	movlw	63
  9793  001360  6E54               	movwf	?_pow+2,c
  9794  001362  0012               	return	
  9795  001364                     i2l3795:
  9796  001364  AE54               	btfss	pow@x+2,7,c
  9797  001366  D041               	goto	i2l3807
  9798  001368  C055  F028         	movff	pow@y,___fttol@f1
  9799  00136C  C056  F029         	movff	pow@y+1,___fttol@f1+1
  9800  001370  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  9801  001374  ECC6  F00B         	call	___fttol	;wreg free
  9802  001378  C028  F05F         	movff	?___fttol,pow@yi
  9803  00137C  C029  F060         	movff	?___fttol+1,pow@yi+1
  9804  001380  C02A  F061         	movff	?___fttol+2,pow@yi+2
  9805  001384  C02B  F062         	movff	?___fttol+3,pow@yi+3
  9806  001388  C05F  F009         	movff	pow@yi,___lltoft@c
  9807  00138C  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  9808  001390  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  9809  001394  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  9810  001398  EC47  F014         	call	___lltoft	;wreg free
  9811  00139C  5055               	movf	pow@y,w,c
  9812  00139E  1809               	xorwf	?___lltoft,w,c
  9813  0013A0  E107               	bnz	i2u344_40
  9814  0013A2  5056               	movf	pow@y+1,w,c
  9815  0013A4  180A               	xorwf	?___lltoft+1,w,c
  9816  0013A6  E104               	bnz	i2u344_40
  9817  0013A8  5057               	movf	pow@y+2,w,c
  9818  0013AA  180B               	xorwf	?___lltoft+2,w,c
  9819  0013AC  B4D8               	btfsc	status,2,c
  9820  0013AE  D00C               	goto	i2l3803
  9821  0013B0                     i2u344_40:
  9822  0013B0  0E00               	movlw	0
  9823  0013B2  0100               	movlb	0	; () banked
  9824  0013B4  6FA4               	movwf	(_errno+1)& (0+255),b
  9825  0013B6  0E21               	movlw	33
  9826  0013B8  6FA3               	movwf	_errno& (0+255),b
  9827  0013BA  0E00               	movlw	0
  9828  0013BC  6E52               	movwf	?_pow,c
  9829  0013BE  0E00               	movlw	0
  9830  0013C0  6E53               	movwf	?_pow+1,c
  9831  0013C2  0E00               	movlw	0
  9832  0013C4  6E54               	movwf	?_pow+2,c
  9833                           
  9834                           ; BSR set to: 0
  9835  0013C6  0012               	return	
  9836  0013C8                     i2l3803:
  9837  0013C8  505F               	movf	pow@yi,w,c
  9838  0013CA  0B01               	andlw	1
  9839  0013CC  6E5E               	movwf	pow@sign,c
  9840  0013CE  C052  F001         	movff	pow@x,___ftneg@f1
  9841  0013D2  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9842  0013D6  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9843  0013DA  ECF1  F015         	call	___ftneg	;wreg free
  9844  0013DE  C001  F052         	movff	?___ftneg,pow@x
  9845  0013E2  C002  F053         	movff	?___ftneg+1,pow@x+1
  9846  0013E6  C003  F054         	movff	?___ftneg+2,pow@x+2
  9847  0013EA                     i2l3807:
  9848  0013EA  C052  F034         	movff	pow@x,log@x
  9849  0013EE  C053  F035         	movff	pow@x+1,log@x+1
  9850  0013F2  C054  F036         	movff	pow@x+2,log@x+2
  9851  0013F6  EC3E  F00A         	call	_log	;wreg free
  9852  0013FA  C034  F058         	movff	?_log,_pow$1261
  9853  0013FE  C035  F059         	movff	?_log+1,_pow$1261+1
  9854  001402  C036  F05A         	movff	?_log+2,_pow$1261+2
  9855  001406  C058  F00D         	movff	_pow$1261,___ftmul@f1
  9856  00140A  C059  F00E         	movff	_pow$1261+1,___ftmul@f1+1
  9857  00140E  C05A  F00F         	movff	_pow$1261+2,___ftmul@f1+2
  9858  001412  C055  F010         	movff	pow@y,___ftmul@f2
  9859  001416  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  9860  00141A  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  9861  00141E  EC40  F00C         	call	___ftmul	;wreg free
  9862  001422  C00D  F05B         	movff	?___ftmul,_pow$1262
  9863  001426  C00E  F05C         	movff	?___ftmul+1,_pow$1262+1
  9864  00142A  C00F  F05D         	movff	?___ftmul+2,_pow$1262+2
  9865  00142E  C05B  F049         	movff	_pow$1262,exp@x
  9866  001432  C05C  F04A         	movff	_pow$1262+1,exp@x+1
  9867  001436  C05D  F04B         	movff	_pow$1262+2,exp@x+2
  9868  00143A  ECEF  F006         	call	_exp	;wreg free
  9869  00143E  C049  F052         	movff	?_exp,pow@x
  9870  001442  C04A  F053         	movff	?_exp+1,pow@x+1
  9871  001446  C04B  F054         	movff	?_exp+2,pow@x+2
  9872  00144A  505E               	movf	pow@sign,w,c
  9873  00144C  B4D8               	btfsc	status,2,c
  9874  00144E  D00F               	goto	i2l932
  9875  001450  C052  F001         	movff	pow@x,___ftneg@f1
  9876  001454  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9877  001458  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9878  00145C  ECF1  F015         	call	___ftneg	;wreg free
  9879  001460  C001  F052         	movff	?___ftneg,?_pow
  9880  001464  C002  F053         	movff	?___ftneg+1,?_pow+1
  9881  001468  C003  F054         	movff	?___ftneg+2,?_pow+2
  9882  00146C  0012               	return	
  9883  00146E                     i2l932:
  9884  00146E  C052  F052         	movff	pow@x,?_pow
  9885  001472  C053  F053         	movff	pow@x+1,?_pow+1
  9886  001476  C054  F054         	movff	pow@x+2,?_pow+2
  9887  00147A  0012               	return		;funcret
  9888  00147C                     __end_of_pow:
  9889                           	opt stack 0
  9890                           pclatu	equ	0xFFB
  9891                           pclath	equ	0xFFA
  9892                           tblptru	equ	0xFF8
  9893                           tblptrh	equ	0xFF7
  9894                           tblptrl	equ	0xFF6
  9895                           tablat	equ	0xFF5
  9896                           prodh	equ	0xFF4
  9897                           prodl	equ	0xFF3
  9898                           intcon	equ	0xFF2
  9899                           intcon2	equ	0xFF1
  9900                           intcon3	equ	0xFF0
  9901                           postinc0	equ	0xFEE
  9902                           fsr0h	equ	0xFEA
  9903                           fsr0l	equ	0xFE9
  9904                           wreg	equ	0xFE8
  9905                           fsr1h	equ	0xFE2
  9906                           fsr1l	equ	0xFE1
  9907                           indf2	equ	0xFDF
  9908                           postinc2	equ	0xFDE
  9909                           postdec2	equ	0xFDD
  9910                           fsr2h	equ	0xFDA
  9911                           fsr2l	equ	0xFD9
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function _log *****************
  9915 ;; Defined at:
  9916 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;  x               3   51[COMRAM] unsigned char 
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;  exponent        2   54[COMRAM] int 
  9921 ;; Return value:  Size  Location     Type
  9922 ;;                  3   51[COMRAM] int 
  9923 ;; Registers used:
  9924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9930 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9934 ;;Total ram usage:        5 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    3
  9937 ;; This function calls:
  9938 ;;		___awtoft
  9939 ;;		___ftadd
  9940 ;;		___ftmul
  9941 ;;		_eval_poly
  9942 ;;		_frexp
  9943 ;; This function is called by:
  9944 ;;		_pow
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           	psect	text49
  9949  00147C                     __ptext49:
  9950                           	opt stack 0
  9951  00147C                     _log:
  9952                           	opt stack 20
  9953                           
  9954                           ;incstack = 0
  9955  00147C  AE36               	btfss	log@x+2,7,c
  9956  00147E  D00C               	goto	i2l3531
  9957  001480  0E00               	movlw	0
  9958  001482  0100               	movlb	0	; () banked
  9959  001484  6FA4               	movwf	(_errno+1)& (0+255),b
  9960  001486  0E21               	movlw	33
  9961  001488  6FA3               	movwf	_errno& (0+255),b
  9962  00148A  0E00               	movlw	0
  9963  00148C  6E34               	movwf	?_log,c
  9964  00148E  0E00               	movlw	0
  9965  001490  6E35               	movwf	?_log+1,c
  9966  001492  0E00               	movlw	0
  9967  001494  6E36               	movwf	?_log+2,c
  9968                           
  9969                           ; BSR set to: 0
  9970  001496  0012               	return	
  9971  001498                     i2l3531:
  9972  001498  5034               	movf	log@x,w,c
  9973  00149A  1035               	iorwf	log@x+1,w,c
  9974  00149C  1036               	iorwf	log@x+2,w,c
  9975  00149E  A4D8               	btfss	status,2,c
  9976  0014A0  D00C               	goto	i2l3537
  9977  0014A2  0E00               	movlw	0
  9978  0014A4  0100               	movlb	0	; () banked
  9979  0014A6  6FA4               	movwf	(_errno+1)& (0+255),b
  9980  0014A8  0E22               	movlw	34
  9981  0014AA  6FA3               	movwf	_errno& (0+255),b
  9982  0014AC  0E00               	movlw	0
  9983  0014AE  6E34               	movwf	?_log,c
  9984  0014B0  0E00               	movlw	0
  9985  0014B2  6E35               	movwf	?_log+1,c
  9986  0014B4  0E00               	movlw	0
  9987  0014B6  6E36               	movwf	?_log+2,c
  9988                           
  9989                           ; BSR set to: 0
  9990  0014B8  0012               	return	
  9991  0014BA                     i2l3537:
  9992  0014BA  0E00               	movlw	0
  9993  0014BC  6E10               	movwf	___ftmul@f2,c
  9994  0014BE  0E00               	movlw	0
  9995  0014C0  6E11               	movwf	___ftmul@f2+1,c
  9996  0014C2  0E40               	movlw	64
  9997  0014C4  6E12               	movwf	___ftmul@f2+2,c
  9998  0014C6  0E37               	movlw	low log@exponent
  9999  0014C8  6E04               	movwf	frexp@eptr,c
 10000  0014CA  0E00               	movlw	high log@exponent
 10001  0014CC  6E05               	movwf	frexp@eptr+1,c
 10002  0014CE  C034  F001         	movff	log@x,frexp@value
 10003  0014D2  C035  F002         	movff	log@x+1,frexp@value+1
 10004  0014D6  C036  F003         	movff	log@x+2,frexp@value+2
 10005  0014DA  EC05  F012         	call	_frexp	;wreg free
 10006  0014DE  C001  F00D         	movff	?_frexp,___ftmul@f1
 10007  0014E2  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
 10008  0014E6  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
 10009  0014EA  EC40  F00C         	call	___ftmul	;wreg free
 10010  0014EE  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10011  0014F2  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10012  0014F6  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10013  0014FA  0E00               	movlw	0
 10014  0014FC  6E1F               	movwf	___ftadd@f2,c
 10015  0014FE  0E80               	movlw	128
 10016  001500  6E20               	movwf	___ftadd@f2+1,c
 10017  001502  0EBF               	movlw	191
 10018  001504  6E21               	movwf	___ftadd@f2+2,c
 10019  001506  ECE3  F007         	call	___ftadd	;wreg free
 10020  00150A  C01C  F034         	movff	?___ftadd,log@x
 10021  00150E  C01D  F035         	movff	?___ftadd+1,log@x+1
 10022  001512  C01E  F036         	movff	?___ftadd+2,log@x+2
 10023  001516  0637               	decf	log@exponent,f,c
 10024  001518  A0D8               	btfss	status,0,c
 10025  00151A  0638               	decf	log@exponent+1,f,c
 10026  00151C  C034  F028         	movff	log@x,eval_poly@x
 10027  001520  C035  F029         	movff	log@x+1,eval_poly@x+1
 10028  001524  C036  F02A         	movff	log@x+2,eval_poly@x+2
 10029  001528  0EFF               	movlw	low log@coeff
 10030  00152A  6E2B               	movwf	eval_poly@d,c
 10031  00152C  0EFD               	movlw	high log@coeff
 10032  00152E  6E2C               	movwf	eval_poly@d+1,c
 10033  001530  0E00               	movlw	0
 10034  001532  6E2E               	movwf	eval_poly@n+1,c
 10035  001534  0E08               	movlw	8
 10036  001536  6E2D               	movwf	eval_poly@n,c
 10037  001538  EC78  F00E         	call	_eval_poly	;wreg free
 10038  00153C  C028  F034         	movff	?_eval_poly,log@x
 10039  001540  C029  F035         	movff	?_eval_poly+1,log@x+1
 10040  001544  C02A  F036         	movff	?_eval_poly+2,log@x+2
 10041  001548  0E72               	movlw	114
 10042  00154A  6E10               	movwf	___ftmul@f2,c
 10043  00154C  0E31               	movlw	49
 10044  00154E  6E11               	movwf	___ftmul@f2+1,c
 10045  001550  0E3F               	movlw	63
 10046  001552  6E12               	movwf	___ftmul@f2+2,c
 10047  001554  C037  F009         	movff	log@exponent,___awtoft@c
 10048  001558  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
 10049  00155C  EC4D  F015         	call	___awtoft	;wreg free
 10050  001560  C009  F00D         	movff	?___awtoft,___ftmul@f1
 10051  001564  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
 10052  001568  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
 10053  00156C  EC40  F00C         	call	___ftmul	;wreg free
 10054  001570  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10055  001574  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10056  001578  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10057  00157C  C034  F01F         	movff	log@x,___ftadd@f2
 10058  001580  C035  F020         	movff	log@x+1,___ftadd@f2+1
 10059  001584  C036  F021         	movff	log@x+2,___ftadd@f2+2
 10060  001588  ECE3  F007         	call	___ftadd	;wreg free
 10061  00158C  C01C  F034         	movff	?___ftadd,?_log
 10062  001590  C01D  F035         	movff	?___ftadd+1,?_log+1
 10063  001594  C01E  F036         	movff	?___ftadd+2,?_log+2
 10064  001598  0012               	return	
 10065  00159A                     __end_of_log:
 10066                           	opt stack 0
 10067                           pclatu	equ	0xFFB
 10068                           pclath	equ	0xFFA
 10069                           tblptru	equ	0xFF8
 10070                           tblptrh	equ	0xFF7
 10071                           tblptrl	equ	0xFF6
 10072                           tablat	equ	0xFF5
 10073                           prodh	equ	0xFF4
 10074                           prodl	equ	0xFF3
 10075                           intcon	equ	0xFF2
 10076                           intcon2	equ	0xFF1
 10077                           intcon3	equ	0xFF0
 10078                           postinc0	equ	0xFEE
 10079                           fsr0h	equ	0xFEA
 10080                           fsr0l	equ	0xFE9
 10081                           wreg	equ	0xFE8
 10082                           fsr1h	equ	0xFE2
 10083                           fsr1l	equ	0xFE1
 10084                           indf2	equ	0xFDF
 10085                           postinc2	equ	0xFDE
 10086                           postdec2	equ	0xFDD
 10087                           fsr2h	equ	0xFDA
 10088                           fsr2l	equ	0xFD9
 10089                           status	equ	0xFD8
 10090                           
 10091 ;; *************** function _exp *****************
 10092 ;; Defined at:
 10093 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
 10094 ;; Parameters:    Size  Location     Type
 10095 ;;  x               3   72[COMRAM] int 
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;  exponent        2   78[COMRAM] int 
 10098 ;;  sign            1   80[COMRAM] unsigned char 
 10099 ;; Return value:  Size  Location     Type
 10100 ;;                  3   72[COMRAM] unsigned char 
 10101 ;; Registers used:
 10102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10108 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10109 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10111 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10112 ;;Total ram usage:        9 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; Hardware stack levels required when called:    3
 10115 ;; This function calls:
 10116 ;;		___awtoft
 10117 ;;		___ftdiv
 10118 ;;		___ftge
 10119 ;;		___ftmul
 10120 ;;		___ftneg
 10121 ;;		___ftsub
 10122 ;;		___fttol
 10123 ;;		_eval_poly
 10124 ;;		_floor
 10125 ;;		_ldexp
 10126 ;; This function is called by:
 10127 ;;		_pow
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           	psect	text50
 10132  000DDE                     __ptext50:
 10133                           	opt stack 0
 10134  000DDE                     _exp:
 10135                           	opt stack 20
 10136                           
 10137                           ;incstack = 0
 10138  000DDE  5049               	movf	exp@x,w,c
 10139  000DE0  104A               	iorwf	exp@x+1,w,c
 10140  000DE2  104B               	iorwf	exp@x+2,w,c
 10141  000DE4  A4D8               	btfss	status,2,c
 10142  000DE6  D007               	goto	i2l3553
 10143  000DE8  0E00               	movlw	0
 10144  000DEA  6E49               	movwf	?_exp,c
 10145  000DEC  0E80               	movlw	128
 10146  000DEE  6E4A               	movwf	?_exp+1,c
 10147  000DF0  0E3F               	movlw	63
 10148  000DF2  6E4B               	movwf	?_exp+2,c
 10149  000DF4  0012               	return	
 10150  000DF6                     i2l3553:
 10151  000DF6  0E72               	movlw	114
 10152  000DF8  6E01               	movwf	___ftge@ff1,c
 10153  000DFA  0E31               	movlw	49
 10154  000DFC  6E02               	movwf	___ftge@ff1+1,c
 10155  000DFE  0E44               	movlw	68
 10156  000E00  6E03               	movwf	___ftge@ff1+2,c
 10157  000E02  C049  F004         	movff	exp@x,___ftge@ff2
 10158  000E06  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
 10159  000E0A  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
 10160  000E0E  EC4D  F012         	call	___ftge	;wreg free
 10161  000E12  B0D8               	btfsc	status,0,c
 10162  000E14  D00C               	goto	i2l3559
 10163  000E16  0E00               	movlw	0
 10164  000E18  0100               	movlb	0	; () banked
 10165  000E1A  6FA4               	movwf	(_errno+1)& (0+255),b
 10166  000E1C  0E22               	movlw	34
 10167  000E1E  6FA3               	movwf	_errno& (0+255),b
 10168  000E20  0EFF               	movlw	255
 10169  000E22  6E49               	movwf	?_exp,c
 10170  000E24  0E7F               	movlw	127
 10171  000E26  6E4A               	movwf	?_exp+1,c
 10172  000E28  0E7F               	movlw	127
 10173  000E2A  6E4B               	movwf	?_exp+2,c
 10174                           
 10175                           ; BSR set to: 0
 10176  000E2C  0012               	return	
 10177  000E2E                     i2l3559:
 10178  000E2E  C049  F001         	movff	exp@x,___ftge@ff1
 10179  000E32  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
 10180  000E36  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
 10181  000E3A  0E49               	movlw	73
 10182  000E3C  6E04               	movwf	___ftge@ff2,c
 10183  000E3E  0E3A               	movlw	58
 10184  000E40  6E05               	movwf	___ftge@ff2+1,c
 10185  000E42  0EC4               	movlw	196
 10186  000E44  6E06               	movwf	___ftge@ff2+2,c
 10187  000E46  EC4D  F012         	call	___ftge	;wreg free
 10188  000E4A  B0D8               	btfsc	status,0,c
 10189  000E4C  D00C               	goto	i2l3565
 10190  000E4E  0E00               	movlw	0
 10191  000E50  0100               	movlb	0	; () banked
 10192  000E52  6FA4               	movwf	(_errno+1)& (0+255),b
 10193  000E54  0E22               	movlw	34
 10194  000E56  6FA3               	movwf	_errno& (0+255),b
 10195  000E58  0E00               	movlw	0
 10196  000E5A  6E49               	movwf	?_exp,c
 10197  000E5C  0E00               	movlw	0
 10198  000E5E  6E4A               	movwf	?_exp+1,c
 10199  000E60  0E00               	movlw	0
 10200  000E62  6E4B               	movwf	?_exp+2,c
 10201                           
 10202                           ; BSR set to: 0
 10203  000E64  0012               	return	
 10204  000E66                     i2l3565:
 10205  000E66  AE4B               	btfss	exp@x+2,7,c
 10206  000E68  D002               	goto	i2u308_40
 10207  000E6A  0E01               	movlw	1
 10208  000E6C  D001               	goto	i2u309_40
 10209  000E6E                     i2u308_40:
 10210  000E6E  0E00               	movlw	0
 10211  000E70                     i2u309_40:
 10212  000E70  6E51               	movwf	exp@sign,c
 10213  000E72  5051               	movf	exp@sign,w,c
 10214  000E74  B4D8               	btfsc	status,2,c
 10215  000E76  D00E               	goto	i2l1090
 10216  000E78  C049  F001         	movff	exp@x,___ftneg@f1
 10217  000E7C  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
 10218  000E80  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
 10219  000E84  ECF1  F015         	call	___ftneg	;wreg free
 10220  000E88  C001  F049         	movff	?___ftneg,exp@x
 10221  000E8C  C002  F04A         	movff	?___ftneg+1,exp@x+1
 10222  000E90  C003  F04B         	movff	?___ftneg+2,exp@x+2
 10223  000E94                     i2l1090:
 10224  000E94  C049  F00D         	movff	exp@x,___ftmul@f1
 10225  000E98  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
 10226  000E9C  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
 10227  000EA0  0EAA               	movlw	170
 10228  000EA2  6E10               	movwf	___ftmul@f2,c
 10229  000EA4  0EB8               	movlw	184
 10230  000EA6  6E11               	movwf	___ftmul@f2+1,c
 10231  000EA8  0E3F               	movlw	63
 10232  000EAA  6E12               	movwf	___ftmul@f2+2,c
 10233  000EAC  EC40  F00C         	call	___ftmul	;wreg free
 10234  000EB0  C00D  F049         	movff	?___ftmul,exp@x
 10235  000EB4  C00E  F04A         	movff	?___ftmul+1,exp@x+1
 10236  000EB8  C00F  F04B         	movff	?___ftmul+2,exp@x+2
 10237  000EBC  C049  F041         	movff	exp@x,floor@x
 10238  000EC0  C04A  F042         	movff	exp@x+1,floor@x+1
 10239  000EC4  C04B  F043         	movff	exp@x+2,floor@x+2
 10240  000EC8  ECA0  F00D         	call	_floor	;wreg free
 10241  000ECC  C041  F04C         	movff	?_floor,_exp$1263
 10242  000ED0  C042  F04D         	movff	?_floor+1,_exp$1263+1
 10243  000ED4  C043  F04E         	movff	?_floor+2,_exp$1263+2
 10244  000ED8  C04C  F028         	movff	_exp$1263,___fttol@f1
 10245  000EDC  C04D  F029         	movff	_exp$1263+1,___fttol@f1+1
 10246  000EE0  C04E  F02A         	movff	_exp$1263+2,___fttol@f1+2
 10247  000EE4  ECC6  F00B         	call	___fttol	;wreg free
 10248  000EE8  C028  F04F         	movff	?___fttol,exp@exponent
 10249  000EEC  C029  F050         	movff	?___fttol+1,exp@exponent+1
 10250  000EF0  C049  F028         	movff	exp@x,___ftsub@f1
 10251  000EF4  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
 10252  000EF8  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
 10253  000EFC  C04F  F009         	movff	exp@exponent,___awtoft@c
 10254  000F00  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
 10255  000F04  EC4D  F015         	call	___awtoft	;wreg free
 10256  000F08  C009  F02B         	movff	?___awtoft,___ftsub@f2
 10257  000F0C  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
 10258  000F10  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
 10259  000F14  EC0E  F015         	call	___ftsub	;wreg free
 10260  000F18  C028  F049         	movff	?___ftsub,exp@x
 10261  000F1C  C029  F04A         	movff	?___ftsub+1,exp@x+1
 10262  000F20  C02A  F04B         	movff	?___ftsub+2,exp@x+2
 10263  000F24  C049  F028         	movff	exp@x,eval_poly@x
 10264  000F28  C04A  F029         	movff	exp@x+1,eval_poly@x+1
 10265  000F2C  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
 10266  000F30  0EE1               	movlw	low exp@coeff
 10267  000F32  6E2B               	movwf	eval_poly@d,c
 10268  000F34  0EFD               	movlw	high exp@coeff
 10269  000F36  6E2C               	movwf	eval_poly@d+1,c
 10270  000F38  0E00               	movlw	0
 10271  000F3A  6E2E               	movwf	eval_poly@n+1,c
 10272  000F3C  0E09               	movlw	9
 10273  000F3E  6E2D               	movwf	eval_poly@n,c
 10274  000F40  EC78  F00E         	call	_eval_poly	;wreg free
 10275  000F44  C028  F034         	movff	?_eval_poly,ldexp@value
 10276  000F48  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 10277  000F4C  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 10278  000F50  C04F  F037         	movff	exp@exponent,ldexp@newexp
 10279  000F54  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 10280  000F58  ECE1  F00E         	call	_ldexp	;wreg free
 10281  000F5C  C034  F049         	movff	?_ldexp,exp@x
 10282  000F60  C035  F04A         	movff	?_ldexp+1,exp@x+1
 10283  000F64  C036  F04B         	movff	?_ldexp+2,exp@x+2
 10284  000F68  5051               	movf	exp@sign,w,c
 10285  000F6A  B4D8               	btfsc	status,2,c
 10286  000F6C  D025               	goto	i2l1091
 10287  000F6E  2849               	incf	exp@x,w,c
 10288  000F70  E10E               	bnz	i2l3587
 10289  000F72  0E7F               	movlw	127
 10290  000F74  184A               	xorwf	exp@x+1,w,c
 10291  000F76  E10B               	bnz	i2l3587
 10292  000F78  0E7F               	movlw	127
 10293  000F7A  184B               	xorwf	exp@x+2,w,c
 10294  000F7C  A4D8               	btfss	status,2,c
 10295  000F7E  D007               	goto	i2l3587
 10296  000F80  0E00               	movlw	0
 10297  000F82  6E49               	movwf	?_exp,c
 10298  000F84  0E00               	movlw	0
 10299  000F86  6E4A               	movwf	?_exp+1,c
 10300  000F88  0E00               	movlw	0
 10301  000F8A  6E4B               	movwf	?_exp+2,c
 10302  000F8C  0012               	return	
 10303  000F8E                     i2l3587:
 10304  000F8E  0E00               	movlw	0
 10305  000F90  6E09               	movwf	___ftdiv@f1,c
 10306  000F92  0E80               	movlw	128
 10307  000F94  6E0A               	movwf	___ftdiv@f1+1,c
 10308  000F96  0E3F               	movlw	63
 10309  000F98  6E0B               	movwf	___ftdiv@f1+2,c
 10310  000F9A  C049  F00C         	movff	exp@x,___ftdiv@f2
 10311  000F9E  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
 10312  000FA2  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
 10313  000FA6  EC2D  F00D         	call	___ftdiv	;wreg free
 10314  000FAA  C009  F049         	movff	?___ftdiv,?_exp
 10315  000FAE  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
 10316  000FB2  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
 10317  000FB6  0012               	return	
 10318  000FB8                     i2l1091:
 10319  000FB8  C049  F049         	movff	exp@x,?_exp
 10320  000FBC  C04A  F04A         	movff	exp@x+1,?_exp+1
 10321  000FC0  C04B  F04B         	movff	exp@x+2,?_exp+2
 10322  000FC4  0012               	return		;funcret
 10323  000FC6                     __end_of_exp:
 10324                           	opt stack 0
 10325                           pclatu	equ	0xFFB
 10326                           pclath	equ	0xFFA
 10327                           tblptru	equ	0xFF8
 10328                           tblptrh	equ	0xFF7
 10329                           tblptrl	equ	0xFF6
 10330                           tablat	equ	0xFF5
 10331                           prodh	equ	0xFF4
 10332                           prodl	equ	0xFF3
 10333                           intcon	equ	0xFF2
 10334                           intcon2	equ	0xFF1
 10335                           intcon3	equ	0xFF0
 10336                           postinc0	equ	0xFEE
 10337                           fsr0h	equ	0xFEA
 10338                           fsr0l	equ	0xFE9
 10339                           wreg	equ	0xFE8
 10340                           fsr1h	equ	0xFE2
 10341                           fsr1l	equ	0xFE1
 10342                           indf2	equ	0xFDF
 10343                           postinc2	equ	0xFDE
 10344                           postdec2	equ	0xFDD
 10345                           fsr2h	equ	0xFDA
 10346                           fsr2l	equ	0xFD9
 10347                           status	equ	0xFD8
 10348                           
 10349 ;; *************** function _ldexp *****************
 10350 ;; Defined at:
 10351 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10352 ;; Parameters:    Size  Location     Type
 10353 ;;  value           3   51[COMRAM] unsigned char 
 10354 ;;  newexp          2   54[COMRAM] int 
 10355 ;; Auto vars:     Size  Location     Type
 10356 ;;		None
 10357 ;; Return value:  Size  Location     Type
 10358 ;;                  3   51[COMRAM] int 
 10359 ;; Registers used:
 10360 ;;		wreg, status,2, status,0
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/0
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10366 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10368 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10369 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10370 ;;Total ram usage:        7 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; This function calls:
 10373 ;;		Nothing
 10374 ;; This function is called by:
 10375 ;;		_exp
 10376 ;; This function uses a non-reentrant model
 10377 ;;
 10378                           
 10379                           	psect	text51
 10380  001DC2                     __ptext51:
 10381                           	opt stack 0
 10382  001DC2                     _ldexp:
 10383                           	opt stack 22
 10384                           
 10385                           ;incstack = 0
 10386  001DC2  5034               	movf	ldexp@value,w,c
 10387  001DC4  1035               	iorwf	ldexp@value+1,w,c
 10388  001DC6  1036               	iorwf	ldexp@value+2,w,c
 10389  001DC8  A4D8               	btfss	status,2,c
 10390  001DCA  D007               	goto	i2l3395
 10391  001DCC  0E00               	movlw	0
 10392  001DCE  6E34               	movwf	?_ldexp,c
 10393  001DD0  0E00               	movlw	0
 10394  001DD2  6E35               	movwf	?_ldexp+1,c
 10395  001DD4  0E00               	movlw	0
 10396  001DD6  6E36               	movwf	?_ldexp+2,c
 10397  001DD8  0012               	return	
 10398  001DDA                     i2l3395:
 10399  001DDA  5036               	movf	ldexp@value+2,w,c
 10400  001DDC  0B7F               	andlw	127
 10401  001DDE  6E39               	movwf	??_ldexp& (0+255),c
 10402  001DE0  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 10403  001DE2  90D8               	bcf	status,0,c
 10404  001DE4  3639               	rlcf	??_ldexp,f,c
 10405  001DE6  363A               	rlcf	??_ldexp+1,f,c
 10406  001DE8  5039               	movf	??_ldexp,w,c
 10407  001DEA  2637               	addwf	ldexp@newexp,f,c
 10408  001DEC  503A               	movf	??_ldexp+1,w,c
 10409  001DEE  2238               	addwfc	ldexp@newexp+1,f,c
 10410  001DF0  AE35               	btfss	ldexp@value+1,7,c
 10411  001DF2  D003               	goto	i2u288_40
 10412  001DF4  6A39               	clrf	??_ldexp& (0+255),c
 10413  001DF6  2A39               	incf	??_ldexp& (0+255),f,c
 10414  001DF8  D001               	goto	i2u288_48
 10415  001DFA                     i2u288_40:
 10416  001DFA  6A39               	clrf	??_ldexp& (0+255),c
 10417  001DFC                     i2u288_48:
 10418  001DFC  5039               	movf	??_ldexp,w,c
 10419  001DFE  2637               	addwf	ldexp@newexp,f,c
 10420  001E00  0E00               	movlw	0
 10421  001E02  2238               	addwfc	ldexp@newexp+1,f,c
 10422  001E04  AE38               	btfss	ldexp@newexp+1,7,c
 10423  001E06  D00C               	goto	i2l3403
 10424  001E08  0E00               	movlw	0
 10425  001E0A  0100               	movlb	0	; () banked
 10426  001E0C  6FA4               	movwf	(_errno+1)& (0+255),b
 10427  001E0E  0E22               	movlw	34
 10428  001E10  6FA3               	movwf	_errno& (0+255),b
 10429  001E12  0E00               	movlw	0
 10430  001E14  6E34               	movwf	?_ldexp,c
 10431  001E16  0E00               	movlw	0
 10432  001E18  6E35               	movwf	?_ldexp+1,c
 10433  001E1A  0E00               	movlw	0
 10434  001E1C                     L11:
 10435  001E1C  6E36               	movwf	?_ldexp+2,c
 10436                           
 10437                           ; BSR set to: 0
 10438  001E1E  0012               	return	
 10439  001E20                     i2l3403:
 10440  001E20  BE38               	btfsc	ldexp@newexp+1,7,c
 10441  001E22  D016               	goto	i2l3419
 10442  001E24  0438               	decf	ldexp@newexp+1,w,c
 10443  001E26  A0D8               	btfss	status,0,c
 10444  001E28  D013               	goto	i2l3419
 10445  001E2A  0E00               	movlw	0
 10446  001E2C  0100               	movlb	0	; () banked
 10447  001E2E  6FA4               	movwf	(_errno+1)& (0+255),b
 10448  001E30  0E22               	movlw	34
 10449  001E32  6FA3               	movwf	_errno& (0+255),b
 10450                           
 10451                           ; BSR set to: 0
 10452  001E34  AE36               	btfss	ldexp@value+2,7,c
 10453  001E36  D006               	goto	i2l3415
 10454                           
 10455                           ; BSR set to: 0
 10456  001E38  0EFF               	movlw	255
 10457  001E3A  6E34               	movwf	?_ldexp,c
 10458  001E3C  0E7F               	movlw	127
 10459  001E3E  6E35               	movwf	?_ldexp+1,c
 10460  001E40  0EFF               	movlw	255
 10461  001E42  D7EC               	goto	L11
 10462  001E44                     i2l3415:
 10463                           
 10464                           ; BSR set to: 0
 10465  001E44  0EFF               	movlw	255
 10466  001E46  6E34               	movwf	?_ldexp,c
 10467  001E48  0E7F               	movlw	127
 10468  001E4A  6E35               	movwf	?_ldexp+1,c
 10469  001E4C  0E7F               	movlw	127
 10470  001E4E  D7E6               	goto	L11
 10471  001E50                     i2l3419:
 10472  001E50  3438               	rlcf	ldexp@newexp+1,w,c
 10473  001E52  3038               	rrcf	ldexp@newexp+1,w,c
 10474  001E54  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 10475  001E56  3037               	rrcf	ldexp@newexp,w,c
 10476  001E58  6E39               	movwf	??_ldexp& (0+255),c
 10477  001E5A  5036               	movf	ldexp@value+2,w,c
 10478  001E5C  1839               	xorwf	??_ldexp,w,c
 10479  001E5E  0B80               	andlw	-128
 10480  001E60  1839               	xorwf	??_ldexp,w,c
 10481  001E62  6E36               	movwf	ldexp@value+2,c
 10482  001E64  C037  F039         	movff	ldexp@newexp,??_ldexp
 10483  001E68  0E01               	movlw	1
 10484  001E6A  1639               	andwf	??_ldexp,f,c
 10485  001E6C  3239               	rrcf	??_ldexp,f,c
 10486  001E6E  3239               	rrcf	??_ldexp,f,c
 10487  001E70  5035               	movf	ldexp@value+1,w,c
 10488  001E72  1839               	xorwf	??_ldexp,w,c
 10489  001E74  0B7F               	andlw	-129
 10490  001E76  1839               	xorwf	??_ldexp,w,c
 10491  001E78  6E35               	movwf	ldexp@value+1,c
 10492  001E7A  C034  F034         	movff	ldexp@value,?_ldexp
 10493  001E7E  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 10494  001E82  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 10495  001E86  0012               	return	
 10496  001E88                     __end_of_ldexp:
 10497                           	opt stack 0
 10498                           pclatu	equ	0xFFB
 10499                           pclath	equ	0xFFA
 10500                           tblptru	equ	0xFF8
 10501                           tblptrh	equ	0xFF7
 10502                           tblptrl	equ	0xFF6
 10503                           tablat	equ	0xFF5
 10504                           prodh	equ	0xFF4
 10505                           prodl	equ	0xFF3
 10506                           intcon	equ	0xFF2
 10507                           intcon2	equ	0xFF1
 10508                           intcon3	equ	0xFF0
 10509                           postinc0	equ	0xFEE
 10510                           fsr0h	equ	0xFEA
 10511                           fsr0l	equ	0xFE9
 10512                           wreg	equ	0xFE8
 10513                           fsr1h	equ	0xFE2
 10514                           fsr1l	equ	0xFE1
 10515                           indf2	equ	0xFDF
 10516                           postinc2	equ	0xFDE
 10517                           postdec2	equ	0xFDD
 10518                           fsr2h	equ	0xFDA
 10519                           fsr2l	equ	0xFD9
 10520                           status	equ	0xFD8
 10521                           
 10522 ;; *************** function _floor *****************
 10523 ;; Defined at:
 10524 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;  x               3   64[COMRAM] int 
 10527 ;; Auto vars:     Size  Location     Type
 10528 ;;  i               3   67[COMRAM] int 
 10529 ;;  expon           2   70[COMRAM] int 
 10530 ;; Return value:  Size  Location     Type
 10531 ;;                  3   64[COMRAM] int 
 10532 ;; Registers used:
 10533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10539 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;Total ram usage:        8 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    2
 10546 ;; This function calls:
 10547 ;;		___altoft
 10548 ;;		___ftadd
 10549 ;;		___ftge
 10550 ;;		___fttol
 10551 ;;		_frexp
 10552 ;; This function is called by:
 10553 ;;		_exp
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           	psect	text52
 10558  001B40                     __ptext52:
 10559                           	opt stack 0
 10560  001B40                     _floor:
 10561                           	opt stack 20
 10562                           
 10563                           ;incstack = 0
 10564  001B40  C041  F001         	movff	floor@x,frexp@value
 10565  001B44  C042  F002         	movff	floor@x+1,frexp@value+1
 10566  001B48  C043  F003         	movff	floor@x+2,frexp@value+2
 10567  001B4C  0E47               	movlw	low floor@expon
 10568  001B4E  6E04               	movwf	frexp@eptr,c
 10569  001B50  0E00               	movlw	high floor@expon
 10570  001B52  6E05               	movwf	frexp@eptr+1,c
 10571  001B54  EC05  F012         	call	_frexp	;wreg free
 10572  001B58  AE48               	btfss	floor@expon+1,7,c
 10573  001B5A  D010               	goto	i2l3373
 10574  001B5C  AE43               	btfss	floor@x+2,7,c
 10575  001B5E  D007               	goto	i2l3369
 10576  001B60  0E00               	movlw	0
 10577  001B62  6E41               	movwf	?_floor,c
 10578  001B64  0E80               	movlw	128
 10579  001B66  6E42               	movwf	?_floor+1,c
 10580  001B68  0EBF               	movlw	191
 10581  001B6A  6E43               	movwf	?_floor+2,c
 10582  001B6C  0012               	return	
 10583  001B6E                     i2l3369:
 10584  001B6E  0E00               	movlw	0
 10585  001B70  6E41               	movwf	?_floor,c
 10586  001B72  0E00               	movlw	0
 10587  001B74  6E42               	movwf	?_floor+1,c
 10588  001B76  0E00               	movlw	0
 10589  001B78  6E43               	movwf	?_floor+2,c
 10590  001B7A  0012               	return	
 10591  001B7C                     i2l3373:
 10592  001B7C  5048               	movf	floor@expon+1,w,c
 10593  001B7E  E104               	bnz	i2u284_40
 10594  001B80  0E15               	movlw	21
 10595  001B82  5C47               	subwf	floor@expon,w,c
 10596  001B84  A0D8               	btfss	status,0,c
 10597  001B86  D007               	goto	i2l3377
 10598  001B88                     i2u284_40:
 10599  001B88  C041  F041         	movff	floor@x,?_floor
 10600  001B8C  C042  F042         	movff	floor@x+1,?_floor+1
 10601  001B90  C043  F043         	movff	floor@x+2,?_floor+2
 10602  001B94  0012               	return	
 10603  001B96                     i2l3377:
 10604  001B96  C041  F028         	movff	floor@x,___fttol@f1
 10605  001B9A  C042  F029         	movff	floor@x+1,___fttol@f1+1
 10606  001B9E  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 10607  001BA2  ECC6  F00B         	call	___fttol	;wreg free
 10608  001BA6  C028  F037         	movff	?___fttol,___altoft@c
 10609  001BAA  C029  F038         	movff	?___fttol+1,___altoft@c+1
 10610  001BAE  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 10611  001BB2  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 10612  001BB6  EC13  F013         	call	___altoft	;wreg free
 10613  001BBA  C037  F044         	movff	?___altoft,floor@i
 10614  001BBE  C038  F045         	movff	?___altoft+1,floor@i+1
 10615  001BC2  C039  F046         	movff	?___altoft+2,floor@i+2
 10616  001BC6  C041  F001         	movff	floor@x,___ftge@ff1
 10617  001BCA  C042  F002         	movff	floor@x+1,___ftge@ff1+1
 10618  001BCE  C043  F003         	movff	floor@x+2,___ftge@ff1+2
 10619  001BD2  C044  F004         	movff	floor@i,___ftge@ff2
 10620  001BD6  C045  F005         	movff	floor@i+1,___ftge@ff2+1
 10621  001BDA  C046  F006         	movff	floor@i+2,___ftge@ff2+2
 10622  001BDE  EC4D  F012         	call	___ftge	;wreg free
 10623  001BE2  B0D8               	btfsc	status,0,c
 10624  001BE4  D015               	goto	i2l1101
 10625  001BE6  C044  F01C         	movff	floor@i,___ftadd@f1
 10626  001BEA  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 10627  001BEE  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 10628  001BF2  0E00               	movlw	0
 10629  001BF4  6E1F               	movwf	___ftadd@f2,c
 10630  001BF6  0E80               	movlw	128
 10631  001BF8  6E20               	movwf	___ftadd@f2+1,c
 10632  001BFA  0EBF               	movlw	191
 10633  001BFC  6E21               	movwf	___ftadd@f2+2,c
 10634  001BFE  ECE3  F007         	call	___ftadd	;wreg free
 10635  001C02  C01C  F041         	movff	?___ftadd,?_floor
 10636  001C06  C01D  F042         	movff	?___ftadd+1,?_floor+1
 10637  001C0A  C01E  F043         	movff	?___ftadd+2,?_floor+2
 10638  001C0E  0012               	return	
 10639  001C10                     i2l1101:
 10640  001C10  C044  F041         	movff	floor@i,?_floor
 10641  001C14  C045  F042         	movff	floor@i+1,?_floor+1
 10642  001C18  C046  F043         	movff	floor@i+2,?_floor+2
 10643  001C1C  0012               	return		;funcret
 10644  001C1E                     __end_of_floor:
 10645                           	opt stack 0
 10646                           pclatu	equ	0xFFB
 10647                           pclath	equ	0xFFA
 10648                           tblptru	equ	0xFF8
 10649                           tblptrh	equ	0xFF7
 10650                           tblptrl	equ	0xFF6
 10651                           tablat	equ	0xFF5
 10652                           prodh	equ	0xFF4
 10653                           prodl	equ	0xFF3
 10654                           intcon	equ	0xFF2
 10655                           intcon2	equ	0xFF1
 10656                           intcon3	equ	0xFF0
 10657                           postinc0	equ	0xFEE
 10658                           fsr0h	equ	0xFEA
 10659                           fsr0l	equ	0xFE9
 10660                           wreg	equ	0xFE8
 10661                           fsr1h	equ	0xFE2
 10662                           fsr1l	equ	0xFE1
 10663                           indf2	equ	0xFDF
 10664                           postinc2	equ	0xFDE
 10665                           postdec2	equ	0xFDD
 10666                           fsr2h	equ	0xFDA
 10667                           fsr2l	equ	0xFD9
 10668                           status	equ	0xFD8
 10669                           
 10670 ;; *************** function _frexp *****************
 10671 ;; Defined at:
 10672 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10673 ;; Parameters:    Size  Location     Type
 10674 ;;  value           3    0[COMRAM] int 
 10675 ;;  eptr            2    3[COMRAM] PTR int 
 10676 ;;		 -> log@exponent(2), floor@expon(2), 
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;		None
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  3    0[COMRAM] PTR int 
 10681 ;; Registers used:
 10682 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 0/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10688 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10690 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10691 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10692 ;;Total ram usage:        7 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; This function calls:
 10695 ;;		Nothing
 10696 ;; This function is called by:
 10697 ;;		_floor
 10698 ;;		_log
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           	psect	text53
 10703  00240A                     __ptext53:
 10704                           	opt stack 0
 10705  00240A                     _frexp:
 10706                           	opt stack 22
 10707                           
 10708                           ;incstack = 0
 10709  00240A  5001               	movf	frexp@value,w,c
 10710  00240C  1002               	iorwf	frexp@value+1,w,c
 10711  00240E  1003               	iorwf	frexp@value+2,w,c
 10712  002410  A4D8               	btfss	status,2,c
 10713  002412  D00F               	goto	i2l3249
 10714  002414  C004  FFD9         	movff	frexp@eptr,fsr2l
 10715  002418  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10716  00241C  0E00               	movlw	0
 10717  00241E  6EDE               	movwf	postinc2,c
 10718  002420  0E00               	movlw	0
 10719  002422  6EDD               	movwf	postdec2,c
 10720  002424  0E00               	movlw	0
 10721  002426  6E01               	movwf	?_frexp,c
 10722  002428  0E00               	movlw	0
 10723  00242A  6E02               	movwf	?_frexp+1,c
 10724  00242C  0E00               	movlw	0
 10725  00242E  6E03               	movwf	?_frexp+2,c
 10726  002430  0012               	return	
 10727  002432                     i2l3249:
 10728  002432  5003               	movf	frexp@value+2,w,c
 10729  002434  0B7F               	andlw	127
 10730  002436  6E06               	movwf	??_frexp& (0+255),c
 10731  002438  6A07               	clrf	(??_frexp+1)& (0+255),c
 10732  00243A  90D8               	bcf	status,0,c
 10733  00243C  3606               	rlcf	??_frexp,f,c
 10734  00243E  3607               	rlcf	??_frexp+1,f,c
 10735  002440  C004  FFD9         	movff	frexp@eptr,fsr2l
 10736  002444  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10737  002448  C006  FFDE         	movff	??_frexp,postinc2
 10738  00244C  C007  FFDD         	movff	??_frexp+1,postdec2
 10739  002450  AE02               	btfss	frexp@value+1,7,c
 10740  002452  D003               	goto	i2u271_40
 10741  002454  6A06               	clrf	??_frexp& (0+255),c
 10742  002456  2A06               	incf	??_frexp& (0+255),f,c
 10743  002458  D001               	goto	i2u271_48
 10744  00245A                     i2u271_40:
 10745  00245A  6A06               	clrf	??_frexp& (0+255),c
 10746  00245C                     i2u271_48:
 10747  00245C  5006               	movf	??_frexp,w,c
 10748  00245E  C004  FFD9         	movff	frexp@eptr,fsr2l
 10749  002462  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10750  002466  12DE               	iorwf	postinc2,f,c
 10751  002468  0E00               	movlw	0
 10752  00246A  12DD               	iorwf	postdec2,f,c
 10753  00246C  C004  FFD9         	movff	frexp@eptr,fsr2l
 10754  002470  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10755  002474  0E82               	movlw	130
 10756  002476  26DE               	addwf	postinc2,f,c
 10757  002478  0EFF               	movlw	255
 10758  00247A  22DD               	addwfc	postdec2,f,c
 10759  00247C  8003               	bsf	frexp@value+2,0,c
 10760  00247E  8203               	bsf	frexp@value+2,1,c
 10761  002480  8403               	bsf	frexp@value+2,2,c
 10762  002482  8603               	bsf	frexp@value+2,3,c
 10763  002484  8803               	bsf	frexp@value+2,4,c
 10764  002486  8A03               	bsf	frexp@value+2,5,c
 10765  002488  9C03               	bcf	frexp@value+2,6,c
 10766  00248A  9E02               	bcf	frexp@value+1,7,c
 10767  00248C  C001  F001         	movff	frexp@value,?_frexp
 10768  002490  C002  F002         	movff	frexp@value+1,?_frexp+1
 10769  002494  C003  F003         	movff	frexp@value+2,?_frexp+2
 10770  002498  0012               	return	
 10771  00249A                     __end_of_frexp:
 10772                           	opt stack 0
 10773                           pclatu	equ	0xFFB
 10774                           pclath	equ	0xFFA
 10775                           tblptru	equ	0xFF8
 10776                           tblptrh	equ	0xFF7
 10777                           tblptrl	equ	0xFF6
 10778                           tablat	equ	0xFF5
 10779                           prodh	equ	0xFF4
 10780                           prodl	equ	0xFF3
 10781                           intcon	equ	0xFF2
 10782                           intcon2	equ	0xFF1
 10783                           intcon3	equ	0xFF0
 10784                           postinc0	equ	0xFEE
 10785                           fsr0h	equ	0xFEA
 10786                           fsr0l	equ	0xFE9
 10787                           wreg	equ	0xFE8
 10788                           fsr1h	equ	0xFE2
 10789                           fsr1l	equ	0xFE1
 10790                           indf2	equ	0xFDF
 10791                           postinc2	equ	0xFDE
 10792                           postdec2	equ	0xFDD
 10793                           fsr2h	equ	0xFDA
 10794                           fsr2l	equ	0xFD9
 10795                           status	equ	0xFD8
 10796                           
 10797 ;; *************** function ___fttol *****************
 10798 ;; Defined at:
 10799 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10800 ;; Parameters:    Size  Location     Type
 10801 ;;  f1              3   39[COMRAM] float 
 10802 ;; Auto vars:     Size  Location     Type
 10803 ;;  lval            4   49[COMRAM] unsigned long 
 10804 ;;  exp1            1   53[COMRAM] unsigned char 
 10805 ;;  sign1           1   48[COMRAM] unsigned char 
 10806 ;; Return value:  Size  Location     Type
 10807 ;;                  4   39[COMRAM] long 
 10808 ;; Registers used:
 10809 ;;		wreg, status,2, status,0
 10810 ;; Tracked objects:
 10811 ;;		On entry : 0/0
 10812 ;;		On exit  : 0/0
 10813 ;;		Unchanged: 0/0
 10814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10815 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10816 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10817 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;Total ram usage:       15 bytes
 10820 ;; Hardware stack levels used:    1
 10821 ;; This function calls:
 10822 ;;		Nothing
 10823 ;; This function is called by:
 10824 ;;		_dec_to_hex
 10825 ;;		_pow
 10826 ;;		_exp
 10827 ;;		_floor
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           	psect	text54
 10832  00178C                     __ptext54:
 10833                           	opt stack 0
 10834  00178C                     ___fttol:
 10835                           	opt stack 21
 10836                           
 10837                           ;incstack = 0
 10838  00178C  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 10839  001790  6A2D               	clrf	(??___fttol+1)& (0+255),c
 10840  001792  6A2E               	clrf	(??___fttol+2)& (0+255),c
 10841  001794  3429               	rlcf	___fttol@f1+1,w,c
 10842  001796  362C               	rlcf	??___fttol& (0+255),f,c
 10843  001798  E301               	bnc	u262_41
 10844  00179A  802D               	bsf	(??___fttol+1)& (0+255),0,c
 10845  00179C                     u262_41:
 10846  00179C  502C               	movf	??___fttol,w,c
 10847  00179E  6E36               	movwf	___fttol@exp1,c
 10848  0017A0  5036               	movf	___fttol@exp1,w,c
 10849  0017A2  A4D8               	btfss	status,2,c
 10850  0017A4  D009               	goto	i2l3201
 10851  0017A6  0E00               	movlw	0
 10852  0017A8  6E28               	movwf	?___fttol,c
 10853  0017AA  0E00               	movlw	0
 10854  0017AC  6E29               	movwf	?___fttol+1,c
 10855  0017AE  0E00               	movlw	0
 10856  0017B0  6E2A               	movwf	?___fttol+2,c
 10857  0017B2  0E00               	movlw	0
 10858  0017B4  6E2B               	movwf	?___fttol+3,c
 10859  0017B6  0012               	return	
 10860  0017B8                     i2l3201:
 10861  0017B8  0E17               	movlw	23
 10862  0017BA  6E2C               	movwf	??___fttol& (0+255),c
 10863  0017BC  C028  F02D         	movff	___fttol@f1,??___fttol+1
 10864  0017C0  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 10865  0017C4  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 10866  0017C8  282C               	incf	??___fttol,w,c
 10867  0017CA  6E30               	movwf	(??___fttol+4)& (0+255),c
 10868  0017CC  D004               	goto	i2u264_40
 10869  0017CE                     i2u264_45:
 10870  0017CE  90D8               	bcf	status,0,c
 10871  0017D0  322F               	rrcf	??___fttol+3,f,c
 10872  0017D2  322E               	rrcf	??___fttol+2,f,c
 10873  0017D4  322D               	rrcf	??___fttol+1,f,c
 10874  0017D6                     i2u264_40:
 10875  0017D6  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 10876  0017D8  D7FA               	goto	i2u264_45
 10877  0017DA  502D               	movf	??___fttol+1,w,c
 10878  0017DC  6E31               	movwf	___fttol@sign1,c
 10879  0017DE  8E29               	bsf	___fttol@f1+1,7,c
 10880  0017E0  0EFF               	movlw	255
 10881  0017E2  1628               	andwf	___fttol@f1,f,c
 10882  0017E4  0EFF               	movlw	255
 10883  0017E6  1629               	andwf	___fttol@f1+1,f,c
 10884  0017E8  0E00               	movlw	0
 10885  0017EA  162A               	andwf	___fttol@f1+2,f,c
 10886  0017EC  5028               	movf	___fttol@f1,w,c
 10887  0017EE  6E32               	movwf	___fttol@lval,c
 10888  0017F0  5029               	movf	___fttol@f1+1,w,c
 10889  0017F2  6E33               	movwf	___fttol@lval+1,c
 10890  0017F4  502A               	movf	___fttol@f1+2,w,c
 10891  0017F6  6E34               	movwf	___fttol@lval+2,c
 10892  0017F8  6A35               	clrf	___fttol@lval+3,c
 10893  0017FA  0E8E               	movlw	142
 10894  0017FC  5E36               	subwf	___fttol@exp1,f,c
 10895  0017FE  AE36               	btfss	___fttol@exp1,7,c
 10896  001800  D016               	goto	i2l3223
 10897  001802  5036               	movf	___fttol@exp1,w,c
 10898  001804  0A80               	xorlw	128
 10899  001806  0F8F               	addlw	143
 10900  001808  B0D8               	btfsc	status,0,c
 10901  00180A  D009               	goto	i2l3219
 10902  00180C  0E00               	movlw	0
 10903  00180E  6E28               	movwf	?___fttol,c
 10904  001810  0E00               	movlw	0
 10905  001812  6E29               	movwf	?___fttol+1,c
 10906  001814  0E00               	movlw	0
 10907  001816  6E2A               	movwf	?___fttol+2,c
 10908  001818  0E00               	movlw	0
 10909  00181A  6E2B               	movwf	?___fttol+3,c
 10910  00181C  0012               	return	
 10911  00181E                     i2l3219:
 10912  00181E  90D8               	bcf	status,0,c
 10913  001820  3235               	rrcf	___fttol@lval+3,f,c
 10914  001822  3234               	rrcf	___fttol@lval+2,f,c
 10915  001824  3233               	rrcf	___fttol@lval+1,f,c
 10916  001826  3232               	rrcf	___fttol@lval,f,c
 10917  001828  3E36               	incfsz	___fttol@exp1,f,c
 10918  00182A  D7F9               	goto	i2l3219
 10919  00182C  D015               	goto	i2l3233
 10920  00182E                     i2l3223:
 10921  00182E  0E17               	movlw	23
 10922  001830  6436               	cpfsgt	___fttol@exp1,c
 10923  001832  D00F               	goto	i2l3231
 10924  001834  0E00               	movlw	0
 10925  001836  6E28               	movwf	?___fttol,c
 10926  001838  0E00               	movlw	0
 10927  00183A  6E29               	movwf	?___fttol+1,c
 10928  00183C  0E00               	movlw	0
 10929  00183E  6E2A               	movwf	?___fttol+2,c
 10930  001840  0E00               	movlw	0
 10931  001842  6E2B               	movwf	?___fttol+3,c
 10932  001844  0012               	return	
 10933  001846                     i2l3229:
 10934  001846  90D8               	bcf	status,0,c
 10935  001848  3632               	rlcf	___fttol@lval,f,c
 10936  00184A  3633               	rlcf	___fttol@lval+1,f,c
 10937  00184C  3634               	rlcf	___fttol@lval+2,f,c
 10938  00184E  3635               	rlcf	___fttol@lval+3,f,c
 10939  001850  0636               	decf	___fttol@exp1,f,c
 10940  001852                     i2l3231:
 10941  001852  5036               	movf	___fttol@exp1,w,c
 10942  001854  A4D8               	btfss	status,2,c
 10943  001856  D7F7               	goto	i2l3229
 10944  001858                     i2l3233:
 10945  001858  5031               	movf	___fttol@sign1,w,c
 10946  00185A  B4D8               	btfsc	status,2,c
 10947  00185C  D008               	goto	i2l3237
 10948  00185E  1E35               	comf	___fttol@lval+3,f,c
 10949  001860  1E34               	comf	___fttol@lval+2,f,c
 10950  001862  1E33               	comf	___fttol@lval+1,f,c
 10951  001864  6C32               	negf	___fttol@lval,c
 10952  001866  0E00               	movlw	0
 10953  001868  2233               	addwfc	___fttol@lval+1,f,c
 10954  00186A  2234               	addwfc	___fttol@lval+2,f,c
 10955  00186C  2235               	addwfc	___fttol@lval+3,f,c
 10956  00186E                     i2l3237:
 10957  00186E  C032  F028         	movff	___fttol@lval,?___fttol
 10958  001872  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 10959  001876  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 10960  00187A  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 10961  00187E  0012               	return	
 10962  001880                     __end_of___fttol:
 10963                           	opt stack 0
 10964                           pclatu	equ	0xFFB
 10965                           pclath	equ	0xFFA
 10966                           tblptru	equ	0xFF8
 10967                           tblptrh	equ	0xFF7
 10968                           tblptrl	equ	0xFF6
 10969                           tablat	equ	0xFF5
 10970                           prodh	equ	0xFF4
 10971                           prodl	equ	0xFF3
 10972                           intcon	equ	0xFF2
 10973                           intcon2	equ	0xFF1
 10974                           intcon3	equ	0xFF0
 10975                           postinc0	equ	0xFEE
 10976                           fsr0h	equ	0xFEA
 10977                           fsr0l	equ	0xFE9
 10978                           wreg	equ	0xFE8
 10979                           fsr1h	equ	0xFE2
 10980                           fsr1l	equ	0xFE1
 10981                           indf2	equ	0xFDF
 10982                           postinc2	equ	0xFDE
 10983                           postdec2	equ	0xFDD
 10984                           fsr2h	equ	0xFDA
 10985                           fsr2l	equ	0xFD9
 10986                           status	equ	0xFD8
 10987                           
 10988 ;; *************** function ___ftge *****************
 10989 ;; Defined at:
 10990 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10991 ;; Parameters:    Size  Location     Type
 10992 ;;  ff1             3    0[COMRAM] float 
 10993 ;;  ff2             3    3[COMRAM] float 
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;		None
 10996 ;; Return value:  Size  Location     Type
 10997 ;;		None               void
 10998 ;; Registers used:
 10999 ;;		wreg, status,2, status,0
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11005 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11007 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11008 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;Total ram usage:        9 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; This function calls:
 11012 ;;		Nothing
 11013 ;; This function is called by:
 11014 ;;		_pow
 11015 ;;		_exp
 11016 ;;		_floor
 11017 ;; This function uses a non-reentrant model
 11018 ;;
 11019                           
 11020                           	psect	text55
 11021  00249A                     __ptext55:
 11022                           	opt stack 0
 11023  00249A                     ___ftge:
 11024                           	opt stack 21
 11025                           
 11026                           ;incstack = 0
 11027  00249A  AE03               	btfss	___ftge@ff1+2,7,c
 11028  00249C  D016               	goto	i2l3181
 11029  00249E  C001  F007         	movff	___ftge@ff1,??___ftge
 11030  0024A2  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 11031  0024A6  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 11032  0024AA  1E07               	comf	??___ftge,f,c
 11033  0024AC  1E08               	comf	??___ftge+1,f,c
 11034  0024AE  1E09               	comf	??___ftge+2,f,c
 11035  0024B0  2A07               	incf	??___ftge,f,c
 11036  0024B2  0E00               	movlw	0
 11037  0024B4  2208               	addwfc	??___ftge+1,f,c
 11038  0024B6  2209               	addwfc	??___ftge+2,f,c
 11039  0024B8  0E00               	movlw	0
 11040  0024BA  2407               	addwf	??___ftge,w,c
 11041  0024BC  6E01               	movwf	___ftge@ff1,c
 11042  0024BE  0E00               	movlw	0
 11043  0024C0  2008               	addwfc	??___ftge+1,w,c
 11044  0024C2  6E02               	movwf	___ftge@ff1+1,c
 11045  0024C4  0E80               	movlw	128
 11046  0024C6  2009               	addwfc	??___ftge+2,w,c
 11047  0024C8  6E03               	movwf	___ftge@ff1+2,c
 11048  0024CA                     i2l3181:
 11049  0024CA  AE06               	btfss	___ftge@ff2+2,7,c
 11050  0024CC  D016               	goto	i2l3185
 11051  0024CE  C004  F007         	movff	___ftge@ff2,??___ftge
 11052  0024D2  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 11053  0024D6  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 11054  0024DA  1E07               	comf	??___ftge,f,c
 11055  0024DC  1E08               	comf	??___ftge+1,f,c
 11056  0024DE  1E09               	comf	??___ftge+2,f,c
 11057  0024E0  2A07               	incf	??___ftge,f,c
 11058  0024E2  0E00               	movlw	0
 11059  0024E4  2208               	addwfc	??___ftge+1,f,c
 11060  0024E6  2209               	addwfc	??___ftge+2,f,c
 11061  0024E8  0E00               	movlw	0
 11062  0024EA  2407               	addwf	??___ftge,w,c
 11063  0024EC  6E04               	movwf	___ftge@ff2,c
 11064  0024EE  0E00               	movlw	0
 11065  0024F0  2008               	addwfc	??___ftge+1,w,c
 11066  0024F2  6E05               	movwf	___ftge@ff2+1,c
 11067  0024F4  0E80               	movlw	128
 11068  0024F6  2009               	addwfc	??___ftge+2,w,c
 11069  0024F8  6E06               	movwf	___ftge@ff2+2,c
 11070  0024FA                     i2l3185:
 11071  0024FA  0E00               	movlw	0
 11072  0024FC  1A01               	xorwf	___ftge@ff1,f,c
 11073  0024FE  0E00               	movlw	0
 11074  002500  1A02               	xorwf	___ftge@ff1+1,f,c
 11075  002502  0E80               	movlw	128
 11076  002504  1A03               	xorwf	___ftge@ff1+2,f,c
 11077  002506  0E00               	movlw	0
 11078  002508  1A04               	xorwf	___ftge@ff2,f,c
 11079  00250A  0E00               	movlw	0
 11080  00250C  1A05               	xorwf	___ftge@ff2+1,f,c
 11081  00250E  0E80               	movlw	128
 11082  002510  1A06               	xorwf	___ftge@ff2+2,f,c
 11083  002512  5004               	movf	___ftge@ff2,w,c
 11084  002514  5C01               	subwf	___ftge@ff1,w,c
 11085  002516  5005               	movf	___ftge@ff2+1,w,c
 11086  002518  5802               	subwfb	___ftge@ff1+1,w,c
 11087  00251A  5006               	movf	___ftge@ff2+2,w,c
 11088  00251C  5803               	subwfb	___ftge@ff1+2,w,c
 11089  00251E  B0D8               	btfsc	status,0,c
 11090  002520  D002               	goto	i2l3191
 11091  002522  90D8               	bcf	status,0,c
 11092  002524  0012               	return	
 11093  002526                     i2l3191:
 11094  002526  80D8               	bsf	status,0,c
 11095  002528  0012               	return	
 11096  00252A                     __end_of___ftge:
 11097                           	opt stack 0
 11098                           pclatu	equ	0xFFB
 11099                           pclath	equ	0xFFA
 11100                           tblptru	equ	0xFF8
 11101                           tblptrh	equ	0xFF7
 11102                           tblptrl	equ	0xFF6
 11103                           tablat	equ	0xFF5
 11104                           prodh	equ	0xFF4
 11105                           prodl	equ	0xFF3
 11106                           intcon	equ	0xFF2
 11107                           intcon2	equ	0xFF1
 11108                           intcon3	equ	0xFF0
 11109                           postinc0	equ	0xFEE
 11110                           fsr0h	equ	0xFEA
 11111                           fsr0l	equ	0xFE9
 11112                           wreg	equ	0xFE8
 11113                           fsr1h	equ	0xFE2
 11114                           fsr1l	equ	0xFE1
 11115                           indf2	equ	0xFDF
 11116                           postinc2	equ	0xFDE
 11117                           postdec2	equ	0xFDD
 11118                           fsr2h	equ	0xFDA
 11119                           fsr2l	equ	0xFD9
 11120                           status	equ	0xFD8
 11121                           
 11122 ;; *************** function ___altoft *****************
 11123 ;; Defined at:
 11124 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11125 ;; Parameters:    Size  Location     Type
 11126 ;;  c               4   54[COMRAM] long 
 11127 ;; Auto vars:     Size  Location     Type
 11128 ;;  sign            1   63[COMRAM] unsigned char 
 11129 ;;  exp             1   62[COMRAM] unsigned char 
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  3   54[COMRAM] float 
 11132 ;; Registers used:
 11133 ;;		wreg, status,2, status,0, cstack
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/0
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11139 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11141 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11142 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11143 ;;Total ram usage:       10 bytes
 11144 ;; Hardware stack levels used:    1
 11145 ;; Hardware stack levels required when called:    1
 11146 ;; This function calls:
 11147 ;;		___ftpack
 11148 ;; This function is called by:
 11149 ;;		_floor
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           	psect	text56
 11154  002626                     __ptext56:
 11155                           	opt stack 0
 11156  002626                     ___altoft:
 11157                           	opt stack 20
 11158                           
 11159                           ;incstack = 0
 11160  002626  0E00               	movlw	0
 11161  002628  6E40               	movwf	___altoft@sign,c
 11162  00262A  0E8E               	movlw	142
 11163  00262C  6E3F               	movwf	___altoft@exp,c
 11164  00262E  AE3A               	btfss	___altoft@c+3,7,c
 11165  002630  D011               	goto	i2l3053
 11166  002632  1E3A               	comf	___altoft@c+3,f,c
 11167  002634  1E39               	comf	___altoft@c+2,f,c
 11168  002636  1E38               	comf	___altoft@c+1,f,c
 11169  002638  6C37               	negf	___altoft@c,c
 11170  00263A  0E00               	movlw	0
 11171  00263C  2238               	addwfc	___altoft@c+1,f,c
 11172  00263E  2239               	addwfc	___altoft@c+2,f,c
 11173  002640  223A               	addwfc	___altoft@c+3,f,c
 11174  002642  0E01               	movlw	1
 11175  002644  6E40               	movwf	___altoft@sign,c
 11176  002646  D006               	goto	i2l3053
 11177  002648                     i2l3051:
 11178  002648  90D8               	bcf	status,0,c
 11179  00264A  323A               	rrcf	___altoft@c+3,f,c
 11180  00264C  3239               	rrcf	___altoft@c+2,f,c
 11181  00264E  3238               	rrcf	___altoft@c+1,f,c
 11182  002650  3237               	rrcf	___altoft@c,f,c
 11183  002652  2A3F               	incf	___altoft@exp,f,c
 11184  002654                     i2l3053:
 11185  002654  0E00               	movlw	0
 11186  002656  1437               	andwf	___altoft@c,w,c
 11187  002658  6E3B               	movwf	??___altoft& (0+255),c
 11188  00265A  0E00               	movlw	0
 11189  00265C  1438               	andwf	___altoft@c+1,w,c
 11190  00265E  6E3C               	movwf	(??___altoft+1)& (0+255),c
 11191  002660  0E00               	movlw	0
 11192  002662  1439               	andwf	___altoft@c+2,w,c
 11193  002664  6E3D               	movwf	(??___altoft+2)& (0+255),c
 11194  002666  0EFF               	movlw	255
 11195  002668  143A               	andwf	___altoft@c+3,w,c
 11196  00266A  6E3E               	movwf	(??___altoft+3)& (0+255),c
 11197  00266C  503B               	movf	??___altoft,w,c
 11198  00266E  103C               	iorwf	??___altoft+1,w,c
 11199  002670  103D               	iorwf	??___altoft+2,w,c
 11200  002672  103E               	iorwf	??___altoft+3,w,c
 11201  002674  A4D8               	btfss	status,2,c
 11202  002676  D7E8               	goto	i2l3051
 11203  002678  C037  F001         	movff	___altoft@c,___ftpack@arg
 11204  00267C  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 11205  002680  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 11206  002684  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 11207  002688  C040  F005         	movff	___altoft@sign,___ftpack@sign
 11208  00268C  EC15  F011         	call	___ftpack	;wreg free
 11209  002690  C001  F037         	movff	?___ftpack,?___altoft
 11210  002694  C002  F038         	movff	?___ftpack+1,?___altoft+1
 11211  002698  C003  F039         	movff	?___ftpack+2,?___altoft+2
 11212  00269C  0012               	return	
 11213  00269E                     __end_of___altoft:
 11214                           	opt stack 0
 11215                           pclatu	equ	0xFFB
 11216                           pclath	equ	0xFFA
 11217                           tblptru	equ	0xFF8
 11218                           tblptrh	equ	0xFF7
 11219                           tblptrl	equ	0xFF6
 11220                           tablat	equ	0xFF5
 11221                           prodh	equ	0xFF4
 11222                           prodl	equ	0xFF3
 11223                           intcon	equ	0xFF2
 11224                           intcon2	equ	0xFF1
 11225                           intcon3	equ	0xFF0
 11226                           postinc0	equ	0xFEE
 11227                           fsr0h	equ	0xFEA
 11228                           fsr0l	equ	0xFE9
 11229                           wreg	equ	0xFE8
 11230                           fsr1h	equ	0xFE2
 11231                           fsr1l	equ	0xFE1
 11232                           indf2	equ	0xFDF
 11233                           postinc2	equ	0xFDE
 11234                           postdec2	equ	0xFDD
 11235                           fsr2h	equ	0xFDA
 11236                           fsr2l	equ	0xFD9
 11237                           status	equ	0xFD8
 11238                           
 11239 ;; *************** function _eval_poly *****************
 11240 ;; Defined at:
 11241 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 11242 ;; Parameters:    Size  Location     Type
 11243 ;;  x               3   39[COMRAM] float 
 11244 ;;  d               2   42[COMRAM] PTR const 
 11245 ;;		 -> log@coeff(27), exp@coeff(30), 
 11246 ;;  n               2   44[COMRAM] int 
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;  res             3   48[COMRAM] int 
 11249 ;; Return value:  Size  Location     Type
 11250 ;;                  3   39[COMRAM] int 
 11251 ;; Registers used:
 11252 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11253 ;; Tracked objects:
 11254 ;;		On entry : 0/0
 11255 ;;		On exit  : 0/0
 11256 ;;		Unchanged: 0/0
 11257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11258 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11259 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11260 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;Total ram usage:       12 bytes
 11263 ;; Hardware stack levels used:    1
 11264 ;; Hardware stack levels required when called:    2
 11265 ;; This function calls:
 11266 ;;		___ftadd
 11267 ;;		___ftmul
 11268 ;;		i2___wmul
 11269 ;; This function is called by:
 11270 ;;		_exp
 11271 ;;		_log
 11272 ;; This function uses a non-reentrant model
 11273 ;;
 11274                           
 11275                           	psect	text57
 11276  001CF0                     __ptext57:
 11277                           	opt stack 0
 11278  001CF0                     _eval_poly:
 11279                           	opt stack 20
 11280                           
 11281                           ;incstack = 0
 11282  001CF0  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11283  001CF4  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11284  001CF8  0E00               	movlw	0
 11285  001CFA  6E04               	movwf	i2___wmul@multiplicand+1,c
 11286  001CFC  0E03               	movlw	3
 11287  001CFE  6E03               	movwf	i2___wmul@multiplicand,c
 11288  001D00  ECDE  F015         	call	i2___wmul	;wreg free
 11289  001D04  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11290  001D08  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11291  001D0C  5001               	movf	?i2___wmul,w,c
 11292  001D0E  262F               	addwf	??_eval_poly,f,c
 11293  001D10  5002               	movf	?i2___wmul+1,w,c
 11294  001D12  2230               	addwfc	??_eval_poly+1,f,c
 11295  001D14  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11296  001D18  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11297  001D1C                     	if	0	;tblptru may be non-zero
 11298  001D1C                     	endif
 11299  001D1C                     	if	0	;tblptru may be non-zero
 11300  001D1C                     	endif
 11301  001D1C  0009               	tblrd		*+
 11302  001D1E  CFF5 F031          	movff	tablat,eval_poly@res
 11303  001D22  0009               	tblrd		*+
 11304  001D24  CFF5 F032          	movff	tablat,eval_poly@res+1
 11305  001D28  000A               	tblrd		*-
 11306  001D2A  CFF5 F033          	movff	tablat,eval_poly@res+2
 11307  001D2E  D03E               	goto	i2l3387
 11308  001D30                     i2l3385:
 11309  001D30  C031  F010         	movff	eval_poly@res,___ftmul@f2
 11310  001D34  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 11311  001D38  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 11312  001D3C  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 11313  001D40  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 11314  001D44  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 11315  001D48  EC40  F00C         	call	___ftmul	;wreg free
 11316  001D4C  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 11317  001D50  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 11318  001D54  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 11319  001D58  0E00               	movlw	0
 11320  001D5A  6E04               	movwf	i2___wmul@multiplicand+1,c
 11321  001D5C  0E03               	movlw	3
 11322  001D5E  6E03               	movwf	i2___wmul@multiplicand,c
 11323  001D60  062D               	decf	eval_poly@n,f,c
 11324  001D62  A0D8               	btfss	status,0,c
 11325  001D64  062E               	decf	eval_poly@n+1,f,c
 11326  001D66  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11327  001D6A  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11328  001D6E  ECDE  F015         	call	i2___wmul	;wreg free
 11329  001D72  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11330  001D76  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11331  001D7A  5001               	movf	?i2___wmul,w,c
 11332  001D7C  262F               	addwf	??_eval_poly,f,c
 11333  001D7E  5002               	movf	?i2___wmul+1,w,c
 11334  001D80  2230               	addwfc	??_eval_poly+1,f,c
 11335  001D82  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11336  001D86  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11337  001D8A                     	if	0	;tblptru may be non-zero
 11338  001D8A                     	endif
 11339  001D8A                     	if	0	;tblptru may be non-zero
 11340  001D8A                     	endif
 11341  001D8A  0009               	tblrd		*+
 11342  001D8C  CFF5 F01F          	movff	tablat,___ftadd@f2
 11343  001D90  0009               	tblrd		*+
 11344  001D92  CFF5 F020          	movff	tablat,___ftadd@f2+1
 11345  001D96  000A               	tblrd		*-
 11346  001D98  CFF5 F021          	movff	tablat,___ftadd@f2+2
 11347  001D9C  ECE3  F007         	call	___ftadd	;wreg free
 11348  001DA0  C01C  F031         	movff	?___ftadd,eval_poly@res
 11349  001DA4  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 11350  001DA8  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 11351  001DAC                     i2l3387:
 11352  001DAC  502D               	movf	eval_poly@n,w,c
 11353  001DAE  102E               	iorwf	eval_poly@n+1,w,c
 11354  001DB0  A4D8               	btfss	status,2,c
 11355  001DB2  D7BE               	goto	i2l3385
 11356  001DB4  C031  F028         	movff	eval_poly@res,?_eval_poly
 11357  001DB8  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 11358  001DBC  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 11359  001DC0  0012               	return		;funcret
 11360  001DC2                     __end_of_eval_poly:
 11361                           	opt stack 0
 11362                           pclatu	equ	0xFFB
 11363                           pclath	equ	0xFFA
 11364                           tblptru	equ	0xFF8
 11365                           tblptrh	equ	0xFF7
 11366                           tblptrl	equ	0xFF6
 11367                           tablat	equ	0xFF5
 11368                           prodh	equ	0xFF4
 11369                           prodl	equ	0xFF3
 11370                           intcon	equ	0xFF2
 11371                           intcon2	equ	0xFF1
 11372                           intcon3	equ	0xFF0
 11373                           postinc0	equ	0xFEE
 11374                           fsr0h	equ	0xFEA
 11375                           fsr0l	equ	0xFE9
 11376                           wreg	equ	0xFE8
 11377                           fsr1h	equ	0xFE2
 11378                           fsr1l	equ	0xFE1
 11379                           indf2	equ	0xFDF
 11380                           postinc2	equ	0xFDE
 11381                           postdec2	equ	0xFDD
 11382                           fsr2h	equ	0xFDA
 11383                           fsr2l	equ	0xFD9
 11384                           status	equ	0xFD8
 11385                           
 11386 ;; *************** function i2___wmul *****************
 11387 ;; Defined at:
 11388 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11389 ;; Parameters:    Size  Location     Type
 11390 ;;  multiplier      2    0[COMRAM] unsigned int 
 11391 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11392 ;; Auto vars:     Size  Location     Type
 11393 ;;  __wmul          2    4[COMRAM] unsigned int 
 11394 ;; Return value:  Size  Location     Type
 11395 ;;                  2    0[COMRAM] unsigned int 
 11396 ;; Registers used:
 11397 ;;		wreg, status,2, status,0, prodl, prodh
 11398 ;; Tracked objects:
 11399 ;;		On entry : 0/0
 11400 ;;		On exit  : 0/0
 11401 ;;		Unchanged: 0/0
 11402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11403 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11404 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11406 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;Total ram usage:        6 bytes
 11408 ;; Hardware stack levels used:    1
 11409 ;; This function calls:
 11410 ;;		Nothing
 11411 ;; This function is called by:
 11412 ;;		_isr
 11413 ;;		_servo_rotate1
 11414 ;;		_servo_rotate2
 11415 ;;		_eval_poly
 11416 ;;		i2_printf
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420                           	psect	text58
 11421  002BBC                     __ptext58:
 11422                           	opt stack 0
 11423  002BBC                     i2___wmul:
 11424                           	opt stack 24
 11425                           
 11426                           ;incstack = 0
 11427  002BBC  5001               	movf	i2___wmul@multiplier,w,c
 11428  002BBE  0203               	mulwf	i2___wmul@multiplicand,c
 11429  002BC0  CFF3 F005          	movff	prodl,i2___wmul@product
 11430  002BC4  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11431  002BC8  5001               	movf	i2___wmul@multiplier,w,c
 11432  002BCA  0204               	mulwf	i2___wmul@multiplicand+1,c
 11433  002BCC  50F3               	movf	prodl,w,c
 11434  002BCE  2606               	addwf	i2___wmul@product+1,f,c
 11435  002BD0  5002               	movf	i2___wmul@multiplier+1,w,c
 11436  002BD2  0203               	mulwf	i2___wmul@multiplicand,c
 11437  002BD4  50F3               	movf	prodl,w,c
 11438  002BD6  2606               	addwf	i2___wmul@product+1,f,c
 11439  002BD8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11440  002BDC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11441  002BE0  0012               	return	
 11442  002BE2                     __end_ofi2___wmul:
 11443                           	opt stack 0
 11444                           pclatu	equ	0xFFB
 11445                           pclath	equ	0xFFA
 11446                           tblptru	equ	0xFF8
 11447                           tblptrh	equ	0xFF7
 11448                           tblptrl	equ	0xFF6
 11449                           tablat	equ	0xFF5
 11450                           prodh	equ	0xFF4
 11451                           prodl	equ	0xFF3
 11452                           intcon	equ	0xFF2
 11453                           intcon2	equ	0xFF1
 11454                           intcon3	equ	0xFF0
 11455                           postinc0	equ	0xFEE
 11456                           fsr0h	equ	0xFEA
 11457                           fsr0l	equ	0xFE9
 11458                           wreg	equ	0xFE8
 11459                           fsr1h	equ	0xFE2
 11460                           fsr1l	equ	0xFE1
 11461                           indf2	equ	0xFDF
 11462                           postinc2	equ	0xFDE
 11463                           postdec2	equ	0xFDD
 11464                           fsr2h	equ	0xFDA
 11465                           fsr2l	equ	0xFD9
 11466                           status	equ	0xFD8
 11467                           
 11468 ;; *************** function ___ftmul *****************
 11469 ;; Defined at:
 11470 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11471 ;; Parameters:    Size  Location     Type
 11472 ;;  f1              3   12[COMRAM] float 
 11473 ;;  f2              3   15[COMRAM] float 
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 11476 ;;  sign            1   26[COMRAM] unsigned char 
 11477 ;;  cntr            1   25[COMRAM] unsigned char 
 11478 ;;  exp             1   21[COMRAM] unsigned char 
 11479 ;; Return value:  Size  Location     Type
 11480 ;;                  3   12[COMRAM] float 
 11481 ;; Registers used:
 11482 ;;		wreg, status,2, status,0, cstack
 11483 ;; Tracked objects:
 11484 ;;		On entry : 0/0
 11485 ;;		On exit  : 0/0
 11486 ;;		Unchanged: 0/0
 11487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11488 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;Total ram usage:       15 bytes
 11493 ;; Hardware stack levels used:    1
 11494 ;; Hardware stack levels required when called:    1
 11495 ;; This function calls:
 11496 ;;		___ftpack
 11497 ;; This function is called by:
 11498 ;;		_dec_to_hex
 11499 ;;		_pow
 11500 ;;		_exp
 11501 ;;		_log
 11502 ;;		_eval_poly
 11503 ;; This function uses a non-reentrant model
 11504 ;;
 11505                           
 11506                           	psect	text59
 11507  001880                     __ptext59:
 11508                           	opt stack 0
 11509  001880                     ___ftmul:
 11510                           	opt stack 20
 11511                           
 11512                           ;incstack = 0
 11513  001880  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 11514  001884  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11515  001886  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11516  001888  340E               	rlcf	___ftmul@f1+1,w,c
 11517  00188A  3613               	rlcf	??___ftmul& (0+255),f,c
 11518  00188C  E301               	bnc	u253_41
 11519  00188E  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11520  001890                     u253_41:
 11521  001890  5013               	movf	??___ftmul,w,c
 11522  001892  6E16               	movwf	___ftmul@exp,c
 11523  001894  5016               	movf	___ftmul@exp,w,c
 11524  001896  A4D8               	btfss	status,2,c
 11525  001898  D007               	goto	i2l3135
 11526  00189A  0E00               	movlw	0
 11527  00189C  6E0D               	movwf	?___ftmul,c
 11528  00189E  0E00               	movlw	0
 11529  0018A0  6E0E               	movwf	?___ftmul+1,c
 11530  0018A2  0E00               	movlw	0
 11531  0018A4  6E0F               	movwf	?___ftmul+2,c
 11532  0018A6  0012               	return	
 11533  0018A8                     i2l3135:
 11534  0018A8  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 11535  0018AC  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11536  0018AE  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11537  0018B0  3411               	rlcf	___ftmul@f2+1,w,c
 11538  0018B2  3613               	rlcf	??___ftmul& (0+255),f,c
 11539  0018B4  E301               	bnc	u255_41
 11540  0018B6  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11541  0018B8                     u255_41:
 11542  0018B8  5013               	movf	??___ftmul,w,c
 11543  0018BA  6E1B               	movwf	___ftmul@sign,c
 11544  0018BC  501B               	movf	___ftmul@sign,w,c
 11545  0018BE  A4D8               	btfss	status,2,c
 11546  0018C0  D007               	goto	i2l3141
 11547  0018C2  0E00               	movlw	0
 11548  0018C4  6E0D               	movwf	?___ftmul,c
 11549  0018C6  0E00               	movlw	0
 11550  0018C8  6E0E               	movwf	?___ftmul+1,c
 11551  0018CA  0E00               	movlw	0
 11552  0018CC  6E0F               	movwf	?___ftmul+2,c
 11553  0018CE  0012               	return	
 11554  0018D0                     i2l3141:
 11555  0018D0  501B               	movf	___ftmul@sign,w,c
 11556  0018D2  0F7B               	addlw	123
 11557  0018D4  2616               	addwf	___ftmul@exp,f,c
 11558  0018D6  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 11559  0018DA  5012               	movf	___ftmul@f2+2,w,c
 11560  0018DC  1A1B               	xorwf	___ftmul@sign,f,c
 11561  0018DE  0E80               	movlw	128
 11562  0018E0  161B               	andwf	___ftmul@sign,f,c
 11563  0018E2  8E0E               	bsf	___ftmul@f1+1,7,c
 11564  0018E4  8E11               	bsf	___ftmul@f2+1,7,c
 11565  0018E6  0EFF               	movlw	255
 11566  0018E8  1610               	andwf	___ftmul@f2,f,c
 11567  0018EA  0EFF               	movlw	255
 11568  0018EC  1611               	andwf	___ftmul@f2+1,f,c
 11569  0018EE  0E00               	movlw	0
 11570  0018F0  1612               	andwf	___ftmul@f2+2,f,c
 11571  0018F2  0E00               	movlw	0
 11572  0018F4  6E17               	movwf	___ftmul@f3_as_product,c
 11573  0018F6  0E00               	movlw	0
 11574  0018F8  6E18               	movwf	___ftmul@f3_as_product+1,c
 11575  0018FA  0E00               	movlw	0
 11576  0018FC  6E19               	movwf	___ftmul@f3_as_product+2,c
 11577  0018FE  0E07               	movlw	7
 11578  001900  6E1A               	movwf	___ftmul@cntr,c
 11579  001902                     i2l3155:
 11580  001902  A00D               	btfss	___ftmul@f1,0,c
 11581  001904  D006               	goto	i2l3159
 11582  001906  5010               	movf	___ftmul@f2,w,c
 11583  001908  2617               	addwf	___ftmul@f3_as_product,f,c
 11584  00190A  5011               	movf	___ftmul@f2+1,w,c
 11585  00190C  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11586  00190E  5012               	movf	___ftmul@f2+2,w,c
 11587  001910  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11588  001912                     i2l3159:
 11589  001912  90D8               	bcf	status,0,c
 11590  001914  320F               	rrcf	___ftmul@f1+2,f,c
 11591  001916  320E               	rrcf	___ftmul@f1+1,f,c
 11592  001918  320D               	rrcf	___ftmul@f1,f,c
 11593  00191A  90D8               	bcf	status,0,c
 11594  00191C  3610               	rlcf	___ftmul@f2,f,c
 11595  00191E  3611               	rlcf	___ftmul@f2+1,f,c
 11596  001920  3612               	rlcf	___ftmul@f2+2,f,c
 11597  001922  2E1A               	decfsz	___ftmul@cntr,f,c
 11598  001924  D7EE               	goto	i2l3155
 11599  001926  0E09               	movlw	9
 11600  001928  6E1A               	movwf	___ftmul@cntr,c
 11601  00192A                     i2l3165:
 11602  00192A  A00D               	btfss	___ftmul@f1,0,c
 11603  00192C  D006               	goto	i2l3169
 11604  00192E  5010               	movf	___ftmul@f2,w,c
 11605  001930  2617               	addwf	___ftmul@f3_as_product,f,c
 11606  001932  5011               	movf	___ftmul@f2+1,w,c
 11607  001934  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11608  001936  5012               	movf	___ftmul@f2+2,w,c
 11609  001938  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11610  00193A                     i2l3169:
 11611  00193A  90D8               	bcf	status,0,c
 11612  00193C  320F               	rrcf	___ftmul@f1+2,f,c
 11613  00193E  320E               	rrcf	___ftmul@f1+1,f,c
 11614  001940  320D               	rrcf	___ftmul@f1,f,c
 11615  001942  90D8               	bcf	status,0,c
 11616  001944  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 11617  001946  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 11618  001948  3217               	rrcf	___ftmul@f3_as_product,f,c
 11619  00194A  2E1A               	decfsz	___ftmul@cntr,f,c
 11620  00194C  D7EE               	goto	i2l3165
 11621  00194E  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 11622  001952  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11623  001956  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11624  00195A  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 11625  00195E  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 11626  001962  EC15  F011         	call	___ftpack	;wreg free
 11627  001966  C001  F00D         	movff	?___ftpack,?___ftmul
 11628  00196A  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 11629  00196E  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 11630  001972  0012               	return	
 11631  001974                     __end_of___ftmul:
 11632                           	opt stack 0
 11633                           pclatu	equ	0xFFB
 11634                           pclath	equ	0xFFA
 11635                           tblptru	equ	0xFF8
 11636                           tblptrh	equ	0xFF7
 11637                           tblptrl	equ	0xFF6
 11638                           tablat	equ	0xFF5
 11639                           prodh	equ	0xFF4
 11640                           prodl	equ	0xFF3
 11641                           intcon	equ	0xFF2
 11642                           intcon2	equ	0xFF1
 11643                           intcon3	equ	0xFF0
 11644                           postinc0	equ	0xFEE
 11645                           fsr0h	equ	0xFEA
 11646                           fsr0l	equ	0xFE9
 11647                           wreg	equ	0xFE8
 11648                           fsr1h	equ	0xFE2
 11649                           fsr1l	equ	0xFE1
 11650                           indf2	equ	0xFDF
 11651                           postinc2	equ	0xFDE
 11652                           postdec2	equ	0xFDD
 11653                           fsr2h	equ	0xFDA
 11654                           fsr2l	equ	0xFD9
 11655                           status	equ	0xFD8
 11656                           
 11657 ;; *************** function ___ftsub *****************
 11658 ;; Defined at:
 11659 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;  f1              3   39[COMRAM] float 
 11662 ;;  f2              3   42[COMRAM] float 
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;		None
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  3   39[COMRAM] float 
 11667 ;; Registers used:
 11668 ;;		wreg, status,2, status,0, cstack
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11674 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11677 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11678 ;;Total ram usage:        6 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    2
 11681 ;; This function calls:
 11682 ;;		___ftadd
 11683 ;; This function is called by:
 11684 ;;		_exp
 11685 ;; This function uses a non-reentrant model
 11686 ;;
 11687                           
 11688                           	psect	text60
 11689  002A1C                     __ptext60:
 11690                           	opt stack 0
 11691  002A1C                     ___ftsub:
 11692                           	opt stack 20
 11693                           
 11694                           ;incstack = 0
 11695  002A1C  502B               	movf	___ftsub@f2,w,c
 11696  002A1E  102C               	iorwf	___ftsub@f2+1,w,c
 11697  002A20  102D               	iorwf	___ftsub@f2+2,w,c
 11698  002A22  B4D8               	btfsc	status,2,c
 11699  002A24  D006               	goto	i2l3339
 11700  002A26  0E00               	movlw	0
 11701  002A28  1A2B               	xorwf	___ftsub@f2,f,c
 11702  002A2A  0E00               	movlw	0
 11703  002A2C  1A2C               	xorwf	___ftsub@f2+1,f,c
 11704  002A2E  0E80               	movlw	128
 11705  002A30  1A2D               	xorwf	___ftsub@f2+2,f,c
 11706  002A32                     i2l3339:
 11707  002A32  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 11708  002A36  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 11709  002A3A  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 11710  002A3E  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 11711  002A42  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 11712  002A46  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 11713  002A4A  ECE3  F007         	call	___ftadd	;wreg free
 11714  002A4E  C01C  F028         	movff	?___ftadd,?___ftsub
 11715  002A52  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 11716  002A56  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 11717  002A5A  0012               	return	
 11718  002A5C                     __end_of___ftsub:
 11719                           	opt stack 0
 11720                           pclatu	equ	0xFFB
 11721                           pclath	equ	0xFFA
 11722                           tblptru	equ	0xFF8
 11723                           tblptrh	equ	0xFF7
 11724                           tblptrl	equ	0xFF6
 11725                           tablat	equ	0xFF5
 11726                           prodh	equ	0xFF4
 11727                           prodl	equ	0xFF3
 11728                           intcon	equ	0xFF2
 11729                           intcon2	equ	0xFF1
 11730                           intcon3	equ	0xFF0
 11731                           postinc0	equ	0xFEE
 11732                           fsr0h	equ	0xFEA
 11733                           fsr0l	equ	0xFE9
 11734                           wreg	equ	0xFE8
 11735                           fsr1h	equ	0xFE2
 11736                           fsr1l	equ	0xFE1
 11737                           indf2	equ	0xFDF
 11738                           postinc2	equ	0xFDE
 11739                           postdec2	equ	0xFDD
 11740                           fsr2h	equ	0xFDA
 11741                           fsr2l	equ	0xFD9
 11742                           status	equ	0xFD8
 11743                           
 11744 ;; *************** function ___ftadd *****************
 11745 ;; Defined at:
 11746 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11747 ;; Parameters:    Size  Location     Type
 11748 ;;  f1              3   27[COMRAM] float 
 11749 ;;  f2              3   30[COMRAM] float 
 11750 ;; Auto vars:     Size  Location     Type
 11751 ;;  exp1            1   38[COMRAM] unsigned char 
 11752 ;;  exp2            1   37[COMRAM] unsigned char 
 11753 ;;  sign            1   36[COMRAM] unsigned char 
 11754 ;; Return value:  Size  Location     Type
 11755 ;;                  3   27[COMRAM] float 
 11756 ;; Registers used:
 11757 ;;		wreg, status,2, status,0, cstack
 11758 ;; Tracked objects:
 11759 ;;		On entry : 0/0
 11760 ;;		On exit  : 0/0
 11761 ;;		Unchanged: 0/0
 11762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11763 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11765 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11766 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11767 ;;Total ram usage:       12 bytes
 11768 ;; Hardware stack levels used:    1
 11769 ;; Hardware stack levels required when called:    1
 11770 ;; This function calls:
 11771 ;;		___ftpack
 11772 ;; This function is called by:
 11773 ;;		_dec_to_hex
 11774 ;;		___ftsub
 11775 ;;		_floor
 11776 ;;		_log
 11777 ;;		_eval_poly
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           	psect	text61
 11782  000FC6                     __ptext61:
 11783                           	opt stack 0
 11784  000FC6                     ___ftadd:
 11785                           	opt stack 20
 11786                           
 11787                           ;incstack = 0
 11788  000FC6  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 11789  000FCA  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11790  000FCC  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11791  000FCE  341D               	rlcf	___ftadd@f1+1,w,c
 11792  000FD0  3622               	rlcf	??___ftadd& (0+255),f,c
 11793  000FD2  E301               	bnc	u232_41
 11794  000FD4  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11795  000FD6                     u232_41:
 11796  000FD6  5022               	movf	??___ftadd,w,c
 11797  000FD8  6E27               	movwf	___ftadd@exp1,c
 11798  000FDA  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 11799  000FDE  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11800  000FE0  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11801  000FE2  3420               	rlcf	___ftadd@f2+1,w,c
 11802  000FE4  3622               	rlcf	??___ftadd& (0+255),f,c
 11803  000FE6  E301               	bnc	u233_41
 11804  000FE8  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11805  000FEA                     u233_41:
 11806  000FEA  5022               	movf	??___ftadd,w,c
 11807  000FEC  6E26               	movwf	___ftadd@exp2,c
 11808  000FEE  5027               	movf	___ftadd@exp1,w,c
 11809  000FF0  B4D8               	btfsc	status,2,c
 11810  000FF2  D00B               	goto	i2l735
 11811  000FF4  5026               	movf	___ftadd@exp2,w,c
 11812  000FF6  5C27               	subwf	___ftadd@exp1,w,c
 11813  000FF8  B0D8               	btfsc	status,0,c
 11814  000FFA  D00E               	goto	i2l3067
 11815  000FFC  5027               	movf	___ftadd@exp1,w,c
 11816  000FFE  0800               	sublw	0
 11817  001000  2426               	addwf	___ftadd@exp2,w,c
 11818  001002  6E22               	movwf	??___ftadd& (0+255),c
 11819  001004  0E18               	movlw	24
 11820  001006  6422               	cpfsgt	??___ftadd,c
 11821  001008  D007               	goto	i2l3067
 11822  00100A                     i2l735:
 11823  00100A  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 11824  00100E  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 11825  001012  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 11826  001016  0012               	return	
 11827  001018                     i2l3067:
 11828  001018  5026               	movf	___ftadd@exp2,w,c
 11829  00101A  B4D8               	btfsc	status,2,c
 11830  00101C  D00B               	goto	i2l739
 11831  00101E  5027               	movf	___ftadd@exp1,w,c
 11832  001020  5C26               	subwf	___ftadd@exp2,w,c
 11833  001022  B0D8               	btfsc	status,0,c
 11834  001024  D00E               	goto	i2l3073
 11835  001026  5026               	movf	___ftadd@exp2,w,c
 11836  001028  0800               	sublw	0
 11837  00102A  2427               	addwf	___ftadd@exp1,w,c
 11838  00102C  6E22               	movwf	??___ftadd& (0+255),c
 11839  00102E  0E18               	movlw	24
 11840  001030  6422               	cpfsgt	??___ftadd,c
 11841  001032  D007               	goto	i2l3073
 11842  001034                     i2l739:
 11843  001034  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 11844  001038  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 11845  00103C  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 11846  001040  0012               	return	
 11847  001042                     i2l3073:
 11848  001042  0E06               	movlw	6
 11849  001044  6E25               	movwf	___ftadd@sign,c
 11850  001046  BE1E               	btfsc	___ftadd@f1+2,7,c
 11851  001048  8E25               	bsf	___ftadd@sign,7,c
 11852  00104A  BE21               	btfsc	___ftadd@f2+2,7,c
 11853  00104C  8C25               	bsf	___ftadd@sign,6,c
 11854  00104E  8E1D               	bsf	___ftadd@f1+1,7,c
 11855  001050  0EFF               	movlw	255
 11856  001052  161C               	andwf	___ftadd@f1,f,c
 11857  001054  0EFF               	movlw	255
 11858  001056  161D               	andwf	___ftadd@f1+1,f,c
 11859  001058  0E00               	movlw	0
 11860  00105A  161E               	andwf	___ftadd@f1+2,f,c
 11861  00105C  8E20               	bsf	___ftadd@f2+1,7,c
 11862  00105E  0EFF               	movlw	255
 11863  001060  161F               	andwf	___ftadd@f2,f,c
 11864  001062  0EFF               	movlw	255
 11865  001064  1620               	andwf	___ftadd@f2+1,f,c
 11866  001066  0E00               	movlw	0
 11867  001068  1621               	andwf	___ftadd@f2+2,f,c
 11868  00106A  5026               	movf	___ftadd@exp2,w,c
 11869  00106C  5C27               	subwf	___ftadd@exp1,w,c
 11870  00106E  B0D8               	btfsc	status,0,c
 11871  001070  D01B               	goto	i2l3099
 11872  001072                     i2l3089:
 11873  001072  90D8               	bcf	status,0,c
 11874  001074  361F               	rlcf	___ftadd@f2,f,c
 11875  001076  3620               	rlcf	___ftadd@f2+1,f,c
 11876  001078  3621               	rlcf	___ftadd@f2+2,f,c
 11877  00107A  0626               	decf	___ftadd@exp2,f,c
 11878  00107C  5027               	movf	___ftadd@exp1,w,c
 11879  00107E  1826               	xorwf	___ftadd@exp2,w,c
 11880  001080  B4D8               	btfsc	status,2,c
 11881  001082  D00D               	goto	i2l3097
 11882  001084  0625               	decf	___ftadd@sign,f,c
 11883  001086  C025  F022         	movff	___ftadd@sign,??___ftadd
 11884  00108A  0E07               	movlw	7
 11885  00108C  1622               	andwf	??___ftadd,f,c
 11886  00108E  B4D8               	btfsc	status,2,c
 11887  001090  D006               	goto	i2l3097
 11888  001092  D7EF               	goto	i2l3089
 11889  001094                     i2l3095:
 11890  001094  90D8               	bcf	status,0,c
 11891  001096  321E               	rrcf	___ftadd@f1+2,f,c
 11892  001098  321D               	rrcf	___ftadd@f1+1,f,c
 11893  00109A  321C               	rrcf	___ftadd@f1,f,c
 11894  00109C  2A27               	incf	___ftadd@exp1,f,c
 11895  00109E                     i2l3097:
 11896  00109E  5026               	movf	___ftadd@exp2,w,c
 11897  0010A0  1827               	xorwf	___ftadd@exp1,w,c
 11898  0010A2  B4D8               	btfsc	status,2,c
 11899  0010A4  D01F               	goto	i2l750
 11900  0010A6  D7F6               	goto	i2l3095
 11901  0010A8                     i2l3099:
 11902  0010A8  5027               	movf	___ftadd@exp1,w,c
 11903  0010AA  5C26               	subwf	___ftadd@exp2,w,c
 11904  0010AC  B0D8               	btfsc	status,0,c
 11905  0010AE  D01A               	goto	i2l750
 11906  0010B0                     i2l3101:
 11907  0010B0  90D8               	bcf	status,0,c
 11908  0010B2  361C               	rlcf	___ftadd@f1,f,c
 11909  0010B4  361D               	rlcf	___ftadd@f1+1,f,c
 11910  0010B6  361E               	rlcf	___ftadd@f1+2,f,c
 11911  0010B8  0627               	decf	___ftadd@exp1,f,c
 11912  0010BA  5027               	movf	___ftadd@exp1,w,c
 11913  0010BC  1826               	xorwf	___ftadd@exp2,w,c
 11914  0010BE  B4D8               	btfsc	status,2,c
 11915  0010C0  D00D               	goto	i2l3109
 11916  0010C2  0625               	decf	___ftadd@sign,f,c
 11917  0010C4  C025  F022         	movff	___ftadd@sign,??___ftadd
 11918  0010C8  0E07               	movlw	7
 11919  0010CA  1622               	andwf	??___ftadd,f,c
 11920  0010CC  B4D8               	btfsc	status,2,c
 11921  0010CE  D006               	goto	i2l3109
 11922  0010D0  D7EF               	goto	i2l3101
 11923  0010D2                     i2l3107:
 11924  0010D2  90D8               	bcf	status,0,c
 11925  0010D4  3221               	rrcf	___ftadd@f2+2,f,c
 11926  0010D6  3220               	rrcf	___ftadd@f2+1,f,c
 11927  0010D8  321F               	rrcf	___ftadd@f2,f,c
 11928  0010DA  2A26               	incf	___ftadd@exp2,f,c
 11929  0010DC                     i2l3109:
 11930  0010DC  5026               	movf	___ftadd@exp2,w,c
 11931  0010DE  1827               	xorwf	___ftadd@exp1,w,c
 11932  0010E0  A4D8               	btfss	status,2,c
 11933  0010E2  D7F7               	goto	i2l3107
 11934  0010E4                     i2l750:
 11935  0010E4  AE25               	btfss	___ftadd@sign,7,c
 11936  0010E6  D00C               	goto	i2l759
 11937  0010E8  0EFF               	movlw	255
 11938  0010EA  1A1C               	xorwf	___ftadd@f1,f,c
 11939  0010EC  0EFF               	movlw	255
 11940  0010EE  1A1D               	xorwf	___ftadd@f1+1,f,c
 11941  0010F0  0EFF               	movlw	255
 11942  0010F2  1A1E               	xorwf	___ftadd@f1+2,f,c
 11943  0010F4  0E01               	movlw	1
 11944  0010F6  261C               	addwf	___ftadd@f1,f,c
 11945  0010F8  0E00               	movlw	0
 11946  0010FA  221D               	addwfc	___ftadd@f1+1,f,c
 11947  0010FC  0E00               	movlw	0
 11948  0010FE  221E               	addwfc	___ftadd@f1+2,f,c
 11949  001100                     i2l759:
 11950  001100  AC25               	btfss	___ftadd@sign,6,c
 11951  001102  D00C               	goto	i2l3115
 11952  001104  0EFF               	movlw	255
 11953  001106  1A1F               	xorwf	___ftadd@f2,f,c
 11954  001108  0EFF               	movlw	255
 11955  00110A  1A20               	xorwf	___ftadd@f2+1,f,c
 11956  00110C  0EFF               	movlw	255
 11957  00110E  1A21               	xorwf	___ftadd@f2+2,f,c
 11958  001110  0E01               	movlw	1
 11959  001112  261F               	addwf	___ftadd@f2,f,c
 11960  001114  0E00               	movlw	0
 11961  001116  2220               	addwfc	___ftadd@f2+1,f,c
 11962  001118  0E00               	movlw	0
 11963  00111A  2221               	addwfc	___ftadd@f2+2,f,c
 11964  00111C                     i2l3115:
 11965  00111C  0E00               	movlw	0
 11966  00111E  6E25               	movwf	___ftadd@sign,c
 11967  001120  501C               	movf	___ftadd@f1,w,c
 11968  001122  261F               	addwf	___ftadd@f2,f,c
 11969  001124  501D               	movf	___ftadd@f1+1,w,c
 11970  001126  2220               	addwfc	___ftadd@f2+1,f,c
 11971  001128  501E               	movf	___ftadd@f1+2,w,c
 11972  00112A  2221               	addwfc	___ftadd@f2+2,f,c
 11973  00112C  AE21               	btfss	___ftadd@f2+2,7,c
 11974  00112E  D00E               	goto	i2l3125
 11975  001130  0EFF               	movlw	255
 11976  001132  1A1F               	xorwf	___ftadd@f2,f,c
 11977  001134  0EFF               	movlw	255
 11978  001136  1A20               	xorwf	___ftadd@f2+1,f,c
 11979  001138  0EFF               	movlw	255
 11980  00113A  1A21               	xorwf	___ftadd@f2+2,f,c
 11981  00113C  0E01               	movlw	1
 11982  00113E  261F               	addwf	___ftadd@f2,f,c
 11983  001140  0E00               	movlw	0
 11984  001142  2220               	addwfc	___ftadd@f2+1,f,c
 11985  001144  0E00               	movlw	0
 11986  001146  2221               	addwfc	___ftadd@f2+2,f,c
 11987  001148  0E01               	movlw	1
 11988  00114A  6E25               	movwf	___ftadd@sign,c
 11989  00114C                     i2l3125:
 11990  00114C  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 11991  001150  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11992  001154  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11993  001158  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 11994  00115C  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 11995  001160  EC15  F011         	call	___ftpack	;wreg free
 11996  001164  C001  F01C         	movff	?___ftpack,?___ftadd
 11997  001168  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 11998  00116C  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 11999  001170  0012               	return	
 12000  001172                     __end_of___ftadd:
 12001                           	opt stack 0
 12002                           pclatu	equ	0xFFB
 12003                           pclath	equ	0xFFA
 12004                           tblptru	equ	0xFF8
 12005                           tblptrh	equ	0xFF7
 12006                           tblptrl	equ	0xFF6
 12007                           tablat	equ	0xFF5
 12008                           prodh	equ	0xFF4
 12009                           prodl	equ	0xFF3
 12010                           intcon	equ	0xFF2
 12011                           intcon2	equ	0xFF1
 12012                           intcon3	equ	0xFF0
 12013                           postinc0	equ	0xFEE
 12014                           fsr0h	equ	0xFEA
 12015                           fsr0l	equ	0xFE9
 12016                           wreg	equ	0xFE8
 12017                           fsr1h	equ	0xFE2
 12018                           fsr1l	equ	0xFE1
 12019                           indf2	equ	0xFDF
 12020                           postinc2	equ	0xFDE
 12021                           postdec2	equ	0xFDD
 12022                           fsr2h	equ	0xFDA
 12023                           fsr2l	equ	0xFD9
 12024                           status	equ	0xFD8
 12025                           
 12026 ;; *************** function ___ftneg *****************
 12027 ;; Defined at:
 12028 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 12029 ;; Parameters:    Size  Location     Type
 12030 ;;  f1              3    0[COMRAM] float 
 12031 ;; Auto vars:     Size  Location     Type
 12032 ;;		None
 12033 ;; Return value:  Size  Location     Type
 12034 ;;                  3    0[COMRAM] float 
 12035 ;; Registers used:
 12036 ;;		wreg, status,2, status,0
 12037 ;; Tracked objects:
 12038 ;;		On entry : 0/0
 12039 ;;		On exit  : 0/0
 12040 ;;		Unchanged: 0/0
 12041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12042 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12045 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12046 ;;Total ram usage:        3 bytes
 12047 ;; Hardware stack levels used:    1
 12048 ;; This function calls:
 12049 ;;		Nothing
 12050 ;; This function is called by:
 12051 ;;		_pow
 12052 ;;		_exp
 12053 ;; This function uses a non-reentrant model
 12054 ;;
 12055                           
 12056                           	psect	text62
 12057  002BE2                     __ptext62:
 12058                           	opt stack 0
 12059  002BE2                     ___ftneg:
 12060                           	opt stack 22
 12061                           
 12062                           ;incstack = 0
 12063  002BE2  5001               	movf	___ftneg@f1,w,c
 12064  002BE4  1002               	iorwf	___ftneg@f1+1,w,c
 12065  002BE6  1003               	iorwf	___ftneg@f1+2,w,c
 12066  002BE8  B4D8               	btfsc	status,2,c
 12067  002BEA  D006               	goto	i2l792
 12068  002BEC  0E00               	movlw	0
 12069  002BEE  1A01               	xorwf	___ftneg@f1,f,c
 12070  002BF0  0E00               	movlw	0
 12071  002BF2  1A02               	xorwf	___ftneg@f1+1,f,c
 12072  002BF4  0E80               	movlw	128
 12073  002BF6  1A03               	xorwf	___ftneg@f1+2,f,c
 12074  002BF8                     i2l792:
 12075  002BF8  C001  F001         	movff	___ftneg@f1,?___ftneg
 12076  002BFC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 12077  002C00  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 12078  002C04  0012               	return		;funcret
 12079  002C06                     __end_of___ftneg:
 12080                           	opt stack 0
 12081                           pclatu	equ	0xFFB
 12082                           pclath	equ	0xFFA
 12083                           tblptru	equ	0xFF8
 12084                           tblptrh	equ	0xFF7
 12085                           tblptrl	equ	0xFF6
 12086                           tablat	equ	0xFF5
 12087                           prodh	equ	0xFF4
 12088                           prodl	equ	0xFF3
 12089                           intcon	equ	0xFF2
 12090                           intcon2	equ	0xFF1
 12091                           intcon3	equ	0xFF0
 12092                           postinc0	equ	0xFEE
 12093                           fsr0h	equ	0xFEA
 12094                           fsr0l	equ	0xFE9
 12095                           wreg	equ	0xFE8
 12096                           fsr1h	equ	0xFE2
 12097                           fsr1l	equ	0xFE1
 12098                           indf2	equ	0xFDF
 12099                           postinc2	equ	0xFDE
 12100                           postdec2	equ	0xFDD
 12101                           fsr2h	equ	0xFDA
 12102                           fsr2l	equ	0xFD9
 12103                           status	equ	0xFD8
 12104                           
 12105 ;; *************** function ___ftdiv *****************
 12106 ;; Defined at:
 12107 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 12108 ;; Parameters:    Size  Location     Type
 12109 ;;  f1              3    8[COMRAM] float 
 12110 ;;  f2              3   11[COMRAM] float 
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;  f3              3   18[COMRAM] float 
 12113 ;;  sign            1   22[COMRAM] unsigned char 
 12114 ;;  exp             1   21[COMRAM] unsigned char 
 12115 ;;  cntr            1   17[COMRAM] unsigned char 
 12116 ;; Return value:  Size  Location     Type
 12117 ;;                  3    8[COMRAM] float 
 12118 ;; Registers used:
 12119 ;;		wreg, status,2, status,0, cstack
 12120 ;; Tracked objects:
 12121 ;;		On entry : 0/0
 12122 ;;		On exit  : 0/0
 12123 ;;		Unchanged: 0/0
 12124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12125 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12126 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12127 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12128 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;Total ram usage:       15 bytes
 12130 ;; Hardware stack levels used:    1
 12131 ;; Hardware stack levels required when called:    1
 12132 ;; This function calls:
 12133 ;;		___ftpack
 12134 ;; This function is called by:
 12135 ;;		_exp
 12136 ;; This function uses a non-reentrant model
 12137 ;;
 12138                           
 12139                           	psect	text63
 12140  001A5A                     __ptext63:
 12141                           	opt stack 0
 12142  001A5A                     ___ftdiv:
 12143                           	opt stack 21
 12144                           
 12145                           ;incstack = 0
 12146  001A5A  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 12147  001A5E  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 12148  001A60  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 12149  001A62  340A               	rlcf	___ftdiv@f1+1,w,c
 12150  001A64  360F               	rlcf	??___ftdiv& (0+255),f,c
 12151  001A66  E301               	bnc	u274_41
 12152  001A68  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 12153  001A6A                     u274_41:
 12154  001A6A  500F               	movf	??___ftdiv,w,c
 12155  001A6C  6E16               	movwf	___ftdiv@exp,c
 12156  001A6E  5016               	movf	___ftdiv@exp,w,c
 12157  001A70  A4D8               	btfss	status,2,c
 12158  001A72  D007               	goto	i2l3295
 12159  001A74  0E00               	movlw	0
 12160  001A76  6E09               	movwf	?___ftdiv,c
 12161  001A78  0E00               	movlw	0
 12162  001A7A  6E0A               	movwf	?___ftdiv+1,c
 12163  001A7C  0E00               	movlw	0
 12164  001A7E  6E0B               	movwf	?___ftdiv+2,c
 12165  001A80  0012               	return	
 12166  001A82                     i2l3295:
 12167  001A82  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 12168  001A86  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 12169  001A88  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 12170  001A8A  340D               	rlcf	___ftdiv@f2+1,w,c
 12171  001A8C  360F               	rlcf	??___ftdiv& (0+255),f,c
 12172  001A8E  E301               	bnc	u276_41
 12173  001A90  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 12174  001A92                     u276_41:
 12175  001A92  500F               	movf	??___ftdiv,w,c
 12176  001A94  6E17               	movwf	___ftdiv@sign,c
 12177  001A96  5017               	movf	___ftdiv@sign,w,c
 12178  001A98  A4D8               	btfss	status,2,c
 12179  001A9A  D007               	goto	i2l3301
 12180  001A9C  0E00               	movlw	0
 12181  001A9E  6E09               	movwf	?___ftdiv,c
 12182  001AA0  0E00               	movlw	0
 12183  001AA2  6E0A               	movwf	?___ftdiv+1,c
 12184  001AA4  0E00               	movlw	0
 12185  001AA6  6E0B               	movwf	?___ftdiv+2,c
 12186  001AA8  0012               	return	
 12187  001AAA                     i2l3301:
 12188  001AAA  0E00               	movlw	0
 12189  001AAC  6E13               	movwf	___ftdiv@f3,c
 12190  001AAE  0E00               	movlw	0
 12191  001AB0  6E14               	movwf	___ftdiv@f3+1,c
 12192  001AB2  0E00               	movlw	0
 12193  001AB4  6E15               	movwf	___ftdiv@f3+2,c
 12194  001AB6  5017               	movf	___ftdiv@sign,w,c
 12195  001AB8  0F89               	addlw	137
 12196  001ABA  5E16               	subwf	___ftdiv@exp,f,c
 12197  001ABC  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 12198  001AC0  500E               	movf	___ftdiv@f2+2,w,c
 12199  001AC2  1A17               	xorwf	___ftdiv@sign,f,c
 12200  001AC4  0E80               	movlw	128
 12201  001AC6  1617               	andwf	___ftdiv@sign,f,c
 12202  001AC8  8E0A               	bsf	___ftdiv@f1+1,7,c
 12203  001ACA  0EFF               	movlw	255
 12204  001ACC  1609               	andwf	___ftdiv@f1,f,c
 12205  001ACE  0EFF               	movlw	255
 12206  001AD0  160A               	andwf	___ftdiv@f1+1,f,c
 12207  001AD2  0E00               	movlw	0
 12208  001AD4  160B               	andwf	___ftdiv@f1+2,f,c
 12209  001AD6  8E0D               	bsf	___ftdiv@f2+1,7,c
 12210  001AD8  0EFF               	movlw	255
 12211  001ADA  160C               	andwf	___ftdiv@f2,f,c
 12212  001ADC  0EFF               	movlw	255
 12213  001ADE  160D               	andwf	___ftdiv@f2+1,f,c
 12214  001AE0  0E00               	movlw	0
 12215  001AE2  160E               	andwf	___ftdiv@f2+2,f,c
 12216  001AE4  0E18               	movlw	24
 12217  001AE6  6E12               	movwf	___ftdiv@cntr,c
 12218  001AE8                     i2l3321:
 12219  001AE8  90D8               	bcf	status,0,c
 12220  001AEA  3613               	rlcf	___ftdiv@f3,f,c
 12221  001AEC  3614               	rlcf	___ftdiv@f3+1,f,c
 12222  001AEE  3615               	rlcf	___ftdiv@f3+2,f,c
 12223  001AF0  500C               	movf	___ftdiv@f2,w,c
 12224  001AF2  5C09               	subwf	___ftdiv@f1,w,c
 12225  001AF4  500D               	movf	___ftdiv@f2+1,w,c
 12226  001AF6  580A               	subwfb	___ftdiv@f1+1,w,c
 12227  001AF8  500E               	movf	___ftdiv@f2+2,w,c
 12228  001AFA  580B               	subwfb	___ftdiv@f1+2,w,c
 12229  001AFC  A0D8               	btfss	status,0,c
 12230  001AFE  D007               	goto	i2l770
 12231  001B00  500C               	movf	___ftdiv@f2,w,c
 12232  001B02  5E09               	subwf	___ftdiv@f1,f,c
 12233  001B04  500D               	movf	___ftdiv@f2+1,w,c
 12234  001B06  5A0A               	subwfb	___ftdiv@f1+1,f,c
 12235  001B08  500E               	movf	___ftdiv@f2+2,w,c
 12236  001B0A  5A0B               	subwfb	___ftdiv@f1+2,f,c
 12237  001B0C  8013               	bsf	___ftdiv@f3,0,c
 12238  001B0E                     i2l770:
 12239  001B0E  90D8               	bcf	status,0,c
 12240  001B10  3609               	rlcf	___ftdiv@f1,f,c
 12241  001B12  360A               	rlcf	___ftdiv@f1+1,f,c
 12242  001B14  360B               	rlcf	___ftdiv@f1+2,f,c
 12243  001B16  2E12               	decfsz	___ftdiv@cntr,f,c
 12244  001B18  D7E7               	goto	i2l3321
 12245  001B1A  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 12246  001B1E  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12247  001B22  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12248  001B26  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 12249  001B2A  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 12250  001B2E  EC15  F011         	call	___ftpack	;wreg free
 12251  001B32  C001  F009         	movff	?___ftpack,?___ftdiv
 12252  001B36  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 12253  001B3A  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 12254  001B3E  0012               	return	
 12255  001B40                     __end_of___ftdiv:
 12256                           	opt stack 0
 12257                           pclatu	equ	0xFFB
 12258                           pclath	equ	0xFFA
 12259                           tblptru	equ	0xFF8
 12260                           tblptrh	equ	0xFF7
 12261                           tblptrl	equ	0xFF6
 12262                           tablat	equ	0xFF5
 12263                           prodh	equ	0xFF4
 12264                           prodl	equ	0xFF3
 12265                           intcon	equ	0xFF2
 12266                           intcon2	equ	0xFF1
 12267                           intcon3	equ	0xFF0
 12268                           postinc0	equ	0xFEE
 12269                           fsr0h	equ	0xFEA
 12270                           fsr0l	equ	0xFE9
 12271                           wreg	equ	0xFE8
 12272                           fsr1h	equ	0xFE2
 12273                           fsr1l	equ	0xFE1
 12274                           indf2	equ	0xFDF
 12275                           postinc2	equ	0xFDE
 12276                           postdec2	equ	0xFDD
 12277                           fsr2h	equ	0xFDA
 12278                           fsr2l	equ	0xFD9
 12279                           status	equ	0xFD8
 12280                           
 12281 ;; *************** function ___awtoft *****************
 12282 ;; Defined at:
 12283 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12284 ;; Parameters:    Size  Location     Type
 12285 ;;  c               2    8[COMRAM] int 
 12286 ;; Auto vars:     Size  Location     Type
 12287 ;;  sign            1   11[COMRAM] unsigned char 
 12288 ;; Return value:  Size  Location     Type
 12289 ;;                  3    8[COMRAM] float 
 12290 ;; Registers used:
 12291 ;;		wreg, status,2, status,0, cstack
 12292 ;; Tracked objects:
 12293 ;;		On entry : 0/0
 12294 ;;		On exit  : 0/0
 12295 ;;		Unchanged: 0/0
 12296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12297 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12300 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12301 ;;Total ram usage:        4 bytes
 12302 ;; Hardware stack levels used:    1
 12303 ;; Hardware stack levels required when called:    1
 12304 ;; This function calls:
 12305 ;;		___ftpack
 12306 ;; This function is called by:
 12307 ;;		_dec_to_hex
 12308 ;;		_exp
 12309 ;;		_log
 12310 ;; This function uses a non-reentrant model
 12311 ;;
 12312                           
 12313                           	psect	text64
 12314  002A9A                     __ptext64:
 12315                           	opt stack 0
 12316  002A9A                     ___awtoft:
 12317                           	opt stack 21
 12318                           
 12319                           ;incstack = 0
 12320  002A9A  0E00               	movlw	0
 12321  002A9C  6E0C               	movwf	___awtoft@sign,c
 12322  002A9E  AE0A               	btfss	___awtoft@c+1,7,c
 12323  002AA0  D006               	goto	i2l3351
 12324  002AA2  6C09               	negf	___awtoft@c,c
 12325  002AA4  1E0A               	comf	___awtoft@c+1,f,c
 12326  002AA6  B0D8               	btfsc	status,0,c
 12327  002AA8  2A0A               	incf	___awtoft@c+1,f,c
 12328  002AAA  0E01               	movlw	1
 12329  002AAC  6E0C               	movwf	___awtoft@sign,c
 12330  002AAE                     i2l3351:
 12331  002AAE  C009  F001         	movff	___awtoft@c,___ftpack@arg
 12332  002AB2  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 12333  002AB6  6A03               	clrf	___ftpack@arg+2,c
 12334  002AB8  0E8E               	movlw	142
 12335  002ABA  6E04               	movwf	___ftpack@exp,c
 12336  002ABC  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 12337  002AC0  EC15  F011         	call	___ftpack	;wreg free
 12338  002AC4  C001  F009         	movff	?___ftpack,?___awtoft
 12339  002AC8  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 12340  002ACC  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 12341  002AD0  0012               	return	
 12342  002AD2                     __end_of___awtoft:
 12343                           	opt stack 0
 12344                           pclatu	equ	0xFFB
 12345                           pclath	equ	0xFFA
 12346                           tblptru	equ	0xFF8
 12347                           tblptrh	equ	0xFF7
 12348                           tblptrl	equ	0xFF6
 12349                           tablat	equ	0xFF5
 12350                           prodh	equ	0xFF4
 12351                           prodl	equ	0xFF3
 12352                           intcon	equ	0xFF2
 12353                           intcon2	equ	0xFF1
 12354                           intcon3	equ	0xFF0
 12355                           postinc0	equ	0xFEE
 12356                           fsr0h	equ	0xFEA
 12357                           fsr0l	equ	0xFE9
 12358                           wreg	equ	0xFE8
 12359                           fsr1h	equ	0xFE2
 12360                           fsr1l	equ	0xFE1
 12361                           indf2	equ	0xFDF
 12362                           postinc2	equ	0xFDE
 12363                           postdec2	equ	0xFDD
 12364                           fsr2h	equ	0xFDA
 12365                           fsr2l	equ	0xFD9
 12366                           status	equ	0xFD8
 12367                           
 12368 ;; *************** function ___lltoft *****************
 12369 ;; Defined at:
 12370 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 12371 ;; Parameters:    Size  Location     Type
 12372 ;;  c               4    8[COMRAM] unsigned long 
 12373 ;; Auto vars:     Size  Location     Type
 12374 ;;  exp             1   16[COMRAM] unsigned char 
 12375 ;; Return value:  Size  Location     Type
 12376 ;;                  3    8[COMRAM] float 
 12377 ;; Registers used:
 12378 ;;		wreg, status,2, status,0, cstack
 12379 ;; Tracked objects:
 12380 ;;		On entry : 0/0
 12381 ;;		On exit  : 0/0
 12382 ;;		Unchanged: 0/0
 12383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12384 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12386 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12387 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12388 ;;Total ram usage:        9 bytes
 12389 ;; Hardware stack levels used:    1
 12390 ;; Hardware stack levels required when called:    1
 12391 ;; This function calls:
 12392 ;;		___ftpack
 12393 ;; This function is called by:
 12394 ;;		_pow
 12395 ;; This function uses a non-reentrant model
 12396 ;;
 12397                           
 12398                           	psect	text65
 12399  00288E                     __ptext65:
 12400                           	opt stack 0
 12401  00288E                     ___lltoft:
 12402                           	opt stack 22
 12403                           
 12404                           ;incstack = 0
 12405  00288E  0E8E               	movlw	142
 12406  002890  6E11               	movwf	___lltoft@exp,c
 12407  002892  D006               	goto	i2l3481
 12408  002894                     i2l3479:
 12409  002894  90D8               	bcf	status,0,c
 12410  002896  320C               	rrcf	___lltoft@c+3,f,c
 12411  002898  320B               	rrcf	___lltoft@c+2,f,c
 12412  00289A  320A               	rrcf	___lltoft@c+1,f,c
 12413  00289C  3209               	rrcf	___lltoft@c,f,c
 12414  00289E  2A11               	incf	___lltoft@exp,f,c
 12415  0028A0                     i2l3481:
 12416  0028A0  0E00               	movlw	0
 12417  0028A2  1409               	andwf	___lltoft@c,w,c
 12418  0028A4  6E0D               	movwf	??___lltoft& (0+255),c
 12419  0028A6  0E00               	movlw	0
 12420  0028A8  140A               	andwf	___lltoft@c+1,w,c
 12421  0028AA  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12422  0028AC  0E00               	movlw	0
 12423  0028AE  140B               	andwf	___lltoft@c+2,w,c
 12424  0028B0  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12425  0028B2  0EFF               	movlw	255
 12426  0028B4  140C               	andwf	___lltoft@c+3,w,c
 12427  0028B6  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12428  0028B8  500D               	movf	??___lltoft,w,c
 12429  0028BA  100E               	iorwf	??___lltoft+1,w,c
 12430  0028BC  100F               	iorwf	??___lltoft+2,w,c
 12431  0028BE  1010               	iorwf	??___lltoft+3,w,c
 12432  0028C0  A4D8               	btfss	status,2,c
 12433  0028C2  D7E8               	goto	i2l3479
 12434  0028C4  C009  F001         	movff	___lltoft@c,___ftpack@arg
 12435  0028C8  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 12436  0028CC  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 12437  0028D0  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 12438  0028D4  0E00               	movlw	0
 12439  0028D6  6E05               	movwf	___ftpack@sign,c
 12440  0028D8  EC15  F011         	call	___ftpack	;wreg free
 12441  0028DC  C001  F009         	movff	?___ftpack,?___lltoft
 12442  0028E0  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 12443  0028E4  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 12444  0028E8  0012               	return	
 12445  0028EA                     __end_of___lltoft:
 12446                           	opt stack 0
 12447                           pclatu	equ	0xFFB
 12448                           pclath	equ	0xFFA
 12449                           tblptru	equ	0xFF8
 12450                           tblptrh	equ	0xFF7
 12451                           tblptrl	equ	0xFF6
 12452                           tablat	equ	0xFF5
 12453                           prodh	equ	0xFF4
 12454                           prodl	equ	0xFF3
 12455                           intcon	equ	0xFF2
 12456                           intcon2	equ	0xFF1
 12457                           intcon3	equ	0xFF0
 12458                           postinc0	equ	0xFEE
 12459                           fsr0h	equ	0xFEA
 12460                           fsr0l	equ	0xFE9
 12461                           wreg	equ	0xFE8
 12462                           fsr1h	equ	0xFE2
 12463                           fsr1l	equ	0xFE1
 12464                           indf2	equ	0xFDF
 12465                           postinc2	equ	0xFDE
 12466                           postdec2	equ	0xFDD
 12467                           fsr2h	equ	0xFDA
 12468                           fsr2l	equ	0xFD9
 12469                           status	equ	0xFD8
 12470                           
 12471 ;; *************** function ___ftpack *****************
 12472 ;; Defined at:
 12473 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;  arg             3    0[COMRAM] unsigned um
 12476 ;;  exp             1    3[COMRAM] unsigned char 
 12477 ;;  sign            1    4[COMRAM] unsigned char 
 12478 ;; Auto vars:     Size  Location     Type
 12479 ;;		None
 12480 ;; Return value:  Size  Location     Type
 12481 ;;                  3    0[COMRAM] float 
 12482 ;; Registers used:
 12483 ;;		wreg, status,2, status,0
 12484 ;; Tracked objects:
 12485 ;;		On entry : 0/0
 12486 ;;		On exit  : 0/0
 12487 ;;		Unchanged: 0/0
 12488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12489 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12491 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12492 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12493 ;;Total ram usage:        8 bytes
 12494 ;; Hardware stack levels used:    1
 12495 ;; This function calls:
 12496 ;;		Nothing
 12497 ;; This function is called by:
 12498 ;;		___altoft
 12499 ;;		___awtoft
 12500 ;;		___ftadd
 12501 ;;		___ftdiv
 12502 ;;		___ftmul
 12503 ;;		___lltoft
 12504 ;; This function uses a non-reentrant model
 12505 ;;
 12506                           
 12507                           	psect	text66
 12508  00222A                     __ptext66:
 12509                           	opt stack 0
 12510  00222A                     ___ftpack:
 12511                           	opt stack 20
 12512                           
 12513                           ;incstack = 0
 12514  00222A  5004               	movf	___ftpack@exp,w,c
 12515  00222C  B4D8               	btfsc	status,2,c
 12516  00222E  D005               	goto	i2l3011
 12517  002230  5001               	movf	___ftpack@arg,w,c
 12518  002232  1002               	iorwf	___ftpack@arg+1,w,c
 12519  002234  1003               	iorwf	___ftpack@arg+2,w,c
 12520  002236  A4D8               	btfss	status,2,c
 12521  002238  D00C               	goto	i2l3017
 12522  00223A                     i2l3011:
 12523  00223A  0E00               	movlw	0
 12524  00223C  6E01               	movwf	?___ftpack,c
 12525  00223E  0E00               	movlw	0
 12526  002240  6E02               	movwf	?___ftpack+1,c
 12527  002242  0E00               	movlw	0
 12528  002244  6E03               	movwf	?___ftpack+2,c
 12529  002246  0012               	return	
 12530  002248                     i2l3015:
 12531  002248  2A04               	incf	___ftpack@exp,f,c
 12532  00224A  90D8               	bcf	status,0,c
 12533  00224C  3203               	rrcf	___ftpack@arg+2,f,c
 12534  00224E  3202               	rrcf	___ftpack@arg+1,f,c
 12535  002250  3201               	rrcf	___ftpack@arg,f,c
 12536  002252                     i2l3017:
 12537  002252  0E00               	movlw	0
 12538  002254  1401               	andwf	___ftpack@arg,w,c
 12539  002256  6E06               	movwf	??___ftpack& (0+255),c
 12540  002258  0E00               	movlw	0
 12541  00225A  1402               	andwf	___ftpack@arg+1,w,c
 12542  00225C  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12543  00225E  0EFE               	movlw	254
 12544  002260  1403               	andwf	___ftpack@arg+2,w,c
 12545  002262  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12546  002264  5006               	movf	??___ftpack,w,c
 12547  002266  1007               	iorwf	??___ftpack+1,w,c
 12548  002268  1008               	iorwf	??___ftpack+2,w,c
 12549  00226A  B4D8               	btfsc	status,2,c
 12550  00226C  D00C               	goto	i2l3023
 12551  00226E  D7EC               	goto	i2l3015
 12552  002270                     i2l3019:
 12553  002270  2A04               	incf	___ftpack@exp,f,c
 12554  002272  0E01               	movlw	1
 12555  002274  2601               	addwf	___ftpack@arg,f,c
 12556  002276  0E00               	movlw	0
 12557  002278  2202               	addwfc	___ftpack@arg+1,f,c
 12558  00227A  0E00               	movlw	0
 12559  00227C  2203               	addwfc	___ftpack@arg+2,f,c
 12560  00227E  90D8               	bcf	status,0,c
 12561  002280  3203               	rrcf	___ftpack@arg+2,f,c
 12562  002282  3202               	rrcf	___ftpack@arg+1,f,c
 12563  002284  3201               	rrcf	___ftpack@arg,f,c
 12564  002286                     i2l3023:
 12565  002286  0E00               	movlw	0
 12566  002288  1401               	andwf	___ftpack@arg,w,c
 12567  00228A  6E06               	movwf	??___ftpack& (0+255),c
 12568  00228C  0E00               	movlw	0
 12569  00228E  1402               	andwf	___ftpack@arg+1,w,c
 12570  002290  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12571  002292  0EFF               	movlw	255
 12572  002294  1403               	andwf	___ftpack@arg+2,w,c
 12573  002296  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12574  002298  5006               	movf	??___ftpack,w,c
 12575  00229A  1007               	iorwf	??___ftpack+1,w,c
 12576  00229C  1008               	iorwf	??___ftpack+2,w,c
 12577  00229E  B4D8               	btfsc	status,2,c
 12578  0022A0  D006               	goto	i2l3027
 12579  0022A2  D7E6               	goto	i2l3019
 12580  0022A4                     i2l3025:
 12581  0022A4  0604               	decf	___ftpack@exp,f,c
 12582  0022A6  90D8               	bcf	status,0,c
 12583  0022A8  3601               	rlcf	___ftpack@arg,f,c
 12584  0022AA  3602               	rlcf	___ftpack@arg+1,f,c
 12585  0022AC  3603               	rlcf	___ftpack@arg+2,f,c
 12586  0022AE                     i2l3027:
 12587  0022AE  BE02               	btfsc	___ftpack@arg+1,7,c
 12588  0022B0  D003               	goto	i2l712
 12589  0022B2  0E02               	movlw	2
 12590  0022B4  6004               	cpfslt	___ftpack@exp,c
 12591  0022B6  D7F6               	goto	i2l3025
 12592  0022B8                     i2l712:
 12593  0022B8  A004               	btfss	___ftpack@exp,0,c
 12594  0022BA  9E02               	bcf	___ftpack@arg+1,7,c
 12595  0022BC  90D8               	bcf	status,0,c
 12596  0022BE  3204               	rrcf	___ftpack@exp,f,c
 12597  0022C0  5004               	movf	___ftpack@exp,w,c
 12598  0022C2  1203               	iorwf	___ftpack@arg+2,f,c
 12599  0022C4  5005               	movf	___ftpack@sign,w,c
 12600  0022C6  A4D8               	btfss	status,2,c
 12601  0022C8  8E03               	bsf	___ftpack@arg+2,7,c
 12602  0022CA  C001  F001         	movff	___ftpack@arg,?___ftpack
 12603  0022CE  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 12604  0022D2  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 12605  0022D6  0012               	return	
 12606  0022D8                     __end_of___ftpack:
 12607                           	opt stack 0
 12608                           pclatu	equ	0xFFB
 12609                           pclath	equ	0xFFA
 12610                           tblptru	equ	0xFF8
 12611                           tblptrh	equ	0xFF7
 12612                           tblptrl	equ	0xFF6
 12613                           tablat	equ	0xFF5
 12614                           prodh	equ	0xFF4
 12615                           prodl	equ	0xFF3
 12616                           intcon	equ	0xFF2
 12617                           intcon2	equ	0xFF1
 12618                           intcon3	equ	0xFF0
 12619                           postinc0	equ	0xFEE
 12620                           fsr0h	equ	0xFEA
 12621                           fsr0l	equ	0xFE9
 12622                           wreg	equ	0xFE8
 12623                           fsr1h	equ	0xFE2
 12624                           fsr1l	equ	0xFE1
 12625                           indf2	equ	0xFDF
 12626                           postinc2	equ	0xFDE
 12627                           postdec2	equ	0xFDD
 12628                           fsr2h	equ	0xFDA
 12629                           fsr2l	equ	0xFD9
 12630                           status	equ	0xFD8
 12631                           
 12632 ;; *************** function ___awdiv *****************
 12633 ;; Defined at:
 12634 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12635 ;; Parameters:    Size  Location     Type
 12636 ;;  dividend        2    6[COMRAM] int 
 12637 ;;  divisor         2    8[COMRAM] int 
 12638 ;; Auto vars:     Size  Location     Type
 12639 ;;  quotient        2   12[COMRAM] int 
 12640 ;;  sign            1   11[COMRAM] unsigned char 
 12641 ;;  counter         1   10[COMRAM] unsigned char 
 12642 ;; Return value:  Size  Location     Type
 12643 ;;                  2    6[COMRAM] int 
 12644 ;; Registers used:
 12645 ;;		wreg, status,2, status,0
 12646 ;; Tracked objects:
 12647 ;;		On entry : 0/0
 12648 ;;		On exit  : 0/0
 12649 ;;		Unchanged: 0/0
 12650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12651 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12652 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12654 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12655 ;;Total ram usage:        8 bytes
 12656 ;; Hardware stack levels used:    1
 12657 ;; This function calls:
 12658 ;;		Nothing
 12659 ;; This function is called by:
 12660 ;;		_dec_to_hex
 12661 ;;		_servo_rotate1
 12662 ;;		_servo_rotate2
 12663 ;; This function uses a non-reentrant model
 12664 ;;
 12665                           
 12666                           	psect	text67
 12667  00252A                     __ptext67:
 12668                           	opt stack 0
 12669  00252A                     ___awdiv:
 12670                           	opt stack 24
 12671                           
 12672                           ;incstack = 0
 12673  00252A  0E00               	movlw	0
 12674  00252C  6E0C               	movwf	___awdiv@sign,c
 12675  00252E  AE0A               	btfss	___awdiv@divisor+1,7,c
 12676  002530  D006               	goto	i2l3827
 12677  002532  6C09               	negf	___awdiv@divisor,c
 12678  002534  1E0A               	comf	___awdiv@divisor+1,f,c
 12679  002536  B0D8               	btfsc	status,0,c
 12680  002538  2A0A               	incf	___awdiv@divisor+1,f,c
 12681  00253A  0E01               	movlw	1
 12682  00253C  6E0C               	movwf	___awdiv@sign,c
 12683  00253E                     i2l3827:
 12684  00253E  AE08               	btfss	___awdiv@dividend+1,7,c
 12685  002540  D006               	goto	i2l3833
 12686  002542  6C07               	negf	___awdiv@dividend,c
 12687  002544  1E08               	comf	___awdiv@dividend+1,f,c
 12688  002546  B0D8               	btfsc	status,0,c
 12689  002548  2A08               	incf	___awdiv@dividend+1,f,c
 12690  00254A  0E01               	movlw	1
 12691  00254C  1A0C               	xorwf	___awdiv@sign,f,c
 12692  00254E                     i2l3833:
 12693  00254E  0E00               	movlw	0
 12694  002550  6E0E               	movwf	___awdiv@quotient+1,c
 12695  002552  0E00               	movlw	0
 12696  002554  6E0D               	movwf	___awdiv@quotient,c
 12697  002556  5009               	movf	___awdiv@divisor,w,c
 12698  002558  100A               	iorwf	___awdiv@divisor+1,w,c
 12699  00255A  B4D8               	btfsc	status,2,c
 12700  00255C  D01C               	goto	i2l3855
 12701  00255E  0E01               	movlw	1
 12702  002560  6E0B               	movwf	___awdiv@counter,c
 12703  002562  D004               	goto	i2l3841
 12704  002564                     i2l3839:
 12705  002564  90D8               	bcf	status,0,c
 12706  002566  3609               	rlcf	___awdiv@divisor,f,c
 12707  002568  360A               	rlcf	___awdiv@divisor+1,f,c
 12708  00256A  2A0B               	incf	___awdiv@counter,f,c
 12709  00256C                     i2l3841:
 12710  00256C  AE0A               	btfss	___awdiv@divisor+1,7,c
 12711  00256E  D7FA               	goto	i2l3839
 12712  002570                     i2l3843:
 12713  002570  90D8               	bcf	status,0,c
 12714  002572  360D               	rlcf	___awdiv@quotient,f,c
 12715  002574  360E               	rlcf	___awdiv@quotient+1,f,c
 12716  002576  5009               	movf	___awdiv@divisor,w,c
 12717  002578  5C07               	subwf	___awdiv@dividend,w,c
 12718  00257A  500A               	movf	___awdiv@divisor+1,w,c
 12719  00257C  5808               	subwfb	___awdiv@dividend+1,w,c
 12720  00257E  A0D8               	btfss	status,0,c
 12721  002580  D005               	goto	i2l3851
 12722  002582  5009               	movf	___awdiv@divisor,w,c
 12723  002584  5E07               	subwf	___awdiv@dividend,f,c
 12724  002586  500A               	movf	___awdiv@divisor+1,w,c
 12725  002588  5A08               	subwfb	___awdiv@dividend+1,f,c
 12726  00258A  800D               	bsf	___awdiv@quotient,0,c
 12727  00258C                     i2l3851:
 12728  00258C  90D8               	bcf	status,0,c
 12729  00258E  320A               	rrcf	___awdiv@divisor+1,f,c
 12730  002590  3209               	rrcf	___awdiv@divisor,f,c
 12731  002592  2E0B               	decfsz	___awdiv@counter,f,c
 12732  002594  D7ED               	goto	i2l3843
 12733  002596                     i2l3855:
 12734  002596  500C               	movf	___awdiv@sign,w,c
 12735  002598  B4D8               	btfsc	status,2,c
 12736  00259A  D004               	goto	i2l3859
 12737  00259C  6C0D               	negf	___awdiv@quotient,c
 12738  00259E  1E0E               	comf	___awdiv@quotient+1,f,c
 12739  0025A0  B0D8               	btfsc	status,0,c
 12740  0025A2  2A0E               	incf	___awdiv@quotient+1,f,c
 12741  0025A4                     i2l3859:
 12742  0025A4  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 12743  0025A8  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 12744  0025AC  0012               	return	
 12745  0025AE                     __end_of___awdiv:
 12746                           	opt stack 0
 12747                           pclatu	equ	0xFFB
 12748                           pclath	equ	0xFFA
 12749                           tblptru	equ	0xFF8
 12750                           tblptrh	equ	0xFF7
 12751                           tblptrl	equ	0xFF6
 12752                           tablat	equ	0xFF5
 12753                           prodh	equ	0xFF4
 12754                           prodl	equ	0xFF3
 12755                           intcon	equ	0xFF2
 12756                           intcon2	equ	0xFF1
 12757                           intcon3	equ	0xFF0
 12758                           postinc0	equ	0xFEE
 12759                           fsr0h	equ	0xFEA
 12760                           fsr0l	equ	0xFE9
 12761                           wreg	equ	0xFE8
 12762                           fsr1h	equ	0xFE2
 12763                           fsr1l	equ	0xFE1
 12764                           indf2	equ	0xFDF
 12765                           postinc2	equ	0xFDE
 12766                           postdec2	equ	0xFDD
 12767                           fsr2h	equ	0xFDA
 12768                           fsr2l	equ	0xFD9
 12769                           status	equ	0xFD8
 12770                           pclatu	equ	0xFFB
 12771                           pclath	equ	0xFFA
 12772                           tblptru	equ	0xFF8
 12773                           tblptrh	equ	0xFF7
 12774                           tblptrl	equ	0xFF6
 12775                           tablat	equ	0xFF5
 12776                           prodh	equ	0xFF4
 12777                           prodl	equ	0xFF3
 12778                           intcon	equ	0xFF2
 12779                           intcon2	equ	0xFF1
 12780                           intcon3	equ	0xFF0
 12781                           postinc0	equ	0xFEE
 12782                           fsr0h	equ	0xFEA
 12783                           fsr0l	equ	0xFE9
 12784                           wreg	equ	0xFE8
 12785                           fsr1h	equ	0xFE2
 12786                           fsr1l	equ	0xFE1
 12787                           indf2	equ	0xFDF
 12788                           postinc2	equ	0xFDE
 12789                           postdec2	equ	0xFDD
 12790                           fsr2h	equ	0xFDA
 12791                           fsr2l	equ	0xFD9
 12792                           status	equ	0xFD8
 12793                           
 12794                           	psect	rparam
 12795  0000                     pclatu	equ	0xFFB
 12796                           pclath	equ	0xFFA
 12797                           tblptru	equ	0xFF8
 12798                           tblptrh	equ	0xFF7
 12799                           tblptrl	equ	0xFF6
 12800                           tablat	equ	0xFF5
 12801                           prodh	equ	0xFF4
 12802                           prodl	equ	0xFF3
 12803                           intcon	equ	0xFF2
 12804                           intcon2	equ	0xFF1
 12805                           intcon3	equ	0xFF0
 12806                           postinc0	equ	0xFEE
 12807                           fsr0h	equ	0xFEA
 12808                           fsr0l	equ	0xFE9
 12809                           wreg	equ	0xFE8
 12810                           fsr1h	equ	0xFE2
 12811                           fsr1l	equ	0xFE1
 12812                           indf2	equ	0xFDF
 12813                           postinc2	equ	0xFDE
 12814                           postdec2	equ	0xFDD
 12815                           fsr2h	equ	0xFDA
 12816                           fsr2l	equ	0xFD9
 12817                           status	equ	0xFD8
 12818                           
 12819                           	psect	temp
 12820  00007E                     btemp:
 12821                           	opt stack 0
 12822  00007E                     	ds	1
 12823  0000                     int$flags	set	btemp
 12824                           pclatu	equ	0xFFB
 12825                           pclath	equ	0xFFA
 12826                           tblptru	equ	0xFF8
 12827                           tblptrh	equ	0xFF7
 12828                           tblptrl	equ	0xFF6
 12829                           tablat	equ	0xFF5
 12830                           prodh	equ	0xFF4
 12831                           prodl	equ	0xFF3
 12832                           intcon	equ	0xFF2
 12833                           intcon2	equ	0xFF1
 12834                           intcon3	equ	0xFF0
 12835                           postinc0	equ	0xFEE
 12836                           fsr0h	equ	0xFEA
 12837                           fsr0l	equ	0xFE9
 12838                           wreg	equ	0xFE8
 12839                           fsr1h	equ	0xFE2
 12840                           fsr1l	equ	0xFE1
 12841                           indf2	equ	0xFDF
 12842                           postinc2	equ	0xFDE
 12843                           postdec2	equ	0xFDD
 12844                           fsr2h	equ	0xFDA
 12845                           fsr2l	equ	0xFD9
 12846                           status	equ	0xFD8


Data Sizes:
    Strings     485
    Constant    99
    Data        2
    BSS         76
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     42     112
    BANK1           256     12      12
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_24(CODE[15]), STR_23(CODE[16]), STR_22(CODE[28]), STR_21(CODE[25]), 
		 -> STR_20(CODE[24]), STR_19(CODE[23]), STR_18(CODE[18]), STR_17(CODE[23]), 
		 -> STR_16(CODE[10]), STR_15(CODE[18]), STR_14(CODE[18]), STR_13(CODE[18]), 
		 -> STR_12(CODE[18]), STR_11(CODE[18]), STR_10(CODE[18]), STR_9(CODE[18]), 
		 -> STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), 
		 -> STR_4(CODE[23]), STR_3(CODE[14]), STR_2(CODE[24]), STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_I2C_Master_RepeatedStart->i2_I2C_Master_Wait
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _servo_rotate2->___awdiv
    _servo_rotate1->___awdiv
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_lcdInst
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _I2C_Master_RepeatedStart->_I2C_Master_Wait
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _operationend->_printf
    _operation->_printf
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   38983
                                             10 BANK1      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    5685
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    7032
                                             40 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                     8     8      0    1347
                                             19 BANK0      8     8      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    5685
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    6925
                                             40 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    5685
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    6109
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    5490
                                             28 BANK0     12     4      8
                                              0 BANK1     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1064
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   0     0      0    1096
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1096
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   78727
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
                      _servo_rotate1
                      _servo_rotate2
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                   8     8      0     429
                                              3 COMRAM     8     8      0
                  i2_I2C_Master_Read
         i2_I2C_Master_RepeatedStart
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_RepeatedStart                           0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    2381
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate2                                       10     8      2    1726
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate1                                       10     8      2    1726
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2     801
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     291
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   70199
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58403
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   19114
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31682
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8491
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     625
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     684
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_RepeatedStart
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
       i2___wmul (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
   _servo_rotate1
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   _servo_rotate2
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_RepeatedStart
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C       C       7        4.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      70       5       87.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F9      34        0.0%
DATA                 0      0      F9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 07 17:56:03 2017

                       ___altoft@exp 003F                   i2_I2C_Master_Start 2D00  
                 i2_I2C_Master_Write 2CC6                        ___altoft@sign 0040  
                                 l34 2C5E                       ?_emergencystop 0001  
                       ___awdiv@sign 000C                  ___wmul@multiplicand 00D6  
                 i2___lwdiv@dividend 0001                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                        __CFG_OSC$HS 000000                         ___ftadd@exp1 0027  
                       ___ftadd@exp2 0026                         ___ftadd@sign 0025  
                                l374 2C26                                  l905 27C4  
                                l842 20B0                                  l895 261C  
                                _GIE 007F97                         __CFG_CPB$OFF 000000  
                                _PEN 007E2A                         __CFG_CPD$OFF 000000  
                                _SEN 007E28                                  _PSA 007EAB  
                ?i2_I2C_Master_Start 0001                  ?i2_I2C_Master_Write 0002  
                                _exp 0DDE                                  _log 147C  
                                _isr 0008                                  _pow 1306  
                       ___awmod@sign 00D9                                  prod 000FF3  
                                wreg 000FE8                         ?_bottle_time 0001  
                       __CFG_LVP$OFF 000000                         ___ftdiv@cntr 0012  
                       ___ftdiv@sign 0017                         __CFG_WDT$OFF 000000  
                               l5001 09C8                                 l5003 09CE  
                               l5011 0A68                                 l5005 0A1A  
                               l5013 0A80                                 l5015 0A88  
                               l5103 1C84                                 l5017 0A94  
                               l5113 1174                                 l5201 19E4  
                               l5131 1226                                 l5211 1A02  
                               l5203 19EA                                 l5125 11E8  
                               l3621 16D2                                 l5061 1ECA  
                               l5213 1A08                                 l5205 19F0  
                               l5143 12A2                                 l5119 11AA  
                               l5055 1EAA                                 l5071 1F14  
                               l5207 19F6                                 l5137 1264  
                               l3449 2B64                                 l3625 16E8  
                               l5049 1E8A                                 l5209 19FC  
                               l5217 1A0E                                 l3635 1746  
                               l5219 1A3C                                 l5149 12C2  
                               l5093 1C5A                                 l5069 1EEC  
                               l3905 2034                                 l5097 1C64  
                               l3907 2044                                 l3917 209E  
                               l3909 204A                                 l3871 22F4  
                               l4911 07C2                                 l4903 074A  
                               l3881 2324                                 l4833 2B8C  
                               l4913 07C8                                 l3883 232A  
                               l3891 235C                                 l3875 2304  
                               l4851 25D8                                 l4931 0848  
                               ?_exp 0049                                 l4861 260E  
                               l4853 25DE                                 l4917 07D0  
                               ?_log 0034                                 l3895 2370  
                               l3887 234E                                 l3879 2318  
                               l4871 278C                                 l4951 08A6  
                               l4935 0864                                 l4919 0808  
                               l4849 25CC                                 l4873 2792  
                               l4937 086A                                 l4891 06FE  
                               ?_isr 0001                                 l4877 27B6  
                               l4869 2780                                 l4973 0916  
                               l4949 08A0                                 l4965 08DC  
                               l4893 0710                                 l4991 098E  
                               l4967 08F4                                 l4887 06EA  
                               l4993 099A                                 l4985 0972  
                               l4977 094E                                 l4897 071A  
                               l4979 0958                                 l4997 09B4  
                               ?_pow 0052                   i2_read_colorsensor 1F48  
                               STR_1 FE67                                 STR_2 FE4F  
                               STR_3 FFE7                                 STR_4 FEC5  
                               STR_5 FEDC                                 STR_6 FFB7  
                               STR_7 FFA6                                 STR_8 FF05  
                               STR_9 FF29                                 _T0CS 007EAD  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u2920 2B62  
                               u3715 285E                                 _RCEN 007E2B  
                               u4807 2820                                 u4817 2828  
                               i2l34 2C72                                 u4757 1A4A  
                               u4767 2944                                 u4777 2980  
                               u4787 27EE                                 u4797 27F6  
                               _TMR0 000FD6                                 _RSEN 007E29  
   __end_of_I2C_Master_RepeatedStart 2CE0                                 _main 1974  
                       ___ftpack@arg 0001                                 _keys FDB7  
                       ___ftpack@exp 0004                                 _time 0096  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                 i2___lwdiv@quotient 0005                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 007E                                 exp@x 0049  
                               log@x 0034                                 isr@i 0073  
               ??i2_I2C_Master_Start 0002                 ??i2_I2C_Master_Write 0004  
                               pow@x 0052                                 pow@y 0055  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                  ?i2_read_colorsensor 0001  
                      __CFG_IESO$OFF 000000                      __end_ofi2_putch 2CB0  
                      __CFG_MCLRE$ON 000000                         ___ftmul@cntr 001A  
                       ___param_bank 000000                         ___ftmul@sign 001B  
                        i2_lcdNibble 298C                        ?_bottle_count 0001  
                       ___fttol@exp1 0036                                ??_exp 004C  
                              ??_log 0037                         ___fttol@lval 0032  
                              ??_isr 00C4                                ??_pow 0058  
                      _eskacap_count 00A7                     ?_I2C_Master_Init 00E1  
                   ?_I2C_Master_Read 0001                     ?_I2C_Master_Wait 0001  
                   ?_I2C_Master_Stop 0001                                ?_main 0001  
                              _ACKEN 007E2C                                _ACKDT 007E2D  
                    __end_of___awdiv 25AE                      __end_of___ftadd 1172  
                              STR_10 FF17                                STR_11 FF3B  
                              STR_12 FF4D                                STR_20 FE7F  
                              STR_13 FF71                                STR_21 FE36  
                              STR_14 FF5F                                STR_22 FE1A  
                              STR_23 FFC8                                STR_15 FF83  
                              STR_16 FFF5                                STR_24 FFD8  
                              STR_25 FF95                                STR_17 FEAE  
                              STR_18 FEF3                                STR_19 FE97  
                    __end_of___awmod 237A                      __end_of___ftdiv 1B40  
                    __end_of___ftneg 2C06                      __end_of___lldiv 20C2  
                    __end_of___ftmul 1974                      ___awdiv@divisor 0009  
                    __end_of___ftsub 2A5C                      __end_of___fttol 1880  
                              _T0PS0 007EA8                                _T0PS1 007EA9  
                              _T0PS2 007EAA                      __end_of___lwdiv 2626  
                    __end_of___lwmod 27CE                                i2l300 05A6  
                              i2l410 2174                                i2l404 2126  
                              i2l407 214A                                i2l319 06A0  
                              i2l271 026A                                i2l281 00E6  
                              i2l273 0052                                i2l282 00F0  
                              i2l274 0266                                i2l275 005C  
                              i2l284 01F8                                i2l382 23B4  
                              i2l712 22B8                                i2l288 042C  
                              i2l385 23DE                                i2l393 21DA  
                              i2l299 05AA                                i2l388 2408  
                              i2l396 21FE                                i2l750 10E4  
                              i2l735 100A                                i2l399 2228  
                              i2l905 2A12                                i2l770 1B0E  
                              i2l739 1034                                i2l932 146E  
                              i2l759 1100                                i2l927 133E  
                              i2l792 2BF8                      ___awdiv@counter 000B  
                              i2l895 2932                 ??i2_read_colorsensor 0004  
                              _PORTB 000F81                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                    ??_servo_rotate0 0003                      ??_servo_rotate1 0011  
                    ??_servo_rotate2 0011                        __CFG_PWRT$OFF 000000  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                  read_colorsensor@i 00DD                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                         ___lltoft@exp 0011  
                    __end_of_lcdInst 2CA4                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                              _nRBPU 007F8F                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 298C                       __CFG_EBTRB$OFF 000000  
                         i2isdigit@c 0003                        ___awtoft@sign 000C  
                    __end_of_dpowers FDD2                                _color 0076  
                              _floor 1B40                                _etime 00AD  
                              _ldexp 1DC2                                _frexp 240A  
                              _errno 00A3                      __end_of_isdigit 2B96  
                      ___ftpack@sign 0005                                _putch 2C84  
                              _stime 00B7                                pclath 000FFA  
                              tablat 000FF5                        _eskalbl_count 00AB  
                              pow@yi 005F                      __end_of_timeset FDE1  
                   __end_ofi2___wmul 2BE2                      __end_of_standby 2CD8  
                              status 000FD8                       __CFG_PBADEN$ON 000000  
                      i2printf@width 001E                          exp@exponent 004F  
                   __end_ofi2_printf 0DDE                   __size_ofi2___lwdiv 0052  
                 __size_ofi2___lwmod 0042                          ldexp@newexp 0037  
                    __initialization 2A5C                          log@exponent 0037  
                 __size_ofi2_lcdInst 000C                      ??_emergencystop 00EC  
                     ??_bottle_count 00EC                         __end_of_main 1A5A  
                       __end_of_keys FDC8                           i2printf@ap 0018  
                 __size_ofi2_isdigit 001E                               ??_main 010A  
                      ___fttol@sign1 0031                        __activetblptr 000002  
                  ?_I2C_Master_Start 0001                    ?_I2C_Master_Write 00D5  
                     servo_rotate0@i 0007                       servo_rotate0@j 0009  
                     servo_rotate1@i 0015                       servo_rotate1@j 0017  
                     servo_rotate2@i 0015                       servo_rotate2@j 0017  
                 ??_I2C_Master_Start 00D5                               _ADCON0 000FC2  
                             _ADCON1 000FC1                   ??_I2C_Master_Write 00D7  
                             ?_floor 0041                               ?_ldexp 0034  
                             ?_frexp 0001                     __end_of___altoft 269E  
                             _T08BIT 007EAE                     ___awdiv@dividend 0007  
                    i2lcdNibble@data 0002                     __end_of___awtoft 2AD2  
                             ?_putch 0001                     __end_of___ftpack 22D8  
                    i2lcdNibble@temp 0001                     __end_of___lltoft 28EA  
                             _INT0IE 007F94                               _INT0IF 007F91  
                             _INT1IE 007F83                               _INT1IF 007F80  
                             _INT2IE 007F84                               _INT2IF 007F81  
                             i2l1101 1C10                               i2l1090 0E94  
                             i2l3011 223A                               i2l1091 0FB8  
                             i2l3101 10B0                               i2l3023 2286  
                             i2l3015 2248                               i2l3025 22A4  
                             i2l3017 2252                               i2l3201 17B8  
                             i2l4001 2A08                               i2l3027 22AE  
                             i2l3019 2270                               i2l3115 111C  
                             i2l3107 10D2                               i2l3051 2648  
                             i2l3301 1AAA                               i2l3125 114C  
                             i2l3109 10DC                               i2l3141 18D0  
                             i2l3053 2654                               i2l3135 18A8  
                             i2l3231 1852                               i2l3223 182E  
                             i2l3321 1AE8                               i2l3073 1042  
                             i2l3233 1858                               i2l3067 1018  
                             i2l3155 1902                               i2l3219 181E  
                             i2l3403 1E20                               i2l4211 23CC  
                             i2l3165 192A                               i2l3181 24CA  
                             i2l3237 186E                               i2l3229 1846  
                             i2l4205 23A2                               i2l4301 0ABC  
                             i2l3351 2AAE                               i2l3095 1094  
                             i2l3159 1912                               i2l3191 2526  
                             i2l3415 1E44                               i2l4223 2102  
                             i2l4311 0AE0                               i2l3097 109E  
                             i2l3089 1072                               i2l3169 193A  
                             i2l3185 24FA                               i2l3249 2432  
                             i2l4305 0ACC                               i2l3099 10A8  
                             i2l3339 2A32                               i2l3419 1E50  
                             i2l3531 1498                               i2l4163 26D2  
                             i2l4235 213E                               i2l4411 0CFE  
                             i2l4331 0B76                               i2l4307 0ADA  
                             i2l3373 1B7C                               i2l4181 15B4  
                             i2l4173 26F6                               i2l4253 21CE  
                             i2l4229 211A                               i2l4405 0CE2  
                             i2l4325 0B6C                               i2l4333 0BAA  
                             i2l4317 0B0E                               i2l3295 1A82  
                             i2l4167 26DA                               i2l4247 21B6  
                             i2l4407 0CEA                               i2l4415 0D10  
                             i2l4351 0BFE                               i2l4327 0B70  
                             i2l4431 0DC4                               i2l3481 28A0  
                             i2l3385 1D30                               i2l3377 1B96  
                             i2l3369 1B6E                               i2l3553 0DF6  
                             i2l3537 14BA                               i2l4193 1684  
                             i2l4417 0D16                               i2l4425 0DA0  
                             i2l4345 0BE0                               i2l4601 0364  
                             i2l4513 009C                               i2l3387 1DAC  
                             i2l3395 1DDA                               i2l3803 13C8  
                             i2l4259 21F2                               i2l4419 0D5A  
                             i2l4427 0DB6                               i2l4363 0C2A  
                             i2l4275 1F7C                               i2l4603 037E  
                             i2l3565 0E66                               i2l4429 0DBC  
                             i2l4365 0C2E                               i2l4381 0C70  
                             i2l4349 0BFA                               i2l4621 0422  
                             i2l4613 03D6                               i2l4517 00A8  
                             i2l3479 2894                               i2l3559 0E2E  
                             i2l3807 13EA                               i2l4199 238A  
                             i2l4391 0CAE                               i2l4279 1F8C  
                             i2l4623 0428                               i2l4519 00B2  
                             i2l3841 256C                               i2l3833 254E  
                             i2l4393 0CB6                               i2l4289 1FD2  
                             i2l4633 0460                               i2l4561 020C  
                             i2l3851 258C                               i2l3843 2570  
                             i2l3827 253E                               i2l3587 0F8E  
                             i2l4387 0C8A                               i2l4379 0C5A  
                             i2l4715 0682                               i2l4651 04C0  
                             i2l4563 021A                               i2l4547 01AE  
                             u232_41 0FD6                               i2l4709 066C  
                             i2l4645 04A0                               i2l3839 2564  
                             i2l3855 2596                               i2l4399 0CCC  
                             i2l4719 068A                               i2l4663 0500  
                             i2l4639 0480                               i2l4591 030A  
                             i2l4583 02CA                               i2l4567 0228  
                             i2l3945 2BB6                               i2l4657 04E0  
                             i2l4585 02DA                               i2l4593 0324  
                             i2l3859 25A4                               i2l3795 1364  
                             i2l3963 2C3E                               i2l4675 0540  
                             i2l4683 0560                               i2l4595 0334  
                             i2l4587 02EA                               u233_41 0FEA  
                             i2l3789 134C                               i2l3973 2900  
                             i2l4669 0520                               i2l4597 0344  
                             i2l4589 02FA                               i2l3975 2908  
                             i2l4599 0354                               i2l3985 2928  
                             i2l3977 290C                               i2l3993 29E8  
                             i2l3995 29F0                               i2l3997 29F4  
                             u253_41 1890                               u262_41 179C  
                             u255_41 18B8                               u274_41 1A6A  
                             u276_41 1A92                               _TMR0IE 007F95  
                             _TMR0IF 007F92                            ??i2_putch 0003  
                             _TMR0ON 007EAF                               _SSPADD 000FC8  
                             _TRISC3 007CA3                               _TRISC4 007CA4  
                             _SSPBUF 000FC9                       __CFG_XINST$OFF 000000  
                  ?_read_colorsensor 0001          ?i2_I2C_Master_RepeatedStart 0001  
           _I2C_Master_RepeatedStart 2CD8                               ___ftge 249A  
                       _yopcap_count 00BD                               ___wmul 2B08  
                 ??_read_colorsensor 00D7                            ??___awdiv 000B  
                          ??___ftadd 0022                       __CFG_STVREN$ON 000000  
                          ??___awmod 00D8                            ??___ftdiv 000F  
                          ??___ftneg 0004                            ??___lldiv 00DC  
                          ??___ftmul 0013                            ??___ftsub 002E  
                          ??___fttol 002C                            ??___lwdiv 00D8  
                          ??___lwmod 00DF                        dec_to_hex@num 0063  
                             clear_0 2A7A                               clear_1 2A86  
                   ___awdiv@quotient 000D                      ___awmod@divisor 00D6  
                    ___awmod@counter 00D8                            ??_lcdInst 00D6  
                             _printf 06DC                               floor@i 0044  
                             floor@x 0041                ___ftmul@f3_as_product 0017  
                          ??_initLCD 00D7                            ??_isdigit 00D4  
                  __end_ofi2___lwdiv 293C                         __mediumconst FDB6  
                  __end_ofi2___lwmod 2A1C                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                          ??_standby 00D7                    __end_ofi2_lcdInst 2CBC  
                       _yoplbl_count 00C1                    __end_ofi2_isdigit 2C46  
                   __end_ofexp@coeff FDFF                 __size_of_bottle_time 0036  
                   __end_oflog@coeff FE1A                           __accesstop 0080  
            __end_of__initialization 2A8C                           ___altoft@c 0037  
                         ___ftadd@f1 001C                           ___ftadd@f2 001F  
                         ___ftge@ff1 0001                           ___ftge@ff2 0004  
                       eval_poly@res 0031                        ___rparam_used 000001  
                         ___ftdiv@f1 0009                           ___ftdiv@f2 000C  
                         ___ftdiv@f3 0013                           ___ftneg@f1 0001  
                         ___awtoft@c 0009                           ___ftmul@f1 000D  
                         ___ftmul@f2 0010                           ___ftsub@f1 0028  
                         ___ftsub@f2 002B                           ___fttol@f1 0028  
                 i2___lwmod@dividend 0008                       __pcstackCOMRAM 0001  
                       __pidataBANK0 2D08                           ___lltoft@c 0009  
                      __end_of_floor 1C1E                        __end_of_ldexp 1E88  
                      __end_of_frexp 249A                        __end_of_putch 2C94  
                        i2printf@idx 0017                          i2printf@val 001B  
                 __size_of_date_time 00D2                  servo_rotate0@degree 0001  
                servo_rotate1@degree 000F                  servo_rotate2@degree 000F  
                          ?i2___wmul 0001                   __size_of_lcdNibble 0060  
                        i2putch@data 0003                            ?i2_printf 000D  
        __size_of_I2C_ColorSens_Init 0066                              ??_floor 0044  
                            ??_ldexp 0039                              ??_frexp 0006  
               __end_of_bottle_count 1306                           _dec_to_hex 159A  
                            ??_putch 00D6                           __pbssBANK0 0080  
                 __size_of_eval_poly 00D2                    servo_rotate0@duty 0005  
                  servo_rotate1@duty 0013                    servo_rotate2@duty 0013  
                 __size_of_read_time 0068                              ?___ftge 0001  
                       ?i2_lcdNibble 0001                              ?___wmul 00D4  
                          ?___altoft 0037                            ?___awtoft 0009  
                          ?___ftpack 0001                              ?_printf 00E0  
                 __size_of_operation 00C0                            ?___lltoft 0009  
                         ??i2___wmul 0005                           ??i2_printf 0013  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7                    __end_of_date_time 1CF0  
                         _eska_count 00A5                              i2_putch 2CA4  
                  _bottle_count_disp 00EE          __size_ofi2_I2C_Master_Start 0008  
                  __end_of_lcdNibble 282E          __size_ofi2_I2C_Master_Write 000A  
                      ?_operationend 0001                              __Hparam 0000  
                            __Lparam 0000                      __size_of___ftge 0090  
                            ___awdiv 252A                              ___ftadd 0FC6  
                            ___awmod 22D8                              ___ftdiv 1A5A  
                            ___ftneg 2BE2                              ___lldiv 2006  
                    __size_of___wmul 0036                              ___ftmul 1880  
                            ___ftsub 2A1C                              ___fttol 178C  
                            ___lwdiv 25AE                              ___lwmod 276C  
                         _curr_state 00C3                           ??___altoft 003B  
                            __pcinit 2A5C                           ??___awtoft 000C  
                         ??___ftpack 0006                    __end_of_eval_poly 1DC2  
                            __ramtop 1000                              _lcdInst 2C94  
                         ??___lltoft 000D                              __ptext0 1974  
                            __ptext1 2CD0                              __ptext2 2C46  
                            __ptext3 1E88                              __ptext4 1696  
                            __ptext5 2CD8                              __ptext6 293C  
                            __ptext7 2C06                              __ptext8 1C1E  
                            __ptext9 2B3E                      __size_of_printf 03D6  
                     dec_to_hex@temp 006B                              _initLCD 293C  
                  __end_of_hexpowers FDDA                        i2_isdigit$824 0002  
                            _dpowers FDC8                         __size_of_exp 01E8  
                       __size_of_log 011E                              _isdigit 2B6C  
                       __size_of_isr 06D4          __size_ofi2_read_colorsensor 00BE  
                       __size_of_pow 0176                     ___awmod@dividend 00D4  
                  __end_of_read_time 2706             __size_of_I2C_Master_Init 0060  
           __size_of_I2C_Master_Read 002E             __size_of_I2C_Master_Wait 0014  
                         date_time@i 00EC             __size_of_I2C_Master_Stop 0008  
              __end_of_servo_rotate0 240A                __end_of_servo_rotate1 222A  
              __end_of_servo_rotate2 2176                              _timeset FDDA  
                            _standby 2CD0                          ?_dec_to_hex 0063  
                     __pintcode_body 0012                 end_of_initialization 2A8C  
                            exp@sign 0051           ??_I2C_Master_RepeatedStart 00D5  
                      __Lmediumconst FDB6                              int_func 0012  
                i2___wmul@multiplier 0001                    __end_of_operation 1F48  
                     _operation_disp 00B1                       _operation_time 00B3  
                     ??_operationend 00EC            __size_of_I2C_Master_Start 0008  
          __size_of_I2C_Master_Write 000A                      ___lldiv@divisor 00D8  
                            pow@sign 005E                      ___lldiv@counter 00E0  
                            printf@c 0109                              printf@f 00E0  
                   I2C_Master_Init@c 00E1                     I2C_Master_Read@a 00D5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                __end_of_emergencystop 2C28  
                          _PORTAbits 000F80                __size_of_bottle_count 0194  
          __size_of_read_colorsensor 00F6            read_colorsensor@color_low 00DB  
                  i2_I2C_Master_Read 2B96                    i2_I2C_Master_Wait 2C72  
                  i2_I2C_Master_Stop 2CF8                    i2___lwdiv@divisor 0003  
                          i2___lwdiv 28EA                            i2___lwmod 29DA  
                  i2___lwdiv@counter 0007                   ?i2_I2C_Master_Read 0001  
                 ?i2_I2C_Master_Wait 0001         i2read_colorsensor@color_comb 0006  
       i2read_colorsensor@color_high 0009                   ?i2_I2C_Master_Stop 0001  
                         _start_time 00B5                            i2_lcdInst 2CB0  
                        ___ftdiv@exp 0016                          printf@width 0107  
                ??i2_I2C_Master_Read 0002                            i2_isdigit 2C28  
                ??i2_I2C_Master_Wait 0001                  ??i2_I2C_Master_Stop 0002  
                        ___ftmul@exp 0016                         _bottle_count 1172  
                     __end_of___ftge 252A                       __end_of___wmul 2B3E  
                __size_of_dec_to_hex 00FC                 __size_ofi2_lcdNibble 004E  
                 _total_bottle_count 00B9                        i2lcdInst@data 0003  
                         floor@expon 0047                     i2___wmul@product 0005  
                     __end_of_printf 0AB2                         i2printf@flag 001D  
          __end_ofi2_I2C_Master_Read 2BBC            __end_ofi2_I2C_Master_Wait 2C84  
                       i2printf@prec 001A                  start_initialization 2A5C  
          __end_ofi2_I2C_Master_Stop 2D00                           eval_poly@d 002B  
                         eval_poly@n 002D                           eval_poly@x 0028  
                  __size_ofi2___wmul 0026                           ldexp@value 0034  
                        __end_of_exp 0FC6                          __end_of_log 159A  
                        __end_of_isr 06DC                          __end_of_pow 147C  
                          i2printf@c 0020                            i2printf@f 000D  
                      ??_bottle_time 00EC                i2I2C_Master_Read@temp 0003  
                         ?i2___lwdiv 0001                           ?i2___lwmod 0008  
                  __size_ofi2_printf 032C                           frexp@value 0001  
                  ??_I2C_Master_Init 00E5                    ??_I2C_Master_Read 00D5  
                  ??_I2C_Master_Wait 00D4                           ?i2_lcdInst 0001  
                  ??_I2C_Master_Stop 00D5           read_colorsensor@color_comb 00D9  
         read_colorsensor@color_high 00DC                           ?i2_isdigit 0001  
                           ??___ftge 0007                             ??___wmul 00D8  
                        __pdataBANK0 00EE                     __CFG_LPT1OSC$OFF 000000  
                           ??_printf 00E8                    __size_of___altoft 0078  
                         read_time@i 0004                    __size_of___awtoft 0038  
                  __size_of___ftpack 00AE                    __size_of___lltoft 005C  
         __end_of_I2C_ColorSens_Init 276C                          __pbssCOMRAM 0076  
               __end_of_operationend 2C5E                        __pcstackBANK0 00C4  
                      __pcstackBANK1 0100                    i2___lwmod@divisor 000A  
                  i2___lwmod@counter 000C                             ?i2_putch 0001  
                __end_of_bottle_time 2B08                     _I2C_Master_Start 2CE8  
                i2I2C_Master_Write@d 0002                     _I2C_Master_Write 2CBC  
                   _eskacaplbl_count 00A9                            _date_time 1C1E  
                   ___lwdiv@dividend 00D4                    __CFG_CCP2MX$PORTC 000000  
                          __pintcode 0008                        __pmediumconst FDB6  
                          _lcdNibble 27CE                      _yopcaplbl_count 00BF  
                           ?___awdiv 0007                             ?___ftadd 001C  
                           ?___awmod 00D4                             ?___ftdiv 0009  
                           ?___ftneg 0001                             ?___lldiv 00D4  
                           ?___ftmul 000D                             ?___ftsub 0028  
                           ?___fttol 0028                             ?___lwdiv 00D4  
                           ?___lwmod 00DB                             ?_lcdInst 0001  
                   dec_to_hex@hexnum 006F                             ?_initLCD 0001  
                           ?_isdigit 0001                     _read_colorsensor 1696  
         __size_ofi2_I2C_Master_Read 0026           __size_ofi2_I2C_Master_Wait 0012  
                          _eval_poly 1CF0           __size_ofi2_I2C_Master_Stop 0008  
                          _hexpowers FDD2                             ?_standby 0001  
                   ___lwdiv@quotient 00D9                       __size_of_floor 00DE  
                     __size_of_ldexp 00C6                       __size_of_frexp 0090  
                       ??_dec_to_hex 0065                          ??i2___lwdiv 0005  
                        ??i2___lwmod 000C                            _read_time 269E  
                     __size_of_putch 0010           __end_ofi2_I2C_Master_Start 2D08  
         __end_ofi2_I2C_Master_Write 2CD0                          ??i2_lcdInst 0003  
                     ___wmul@product 00D8                             _LATAbits 000F89  
                           _LATCbits 000F8B                             _LATDbits 000F8C  
                        ??i2_isdigit 0001                           ?_date_time 0001  
                           i2u308_40 0E6E                             i2u309_40 0E70  
                           i2u271_40 245A                             i2u264_40 17D6  
                           i2u271_48 245C                             i2u344_40 13B0  
                           i2u264_45 17CE                             i2u361_40 2BB4  
                           i2u284_40 1B88                            _operation 1E88  
                           i2u288_40 1DFA                             i2u288_48 1DFC  
                           i2u490_47 21D0                             i2u482_47 03E4  
                           i2u491_47 21F4                             i2u483_47 0692  
                           i2u492_47 23A8                             i2u484_47 29A4  
                           i2u493_47 23D2                             i2u485_47 29AC  
                           i2u486_47 29CC                             i2u487_47 29D4  
                           i2u488_47 211C                             i2u489_47 2140  
                   __CFG_WDTPS$32768 000000         ??i2_I2C_Master_RepeatedStart 0002  
                         ?_lcdNibble 0001                   __end_of_dec_to_hex 1696  
         __end_ofi2_read_colorsensor 2006                    ___wmul@multiplier 00D4  
                           i2___wmul 2BBC                        lcdNibble@data 00D5  
                         printf@flag 0106                        lcdNibble@temp 00D4  
                         printf@prec 0103                           ?_eval_poly 0028  
                           i2_printf 0AB2                          _bottle_time 2AD2  
                I2C_Master_Read@temp 00D6                            _yop_count 00BB  
                         ?_read_time 0001                   dec_to_hex@quotient 0071  
                        _bottlequeue 0080  __size_ofi2_I2C_Master_RepeatedStart 0008  
                   __size_ofi2_putch 000C                            frexp@eptr 0004  
                           __Hrparam 0000                  i2read_colorsensor@i 000A  
                         ?_operation 0001                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                          dec_to_hex@i 006D  
             __size_of_servo_rotate0 0090               __size_of_servo_rotate1 00B4  
             __size_of_servo_rotate2 00B4    __size_of_I2C_Master_RepeatedStart 0008  
                   __size_of___awdiv 0084                     __size_of___ftadd 01AC  
                   __size_of___awmod 00A2            ?_I2C_Master_RepeatedStart 0001  
                   __size_of___ftdiv 00E6                     __size_of___ftneg 0024  
              i2___wmul@multiplicand 0003                     __size_of___lldiv 00BC  
                           ___altoft 2626                     __size_of___ftmul 00F4  
                   __size_of___ftsub 0040                     __size_of___fttol 00F4  
                   __size_of___lwdiv 0078                     __size_of___lwmod 0062  
              __size_of_operationend 0018                             ___awtoft 2A9A  
                           ___ftpack 222A                             ___lltoft 288E  
                        _isdigit$824 00D5                   i2I2C_Master_Read@a 0002  
                   __size_of_lcdInst 0010                             _exp$1263 004C  
                    _I2C_Master_Init 282E                      _I2C_Master_Read 2B3E  
                   __size_of_initLCD 0050                      _I2C_Master_Wait 2C5E  
                    _I2C_Master_Stop 2CE0                             _isr$1359 0074  
                   __size_of_isdigit 002A                      ___lwdiv@divisor 00D6  
                    ___lwdiv@counter 00D8                             __ptext10 2AD2  
                           __ptext11 1172                             __ptext20 22D8  
                           __ptext12 06DC                             __ptext21 282E  
                           __ptext13 2C84                             __ptext30 2CF0  
                           __ptext22 2006                             __ptext14 2B6C  
                           __ptext31 0AB2                             __ptext23 2706  
                           __ptext15 2B08                             __ptext40 237A  
                           __ptext32 2CA4                             __ptext24 2CBC  
                           __ptext16 276C                             __ptext41 269E  
                           __ptext33 2C28                             __ptext25 2CE0  
                           __ptext17 25AE                             __ptext50 0DDE  
                           __ptext42 2CC6                             __ptext34 29DA  
                           __ptext26 2CE8                             __ptext18 2C94  
                           __ptext51 1DC2                             __ptext43 2CF8  
                           __ptext35 28EA                             __ptext27 2C5E  
                           __ptext19 27CE                             __ptext60 2A1C  
                           __ptext52 1B40                             __ptext44 2D00  
                           __ptext36 2CB0                             __ptext61 0FC6  
                           __ptext53 240A                             __ptext45 2B96  
                           __ptext37 298C                             __ptext29 1F48  
                           __ptext62 2BE2                             __ptext54 178C  
                           __ptext46 2C72                             __ptext38 20C2  
                           __ptext63 1A5A                             __ptext55 249A  
                           __ptext47 159A                             __ptext39 2176  
                           __ptext64 2A9A                             __ptext56 2626  
                           __ptext48 1306                             __ptext65 288E  
                           __ptext57 1CF0                             __ptext49 147C  
                           __ptext66 222A                             __ptext58 2BBC  
                           __ptext67 252A                             __ptext59 1880  
                           _end_time 00A1                     __size_of_standby 0008  
                           _pow$1261 0058                             _pow$1262 005B  
             __size_of_emergencystop 0022                        __size_of_main 00E6  
                           _nodedata 00AF                      _dec_to_hex$1260 0068  
                    _dec_to_hex$1259 0065                          ??_date_time 00EC  
                       _operationend 2C46                        ??i2_lcdNibble 0001  
                        ??_lcdNibble 00D4                             int$flags 007E  
                          printf@idx 0100                            printf@val 0104  
                           exp@coeff FDE1                             log@coeff FDFF  
                   _bottlequeue_head 009D                            putch@data 00D6  
           __end_of_I2C_Master_Start 2CF0                     _bottlequeue_tail 009F  
           __end_of_I2C_Master_Write 2CC6                           _INTCONbits 000FF2  
                        ??_eval_poly 002F                             isdigit@c 00D6  
                      _servo_rotate0 237A                        _servo_rotate1 2176  
                      _servo_rotate2 20C2                          ??_read_time 0004  
                           intlevel2 0000                     ___lwmod@dividend 00DB  
                   ___lldiv@dividend 00D4                   _I2C_ColorSens_Init 2706  
           __end_of_read_colorsensor 178C   __end_ofi2_I2C_Master_RepeatedStart 2CF8  
         i2_I2C_Master_RepeatedStart 2CF0                          ??_operation 00EC  
                ?_I2C_ColorSens_Init 0001                             printf@ap 0101  
            __end_of_I2C_Master_Init 288E              __end_of_I2C_Master_Read 2B6C  
            __end_of_I2C_Master_Wait 2C72              __end_of_I2C_Master_Stop 2CE8  
                        lcdInst@data 00D6                        _emergencystop 2C06  
                __end_ofi2_lcdNibble 29DA                     ___lldiv@quotient 00DC  
                  I2C_Master_Write@d 00D5                      ___lwmod@divisor 00DD  
        i2read_colorsensor@color_low 0008                      ___lwmod@counter 00DF  
               ??_I2C_ColorSens_Init 00D7                       ?_servo_rotate0 0001  
                     ?_servo_rotate1 000F                       ?_servo_rotate2 000F  

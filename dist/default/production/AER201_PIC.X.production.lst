

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 07 17:16:34 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 1.40
    80                           ; Generated 01/12/2016 GMT
    81                           ; 
    82                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4620 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataBANK0
   115  002588                     __pidataBANK0:
   116                           	opt stack 0
   117                           
   118                           ;initializer for _bottle_count_disp
   119  002588  FFFF               	dw	65535
   120                           
   121                           	psect	mediumconst
   122  00FDE4                     __pmediumconst:
   123                           	opt stack 0
   124  00FDE4  00                 	db	0
   125  00FDE5                     _keys:
   126                           	opt stack 0
   127  00FDE5  31                 	db	49
   128  00FDE6  32                 	db	50
   129  00FDE7  33                 	db	51
   130  00FDE8  41                 	db	65
   131  00FDE9  34                 	db	52
   132  00FDEA  35                 	db	53
   133  00FDEB  36                 	db	54
   134  00FDEC  42                 	db	66
   135  00FDED  37                 	db	55
   136  00FDEE  38                 	db	56
   137  00FDEF  39                 	db	57
   138  00FDF0  43                 	db	67
   139  00FDF1  2A                 	db	42
   140  00FDF2  30                 	db	48
   141  00FDF3  23                 	db	35
   142  00FDF4  44                 	db	68
   143  00FDF5  00                 	db	0
   144  00FDF6                     __end_of_keys:
   145                           	opt stack 0
   146  00FDF6                     _dpowers:
   147                           	opt stack 0
   148  00FDF6  0001               	dw	1
   149  00FDF8  000A               	dw	10
   150  00FDFA  0064               	dw	100
   151  00FDFC  03E8               	dw	1000
   152  00FDFE  2710               	dw	10000
   153  00FE00                     __end_of_dpowers:
   154                           	opt stack 0
   155  00FE00                     _hexpowers:
   156                           	opt stack 0
   157  00FE00  0001               	dw	1
   158  00FE02  0010               	dw	16
   159  00FE04  0100               	dw	256
   160  00FE06  1000               	dw	4096
   161  00FE08                     __end_of_hexpowers:
   162                           	opt stack 0
   163  00FE08                     _timeset:
   164                           	opt stack 0
   165  00FE08  50                 	db	80
   166  00FE09  35                 	db	53
   167  00FE0A  21                 	db	33
   168  00FE0B  08                 	db	8
   169  00FE0C  05                 	db	5
   170  00FE0D  02                 	db	2
   171  00FE0E  17                 	db	23
   172  00FE0F                     __end_of_timeset:
   173                           	opt stack 0
   174  00FE0F                     exp@coeff:
   175                           	opt stack 0
   176  00FE0F  00                 	db	0
   177  00FE10  80                 	db	128
   178  00FE11  3F                 	db	63
   179  00FE12  72                 	db	114
   180  00FE13  31                 	db	49
   181  00FE14  3F                 	db	63
   182  00FE15  FE                 	db	254
   183  00FE16  75                 	db	117
   184  00FE17  3E                 	db	62
   185  00FE18  58                 	db	88
   186  00FE19  63                 	db	99
   187  00FE1A  3D                 	db	61
   188  00FE1B  95                 	db	149
   189  00FE1C  1D                 	db	29
   190  00FE1D  3C                 	db	60
   191  00FE1E  C5                 	db	197
   192  00FE1F  AE                 	db	174
   193  00FE20  3A                 	db	58
   194  00FE21  79                 	db	121
   195  00FE22  21                 	db	33
   196  00FE23  39                 	db	57
   197  00FE24  94                 	db	148
   198  00FE25  80                 	db	128
   199  00FE26  37                 	db	55
   200  00FE27  93                 	db	147
   201  00FE28  A7                 	db	167
   202  00FE29  35                 	db	53
   203  00FE2A  56                 	db	86
   204  00FE2B  15                 	db	21
   205  00FE2C  34                 	db	52
   206  00FE2D                     __end_ofexp@coeff:
   207                           	opt stack 0
   208  00FE2D                     log@coeff:
   209                           	opt stack 0
   210  00FE2D  00                 	db	0
   211  00FE2E  00                 	db	0
   212  00FE2F  00                 	db	0
   213  00FE30  00                 	db	0
   214  00FE31  80                 	db	128
   215  00FE32  3F                 	db	63
   216  00FE33  F0                 	db	240
   217  00FE34  FF                 	db	255
   218  00FE35  BE                 	db	190
   219  00FE36  E2                 	db	226
   220  00FE37  A9                 	db	169
   221  00FE38  3E                 	db	62
   222  00FE39  83                 	db	131
   223  00FE3A  76                 	db	118
   224  00FE3B  BE                 	db	190
   225  00FE3C  AE                 	db	174
   226  00FE3D  2B                 	db	43
   227  00FE3E  3E                 	db	62
   228  00FE3F  3C                 	db	60
   229  00FE40  C3                 	db	195
   230  00FE41  BD                 	db	189
   231  00FE42  D2                 	db	210
   232  00FE43  13                 	db	19
   233  00FE44  3D                 	db	61
   234  00FE45  78                 	db	120
   235  00FE46  D3                 	db	211
   236  00FE47  BB                 	db	187
   237  00FE48                     __end_oflog@coeff:
   238                           	opt stack 0
   239  0000                     _TMR0	set	4054
   240  0000                     _ADCON0	set	4034
   241  0000                     _ADCON1	set	4033
   242  0000                     _INTCONbits	set	4082
   243  0000                     _LATA	set	3977
   244  0000                     _LATB	set	3978
   245  0000                     _LATC	set	3979
   246  0000                     _LATD	set	3980
   247  0000                     _LATDbits	set	3980
   248  0000                     _LATE	set	3981
   249  0000                     _PORTB	set	3969
   250  0000                     _SSPADD	set	4040
   251  0000                     _SSPBUF	set	4041
   252  0000                     _SSPCON1	set	4038
   253  0000                     _SSPCON2	set	4037
   254  0000                     _SSPSTAT	set	4039
   255  0000                     _TRISA	set	3986
   256  0000                     _TRISB	set	3987
   257  0000                     _TRISC	set	3988
   258  0000                     _TRISD	set	3989
   259  0000                     _TRISE	set	3990
   260  0000                     _ACKDT	set	32301
   261  0000                     _ACKEN	set	32300
   262  0000                     _INT1IE	set	32643
   263  0000                     _INT1IF	set	32640
   264  0000                     _PEN	set	32298
   265  0000                     _PSA	set	32427
   266  0000                     _RCEN	set	32299
   267  0000                     _RSEN	set	32297
   268  0000                     _SEN	set	32296
   269  0000                     _T08BIT	set	32430
   270  0000                     _T0CS	set	32429
   271  0000                     _T0PS0	set	32424
   272  0000                     _T0PS1	set	32425
   273  0000                     _T0PS2	set	32426
   274  0000                     _TMR0IE	set	32661
   275  0000                     _TMR0IF	set	32658
   276  0000                     _TMR0ON	set	32431
   277  0000                     _TRISC3	set	31907
   278  0000                     _TRISC4	set	31908
   279  0000                     _nRBPU	set	32655
   280  00FE48                     STR_21:
   281  00FE48  52                 	db	82	;'R'
   282  00FE49  75                 	db	117	;'u'
   283  00FE4A  6E                 	db	110	;'n'
   284  00FE4B  6E                 	db	110	;'n'
   285  00FE4C  69                 	db	105	;'i'
   286  00FE4D  6E                 	db	110	;'n'
   287  00FE4E  67                 	db	103	;'g'
   288  00FE4F  7E                 	db	126
   289  00FE50  7E                 	db	126
   290  00FE51  7E                 	db	126
   291  00FE52  20                 	db	32
   292  00FE53  20                 	db	32
   293  00FE54  20                 	db	32
   294  00FE55  20                 	db	32
   295  00FE56  20                 	db	32
   296  00FE57  20                 	db	32
   297  00FE58  20                 	db	32
   298  00FE59  20                 	db	32
   299  00FE5A  20                 	db	32
   300  00FE5B  20                 	db	32
   301  00FE5C  20                 	db	32
   302  00FE5D  20                 	db	32
   303  00FE5E  20                 	db	32
   304  00FE5F  20                 	db	32
   305  00FE60  00                 	db	0
   306  00FE61                     STR_20:
   307  00FE61  52                 	db	82	;'R'
   308  00FE62  75                 	db	117	;'u'
   309  00FE63  6E                 	db	110	;'n'
   310  00FE64  6E                 	db	110	;'n'
   311  00FE65  69                 	db	105	;'i'
   312  00FE66  6E                 	db	110	;'n'
   313  00FE67  67                 	db	103	;'g'
   314  00FE68  7E                 	db	126
   315  00FE69  7E                 	db	126
   316  00FE6A  20                 	db	32
   317  00FE6B  20                 	db	32
   318  00FE6C  20                 	db	32
   319  00FE6D  20                 	db	32
   320  00FE6E  20                 	db	32
   321  00FE6F  20                 	db	32
   322  00FE70  20                 	db	32
   323  00FE71  20                 	db	32
   324  00FE72  20                 	db	32
   325  00FE73  20                 	db	32
   326  00FE74  20                 	db	32
   327  00FE75  20                 	db	32
   328  00FE76  20                 	db	32
   329  00FE77  20                 	db	32
   330  00FE78  00                 	db	0
   331  00FE79                     STR_19:
   332  00FE79  52                 	db	82	;'R'
   333  00FE7A  75                 	db	117	;'u'
   334  00FE7B  6E                 	db	110	;'n'
   335  00FE7C  6E                 	db	110	;'n'
   336  00FE7D  69                 	db	105	;'i'
   337  00FE7E  6E                 	db	110	;'n'
   338  00FE7F  67                 	db	103	;'g'
   339  00FE80  7E                 	db	126
   340  00FE81  20                 	db	32
   341  00FE82  20                 	db	32
   342  00FE83  20                 	db	32
   343  00FE84  20                 	db	32
   344  00FE85  20                 	db	32
   345  00FE86  20                 	db	32
   346  00FE87  20                 	db	32
   347  00FE88  20                 	db	32
   348  00FE89  20                 	db	32
   349  00FE8A  20                 	db	32
   350  00FE8B  20                 	db	32
   351  00FE8C  20                 	db	32
   352  00FE8D  20                 	db	32
   353  00FE8E  20                 	db	32
   354  00FE8F  00                 	db	0
   355  00FE90                     STR_17:
   356  00FE90  54                 	db	84	;'T'
   357  00FE91  6F                 	db	111	;'o'
   358  00FE92  74                 	db	116	;'t'
   359  00FE93  61                 	db	97	;'a'
   360  00FE94  6C                 	db	108	;'l'
   361  00FE95  20                 	db	32
   362  00FE96  4F                 	db	79	;'O'
   363  00FE97  70                 	db	112	;'p'
   364  00FE98  65                 	db	101	;'e'
   365  00FE99  72                 	db	114	;'r'
   366  00FE9A  61                 	db	97	;'a'
   367  00FE9B  74                 	db	116	;'t'
   368  00FE9C  69                 	db	105	;'i'
   369  00FE9D  6F                 	db	111	;'o'
   370  00FE9E  6E                 	db	110	;'n'
   371  00FE9F  20                 	db	32
   372  00FEA0  20                 	db	32
   373  00FEA1  20                 	db	32
   374  00FEA2  20                 	db	32
   375  00FEA3  20                 	db	32
   376  00FEA4  20                 	db	32
   377  00FEA5  20                 	db	32
   378  00FEA6  00                 	db	0
   379  00FEA7                     STR_4:
   380  00FEA7  44                 	db	68	;'D'
   381  00FEA8  61                 	db	97	;'a'
   382  00FEA9  74                 	db	116	;'t'
   383  00FEAA  65                 	db	101	;'e'
   384  00FEAB  3A                 	db	58	;':'
   385  00FEAC  20                 	db	32
   386  00FEAD  25                 	db	37
   387  00FEAE  30                 	db	48	;'0'
   388  00FEAF  32                 	db	50	;'2'
   389  00FEB0  78                 	db	120	;'x'
   390  00FEB1  2F                 	db	47
   391  00FEB2  25                 	db	37
   392  00FEB3  30                 	db	48	;'0'
   393  00FEB4  32                 	db	50	;'2'
   394  00FEB5  78                 	db	120	;'x'
   395  00FEB6  2F                 	db	47
   396  00FEB7  25                 	db	37
   397  00FEB8  30                 	db	48	;'0'
   398  00FEB9  32                 	db	50	;'2'
   399  00FEBA  78                 	db	120	;'x'
   400  00FEBB  20                 	db	32
   401  00FEBC  20                 	db	32
   402  00FEBD  00                 	db	0
   403  00FEBE                     STR_5:
   404  00FEBE  54                 	db	84	;'T'
   405  00FEBF  69                 	db	105	;'i'
   406  00FEC0  6D                 	db	109	;'m'
   407  00FEC1  65                 	db	101	;'e'
   408  00FEC2  3A                 	db	58	;':'
   409  00FEC3  20                 	db	32
   410  00FEC4  25                 	db	37
   411  00FEC5  30                 	db	48	;'0'
   412  00FEC6  32                 	db	50	;'2'
   413  00FEC7  78                 	db	120	;'x'
   414  00FEC8  3A                 	db	58	;':'
   415  00FEC9  25                 	db	37
   416  00FECA  30                 	db	48	;'0'
   417  00FECB  32                 	db	50	;'2'
   418  00FECC  78                 	db	120	;'x'
   419  00FECD  3A                 	db	58	;':'
   420  00FECE  25                 	db	37
   421  00FECF  30                 	db	48	;'0'
   422  00FED0  32                 	db	50	;'2'
   423  00FED1  78                 	db	120	;'x'
   424  00FED2  20                 	db	32
   425  00FED3  20                 	db	32
   426  00FED4  00                 	db	0
   427  00FED5                     STR_3:
   428  00FED5  53                 	db	83	;'S'
   429  00FED6  65                 	db	101	;'e'
   430  00FED7  63                 	db	99	;'c'
   431  00FED8  3A                 	db	58	;':'
   432  00FED9  20                 	db	32
   433  00FEDA  25                 	db	37
   434  00FEDB  30                 	db	48	;'0'
   435  00FEDC  32                 	db	50	;'2'
   436  00FEDD  78                 	db	120	;'x'
   437  00FEDE  20                 	db	32
   438  00FEDF  25                 	db	37
   439  00FEE0  63                 	db	99	;'c'
   440  00FEE1  20                 	db	32
   441  00FEE2  25                 	db	37
   442  00FEE3  64                 	db	100	;'d'
   443  00FEE4  20                 	db	32
   444  00FEE5  20                 	db	32
   445  00FEE6  20                 	db	32
   446  00FEE7  20                 	db	32
   447  00FEE8  20                 	db	32
   448  00FEE9  00                 	db	0
   449  00FEEA                     STR_18:
   450  00FEEA  54                 	db	84	;'T'
   451  00FEEB  69                 	db	105	;'i'
   452  00FEEC  6D                 	db	109	;'m'
   453  00FEED  65                 	db	101	;'e'
   454  00FEEE  3A                 	db	58	;':'
   455  00FEEF  20                 	db	32
   456  00FEF0  25                 	db	37
   457  00FEF1  64                 	db	100	;'d'
   458  00FEF2  20                 	db	32
   459  00FEF3  73                 	db	115	;'s'
   460  00FEF4  20                 	db	32
   461  00FEF5  20                 	db	32
   462  00FEF6  20                 	db	32
   463  00FEF7  20                 	db	32
   464  00FEF8  20                 	db	32
   465  00FEF9  20                 	db	32
   466  00FEFA  20                 	db	32
   467  00FEFB  00                 	db	0
   468  00FEFC                     STR_24:
   469  00FEFC  30                 	db	48	;'0'
   470  00FEFD  31                 	db	49	;'1'
   471  00FEFE  32                 	db	50	;'2'
   472  00FEFF  33                 	db	51	;'3'
   473  00FF00  34                 	db	52	;'4'
   474  00FF01  35                 	db	53	;'5'
   475  00FF02  36                 	db	54	;'6'
   476  00FF03  37                 	db	55	;'7'
   477  00FF04  38                 	db	56	;'8'
   478  00FF05  39                 	db	57	;'9'
   479  00FF06  61                 	db	97	;'a'
   480  00FF07  62                 	db	98	;'b'
   481  00FF08  63                 	db	99	;'c'
   482  00FF09  64                 	db	100	;'d'
   483  00FF0A  65                 	db	101	;'e'
   484  00FF0B  66                 	db	102	;'f'
   485  00FF0C  00                 	db	0
   486  00FF0D                     STR_2:
   487  00FF0D  73                 	db	115	;'s'
   488  00FF0E  74                 	db	116	;'t'
   489  00FF0F  61                 	db	97	;'a'
   490  00FF10  6E                 	db	110	;'n'
   491  00FF11  64                 	db	100	;'d'
   492  00FF12  62                 	db	98	;'b'
   493  00FF13  79                 	db	121	;'y'
   494  00FF14  20                 	db	32
   495  00FF15  20                 	db	32
   496  00FF16  20                 	db	32
   497  00FF17  20                 	db	32
   498  00FF18  20                 	db	32
   499  00FF19  20                 	db	32
   500  00FF1A  20                 	db	32
   501  00FF1B  20                 	db	32
   502  00FF1C  20                 	db	32
   503  00FF1D  00                 	db	0
   504  00FF1E                     STR_7:
   505  00FF1E  54                 	db	84	;'T'
   506  00FF1F  6F                 	db	111	;'o'
   507  00FF20  74                 	db	116	;'t'
   508  00FF21  61                 	db	97	;'a'
   509  00FF22  6C                 	db	108	;'l'
   510  00FF23  3A                 	db	58	;':'
   511  00FF24  20                 	db	32
   512  00FF25  31                 	db	49	;'1'
   513  00FF26  30                 	db	48	;'0'
   514  00FF27  20                 	db	32
   515  00FF28  20                 	db	32
   516  00FF29  20                 	db	32
   517  00FF2A  20                 	db	32
   518  00FF2B  20                 	db	32
   519  00FF2C  20                 	db	32
   520  00FF2D  20                 	db	32
   521  00FF2E  00                 	db	0
   522  00FF2F                     STR_6:
   523  00FF2F  42                 	db	66	;'B'
   524  00FF30  6F                 	db	111	;'o'
   525  00FF31  74                 	db	116	;'t'
   526  00FF32  74                 	db	116	;'t'
   527  00FF33  6C                 	db	108	;'l'
   528  00FF34  65                 	db	101	;'e'
   529  00FF35  20                 	db	32
   530  00FF36  43                 	db	67	;'C'
   531  00FF37  6F                 	db	111	;'o'
   532  00FF38  75                 	db	117	;'u'
   533  00FF39  6E                 	db	110	;'n'
   534  00FF3A  74                 	db	116	;'t'
   535  00FF3B  20                 	db	32
   536  00FF3C  20                 	db	32
   537  00FF3D  20                 	db	32
   538  00FF3E  20                 	db	32
   539  00FF3F  00                 	db	0
   540  00FF40                     STR_11:
   541  00FF40  59                 	db	89	;'Y'
   542  00FF41  4F                 	db	79	;'O'
   543  00FF42  50                 	db	80	;'P'
   544  00FF43  2D                 	db	45
   545  00FF44  43                 	db	67	;'C'
   546  00FF45  41                 	db	65	;'A'
   547  00FF46  50                 	db	80	;'P'
   548  00FF47  2D                 	db	45
   549  00FF48  4C                 	db	76	;'L'
   550  00FF49  42                 	db	66	;'B'
   551  00FF4A  4C                 	db	76	;'L'
   552  00FF4B  3A                 	db	58	;':'
   553  00FF4C  20                 	db	32
   554  00FF4D  30                 	db	48	;'0'
   555  00FF4E  20                 	db	32
   556  00FF4F  20                 	db	32
   557  00FF50  00                 	db	0
   558  00FF51                     STR_10:
   559  00FF51  59                 	db	89	;'Y'
   560  00FF52  4F                 	db	79	;'O'
   561  00FF53  50                 	db	80	;'P'
   562  00FF54  2D                 	db	45
   563  00FF55  43                 	db	67	;'C'
   564  00FF56  41                 	db	65	;'A'
   565  00FF57  50                 	db	80	;'P'
   566  00FF58  2B                 	db	43
   567  00FF59  4C                 	db	76	;'L'
   568  00FF5A  42                 	db	66	;'B'
   569  00FF5B  4C                 	db	76	;'L'
   570  00FF5C  3A                 	db	58	;':'
   571  00FF5D  20                 	db	32
   572  00FF5E  31                 	db	49	;'1'
   573  00FF5F  20                 	db	32
   574  00FF60  20                 	db	32
   575  00FF61  00                 	db	0
   576  00FF62                     STR_9:
   577  00FF62  59                 	db	89	;'Y'
   578  00FF63  4F                 	db	79	;'O'
   579  00FF64  50                 	db	80	;'P'
   580  00FF65  2B                 	db	43
   581  00FF66  43                 	db	67	;'C'
   582  00FF67  41                 	db	65	;'A'
   583  00FF68  50                 	db	80	;'P'
   584  00FF69  2D                 	db	45
   585  00FF6A  4C                 	db	76	;'L'
   586  00FF6B  42                 	db	66	;'B'
   587  00FF6C  4C                 	db	76	;'L'
   588  00FF6D  3A                 	db	58	;':'
   589  00FF6E  20                 	db	32
   590  00FF6F  31                 	db	49	;'1'
   591  00FF70  20                 	db	32
   592  00FF71  20                 	db	32
   593  00FF72  00                 	db	0
   594  00FF73                     STR_8:
   595  00FF73  59                 	db	89	;'Y'
   596  00FF74  4F                 	db	79	;'O'
   597  00FF75  50                 	db	80	;'P'
   598  00FF76  2B                 	db	43
   599  00FF77  43                 	db	67	;'C'
   600  00FF78  41                 	db	65	;'A'
   601  00FF79  50                 	db	80	;'P'
   602  00FF7A  2B                 	db	43
   603  00FF7B  4C                 	db	76	;'L'
   604  00FF7C  42                 	db	66	;'B'
   605  00FF7D  4C                 	db	76	;'L'
   606  00FF7E  3A                 	db	58	;':'
   607  00FF7F  20                 	db	32
   608  00FF80  33                 	db	51	;'3'
   609  00FF81  20                 	db	32
   610  00FF82  20                 	db	32
   611  00FF83  00                 	db	0
   612  00FF84                     STR_12:
   613  00FF84  45                 	db	69	;'E'
   614  00FF85  53                 	db	83	;'S'
   615  00FF86  4B                 	db	75	;'K'
   616  00FF87  41                 	db	65	;'A'
   617  00FF88  2B                 	db	43
   618  00FF89  43                 	db	67	;'C'
   619  00FF8A  41                 	db	65	;'A'
   620  00FF8B  50                 	db	80	;'P'
   621  00FF8C  2B                 	db	43
   622  00FF8D  4C                 	db	76	;'L'
   623  00FF8E  42                 	db	66	;'B'
   624  00FF8F  4C                 	db	76	;'L'
   625  00FF90  3A                 	db	58	;':'
   626  00FF91  20                 	db	32
   627  00FF92  31                 	db	49	;'1'
   628  00FF93  20                 	db	32
   629  00FF94  00                 	db	0
   630  00FF95                     STR_14:
   631  00FF95  45                 	db	69	;'E'
   632  00FF96  53                 	db	83	;'S'
   633  00FF97  4B                 	db	75	;'K'
   634  00FF98  41                 	db	65	;'A'
   635  00FF99  2D                 	db	45
   636  00FF9A  43                 	db	67	;'C'
   637  00FF9B  41                 	db	65	;'A'
   638  00FF9C  50                 	db	80	;'P'
   639  00FF9D  2B                 	db	43
   640  00FF9E  4C                 	db	76	;'L'
   641  00FF9F  42                 	db	66	;'B'
   642  00FFA0  4C                 	db	76	;'L'
   643  00FFA1  3A                 	db	58	;':'
   644  00FFA2  20                 	db	32
   645  00FFA3  31                 	db	49	;'1'
   646  00FFA4  20                 	db	32
   647  00FFA5  00                 	db	0
   648  00FFA6                     STR_13:
   649  00FFA6  45                 	db	69	;'E'
   650  00FFA7  53                 	db	83	;'S'
   651  00FFA8  4B                 	db	75	;'K'
   652  00FFA9  41                 	db	65	;'A'
   653  00FFAA  2B                 	db	43
   654  00FFAB  43                 	db	67	;'C'
   655  00FFAC  41                 	db	65	;'A'
   656  00FFAD  50                 	db	80	;'P'
   657  00FFAE  2D                 	db	45
   658  00FFAF  4C                 	db	76	;'L'
   659  00FFB0  42                 	db	66	;'B'
   660  00FFB1  4C                 	db	76	;'L'
   661  00FFB2  3A                 	db	58	;':'
   662  00FFB3  20                 	db	32
   663  00FFB4  31                 	db	49	;'1'
   664  00FFB5  20                 	db	32
   665  00FFB6  00                 	db	0
   666  00FFB7                     STR_15:
   667  00FFB7  45                 	db	69	;'E'
   668  00FFB8  53                 	db	83	;'S'
   669  00FFB9  4B                 	db	75	;'K'
   670  00FFBA  41                 	db	65	;'A'
   671  00FFBB  2D                 	db	45
   672  00FFBC  43                 	db	67	;'C'
   673  00FFBD  41                 	db	65	;'A'
   674  00FFBE  50                 	db	80	;'P'
   675  00FFBF  2D                 	db	45
   676  00FFC0  4C                 	db	76	;'L'
   677  00FFC1  42                 	db	66	;'B'
   678  00FFC2  4C                 	db	76	;'L'
   679  00FFC3  3A                 	db	58	;':'
   680  00FFC4  20                 	db	32
   681  00FFC5  32                 	db	50	;'2'
   682  00FFC6  20                 	db	32
   683  00FFC7  00                 	db	0
   684  00FFC8                     STR_22:
   685  00FFC8  4F                 	db	79	;'O'
   686  00FFC9  70                 	db	112	;'p'
   687  00FFCA  65                 	db	101	;'e'
   688  00FFCB  72                 	db	114	;'r'
   689  00FFCC  61                 	db	97	;'a'
   690  00FFCD  74                 	db	116	;'t'
   691  00FFCE  69                 	db	105	;'i'
   692  00FFCF  6F                 	db	111	;'o'
   693  00FFD0  6E                 	db	110	;'n'
   694  00FFD1  20                 	db	32
   695  00FFD2  44                 	db	68	;'D'
   696  00FFD3  6F                 	db	111	;'o'
   697  00FFD4  6E                 	db	110	;'n'
   698  00FFD5  65                 	db	101	;'e'
   699  00FFD6  21                 	db	33
   700  00FFD7  00                 	db	0
   701  00FFD8                     STR_23:
   702  00FFD8  45                 	db	69	;'E'
   703  00FFD9  4D                 	db	77	;'M'
   704  00FFDA  45                 	db	69	;'E'
   705  00FFDB  52                 	db	82	;'R'
   706  00FFDC  47                 	db	71	;'G'
   707  00FFDD  45                 	db	69	;'E'
   708  00FFDE  4E                 	db	78	;'N'
   709  00FFDF  43                 	db	67	;'C'
   710  00FFE0  59                 	db	89	;'Y'
   711  00FFE1  20                 	db	32
   712  00FFE2  53                 	db	83	;'S'
   713  00FFE3  54                 	db	84	;'T'
   714  00FFE4  4F                 	db	79	;'O'
   715  00FFE5  50                 	db	80	;'P'
   716  00FFE6  00                 	db	0
   717  00FFE7                     STR_1:
   718  00FFE7  62                 	db	98	;'b'
   719  00FFE8  61                 	db	97	;'a'
   720  00FFE9  64                 	db	100	;'d'
   721  00FFEA  20                 	db	32
   722  00FFEB  69                 	db	105	;'i'
   723  00FFEC  6E                 	db	110	;'n'
   724  00FFED  74                 	db	116	;'t'
   725  00FFEE  65                 	db	101	;'e'
   726  00FFEF  72                 	db	114	;'r'
   727  00FFF0  72                 	db	114	;'r'
   728  00FFF1  75                 	db	117	;'u'
   729  00FFF2  70                 	db	112	;'p'
   730  00FFF3  74                 	db	116	;'t'
   731  00FFF4  00                 	db	0
   732  00FFF5                     STR_16:
   733  00FFF5  45                 	db	69	;'E'
   734  00FFF6  52                 	db	82	;'R'
   735  00FFF7  52                 	db	82	;'R'
   736  00FFF8  4F                 	db	79	;'O'
   737  00FFF9  52                 	db	82	;'R'
   738  00FFFA  3A                 	db	58	;':'
   739  00FFFB  20                 	db	32
   740  00FFFC  25                 	db	37
   741  00FFFD  64                 	db	100	;'d'
   742  00FFFE  00                 	db	0
   743                           
   744                           ; #config settings
   745  00FFFF  00                 	db	0	; dummy byte at the end
   746  0000                     
   747                           	psect	cinit
   748  0022FC                     __pcinit:
   749                           	opt stack 0
   750  0022FC                     start_initialization:
   751                           	opt stack 0
   752  0022FC                     __initialization:
   753                           	opt stack 0
   754                           
   755                           ; Initialize objects allocated to BANK0 (2 bytes)
   756                           ; load TBLPTR registers with __pidataBANK0
   757  0022FC  0E88               	movlw	low __pidataBANK0
   758  0022FE  6EF6               	movwf	tblptrl,c
   759  002300  0E25               	movlw	high __pidataBANK0
   760  002302  6EF7               	movwf	tblptrh,c
   761  002304  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   762  002306  6EF8               	movwf	tblptru,c
   763  002308  0009               	tblrd		*+	;fetch initializer
   764  00230A  CFF5 F0C8          	movff	tablat,__pdataBANK0
   765  00230E  0009               	tblrd		*+	;fetch initializer
   766  002310  CFF5 F0C9          	movff	tablat,__pdataBANK0+1
   767                           
   768                           ; Clear objects allocated to BANK0 (14 bytes)
   769  002314  EE00  F0BA         	lfsr	0,__pbssBANK0
   770  002318  0E0E               	movlw	14
   771  00231A                     clear_0:
   772  00231A  6AEE               	clrf	postinc0,c
   773  00231C  06E8               	decf	wreg,f,c
   774  00231E  E1FD               	bnz	clear_0
   775                           
   776                           ; Clear objects allocated to COMRAM (8 bytes)
   777  002320  EE00  F076         	lfsr	0,__pbssCOMRAM
   778  002324  0E08               	movlw	8
   779  002326                     clear_1:
   780  002326  6AEE               	clrf	postinc0,c
   781  002328  06E8               	decf	wreg,f,c
   782  00232A  E1FD               	bnz	clear_1
   783  00232C                     end_of_initialization:
   784                           	opt stack 0
   785  00232C                     __end_of__initialization:
   786                           	opt stack 0
   787  00232C  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   788  00232E  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   789  002330  0E00               	movlw	low (__Lmediumconst shr (0+16))
   790  002332  6EF8               	movwf	tblptru,c
   791  002334  0100               	movlb	0
   792  002336  EFCF  F008         	goto	_main	;jump to C main() function
   793                           tblptru	equ	0xFF8
   794                           tblptrh	equ	0xFF7
   795                           tblptrl	equ	0xFF6
   796                           tablat	equ	0xFF5
   797                           postinc0	equ	0xFEE
   798                           wreg	equ	0xFE8
   799                           
   800                           	psect	bssCOMRAM
   801  000076                     __pbssCOMRAM:
   802                           	opt stack 0
   803  000076                     _end_time:
   804                           	opt stack 0
   805  000076                     	ds	2
   806  000078                     _errno:
   807                           	opt stack 0
   808  000078                     	ds	2
   809  00007A                     _ptr:
   810                           	opt stack 0
   811  00007A                     	ds	2
   812  00007C                     _start_time:
   813                           	opt stack 0
   814  00007C                     	ds	2
   815                           tblptru	equ	0xFF8
   816                           tblptrh	equ	0xFF7
   817                           tblptrl	equ	0xFF6
   818                           tablat	equ	0xFF5
   819                           postinc0	equ	0xFEE
   820                           wreg	equ	0xFE8
   821                           
   822                           	psect	bssBANK0
   823  0000BA                     __pbssBANK0:
   824                           	opt stack 0
   825  0000BA                     _time:
   826                           	opt stack 0
   827  0000BA                     	ds	7
   828  0000C1                     _etime:
   829                           	opt stack 0
   830  0000C1                     	ds	2
   831  0000C3                     _operation_disp:
   832                           	opt stack 0
   833  0000C3                     	ds	2
   834  0000C5                     _stime:
   835                           	opt stack 0
   836  0000C5                     	ds	2
   837  0000C7                     _curr_state:
   838                           	opt stack 0
   839  0000C7                     	ds	1
   840                           tblptru	equ	0xFF8
   841                           tblptrh	equ	0xFF7
   842                           tblptrl	equ	0xFF6
   843                           tablat	equ	0xFF5
   844                           postinc0	equ	0xFEE
   845                           wreg	equ	0xFE8
   846                           
   847                           	psect	dataBANK0
   848  0000C8                     __pdataBANK0:
   849                           	opt stack 0
   850  0000C8                     _bottle_count_disp:
   851                           	opt stack 0
   852  0000C8                     	ds	2
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           
   860                           	psect	cstackBANK0
   861  000080                     __pcstackBANK0:
   862                           	opt stack 0
   863  000080                     ??_isr:
   864                           
   865                           ; 1 bytes @ 0x0
   866  000080                     	ds	16
   867  000090                     ??_isdigit:
   868  000090                     ??_I2C_Master_Wait:
   869  000090                     ?___wmul:
   870                           	opt stack 0
   871  000090                     ?___awmod:
   872                           	opt stack 0
   873  000090                     ?___lwdiv:
   874                           	opt stack 0
   875  000090                     ?___lldiv:
   876                           	opt stack 0
   877  000090                     lcdNibble@temp:
   878                           	opt stack 0
   879  000090                     ___wmul@multiplier:
   880                           	opt stack 0
   881  000090                     ___awmod@dividend:
   882                           	opt stack 0
   883  000090                     ___lwdiv@dividend:
   884                           	opt stack 0
   885  000090                     ___lldiv@dividend:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0x10
   889  000090                     	ds	1
   890  000091                     I2C_Master_Read@a:
   891                           	opt stack 0
   892  000091                     lcdNibble@data:
   893                           	opt stack 0
   894  000091                     _isdigit$584:
   895                           	opt stack 0
   896  000091                     I2C_Master_Write@d:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x11
   900  000091                     	ds	1
   901  000092                     I2C_Master_Read@temp:
   902                           	opt stack 0
   903  000092                     lcdInst@data:
   904                           	opt stack 0
   905  000092                     putch@data:
   906                           	opt stack 0
   907  000092                     isdigit@c:
   908                           	opt stack 0
   909  000092                     ___wmul@multiplicand:
   910                           	opt stack 0
   911  000092                     ___awmod@divisor:
   912                           	opt stack 0
   913  000092                     ___lwdiv@divisor:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x12
   917  000092                     	ds	1
   918  000093                     ??_initLCD:
   919  000093                     read_time@i:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x13
   923  000093                     	ds	1
   924  000094                     ___awmod@counter:
   925                           	opt stack 0
   926  000094                     ___wmul@product:
   927                           	opt stack 0
   928  000094                     ___lwdiv@quotient:
   929                           	opt stack 0
   930  000094                     ___lldiv@divisor:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x14
   934  000094                     	ds	1
   935  000095                     ___awmod@sign:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x15
   939  000095                     	ds	1
   940  000096                     ___lwdiv@counter:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x16
   944  000096                     	ds	1
   945  000097                     ?___lwmod:
   946                           	opt stack 0
   947  000097                     ___lwmod@dividend:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x17
   951  000097                     	ds	1
   952  000098                     ___lldiv@quotient:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x18
   956  000098                     	ds	1
   957  000099                     ___lwmod@divisor:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x19
   961  000099                     	ds	2
   962  00009B                     ___lwmod@counter:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x1B
   966  00009B                     	ds	1
   967  00009C                     ?_printf:
   968                           	opt stack 0
   969  00009C                     ___lldiv@counter:
   970                           	opt stack 0
   971  00009C                     printf@f:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x1C
   975  00009C                     	ds	1
   976  00009D                     I2C_Master_Init@c:
   977                           	opt stack 0
   978                           
   979                           ; 4 bytes @ 0x1D
   980  00009D                     	ds	4
   981  0000A1                     ??_I2C_Master_Init:
   982                           
   983                           ; 1 bytes @ 0x21
   984  0000A1                     	ds	3
   985  0000A4                     ??_printf:
   986                           
   987                           ; 1 bytes @ 0x24
   988  0000A4                     	ds	4
   989  0000A8                     printf@cp:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x28
   993  0000A8                     	ds	2
   994  0000AA                     printf@idx:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x2A
   998  0000AA                     	ds	1
   999  0000AB                     printf@len:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x2B
  1003  0000AB                     	ds	2
  1004  0000AD                     printf@prec:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x2D
  1008  0000AD                     	ds	1
  1009  0000AE                     printf@ap:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x2E
  1013  0000AE                     	ds	2
  1014  0000B0                     printf@val:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x30
  1018  0000B0                     	ds	2
  1019  0000B2                     printf@flag:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x32
  1023  0000B2                     	ds	1
  1024  0000B3                     printf@width:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x33
  1028  0000B3                     	ds	2
  1029  0000B5                     printf@c:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x35
  1033  0000B5                     	ds	1
  1034  0000B6                     ??_operation:
  1035  0000B6                     date_time@i:
  1036                           	opt stack 0
  1037  0000B6                     bottle_time@time:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0x36
  1041  0000B6                     	ds	2
  1042  0000B8                     ??_main:
  1043                           
  1044                           ; 1 bytes @ 0x38
  1045  0000B8                     	ds	2
  1046                           tblptru	equ	0xFF8
  1047                           tblptrh	equ	0xFF7
  1048                           tblptrl	equ	0xFF6
  1049                           tablat	equ	0xFF5
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           
  1053                           	psect	cstackCOMRAM
  1054  000001                     __pcstackCOMRAM:
  1055                           	opt stack 0
  1056  000001                     ??i2_I2C_Master_Wait:
  1057  000001                     ??i2_isdigit:
  1058  000001                     ?___awdiv:
  1059                           	opt stack 0
  1060  000001                     ?i2___wmul:
  1061                           	opt stack 0
  1062  000001                     ?i2___lwdiv:
  1063                           	opt stack 0
  1064  000001                     ?___ftpack:
  1065                           	opt stack 0
  1066  000001                     ?_frexp:
  1067                           	opt stack 0
  1068  000001                     ?___ftneg:
  1069                           	opt stack 0
  1070  000001                     i2lcdNibble@temp:
  1071                           	opt stack 0
  1072  000001                     ___awdiv@dividend:
  1073                           	opt stack 0
  1074  000001                     i2___wmul@multiplier:
  1075                           	opt stack 0
  1076  000001                     i2___lwdiv@dividend:
  1077                           	opt stack 0
  1078  000001                     ___ftpack@arg:
  1079                           	opt stack 0
  1080  000001                     ___ftge@ff1:
  1081                           	opt stack 0
  1082  000001                     ___ftneg@f1:
  1083                           	opt stack 0
  1084  000001                     frexp@value:
  1085                           	opt stack 0
  1086                           
  1087                           ; 3 bytes @ 0x0
  1088  000001                     	ds	1
  1089  000002                     i2I2C_Master_Read@a:
  1090                           	opt stack 0
  1091  000002                     i2lcdNibble@data:
  1092                           	opt stack 0
  1093  000002                     i2_isdigit$584:
  1094                           	opt stack 0
  1095  000002                     i2I2C_Master_Write@d:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x1
  1099  000002                     	ds	1
  1100  000003                     i2I2C_Master_Read@temp:
  1101                           	opt stack 0
  1102  000003                     i2lcdInst@data:
  1103                           	opt stack 0
  1104  000003                     i2putch@data:
  1105                           	opt stack 0
  1106  000003                     i2isdigit@c:
  1107                           	opt stack 0
  1108  000003                     ___awdiv@divisor:
  1109                           	opt stack 0
  1110  000003                     i2___wmul@multiplicand:
  1111                           	opt stack 0
  1112  000003                     i2___lwdiv@divisor:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x2
  1116  000003                     	ds	1
  1117  000004                     ___ftpack@exp:
  1118                           	opt stack 0
  1119  000004                     i2read_time@i:
  1120                           	opt stack 0
  1121  000004                     frexp@eptr:
  1122                           	opt stack 0
  1123  000004                     ___ftge@ff2:
  1124                           	opt stack 0
  1125                           
  1126                           ; 3 bytes @ 0x3
  1127  000004                     	ds	1
  1128  000005                     ___awdiv@counter:
  1129                           	opt stack 0
  1130  000005                     ___ftpack@sign:
  1131                           	opt stack 0
  1132  000005                     i2___wmul@product:
  1133                           	opt stack 0
  1134  000005                     i2___lwdiv@quotient:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x4
  1138  000005                     	ds	1
  1139  000006                     ??___ftpack:
  1140  000006                     ??_frexp:
  1141  000006                     ___awdiv@sign:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x5
  1145  000006                     	ds	1
  1146  000007                     ??___ftge:
  1147  000007                     i2___lwdiv@counter:
  1148                           	opt stack 0
  1149  000007                     ___awdiv@quotient:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x6
  1153  000007                     	ds	1
  1154  000008                     ?i2___lwmod:
  1155                           	opt stack 0
  1156  000008                     i2___lwmod@dividend:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x7
  1160  000008                     	ds	1
  1161  000009                     ?___ftdiv:
  1162                           	opt stack 0
  1163  000009                     ?___awtoft:
  1164                           	opt stack 0
  1165  000009                     ?___lltoft:
  1166                           	opt stack 0
  1167  000009                     ___awtoft@c:
  1168                           	opt stack 0
  1169  000009                     ___ftdiv@f1:
  1170                           	opt stack 0
  1171  000009                     ___lltoft@c:
  1172                           	opt stack 0
  1173                           
  1174                           ; 4 bytes @ 0x8
  1175  000009                     	ds	1
  1176  00000A                     i2___lwmod@divisor:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x9
  1180  00000A                     	ds	2
  1181  00000C                     ___awtoft@sign:
  1182                           	opt stack 0
  1183  00000C                     i2___lwmod@counter:
  1184                           	opt stack 0
  1185  00000C                     ___ftdiv@f2:
  1186                           	opt stack 0
  1187                           
  1188                           ; 3 bytes @ 0xB
  1189  00000C                     	ds	1
  1190  00000D                     ??___lltoft:
  1191  00000D                     ?i2_printf:
  1192                           	opt stack 0
  1193  00000D                     ?___ftmul:
  1194                           	opt stack 0
  1195  00000D                     i2printf@f:
  1196                           	opt stack 0
  1197  00000D                     ___ftmul@f1:
  1198                           	opt stack 0
  1199                           
  1200                           ; 3 bytes @ 0xC
  1201  00000D                     	ds	2
  1202  00000F                     ??___ftdiv:
  1203  00000F                     ??i2_printf:
  1204                           
  1205                           ; 1 bytes @ 0xE
  1206  00000F                     	ds	1
  1207  000010                     ___ftmul@f2:
  1208                           	opt stack 0
  1209                           
  1210                           ; 3 bytes @ 0xF
  1211  000010                     	ds	1
  1212  000011                     ___lltoft@exp:
  1213                           	opt stack 0
  1214                           
  1215                           ; 1 bytes @ 0x10
  1216  000011                     	ds	1
  1217  000012                     ___ftdiv@cntr:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x11
  1221  000012                     	ds	1
  1222  000013                     ??___ftmul:
  1223  000013                     i2printf@idx:
  1224                           	opt stack 0
  1225  000013                     ___ftdiv@f3:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0x12
  1229  000013                     	ds	1
  1230  000014                     i2printf@cp:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x13
  1234  000014                     	ds	2
  1235  000016                     ___ftdiv@exp:
  1236                           	opt stack 0
  1237  000016                     ___ftmul@exp:
  1238                           	opt stack 0
  1239  000016                     i2printf@len:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x15
  1243  000016                     	ds	1
  1244  000017                     ___ftdiv@sign:
  1245                           	opt stack 0
  1246  000017                     ___ftmul@f3_as_product:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x16
  1250  000017                     	ds	1
  1251  000018                     i2printf@prec:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x17
  1255  000018                     	ds	1
  1256  000019                     i2printf@ap:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x18
  1260  000019                     	ds	1
  1261  00001A                     ___ftmul@cntr:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x19
  1265  00001A                     	ds	1
  1266  00001B                     ___ftmul@sign:
  1267                           	opt stack 0
  1268  00001B                     i2printf@val:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x1A
  1272  00001B                     	ds	1
  1273  00001C                     ?___ftadd:
  1274                           	opt stack 0
  1275  00001C                     ___ftadd@f1:
  1276                           	opt stack 0
  1277                           
  1278                           ; 3 bytes @ 0x1B
  1279  00001C                     	ds	1
  1280  00001D                     i2printf@flag:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x1C
  1284  00001D                     	ds	1
  1285  00001E                     i2printf@width:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x1D
  1289  00001E                     	ds	1
  1290  00001F                     ___ftadd@f2:
  1291                           	opt stack 0
  1292                           
  1293                           ; 3 bytes @ 0x1E
  1294  00001F                     	ds	1
  1295  000020                     i2printf@c:
  1296                           	opt stack 0
  1297                           
  1298                           ; 1 bytes @ 0x1F
  1299  000020                     	ds	2
  1300  000022                     ??___ftadd:
  1301                           
  1302                           ; 1 bytes @ 0x21
  1303  000022                     	ds	3
  1304  000025                     ___ftadd@sign:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x24
  1308  000025                     	ds	1
  1309  000026                     ___ftadd@exp2:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x25
  1313  000026                     	ds	1
  1314  000027                     ___ftadd@exp1:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x26
  1318  000027                     	ds	1
  1319  000028                     ?___ftsub:
  1320                           	opt stack 0
  1321  000028                     ?_eval_poly:
  1322                           	opt stack 0
  1323  000028                     ?___fttol:
  1324                           	opt stack 0
  1325  000028                     ___ftsub@f1:
  1326                           	opt stack 0
  1327  000028                     ___fttol@f1:
  1328                           	opt stack 0
  1329  000028                     eval_poly@x:
  1330                           	opt stack 0
  1331                           
  1332                           ; 3 bytes @ 0x27
  1333  000028                     	ds	3
  1334  00002B                     eval_poly@d:
  1335                           	opt stack 0
  1336  00002B                     ___ftsub@f2:
  1337                           	opt stack 0
  1338                           
  1339                           ; 3 bytes @ 0x2A
  1340  00002B                     	ds	1
  1341  00002C                     ??___fttol:
  1342                           
  1343                           ; 1 bytes @ 0x2B
  1344  00002C                     	ds	1
  1345  00002D                     eval_poly@n:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x2C
  1349  00002D                     	ds	1
  1350  00002E                     
  1351                           ; 1 bytes @ 0x2D
  1352  00002E                     	ds	1
  1353  00002F                     ??_eval_poly:
  1354                           
  1355                           ; 1 bytes @ 0x2E
  1356  00002F                     	ds	2
  1357  000031                     ___fttol@sign1:
  1358                           	opt stack 0
  1359  000031                     eval_poly@res:
  1360                           	opt stack 0
  1361                           
  1362                           ; 3 bytes @ 0x30
  1363  000031                     	ds	1
  1364  000032                     ___fttol@lval:
  1365                           	opt stack 0
  1366                           
  1367                           ; 4 bytes @ 0x31
  1368  000032                     	ds	2
  1369  000034                     ?_log:
  1370                           	opt stack 0
  1371  000034                     ?_ldexp:
  1372                           	opt stack 0
  1373  000034                     ldexp@value:
  1374                           	opt stack 0
  1375  000034                     log@x:
  1376                           	opt stack 0
  1377                           
  1378                           ; 3 bytes @ 0x33
  1379  000034                     	ds	2
  1380  000036                     ___fttol@exp1:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x35
  1384  000036                     	ds	1
  1385  000037                     ?___altoft:
  1386                           	opt stack 0
  1387  000037                     ldexp@newexp:
  1388                           	opt stack 0
  1389  000037                     log@exponent:
  1390                           	opt stack 0
  1391  000037                     ___altoft@c:
  1392                           	opt stack 0
  1393                           
  1394                           ; 4 bytes @ 0x36
  1395  000037                     	ds	2
  1396  000039                     ??_ldexp:
  1397                           
  1398                           ; 1 bytes @ 0x38
  1399  000039                     	ds	2
  1400  00003B                     ??___altoft:
  1401                           
  1402                           ; 1 bytes @ 0x3A
  1403  00003B                     	ds	4
  1404  00003F                     ___altoft@exp:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x3E
  1408  00003F                     	ds	1
  1409  000040                     ___altoft@sign:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x3F
  1413  000040                     	ds	1
  1414  000041                     ?_floor:
  1415                           	opt stack 0
  1416  000041                     floor@x:
  1417                           	opt stack 0
  1418                           
  1419                           ; 3 bytes @ 0x40
  1420  000041                     	ds	3
  1421  000044                     floor@i:
  1422                           	opt stack 0
  1423                           
  1424                           ; 3 bytes @ 0x43
  1425  000044                     	ds	3
  1426  000047                     floor@expon:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x46
  1430  000047                     	ds	2
  1431  000049                     ?_exp:
  1432                           	opt stack 0
  1433  000049                     exp@x:
  1434                           	opt stack 0
  1435                           
  1436                           ; 3 bytes @ 0x48
  1437  000049                     	ds	3
  1438  00004C                     _exp$1023:
  1439                           	opt stack 0
  1440                           
  1441                           ; 3 bytes @ 0x4B
  1442  00004C                     	ds	3
  1443  00004F                     exp@exponent:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x4E
  1447  00004F                     	ds	2
  1448  000051                     exp@sign:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x50
  1452  000051                     	ds	1
  1453  000052                     ?_pow:
  1454                           	opt stack 0
  1455  000052                     pow@x:
  1456                           	opt stack 0
  1457                           
  1458                           ; 3 bytes @ 0x51
  1459  000052                     	ds	3
  1460  000055                     pow@y:
  1461                           	opt stack 0
  1462                           
  1463                           ; 3 bytes @ 0x54
  1464  000055                     	ds	3
  1465  000058                     _pow$1021:
  1466                           	opt stack 0
  1467                           
  1468                           ; 3 bytes @ 0x57
  1469  000058                     	ds	3
  1470  00005B                     _pow$1022:
  1471                           	opt stack 0
  1472                           
  1473                           ; 3 bytes @ 0x5A
  1474  00005B                     	ds	3
  1475  00005E                     pow@sign:
  1476                           	opt stack 0
  1477                           
  1478                           ; 1 bytes @ 0x5D
  1479  00005E                     	ds	1
  1480  00005F                     pow@yi:
  1481                           	opt stack 0
  1482                           
  1483                           ; 4 bytes @ 0x5E
  1484  00005F                     	ds	4
  1485  000063                     ?_dec_to_hex:
  1486                           	opt stack 0
  1487  000063                     dec_to_hex@num:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x62
  1491  000063                     	ds	2
  1492  000065                     _dec_to_hex$1019:
  1493                           	opt stack 0
  1494                           
  1495                           ; 3 bytes @ 0x64
  1496  000065                     	ds	3
  1497  000068                     _dec_to_hex$1020:
  1498                           	opt stack 0
  1499                           
  1500                           ; 3 bytes @ 0x67
  1501  000068                     	ds	3
  1502  00006B                     dec_to_hex@temp:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x6A
  1506  00006B                     	ds	2
  1507  00006D                     dec_to_hex@i:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x6C
  1511  00006D                     	ds	2
  1512  00006F                     dec_to_hex@hexnum:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x6E
  1516  00006F                     	ds	2
  1517  000071                     dec_to_hex@quotient:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x70
  1521  000071                     	ds	2
  1522  000073                     _isr$1112:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x72
  1526  000073                     	ds	2
  1527  000075                     isr@i:
  1528                           	opt stack 0
  1529                           
  1530                           ; 1 bytes @ 0x74
  1531  000075                     	ds	1
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           postinc0	equ	0xFEE
  1537                           wreg	equ	0xFE8
  1538                           
  1539 ;;
  1540 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1541 ;;
  1542 ;; *************** function _main *****************
  1543 ;; Defined at:
  1544 ;;		line 56 in file "main.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;		None
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;		None
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      void 
  1551 ;; Registers used:
  1552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1560 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1562 ;;Total ram usage:        2 bytes
  1563 ;; Hardware stack levels required when called:   11
  1564 ;; This function calls:
  1565 ;;		_I2C_Master_Init
  1566 ;;		_bottle_count
  1567 ;;		_bottle_time
  1568 ;;		_date_time
  1569 ;;		_emergencystop
  1570 ;;		_initLCD
  1571 ;;		_operation
  1572 ;;		_operationend
  1573 ;;		_standby
  1574 ;; This function is called by:
  1575 ;;		Startup code after reset
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text0
  1580  00119E                     __ptext0:
  1581                           	opt stack 0
  1582  00119E                     _main:
  1583                           	opt stack 20
  1584                           
  1585                           ;main.c: 60: TRISA = 0xFF;
  1586                           
  1587                           ;incstack = 0
  1588  00119E  6892               	setf	3986,c	;volatile
  1589                           
  1590                           ;main.c: 61: TRISB = 0xFF;
  1591  0011A0  6893               	setf	3987,c	;volatile
  1592                           
  1593                           ;main.c: 62: TRISC = 0x00;
  1594  0011A2  0E00               	movlw	0
  1595  0011A4  6E94               	movwf	3988,c	;volatile
  1596                           
  1597                           ;main.c: 63: TRISD = 0x00;
  1598  0011A6  0E00               	movlw	0
  1599  0011A8  6E95               	movwf	3989,c	;volatile
  1600                           
  1601                           ;main.c: 64: TRISE = 0x00;
  1602  0011AA  0E00               	movlw	0
  1603  0011AC  6E96               	movwf	3990,c	;volatile
  1604                           
  1605                           ;main.c: 66: LATA = 0x00;
  1606  0011AE  0E00               	movlw	0
  1607  0011B0  6E89               	movwf	3977,c	;volatile
  1608                           
  1609                           ;main.c: 67: LATB = 0x00;
  1610  0011B2  0E00               	movlw	0
  1611  0011B4  6E8A               	movwf	3978,c	;volatile
  1612                           
  1613                           ;main.c: 68: LATC = 0x00;
  1614  0011B6  0E00               	movlw	0
  1615  0011B8  6E8B               	movwf	3979,c	;volatile
  1616                           
  1617                           ;main.c: 69: LATD = 0x00;
  1618  0011BA  0E00               	movlw	0
  1619  0011BC  6E8C               	movwf	3980,c	;volatile
  1620                           
  1621                           ;main.c: 70: LATE = 0x00;
  1622  0011BE  0E00               	movlw	0
  1623  0011C0  6E8D               	movwf	3981,c	;volatile
  1624                           
  1625                           ;main.c: 72: ADCON0 = 0x00;
  1626  0011C2  0E00               	movlw	0
  1627  0011C4  6EC2               	movwf	4034,c	;volatile
  1628                           
  1629                           ;main.c: 73: ADCON1 = 0xFF;
  1630  0011C6  68C1               	setf	4033,c	;volatile
  1631                           
  1632                           ;main.c: 75: INT1IE = 1;
  1633  0011C8  86F0               	bsf	intcon3,3,c	;volatile
  1634                           
  1635                           ;main.c: 77: nRBPU = 0;
  1636  0011CA  9EF1               	bcf	intcon2,7,c	;volatile
  1637                           
  1638                           ;main.c: 79: initLCD();
  1639  0011CC  ECC9  F010         	call	_initLCD	;wreg free
  1640                           
  1641                           ;main.c: 80: I2C_Master_Init(10000);
  1642  0011D0  0E10               	movlw	16
  1643  0011D2  0100               	movlb	0	; () banked
  1644  0011D4  6F9D               	movwf	I2C_Master_Init@c& (0+255),b
  1645  0011D6  0E27               	movlw	39
  1646  0011D8  6F9E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1647  0011DA  0E00               	movlw	0
  1648  0011DC  6F9F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1649  0011DE  0E00               	movlw	0
  1650  0011E0  6FA0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1651  0011E2  EC42  F010         	call	_I2C_Master_Init	;wreg free
  1652                           
  1653                           ;main.c: 82: TMR0 = 0;
  1654  0011E6  0E00               	movlw	0
  1655  0011E8  6ED7               	movwf	4055,c	;volatile
  1656  0011EA  0E00               	movlw	0
  1657  0011EC  6ED6               	movwf	4054,c	;volatile
  1658                           
  1659                           ;main.c: 83: T08BIT = 0;
  1660  0011EE  9CD5               	bcf	4053,6,c	;volatile
  1661                           
  1662                           ;main.c: 84: T0CS = 0;
  1663  0011F0  9AD5               	bcf	4053,5,c	;volatile
  1664                           
  1665                           ;main.c: 85: PSA = 0;
  1666  0011F2  96D5               	bcf	4053,3,c	;volatile
  1667                           
  1668                           ;main.c: 86: T0PS2 = 1;
  1669  0011F4  84D5               	bsf	4053,2,c	;volatile
  1670                           
  1671                           ;main.c: 87: T0PS1 = 1;
  1672  0011F6  82D5               	bsf	4053,1,c	;volatile
  1673                           
  1674                           ;main.c: 88: T0PS0 = 1;
  1675  0011F8  80D5               	bsf	4053,0,c	;volatile
  1676                           
  1677                           ;main.c: 92: (INTCONbits.GIE = 1);
  1678  0011FA  8EF2               	bsf	intcon,7,c	;volatile
  1679                           
  1680                           ;main.c: 94: curr_state = STANDBY;
  1681  0011FC  0E00               	movlw	0
  1682  0011FE  0100               	movlb	0	; () banked
  1683  001200  6FC7               	movwf	_curr_state& (0+255),b
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;main.c: 97: switch(curr_state){
  1687                           
  1688                           ;main.c: 96: while(1){
  1689  001202  D02A               	goto	l4032
  1690  001204                     l4016:
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;main.c: 99: standby();
  1694  001204  EC18  F011         	call	_standby	;wreg free
  1695                           
  1696                           ;main.c: 100: break;
  1697  001208  D03E               	goto	l4034
  1698  00120A                     l4018:
  1699                           
  1700                           ;main.c: 102: emergencystop();
  1701  00120A  EC62  F012         	call	_emergencystop	;wreg free
  1702                           
  1703                           ;main.c: 103: break;
  1704  00120E  D03B               	goto	l4034
  1705  001210                     l4020:
  1706                           
  1707                           ;main.c: 105: operation();
  1708  001210  ECDF  F00D         	call	_operation	;wreg free
  1709                           
  1710                           ;main.c: 106: break;
  1711  001214  D038               	goto	l4034
  1712  001216                     l4022:
  1713                           
  1714                           ;main.c: 108: operationend();
  1715  001216  EC6F  F012         	call	_operationend	;wreg free
  1716                           
  1717                           ;main.c: 109: break;
  1718  00121A  D035               	goto	l4034
  1719  00121C                     l4024:
  1720                           
  1721                           ;main.c: 111: date_time();
  1722  00121C  ECA6  F00B         	call	_date_time	;wreg free
  1723                           
  1724                           ;main.c: 112: break;
  1725  001220  D032               	goto	l4034
  1726  001222                     l4026:
  1727                           
  1728                           ;main.c: 114: bottle_count();
  1729  001222  EC9C  F007         	call	_bottle_count	;wreg free
  1730                           
  1731                           ;main.c: 115: break;
  1732  001226  D02F               	goto	l4034
  1733  001228                     l4028:
  1734                           
  1735                           ;main.c: 117: bottle_time(etime - stime);
  1736  001228  C0C5  F0B8         	movff	_stime,??_main
  1737  00122C  C0C6  F0B9         	movff	_stime+1,??_main+1
  1738  001230  0100               	movlb	0	; () banked
  1739  001232  1FB8               	comf	??_main& (0+255),f,b
  1740  001234  1FB9               	comf	(??_main+1)& (0+255),f,b
  1741  001236  4BB8               	infsnz	??_main& (0+255),f,b
  1742  001238  2BB9               	incf	(??_main+1)& (0+255),f,b
  1743  00123A  0100               	movlb	0	; () banked
  1744  00123C  51C1               	movf	_etime& (0+255),w,b
  1745  00123E  0100               	movlb	0	; () banked
  1746  001240  25B8               	addwf	??_main& (0+255),w,b
  1747  001242  0100               	movlb	0	; () banked
  1748  001244  6FB6               	movwf	bottle_time@time& (0+255),b
  1749  001246  0100               	movlb	0	; () banked
  1750  001248  51C2               	movf	(_etime+1)& (0+255),w,b
  1751  00124A  0100               	movlb	0	; () banked
  1752  00124C  21B9               	addwfc	(??_main+1)& (0+255),w,b
  1753  00124E  0100               	movlb	0	; () banked
  1754  001250  6FB7               	movwf	(bottle_time@time+1)& (0+255),b
  1755  001252  ECB9  F011         	call	_bottle_time	;wreg free
  1756                           
  1757                           ;main.c: 119: }
  1758                           
  1759                           ;main.c: 118: break;
  1760  001256  D017               	goto	l4034
  1761  001258                     l4032:
  1762  001258  0100               	movlb	0	; () banked
  1763  00125A  51C7               	movf	_curr_state& (0+255),w,b
  1764                           
  1765                           ; Switch size 1, requested type "space"
  1766                           ; Number of cases is 7, Range of values is 0 to 6
  1767                           ; switch strategies available:
  1768                           ; Name         Instructions Cycles
  1769                           ; simple_byte           22    12 (average)
  1770                           ;	Chosen strategy is simple_byte
  1771  00125C  0A00               	xorlw	0	; case 0
  1772  00125E  B4D8               	btfsc	status,2,c
  1773  001260  D7D1               	goto	l4016
  1774  001262  0A01               	xorlw	1	; case 1
  1775  001264  B4D8               	btfsc	status,2,c
  1776  001266  D7D1               	goto	l4018
  1777  001268  0A03               	xorlw	3	; case 2
  1778  00126A  B4D8               	btfsc	status,2,c
  1779  00126C  D7D1               	goto	l4020
  1780  00126E  0A01               	xorlw	1	; case 3
  1781  001270  B4D8               	btfsc	status,2,c
  1782  001272  D7D1               	goto	l4022
  1783  001274  0A07               	xorlw	7	; case 4
  1784  001276  B4D8               	btfsc	status,2,c
  1785  001278  D7D1               	goto	l4024
  1786  00127A  0A01               	xorlw	1	; case 5
  1787  00127C  B4D8               	btfsc	status,2,c
  1788  00127E  D7D1               	goto	l4026
  1789  001280  0A03               	xorlw	3	; case 6
  1790  001282  B4D8               	btfsc	status,2,c
  1791  001284  D7D1               	goto	l4028
  1792  001286                     l4034:
  1793                           
  1794                           ;main.c: 120: _delay((unsigned long)((200)*(10000000/4000.0)));
  1795  001286  0E03               	movlw	3
  1796  001288  0100               	movlb	0	; () banked
  1797  00128A  6FB9               	movwf	(??_main+1)& (0+255),b
  1798  00128C  0E8A               	movlw	138
  1799  00128E  0100               	movlb	0	; () banked
  1800  001290  6FB8               	movwf	??_main& (0+255),b
  1801  001292  0E55               	movlw	85
  1802  001294                     u3847:
  1803  001294  2EE8               	decfsz	wreg,f,c
  1804  001296  D7FE               	bra	u3847
  1805  001298  2FB8               	decfsz	??_main& (0+255),f,b
  1806  00129A  D7FC               	bra	u3847
  1807  00129C  2FB9               	decfsz	(??_main+1)& (0+255),f,b
  1808  00129E  D7FA               	bra	u3847
  1809  0012A0  D000               	nop2	
  1810  0012A2  D7DA               	goto	l4032
  1811  0012A4                     __end_of_main:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           intcon	equ	0xFF2
  1818                           intcon2	equ	0xFF1
  1819                           intcon3	equ	0xFF0
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _standby *****************
  1825 ;; Defined at:
  1826 ;;		line 196 in file "main.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:   10
  1847 ;; This function calls:
  1848 ;;		_lcdInst
  1849 ;;		_printf
  1850 ;;		_read_time
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text1
  1857  002230                     __ptext1:
  1858                           	opt stack 0
  1859  002230                     _standby:
  1860                           	opt stack 20
  1861                           
  1862                           ;main.c: 197: lcdInst(0b10000000);
  1863                           
  1864                           ;incstack = 0
  1865  002230  0E80               	movlw	128
  1866  002232  EC96  F012         	call	_lcdInst
  1867                           
  1868                           ;main.c: 198: printf("standby         ");
  1869  002236  0E0D               	movlw	low STR_2
  1870  002238  0100               	movlb	0	; () banked
  1871  00223A  6F9C               	movwf	printf@f& (0+255),b
  1872  00223C  0EFF               	movlw	high STR_2
  1873  00223E  0100               	movlb	0	; () banked
  1874  002240  6F9D               	movwf	(printf@f+1)& (0+255),b
  1875  002242  EC09  F000         	call	_printf	;wreg free
  1876                           
  1877                           ;main.c: 199: lcdInst(0b11000000);
  1878  002246  0EC0               	movlw	192
  1879  002248  EC96  F012         	call	_lcdInst
  1880                           
  1881                           ;main.c: 200: read_time();
  1882  00224C  EC72  F00F         	call	_read_time	;wreg free
  1883                           
  1884                           ;main.c: 201: printf("Sec: %02x %c %d     ", time[0], time[0], time[0]);
  1885  002250  0ED5               	movlw	low STR_3
  1886  002252  0100               	movlb	0	; () banked
  1887  002254  6F9C               	movwf	printf@f& (0+255),b
  1888  002256  0EFE               	movlw	high STR_3
  1889  002258  0100               	movlb	0	; () banked
  1890  00225A  6F9D               	movwf	(printf@f+1)& (0+255),b
  1891  00225C  C0BA  F09E         	movff	_time,?_printf+2
  1892  002260  0100               	movlb	0	; () banked
  1893  002262  6B9F               	clrf	(?_printf+3)& (0+255),b
  1894  002264  C0BA  F0A0         	movff	_time,?_printf+4
  1895  002268  0100               	movlb	0	; () banked
  1896  00226A  6BA1               	clrf	(?_printf+5)& (0+255),b
  1897  00226C  C0BA  F0A2         	movff	_time,?_printf+6
  1898  002270  0100               	movlb	0	; () banked
  1899  002272  6BA3               	clrf	(?_printf+7)& (0+255),b
  1900  002274  EC09  F000         	call	_printf	;wreg free
  1901  002278  0012               	return	
  1902  00227A                     __end_of_standby:
  1903                           	opt stack 0
  1904                           tblptru	equ	0xFF8
  1905                           tblptrh	equ	0xFF7
  1906                           tblptrl	equ	0xFF6
  1907                           tablat	equ	0xFF5
  1908                           intcon	equ	0xFF2
  1909                           intcon2	equ	0xFF1
  1910                           intcon3	equ	0xFF0
  1911                           postinc0	equ	0xFEE
  1912                           wreg	equ	0xFE8
  1913                           status	equ	0xFD8
  1914                           
  1915 ;; *************** function _read_time *****************
  1916 ;; Defined at:
  1917 ;;		line 240 in file "main.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;		None
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  i               1   19[BANK0 ] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1934 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;Total ram usage:        1 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    9
  1938 ;; This function calls:
  1939 ;;		_I2C_Master_Read
  1940 ;;		_I2C_Master_Start
  1941 ;;		_I2C_Master_Stop
  1942 ;;		_I2C_Master_Write
  1943 ;; This function is called by:
  1944 ;;		_standby
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text2
  1949  001EE4                     __ptext2:
  1950                           	opt stack 0
  1951  001EE4                     _read_time:
  1952                           	opt stack 20
  1953                           
  1954                           ;main.c: 242: I2C_Master_Start();
  1955                           
  1956                           ;incstack = 0
  1957  001EE4  ECB8  F012         	call	_I2C_Master_Start	;wreg free
  1958                           
  1959                           ;main.c: 243: I2C_Master_Write(0b11010000);
  1960  001EE8  0E00               	movlw	0
  1961  001EEA  0100               	movlb	0	; () banked
  1962  001EEC  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1963  001EEE  0ED0               	movlw	208
  1964  001EF0  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  1965  001EF2  ECAA  F012         	call	_I2C_Master_Write	;wreg free
  1966                           
  1967                           ;main.c: 244: I2C_Master_Write(0x00);
  1968  001EF6  0E00               	movlw	0
  1969  001EF8  0100               	movlb	0	; () banked
  1970  001EFA  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1971  001EFC  0E00               	movlw	0
  1972  001EFE  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  1973  001F00  ECAA  F012         	call	_I2C_Master_Write	;wreg free
  1974                           
  1975                           ;main.c: 245: I2C_Master_Stop();
  1976  001F04  ECB4  F012         	call	_I2C_Master_Stop	;wreg free
  1977                           
  1978                           ;main.c: 248: I2C_Master_Start();
  1979  001F08  ECB8  F012         	call	_I2C_Master_Start	;wreg free
  1980                           
  1981                           ;main.c: 249: I2C_Master_Write(0b11010001);
  1982  001F0C  0E00               	movlw	0
  1983  001F0E  0100               	movlb	0	; () banked
  1984  001F10  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1985  001F12  0ED1               	movlw	209
  1986  001F14  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  1987  001F16  ECAA  F012         	call	_I2C_Master_Write	;wreg free
  1988                           
  1989                           ;main.c: 250: for(unsigned char i=0;i<0x06;i++){
  1990  001F1A  0E00               	movlw	0
  1991  001F1C  0100               	movlb	0	; () banked
  1992  001F1E  6F93               	movwf	read_time@i& (0+255),b
  1993  001F20                     l3248:
  1994                           
  1995                           ; BSR set to: 0
  1996  001F20  0E05               	movlw	5
  1997  001F22  0100               	movlb	0	; () banked
  1998  001F24  6593               	cpfsgt	read_time@i& (0+255),b
  1999  001F26  D001               	goto	l3252
  2000  001F28  D010               	goto	l3258
  2001  001F2A                     l3252:
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;main.c: 251: time[i] = I2C_Master_Read(1);
  2005  001F2A  0100               	movlb	0	; () banked
  2006  001F2C  5193               	movf	read_time@i& (0+255),w,b
  2007  001F2E  0D01               	mullw	1
  2008  001F30  0EBA               	movlw	low _time
  2009  001F32  24F3               	addwf	prodl,w,c
  2010  001F34  6ED9               	movwf	fsr2l,c
  2011  001F36  0E00               	movlw	high _time
  2012  001F38  20F4               	addwfc	prodh,w,c
  2013  001F3A  6EDA               	movwf	fsr2h,c
  2014  001F3C  0E01               	movlw	1
  2015  001F3E  ECEF  F011         	call	_I2C_Master_Read
  2016  001F42  6EDF               	movwf	indf2,c
  2017  001F44  0100               	movlb	0	; () banked
  2018  001F46  2B93               	incf	read_time@i& (0+255),f,b
  2019  001F48  D7EB               	goto	l3248
  2020  001F4A                     l3258:
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;main.c: 252: }
  2024                           ;main.c: 253: time[6] = I2C_Master_Read(0);
  2025  001F4A  0E00               	movlw	0
  2026  001F4C  ECEF  F011         	call	_I2C_Master_Read
  2027  001F50  0100               	movlb	0	; () banked
  2028  001F52  6FC0               	movwf	(_time+6)& (0+255),b
  2029                           
  2030                           ;main.c: 254: I2C_Master_Stop();
  2031  001F54  ECB4  F012         	call	_I2C_Master_Stop	;wreg free
  2032  001F58  0012               	return	
  2033  001F5A                     __end_of_read_time:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           prodh	equ	0xFF4
  2040                           prodl	equ	0xFF3
  2041                           intcon	equ	0xFF2
  2042                           intcon2	equ	0xFF1
  2043                           intcon3	equ	0xFF0
  2044                           postinc0	equ	0xFEE
  2045                           wreg	equ	0xFE8
  2046                           indf2	equ	0xFDF
  2047                           fsr2h	equ	0xFDA
  2048                           fsr2l	equ	0xFD9
  2049                           status	equ	0xFD8
  2050                           
  2051 ;; *************** function _operationend *****************
  2052 ;; Defined at:
  2053 ;;		line 329 in file "main.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;		None
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;		None
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;Total ram usage:        0 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:   10
  2074 ;; This function calls:
  2075 ;;		_lcdInst
  2076 ;;		_printf
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text3
  2083  0024DE                     __ptext3:
  2084                           	opt stack 0
  2085  0024DE                     _operationend:
  2086                           	opt stack 20
  2087                           
  2088                           ;main.c: 330: lcdInst(0b10000000);
  2089                           
  2090                           ;incstack = 0
  2091  0024DE  0E80               	movlw	128
  2092  0024E0  EC96  F012         	call	_lcdInst
  2093                           
  2094                           ;main.c: 331: printf("Operation Done!");
  2095  0024E4  0EC8               	movlw	low STR_22
  2096  0024E6  0100               	movlb	0	; () banked
  2097  0024E8  6F9C               	movwf	printf@f& (0+255),b
  2098  0024EA  0EFF               	movlw	high STR_22
  2099  0024EC  0100               	movlb	0	; () banked
  2100  0024EE  6F9D               	movwf	(printf@f+1)& (0+255),b
  2101  0024F0  EC09  F000         	call	_printf	;wreg free
  2102  0024F4  0012               	return	
  2103  0024F6                     __end_of_operationend:
  2104                           	opt stack 0
  2105                           tblptru	equ	0xFF8
  2106                           tblptrh	equ	0xFF7
  2107                           tblptrl	equ	0xFF6
  2108                           tablat	equ	0xFF5
  2109                           prodh	equ	0xFF4
  2110                           prodl	equ	0xFF3
  2111                           intcon	equ	0xFF2
  2112                           intcon2	equ	0xFF1
  2113                           intcon3	equ	0xFF0
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           indf2	equ	0xFDF
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _operation *****************
  2122 ;; Defined at:
  2123 ;;		line 308 in file "main.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;Total ram usage:        2 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:   10
  2144 ;; This function calls:
  2145 ;;		_lcdInst
  2146 ;;		_printf
  2147 ;; This function is called by:
  2148 ;;		_main
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text4
  2153  001BBE                     __ptext4:
  2154                           	opt stack 0
  2155  001BBE                     _operation:
  2156                           	opt stack 20
  2157                           
  2158                           ;main.c: 309: switch(operation_disp){
  2159                           
  2160                           ;incstack = 0
  2161  001BBE  D033               	goto	l3704
  2162  001BC0                     l3684:
  2163                           
  2164                           ;main.c: 311: lcdInst(0b10000000);
  2165  001BC0  0E80               	movlw	128
  2166  001BC2  EC96  F012         	call	_lcdInst
  2167                           
  2168                           ;main.c: 312: printf("Running~              ");
  2169  001BC6  0E79               	movlw	low STR_19
  2170  001BC8  0100               	movlb	0	; () banked
  2171  001BCA  6F9C               	movwf	printf@f& (0+255),b
  2172  001BCC  0EFE               	movlw	high STR_19
  2173  001BCE  0100               	movlb	0	; () banked
  2174  001BD0  6F9D               	movwf	(printf@f+1)& (0+255),b
  2175  001BD2  EC09  F000         	call	_printf	;wreg free
  2176                           
  2177                           ;main.c: 313: operation_disp = 1;
  2178  001BD6  0E00               	movlw	0
  2179  001BD8  0100               	movlb	0	; () banked
  2180  001BDA  6FC4               	movwf	(_operation_disp+1)& (0+255),b
  2181  001BDC  0E01               	movlw	1
  2182  001BDE  6FC3               	movwf	_operation_disp& (0+255),b
  2183                           
  2184                           ;main.c: 314: break;
  2185  001BE0  0012               	return	
  2186  001BE2                     l3690:
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;main.c: 316: lcdInst(0b10000000);
  2190  001BE2  0E80               	movlw	128
  2191  001BE4  EC96  F012         	call	_lcdInst
  2192                           
  2193                           ;main.c: 317: printf("Running~~              ");
  2194  001BE8  0E61               	movlw	low STR_20
  2195  001BEA  0100               	movlb	0	; () banked
  2196  001BEC  6F9C               	movwf	printf@f& (0+255),b
  2197  001BEE  0EFE               	movlw	high STR_20
  2198  001BF0  0100               	movlb	0	; () banked
  2199  001BF2  6F9D               	movwf	(printf@f+1)& (0+255),b
  2200  001BF4  EC09  F000         	call	_printf	;wreg free
  2201                           
  2202                           ;main.c: 318: operation_disp = 2;
  2203  001BF8  0E00               	movlw	0
  2204  001BFA  0100               	movlb	0	; () banked
  2205  001BFC  6FC4               	movwf	(_operation_disp+1)& (0+255),b
  2206  001BFE  0E02               	movlw	2
  2207  001C00  6FC3               	movwf	_operation_disp& (0+255),b
  2208                           
  2209                           ;main.c: 319: break;
  2210  001C02  0012               	return	
  2211  001C04                     l3696:
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;main.c: 321: lcdInst(0b10000000);
  2215  001C04  0E80               	movlw	128
  2216  001C06  EC96  F012         	call	_lcdInst
  2217                           
  2218                           ;main.c: 322: printf("Running~~~              ");
  2219  001C0A  0E48               	movlw	low STR_21
  2220  001C0C  0100               	movlb	0	; () banked
  2221  001C0E  6F9C               	movwf	printf@f& (0+255),b
  2222  001C10  0EFE               	movlw	high STR_21
  2223  001C12  0100               	movlb	0	; () banked
  2224  001C14  6F9D               	movwf	(printf@f+1)& (0+255),b
  2225  001C16  EC09  F000         	call	_printf	;wreg free
  2226                           
  2227                           ;main.c: 323: operation_disp = 0;
  2228  001C1A  0E00               	movlw	0
  2229  001C1C  0100               	movlb	0	; () banked
  2230  001C1E  6FC4               	movwf	(_operation_disp+1)& (0+255),b
  2231  001C20  0E00               	movlw	0
  2232  001C22  6FC3               	movwf	_operation_disp& (0+255),b
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;main.c: 325: }
  2236                           
  2237                           ;main.c: 324: break;
  2238  001C24  0012               	return	
  2239  001C26                     l3704:
  2240  001C26  C0C3  F0B6         	movff	_operation_disp,??_operation
  2241  001C2A  C0C4  F0B7         	movff	_operation_disp+1,??_operation+1
  2242                           
  2243                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2244                           ; Switch size 1, requested type "space"
  2245                           ; Number of cases is 1, Range of values is 0 to 0
  2246                           ; switch strategies available:
  2247                           ; Name         Instructions Cycles
  2248                           ; simple_byte            4     3 (average)
  2249                           ;	Chosen strategy is simple_byte
  2250  001C2E  0100               	movlb	0	; () banked
  2251  001C30  51B7               	movf	(??_operation+1)& (0+255),w,b
  2252  001C32  0A00               	xorlw	0	; case 0
  2253  001C34  A4D8               	btfss	status,2,c
  2254  001C36  0012               	return	
  2255                           
  2256                           ; BSR set to: 0
  2257                           ; Switch size 1, requested type "space"
  2258                           ; Number of cases is 3, Range of values is 0 to 2
  2259                           ; switch strategies available:
  2260                           ; Name         Instructions Cycles
  2261                           ; simple_byte           10     6 (average)
  2262                           ;	Chosen strategy is simple_byte
  2263  001C38  0100               	movlb	0	; () banked
  2264  001C3A  51B6               	movf	??_operation& (0+255),w,b
  2265  001C3C  0A00               	xorlw	0	; case 0
  2266  001C3E  B4D8               	btfsc	status,2,c
  2267  001C40  D7BF               	goto	l3684
  2268  001C42  0A01               	xorlw	1	; case 1
  2269  001C44  B4D8               	btfsc	status,2,c
  2270  001C46  D7CD               	goto	l3690
  2271  001C48  0A03               	xorlw	3	; case 2
  2272  001C4A  A4D8               	btfss	status,2,c
  2273  001C4C  0012               	return	
  2274  001C4E  D7DA               	goto	l3696
  2275  001C50                     __end_of_operation:
  2276                           	opt stack 0
  2277                           tblptru	equ	0xFF8
  2278                           tblptrh	equ	0xFF7
  2279                           tblptrl	equ	0xFF6
  2280                           tablat	equ	0xFF5
  2281                           prodh	equ	0xFF4
  2282                           prodl	equ	0xFF3
  2283                           intcon	equ	0xFF2
  2284                           intcon2	equ	0xFF1
  2285                           intcon3	equ	0xFF0
  2286                           postinc0	equ	0xFEE
  2287                           wreg	equ	0xFE8
  2288                           indf2	equ	0xFDF
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _initLCD *****************
  2294 ;; Defined at:
  2295 ;;		line 14 in file "lcd.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;Total ram usage:        1 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    9
  2316 ;; This function calls:
  2317 ;;		_lcdInst
  2318 ;; This function is called by:
  2319 ;;		_main
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text5
  2324  002192                     __ptext5:
  2325                           	opt stack 0
  2326  002192                     _initLCD:
  2327                           	opt stack 21
  2328                           
  2329                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;incstack = 0
  2333  002192  0E31               	movlw	49
  2334  002194  0100               	movlb	0	; () banked
  2335  002196  6F93               	movwf	??_initLCD& (0+255),b
  2336  002198  0EB2               	movlw	178
  2337  00219A                     u3857:
  2338  00219A  2EE8               	decfsz	wreg,f,c
  2339  00219C  D7FE               	bra	u3857
  2340  00219E  2F93               	decfsz	??_initLCD& (0+255),f,b
  2341  0021A0  D7FC               	bra	u3857
  2342  0021A2  F000               	nop	
  2343                           
  2344                           ;lcd.c: 16: lcdInst(0b00110011);
  2345  0021A4  0E33               	movlw	51
  2346  0021A6  EC96  F012         	call	_lcdInst
  2347                           
  2348                           ;lcd.c: 17: lcdInst(0b00110011);
  2349  0021AA  0E33               	movlw	51
  2350  0021AC  EC96  F012         	call	_lcdInst
  2351                           
  2352                           ;lcd.c: 18: lcdInst(0b00110010);
  2353  0021B0  0E32               	movlw	50
  2354  0021B2  EC96  F012         	call	_lcdInst
  2355                           
  2356                           ;lcd.c: 19: lcdInst(0b00101000);
  2357  0021B6  0E28               	movlw	40
  2358  0021B8  EC96  F012         	call	_lcdInst
  2359                           
  2360                           ;lcd.c: 20: lcdInst(0b00001111);
  2361  0021BC  0E0F               	movlw	15
  2362  0021BE  EC96  F012         	call	_lcdInst
  2363                           
  2364                           ;lcd.c: 21: lcdInst(0b00000110);
  2365  0021C2  0E06               	movlw	6
  2366  0021C4  EC96  F012         	call	_lcdInst
  2367                           
  2368                           ;lcd.c: 22: lcdInst(0b00000001);
  2369  0021C8  0E01               	movlw	1
  2370  0021CA  EC96  F012         	call	_lcdInst
  2371                           
  2372                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2373  0021CE  0E31               	movlw	49
  2374  0021D0  0100               	movlb	0	; () banked
  2375  0021D2  6F93               	movwf	??_initLCD& (0+255),b
  2376  0021D4  0EB2               	movlw	178
  2377  0021D6                     u3867:
  2378  0021D6  2EE8               	decfsz	wreg,f,c
  2379  0021D8  D7FE               	bra	u3867
  2380  0021DA  2F93               	decfsz	??_initLCD& (0+255),f,b
  2381  0021DC  D7FC               	bra	u3867
  2382  0021DE  F000               	nop	
  2383  0021E0  0012               	return		;funcret
  2384  0021E2                     __end_of_initLCD:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           intcon	equ	0xFF2
  2393                           intcon2	equ	0xFF1
  2394                           intcon3	equ	0xFF0
  2395                           postinc0	equ	0xFEE
  2396                           wreg	equ	0xFE8
  2397                           indf2	equ	0xFDF
  2398                           fsr2h	equ	0xFDA
  2399                           fsr2l	equ	0xFD9
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _emergencystop *****************
  2403 ;; Defined at:
  2404 ;;		line 335 in file "main.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;		None
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      void 
  2411 ;; Registers used:
  2412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;Total ram usage:        0 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:   10
  2425 ;; This function calls:
  2426 ;;		_lcdInst
  2427 ;;		_printf
  2428 ;; This function is called by:
  2429 ;;		_main
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text6
  2434  0024C4                     __ptext6:
  2435                           	opt stack 0
  2436  0024C4                     _emergencystop:
  2437                           	opt stack 20
  2438                           
  2439                           ;main.c: 336: lcdInst(0b10000000);
  2440                           
  2441                           ;incstack = 0
  2442  0024C4  0E80               	movlw	128
  2443  0024C6  EC96  F012         	call	_lcdInst
  2444                           
  2445                           ;main.c: 337: printf("EMERGENCY STOP");
  2446  0024CA  0ED8               	movlw	low STR_23
  2447  0024CC  0100               	movlb	0	; () banked
  2448  0024CE  6F9C               	movwf	printf@f& (0+255),b
  2449  0024D0  0EFF               	movlw	high STR_23
  2450  0024D2  0100               	movlb	0	; () banked
  2451  0024D4  6F9D               	movwf	(printf@f+1)& (0+255),b
  2452  0024D6  EC09  F000         	call	_printf	;wreg free
  2453                           
  2454                           ;main.c: 338: (INTCONbits.GIE = 0);
  2455  0024DA  9EF2               	bcf	intcon,7,c	;volatile
  2456  0024DC                     l282:
  2457  0024DC  D7FF               	goto	l282
  2458  0024DE                     __end_of_emergencystop:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           intcon	equ	0xFF2
  2467                           intcon2	equ	0xFF1
  2468                           intcon3	equ	0xFF0
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           indf2	equ	0xFDF
  2472                           fsr2h	equ	0xFDA
  2473                           fsr2l	equ	0xFD9
  2474                           status	equ	0xFD8
  2475                           
  2476 ;; *************** function _date_time *****************
  2477 ;; Defined at:
  2478 ;;		line 215 in file "main.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;		None
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  i               1   54[BANK0 ] unsigned char 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  1    wreg      void 
  2485 ;; Registers used:
  2486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;Total ram usage:        1 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:   10
  2499 ;; This function calls:
  2500 ;;		_I2C_Master_Read
  2501 ;;		_I2C_Master_Start
  2502 ;;		_I2C_Master_Stop
  2503 ;;		_I2C_Master_Write
  2504 ;;		_lcdInst
  2505 ;;		_printf
  2506 ;; This function is called by:
  2507 ;;		_main
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text7
  2512  00174C                     __ptext7:
  2513                           	opt stack 0
  2514  00174C                     _date_time:
  2515                           	opt stack 20
  2516                           
  2517                           ;main.c: 217: I2C_Master_Start();
  2518                           
  2519                           ;incstack = 0
  2520  00174C  ECB8  F012         	call	_I2C_Master_Start	;wreg free
  2521                           
  2522                           ;main.c: 218: I2C_Master_Write(0b11010000);
  2523  001750  0E00               	movlw	0
  2524  001752  0100               	movlb	0	; () banked
  2525  001754  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2526  001756  0ED0               	movlw	208
  2527  001758  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2528  00175A  ECAA  F012         	call	_I2C_Master_Write	;wreg free
  2529                           
  2530                           ;main.c: 219: I2C_Master_Write(0x00);
  2531  00175E  0E00               	movlw	0
  2532  001760  0100               	movlb	0	; () banked
  2533  001762  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2534  001764  0E00               	movlw	0
  2535  001766  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2536  001768  ECAA  F012         	call	_I2C_Master_Write	;wreg free
  2537                           
  2538                           ;main.c: 220: I2C_Master_Stop();
  2539  00176C  ECB4  F012         	call	_I2C_Master_Stop	;wreg free
  2540                           
  2541                           ;main.c: 223: I2C_Master_Start();
  2542  001770  ECB8  F012         	call	_I2C_Master_Start	;wreg free
  2543                           
  2544                           ;main.c: 224: I2C_Master_Write(0b11010001);
  2545  001774  0E00               	movlw	0
  2546  001776  0100               	movlb	0	; () banked
  2547  001778  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2548  00177A  0ED1               	movlw	209
  2549  00177C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2550  00177E  ECAA  F012         	call	_I2C_Master_Write	;wreg free
  2551                           
  2552                           ;main.c: 225: for(unsigned char i=0;i<0x06;i++){
  2553  001782  0E00               	movlw	0
  2554  001784  0100               	movlb	0	; () banked
  2555  001786  6FB6               	movwf	date_time@i& (0+255),b
  2556  001788                     l3720:
  2557                           
  2558                           ; BSR set to: 0
  2559  001788  0E05               	movlw	5
  2560  00178A  0100               	movlb	0	; () banked
  2561  00178C  65B6               	cpfsgt	date_time@i& (0+255),b
  2562  00178E  D001               	goto	l3724
  2563  001790  D010               	goto	l3730
  2564  001792                     l3724:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;main.c: 226: time[i] = I2C_Master_Read(1);
  2568  001792  0100               	movlb	0	; () banked
  2569  001794  51B6               	movf	date_time@i& (0+255),w,b
  2570  001796  0D01               	mullw	1
  2571  001798  0EBA               	movlw	low _time
  2572  00179A  24F3               	addwf	prodl,w,c
  2573  00179C  6ED9               	movwf	fsr2l,c
  2574  00179E  0E00               	movlw	high _time
  2575  0017A0  20F4               	addwfc	prodh,w,c
  2576  0017A2  6EDA               	movwf	fsr2h,c
  2577  0017A4  0E01               	movlw	1
  2578  0017A6  ECEF  F011         	call	_I2C_Master_Read
  2579  0017AA  6EDF               	movwf	indf2,c
  2580  0017AC  0100               	movlb	0	; () banked
  2581  0017AE  2BB6               	incf	date_time@i& (0+255),f,b
  2582  0017B0  D7EB               	goto	l3720
  2583  0017B2                     l3730:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 227: }
  2587                           ;main.c: 228: time[6] = I2C_Master_Read(0);
  2588  0017B2  0E00               	movlw	0
  2589  0017B4  ECEF  F011         	call	_I2C_Master_Read
  2590  0017B8  0100               	movlb	0	; () banked
  2591  0017BA  6FC0               	movwf	(_time+6)& (0+255),b
  2592                           
  2593                           ;main.c: 229: I2C_Master_Stop();
  2594  0017BC  ECB4  F012         	call	_I2C_Master_Stop	;wreg free
  2595                           
  2596                           ;main.c: 232: lcdInst(0b10000000);
  2597  0017C0  0E80               	movlw	128
  2598  0017C2  EC96  F012         	call	_lcdInst
  2599                           
  2600                           ;main.c: 233: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2601  0017C6  0EA7               	movlw	low STR_4
  2602  0017C8  0100               	movlb	0	; () banked
  2603  0017CA  6F9C               	movwf	printf@f& (0+255),b
  2604  0017CC  0EFE               	movlw	high STR_4
  2605  0017CE  0100               	movlb	0	; () banked
  2606  0017D0  6F9D               	movwf	(printf@f+1)& (0+255),b
  2607  0017D2  C0BF  F09E         	movff	_time+5,?_printf+2
  2608  0017D6  0100               	movlb	0	; () banked
  2609  0017D8  6B9F               	clrf	(?_printf+3)& (0+255),b
  2610  0017DA  C0BE  F0A0         	movff	_time+4,?_printf+4
  2611  0017DE  0100               	movlb	0	; () banked
  2612  0017E0  6BA1               	clrf	(?_printf+5)& (0+255),b
  2613  0017E2  C0C0  F0A2         	movff	_time+6,?_printf+6
  2614  0017E6  0100               	movlb	0	; () banked
  2615  0017E8  6BA3               	clrf	(?_printf+7)& (0+255),b
  2616  0017EA  EC09  F000         	call	_printf	;wreg free
  2617                           
  2618                           ;main.c: 234: lcdInst(0b11000000);
  2619  0017EE  0EC0               	movlw	192
  2620  0017F0  EC96  F012         	call	_lcdInst
  2621                           
  2622                           ;main.c: 235: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2623  0017F4  0EBE               	movlw	low STR_5
  2624  0017F6  0100               	movlb	0	; () banked
  2625  0017F8  6F9C               	movwf	printf@f& (0+255),b
  2626  0017FA  0EFE               	movlw	high STR_5
  2627  0017FC  0100               	movlb	0	; () banked
  2628  0017FE  6F9D               	movwf	(printf@f+1)& (0+255),b
  2629  001800  C0BC  F09E         	movff	_time+2,?_printf+2
  2630  001804  0100               	movlb	0	; () banked
  2631  001806  6B9F               	clrf	(?_printf+3)& (0+255),b
  2632  001808  C0BB  F0A0         	movff	_time+1,?_printf+4
  2633  00180C  0100               	movlb	0	; () banked
  2634  00180E  6BA1               	clrf	(?_printf+5)& (0+255),b
  2635  001810  C0BA  F0A2         	movff	_time,?_printf+6
  2636  001814  0100               	movlb	0	; () banked
  2637  001816  6BA3               	clrf	(?_printf+7)& (0+255),b
  2638  001818  EC09  F000         	call	_printf	;wreg free
  2639  00181C  0012               	return	
  2640  00181E                     __end_of_date_time:
  2641                           	opt stack 0
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           prodh	equ	0xFF4
  2647                           prodl	equ	0xFF3
  2648                           intcon	equ	0xFF2
  2649                           intcon2	equ	0xFF1
  2650                           intcon3	equ	0xFF0
  2651                           postinc0	equ	0xFEE
  2652                           wreg	equ	0xFE8
  2653                           indf2	equ	0xFDF
  2654                           fsr2h	equ	0xFDA
  2655                           fsr2l	equ	0xFD9
  2656                           status	equ	0xFD8
  2657                           
  2658 ;; *************** function _I2C_Master_Write *****************
  2659 ;; Defined at:
  2660 ;;		line 47 in file "I2C.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  d               2   17[BANK0 ] unsigned int 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;		None
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  1    wreg      void 
  2667 ;; Registers used:
  2668 ;;		wreg, status,2, status,0, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2674 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;Total ram usage:        2 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; Hardware stack levels required when called:    8
  2681 ;; This function calls:
  2682 ;;		_I2C_Master_Wait
  2683 ;; This function is called by:
  2684 ;;		_date_time
  2685 ;;		_read_time
  2686 ;;		_set_time
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text8
  2691  002554                     __ptext8:
  2692                           	opt stack 0
  2693  002554                     _I2C_Master_Write:
  2694                           	opt stack 20
  2695                           
  2696                           ;I2C.c: 49: I2C_Master_Wait();
  2697                           
  2698                           ;incstack = 0
  2699  002554  EC7B  F012         	call	_I2C_Master_Wait	;wreg free
  2700                           
  2701                           ;I2C.c: 50: SSPBUF = d;
  2702  002558  C091  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2703  00255C  0012               	return		;funcret
  2704  00255E                     __end_of_I2C_Master_Write:
  2705                           	opt stack 0
  2706                           tblptru	equ	0xFF8
  2707                           tblptrh	equ	0xFF7
  2708                           tblptrl	equ	0xFF6
  2709                           tablat	equ	0xFF5
  2710                           prodh	equ	0xFF4
  2711                           prodl	equ	0xFF3
  2712                           intcon	equ	0xFF2
  2713                           intcon2	equ	0xFF1
  2714                           intcon3	equ	0xFF0
  2715                           postinc0	equ	0xFEE
  2716                           wreg	equ	0xFE8
  2717                           indf2	equ	0xFDF
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function _I2C_Master_Stop *****************
  2723 ;; Defined at:
  2724 ;;		line 41 in file "I2C.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  1    wreg      void 
  2731 ;; Registers used:
  2732 ;;		wreg, status,2, status,0, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;Total ram usage:        0 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    8
  2745 ;; This function calls:
  2746 ;;		_I2C_Master_Wait
  2747 ;; This function is called by:
  2748 ;;		_date_time
  2749 ;;		_read_time
  2750 ;;		_set_time
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text9
  2755  002568                     __ptext9:
  2756                           	opt stack 0
  2757  002568                     _I2C_Master_Stop:
  2758                           	opt stack 20
  2759                           
  2760                           ;I2C.c: 43: I2C_Master_Wait();
  2761                           
  2762                           ;incstack = 0
  2763  002568  EC7B  F012         	call	_I2C_Master_Wait	;wreg free
  2764                           
  2765                           ;I2C.c: 44: PEN = 1;
  2766  00256C  84C5               	bsf	4037,2,c	;volatile
  2767  00256E  0012               	return		;funcret
  2768  002570                     __end_of_I2C_Master_Stop:
  2769                           	opt stack 0
  2770                           tblptru	equ	0xFF8
  2771                           tblptrh	equ	0xFF7
  2772                           tblptrl	equ	0xFF6
  2773                           tablat	equ	0xFF5
  2774                           prodh	equ	0xFF4
  2775                           prodl	equ	0xFF3
  2776                           intcon	equ	0xFF2
  2777                           intcon2	equ	0xFF1
  2778                           intcon3	equ	0xFF0
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           indf2	equ	0xFDF
  2782                           fsr2h	equ	0xFDA
  2783                           fsr2l	equ	0xFD9
  2784                           status	equ	0xFD8
  2785                           
  2786 ;; *************** function _I2C_Master_Start *****************
  2787 ;; Defined at:
  2788 ;;		line 29 in file "I2C.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;		None
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      void 
  2795 ;; Registers used:
  2796 ;;		wreg, status,2, status,0, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;Total ram usage:        0 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    8
  2809 ;; This function calls:
  2810 ;;		_I2C_Master_Wait
  2811 ;; This function is called by:
  2812 ;;		_date_time
  2813 ;;		_read_time
  2814 ;;		_set_time
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text10
  2819  002570                     __ptext10:
  2820                           	opt stack 0
  2821  002570                     _I2C_Master_Start:
  2822                           	opt stack 20
  2823                           
  2824                           ;I2C.c: 31: I2C_Master_Wait();
  2825                           
  2826                           ;incstack = 0
  2827  002570  EC7B  F012         	call	_I2C_Master_Wait	;wreg free
  2828                           
  2829                           ;I2C.c: 32: SEN = 1;
  2830  002574  80C5               	bsf	4037,0,c	;volatile
  2831  002576  0012               	return		;funcret
  2832  002578                     __end_of_I2C_Master_Start:
  2833                           	opt stack 0
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           prodh	equ	0xFF4
  2839                           prodl	equ	0xFF3
  2840                           intcon	equ	0xFF2
  2841                           intcon2	equ	0xFF1
  2842                           intcon3	equ	0xFF0
  2843                           postinc0	equ	0xFEE
  2844                           wreg	equ	0xFE8
  2845                           indf2	equ	0xFDF
  2846                           fsr2h	equ	0xFDA
  2847                           fsr2l	equ	0xFD9
  2848                           status	equ	0xFD8
  2849                           
  2850 ;; *************** function _I2C_Master_Read *****************
  2851 ;; Defined at:
  2852 ;;		line 53 in file "I2C.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  a               1    wreg     unsigned char 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  a               1   17[BANK0 ] unsigned char 
  2857 ;;  temp            1   18[BANK0 ] unsigned char 
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      unsigned char 
  2860 ;; Registers used:
  2861 ;;		wreg, status,2, status,0, cstack
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;Total ram usage:        2 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    8
  2874 ;; This function calls:
  2875 ;;		_I2C_Master_Wait
  2876 ;; This function is called by:
  2877 ;;		_date_time
  2878 ;;		_read_time
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text11
  2883  0023DE                     __ptext11:
  2884                           	opt stack 0
  2885  0023DE                     _I2C_Master_Read:
  2886                           	opt stack 20
  2887                           
  2888                           ;incstack = 0
  2889                           ;I2C_Master_Read@a stored from wreg
  2890  0023DE  0100               	movlb	0	; () banked
  2891  0023E0  6F91               	movwf	I2C_Master_Read@a& (0+255),b
  2892                           
  2893                           ;I2C.c: 55: unsigned char temp;
  2894                           ;I2C.c: 56: I2C_Master_Wait();
  2895  0023E2  EC7B  F012         	call	_I2C_Master_Wait	;wreg free
  2896                           
  2897                           ;I2C.c: 57: RCEN = 1;
  2898  0023E6  86C5               	bsf	4037,3,c	;volatile
  2899                           
  2900                           ;I2C.c: 58: I2C_Master_Wait();
  2901  0023E8  EC7B  F012         	call	_I2C_Master_Wait	;wreg free
  2902                           
  2903                           ;I2C.c: 59: temp = SSPBUF;
  2904  0023EC  CFC9 F092          	movff	4041,I2C_Master_Read@temp	;volatile
  2905                           
  2906                           ;I2C.c: 60: I2C_Master_Wait();
  2907  0023F0  EC7B  F012         	call	_I2C_Master_Wait	;wreg free
  2908                           
  2909                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2910  0023F4  0100               	movlb	0	; () banked
  2911  0023F6  5191               	movf	I2C_Master_Read@a& (0+255),w,b
  2912  0023F8  0100               	movlb	0	; () banked
  2913  0023FA  A4D8               	btfss	status,2,c
  2914  0023FC  D002               	goto	u2630
  2915  0023FE  8AC5               	bsf	4037,5,c	;volatile
  2916  002400  D001               	goto	l3076
  2917  002402                     u2630:
  2918  002402  9AC5               	bcf	4037,5,c	;volatile
  2919  002404                     l3076:
  2920                           
  2921                           ;I2C.c: 62: ACKEN = 1;
  2922  002404  88C5               	bsf	4037,4,c	;volatile
  2923                           
  2924                           ;I2C.c: 63: return temp;
  2925  002406  0100               	movlb	0	; () banked
  2926  002408  5192               	movf	I2C_Master_Read@temp& (0+255),w,b
  2927  00240A  0012               	return	
  2928  00240C                     __end_of_I2C_Master_Read:
  2929                           	opt stack 0
  2930                           tblptru	equ	0xFF8
  2931                           tblptrh	equ	0xFF7
  2932                           tblptrl	equ	0xFF6
  2933                           tablat	equ	0xFF5
  2934                           prodh	equ	0xFF4
  2935                           prodl	equ	0xFF3
  2936                           intcon	equ	0xFF2
  2937                           intcon2	equ	0xFF1
  2938                           intcon3	equ	0xFF0
  2939                           postinc0	equ	0xFEE
  2940                           wreg	equ	0xFE8
  2941                           indf2	equ	0xFDF
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function _I2C_Master_Wait *****************
  2947 ;; Defined at:
  2948 ;;		line 24 in file "I2C.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;Total ram usage:        1 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    7
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		_I2C_Master_Start
  2973 ;;		_I2C_Master_Stop
  2974 ;;		_I2C_Master_Write
  2975 ;;		_I2C_Master_Read
  2976 ;;		_I2C_Master_RepeatedStart
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text12
  2981  0024F6                     __ptext12:
  2982                           	opt stack 0
  2983  0024F6                     _I2C_Master_Wait:
  2984                           	opt stack 20
  2985  0024F6                     l34:
  2986  0024F6  B4C7               	btfsc	4039,2,c	;volatile
  2987  0024F8  D7FE               	goto	l34
  2988  0024FA  CFC5 F090          	movff	4037,??_I2C_Master_Wait	;volatile
  2989  0024FE  0E1F               	movlw	31
  2990  002500  0100               	movlb	0	; () banked
  2991  002502  1790               	andwf	??_I2C_Master_Wait& (0+255),f,b
  2992  002504  B4D8               	btfsc	status,2,c
  2993  002506  0012               	return	
  2994  002508  D7F6               	goto	l34
  2995  00250A                     __end_of_I2C_Master_Wait:
  2996                           	opt stack 0
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           prodh	equ	0xFF4
  3002                           prodl	equ	0xFF3
  3003                           intcon	equ	0xFF2
  3004                           intcon2	equ	0xFF1
  3005                           intcon3	equ	0xFF0
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           indf2	equ	0xFDF
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _bottle_time *****************
  3014 ;; Defined at:
  3015 ;;		line 300 in file "main.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  time            2   54[BANK0 ] int 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;		None
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      void 
  3022 ;; Registers used:
  3023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3029 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;Total ram usage:        2 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:   10
  3036 ;; This function calls:
  3037 ;;		_lcdInst
  3038 ;;		_printf
  3039 ;; This function is called by:
  3040 ;;		_main
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text13
  3045  002372                     __ptext13:
  3046                           	opt stack 0
  3047  002372                     _bottle_time:
  3048                           	opt stack 20
  3049                           
  3050                           ;main.c: 301: lcdInst(0b10000000);
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;incstack = 0
  3054  002372  0E80               	movlw	128
  3055  002374  EC96  F012         	call	_lcdInst
  3056                           
  3057                           ;main.c: 302: printf("Total Operation       ");
  3058  002378  0E90               	movlw	low STR_17
  3059  00237A  0100               	movlb	0	; () banked
  3060  00237C  6F9C               	movwf	printf@f& (0+255),b
  3061  00237E  0EFE               	movlw	high STR_17
  3062  002380  0100               	movlb	0	; () banked
  3063  002382  6F9D               	movwf	(printf@f+1)& (0+255),b
  3064  002384  EC09  F000         	call	_printf	;wreg free
  3065                           
  3066                           ;main.c: 303: lcdInst(0b11000000);
  3067  002388  0EC0               	movlw	192
  3068  00238A  EC96  F012         	call	_lcdInst
  3069                           
  3070                           ;main.c: 304: printf("Time: %d s       ", time);
  3071  00238E  0EEA               	movlw	low STR_18
  3072  002390  0100               	movlb	0	; () banked
  3073  002392  6F9C               	movwf	printf@f& (0+255),b
  3074  002394  0EFE               	movlw	high STR_18
  3075  002396  0100               	movlb	0	; () banked
  3076  002398  6F9D               	movwf	(printf@f+1)& (0+255),b
  3077  00239A  C0B6  F09E         	movff	bottle_time@time,?_printf+2
  3078  00239E  C0B7  F09F         	movff	bottle_time@time+1,?_printf+3
  3079  0023A2  EC09  F000         	call	_printf	;wreg free
  3080  0023A6  0012               	return	
  3081  0023A8                     __end_of_bottle_time:
  3082                           	opt stack 0
  3083                           tblptru	equ	0xFF8
  3084                           tblptrh	equ	0xFF7
  3085                           tblptrl	equ	0xFF6
  3086                           tablat	equ	0xFF5
  3087                           prodh	equ	0xFF4
  3088                           prodl	equ	0xFF3
  3089                           intcon	equ	0xFF2
  3090                           intcon2	equ	0xFF1
  3091                           intcon3	equ	0xFF0
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           indf2	equ	0xFDF
  3095                           fsr2h	equ	0xFDA
  3096                           fsr2l	equ	0xFD9
  3097                           status	equ	0xFD8
  3098                           
  3099 ;; *************** function _bottle_count *****************
  3100 ;; Defined at:
  3101 ;;		line 258 in file "main.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;		None
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;		None
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;Total ram usage:        0 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:   10
  3122 ;; This function calls:
  3123 ;;		___awmod
  3124 ;;		_lcdInst
  3125 ;;		_printf
  3126 ;; This function is called by:
  3127 ;;		_main
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text14
  3132  000F38                     __ptext14:
  3133                           	opt stack 0
  3134  000F38                     _bottle_count:
  3135                           	opt stack 20
  3136                           
  3137                           ;main.c: 259: switch(bottle_count_disp % 5){
  3138                           
  3139                           ;incstack = 0
  3140  000F38  D083               	goto	l3776
  3141  000F3A                     l3740:
  3142                           
  3143                           ;main.c: 261: lcdInst(0b10000000);
  3144  000F3A  0E80               	movlw	128
  3145  000F3C  EC96  F012         	call	_lcdInst
  3146                           
  3147                           ;main.c: 262: printf("Bottle Count    ");
  3148  000F40  0E2F               	movlw	low STR_6
  3149  000F42  0100               	movlb	0	; () banked
  3150  000F44  6F9C               	movwf	printf@f& (0+255),b
  3151  000F46  0EFF               	movlw	high STR_6
  3152  000F48  0100               	movlb	0	; () banked
  3153  000F4A  6F9D               	movwf	(printf@f+1)& (0+255),b
  3154  000F4C  EC09  F000         	call	_printf	;wreg free
  3155                           
  3156                           ;main.c: 263: lcdInst(0b11000000);
  3157  000F50  0EC0               	movlw	192
  3158  000F52  EC96  F012         	call	_lcdInst
  3159                           
  3160                           ;main.c: 264: printf("Total: 10       ");
  3161  000F56  0E1E               	movlw	low STR_7
  3162  000F58  0100               	movlb	0	; () banked
  3163  000F5A  6F9C               	movwf	printf@f& (0+255),b
  3164  000F5C  0EFF               	movlw	high STR_7
  3165  000F5E  0100               	movlb	0	; () banked
  3166  000F60  6F9D               	movwf	(printf@f+1)& (0+255),b
  3167  000F62  EC09  F000         	call	_printf	;wreg free
  3168                           
  3169                           ;main.c: 265: break;
  3170  000F66  0012               	return	
  3171  000F68                     l3746:
  3172                           
  3173                           ;main.c: 267: lcdInst(0b10000000);
  3174  000F68  0E80               	movlw	128
  3175  000F6A  EC96  F012         	call	_lcdInst
  3176                           
  3177                           ;main.c: 268: printf("YOP+CAP+LBL: 3  ");
  3178  000F6E  0E73               	movlw	low STR_8
  3179  000F70  0100               	movlb	0	; () banked
  3180  000F72  6F9C               	movwf	printf@f& (0+255),b
  3181  000F74  0EFF               	movlw	high STR_8
  3182  000F76  0100               	movlb	0	; () banked
  3183  000F78  6F9D               	movwf	(printf@f+1)& (0+255),b
  3184  000F7A  EC09  F000         	call	_printf	;wreg free
  3185                           
  3186                           ;main.c: 269: lcdInst(0b11000000);
  3187  000F7E  0EC0               	movlw	192
  3188  000F80  EC96  F012         	call	_lcdInst
  3189                           
  3190                           ;main.c: 270: printf("YOP+CAP-LBL: 1  ");
  3191  000F84  0E62               	movlw	low STR_9
  3192  000F86  0100               	movlb	0	; () banked
  3193  000F88  6F9C               	movwf	printf@f& (0+255),b
  3194  000F8A  0EFF               	movlw	high STR_9
  3195  000F8C  0100               	movlb	0	; () banked
  3196  000F8E  6F9D               	movwf	(printf@f+1)& (0+255),b
  3197  000F90  EC09  F000         	call	_printf	;wreg free
  3198                           
  3199                           ;main.c: 271: break;
  3200  000F94  0012               	return	
  3201  000F96                     l3752:
  3202                           
  3203                           ;main.c: 273: lcdInst(0b10000000);
  3204  000F96  0E80               	movlw	128
  3205  000F98  EC96  F012         	call	_lcdInst
  3206                           
  3207                           ;main.c: 274: printf("YOP-CAP+LBL: 1  ");
  3208  000F9C  0E51               	movlw	low STR_10
  3209  000F9E  0100               	movlb	0	; () banked
  3210  000FA0  6F9C               	movwf	printf@f& (0+255),b
  3211  000FA2  0EFF               	movlw	high STR_10
  3212  000FA4  0100               	movlb	0	; () banked
  3213  000FA6  6F9D               	movwf	(printf@f+1)& (0+255),b
  3214  000FA8  EC09  F000         	call	_printf	;wreg free
  3215                           
  3216                           ;main.c: 275: lcdInst(0b11000000);
  3217  000FAC  0EC0               	movlw	192
  3218  000FAE  EC96  F012         	call	_lcdInst
  3219                           
  3220                           ;main.c: 276: printf("YOP-CAP-LBL: 0  ");
  3221  000FB2  0E40               	movlw	low STR_11
  3222  000FB4  0100               	movlb	0	; () banked
  3223  000FB6  6F9C               	movwf	printf@f& (0+255),b
  3224  000FB8  0EFF               	movlw	high STR_11
  3225  000FBA  0100               	movlb	0	; () banked
  3226  000FBC  6F9D               	movwf	(printf@f+1)& (0+255),b
  3227  000FBE  EC09  F000         	call	_printf	;wreg free
  3228                           
  3229                           ;main.c: 277: break;
  3230  000FC2  0012               	return	
  3231  000FC4                     l3758:
  3232                           
  3233                           ;main.c: 279: lcdInst(0b10000000);
  3234  000FC4  0E80               	movlw	128
  3235  000FC6  EC96  F012         	call	_lcdInst
  3236                           
  3237                           ;main.c: 280: printf("ESKA+CAP+LBL: 1 ");
  3238  000FCA  0E84               	movlw	low STR_12
  3239  000FCC  0100               	movlb	0	; () banked
  3240  000FCE  6F9C               	movwf	printf@f& (0+255),b
  3241  000FD0  0EFF               	movlw	high STR_12
  3242  000FD2  0100               	movlb	0	; () banked
  3243  000FD4  6F9D               	movwf	(printf@f+1)& (0+255),b
  3244  000FD6  EC09  F000         	call	_printf	;wreg free
  3245                           
  3246                           ;main.c: 281: lcdInst(0b11000000);
  3247  000FDA  0EC0               	movlw	192
  3248  000FDC  EC96  F012         	call	_lcdInst
  3249                           
  3250                           ;main.c: 282: printf("ESKA+CAP-LBL: 1 ");
  3251  000FE0  0EA6               	movlw	low STR_13
  3252  000FE2  0100               	movlb	0	; () banked
  3253  000FE4  6F9C               	movwf	printf@f& (0+255),b
  3254  000FE6  0EFF               	movlw	high STR_13
  3255  000FE8  0100               	movlb	0	; () banked
  3256  000FEA  6F9D               	movwf	(printf@f+1)& (0+255),b
  3257  000FEC  EC09  F000         	call	_printf	;wreg free
  3258                           
  3259                           ;main.c: 283: break;
  3260  000FF0  0012               	return	
  3261  000FF2                     l3764:
  3262                           
  3263                           ;main.c: 285: lcdInst(0b10000000);
  3264  000FF2  0E80               	movlw	128
  3265  000FF4  EC96  F012         	call	_lcdInst
  3266                           
  3267                           ;main.c: 286: printf("ESKA-CAP+LBL: 1 ");
  3268  000FF8  0E95               	movlw	low STR_14
  3269  000FFA  0100               	movlb	0	; () banked
  3270  000FFC  6F9C               	movwf	printf@f& (0+255),b
  3271  000FFE  0EFF               	movlw	high STR_14
  3272  001000  0100               	movlb	0	; () banked
  3273  001002  6F9D               	movwf	(printf@f+1)& (0+255),b
  3274  001004  EC09  F000         	call	_printf	;wreg free
  3275                           
  3276                           ;main.c: 287: lcdInst(0b11000000);
  3277  001008  0EC0               	movlw	192
  3278  00100A  EC96  F012         	call	_lcdInst
  3279                           
  3280                           ;main.c: 288: printf("ESKA-CAP-LBL: 2 ");
  3281  00100E  0EB7               	movlw	low STR_15
  3282  001010  0100               	movlb	0	; () banked
  3283  001012  6F9C               	movwf	printf@f& (0+255),b
  3284  001014  0EFF               	movlw	high STR_15
  3285  001016  0100               	movlb	0	; () banked
  3286  001018  6F9D               	movwf	(printf@f+1)& (0+255),b
  3287  00101A  EC09  F000         	call	_printf	;wreg free
  3288                           
  3289                           ;main.c: 289: break;
  3290  00101E  0012               	return	
  3291  001020                     l3770:
  3292                           
  3293                           ;main.c: 292: lcdInst(0b10000000);
  3294  001020  0E80               	movlw	128
  3295  001022  EC96  F012         	call	_lcdInst
  3296                           
  3297                           ;main.c: 293: printf("ERROR: %d", bottle_count_disp);
  3298  001026  0EF5               	movlw	low STR_16
  3299  001028  0100               	movlb	0	; () banked
  3300  00102A  6F9C               	movwf	printf@f& (0+255),b
  3301  00102C  0EFF               	movlw	high STR_16
  3302  00102E  0100               	movlb	0	; () banked
  3303  001030  6F9D               	movwf	(printf@f+1)& (0+255),b
  3304  001032  C0C8  F09E         	movff	_bottle_count_disp,?_printf+2
  3305  001036  C0C9  F09F         	movff	_bottle_count_disp+1,?_printf+3
  3306  00103A  EC09  F000         	call	_printf	;wreg free
  3307  00103E  D7F0               	goto	l3770
  3308  001040                     l3776:
  3309  001040  C0C8  F090         	movff	_bottle_count_disp,___awmod@dividend
  3310  001044  C0C9  F091         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3311  001048  0E00               	movlw	0
  3312  00104A  0100               	movlb	0	; () banked
  3313  00104C  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3314  00104E  0E05               	movlw	5
  3315  001050  6F92               	movwf	___awmod@divisor& (0+255),b
  3316  001052  EC8E  F00D         	call	___awmod	;wreg free
  3317                           
  3318                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3319                           ; Switch size 1, requested type "space"
  3320                           ; Number of cases is 1, Range of values is 0 to 0
  3321                           ; switch strategies available:
  3322                           ; Name         Instructions Cycles
  3323                           ; simple_byte            4     3 (average)
  3324                           ;	Chosen strategy is simple_byte
  3325  001056  0100               	movlb	0	; () banked
  3326  001058  5191               	movf	(?___awmod+1)& (0+255),w,b
  3327  00105A  0A00               	xorlw	0	; case 0
  3328  00105C  A4D8               	btfss	status,2,c
  3329  00105E  D7E0               	goto	l3770
  3330                           
  3331                           ; BSR set to: 0
  3332                           ; Switch size 1, requested type "space"
  3333                           ; Number of cases is 5, Range of values is 0 to 4
  3334                           ; switch strategies available:
  3335                           ; Name         Instructions Cycles
  3336                           ; simple_byte           16     9 (average)
  3337                           ;	Chosen strategy is simple_byte
  3338  001060  0100               	movlb	0	; () banked
  3339  001062  5190               	movf	?___awmod& (0+255),w,b
  3340  001064  0A00               	xorlw	0	; case 0
  3341  001066  B4D8               	btfsc	status,2,c
  3342  001068  D768               	goto	l3740
  3343  00106A  0A01               	xorlw	1	; case 1
  3344  00106C  B4D8               	btfsc	status,2,c
  3345  00106E  D77C               	goto	l3746
  3346  001070  0A03               	xorlw	3	; case 2
  3347  001072  B4D8               	btfsc	status,2,c
  3348  001074  D790               	goto	l3752
  3349  001076  0A01               	xorlw	1	; case 3
  3350  001078  B4D8               	btfsc	status,2,c
  3351  00107A  D7A4               	goto	l3758
  3352  00107C  0A07               	xorlw	7	; case 4
  3353  00107E  B4D8               	btfsc	status,2,c
  3354  001080  D7B8               	goto	l3764
  3355  001082  D7CE               	goto	l3770
  3356  001084                     __end_of_bottle_count:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           intcon2	equ	0xFF1
  3366                           intcon3	equ	0xFF0
  3367                           postinc0	equ	0xFEE
  3368                           wreg	equ	0xFE8
  3369                           indf2	equ	0xFDF
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _printf *****************
  3375 ;; Defined at:
  3376 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3379 ;;		 -> STR_23(15), STR_22(16), STR_21(25), STR_20(24), 
  3380 ;;		 -> STR_19(23), STR_18(18), STR_17(23), STR_16(10), 
  3381 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  3382 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  3383 ;;		 -> STR_7(17), STR_6(17), STR_5(23), STR_4(23), 
  3384 ;;		 -> STR_3(21), STR_2(17), STR_1(14), 
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  idx             1   42[BANK0 ] unsigned char 
  3387 ;;  tmpval          4    0        struct .
  3388 ;;  width           2   51[BANK0 ] int 
  3389 ;;  val             2   48[BANK0 ] unsigned int 
  3390 ;;  ap              2   46[BANK0 ] PTR void [1]
  3391 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3392 ;;  len             2   43[BANK0 ] unsigned int 
  3393 ;;  cp              2   40[BANK0 ] PTR const unsigned char 
  3394 ;;		 -> printf@c(1), 
  3395 ;;  c               1   53[BANK0 ] char 
  3396 ;;  flag            1   50[BANK0 ] unsigned char 
  3397 ;;  prec            1   45[BANK0 ] char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  2   28[BANK0 ] int 
  3400 ;; Registers used:
  3401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3407 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;Total ram usage:       26 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    9
  3414 ;; This function calls:
  3415 ;;		___lwdiv
  3416 ;;		___lwmod
  3417 ;;		___wmul
  3418 ;;		_isdigit
  3419 ;;		_putch
  3420 ;; This function is called by:
  3421 ;;		_standby
  3422 ;;		_date_time
  3423 ;;		_bottle_count
  3424 ;;		_bottle_time
  3425 ;;		_operation
  3426 ;;		_operationend
  3427 ;;		_emergencystop
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text15
  3432  000012                     __ptext15:
  3433                           	opt stack 0
  3434  000012                     _printf:
  3435                           	opt stack 20
  3436                           
  3437                           ;doprnt.c: 466: va_list ap;
  3438                           ;doprnt.c: 499: signed char c;
  3439                           ;doprnt.c: 501: int width;
  3440                           ;doprnt.c: 506: signed char prec;
  3441                           ;doprnt.c: 508: unsigned char flag;
  3442                           ;doprnt.c: 523: union {
  3443                           ;doprnt.c: 524: unsigned long vd;
  3444                           ;doprnt.c: 525: double integ;
  3445                           ;doprnt.c: 526: } tmpval;
  3446                           ;doprnt.c: 528: unsigned int val;
  3447                           ;doprnt.c: 529: unsigned len;
  3448                           ;doprnt.c: 530: const char * cp;
  3449                           ;doprnt.c: 533: *ap = __va_start();
  3450                           
  3451                           ;incstack = 0
  3452  000012  0E9E               	movlw	low (?_printf+2)
  3453  000014  0100               	movlb	0	; () banked
  3454  000016  6FAE               	movwf	printf@ap& (0+255),b
  3455  000018  0E00               	movlw	high (?_printf+2)
  3456  00001A  0100               	movlb	0	; () banked
  3457  00001C  6FAF               	movwf	(printf@ap+1)& (0+255),b
  3458                           
  3459                           ;doprnt.c: 536: while(c = *f++) {
  3460  00001E  D21D               	goto	l3414
  3461  000020                     l3264:
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;doprnt.c: 538: if(c != '%')
  3465  000020  0E25               	movlw	37
  3466  000022  0100               	movlb	0	; () banked
  3467  000024  19B5               	xorwf	printf@c& (0+255),w,b
  3468  000026  B4D8               	btfsc	status,2,c
  3469  000028  D005               	goto	l3268
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;doprnt.c: 540: {
  3473                           ;doprnt.c: 541: (putch(c) );
  3474  00002A  0100               	movlb	0	; () banked
  3475  00002C  51B5               	movf	printf@c& (0+255),w,b
  3476  00002E  EC8E  F012         	call	_putch
  3477                           
  3478                           ;doprnt.c: 542: continue;
  3479  000032  D213               	goto	l3414
  3480  000034                     l3268:
  3481                           
  3482                           ;doprnt.c: 543: }
  3483                           ;doprnt.c: 546: width = 0;
  3484  000034  0E00               	movlw	0
  3485  000036  0100               	movlb	0	; () banked
  3486  000038  6FB4               	movwf	(printf@width+1)& (0+255),b
  3487  00003A  0E00               	movlw	0
  3488  00003C  6FB3               	movwf	printf@width& (0+255),b
  3489                           
  3490                           ;doprnt.c: 548: flag = 0;
  3491  00003E  0E00               	movlw	0
  3492  000040  0100               	movlb	0	; () banked
  3493  000042  6FB2               	movwf	printf@flag& (0+255),b
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;doprnt.c: 551: switch(*f) {
  3497                           
  3498                           ;doprnt.c: 550: for(;;) {
  3499  000044  D005               	goto	l3274
  3500  000046                     l3270:
  3501                           
  3502                           ;doprnt.c: 580: flag |= 0x04;
  3503  000046  0100               	movlb	0	; () banked
  3504  000048  85B2               	bsf	printf@flag& (0+255),2,b
  3505                           
  3506                           ;doprnt.c: 581: f++;
  3507  00004A  0100               	movlb	0	; () banked
  3508  00004C  4B9C               	infsnz	printf@f& (0+255),f,b
  3509  00004E  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3510  000050                     l3274:
  3511  000050  C09C  FFF6         	movff	printf@f,tblptrl
  3512  000054  C09D  FFF7         	movff	printf@f+1,tblptrh
  3513  000058                     	if	0	;tblptru may be non-zero
  3514  000058                     	endif
  3515  000058                     	if	0	;tblptru may be non-zero
  3516  000058                     	endif
  3517  000058  0008               	tblrd		*
  3518  00005A  50F5               	movf	tablat,w,c
  3519                           
  3520                           ; Switch size 1, requested type "space"
  3521                           ; Number of cases is 1, Range of values is 48 to 48
  3522                           ; switch strategies available:
  3523                           ; Name         Instructions Cycles
  3524                           ; simple_byte            4     3 (average)
  3525                           ;	Chosen strategy is simple_byte
  3526  00005C  0A30               	xorlw	48	; case 48
  3527  00005E  B4D8               	btfsc	status,2,c
  3528  000060  D7F2               	goto	l3270
  3529                           
  3530                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3531                           
  3532                           ;doprnt.c: 586: }
  3533                           
  3534                           ;doprnt.c: 585: break;
  3535  000062  C09C  FFF6         	movff	printf@f,tblptrl
  3536  000066  C09D  FFF7         	movff	printf@f+1,tblptrh
  3537  00006A                     	if	0	;tblptru may be non-zero
  3538  00006A                     	endif
  3539  00006A                     	if	0	;tblptru may be non-zero
  3540  00006A                     	endif
  3541  00006A  0008               	tblrd		*
  3542  00006C  50F5               	movf	tablat,w,c
  3543  00006E  EC06  F012         	call	_isdigit
  3544  000072  A0D8               	btfss	status,0,c
  3545  000074  D09A               	goto	l3316
  3546                           
  3547                           ;doprnt.c: 598: width = 0;
  3548  000076  0E00               	movlw	0
  3549  000078  0100               	movlb	0	; () banked
  3550  00007A  6FB4               	movwf	(printf@width+1)& (0+255),b
  3551  00007C  0E00               	movlw	0
  3552  00007E  6FB3               	movwf	printf@width& (0+255),b
  3553  000080                     l3280:
  3554                           
  3555                           ;doprnt.c: 600: width *= 10;
  3556  000080  C0B3  F090         	movff	printf@width,___wmul@multiplier
  3557  000084  C0B4  F091         	movff	printf@width+1,___wmul@multiplier+1
  3558  000088  0E00               	movlw	0
  3559  00008A  0100               	movlb	0	; () banked
  3560  00008C  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3561  00008E  0E0A               	movlw	10
  3562  000090  6F92               	movwf	___wmul@multiplicand& (0+255),b
  3563  000092  ECD4  F011         	call	___wmul	;wreg free
  3564  000096  C090  F0B3         	movff	?___wmul,printf@width
  3565  00009A  C091  F0B4         	movff	?___wmul+1,printf@width+1
  3566                           
  3567                           ;doprnt.c: 601: width += *f++ - '0';
  3568  00009E  0ED0               	movlw	208
  3569  0000A0  0100               	movlb	0	; () banked
  3570  0000A2  6FA4               	movwf	??_printf& (0+255),b
  3571  0000A4  0EFF               	movlw	255
  3572  0000A6  0100               	movlb	0	; () banked
  3573  0000A8  6FA5               	movwf	(??_printf+1)& (0+255),b
  3574  0000AA  C09C  FFF6         	movff	printf@f,tblptrl
  3575  0000AE  C09D  FFF7         	movff	printf@f+1,tblptrh
  3576  0000B2                     	if	0	;tblptru may be non-zero
  3577  0000B2                     	endif
  3578  0000B2                     	if	0	;tblptru may be non-zero
  3579  0000B2                     	endif
  3580  0000B2  0008               	tblrd		*
  3581  0000B4  50F5               	movf	tablat,w,c
  3582  0000B6  0100               	movlb	0	; () banked
  3583  0000B8  6FA6               	movwf	(??_printf+2)& (0+255),b
  3584  0000BA  6BA7               	clrf	(??_printf+3)& (0+255),b
  3585  0000BC  0100               	movlb	0	; () banked
  3586  0000BE  51A4               	movf	??_printf& (0+255),w,b
  3587  0000C0  0100               	movlb	0	; () banked
  3588  0000C2  27A6               	addwf	(??_printf+2)& (0+255),f,b
  3589  0000C4  0100               	movlb	0	; () banked
  3590  0000C6  51A5               	movf	(??_printf+1)& (0+255),w,b
  3591  0000C8  0100               	movlb	0	; () banked
  3592  0000CA  23A7               	addwfc	(??_printf+3)& (0+255),f,b
  3593  0000CC  0100               	movlb	0	; () banked
  3594  0000CE  51A6               	movf	(??_printf+2)& (0+255),w,b
  3595  0000D0  0100               	movlb	0	; () banked
  3596  0000D2  27B3               	addwf	printf@width& (0+255),f,b
  3597  0000D4  0100               	movlb	0	; () banked
  3598  0000D6  51A7               	movf	(??_printf+3)& (0+255),w,b
  3599  0000D8  0100               	movlb	0	; () banked
  3600  0000DA  23B4               	addwfc	(printf@width+1)& (0+255),f,b
  3601                           
  3602                           ; BSR set to: 0
  3603  0000DC  0100               	movlb	0	; () banked
  3604  0000DE  4B9C               	infsnz	printf@f& (0+255),f,b
  3605  0000E0  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3609  0000E2  C09C  FFF6         	movff	printf@f,tblptrl
  3610  0000E6  C09D  FFF7         	movff	printf@f+1,tblptrh
  3611  0000EA                     	if	0	;tblptru may be non-zero
  3612  0000EA                     	endif
  3613  0000EA                     	if	0	;tblptru may be non-zero
  3614  0000EA                     	endif
  3615  0000EA  0008               	tblrd		*
  3616  0000EC  50F5               	movf	tablat,w,c
  3617  0000EE  EC06  F012         	call	_isdigit
  3618  0000F2  A0D8               	btfss	status,0,c
  3619  0000F4  D05A               	goto	l3316
  3620  0000F6  D7C4               	goto	l3280
  3621  0000F8                     l3288:
  3622                           
  3623                           ;doprnt.c: 721: flag |= 0x80;
  3624  0000F8  0100               	movlb	0	; () banked
  3625  0000FA  8FB2               	bsf	printf@flag& (0+255),7,b
  3626                           
  3627                           ;doprnt.c: 723: break;
  3628  0000FC  D072               	goto	l323
  3629  0000FE                     l3290:
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;doprnt.c: 757: if(width > len)
  3633  0000FE  0100               	movlb	0	; () banked
  3634  000100  51B3               	movf	printf@width& (0+255),w,b
  3635  000102  0100               	movlb	0	; () banked
  3636  000104  5DAB               	subwf	printf@len& (0+255),w,b
  3637  000106  0100               	movlb	0	; () banked
  3638  000108  51B4               	movf	(printf@width+1)& (0+255),w,b
  3639  00010A  0100               	movlb	0	; () banked
  3640  00010C  59AC               	subwfb	(printf@len+1)& (0+255),w,b
  3641  00010E  B0D8               	btfsc	status,0,c
  3642  000110  D009               	goto	l3294
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;doprnt.c: 758: width -= len;
  3646  000112  0100               	movlb	0	; () banked
  3647  000114  51AB               	movf	printf@len& (0+255),w,b
  3648  000116  0100               	movlb	0	; () banked
  3649  000118  5FB3               	subwf	printf@width& (0+255),f,b
  3650  00011A  0100               	movlb	0	; () banked
  3651  00011C  51AC               	movf	(printf@len+1)& (0+255),w,b
  3652  00011E  0100               	movlb	0	; () banked
  3653  000120  5BB4               	subwfb	(printf@width+1)& (0+255),f,b
  3654  000122  D009               	goto	l3298
  3655  000124                     l3294:
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;doprnt.c: 759: else
  3659                           ;doprnt.c: 760: width = 0;
  3660  000124  0E00               	movlw	0
  3661  000126  0100               	movlb	0	; () banked
  3662  000128  6FB4               	movwf	(printf@width+1)& (0+255),b
  3663  00012A  0E00               	movlw	0
  3664  00012C  6FB3               	movwf	printf@width& (0+255),b
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;doprnt.c: 764: while(width--)
  3668  00012E  D003               	goto	l3298
  3669  000130                     l3296:
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;doprnt.c: 765: (putch(' ') );
  3673  000130  0E20               	movlw	32
  3674  000132  EC8E  F012         	call	_putch
  3675  000136                     l3298:
  3676  000136  0100               	movlb	0	; () banked
  3677  000138  07B3               	decf	printf@width& (0+255),f,b
  3678  00013A  A0D8               	btfss	status,0,c
  3679  00013C  07B4               	decf	(printf@width+1)& (0+255),f,b
  3680  00013E  0100               	movlb	0	; () banked
  3681  000140  29B3               	incf	printf@width& (0+255),w,b
  3682  000142  E1F6               	bnz	l3296
  3683  000144  0100               	movlb	0	; () banked
  3684  000146  29B4               	incf	(printf@width+1)& (0+255),w,b
  3685  000148  B4D8               	btfsc	status,2,c
  3686  00014A  D00B               	goto	l3304
  3687  00014C  D7F1               	goto	l3296
  3688  00014E                     l3300:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;doprnt.c: 768: (putch(*cp++) );
  3692  00014E  C0A8  FFD9         	movff	printf@cp,fsr2l
  3693  000152  C0A9  FFDA         	movff	printf@cp+1,fsr2h
  3694  000156  50DF               	movf	indf2,w,c
  3695  000158  EC8E  F012         	call	_putch
  3696  00015C  0100               	movlb	0	; () banked
  3697  00015E  4BA8               	infsnz	printf@cp& (0+255),f,b
  3698  000160  2BA9               	incf	(printf@cp+1)& (0+255),f,b
  3699  000162                     l3304:
  3700                           
  3701                           ; BSR set to: 0
  3702  000162  0100               	movlb	0	; () banked
  3703  000164  07AB               	decf	printf@len& (0+255),f,b
  3704  000166  A0D8               	btfss	status,0,c
  3705  000168  07AC               	decf	(printf@len+1)& (0+255),f,b
  3706  00016A  0100               	movlb	0	; () banked
  3707  00016C  29AB               	incf	printf@len& (0+255),w,b
  3708  00016E  E1EF               	bnz	l3300
  3709  000170  0100               	movlb	0	; () banked
  3710  000172  29AC               	incf	(printf@len+1)& (0+255),w,b
  3711  000174  B4D8               	btfsc	status,2,c
  3712  000176  D171               	goto	l3414
  3713  000178  D7EA               	goto	l3300
  3714  00017A                     l3306:
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3718  00017A  C0AE  FFD9         	movff	printf@ap,fsr2l
  3719  00017E  C0AF  FFDA         	movff	printf@ap+1,fsr2h
  3720  000182  50DF               	movf	indf2,w,c
  3721  000184  0100               	movlb	0	; () banked
  3722  000186  6FB5               	movwf	printf@c& (0+255),b
  3723                           
  3724                           ; BSR set to: 0
  3725  000188  0E02               	movlw	2
  3726  00018A  0100               	movlb	0	; () banked
  3727  00018C  27AE               	addwf	printf@ap& (0+255),f,b
  3728  00018E  0E00               	movlw	0
  3729  000190  23AF               	addwfc	(printf@ap+1)& (0+255),f,b
  3730  000192                     l3310:
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;doprnt.c: 805: cp = (char *)&c;
  3734  000192  0EB5               	movlw	low printf@c
  3735  000194  0100               	movlb	0	; () banked
  3736  000196  6FA8               	movwf	printf@cp& (0+255),b
  3737  000198  0E00               	movlw	high printf@c
  3738  00019A  0100               	movlb	0	; () banked
  3739  00019C  6FA9               	movwf	(printf@cp+1)& (0+255),b
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;doprnt.c: 806: len = 1;
  3743  00019E  0E00               	movlw	0
  3744  0001A0  0100               	movlb	0	; () banked
  3745  0001A2  6FAC               	movwf	(printf@len+1)& (0+255),b
  3746  0001A4  0E01               	movlw	1
  3747  0001A6  6FAB               	movwf	printf@len& (0+255),b
  3748                           
  3749                           ;doprnt.c: 807: goto dostring;
  3750  0001A8  D7AA               	goto	l3290
  3751  0001AA                     l3316:
  3752  0001AA  C09C  FFF6         	movff	printf@f,tblptrl
  3753  0001AE  C09D  FFF7         	movff	printf@f+1,tblptrh
  3754  0001B2  0100               	movlb	0	; () banked
  3755  0001B4  4B9C               	infsnz	printf@f& (0+255),f,b
  3756  0001B6  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3757  0001B8                     	if	0	;tblptru may be non-zero
  3758  0001B8                     	endif
  3759  0001B8                     	if	0	;tblptru may be non-zero
  3760  0001B8                     	endif
  3761  0001B8  0008               	tblrd		*
  3762  0001BA  CFF5 F0B5          	movff	tablat,printf@c
  3763  0001BE  0100               	movlb	0	; () banked
  3764  0001C0  51B5               	movf	printf@c& (0+255),w,b
  3765                           
  3766                           ; Switch size 1, requested type "space"
  3767                           ; Number of cases is 5, Range of values is 0 to 120
  3768                           ; switch strategies available:
  3769                           ; Name         Instructions Cycles
  3770                           ; simple_byte           16     9 (average)
  3771                           ;	Chosen strategy is simple_byte
  3772  0001C2  0A00               	xorlw	0	; case 0
  3773  0001C4  B4D8               	btfsc	status,2,c
  3774  0001C6  0012               	return	
  3775  0001C8  0A63               	xorlw	99	; case 99
  3776  0001CA  B4D8               	btfsc	status,2,c
  3777  0001CC  D7D6               	goto	l3306
  3778  0001CE  0A07               	xorlw	7	; case 100
  3779  0001D0  B4D8               	btfsc	status,2,c
  3780  0001D2  D007               	goto	l323
  3781  0001D4  0A0D               	xorlw	13	; case 105
  3782  0001D6  B4D8               	btfsc	status,2,c
  3783  0001D8  D004               	goto	l323
  3784  0001DA  0A11               	xorlw	17	; case 120
  3785  0001DC  B4D8               	btfsc	status,2,c
  3786  0001DE  D78C               	goto	l3288
  3787  0001E0  D7D8               	goto	l3310
  3788  0001E2                     l323:
  3789                           
  3790                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3791  0001E2  0100               	movlb	0	; () banked
  3792  0001E4  BFB2               	btfsc	printf@flag& (0+255),7,b
  3793  0001E6  D019               	goto	l3328
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;doprnt.c: 1253: {
  3797                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3798  0001E8  C0AE  FFD9         	movff	printf@ap,fsr2l
  3799  0001EC  C0AF  FFDA         	movff	printf@ap+1,fsr2h
  3800  0001F0  CFDE F0B0          	movff	postinc2,printf@val
  3801  0001F4  CFDD F0B1          	movff	postdec2,printf@val+1
  3802                           
  3803                           ; BSR set to: 0
  3804  0001F8  0E02               	movlw	2
  3805  0001FA  0100               	movlb	0	; () banked
  3806  0001FC  27AE               	addwf	printf@ap& (0+255),f,b
  3807  0001FE  0E00               	movlw	0
  3808  000200  23AF               	addwfc	(printf@ap+1)& (0+255),f,b
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;doprnt.c: 1261: if((int)val < 0) {
  3812  000202  0100               	movlb	0	; () banked
  3813  000204  AFB1               	btfss	(printf@val+1)& (0+255),7,b
  3814  000206  D053               	goto	l3362
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;doprnt.c: 1262: flag |= 0x03;
  3818  000208  0E03               	movlw	3
  3819  00020A  0100               	movlb	0	; () banked
  3820  00020C  13B2               	iorwf	printf@flag& (0+255),f,b
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;doprnt.c: 1263: val = -val;
  3824  00020E  0100               	movlb	0	; () banked
  3825  000210  6DB0               	negf	printf@val& (0+255),b
  3826  000212  1FB1               	comf	(printf@val+1)& (0+255),f,b
  3827  000214  B0D8               	btfsc	status,0,c
  3828  000216  2BB1               	incf	(printf@val+1)& (0+255),f,b
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;doprnt.c: 1264: }
  3832                           ;doprnt.c: 1266: }
  3833  000218  D04A               	goto	l3362
  3834  00021A                     l3328:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;doprnt.c: 1268: else
  3838                           ;doprnt.c: 1273: {
  3839                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3840  00021A  C0AE  FFD9         	movff	printf@ap,fsr2l
  3841  00021E  C0AF  FFDA         	movff	printf@ap+1,fsr2h
  3842  000222  CFDE F0B0          	movff	postinc2,printf@val
  3843  000226  CFDD F0B1          	movff	postdec2,printf@val+1
  3844                           
  3845                           ; BSR set to: 0
  3846  00022A  0E02               	movlw	2
  3847  00022C  0100               	movlb	0	; () banked
  3848  00022E  27AE               	addwf	printf@ap& (0+255),f,b
  3849  000230  0E00               	movlw	0
  3850  000232  23AF               	addwfc	(printf@ap+1)& (0+255),f,b
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;doprnt.c: 1287: }
  3854                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3855  000234  D03C               	goto	l3362
  3856  000236                     l3332:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3860  000236  0E01               	movlw	1
  3861  000238  0100               	movlb	0	; () banked
  3862  00023A  6FB5               	movwf	printf@c& (0+255),b
  3863  00023C                     l3334:
  3864                           
  3865                           ; BSR set to: 0
  3866  00023C  0E05               	movlw	5
  3867  00023E  0100               	movlb	0	; () banked
  3868  000240  19B5               	xorwf	printf@c& (0+255),w,b
  3869  000242  B4D8               	btfsc	status,2,c
  3870  000244  D03D               	goto	l3364
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;doprnt.c: 1306: if(val < dpowers[c])
  3874                           
  3875                           ; BSR set to: 0
  3876                           
  3877                           ; BSR set to: 0
  3878  000246  0100               	movlb	0	; () banked
  3879  000248  51B5               	movf	printf@c& (0+255),w,b
  3880  00024A  0D02               	mullw	2
  3881  00024C  0EF6               	movlw	low _dpowers
  3882  00024E  24F3               	addwf	prodl,w,c
  3883  000250  6EF6               	movwf	tblptrl,c
  3884  000252  0EFD               	movlw	high _dpowers
  3885  000254  20F4               	addwfc	prodh,w,c
  3886  000256  6EF7               	movwf	tblptrh,c
  3887  000258                     	if	0	;There are less than 3 active tblptr bytes
  3888  000258                     	endif
  3889  000258  0009               	tblrd		*+
  3890  00025A  50F5               	movf	tablat,w,c
  3891  00025C  0100               	movlb	0	; () banked
  3892  00025E  5DB0               	subwf	printf@val& (0+255),w,b
  3893  000260  0009               	tblrd		*+
  3894  000262  50F5               	movf	tablat,w,c
  3895  000264  0100               	movlb	0	; () banked
  3896  000266  59B1               	subwfb	(printf@val+1)& (0+255),w,b
  3897  000268  A0D8               	btfss	status,0,c
  3898  00026A  D02A               	goto	l3364
  3899                           
  3900                           ; BSR set to: 0
  3901                           
  3902                           ; BSR set to: 0
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;doprnt.c: 1307: break;
  3906  00026C  0100               	movlb	0	; () banked
  3907  00026E  2BB5               	incf	printf@c& (0+255),f,b
  3908  000270  D7E5               	goto	l3334
  3909  000272                     l3346:
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3913  000272  0E01               	movlw	1
  3914  000274  0100               	movlb	0	; () banked
  3915  000276  6FB5               	movwf	printf@c& (0+255),b
  3916  000278                     l3348:
  3917                           
  3918                           ; BSR set to: 0
  3919  000278  0E04               	movlw	4
  3920  00027A  0100               	movlb	0	; () banked
  3921  00027C  19B5               	xorwf	printf@c& (0+255),w,b
  3922  00027E  B4D8               	btfsc	status,2,c
  3923  000280  D01F               	goto	l3364
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3927                           
  3928                           ; BSR set to: 0
  3929                           
  3930                           ; BSR set to: 0
  3931  000282  0100               	movlb	0	; () banked
  3932  000284  51B5               	movf	printf@c& (0+255),w,b
  3933  000286  0D02               	mullw	2
  3934  000288  0E00               	movlw	low _hexpowers
  3935  00028A  24F3               	addwf	prodl,w,c
  3936  00028C  6EF6               	movwf	tblptrl,c
  3937  00028E  0EFE               	movlw	high _hexpowers
  3938  000290  20F4               	addwfc	prodh,w,c
  3939  000292  6EF7               	movwf	tblptrh,c
  3940  000294                     	if	0	;There are less than 3 active tblptr bytes
  3941  000294                     	endif
  3942  000294  0009               	tblrd		*+
  3943  000296  50F5               	movf	tablat,w,c
  3944  000298  0100               	movlb	0	; () banked
  3945  00029A  5DB0               	subwf	printf@val& (0+255),w,b
  3946  00029C  0009               	tblrd		*+
  3947  00029E  50F5               	movf	tablat,w,c
  3948  0002A0  0100               	movlb	0	; () banked
  3949  0002A2  59B1               	subwfb	(printf@val+1)& (0+255),w,b
  3950  0002A4  A0D8               	btfss	status,0,c
  3951  0002A6  D00C               	goto	l3364
  3952                           
  3953                           ; BSR set to: 0
  3954                           
  3955                           ; BSR set to: 0
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;doprnt.c: 1318: break;
  3959  0002A8  0100               	movlb	0	; () banked
  3960  0002AA  2BB5               	incf	printf@c& (0+255),f,b
  3961  0002AC  D7E5               	goto	l3348
  3962  0002AE                     l3362:
  3963                           
  3964                           ; BSR set to: 0
  3965  0002AE  0100               	movlb	0	; () banked
  3966  0002B0  51B2               	movf	printf@flag& (0+255),w,b
  3967  0002B2  0B80               	andlw	128
  3968                           
  3969                           ; Switch size 1, requested type "space"
  3970                           ; Number of cases is 2, Range of values is 0 to 128
  3971                           ; switch strategies available:
  3972                           ; Name         Instructions Cycles
  3973                           ; simple_byte            7     4 (average)
  3974                           ;	Chosen strategy is simple_byte
  3975  0002B4  0A00               	xorlw	0	; case 0
  3976  0002B6  B4D8               	btfsc	status,2,c
  3977  0002B8  D7BE               	goto	l3332
  3978  0002BA  0A80               	xorlw	128	; case 128
  3979  0002BC  B4D8               	btfsc	status,2,c
  3980  0002BE  D7D9               	goto	l3346
  3981  0002C0                     l3364:
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3985  0002C0  0100               	movlb	0	; () banked
  3986  0002C2  51B3               	movf	printf@width& (0+255),w,b
  3987  0002C4  0100               	movlb	0	; () banked
  3988  0002C6  11B4               	iorwf	(printf@width+1)& (0+255),w,b
  3989  0002C8  B4D8               	btfsc	status,2,c
  3990  0002CA  D00B               	goto	l3370
  3991                           
  3992                           ; BSR set to: 0
  3993  0002CC  C0B2  F0A4         	movff	printf@flag,??_printf
  3994  0002D0  0E03               	movlw	3
  3995  0002D2  0100               	movlb	0	; () banked
  3996  0002D4  17A4               	andwf	??_printf& (0+255),f,b
  3997  0002D6  B4D8               	btfsc	status,2,c
  3998  0002D8  D004               	goto	l3370
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;doprnt.c: 1346: width--;
  4002  0002DA  0100               	movlb	0	; () banked
  4003  0002DC  07B3               	decf	printf@width& (0+255),f,b
  4004  0002DE  A0D8               	btfss	status,0,c
  4005  0002E0  07B4               	decf	(printf@width+1)& (0+255),f,b
  4006  0002E2                     l3370:
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;doprnt.c: 1381: if(width > c)
  4010  0002E2  0E80               	movlw	128
  4011  0002E4  0100               	movlb	0	; () banked
  4012  0002E6  BFB5               	btfsc	printf@c& (0+255),7,b
  4013  0002E8  0E7F               	movlw	127
  4014  0002EA  0100               	movlb	0	; () banked
  4015  0002EC  6FA4               	movwf	??_printf& (0+255),b
  4016  0002EE  0100               	movlb	0	; () banked
  4017  0002F0  51B3               	movf	printf@width& (0+255),w,b
  4018  0002F2  0100               	movlb	0	; () banked
  4019  0002F4  5DB5               	subwf	printf@c& (0+255),w,b
  4020  0002F6  0100               	movlb	0	; () banked
  4021  0002F8  51B4               	movf	(printf@width+1)& (0+255),w,b
  4022  0002FA  0A80               	xorlw	128
  4023  0002FC  0100               	movlb	0	; () banked
  4024  0002FE  59A4               	subwfb	??_printf& (0+255),w,b
  4025  000300  B0D8               	btfsc	status,0,c
  4026  000302  D00B               	goto	l3374
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;doprnt.c: 1382: width -= c;
  4030  000304  0100               	movlb	0	; () banked
  4031  000306  51B5               	movf	printf@c& (0+255),w,b
  4032  000308  0100               	movlb	0	; () banked
  4033  00030A  5FB3               	subwf	printf@width& (0+255),f,b
  4034  00030C  0E00               	movlw	0
  4035  00030E  0100               	movlb	0	; () banked
  4036  000310  BFB5               	btfsc	printf@c& (0+255),7,b
  4037  000312  0EFF               	movlw	255
  4038  000314  0100               	movlb	0	; () banked
  4039  000316  5BB4               	subwfb	(printf@width+1)& (0+255),f,b
  4040  000318  D005               	goto	l3376
  4041  00031A                     l3374:
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;doprnt.c: 1383: else
  4045                           ;doprnt.c: 1384: width = 0;
  4046  00031A  0E00               	movlw	0
  4047  00031C  0100               	movlb	0	; () banked
  4048  00031E  6FB4               	movwf	(printf@width+1)& (0+255),b
  4049  000320  0E00               	movlw	0
  4050  000322  6FB3               	movwf	printf@width& (0+255),b
  4051  000324                     l3376:
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;doprnt.c: 1387: if(flag & 0x04) {
  4055  000324  0100               	movlb	0	; () banked
  4056  000326  A5B2               	btfss	printf@flag& (0+255),2,b
  4057  000328  D018               	goto	l3388
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;doprnt.c: 1392: if(flag & 0x03)
  4061  00032A  C0B2  F0A4         	movff	printf@flag,??_printf
  4062  00032E  0E03               	movlw	3
  4063  000330  0100               	movlb	0	; () banked
  4064  000332  17A4               	andwf	??_printf& (0+255),f,b
  4065  000334  B4D8               	btfsc	status,2,c
  4066  000336  D003               	goto	l3382
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;doprnt.c: 1393: (putch('-') );
  4070  000338  0E2D               	movlw	45
  4071  00033A  EC8E  F012         	call	_putch
  4072  00033E                     l3382:
  4073                           
  4074                           ;doprnt.c: 1415: if(width)
  4075  00033E  0100               	movlb	0	; () banked
  4076  000340  51B3               	movf	printf@width& (0+255),w,b
  4077  000342  0100               	movlb	0	; () banked
  4078  000344  11B4               	iorwf	(printf@width+1)& (0+255),w,b
  4079  000346  B4D8               	btfsc	status,2,c
  4080  000348  D025               	goto	l3398
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;doprnt.c: 1417: (putch('0') );
  4084                           
  4085                           ; BSR set to: 0
  4086                           
  4087                           ;doprnt.c: 1416: do
  4088  00034A  0E30               	movlw	48
  4089  00034C  EC8E  F012         	call	_putch
  4090                           
  4091                           ;doprnt.c: 1418: while(--width);
  4092  000350  0100               	movlb	0	; () banked
  4093  000352  07B3               	decf	printf@width& (0+255),f,b
  4094  000354  A0D8               	btfss	status,0,c
  4095  000356  07B4               	decf	(printf@width+1)& (0+255),f,b
  4096  000358  D7F2               	goto	l3382
  4097  00035A                     l3388:
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;doprnt.c: 1422: {
  4101                           ;doprnt.c: 1424: if(width
  4102                           ;doprnt.c: 1428: )
  4103  00035A  0100               	movlb	0	; () banked
  4104  00035C  51B3               	movf	printf@width& (0+255),w,b
  4105  00035E  0100               	movlb	0	; () banked
  4106  000360  11B4               	iorwf	(printf@width+1)& (0+255),w,b
  4107  000362  B4D8               	btfsc	status,2,c
  4108  000364  D00D               	goto	l3394
  4109  000366                     l3390:
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;doprnt.c: 1430: (putch(' ') );
  4113  000366  0E20               	movlw	32
  4114  000368  EC8E  F012         	call	_putch
  4115                           
  4116                           ;doprnt.c: 1431: while(--width);
  4117  00036C  0100               	movlb	0	; () banked
  4118  00036E  07B3               	decf	printf@width& (0+255),f,b
  4119  000370  A0D8               	btfss	status,0,c
  4120  000372  07B4               	decf	(printf@width+1)& (0+255),f,b
  4121  000374  0100               	movlb	0	; () banked
  4122  000376  51B3               	movf	printf@width& (0+255),w,b
  4123  000378  0100               	movlb	0	; () banked
  4124  00037A  11B4               	iorwf	(printf@width+1)& (0+255),w,b
  4125  00037C  A4D8               	btfss	status,2,c
  4126  00037E  D7F3               	goto	l3390
  4127  000380                     l3394:
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;doprnt.c: 1438: if(flag & 0x03)
  4131  000380  C0B2  F0A4         	movff	printf@flag,??_printf
  4132  000384  0E03               	movlw	3
  4133  000386  0100               	movlb	0	; () banked
  4134  000388  17A4               	andwf	??_printf& (0+255),f,b
  4135  00038A  B4D8               	btfsc	status,2,c
  4136  00038C  D003               	goto	l3398
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;doprnt.c: 1439: (putch('-') );
  4140  00038E  0E2D               	movlw	45
  4141  000390  EC8E  F012         	call	_putch
  4142  000394                     l3398:
  4143                           
  4144                           ;doprnt.c: 1469: }
  4145                           ;doprnt.c: 1472: prec = c;
  4146  000394  C0B5  F0AD         	movff	printf@c,printf@prec
  4147                           
  4148                           ;doprnt.c: 1474: while(prec--) {
  4149  000398  D05A               	goto	l3412
  4150  00039A                     l3400:
  4151                           
  4152                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4153  00039A  0100               	movlb	0	; () banked
  4154  00039C  51AD               	movf	printf@prec& (0+255),w,b
  4155  00039E  0D02               	mullw	2
  4156  0003A0  0EF6               	movlw	low _dpowers
  4157  0003A2  24F3               	addwf	prodl,w,c
  4158  0003A4  6EF6               	movwf	tblptrl,c
  4159  0003A6  0EFD               	movlw	high _dpowers
  4160  0003A8  20F4               	addwfc	prodh,w,c
  4161  0003AA  6EF7               	movwf	tblptrh,c
  4162  0003AC                     	if	0	;There are less than 3 active tblptr bytes
  4163  0003AC                     	endif
  4164  0003AC  0009               	tblrd		*+
  4165  0003AE  CFF5 F092          	movff	tablat,___lwdiv@divisor
  4166  0003B2  000A               	tblrd		*-
  4167  0003B4  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  4168  0003B8  C0B0  F090         	movff	printf@val,___lwdiv@dividend
  4169  0003BC  C0B1  F091         	movff	printf@val+1,___lwdiv@dividend+1
  4170  0003C0  ECFA  F00E         	call	___lwdiv	;wreg free
  4171  0003C4  C090  F097         	movff	?___lwdiv,___lwmod@dividend
  4172  0003C8  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
  4173  0003CC  0E00               	movlw	0
  4174  0003CE  0100               	movlb	0	; () banked
  4175  0003D0  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4176  0003D2  0E0A               	movlw	10
  4177  0003D4  6F99               	movwf	___lwmod@divisor& (0+255),b
  4178  0003D6  ECE1  F00F         	call	___lwmod	;wreg free
  4179  0003DA  0100               	movlb	0	; () banked
  4180  0003DC  5197               	movf	?___lwmod& (0+255),w,b
  4181  0003DE  0F30               	addlw	48
  4182  0003E0  0100               	movlb	0	; () banked
  4183  0003E2  6FB5               	movwf	printf@c& (0+255),b
  4184                           
  4185                           ;doprnt.c: 1491: break;
  4186  0003E4  D030               	goto	l3410
  4187  0003E6                     l3402:
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;doprnt.c: 1499: {
  4191                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4192  0003E6  C0B0  F090         	movff	printf@val,___lwdiv@dividend
  4193  0003EA  C0B1  F091         	movff	printf@val+1,___lwdiv@dividend+1
  4194  0003EE  0100               	movlb	0	; () banked
  4195  0003F0  51AD               	movf	printf@prec& (0+255),w,b
  4196  0003F2  0D02               	mullw	2
  4197  0003F4  0E00               	movlw	low _hexpowers
  4198  0003F6  24F3               	addwf	prodl,w,c
  4199  0003F8  6EF6               	movwf	tblptrl,c
  4200  0003FA  0EFE               	movlw	high _hexpowers
  4201  0003FC  20F4               	addwfc	prodh,w,c
  4202  0003FE  6EF7               	movwf	tblptrh,c
  4203  000400                     	if	0	;There are less than 3 active tblptr bytes
  4204  000400                     	endif
  4205  000400  0009               	tblrd		*+
  4206  000402  CFF5 F092          	movff	tablat,___lwdiv@divisor
  4207  000406  000A               	tblrd		*-
  4208  000408  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  4209  00040C  ECFA  F00E         	call	___lwdiv	;wreg free
  4210  000410  0100               	movlb	0	; () banked
  4211  000412  5190               	movf	?___lwdiv& (0+255),w,b
  4212  000414  0B0F               	andlw	15
  4213  000416  0100               	movlb	0	; () banked
  4214  000418  6FAA               	movwf	printf@idx& (0+255),b
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4218  00041A  0100               	movlb	0	; () banked
  4219  00041C  51AA               	movf	printf@idx& (0+255),w,b
  4220  00041E  0D01               	mullw	1
  4221  000420  0EFC               	movlw	low STR_24
  4222  000422  24F3               	addwf	prodl,w,c
  4223  000424  6EF6               	movwf	tblptrl,c
  4224  000426  0EFE               	movlw	high STR_24
  4225  000428  20F4               	addwfc	prodh,w,c
  4226  00042A  6EF7               	movwf	tblptrh,c
  4227  00042C                     	if	0	;There are less than 3 active tblptr bytes
  4228  00042C                     	endif
  4229  00042C  0008               	tblrd		*
  4230  00042E  CFF5 F0B5          	movff	tablat,printf@c
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;doprnt.c: 1523: }
  4234                           
  4235                           ;doprnt.c: 1508: }
  4236                           ;doprnt.c: 1510: break;
  4237  000432  D009               	goto	l3410
  4238  000434                     l3408:
  4239  000434  0100               	movlb	0	; () banked
  4240  000436  51B2               	movf	printf@flag& (0+255),w,b
  4241  000438  0B80               	andlw	128
  4242                           
  4243                           ; Switch size 1, requested type "space"
  4244                           ; Number of cases is 2, Range of values is 0 to 128
  4245                           ; switch strategies available:
  4246                           ; Name         Instructions Cycles
  4247                           ; simple_byte            7     4 (average)
  4248                           ;	Chosen strategy is simple_byte
  4249  00043A  0A00               	xorlw	0	; case 0
  4250  00043C  B4D8               	btfsc	status,2,c
  4251  00043E  D7AD               	goto	l3400
  4252  000440  0A80               	xorlw	128	; case 128
  4253  000442  B4D8               	btfsc	status,2,c
  4254  000444  D7D0               	goto	l3402
  4255  000446                     l3410:
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;doprnt.c: 1524: (putch(c) );
  4259  000446  0100               	movlb	0	; () banked
  4260  000448  51B5               	movf	printf@c& (0+255),w,b
  4261  00044A  EC8E  F012         	call	_putch
  4262  00044E                     l3412:
  4263  00044E  0100               	movlb	0	; () banked
  4264  000450  07AD               	decf	printf@prec& (0+255),f,b
  4265  000452  0100               	movlb	0	; () banked
  4266  000454  29AD               	incf	printf@prec& (0+255),w,b
  4267  000456  A4D8               	btfss	status,2,c
  4268  000458  D7ED               	goto	l3408
  4269  00045A                     l3414:
  4270  00045A  C09C  FFF6         	movff	printf@f,tblptrl
  4271  00045E  C09D  FFF7         	movff	printf@f+1,tblptrh
  4272  000462  0100               	movlb	0	; () banked
  4273  000464  4B9C               	infsnz	printf@f& (0+255),f,b
  4274  000466  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4275  000468                     	if	0	;tblptru may be non-zero
  4276  000468                     	endif
  4277  000468                     	if	0	;tblptru may be non-zero
  4278  000468                     	endif
  4279  000468  0008               	tblrd		*
  4280  00046A  CFF5 F0B5          	movff	tablat,printf@c
  4281  00046E  0100               	movlb	0	; () banked
  4282  000470  51B5               	movf	printf@c& (0+255),w,b
  4283  000472  B4D8               	btfsc	status,2,c
  4284  000474  0012               	return	
  4285  000476  D5D4               	goto	l3264
  4286  000478                     __end_of_printf:
  4287                           	opt stack 0
  4288                           tblptru	equ	0xFF8
  4289                           tblptrh	equ	0xFF7
  4290                           tblptrl	equ	0xFF6
  4291                           tablat	equ	0xFF5
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           intcon	equ	0xFF2
  4295                           intcon2	equ	0xFF1
  4296                           intcon3	equ	0xFF0
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _putch *****************
  4307 ;; Defined at:
  4308 ;;		line 31 in file "lcd.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  data            1    wreg     unsigned char 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  data            1   18[BANK0 ] unsigned char 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2, status,0, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        1 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    8
  4329 ;; This function calls:
  4330 ;;		_lcdNibble
  4331 ;; This function is called by:
  4332 ;;		_printf
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text16
  4337  00251C                     __ptext16:
  4338                           	opt stack 0
  4339  00251C                     _putch:
  4340                           	opt stack 20
  4341                           
  4342                           ;incstack = 0
  4343                           ;putch@data stored from wreg
  4344  00251C  0100               	movlb	0	; () banked
  4345  00251E  6F92               	movwf	putch@data& (0+255),b
  4346                           
  4347                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4348  002520  848C               	bsf	3980,2,c	;volatile
  4349                           
  4350                           ;lcd.c: 33: lcdNibble(data);
  4351  002522  0100               	movlb	0	; () banked
  4352  002524  5192               	movf	putch@data& (0+255),w,b
  4353  002526  EC12  F010         	call	_lcdNibble
  4354  00252A  0012               	return		;funcret
  4355  00252C                     __end_of_putch:
  4356                           	opt stack 0
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           intcon	equ	0xFF2
  4364                           intcon2	equ	0xFF1
  4365                           intcon3	equ	0xFF0
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           indf2	equ	0xFDF
  4369                           postinc2	equ	0xFDE
  4370                           postdec2	equ	0xFDD
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function _isdigit *****************
  4376 ;; Defined at:
  4377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  c               1    wreg     unsigned char 
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;  c               1   18[BANK0 ] unsigned char 
  4382 ;; Return value:  Size  Location     Type
  4383 ;;		None               void
  4384 ;; Registers used:
  4385 ;;		wreg, status,2, status,0
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;Total ram usage:        3 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    7
  4398 ;; This function calls:
  4399 ;;		Nothing
  4400 ;; This function is called by:
  4401 ;;		_printf
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text17
  4406  00240C                     __ptext17:
  4407                           	opt stack 0
  4408  00240C                     _isdigit:
  4409                           	opt stack 21
  4410                           
  4411                           ;incstack = 0
  4412                           ;isdigit@c stored from wreg
  4413  00240C  0100               	movlb	0	; () banked
  4414  00240E  6F92               	movwf	isdigit@c& (0+255),b
  4415  002410  0E00               	movlw	0
  4416  002412  0100               	movlb	0	; () banked
  4417  002414  6F91               	movwf	_isdigit$584& (0+255),b
  4418                           
  4419                           ; BSR set to: 0
  4420  002416  0E3A               	movlw	58
  4421  002418  0100               	movlb	0	; () banked
  4422  00241A  6192               	cpfslt	isdigit@c& (0+255),b
  4423  00241C  D007               	goto	l3094
  4424                           
  4425                           ; BSR set to: 0
  4426  00241E  0E2F               	movlw	47
  4427  002420  0100               	movlb	0	; () banked
  4428  002422  6592               	cpfsgt	isdigit@c& (0+255),b
  4429  002424  D003               	goto	l3094
  4430                           
  4431                           ; BSR set to: 0
  4432  002426  0E01               	movlw	1
  4433  002428  0100               	movlb	0	; () banked
  4434  00242A  6F91               	movwf	_isdigit$584& (0+255),b
  4435  00242C                     l3094:
  4436                           
  4437                           ; BSR set to: 0
  4438  00242C  C091  F090         	movff	_isdigit$584,??_isdigit
  4439  002430  0100               	movlb	0	; () banked
  4440  002432  3190               	rrcf	??_isdigit& (0+255),w,b
  4441  002434  0012               	return	
  4442  002436                     __end_of_isdigit:
  4443                           	opt stack 0
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           prodh	equ	0xFF4
  4449                           prodl	equ	0xFF3
  4450                           intcon	equ	0xFF2
  4451                           intcon2	equ	0xFF1
  4452                           intcon3	equ	0xFF0
  4453                           postinc0	equ	0xFEE
  4454                           wreg	equ	0xFE8
  4455                           indf2	equ	0xFDF
  4456                           postinc2	equ	0xFDE
  4457                           postdec2	equ	0xFDD
  4458                           fsr2h	equ	0xFDA
  4459                           fsr2l	equ	0xFD9
  4460                           status	equ	0xFD8
  4461                           
  4462 ;; *************** function ___wmul *****************
  4463 ;; Defined at:
  4464 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4467 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;  product         2   20[BANK0 ] unsigned int 
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  2   16[BANK0 ] unsigned int 
  4472 ;; Registers used:
  4473 ;;		wreg, status,2, status,0, prodl, prodh
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4479 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;Total ram usage:        6 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:    7
  4486 ;; This function calls:
  4487 ;;		Nothing
  4488 ;; This function is called by:
  4489 ;;		_printf
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text18
  4494  0023A8                     __ptext18:
  4495                           	opt stack 0
  4496  0023A8                     ___wmul:
  4497                           	opt stack 21
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;incstack = 0
  4501  0023A8  0100               	movlb	0	; () banked
  4502  0023AA  5190               	movf	___wmul@multiplier& (0+255),w,b
  4503  0023AC  0100               	movlb	0	; () banked
  4504  0023AE  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4505  0023B0  CFF3 F094          	movff	prodl,___wmul@product
  4506  0023B4  CFF4 F095          	movff	prodh,___wmul@product+1
  4507  0023B8  0100               	movlb	0	; () banked
  4508  0023BA  5190               	movf	___wmul@multiplier& (0+255),w,b
  4509  0023BC  0100               	movlb	0	; () banked
  4510  0023BE  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4511  0023C0  50F3               	movf	prodl,w,c
  4512  0023C2  0100               	movlb	0	; () banked
  4513  0023C4  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4514  0023C6  0100               	movlb	0	; () banked
  4515  0023C8  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4516  0023CA  0100               	movlb	0	; () banked
  4517  0023CC  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4518  0023CE  50F3               	movf	prodl,w,c
  4519  0023D0  0100               	movlb	0	; () banked
  4520  0023D2  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4521                           
  4522                           ; BSR set to: 0
  4523  0023D4  C094  F090         	movff	___wmul@product,?___wmul
  4524  0023D8  C095  F091         	movff	___wmul@product+1,?___wmul+1
  4525  0023DC  0012               	return	
  4526  0023DE                     __end_of___wmul:
  4527                           	opt stack 0
  4528                           tblptru	equ	0xFF8
  4529                           tblptrh	equ	0xFF7
  4530                           tblptrl	equ	0xFF6
  4531                           tablat	equ	0xFF5
  4532                           prodh	equ	0xFF4
  4533                           prodl	equ	0xFF3
  4534                           intcon	equ	0xFF2
  4535                           intcon2	equ	0xFF1
  4536                           intcon3	equ	0xFF0
  4537                           postinc0	equ	0xFEE
  4538                           wreg	equ	0xFE8
  4539                           indf2	equ	0xFDF
  4540                           postinc2	equ	0xFDE
  4541                           postdec2	equ	0xFDD
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function ___lwmod *****************
  4547 ;; Defined at:
  4548 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  dividend        2   23[BANK0 ] unsigned int 
  4551 ;;  divisor         2   25[BANK0 ] unsigned int 
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  counter         1   27[BANK0 ] unsigned char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  2   23[BANK0 ] unsigned int 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2, status,0
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4563 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;Total ram usage:        5 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    7
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_printf
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text19
  4578  001FC2                     __ptext19:
  4579                           	opt stack 0
  4580  001FC2                     ___lwmod:
  4581                           	opt stack 21
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;incstack = 0
  4585  001FC2  0100               	movlb	0	; () banked
  4586  001FC4  5199               	movf	___lwmod@divisor& (0+255),w,b
  4587  001FC6  0100               	movlb	0	; () banked
  4588  001FC8  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4589  001FCA  B4D8               	btfsc	status,2,c
  4590  001FCC  D026               	goto	l788
  4591                           
  4592                           ; BSR set to: 0
  4593  001FCE  0E01               	movlw	1
  4594  001FD0  0100               	movlb	0	; () banked
  4595  001FD2  6F9B               	movwf	___lwmod@counter& (0+255),b
  4596  001FD4  D006               	goto	l3142
  4597  001FD6                     l3140:
  4598                           
  4599                           ; BSR set to: 0
  4600  001FD6  0100               	movlb	0	; () banked
  4601  001FD8  90D8               	bcf	status,0,c
  4602  001FDA  3799               	rlcf	___lwmod@divisor& (0+255),f,b
  4603  001FDC  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4604  001FDE  0100               	movlb	0	; () banked
  4605  001FE0  2B9B               	incf	___lwmod@counter& (0+255),f,b
  4606  001FE2                     l3142:
  4607                           
  4608                           ; BSR set to: 0
  4609  001FE2  0100               	movlb	0	; () banked
  4610  001FE4  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4611  001FE6  D7F7               	goto	l3140
  4612  001FE8                     l3144:
  4613                           
  4614                           ; BSR set to: 0
  4615  001FE8  0100               	movlb	0	; () banked
  4616  001FEA  5199               	movf	___lwmod@divisor& (0+255),w,b
  4617  001FEC  0100               	movlb	0	; () banked
  4618  001FEE  5D97               	subwf	___lwmod@dividend& (0+255),w,b
  4619  001FF0  0100               	movlb	0	; () banked
  4620  001FF2  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4621  001FF4  0100               	movlb	0	; () banked
  4622  001FF6  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4623  001FF8  A0D8               	btfss	status,0,c
  4624  001FFA  D008               	goto	l3148
  4625                           
  4626                           ; BSR set to: 0
  4627  001FFC  0100               	movlb	0	; () banked
  4628  001FFE  5199               	movf	___lwmod@divisor& (0+255),w,b
  4629  002000  0100               	movlb	0	; () banked
  4630  002002  5F97               	subwf	___lwmod@dividend& (0+255),f,b
  4631  002004  0100               	movlb	0	; () banked
  4632  002006  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4633  002008  0100               	movlb	0	; () banked
  4634  00200A  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4635  00200C                     l3148:
  4636                           
  4637                           ; BSR set to: 0
  4638  00200C  0100               	movlb	0	; () banked
  4639  00200E  90D8               	bcf	status,0,c
  4640  002010  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4641  002012  3399               	rrcf	___lwmod@divisor& (0+255),f,b
  4642                           
  4643                           ; BSR set to: 0
  4644  002014  0100               	movlb	0	; () banked
  4645  002016  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  4646  002018  D7E7               	goto	l3144
  4647  00201A                     l788:
  4648                           
  4649                           ; BSR set to: 0
  4650  00201A  C097  F097         	movff	___lwmod@dividend,?___lwmod
  4651  00201E  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
  4652                           
  4653                           ; BSR set to: 0
  4654  002022  0012               	return		;funcret
  4655  002024                     __end_of___lwmod:
  4656                           	opt stack 0
  4657                           tblptru	equ	0xFF8
  4658                           tblptrh	equ	0xFF7
  4659                           tblptrl	equ	0xFF6
  4660                           tablat	equ	0xFF5
  4661                           prodh	equ	0xFF4
  4662                           prodl	equ	0xFF3
  4663                           intcon	equ	0xFF2
  4664                           intcon2	equ	0xFF1
  4665                           intcon3	equ	0xFF0
  4666                           postinc0	equ	0xFEE
  4667                           wreg	equ	0xFE8
  4668                           indf2	equ	0xFDF
  4669                           postinc2	equ	0xFDE
  4670                           postdec2	equ	0xFDD
  4671                           fsr2h	equ	0xFDA
  4672                           fsr2l	equ	0xFD9
  4673                           status	equ	0xFD8
  4674                           
  4675 ;; *************** function ___lwdiv *****************
  4676 ;; Defined at:
  4677 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;  dividend        2   16[BANK0 ] unsigned int 
  4680 ;;  divisor         2   18[BANK0 ] unsigned int 
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  quotient        2   20[BANK0 ] unsigned int 
  4683 ;;  counter         1   22[BANK0 ] unsigned char 
  4684 ;; Return value:  Size  Location     Type
  4685 ;;                  2   16[BANK0 ] unsigned int 
  4686 ;; Registers used:
  4687 ;;		wreg, status,2, status,0
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4693 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;Total ram usage:        7 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:    7
  4700 ;; This function calls:
  4701 ;;		Nothing
  4702 ;; This function is called by:
  4703 ;;		_printf
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           	psect	text20
  4708  001DF4                     __ptext20:
  4709                           	opt stack 0
  4710  001DF4                     ___lwdiv:
  4711                           	opt stack 21
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;incstack = 0
  4715  001DF4  0E00               	movlw	0
  4716  001DF6  0100               	movlb	0	; () banked
  4717  001DF8  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4718  001DFA  0E00               	movlw	0
  4719  001DFC  6F94               	movwf	___lwdiv@quotient& (0+255),b
  4720                           
  4721                           ; BSR set to: 0
  4722  001DFE  0100               	movlb	0	; () banked
  4723  001E00  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4724  001E02  0100               	movlb	0	; () banked
  4725  001E04  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4726  001E06  B4D8               	btfsc	status,2,c
  4727  001E08  D02C               	goto	l778
  4728                           
  4729                           ; BSR set to: 0
  4730  001E0A  0E01               	movlw	1
  4731  001E0C  0100               	movlb	0	; () banked
  4732  001E0E  6F96               	movwf	___lwdiv@counter& (0+255),b
  4733  001E10  D006               	goto	l3122
  4734  001E12                     l3120:
  4735                           
  4736                           ; BSR set to: 0
  4737  001E12  0100               	movlb	0	; () banked
  4738  001E14  90D8               	bcf	status,0,c
  4739  001E16  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
  4740  001E18  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4741  001E1A  0100               	movlb	0	; () banked
  4742  001E1C  2B96               	incf	___lwdiv@counter& (0+255),f,b
  4743  001E1E                     l3122:
  4744                           
  4745                           ; BSR set to: 0
  4746  001E1E  0100               	movlb	0	; () banked
  4747  001E20  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4748  001E22  D7F7               	goto	l3120
  4749  001E24                     l3124:
  4750                           
  4751                           ; BSR set to: 0
  4752  001E24  0100               	movlb	0	; () banked
  4753  001E26  90D8               	bcf	status,0,c
  4754  001E28  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  4755  001E2A  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4756                           
  4757                           ; BSR set to: 0
  4758  001E2C  0100               	movlb	0	; () banked
  4759  001E2E  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4760  001E30  0100               	movlb	0	; () banked
  4761  001E32  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
  4762  001E34  0100               	movlb	0	; () banked
  4763  001E36  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4764  001E38  0100               	movlb	0	; () banked
  4765  001E3A  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4766  001E3C  A0D8               	btfss	status,0,c
  4767  001E3E  D00A               	goto	l3132
  4768                           
  4769                           ; BSR set to: 0
  4770  001E40  0100               	movlb	0	; () banked
  4771  001E42  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4772  001E44  0100               	movlb	0	; () banked
  4773  001E46  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
  4774  001E48  0100               	movlb	0	; () banked
  4775  001E4A  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4776  001E4C  0100               	movlb	0	; () banked
  4777  001E4E  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4778                           
  4779                           ; BSR set to: 0
  4780  001E50  0100               	movlb	0	; () banked
  4781  001E52  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  4782  001E54                     l3132:
  4783                           
  4784                           ; BSR set to: 0
  4785  001E54  0100               	movlb	0	; () banked
  4786  001E56  90D8               	bcf	status,0,c
  4787  001E58  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4788  001E5A  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
  4789                           
  4790                           ; BSR set to: 0
  4791  001E5C  0100               	movlb	0	; () banked
  4792  001E5E  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  4793  001E60  D7E1               	goto	l3124
  4794  001E62                     l778:
  4795                           
  4796                           ; BSR set to: 0
  4797  001E62  C094  F090         	movff	___lwdiv@quotient,?___lwdiv
  4798  001E66  C095  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4799                           
  4800                           ; BSR set to: 0
  4801  001E6A  0012               	return		;funcret
  4802  001E6C                     __end_of___lwdiv:
  4803                           	opt stack 0
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           intcon	equ	0xFF2
  4811                           intcon2	equ	0xFF1
  4812                           intcon3	equ	0xFF0
  4813                           postinc0	equ	0xFEE
  4814                           wreg	equ	0xFE8
  4815                           indf2	equ	0xFDF
  4816                           postinc2	equ	0xFDE
  4817                           postdec2	equ	0xFDD
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function _lcdInst *****************
  4823 ;; Defined at:
  4824 ;;		line 26 in file "lcd.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  data            1    wreg     unsigned char 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  data            1   18[BANK0 ] unsigned char 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  1    wreg      void 
  4831 ;; Registers used:
  4832 ;;		wreg, status,2, status,0, cstack
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;Total ram usage:        1 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    8
  4845 ;; This function calls:
  4846 ;;		_lcdNibble
  4847 ;; This function is called by:
  4848 ;;		_initLCD
  4849 ;;		_standby
  4850 ;;		_date_time
  4851 ;;		_bottle_count
  4852 ;;		_bottle_time
  4853 ;;		_operation
  4854 ;;		_operationend
  4855 ;;		_emergencystop
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           	psect	text21
  4860  00252C                     __ptext21:
  4861                           	opt stack 0
  4862  00252C                     _lcdInst:
  4863                           	opt stack 21
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;incstack = 0
  4867                           ;lcdInst@data stored from wreg
  4868  00252C  0100               	movlb	0	; () banked
  4869  00252E  6F92               	movwf	lcdInst@data& (0+255),b
  4870                           
  4871                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4872  002530  948C               	bcf	3980,2,c	;volatile
  4873                           
  4874                           ;lcd.c: 28: lcdNibble(data);
  4875  002532  0100               	movlb	0	; () banked
  4876  002534  5192               	movf	lcdInst@data& (0+255),w,b
  4877  002536  EC12  F010         	call	_lcdNibble
  4878  00253A  0012               	return		;funcret
  4879  00253C                     __end_of_lcdInst:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           intcon2	equ	0xFF1
  4889                           intcon3	equ	0xFF0
  4890                           postinc0	equ	0xFEE
  4891                           wreg	equ	0xFE8
  4892                           indf2	equ	0xFDF
  4893                           postinc2	equ	0xFDE
  4894                           postdec2	equ	0xFDD
  4895                           fsr2h	equ	0xFDA
  4896                           fsr2l	equ	0xFD9
  4897                           status	equ	0xFD8
  4898                           
  4899 ;; *************** function _lcdNibble *****************
  4900 ;; Defined at:
  4901 ;;		line 36 in file "lcd.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  data            1    wreg     unsigned char 
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;  data            1   17[BANK0 ] unsigned char 
  4906 ;;  temp            1   16[BANK0 ] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      void 
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, status,0
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;Total ram usage:        2 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    7
  4923 ;; This function calls:
  4924 ;;		Nothing
  4925 ;; This function is called by:
  4926 ;;		_lcdInst
  4927 ;;		_putch
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           	psect	text22
  4932  002024                     __ptext22:
  4933                           	opt stack 0
  4934  002024                     _lcdNibble:
  4935                           	opt stack 20
  4936                           
  4937                           ;incstack = 0
  4938                           ;lcdNibble@data stored from wreg
  4939  002024  0100               	movlb	0	; () banked
  4940  002026  6F91               	movwf	lcdNibble@data& (0+255),b
  4941                           
  4942                           ;lcd.c: 38: char temp = data & 0xF0;
  4943  002028  0100               	movlb	0	; () banked
  4944  00202A  5191               	movf	lcdNibble@data& (0+255),w,b
  4945  00202C  0BF0               	andlw	240
  4946  00202E  0100               	movlb	0	; () banked
  4947  002030  6F90               	movwf	lcdNibble@temp& (0+255),b
  4948                           
  4949                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4950  002032  508C               	movf	3980,w,c	;volatile
  4951  002034  0B0F               	andlw	15
  4952  002036  6E8C               	movwf	3980,c	;volatile
  4953                           
  4954                           ;lcd.c: 40: LATD = temp | LATD;
  4955  002038  0100               	movlb	0	; () banked
  4956  00203A  5190               	movf	lcdNibble@temp& (0+255),w,b
  4957  00203C  108C               	iorwf	3980,w,c	;volatile
  4958  00203E  6E8C               	movwf	3980,c	;volatile
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4962  002040  968C               	bcf	3980,3,c	;volatile
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4966  002042  0E19               	movlw	25
  4967  002044                     u3877:
  4968  002044  2EE8               	decfsz	wreg,f,c
  4969  002046  D7FE               	bra	u3877
  4970                           
  4971                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4972  002048  868C               	bsf	3980,3,c	;volatile
  4973                           
  4974                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4975  00204A  0E19               	movlw	25
  4976  00204C                     u3887:
  4977  00204C  2EE8               	decfsz	wreg,f,c
  4978  00204E  D7FE               	bra	u3887
  4979                           
  4980                           ;lcd.c: 47: data = data << 4;
  4981  002050  0100               	movlb	0	; () banked
  4982  002052  3991               	swapf	lcdNibble@data& (0+255),w,b
  4983  002054  0BF0               	andlw	240
  4984  002056  0100               	movlb	0	; () banked
  4985  002058  6F91               	movwf	lcdNibble@data& (0+255),b
  4986                           
  4987                           ;lcd.c: 49: temp = data & 0xF0;
  4988  00205A  0100               	movlb	0	; () banked
  4989  00205C  5191               	movf	lcdNibble@data& (0+255),w,b
  4990  00205E  0BF0               	andlw	240
  4991  002060  0100               	movlb	0	; () banked
  4992  002062  6F90               	movwf	lcdNibble@temp& (0+255),b
  4993                           
  4994                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4995  002064  508C               	movf	3980,w,c	;volatile
  4996  002066  0B0F               	andlw	15
  4997  002068  6E8C               	movwf	3980,c	;volatile
  4998                           
  4999                           ;lcd.c: 51: LATD = temp | LATD;
  5000  00206A  0100               	movlb	0	; () banked
  5001  00206C  5190               	movf	lcdNibble@temp& (0+255),w,b
  5002  00206E  108C               	iorwf	3980,w,c	;volatile
  5003  002070  6E8C               	movwf	3980,c	;volatile
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  5007  002072  968C               	bcf	3980,3,c	;volatile
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5011  002074  0E19               	movlw	25
  5012  002076                     u3897:
  5013  002076  2EE8               	decfsz	wreg,f,c
  5014  002078  D7FE               	bra	u3897
  5015                           
  5016                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  5017  00207A  868C               	bsf	3980,3,c	;volatile
  5018                           
  5019                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5020  00207C  0E19               	movlw	25
  5021  00207E                     u3907:
  5022  00207E  2EE8               	decfsz	wreg,f,c
  5023  002080  D7FE               	bra	u3907
  5024  002082  0012               	return		;funcret
  5025  002084                     __end_of_lcdNibble:
  5026                           	opt stack 0
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           intcon	equ	0xFF2
  5034                           intcon2	equ	0xFF1
  5035                           intcon3	equ	0xFF0
  5036                           postinc0	equ	0xFEE
  5037                           wreg	equ	0xFE8
  5038                           indf2	equ	0xFDF
  5039                           postinc2	equ	0xFDE
  5040                           postdec2	equ	0xFDD
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045 ;; *************** function ___awmod *****************
  5046 ;; Defined at:
  5047 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  dividend        2   16[BANK0 ] int 
  5050 ;;  divisor         2   18[BANK0 ] int 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  sign            1   21[BANK0 ] unsigned char 
  5053 ;;  counter         1   20[BANK0 ] unsigned char 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  2   16[BANK0 ] int 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5063 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;Total ram usage:        6 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; Hardware stack levels required when called:    7
  5070 ;; This function calls:
  5071 ;;		Nothing
  5072 ;; This function is called by:
  5073 ;;		_bottle_count
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text23
  5078  001B1C                     __ptext23:
  5079                           	opt stack 0
  5080  001B1C                     ___awmod:
  5081                           	opt stack 22
  5082                           
  5083                           ;incstack = 0
  5084  001B1C  0E00               	movlw	0
  5085  001B1E  0100               	movlb	0	; () banked
  5086  001B20  6F95               	movwf	___awmod@sign& (0+255),b
  5087                           
  5088                           ; BSR set to: 0
  5089  001B22  0100               	movlb	0	; () banked
  5090  001B24  AF91               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5091  001B26  D008               	goto	l3508
  5092                           
  5093                           ; BSR set to: 0
  5094  001B28  0100               	movlb	0	; () banked
  5095  001B2A  6D90               	negf	___awmod@dividend& (0+255),b
  5096  001B2C  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  5097  001B2E  B0D8               	btfsc	status,0,c
  5098  001B30  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  5099                           
  5100                           ; BSR set to: 0
  5101  001B32  0E01               	movlw	1
  5102  001B34  0100               	movlb	0	; () banked
  5103  001B36  6F95               	movwf	___awmod@sign& (0+255),b
  5104  001B38                     l3508:
  5105                           
  5106                           ; BSR set to: 0
  5107  001B38  0100               	movlb	0	; () banked
  5108  001B3A  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5109  001B3C  D005               	goto	l3512
  5110                           
  5111                           ; BSR set to: 0
  5112  001B3E  0100               	movlb	0	; () banked
  5113  001B40  6D92               	negf	___awmod@divisor& (0+255),b
  5114  001B42  1F93               	comf	(___awmod@divisor+1)& (0+255),f,b
  5115  001B44  B0D8               	btfsc	status,0,c
  5116  001B46  2B93               	incf	(___awmod@divisor+1)& (0+255),f,b
  5117  001B48                     l3512:
  5118                           
  5119                           ; BSR set to: 0
  5120  001B48  0100               	movlb	0	; () banked
  5121  001B4A  5192               	movf	___awmod@divisor& (0+255),w,b
  5122  001B4C  0100               	movlb	0	; () banked
  5123  001B4E  1193               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5124  001B50  B4D8               	btfsc	status,2,c
  5125  001B52  D026               	goto	l3528
  5126                           
  5127                           ; BSR set to: 0
  5128  001B54  0E01               	movlw	1
  5129  001B56  0100               	movlb	0	; () banked
  5130  001B58  6F94               	movwf	___awmod@counter& (0+255),b
  5131  001B5A  D006               	goto	l3518
  5132  001B5C                     l3516:
  5133                           
  5134                           ; BSR set to: 0
  5135  001B5C  0100               	movlb	0	; () banked
  5136  001B5E  90D8               	bcf	status,0,c
  5137  001B60  3792               	rlcf	___awmod@divisor& (0+255),f,b
  5138  001B62  3793               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5139  001B64  0100               	movlb	0	; () banked
  5140  001B66  2B94               	incf	___awmod@counter& (0+255),f,b
  5141  001B68                     l3518:
  5142                           
  5143                           ; BSR set to: 0
  5144  001B68  0100               	movlb	0	; () banked
  5145  001B6A  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5146  001B6C  D7F7               	goto	l3516
  5147  001B6E                     l3520:
  5148                           
  5149                           ; BSR set to: 0
  5150  001B6E  0100               	movlb	0	; () banked
  5151  001B70  5192               	movf	___awmod@divisor& (0+255),w,b
  5152  001B72  0100               	movlb	0	; () banked
  5153  001B74  5D90               	subwf	___awmod@dividend& (0+255),w,b
  5154  001B76  0100               	movlb	0	; () banked
  5155  001B78  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  5156  001B7A  0100               	movlb	0	; () banked
  5157  001B7C  5991               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5158  001B7E  A0D8               	btfss	status,0,c
  5159  001B80  D008               	goto	l3524
  5160                           
  5161                           ; BSR set to: 0
  5162  001B82  0100               	movlb	0	; () banked
  5163  001B84  5192               	movf	___awmod@divisor& (0+255),w,b
  5164  001B86  0100               	movlb	0	; () banked
  5165  001B88  5F90               	subwf	___awmod@dividend& (0+255),f,b
  5166  001B8A  0100               	movlb	0	; () banked
  5167  001B8C  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  5168  001B8E  0100               	movlb	0	; () banked
  5169  001B90  5B91               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5170  001B92                     l3524:
  5171                           
  5172                           ; BSR set to: 0
  5173  001B92  0100               	movlb	0	; () banked
  5174  001B94  90D8               	bcf	status,0,c
  5175  001B96  3393               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5176  001B98  3392               	rrcf	___awmod@divisor& (0+255),f,b
  5177                           
  5178                           ; BSR set to: 0
  5179  001B9A  0100               	movlb	0	; () banked
  5180  001B9C  2F94               	decfsz	___awmod@counter& (0+255),f,b
  5181  001B9E  D7E7               	goto	l3520
  5182  001BA0                     l3528:
  5183                           
  5184                           ; BSR set to: 0
  5185  001BA0  0100               	movlb	0	; () banked
  5186  001BA2  5195               	movf	___awmod@sign& (0+255),w,b
  5187  001BA4  0100               	movlb	0	; () banked
  5188  001BA6  B4D8               	btfsc	status,2,c
  5189  001BA8  D005               	goto	l3532
  5190                           
  5191                           ; BSR set to: 0
  5192  001BAA  0100               	movlb	0	; () banked
  5193  001BAC  6D90               	negf	___awmod@dividend& (0+255),b
  5194  001BAE  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  5195  001BB0  B0D8               	btfsc	status,0,c
  5196  001BB2  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  5197  001BB4                     l3532:
  5198                           
  5199                           ; BSR set to: 0
  5200  001BB4  C090  F090         	movff	___awmod@dividend,?___awmod
  5201  001BB8  C091  F091         	movff	___awmod@dividend+1,?___awmod+1
  5202  001BBC  0012               	return	
  5203  001BBE                     __end_of___awmod:
  5204                           	opt stack 0
  5205                           tblptru	equ	0xFF8
  5206                           tblptrh	equ	0xFF7
  5207                           tblptrl	equ	0xFF6
  5208                           tablat	equ	0xFF5
  5209                           prodh	equ	0xFF4
  5210                           prodl	equ	0xFF3
  5211                           intcon	equ	0xFF2
  5212                           intcon2	equ	0xFF1
  5213                           intcon3	equ	0xFF0
  5214                           postinc0	equ	0xFEE
  5215                           wreg	equ	0xFE8
  5216                           indf2	equ	0xFDF
  5217                           postinc2	equ	0xFDE
  5218                           postdec2	equ	0xFDD
  5219                           fsr2h	equ	0xFDA
  5220                           fsr2l	equ	0xFD9
  5221                           status	equ	0xFD8
  5222                           
  5223 ;; *************** function _I2C_Master_Init *****************
  5224 ;; Defined at:
  5225 ;;		line 13 in file "I2C.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  c               4   29[BANK0 ] const unsigned long 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;		None
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  1    wreg      void 
  5232 ;; Registers used:
  5233 ;;		wreg, status,2, status,0, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5239 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;Total ram usage:        8 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    8
  5246 ;; This function calls:
  5247 ;;		___lldiv
  5248 ;; This function is called by:
  5249 ;;		_main
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text24
  5254  002084                     __ptext24:
  5255                           	opt stack 0
  5256  002084                     _I2C_Master_Init:
  5257                           	opt stack 22
  5258                           
  5259                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;incstack = 0
  5263  002084  0E00               	movlw	0
  5264  002086  6EC7               	movwf	4039,c	;volatile
  5265                           
  5266                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  5267  002088  0E28               	movlw	40
  5268  00208A  6EC6               	movwf	4038,c	;volatile
  5269                           
  5270                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  5271  00208C  0E00               	movlw	0
  5272  00208E  6EC5               	movwf	4037,c	;volatile
  5273                           
  5274                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  5275  002090  0E80               	movlw	128
  5276  002092  0100               	movlb	0	; () banked
  5277  002094  6F90               	movwf	___lldiv@dividend& (0+255),b
  5278  002096  0E96               	movlw	150
  5279  002098  6F91               	movwf	(___lldiv@dividend+1)& (0+255),b
  5280  00209A  0E98               	movlw	152
  5281  00209C  6F92               	movwf	(___lldiv@dividend+2)& (0+255),b
  5282  00209E  0E00               	movlw	0
  5283  0020A0  6F93               	movwf	(___lldiv@dividend+3)& (0+255),b
  5284  0020A2  C09D  F0A1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5285  0020A6  C09E  F0A2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5286  0020AA  C09F  F0A3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5287  0020AE  C0A0  F0A4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5288  0020B2  0E02               	movlw	2
  5289  0020B4                     u3455:
  5290  0020B4  90D8               	bcf	status,0,c
  5291  0020B6  0100               	movlb	0	; () banked
  5292  0020B8  37A1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5293  0020BA  37A2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5294  0020BC  37A3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5295  0020BE  37A4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5296  0020C0  2EE8               	decfsz	wreg,f,c
  5297  0020C2  D7F8               	goto	u3455
  5298  0020C4  C0A1  F094         	movff	??_I2C_Master_Init,___lldiv@divisor
  5299  0020C8  C0A2  F095         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5300  0020CC  C0A3  F096         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5301  0020D0  C0A4  F097         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5302  0020D4  ECD9  F00C         	call	___lldiv	;wreg free
  5303  0020D8  0100               	movlb	0	; () banked
  5304  0020DA  0590               	decf	?___lldiv& (0+255),w,b
  5305  0020DC  6EC8               	movwf	4040,c	;volatile
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;I2C.c: 20: TRISC3 = 1;
  5309  0020DE  8694               	bsf	3988,3,c	;volatile
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;I2C.c: 21: TRISC4 = 1;
  5313  0020E0  8894               	bsf	3988,4,c	;volatile
  5314                           
  5315                           ; BSR set to: 0
  5316  0020E2  0012               	return		;funcret
  5317  0020E4                     __end_of_I2C_Master_Init:
  5318                           	opt stack 0
  5319                           tblptru	equ	0xFF8
  5320                           tblptrh	equ	0xFF7
  5321                           tblptrl	equ	0xFF6
  5322                           tablat	equ	0xFF5
  5323                           prodh	equ	0xFF4
  5324                           prodl	equ	0xFF3
  5325                           intcon	equ	0xFF2
  5326                           intcon2	equ	0xFF1
  5327                           intcon3	equ	0xFF0
  5328                           postinc0	equ	0xFEE
  5329                           wreg	equ	0xFE8
  5330                           indf2	equ	0xFDF
  5331                           postinc2	equ	0xFDE
  5332                           postdec2	equ	0xFDD
  5333                           fsr2h	equ	0xFDA
  5334                           fsr2l	equ	0xFD9
  5335                           status	equ	0xFD8
  5336                           
  5337 ;; *************** function ___lldiv *****************
  5338 ;; Defined at:
  5339 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;  dividend        4   16[BANK0 ] unsigned long 
  5342 ;;  divisor         4   20[BANK0 ] unsigned long 
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;  quotient        4   24[BANK0 ] unsigned long 
  5345 ;;  counter         1   28[BANK0 ] unsigned char 
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  4   16[BANK0 ] unsigned long 
  5348 ;; Registers used:
  5349 ;;		wreg, status,2, status,0
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5355 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5358 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;Total ram usage:       13 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    7
  5362 ;; This function calls:
  5363 ;;		Nothing
  5364 ;; This function is called by:
  5365 ;;		_I2C_Master_Init
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text25
  5370  0019B2                     __ptext25:
  5371                           	opt stack 0
  5372  0019B2                     ___lldiv:
  5373                           	opt stack 22
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;incstack = 0
  5377  0019B2  0E00               	movlw	0
  5378  0019B4  0100               	movlb	0	; () banked
  5379  0019B6  6F98               	movwf	___lldiv@quotient& (0+255),b
  5380  0019B8  0E00               	movlw	0
  5381  0019BA  6F99               	movwf	(___lldiv@quotient+1)& (0+255),b
  5382  0019BC  0E00               	movlw	0
  5383  0019BE  6F9A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5384  0019C0  0E00               	movlw	0
  5385  0019C2  6F9B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5386                           
  5387                           ; BSR set to: 0
  5388  0019C4  0100               	movlb	0	; () banked
  5389  0019C6  5194               	movf	___lldiv@divisor& (0+255),w,b
  5390  0019C8  0100               	movlb	0	; () banked
  5391  0019CA  1195               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5392  0019CC  0100               	movlb	0	; () banked
  5393  0019CE  1196               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5394  0019D0  0100               	movlb	0	; () banked
  5395  0019D2  1197               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5396  0019D4  B4D8               	btfsc	status,2,c
  5397  0019D6  D042               	goto	l725
  5398                           
  5399                           ; BSR set to: 0
  5400  0019D8  0E01               	movlw	1
  5401  0019DA  0100               	movlb	0	; () banked
  5402  0019DC  6F9C               	movwf	___lldiv@counter& (0+255),b
  5403  0019DE  D008               	goto	l3544
  5404  0019E0                     l3542:
  5405                           
  5406                           ; BSR set to: 0
  5407  0019E0  0100               	movlb	0	; () banked
  5408  0019E2  90D8               	bcf	status,0,c
  5409  0019E4  3794               	rlcf	___lldiv@divisor& (0+255),f,b
  5410  0019E6  3795               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5411  0019E8  3796               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5412  0019EA  3797               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5413  0019EC  0100               	movlb	0	; () banked
  5414  0019EE  2B9C               	incf	___lldiv@counter& (0+255),f,b
  5415  0019F0                     l3544:
  5416                           
  5417                           ; BSR set to: 0
  5418  0019F0  0100               	movlb	0	; () banked
  5419  0019F2  AF97               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5420  0019F4  D7F5               	goto	l3542
  5421  0019F6                     l3546:
  5422                           
  5423                           ; BSR set to: 0
  5424  0019F6  0100               	movlb	0	; () banked
  5425  0019F8  90D8               	bcf	status,0,c
  5426  0019FA  3798               	rlcf	___lldiv@quotient& (0+255),f,b
  5427  0019FC  3799               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5428  0019FE  379A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5429  001A00  379B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5430                           
  5431                           ; BSR set to: 0
  5432  001A02  0100               	movlb	0	; () banked
  5433  001A04  5194               	movf	___lldiv@divisor& (0+255),w,b
  5434  001A06  0100               	movlb	0	; () banked
  5435  001A08  5D90               	subwf	___lldiv@dividend& (0+255),w,b
  5436  001A0A  0100               	movlb	0	; () banked
  5437  001A0C  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5438  001A0E  0100               	movlb	0	; () banked
  5439  001A10  5991               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5440  001A12  0100               	movlb	0	; () banked
  5441  001A14  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5442  001A16  0100               	movlb	0	; () banked
  5443  001A18  5992               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5444  001A1A  0100               	movlb	0	; () banked
  5445  001A1C  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5446  001A1E  0100               	movlb	0	; () banked
  5447  001A20  5993               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5448  001A22  A0D8               	btfss	status,0,c
  5449  001A24  D012               	goto	l3554
  5450                           
  5451                           ; BSR set to: 0
  5452  001A26  0100               	movlb	0	; () banked
  5453  001A28  5194               	movf	___lldiv@divisor& (0+255),w,b
  5454  001A2A  0100               	movlb	0	; () banked
  5455  001A2C  5F90               	subwf	___lldiv@dividend& (0+255),f,b
  5456  001A2E  0100               	movlb	0	; () banked
  5457  001A30  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5458  001A32  0100               	movlb	0	; () banked
  5459  001A34  5B91               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5460  001A36  0100               	movlb	0	; () banked
  5461  001A38  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5462  001A3A  0100               	movlb	0	; () banked
  5463  001A3C  5B92               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5464  001A3E  0100               	movlb	0	; () banked
  5465  001A40  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5466  001A42  0100               	movlb	0	; () banked
  5467  001A44  5B93               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5468                           
  5469                           ; BSR set to: 0
  5470  001A46  0100               	movlb	0	; () banked
  5471  001A48  8198               	bsf	___lldiv@quotient& (0+255),0,b
  5472  001A4A                     l3554:
  5473                           
  5474                           ; BSR set to: 0
  5475  001A4A  0100               	movlb	0	; () banked
  5476  001A4C  90D8               	bcf	status,0,c
  5477  001A4E  3397               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5478  001A50  3396               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5479  001A52  3395               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5480  001A54  3394               	rrcf	___lldiv@divisor& (0+255),f,b
  5481                           
  5482                           ; BSR set to: 0
  5483  001A56  0100               	movlb	0	; () banked
  5484  001A58  2F9C               	decfsz	___lldiv@counter& (0+255),f,b
  5485  001A5A  D7CD               	goto	l3546
  5486  001A5C                     l725:
  5487                           
  5488                           ; BSR set to: 0
  5489  001A5C  C098  F090         	movff	___lldiv@quotient,?___lldiv
  5490  001A60  C099  F091         	movff	___lldiv@quotient+1,?___lldiv+1
  5491  001A64  C09A  F092         	movff	___lldiv@quotient+2,?___lldiv+2
  5492  001A68  C09B  F093         	movff	___lldiv@quotient+3,?___lldiv+3
  5493                           
  5494                           ; BSR set to: 0
  5495  001A6C  0012               	return		;funcret
  5496  001A6E                     __end_of___lldiv:
  5497                           	opt stack 0
  5498                           tblptru	equ	0xFF8
  5499                           tblptrh	equ	0xFF7
  5500                           tblptrl	equ	0xFF6
  5501                           tablat	equ	0xFF5
  5502                           prodh	equ	0xFF4
  5503                           prodl	equ	0xFF3
  5504                           intcon	equ	0xFF2
  5505                           intcon2	equ	0xFF1
  5506                           intcon3	equ	0xFF0
  5507                           postinc0	equ	0xFEE
  5508                           wreg	equ	0xFE8
  5509                           indf2	equ	0xFDF
  5510                           postinc2	equ	0xFDE
  5511                           postdec2	equ	0xFDD
  5512                           fsr2h	equ	0xFDA
  5513                           fsr2l	equ	0xFD9
  5514                           status	equ	0xFD8
  5515                           
  5516 ;; *************** function _isr *****************
  5517 ;; Defined at:
  5518 ;;		line 126 in file "main.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;		None
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  i               1  116[COMRAM] unsigned char 
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  1    wreg      void 
  5525 ;; Registers used:
  5526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/0
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5533 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5534 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5535 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5536 ;;Total ram usage:       19 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; Hardware stack levels required when called:    6
  5539 ;; This function calls:
  5540 ;;		_dec_to_hex
  5541 ;;		i2___wmul
  5542 ;;		i2_lcdInst
  5543 ;;		i2_printf
  5544 ;;		i2_read_time
  5545 ;; This function is called by:
  5546 ;;		Interrupt level 2
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	intcode
  5551  000008                     __pintcode:
  5552                           	opt stack 0
  5553  000008                     _isr:
  5554                           	opt stack 20
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;incstack = 0
  5558  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5559  00000A  ED06  F004         	call	int_func,f	;refresh shadow registers
  5560                           tblptru	equ	0xFF8
  5561                           tblptrh	equ	0xFF7
  5562                           tblptrl	equ	0xFF6
  5563                           tablat	equ	0xFF5
  5564                           prodh	equ	0xFF4
  5565                           prodl	equ	0xFF3
  5566                           intcon	equ	0xFF2
  5567                           intcon2	equ	0xFF1
  5568                           intcon3	equ	0xFF0
  5569                           postinc0	equ	0xFEE
  5570                           wreg	equ	0xFE8
  5571                           indf2	equ	0xFDF
  5572                           postinc2	equ	0xFDE
  5573                           postdec2	equ	0xFDD
  5574                           fsr2h	equ	0xFDA
  5575                           fsr2l	equ	0xFD9
  5576                           status	equ	0xFD8
  5577                           
  5578                           	psect	intcode_body
  5579  00080C                     __pintcode_body:
  5580                           	opt stack 20
  5581  00080C                     int_func:
  5582                           	opt stack 20
  5583  00080C  0006               	pop		; remove dummy address from shadow register refresh
  5584  00080E  CFFA F082          	movff	pclath,??_isr+2
  5585  000812  CFFB F083          	movff	pclatu,??_isr+3
  5586  000816  CFE9 F084          	movff	fsr0l,??_isr+4
  5587  00081A  CFEA F085          	movff	fsr0h,??_isr+5
  5588  00081E  CFE1 F086          	movff	fsr1l,??_isr+6
  5589  000822  CFE2 F087          	movff	fsr1h,??_isr+7
  5590  000826  CFD9 F088          	movff	fsr2l,??_isr+8
  5591  00082A  CFDA F089          	movff	fsr2h,??_isr+9
  5592  00082E  CFF3 F08A          	movff	prodl,??_isr+10
  5593  000832  CFF4 F08B          	movff	prodh,??_isr+11
  5594  000836  CFF6 F08C          	movff	tblptrl,??_isr+12
  5595  00083A  CFF7 F08D          	movff	tblptrh,??_isr+13
  5596  00083E  CFF8 F08E          	movff	tblptru,??_isr+14
  5597  000842  CFF5 F08F          	movff	tablat,??_isr+15
  5598                           
  5599                           ;main.c: 127: if (INT1IF) {
  5600  000846  B0F0               	btfsc	intcon3,0,c	;volatile
  5601  000848  D092               	goto	i2l4094
  5602  00084A  D0A9               	goto	i2l212
  5603  00084C                     i2l4040:
  5604                           
  5605                           ;main.c: 130: curr_state = STANDBY;
  5606  00084C  0E00               	movlw	0
  5607  00084E  0100               	movlb	0	; () banked
  5608  000850  6FC7               	movwf	_curr_state& (0+255),b
  5609                           
  5610                           ;main.c: 131: bottle_count_disp = 0;
  5611  000852  0E00               	movlw	0
  5612  000854  0100               	movlb	0	; () banked
  5613  000856  6FC9               	movwf	(_bottle_count_disp+1)& (0+255),b
  5614  000858  0E00               	movlw	0
  5615  00085A  6FC8               	movwf	_bottle_count_disp& (0+255),b
  5616                           
  5617                           ;main.c: 132: break;
  5618  00085C  D09E               	goto	i2l215
  5619  00085E                     i2l216:
  5620                           
  5621                           ;main.c: 134: TMR0IE = 1;
  5622  00085E  8AF2               	bsf	intcon,5,c	;volatile
  5623                           
  5624                           ;main.c: 135: TMR0ON = 1;
  5625  000860  8ED5               	bsf	4053,7,c	;volatile
  5626                           
  5627                           ;main.c: 136: TMR0 = 0;
  5628  000862  0E00               	movlw	0
  5629  000864  6ED7               	movwf	4055,c	;volatile
  5630  000866  0E00               	movlw	0
  5631  000868  6ED6               	movwf	4054,c	;volatile
  5632                           
  5633                           ;main.c: 137: read_time();
  5634  00086A  ECAD  F00F         	call	i2_read_time	;wreg free
  5635                           
  5636                           ;main.c: 138: start_time[1] = time[1];
  5637  00086E  C0BB  F07D         	movff	_time+1,_start_time+1
  5638                           
  5639                           ;main.c: 139: start_time[0] = time[0];
  5640  000872  C0BA  F07C         	movff	_time,_start_time
  5641                           
  5642                           ;main.c: 140: lcdInst(0b00000001);
  5643  000876  0E01               	movlw	1
  5644  000878  ECA4  F012         	call	i2_lcdInst
  5645                           
  5646                           ;main.c: 141: curr_state = OPERATION;
  5647  00087C  0E02               	movlw	2
  5648  00087E  D069               	goto	L3
  5649  000880                     i2l4054:
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;main.c: 142: bottle_count_disp = -1;
  5653  000880  0100               	movlb	0	; () banked
  5654  000882  69C8               	setf	_bottle_count_disp& (0+255),b
  5655  000884  69C9               	setf	(_bottle_count_disp+1)& (0+255),b
  5656                           
  5657                           ;main.c: 143: break;
  5658  000886  D089               	goto	i2l215
  5659  000888                     i2l4056:
  5660                           
  5661                           ;main.c: 145: curr_state = BOTTLECOUNT;
  5662  000888  0E05               	movlw	5
  5663  00088A  0100               	movlb	0	; () banked
  5664  00088C  6FC7               	movwf	_curr_state& (0+255),b
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;main.c: 146: bottle_count_disp += 1;
  5668  00088E  0100               	movlb	0	; () banked
  5669  000890  4BC8               	infsnz	_bottle_count_disp& (0+255),f,b
  5670  000892  2BC9               	incf	(_bottle_count_disp+1)& (0+255),f,b
  5671  000894                     i2l4060:
  5672  000894  0E1F               	movlw	31
  5673  000896  1881               	xorwf	3969,w,c	;volatile
  5674  000898  A4D8               	btfss	status,2,c
  5675  00089A  D07F               	goto	i2l215
  5676  00089C  D7FB               	goto	i2l4060
  5677  00089E                     i2l4062:
  5678                           
  5679                           ;main.c: 150: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5680  00089E  C07D  F063         	movff	_start_time+1,dec_to_hex@num
  5681  0008A2  6A64               	clrf	dec_to_hex@num+1,c
  5682  0008A4  EC52  F009         	call	_dec_to_hex	;wreg free
  5683  0008A8  C063  F073         	movff	?_dec_to_hex,_isr$1112
  5684  0008AC  C064  F074         	movff	?_dec_to_hex+1,_isr$1112+1
  5685                           
  5686                           ;main.c: 150: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5687  0008B0  C073  F001         	movff	_isr$1112,i2___wmul@multiplier
  5688  0008B4  C074  F002         	movff	_isr$1112+1,i2___wmul@multiplier+1
  5689  0008B8  0E00               	movlw	0
  5690  0008BA  6E04               	movwf	i2___wmul@multiplicand+1,c
  5691  0008BC  0E3C               	movlw	60
  5692  0008BE  6E03               	movwf	i2___wmul@multiplicand,c
  5693  0008C0  EC2E  F012         	call	i2___wmul	;wreg free
  5694  0008C4  C001  F080         	movff	?i2___wmul,??_isr
  5695  0008C8  C002  F081         	movff	?i2___wmul+1,??_isr+1
  5696  0008CC  C07C  F063         	movff	_start_time,dec_to_hex@num
  5697  0008D0  6A64               	clrf	dec_to_hex@num+1,c
  5698  0008D2  EC52  F009         	call	_dec_to_hex	;wreg free
  5699  0008D6  5063               	movf	?_dec_to_hex,w,c
  5700  0008D8  0100               	movlb	0	; () banked
  5701  0008DA  2580               	addwf	??_isr& (0+255),w,b
  5702  0008DC  0100               	movlb	0	; () banked
  5703  0008DE  6FC5               	movwf	_stime& (0+255),b
  5704  0008E0  5064               	movf	?_dec_to_hex+1,w,c
  5705  0008E2  0100               	movlb	0	; () banked
  5706  0008E4  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5707  0008E6  0100               	movlb	0	; () banked
  5708  0008E8  6FC6               	movwf	(_stime+1)& (0+255),b
  5709                           
  5710                           ;main.c: 151: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5711  0008EA  C077  F063         	movff	_end_time+1,dec_to_hex@num
  5712  0008EE  6A64               	clrf	dec_to_hex@num+1,c
  5713  0008F0  EC52  F009         	call	_dec_to_hex	;wreg free
  5714  0008F4  C063  F073         	movff	?_dec_to_hex,_isr$1112
  5715  0008F8  C064  F074         	movff	?_dec_to_hex+1,_isr$1112+1
  5716                           
  5717                           ;main.c: 151: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5718  0008FC  C073  F001         	movff	_isr$1112,i2___wmul@multiplier
  5719  000900  C074  F002         	movff	_isr$1112+1,i2___wmul@multiplier+1
  5720  000904  0E00               	movlw	0
  5721  000906  6E04               	movwf	i2___wmul@multiplicand+1,c
  5722  000908  0E3C               	movlw	60
  5723  00090A  6E03               	movwf	i2___wmul@multiplicand,c
  5724  00090C  EC2E  F012         	call	i2___wmul	;wreg free
  5725  000910  C001  F080         	movff	?i2___wmul,??_isr
  5726  000914  C002  F081         	movff	?i2___wmul+1,??_isr+1
  5727  000918  C076  F063         	movff	_end_time,dec_to_hex@num
  5728  00091C  6A64               	clrf	dec_to_hex@num+1,c
  5729  00091E  EC52  F009         	call	_dec_to_hex	;wreg free
  5730  000922  5063               	movf	?_dec_to_hex,w,c
  5731  000924  0100               	movlb	0	; () banked
  5732  000926  2580               	addwf	??_isr& (0+255),w,b
  5733  000928  0100               	movlb	0	; () banked
  5734  00092A  6FC1               	movwf	_etime& (0+255),b
  5735  00092C  5064               	movf	?_dec_to_hex+1,w,c
  5736  00092E  0100               	movlb	0	; () banked
  5737  000930  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5738  000932  0100               	movlb	0	; () banked
  5739  000934  6FC2               	movwf	(_etime+1)& (0+255),b
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;main.c: 152: curr_state = BOTTLETIME;
  5743  000936  0E06               	movlw	6
  5744  000938  D00C               	goto	L3
  5745  00093A                     i2l4068:
  5746                           
  5747                           ;main.c: 156: curr_state = DATETIME;
  5748  00093A  0E04               	movlw	4
  5749  00093C  D00A               	goto	L3
  5750  00093E                     i2l4072:
  5751                           
  5752                           ;main.c: 160: read_time();
  5753  00093E  ECAD  F00F         	call	i2_read_time	;wreg free
  5754                           
  5755                           ;main.c: 161: end_time[1] = time[1];
  5756  000942  C0BB  F077         	movff	_time+1,_end_time+1
  5757                           
  5758                           ;main.c: 162: end_time[0] = time[0];
  5759  000946  C0BA  F076         	movff	_time,_end_time
  5760                           
  5761                           ;main.c: 163: lcdInst(0b00000001);
  5762  00094A  0E01               	movlw	1
  5763  00094C  ECA4  F012         	call	i2_lcdInst
  5764                           
  5765                           ;main.c: 164: curr_state = OPERATIONEND;
  5766  000950  0E03               	movlw	3
  5767  000952                     L3:
  5768  000952  0100               	movlb	0	; () banked
  5769  000954  6FC7               	movwf	_curr_state& (0+255),b
  5770  000956  D794               	goto	i2l4054
  5771  000958                     i2l4084:
  5772                           
  5773                           ;main.c: 168: lcdInst(0b00000001);
  5774  000958  0E01               	movlw	1
  5775  00095A  ECA4  F012         	call	i2_lcdInst
  5776                           
  5777                           ;main.c: 169: curr_state = EMERGENCYSTOP;
  5778  00095E  0E01               	movlw	1
  5779  000960  0100               	movlb	0	; () banked
  5780  000962  6FC7               	movwf	_curr_state& (0+255),b
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;main.c: 170: bottle_count_disp = -1;
  5784  000964  0100               	movlb	0	; () banked
  5785  000966  69C8               	setf	_bottle_count_disp& (0+255),b
  5786  000968  69C9               	setf	(_bottle_count_disp+1)& (0+255),b
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;main.c: 171: TMR0ON = 0;
  5790  00096A  9ED5               	bcf	4053,7,c	;volatile
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;main.c: 173: }
  5794                           
  5795                           ;main.c: 172: break;
  5796  00096C  D016               	goto	i2l215
  5797  00096E                     i2l4094:
  5798  00096E  5081               	movf	3969,w,c	;volatile
  5799                           
  5800                           ; Switch size 1, requested type "space"
  5801                           ; Number of cases is 7, Range of values is 15 to 239
  5802                           ; switch strategies available:
  5803                           ; Name         Instructions Cycles
  5804                           ; simple_byte           22    12 (average)
  5805                           ;	Chosen strategy is simple_byte
  5806  000970  0A0F               	xorlw	15	; case 15
  5807  000972  B4D8               	btfsc	status,2,c
  5808  000974  D774               	goto	i2l216
  5809  000976  0A10               	xorlw	16	; case 31
  5810  000978  B4D8               	btfsc	status,2,c
  5811  00097A  D786               	goto	i2l4056
  5812  00097C  0A30               	xorlw	48	; case 47
  5813  00097E  B4D8               	btfsc	status,2,c
  5814  000980  D78E               	goto	i2l4062
  5815  000982  0A10               	xorlw	16	; case 63
  5816  000984  B4D8               	btfsc	status,2,c
  5817  000986  D7D9               	goto	i2l4068
  5818  000988  0A70               	xorlw	112	; case 79
  5819  00098A  B4D8               	btfsc	status,2,c
  5820  00098C  D7D8               	goto	i2l4072
  5821  00098E  0A80               	xorlw	128	; case 207
  5822  000990  B4D8               	btfsc	status,2,c
  5823  000992  D7E2               	goto	i2l4084
  5824  000994  0A20               	xorlw	32	; case 239
  5825  000996  B4D8               	btfsc	status,2,c
  5826  000998  D759               	goto	i2l4040
  5827  00099A                     i2l215:
  5828                           
  5829                           ;main.c: 174: INT1IF = 0;
  5830  00099A  90F0               	bcf	intcon3,0,c	;volatile
  5831                           
  5832                           ;main.c: 175: }
  5833  00099C  D02E               	goto	i2l233
  5834  00099E                     i2l212:
  5835                           
  5836                           ;main.c: 176: else if (TMR0IF) {
  5837  00099E  A4F2               	btfss	intcon,2,c	;volatile
  5838  0009A0  D012               	goto	i2l4112
  5839                           
  5840                           ;main.c: 177: TMR0ON = 0;
  5841  0009A2  9ED5               	bcf	4053,7,c	;volatile
  5842                           
  5843                           ;main.c: 178: read_time();
  5844  0009A4  ECAD  F00F         	call	i2_read_time	;wreg free
  5845                           
  5846                           ;main.c: 179: end_time[1] = time[1];
  5847  0009A8  C0BB  F077         	movff	_time+1,_end_time+1
  5848                           
  5849                           ;main.c: 180: end_time[0] = time[0];
  5850  0009AC  C0BA  F076         	movff	_time,_end_time
  5851                           
  5852                           ;main.c: 181: lcdInst(0b00000001);
  5853  0009B0  0E01               	movlw	1
  5854  0009B2  ECA4  F012         	call	i2_lcdInst
  5855                           
  5856                           ;main.c: 182: curr_state = OPERATIONEND;
  5857  0009B6  0E03               	movlw	3
  5858  0009B8  0100               	movlb	0	; () banked
  5859  0009BA  6FC7               	movwf	_curr_state& (0+255),b
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;main.c: 183: bottle_count_disp = -1;
  5863  0009BC  0100               	movlb	0	; () banked
  5864  0009BE  69C8               	setf	_bottle_count_disp& (0+255),b
  5865  0009C0  69C9               	setf	(_bottle_count_disp+1)& (0+255),b
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;main.c: 184: TMR0IF = 0;
  5869  0009C2  94F2               	bcf	intcon,2,c	;volatile
  5870                           
  5871                           ;main.c: 185: }
  5872  0009C4  D01A               	goto	i2l233
  5873  0009C6                     i2l4112:
  5874                           
  5875                           ;main.c: 188: lcdInst(0b10000000);
  5876  0009C6  0E80               	movlw	128
  5877  0009C8  ECA4  F012         	call	i2_lcdInst
  5878                           
  5879                           ;main.c: 189: printf("bad interrupt");
  5880  0009CC  0EE7               	movlw	low STR_1
  5881  0009CE  6E0D               	movwf	i2printf@f,c
  5882  0009D0  0EFF               	movlw	high STR_1
  5883  0009D2  6E0E               	movwf	i2printf@f+1,c
  5884  0009D4  EC3C  F002         	call	i2_printf	;wreg free
  5885                           
  5886                           ;main.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  5887  0009D8  0E00               	movlw	0
  5888  0009DA  6E75               	movwf	isr@i,c
  5889  0009DC                     i2l4118:
  5890  0009DC  0E63               	movlw	99
  5891  0009DE  6475               	cpfsgt	isr@i,c
  5892  0009E0  D001               	goto	i2l4122
  5893  0009E2  D7F1               	goto	i2l4112
  5894  0009E4                     i2l4122:
  5895  0009E4  0E21               	movlw	33
  5896  0009E6  0100               	movlb	0	; () banked
  5897  0009E8  6F80               	movwf	??_isr& (0+255),b
  5898  0009EA  0E76               	movlw	118
  5899  0009EC                     i2u391_47:
  5900  0009EC  2EE8               	decfsz	wreg,f,c
  5901  0009EE  D7FE               	bra	i2u391_47
  5902  0009F0  2F80               	decfsz	??_isr& (0+255),f,b
  5903  0009F2  D7FC               	bra	i2u391_47
  5904  0009F4  F000               	nop	
  5905  0009F6  2A75               	incf	isr@i,f,c
  5906  0009F8  D7F1               	goto	i2l4118
  5907  0009FA                     i2l233:
  5908  0009FA  C08F  FFF5         	movff	??_isr+15,tablat
  5909  0009FE  C08E  FFF8         	movff	??_isr+14,tblptru
  5910  000A02  C08D  FFF7         	movff	??_isr+13,tblptrh
  5911  000A06  C08C  FFF6         	movff	??_isr+12,tblptrl
  5912  000A0A  C08B  FFF4         	movff	??_isr+11,prodh
  5913  000A0E  C08A  FFF3         	movff	??_isr+10,prodl
  5914  000A12  C089  FFDA         	movff	??_isr+9,fsr2h
  5915  000A16  C088  FFD9         	movff	??_isr+8,fsr2l
  5916  000A1A  C087  FFE2         	movff	??_isr+7,fsr1h
  5917  000A1E  C086  FFE1         	movff	??_isr+6,fsr1l
  5918  000A22  C085  FFEA         	movff	??_isr+5,fsr0h
  5919  000A26  C084  FFE9         	movff	??_isr+4,fsr0l
  5920  000A2A  C083  FFFB         	movff	??_isr+3,pclatu
  5921  000A2E  C082  FFFA         	movff	??_isr+2,pclath
  5922  000A32  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5923  000A34  0011               	retfie		f
  5924  000A36                     __end_of_isr:
  5925                           	opt stack 0
  5926                           pclatu	equ	0xFFB
  5927                           pclath	equ	0xFFA
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           intcon	equ	0xFF2
  5935                           intcon2	equ	0xFF1
  5936                           intcon3	equ	0xFF0
  5937                           postinc0	equ	0xFEE
  5938                           fsr0h	equ	0xFEA
  5939                           fsr0l	equ	0xFE9
  5940                           wreg	equ	0xFE8
  5941                           fsr1h	equ	0xFE2
  5942                           fsr1l	equ	0xFE1
  5943                           indf2	equ	0xFDF
  5944                           postinc2	equ	0xFDE
  5945                           postdec2	equ	0xFDD
  5946                           fsr2h	equ	0xFDA
  5947                           fsr2l	equ	0xFD9
  5948                           status	equ	0xFD8
  5949                           
  5950 ;; *************** function i2_read_time *****************
  5951 ;; Defined at:
  5952 ;;		line 240 in file "main.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;		None
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;  read_time       1    3[COMRAM] unsigned char 
  5957 ;; Return value:  Size  Location     Type
  5958 ;;                  1    wreg      void 
  5959 ;; Registers used:
  5960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5961 ;; Tracked objects:
  5962 ;;		On entry : 0/0
  5963 ;;		On exit  : 0/0
  5964 ;;		Unchanged: 0/0
  5965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;Total ram usage:        1 bytes
  5971 ;; Hardware stack levels used:    1
  5972 ;; Hardware stack levels required when called:    2
  5973 ;; This function calls:
  5974 ;;		i2_I2C_Master_Read
  5975 ;;		i2_I2C_Master_Start
  5976 ;;		i2_I2C_Master_Stop
  5977 ;;		i2_I2C_Master_Write
  5978 ;; This function is called by:
  5979 ;;		_isr
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text27
  5984  001F5A                     __ptext27:
  5985                           	opt stack 0
  5986  001F5A                     i2_read_time:
  5987                           	opt stack 23
  5988                           
  5989                           ;main.c: 242: I2C_Master_Start();
  5990                           
  5991                           ;incstack = 0
  5992  001F5A  ECC0  F012         	call	i2_I2C_Master_Start	;wreg free
  5993                           
  5994                           ;main.c: 243: I2C_Master_Write(0b11010000);
  5995  001F5E  0E00               	movlw	0
  5996  001F60  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5997  001F62  0ED0               	movlw	208
  5998  001F64  6E02               	movwf	i2I2C_Master_Write@d,c
  5999  001F66  ECAF  F012         	call	i2_I2C_Master_Write	;wreg free
  6000                           
  6001                           ;main.c: 244: I2C_Master_Write(0x00);
  6002  001F6A  0E00               	movlw	0
  6003  001F6C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6004  001F6E  0E00               	movlw	0
  6005  001F70  6E02               	movwf	i2I2C_Master_Write@d,c
  6006  001F72  ECAF  F012         	call	i2_I2C_Master_Write	;wreg free
  6007                           
  6008                           ;main.c: 245: I2C_Master_Stop();
  6009  001F76  ECBC  F012         	call	i2_I2C_Master_Stop	;wreg free
  6010                           
  6011                           ;main.c: 248: I2C_Master_Start();
  6012  001F7A  ECC0  F012         	call	i2_I2C_Master_Start	;wreg free
  6013                           
  6014                           ;main.c: 249: I2C_Master_Write(0b11010001);
  6015  001F7E  0E00               	movlw	0
  6016  001F80  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6017  001F82  0ED1               	movlw	209
  6018  001F84  6E02               	movwf	i2I2C_Master_Write@d,c
  6019  001F86  ECAF  F012         	call	i2_I2C_Master_Write	;wreg free
  6020                           
  6021                           ;main.c: 250: for(unsigned char i=0;i<0x06;i++){
  6022  001F8A  0E00               	movlw	0
  6023  001F8C  6E04               	movwf	i2read_time@i,c
  6024  001F8E                     i2l3816:
  6025  001F8E  0E05               	movlw	5
  6026  001F90  6404               	cpfsgt	i2read_time@i,c
  6027  001F92  D001               	goto	i2l3820
  6028  001F94  D00E               	goto	i2l3826
  6029  001F96                     i2l3820:
  6030                           
  6031                           ;main.c: 251: time[i] = I2C_Master_Read(1);
  6032  001F96  5004               	movf	i2read_time@i,w,c
  6033  001F98  0D01               	mullw	1
  6034  001F9A  0EBA               	movlw	low _time
  6035  001F9C  24F3               	addwf	prodl,w,c
  6036  001F9E  6ED9               	movwf	fsr2l,c
  6037  001FA0  0E00               	movlw	high _time
  6038  001FA2  20F4               	addwfc	prodh,w,c
  6039  001FA4  6EDA               	movwf	fsr2h,c
  6040  001FA6  0E01               	movlw	1
  6041  001FA8  EC1B  F012         	call	i2_I2C_Master_Read
  6042  001FAC  6EDF               	movwf	indf2,c
  6043  001FAE  2A04               	incf	i2read_time@i,f,c
  6044  001FB0  D7EE               	goto	i2l3816
  6045  001FB2                     i2l3826:
  6046                           
  6047                           ;main.c: 252: }
  6048                           ;main.c: 253: time[6] = I2C_Master_Read(0);
  6049  001FB2  0E00               	movlw	0
  6050  001FB4  EC1B  F012         	call	i2_I2C_Master_Read
  6051  001FB8  0100               	movlb	0	; () banked
  6052  001FBA  6FC0               	movwf	(_time+6)& (0+255),b
  6053                           
  6054                           ;main.c: 254: I2C_Master_Stop();
  6055  001FBC  ECBC  F012         	call	i2_I2C_Master_Stop	;wreg free
  6056  001FC0  0012               	return	
  6057  001FC2                     __end_ofi2_read_time:
  6058                           	opt stack 0
  6059                           pclatu	equ	0xFFB
  6060                           pclath	equ	0xFFA
  6061                           tblptru	equ	0xFF8
  6062                           tblptrh	equ	0xFF7
  6063                           tblptrl	equ	0xFF6
  6064                           tablat	equ	0xFF5
  6065                           prodh	equ	0xFF4
  6066                           prodl	equ	0xFF3
  6067                           intcon	equ	0xFF2
  6068                           intcon2	equ	0xFF1
  6069                           intcon3	equ	0xFF0
  6070                           postinc0	equ	0xFEE
  6071                           fsr0h	equ	0xFEA
  6072                           fsr0l	equ	0xFE9
  6073                           wreg	equ	0xFE8
  6074                           fsr1h	equ	0xFE2
  6075                           fsr1l	equ	0xFE1
  6076                           indf2	equ	0xFDF
  6077                           postinc2	equ	0xFDE
  6078                           postdec2	equ	0xFDD
  6079                           fsr2h	equ	0xFDA
  6080                           fsr2l	equ	0xFD9
  6081                           status	equ	0xFD8
  6082                           
  6083 ;; *************** function i2_I2C_Master_Write *****************
  6084 ;; Defined at:
  6085 ;;		line 47 in file "I2C.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;  d               2    1[COMRAM] unsigned int 
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;		None
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      void 
  6092 ;; Registers used:
  6093 ;;		wreg, status,2, status,0, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6099 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;Total ram usage:        2 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    1
  6106 ;; This function calls:
  6107 ;;		i2_I2C_Master_Wait
  6108 ;; This function is called by:
  6109 ;;		i2_read_time
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           	psect	text28
  6114  00255E                     __ptext28:
  6115                           	opt stack 0
  6116  00255E                     i2_I2C_Master_Write:
  6117                           	opt stack 23
  6118                           
  6119                           ;I2C.c: 49: I2C_Master_Wait();
  6120                           
  6121                           ;incstack = 0
  6122  00255E  EC85  F012         	call	i2_I2C_Master_Wait	;wreg free
  6123                           
  6124                           ;I2C.c: 50: SSPBUF = d;
  6125  002562  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  6126  002566  0012               	return		;funcret
  6127  002568                     __end_ofi2_I2C_Master_Write:
  6128                           	opt stack 0
  6129                           pclatu	equ	0xFFB
  6130                           pclath	equ	0xFFA
  6131                           tblptru	equ	0xFF8
  6132                           tblptrh	equ	0xFF7
  6133                           tblptrl	equ	0xFF6
  6134                           tablat	equ	0xFF5
  6135                           prodh	equ	0xFF4
  6136                           prodl	equ	0xFF3
  6137                           intcon	equ	0xFF2
  6138                           intcon2	equ	0xFF1
  6139                           intcon3	equ	0xFF0
  6140                           postinc0	equ	0xFEE
  6141                           fsr0h	equ	0xFEA
  6142                           fsr0l	equ	0xFE9
  6143                           wreg	equ	0xFE8
  6144                           fsr1h	equ	0xFE2
  6145                           fsr1l	equ	0xFE1
  6146                           indf2	equ	0xFDF
  6147                           postinc2	equ	0xFDE
  6148                           postdec2	equ	0xFDD
  6149                           fsr2h	equ	0xFDA
  6150                           fsr2l	equ	0xFD9
  6151                           status	equ	0xFD8
  6152                           
  6153 ;; *************** function i2_I2C_Master_Stop *****************
  6154 ;; Defined at:
  6155 ;;		line 41 in file "I2C.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;		None
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;		None
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  1    wreg      void 
  6162 ;; Registers used:
  6163 ;;		wreg, status,2, status,0, cstack
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;Total ram usage:        0 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; Hardware stack levels required when called:    1
  6176 ;; This function calls:
  6177 ;;		i2_I2C_Master_Wait
  6178 ;; This function is called by:
  6179 ;;		i2_read_time
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           	psect	text29
  6184  002578                     __ptext29:
  6185                           	opt stack 0
  6186  002578                     i2_I2C_Master_Stop:
  6187                           	opt stack 23
  6188                           
  6189                           ;I2C.c: 43: I2C_Master_Wait();
  6190                           
  6191                           ;incstack = 0
  6192  002578  EC85  F012         	call	i2_I2C_Master_Wait	;wreg free
  6193                           
  6194                           ;I2C.c: 44: PEN = 1;
  6195  00257C  84C5               	bsf	4037,2,c	;volatile
  6196  00257E  0012               	return		;funcret
  6197  002580                     __end_ofi2_I2C_Master_Stop:
  6198                           	opt stack 0
  6199                           pclatu	equ	0xFFB
  6200                           pclath	equ	0xFFA
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           intcon2	equ	0xFF1
  6209                           intcon3	equ	0xFF0
  6210                           postinc0	equ	0xFEE
  6211                           fsr0h	equ	0xFEA
  6212                           fsr0l	equ	0xFE9
  6213                           wreg	equ	0xFE8
  6214                           fsr1h	equ	0xFE2
  6215                           fsr1l	equ	0xFE1
  6216                           indf2	equ	0xFDF
  6217                           postinc2	equ	0xFDE
  6218                           postdec2	equ	0xFDD
  6219                           fsr2h	equ	0xFDA
  6220                           fsr2l	equ	0xFD9
  6221                           status	equ	0xFD8
  6222                           
  6223 ;; *************** function i2_I2C_Master_Start *****************
  6224 ;; Defined at:
  6225 ;;		line 29 in file "I2C.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;		None
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;		None
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      void 
  6232 ;; Registers used:
  6233 ;;		wreg, status,2, status,0, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;Total ram usage:        0 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    1
  6246 ;; This function calls:
  6247 ;;		i2_I2C_Master_Wait
  6248 ;; This function is called by:
  6249 ;;		i2_read_time
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text30
  6254  002580                     __ptext30:
  6255                           	opt stack 0
  6256  002580                     i2_I2C_Master_Start:
  6257                           	opt stack 23
  6258                           
  6259                           ;I2C.c: 31: I2C_Master_Wait();
  6260                           
  6261                           ;incstack = 0
  6262  002580  EC85  F012         	call	i2_I2C_Master_Wait	;wreg free
  6263                           
  6264                           ;I2C.c: 32: SEN = 1;
  6265  002584  80C5               	bsf	4037,0,c	;volatile
  6266  002586  0012               	return		;funcret
  6267  002588                     __end_ofi2_I2C_Master_Start:
  6268                           	opt stack 0
  6269                           pclatu	equ	0xFFB
  6270                           pclath	equ	0xFFA
  6271                           tblptru	equ	0xFF8
  6272                           tblptrh	equ	0xFF7
  6273                           tblptrl	equ	0xFF6
  6274                           tablat	equ	0xFF5
  6275                           prodh	equ	0xFF4
  6276                           prodl	equ	0xFF3
  6277                           intcon	equ	0xFF2
  6278                           intcon2	equ	0xFF1
  6279                           intcon3	equ	0xFF0
  6280                           postinc0	equ	0xFEE
  6281                           fsr0h	equ	0xFEA
  6282                           fsr0l	equ	0xFE9
  6283                           wreg	equ	0xFE8
  6284                           fsr1h	equ	0xFE2
  6285                           fsr1l	equ	0xFE1
  6286                           indf2	equ	0xFDF
  6287                           postinc2	equ	0xFDE
  6288                           postdec2	equ	0xFDD
  6289                           fsr2h	equ	0xFDA
  6290                           fsr2l	equ	0xFD9
  6291                           status	equ	0xFD8
  6292                           
  6293 ;; *************** function i2_I2C_Master_Read *****************
  6294 ;; Defined at:
  6295 ;;		line 53 in file "I2C.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;  a               1    wreg     unsigned char 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  a               1    1[COMRAM] unsigned char 
  6300 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  1    wreg      unsigned char 
  6303 ;; Registers used:
  6304 ;;		wreg, status,2, status,0, cstack
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6314 ;;Total ram usage:        2 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    1
  6317 ;; This function calls:
  6318 ;;		i2_I2C_Master_Wait
  6319 ;; This function is called by:
  6320 ;;		i2_read_time
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           	psect	text31
  6325  002436                     __ptext31:
  6326                           	opt stack 0
  6327  002436                     i2_I2C_Master_Read:
  6328                           	opt stack 23
  6329                           
  6330                           ;incstack = 0
  6331                           ;i2I2C_Master_Read@a stored from wreg
  6332  002436  6E02               	movwf	i2I2C_Master_Read@a,c
  6333                           
  6334                           ;I2C.c: 55: unsigned char temp;
  6335                           ;I2C.c: 56: I2C_Master_Wait();
  6336  002438  EC85  F012         	call	i2_I2C_Master_Wait	;wreg free
  6337                           
  6338                           ;I2C.c: 57: RCEN = 1;
  6339  00243C  86C5               	bsf	4037,3,c	;volatile
  6340                           
  6341                           ;I2C.c: 58: I2C_Master_Wait();
  6342  00243E  EC85  F012         	call	i2_I2C_Master_Wait	;wreg free
  6343                           
  6344                           ;I2C.c: 59: temp = SSPBUF;
  6345  002442  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  6346                           
  6347                           ;I2C.c: 60: I2C_Master_Wait();
  6348  002446  EC85  F012         	call	i2_I2C_Master_Wait	;wreg free
  6349                           
  6350                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6351  00244A  5002               	movf	i2I2C_Master_Read@a,w,c
  6352  00244C  A4D8               	btfss	status,2,c
  6353  00244E  D002               	goto	i2u335_40
  6354  002450  8AC5               	bsf	4037,5,c	;volatile
  6355  002452  D001               	goto	i2l3578
  6356  002454                     i2u335_40:
  6357  002454  9AC5               	bcf	4037,5,c	;volatile
  6358  002456                     i2l3578:
  6359                           
  6360                           ;I2C.c: 62: ACKEN = 1;
  6361  002456  88C5               	bsf	4037,4,c	;volatile
  6362                           
  6363                           ;I2C.c: 63: return temp;
  6364  002458  5003               	movf	i2I2C_Master_Read@temp,w,c
  6365  00245A  0012               	return	
  6366  00245C                     __end_ofi2_I2C_Master_Read:
  6367                           	opt stack 0
  6368                           pclatu	equ	0xFFB
  6369                           pclath	equ	0xFFA
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           intcon2	equ	0xFF1
  6378                           intcon3	equ	0xFF0
  6379                           postinc0	equ	0xFEE
  6380                           fsr0h	equ	0xFEA
  6381                           fsr0l	equ	0xFE9
  6382                           wreg	equ	0xFE8
  6383                           fsr1h	equ	0xFE2
  6384                           fsr1l	equ	0xFE1
  6385                           indf2	equ	0xFDF
  6386                           postinc2	equ	0xFDE
  6387                           postdec2	equ	0xFDD
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8
  6391                           
  6392 ;; *************** function i2_I2C_Master_Wait *****************
  6393 ;; Defined at:
  6394 ;;		line 24 in file "I2C.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;		None
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;		None
  6399 ;; Return value:  Size  Location     Type
  6400 ;;                  1    wreg      void 
  6401 ;; Registers used:
  6402 ;;		wreg, status,2, status,0
  6403 ;; Tracked objects:
  6404 ;;		On entry : 0/0
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: 0/0
  6407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;Total ram usage:        1 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; This function calls:
  6415 ;;		Nothing
  6416 ;; This function is called by:
  6417 ;;		i2_I2C_Master_Start
  6418 ;;		i2_I2C_Master_Stop
  6419 ;;		i2_I2C_Master_Write
  6420 ;;		i2_I2C_Master_Read
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           	psect	text32
  6425  00250A                     __ptext32:
  6426                           	opt stack 0
  6427  00250A                     i2_I2C_Master_Wait:
  6428                           	opt stack 23
  6429  00250A                     i2l34:
  6430  00250A  B4C7               	btfsc	4039,2,c	;volatile
  6431  00250C  D7FE               	goto	i2l34
  6432  00250E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6433  002512  0E1F               	movlw	31
  6434  002514  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6435  002516  B4D8               	btfsc	status,2,c
  6436  002518  0012               	return	
  6437  00251A  D7F7               	goto	i2l34
  6438  00251C                     __end_ofi2_I2C_Master_Wait:
  6439                           	opt stack 0
  6440                           pclatu	equ	0xFFB
  6441                           pclath	equ	0xFFA
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodh	equ	0xFF4
  6447                           prodl	equ	0xFF3
  6448                           intcon	equ	0xFF2
  6449                           intcon2	equ	0xFF1
  6450                           intcon3	equ	0xFF0
  6451                           postinc0	equ	0xFEE
  6452                           fsr0h	equ	0xFEA
  6453                           fsr0l	equ	0xFE9
  6454                           wreg	equ	0xFE8
  6455                           fsr1h	equ	0xFE2
  6456                           fsr1l	equ	0xFE1
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464 ;; *************** function i2_printf *****************
  6465 ;; Defined at:
  6466 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6469 ;;		 -> STR_23(15), STR_22(16), STR_21(25), STR_20(24), 
  6470 ;;		 -> STR_19(23), STR_18(18), STR_17(23), STR_16(10), 
  6471 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  6472 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  6473 ;;		 -> STR_7(17), STR_6(17), STR_5(23), STR_4(23), 
  6474 ;;		 -> STR_3(21), STR_2(17), STR_1(14), 
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  printf          4    0        struct .
  6477 ;;  printf          2   29[COMRAM] int 
  6478 ;;  printf          2   26[COMRAM] unsigned int 
  6479 ;;  printf          2   24[COMRAM] PTR void [1]
  6480 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6481 ;;  printf          2   21[COMRAM] unsigned int 
  6482 ;;  printf          2   19[COMRAM] PTR const unsigned char 
  6483 ;;		 -> printf@c(1), 
  6484 ;;  printf          1   31[COMRAM] char 
  6485 ;;  printf          1   28[COMRAM] unsigned char 
  6486 ;;  printf          1   23[COMRAM] char 
  6487 ;;  printf          1   18[COMRAM] unsigned char 
  6488 ;; Return value:  Size  Location     Type
  6489 ;;                  2   12[COMRAM] int 
  6490 ;; Registers used:
  6491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;Total ram usage:       20 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:    2
  6504 ;; This function calls:
  6505 ;;		i2___lwdiv
  6506 ;;		i2___lwmod
  6507 ;;		i2___wmul
  6508 ;;		i2_isdigit
  6509 ;;		i2_putch
  6510 ;; This function is called by:
  6511 ;;		_isr
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text33
  6516  000478                     __ptext33:
  6517                           	opt stack 0
  6518  000478                     i2_printf:
  6519                           	opt stack 23
  6520                           
  6521                           ;doprnt.c: 466: va_list ap;
  6522                           ;doprnt.c: 499: signed char c;
  6523                           ;doprnt.c: 501: int width;
  6524                           ;doprnt.c: 506: signed char prec;
  6525                           ;doprnt.c: 508: unsigned char flag;
  6526                           ;doprnt.c: 523: union {
  6527                           ;doprnt.c: 524: unsigned long vd;
  6528                           ;doprnt.c: 525: double integ;
  6529                           ;doprnt.c: 526: } tmpval;
  6530                           ;doprnt.c: 528: unsigned int val;
  6531                           ;doprnt.c: 529: unsigned len;
  6532                           ;doprnt.c: 530: const char * cp;
  6533                           ;doprnt.c: 533: *ap = __va_start();
  6534                           
  6535                           ;incstack = 0
  6536  000478  0E0F               	movlw	low (?i2_printf+2)
  6537  00047A  6E19               	movwf	i2printf@ap,c
  6538  00047C  0E00               	movlw	high (?i2_printf+2)
  6539  00047E  6E1A               	movwf	i2printf@ap+1,c
  6540                           
  6541                           ;doprnt.c: 536: while(c = *f++) {
  6542  000480  D1B8               	goto	i2l3982
  6543  000482                     i2l3832:
  6544                           
  6545                           ;doprnt.c: 538: if(c != '%')
  6546  000482  0E25               	movlw	37
  6547  000484  1820               	xorwf	i2printf@c,w,c
  6548  000486  B4D8               	btfsc	status,2,c
  6549  000488  D004               	goto	i2l3836
  6550                           
  6551                           ;doprnt.c: 540: {
  6552                           ;doprnt.c: 541: (putch(c) );
  6553  00048A  5020               	movf	i2printf@c,w,c
  6554  00048C  EC9E  F012         	call	i2_putch
  6555                           
  6556                           ;doprnt.c: 542: continue;
  6557  000490  D1B0               	goto	i2l3982
  6558  000492                     i2l3836:
  6559                           
  6560                           ;doprnt.c: 543: }
  6561                           ;doprnt.c: 546: width = 0;
  6562  000492  0E00               	movlw	0
  6563  000494  6E1F               	movwf	i2printf@width+1,c
  6564  000496  0E00               	movlw	0
  6565  000498  6E1E               	movwf	i2printf@width,c
  6566                           
  6567                           ;doprnt.c: 548: flag = 0;
  6568  00049A  0E00               	movlw	0
  6569  00049C  6E1D               	movwf	i2printf@flag,c
  6570                           
  6571                           ;doprnt.c: 551: switch(*f) {
  6572                           
  6573                           ;doprnt.c: 550: for(;;) {
  6574  00049E  D003               	goto	i2l3842
  6575  0004A0                     i2l3838:
  6576                           
  6577                           ;doprnt.c: 580: flag |= 0x04;
  6578  0004A0  841D               	bsf	i2printf@flag,2,c
  6579                           
  6580                           ;doprnt.c: 581: f++;
  6581  0004A2  4A0D               	infsnz	i2printf@f,f,c
  6582  0004A4  2A0E               	incf	i2printf@f+1,f,c
  6583  0004A6                     i2l3842:
  6584  0004A6  C00D  FFF6         	movff	i2printf@f,tblptrl
  6585  0004AA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6586  0004AE                     	if	0	;tblptru may be non-zero
  6587  0004AE                     	endif
  6588  0004AE                     	if	0	;tblptru may be non-zero
  6589  0004AE                     	endif
  6590  0004AE  0008               	tblrd		*
  6591  0004B0  50F5               	movf	tablat,w,c
  6592                           
  6593                           ; Switch size 1, requested type "space"
  6594                           ; Number of cases is 1, Range of values is 48 to 48
  6595                           ; switch strategies available:
  6596                           ; Name         Instructions Cycles
  6597                           ; simple_byte            4     3 (average)
  6598                           ;	Chosen strategy is simple_byte
  6599  0004B2  0A30               	xorlw	48	; case 48
  6600  0004B4  B4D8               	btfsc	status,2,c
  6601  0004B6  D7F4               	goto	i2l3838
  6602                           
  6603                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6604                           
  6605                           ;doprnt.c: 586: }
  6606                           
  6607                           ;doprnt.c: 585: break;
  6608  0004B8  C00D  FFF6         	movff	i2printf@f,tblptrl
  6609  0004BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6610  0004C0                     	if	0	;tblptru may be non-zero
  6611  0004C0                     	endif
  6612  0004C0                     	if	0	;tblptru may be non-zero
  6613  0004C0                     	endif
  6614  0004C0  0008               	tblrd		*
  6615  0004C2  50F5               	movf	tablat,w,c
  6616  0004C4  EC53  F012         	call	i2_isdigit
  6617  0004C8  A0D8               	btfss	status,0,c
  6618  0004CA  D076               	goto	i2l3884
  6619                           
  6620                           ;doprnt.c: 598: width = 0;
  6621  0004CC  0E00               	movlw	0
  6622  0004CE  6E1F               	movwf	i2printf@width+1,c
  6623  0004D0  0E00               	movlw	0
  6624  0004D2  6E1E               	movwf	i2printf@width,c
  6625  0004D4                     i2l3848:
  6626                           
  6627                           ;doprnt.c: 600: width *= 10;
  6628  0004D4  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  6629  0004D8  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  6630  0004DC  0E00               	movlw	0
  6631  0004DE  6E04               	movwf	i2___wmul@multiplicand+1,c
  6632  0004E0  0E0A               	movlw	10
  6633  0004E2  6E03               	movwf	i2___wmul@multiplicand,c
  6634  0004E4  EC2E  F012         	call	i2___wmul	;wreg free
  6635  0004E8  C001  F01E         	movff	?i2___wmul,i2printf@width
  6636  0004EC  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  6637                           
  6638                           ;doprnt.c: 601: width += *f++ - '0';
  6639  0004F0  0ED0               	movlw	208
  6640  0004F2  6E0F               	movwf	??i2_printf& (0+255),c
  6641  0004F4  0EFF               	movlw	255
  6642  0004F6  6E10               	movwf	(??i2_printf+1)& (0+255),c
  6643  0004F8  C00D  FFF6         	movff	i2printf@f,tblptrl
  6644  0004FC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6645  000500                     	if	0	;tblptru may be non-zero
  6646  000500                     	endif
  6647  000500                     	if	0	;tblptru may be non-zero
  6648  000500                     	endif
  6649  000500  0008               	tblrd		*
  6650  000502  50F5               	movf	tablat,w,c
  6651  000504  6E11               	movwf	(??i2_printf+2)& (0+255),c
  6652  000506  6A12               	clrf	(??i2_printf+3)& (0+255),c
  6653  000508  500F               	movf	??i2_printf,w,c
  6654  00050A  2611               	addwf	??i2_printf+2,f,c
  6655  00050C  5010               	movf	??i2_printf+1,w,c
  6656  00050E  2212               	addwfc	??i2_printf+3,f,c
  6657  000510  5011               	movf	??i2_printf+2,w,c
  6658  000512  261E               	addwf	i2printf@width,f,c
  6659  000514  5012               	movf	??i2_printf+3,w,c
  6660  000516  221F               	addwfc	i2printf@width+1,f,c
  6661  000518  4A0D               	infsnz	i2printf@f,f,c
  6662  00051A  2A0E               	incf	i2printf@f+1,f,c
  6663                           
  6664                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6665  00051C  C00D  FFF6         	movff	i2printf@f,tblptrl
  6666  000520  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6667  000524                     	if	0	;tblptru may be non-zero
  6668  000524                     	endif
  6669  000524                     	if	0	;tblptru may be non-zero
  6670  000524                     	endif
  6671  000524  0008               	tblrd		*
  6672  000526  50F5               	movf	tablat,w,c
  6673  000528  EC53  F012         	call	i2_isdigit
  6674  00052C  A0D8               	btfss	status,0,c
  6675  00052E  D044               	goto	i2l3884
  6676  000530  D7D1               	goto	i2l3848
  6677  000532                     i2l3856:
  6678                           
  6679                           ;doprnt.c: 721: flag |= 0x80;
  6680  000532  8E1D               	bsf	i2printf@flag,7,c
  6681                           
  6682                           ;doprnt.c: 723: break;
  6683  000534  D05B               	goto	i2l323
  6684  000536                     i2l3858:
  6685                           
  6686                           ;doprnt.c: 757: if(width > len)
  6687  000536  501E               	movf	i2printf@width,w,c
  6688  000538  5C16               	subwf	i2printf@len,w,c
  6689  00053A  501F               	movf	i2printf@width+1,w,c
  6690  00053C  5817               	subwfb	i2printf@len+1,w,c
  6691  00053E  B0D8               	btfsc	status,0,c
  6692  000540  D005               	goto	i2l3862
  6693                           
  6694                           ;doprnt.c: 758: width -= len;
  6695  000542  5016               	movf	i2printf@len,w,c
  6696  000544  5E1E               	subwf	i2printf@width,f,c
  6697  000546  5017               	movf	i2printf@len+1,w,c
  6698  000548  5A1F               	subwfb	i2printf@width+1,f,c
  6699  00054A  D008               	goto	i2l3866
  6700  00054C                     i2l3862:
  6701                           
  6702                           ;doprnt.c: 759: else
  6703                           ;doprnt.c: 760: width = 0;
  6704  00054C  0E00               	movlw	0
  6705  00054E  6E1F               	movwf	i2printf@width+1,c
  6706  000550  0E00               	movlw	0
  6707  000552  6E1E               	movwf	i2printf@width,c
  6708                           
  6709                           ;doprnt.c: 764: while(width--)
  6710  000554  D003               	goto	i2l3866
  6711  000556                     i2l3864:
  6712                           
  6713                           ;doprnt.c: 765: (putch(' ') );
  6714  000556  0E20               	movlw	32
  6715  000558  EC9E  F012         	call	i2_putch
  6716  00055C                     i2l3866:
  6717  00055C  061E               	decf	i2printf@width,f,c
  6718  00055E  A0D8               	btfss	status,0,c
  6719  000560  061F               	decf	i2printf@width+1,f,c
  6720  000562  281E               	incf	i2printf@width,w,c
  6721  000564  E1F8               	bnz	i2l3864
  6722  000566  281F               	incf	i2printf@width+1,w,c
  6723  000568  B4D8               	btfsc	status,2,c
  6724  00056A  D00A               	goto	i2l3872
  6725  00056C  D7F4               	goto	i2l3864
  6726  00056E                     i2l3868:
  6727                           
  6728                           ;doprnt.c: 768: (putch(*cp++) );
  6729  00056E  C014  FFD9         	movff	i2printf@cp,fsr2l
  6730  000572  C015  FFDA         	movff	i2printf@cp+1,fsr2h
  6731  000576  50DF               	movf	indf2,w,c
  6732  000578  EC9E  F012         	call	i2_putch
  6733  00057C  4A14               	infsnz	i2printf@cp,f,c
  6734  00057E  2A15               	incf	i2printf@cp+1,f,c
  6735  000580                     i2l3872:
  6736  000580  0616               	decf	i2printf@len,f,c
  6737  000582  A0D8               	btfss	status,0,c
  6738  000584  0617               	decf	i2printf@len+1,f,c
  6739  000586  2816               	incf	i2printf@len,w,c
  6740  000588  E1F2               	bnz	i2l3868
  6741  00058A  2817               	incf	i2printf@len+1,w,c
  6742  00058C  B4D8               	btfsc	status,2,c
  6743  00058E  D131               	goto	i2l3982
  6744  000590  D7EE               	goto	i2l3868
  6745  000592                     i2l3874:
  6746                           
  6747                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6748  000592  C019  FFD9         	movff	i2printf@ap,fsr2l
  6749  000596  C01A  FFDA         	movff	i2printf@ap+1,fsr2h
  6750  00059A  50DF               	movf	indf2,w,c
  6751  00059C  6E20               	movwf	i2printf@c,c
  6752  00059E  0E02               	movlw	2
  6753  0005A0  2619               	addwf	i2printf@ap,f,c
  6754  0005A2  0E00               	movlw	0
  6755  0005A4  221A               	addwfc	i2printf@ap+1,f,c
  6756  0005A6                     i2l3878:
  6757                           
  6758                           ;doprnt.c: 805: cp = (char *)&c;
  6759  0005A6  0E20               	movlw	low i2printf@c
  6760  0005A8  6E14               	movwf	i2printf@cp,c
  6761  0005AA  0E00               	movlw	high i2printf@c
  6762  0005AC  6E15               	movwf	i2printf@cp+1,c
  6763                           
  6764                           ;doprnt.c: 806: len = 1;
  6765  0005AE  0E00               	movlw	0
  6766  0005B0  6E17               	movwf	i2printf@len+1,c
  6767  0005B2  0E01               	movlw	1
  6768  0005B4  6E16               	movwf	i2printf@len,c
  6769                           
  6770                           ;doprnt.c: 807: goto dostring;
  6771  0005B6  D7BF               	goto	i2l3858
  6772  0005B8                     i2l3884:
  6773  0005B8  C00D  FFF6         	movff	i2printf@f,tblptrl
  6774  0005BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6775  0005C0  4A0D               	infsnz	i2printf@f,f,c
  6776  0005C2  2A0E               	incf	i2printf@f+1,f,c
  6777  0005C4                     	if	0	;tblptru may be non-zero
  6778  0005C4                     	endif
  6779  0005C4                     	if	0	;tblptru may be non-zero
  6780  0005C4                     	endif
  6781  0005C4  0008               	tblrd		*
  6782  0005C6  CFF5 F020          	movff	tablat,i2printf@c
  6783  0005CA  5020               	movf	i2printf@c,w,c
  6784                           
  6785                           ; Switch size 1, requested type "space"
  6786                           ; Number of cases is 5, Range of values is 0 to 120
  6787                           ; switch strategies available:
  6788                           ; Name         Instructions Cycles
  6789                           ; simple_byte           16     9 (average)
  6790                           ;	Chosen strategy is simple_byte
  6791  0005CC  0A00               	xorlw	0	; case 0
  6792  0005CE  B4D8               	btfsc	status,2,c
  6793  0005D0  0012               	return	
  6794  0005D2  0A63               	xorlw	99	; case 99
  6795  0005D4  B4D8               	btfsc	status,2,c
  6796  0005D6  D7DD               	goto	i2l3874
  6797  0005D8  0A07               	xorlw	7	; case 100
  6798  0005DA  B4D8               	btfsc	status,2,c
  6799  0005DC  D007               	goto	i2l323
  6800  0005DE  0A0D               	xorlw	13	; case 105
  6801  0005E0  B4D8               	btfsc	status,2,c
  6802  0005E2  D004               	goto	i2l323
  6803  0005E4  0A11               	xorlw	17	; case 120
  6804  0005E6  B4D8               	btfsc	status,2,c
  6805  0005E8  D7A4               	goto	i2l3856
  6806  0005EA  D7DD               	goto	i2l3878
  6807  0005EC                     i2l323:
  6808                           
  6809                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6810  0005EC  BE1D               	btfsc	i2printf@flag,7,c
  6811  0005EE  D015               	goto	i2l3896
  6812                           
  6813                           ;doprnt.c: 1253: {
  6814                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6815  0005F0  C019  FFD9         	movff	i2printf@ap,fsr2l
  6816  0005F4  C01A  FFDA         	movff	i2printf@ap+1,fsr2h
  6817  0005F8  CFDE F01B          	movff	postinc2,i2printf@val
  6818  0005FC  CFDD F01C          	movff	postdec2,i2printf@val+1
  6819  000600  0E02               	movlw	2
  6820  000602  2619               	addwf	i2printf@ap,f,c
  6821  000604  0E00               	movlw	0
  6822  000606  221A               	addwfc	i2printf@ap+1,f,c
  6823                           
  6824                           ;doprnt.c: 1261: if((int)val < 0) {
  6825  000608  AE1C               	btfss	i2printf@val+1,7,c
  6826  00060A  D044               	goto	i2l3930
  6827                           
  6828                           ;doprnt.c: 1262: flag |= 0x03;
  6829  00060C  0E03               	movlw	3
  6830  00060E  121D               	iorwf	i2printf@flag,f,c
  6831                           
  6832                           ;doprnt.c: 1263: val = -val;
  6833  000610  6C1B               	negf	i2printf@val,c
  6834  000612  1E1C               	comf	i2printf@val+1,f,c
  6835  000614  B0D8               	btfsc	status,0,c
  6836  000616  2A1C               	incf	i2printf@val+1,f,c
  6837                           
  6838                           ;doprnt.c: 1264: }
  6839                           ;doprnt.c: 1266: }
  6840  000618  D03D               	goto	i2l3930
  6841  00061A                     i2l3896:
  6842                           
  6843                           ;doprnt.c: 1268: else
  6844                           ;doprnt.c: 1273: {
  6845                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6846  00061A  C019  FFD9         	movff	i2printf@ap,fsr2l
  6847  00061E  C01A  FFDA         	movff	i2printf@ap+1,fsr2h
  6848  000622  CFDE F01B          	movff	postinc2,i2printf@val
  6849  000626  CFDD F01C          	movff	postdec2,i2printf@val+1
  6850  00062A  0E02               	movlw	2
  6851  00062C  2619               	addwf	i2printf@ap,f,c
  6852  00062E  0E00               	movlw	0
  6853  000630  221A               	addwfc	i2printf@ap+1,f,c
  6854                           
  6855                           ;doprnt.c: 1287: }
  6856                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6857  000632  D030               	goto	i2l3930
  6858  000634                     i2l3900:
  6859                           
  6860                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6861  000634  0E01               	movlw	1
  6862  000636  6E20               	movwf	i2printf@c,c
  6863  000638                     i2l3902:
  6864  000638  0E05               	movlw	5
  6865  00063A  1820               	xorwf	i2printf@c,w,c
  6866  00063C  B4D8               	btfsc	status,2,c
  6867  00063E  D032               	goto	i2l3932
  6868                           
  6869                           ;doprnt.c: 1306: if(val < dpowers[c])
  6870  000640  5020               	movf	i2printf@c,w,c
  6871  000642  0D02               	mullw	2
  6872  000644  0EF6               	movlw	low _dpowers
  6873  000646  24F3               	addwf	prodl,w,c
  6874  000648  6EF6               	movwf	tblptrl,c
  6875  00064A  0EFD               	movlw	high _dpowers
  6876  00064C  20F4               	addwfc	prodh,w,c
  6877  00064E  6EF7               	movwf	tblptrh,c
  6878  000650                     	if	0	;There are less than 3 active tblptr bytes
  6879  000650                     	endif
  6880  000650  0009               	tblrd		*+
  6881  000652  50F5               	movf	tablat,w,c
  6882  000654  5C1B               	subwf	i2printf@val,w,c
  6883  000656  0009               	tblrd		*+
  6884  000658  50F5               	movf	tablat,w,c
  6885  00065A  581C               	subwfb	i2printf@val+1,w,c
  6886  00065C  A0D8               	btfss	status,0,c
  6887  00065E  D022               	goto	i2l3932
  6888                           
  6889                           ;doprnt.c: 1307: break;
  6890  000660  2A20               	incf	i2printf@c,f,c
  6891  000662  D7EA               	goto	i2l3902
  6892  000664                     i2l3914:
  6893                           
  6894                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6895  000664  0E01               	movlw	1
  6896  000666  6E20               	movwf	i2printf@c,c
  6897  000668                     i2l3916:
  6898  000668  0E04               	movlw	4
  6899  00066A  1820               	xorwf	i2printf@c,w,c
  6900  00066C  B4D8               	btfsc	status,2,c
  6901  00066E  D01A               	goto	i2l3932
  6902                           
  6903                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6904  000670  5020               	movf	i2printf@c,w,c
  6905  000672  0D02               	mullw	2
  6906  000674  0E00               	movlw	low _hexpowers
  6907  000676  24F3               	addwf	prodl,w,c
  6908  000678  6EF6               	movwf	tblptrl,c
  6909  00067A  0EFE               	movlw	high _hexpowers
  6910  00067C  20F4               	addwfc	prodh,w,c
  6911  00067E  6EF7               	movwf	tblptrh,c
  6912  000680                     	if	0	;There are less than 3 active tblptr bytes
  6913  000680                     	endif
  6914  000680  0009               	tblrd		*+
  6915  000682  50F5               	movf	tablat,w,c
  6916  000684  5C1B               	subwf	i2printf@val,w,c
  6917  000686  0009               	tblrd		*+
  6918  000688  50F5               	movf	tablat,w,c
  6919  00068A  581C               	subwfb	i2printf@val+1,w,c
  6920  00068C  A0D8               	btfss	status,0,c
  6921  00068E  D00A               	goto	i2l3932
  6922                           
  6923                           ;doprnt.c: 1318: break;
  6924  000690  2A20               	incf	i2printf@c,f,c
  6925  000692  D7EA               	goto	i2l3916
  6926  000694                     i2l3930:
  6927  000694  501D               	movf	i2printf@flag,w,c
  6928  000696  0B80               	andlw	128
  6929                           
  6930                           ; Switch size 1, requested type "space"
  6931                           ; Number of cases is 2, Range of values is 0 to 128
  6932                           ; switch strategies available:
  6933                           ; Name         Instructions Cycles
  6934                           ; simple_byte            7     4 (average)
  6935                           ;	Chosen strategy is simple_byte
  6936  000698  0A00               	xorlw	0	; case 0
  6937  00069A  B4D8               	btfsc	status,2,c
  6938  00069C  D7CB               	goto	i2l3900
  6939  00069E  0A80               	xorlw	128	; case 128
  6940  0006A0  B4D8               	btfsc	status,2,c
  6941  0006A2  D7E0               	goto	i2l3914
  6942  0006A4                     i2l3932:
  6943                           
  6944                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6945  0006A4  501E               	movf	i2printf@width,w,c
  6946  0006A6  101F               	iorwf	i2printf@width+1,w,c
  6947  0006A8  B4D8               	btfsc	status,2,c
  6948  0006AA  D009               	goto	i2l3938
  6949  0006AC  C01D  F00F         	movff	i2printf@flag,??i2_printf
  6950  0006B0  0E03               	movlw	3
  6951  0006B2  160F               	andwf	??i2_printf,f,c
  6952  0006B4  B4D8               	btfsc	status,2,c
  6953  0006B6  D003               	goto	i2l3938
  6954                           
  6955                           ;doprnt.c: 1346: width--;
  6956  0006B8  061E               	decf	i2printf@width,f,c
  6957  0006BA  A0D8               	btfss	status,0,c
  6958  0006BC  061F               	decf	i2printf@width+1,f,c
  6959  0006BE                     i2l3938:
  6960                           
  6961                           ;doprnt.c: 1381: if(width > c)
  6962  0006BE  0E80               	movlw	128
  6963  0006C0  BE20               	btfsc	i2printf@c,7,c
  6964  0006C2  0E7F               	movlw	127
  6965  0006C4  6E0F               	movwf	??i2_printf& (0+255),c
  6966  0006C6  501E               	movf	i2printf@width,w,c
  6967  0006C8  5C20               	subwf	i2printf@c,w,c
  6968  0006CA  501F               	movf	i2printf@width+1,w,c
  6969  0006CC  0A80               	xorlw	128
  6970  0006CE  580F               	subwfb	??i2_printf& (0+255),w,c
  6971  0006D0  B0D8               	btfsc	status,0,c
  6972  0006D2  D007               	goto	i2l3942
  6973                           
  6974                           ;doprnt.c: 1382: width -= c;
  6975  0006D4  5020               	movf	i2printf@c,w,c
  6976  0006D6  5E1E               	subwf	i2printf@width,f,c
  6977  0006D8  0E00               	movlw	0
  6978  0006DA  BE20               	btfsc	i2printf@c,7,c
  6979  0006DC  0EFF               	movlw	255
  6980  0006DE  5A1F               	subwfb	i2printf@width+1,f,c
  6981  0006E0  D004               	goto	i2l3944
  6982  0006E2                     i2l3942:
  6983                           
  6984                           ;doprnt.c: 1383: else
  6985                           ;doprnt.c: 1384: width = 0;
  6986  0006E2  0E00               	movlw	0
  6987  0006E4  6E1F               	movwf	i2printf@width+1,c
  6988  0006E6  0E00               	movlw	0
  6989  0006E8  6E1E               	movwf	i2printf@width,c
  6990  0006EA                     i2l3944:
  6991                           
  6992                           ;doprnt.c: 1387: if(flag & 0x04) {
  6993  0006EA  A41D               	btfss	i2printf@flag,2,c
  6994  0006EC  D014               	goto	i2l3956
  6995                           
  6996                           ;doprnt.c: 1392: if(flag & 0x03)
  6997  0006EE  C01D  F00F         	movff	i2printf@flag,??i2_printf
  6998  0006F2  0E03               	movlw	3
  6999  0006F4  160F               	andwf	??i2_printf,f,c
  7000  0006F6  B4D8               	btfsc	status,2,c
  7001  0006F8  D003               	goto	i2l3950
  7002                           
  7003                           ;doprnt.c: 1393: (putch('-') );
  7004  0006FA  0E2D               	movlw	45
  7005  0006FC  EC9E  F012         	call	i2_putch
  7006  000700                     i2l3950:
  7007                           
  7008                           ;doprnt.c: 1415: if(width)
  7009  000700  501E               	movf	i2printf@width,w,c
  7010  000702  101F               	iorwf	i2printf@width+1,w,c
  7011  000704  B4D8               	btfsc	status,2,c
  7012  000706  D01E               	goto	i2l3966
  7013                           
  7014                           ;doprnt.c: 1417: (putch('0') );
  7015                           
  7016                           ;doprnt.c: 1416: do
  7017  000708  0E30               	movlw	48
  7018  00070A  EC9E  F012         	call	i2_putch
  7019                           
  7020                           ;doprnt.c: 1418: while(--width);
  7021  00070E  061E               	decf	i2printf@width,f,c
  7022  000710  A0D8               	btfss	status,0,c
  7023  000712  061F               	decf	i2printf@width+1,f,c
  7024  000714  D7F5               	goto	i2l3950
  7025  000716                     i2l3956:
  7026                           
  7027                           ;doprnt.c: 1422: {
  7028                           ;doprnt.c: 1424: if(width
  7029                           ;doprnt.c: 1428: )
  7030  000716  501E               	movf	i2printf@width,w,c
  7031  000718  101F               	iorwf	i2printf@width+1,w,c
  7032  00071A  B4D8               	btfsc	status,2,c
  7033  00071C  D00A               	goto	i2l3962
  7034  00071E                     i2l3958:
  7035                           
  7036                           ;doprnt.c: 1430: (putch(' ') );
  7037  00071E  0E20               	movlw	32
  7038  000720  EC9E  F012         	call	i2_putch
  7039                           
  7040                           ;doprnt.c: 1431: while(--width);
  7041  000724  061E               	decf	i2printf@width,f,c
  7042  000726  A0D8               	btfss	status,0,c
  7043  000728  061F               	decf	i2printf@width+1,f,c
  7044  00072A  501E               	movf	i2printf@width,w,c
  7045  00072C  101F               	iorwf	i2printf@width+1,w,c
  7046  00072E  A4D8               	btfss	status,2,c
  7047  000730  D7F6               	goto	i2l3958
  7048  000732                     i2l3962:
  7049                           
  7050                           ;doprnt.c: 1438: if(flag & 0x03)
  7051  000732  C01D  F00F         	movff	i2printf@flag,??i2_printf
  7052  000736  0E03               	movlw	3
  7053  000738  160F               	andwf	??i2_printf,f,c
  7054  00073A  B4D8               	btfsc	status,2,c
  7055  00073C  D003               	goto	i2l3966
  7056                           
  7057                           ;doprnt.c: 1439: (putch('-') );
  7058  00073E  0E2D               	movlw	45
  7059  000740  EC9E  F012         	call	i2_putch
  7060  000744                     i2l3966:
  7061                           
  7062                           ;doprnt.c: 1469: }
  7063                           ;doprnt.c: 1472: prec = c;
  7064  000744  C020  F018         	movff	i2printf@c,i2printf@prec
  7065                           
  7066                           ;doprnt.c: 1474: while(prec--) {
  7067  000748  D050               	goto	i2l3980
  7068  00074A                     i2l3968:
  7069                           
  7070                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7071  00074A  5018               	movf	i2printf@prec,w,c
  7072  00074C  0D02               	mullw	2
  7073  00074E  0EF6               	movlw	low _dpowers
  7074  000750  24F3               	addwf	prodl,w,c
  7075  000752  6EF6               	movwf	tblptrl,c
  7076  000754  0EFD               	movlw	high _dpowers
  7077  000756  20F4               	addwfc	prodh,w,c
  7078  000758  6EF7               	movwf	tblptrh,c
  7079  00075A                     	if	0	;There are less than 3 active tblptr bytes
  7080  00075A                     	endif
  7081  00075A  0009               	tblrd		*+
  7082  00075C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7083  000760  000A               	tblrd		*-
  7084  000762  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7085  000766  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7086  00076A  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7087  00076E  ECA0  F010         	call	i2___lwdiv	;wreg free
  7088  000772  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7089  000776  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7090  00077A  0E00               	movlw	0
  7091  00077C  6E0B               	movwf	i2___lwmod@divisor+1,c
  7092  00077E  0E0A               	movlw	10
  7093  000780  6E0A               	movwf	i2___lwmod@divisor,c
  7094  000782  EC3D  F011         	call	i2___lwmod	;wreg free
  7095  000786  5008               	movf	?i2___lwmod,w,c
  7096  000788  0F30               	addlw	48
  7097  00078A  6E20               	movwf	i2printf@c,c
  7098                           
  7099                           ;doprnt.c: 1491: break;
  7100  00078C  D02B               	goto	i2l3978
  7101  00078E                     i2l3970:
  7102                           
  7103                           ;doprnt.c: 1499: {
  7104                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7105  00078E  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7106  000792  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7107  000796  5018               	movf	i2printf@prec,w,c
  7108  000798  0D02               	mullw	2
  7109  00079A  0E00               	movlw	low _hexpowers
  7110  00079C  24F3               	addwf	prodl,w,c
  7111  00079E  6EF6               	movwf	tblptrl,c
  7112  0007A0  0EFE               	movlw	high _hexpowers
  7113  0007A2  20F4               	addwfc	prodh,w,c
  7114  0007A4  6EF7               	movwf	tblptrh,c
  7115  0007A6                     	if	0	;There are less than 3 active tblptr bytes
  7116  0007A6                     	endif
  7117  0007A6  0009               	tblrd		*+
  7118  0007A8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7119  0007AC  000A               	tblrd		*-
  7120  0007AE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7121  0007B2  ECA0  F010         	call	i2___lwdiv	;wreg free
  7122  0007B6  5001               	movf	?i2___lwdiv,w,c
  7123  0007B8  0B0F               	andlw	15
  7124  0007BA  6E13               	movwf	i2printf@idx,c
  7125                           
  7126                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7127  0007BC  5013               	movf	i2printf@idx,w,c
  7128  0007BE  0D01               	mullw	1
  7129  0007C0  0EFC               	movlw	low STR_24
  7130  0007C2  24F3               	addwf	prodl,w,c
  7131  0007C4  6EF6               	movwf	tblptrl,c
  7132  0007C6  0EFE               	movlw	high STR_24
  7133  0007C8  20F4               	addwfc	prodh,w,c
  7134  0007CA  6EF7               	movwf	tblptrh,c
  7135  0007CC                     	if	0	;There are less than 3 active tblptr bytes
  7136  0007CC                     	endif
  7137  0007CC  0008               	tblrd		*
  7138  0007CE  CFF5 F020          	movff	tablat,i2printf@c
  7139                           
  7140                           ;doprnt.c: 1523: }
  7141                           
  7142                           ;doprnt.c: 1508: }
  7143                           ;doprnt.c: 1510: break;
  7144  0007D2  D008               	goto	i2l3978
  7145  0007D4                     i2l3976:
  7146  0007D4  501D               	movf	i2printf@flag,w,c
  7147  0007D6  0B80               	andlw	128
  7148                           
  7149                           ; Switch size 1, requested type "space"
  7150                           ; Number of cases is 2, Range of values is 0 to 128
  7151                           ; switch strategies available:
  7152                           ; Name         Instructions Cycles
  7153                           ; simple_byte            7     4 (average)
  7154                           ;	Chosen strategy is simple_byte
  7155  0007D8  0A00               	xorlw	0	; case 0
  7156  0007DA  B4D8               	btfsc	status,2,c
  7157  0007DC  D7B6               	goto	i2l3968
  7158  0007DE  0A80               	xorlw	128	; case 128
  7159  0007E0  B4D8               	btfsc	status,2,c
  7160  0007E2  D7D5               	goto	i2l3970
  7161  0007E4                     i2l3978:
  7162                           
  7163                           ;doprnt.c: 1524: (putch(c) );
  7164  0007E4  5020               	movf	i2printf@c,w,c
  7165  0007E6  EC9E  F012         	call	i2_putch
  7166  0007EA                     i2l3980:
  7167  0007EA  0618               	decf	i2printf@prec,f,c
  7168  0007EC  2818               	incf	i2printf@prec,w,c
  7169  0007EE  A4D8               	btfss	status,2,c
  7170  0007F0  D7F1               	goto	i2l3976
  7171  0007F2                     i2l3982:
  7172  0007F2  C00D  FFF6         	movff	i2printf@f,tblptrl
  7173  0007F6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7174  0007FA  4A0D               	infsnz	i2printf@f,f,c
  7175  0007FC  2A0E               	incf	i2printf@f+1,f,c
  7176  0007FE                     	if	0	;tblptru may be non-zero
  7177  0007FE                     	endif
  7178  0007FE                     	if	0	;tblptru may be non-zero
  7179  0007FE                     	endif
  7180  0007FE  0008               	tblrd		*
  7181  000800  CFF5 F020          	movff	tablat,i2printf@c
  7182  000804  5020               	movf	i2printf@c,w,c
  7183  000806  B4D8               	btfsc	status,2,c
  7184  000808  0012               	return	
  7185  00080A  D63B               	goto	i2l3832
  7186  00080C                     __end_ofi2_printf:
  7187                           	opt stack 0
  7188                           pclatu	equ	0xFFB
  7189                           pclath	equ	0xFFA
  7190                           tblptru	equ	0xFF8
  7191                           tblptrh	equ	0xFF7
  7192                           tblptrl	equ	0xFF6
  7193                           tablat	equ	0xFF5
  7194                           prodh	equ	0xFF4
  7195                           prodl	equ	0xFF3
  7196                           intcon	equ	0xFF2
  7197                           intcon2	equ	0xFF1
  7198                           intcon3	equ	0xFF0
  7199                           postinc0	equ	0xFEE
  7200                           fsr0h	equ	0xFEA
  7201                           fsr0l	equ	0xFE9
  7202                           wreg	equ	0xFE8
  7203                           fsr1h	equ	0xFE2
  7204                           fsr1l	equ	0xFE1
  7205                           indf2	equ	0xFDF
  7206                           postinc2	equ	0xFDE
  7207                           postdec2	equ	0xFDD
  7208                           fsr2h	equ	0xFDA
  7209                           fsr2l	equ	0xFD9
  7210                           status	equ	0xFD8
  7211                           
  7212 ;; *************** function i2_putch *****************
  7213 ;; Defined at:
  7214 ;;		line 31 in file "lcd.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;  data            1    wreg     unsigned char 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  data            1    2[COMRAM] unsigned char 
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      void 
  7221 ;; Registers used:
  7222 ;;		wreg, status,2, status,0, cstack
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7232 ;;Total ram usage:        1 bytes
  7233 ;; Hardware stack levels used:    1
  7234 ;; Hardware stack levels required when called:    1
  7235 ;; This function calls:
  7236 ;;		i2_lcdNibble
  7237 ;; This function is called by:
  7238 ;;		i2_printf
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           	psect	text34
  7243  00253C                     __ptext34:
  7244                           	opt stack 0
  7245  00253C                     i2_putch:
  7246                           	opt stack 23
  7247                           
  7248                           ;incstack = 0
  7249                           ;i2putch@data stored from wreg
  7250  00253C  6E03               	movwf	i2putch@data,c
  7251                           
  7252                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7253  00253E  848C               	bsf	3980,2,c	;volatile
  7254                           
  7255                           ;lcd.c: 33: lcdNibble(data);
  7256  002540  5003               	movf	i2putch@data,w,c
  7257  002542  ECF1  F010         	call	i2_lcdNibble
  7258  002546  0012               	return		;funcret
  7259  002548                     __end_ofi2_putch:
  7260                           	opt stack 0
  7261                           pclatu	equ	0xFFB
  7262                           pclath	equ	0xFFA
  7263                           tblptru	equ	0xFF8
  7264                           tblptrh	equ	0xFF7
  7265                           tblptrl	equ	0xFF6
  7266                           tablat	equ	0xFF5
  7267                           prodh	equ	0xFF4
  7268                           prodl	equ	0xFF3
  7269                           intcon	equ	0xFF2
  7270                           intcon2	equ	0xFF1
  7271                           intcon3	equ	0xFF0
  7272                           postinc0	equ	0xFEE
  7273                           fsr0h	equ	0xFEA
  7274                           fsr0l	equ	0xFE9
  7275                           wreg	equ	0xFE8
  7276                           fsr1h	equ	0xFE2
  7277                           fsr1l	equ	0xFE1
  7278                           indf2	equ	0xFDF
  7279                           postinc2	equ	0xFDE
  7280                           postdec2	equ	0xFDD
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function i2_isdigit *****************
  7286 ;; Defined at:
  7287 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  c               1    wreg     unsigned char 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  c               1    2[COMRAM] unsigned char 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;		None               void
  7294 ;; Registers used:
  7295 ;;		wreg, status,2, status,0
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;Total ram usage:        3 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; This function calls:
  7308 ;;		Nothing
  7309 ;; This function is called by:
  7310 ;;		i2_printf
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           	psect	text35
  7315  0024A6                     __ptext35:
  7316                           	opt stack 0
  7317  0024A6                     i2_isdigit:
  7318                           	opt stack 24
  7319                           
  7320                           ;incstack = 0
  7321                           ;i2isdigit@c stored from wreg
  7322  0024A6  6E03               	movwf	i2isdigit@c,c
  7323  0024A8  0E00               	movlw	0
  7324  0024AA  6E02               	movwf	i2_isdigit$584,c
  7325  0024AC  0E3A               	movlw	58
  7326  0024AE  6003               	cpfslt	i2isdigit@c,c
  7327  0024B0  D005               	goto	i2l3596
  7328  0024B2  0E2F               	movlw	47
  7329  0024B4  6403               	cpfsgt	i2isdigit@c,c
  7330  0024B6  D002               	goto	i2l3596
  7331  0024B8  0E01               	movlw	1
  7332  0024BA  6E02               	movwf	i2_isdigit$584,c
  7333  0024BC                     i2l3596:
  7334  0024BC  C002  F001         	movff	i2_isdigit$584,??i2_isdigit
  7335  0024C0  3001               	rrcf	??i2_isdigit,w,c
  7336  0024C2  0012               	return	
  7337  0024C4                     __end_ofi2_isdigit:
  7338                           	opt stack 0
  7339                           pclatu	equ	0xFFB
  7340                           pclath	equ	0xFFA
  7341                           tblptru	equ	0xFF8
  7342                           tblptrh	equ	0xFF7
  7343                           tblptrl	equ	0xFF6
  7344                           tablat	equ	0xFF5
  7345                           prodh	equ	0xFF4
  7346                           prodl	equ	0xFF3
  7347                           intcon	equ	0xFF2
  7348                           intcon2	equ	0xFF1
  7349                           intcon3	equ	0xFF0
  7350                           postinc0	equ	0xFEE
  7351                           fsr0h	equ	0xFEA
  7352                           fsr0l	equ	0xFE9
  7353                           wreg	equ	0xFE8
  7354                           fsr1h	equ	0xFE2
  7355                           fsr1l	equ	0xFE1
  7356                           indf2	equ	0xFDF
  7357                           postinc2	equ	0xFDE
  7358                           postdec2	equ	0xFDD
  7359                           fsr2h	equ	0xFDA
  7360                           fsr2l	equ	0xFD9
  7361                           status	equ	0xFD8
  7362                           
  7363 ;; *************** function i2___lwmod *****************
  7364 ;; Defined at:
  7365 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7366 ;; Parameters:    Size  Location     Type
  7367 ;;  dividend        2    7[COMRAM] unsigned int 
  7368 ;;  divisor         2    9[COMRAM] unsigned int 
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  2    7[COMRAM] unsigned int 
  7373 ;; Registers used:
  7374 ;;		wreg, status,2, status,0
  7375 ;; Tracked objects:
  7376 ;;		On entry : 0/0
  7377 ;;		On exit  : 0/0
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7380 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7381 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7383 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;Total ram usage:        5 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; This function calls:
  7387 ;;		Nothing
  7388 ;; This function is called by:
  7389 ;;		i2_printf
  7390 ;; This function uses a non-reentrant model
  7391 ;;
  7392                           
  7393                           	psect	text36
  7394  00227A                     __ptext36:
  7395                           	opt stack 0
  7396  00227A                     i2___lwmod:
  7397                           	opt stack 24
  7398                           
  7399                           ;incstack = 0
  7400  00227A  500A               	movf	i2___lwmod@divisor,w,c
  7401  00227C  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7402  00227E  B4D8               	btfsc	status,2,c
  7403  002280  D018               	goto	i2l788
  7404  002282  0E01               	movlw	1
  7405  002284  6E0C               	movwf	i2___lwmod@counter,c
  7406  002286  D004               	goto	i2l3628
  7407  002288                     i2l3626:
  7408  002288  90D8               	bcf	status,0,c
  7409  00228A  360A               	rlcf	i2___lwmod@divisor,f,c
  7410  00228C  360B               	rlcf	i2___lwmod@divisor+1,f,c
  7411  00228E  2A0C               	incf	i2___lwmod@counter,f,c
  7412  002290                     i2l3628:
  7413  002290  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  7414  002292  D7FA               	goto	i2l3626
  7415  002294                     i2l3630:
  7416  002294  500A               	movf	i2___lwmod@divisor,w,c
  7417  002296  5C08               	subwf	i2___lwmod@dividend,w,c
  7418  002298  500B               	movf	i2___lwmod@divisor+1,w,c
  7419  00229A  5809               	subwfb	i2___lwmod@dividend+1,w,c
  7420  00229C  A0D8               	btfss	status,0,c
  7421  00229E  D004               	goto	i2l3634
  7422  0022A0  500A               	movf	i2___lwmod@divisor,w,c
  7423  0022A2  5E08               	subwf	i2___lwmod@dividend,f,c
  7424  0022A4  500B               	movf	i2___lwmod@divisor+1,w,c
  7425  0022A6  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  7426  0022A8                     i2l3634:
  7427  0022A8  90D8               	bcf	status,0,c
  7428  0022AA  320B               	rrcf	i2___lwmod@divisor+1,f,c
  7429  0022AC  320A               	rrcf	i2___lwmod@divisor,f,c
  7430  0022AE  2E0C               	decfsz	i2___lwmod@counter,f,c
  7431  0022B0  D7F1               	goto	i2l3630
  7432  0022B2                     i2l788:
  7433  0022B2  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  7434  0022B6  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7435  0022BA  0012               	return		;funcret
  7436  0022BC                     __end_ofi2___lwmod:
  7437                           	opt stack 0
  7438                           pclatu	equ	0xFFB
  7439                           pclath	equ	0xFFA
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           intcon	equ	0xFF2
  7447                           intcon2	equ	0xFF1
  7448                           intcon3	equ	0xFF0
  7449                           postinc0	equ	0xFEE
  7450                           fsr0h	equ	0xFEA
  7451                           fsr0l	equ	0xFE9
  7452                           wreg	equ	0xFE8
  7453                           fsr1h	equ	0xFE2
  7454                           fsr1l	equ	0xFE1
  7455                           indf2	equ	0xFDF
  7456                           postinc2	equ	0xFDE
  7457                           postdec2	equ	0xFDD
  7458                           fsr2h	equ	0xFDA
  7459                           fsr2l	equ	0xFD9
  7460                           status	equ	0xFD8
  7461                           
  7462 ;; *************** function i2___lwdiv *****************
  7463 ;; Defined at:
  7464 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  dividend        2    0[COMRAM] unsigned int 
  7467 ;;  divisor         2    2[COMRAM] unsigned int 
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7470 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7471 ;; Return value:  Size  Location     Type
  7472 ;;                  2    0[COMRAM] unsigned int 
  7473 ;; Registers used:
  7474 ;;		wreg, status,2, status,0
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7480 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;Total ram usage:        7 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; This function calls:
  7487 ;;		Nothing
  7488 ;; This function is called by:
  7489 ;;		i2_printf
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text37
  7494  002140                     __ptext37:
  7495                           	opt stack 0
  7496  002140                     i2___lwdiv:
  7497                           	opt stack 24
  7498                           
  7499                           ;incstack = 0
  7500  002140  0E00               	movlw	0
  7501  002142  6E06               	movwf	i2___lwdiv@quotient+1,c
  7502  002144  0E00               	movlw	0
  7503  002146  6E05               	movwf	i2___lwdiv@quotient,c
  7504  002148  5003               	movf	i2___lwdiv@divisor,w,c
  7505  00214A  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7506  00214C  B4D8               	btfsc	status,2,c
  7507  00214E  D01C               	goto	i2l778
  7508  002150  0E01               	movlw	1
  7509  002152  6E07               	movwf	i2___lwdiv@counter,c
  7510  002154  D004               	goto	i2l3608
  7511  002156                     i2l3606:
  7512  002156  90D8               	bcf	status,0,c
  7513  002158  3603               	rlcf	i2___lwdiv@divisor,f,c
  7514  00215A  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7515  00215C  2A07               	incf	i2___lwdiv@counter,f,c
  7516  00215E                     i2l3608:
  7517  00215E  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7518  002160  D7FA               	goto	i2l3606
  7519  002162                     i2l3610:
  7520  002162  90D8               	bcf	status,0,c
  7521  002164  3605               	rlcf	i2___lwdiv@quotient,f,c
  7522  002166  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7523  002168  5003               	movf	i2___lwdiv@divisor,w,c
  7524  00216A  5C01               	subwf	i2___lwdiv@dividend,w,c
  7525  00216C  5004               	movf	i2___lwdiv@divisor+1,w,c
  7526  00216E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7527  002170  A0D8               	btfss	status,0,c
  7528  002172  D005               	goto	i2l3618
  7529  002174  5003               	movf	i2___lwdiv@divisor,w,c
  7530  002176  5E01               	subwf	i2___lwdiv@dividend,f,c
  7531  002178  5004               	movf	i2___lwdiv@divisor+1,w,c
  7532  00217A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  7533  00217C  8005               	bsf	i2___lwdiv@quotient,0,c
  7534  00217E                     i2l3618:
  7535  00217E  90D8               	bcf	status,0,c
  7536  002180  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  7537  002182  3203               	rrcf	i2___lwdiv@divisor,f,c
  7538  002184  2E07               	decfsz	i2___lwdiv@counter,f,c
  7539  002186  D7ED               	goto	i2l3610
  7540  002188                     i2l778:
  7541  002188  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7542  00218C  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7543  002190  0012               	return		;funcret
  7544  002192                     __end_ofi2___lwdiv:
  7545                           	opt stack 0
  7546                           pclatu	equ	0xFFB
  7547                           pclath	equ	0xFFA
  7548                           tblptru	equ	0xFF8
  7549                           tblptrh	equ	0xFF7
  7550                           tblptrl	equ	0xFF6
  7551                           tablat	equ	0xFF5
  7552                           prodh	equ	0xFF4
  7553                           prodl	equ	0xFF3
  7554                           intcon	equ	0xFF2
  7555                           intcon2	equ	0xFF1
  7556                           intcon3	equ	0xFF0
  7557                           postinc0	equ	0xFEE
  7558                           fsr0h	equ	0xFEA
  7559                           fsr0l	equ	0xFE9
  7560                           wreg	equ	0xFE8
  7561                           fsr1h	equ	0xFE2
  7562                           fsr1l	equ	0xFE1
  7563                           indf2	equ	0xFDF
  7564                           postinc2	equ	0xFDE
  7565                           postdec2	equ	0xFDD
  7566                           fsr2h	equ	0xFDA
  7567                           fsr2l	equ	0xFD9
  7568                           status	equ	0xFD8
  7569                           
  7570 ;; *************** function i2_lcdInst *****************
  7571 ;; Defined at:
  7572 ;;		line 26 in file "lcd.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;  data            1    wreg     unsigned char 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;  data            1    2[COMRAM] unsigned char 
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      void 
  7579 ;; Registers used:
  7580 ;;		wreg, status,2, status,0, cstack
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7589 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7590 ;;Total ram usage:        1 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; Hardware stack levels required when called:    1
  7593 ;; This function calls:
  7594 ;;		i2_lcdNibble
  7595 ;; This function is called by:
  7596 ;;		_isr
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           	psect	text38
  7601  002548                     __ptext38:
  7602                           	opt stack 0
  7603  002548                     i2_lcdInst:
  7604                           	opt stack 24
  7605                           
  7606                           ;incstack = 0
  7607                           ;i2lcdInst@data stored from wreg
  7608  002548  6E03               	movwf	i2lcdInst@data,c
  7609                           
  7610                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  7611  00254A  948C               	bcf	3980,2,c	;volatile
  7612                           
  7613                           ;lcd.c: 28: lcdNibble(data);
  7614  00254C  5003               	movf	i2lcdInst@data,w,c
  7615  00254E  ECF1  F010         	call	i2_lcdNibble
  7616  002552  0012               	return		;funcret
  7617  002554                     __end_ofi2_lcdInst:
  7618                           	opt stack 0
  7619                           pclatu	equ	0xFFB
  7620                           pclath	equ	0xFFA
  7621                           tblptru	equ	0xFF8
  7622                           tblptrh	equ	0xFF7
  7623                           tblptrl	equ	0xFF6
  7624                           tablat	equ	0xFF5
  7625                           prodh	equ	0xFF4
  7626                           prodl	equ	0xFF3
  7627                           intcon	equ	0xFF2
  7628                           intcon2	equ	0xFF1
  7629                           intcon3	equ	0xFF0
  7630                           postinc0	equ	0xFEE
  7631                           fsr0h	equ	0xFEA
  7632                           fsr0l	equ	0xFE9
  7633                           wreg	equ	0xFE8
  7634                           fsr1h	equ	0xFE2
  7635                           fsr1l	equ	0xFE1
  7636                           indf2	equ	0xFDF
  7637                           postinc2	equ	0xFDE
  7638                           postdec2	equ	0xFDD
  7639                           fsr2h	equ	0xFDA
  7640                           fsr2l	equ	0xFD9
  7641                           status	equ	0xFD8
  7642                           
  7643 ;; *************** function i2_lcdNibble *****************
  7644 ;; Defined at:
  7645 ;;		line 36 in file "lcd.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;  data            1    wreg     unsigned char 
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;  data            1    1[COMRAM] unsigned char 
  7650 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  7651 ;; Return value:  Size  Location     Type
  7652 ;;                  1    wreg      void 
  7653 ;; Registers used:
  7654 ;;		wreg, status,2, status,0
  7655 ;; Tracked objects:
  7656 ;;		On entry : 0/0
  7657 ;;		On exit  : 0/0
  7658 ;;		Unchanged: 0/0
  7659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;Total ram usage:        2 bytes
  7665 ;; Hardware stack levels used:    1
  7666 ;; This function calls:
  7667 ;;		Nothing
  7668 ;; This function is called by:
  7669 ;;		i2_lcdInst
  7670 ;;		i2_putch
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           	psect	text39
  7675  0021E2                     __ptext39:
  7676                           	opt stack 0
  7677  0021E2                     i2_lcdNibble:
  7678                           	opt stack 23
  7679                           
  7680                           ;incstack = 0
  7681                           ;i2lcdNibble@data stored from wreg
  7682  0021E2  6E02               	movwf	i2lcdNibble@data,c
  7683                           
  7684                           ;lcd.c: 38: char temp = data & 0xF0;
  7685  0021E4  5002               	movf	i2lcdNibble@data,w,c
  7686  0021E6  0BF0               	andlw	240
  7687  0021E8  6E01               	movwf	i2lcdNibble@temp,c
  7688                           
  7689                           ;lcd.c: 39: LATD = LATD & 0x0F;
  7690  0021EA  508C               	movf	3980,w,c	;volatile
  7691  0021EC  0B0F               	andlw	15
  7692  0021EE  6E8C               	movwf	3980,c	;volatile
  7693                           
  7694                           ;lcd.c: 40: LATD = temp | LATD;
  7695  0021F0  5001               	movf	i2lcdNibble@temp,w,c
  7696  0021F2  108C               	iorwf	3980,w,c	;volatile
  7697  0021F4  6E8C               	movwf	3980,c	;volatile
  7698                           
  7699                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7700  0021F6  968C               	bcf	3980,3,c	;volatile
  7701                           
  7702                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7703  0021F8  0E19               	movlw	25
  7704  0021FA                     i2u392_47:
  7705  0021FA  2EE8               	decfsz	wreg,f,c
  7706  0021FC  D7FE               	bra	i2u392_47
  7707                           
  7708                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  7709  0021FE  868C               	bsf	3980,3,c	;volatile
  7710                           
  7711                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7712  002200  0E19               	movlw	25
  7713  002202                     i2u393_47:
  7714  002202  2EE8               	decfsz	wreg,f,c
  7715  002204  D7FE               	bra	i2u393_47
  7716                           
  7717                           ;lcd.c: 47: data = data << 4;
  7718  002206  3802               	swapf	i2lcdNibble@data,w,c
  7719  002208  0BF0               	andlw	240
  7720  00220A  6E02               	movwf	i2lcdNibble@data,c
  7721                           
  7722                           ;lcd.c: 49: temp = data & 0xF0;
  7723  00220C  5002               	movf	i2lcdNibble@data,w,c
  7724  00220E  0BF0               	andlw	240
  7725  002210  6E01               	movwf	i2lcdNibble@temp,c
  7726                           
  7727                           ;lcd.c: 50: LATD = LATD & 0x0F;
  7728  002212  508C               	movf	3980,w,c	;volatile
  7729  002214  0B0F               	andlw	15
  7730  002216  6E8C               	movwf	3980,c	;volatile
  7731                           
  7732                           ;lcd.c: 51: LATD = temp | LATD;
  7733  002218  5001               	movf	i2lcdNibble@temp,w,c
  7734  00221A  108C               	iorwf	3980,w,c	;volatile
  7735  00221C  6E8C               	movwf	3980,c	;volatile
  7736                           
  7737                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  7738  00221E  968C               	bcf	3980,3,c	;volatile
  7739                           
  7740                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7741  002220  0E19               	movlw	25
  7742  002222                     i2u394_47:
  7743  002222  2EE8               	decfsz	wreg,f,c
  7744  002224  D7FE               	bra	i2u394_47
  7745                           
  7746                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  7747  002226  868C               	bsf	3980,3,c	;volatile
  7748                           
  7749                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7750  002228  0E19               	movlw	25
  7751  00222A                     i2u395_47:
  7752  00222A  2EE8               	decfsz	wreg,f,c
  7753  00222C  D7FE               	bra	i2u395_47
  7754  00222E  0012               	return		;funcret
  7755  002230                     __end_ofi2_lcdNibble:
  7756                           	opt stack 0
  7757                           pclatu	equ	0xFFB
  7758                           pclath	equ	0xFFA
  7759                           tblptru	equ	0xFF8
  7760                           tblptrh	equ	0xFF7
  7761                           tblptrl	equ	0xFF6
  7762                           tablat	equ	0xFF5
  7763                           prodh	equ	0xFF4
  7764                           prodl	equ	0xFF3
  7765                           intcon	equ	0xFF2
  7766                           intcon2	equ	0xFF1
  7767                           intcon3	equ	0xFF0
  7768                           postinc0	equ	0xFEE
  7769                           fsr0h	equ	0xFEA
  7770                           fsr0l	equ	0xFE9
  7771                           wreg	equ	0xFE8
  7772                           fsr1h	equ	0xFE2
  7773                           fsr1l	equ	0xFE1
  7774                           indf2	equ	0xFDF
  7775                           postinc2	equ	0xFDE
  7776                           postdec2	equ	0xFDD
  7777                           fsr2h	equ	0xFDA
  7778                           fsr2l	equ	0xFD9
  7779                           status	equ	0xFD8
  7780                           
  7781 ;; *************** function _dec_to_hex *****************
  7782 ;; Defined at:
  7783 ;;		line 343 in file "main.c"
  7784 ;; Parameters:    Size  Location     Type
  7785 ;;  num             2   98[COMRAM] int 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  quotient        2  112[COMRAM] int 
  7788 ;;  hexnum          2  110[COMRAM] int 
  7789 ;;  i               2  108[COMRAM] int 
  7790 ;;  temp            2  106[COMRAM] int 
  7791 ;; Return value:  Size  Location     Type
  7792 ;;                  2   98[COMRAM] int 
  7793 ;; Registers used:
  7794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7795 ;; Tracked objects:
  7796 ;;		On entry : 0/0
  7797 ;;		On exit  : 0/0
  7798 ;;		Unchanged: 0/0
  7799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7800 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;Total ram usage:       16 bytes
  7805 ;; Hardware stack levels used:    1
  7806 ;; Hardware stack levels required when called:    5
  7807 ;; This function calls:
  7808 ;;		___awdiv
  7809 ;;		___awtoft
  7810 ;;		___ftadd
  7811 ;;		___ftmul
  7812 ;;		___fttol
  7813 ;;		_pow
  7814 ;; This function is called by:
  7815 ;;		_isr
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text40
  7820  0012A4                     __ptext40:
  7821                           	opt stack 0
  7822  0012A4                     _dec_to_hex:
  7823                           	opt stack 20
  7824                           
  7825                           ;main.c: 344: int i = 0, quotient = num, temp, hexnum = 0;
  7826                           
  7827                           ;incstack = 0
  7828  0012A4  0E00               	movlw	0
  7829  0012A6  6E6E               	movwf	dec_to_hex@i+1,c
  7830  0012A8  0E00               	movlw	0
  7831  0012AA  6E6D               	movwf	dec_to_hex@i,c
  7832  0012AC  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  7833  0012B0  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  7834  0012B4  0E00               	movlw	0
  7835  0012B6  6E70               	movwf	dec_to_hex@hexnum+1,c
  7836  0012B8  0E00               	movlw	0
  7837  0012BA  6E6F               	movwf	dec_to_hex@hexnum,c
  7838                           
  7839                           ;main.c: 346: while (quotient != 0) {
  7840  0012BC  D068               	goto	i2l3806
  7841  0012BE                     i2l3794:
  7842                           
  7843                           ;main.c: 347: temp = quotient % 16;
  7844  0012BE  0E0F               	movlw	15
  7845  0012C0  1471               	andwf	dec_to_hex@quotient,w,c
  7846  0012C2  6E6B               	movwf	dec_to_hex@temp,c
  7847  0012C4  6A6C               	clrf	dec_to_hex@temp+1,c
  7848                           
  7849                           ;main.c: 349: hexnum += temp*pow(10,i);
  7850  0012C6  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  7851  0012CA  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  7852  0012CE  EC9D  F011         	call	___awtoft	;wreg free
  7853  0012D2  C009  F065         	movff	?___awtoft,_dec_to_hex$1019
  7854  0012D6  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1019+1
  7855  0012DA  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1019+2
  7856                           
  7857                           ;main.c: 349: hexnum += temp*pow(10,i);
  7858  0012DE  C065  F055         	movff	_dec_to_hex$1019,pow@y
  7859  0012E2  C066  F056         	movff	_dec_to_hex$1019+1,pow@y+1
  7860  0012E6  C067  F057         	movff	_dec_to_hex$1019+2,pow@y+2
  7861  0012EA  0E00               	movlw	0
  7862  0012EC  6E52               	movwf	pow@x,c
  7863  0012EE  0E20               	movlw	32
  7864  0012F0  6E53               	movwf	pow@x+1,c
  7865  0012F2  0E41               	movlw	65
  7866  0012F4  6E54               	movwf	pow@x+2,c
  7867  0012F6  ECE3  F006         	call	_pow	;wreg free
  7868  0012FA  C052  F068         	movff	?_pow,_dec_to_hex$1020
  7869  0012FE  C053  F069         	movff	?_pow+1,_dec_to_hex$1020+1
  7870  001302  C054  F06A         	movff	?_pow+2,_dec_to_hex$1020+2
  7871                           
  7872                           ;main.c: 349: hexnum += temp*pow(10,i);
  7873  001306  C068  F010         	movff	_dec_to_hex$1020,___ftmul@f2
  7874  00130A  C069  F011         	movff	_dec_to_hex$1020+1,___ftmul@f2+1
  7875  00130E  C06A  F012         	movff	_dec_to_hex$1020+2,___ftmul@f2+2
  7876  001312  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  7877  001316  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  7878  00131A  EC9D  F011         	call	___awtoft	;wreg free
  7879  00131E  C009  F00D         	movff	?___awtoft,___ftmul@f1
  7880  001322  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  7881  001326  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  7882  00132A  EC4A  F00A         	call	___ftmul	;wreg free
  7883  00132E  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  7884  001332  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  7885  001336  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  7886  00133A  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  7887  00133E  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  7888  001342  EC9D  F011         	call	___awtoft	;wreg free
  7889  001346  C009  F01C         	movff	?___awtoft,___ftadd@f1
  7890  00134A  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  7891  00134E  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  7892  001352  EC0D  F006         	call	___ftadd	;wreg free
  7893  001356  C01C  F028         	movff	?___ftadd,___fttol@f1
  7894  00135A  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  7895  00135E  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  7896  001362  ECD0  F009         	call	___fttol	;wreg free
  7897  001366  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  7898  00136A  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  7899                           
  7900                           ;main.c: 351: quotient = quotient / 16;
  7901  00136E  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
  7902  001372  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  7903  001376  0E00               	movlw	0
  7904  001378  6E04               	movwf	___awdiv@divisor+1,c
  7905  00137A  0E10               	movlw	16
  7906  00137C  6E03               	movwf	___awdiv@divisor,c
  7907  00137E  ECB8  F00E         	call	___awdiv	;wreg free
  7908  001382  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
  7909  001386  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  7910                           
  7911                           ;main.c: 352: i += 1;
  7912  00138A  4A6D               	infsnz	dec_to_hex@i,f,c
  7913  00138C  2A6E               	incf	dec_to_hex@i+1,f,c
  7914  00138E                     i2l3806:
  7915  00138E  5071               	movf	dec_to_hex@quotient,w,c
  7916  001390  1072               	iorwf	dec_to_hex@quotient+1,w,c
  7917  001392  A4D8               	btfss	status,2,c
  7918  001394  D794               	goto	i2l3794
  7919                           
  7920                           ;main.c: 353: }
  7921                           ;main.c: 354: return hexnum;
  7922  001396  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  7923  00139A  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  7924  00139E  0012               	return		;funcret
  7925  0013A0                     __end_of_dec_to_hex:
  7926                           	opt stack 0
  7927                           pclatu	equ	0xFFB
  7928                           pclath	equ	0xFFA
  7929                           tblptru	equ	0xFF8
  7930                           tblptrh	equ	0xFF7
  7931                           tblptrl	equ	0xFF6
  7932                           tablat	equ	0xFF5
  7933                           prodh	equ	0xFF4
  7934                           prodl	equ	0xFF3
  7935                           intcon	equ	0xFF2
  7936                           intcon2	equ	0xFF1
  7937                           intcon3	equ	0xFF0
  7938                           postinc0	equ	0xFEE
  7939                           fsr0h	equ	0xFEA
  7940                           fsr0l	equ	0xFE9
  7941                           wreg	equ	0xFE8
  7942                           fsr1h	equ	0xFE2
  7943                           fsr1l	equ	0xFE1
  7944                           indf2	equ	0xFDF
  7945                           postinc2	equ	0xFDE
  7946                           postdec2	equ	0xFDD
  7947                           fsr2h	equ	0xFDA
  7948                           fsr2l	equ	0xFD9
  7949                           status	equ	0xFD8
  7950                           
  7951 ;; *************** function _pow *****************
  7952 ;; Defined at:
  7953 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;  x               3   81[COMRAM] int 
  7956 ;;  y               3   84[COMRAM] int 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  yi              4   94[COMRAM] unsigned long 
  7959 ;;  sign            1   93[COMRAM] unsigned char 
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  3   81[COMRAM] unsigned char 
  7962 ;; Registers used:
  7963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7969 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;Total ram usage:       17 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    4
  7976 ;; This function calls:
  7977 ;;		___ftge
  7978 ;;		___ftmul
  7979 ;;		___ftneg
  7980 ;;		___fttol
  7981 ;;		___lltoft
  7982 ;;		_exp
  7983 ;;		_log
  7984 ;; This function is called by:
  7985 ;;		_dec_to_hex
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           	psect	text41
  7990  000DC6                     __ptext41:
  7991                           	opt stack 0
  7992  000DC6                     _pow:
  7993                           	opt stack 20
  7994                           
  7995                           ;incstack = 0
  7996  000DC6  0E00               	movlw	0
  7997  000DC8  6E5E               	movwf	pow@sign,c
  7998  000DCA  5052               	movf	pow@x,w,c
  7999  000DCC  1053               	iorwf	pow@x+1,w,c
  8000  000DCE  1054               	iorwf	pow@x+2,w,c
  8001  000DD0  A4D8               	btfss	status,2,c
  8002  000DD2  D01B               	goto	i2l3426
  8003  000DD4  0E00               	movlw	0
  8004  000DD6  6E01               	movwf	___ftge@ff1,c
  8005  000DD8  0E00               	movlw	0
  8006  000DDA  6E02               	movwf	___ftge@ff1+1,c
  8007  000DDC  0E00               	movlw	0
  8008  000DDE  6E03               	movwf	___ftge@ff1+2,c
  8009  000DE0  C055  F004         	movff	pow@y,___ftge@ff2
  8010  000DE4  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  8011  000DE8  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  8012  000DEC  EC70  F00E         	call	___ftge	;wreg free
  8013  000DF0  A0D8               	btfss	status,0,c
  8014  000DF2  D004               	goto	i2l810
  8015  000DF4  0E00               	movlw	0
  8016  000DF6  6E79               	movwf	_errno+1,c
  8017  000DF8  0E21               	movlw	33
  8018  000DFA  6E78               	movwf	_errno,c
  8019  000DFC                     i2l810:
  8020  000DFC  0E00               	movlw	0
  8021  000DFE  6E52               	movwf	?_pow,c
  8022  000E00  0E00               	movlw	0
  8023  000E02  6E53               	movwf	?_pow+1,c
  8024  000E04  0E00               	movlw	0
  8025  000E06  6E54               	movwf	?_pow+2,c
  8026  000E08  0012               	return	
  8027  000E0A                     i2l3426:
  8028  000E0A  5055               	movf	pow@y,w,c
  8029  000E0C  1056               	iorwf	pow@y+1,w,c
  8030  000E0E  1057               	iorwf	pow@y+2,w,c
  8031  000E10  A4D8               	btfss	status,2,c
  8032  000E12  D007               	goto	i2l3432
  8033  000E14  0E00               	movlw	0
  8034  000E16  6E52               	movwf	?_pow,c
  8035  000E18  0E80               	movlw	128
  8036  000E1A  6E53               	movwf	?_pow+1,c
  8037  000E1C  0E3F               	movlw	63
  8038  000E1E  6E54               	movwf	?_pow+2,c
  8039  000E20  0012               	return	
  8040  000E22                     i2l3432:
  8041  000E22  AE54               	btfss	pow@x+2,7,c
  8042  000E24  D040               	goto	i2l3444
  8043  000E26  C055  F028         	movff	pow@y,___fttol@f1
  8044  000E2A  C056  F029         	movff	pow@y+1,___fttol@f1+1
  8045  000E2E  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  8046  000E32  ECD0  F009         	call	___fttol	;wreg free
  8047  000E36  C028  F05F         	movff	?___fttol,pow@yi
  8048  000E3A  C029  F060         	movff	?___fttol+1,pow@yi+1
  8049  000E3E  C02A  F061         	movff	?___fttol+2,pow@yi+2
  8050  000E42  C02B  F062         	movff	?___fttol+3,pow@yi+3
  8051  000E46  C05F  F009         	movff	pow@yi,___lltoft@c
  8052  000E4A  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  8053  000E4E  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  8054  000E52  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  8055  000E56  EC72  F010         	call	___lltoft	;wreg free
  8056  000E5A  5055               	movf	pow@y,w,c
  8057  000E5C  1809               	xorwf	?___lltoft,w,c
  8058  000E5E  E107               	bnz	i2u318_40
  8059  000E60  5056               	movf	pow@y+1,w,c
  8060  000E62  180A               	xorwf	?___lltoft+1,w,c
  8061  000E64  E104               	bnz	i2u318_40
  8062  000E66  5057               	movf	pow@y+2,w,c
  8063  000E68  180B               	xorwf	?___lltoft+2,w,c
  8064  000E6A  B4D8               	btfsc	status,2,c
  8065  000E6C  D00B               	goto	i2l3440
  8066  000E6E                     i2u318_40:
  8067  000E6E  0E00               	movlw	0
  8068  000E70  6E79               	movwf	_errno+1,c
  8069  000E72  0E21               	movlw	33
  8070  000E74  6E78               	movwf	_errno,c
  8071  000E76  0E00               	movlw	0
  8072  000E78  6E52               	movwf	?_pow,c
  8073  000E7A  0E00               	movlw	0
  8074  000E7C  6E53               	movwf	?_pow+1,c
  8075  000E7E  0E00               	movlw	0
  8076  000E80  6E54               	movwf	?_pow+2,c
  8077  000E82  0012               	return	
  8078  000E84                     i2l3440:
  8079  000E84  505F               	movf	pow@yi,w,c
  8080  000E86  0B01               	andlw	1
  8081  000E88  6E5E               	movwf	pow@sign,c
  8082  000E8A  C052  F001         	movff	pow@x,___ftneg@f1
  8083  000E8E  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  8084  000E92  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  8085  000E96  EC41  F012         	call	___ftneg	;wreg free
  8086  000E9A  C001  F052         	movff	?___ftneg,pow@x
  8087  000E9E  C002  F053         	movff	?___ftneg+1,pow@x+1
  8088  000EA2  C003  F054         	movff	?___ftneg+2,pow@x+2
  8089  000EA6                     i2l3444:
  8090  000EA6  C052  F034         	movff	pow@x,log@x
  8091  000EAA  C053  F035         	movff	pow@x+1,log@x+1
  8092  000EAE  C054  F036         	movff	pow@x+2,log@x+2
  8093  000EB2  EC42  F008         	call	_log	;wreg free
  8094  000EB6  C034  F058         	movff	?_log,_pow$1021
  8095  000EBA  C035  F059         	movff	?_log+1,_pow$1021+1
  8096  000EBE  C036  F05A         	movff	?_log+2,_pow$1021+2
  8097  000EC2  C058  F00D         	movff	_pow$1021,___ftmul@f1
  8098  000EC6  C059  F00E         	movff	_pow$1021+1,___ftmul@f1+1
  8099  000ECA  C05A  F00F         	movff	_pow$1021+2,___ftmul@f1+2
  8100  000ECE  C055  F010         	movff	pow@y,___ftmul@f2
  8101  000ED2  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  8102  000ED6  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  8103  000EDA  EC4A  F00A         	call	___ftmul	;wreg free
  8104  000EDE  C00D  F05B         	movff	?___ftmul,_pow$1022
  8105  000EE2  C00E  F05C         	movff	?___ftmul+1,_pow$1022+1
  8106  000EE6  C00F  F05D         	movff	?___ftmul+2,_pow$1022+2
  8107  000EEA  C05B  F049         	movff	_pow$1022,exp@x
  8108  000EEE  C05C  F04A         	movff	_pow$1022+1,exp@x+1
  8109  000EF2  C05D  F04B         	movff	_pow$1022+2,exp@x+2
  8110  000EF6  EC1B  F005         	call	_exp	;wreg free
  8111  000EFA  C049  F052         	movff	?_exp,pow@x
  8112  000EFE  C04A  F053         	movff	?_exp+1,pow@x+1
  8113  000F02  C04B  F054         	movff	?_exp+2,pow@x+2
  8114  000F06  505E               	movf	pow@sign,w,c
  8115  000F08  B4D8               	btfsc	status,2,c
  8116  000F0A  D00F               	goto	i2l815
  8117  000F0C  C052  F001         	movff	pow@x,___ftneg@f1
  8118  000F10  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  8119  000F14  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  8120  000F18  EC41  F012         	call	___ftneg	;wreg free
  8121  000F1C  C001  F052         	movff	?___ftneg,?_pow
  8122  000F20  C002  F053         	movff	?___ftneg+1,?_pow+1
  8123  000F24  C003  F054         	movff	?___ftneg+2,?_pow+2
  8124  000F28  0012               	return	
  8125  000F2A                     i2l815:
  8126  000F2A  C052  F052         	movff	pow@x,?_pow
  8127  000F2E  C053  F053         	movff	pow@x+1,?_pow+1
  8128  000F32  C054  F054         	movff	pow@x+2,?_pow+2
  8129  000F36  0012               	return		;funcret
  8130  000F38                     __end_of_pow:
  8131                           	opt stack 0
  8132                           pclatu	equ	0xFFB
  8133                           pclath	equ	0xFFA
  8134                           tblptru	equ	0xFF8
  8135                           tblptrh	equ	0xFF7
  8136                           tblptrl	equ	0xFF6
  8137                           tablat	equ	0xFF5
  8138                           prodh	equ	0xFF4
  8139                           prodl	equ	0xFF3
  8140                           intcon	equ	0xFF2
  8141                           intcon2	equ	0xFF1
  8142                           intcon3	equ	0xFF0
  8143                           postinc0	equ	0xFEE
  8144                           fsr0h	equ	0xFEA
  8145                           fsr0l	equ	0xFE9
  8146                           wreg	equ	0xFE8
  8147                           fsr1h	equ	0xFE2
  8148                           fsr1l	equ	0xFE1
  8149                           indf2	equ	0xFDF
  8150                           postinc2	equ	0xFDE
  8151                           postdec2	equ	0xFDD
  8152                           fsr2h	equ	0xFDA
  8153                           fsr2l	equ	0xFD9
  8154                           status	equ	0xFD8
  8155                           
  8156 ;; *************** function _log *****************
  8157 ;; Defined at:
  8158 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;  x               3   51[COMRAM] unsigned char 
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;  exponent        2   54[COMRAM] int 
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  3   51[COMRAM] int 
  8165 ;; Registers used:
  8166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8172 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;Total ram usage:        5 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    3
  8179 ;; This function calls:
  8180 ;;		___awtoft
  8181 ;;		___ftadd
  8182 ;;		___ftmul
  8183 ;;		_eval_poly
  8184 ;;		_frexp
  8185 ;; This function is called by:
  8186 ;;		_pow
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           	psect	text42
  8191  001084                     __ptext42:
  8192                           	opt stack 0
  8193  001084                     _log:
  8194                           	opt stack 20
  8195                           
  8196                           ;incstack = 0
  8197  001084  AE36               	btfss	log@x+2,7,c
  8198  001086  D00B               	goto	i2l3158
  8199  001088  0E00               	movlw	0
  8200  00108A  6E79               	movwf	_errno+1,c
  8201  00108C  0E21               	movlw	33
  8202  00108E  6E78               	movwf	_errno,c
  8203  001090  0E00               	movlw	0
  8204  001092  6E34               	movwf	?_log,c
  8205  001094  0E00               	movlw	0
  8206  001096  6E35               	movwf	?_log+1,c
  8207  001098  0E00               	movlw	0
  8208  00109A  6E36               	movwf	?_log+2,c
  8209  00109C  0012               	return	
  8210  00109E                     i2l3158:
  8211  00109E  5034               	movf	log@x,w,c
  8212  0010A0  1035               	iorwf	log@x+1,w,c
  8213  0010A2  1036               	iorwf	log@x+2,w,c
  8214  0010A4  A4D8               	btfss	status,2,c
  8215  0010A6  D00B               	goto	i2l3164
  8216  0010A8  0E00               	movlw	0
  8217  0010AA  6E79               	movwf	_errno+1,c
  8218  0010AC  0E22               	movlw	34
  8219  0010AE  6E78               	movwf	_errno,c
  8220  0010B0  0E00               	movlw	0
  8221  0010B2  6E34               	movwf	?_log,c
  8222  0010B4  0E00               	movlw	0
  8223  0010B6  6E35               	movwf	?_log+1,c
  8224  0010B8  0E00               	movlw	0
  8225  0010BA  6E36               	movwf	?_log+2,c
  8226  0010BC  0012               	return	
  8227  0010BE                     i2l3164:
  8228  0010BE  0E00               	movlw	0
  8229  0010C0  6E10               	movwf	___ftmul@f2,c
  8230  0010C2  0E00               	movlw	0
  8231  0010C4  6E11               	movwf	___ftmul@f2+1,c
  8232  0010C6  0E40               	movlw	64
  8233  0010C8  6E12               	movwf	___ftmul@f2+2,c
  8234  0010CA  0E37               	movlw	low log@exponent
  8235  0010CC  6E04               	movwf	frexp@eptr,c
  8236  0010CE  0E00               	movlw	high log@exponent
  8237  0010D0  6E05               	movwf	frexp@eptr+1,c
  8238  0010D2  C034  F001         	movff	log@x,frexp@value
  8239  0010D6  C035  F002         	movff	log@x+1,frexp@value+1
  8240  0010DA  C036  F003         	movff	log@x+2,frexp@value+2
  8241  0010DE  EC28  F00E         	call	_frexp	;wreg free
  8242  0010E2  C001  F00D         	movff	?_frexp,___ftmul@f1
  8243  0010E6  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  8244  0010EA  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  8245  0010EE  EC4A  F00A         	call	___ftmul	;wreg free
  8246  0010F2  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  8247  0010F6  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  8248  0010FA  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  8249  0010FE  0E00               	movlw	0
  8250  001100  6E1F               	movwf	___ftadd@f2,c
  8251  001102  0E80               	movlw	128
  8252  001104  6E20               	movwf	___ftadd@f2+1,c
  8253  001106  0EBF               	movlw	191
  8254  001108  6E21               	movwf	___ftadd@f2+2,c
  8255  00110A  EC0D  F006         	call	___ftadd	;wreg free
  8256  00110E  C01C  F034         	movff	?___ftadd,log@x
  8257  001112  C01D  F035         	movff	?___ftadd+1,log@x+1
  8258  001116  C01E  F036         	movff	?___ftadd+2,log@x+2
  8259  00111A  0637               	decf	log@exponent,f,c
  8260  00111C  A0D8               	btfss	status,0,c
  8261  00111E  0638               	decf	log@exponent+1,f,c
  8262  001120  C034  F028         	movff	log@x,eval_poly@x
  8263  001124  C035  F029         	movff	log@x+1,eval_poly@x+1
  8264  001128  C036  F02A         	movff	log@x+2,eval_poly@x+2
  8265  00112C  0E2D               	movlw	low log@coeff
  8266  00112E  6E2B               	movwf	eval_poly@d,c
  8267  001130  0EFE               	movlw	high log@coeff
  8268  001132  6E2C               	movwf	eval_poly@d+1,c
  8269  001134  0E00               	movlw	0
  8270  001136  6E2E               	movwf	eval_poly@n+1,c
  8271  001138  0E08               	movlw	8
  8272  00113A  6E2D               	movwf	eval_poly@n,c
  8273  00113C  EC0F  F00C         	call	_eval_poly	;wreg free
  8274  001140  C028  F034         	movff	?_eval_poly,log@x
  8275  001144  C029  F035         	movff	?_eval_poly+1,log@x+1
  8276  001148  C02A  F036         	movff	?_eval_poly+2,log@x+2
  8277  00114C  0E72               	movlw	114
  8278  00114E  6E10               	movwf	___ftmul@f2,c
  8279  001150  0E31               	movlw	49
  8280  001152  6E11               	movwf	___ftmul@f2+1,c
  8281  001154  0E3F               	movlw	63
  8282  001156  6E12               	movwf	___ftmul@f2+2,c
  8283  001158  C037  F009         	movff	log@exponent,___awtoft@c
  8284  00115C  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  8285  001160  EC9D  F011         	call	___awtoft	;wreg free
  8286  001164  C009  F00D         	movff	?___awtoft,___ftmul@f1
  8287  001168  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  8288  00116C  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  8289  001170  EC4A  F00A         	call	___ftmul	;wreg free
  8290  001174  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  8291  001178  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  8292  00117C  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  8293  001180  C034  F01F         	movff	log@x,___ftadd@f2
  8294  001184  C035  F020         	movff	log@x+1,___ftadd@f2+1
  8295  001188  C036  F021         	movff	log@x+2,___ftadd@f2+2
  8296  00118C  EC0D  F006         	call	___ftadd	;wreg free
  8297  001190  C01C  F034         	movff	?___ftadd,?_log
  8298  001194  C01D  F035         	movff	?___ftadd+1,?_log+1
  8299  001198  C01E  F036         	movff	?___ftadd+2,?_log+2
  8300  00119C  0012               	return	
  8301  00119E                     __end_of_log:
  8302                           	opt stack 0
  8303                           pclatu	equ	0xFFB
  8304                           pclath	equ	0xFFA
  8305                           tblptru	equ	0xFF8
  8306                           tblptrh	equ	0xFF7
  8307                           tblptrl	equ	0xFF6
  8308                           tablat	equ	0xFF5
  8309                           prodh	equ	0xFF4
  8310                           prodl	equ	0xFF3
  8311                           intcon	equ	0xFF2
  8312                           intcon2	equ	0xFF1
  8313                           intcon3	equ	0xFF0
  8314                           postinc0	equ	0xFEE
  8315                           fsr0h	equ	0xFEA
  8316                           fsr0l	equ	0xFE9
  8317                           wreg	equ	0xFE8
  8318                           fsr1h	equ	0xFE2
  8319                           fsr1l	equ	0xFE1
  8320                           indf2	equ	0xFDF
  8321                           postinc2	equ	0xFDE
  8322                           postdec2	equ	0xFDD
  8323                           fsr2h	equ	0xFDA
  8324                           fsr2l	equ	0xFD9
  8325                           status	equ	0xFD8
  8326                           
  8327 ;; *************** function _exp *****************
  8328 ;; Defined at:
  8329 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  x               3   72[COMRAM] int 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  exponent        2   78[COMRAM] int 
  8334 ;;  sign            1   80[COMRAM] unsigned char 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  3   72[COMRAM] unsigned char 
  8337 ;; Registers used:
  8338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8344 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;Total ram usage:        9 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    3
  8351 ;; This function calls:
  8352 ;;		___awtoft
  8353 ;;		___ftdiv
  8354 ;;		___ftge
  8355 ;;		___ftmul
  8356 ;;		___ftneg
  8357 ;;		___ftsub
  8358 ;;		___fttol
  8359 ;;		_eval_poly
  8360 ;;		_floor
  8361 ;;		_ldexp
  8362 ;; This function is called by:
  8363 ;;		_pow
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           	psect	text43
  8368  000A36                     __ptext43:
  8369                           	opt stack 0
  8370  000A36                     _exp:
  8371                           	opt stack 20
  8372                           
  8373                           ;incstack = 0
  8374  000A36  5049               	movf	exp@x,w,c
  8375  000A38  104A               	iorwf	exp@x+1,w,c
  8376  000A3A  104B               	iorwf	exp@x+2,w,c
  8377  000A3C  A4D8               	btfss	status,2,c
  8378  000A3E  D007               	goto	i2l3180
  8379  000A40  0E00               	movlw	0
  8380  000A42  6E49               	movwf	?_exp,c
  8381  000A44  0E80               	movlw	128
  8382  000A46  6E4A               	movwf	?_exp+1,c
  8383  000A48  0E3F               	movlw	63
  8384  000A4A  6E4B               	movwf	?_exp+2,c
  8385  000A4C  0012               	return	
  8386  000A4E                     i2l3180:
  8387  000A4E  0E72               	movlw	114
  8388  000A50  6E01               	movwf	___ftge@ff1,c
  8389  000A52  0E31               	movlw	49
  8390  000A54  6E02               	movwf	___ftge@ff1+1,c
  8391  000A56  0E44               	movlw	68
  8392  000A58  6E03               	movwf	___ftge@ff1+2,c
  8393  000A5A  C049  F004         	movff	exp@x,___ftge@ff2
  8394  000A5E  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  8395  000A62  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  8396  000A66  EC70  F00E         	call	___ftge	;wreg free
  8397  000A6A  B0D8               	btfsc	status,0,c
  8398  000A6C  D00B               	goto	i2l3186
  8399  000A6E  0E00               	movlw	0
  8400  000A70  6E79               	movwf	_errno+1,c
  8401  000A72  0E22               	movlw	34
  8402  000A74  6E78               	movwf	_errno,c
  8403  000A76  0EFF               	movlw	255
  8404  000A78  6E49               	movwf	?_exp,c
  8405  000A7A  0E7F               	movlw	127
  8406  000A7C  6E4A               	movwf	?_exp+1,c
  8407  000A7E  0E7F               	movlw	127
  8408  000A80  6E4B               	movwf	?_exp+2,c
  8409  000A82  0012               	return	
  8410  000A84                     i2l3186:
  8411  000A84  C049  F001         	movff	exp@x,___ftge@ff1
  8412  000A88  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  8413  000A8C  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  8414  000A90  0E49               	movlw	73
  8415  000A92  6E04               	movwf	___ftge@ff2,c
  8416  000A94  0E3A               	movlw	58
  8417  000A96  6E05               	movwf	___ftge@ff2+1,c
  8418  000A98  0EC4               	movlw	196
  8419  000A9A  6E06               	movwf	___ftge@ff2+2,c
  8420  000A9C  EC70  F00E         	call	___ftge	;wreg free
  8421  000AA0  B0D8               	btfsc	status,0,c
  8422  000AA2  D00B               	goto	i2l3192
  8423  000AA4  0E00               	movlw	0
  8424  000AA6  6E79               	movwf	_errno+1,c
  8425  000AA8  0E22               	movlw	34
  8426  000AAA  6E78               	movwf	_errno,c
  8427  000AAC  0E00               	movlw	0
  8428  000AAE  6E49               	movwf	?_exp,c
  8429  000AB0  0E00               	movlw	0
  8430  000AB2  6E4A               	movwf	?_exp+1,c
  8431  000AB4  0E00               	movlw	0
  8432  000AB6  6E4B               	movwf	?_exp+2,c
  8433  000AB8  0012               	return	
  8434  000ABA                     i2l3192:
  8435  000ABA  AE4B               	btfss	exp@x+2,7,c
  8436  000ABC  D002               	goto	i2u279_40
  8437  000ABE  0E01               	movlw	1
  8438  000AC0  D001               	goto	i2u280_40
  8439  000AC2                     i2u279_40:
  8440  000AC2  0E00               	movlw	0
  8441  000AC4                     i2u280_40:
  8442  000AC4  6E51               	movwf	exp@sign,c
  8443  000AC6  5051               	movf	exp@sign,w,c
  8444  000AC8  B4D8               	btfsc	status,2,c
  8445  000ACA  D00E               	goto	i2l973
  8446  000ACC  C049  F001         	movff	exp@x,___ftneg@f1
  8447  000AD0  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  8448  000AD4  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  8449  000AD8  EC41  F012         	call	___ftneg	;wreg free
  8450  000ADC  C001  F049         	movff	?___ftneg,exp@x
  8451  000AE0  C002  F04A         	movff	?___ftneg+1,exp@x+1
  8452  000AE4  C003  F04B         	movff	?___ftneg+2,exp@x+2
  8453  000AE8                     i2l973:
  8454  000AE8  C049  F00D         	movff	exp@x,___ftmul@f1
  8455  000AEC  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  8456  000AF0  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  8457  000AF4  0EAA               	movlw	170
  8458  000AF6  6E10               	movwf	___ftmul@f2,c
  8459  000AF8  0EB8               	movlw	184
  8460  000AFA  6E11               	movwf	___ftmul@f2+1,c
  8461  000AFC  0E3F               	movlw	63
  8462  000AFE  6E12               	movwf	___ftmul@f2+2,c
  8463  000B00  EC4A  F00A         	call	___ftmul	;wreg free
  8464  000B04  C00D  F049         	movff	?___ftmul,exp@x
  8465  000B08  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  8466  000B0C  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  8467  000B10  C049  F041         	movff	exp@x,floor@x
  8468  000B14  C04A  F042         	movff	exp@x+1,floor@x+1
  8469  000B18  C04B  F043         	movff	exp@x+2,floor@x+2
  8470  000B1C  EC37  F00B         	call	_floor	;wreg free
  8471  000B20  C041  F04C         	movff	?_floor,_exp$1023
  8472  000B24  C042  F04D         	movff	?_floor+1,_exp$1023+1
  8473  000B28  C043  F04E         	movff	?_floor+2,_exp$1023+2
  8474  000B2C  C04C  F028         	movff	_exp$1023,___fttol@f1
  8475  000B30  C04D  F029         	movff	_exp$1023+1,___fttol@f1+1
  8476  000B34  C04E  F02A         	movff	_exp$1023+2,___fttol@f1+2
  8477  000B38  ECD0  F009         	call	___fttol	;wreg free
  8478  000B3C  C028  F04F         	movff	?___fttol,exp@exponent
  8479  000B40  C029  F050         	movff	?___fttol+1,exp@exponent+1
  8480  000B44  C049  F028         	movff	exp@x,___ftsub@f1
  8481  000B48  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  8482  000B4C  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  8483  000B50  C04F  F009         	movff	exp@exponent,___awtoft@c
  8484  000B54  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  8485  000B58  EC9D  F011         	call	___awtoft	;wreg free
  8486  000B5C  C009  F02B         	movff	?___awtoft,___ftsub@f2
  8487  000B60  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  8488  000B64  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  8489  000B68  EC5E  F011         	call	___ftsub	;wreg free
  8490  000B6C  C028  F049         	movff	?___ftsub,exp@x
  8491  000B70  C029  F04A         	movff	?___ftsub+1,exp@x+1
  8492  000B74  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  8493  000B78  C049  F028         	movff	exp@x,eval_poly@x
  8494  000B7C  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  8495  000B80  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  8496  000B84  0E0F               	movlw	low exp@coeff
  8497  000B86  6E2B               	movwf	eval_poly@d,c
  8498  000B88  0EFE               	movlw	high exp@coeff
  8499  000B8A  6E2C               	movwf	eval_poly@d+1,c
  8500  000B8C  0E00               	movlw	0
  8501  000B8E  6E2E               	movwf	eval_poly@n+1,c
  8502  000B90  0E09               	movlw	9
  8503  000B92  6E2D               	movwf	eval_poly@n,c
  8504  000B94  EC0F  F00C         	call	_eval_poly	;wreg free
  8505  000B98  C028  F034         	movff	?_eval_poly,ldexp@value
  8506  000B9C  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  8507  000BA0  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  8508  000BA4  C04F  F037         	movff	exp@exponent,ldexp@newexp
  8509  000BA8  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  8510  000BAC  EC78  F00C         	call	_ldexp	;wreg free
  8511  000BB0  C034  F049         	movff	?_ldexp,exp@x
  8512  000BB4  C035  F04A         	movff	?_ldexp+1,exp@x+1
  8513  000BB8  C036  F04B         	movff	?_ldexp+2,exp@x+2
  8514  000BBC  5051               	movf	exp@sign,w,c
  8515  000BBE  B4D8               	btfsc	status,2,c
  8516  000BC0  D025               	goto	i2l974
  8517  000BC2  2849               	incf	exp@x,w,c
  8518  000BC4  E10E               	bnz	i2l3214
  8519  000BC6  0E7F               	movlw	127
  8520  000BC8  184A               	xorwf	exp@x+1,w,c
  8521  000BCA  E10B               	bnz	i2l3214
  8522  000BCC  0E7F               	movlw	127
  8523  000BCE  184B               	xorwf	exp@x+2,w,c
  8524  000BD0  A4D8               	btfss	status,2,c
  8525  000BD2  D007               	goto	i2l3214
  8526  000BD4  0E00               	movlw	0
  8527  000BD6  6E49               	movwf	?_exp,c
  8528  000BD8  0E00               	movlw	0
  8529  000BDA  6E4A               	movwf	?_exp+1,c
  8530  000BDC  0E00               	movlw	0
  8531  000BDE  6E4B               	movwf	?_exp+2,c
  8532  000BE0  0012               	return	
  8533  000BE2                     i2l3214:
  8534  000BE2  0E00               	movlw	0
  8535  000BE4  6E09               	movwf	___ftdiv@f1,c
  8536  000BE6  0E80               	movlw	128
  8537  000BE8  6E0A               	movwf	___ftdiv@f1+1,c
  8538  000BEA  0E3F               	movlw	63
  8539  000BEC  6E0B               	movwf	___ftdiv@f1+2,c
  8540  000BEE  C049  F00C         	movff	exp@x,___ftdiv@f2
  8541  000BF2  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  8542  000BF6  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  8543  000BFA  ECC4  F00A         	call	___ftdiv	;wreg free
  8544  000BFE  C009  F049         	movff	?___ftdiv,?_exp
  8545  000C02  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  8546  000C06  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  8547  000C0A  0012               	return	
  8548  000C0C                     i2l974:
  8549  000C0C  C049  F049         	movff	exp@x,?_exp
  8550  000C10  C04A  F04A         	movff	exp@x+1,?_exp+1
  8551  000C14  C04B  F04B         	movff	exp@x+2,?_exp+2
  8552  000C18  0012               	return		;funcret
  8553  000C1A                     __end_of_exp:
  8554                           	opt stack 0
  8555                           pclatu	equ	0xFFB
  8556                           pclath	equ	0xFFA
  8557                           tblptru	equ	0xFF8
  8558                           tblptrh	equ	0xFF7
  8559                           tblptrl	equ	0xFF6
  8560                           tablat	equ	0xFF5
  8561                           prodh	equ	0xFF4
  8562                           prodl	equ	0xFF3
  8563                           intcon	equ	0xFF2
  8564                           intcon2	equ	0xFF1
  8565                           intcon3	equ	0xFF0
  8566                           postinc0	equ	0xFEE
  8567                           fsr0h	equ	0xFEA
  8568                           fsr0l	equ	0xFE9
  8569                           wreg	equ	0xFE8
  8570                           fsr1h	equ	0xFE2
  8571                           fsr1l	equ	0xFE1
  8572                           indf2	equ	0xFDF
  8573                           postinc2	equ	0xFDE
  8574                           postdec2	equ	0xFDD
  8575                           fsr2h	equ	0xFDA
  8576                           fsr2l	equ	0xFD9
  8577                           status	equ	0xFD8
  8578                           
  8579 ;; *************** function _ldexp *****************
  8580 ;; Defined at:
  8581 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;  value           3   51[COMRAM] unsigned char 
  8584 ;;  newexp          2   54[COMRAM] int 
  8585 ;; Auto vars:     Size  Location     Type
  8586 ;;		None
  8587 ;; Return value:  Size  Location     Type
  8588 ;;                  3   51[COMRAM] int 
  8589 ;; Registers used:
  8590 ;;		wreg, status,2, status,0
  8591 ;; Tracked objects:
  8592 ;;		On entry : 0/0
  8593 ;;		On exit  : 0/0
  8594 ;;		Unchanged: 0/0
  8595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8596 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;Total ram usage:        7 bytes
  8601 ;; Hardware stack levels used:    1
  8602 ;; This function calls:
  8603 ;;		Nothing
  8604 ;; This function is called by:
  8605 ;;		_exp
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text44
  8610  0018F0                     __ptext44:
  8611                           	opt stack 0
  8612  0018F0                     _ldexp:
  8613                           	opt stack 22
  8614                           
  8615                           ;incstack = 0
  8616  0018F0  5034               	movf	ldexp@value,w,c
  8617  0018F2  1035               	iorwf	ldexp@value+1,w,c
  8618  0018F4  1036               	iorwf	ldexp@value+2,w,c
  8619  0018F6  A4D8               	btfss	status,2,c
  8620  0018F8  D007               	goto	i2l3026
  8621  0018FA  0E00               	movlw	0
  8622  0018FC  6E34               	movwf	?_ldexp,c
  8623  0018FE  0E00               	movlw	0
  8624  001900  6E35               	movwf	?_ldexp+1,c
  8625  001902  0E00               	movlw	0
  8626  001904  6E36               	movwf	?_ldexp+2,c
  8627  001906  0012               	return	
  8628  001908                     i2l3026:
  8629  001908  5036               	movf	ldexp@value+2,w,c
  8630  00190A  0B7F               	andlw	127
  8631  00190C  6E39               	movwf	??_ldexp& (0+255),c
  8632  00190E  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  8633  001910  90D8               	bcf	status,0,c
  8634  001912  3639               	rlcf	??_ldexp,f,c
  8635  001914  363A               	rlcf	??_ldexp+1,f,c
  8636  001916  5039               	movf	??_ldexp,w,c
  8637  001918  2637               	addwf	ldexp@newexp,f,c
  8638  00191A  503A               	movf	??_ldexp+1,w,c
  8639  00191C  2238               	addwfc	ldexp@newexp+1,f,c
  8640  00191E  AE35               	btfss	ldexp@value+1,7,c
  8641  001920  D003               	goto	i2u259_40
  8642  001922  6A39               	clrf	??_ldexp& (0+255),c
  8643  001924  2A39               	incf	??_ldexp& (0+255),f,c
  8644  001926  D001               	goto	i2u259_48
  8645  001928                     i2u259_40:
  8646  001928  6A39               	clrf	??_ldexp& (0+255),c
  8647  00192A                     i2u259_48:
  8648  00192A  5039               	movf	??_ldexp,w,c
  8649  00192C  2637               	addwf	ldexp@newexp,f,c
  8650  00192E  0E00               	movlw	0
  8651  001930  2238               	addwfc	ldexp@newexp+1,f,c
  8652  001932  AE38               	btfss	ldexp@newexp+1,7,c
  8653  001934  D00B               	goto	i2l3034
  8654  001936  0E00               	movlw	0
  8655  001938  6E79               	movwf	_errno+1,c
  8656  00193A  0E22               	movlw	34
  8657  00193C  6E78               	movwf	_errno,c
  8658  00193E  0E00               	movlw	0
  8659  001940  6E34               	movwf	?_ldexp,c
  8660  001942  0E00               	movlw	0
  8661  001944  6E35               	movwf	?_ldexp+1,c
  8662  001946  0E00               	movlw	0
  8663  001948                     L4:
  8664  001948  6E36               	movwf	?_ldexp+2,c
  8665  00194A  0012               	return	
  8666  00194C                     i2l3034:
  8667  00194C  BE38               	btfsc	ldexp@newexp+1,7,c
  8668  00194E  D015               	goto	i2l3050
  8669  001950  0438               	decf	ldexp@newexp+1,w,c
  8670  001952  A0D8               	btfss	status,0,c
  8671  001954  D012               	goto	i2l3050
  8672  001956  0E00               	movlw	0
  8673  001958  6E79               	movwf	_errno+1,c
  8674  00195A  0E22               	movlw	34
  8675  00195C  6E78               	movwf	_errno,c
  8676  00195E  AE36               	btfss	ldexp@value+2,7,c
  8677  001960  D006               	goto	i2l3046
  8678  001962  0EFF               	movlw	255
  8679  001964  6E34               	movwf	?_ldexp,c
  8680  001966  0E7F               	movlw	127
  8681  001968  6E35               	movwf	?_ldexp+1,c
  8682  00196A  0EFF               	movlw	255
  8683  00196C  D7ED               	goto	L4
  8684  00196E                     i2l3046:
  8685  00196E  0EFF               	movlw	255
  8686  001970  6E34               	movwf	?_ldexp,c
  8687  001972  0E7F               	movlw	127
  8688  001974  6E35               	movwf	?_ldexp+1,c
  8689  001976  0E7F               	movlw	127
  8690  001978  D7E7               	goto	L4
  8691  00197A                     i2l3050:
  8692  00197A  3438               	rlcf	ldexp@newexp+1,w,c
  8693  00197C  3038               	rrcf	ldexp@newexp+1,w,c
  8694  00197E  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  8695  001980  3037               	rrcf	ldexp@newexp,w,c
  8696  001982  6E39               	movwf	??_ldexp& (0+255),c
  8697  001984  5036               	movf	ldexp@value+2,w,c
  8698  001986  1839               	xorwf	??_ldexp,w,c
  8699  001988  0B80               	andlw	-128
  8700  00198A  1839               	xorwf	??_ldexp,w,c
  8701  00198C  6E36               	movwf	ldexp@value+2,c
  8702  00198E  C037  F039         	movff	ldexp@newexp,??_ldexp
  8703  001992  0E01               	movlw	1
  8704  001994  1639               	andwf	??_ldexp,f,c
  8705  001996  3239               	rrcf	??_ldexp,f,c
  8706  001998  3239               	rrcf	??_ldexp,f,c
  8707  00199A  5035               	movf	ldexp@value+1,w,c
  8708  00199C  1839               	xorwf	??_ldexp,w,c
  8709  00199E  0B7F               	andlw	-129
  8710  0019A0  1839               	xorwf	??_ldexp,w,c
  8711  0019A2  6E35               	movwf	ldexp@value+1,c
  8712  0019A4  C034  F034         	movff	ldexp@value,?_ldexp
  8713  0019A8  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  8714  0019AC  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  8715  0019B0  0012               	return	
  8716  0019B2                     __end_of_ldexp:
  8717                           	opt stack 0
  8718                           pclatu	equ	0xFFB
  8719                           pclath	equ	0xFFA
  8720                           tblptru	equ	0xFF8
  8721                           tblptrh	equ	0xFF7
  8722                           tblptrl	equ	0xFF6
  8723                           tablat	equ	0xFF5
  8724                           prodh	equ	0xFF4
  8725                           prodl	equ	0xFF3
  8726                           intcon	equ	0xFF2
  8727                           intcon2	equ	0xFF1
  8728                           intcon3	equ	0xFF0
  8729                           postinc0	equ	0xFEE
  8730                           fsr0h	equ	0xFEA
  8731                           fsr0l	equ	0xFE9
  8732                           wreg	equ	0xFE8
  8733                           fsr1h	equ	0xFE2
  8734                           fsr1l	equ	0xFE1
  8735                           indf2	equ	0xFDF
  8736                           postinc2	equ	0xFDE
  8737                           postdec2	equ	0xFDD
  8738                           fsr2h	equ	0xFDA
  8739                           fsr2l	equ	0xFD9
  8740                           status	equ	0xFD8
  8741                           
  8742 ;; *************** function _floor *****************
  8743 ;; Defined at:
  8744 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  8745 ;; Parameters:    Size  Location     Type
  8746 ;;  x               3   64[COMRAM] int 
  8747 ;; Auto vars:     Size  Location     Type
  8748 ;;  i               3   67[COMRAM] int 
  8749 ;;  expon           2   70[COMRAM] int 
  8750 ;; Return value:  Size  Location     Type
  8751 ;;                  3   64[COMRAM] int 
  8752 ;; Registers used:
  8753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8754 ;; Tracked objects:
  8755 ;;		On entry : 0/0
  8756 ;;		On exit  : 0/0
  8757 ;;		Unchanged: 0/0
  8758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8759 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8762 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8763 ;;Total ram usage:        8 bytes
  8764 ;; Hardware stack levels used:    1
  8765 ;; Hardware stack levels required when called:    2
  8766 ;; This function calls:
  8767 ;;		___altoft
  8768 ;;		___ftadd
  8769 ;;		___ftge
  8770 ;;		___fttol
  8771 ;;		_frexp
  8772 ;; This function is called by:
  8773 ;;		_exp
  8774 ;; This function uses a non-reentrant model
  8775 ;;
  8776                           
  8777                           	psect	text45
  8778  00166E                     __ptext45:
  8779                           	opt stack 0
  8780  00166E                     _floor:
  8781                           	opt stack 20
  8782                           
  8783                           ;incstack = 0
  8784  00166E  C041  F001         	movff	floor@x,frexp@value
  8785  001672  C042  F002         	movff	floor@x+1,frexp@value+1
  8786  001676  C043  F003         	movff	floor@x+2,frexp@value+2
  8787  00167A  0E47               	movlw	low floor@expon
  8788  00167C  6E04               	movwf	frexp@eptr,c
  8789  00167E  0E00               	movlw	high floor@expon
  8790  001680  6E05               	movwf	frexp@eptr+1,c
  8791  001682  EC28  F00E         	call	_frexp	;wreg free
  8792  001686  AE48               	btfss	floor@expon+1,7,c
  8793  001688  D010               	goto	i2l3004
  8794  00168A  AE43               	btfss	floor@x+2,7,c
  8795  00168C  D007               	goto	i2l3000
  8796  00168E  0E00               	movlw	0
  8797  001690  6E41               	movwf	?_floor,c
  8798  001692  0E80               	movlw	128
  8799  001694  6E42               	movwf	?_floor+1,c
  8800  001696  0EBF               	movlw	191
  8801  001698  6E43               	movwf	?_floor+2,c
  8802  00169A  0012               	return	
  8803  00169C                     i2l3000:
  8804  00169C  0E00               	movlw	0
  8805  00169E  6E41               	movwf	?_floor,c
  8806  0016A0  0E00               	movlw	0
  8807  0016A2  6E42               	movwf	?_floor+1,c
  8808  0016A4  0E00               	movlw	0
  8809  0016A6  6E43               	movwf	?_floor+2,c
  8810  0016A8  0012               	return	
  8811  0016AA                     i2l3004:
  8812  0016AA  5048               	movf	floor@expon+1,w,c
  8813  0016AC  E104               	bnz	i2u255_40
  8814  0016AE  0E15               	movlw	21
  8815  0016B0  5C47               	subwf	floor@expon,w,c
  8816  0016B2  A0D8               	btfss	status,0,c
  8817  0016B4  D007               	goto	i2l3008
  8818  0016B6                     i2u255_40:
  8819  0016B6  C041  F041         	movff	floor@x,?_floor
  8820  0016BA  C042  F042         	movff	floor@x+1,?_floor+1
  8821  0016BE  C043  F043         	movff	floor@x+2,?_floor+2
  8822  0016C2  0012               	return	
  8823  0016C4                     i2l3008:
  8824  0016C4  C041  F028         	movff	floor@x,___fttol@f1
  8825  0016C8  C042  F029         	movff	floor@x+1,___fttol@f1+1
  8826  0016CC  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  8827  0016D0  ECD0  F009         	call	___fttol	;wreg free
  8828  0016D4  C028  F037         	movff	?___fttol,___altoft@c
  8829  0016D8  C029  F038         	movff	?___fttol+1,___altoft@c+1
  8830  0016DC  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  8831  0016E0  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  8832  0016E4  EC36  F00F         	call	___altoft	;wreg free
  8833  0016E8  C037  F044         	movff	?___altoft,floor@i
  8834  0016EC  C038  F045         	movff	?___altoft+1,floor@i+1
  8835  0016F0  C039  F046         	movff	?___altoft+2,floor@i+2
  8836  0016F4  C041  F001         	movff	floor@x,___ftge@ff1
  8837  0016F8  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  8838  0016FC  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  8839  001700  C044  F004         	movff	floor@i,___ftge@ff2
  8840  001704  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  8841  001708  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  8842  00170C  EC70  F00E         	call	___ftge	;wreg free
  8843  001710  B0D8               	btfsc	status,0,c
  8844  001712  D015               	goto	i2l984
  8845  001714  C044  F01C         	movff	floor@i,___ftadd@f1
  8846  001718  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  8847  00171C  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  8848  001720  0E00               	movlw	0
  8849  001722  6E1F               	movwf	___ftadd@f2,c
  8850  001724  0E80               	movlw	128
  8851  001726  6E20               	movwf	___ftadd@f2+1,c
  8852  001728  0EBF               	movlw	191
  8853  00172A  6E21               	movwf	___ftadd@f2+2,c
  8854  00172C  EC0D  F006         	call	___ftadd	;wreg free
  8855  001730  C01C  F041         	movff	?___ftadd,?_floor
  8856  001734  C01D  F042         	movff	?___ftadd+1,?_floor+1
  8857  001738  C01E  F043         	movff	?___ftadd+2,?_floor+2
  8858  00173C  0012               	return	
  8859  00173E                     i2l984:
  8860  00173E  C044  F041         	movff	floor@i,?_floor
  8861  001742  C045  F042         	movff	floor@i+1,?_floor+1
  8862  001746  C046  F043         	movff	floor@i+2,?_floor+2
  8863  00174A  0012               	return		;funcret
  8864  00174C                     __end_of_floor:
  8865                           	opt stack 0
  8866                           pclatu	equ	0xFFB
  8867                           pclath	equ	0xFFA
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           prodh	equ	0xFF4
  8873                           prodl	equ	0xFF3
  8874                           intcon	equ	0xFF2
  8875                           intcon2	equ	0xFF1
  8876                           intcon3	equ	0xFF0
  8877                           postinc0	equ	0xFEE
  8878                           fsr0h	equ	0xFEA
  8879                           fsr0l	equ	0xFE9
  8880                           wreg	equ	0xFE8
  8881                           fsr1h	equ	0xFE2
  8882                           fsr1l	equ	0xFE1
  8883                           indf2	equ	0xFDF
  8884                           postinc2	equ	0xFDE
  8885                           postdec2	equ	0xFDD
  8886                           fsr2h	equ	0xFDA
  8887                           fsr2l	equ	0xFD9
  8888                           status	equ	0xFD8
  8889                           
  8890 ;; *************** function _frexp *****************
  8891 ;; Defined at:
  8892 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;  value           3    0[COMRAM] int 
  8895 ;;  eptr            2    3[COMRAM] PTR int 
  8896 ;;		 -> log@exponent(2), floor@expon(2), 
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  3    0[COMRAM] PTR int 
  8901 ;; Registers used:
  8902 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8908 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;Total ram usage:        7 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; This function calls:
  8915 ;;		Nothing
  8916 ;; This function is called by:
  8917 ;;		_floor
  8918 ;;		_log
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           	psect	text46
  8923  001C50                     __ptext46:
  8924                           	opt stack 0
  8925  001C50                     _frexp:
  8926                           	opt stack 22
  8927                           
  8928                           ;incstack = 0
  8929  001C50  5001               	movf	frexp@value,w,c
  8930  001C52  1002               	iorwf	frexp@value+1,w,c
  8931  001C54  1003               	iorwf	frexp@value+2,w,c
  8932  001C56  A4D8               	btfss	status,2,c
  8933  001C58  D00F               	goto	i2l2880
  8934  001C5A  C004  FFD9         	movff	frexp@eptr,fsr2l
  8935  001C5E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8936  001C62  0E00               	movlw	0
  8937  001C64  6EDE               	movwf	postinc2,c
  8938  001C66  0E00               	movlw	0
  8939  001C68  6EDD               	movwf	postdec2,c
  8940  001C6A  0E00               	movlw	0
  8941  001C6C  6E01               	movwf	?_frexp,c
  8942  001C6E  0E00               	movlw	0
  8943  001C70  6E02               	movwf	?_frexp+1,c
  8944  001C72  0E00               	movlw	0
  8945  001C74  6E03               	movwf	?_frexp+2,c
  8946  001C76  0012               	return	
  8947  001C78                     i2l2880:
  8948  001C78  5003               	movf	frexp@value+2,w,c
  8949  001C7A  0B7F               	andlw	127
  8950  001C7C  6E06               	movwf	??_frexp& (0+255),c
  8951  001C7E  6A07               	clrf	(??_frexp+1)& (0+255),c
  8952  001C80  90D8               	bcf	status,0,c
  8953  001C82  3606               	rlcf	??_frexp,f,c
  8954  001C84  3607               	rlcf	??_frexp+1,f,c
  8955  001C86  C004  FFD9         	movff	frexp@eptr,fsr2l
  8956  001C8A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8957  001C8E  C006  FFDE         	movff	??_frexp,postinc2
  8958  001C92  C007  FFDD         	movff	??_frexp+1,postdec2
  8959  001C96  AE02               	btfss	frexp@value+1,7,c
  8960  001C98  D003               	goto	i2u242_40
  8961  001C9A  6A06               	clrf	??_frexp& (0+255),c
  8962  001C9C  2A06               	incf	??_frexp& (0+255),f,c
  8963  001C9E  D001               	goto	i2u242_48
  8964  001CA0                     i2u242_40:
  8965  001CA0  6A06               	clrf	??_frexp& (0+255),c
  8966  001CA2                     i2u242_48:
  8967  001CA2  5006               	movf	??_frexp,w,c
  8968  001CA4  C004  FFD9         	movff	frexp@eptr,fsr2l
  8969  001CA8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8970  001CAC  12DE               	iorwf	postinc2,f,c
  8971  001CAE  0E00               	movlw	0
  8972  001CB0  12DD               	iorwf	postdec2,f,c
  8973  001CB2  C004  FFD9         	movff	frexp@eptr,fsr2l
  8974  001CB6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8975  001CBA  0E82               	movlw	130
  8976  001CBC  26DE               	addwf	postinc2,f,c
  8977  001CBE  0EFF               	movlw	255
  8978  001CC0  22DD               	addwfc	postdec2,f,c
  8979  001CC2  8003               	bsf	frexp@value+2,0,c
  8980  001CC4  8203               	bsf	frexp@value+2,1,c
  8981  001CC6  8403               	bsf	frexp@value+2,2,c
  8982  001CC8  8603               	bsf	frexp@value+2,3,c
  8983  001CCA  8803               	bsf	frexp@value+2,4,c
  8984  001CCC  8A03               	bsf	frexp@value+2,5,c
  8985  001CCE  9C03               	bcf	frexp@value+2,6,c
  8986  001CD0  9E02               	bcf	frexp@value+1,7,c
  8987  001CD2  C001  F001         	movff	frexp@value,?_frexp
  8988  001CD6  C002  F002         	movff	frexp@value+1,?_frexp+1
  8989  001CDA  C003  F003         	movff	frexp@value+2,?_frexp+2
  8990  001CDE  0012               	return	
  8991  001CE0                     __end_of_frexp:
  8992                           	opt stack 0
  8993                           pclatu	equ	0xFFB
  8994                           pclath	equ	0xFFA
  8995                           tblptru	equ	0xFF8
  8996                           tblptrh	equ	0xFF7
  8997                           tblptrl	equ	0xFF6
  8998                           tablat	equ	0xFF5
  8999                           prodh	equ	0xFF4
  9000                           prodl	equ	0xFF3
  9001                           intcon	equ	0xFF2
  9002                           intcon2	equ	0xFF1
  9003                           intcon3	equ	0xFF0
  9004                           postinc0	equ	0xFEE
  9005                           fsr0h	equ	0xFEA
  9006                           fsr0l	equ	0xFE9
  9007                           wreg	equ	0xFE8
  9008                           fsr1h	equ	0xFE2
  9009                           fsr1l	equ	0xFE1
  9010                           indf2	equ	0xFDF
  9011                           postinc2	equ	0xFDE
  9012                           postdec2	equ	0xFDD
  9013                           fsr2h	equ	0xFDA
  9014                           fsr2l	equ	0xFD9
  9015                           status	equ	0xFD8
  9016                           
  9017 ;; *************** function ___fttol *****************
  9018 ;; Defined at:
  9019 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  f1              3   39[COMRAM] float 
  9022 ;; Auto vars:     Size  Location     Type
  9023 ;;  lval            4   49[COMRAM] unsigned long 
  9024 ;;  exp1            1   53[COMRAM] unsigned char 
  9025 ;;  sign1           1   48[COMRAM] unsigned char 
  9026 ;; Return value:  Size  Location     Type
  9027 ;;                  4   39[COMRAM] long 
  9028 ;; Registers used:
  9029 ;;		wreg, status,2, status,0
  9030 ;; Tracked objects:
  9031 ;;		On entry : 0/0
  9032 ;;		On exit  : 0/0
  9033 ;;		Unchanged: 0/0
  9034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9035 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9036 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9037 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9038 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;Total ram usage:       15 bytes
  9040 ;; Hardware stack levels used:    1
  9041 ;; This function calls:
  9042 ;;		Nothing
  9043 ;; This function is called by:
  9044 ;;		_dec_to_hex
  9045 ;;		_pow
  9046 ;;		_exp
  9047 ;;		_floor
  9048 ;; This function uses a non-reentrant model
  9049 ;;
  9050                           
  9051                           	psect	text47
  9052  0013A0                     __ptext47:
  9053                           	opt stack 0
  9054  0013A0                     ___fttol:
  9055                           	opt stack 21
  9056                           
  9057                           ;incstack = 0
  9058  0013A0  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  9059  0013A4  6A2D               	clrf	(??___fttol+1)& (0+255),c
  9060  0013A6  6A2E               	clrf	(??___fttol+2)& (0+255),c
  9061  0013A8  3429               	rlcf	___fttol@f1+1,w,c
  9062  0013AA  362C               	rlcf	??___fttol& (0+255),f,c
  9063  0013AC  E301               	bnc	u233_41
  9064  0013AE  802D               	bsf	(??___fttol+1)& (0+255),0,c
  9065  0013B0                     u233_41:
  9066  0013B0  502C               	movf	??___fttol,w,c
  9067  0013B2  6E36               	movwf	___fttol@exp1,c
  9068  0013B4  5036               	movf	___fttol@exp1,w,c
  9069  0013B6  A4D8               	btfss	status,2,c
  9070  0013B8  D009               	goto	i2l2832
  9071  0013BA  0E00               	movlw	0
  9072  0013BC  6E28               	movwf	?___fttol,c
  9073  0013BE  0E00               	movlw	0
  9074  0013C0  6E29               	movwf	?___fttol+1,c
  9075  0013C2  0E00               	movlw	0
  9076  0013C4  6E2A               	movwf	?___fttol+2,c
  9077  0013C6  0E00               	movlw	0
  9078  0013C8  6E2B               	movwf	?___fttol+3,c
  9079  0013CA  0012               	return	
  9080  0013CC                     i2l2832:
  9081  0013CC  0E17               	movlw	23
  9082  0013CE  6E2C               	movwf	??___fttol& (0+255),c
  9083  0013D0  C028  F02D         	movff	___fttol@f1,??___fttol+1
  9084  0013D4  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  9085  0013D8  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  9086  0013DC  282C               	incf	??___fttol,w,c
  9087  0013DE  6E30               	movwf	(??___fttol+4)& (0+255),c
  9088  0013E0  D004               	goto	i2u235_40
  9089  0013E2                     i2u235_45:
  9090  0013E2  90D8               	bcf	status,0,c
  9091  0013E4  322F               	rrcf	??___fttol+3,f,c
  9092  0013E6  322E               	rrcf	??___fttol+2,f,c
  9093  0013E8  322D               	rrcf	??___fttol+1,f,c
  9094  0013EA                     i2u235_40:
  9095  0013EA  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  9096  0013EC  D7FA               	goto	i2u235_45
  9097  0013EE  502D               	movf	??___fttol+1,w,c
  9098  0013F0  6E31               	movwf	___fttol@sign1,c
  9099  0013F2  8E29               	bsf	___fttol@f1+1,7,c
  9100  0013F4  0EFF               	movlw	255
  9101  0013F6  1628               	andwf	___fttol@f1,f,c
  9102  0013F8  0EFF               	movlw	255
  9103  0013FA  1629               	andwf	___fttol@f1+1,f,c
  9104  0013FC  0E00               	movlw	0
  9105  0013FE  162A               	andwf	___fttol@f1+2,f,c
  9106  001400  5028               	movf	___fttol@f1,w,c
  9107  001402  6E32               	movwf	___fttol@lval,c
  9108  001404  5029               	movf	___fttol@f1+1,w,c
  9109  001406  6E33               	movwf	___fttol@lval+1,c
  9110  001408  502A               	movf	___fttol@f1+2,w,c
  9111  00140A  6E34               	movwf	___fttol@lval+2,c
  9112  00140C  6A35               	clrf	___fttol@lval+3,c
  9113  00140E  0E8E               	movlw	142
  9114  001410  5E36               	subwf	___fttol@exp1,f,c
  9115  001412  AE36               	btfss	___fttol@exp1,7,c
  9116  001414  D016               	goto	i2l2854
  9117  001416  5036               	movf	___fttol@exp1,w,c
  9118  001418  0A80               	xorlw	128
  9119  00141A  0F8F               	addlw	143
  9120  00141C  B0D8               	btfsc	status,0,c
  9121  00141E  D009               	goto	i2l2850
  9122  001420  0E00               	movlw	0
  9123  001422  6E28               	movwf	?___fttol,c
  9124  001424  0E00               	movlw	0
  9125  001426  6E29               	movwf	?___fttol+1,c
  9126  001428  0E00               	movlw	0
  9127  00142A  6E2A               	movwf	?___fttol+2,c
  9128  00142C  0E00               	movlw	0
  9129  00142E  6E2B               	movwf	?___fttol+3,c
  9130  001430  0012               	return	
  9131  001432                     i2l2850:
  9132  001432  90D8               	bcf	status,0,c
  9133  001434  3235               	rrcf	___fttol@lval+3,f,c
  9134  001436  3234               	rrcf	___fttol@lval+2,f,c
  9135  001438  3233               	rrcf	___fttol@lval+1,f,c
  9136  00143A  3232               	rrcf	___fttol@lval,f,c
  9137  00143C  3E36               	incfsz	___fttol@exp1,f,c
  9138  00143E  D7F9               	goto	i2l2850
  9139  001440  D015               	goto	i2l2864
  9140  001442                     i2l2854:
  9141  001442  0E17               	movlw	23
  9142  001444  6436               	cpfsgt	___fttol@exp1,c
  9143  001446  D00F               	goto	i2l2862
  9144  001448  0E00               	movlw	0
  9145  00144A  6E28               	movwf	?___fttol,c
  9146  00144C  0E00               	movlw	0
  9147  00144E  6E29               	movwf	?___fttol+1,c
  9148  001450  0E00               	movlw	0
  9149  001452  6E2A               	movwf	?___fttol+2,c
  9150  001454  0E00               	movlw	0
  9151  001456  6E2B               	movwf	?___fttol+3,c
  9152  001458  0012               	return	
  9153  00145A                     i2l2860:
  9154  00145A  90D8               	bcf	status,0,c
  9155  00145C  3632               	rlcf	___fttol@lval,f,c
  9156  00145E  3633               	rlcf	___fttol@lval+1,f,c
  9157  001460  3634               	rlcf	___fttol@lval+2,f,c
  9158  001462  3635               	rlcf	___fttol@lval+3,f,c
  9159  001464  0636               	decf	___fttol@exp1,f,c
  9160  001466                     i2l2862:
  9161  001466  5036               	movf	___fttol@exp1,w,c
  9162  001468  A4D8               	btfss	status,2,c
  9163  00146A  D7F7               	goto	i2l2860
  9164  00146C                     i2l2864:
  9165  00146C  5031               	movf	___fttol@sign1,w,c
  9166  00146E  B4D8               	btfsc	status,2,c
  9167  001470  D008               	goto	i2l2868
  9168  001472  1E35               	comf	___fttol@lval+3,f,c
  9169  001474  1E34               	comf	___fttol@lval+2,f,c
  9170  001476  1E33               	comf	___fttol@lval+1,f,c
  9171  001478  6C32               	negf	___fttol@lval,c
  9172  00147A  0E00               	movlw	0
  9173  00147C  2233               	addwfc	___fttol@lval+1,f,c
  9174  00147E  2234               	addwfc	___fttol@lval+2,f,c
  9175  001480  2235               	addwfc	___fttol@lval+3,f,c
  9176  001482                     i2l2868:
  9177  001482  C032  F028         	movff	___fttol@lval,?___fttol
  9178  001486  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  9179  00148A  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  9180  00148E  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  9181  001492  0012               	return	
  9182  001494                     __end_of___fttol:
  9183                           	opt stack 0
  9184                           pclatu	equ	0xFFB
  9185                           pclath	equ	0xFFA
  9186                           tblptru	equ	0xFF8
  9187                           tblptrh	equ	0xFF7
  9188                           tblptrl	equ	0xFF6
  9189                           tablat	equ	0xFF5
  9190                           prodh	equ	0xFF4
  9191                           prodl	equ	0xFF3
  9192                           intcon	equ	0xFF2
  9193                           intcon2	equ	0xFF1
  9194                           intcon3	equ	0xFF0
  9195                           postinc0	equ	0xFEE
  9196                           fsr0h	equ	0xFEA
  9197                           fsr0l	equ	0xFE9
  9198                           wreg	equ	0xFE8
  9199                           fsr1h	equ	0xFE2
  9200                           fsr1l	equ	0xFE1
  9201                           indf2	equ	0xFDF
  9202                           postinc2	equ	0xFDE
  9203                           postdec2	equ	0xFDD
  9204                           fsr2h	equ	0xFDA
  9205                           fsr2l	equ	0xFD9
  9206                           status	equ	0xFD8
  9207                           
  9208 ;; *************** function ___ftge *****************
  9209 ;; Defined at:
  9210 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  ff1             3    0[COMRAM] float 
  9213 ;;  ff2             3    3[COMRAM] float 
  9214 ;; Auto vars:     Size  Location     Type
  9215 ;;		None
  9216 ;; Return value:  Size  Location     Type
  9217 ;;		None               void
  9218 ;; Registers used:
  9219 ;;		wreg, status,2, status,0
  9220 ;; Tracked objects:
  9221 ;;		On entry : 0/0
  9222 ;;		On exit  : 0/0
  9223 ;;		Unchanged: 0/0
  9224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9225 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9228 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;Total ram usage:        9 bytes
  9230 ;; Hardware stack levels used:    1
  9231 ;; This function calls:
  9232 ;;		Nothing
  9233 ;; This function is called by:
  9234 ;;		_pow
  9235 ;;		_exp
  9236 ;;		_floor
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           	psect	text48
  9241  001CE0                     __ptext48:
  9242                           	opt stack 0
  9243  001CE0                     ___ftge:
  9244                           	opt stack 21
  9245                           
  9246                           ;incstack = 0
  9247  001CE0  AE03               	btfss	___ftge@ff1+2,7,c
  9248  001CE2  D016               	goto	i2l2812
  9249  001CE4  C001  F007         	movff	___ftge@ff1,??___ftge
  9250  001CE8  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9251  001CEC  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9252  001CF0  1E07               	comf	??___ftge,f,c
  9253  001CF2  1E08               	comf	??___ftge+1,f,c
  9254  001CF4  1E09               	comf	??___ftge+2,f,c
  9255  001CF6  2A07               	incf	??___ftge,f,c
  9256  001CF8  0E00               	movlw	0
  9257  001CFA  2208               	addwfc	??___ftge+1,f,c
  9258  001CFC  2209               	addwfc	??___ftge+2,f,c
  9259  001CFE  0E00               	movlw	0
  9260  001D00  2407               	addwf	??___ftge,w,c
  9261  001D02  6E01               	movwf	___ftge@ff1,c
  9262  001D04  0E00               	movlw	0
  9263  001D06  2008               	addwfc	??___ftge+1,w,c
  9264  001D08  6E02               	movwf	___ftge@ff1+1,c
  9265  001D0A  0E80               	movlw	128
  9266  001D0C  2009               	addwfc	??___ftge+2,w,c
  9267  001D0E  6E03               	movwf	___ftge@ff1+2,c
  9268  001D10                     i2l2812:
  9269  001D10  AE06               	btfss	___ftge@ff2+2,7,c
  9270  001D12  D016               	goto	i2l2816
  9271  001D14  C004  F007         	movff	___ftge@ff2,??___ftge
  9272  001D18  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9273  001D1C  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9274  001D20  1E07               	comf	??___ftge,f,c
  9275  001D22  1E08               	comf	??___ftge+1,f,c
  9276  001D24  1E09               	comf	??___ftge+2,f,c
  9277  001D26  2A07               	incf	??___ftge,f,c
  9278  001D28  0E00               	movlw	0
  9279  001D2A  2208               	addwfc	??___ftge+1,f,c
  9280  001D2C  2209               	addwfc	??___ftge+2,f,c
  9281  001D2E  0E00               	movlw	0
  9282  001D30  2407               	addwf	??___ftge,w,c
  9283  001D32  6E04               	movwf	___ftge@ff2,c
  9284  001D34  0E00               	movlw	0
  9285  001D36  2008               	addwfc	??___ftge+1,w,c
  9286  001D38  6E05               	movwf	___ftge@ff2+1,c
  9287  001D3A  0E80               	movlw	128
  9288  001D3C  2009               	addwfc	??___ftge+2,w,c
  9289  001D3E  6E06               	movwf	___ftge@ff2+2,c
  9290  001D40                     i2l2816:
  9291  001D40  0E00               	movlw	0
  9292  001D42  1A01               	xorwf	___ftge@ff1,f,c
  9293  001D44  0E00               	movlw	0
  9294  001D46  1A02               	xorwf	___ftge@ff1+1,f,c
  9295  001D48  0E80               	movlw	128
  9296  001D4A  1A03               	xorwf	___ftge@ff1+2,f,c
  9297  001D4C  0E00               	movlw	0
  9298  001D4E  1A04               	xorwf	___ftge@ff2,f,c
  9299  001D50  0E00               	movlw	0
  9300  001D52  1A05               	xorwf	___ftge@ff2+1,f,c
  9301  001D54  0E80               	movlw	128
  9302  001D56  1A06               	xorwf	___ftge@ff2+2,f,c
  9303  001D58  5004               	movf	___ftge@ff2,w,c
  9304  001D5A  5C01               	subwf	___ftge@ff1,w,c
  9305  001D5C  5005               	movf	___ftge@ff2+1,w,c
  9306  001D5E  5802               	subwfb	___ftge@ff1+1,w,c
  9307  001D60  5006               	movf	___ftge@ff2+2,w,c
  9308  001D62  5803               	subwfb	___ftge@ff1+2,w,c
  9309  001D64  B0D8               	btfsc	status,0,c
  9310  001D66  D002               	goto	i2l2822
  9311  001D68  90D8               	bcf	status,0,c
  9312  001D6A  0012               	return	
  9313  001D6C                     i2l2822:
  9314  001D6C  80D8               	bsf	status,0,c
  9315  001D6E  0012               	return	
  9316  001D70                     __end_of___ftge:
  9317                           	opt stack 0
  9318                           pclatu	equ	0xFFB
  9319                           pclath	equ	0xFFA
  9320                           tblptru	equ	0xFF8
  9321                           tblptrh	equ	0xFF7
  9322                           tblptrl	equ	0xFF6
  9323                           tablat	equ	0xFF5
  9324                           prodh	equ	0xFF4
  9325                           prodl	equ	0xFF3
  9326                           intcon	equ	0xFF2
  9327                           intcon2	equ	0xFF1
  9328                           intcon3	equ	0xFF0
  9329                           postinc0	equ	0xFEE
  9330                           fsr0h	equ	0xFEA
  9331                           fsr0l	equ	0xFE9
  9332                           wreg	equ	0xFE8
  9333                           fsr1h	equ	0xFE2
  9334                           fsr1l	equ	0xFE1
  9335                           indf2	equ	0xFDF
  9336                           postinc2	equ	0xFDE
  9337                           postdec2	equ	0xFDD
  9338                           fsr2h	equ	0xFDA
  9339                           fsr2l	equ	0xFD9
  9340                           status	equ	0xFD8
  9341                           
  9342 ;; *************** function ___altoft *****************
  9343 ;; Defined at:
  9344 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  9345 ;; Parameters:    Size  Location     Type
  9346 ;;  c               4   54[COMRAM] long 
  9347 ;; Auto vars:     Size  Location     Type
  9348 ;;  sign            1   63[COMRAM] unsigned char 
  9349 ;;  exp             1   62[COMRAM] unsigned char 
  9350 ;; Return value:  Size  Location     Type
  9351 ;;                  3   54[COMRAM] float 
  9352 ;; Registers used:
  9353 ;;		wreg, status,2, status,0, cstack
  9354 ;; Tracked objects:
  9355 ;;		On entry : 0/0
  9356 ;;		On exit  : 0/0
  9357 ;;		Unchanged: 0/0
  9358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9359 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9360 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9361 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;Total ram usage:       10 bytes
  9364 ;; Hardware stack levels used:    1
  9365 ;; Hardware stack levels required when called:    1
  9366 ;; This function calls:
  9367 ;;		___ftpack
  9368 ;; This function is called by:
  9369 ;;		_floor
  9370 ;; This function uses a non-reentrant model
  9371 ;;
  9372                           
  9373                           	psect	text49
  9374  001E6C                     __ptext49:
  9375                           	opt stack 0
  9376  001E6C                     ___altoft:
  9377                           	opt stack 20
  9378                           
  9379                           ;incstack = 0
  9380  001E6C  0E00               	movlw	0
  9381  001E6E  6E40               	movwf	___altoft@sign,c
  9382  001E70  0E8E               	movlw	142
  9383  001E72  6E3F               	movwf	___altoft@exp,c
  9384  001E74  AE3A               	btfss	___altoft@c+3,7,c
  9385  001E76  D011               	goto	i2l2684
  9386  001E78  1E3A               	comf	___altoft@c+3,f,c
  9387  001E7A  1E39               	comf	___altoft@c+2,f,c
  9388  001E7C  1E38               	comf	___altoft@c+1,f,c
  9389  001E7E  6C37               	negf	___altoft@c,c
  9390  001E80  0E00               	movlw	0
  9391  001E82  2238               	addwfc	___altoft@c+1,f,c
  9392  001E84  2239               	addwfc	___altoft@c+2,f,c
  9393  001E86  223A               	addwfc	___altoft@c+3,f,c
  9394  001E88  0E01               	movlw	1
  9395  001E8A  6E40               	movwf	___altoft@sign,c
  9396  001E8C  D006               	goto	i2l2684
  9397  001E8E                     i2l2682:
  9398  001E8E  90D8               	bcf	status,0,c
  9399  001E90  323A               	rrcf	___altoft@c+3,f,c
  9400  001E92  3239               	rrcf	___altoft@c+2,f,c
  9401  001E94  3238               	rrcf	___altoft@c+1,f,c
  9402  001E96  3237               	rrcf	___altoft@c,f,c
  9403  001E98  2A3F               	incf	___altoft@exp,f,c
  9404  001E9A                     i2l2684:
  9405  001E9A  0E00               	movlw	0
  9406  001E9C  1437               	andwf	___altoft@c,w,c
  9407  001E9E  6E3B               	movwf	??___altoft& (0+255),c
  9408  001EA0  0E00               	movlw	0
  9409  001EA2  1438               	andwf	___altoft@c+1,w,c
  9410  001EA4  6E3C               	movwf	(??___altoft+1)& (0+255),c
  9411  001EA6  0E00               	movlw	0
  9412  001EA8  1439               	andwf	___altoft@c+2,w,c
  9413  001EAA  6E3D               	movwf	(??___altoft+2)& (0+255),c
  9414  001EAC  0EFF               	movlw	255
  9415  001EAE  143A               	andwf	___altoft@c+3,w,c
  9416  001EB0  6E3E               	movwf	(??___altoft+3)& (0+255),c
  9417  001EB2  503B               	movf	??___altoft,w,c
  9418  001EB4  103C               	iorwf	??___altoft+1,w,c
  9419  001EB6  103D               	iorwf	??___altoft+2,w,c
  9420  001EB8  103E               	iorwf	??___altoft+3,w,c
  9421  001EBA  A4D8               	btfss	status,2,c
  9422  001EBC  D7E8               	goto	i2l2682
  9423  001EBE  C037  F001         	movff	___altoft@c,___ftpack@arg
  9424  001EC2  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  9425  001EC6  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  9426  001ECA  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  9427  001ECE  C040  F005         	movff	___altoft@sign,___ftpack@sign
  9428  001ED2  EC37  F00D         	call	___ftpack	;wreg free
  9429  001ED6  C001  F037         	movff	?___ftpack,?___altoft
  9430  001EDA  C002  F038         	movff	?___ftpack+1,?___altoft+1
  9431  001EDE  C003  F039         	movff	?___ftpack+2,?___altoft+2
  9432  001EE2  0012               	return	
  9433  001EE4                     __end_of___altoft:
  9434                           	opt stack 0
  9435                           pclatu	equ	0xFFB
  9436                           pclath	equ	0xFFA
  9437                           tblptru	equ	0xFF8
  9438                           tblptrh	equ	0xFF7
  9439                           tblptrl	equ	0xFF6
  9440                           tablat	equ	0xFF5
  9441                           prodh	equ	0xFF4
  9442                           prodl	equ	0xFF3
  9443                           intcon	equ	0xFF2
  9444                           intcon2	equ	0xFF1
  9445                           intcon3	equ	0xFF0
  9446                           postinc0	equ	0xFEE
  9447                           fsr0h	equ	0xFEA
  9448                           fsr0l	equ	0xFE9
  9449                           wreg	equ	0xFE8
  9450                           fsr1h	equ	0xFE2
  9451                           fsr1l	equ	0xFE1
  9452                           indf2	equ	0xFDF
  9453                           postinc2	equ	0xFDE
  9454                           postdec2	equ	0xFDD
  9455                           fsr2h	equ	0xFDA
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function _eval_poly *****************
  9460 ;; Defined at:
  9461 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;  x               3   39[COMRAM] float 
  9464 ;;  d               2   42[COMRAM] PTR const 
  9465 ;;		 -> log@coeff(27), exp@coeff(30), 
  9466 ;;  n               2   44[COMRAM] int 
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;  res             3   48[COMRAM] int 
  9469 ;; Return value:  Size  Location     Type
  9470 ;;                  3   39[COMRAM] int 
  9471 ;; Registers used:
  9472 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9478 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9480 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;Total ram usage:       12 bytes
  9483 ;; Hardware stack levels used:    1
  9484 ;; Hardware stack levels required when called:    2
  9485 ;; This function calls:
  9486 ;;		___ftadd
  9487 ;;		___ftmul
  9488 ;;		i2___wmul
  9489 ;; This function is called by:
  9490 ;;		_exp
  9491 ;;		_log
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text50
  9496  00181E                     __ptext50:
  9497                           	opt stack 0
  9498  00181E                     _eval_poly:
  9499                           	opt stack 20
  9500                           
  9501                           ;incstack = 0
  9502  00181E  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
  9503  001822  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
  9504  001826  0E00               	movlw	0
  9505  001828  6E04               	movwf	i2___wmul@multiplicand+1,c
  9506  00182A  0E03               	movlw	3
  9507  00182C  6E03               	movwf	i2___wmul@multiplicand,c
  9508  00182E  EC2E  F012         	call	i2___wmul	;wreg free
  9509  001832  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  9510  001836  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  9511  00183A  5001               	movf	?i2___wmul,w,c
  9512  00183C  262F               	addwf	??_eval_poly,f,c
  9513  00183E  5002               	movf	?i2___wmul+1,w,c
  9514  001840  2230               	addwfc	??_eval_poly+1,f,c
  9515  001842  C02F  FFF6         	movff	??_eval_poly,tblptrl
  9516  001846  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  9517  00184A                     	if	0	;tblptru may be non-zero
  9518  00184A                     	endif
  9519  00184A                     	if	0	;tblptru may be non-zero
  9520  00184A                     	endif
  9521  00184A  0009               	tblrd		*+
  9522  00184C  CFF5 F031          	movff	tablat,eval_poly@res
  9523  001850  0009               	tblrd		*+
  9524  001852  CFF5 F032          	movff	tablat,eval_poly@res+1
  9525  001856  000A               	tblrd		*-
  9526  001858  CFF5 F033          	movff	tablat,eval_poly@res+2
  9527  00185C  D03E               	goto	i2l3018
  9528  00185E                     i2l3016:
  9529  00185E  C031  F010         	movff	eval_poly@res,___ftmul@f2
  9530  001862  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  9531  001866  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  9532  00186A  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  9533  00186E  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  9534  001872  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  9535  001876  EC4A  F00A         	call	___ftmul	;wreg free
  9536  00187A  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9537  00187E  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9538  001882  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9539  001886  0E00               	movlw	0
  9540  001888  6E04               	movwf	i2___wmul@multiplicand+1,c
  9541  00188A  0E03               	movlw	3
  9542  00188C  6E03               	movwf	i2___wmul@multiplicand,c
  9543  00188E  062D               	decf	eval_poly@n,f,c
  9544  001890  A0D8               	btfss	status,0,c
  9545  001892  062E               	decf	eval_poly@n+1,f,c
  9546  001894  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
  9547  001898  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
  9548  00189C  EC2E  F012         	call	i2___wmul	;wreg free
  9549  0018A0  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  9550  0018A4  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  9551  0018A8  5001               	movf	?i2___wmul,w,c
  9552  0018AA  262F               	addwf	??_eval_poly,f,c
  9553  0018AC  5002               	movf	?i2___wmul+1,w,c
  9554  0018AE  2230               	addwfc	??_eval_poly+1,f,c
  9555  0018B0  C02F  FFF6         	movff	??_eval_poly,tblptrl
  9556  0018B4  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  9557  0018B8                     	if	0	;tblptru may be non-zero
  9558  0018B8                     	endif
  9559  0018B8                     	if	0	;tblptru may be non-zero
  9560  0018B8                     	endif
  9561  0018B8  0009               	tblrd		*+
  9562  0018BA  CFF5 F01F          	movff	tablat,___ftadd@f2
  9563  0018BE  0009               	tblrd		*+
  9564  0018C0  CFF5 F020          	movff	tablat,___ftadd@f2+1
  9565  0018C4  000A               	tblrd		*-
  9566  0018C6  CFF5 F021          	movff	tablat,___ftadd@f2+2
  9567  0018CA  EC0D  F006         	call	___ftadd	;wreg free
  9568  0018CE  C01C  F031         	movff	?___ftadd,eval_poly@res
  9569  0018D2  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  9570  0018D6  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  9571  0018DA                     i2l3018:
  9572  0018DA  502D               	movf	eval_poly@n,w,c
  9573  0018DC  102E               	iorwf	eval_poly@n+1,w,c
  9574  0018DE  A4D8               	btfss	status,2,c
  9575  0018E0  D7BE               	goto	i2l3016
  9576  0018E2  C031  F028         	movff	eval_poly@res,?_eval_poly
  9577  0018E6  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  9578  0018EA  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  9579  0018EE  0012               	return		;funcret
  9580  0018F0                     __end_of_eval_poly:
  9581                           	opt stack 0
  9582                           pclatu	equ	0xFFB
  9583                           pclath	equ	0xFFA
  9584                           tblptru	equ	0xFF8
  9585                           tblptrh	equ	0xFF7
  9586                           tblptrl	equ	0xFF6
  9587                           tablat	equ	0xFF5
  9588                           prodh	equ	0xFF4
  9589                           prodl	equ	0xFF3
  9590                           intcon	equ	0xFF2
  9591                           intcon2	equ	0xFF1
  9592                           intcon3	equ	0xFF0
  9593                           postinc0	equ	0xFEE
  9594                           fsr0h	equ	0xFEA
  9595                           fsr0l	equ	0xFE9
  9596                           wreg	equ	0xFE8
  9597                           fsr1h	equ	0xFE2
  9598                           fsr1l	equ	0xFE1
  9599                           indf2	equ	0xFDF
  9600                           postinc2	equ	0xFDE
  9601                           postdec2	equ	0xFDD
  9602                           fsr2h	equ	0xFDA
  9603                           fsr2l	equ	0xFD9
  9604                           status	equ	0xFD8
  9605                           
  9606 ;; *************** function i2___wmul *****************
  9607 ;; Defined at:
  9608 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9609 ;; Parameters:    Size  Location     Type
  9610 ;;  multiplier      2    0[COMRAM] unsigned int 
  9611 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;  __wmul          2    4[COMRAM] unsigned int 
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  2    0[COMRAM] unsigned int 
  9616 ;; Registers used:
  9617 ;;		wreg, status,2, status,0, prodl, prodh
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9623 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9624 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;Total ram usage:        6 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; This function calls:
  9630 ;;		Nothing
  9631 ;; This function is called by:
  9632 ;;		_isr
  9633 ;;		_eval_poly
  9634 ;;		i2_printf
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           	psect	text51
  9639  00245C                     __ptext51:
  9640                           	opt stack 0
  9641  00245C                     i2___wmul:
  9642                           	opt stack 24
  9643                           
  9644                           ;incstack = 0
  9645  00245C  5001               	movf	i2___wmul@multiplier,w,c
  9646  00245E  0203               	mulwf	i2___wmul@multiplicand,c
  9647  002460  CFF3 F005          	movff	prodl,i2___wmul@product
  9648  002464  CFF4 F006          	movff	prodh,i2___wmul@product+1
  9649  002468  5001               	movf	i2___wmul@multiplier,w,c
  9650  00246A  0204               	mulwf	i2___wmul@multiplicand+1,c
  9651  00246C  50F3               	movf	prodl,w,c
  9652  00246E  2606               	addwf	i2___wmul@product+1,f,c
  9653  002470  5002               	movf	i2___wmul@multiplier+1,w,c
  9654  002472  0203               	mulwf	i2___wmul@multiplicand,c
  9655  002474  50F3               	movf	prodl,w,c
  9656  002476  2606               	addwf	i2___wmul@product+1,f,c
  9657  002478  C005  F001         	movff	i2___wmul@product,?i2___wmul
  9658  00247C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  9659  002480  0012               	return	
  9660  002482                     __end_ofi2___wmul:
  9661                           	opt stack 0
  9662                           pclatu	equ	0xFFB
  9663                           pclath	equ	0xFFA
  9664                           tblptru	equ	0xFF8
  9665                           tblptrh	equ	0xFF7
  9666                           tblptrl	equ	0xFF6
  9667                           tablat	equ	0xFF5
  9668                           prodh	equ	0xFF4
  9669                           prodl	equ	0xFF3
  9670                           intcon	equ	0xFF2
  9671                           intcon2	equ	0xFF1
  9672                           intcon3	equ	0xFF0
  9673                           postinc0	equ	0xFEE
  9674                           fsr0h	equ	0xFEA
  9675                           fsr0l	equ	0xFE9
  9676                           wreg	equ	0xFE8
  9677                           fsr1h	equ	0xFE2
  9678                           fsr1l	equ	0xFE1
  9679                           indf2	equ	0xFDF
  9680                           postinc2	equ	0xFDE
  9681                           postdec2	equ	0xFDD
  9682                           fsr2h	equ	0xFDA
  9683                           fsr2l	equ	0xFD9
  9684                           status	equ	0xFD8
  9685                           
  9686 ;; *************** function ___ftmul *****************
  9687 ;; Defined at:
  9688 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  9689 ;; Parameters:    Size  Location     Type
  9690 ;;  f1              3   12[COMRAM] float 
  9691 ;;  f2              3   15[COMRAM] float 
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  9694 ;;  sign            1   26[COMRAM] unsigned char 
  9695 ;;  cntr            1   25[COMRAM] unsigned char 
  9696 ;;  exp             1   21[COMRAM] unsigned char 
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  3   12[COMRAM] float 
  9699 ;; Registers used:
  9700 ;;		wreg, status,2, status,0, cstack
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9706 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9710 ;;Total ram usage:       15 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:    1
  9713 ;; This function calls:
  9714 ;;		___ftpack
  9715 ;; This function is called by:
  9716 ;;		_dec_to_hex
  9717 ;;		_pow
  9718 ;;		_exp
  9719 ;;		_log
  9720 ;;		_eval_poly
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text52
  9725  001494                     __ptext52:
  9726                           	opt stack 0
  9727  001494                     ___ftmul:
  9728                           	opt stack 20
  9729                           
  9730                           ;incstack = 0
  9731  001494  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  9732  001498  6A14               	clrf	(??___ftmul+1)& (0+255),c
  9733  00149A  6A15               	clrf	(??___ftmul+2)& (0+255),c
  9734  00149C  340E               	rlcf	___ftmul@f1+1,w,c
  9735  00149E  3613               	rlcf	??___ftmul& (0+255),f,c
  9736  0014A0  E301               	bnc	u224_41
  9737  0014A2  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  9738  0014A4                     u224_41:
  9739  0014A4  5013               	movf	??___ftmul,w,c
  9740  0014A6  6E16               	movwf	___ftmul@exp,c
  9741  0014A8  5016               	movf	___ftmul@exp,w,c
  9742  0014AA  A4D8               	btfss	status,2,c
  9743  0014AC  D007               	goto	i2l2766
  9744  0014AE  0E00               	movlw	0
  9745  0014B0  6E0D               	movwf	?___ftmul,c
  9746  0014B2  0E00               	movlw	0
  9747  0014B4  6E0E               	movwf	?___ftmul+1,c
  9748  0014B6  0E00               	movlw	0
  9749  0014B8  6E0F               	movwf	?___ftmul+2,c
  9750  0014BA  0012               	return	
  9751  0014BC                     i2l2766:
  9752  0014BC  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  9753  0014C0  6A14               	clrf	(??___ftmul+1)& (0+255),c
  9754  0014C2  6A15               	clrf	(??___ftmul+2)& (0+255),c
  9755  0014C4  3411               	rlcf	___ftmul@f2+1,w,c
  9756  0014C6  3613               	rlcf	??___ftmul& (0+255),f,c
  9757  0014C8  E301               	bnc	u226_41
  9758  0014CA  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  9759  0014CC                     u226_41:
  9760  0014CC  5013               	movf	??___ftmul,w,c
  9761  0014CE  6E1B               	movwf	___ftmul@sign,c
  9762  0014D0  501B               	movf	___ftmul@sign,w,c
  9763  0014D2  A4D8               	btfss	status,2,c
  9764  0014D4  D007               	goto	i2l2772
  9765  0014D6  0E00               	movlw	0
  9766  0014D8  6E0D               	movwf	?___ftmul,c
  9767  0014DA  0E00               	movlw	0
  9768  0014DC  6E0E               	movwf	?___ftmul+1,c
  9769  0014DE  0E00               	movlw	0
  9770  0014E0  6E0F               	movwf	?___ftmul+2,c
  9771  0014E2  0012               	return	
  9772  0014E4                     i2l2772:
  9773  0014E4  501B               	movf	___ftmul@sign,w,c
  9774  0014E6  0F7B               	addlw	123
  9775  0014E8  2616               	addwf	___ftmul@exp,f,c
  9776  0014EA  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  9777  0014EE  5012               	movf	___ftmul@f2+2,w,c
  9778  0014F0  1A1B               	xorwf	___ftmul@sign,f,c
  9779  0014F2  0E80               	movlw	128
  9780  0014F4  161B               	andwf	___ftmul@sign,f,c
  9781  0014F6  8E0E               	bsf	___ftmul@f1+1,7,c
  9782  0014F8  8E11               	bsf	___ftmul@f2+1,7,c
  9783  0014FA  0EFF               	movlw	255
  9784  0014FC  1610               	andwf	___ftmul@f2,f,c
  9785  0014FE  0EFF               	movlw	255
  9786  001500  1611               	andwf	___ftmul@f2+1,f,c
  9787  001502  0E00               	movlw	0
  9788  001504  1612               	andwf	___ftmul@f2+2,f,c
  9789  001506  0E00               	movlw	0
  9790  001508  6E17               	movwf	___ftmul@f3_as_product,c
  9791  00150A  0E00               	movlw	0
  9792  00150C  6E18               	movwf	___ftmul@f3_as_product+1,c
  9793  00150E  0E00               	movlw	0
  9794  001510  6E19               	movwf	___ftmul@f3_as_product+2,c
  9795  001512  0E07               	movlw	7
  9796  001514  6E1A               	movwf	___ftmul@cntr,c
  9797  001516                     i2l2786:
  9798  001516  A00D               	btfss	___ftmul@f1,0,c
  9799  001518  D006               	goto	i2l2790
  9800  00151A  5010               	movf	___ftmul@f2,w,c
  9801  00151C  2617               	addwf	___ftmul@f3_as_product,f,c
  9802  00151E  5011               	movf	___ftmul@f2+1,w,c
  9803  001520  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  9804  001522  5012               	movf	___ftmul@f2+2,w,c
  9805  001524  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  9806  001526                     i2l2790:
  9807  001526  90D8               	bcf	status,0,c
  9808  001528  320F               	rrcf	___ftmul@f1+2,f,c
  9809  00152A  320E               	rrcf	___ftmul@f1+1,f,c
  9810  00152C  320D               	rrcf	___ftmul@f1,f,c
  9811  00152E  90D8               	bcf	status,0,c
  9812  001530  3610               	rlcf	___ftmul@f2,f,c
  9813  001532  3611               	rlcf	___ftmul@f2+1,f,c
  9814  001534  3612               	rlcf	___ftmul@f2+2,f,c
  9815  001536  2E1A               	decfsz	___ftmul@cntr,f,c
  9816  001538  D7EE               	goto	i2l2786
  9817  00153A  0E09               	movlw	9
  9818  00153C  6E1A               	movwf	___ftmul@cntr,c
  9819  00153E                     i2l2796:
  9820  00153E  A00D               	btfss	___ftmul@f1,0,c
  9821  001540  D006               	goto	i2l2800
  9822  001542  5010               	movf	___ftmul@f2,w,c
  9823  001544  2617               	addwf	___ftmul@f3_as_product,f,c
  9824  001546  5011               	movf	___ftmul@f2+1,w,c
  9825  001548  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  9826  00154A  5012               	movf	___ftmul@f2+2,w,c
  9827  00154C  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  9828  00154E                     i2l2800:
  9829  00154E  90D8               	bcf	status,0,c
  9830  001550  320F               	rrcf	___ftmul@f1+2,f,c
  9831  001552  320E               	rrcf	___ftmul@f1+1,f,c
  9832  001554  320D               	rrcf	___ftmul@f1,f,c
  9833  001556  90D8               	bcf	status,0,c
  9834  001558  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  9835  00155A  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  9836  00155C  3217               	rrcf	___ftmul@f3_as_product,f,c
  9837  00155E  2E1A               	decfsz	___ftmul@cntr,f,c
  9838  001560  D7EE               	goto	i2l2796
  9839  001562  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9840  001566  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9841  00156A  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9842  00156E  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  9843  001572  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  9844  001576  EC37  F00D         	call	___ftpack	;wreg free
  9845  00157A  C001  F00D         	movff	?___ftpack,?___ftmul
  9846  00157E  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  9847  001582  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  9848  001586  0012               	return	
  9849  001588                     __end_of___ftmul:
  9850                           	opt stack 0
  9851                           pclatu	equ	0xFFB
  9852                           pclath	equ	0xFFA
  9853                           tblptru	equ	0xFF8
  9854                           tblptrh	equ	0xFF7
  9855                           tblptrl	equ	0xFF6
  9856                           tablat	equ	0xFF5
  9857                           prodh	equ	0xFF4
  9858                           prodl	equ	0xFF3
  9859                           intcon	equ	0xFF2
  9860                           intcon2	equ	0xFF1
  9861                           intcon3	equ	0xFF0
  9862                           postinc0	equ	0xFEE
  9863                           fsr0h	equ	0xFEA
  9864                           fsr0l	equ	0xFE9
  9865                           wreg	equ	0xFE8
  9866                           fsr1h	equ	0xFE2
  9867                           fsr1l	equ	0xFE1
  9868                           indf2	equ	0xFDF
  9869                           postinc2	equ	0xFDE
  9870                           postdec2	equ	0xFDD
  9871                           fsr2h	equ	0xFDA
  9872                           fsr2l	equ	0xFD9
  9873                           status	equ	0xFD8
  9874                           
  9875 ;; *************** function ___ftsub *****************
  9876 ;; Defined at:
  9877 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;  f1              3   39[COMRAM] float 
  9880 ;;  f2              3   42[COMRAM] float 
  9881 ;; Auto vars:     Size  Location     Type
  9882 ;;		None
  9883 ;; Return value:  Size  Location     Type
  9884 ;;                  3   39[COMRAM] float 
  9885 ;; Registers used:
  9886 ;;		wreg, status,2, status,0, cstack
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9892 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;Total ram usage:        6 bytes
  9897 ;; Hardware stack levels used:    1
  9898 ;; Hardware stack levels required when called:    2
  9899 ;; This function calls:
  9900 ;;		___ftadd
  9901 ;; This function is called by:
  9902 ;;		_exp
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           	psect	text53
  9907  0022BC                     __ptext53:
  9908                           	opt stack 0
  9909  0022BC                     ___ftsub:
  9910                           	opt stack 20
  9911                           
  9912                           ;incstack = 0
  9913  0022BC  502B               	movf	___ftsub@f2,w,c
  9914  0022BE  102C               	iorwf	___ftsub@f2+1,w,c
  9915  0022C0  102D               	iorwf	___ftsub@f2+2,w,c
  9916  0022C2  B4D8               	btfsc	status,2,c
  9917  0022C4  D006               	goto	i2l2970
  9918  0022C6  0E00               	movlw	0
  9919  0022C8  1A2B               	xorwf	___ftsub@f2,f,c
  9920  0022CA  0E00               	movlw	0
  9921  0022CC  1A2C               	xorwf	___ftsub@f2+1,f,c
  9922  0022CE  0E80               	movlw	128
  9923  0022D0  1A2D               	xorwf	___ftsub@f2+2,f,c
  9924  0022D2                     i2l2970:
  9925  0022D2  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  9926  0022D6  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  9927  0022DA  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  9928  0022DE  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  9929  0022E2  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  9930  0022E6  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  9931  0022EA  EC0D  F006         	call	___ftadd	;wreg free
  9932  0022EE  C01C  F028         	movff	?___ftadd,?___ftsub
  9933  0022F2  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  9934  0022F6  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  9935  0022FA  0012               	return	
  9936  0022FC                     __end_of___ftsub:
  9937                           	opt stack 0
  9938                           pclatu	equ	0xFFB
  9939                           pclath	equ	0xFFA
  9940                           tblptru	equ	0xFF8
  9941                           tblptrh	equ	0xFF7
  9942                           tblptrl	equ	0xFF6
  9943                           tablat	equ	0xFF5
  9944                           prodh	equ	0xFF4
  9945                           prodl	equ	0xFF3
  9946                           intcon	equ	0xFF2
  9947                           intcon2	equ	0xFF1
  9948                           intcon3	equ	0xFF0
  9949                           postinc0	equ	0xFEE
  9950                           fsr0h	equ	0xFEA
  9951                           fsr0l	equ	0xFE9
  9952                           wreg	equ	0xFE8
  9953                           fsr1h	equ	0xFE2
  9954                           fsr1l	equ	0xFE1
  9955                           indf2	equ	0xFDF
  9956                           postinc2	equ	0xFDE
  9957                           postdec2	equ	0xFDD
  9958                           fsr2h	equ	0xFDA
  9959                           fsr2l	equ	0xFD9
  9960                           status	equ	0xFD8
  9961                           
  9962 ;; *************** function ___ftadd *****************
  9963 ;; Defined at:
  9964 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  f1              3   27[COMRAM] float 
  9967 ;;  f2              3   30[COMRAM] float 
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;  exp1            1   38[COMRAM] unsigned char 
  9970 ;;  exp2            1   37[COMRAM] unsigned char 
  9971 ;;  sign            1   36[COMRAM] unsigned char 
  9972 ;; Return value:  Size  Location     Type
  9973 ;;                  3   27[COMRAM] float 
  9974 ;; Registers used:
  9975 ;;		wreg, status,2, status,0, cstack
  9976 ;; Tracked objects:
  9977 ;;		On entry : 0/0
  9978 ;;		On exit  : 0/0
  9979 ;;		Unchanged: 0/0
  9980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9981 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9982 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9983 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9984 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9985 ;;Total ram usage:       12 bytes
  9986 ;; Hardware stack levels used:    1
  9987 ;; Hardware stack levels required when called:    1
  9988 ;; This function calls:
  9989 ;;		___ftpack
  9990 ;; This function is called by:
  9991 ;;		_dec_to_hex
  9992 ;;		___ftsub
  9993 ;;		_floor
  9994 ;;		_log
  9995 ;;		_eval_poly
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           	psect	text54
 10000  000C1A                     __ptext54:
 10001                           	opt stack 0
 10002  000C1A                     ___ftadd:
 10003                           	opt stack 20
 10004                           
 10005                           ;incstack = 0
 10006  000C1A  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 10007  000C1E  6A23               	clrf	(??___ftadd+1)& (0+255),c
 10008  000C20  6A24               	clrf	(??___ftadd+2)& (0+255),c
 10009  000C22  341D               	rlcf	___ftadd@f1+1,w,c
 10010  000C24  3622               	rlcf	??___ftadd& (0+255),f,c
 10011  000C26  E301               	bnc	u203_41
 10012  000C28  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 10013  000C2A                     u203_41:
 10014  000C2A  5022               	movf	??___ftadd,w,c
 10015  000C2C  6E27               	movwf	___ftadd@exp1,c
 10016  000C2E  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 10017  000C32  6A23               	clrf	(??___ftadd+1)& (0+255),c
 10018  000C34  6A24               	clrf	(??___ftadd+2)& (0+255),c
 10019  000C36  3420               	rlcf	___ftadd@f2+1,w,c
 10020  000C38  3622               	rlcf	??___ftadd& (0+255),f,c
 10021  000C3A  E301               	bnc	u204_41
 10022  000C3C  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 10023  000C3E                     u204_41:
 10024  000C3E  5022               	movf	??___ftadd,w,c
 10025  000C40  6E26               	movwf	___ftadd@exp2,c
 10026  000C42  5027               	movf	___ftadd@exp1,w,c
 10027  000C44  B4D8               	btfsc	status,2,c
 10028  000C46  D00B               	goto	i2l618
 10029  000C48  5026               	movf	___ftadd@exp2,w,c
 10030  000C4A  5C27               	subwf	___ftadd@exp1,w,c
 10031  000C4C  B0D8               	btfsc	status,0,c
 10032  000C4E  D00E               	goto	i2l2698
 10033  000C50  5027               	movf	___ftadd@exp1,w,c
 10034  000C52  0800               	sublw	0
 10035  000C54  2426               	addwf	___ftadd@exp2,w,c
 10036  000C56  6E22               	movwf	??___ftadd& (0+255),c
 10037  000C58  0E18               	movlw	24
 10038  000C5A  6422               	cpfsgt	??___ftadd,c
 10039  000C5C  D007               	goto	i2l2698
 10040  000C5E                     i2l618:
 10041  000C5E  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 10042  000C62  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 10043  000C66  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 10044  000C6A  0012               	return	
 10045  000C6C                     i2l2698:
 10046  000C6C  5026               	movf	___ftadd@exp2,w,c
 10047  000C6E  B4D8               	btfsc	status,2,c
 10048  000C70  D00B               	goto	i2l622
 10049  000C72  5027               	movf	___ftadd@exp1,w,c
 10050  000C74  5C26               	subwf	___ftadd@exp2,w,c
 10051  000C76  B0D8               	btfsc	status,0,c
 10052  000C78  D00E               	goto	i2l2704
 10053  000C7A  5026               	movf	___ftadd@exp2,w,c
 10054  000C7C  0800               	sublw	0
 10055  000C7E  2427               	addwf	___ftadd@exp1,w,c
 10056  000C80  6E22               	movwf	??___ftadd& (0+255),c
 10057  000C82  0E18               	movlw	24
 10058  000C84  6422               	cpfsgt	??___ftadd,c
 10059  000C86  D007               	goto	i2l2704
 10060  000C88                     i2l622:
 10061  000C88  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 10062  000C8C  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 10063  000C90  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 10064  000C94  0012               	return	
 10065  000C96                     i2l2704:
 10066  000C96  0E06               	movlw	6
 10067  000C98  6E25               	movwf	___ftadd@sign,c
 10068  000C9A  BE1E               	btfsc	___ftadd@f1+2,7,c
 10069  000C9C  8E25               	bsf	___ftadd@sign,7,c
 10070  000C9E  BE21               	btfsc	___ftadd@f2+2,7,c
 10071  000CA0  8C25               	bsf	___ftadd@sign,6,c
 10072  000CA2  8E1D               	bsf	___ftadd@f1+1,7,c
 10073  000CA4  0EFF               	movlw	255
 10074  000CA6  161C               	andwf	___ftadd@f1,f,c
 10075  000CA8  0EFF               	movlw	255
 10076  000CAA  161D               	andwf	___ftadd@f1+1,f,c
 10077  000CAC  0E00               	movlw	0
 10078  000CAE  161E               	andwf	___ftadd@f1+2,f,c
 10079  000CB0  8E20               	bsf	___ftadd@f2+1,7,c
 10080  000CB2  0EFF               	movlw	255
 10081  000CB4  161F               	andwf	___ftadd@f2,f,c
 10082  000CB6  0EFF               	movlw	255
 10083  000CB8  1620               	andwf	___ftadd@f2+1,f,c
 10084  000CBA  0E00               	movlw	0
 10085  000CBC  1621               	andwf	___ftadd@f2+2,f,c
 10086  000CBE  5026               	movf	___ftadd@exp2,w,c
 10087  000CC0  5C27               	subwf	___ftadd@exp1,w,c
 10088  000CC2  B0D8               	btfsc	status,0,c
 10089  000CC4  D01B               	goto	i2l2730
 10090  000CC6                     i2l2720:
 10091  000CC6  90D8               	bcf	status,0,c
 10092  000CC8  361F               	rlcf	___ftadd@f2,f,c
 10093  000CCA  3620               	rlcf	___ftadd@f2+1,f,c
 10094  000CCC  3621               	rlcf	___ftadd@f2+2,f,c
 10095  000CCE  0626               	decf	___ftadd@exp2,f,c
 10096  000CD0  5027               	movf	___ftadd@exp1,w,c
 10097  000CD2  1826               	xorwf	___ftadd@exp2,w,c
 10098  000CD4  B4D8               	btfsc	status,2,c
 10099  000CD6  D00D               	goto	i2l2728
 10100  000CD8  0625               	decf	___ftadd@sign,f,c
 10101  000CDA  C025  F022         	movff	___ftadd@sign,??___ftadd
 10102  000CDE  0E07               	movlw	7
 10103  000CE0  1622               	andwf	??___ftadd,f,c
 10104  000CE2  B4D8               	btfsc	status,2,c
 10105  000CE4  D006               	goto	i2l2728
 10106  000CE6  D7EF               	goto	i2l2720
 10107  000CE8                     i2l2726:
 10108  000CE8  90D8               	bcf	status,0,c
 10109  000CEA  321E               	rrcf	___ftadd@f1+2,f,c
 10110  000CEC  321D               	rrcf	___ftadd@f1+1,f,c
 10111  000CEE  321C               	rrcf	___ftadd@f1,f,c
 10112  000CF0  2A27               	incf	___ftadd@exp1,f,c
 10113  000CF2                     i2l2728:
 10114  000CF2  5026               	movf	___ftadd@exp2,w,c
 10115  000CF4  1827               	xorwf	___ftadd@exp1,w,c
 10116  000CF6  B4D8               	btfsc	status,2,c
 10117  000CF8  D01F               	goto	i2l633
 10118  000CFA  D7F6               	goto	i2l2726
 10119  000CFC                     i2l2730:
 10120  000CFC  5027               	movf	___ftadd@exp1,w,c
 10121  000CFE  5C26               	subwf	___ftadd@exp2,w,c
 10122  000D00  B0D8               	btfsc	status,0,c
 10123  000D02  D01A               	goto	i2l633
 10124  000D04                     i2l2732:
 10125  000D04  90D8               	bcf	status,0,c
 10126  000D06  361C               	rlcf	___ftadd@f1,f,c
 10127  000D08  361D               	rlcf	___ftadd@f1+1,f,c
 10128  000D0A  361E               	rlcf	___ftadd@f1+2,f,c
 10129  000D0C  0627               	decf	___ftadd@exp1,f,c
 10130  000D0E  5027               	movf	___ftadd@exp1,w,c
 10131  000D10  1826               	xorwf	___ftadd@exp2,w,c
 10132  000D12  B4D8               	btfsc	status,2,c
 10133  000D14  D00D               	goto	i2l2740
 10134  000D16  0625               	decf	___ftadd@sign,f,c
 10135  000D18  C025  F022         	movff	___ftadd@sign,??___ftadd
 10136  000D1C  0E07               	movlw	7
 10137  000D1E  1622               	andwf	??___ftadd,f,c
 10138  000D20  B4D8               	btfsc	status,2,c
 10139  000D22  D006               	goto	i2l2740
 10140  000D24  D7EF               	goto	i2l2732
 10141  000D26                     i2l2738:
 10142  000D26  90D8               	bcf	status,0,c
 10143  000D28  3221               	rrcf	___ftadd@f2+2,f,c
 10144  000D2A  3220               	rrcf	___ftadd@f2+1,f,c
 10145  000D2C  321F               	rrcf	___ftadd@f2,f,c
 10146  000D2E  2A26               	incf	___ftadd@exp2,f,c
 10147  000D30                     i2l2740:
 10148  000D30  5026               	movf	___ftadd@exp2,w,c
 10149  000D32  1827               	xorwf	___ftadd@exp1,w,c
 10150  000D34  A4D8               	btfss	status,2,c
 10151  000D36  D7F7               	goto	i2l2738
 10152  000D38                     i2l633:
 10153  000D38  AE25               	btfss	___ftadd@sign,7,c
 10154  000D3A  D00C               	goto	i2l642
 10155  000D3C  0EFF               	movlw	255
 10156  000D3E  1A1C               	xorwf	___ftadd@f1,f,c
 10157  000D40  0EFF               	movlw	255
 10158  000D42  1A1D               	xorwf	___ftadd@f1+1,f,c
 10159  000D44  0EFF               	movlw	255
 10160  000D46  1A1E               	xorwf	___ftadd@f1+2,f,c
 10161  000D48  0E01               	movlw	1
 10162  000D4A  261C               	addwf	___ftadd@f1,f,c
 10163  000D4C  0E00               	movlw	0
 10164  000D4E  221D               	addwfc	___ftadd@f1+1,f,c
 10165  000D50  0E00               	movlw	0
 10166  000D52  221E               	addwfc	___ftadd@f1+2,f,c
 10167  000D54                     i2l642:
 10168  000D54  AC25               	btfss	___ftadd@sign,6,c
 10169  000D56  D00C               	goto	i2l2746
 10170  000D58  0EFF               	movlw	255
 10171  000D5A  1A1F               	xorwf	___ftadd@f2,f,c
 10172  000D5C  0EFF               	movlw	255
 10173  000D5E  1A20               	xorwf	___ftadd@f2+1,f,c
 10174  000D60  0EFF               	movlw	255
 10175  000D62  1A21               	xorwf	___ftadd@f2+2,f,c
 10176  000D64  0E01               	movlw	1
 10177  000D66  261F               	addwf	___ftadd@f2,f,c
 10178  000D68  0E00               	movlw	0
 10179  000D6A  2220               	addwfc	___ftadd@f2+1,f,c
 10180  000D6C  0E00               	movlw	0
 10181  000D6E  2221               	addwfc	___ftadd@f2+2,f,c
 10182  000D70                     i2l2746:
 10183  000D70  0E00               	movlw	0
 10184  000D72  6E25               	movwf	___ftadd@sign,c
 10185  000D74  501C               	movf	___ftadd@f1,w,c
 10186  000D76  261F               	addwf	___ftadd@f2,f,c
 10187  000D78  501D               	movf	___ftadd@f1+1,w,c
 10188  000D7A  2220               	addwfc	___ftadd@f2+1,f,c
 10189  000D7C  501E               	movf	___ftadd@f1+2,w,c
 10190  000D7E  2221               	addwfc	___ftadd@f2+2,f,c
 10191  000D80  AE21               	btfss	___ftadd@f2+2,7,c
 10192  000D82  D00E               	goto	i2l2756
 10193  000D84  0EFF               	movlw	255
 10194  000D86  1A1F               	xorwf	___ftadd@f2,f,c
 10195  000D88  0EFF               	movlw	255
 10196  000D8A  1A20               	xorwf	___ftadd@f2+1,f,c
 10197  000D8C  0EFF               	movlw	255
 10198  000D8E  1A21               	xorwf	___ftadd@f2+2,f,c
 10199  000D90  0E01               	movlw	1
 10200  000D92  261F               	addwf	___ftadd@f2,f,c
 10201  000D94  0E00               	movlw	0
 10202  000D96  2220               	addwfc	___ftadd@f2+1,f,c
 10203  000D98  0E00               	movlw	0
 10204  000D9A  2221               	addwfc	___ftadd@f2+2,f,c
 10205  000D9C  0E01               	movlw	1
 10206  000D9E  6E25               	movwf	___ftadd@sign,c
 10207  000DA0                     i2l2756:
 10208  000DA0  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 10209  000DA4  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 10210  000DA8  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 10211  000DAC  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 10212  000DB0  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 10213  000DB4  EC37  F00D         	call	___ftpack	;wreg free
 10214  000DB8  C001  F01C         	movff	?___ftpack,?___ftadd
 10215  000DBC  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 10216  000DC0  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 10217  000DC4  0012               	return	
 10218  000DC6                     __end_of___ftadd:
 10219                           	opt stack 0
 10220                           pclatu	equ	0xFFB
 10221                           pclath	equ	0xFFA
 10222                           tblptru	equ	0xFF8
 10223                           tblptrh	equ	0xFF7
 10224                           tblptrl	equ	0xFF6
 10225                           tablat	equ	0xFF5
 10226                           prodh	equ	0xFF4
 10227                           prodl	equ	0xFF3
 10228                           intcon	equ	0xFF2
 10229                           intcon2	equ	0xFF1
 10230                           intcon3	equ	0xFF0
 10231                           postinc0	equ	0xFEE
 10232                           fsr0h	equ	0xFEA
 10233                           fsr0l	equ	0xFE9
 10234                           wreg	equ	0xFE8
 10235                           fsr1h	equ	0xFE2
 10236                           fsr1l	equ	0xFE1
 10237                           indf2	equ	0xFDF
 10238                           postinc2	equ	0xFDE
 10239                           postdec2	equ	0xFDD
 10240                           fsr2h	equ	0xFDA
 10241                           fsr2l	equ	0xFD9
 10242                           status	equ	0xFD8
 10243                           
 10244 ;; *************** function ___ftneg *****************
 10245 ;; Defined at:
 10246 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;  f1              3    0[COMRAM] float 
 10249 ;; Auto vars:     Size  Location     Type
 10250 ;;		None
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  3    0[COMRAM] float 
 10253 ;; Registers used:
 10254 ;;		wreg, status,2, status,0
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10260 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;Total ram usage:        3 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; This function calls:
 10267 ;;		Nothing
 10268 ;; This function is called by:
 10269 ;;		_pow
 10270 ;;		_exp
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           	psect	text55
 10275  002482                     __ptext55:
 10276                           	opt stack 0
 10277  002482                     ___ftneg:
 10278                           	opt stack 22
 10279                           
 10280                           ;incstack = 0
 10281  002482  5001               	movf	___ftneg@f1,w,c
 10282  002484  1002               	iorwf	___ftneg@f1+1,w,c
 10283  002486  1003               	iorwf	___ftneg@f1+2,w,c
 10284  002488  B4D8               	btfsc	status,2,c
 10285  00248A  D006               	goto	i2l675
 10286  00248C  0E00               	movlw	0
 10287  00248E  1A01               	xorwf	___ftneg@f1,f,c
 10288  002490  0E00               	movlw	0
 10289  002492  1A02               	xorwf	___ftneg@f1+1,f,c
 10290  002494  0E80               	movlw	128
 10291  002496  1A03               	xorwf	___ftneg@f1+2,f,c
 10292  002498                     i2l675:
 10293  002498  C001  F001         	movff	___ftneg@f1,?___ftneg
 10294  00249C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 10295  0024A0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 10296  0024A4  0012               	return		;funcret
 10297  0024A6                     __end_of___ftneg:
 10298                           	opt stack 0
 10299                           pclatu	equ	0xFFB
 10300                           pclath	equ	0xFFA
 10301                           tblptru	equ	0xFF8
 10302                           tblptrh	equ	0xFF7
 10303                           tblptrl	equ	0xFF6
 10304                           tablat	equ	0xFF5
 10305                           prodh	equ	0xFF4
 10306                           prodl	equ	0xFF3
 10307                           intcon	equ	0xFF2
 10308                           intcon2	equ	0xFF1
 10309                           intcon3	equ	0xFF0
 10310                           postinc0	equ	0xFEE
 10311                           fsr0h	equ	0xFEA
 10312                           fsr0l	equ	0xFE9
 10313                           wreg	equ	0xFE8
 10314                           fsr1h	equ	0xFE2
 10315                           fsr1l	equ	0xFE1
 10316                           indf2	equ	0xFDF
 10317                           postinc2	equ	0xFDE
 10318                           postdec2	equ	0xFDD
 10319                           fsr2h	equ	0xFDA
 10320                           fsr2l	equ	0xFD9
 10321                           status	equ	0xFD8
 10322                           
 10323 ;; *************** function ___ftdiv *****************
 10324 ;; Defined at:
 10325 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10326 ;; Parameters:    Size  Location     Type
 10327 ;;  f1              3    8[COMRAM] float 
 10328 ;;  f2              3   11[COMRAM] float 
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;  f3              3   18[COMRAM] float 
 10331 ;;  sign            1   22[COMRAM] unsigned char 
 10332 ;;  exp             1   21[COMRAM] unsigned char 
 10333 ;;  cntr            1   17[COMRAM] unsigned char 
 10334 ;; Return value:  Size  Location     Type
 10335 ;;                  3    8[COMRAM] float 
 10336 ;; Registers used:
 10337 ;;		wreg, status,2, status,0, cstack
 10338 ;; Tracked objects:
 10339 ;;		On entry : 0/0
 10340 ;;		On exit  : 0/0
 10341 ;;		Unchanged: 0/0
 10342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10343 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10344 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10345 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10347 ;;Total ram usage:       15 bytes
 10348 ;; Hardware stack levels used:    1
 10349 ;; Hardware stack levels required when called:    1
 10350 ;; This function calls:
 10351 ;;		___ftpack
 10352 ;; This function is called by:
 10353 ;;		_exp
 10354 ;; This function uses a non-reentrant model
 10355 ;;
 10356                           
 10357                           	psect	text56
 10358  001588                     __ptext56:
 10359                           	opt stack 0
 10360  001588                     ___ftdiv:
 10361                           	opt stack 21
 10362                           
 10363                           ;incstack = 0
 10364  001588  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 10365  00158C  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 10366  00158E  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 10367  001590  340A               	rlcf	___ftdiv@f1+1,w,c
 10368  001592  360F               	rlcf	??___ftdiv& (0+255),f,c
 10369  001594  E301               	bnc	u245_41
 10370  001596  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 10371  001598                     u245_41:
 10372  001598  500F               	movf	??___ftdiv,w,c
 10373  00159A  6E16               	movwf	___ftdiv@exp,c
 10374  00159C  5016               	movf	___ftdiv@exp,w,c
 10375  00159E  A4D8               	btfss	status,2,c
 10376  0015A0  D007               	goto	i2l2926
 10377  0015A2  0E00               	movlw	0
 10378  0015A4  6E09               	movwf	?___ftdiv,c
 10379  0015A6  0E00               	movlw	0
 10380  0015A8  6E0A               	movwf	?___ftdiv+1,c
 10381  0015AA  0E00               	movlw	0
 10382  0015AC  6E0B               	movwf	?___ftdiv+2,c
 10383  0015AE  0012               	return	
 10384  0015B0                     i2l2926:
 10385  0015B0  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 10386  0015B4  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 10387  0015B6  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 10388  0015B8  340D               	rlcf	___ftdiv@f2+1,w,c
 10389  0015BA  360F               	rlcf	??___ftdiv& (0+255),f,c
 10390  0015BC  E301               	bnc	u247_41
 10391  0015BE  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 10392  0015C0                     u247_41:
 10393  0015C0  500F               	movf	??___ftdiv,w,c
 10394  0015C2  6E17               	movwf	___ftdiv@sign,c
 10395  0015C4  5017               	movf	___ftdiv@sign,w,c
 10396  0015C6  A4D8               	btfss	status,2,c
 10397  0015C8  D007               	goto	i2l2932
 10398  0015CA  0E00               	movlw	0
 10399  0015CC  6E09               	movwf	?___ftdiv,c
 10400  0015CE  0E00               	movlw	0
 10401  0015D0  6E0A               	movwf	?___ftdiv+1,c
 10402  0015D2  0E00               	movlw	0
 10403  0015D4  6E0B               	movwf	?___ftdiv+2,c
 10404  0015D6  0012               	return	
 10405  0015D8                     i2l2932:
 10406  0015D8  0E00               	movlw	0
 10407  0015DA  6E13               	movwf	___ftdiv@f3,c
 10408  0015DC  0E00               	movlw	0
 10409  0015DE  6E14               	movwf	___ftdiv@f3+1,c
 10410  0015E0  0E00               	movlw	0
 10411  0015E2  6E15               	movwf	___ftdiv@f3+2,c
 10412  0015E4  5017               	movf	___ftdiv@sign,w,c
 10413  0015E6  0F89               	addlw	137
 10414  0015E8  5E16               	subwf	___ftdiv@exp,f,c
 10415  0015EA  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 10416  0015EE  500E               	movf	___ftdiv@f2+2,w,c
 10417  0015F0  1A17               	xorwf	___ftdiv@sign,f,c
 10418  0015F2  0E80               	movlw	128
 10419  0015F4  1617               	andwf	___ftdiv@sign,f,c
 10420  0015F6  8E0A               	bsf	___ftdiv@f1+1,7,c
 10421  0015F8  0EFF               	movlw	255
 10422  0015FA  1609               	andwf	___ftdiv@f1,f,c
 10423  0015FC  0EFF               	movlw	255
 10424  0015FE  160A               	andwf	___ftdiv@f1+1,f,c
 10425  001600  0E00               	movlw	0
 10426  001602  160B               	andwf	___ftdiv@f1+2,f,c
 10427  001604  8E0D               	bsf	___ftdiv@f2+1,7,c
 10428  001606  0EFF               	movlw	255
 10429  001608  160C               	andwf	___ftdiv@f2,f,c
 10430  00160A  0EFF               	movlw	255
 10431  00160C  160D               	andwf	___ftdiv@f2+1,f,c
 10432  00160E  0E00               	movlw	0
 10433  001610  160E               	andwf	___ftdiv@f2+2,f,c
 10434  001612  0E18               	movlw	24
 10435  001614  6E12               	movwf	___ftdiv@cntr,c
 10436  001616                     i2l2952:
 10437  001616  90D8               	bcf	status,0,c
 10438  001618  3613               	rlcf	___ftdiv@f3,f,c
 10439  00161A  3614               	rlcf	___ftdiv@f3+1,f,c
 10440  00161C  3615               	rlcf	___ftdiv@f3+2,f,c
 10441  00161E  500C               	movf	___ftdiv@f2,w,c
 10442  001620  5C09               	subwf	___ftdiv@f1,w,c
 10443  001622  500D               	movf	___ftdiv@f2+1,w,c
 10444  001624  580A               	subwfb	___ftdiv@f1+1,w,c
 10445  001626  500E               	movf	___ftdiv@f2+2,w,c
 10446  001628  580B               	subwfb	___ftdiv@f1+2,w,c
 10447  00162A  A0D8               	btfss	status,0,c
 10448  00162C  D007               	goto	i2l653
 10449  00162E  500C               	movf	___ftdiv@f2,w,c
 10450  001630  5E09               	subwf	___ftdiv@f1,f,c
 10451  001632  500D               	movf	___ftdiv@f2+1,w,c
 10452  001634  5A0A               	subwfb	___ftdiv@f1+1,f,c
 10453  001636  500E               	movf	___ftdiv@f2+2,w,c
 10454  001638  5A0B               	subwfb	___ftdiv@f1+2,f,c
 10455  00163A  8013               	bsf	___ftdiv@f3,0,c
 10456  00163C                     i2l653:
 10457  00163C  90D8               	bcf	status,0,c
 10458  00163E  3609               	rlcf	___ftdiv@f1,f,c
 10459  001640  360A               	rlcf	___ftdiv@f1+1,f,c
 10460  001642  360B               	rlcf	___ftdiv@f1+2,f,c
 10461  001644  2E12               	decfsz	___ftdiv@cntr,f,c
 10462  001646  D7E7               	goto	i2l2952
 10463  001648  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 10464  00164C  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10465  001650  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10466  001654  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 10467  001658  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 10468  00165C  EC37  F00D         	call	___ftpack	;wreg free
 10469  001660  C001  F009         	movff	?___ftpack,?___ftdiv
 10470  001664  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 10471  001668  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 10472  00166C  0012               	return	
 10473  00166E                     __end_of___ftdiv:
 10474                           	opt stack 0
 10475                           pclatu	equ	0xFFB
 10476                           pclath	equ	0xFFA
 10477                           tblptru	equ	0xFF8
 10478                           tblptrh	equ	0xFF7
 10479                           tblptrl	equ	0xFF6
 10480                           tablat	equ	0xFF5
 10481                           prodh	equ	0xFF4
 10482                           prodl	equ	0xFF3
 10483                           intcon	equ	0xFF2
 10484                           intcon2	equ	0xFF1
 10485                           intcon3	equ	0xFF0
 10486                           postinc0	equ	0xFEE
 10487                           fsr0h	equ	0xFEA
 10488                           fsr0l	equ	0xFE9
 10489                           wreg	equ	0xFE8
 10490                           fsr1h	equ	0xFE2
 10491                           fsr1l	equ	0xFE1
 10492                           indf2	equ	0xFDF
 10493                           postinc2	equ	0xFDE
 10494                           postdec2	equ	0xFDD
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function ___awtoft *****************
 10500 ;; Defined at:
 10501 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  c               2    8[COMRAM] int 
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;  sign            1   11[COMRAM] unsigned char 
 10506 ;; Return value:  Size  Location     Type
 10507 ;;                  3    8[COMRAM] float 
 10508 ;; Registers used:
 10509 ;;		wreg, status,2, status,0, cstack
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10515 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10518 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10519 ;;Total ram usage:        4 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    1
 10522 ;; This function calls:
 10523 ;;		___ftpack
 10524 ;; This function is called by:
 10525 ;;		_dec_to_hex
 10526 ;;		_exp
 10527 ;;		_log
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           	psect	text57
 10532  00233A                     __ptext57:
 10533                           	opt stack 0
 10534  00233A                     ___awtoft:
 10535                           	opt stack 21
 10536                           
 10537                           ;incstack = 0
 10538  00233A  0E00               	movlw	0
 10539  00233C  6E0C               	movwf	___awtoft@sign,c
 10540  00233E  AE0A               	btfss	___awtoft@c+1,7,c
 10541  002340  D006               	goto	i2l2982
 10542  002342  6C09               	negf	___awtoft@c,c
 10543  002344  1E0A               	comf	___awtoft@c+1,f,c
 10544  002346  B0D8               	btfsc	status,0,c
 10545  002348  2A0A               	incf	___awtoft@c+1,f,c
 10546  00234A  0E01               	movlw	1
 10547  00234C  6E0C               	movwf	___awtoft@sign,c
 10548  00234E                     i2l2982:
 10549  00234E  C009  F001         	movff	___awtoft@c,___ftpack@arg
 10550  002352  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 10551  002356  6A03               	clrf	___ftpack@arg+2,c
 10552  002358  0E8E               	movlw	142
 10553  00235A  6E04               	movwf	___ftpack@exp,c
 10554  00235C  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 10555  002360  EC37  F00D         	call	___ftpack	;wreg free
 10556  002364  C001  F009         	movff	?___ftpack,?___awtoft
 10557  002368  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 10558  00236C  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 10559  002370  0012               	return	
 10560  002372                     __end_of___awtoft:
 10561                           	opt stack 0
 10562                           pclatu	equ	0xFFB
 10563                           pclath	equ	0xFFA
 10564                           tblptru	equ	0xFF8
 10565                           tblptrh	equ	0xFF7
 10566                           tblptrl	equ	0xFF6
 10567                           tablat	equ	0xFF5
 10568                           prodh	equ	0xFF4
 10569                           prodl	equ	0xFF3
 10570                           intcon	equ	0xFF2
 10571                           intcon2	equ	0xFF1
 10572                           intcon3	equ	0xFF0
 10573                           postinc0	equ	0xFEE
 10574                           fsr0h	equ	0xFEA
 10575                           fsr0l	equ	0xFE9
 10576                           wreg	equ	0xFE8
 10577                           fsr1h	equ	0xFE2
 10578                           fsr1l	equ	0xFE1
 10579                           indf2	equ	0xFDF
 10580                           postinc2	equ	0xFDE
 10581                           postdec2	equ	0xFDD
 10582                           fsr2h	equ	0xFDA
 10583                           fsr2l	equ	0xFD9
 10584                           status	equ	0xFD8
 10585                           
 10586 ;; *************** function ___lltoft *****************
 10587 ;; Defined at:
 10588 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 10589 ;; Parameters:    Size  Location     Type
 10590 ;;  c               4    8[COMRAM] unsigned long 
 10591 ;; Auto vars:     Size  Location     Type
 10592 ;;  exp             1   16[COMRAM] unsigned char 
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  3    8[COMRAM] float 
 10595 ;; Registers used:
 10596 ;;		wreg, status,2, status,0, cstack
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10602 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10604 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;Total ram usage:        9 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    1
 10609 ;; This function calls:
 10610 ;;		___ftpack
 10611 ;; This function is called by:
 10612 ;;		_pow
 10613 ;; This function uses a non-reentrant model
 10614 ;;
 10615                           
 10616                           	psect	text58
 10617  0020E4                     __ptext58:
 10618                           	opt stack 0
 10619  0020E4                     ___lltoft:
 10620                           	opt stack 22
 10621                           
 10622                           ;incstack = 0
 10623  0020E4  0E8E               	movlw	142
 10624  0020E6  6E11               	movwf	___lltoft@exp,c
 10625  0020E8  D006               	goto	i2l3108
 10626  0020EA                     i2l3106:
 10627  0020EA  90D8               	bcf	status,0,c
 10628  0020EC  320C               	rrcf	___lltoft@c+3,f,c
 10629  0020EE  320B               	rrcf	___lltoft@c+2,f,c
 10630  0020F0  320A               	rrcf	___lltoft@c+1,f,c
 10631  0020F2  3209               	rrcf	___lltoft@c,f,c
 10632  0020F4  2A11               	incf	___lltoft@exp,f,c
 10633  0020F6                     i2l3108:
 10634  0020F6  0E00               	movlw	0
 10635  0020F8  1409               	andwf	___lltoft@c,w,c
 10636  0020FA  6E0D               	movwf	??___lltoft& (0+255),c
 10637  0020FC  0E00               	movlw	0
 10638  0020FE  140A               	andwf	___lltoft@c+1,w,c
 10639  002100  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 10640  002102  0E00               	movlw	0
 10641  002104  140B               	andwf	___lltoft@c+2,w,c
 10642  002106  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 10643  002108  0EFF               	movlw	255
 10644  00210A  140C               	andwf	___lltoft@c+3,w,c
 10645  00210C  6E10               	movwf	(??___lltoft+3)& (0+255),c
 10646  00210E  500D               	movf	??___lltoft,w,c
 10647  002110  100E               	iorwf	??___lltoft+1,w,c
 10648  002112  100F               	iorwf	??___lltoft+2,w,c
 10649  002114  1010               	iorwf	??___lltoft+3,w,c
 10650  002116  A4D8               	btfss	status,2,c
 10651  002118  D7E8               	goto	i2l3106
 10652  00211A  C009  F001         	movff	___lltoft@c,___ftpack@arg
 10653  00211E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 10654  002122  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 10655  002126  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 10656  00212A  0E00               	movlw	0
 10657  00212C  6E05               	movwf	___ftpack@sign,c
 10658  00212E  EC37  F00D         	call	___ftpack	;wreg free
 10659  002132  C001  F009         	movff	?___ftpack,?___lltoft
 10660  002136  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 10661  00213A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 10662  00213E  0012               	return	
 10663  002140                     __end_of___lltoft:
 10664                           	opt stack 0
 10665                           pclatu	equ	0xFFB
 10666                           pclath	equ	0xFFA
 10667                           tblptru	equ	0xFF8
 10668                           tblptrh	equ	0xFF7
 10669                           tblptrl	equ	0xFF6
 10670                           tablat	equ	0xFF5
 10671                           prodh	equ	0xFF4
 10672                           prodl	equ	0xFF3
 10673                           intcon	equ	0xFF2
 10674                           intcon2	equ	0xFF1
 10675                           intcon3	equ	0xFF0
 10676                           postinc0	equ	0xFEE
 10677                           fsr0h	equ	0xFEA
 10678                           fsr0l	equ	0xFE9
 10679                           wreg	equ	0xFE8
 10680                           fsr1h	equ	0xFE2
 10681                           fsr1l	equ	0xFE1
 10682                           indf2	equ	0xFDF
 10683                           postinc2	equ	0xFDE
 10684                           postdec2	equ	0xFDD
 10685                           fsr2h	equ	0xFDA
 10686                           fsr2l	equ	0xFD9
 10687                           status	equ	0xFD8
 10688                           
 10689 ;; *************** function ___ftpack *****************
 10690 ;; Defined at:
 10691 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;  arg             3    0[COMRAM] unsigned um
 10694 ;;  exp             1    3[COMRAM] unsigned char 
 10695 ;;  sign            1    4[COMRAM] unsigned char 
 10696 ;; Auto vars:     Size  Location     Type
 10697 ;;		None
 10698 ;; Return value:  Size  Location     Type
 10699 ;;                  3    0[COMRAM] float 
 10700 ;; Registers used:
 10701 ;;		wreg, status,2, status,0
 10702 ;; Tracked objects:
 10703 ;;		On entry : 0/0
 10704 ;;		On exit  : 0/0
 10705 ;;		Unchanged: 0/0
 10706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10707 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10709 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10710 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10711 ;;Total ram usage:        8 bytes
 10712 ;; Hardware stack levels used:    1
 10713 ;; This function calls:
 10714 ;;		Nothing
 10715 ;; This function is called by:
 10716 ;;		___altoft
 10717 ;;		___awtoft
 10718 ;;		___ftadd
 10719 ;;		___ftdiv
 10720 ;;		___ftmul
 10721 ;;		___lltoft
 10722 ;; This function uses a non-reentrant model
 10723 ;;
 10724                           
 10725                           	psect	text59
 10726  001A6E                     __ptext59:
 10727                           	opt stack 0
 10728  001A6E                     ___ftpack:
 10729                           	opt stack 20
 10730                           
 10731                           ;incstack = 0
 10732  001A6E  5004               	movf	___ftpack@exp,w,c
 10733  001A70  B4D8               	btfsc	status,2,c
 10734  001A72  D005               	goto	i2l2642
 10735  001A74  5001               	movf	___ftpack@arg,w,c
 10736  001A76  1002               	iorwf	___ftpack@arg+1,w,c
 10737  001A78  1003               	iorwf	___ftpack@arg+2,w,c
 10738  001A7A  A4D8               	btfss	status,2,c
 10739  001A7C  D00C               	goto	i2l2648
 10740  001A7E                     i2l2642:
 10741  001A7E  0E00               	movlw	0
 10742  001A80  6E01               	movwf	?___ftpack,c
 10743  001A82  0E00               	movlw	0
 10744  001A84  6E02               	movwf	?___ftpack+1,c
 10745  001A86  0E00               	movlw	0
 10746  001A88  6E03               	movwf	?___ftpack+2,c
 10747  001A8A  0012               	return	
 10748  001A8C                     i2l2646:
 10749  001A8C  2A04               	incf	___ftpack@exp,f,c
 10750  001A8E  90D8               	bcf	status,0,c
 10751  001A90  3203               	rrcf	___ftpack@arg+2,f,c
 10752  001A92  3202               	rrcf	___ftpack@arg+1,f,c
 10753  001A94  3201               	rrcf	___ftpack@arg,f,c
 10754  001A96                     i2l2648:
 10755  001A96  0E00               	movlw	0
 10756  001A98  1401               	andwf	___ftpack@arg,w,c
 10757  001A9A  6E06               	movwf	??___ftpack& (0+255),c
 10758  001A9C  0E00               	movlw	0
 10759  001A9E  1402               	andwf	___ftpack@arg+1,w,c
 10760  001AA0  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10761  001AA2  0EFE               	movlw	254
 10762  001AA4  1403               	andwf	___ftpack@arg+2,w,c
 10763  001AA6  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10764  001AA8  5006               	movf	??___ftpack,w,c
 10765  001AAA  1007               	iorwf	??___ftpack+1,w,c
 10766  001AAC  1008               	iorwf	??___ftpack+2,w,c
 10767  001AAE  B4D8               	btfsc	status,2,c
 10768  001AB0  D00C               	goto	i2l2654
 10769  001AB2  D7EC               	goto	i2l2646
 10770  001AB4                     i2l2650:
 10771  001AB4  2A04               	incf	___ftpack@exp,f,c
 10772  001AB6  0E01               	movlw	1
 10773  001AB8  2601               	addwf	___ftpack@arg,f,c
 10774  001ABA  0E00               	movlw	0
 10775  001ABC  2202               	addwfc	___ftpack@arg+1,f,c
 10776  001ABE  0E00               	movlw	0
 10777  001AC0  2203               	addwfc	___ftpack@arg+2,f,c
 10778  001AC2  90D8               	bcf	status,0,c
 10779  001AC4  3203               	rrcf	___ftpack@arg+2,f,c
 10780  001AC6  3202               	rrcf	___ftpack@arg+1,f,c
 10781  001AC8  3201               	rrcf	___ftpack@arg,f,c
 10782  001ACA                     i2l2654:
 10783  001ACA  0E00               	movlw	0
 10784  001ACC  1401               	andwf	___ftpack@arg,w,c
 10785  001ACE  6E06               	movwf	??___ftpack& (0+255),c
 10786  001AD0  0E00               	movlw	0
 10787  001AD2  1402               	andwf	___ftpack@arg+1,w,c
 10788  001AD4  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10789  001AD6  0EFF               	movlw	255
 10790  001AD8  1403               	andwf	___ftpack@arg+2,w,c
 10791  001ADA  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10792  001ADC  5006               	movf	??___ftpack,w,c
 10793  001ADE  1007               	iorwf	??___ftpack+1,w,c
 10794  001AE0  1008               	iorwf	??___ftpack+2,w,c
 10795  001AE2  B4D8               	btfsc	status,2,c
 10796  001AE4  D006               	goto	i2l2658
 10797  001AE6  D7E6               	goto	i2l2650
 10798  001AE8                     i2l2656:
 10799  001AE8  0604               	decf	___ftpack@exp,f,c
 10800  001AEA  90D8               	bcf	status,0,c
 10801  001AEC  3601               	rlcf	___ftpack@arg,f,c
 10802  001AEE  3602               	rlcf	___ftpack@arg+1,f,c
 10803  001AF0  3603               	rlcf	___ftpack@arg+2,f,c
 10804  001AF2                     i2l2658:
 10805  001AF2  BE02               	btfsc	___ftpack@arg+1,7,c
 10806  001AF4  D003               	goto	i2l595
 10807  001AF6  0E02               	movlw	2
 10808  001AF8  6004               	cpfslt	___ftpack@exp,c
 10809  001AFA  D7F6               	goto	i2l2656
 10810  001AFC                     i2l595:
 10811  001AFC  A004               	btfss	___ftpack@exp,0,c
 10812  001AFE  9E02               	bcf	___ftpack@arg+1,7,c
 10813  001B00  90D8               	bcf	status,0,c
 10814  001B02  3204               	rrcf	___ftpack@exp,f,c
 10815  001B04  5004               	movf	___ftpack@exp,w,c
 10816  001B06  1203               	iorwf	___ftpack@arg+2,f,c
 10817  001B08  5005               	movf	___ftpack@sign,w,c
 10818  001B0A  A4D8               	btfss	status,2,c
 10819  001B0C  8E03               	bsf	___ftpack@arg+2,7,c
 10820  001B0E  C001  F001         	movff	___ftpack@arg,?___ftpack
 10821  001B12  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10822  001B16  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10823  001B1A  0012               	return	
 10824  001B1C                     __end_of___ftpack:
 10825                           	opt stack 0
 10826                           pclatu	equ	0xFFB
 10827                           pclath	equ	0xFFA
 10828                           tblptru	equ	0xFF8
 10829                           tblptrh	equ	0xFF7
 10830                           tblptrl	equ	0xFF6
 10831                           tablat	equ	0xFF5
 10832                           prodh	equ	0xFF4
 10833                           prodl	equ	0xFF3
 10834                           intcon	equ	0xFF2
 10835                           intcon2	equ	0xFF1
 10836                           intcon3	equ	0xFF0
 10837                           postinc0	equ	0xFEE
 10838                           fsr0h	equ	0xFEA
 10839                           fsr0l	equ	0xFE9
 10840                           wreg	equ	0xFE8
 10841                           fsr1h	equ	0xFE2
 10842                           fsr1l	equ	0xFE1
 10843                           indf2	equ	0xFDF
 10844                           postinc2	equ	0xFDE
 10845                           postdec2	equ	0xFDD
 10846                           fsr2h	equ	0xFDA
 10847                           fsr2l	equ	0xFD9
 10848                           status	equ	0xFD8
 10849                           
 10850 ;; *************** function ___awdiv *****************
 10851 ;; Defined at:
 10852 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10853 ;; Parameters:    Size  Location     Type
 10854 ;;  dividend        2    0[COMRAM] int 
 10855 ;;  divisor         2    2[COMRAM] int 
 10856 ;; Auto vars:     Size  Location     Type
 10857 ;;  quotient        2    6[COMRAM] int 
 10858 ;;  sign            1    5[COMRAM] unsigned char 
 10859 ;;  counter         1    4[COMRAM] unsigned char 
 10860 ;; Return value:  Size  Location     Type
 10861 ;;                  2    0[COMRAM] int 
 10862 ;; Registers used:
 10863 ;;		wreg, status,2, status,0
 10864 ;; Tracked objects:
 10865 ;;		On entry : 0/0
 10866 ;;		On exit  : 0/0
 10867 ;;		Unchanged: 0/0
 10868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10869 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10870 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10872 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10873 ;;Total ram usage:        8 bytes
 10874 ;; Hardware stack levels used:    1
 10875 ;; This function calls:
 10876 ;;		Nothing
 10877 ;; This function is called by:
 10878 ;;		_dec_to_hex
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           	psect	text60
 10883  001D70                     __ptext60:
 10884                           	opt stack 0
 10885  001D70                     ___awdiv:
 10886                           	opt stack 24
 10887                           
 10888                           ;incstack = 0
 10889  001D70  0E00               	movlw	0
 10890  001D72  6E06               	movwf	___awdiv@sign,c
 10891  001D74  AE04               	btfss	___awdiv@divisor+1,7,c
 10892  001D76  D006               	goto	i2l3464
 10893  001D78  6C03               	negf	___awdiv@divisor,c
 10894  001D7A  1E04               	comf	___awdiv@divisor+1,f,c
 10895  001D7C  B0D8               	btfsc	status,0,c
 10896  001D7E  2A04               	incf	___awdiv@divisor+1,f,c
 10897  001D80  0E01               	movlw	1
 10898  001D82  6E06               	movwf	___awdiv@sign,c
 10899  001D84                     i2l3464:
 10900  001D84  AE02               	btfss	___awdiv@dividend+1,7,c
 10901  001D86  D006               	goto	i2l3470
 10902  001D88  6C01               	negf	___awdiv@dividend,c
 10903  001D8A  1E02               	comf	___awdiv@dividend+1,f,c
 10904  001D8C  B0D8               	btfsc	status,0,c
 10905  001D8E  2A02               	incf	___awdiv@dividend+1,f,c
 10906  001D90  0E01               	movlw	1
 10907  001D92  1A06               	xorwf	___awdiv@sign,f,c
 10908  001D94                     i2l3470:
 10909  001D94  0E00               	movlw	0
 10910  001D96  6E08               	movwf	___awdiv@quotient+1,c
 10911  001D98  0E00               	movlw	0
 10912  001D9A  6E07               	movwf	___awdiv@quotient,c
 10913  001D9C  5003               	movf	___awdiv@divisor,w,c
 10914  001D9E  1004               	iorwf	___awdiv@divisor+1,w,c
 10915  001DA0  B4D8               	btfsc	status,2,c
 10916  001DA2  D01C               	goto	i2l3492
 10917  001DA4  0E01               	movlw	1
 10918  001DA6  6E05               	movwf	___awdiv@counter,c
 10919  001DA8  D004               	goto	i2l3478
 10920  001DAA                     i2l3476:
 10921  001DAA  90D8               	bcf	status,0,c
 10922  001DAC  3603               	rlcf	___awdiv@divisor,f,c
 10923  001DAE  3604               	rlcf	___awdiv@divisor+1,f,c
 10924  001DB0  2A05               	incf	___awdiv@counter,f,c
 10925  001DB2                     i2l3478:
 10926  001DB2  AE04               	btfss	___awdiv@divisor+1,7,c
 10927  001DB4  D7FA               	goto	i2l3476
 10928  001DB6                     i2l3480:
 10929  001DB6  90D8               	bcf	status,0,c
 10930  001DB8  3607               	rlcf	___awdiv@quotient,f,c
 10931  001DBA  3608               	rlcf	___awdiv@quotient+1,f,c
 10932  001DBC  5003               	movf	___awdiv@divisor,w,c
 10933  001DBE  5C01               	subwf	___awdiv@dividend,w,c
 10934  001DC0  5004               	movf	___awdiv@divisor+1,w,c
 10935  001DC2  5802               	subwfb	___awdiv@dividend+1,w,c
 10936  001DC4  A0D8               	btfss	status,0,c
 10937  001DC6  D005               	goto	i2l3488
 10938  001DC8  5003               	movf	___awdiv@divisor,w,c
 10939  001DCA  5E01               	subwf	___awdiv@dividend,f,c
 10940  001DCC  5004               	movf	___awdiv@divisor+1,w,c
 10941  001DCE  5A02               	subwfb	___awdiv@dividend+1,f,c
 10942  001DD0  8007               	bsf	___awdiv@quotient,0,c
 10943  001DD2                     i2l3488:
 10944  001DD2  90D8               	bcf	status,0,c
 10945  001DD4  3204               	rrcf	___awdiv@divisor+1,f,c
 10946  001DD6  3203               	rrcf	___awdiv@divisor,f,c
 10947  001DD8  2E05               	decfsz	___awdiv@counter,f,c
 10948  001DDA  D7ED               	goto	i2l3480
 10949  001DDC                     i2l3492:
 10950  001DDC  5006               	movf	___awdiv@sign,w,c
 10951  001DDE  B4D8               	btfsc	status,2,c
 10952  001DE0  D004               	goto	i2l3496
 10953  001DE2  6C07               	negf	___awdiv@quotient,c
 10954  001DE4  1E08               	comf	___awdiv@quotient+1,f,c
 10955  001DE6  B0D8               	btfsc	status,0,c
 10956  001DE8  2A08               	incf	___awdiv@quotient+1,f,c
 10957  001DEA                     i2l3496:
 10958  001DEA  C007  F001         	movff	___awdiv@quotient,?___awdiv
 10959  001DEE  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 10960  001DF2  0012               	return	
 10961  001DF4                     __end_of___awdiv:
 10962                           	opt stack 0
 10963                           pclatu	equ	0xFFB
 10964                           pclath	equ	0xFFA
 10965                           tblptru	equ	0xFF8
 10966                           tblptrh	equ	0xFF7
 10967                           tblptrl	equ	0xFF6
 10968                           tablat	equ	0xFF5
 10969                           prodh	equ	0xFF4
 10970                           prodl	equ	0xFF3
 10971                           intcon	equ	0xFF2
 10972                           intcon2	equ	0xFF1
 10973                           intcon3	equ	0xFF0
 10974                           postinc0	equ	0xFEE
 10975                           fsr0h	equ	0xFEA
 10976                           fsr0l	equ	0xFE9
 10977                           wreg	equ	0xFE8
 10978                           fsr1h	equ	0xFE2
 10979                           fsr1l	equ	0xFE1
 10980                           indf2	equ	0xFDF
 10981                           postinc2	equ	0xFDE
 10982                           postdec2	equ	0xFDD
 10983                           fsr2h	equ	0xFDA
 10984                           fsr2l	equ	0xFD9
 10985                           status	equ	0xFD8
 10986                           pclatu	equ	0xFFB
 10987                           pclath	equ	0xFFA
 10988                           tblptru	equ	0xFF8
 10989                           tblptrh	equ	0xFF7
 10990                           tblptrl	equ	0xFF6
 10991                           tablat	equ	0xFF5
 10992                           prodh	equ	0xFF4
 10993                           prodl	equ	0xFF3
 10994                           intcon	equ	0xFF2
 10995                           intcon2	equ	0xFF1
 10996                           intcon3	equ	0xFF0
 10997                           postinc0	equ	0xFEE
 10998                           fsr0h	equ	0xFEA
 10999                           fsr0l	equ	0xFE9
 11000                           wreg	equ	0xFE8
 11001                           fsr1h	equ	0xFE2
 11002                           fsr1l	equ	0xFE1
 11003                           indf2	equ	0xFDF
 11004                           postinc2	equ	0xFDE
 11005                           postdec2	equ	0xFDD
 11006                           fsr2h	equ	0xFDA
 11007                           fsr2l	equ	0xFD9
 11008                           status	equ	0xFD8
 11009                           
 11010                           	psect	rparam
 11011  0000                     pclatu	equ	0xFFB
 11012                           pclath	equ	0xFFA
 11013                           tblptru	equ	0xFF8
 11014                           tblptrh	equ	0xFF7
 11015                           tblptrl	equ	0xFF6
 11016                           tablat	equ	0xFF5
 11017                           prodh	equ	0xFF4
 11018                           prodl	equ	0xFF3
 11019                           intcon	equ	0xFF2
 11020                           intcon2	equ	0xFF1
 11021                           intcon3	equ	0xFF0
 11022                           postinc0	equ	0xFEE
 11023                           fsr0h	equ	0xFEA
 11024                           fsr0l	equ	0xFE9
 11025                           wreg	equ	0xFE8
 11026                           fsr1h	equ	0xFE2
 11027                           fsr1l	equ	0xFE1
 11028                           indf2	equ	0xFDF
 11029                           postinc2	equ	0xFDE
 11030                           postdec2	equ	0xFDD
 11031                           fsr2h	equ	0xFDA
 11032                           fsr2l	equ	0xFD9
 11033                           status	equ	0xFD8
 11034                           
 11035                           	psect	temp
 11036  00007E                     btemp:
 11037                           	opt stack 0
 11038  00007E                     	ds	1
 11039  0000                     int$flags	set	btemp
 11040                           pclatu	equ	0xFFB
 11041                           pclath	equ	0xFFA
 11042                           tblptru	equ	0xFF8
 11043                           tblptrh	equ	0xFF7
 11044                           tblptrl	equ	0xFF6
 11045                           tablat	equ	0xFF5
 11046                           prodh	equ	0xFF4
 11047                           prodl	equ	0xFF3
 11048                           intcon	equ	0xFF2
 11049                           intcon2	equ	0xFF1
 11050                           intcon3	equ	0xFF0
 11051                           postinc0	equ	0xFEE
 11052                           fsr0h	equ	0xFEA
 11053                           fsr0l	equ	0xFE9
 11054                           wreg	equ	0xFE8
 11055                           fsr1h	equ	0xFE2
 11056                           fsr1l	equ	0xFE1
 11057                           indf2	equ	0xFDF
 11058                           postinc2	equ	0xFDE
 11059                           postdec2	equ	0xFDD
 11060                           fsr2h	equ	0xFDA
 11061                           fsr2l	equ	0xFD9
 11062                           status	equ	0xFD8


Data Sizes:
    Strings     439
    Constant    99
    Data        2
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     58      74
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_23(CODE[15]), STR_22(CODE[16]), STR_21(CODE[25]), STR_20(CODE[24]), 
		 -> STR_19(CODE[23]), STR_18(CODE[18]), STR_17(CODE[23]), STR_16(CODE[10]), 
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), STR_4(CODE[23]), 
		 -> STR_3(CODE[21]), STR_2(CODE[17]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_time->i2_I2C_Master_Read
    i2_read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack

Critical Paths under _main in BANK0

    _main->_bottle_time
    _main->_operation
    _standby->_printf
    _read_time->_I2C_Master_Read
    _read_time->_I2C_Master_Write
    _operationend->_printf
    _operation->_printf
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   32291
                                             56 BANK0      2     2      0
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    4975
                            _lcdInst
                             _printf
                          _read_time
 ---------------------------------------------------------------------------------
 (2) _read_time                                            1     1      0     711
                                             19 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    4264
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    4264
                                             54 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    4264
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    4975
                                             54 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     598
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          2     0      2    4350
                                             54 BANK0      2     0      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    4688
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    4129
                                             28 BANK0     26    18      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     593
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 21    21      0   72477
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                        i2_read_time
 ---------------------------------------------------------------------------------
 (6) i2_read_time                                          1     1      0     213
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            24    22      2    2303
                                             12 COMRAM    20    18      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69271
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   57987
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   18906
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31474
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8283
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3A      4A       5       57.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C7      34        0.0%
DATA                 0      0      C7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 07 17:16:34 2017

               ___altoft@exp 003F           i2_I2C_Master_Start 2580           i2_I2C_Master_Write 255E  
              ___altoft@sign 0040                           l34 24F6               ?_emergencystop 0001  
               ___awdiv@sign 0006          ___wmul@multiplicand 0092           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
               ___ftadd@exp1 0027                 ___ftadd@exp2 0026                 ___ftadd@sign 0025  
                        l323 01E2                          l282 24DC                          l725 1A5C  
                        l778 1E62                          l788 201A                 __CFG_CPB$OFF 000000  
                        _PEN 007E2A                 __CFG_CPD$OFF 000000                          _SEN 007E28  
                        _PSA 007EAB          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        _exp 0A36                          _log 1084                          _isr 0008  
                        _pow 0DC6                          _ptr 007A                 ___awmod@sign 0095  
                        prod 000FF3                          wreg 000FE8                 ?_bottle_time 00B6  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0012                 ___ftdiv@sign 0017  
               __CFG_WDT$OFF 000000                         l3120 1E12                         l3122 1E1E  
                       l3132 1E54                         l3124 1E24                         l3140 1FD6  
                       l3300 014E                         l4020 1210                         l3142 1FE2  
                       l3310 0192                         l4022 1216                         l3144 1FE8  
                       l3400 039A                         l3304 0162                         l4024 121C  
                       l4016 1204                         l4032 1258                         l3402 03E6  
                       l3410 0446                         l3306 017A                         l4026 1222  
                       l4018 120A                         l4034 1286                         l3148 200C  
                       l3412 044E                         l3332 0236                         l3316 01AA  
                       l3076 2404                         l3252 1F2A                         l4028 1228  
                       l3094 242C                         l3334 023C                         l3270 0046  
                       l3414 045A                         l3520 1B6E                         l3512 1B48  
                       l3408 0434                         l3328 021A                         l3280 0080  
                       l3264 0020                         l3248 1F20                         l3370 02E2  
                       l3346 0272                         l3362 02AE                         l3290 00FE  
                       l3274 0050                         l3258 1F4A                         l3532 1BB4  
                       l3524 1B92                         l3516 1B5C                         l3508 1B38  
                       l3348 0278                         l3364 02C0                         l3268 0034  
                       l3542 19E0                         l3518 1B68                         l3390 0366  
                       l3382 033E                         l3374 031A                         l3294 0124  
                       l3544 19F0                         l3528 1BA0                         l3376 0324  
                       l3296 0130                         l3288 00F8                         l3720 1788  
                       l3704 1C26                         l3554 1A4A                         l3546 19F6  
                       l3394 0380                         l3298 0136                         l3730 17B2  
                       l3388 035A                         l3740 0F3A                         l3724 1792  
                       l3398 0394                         l3752 0F96                         l3770 1020  
                       l3746 0F68                         l3690 1BE2                         l3764 0FF2  
                       l3684 1BC0                         l3758 0FC4                         l3776 1040  
                       l3696 1C04                         ?_exp 0049                         ?_log 0034  
                       ?_isr 0001                         ?_pow 0052                         STR_1 FFE7  
                       STR_2 FF0D                         STR_3 FED5                         STR_4 FEA7  
                       STR_5 FEBE                         STR_6 FF2F                         STR_7 FF1E  
                       STR_8 FF73                         STR_9 FF62                         _T0CS 007EAD  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         u2630 2402  
                       u3455 20B4                         u3907 207E                         _RCEN 007E2B  
                       u3847 1294                         u3857 219A                         i2l34 250A  
                       u3867 21D6                         u3877 2044                         u3887 204C  
                       u3897 2076                         _TMR0 000FD6                         _RSEN 007E29  
                       _main 119E                 ___ftpack@arg 0001                         _keys FDE5  
               ___ftpack@exp 0004                         _time 00BA                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 007E                         exp@x 0049  
                       log@x 0034                         isr@i 0075         ??i2_I2C_Master_Start 0002  
       ??i2_I2C_Master_Write 0004                         pow@x 0052                         pow@y 0055  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000              __end_ofi2_putch 2548                __CFG_MCLRE$ON 000000  
               ___ftmul@cntr 001A                 ___param_bank 000000                 ___ftmul@sign 001B  
                i2_lcdNibble 21E2                ?_bottle_count 0001                 ___fttol@exp1 0036  
                      ??_exp 004C                        ??_log 0037                 ___fttol@lval 0032  
                      ??_isr 0080                        ??_pow 0058             ?_I2C_Master_Init 009D  
           ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
            __end_of___awdiv 1DF4              __end_of___ftadd 0DC6                        STR_10 FF51  
                      STR_11 FF40                        STR_12 FF84                        STR_20 FE61  
                      STR_13 FFA6                        STR_21 FE48                        STR_22 FFC8  
                      STR_14 FF95                        STR_23 FFD8                        STR_15 FFB7  
                      STR_16 FFF5                        STR_24 FEFC                        STR_17 FE90  
                      STR_18 FEEA                        STR_19 FE79              __end_of___awmod 1BBE  
            __end_of___ftdiv 166E              __end_of___ftneg 24A6              __end_of___lldiv 1A6E  
            __end_of___ftmul 1588              ___awdiv@divisor 0003              __end_of___ftsub 22FC  
            __end_of___fttol 1494                        _T0PS0 007EA8                        _T0PS1 007EA9  
                      _T0PS2 007EAA              __end_of___lwdiv 1E6C              __end_of___lwmod 2024  
                      i2l212 099E                        i2l215 099A                        i2l216 085E  
                      i2l233 09FA                        i2l323 05EC                        i2l622 0C88  
                      i2l633 0D38                        i2l642 0D54                        i2l618 0C5E  
                      i2l810 0DFC                        i2l653 163C                        i2l815 0F2A  
                      i2l595 1AFC                        i2l675 2498                        i2l778 2188  
                      i2l788 22B2              ___awdiv@counter 0005                        i2l973 0AE8  
                      i2l974 0C0C                        i2l984 173E                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000                 ___lltoft@exp 0011              __end_of_lcdInst 253C  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 21E2               __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003  
              ___awtoft@sign 000C              __end_of_dpowers FE00                        _floor 166E  
                      _etime 00C1                        _ldexp 18F0                        _frexp 1C50  
                      _errno 0078              __end_of_isdigit 2436                ___ftpack@sign 0005  
                      _putch 251C                        _stime 00C5                  i2_read_time 1F5A  
                      pclath 000FFA                        tablat 000FF5                        pow@yi 005F  
            __end_of_timeset FE0F             __end_ofi2___wmul 2482              __end_of_standby 227A  
                      status 000FD8               __CFG_PBADEN$ON 000000                i2printf@width 001E  
                exp@exponent 004F             __end_ofi2_printf 080C           __size_ofi2___lwdiv 0052  
         __size_ofi2___lwmod 0042                  ldexp@newexp 0037              __initialization 22FC  
                log@exponent 0037           __size_ofi2_lcdInst 000C              ??_emergencystop 00B6  
             ??_bottle_count 00B6                 __end_of_main 12A4                 __end_of_keys FDF6  
                 i2printf@ap 0019                   i2printf@cp 0014           __size_ofi2_isdigit 001E  
                     ??_main 00B8                ___fttol@sign1 0031                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0091           ??_I2C_Master_Start 0091  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0093  
                     ?_floor 0041                       ?_ldexp 0034                       ?_frexp 0001  
           __end_of___altoft 1EE4                       _T08BIT 007EAE             ___awdiv@dividend 0001  
            i2lcdNibble@data 0002             __end_of___awtoft 2372                       ?_putch 0001  
           __end_of___ftpack 1B1C              i2lcdNibble@temp 0001             __end_of___lltoft 2140  
                     _INT1IE 007F83                       _INT1IF 007F80                       i2l3000 169C  
                     i2l3004 16AA                       u203_41 0C2A                       i2l3016 185E  
                     i2l3008 16C4                       i2l3106 20EA                       i2l3018 18DA  
                     i2l3050 197A                       i2l3034 194C                       i2l3026 1908  
                     i2l3108 20F6                       u204_41 0C3E                       i2l3046 196E  
                     i2l3214 0BE2                       i2l4112 09C6                       i2l4040 084C  
                     i2l4122 09E4                       i2l3180 0A4E                       i2l3164 10BE  
                     i2l4060 0894                       i2l3158 109E                       i2l4118 09DC  
                     i2l4062 089E                       i2l4054 0880                       i2l2720 0CC6  
                     i2l2704 0C96                       i2l2800 154E                       i2l3192 0ABA  
                     i2l3440 0E84                       i2l3432 0E22                       i2l4072 093E  
                     i2l4056 0888                       i2l2650 1AB4                       i2l2642 1A7E  
                     i2l2730 0CFC                       i2l3186 0A84                       i2l3426 0E0A  
                     i2l3610 2162                       i2l2740 0D30                       i2l2732 0D04  
                     i2l2812 1D10                       i2l3444 0EA6                       i2l4084 0958  
                     i2l4068 093A                       i2l3470 1D94                       i2l2654 1ACA  
                     i2l2646 1A8C                       i2l2726 0CE8                       i2l2822 1D6C  
                     i2l3606 2156                       i2l3630 2294                       i2l4094 096E  
                     i2l3480 1DB6                       i2l3464 1D84                       i2l2656 1AE8  
                     i2l2648 1A96                       i2l2728 0CF2                       i2l2816 1D40  
                     i2l2832 13CC                       i2l3608 215E                       i2l2658 1AF2  
                     i2l2746 0D70                       i2l2738 0D26                       i2l2682 1E8E  
                     i2l2850 1432                       i2l3618 217E                       i2l3634 22A8  
                     i2l3626 2288                       i2l3476 1DAA                       i2l3492 1DDC  
                     i2l2932 15D8                       i2l2756 0DA0                       i2l2772 14E4  
                     i2l2684 1E9A                       i2l2860 145A                       i2l3628 2290  
                     i2l3900 0634                       i2l3820 1F96                       i2l3478 1DB2  
                     i2l2926 15B0                       i2l2790 1526                       i2l2766 14BC  
                     i2l2862 1466                       i2l2854 1442                       i2l3806 138E  
                     i2l3902 0638                       i2l3496 1DEA                       i2l3488 1DD2  
                     i2l2952 1616                       i2l2864 146C                       i2l2880 1C78  
                     i2l3832 0482                       i2l3816 1F8E                       i2l2698 0C6C  
                     i2l2970 22D2                       i2l2786 1516                       i2l3914 0664  
                     i2l3930 0694                       i2l3842 04A6                       i2l3578 2456  
                     i2l3826 1FB2                       i2l2796 153E                       i2l2868 1482  
                     i2l3596 24BC                       i2l3916 0668                       i2l3932 06A4  
                     i2l3836 0492                       u224_41 14A4                       i2l2982 234E  
                     i2l3950 0700                       i2l3942 06E2                       i2l3862 054C  
                     i2l3838 04A0                       i2l3944 06EA                       i2l3872 0580  
                     i2l3864 0556                       i2l3856 0532                       i2l3848 04D4  
                     i2l3794 12BE                       i2l3970 078E                       i2l3962 0732  
                     i2l3938 06BE                       i2l3874 0592                       i2l3866 055C  
                     i2l3858 0536                       i2l3980 07EA                       i2l3956 0716  
                     i2l3868 056E                       i2l3884 05B8                       u233_41 13B0  
                     i2l3958 071E                       i2l3966 0744                       i2l3878 05A6  
                     i2l3982 07F2                       i2l3968 074A                       i2l3976 07D4  
                     i2l3896 061A                       i2l3978 07E4                       u226_41 14CC  
                     u245_41 1598                       u247_41 15C0                       _TMR0IE 007F95  
                     _TMR0IF 007F92                    ??i2_putch 0003                       _TMR0ON 007EAF  
                     _SSPADD 000FC8                       _TRISC3 007CA3                       _TRISC4 007CA4  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000                       ___ftge 1CE0  
                     ___wmul 23A8                    ??___awdiv 0005                    ??___ftadd 0022  
             __CFG_STVREN$ON 000000                    ??___awmod 0094                    ??___ftdiv 000F  
                  ??___ftneg 0004                    ??___lldiv 0098                    ??___ftmul 0013  
                  ??___ftsub 002E                    ??___fttol 002C                    ??___lwdiv 0094  
                  ??___lwmod 009B                dec_to_hex@num 0063                       clear_0 231A  
                     clear_1 2326             ___awdiv@quotient 0007              ___awmod@divisor 0092  
            ___awmod@counter 0094                    ??_lcdInst 0092                       _printf 0012  
                     floor@i 0044                       floor@x 0041        ___ftmul@f3_as_product 0017  
                  ??_initLCD 0093                    ??_isdigit 0090            __end_ofi2___lwdiv 2192  
               __mediumconst FDE4            __end_ofi2___lwmod 22BC                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                    ??_standby 00B6  
          __end_ofi2_lcdInst 2554            __end_ofi2_isdigit 24C4             __end_ofexp@coeff FE2D  
       __size_of_bottle_time 0036             __end_oflog@coeff FE48                   __accesstop 0080  
    __end_of__initialization 232C                   ___altoft@c 0037                   ___ftadd@f1 001C  
                 ___ftadd@f2 001F                   ___ftge@ff1 0001                   ___ftge@ff2 0004  
               eval_poly@res 0031                ___rparam_used 000001                   ___ftdiv@f1 0009  
                 ___ftdiv@f2 000C                   ___ftdiv@f3 0013                   ___ftneg@f1 0001  
                 ___awtoft@c 0009                   ___ftmul@f1 000D                   ___ftmul@f2 0010  
                 ___ftsub@f1 0028                   ___ftsub@f2 002B                   ___fttol@f1 0028  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                 __pidataBANK0 2588  
                 ___lltoft@c 0009                __end_of_floor 174C                __end_of_ldexp 19B2  
              __end_of_frexp 1CE0                __end_of_putch 252C                  i2printf@idx 0013  
                i2printf@len 0016                  i2printf@val 001B           __size_of_date_time 00D2  
                  ?i2___wmul 0001           __size_of_lcdNibble 0060                  i2putch@data 0003  
                  ?i2_printf 000D                      ??_floor 0044                      ??_ldexp 0039  
                    ??_frexp 0006         __end_of_bottle_count 1084                   _dec_to_hex 12A4  
                    ??_putch 0092                   __pbssBANK0 00BA           __size_of_eval_poly 00D2  
         __size_of_read_time 0076                      ?___ftge 0001                 ?i2_lcdNibble 0001  
                    ?___wmul 0090                    ?___altoft 0037                    ?___awtoft 0009  
                  ?___ftpack 0001                      ?_printf 009C           __size_of_operation 0092  
                  ?___lltoft 0009                   ??i2___wmul 0005                   ??i2_printf 000F  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
               ?i2_read_time 0001            __end_of_date_time 181E                      i2_putch 253C  
          _bottle_count_disp 00C8  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 2084  
__size_ofi2_I2C_Master_Write 000A                ?_operationend 0001                      __Hparam 0000  
                    __Lparam 0000              __size_of___ftge 0090                      ___awdiv 1D70  
                    ___ftadd 0C1A                      ___awmod 1B1C                      ___ftdiv 1588  
                    ___ftneg 2482                      ___lldiv 19B2              __size_of___wmul 0036  
                    ___ftmul 1494                      ___ftsub 22BC                      ___fttol 13A0  
                    ___lwdiv 1DF4                      ___lwmod 1FC2                   _curr_state 00C7  
                 ??___altoft 003B                      __pcinit 22FC                   ??___awtoft 000C  
                 ??___ftpack 0006            __end_of_eval_poly 18F0                      __ramtop 1000  
                    _lcdInst 252C                   ??___lltoft 000D                      __ptext0 119E  
                    __ptext1 2230                      __ptext2 1EE4                      __ptext3 24DE  
                    __ptext4 1BBE                      __ptext5 2192                      __ptext6 24C4  
                    __ptext7 174C                      __ptext8 2554                      __ptext9 2568  
            __size_of_printf 0466               dec_to_hex@temp 006B                      _initLCD 2192  
          __end_of_hexpowers FE08                i2_isdigit$584 0002                      _dpowers FDF6  
               i2read_time@i 0004                 __size_of_exp 01E4                 __size_of_log 011A  
                    _isdigit 240C                 __size_of_isr 0A2E                 __size_of_pow 0172  
           ___awmod@dividend 0090            __end_of_read_time 1F5A     __size_of_I2C_Master_Init 0060  
   __size_of_I2C_Master_Read 002E     __size_of_I2C_Master_Wait 0014                   date_time@i 00B6  
   __size_of_I2C_Master_Stop 0008                      _timeset FE08                      _standby 2230  
                ?_dec_to_hex 0063               __pintcode_body 080C         end_of_initialization 232C  
                    exp@sign 0051                __Lmediumconst FDE4                      int_func 080C  
        i2___wmul@multiplier 0001            __end_of_operation 1C50               _operation_disp 00C3  
             ??_operationend 00B6    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0094                      pow@sign 005E              ___lldiv@counter 009C  
                    printf@c 00B5                      printf@f 009C             I2C_Master_Init@c 009D  
           I2C_Master_Read@a 0091                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE        __end_of_emergencystop 24DE        __size_of_bottle_count 014C  
          i2_I2C_Master_Read 2436            i2_I2C_Master_Wait 250A            i2_I2C_Master_Stop 2578  
          i2___lwdiv@divisor 0003                    i2___lwdiv 2140                    i2___lwmod 227A  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001                   _start_time 007C                    i2_lcdInst 2548  
                ___ftdiv@exp 0016                  printf@width 00B3          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 24A6          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
                ___ftmul@exp 0016                 _bottle_count 0F38               __end_of___ftge 1D70  
             __end_of___wmul 23DE          __size_of_dec_to_hex 00FC         __size_ofi2_lcdNibble 004E  
              i2lcdInst@data 0003                   floor@expon 0047             i2___wmul@product 0005  
             __end_of_printf 0478                 i2printf@flag 001D    __end_ofi2_I2C_Master_Read 245C  
  __end_ofi2_I2C_Master_Wait 251C                 i2printf@prec 0018          start_initialization 22FC  
  __end_ofi2_I2C_Master_Stop 2580                   eval_poly@d 002B                   eval_poly@n 002D  
                 eval_poly@x 0028            __size_ofi2___wmul 0026                   ldexp@value 0034  
                __end_of_exp 0C1A                  __end_of_log 119E                  __end_of_isr 0A36  
                __end_of_pow 0F38                    i2printf@c 0020                    i2printf@f 000D  
              ??_bottle_time 00B8        i2I2C_Master_Read@temp 0003                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 0394                   frexp@value 0001  
          ??_I2C_Master_Init 00A1            ??_I2C_Master_Read 0091            ??_I2C_Master_Wait 0090  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 0091         __size_ofi2_read_time 0068  
                 ?i2_isdigit 0001                     ??___ftge 0007                     ??___wmul 0094  
                __pdataBANK0 00C8             __CFG_LPT1OSC$OFF 000000                     ??_printf 00A4  
          __size_of___altoft 0078                   read_time@i 0093            __size_of___awtoft 0038  
          __size_of___ftpack 00AE            __size_of___lltoft 005C                  __pbssCOMRAM 0076  
       __end_of_operationend 24F6                __pcstackBANK0 0080            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                     ?i2_putch 0001          __end_of_bottle_time 23A8  
           _I2C_Master_Start 2570          i2I2C_Master_Write@d 0002             _I2C_Master_Write 2554  
                  _date_time 174C             ___lwdiv@dividend 0090            __CFG_CCP2MX$PORTC 000000  
                  __pintcode 0008                __pmediumconst FDE4                    _lcdNibble 2024  
                   ?___awdiv 0001                     ?___ftadd 001C                     ?___awmod 0090  
                   ?___ftdiv 0009                     ?___ftneg 0001                     ?___lldiv 0090  
                   ?___ftmul 000D                     ?___ftsub 0028                     ?___fttol 0028  
                   ?___lwdiv 0090                     ?___lwmod 0097                     ?_lcdInst 0001  
           dec_to_hex@hexnum 006F                     ?_initLCD 0001                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012                    _eval_poly 181E  
 __size_ofi2_I2C_Master_Stop 0008                    _hexpowers FE00                     ?_standby 0001  
           ___lwdiv@quotient 0094               __size_of_floor 00DE               __size_of_ldexp 00C2  
             __size_of_frexp 0090                 ??_dec_to_hex 0065                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C                    _read_time 1EE4               __size_of_putch 0010  
 __end_ofi2_I2C_Master_Start 2588   __end_ofi2_I2C_Master_Write 2568                  ??i2_lcdInst 0003  
             ___wmul@product 0094                     _LATDbits 000F8C                  ??i2_isdigit 0001  
                 ?_date_time 0001                     i2u242_40 1CA0                     i2u235_40 13EA  
                   i2u242_48 1CA2                     i2u235_45 13E2                     i2u318_40 0E6E  
                   i2u255_40 16B6                     i2u335_40 2454                     i2u280_40 0AC4  
                   i2u259_40 1928                     i2u259_48 192A                     i2u279_40 0AC2  
                   i2u391_47 09EC                    _operation 1BBE                     i2u392_47 21FA  
                   i2u393_47 2202                     i2u394_47 2222                     i2u395_47 222A  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001           __end_of_dec_to_hex 13A0  
          ___wmul@multiplier 0090                     i2___wmul 245C                lcdNibble@data 0091  
                 printf@flag 00B2                lcdNibble@temp 0090                   printf@prec 00AD  
                 ?_eval_poly 0028                     i2_printf 0478                  _bottle_time 2372  
        I2C_Master_Read@temp 0092                   ?_read_time 0001           dec_to_hex@quotient 0071  
           __size_ofi2_putch 000C                    frexp@eptr 0004                     __Hrparam 0000  
                 ?_operation 0001                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
                dec_to_hex@i 006D              bottle_time@time 00B6             __size_of___awdiv 0084  
           __size_of___ftadd 01AC             __size_of___awmod 00A2             __size_of___ftdiv 00E6  
           __size_of___ftneg 0024        i2___wmul@multiplicand 0003             __size_of___lldiv 00BC  
                   ___altoft 1E6C             __size_of___ftmul 00F4             __size_of___ftsub 0040  
           __size_of___fttol 00F4             __size_of___lwdiv 0078             __size_of___lwmod 0062  
      __size_of_operationend 0018                     ___awtoft 233A                     ___ftpack 1A6E  
                   ___lltoft 20E4                  _isdigit$584 0091           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 0010                     _exp$1023 004C              _I2C_Master_Init 2084  
            _I2C_Master_Read 23DE             __size_of_initLCD 0050              _I2C_Master_Wait 24F6  
                   _isr$1112 0073              _I2C_Master_Stop 2568             __size_of_isdigit 002A  
            ___lwdiv@divisor 0092              ___lwdiv@counter 0096                     __ptext10 2570  
                   __ptext11 23DE                     __ptext20 1DF4                     __ptext12 24F6  
                   __ptext21 252C                     __ptext13 2372                     __ptext30 2580  
                   __ptext22 2024                     __ptext14 0F38                     __ptext31 2436  
                   __ptext23 1B1C                     __ptext15 0012                     __ptext40 12A4  
                   __ptext32 250A                     __ptext24 2084                     __ptext16 251C  
                   __ptext41 0DC6                     __ptext33 0478                     __ptext25 19B2  
                   __ptext17 240C                     __ptext50 181E                     __ptext42 1084  
                   __ptext34 253C                     __ptext18 23A8                     __ptext51 245C  
                   __ptext43 0A36                     __ptext35 24A6                     __ptext27 1F5A  
                   __ptext19 1FC2                     __ptext60 1D70                     __ptext52 1494  
                   __ptext44 18F0                     __ptext36 227A                     __ptext28 255E  
                   __ptext53 22BC                     __ptext45 166E                     __ptext37 2140  
                   __ptext29 2578                     __ptext54 0C1A                     __ptext46 1C50  
                   __ptext38 2548                     __ptext55 2482                     __ptext47 13A0  
                   __ptext39 21E2                     __ptext56 1588                     __ptext48 1CE0  
                   __ptext57 233A                     __ptext49 1E6C                     __ptext58 20E4  
                   __ptext59 1A6E                     _end_time 0076             __size_of_standby 004A  
                   _pow$1021 0058                     _pow$1022 005B       __size_of_emergencystop 001A  
              __size_of_main 0106              _dec_to_hex$1020 0068              _dec_to_hex$1019 0065  
                ??_date_time 00B6                 _operationend 24DE                ??i2_lcdNibble 0001  
                ??_lcdNibble 0090                     int$flags 007E                    printf@idx 00AA  
                  printf@len 00AB                    printf@val 00B0                     exp@coeff FE0F  
                   log@coeff FE2D                    putch@data 0092     __end_of_I2C_Master_Start 2578  
   __end_of_I2C_Master_Write 255E                   _INTCONbits 000FF2                  ??_eval_poly 002F  
                   isdigit@c 0092                ??i2_read_time 0004                  ??_read_time 0093  
                   intlevel2 0000             ___lwmod@dividend 0097             ___lldiv@dividend 0090  
                ??_operation 00B6                     printf@ap 00AE                     printf@cp 00A8  
    __end_of_I2C_Master_Init 20E4      __end_of_I2C_Master_Read 240C      __end_of_I2C_Master_Wait 250A  
    __end_of_I2C_Master_Stop 2570                  lcdInst@data 0092                _emergencystop 24C4  
        __end_ofi2_lcdNibble 2230             ___lldiv@quotient 0098            I2C_Master_Write@d 0091  
            ___lwmod@divisor 0099              ___lwmod@counter 009B          __end_ofi2_read_time 1FC2  



Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 27 18:03:14 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           ; Version 1.40
    83                           ; Generated 01/12/2016 GMT
    84                           ; 
    85                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4620 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataBANK0
   118  002924                     __pidataBANK0:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _bottle_count_disp
   122  002924  FFFF               	dw	65535
   123                           
   124                           	psect	mediumconst
   125  00FDF4                     __pmediumconst:
   126                           	opt stack 0
   127  00FDF4  00                 	db	0
   128  00FDF5                     _keys:
   129                           	opt stack 0
   130  00FDF5  31                 	db	49
   131  00FDF6  32                 	db	50
   132  00FDF7  33                 	db	51
   133  00FDF8  41                 	db	65
   134  00FDF9  34                 	db	52
   135  00FDFA  35                 	db	53
   136  00FDFB  36                 	db	54
   137  00FDFC  42                 	db	66
   138  00FDFD  37                 	db	55
   139  00FDFE  38                 	db	56
   140  00FDFF  39                 	db	57
   141  00FE00  43                 	db	67
   142  00FE01  2A                 	db	42
   143  00FE02  30                 	db	48
   144  00FE03  23                 	db	35
   145  00FE04  44                 	db	68
   146  00FE05  00                 	db	0
   147  00FE06                     __end_of_keys:
   148                           	opt stack 0
   149  00FE06                     _dpowers:
   150                           	opt stack 0
   151  00FE06  0001               	dw	1
   152  00FE08  000A               	dw	10
   153  00FE0A  0064               	dw	100
   154  00FE0C  03E8               	dw	1000
   155  00FE0E  2710               	dw	10000
   156  00FE10                     __end_of_dpowers:
   157                           	opt stack 0
   158  00FE10                     _hexpowers:
   159                           	opt stack 0
   160  00FE10  0001               	dw	1
   161  00FE12  0010               	dw	16
   162  00FE14  0100               	dw	256
   163  00FE16  1000               	dw	4096
   164  00FE18                     __end_of_hexpowers:
   165                           	opt stack 0
   166  00FE18                     _timeset:
   167                           	opt stack 0
   168  00FE18  50                 	db	80
   169  00FE19  35                 	db	53
   170  00FE1A  21                 	db	33
   171  00FE1B  08                 	db	8
   172  00FE1C  05                 	db	5
   173  00FE1D  02                 	db	2
   174  00FE1E  17                 	db	23
   175  00FE1F                     __end_of_timeset:
   176                           	opt stack 0
   177  00FE1F                     exp@coeff:
   178                           	opt stack 0
   179  00FE1F  00                 	db	0
   180  00FE20  80                 	db	128
   181  00FE21  3F                 	db	63
   182  00FE22  72                 	db	114
   183  00FE23  31                 	db	49
   184  00FE24  3F                 	db	63
   185  00FE25  FE                 	db	254
   186  00FE26  75                 	db	117
   187  00FE27  3E                 	db	62
   188  00FE28  58                 	db	88
   189  00FE29  63                 	db	99
   190  00FE2A  3D                 	db	61
   191  00FE2B  95                 	db	149
   192  00FE2C  1D                 	db	29
   193  00FE2D  3C                 	db	60
   194  00FE2E  C5                 	db	197
   195  00FE2F  AE                 	db	174
   196  00FE30  3A                 	db	58
   197  00FE31  79                 	db	121
   198  00FE32  21                 	db	33
   199  00FE33  39                 	db	57
   200  00FE34  94                 	db	148
   201  00FE35  80                 	db	128
   202  00FE36  37                 	db	55
   203  00FE37  93                 	db	147
   204  00FE38  A7                 	db	167
   205  00FE39  35                 	db	53
   206  00FE3A  56                 	db	86
   207  00FE3B  15                 	db	21
   208  00FE3C  34                 	db	52
   209  00FE3D                     __end_ofexp@coeff:
   210                           	opt stack 0
   211  00FE3D                     log@coeff:
   212                           	opt stack 0
   213  00FE3D  00                 	db	0
   214  00FE3E  00                 	db	0
   215  00FE3F  00                 	db	0
   216  00FE40  00                 	db	0
   217  00FE41  80                 	db	128
   218  00FE42  3F                 	db	63
   219  00FE43  F0                 	db	240
   220  00FE44  FF                 	db	255
   221  00FE45  BE                 	db	190
   222  00FE46  E2                 	db	226
   223  00FE47  A9                 	db	169
   224  00FE48  3E                 	db	62
   225  00FE49  83                 	db	131
   226  00FE4A  76                 	db	118
   227  00FE4B  BE                 	db	190
   228  00FE4C  AE                 	db	174
   229  00FE4D  2B                 	db	43
   230  00FE4E  3E                 	db	62
   231  00FE4F  3C                 	db	60
   232  00FE50  C3                 	db	195
   233  00FE51  BD                 	db	189
   234  00FE52  D2                 	db	210
   235  00FE53  13                 	db	19
   236  00FE54  3D                 	db	61
   237  00FE55  78                 	db	120
   238  00FE56  D3                 	db	211
   239  00FE57  BB                 	db	187
   240  00FE58                     __end_oflog@coeff:
   241                           	opt stack 0
   242  0000                     _TMR0	set	4054
   243  0000                     _ADCON0	set	4034
   244  0000                     _ADCON1	set	4033
   245  0000                     _INTCONbits	set	4082
   246  0000                     _LATA	set	3977
   247  0000                     _LATAbits	set	3977
   248  0000                     _LATB	set	3978
   249  0000                     _LATC	set	3979
   250  0000                     _LATCbits	set	3979
   251  0000                     _LATD	set	3980
   252  0000                     _LATDbits	set	3980
   253  0000                     _LATE	set	3981
   254  0000                     _PORTAbits	set	3968
   255  0000                     _PORTB	set	3969
   256  0000                     _SSPADD	set	4040
   257  0000                     _SSPBUF	set	4041
   258  0000                     _SSPCON1	set	4038
   259  0000                     _SSPCON2	set	4037
   260  0000                     _SSPSTAT	set	4039
   261  0000                     _TRISA	set	3986
   262  0000                     _TRISB	set	3987
   263  0000                     _TRISC	set	3988
   264  0000                     _TRISD	set	3989
   265  0000                     _TRISE	set	3990
   266  0000                     _ACKDT	set	32301
   267  0000                     _ACKEN	set	32300
   268  0000                     _GIE	set	32663
   269  0000                     _INT0IE	set	32660
   270  0000                     _INT1IE	set	32643
   271  0000                     _INT1IF	set	32640
   272  0000                     _INT2IE	set	32644
   273  0000                     _PEN	set	32298
   274  0000                     _PSA	set	32427
   275  0000                     _RCEN	set	32299
   276  0000                     _RSEN	set	32297
   277  0000                     _SEN	set	32296
   278  0000                     _T08BIT	set	32430
   279  0000                     _T0CS	set	32429
   280  0000                     _T0PS0	set	32424
   281  0000                     _T0PS1	set	32425
   282  0000                     _T0PS2	set	32426
   283  0000                     _TMR0IE	set	32661
   284  0000                     _TMR0IF	set	32658
   285  0000                     _TMR0ON	set	32431
   286  0000                     _TRISC3	set	31907
   287  0000                     _TRISC4	set	31908
   288  0000                     _nRBPU	set	32655
   289  00FE58                     STR_19:
   290  00FE58  52                 	db	82	;'R'
   291  00FE59  75                 	db	117	;'u'
   292  00FE5A  6E                 	db	110	;'n'
   293  00FE5B  6E                 	db	110	;'n'
   294  00FE5C  69                 	db	105	;'i'
   295  00FE5D  6E                 	db	110	;'n'
   296  00FE5E  67                 	db	103	;'g'
   297  00FE5F  7E                 	db	126
   298  00FE60  7E                 	db	126
   299  00FE61  7E                 	db	126
   300  00FE62  20                 	db	32
   301  00FE63  20                 	db	32
   302  00FE64  20                 	db	32
   303  00FE65  20                 	db	32
   304  00FE66  20                 	db	32
   305  00FE67  20                 	db	32
   306  00FE68  20                 	db	32
   307  00FE69  20                 	db	32
   308  00FE6A  20                 	db	32
   309  00FE6B  20                 	db	32
   310  00FE6C  20                 	db	32
   311  00FE6D  20                 	db	32
   312  00FE6E  20                 	db	32
   313  00FE6F  20                 	db	32
   314  00FE70  00                 	db	0
   315  00FE71                     STR_2:
   316  00FE71  47                 	db	71	;'G'
   317  00FE72  25                 	db	37
   318  00FE73  75                 	db	117	;'u'
   319  00FE74  20                 	db	32
   320  00FE75  42                 	db	66	;'B'
   321  00FE76  25                 	db	37
   322  00FE77  75                 	db	117	;'u'
   323  00FE78  20                 	db	32
   324  00FE79  20                 	db	32
   325  00FE7A  20                 	db	32
   326  00FE7B  20                 	db	32
   327  00FE7C  20                 	db	32
   328  00FE7D  20                 	db	32
   329  00FE7E  20                 	db	32
   330  00FE7F  20                 	db	32
   331  00FE80  20                 	db	32
   332  00FE81  20                 	db	32
   333  00FE82  20                 	db	32
   334  00FE83  20                 	db	32
   335  00FE84  20                 	db	32
   336  00FE85  20                 	db	32
   337  00FE86  20                 	db	32
   338  00FE87  20                 	db	32
   339  00FE88  00                 	db	0
   340  00FE89                     STR_1:
   341  00FE89  43                 	db	67	;'C'
   342  00FE8A  25                 	db	37
   343  00FE8B  75                 	db	117	;'u'
   344  00FE8C  20                 	db	32
   345  00FE8D  52                 	db	82	;'R'
   346  00FE8E  25                 	db	37
   347  00FE8F  75                 	db	117	;'u'
   348  00FE90  20                 	db	32
   349  00FE91  20                 	db	32
   350  00FE92  20                 	db	32
   351  00FE93  20                 	db	32
   352  00FE94  20                 	db	32
   353  00FE95  20                 	db	32
   354  00FE96  20                 	db	32
   355  00FE97  20                 	db	32
   356  00FE98  20                 	db	32
   357  00FE99  20                 	db	32
   358  00FE9A  20                 	db	32
   359  00FE9B  20                 	db	32
   360  00FE9C  20                 	db	32
   361  00FE9D  20                 	db	32
   362  00FE9E  20                 	db	32
   363  00FE9F  20                 	db	32
   364  00FEA0  00                 	db	0
   365  00FEA1                     STR_18:
   366  00FEA1  52                 	db	82	;'R'
   367  00FEA2  75                 	db	117	;'u'
   368  00FEA3  6E                 	db	110	;'n'
   369  00FEA4  6E                 	db	110	;'n'
   370  00FEA5  69                 	db	105	;'i'
   371  00FEA6  6E                 	db	110	;'n'
   372  00FEA7  67                 	db	103	;'g'
   373  00FEA8  7E                 	db	126
   374  00FEA9  7E                 	db	126
   375  00FEAA  20                 	db	32
   376  00FEAB  20                 	db	32
   377  00FEAC  20                 	db	32
   378  00FEAD  20                 	db	32
   379  00FEAE  20                 	db	32
   380  00FEAF  20                 	db	32
   381  00FEB0  20                 	db	32
   382  00FEB1  20                 	db	32
   383  00FEB2  20                 	db	32
   384  00FEB3  20                 	db	32
   385  00FEB4  20                 	db	32
   386  00FEB5  20                 	db	32
   387  00FEB6  20                 	db	32
   388  00FEB7  20                 	db	32
   389  00FEB8  00                 	db	0
   390  00FEB9                     STR_17:
   391  00FEB9  52                 	db	82	;'R'
   392  00FEBA  75                 	db	117	;'u'
   393  00FEBB  6E                 	db	110	;'n'
   394  00FEBC  6E                 	db	110	;'n'
   395  00FEBD  69                 	db	105	;'i'
   396  00FEBE  6E                 	db	110	;'n'
   397  00FEBF  67                 	db	103	;'g'
   398  00FEC0  7E                 	db	126
   399  00FEC1  20                 	db	32
   400  00FEC2  20                 	db	32
   401  00FEC3  20                 	db	32
   402  00FEC4  20                 	db	32
   403  00FEC5  20                 	db	32
   404  00FEC6  20                 	db	32
   405  00FEC7  20                 	db	32
   406  00FEC8  20                 	db	32
   407  00FEC9  20                 	db	32
   408  00FECA  20                 	db	32
   409  00FECB  20                 	db	32
   410  00FECC  20                 	db	32
   411  00FECD  20                 	db	32
   412  00FECE  20                 	db	32
   413  00FECF  00                 	db	0
   414  00FED0                     STR_15:
   415  00FED0  54                 	db	84	;'T'
   416  00FED1  6F                 	db	111	;'o'
   417  00FED2  74                 	db	116	;'t'
   418  00FED3  61                 	db	97	;'a'
   419  00FED4  6C                 	db	108	;'l'
   420  00FED5  20                 	db	32
   421  00FED6  4F                 	db	79	;'O'
   422  00FED7  70                 	db	112	;'p'
   423  00FED8  65                 	db	101	;'e'
   424  00FED9  72                 	db	114	;'r'
   425  00FEDA  61                 	db	97	;'a'
   426  00FEDB  74                 	db	116	;'t'
   427  00FEDC  69                 	db	105	;'i'
   428  00FEDD  6F                 	db	111	;'o'
   429  00FEDE  6E                 	db	110	;'n'
   430  00FEDF  20                 	db	32
   431  00FEE0  20                 	db	32
   432  00FEE1  20                 	db	32
   433  00FEE2  20                 	db	32
   434  00FEE3  20                 	db	32
   435  00FEE4  20                 	db	32
   436  00FEE5  20                 	db	32
   437  00FEE6  00                 	db	0
   438  00FEE7                     STR_6:
   439  00FEE7  44                 	db	68	;'D'
   440  00FEE8  61                 	db	97	;'a'
   441  00FEE9  74                 	db	116	;'t'
   442  00FEEA  65                 	db	101	;'e'
   443  00FEEB  3A                 	db	58	;':'
   444  00FEEC  20                 	db	32
   445  00FEED  25                 	db	37
   446  00FEEE  30                 	db	48	;'0'
   447  00FEEF  32                 	db	50	;'2'
   448  00FEF0  78                 	db	120	;'x'
   449  00FEF1  2F                 	db	47
   450  00FEF2  25                 	db	37
   451  00FEF3  30                 	db	48	;'0'
   452  00FEF4  32                 	db	50	;'2'
   453  00FEF5  78                 	db	120	;'x'
   454  00FEF6  2F                 	db	47
   455  00FEF7  25                 	db	37
   456  00FEF8  30                 	db	48	;'0'
   457  00FEF9  32                 	db	50	;'2'
   458  00FEFA  78                 	db	120	;'x'
   459  00FEFB  20                 	db	32
   460  00FEFC  20                 	db	32
   461  00FEFD  00                 	db	0
   462  00FEFE                     STR_7:
   463  00FEFE  54                 	db	84	;'T'
   464  00FEFF  69                 	db	105	;'i'
   465  00FF00  6D                 	db	109	;'m'
   466  00FF01  65                 	db	101	;'e'
   467  00FF02  3A                 	db	58	;':'
   468  00FF03  20                 	db	32
   469  00FF04  25                 	db	37
   470  00FF05  30                 	db	48	;'0'
   471  00FF06  32                 	db	50	;'2'
   472  00FF07  78                 	db	120	;'x'
   473  00FF08  3A                 	db	58	;':'
   474  00FF09  25                 	db	37
   475  00FF0A  30                 	db	48	;'0'
   476  00FF0B  32                 	db	50	;'2'
   477  00FF0C  78                 	db	120	;'x'
   478  00FF0D  3A                 	db	58	;':'
   479  00FF0E  25                 	db	37
   480  00FF0F  30                 	db	48	;'0'
   481  00FF10  32                 	db	50	;'2'
   482  00FF11  78                 	db	120	;'x'
   483  00FF12  20                 	db	32
   484  00FF13  20                 	db	32
   485  00FF14  00                 	db	0
   486  00FF15                     STR_5:
   487  00FF15  25                 	db	37
   488  00FF16  30                 	db	48	;'0'
   489  00FF17  33                 	db	51	;'3'
   490  00FF18  64                 	db	100	;'d'
   491  00FF19  20                 	db	32
   492  00FF1A  25                 	db	37
   493  00FF1B  30                 	db	48	;'0'
   494  00FF1C  33                 	db	51	;'3'
   495  00FF1D  64                 	db	100	;'d'
   496  00FF1E  20                 	db	32
   497  00FF1F  25                 	db	37
   498  00FF20  30                 	db	48	;'0'
   499  00FF21  33                 	db	51	;'3'
   500  00FF22  64                 	db	100	;'d'
   501  00FF23  20                 	db	32
   502  00FF24  25                 	db	37
   503  00FF25  30                 	db	48	;'0'
   504  00FF26  33                 	db	51	;'3'
   505  00FF27  64                 	db	100	;'d'
   506  00FF28  00                 	db	0
   507  00FF29                     STR_16:
   508  00FF29  54                 	db	84	;'T'
   509  00FF2A  69                 	db	105	;'i'
   510  00FF2B  6D                 	db	109	;'m'
   511  00FF2C  65                 	db	101	;'e'
   512  00FF2D  3A                 	db	58	;':'
   513  00FF2E  20                 	db	32
   514  00FF2F  25                 	db	37
   515  00FF30  64                 	db	100	;'d'
   516  00FF31  20                 	db	32
   517  00FF32  73                 	db	115	;'s'
   518  00FF33  20                 	db	32
   519  00FF34  20                 	db	32
   520  00FF35  20                 	db	32
   521  00FF36  20                 	db	32
   522  00FF37  20                 	db	32
   523  00FF38  20                 	db	32
   524  00FF39  20                 	db	32
   525  00FF3A  00                 	db	0
   526  00FF3B                     STR_22:
   527  00FF3B  30                 	db	48	;'0'
   528  00FF3C  31                 	db	49	;'1'
   529  00FF3D  32                 	db	50	;'2'
   530  00FF3E  33                 	db	51	;'3'
   531  00FF3F  34                 	db	52	;'4'
   532  00FF40  35                 	db	53	;'5'
   533  00FF41  36                 	db	54	;'6'
   534  00FF42  37                 	db	55	;'7'
   535  00FF43  38                 	db	56	;'8'
   536  00FF44  39                 	db	57	;'9'
   537  00FF45  61                 	db	97	;'a'
   538  00FF46  62                 	db	98	;'b'
   539  00FF47  63                 	db	99	;'c'
   540  00FF48  64                 	db	100	;'d'
   541  00FF49  65                 	db	101	;'e'
   542  00FF4A  66                 	db	102	;'f'
   543  00FF4B  00                 	db	0
   544  00FF4C                     STR_9:
   545  00FF4C  54                 	db	84	;'T'
   546  00FF4D  6F                 	db	111	;'o'
   547  00FF4E  74                 	db	116	;'t'
   548  00FF4F  61                 	db	97	;'a'
   549  00FF50  6C                 	db	108	;'l'
   550  00FF51  3A                 	db	58	;':'
   551  00FF52  20                 	db	32
   552  00FF53  25                 	db	37
   553  00FF54  64                 	db	100	;'d'
   554  00FF55  20                 	db	32
   555  00FF56  20                 	db	32
   556  00FF57  20                 	db	32
   557  00FF58  20                 	db	32
   558  00FF59  20                 	db	32
   559  00FF5A  20                 	db	32
   560  00FF5B  20                 	db	32
   561  00FF5C  00                 	db	0
   562  00FF5D                     STR_8:
   563  00FF5D  42                 	db	66	;'B'
   564  00FF5E  6F                 	db	111	;'o'
   565  00FF5F  74                 	db	116	;'t'
   566  00FF60  74                 	db	116	;'t'
   567  00FF61  6C                 	db	108	;'l'
   568  00FF62  65                 	db	101	;'e'
   569  00FF63  20                 	db	32
   570  00FF64  43                 	db	67	;'C'
   571  00FF65  6F                 	db	111	;'o'
   572  00FF66  75                 	db	117	;'u'
   573  00FF67  6E                 	db	110	;'n'
   574  00FF68  74                 	db	116	;'t'
   575  00FF69  20                 	db	32
   576  00FF6A  20                 	db	32
   577  00FF6B  20                 	db	32
   578  00FF6C  20                 	db	32
   579  00FF6D  00                 	db	0
   580  00FF6E                     STR_10:
   581  00FF6E  59                 	db	89	;'Y'
   582  00FF6F  4F                 	db	79	;'O'
   583  00FF70  50                 	db	80	;'P'
   584  00FF71  20                 	db	32
   585  00FF72  57                 	db	87	;'W'
   586  00FF73  2F                 	db	47
   587  00FF74  20                 	db	32
   588  00FF75  43                 	db	67	;'C'
   589  00FF76  41                 	db	65	;'A'
   590  00FF77  50                 	db	80	;'P'
   591  00FF78  3A                 	db	58	;':'
   592  00FF79  20                 	db	32
   593  00FF7A  25                 	db	37
   594  00FF7B  64                 	db	100	;'d'
   595  00FF7C  20                 	db	32
   596  00FF7D  20                 	db	32
   597  00FF7E  00                 	db	0
   598  00FF7F                     STR_11:
   599  00FF7F  59                 	db	89	;'Y'
   600  00FF80  4F                 	db	79	;'O'
   601  00FF81  50                 	db	80	;'P'
   602  00FF82  20                 	db	32
   603  00FF83  4E                 	db	78	;'N'
   604  00FF84  4F                 	db	79	;'O'
   605  00FF85  20                 	db	32
   606  00FF86  43                 	db	67	;'C'
   607  00FF87  41                 	db	65	;'A'
   608  00FF88  50                 	db	80	;'P'
   609  00FF89  3A                 	db	58	;':'
   610  00FF8A  20                 	db	32
   611  00FF8B  25                 	db	37
   612  00FF8C  64                 	db	100	;'d'
   613  00FF8D  20                 	db	32
   614  00FF8E  20                 	db	32
   615  00FF8F  00                 	db	0
   616  00FF90                     STR_12:
   617  00FF90  45                 	db	69	;'E'
   618  00FF91  53                 	db	83	;'S'
   619  00FF92  4B                 	db	75	;'K'
   620  00FF93  41                 	db	65	;'A'
   621  00FF94  20                 	db	32
   622  00FF95  57                 	db	87	;'W'
   623  00FF96  2F                 	db	47
   624  00FF97  20                 	db	32
   625  00FF98  43                 	db	67	;'C'
   626  00FF99  41                 	db	65	;'A'
   627  00FF9A  50                 	db	80	;'P'
   628  00FF9B  3A                 	db	58	;':'
   629  00FF9C  20                 	db	32
   630  00FF9D  25                 	db	37
   631  00FF9E  64                 	db	100	;'d'
   632  00FF9F  20                 	db	32
   633  00FFA0  00                 	db	0
   634  00FFA1                     STR_13:
   635  00FFA1  45                 	db	69	;'E'
   636  00FFA2  53                 	db	83	;'S'
   637  00FFA3  4B                 	db	75	;'K'
   638  00FFA4  41                 	db	65	;'A'
   639  00FFA5  20                 	db	32
   640  00FFA6  4E                 	db	78	;'N'
   641  00FFA7  4F                 	db	79	;'O'
   642  00FFA8  20                 	db	32
   643  00FFA9  43                 	db	67	;'C'
   644  00FFAA  41                 	db	65	;'A'
   645  00FFAB  50                 	db	80	;'P'
   646  00FFAC  3A                 	db	58	;':'
   647  00FFAD  20                 	db	32
   648  00FFAE  25                 	db	37
   649  00FFAF  64                 	db	100	;'d'
   650  00FFB0  20                 	db	32
   651  00FFB1  00                 	db	0
   652  00FFB2                     STR_4:
   653  00FFB2  25                 	db	37
   654  00FFB3  30                 	db	48	;'0'
   655  00FFB4  33                 	db	51	;'3'
   656  00FFB5  64                 	db	100	;'d'
   657  00FFB6  2C                 	db	44
   658  00FFB7  20                 	db	32
   659  00FFB8  25                 	db	37
   660  00FFB9  30                 	db	48	;'0'
   661  00FFBA  33                 	db	51	;'3'
   662  00FFBB  64                 	db	100	;'d'
   663  00FFBC  2C                 	db	44
   664  00FFBD  20                 	db	32
   665  00FFBE  25                 	db	37
   666  00FFBF  30                 	db	48	;'0'
   667  00FFC0  33                 	db	51	;'3'
   668  00FFC1  64                 	db	100	;'d'
   669  00FFC2  00                 	db	0
   670  00FFC3                     STR_20:
   671  00FFC3  4F                 	db	79	;'O'
   672  00FFC4  70                 	db	112	;'p'
   673  00FFC5  65                 	db	101	;'e'
   674  00FFC6  72                 	db	114	;'r'
   675  00FFC7  61                 	db	97	;'a'
   676  00FFC8  74                 	db	116	;'t'
   677  00FFC9  69                 	db	105	;'i'
   678  00FFCA  6F                 	db	111	;'o'
   679  00FFCB  6E                 	db	110	;'n'
   680  00FFCC  20                 	db	32
   681  00FFCD  44                 	db	68	;'D'
   682  00FFCE  6F                 	db	111	;'o'
   683  00FFCF  6E                 	db	110	;'n'
   684  00FFD0  65                 	db	101	;'e'
   685  00FFD1  21                 	db	33
   686  00FFD2  00                 	db	0
   687  00FFD3                     STR_14:
   688  00FFD3  45                 	db	69	;'E'
   689  00FFD4  52                 	db	82	;'R'
   690  00FFD5  52                 	db	82	;'R'
   691  00FFD6  3A                 	db	58	;':'
   692  00FFD7  20                 	db	32
   693  00FFD8  42                 	db	66	;'B'
   694  00FFD9  41                 	db	65	;'A'
   695  00FFDA  44                 	db	68	;'D'
   696  00FFDB  20                 	db	32
   697  00FFDC  42                 	db	66	;'B'
   698  00FFDD  54                 	db	84	;'T'
   699  00FFDE  4C                 	db	76	;'L'
   700  00FFDF  43                 	db	67	;'C'
   701  00FFE0  4E                 	db	78	;'N'
   702  00FFE1  54                 	db	84	;'T'
   703  00FFE2  00                 	db	0
   704  00FFE3                     STR_21:
   705  00FFE3  45                 	db	69	;'E'
   706  00FFE4  4D                 	db	77	;'M'
   707  00FFE5  45                 	db	69	;'E'
   708  00FFE6  52                 	db	82	;'R'
   709  00FFE7  47                 	db	71	;'G'
   710  00FFE8  45                 	db	69	;'E'
   711  00FFE9  4E                 	db	78	;'N'
   712  00FFEA  43                 	db	67	;'C'
   713  00FFEB  59                 	db	89	;'Y'
   714  00FFEC  20                 	db	32
   715  00FFED  53                 	db	83	;'S'
   716  00FFEE  54                 	db	84	;'T'
   717  00FFEF  4F                 	db	79	;'O'
   718  00FFF0  50                 	db	80	;'P'
   719  00FFF1  00                 	db	0
   720  00FFF2                     STR_3:
   721  00FFF2  45                 	db	69	;'E'
   722  00FFF3  52                 	db	82	;'R'
   723  00FFF4  52                 	db	82	;'R'
   724  00FFF5  3A                 	db	58	;':'
   725  00FFF6  20                 	db	32
   726  00FFF7  42                 	db	66	;'B'
   727  00FFF8  41                 	db	65	;'A'
   728  00FFF9  44                 	db	68	;'D'
   729  00FFFA  20                 	db	32
   730  00FFFB  49                 	db	73	;'I'
   731  00FFFC  53                 	db	83	;'S'
   732  00FFFD  52                 	db	82	;'R'
   733  00FFFE  00                 	db	0
   734                           
   735                           ; #config settings
   736  00FFFF  00                 	db	0	; dummy byte at the end
   737  0000                     
   738                           	psect	cinit
   739  002690                     __pcinit:
   740                           	opt stack 0
   741  002690                     start_initialization:
   742                           	opt stack 0
   743  002690                     __initialization:
   744                           	opt stack 0
   745                           
   746                           ; Initialize objects allocated to BANK0 (2 bytes)
   747                           ; load TBLPTR registers with __pidataBANK0
   748  002690  0E24               	movlw	low __pidataBANK0
   749  002692  6EF6               	movwf	tblptrl,c
   750  002694  0E29               	movlw	high __pidataBANK0
   751  002696  6EF7               	movwf	tblptrh,c
   752  002698  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   753  00269A  6EF8               	movwf	tblptru,c
   754  00269C  0009               	tblrd		*+	;fetch initializer
   755  00269E  CFF5 F0DF          	movff	tablat,__pdataBANK0
   756  0026A2  0009               	tblrd		*+	;fetch initializer
   757  0026A4  CFF5 F0E0          	movff	tablat,__pdataBANK0+1
   758                           
   759                           ; Clear objects allocated to BANK0 (40 bytes)
   760  0026A8  EE00  F0B7         	lfsr	0,__pbssBANK0
   761  0026AC  0E28               	movlw	40
   762  0026AE                     clear_0:
   763  0026AE  6AEE               	clrf	postinc0,c
   764  0026B0  06E8               	decf	wreg,f,c
   765  0026B2  E1FD               	bnz	clear_0
   766                           
   767                           ; Clear objects allocated to COMRAM (8 bytes)
   768  0026B4  EE00  F076         	lfsr	0,__pbssCOMRAM
   769  0026B8  0E08               	movlw	8
   770  0026BA                     clear_1:
   771  0026BA  6AEE               	clrf	postinc0,c
   772  0026BC  06E8               	decf	wreg,f,c
   773  0026BE  E1FD               	bnz	clear_1
   774  0026C0                     end_of_initialization:
   775                           	opt stack 0
   776  0026C0                     __end_of__initialization:
   777                           	opt stack 0
   778  0026C0  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   779  0026C2  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   780  0026C4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   781  0026C6  6EF8               	movwf	tblptru,c
   782  0026C8  0100               	movlb	0
   783  0026CA  EF3A  F00C         	goto	_main	;jump to C main() function
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           
   791                           	psect	bssCOMRAM
   792  000076                     __pbssCOMRAM:
   793                           	opt stack 0
   794  000076                     _end_time:
   795                           	opt stack 0
   796  000076                     	ds	2
   797  000078                     _etime:
   798                           	opt stack 0
   799  000078                     	ds	2
   800  00007A                     _start_time:
   801                           	opt stack 0
   802  00007A                     	ds	2
   803  00007C                     _stime:
   804                           	opt stack 0
   805  00007C                     	ds	2
   806                           tblptru	equ	0xFF8
   807                           tblptrh	equ	0xFF7
   808                           tblptrl	equ	0xFF6
   809                           tablat	equ	0xFF5
   810                           postinc0	equ	0xFEE
   811                           wreg	equ	0xFE8
   812                           
   813                           	psect	bssBANK0
   814  0000B7                     __pbssBANK0:
   815                           	opt stack 0
   816  0000B7                     _bottle_count_array:
   817                           	opt stack 0
   818  0000B7                     	ds	10
   819  0000C1                     _color:
   820                           	opt stack 0
   821  0000C1                     	ds	8
   822  0000C9                     _time:
   823                           	opt stack 0
   824  0000C9                     	ds	7
   825  0000D0                     _testint:
   826                           	opt stack 0
   827  0000D0                     	ds	6
   828  0000D6                     _errno:
   829                           	opt stack 0
   830  0000D6                     	ds	2
   831  0000D8                     _operation_disp:
   832                           	opt stack 0
   833  0000D8                     	ds	2
   834  0000DA                     _operation_time:
   835                           	opt stack 0
   836  0000DA                     	ds	2
   837  0000DC                     _testflag:
   838                           	opt stack 0
   839  0000DC                     	ds	2
   840  0000DE                     _curr_state:
   841                           	opt stack 0
   842  0000DE                     	ds	1
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           
   850                           	psect	dataBANK0
   851  0000DF                     __pdataBANK0:
   852                           	opt stack 0
   853  0000DF                     _bottle_count_disp:
   854                           	opt stack 0
   855  0000DF                     	ds	2
   856                           tblptru	equ	0xFF8
   857                           tblptrh	equ	0xFF7
   858                           tblptrl	equ	0xFF6
   859                           tablat	equ	0xFF5
   860                           postinc0	equ	0xFEE
   861                           wreg	equ	0xFE8
   862                           
   863                           	psect	cstackBANK0
   864  000080                     __pcstackBANK0:
   865                           	opt stack 0
   866  000080                     ??_isr:
   867                           
   868                           ; 1 bytes @ 0x0
   869  000080                     	ds	16
   870  000090                     ??_isdigit:
   871  000090                     ??_I2C_Master_Wait:
   872  000090                     ?___wmul:
   873                           	opt stack 0
   874  000090                     ?___awmod:
   875                           	opt stack 0
   876  000090                     ?___lwdiv:
   877                           	opt stack 0
   878  000090                     ?___lldiv:
   879                           	opt stack 0
   880  000090                     lcdNibble@temp:
   881                           	opt stack 0
   882  000090                     ___wmul@multiplier:
   883                           	opt stack 0
   884  000090                     ___awmod@dividend:
   885                           	opt stack 0
   886  000090                     ___lwdiv@dividend:
   887                           	opt stack 0
   888  000090                     ___lldiv@dividend:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0x10
   892  000090                     	ds	1
   893  000091                     I2C_Master_Read@a:
   894                           	opt stack 0
   895  000091                     lcdNibble@data:
   896                           	opt stack 0
   897  000091                     _isdigit$791:
   898                           	opt stack 0
   899  000091                     I2C_Master_Write@d:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x11
   903  000091                     	ds	1
   904  000092                     I2C_Master_Read@temp:
   905                           	opt stack 0
   906  000092                     lcdInst@data:
   907                           	opt stack 0
   908  000092                     putch@data:
   909                           	opt stack 0
   910  000092                     isdigit@c:
   911                           	opt stack 0
   912  000092                     ___wmul@multiplicand:
   913                           	opt stack 0
   914  000092                     ___awmod@divisor:
   915                           	opt stack 0
   916  000092                     ___lwdiv@divisor:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x12
   920  000092                     	ds	1
   921  000093                     ??_read_colorsensor:
   922  000093                     ??_I2C_ColorSens_Init:
   923  000093                     ??_initLCD:
   924                           
   925                           ; 1 bytes @ 0x13
   926  000093                     	ds	1
   927  000094                     ___awmod@counter:
   928                           	opt stack 0
   929  000094                     ___wmul@product:
   930                           	opt stack 0
   931  000094                     ___lwdiv@quotient:
   932                           	opt stack 0
   933  000094                     ___lldiv@divisor:
   934                           	opt stack 0
   935                           
   936                           ; 4 bytes @ 0x14
   937  000094                     	ds	1
   938  000095                     ___awmod@sign:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x15
   942  000095                     	ds	1
   943  000096                     ___lwdiv@counter:
   944                           	opt stack 0
   945                           
   946                           ; 1 bytes @ 0x16
   947  000096                     	ds	1
   948  000097                     ?___lwmod:
   949                           	opt stack 0
   950  000097                     ___lwmod@dividend:
   951                           	opt stack 0
   952  000097                     read_colorsensor@color_low:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x17
   956  000097                     	ds	1
   957  000098                     ___lldiv@quotient:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x18
   961  000098                     	ds	1
   962  000099                     ___lwmod@divisor:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x19
   966  000099                     	ds	2
   967  00009B                     ___lwmod@counter:
   968                           	opt stack 0
   969  00009B                     read_colorsensor@color_high:
   970                           	opt stack 0
   971                           
   972                           ; 4 bytes @ 0x1B
   973  00009B                     	ds	1
   974  00009C                     ?_printf:
   975                           	opt stack 0
   976  00009C                     ___lldiv@counter:
   977                           	opt stack 0
   978  00009C                     printf@f:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x1C
   982  00009C                     	ds	1
   983  00009D                     I2C_Master_Init@c:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x1D
   987  00009D                     	ds	2
   988  00009F                     read_colorsensor@i:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x1F
   992  00009F                     	ds	2
   993  0000A1                     ??_I2C_Master_Init:
   994                           
   995                           ; 1 bytes @ 0x21
   996  0000A1                     	ds	5
   997  0000A6                     ??_printf:
   998                           
   999                           ; 1 bytes @ 0x26
  1000  0000A6                     	ds	4
  1001  0000AA                     printf@idx:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x2A
  1005  0000AA                     	ds	1
  1006  0000AB                     printf@ap:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x2B
  1010  0000AB                     	ds	2
  1011  0000AD                     printf@prec:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x2D
  1015  0000AD                     	ds	1
  1016  0000AE                     printf@val:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x2E
  1020  0000AE                     	ds	2
  1021  0000B0                     printf@flag:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x30
  1025  0000B0                     	ds	1
  1026  0000B1                     printf@width:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x31
  1030  0000B1                     	ds	2
  1031  0000B3                     printf@c:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x33
  1035  0000B3                     	ds	1
  1036  0000B4                     ??_operation:
  1037  0000B4                     date_time@i:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x34
  1041  0000B4                     	ds	2
  1042  0000B6                     ??_main:
  1043                           
  1044                           ; 1 bytes @ 0x36
  1045  0000B6                     	ds	1
  1046                           tblptru	equ	0xFF8
  1047                           tblptrh	equ	0xFF7
  1048                           tblptrl	equ	0xFF6
  1049                           tablat	equ	0xFF5
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           
  1053                           	psect	cstackCOMRAM
  1054  000001                     __pcstackCOMRAM:
  1055                           	opt stack 0
  1056  000001                     ??i2_I2C_Master_Wait:
  1057  000001                     ??i2_isdigit:
  1058  000001                     ?___awdiv:
  1059                           	opt stack 0
  1060  000001                     ?i2___wmul:
  1061                           	opt stack 0
  1062  000001                     ?i2___lwdiv:
  1063                           	opt stack 0
  1064  000001                     ?___ftpack:
  1065                           	opt stack 0
  1066  000001                     ?_frexp:
  1067                           	opt stack 0
  1068  000001                     ?___ftneg:
  1069                           	opt stack 0
  1070  000001                     i2lcdNibble@temp:
  1071                           	opt stack 0
  1072  000001                     servo_rotate0@degree:
  1073                           	opt stack 0
  1074  000001                     ___awdiv@dividend:
  1075                           	opt stack 0
  1076  000001                     i2___wmul@multiplier:
  1077                           	opt stack 0
  1078  000001                     i2___lwdiv@dividend:
  1079                           	opt stack 0
  1080  000001                     ___ftpack@arg:
  1081                           	opt stack 0
  1082  000001                     ___ftge@ff1:
  1083                           	opt stack 0
  1084  000001                     ___ftneg@f1:
  1085                           	opt stack 0
  1086  000001                     frexp@value:
  1087                           	opt stack 0
  1088                           
  1089                           ; 3 bytes @ 0x0
  1090  000001                     	ds	1
  1091  000002                     i2I2C_Master_Read@a:
  1092                           	opt stack 0
  1093  000002                     i2lcdNibble@data:
  1094                           	opt stack 0
  1095  000002                     i2_isdigit$791:
  1096                           	opt stack 0
  1097  000002                     i2I2C_Master_Write@d:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x1
  1101  000002                     	ds	1
  1102  000003                     ??_servo_rotate0:
  1103  000003                     i2I2C_Master_Read@temp:
  1104                           	opt stack 0
  1105  000003                     i2lcdInst@data:
  1106                           	opt stack 0
  1107  000003                     i2putch@data:
  1108                           	opt stack 0
  1109  000003                     i2isdigit@c:
  1110                           	opt stack 0
  1111  000003                     ___awdiv@divisor:
  1112                           	opt stack 0
  1113  000003                     i2___wmul@multiplicand:
  1114                           	opt stack 0
  1115  000003                     i2___lwdiv@divisor:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x2
  1119  000003                     	ds	1
  1120  000004                     ??i2_read_colorsensor:
  1121  000004                     read_time@i:
  1122                           	opt stack 0
  1123  000004                     ___ftpack@exp:
  1124                           	opt stack 0
  1125  000004                     frexp@eptr:
  1126                           	opt stack 0
  1127  000004                     ___ftge@ff2:
  1128                           	opt stack 0
  1129                           
  1130                           ; 3 bytes @ 0x3
  1131  000004                     	ds	1
  1132  000005                     ___awdiv@counter:
  1133                           	opt stack 0
  1134  000005                     ___ftpack@sign:
  1135                           	opt stack 0
  1136  000005                     servo_rotate0@duty:
  1137                           	opt stack 0
  1138  000005                     i2___wmul@product:
  1139                           	opt stack 0
  1140  000005                     i2___lwdiv@quotient:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x4
  1144  000005                     	ds	1
  1145  000006                     ??___ftpack:
  1146  000006                     ??_frexp:
  1147  000006                     ___awdiv@sign:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x5
  1151  000006                     	ds	1
  1152  000007                     ??___ftge:
  1153  000007                     i2___lwdiv@counter:
  1154                           	opt stack 0
  1155  000007                     servo_rotate0@i:
  1156                           	opt stack 0
  1157  000007                     ___awdiv@quotient:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x6
  1161  000007                     	ds	1
  1162  000008                     ?i2___lwmod:
  1163                           	opt stack 0
  1164  000008                     i2___lwmod@dividend:
  1165                           	opt stack 0
  1166  000008                     i2read_colorsensor@color_low:
  1167                           	opt stack 0
  1168                           
  1169                           ; 4 bytes @ 0x7
  1170  000008                     	ds	1
  1171  000009                     ?___ftdiv:
  1172                           	opt stack 0
  1173  000009                     ?___awtoft:
  1174                           	opt stack 0
  1175  000009                     ?___lltoft:
  1176                           	opt stack 0
  1177  000009                     servo_rotate0@j:
  1178                           	opt stack 0
  1179  000009                     ___awtoft@c:
  1180                           	opt stack 0
  1181  000009                     ___ftdiv@f1:
  1182                           	opt stack 0
  1183  000009                     ___lltoft@c:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x8
  1187  000009                     	ds	1
  1188  00000A                     i2___lwmod@divisor:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x9
  1192  00000A                     	ds	2
  1193  00000C                     ___awtoft@sign:
  1194                           	opt stack 0
  1195  00000C                     i2___lwmod@counter:
  1196                           	opt stack 0
  1197  00000C                     ___ftdiv@f2:
  1198                           	opt stack 0
  1199  00000C                     i2read_colorsensor@color_high:
  1200                           	opt stack 0
  1201                           
  1202                           ; 4 bytes @ 0xB
  1203  00000C                     	ds	1
  1204  00000D                     ??___lltoft:
  1205  00000D                     ?i2_printf:
  1206                           	opt stack 0
  1207  00000D                     ?___ftmul:
  1208                           	opt stack 0
  1209  00000D                     i2printf@f:
  1210                           	opt stack 0
  1211  00000D                     ___ftmul@f1:
  1212                           	opt stack 0
  1213                           
  1214                           ; 3 bytes @ 0xC
  1215  00000D                     	ds	2
  1216  00000F                     ??___ftdiv:
  1217                           
  1218                           ; 1 bytes @ 0xE
  1219  00000F                     	ds	1
  1220  000010                     i2read_colorsensor@i:
  1221                           	opt stack 0
  1222  000010                     ___ftmul@f2:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0xF
  1226  000010                     	ds	1
  1227  000011                     ___lltoft@exp:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x10
  1231  000011                     	ds	1
  1232  000012                     ___ftdiv@cntr:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x11
  1236  000012                     	ds	1
  1237  000013                     ??___ftmul:
  1238  000013                     ??i2_printf:
  1239  000013                     ___ftdiv@f3:
  1240                           	opt stack 0
  1241                           
  1242                           ; 3 bytes @ 0x12
  1243  000013                     	ds	3
  1244  000016                     ___ftdiv@exp:
  1245                           	opt stack 0
  1246  000016                     ___ftmul@exp:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x15
  1250  000016                     	ds	1
  1251  000017                     ___ftdiv@sign:
  1252                           	opt stack 0
  1253  000017                     i2printf@idx:
  1254                           	opt stack 0
  1255  000017                     ___ftmul@f3_as_product:
  1256                           	opt stack 0
  1257                           
  1258                           ; 3 bytes @ 0x16
  1259  000017                     	ds	1
  1260  000018                     i2printf@ap:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x17
  1264  000018                     	ds	2
  1265  00001A                     ___ftmul@cntr:
  1266                           	opt stack 0
  1267  00001A                     i2printf@prec:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x19
  1271  00001A                     	ds	1
  1272  00001B                     ___ftmul@sign:
  1273                           	opt stack 0
  1274  00001B                     i2printf@val:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x1A
  1278  00001B                     	ds	1
  1279  00001C                     ?___ftadd:
  1280                           	opt stack 0
  1281  00001C                     ___ftadd@f1:
  1282                           	opt stack 0
  1283                           
  1284                           ; 3 bytes @ 0x1B
  1285  00001C                     	ds	1
  1286  00001D                     i2printf@flag:
  1287                           	opt stack 0
  1288                           
  1289                           ; 1 bytes @ 0x1C
  1290  00001D                     	ds	1
  1291  00001E                     i2printf@width:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x1D
  1295  00001E                     	ds	1
  1296  00001F                     ___ftadd@f2:
  1297                           	opt stack 0
  1298                           
  1299                           ; 3 bytes @ 0x1E
  1300  00001F                     	ds	1
  1301  000020                     i2printf@c:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0x1F
  1305  000020                     	ds	2
  1306  000022                     ??___ftadd:
  1307                           
  1308                           ; 1 bytes @ 0x21
  1309  000022                     	ds	3
  1310  000025                     ___ftadd@sign:
  1311                           	opt stack 0
  1312                           
  1313                           ; 1 bytes @ 0x24
  1314  000025                     	ds	1
  1315  000026                     ___ftadd@exp2:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x25
  1319  000026                     	ds	1
  1320  000027                     ___ftadd@exp1:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0x26
  1324  000027                     	ds	1
  1325  000028                     ?___ftsub:
  1326                           	opt stack 0
  1327  000028                     ?_eval_poly:
  1328                           	opt stack 0
  1329  000028                     ?___fttol:
  1330                           	opt stack 0
  1331  000028                     ___ftsub@f1:
  1332                           	opt stack 0
  1333  000028                     ___fttol@f1:
  1334                           	opt stack 0
  1335  000028                     eval_poly@x:
  1336                           	opt stack 0
  1337                           
  1338                           ; 3 bytes @ 0x27
  1339  000028                     	ds	3
  1340  00002B                     eval_poly@d:
  1341                           	opt stack 0
  1342  00002B                     ___ftsub@f2:
  1343                           	opt stack 0
  1344                           
  1345                           ; 3 bytes @ 0x2A
  1346  00002B                     	ds	1
  1347  00002C                     ??___fttol:
  1348                           
  1349                           ; 1 bytes @ 0x2B
  1350  00002C                     	ds	1
  1351  00002D                     eval_poly@n:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x2C
  1355  00002D                     	ds	1
  1356  00002E                     
  1357                           ; 1 bytes @ 0x2D
  1358  00002E                     	ds	1
  1359  00002F                     ??_eval_poly:
  1360                           
  1361                           ; 1 bytes @ 0x2E
  1362  00002F                     	ds	2
  1363  000031                     ___fttol@sign1:
  1364                           	opt stack 0
  1365  000031                     eval_poly@res:
  1366                           	opt stack 0
  1367                           
  1368                           ; 3 bytes @ 0x30
  1369  000031                     	ds	1
  1370  000032                     ___fttol@lval:
  1371                           	opt stack 0
  1372                           
  1373                           ; 4 bytes @ 0x31
  1374  000032                     	ds	2
  1375  000034                     ?_log:
  1376                           	opt stack 0
  1377  000034                     ?_ldexp:
  1378                           	opt stack 0
  1379  000034                     ldexp@value:
  1380                           	opt stack 0
  1381  000034                     log@x:
  1382                           	opt stack 0
  1383                           
  1384                           ; 3 bytes @ 0x33
  1385  000034                     	ds	2
  1386  000036                     ___fttol@exp1:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x35
  1390  000036                     	ds	1
  1391  000037                     ?___altoft:
  1392                           	opt stack 0
  1393  000037                     ldexp@newexp:
  1394                           	opt stack 0
  1395  000037                     log@exponent:
  1396                           	opt stack 0
  1397  000037                     ___altoft@c:
  1398                           	opt stack 0
  1399                           
  1400                           ; 4 bytes @ 0x36
  1401  000037                     	ds	2
  1402  000039                     ??_ldexp:
  1403                           
  1404                           ; 1 bytes @ 0x38
  1405  000039                     	ds	2
  1406  00003B                     ??___altoft:
  1407                           
  1408                           ; 1 bytes @ 0x3A
  1409  00003B                     	ds	4
  1410  00003F                     ___altoft@exp:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x3E
  1414  00003F                     	ds	1
  1415  000040                     ___altoft@sign:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x3F
  1419  000040                     	ds	1
  1420  000041                     ?_floor:
  1421                           	opt stack 0
  1422  000041                     floor@x:
  1423                           	opt stack 0
  1424                           
  1425                           ; 3 bytes @ 0x40
  1426  000041                     	ds	3
  1427  000044                     floor@i:
  1428                           	opt stack 0
  1429                           
  1430                           ; 3 bytes @ 0x43
  1431  000044                     	ds	3
  1432  000047                     floor@expon:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x46
  1436  000047                     	ds	2
  1437  000049                     ?_exp:
  1438                           	opt stack 0
  1439  000049                     exp@x:
  1440                           	opt stack 0
  1441                           
  1442                           ; 3 bytes @ 0x48
  1443  000049                     	ds	3
  1444  00004C                     _exp$1234:
  1445                           	opt stack 0
  1446                           
  1447                           ; 3 bytes @ 0x4B
  1448  00004C                     	ds	3
  1449  00004F                     exp@exponent:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x4E
  1453  00004F                     	ds	2
  1454  000051                     exp@sign:
  1455                           	opt stack 0
  1456                           
  1457                           ; 1 bytes @ 0x50
  1458  000051                     	ds	1
  1459  000052                     ?_pow:
  1460                           	opt stack 0
  1461  000052                     pow@x:
  1462                           	opt stack 0
  1463                           
  1464                           ; 3 bytes @ 0x51
  1465  000052                     	ds	3
  1466  000055                     pow@y:
  1467                           	opt stack 0
  1468                           
  1469                           ; 3 bytes @ 0x54
  1470  000055                     	ds	3
  1471  000058                     _pow$1232:
  1472                           	opt stack 0
  1473                           
  1474                           ; 3 bytes @ 0x57
  1475  000058                     	ds	3
  1476  00005B                     _pow$1233:
  1477                           	opt stack 0
  1478                           
  1479                           ; 3 bytes @ 0x5A
  1480  00005B                     	ds	3
  1481  00005E                     pow@sign:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0x5D
  1485  00005E                     	ds	1
  1486  00005F                     pow@yi:
  1487                           	opt stack 0
  1488                           
  1489                           ; 4 bytes @ 0x5E
  1490  00005F                     	ds	4
  1491  000063                     ?_dec_to_hex:
  1492                           	opt stack 0
  1493  000063                     dec_to_hex@num:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x62
  1497  000063                     	ds	2
  1498  000065                     _dec_to_hex$1230:
  1499                           	opt stack 0
  1500                           
  1501                           ; 3 bytes @ 0x64
  1502  000065                     	ds	3
  1503  000068                     _dec_to_hex$1231:
  1504                           	opt stack 0
  1505                           
  1506                           ; 3 bytes @ 0x67
  1507  000068                     	ds	3
  1508  00006B                     dec_to_hex@temp:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x6A
  1512  00006B                     	ds	2
  1513  00006D                     dec_to_hex@i:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x6C
  1517  00006D                     	ds	2
  1518  00006F                     dec_to_hex@hexnum:
  1519                           	opt stack 0
  1520                           
  1521                           ; 2 bytes @ 0x6E
  1522  00006F                     	ds	2
  1523  000071                     dec_to_hex@quotient:
  1524                           	opt stack 0
  1525                           
  1526                           ; 2 bytes @ 0x70
  1527  000071                     	ds	2
  1528  000073                     isr@i:
  1529                           	opt stack 0
  1530                           
  1531                           ; 1 bytes @ 0x72
  1532  000073                     	ds	1
  1533  000074                     _isr$1325:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x73
  1537  000074                     	ds	2
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           postinc0	equ	0xFEE
  1543                           wreg	equ	0xFE8
  1544                           
  1545 ;;
  1546 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1547 ;;
  1548 ;; *************** function _main *****************
  1549 ;; Defined at:
  1550 ;;		line 16 in file "main.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;		None
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;		None
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  1    wreg      void 
  1557 ;; Registers used:
  1558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;Total ram usage:        1 bytes
  1569 ;; Hardware stack levels required when called:   11
  1570 ;; This function calls:
  1571 ;;		_I2C_ColorSens_Init
  1572 ;;		_I2C_Master_Init
  1573 ;;		_bottle_count
  1574 ;;		_bottle_time
  1575 ;;		_date_time
  1576 ;;		_emergencystop
  1577 ;;		_initLCD
  1578 ;;		_operation
  1579 ;;		_operationend
  1580 ;;		_standby
  1581 ;; This function is called by:
  1582 ;;		Startup code after reset
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text0
  1587  001874                     __ptext0:
  1588                           	opt stack 0
  1589  001874                     _main:
  1590                           	opt stack 20
  1591                           
  1592                           ;main.c: 23: TRISA = 0b11111011;
  1593                           
  1594                           ;incstack = 0
  1595  001874  0EFB               	movlw	251
  1596  001876  6E92               	movwf	3986,c	;volatile
  1597                           
  1598                           ;main.c: 24: TRISB = 0xFF;
  1599  001878  6893               	setf	3987,c	;volatile
  1600                           
  1601                           ;main.c: 25: TRISC = 0x00;
  1602  00187A  0E00               	movlw	0
  1603  00187C  6E94               	movwf	3988,c	;volatile
  1604                           
  1605                           ;main.c: 26: TRISD = 0x00;
  1606  00187E  0E00               	movlw	0
  1607  001880  6E95               	movwf	3989,c	;volatile
  1608                           
  1609                           ;main.c: 27: TRISE = 0x00;
  1610  001882  0E00               	movlw	0
  1611  001884  6E96               	movwf	3990,c	;volatile
  1612                           
  1613                           ;main.c: 29: LATA = 0x00;
  1614  001886  0E00               	movlw	0
  1615  001888  6E89               	movwf	3977,c	;volatile
  1616                           
  1617                           ;main.c: 30: LATB = 0x00;
  1618  00188A  0E00               	movlw	0
  1619  00188C  6E8A               	movwf	3978,c	;volatile
  1620                           
  1621                           ;main.c: 31: LATC = 0x00;
  1622  00188E  0E00               	movlw	0
  1623  001890  6E8B               	movwf	3979,c	;volatile
  1624                           
  1625                           ;main.c: 32: LATD = 0x00;
  1626  001892  0E00               	movlw	0
  1627  001894  6E8C               	movwf	3980,c	;volatile
  1628                           
  1629                           ;main.c: 33: LATE = 0x00;
  1630  001896  0E00               	movlw	0
  1631  001898  6E8D               	movwf	3981,c	;volatile
  1632                           
  1633                           ;main.c: 35: ADCON0 = 0x00;
  1634  00189A  0E00               	movlw	0
  1635  00189C  6EC2               	movwf	4034,c	;volatile
  1636                           
  1637                           ;main.c: 36: ADCON1 = 0xFF;
  1638  00189E  68C1               	setf	4033,c	;volatile
  1639                           
  1640                           ;main.c: 39: GIE = 1;
  1641  0018A0  8EF2               	bsf	intcon,7,c	;volatile
  1642                           
  1643                           ;main.c: 40: INT1IE = 1;
  1644  0018A2  86F0               	bsf	intcon3,3,c	;volatile
  1645                           
  1646                           ;main.c: 41: INT0IE = 0;
  1647  0018A4  98F2               	bcf	intcon,4,c	;volatile
  1648                           
  1649                           ;main.c: 42: INT2IE = 0;
  1650  0018A6  98F0               	bcf	intcon3,4,c	;volatile
  1651                           
  1652                           ;main.c: 44: nRBPU = 0;
  1653  0018A8  9EF1               	bcf	intcon2,7,c	;volatile
  1654                           
  1655                           ;main.c: 46: initLCD();
  1656  0018AA  ECB8  F012         	call	_initLCD	;wreg free
  1657                           
  1658                           ;main.c: 47: I2C_Master_Init(10000);
  1659  0018AE  0E10               	movlw	16
  1660  0018B0  0100               	movlb	0	; () banked
  1661  0018B2  6F9D               	movwf	I2C_Master_Init@c& (0+255),b
  1662  0018B4  0E27               	movlw	39
  1663  0018B6  6F9E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1664  0018B8  0E00               	movlw	0
  1665  0018BA  6F9F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1666  0018BC  0E00               	movlw	0
  1667  0018BE  6FA0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1668  0018C0  EC31  F012         	call	_I2C_Master_Init	;wreg free
  1669                           
  1670                           ;main.c: 48: I2C_ColorSens_Init();
  1671  0018C4  ECA8  F00C         	call	_I2C_ColorSens_Init	;wreg free
  1672                           
  1673                           ;main.c: 51: TMR0 = 0;
  1674  0018C8  0E00               	movlw	0
  1675  0018CA  6ED7               	movwf	4055,c	;volatile
  1676  0018CC  0E00               	movlw	0
  1677  0018CE  6ED6               	movwf	4054,c	;volatile
  1678                           
  1679                           ;main.c: 52: T08BIT = 0;
  1680  0018D0  9CD5               	bcf	4053,6,c	;volatile
  1681                           
  1682                           ;main.c: 53: T0CS = 0;
  1683  0018D2  9AD5               	bcf	4053,5,c	;volatile
  1684                           
  1685                           ;main.c: 54: PSA = 0;
  1686  0018D4  96D5               	bcf	4053,3,c	;volatile
  1687                           
  1688                           ;main.c: 55: T0PS2 = 1;
  1689  0018D6  84D5               	bsf	4053,2,c	;volatile
  1690                           
  1691                           ;main.c: 56: T0PS1 = 1;
  1692  0018D8  82D5               	bsf	4053,1,c	;volatile
  1693                           
  1694                           ;main.c: 57: T0PS0 = 1;
  1695  0018DA  80D5               	bsf	4053,0,c	;volatile
  1696                           
  1697                           ;main.c: 61: curr_state = STANDBY;
  1698  0018DC  0E00               	movlw	0
  1699  0018DE  0100               	movlb	0	; () banked
  1700  0018E0  6FDE               	movwf	_curr_state& (0+255),b
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;main.c: 64: switch(curr_state){
  1704                           
  1705                           ;main.c: 63: while(1){
  1706  0018E2  D015               	goto	l4311
  1707  0018E4                     l4295:
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 66: standby();
  1711  0018E4  ECE8  F00D         	call	_standby	;wreg free
  1712                           
  1713                           ;main.c: 67: break;
  1714  0018E8  D029               	goto	l4313
  1715  0018EA                     l4297:
  1716                           
  1717                           ;main.c: 69: emergencystop();
  1718  0018EA  EC1D  F014         	call	_emergencystop	;wreg free
  1719                           
  1720                           ;main.c: 70: break;
  1721  0018EE  D026               	goto	l4313
  1722  0018F0                     l4299:
  1723                           
  1724                           ;main.c: 72: operation();
  1725  0018F0  EC64  F00F         	call	_operation	;wreg free
  1726                           
  1727                           ;main.c: 73: break;
  1728  0018F4  D023               	goto	l4313
  1729  0018F6                     l4301:
  1730                           
  1731                           ;main.c: 75: operationend();
  1732  0018F6  EC3D  F014         	call	_operationend	;wreg free
  1733                           
  1734                           ;main.c: 76: break;
  1735  0018FA  D020               	goto	l4313
  1736  0018FC                     l4303:
  1737                           
  1738                           ;main.c: 78: date_time();
  1739  0018FC  EC16  F00D         	call	_date_time	;wreg free
  1740                           
  1741                           ;main.c: 79: break;
  1742  001900  D01D               	goto	l4313
  1743  001902                     l4305:
  1744                           
  1745                           ;main.c: 81: bottle_count();
  1746  001902  ECED  F008         	call	_bottle_count	;wreg free
  1747                           
  1748                           ;main.c: 82: break;
  1749  001906  D01A               	goto	l4313
  1750  001908                     l4307:
  1751                           
  1752                           ;main.c: 84: bottle_time();
  1753  001908  EC83  F013         	call	_bottle_time	;wreg free
  1754                           
  1755                           ;main.c: 86: }
  1756                           
  1757                           ;main.c: 85: break;
  1758  00190C  D017               	goto	l4313
  1759  00190E                     l4311:
  1760  00190E  0100               	movlb	0	; () banked
  1761  001910  51DE               	movf	_curr_state& (0+255),w,b
  1762                           
  1763                           ; Switch size 1, requested type "space"
  1764                           ; Number of cases is 7, Range of values is 0 to 6
  1765                           ; switch strategies available:
  1766                           ; Name         Instructions Cycles
  1767                           ; simple_byte           22    12 (average)
  1768                           ;	Chosen strategy is simple_byte
  1769  001912  0A00               	xorlw	0	; case 0
  1770  001914  B4D8               	btfsc	status,2,c
  1771  001916  D7E6               	goto	l4295
  1772  001918  0A01               	xorlw	1	; case 1
  1773  00191A  B4D8               	btfsc	status,2,c
  1774  00191C  D7E6               	goto	l4297
  1775  00191E  0A03               	xorlw	3	; case 2
  1776  001920  B4D8               	btfsc	status,2,c
  1777  001922  D7E6               	goto	l4299
  1778  001924  0A01               	xorlw	1	; case 3
  1779  001926  B4D8               	btfsc	status,2,c
  1780  001928  D7E6               	goto	l4301
  1781  00192A  0A07               	xorlw	7	; case 4
  1782  00192C  B4D8               	btfsc	status,2,c
  1783  00192E  D7E6               	goto	l4303
  1784  001930  0A01               	xorlw	1	; case 5
  1785  001932  B4D8               	btfsc	status,2,c
  1786  001934  D7E6               	goto	l4305
  1787  001936  0A03               	xorlw	3	; case 6
  1788  001938  B4D8               	btfsc	status,2,c
  1789  00193A  D7E6               	goto	l4307
  1790  00193C                     l4313:
  1791                           
  1792                           ;main.c: 87: _delay((unsigned long)((10)*(10000000/4000.0)));
  1793  00193C  0E21               	movlw	33
  1794  00193E  0100               	movlb	0	; () banked
  1795  001940  6FB6               	movwf	??_main& (0+255),b
  1796  001942  0E76               	movlw	118
  1797  001944                     u4007:
  1798  001944  2EE8               	decfsz	wreg,f,c
  1799  001946  D7FE               	bra	u4007
  1800  001948  2FB6               	decfsz	??_main& (0+255),f,b
  1801  00194A  D7FC               	bra	u4007
  1802  00194C  F000               	nop	
  1803  00194E  D7DF               	goto	l4311
  1804  001950                     __end_of_main:
  1805                           	opt stack 0
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           intcon	equ	0xFF2
  1811                           intcon2	equ	0xFF1
  1812                           intcon3	equ	0xFF0
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _standby *****************
  1818 ;; Defined at:
  1819 ;;		line 189 in file "main.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;		None
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;		None
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  1    wreg      void 
  1826 ;; Registers used:
  1827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;Total ram usage:        0 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:   10
  1840 ;; This function calls:
  1841 ;;		_lcdInst
  1842 ;;		_printf
  1843 ;;		_read_colorsensor
  1844 ;; This function is called by:
  1845 ;;		_main
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text1
  1850  001BD0                     __ptext1:
  1851                           	opt stack 0
  1852  001BD0                     _standby:
  1853                           	opt stack 20
  1854                           
  1855                           ;main.c: 190: read_colorsensor();
  1856                           
  1857                           ;incstack = 0
  1858  001BD0  ECC8  F007         	call	_read_colorsensor	;wreg free
  1859                           
  1860                           ;main.c: 191: if((color[0]>50) && (color[0]<55)){
  1861  001BD4  0100               	movlb	0	; () banked
  1862  001BD6  BFC2               	btfsc	(_color+1)& (0+255),7,b
  1863  001BD8  D027               	goto	l3909
  1864  001BDA  0100               	movlb	0	; () banked
  1865  001BDC  51C2               	movf	(_color+1)& (0+255),w,b
  1866  001BDE  E105               	bnz	u3550
  1867  001BE0  0E33               	movlw	51
  1868  001BE2  0100               	movlb	0	; () banked
  1869  001BE4  5DC1               	subwf	_color& (0+255),w,b
  1870  001BE6  A0D8               	btfss	status,0,c
  1871  001BE8  D01F               	goto	l3909
  1872  001BEA                     u3550:
  1873                           
  1874                           ; BSR set to: 0
  1875  001BEA  0100               	movlb	0	; () banked
  1876  001BEC  BFC2               	btfsc	(_color+1)& (0+255),7,b
  1877  001BEE  D008               	goto	l3897
  1878  001BF0  0100               	movlb	0	; () banked
  1879  001BF2  51C2               	movf	(_color+1)& (0+255),w,b
  1880  001BF4  E119               	bnz	l3909
  1881  001BF6  0E37               	movlw	55
  1882  001BF8  0100               	movlb	0	; () banked
  1883  001BFA  5DC1               	subwf	_color& (0+255),w,b
  1884  001BFC  B0D8               	btfsc	status,0,c
  1885  001BFE  D014               	goto	l3909
  1886  001C00                     l3897:
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;main.c: 192: testflag += 1;
  1890  001C00  0100               	movlb	0	; () banked
  1891  001C02  4BDC               	infsnz	_testflag& (0+255),f,b
  1892  001C04  2BDD               	incf	(_testflag+1)& (0+255),f,b
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 193: if(testflag = 2){
  1896  001C06  0E00               	movlw	0
  1897  001C08  0100               	movlb	0	; () banked
  1898  001C0A  6FDD               	movwf	(_testflag+1)& (0+255),b
  1899  001C0C  0E02               	movlw	2
  1900  001C0E  6FDC               	movwf	_testflag& (0+255),b
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;main.c: 194: testint[0] = color[1];
  1904  001C10  C0C3  F0D0         	movff	_color+2,_testint
  1905  001C14  C0C4  F0D1         	movff	_color+3,_testint+1
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;main.c: 195: testint[1] = color[2];
  1909  001C18  C0C5  F0D2         	movff	_color+4,_testint+2
  1910  001C1C  C0C6  F0D3         	movff	_color+5,_testint+3
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;main.c: 196: testint[2] = color[3];
  1914  001C20  C0C7  F0D4         	movff	_color+6,_testint+4
  1915  001C24  C0C8  F0D5         	movff	_color+7,_testint+5
  1916  001C28                     l3909:
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;main.c: 200: else{
  1920                           ;main.c: 201: testflag = 0;
  1921  001C28  0E00               	movlw	0
  1922  001C2A  0100               	movlb	0	; () banked
  1923  001C2C  6FDD               	movwf	(_testflag+1)& (0+255),b
  1924  001C2E  0E00               	movlw	0
  1925  001C30  6FDC               	movwf	_testflag& (0+255),b
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;main.c: 202: }
  1929                           ;main.c: 203: lcdInst(0b10000000);
  1930                           
  1931                           ; BSR set to: 0
  1932  001C32  0E80               	movlw	128
  1933  001C34  EC64  F014         	call	_lcdInst
  1934                           
  1935                           ;main.c: 204: printf("%03d, %03d, %03d", testint[0], testint[1], testint[2]);
  1936  001C38  0EB2               	movlw	low STR_4
  1937  001C3A  0100               	movlb	0	; () banked
  1938  001C3C  6F9C               	movwf	printf@f& (0+255),b
  1939  001C3E  0EFF               	movlw	high STR_4
  1940  001C40  0100               	movlb	0	; () banked
  1941  001C42  6F9D               	movwf	(printf@f+1)& (0+255),b
  1942  001C44  C0D0  F09E         	movff	_testint,?_printf+2
  1943  001C48  C0D1  F09F         	movff	_testint+1,?_printf+3
  1944  001C4C  C0D2  F0A0         	movff	_testint+2,?_printf+4
  1945  001C50  C0D3  F0A1         	movff	_testint+3,?_printf+5
  1946  001C54  C0D4  F0A2         	movff	_testint+4,?_printf+6
  1947  001C58  C0D5  F0A3         	movff	_testint+5,?_printf+7
  1948  001C5C  EC09  F000         	call	_printf	;wreg free
  1949                           
  1950                           ;main.c: 205: lcdInst(0b11000000);
  1951  001C60  0EC0               	movlw	192
  1952  001C62  EC64  F014         	call	_lcdInst
  1953                           
  1954                           ;main.c: 206: printf("%03d %03d %03d %03d", color[0], color[1], color[2], color[3]);
  1955  001C66  0E15               	movlw	low STR_5
  1956  001C68  0100               	movlb	0	; () banked
  1957  001C6A  6F9C               	movwf	printf@f& (0+255),b
  1958  001C6C  0EFF               	movlw	high STR_5
  1959  001C6E  0100               	movlb	0	; () banked
  1960  001C70  6F9D               	movwf	(printf@f+1)& (0+255),b
  1961  001C72  C0C1  F09E         	movff	_color,?_printf+2
  1962  001C76  C0C2  F09F         	movff	_color+1,?_printf+3
  1963  001C7A  C0C3  F0A0         	movff	_color+2,?_printf+4
  1964  001C7E  C0C4  F0A1         	movff	_color+3,?_printf+5
  1965  001C82  C0C5  F0A2         	movff	_color+4,?_printf+6
  1966  001C86  C0C6  F0A3         	movff	_color+5,?_printf+7
  1967  001C8A  C0C7  F0A4         	movff	_color+6,?_printf+8
  1968  001C8E  C0C8  F0A5         	movff	_color+7,?_printf+9
  1969  001C92  EC09  F000         	call	_printf	;wreg free
  1970  001C96  0012               	return	
  1971  001C98                     __end_of_standby:
  1972                           	opt stack 0
  1973                           tblptru	equ	0xFF8
  1974                           tblptrh	equ	0xFF7
  1975                           tblptrl	equ	0xFF6
  1976                           tablat	equ	0xFF5
  1977                           intcon	equ	0xFF2
  1978                           intcon2	equ	0xFF1
  1979                           intcon3	equ	0xFF0
  1980                           postinc0	equ	0xFEE
  1981                           wreg	equ	0xFE8
  1982                           status	equ	0xFD8
  1983                           
  1984 ;; *************** function _read_colorsensor *****************
  1985 ;; Defined at:
  1986 ;;		line 401 in file "main.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;		None
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  color_high      4   27[BANK0 ] unsigned char [4]
  1991 ;;  color_low       4   23[BANK0 ] unsigned char [4]
  1992 ;;  i               2   31[BANK0 ] int 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;Total ram usage:       14 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; Hardware stack levels required when called:    9
  2009 ;; This function calls:
  2010 ;;		_I2C_Master_Read
  2011 ;;		_I2C_Master_Start
  2012 ;;		_I2C_Master_Stop
  2013 ;;		_I2C_Master_Write
  2014 ;; This function is called by:
  2015 ;;		_standby
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text2
  2020  000F90                     __ptext2:
  2021                           	opt stack 0
  2022  000F90                     _read_colorsensor:
  2023                           	opt stack 20
  2024                           
  2025                           ;main.c: 402: unsigned char color_low[4];
  2026                           ;main.c: 403: unsigned char color_high[4];
  2027                           ;main.c: 404: int i;
  2028                           ;main.c: 407: I2C_Master_Start();
  2029                           
  2030                           ;incstack = 0
  2031  000F90  EC86  F014         	call	_I2C_Master_Start	;wreg free
  2032                           
  2033                           ;main.c: 408: I2C_Master_Write(0b01010010);
  2034  000F94  0E00               	movlw	0
  2035  000F96  0100               	movlb	0	; () banked
  2036  000F98  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2037  000F9A  0E52               	movlw	82
  2038  000F9C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2039  000F9E  EC78  F014         	call	_I2C_Master_Write	;wreg free
  2040                           
  2041                           ;main.c: 409: I2C_Master_Write(0b10110100);
  2042  000FA2  0E00               	movlw	0
  2043  000FA4  0100               	movlb	0	; () banked
  2044  000FA6  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2045  000FA8  0EB4               	movlw	180
  2046  000FAA  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2047  000FAC  EC78  F014         	call	_I2C_Master_Write	;wreg free
  2048                           
  2049                           ;main.c: 410: I2C_Master_Start();
  2050  000FB0  EC86  F014         	call	_I2C_Master_Start	;wreg free
  2051                           
  2052                           ;main.c: 411: I2C_Master_Write(0b01010011);
  2053  000FB4  0E00               	movlw	0
  2054  000FB6  0100               	movlb	0	; () banked
  2055  000FB8  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2056  000FBA  0E53               	movlw	83
  2057  000FBC  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2058  000FBE  EC78  F014         	call	_I2C_Master_Write	;wreg free
  2059                           
  2060                           ;main.c: 412: for(i=0; i<3; i++){
  2061  000FC2  0E00               	movlw	0
  2062  000FC4  0100               	movlb	0	; () banked
  2063  000FC6  6FA0               	movwf	(read_colorsensor@i+1)& (0+255),b
  2064  000FC8  0E00               	movlw	0
  2065  000FCA  6F9F               	movwf	read_colorsensor@i& (0+255),b
  2066  000FCC                     l3451:
  2067                           
  2068                           ; BSR set to: 0
  2069  000FCC  0100               	movlb	0	; () banked
  2070  000FCE  BFA0               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2071  000FD0  D008               	goto	l3455
  2072  000FD2  0100               	movlb	0	; () banked
  2073  000FD4  51A0               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2074  000FD6  E121               	bnz	l3461
  2075  000FD8  0E03               	movlw	3
  2076  000FDA  0100               	movlb	0	; () banked
  2077  000FDC  5D9F               	subwf	read_colorsensor@i& (0+255),w,b
  2078  000FDE  B0D8               	btfsc	status,0,c
  2079  000FE0  D01C               	goto	l3461
  2080  000FE2                     l3455:
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;main.c: 413: color_low[i] = I2C_Master_Read(1);
  2084  000FE2  0E97               	movlw	low read_colorsensor@color_low
  2085  000FE4  0100               	movlb	0	; () banked
  2086  000FE6  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2087  000FE8  6ED9               	movwf	fsr2l,c
  2088  000FEA  0E00               	movlw	high read_colorsensor@color_low
  2089  000FEC  0100               	movlb	0	; () banked
  2090  000FEE  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2091  000FF0  6EDA               	movwf	fsr2h,c
  2092  000FF2  0E01               	movlw	1
  2093  000FF4  ECB9  F013         	call	_I2C_Master_Read
  2094  000FF8  6EDF               	movwf	indf2,c
  2095                           
  2096                           ;main.c: 414: color_high[i] = I2C_Master_Read(1);
  2097  000FFA  0E9B               	movlw	low read_colorsensor@color_high
  2098  000FFC  0100               	movlb	0	; () banked
  2099  000FFE  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2100  001000  6ED9               	movwf	fsr2l,c
  2101  001002  0E00               	movlw	high read_colorsensor@color_high
  2102  001004  0100               	movlb	0	; () banked
  2103  001006  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2104  001008  6EDA               	movwf	fsr2h,c
  2105  00100A  0E01               	movlw	1
  2106  00100C  ECB9  F013         	call	_I2C_Master_Read
  2107  001010  6EDF               	movwf	indf2,c
  2108  001012  0100               	movlb	0	; () banked
  2109  001014  4B9F               	infsnz	read_colorsensor@i& (0+255),f,b
  2110  001016  2BA0               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2111  001018  D7D9               	goto	l3451
  2112  00101A                     l3461:
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;main.c: 415: }
  2116                           ;main.c: 416: color_low[3] = I2C_Master_Read(1);
  2117  00101A  0E01               	movlw	1
  2118  00101C  ECB9  F013         	call	_I2C_Master_Read
  2119  001020  0100               	movlb	0	; () banked
  2120  001022  6F9A               	movwf	(read_colorsensor@color_low+3)& (0+255),b
  2121                           
  2122                           ;main.c: 417: color_high[3] = I2C_Master_Read(0);
  2123  001024  0E00               	movlw	0
  2124  001026  ECB9  F013         	call	_I2C_Master_Read
  2125  00102A  0100               	movlb	0	; () banked
  2126  00102C  6F9E               	movwf	(read_colorsensor@color_high+3)& (0+255),b
  2127                           
  2128                           ;main.c: 418: I2C_Master_Stop();
  2129  00102E  EC82  F014         	call	_I2C_Master_Stop	;wreg free
  2130                           
  2131                           ;main.c: 420: for(i=0; i<4; i++){
  2132  001032  0E00               	movlw	0
  2133  001034  0100               	movlb	0	; () banked
  2134  001036  6FA0               	movwf	(read_colorsensor@i+1)& (0+255),b
  2135  001038  0E00               	movlw	0
  2136  00103A  6F9F               	movwf	read_colorsensor@i& (0+255),b
  2137  00103C                     l3465:
  2138                           
  2139                           ; BSR set to: 0
  2140  00103C  0100               	movlb	0	; () banked
  2141  00103E  BFA0               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2142  001040  D008               	goto	l3469
  2143  001042  0100               	movlb	0	; () banked
  2144  001044  51A0               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2145  001046  E139               	bnz	l353
  2146  001048  0E04               	movlw	4
  2147  00104A  0100               	movlb	0	; () banked
  2148  00104C  5D9F               	subwf	read_colorsensor@i& (0+255),w,b
  2149  00104E  B0D8               	btfsc	status,0,c
  2150  001050  0012               	return	
  2151  001052                     l3469:
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;main.c: 421: color[i] = (color_high[i] << 8)|(color_low[i]);
  2155  001052  0E9B               	movlw	low read_colorsensor@color_high
  2156  001054  0100               	movlb	0	; () banked
  2157  001056  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2158  001058  6ED9               	movwf	fsr2l,c
  2159  00105A  0E00               	movlw	high read_colorsensor@color_high
  2160  00105C  0100               	movlb	0	; () banked
  2161  00105E  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2162  001060  6EDA               	movwf	fsr2h,c
  2163  001062  50DF               	movf	indf2,w,c
  2164  001064  0100               	movlb	0	; () banked
  2165  001066  6F93               	movwf	??_read_colorsensor& (0+255),b
  2166  001068  0100               	movlb	0	; () banked
  2167  00106A  5193               	movf	??_read_colorsensor& (0+255),w,b
  2168  00106C  0100               	movlb	0	; () banked
  2169  00106E  6F95               	movwf	(??_read_colorsensor+2)& (0+255),b
  2170  001070  6B94               	clrf	(??_read_colorsensor+1)& (0+255),b
  2171  001072  0E97               	movlw	low read_colorsensor@color_low
  2172  001074  0100               	movlb	0	; () banked
  2173  001076  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2174  001078  6ED9               	movwf	fsr2l,c
  2175  00107A  0E00               	movlw	high read_colorsensor@color_low
  2176  00107C  0100               	movlb	0	; () banked
  2177  00107E  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2178  001080  6EDA               	movwf	fsr2h,c
  2179  001082  50DF               	movf	indf2,w,c
  2180  001084  0100               	movlb	0	; () banked
  2181  001086  6F96               	movwf	(??_read_colorsensor+3)& (0+255),b
  2182  001088  0100               	movlb	0	; () banked
  2183  00108A  5196               	movf	(??_read_colorsensor+3)& (0+255),w,b
  2184  00108C  0100               	movlb	0	; () banked
  2185  00108E  1394               	iorwf	(??_read_colorsensor+1)& (0+255),f,b
  2186  001090  0E00               	movlw	0
  2187  001092  1395               	iorwf	(??_read_colorsensor+2)& (0+255),f,b
  2188  001094  90D8               	bcf	status,0,c
  2189  001096  0100               	movlb	0	; () banked
  2190  001098  359F               	rlcf	read_colorsensor@i& (0+255),w,b
  2191  00109A  6ED9               	movwf	fsr2l,c
  2192  00109C  0100               	movlb	0	; () banked
  2193  00109E  35A0               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2194  0010A0  6EDA               	movwf	fsr2h,c
  2195  0010A2  0EC1               	movlw	low _color
  2196  0010A4  26D9               	addwf	fsr2l,f,c
  2197  0010A6  0E00               	movlw	high _color
  2198  0010A8  22DA               	addwfc	fsr2h,f,c
  2199  0010AA  C094  FFDE         	movff	??_read_colorsensor+1,postinc2
  2200  0010AE  C095  FFDD         	movff	??_read_colorsensor+2,postdec2
  2201                           
  2202                           ; BSR set to: 0
  2203  0010B2  0100               	movlb	0	; () banked
  2204  0010B4  4B9F               	infsnz	read_colorsensor@i& (0+255),f,b
  2205  0010B6  2BA0               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2206  0010B8  D7C1               	goto	l3465
  2207  0010BA                     l353:
  2208                           
  2209                           ; BSR set to: 0
  2210  0010BA  0012               	return		;funcret
  2211  0010BC                     __end_of_read_colorsensor:
  2212                           	opt stack 0
  2213                           tblptru	equ	0xFF8
  2214                           tblptrh	equ	0xFF7
  2215                           tblptrl	equ	0xFF6
  2216                           tablat	equ	0xFF5
  2217                           intcon	equ	0xFF2
  2218                           intcon2	equ	0xFF1
  2219                           intcon3	equ	0xFF0
  2220                           postinc0	equ	0xFEE
  2221                           wreg	equ	0xFE8
  2222                           indf2	equ	0xFDF
  2223                           postinc2	equ	0xFDE
  2224                           postdec2	equ	0xFDD
  2225                           fsr2h	equ	0xFDA
  2226                           fsr2l	equ	0xFD9
  2227                           status	equ	0xFD8
  2228                           
  2229 ;; *************** function _operationend *****************
  2230 ;; Defined at:
  2231 ;;		line 359 in file "main.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;		None
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;		None
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;Total ram usage:        0 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:   10
  2252 ;; This function calls:
  2253 ;;		_lcdInst
  2254 ;;		_printf
  2255 ;; This function is called by:
  2256 ;;		_main
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text3
  2261  00287A                     __ptext3:
  2262                           	opt stack 0
  2263  00287A                     _operationend:
  2264                           	opt stack 20
  2265                           
  2266                           ;main.c: 360: lcdInst(0b10000000);
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;incstack = 0
  2270  00287A  0E80               	movlw	128
  2271  00287C  EC64  F014         	call	_lcdInst
  2272                           
  2273                           ;main.c: 361: printf("Operation Done!");
  2274  002880  0EC3               	movlw	low STR_20
  2275  002882  0100               	movlb	0	; () banked
  2276  002884  6F9C               	movwf	printf@f& (0+255),b
  2277  002886  0EFF               	movlw	high STR_20
  2278  002888  0100               	movlb	0	; () banked
  2279  00288A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2280  00288C  EC09  F000         	call	_printf	;wreg free
  2281  002890  0012               	return	
  2282  002892                     __end_of_operationend:
  2283                           	opt stack 0
  2284                           tblptru	equ	0xFF8
  2285                           tblptrh	equ	0xFF7
  2286                           tblptrl	equ	0xFF6
  2287                           tablat	equ	0xFF5
  2288                           intcon	equ	0xFF2
  2289                           intcon2	equ	0xFF1
  2290                           intcon3	equ	0xFF0
  2291                           postinc0	equ	0xFEE
  2292                           wreg	equ	0xFE8
  2293                           indf2	equ	0xFDF
  2294                           postinc2	equ	0xFDE
  2295                           postdec2	equ	0xFDD
  2296                           fsr2h	equ	0xFDA
  2297                           fsr2l	equ	0xFD9
  2298                           status	equ	0xFD8
  2299                           
  2300 ;; *************** function _operation *****************
  2301 ;; Defined at:
  2302 ;;		line 337 in file "main.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;		None
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;		None
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      void 
  2309 ;; Registers used:
  2310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;Total ram usage:        2 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:   10
  2323 ;; This function calls:
  2324 ;;		_lcdInst
  2325 ;;		_printf
  2326 ;; This function is called by:
  2327 ;;		_main
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           	psect	text4
  2332  001EC8                     __ptext4:
  2333                           	opt stack 0
  2334  001EC8                     _operation:
  2335                           	opt stack 20
  2336                           
  2337                           ;main.c: 338: switch(operation_disp){
  2338                           
  2339                           ;incstack = 0
  2340  001EC8  D031               	goto	l3949
  2341  001ECA                     l3929:
  2342                           
  2343                           ;main.c: 340: lcdInst(0b10000000);
  2344  001ECA  0E80               	movlw	128
  2345  001ECC  EC64  F014         	call	_lcdInst
  2346                           
  2347                           ;main.c: 341: printf("Running~              ");
  2348  001ED0  0EB9               	movlw	low STR_17
  2349  001ED2  0100               	movlb	0	; () banked
  2350  001ED4  6F9C               	movwf	printf@f& (0+255),b
  2351  001ED6  0EFE               	movlw	high STR_17
  2352  001ED8  0100               	movlb	0	; () banked
  2353  001EDA  6F9D               	movwf	(printf@f+1)& (0+255),b
  2354  001EDC  EC09  F000         	call	_printf	;wreg free
  2355                           
  2356                           ;main.c: 342: operation_disp = 1;
  2357  001EE0  0E00               	movlw	0
  2358  001EE2  0100               	movlb	0	; () banked
  2359  001EE4  6FD9               	movwf	(_operation_disp+1)& (0+255),b
  2360  001EE6  0E01               	movlw	1
  2361  001EE8  D01F               	goto	L2
  2362  001EEA                     l3935:
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;main.c: 345: lcdInst(0b10000000);
  2366  001EEA  0E80               	movlw	128
  2367  001EEC  EC64  F014         	call	_lcdInst
  2368                           
  2369                           ;main.c: 346: printf("Running~~              ");
  2370  001EF0  0EA1               	movlw	low STR_18
  2371  001EF2  0100               	movlb	0	; () banked
  2372  001EF4  6F9C               	movwf	printf@f& (0+255),b
  2373  001EF6  0EFE               	movlw	high STR_18
  2374  001EF8  0100               	movlb	0	; () banked
  2375  001EFA  6F9D               	movwf	(printf@f+1)& (0+255),b
  2376  001EFC  EC09  F000         	call	_printf	;wreg free
  2377                           
  2378                           ;main.c: 347: operation_disp = 2;
  2379  001F00  0E00               	movlw	0
  2380  001F02  0100               	movlb	0	; () banked
  2381  001F04  6FD9               	movwf	(_operation_disp+1)& (0+255),b
  2382  001F06  0E02               	movlw	2
  2383  001F08  D00F               	goto	L2
  2384  001F0A                     l3941:
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;main.c: 350: lcdInst(0b10000000);
  2388  001F0A  0E80               	movlw	128
  2389  001F0C  EC64  F014         	call	_lcdInst
  2390                           
  2391                           ;main.c: 351: printf("Running~~~              ");
  2392  001F10  0E58               	movlw	low STR_19
  2393  001F12  0100               	movlb	0	; () banked
  2394  001F14  6F9C               	movwf	printf@f& (0+255),b
  2395  001F16  0EFE               	movlw	high STR_19
  2396  001F18  0100               	movlb	0	; () banked
  2397  001F1A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2398  001F1C  EC09  F000         	call	_printf	;wreg free
  2399                           
  2400                           ;main.c: 352: operation_disp = 0;
  2401  001F20  0E00               	movlw	0
  2402  001F22  0100               	movlb	0	; () banked
  2403  001F24  6FD9               	movwf	(_operation_disp+1)& (0+255),b
  2404  001F26  0E00               	movlw	0
  2405  001F28                     L2:
  2406  001F28  6FD8               	movwf	_operation_disp& (0+255),b
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;main.c: 354: }
  2410                           
  2411                           ;main.c: 353: break;
  2412  001F2A  D014               	goto	l3951
  2413  001F2C                     l3949:
  2414  001F2C  C0D8  F0B4         	movff	_operation_disp,??_operation
  2415  001F30  C0D9  F0B5         	movff	_operation_disp+1,??_operation+1
  2416                           
  2417                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2418                           ; Switch size 1, requested type "space"
  2419                           ; Number of cases is 1, Range of values is 0 to 0
  2420                           ; switch strategies available:
  2421                           ; Name         Instructions Cycles
  2422                           ; simple_byte            4     3 (average)
  2423                           ;	Chosen strategy is simple_byte
  2424  001F34  0100               	movlb	0	; () banked
  2425  001F36  51B5               	movf	(??_operation+1)& (0+255),w,b
  2426  001F38  0A00               	xorlw	0	; case 0
  2427  001F3A  A4D8               	btfss	status,2,c
  2428  001F3C  D00B               	goto	l3951
  2429                           
  2430                           ; BSR set to: 0
  2431                           ; Switch size 1, requested type "space"
  2432                           ; Number of cases is 3, Range of values is 0 to 2
  2433                           ; switch strategies available:
  2434                           ; Name         Instructions Cycles
  2435                           ; simple_byte           10     6 (average)
  2436                           ;	Chosen strategy is simple_byte
  2437  001F3E  0100               	movlb	0	; () banked
  2438  001F40  51B4               	movf	??_operation& (0+255),w,b
  2439  001F42  0A00               	xorlw	0	; case 0
  2440  001F44  B4D8               	btfsc	status,2,c
  2441  001F46  D7C1               	goto	l3929
  2442  001F48  0A01               	xorlw	1	; case 1
  2443  001F4A  B4D8               	btfsc	status,2,c
  2444  001F4C  D7CE               	goto	l3935
  2445  001F4E  0A03               	xorlw	3	; case 2
  2446  001F50  B4D8               	btfsc	status,2,c
  2447  001F52  D7DB               	goto	l3941
  2448  001F54                     l3951:
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;main.c: 355: _delay((unsigned long)((100)*(10000000/4000.0)));
  2452  001F54  0E02               	movlw	2
  2453  001F56  0100               	movlb	0	; () banked
  2454  001F58  6FB5               	movwf	(??_operation+1)& (0+255),b
  2455  001F5A  0E45               	movlw	69
  2456  001F5C  0100               	movlb	0	; () banked
  2457  001F5E  6FB4               	movwf	??_operation& (0+255),b
  2458  001F60  0EA9               	movlw	169
  2459  001F62                     u4017:
  2460  001F62  2EE8               	decfsz	wreg,f,c
  2461  001F64  D7FE               	bra	u4017
  2462  001F66  2FB4               	decfsz	??_operation& (0+255),f,b
  2463  001F68  D7FC               	bra	u4017
  2464  001F6A  2FB5               	decfsz	(??_operation+1)& (0+255),f,b
  2465  001F6C  D7FA               	bra	u4017
  2466  001F6E  D000               	nop2	
  2467  001F70  0012               	return	
  2468  001F72                     __end_of_operation:
  2469                           	opt stack 0
  2470                           tblptru	equ	0xFF8
  2471                           tblptrh	equ	0xFF7
  2472                           tblptrl	equ	0xFF6
  2473                           tablat	equ	0xFF5
  2474                           intcon	equ	0xFF2
  2475                           intcon2	equ	0xFF1
  2476                           intcon3	equ	0xFF0
  2477                           postinc0	equ	0xFEE
  2478                           wreg	equ	0xFE8
  2479                           indf2	equ	0xFDF
  2480                           postinc2	equ	0xFDE
  2481                           postdec2	equ	0xFDD
  2482                           fsr2h	equ	0xFDA
  2483                           fsr2l	equ	0xFD9
  2484                           status	equ	0xFD8
  2485                           
  2486 ;; *************** function _initLCD *****************
  2487 ;; Defined at:
  2488 ;;		line 14 in file "lcd.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;		None
  2493 ;; Return value:  Size  Location     Type
  2494 ;;                  1    wreg      void 
  2495 ;; Registers used:
  2496 ;;		wreg, status,2, status,0, cstack
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;Total ram usage:        1 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    9
  2509 ;; This function calls:
  2510 ;;		_lcdInst
  2511 ;; This function is called by:
  2512 ;;		_main
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           	psect	text5
  2517  002570                     __ptext5:
  2518                           	opt stack 0
  2519  002570                     _initLCD:
  2520                           	opt stack 21
  2521                           
  2522                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2523                           
  2524                           ;incstack = 0
  2525  002570  0E31               	movlw	49
  2526  002572  0100               	movlb	0	; () banked
  2527  002574  6F93               	movwf	??_initLCD& (0+255),b
  2528  002576  0EB2               	movlw	178
  2529  002578                     u4027:
  2530  002578  2EE8               	decfsz	wreg,f,c
  2531  00257A  D7FE               	bra	u4027
  2532  00257C  2F93               	decfsz	??_initLCD& (0+255),f,b
  2533  00257E  D7FC               	bra	u4027
  2534  002580  F000               	nop	
  2535                           
  2536                           ;lcd.c: 16: lcdInst(0b00110011);
  2537  002582  0E33               	movlw	51
  2538  002584  EC64  F014         	call	_lcdInst
  2539                           
  2540                           ;lcd.c: 17: lcdInst(0b00110011);
  2541  002588  0E33               	movlw	51
  2542  00258A  EC64  F014         	call	_lcdInst
  2543                           
  2544                           ;lcd.c: 18: lcdInst(0b00110010);
  2545  00258E  0E32               	movlw	50
  2546  002590  EC64  F014         	call	_lcdInst
  2547                           
  2548                           ;lcd.c: 19: lcdInst(0b00101000);
  2549  002594  0E28               	movlw	40
  2550  002596  EC64  F014         	call	_lcdInst
  2551                           
  2552                           ;lcd.c: 20: lcdInst(0b00001111);
  2553  00259A  0E0F               	movlw	15
  2554  00259C  EC64  F014         	call	_lcdInst
  2555                           
  2556                           ;lcd.c: 21: lcdInst(0b00000110);
  2557  0025A0  0E06               	movlw	6
  2558  0025A2  EC64  F014         	call	_lcdInst
  2559                           
  2560                           ;lcd.c: 22: lcdInst(0b00000001);
  2561  0025A6  0E01               	movlw	1
  2562  0025A8  EC64  F014         	call	_lcdInst
  2563                           
  2564                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2565  0025AC  0E31               	movlw	49
  2566  0025AE  0100               	movlb	0	; () banked
  2567  0025B0  6F93               	movwf	??_initLCD& (0+255),b
  2568  0025B2  0EB2               	movlw	178
  2569  0025B4                     u4037:
  2570  0025B4  2EE8               	decfsz	wreg,f,c
  2571  0025B6  D7FE               	bra	u4037
  2572  0025B8  2F93               	decfsz	??_initLCD& (0+255),f,b
  2573  0025BA  D7FC               	bra	u4037
  2574  0025BC  F000               	nop	
  2575  0025BE  0012               	return		;funcret
  2576  0025C0                     __end_of_initLCD:
  2577                           	opt stack 0
  2578                           tblptru	equ	0xFF8
  2579                           tblptrh	equ	0xFF7
  2580                           tblptrl	equ	0xFF6
  2581                           tablat	equ	0xFF5
  2582                           intcon	equ	0xFF2
  2583                           intcon2	equ	0xFF1
  2584                           intcon3	equ	0xFF0
  2585                           postinc0	equ	0xFEE
  2586                           wreg	equ	0xFE8
  2587                           indf2	equ	0xFDF
  2588                           postinc2	equ	0xFDE
  2589                           postdec2	equ	0xFDD
  2590                           fsr2h	equ	0xFDA
  2591                           fsr2l	equ	0xFD9
  2592                           status	equ	0xFD8
  2593                           
  2594 ;; *************** function _emergencystop *****************
  2595 ;; Defined at:
  2596 ;;		line 365 in file "main.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;		None
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;		None
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;Total ram usage:        0 bytes
  2615 ;; Hardware stack levels used:    1
  2616 ;; Hardware stack levels required when called:   10
  2617 ;; This function calls:
  2618 ;;		_lcdInst
  2619 ;;		_printf
  2620 ;; This function is called by:
  2621 ;;		_main
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text6
  2626  00283A                     __ptext6:
  2627                           	opt stack 0
  2628  00283A                     _emergencystop:
  2629                           	opt stack 20
  2630                           
  2631                           ;main.c: 366: (INTCONbits.GIE = 0);
  2632                           
  2633                           ;incstack = 0
  2634  00283A  9EF2               	bcf	intcon,7,c	;volatile
  2635                           
  2636                           ;main.c: 367: PORTAbits.RA2 = 0;
  2637  00283C  9480               	bcf	3968,2,c	;volatile
  2638                           
  2639                           ;main.c: 368: lcdInst(0b00000001);
  2640  00283E  0E01               	movlw	1
  2641  002840  EC64  F014         	call	_lcdInst
  2642                           
  2643                           ;main.c: 369: lcdInst(0b10000000);
  2644  002844  0E80               	movlw	128
  2645  002846  EC64  F014         	call	_lcdInst
  2646                           
  2647                           ;main.c: 370: printf("EMERGENCY STOP");
  2648  00284A  0EE3               	movlw	low STR_21
  2649  00284C  0100               	movlb	0	; () banked
  2650  00284E  6F9C               	movwf	printf@f& (0+255),b
  2651  002850  0EFF               	movlw	high STR_21
  2652  002852  0100               	movlb	0	; () banked
  2653  002854  6F9D               	movwf	(printf@f+1)& (0+255),b
  2654  002856  EC09  F000         	call	_printf	;wreg free
  2655  00285A                     l321:
  2656  00285A  D7FF               	goto	l321
  2657  00285C                     __end_of_emergencystop:
  2658                           	opt stack 0
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           intcon	equ	0xFF2
  2664                           intcon2	equ	0xFF1
  2665                           intcon3	equ	0xFF0
  2666                           postinc0	equ	0xFEE
  2667                           wreg	equ	0xFE8
  2668                           indf2	equ	0xFDF
  2669                           postinc2	equ	0xFDE
  2670                           postdec2	equ	0xFDD
  2671                           fsr2h	equ	0xFDA
  2672                           fsr2l	equ	0xFD9
  2673                           status	equ	0xFD8
  2674                           
  2675 ;; *************** function _date_time *****************
  2676 ;; Defined at:
  2677 ;;		line 256 in file "main.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;		None
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  i               1   52[BANK0 ] unsigned char 
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  1    wreg      void 
  2684 ;; Registers used:
  2685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2694 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2695 ;;Total ram usage:        1 bytes
  2696 ;; Hardware stack levels used:    1
  2697 ;; Hardware stack levels required when called:   10
  2698 ;; This function calls:
  2699 ;;		_I2C_Master_Read
  2700 ;;		_I2C_Master_Start
  2701 ;;		_I2C_Master_Stop
  2702 ;;		_I2C_Master_Write
  2703 ;;		_lcdInst
  2704 ;;		_printf
  2705 ;; This function is called by:
  2706 ;;		_main
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           	psect	text7
  2711  001A2C                     __ptext7:
  2712                           	opt stack 0
  2713  001A2C                     _date_time:
  2714                           	opt stack 20
  2715                           
  2716                           ;main.c: 258: I2C_Master_Start();
  2717                           
  2718                           ;incstack = 0
  2719  001A2C  EC86  F014         	call	_I2C_Master_Start	;wreg free
  2720                           
  2721                           ;main.c: 259: I2C_Master_Write(0b11010000);
  2722  001A30  0E00               	movlw	0
  2723  001A32  0100               	movlb	0	; () banked
  2724  001A34  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2725  001A36  0ED0               	movlw	208
  2726  001A38  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2727  001A3A  EC78  F014         	call	_I2C_Master_Write	;wreg free
  2728                           
  2729                           ;main.c: 260: I2C_Master_Write(0x00);
  2730  001A3E  0E00               	movlw	0
  2731  001A40  0100               	movlb	0	; () banked
  2732  001A42  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2733  001A44  0E00               	movlw	0
  2734  001A46  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2735  001A48  EC78  F014         	call	_I2C_Master_Write	;wreg free
  2736                           
  2737                           ;main.c: 261: I2C_Master_Stop();
  2738  001A4C  EC82  F014         	call	_I2C_Master_Stop	;wreg free
  2739                           
  2740                           ;main.c: 264: I2C_Master_Start();
  2741  001A50  EC86  F014         	call	_I2C_Master_Start	;wreg free
  2742                           
  2743                           ;main.c: 265: I2C_Master_Write(0b11010001);
  2744  001A54  0E00               	movlw	0
  2745  001A56  0100               	movlb	0	; () banked
  2746  001A58  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2747  001A5A  0ED1               	movlw	209
  2748  001A5C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2749  001A5E  EC78  F014         	call	_I2C_Master_Write	;wreg free
  2750                           
  2751                           ;main.c: 266: for(unsigned char i=0;i<0x06;i++){
  2752  001A62  0E00               	movlw	0
  2753  001A64  0100               	movlb	0	; () banked
  2754  001A66  6FB4               	movwf	date_time@i& (0+255),b
  2755  001A68                     l3969:
  2756                           
  2757                           ; BSR set to: 0
  2758  001A68  0E05               	movlw	5
  2759  001A6A  0100               	movlb	0	; () banked
  2760  001A6C  65B4               	cpfsgt	date_time@i& (0+255),b
  2761  001A6E  D001               	goto	l3973
  2762  001A70  D010               	goto	l3979
  2763  001A72                     l3973:
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;main.c: 267: time[i] = I2C_Master_Read(1);
  2767  001A72  0100               	movlb	0	; () banked
  2768  001A74  51B4               	movf	date_time@i& (0+255),w,b
  2769  001A76  0D01               	mullw	1
  2770  001A78  0EC9               	movlw	low _time
  2771  001A7A  24F3               	addwf	prodl,w,c
  2772  001A7C  6ED9               	movwf	fsr2l,c
  2773  001A7E  0E00               	movlw	high _time
  2774  001A80  20F4               	addwfc	prodh,w,c
  2775  001A82  6EDA               	movwf	fsr2h,c
  2776  001A84  0E01               	movlw	1
  2777  001A86  ECB9  F013         	call	_I2C_Master_Read
  2778  001A8A  6EDF               	movwf	indf2,c
  2779  001A8C  0100               	movlb	0	; () banked
  2780  001A8E  2BB4               	incf	date_time@i& (0+255),f,b
  2781  001A90  D7EB               	goto	l3969
  2782  001A92                     l3979:
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 268: }
  2786                           ;main.c: 269: time[6] = I2C_Master_Read(0);
  2787  001A92  0E00               	movlw	0
  2788  001A94  ECB9  F013         	call	_I2C_Master_Read
  2789  001A98  0100               	movlb	0	; () banked
  2790  001A9A  6FCF               	movwf	(_time+6)& (0+255),b
  2791                           
  2792                           ;main.c: 270: I2C_Master_Stop();
  2793  001A9C  EC82  F014         	call	_I2C_Master_Stop	;wreg free
  2794                           
  2795                           ;main.c: 273: lcdInst(0b10000000);
  2796  001AA0  0E80               	movlw	128
  2797  001AA2  EC64  F014         	call	_lcdInst
  2798                           
  2799                           ;main.c: 274: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2800  001AA6  0EE7               	movlw	low STR_6
  2801  001AA8  0100               	movlb	0	; () banked
  2802  001AAA  6F9C               	movwf	printf@f& (0+255),b
  2803  001AAC  0EFE               	movlw	high STR_6
  2804  001AAE  0100               	movlb	0	; () banked
  2805  001AB0  6F9D               	movwf	(printf@f+1)& (0+255),b
  2806  001AB2  C0CE  F09E         	movff	_time+5,?_printf+2
  2807  001AB6  0100               	movlb	0	; () banked
  2808  001AB8  6B9F               	clrf	(?_printf+3)& (0+255),b
  2809  001ABA  C0CD  F0A0         	movff	_time+4,?_printf+4
  2810  001ABE  0100               	movlb	0	; () banked
  2811  001AC0  6BA1               	clrf	(?_printf+5)& (0+255),b
  2812  001AC2  C0CF  F0A2         	movff	_time+6,?_printf+6
  2813  001AC6  0100               	movlb	0	; () banked
  2814  001AC8  6BA3               	clrf	(?_printf+7)& (0+255),b
  2815  001ACA  EC09  F000         	call	_printf	;wreg free
  2816                           
  2817                           ;main.c: 275: lcdInst(0b11000000);
  2818  001ACE  0EC0               	movlw	192
  2819  001AD0  EC64  F014         	call	_lcdInst
  2820                           
  2821                           ;main.c: 276: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2822  001AD4  0EFE               	movlw	low STR_7
  2823  001AD6  0100               	movlb	0	; () banked
  2824  001AD8  6F9C               	movwf	printf@f& (0+255),b
  2825  001ADA  0EFE               	movlw	high STR_7
  2826  001ADC  0100               	movlb	0	; () banked
  2827  001ADE  6F9D               	movwf	(printf@f+1)& (0+255),b
  2828  001AE0  C0CB  F09E         	movff	_time+2,?_printf+2
  2829  001AE4  0100               	movlb	0	; () banked
  2830  001AE6  6B9F               	clrf	(?_printf+3)& (0+255),b
  2831  001AE8  C0CA  F0A0         	movff	_time+1,?_printf+4
  2832  001AEC  0100               	movlb	0	; () banked
  2833  001AEE  6BA1               	clrf	(?_printf+5)& (0+255),b
  2834  001AF0  C0C9  F0A2         	movff	_time,?_printf+6
  2835  001AF4  0100               	movlb	0	; () banked
  2836  001AF6  6BA3               	clrf	(?_printf+7)& (0+255),b
  2837  001AF8  EC09  F000         	call	_printf	;wreg free
  2838  001AFC  0012               	return	
  2839  001AFE                     __end_of_date_time:
  2840                           	opt stack 0
  2841                           tblptru	equ	0xFF8
  2842                           tblptrh	equ	0xFF7
  2843                           tblptrl	equ	0xFF6
  2844                           tablat	equ	0xFF5
  2845                           prodh	equ	0xFF4
  2846                           prodl	equ	0xFF3
  2847                           intcon	equ	0xFF2
  2848                           intcon2	equ	0xFF1
  2849                           intcon3	equ	0xFF0
  2850                           postinc0	equ	0xFEE
  2851                           wreg	equ	0xFE8
  2852                           indf2	equ	0xFDF
  2853                           postinc2	equ	0xFDE
  2854                           postdec2	equ	0xFDD
  2855                           fsr2h	equ	0xFDA
  2856                           fsr2l	equ	0xFD9
  2857                           status	equ	0xFD8
  2858                           
  2859 ;; *************** function _I2C_Master_Read *****************
  2860 ;; Defined at:
  2861 ;;		line 105 in file "I2C.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;  a               1    wreg     unsigned char 
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  a               1   17[BANK0 ] unsigned char 
  2866 ;;  temp            1   18[BANK0 ] unsigned char 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  1    wreg      unsigned char 
  2869 ;; Registers used:
  2870 ;;		wreg, status,2, status,0, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;Total ram usage:        2 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:    8
  2883 ;; This function calls:
  2884 ;;		_I2C_Master_Wait
  2885 ;; This function is called by:
  2886 ;;		_date_time
  2887 ;;		_read_colorsensor
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text8
  2892  002772                     __ptext8:
  2893                           	opt stack 0
  2894  002772                     _I2C_Master_Read:
  2895                           	opt stack 20
  2896                           
  2897                           ;incstack = 0
  2898                           ;I2C_Master_Read@a stored from wreg
  2899  002772  0100               	movlb	0	; () banked
  2900  002774  6F91               	movwf	I2C_Master_Read@a& (0+255),b
  2901                           
  2902                           ;I2C.c: 107: unsigned char temp;
  2903                           ;I2C.c: 108: I2C_Master_Wait();
  2904  002776  EC49  F014         	call	_I2C_Master_Wait	;wreg free
  2905                           
  2906                           ;I2C.c: 109: RCEN = 1;
  2907  00277A  86C5               	bsf	4037,3,c	;volatile
  2908                           
  2909                           ;I2C.c: 110: I2C_Master_Wait();
  2910  00277C  EC49  F014         	call	_I2C_Master_Wait	;wreg free
  2911                           
  2912                           ;I2C.c: 111: temp = SSPBUF;
  2913  002780  CFC9 F092          	movff	4041,I2C_Master_Read@temp	;volatile
  2914                           
  2915                           ;I2C.c: 112: I2C_Master_Wait();
  2916  002784  EC49  F014         	call	_I2C_Master_Wait	;wreg free
  2917                           
  2918                           ;I2C.c: 113: ACKDT = (a)?0:1;
  2919  002788  0100               	movlb	0	; () banked
  2920  00278A  5191               	movf	I2C_Master_Read@a& (0+255),w,b
  2921  00278C  0100               	movlb	0	; () banked
  2922  00278E  A4D8               	btfss	status,2,c
  2923  002790  D002               	goto	u2730
  2924  002792  8AC5               	bsf	4037,5,c	;volatile
  2925  002794  D001               	goto	l3279
  2926  002796                     u2730:
  2927  002796  9AC5               	bcf	4037,5,c	;volatile
  2928  002798                     l3279:
  2929                           
  2930                           ;I2C.c: 114: ACKEN = 1;
  2931  002798  88C5               	bsf	4037,4,c	;volatile
  2932                           
  2933                           ;I2C.c: 115: return temp;
  2934  00279A  0100               	movlb	0	; () banked
  2935  00279C  5192               	movf	I2C_Master_Read@temp& (0+255),w,b
  2936  00279E  0012               	return	
  2937  0027A0                     __end_of_I2C_Master_Read:
  2938                           	opt stack 0
  2939                           tblptru	equ	0xFF8
  2940                           tblptrh	equ	0xFF7
  2941                           tblptrl	equ	0xFF6
  2942                           tablat	equ	0xFF5
  2943                           prodh	equ	0xFF4
  2944                           prodl	equ	0xFF3
  2945                           intcon	equ	0xFF2
  2946                           intcon2	equ	0xFF1
  2947                           intcon3	equ	0xFF0
  2948                           postinc0	equ	0xFEE
  2949                           wreg	equ	0xFE8
  2950                           indf2	equ	0xFDF
  2951                           postinc2	equ	0xFDE
  2952                           postdec2	equ	0xFDD
  2953                           fsr2h	equ	0xFDA
  2954                           fsr2l	equ	0xFD9
  2955                           status	equ	0xFD8
  2956                           
  2957 ;; *************** function _bottle_time *****************
  2958 ;; Defined at:
  2959 ;;		line 329 in file "main.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;		None
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  1    wreg      void 
  2966 ;; Registers used:
  2967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;Total ram usage:        0 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:   10
  2980 ;; This function calls:
  2981 ;;		_lcdInst
  2982 ;;		_printf
  2983 ;; This function is called by:
  2984 ;;		_main
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text9
  2989  002706                     __ptext9:
  2990                           	opt stack 0
  2991  002706                     _bottle_time:
  2992                           	opt stack 20
  2993                           
  2994                           ;main.c: 330: lcdInst(0b10000000);
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;incstack = 0
  2998  002706  0E80               	movlw	128
  2999  002708  EC64  F014         	call	_lcdInst
  3000                           
  3001                           ;main.c: 331: printf("Total Operation       ");
  3002  00270C  0ED0               	movlw	low STR_15
  3003  00270E  0100               	movlb	0	; () banked
  3004  002710  6F9C               	movwf	printf@f& (0+255),b
  3005  002712  0EFE               	movlw	high STR_15
  3006  002714  0100               	movlb	0	; () banked
  3007  002716  6F9D               	movwf	(printf@f+1)& (0+255),b
  3008  002718  EC09  F000         	call	_printf	;wreg free
  3009                           
  3010                           ;main.c: 332: lcdInst(0b11000000);
  3011  00271C  0EC0               	movlw	192
  3012  00271E  EC64  F014         	call	_lcdInst
  3013                           
  3014                           ;main.c: 333: printf("Time: %d s       ", operation_time);
  3015  002722  0E29               	movlw	low STR_16
  3016  002724  0100               	movlb	0	; () banked
  3017  002726  6F9C               	movwf	printf@f& (0+255),b
  3018  002728  0EFF               	movlw	high STR_16
  3019  00272A  0100               	movlb	0	; () banked
  3020  00272C  6F9D               	movwf	(printf@f+1)& (0+255),b
  3021  00272E  C0DA  F09E         	movff	_operation_time,?_printf+2
  3022  002732  C0DB  F09F         	movff	_operation_time+1,?_printf+3
  3023  002736  EC09  F000         	call	_printf	;wreg free
  3024  00273A  0012               	return	
  3025  00273C                     __end_of_bottle_time:
  3026                           	opt stack 0
  3027                           tblptru	equ	0xFF8
  3028                           tblptrh	equ	0xFF7
  3029                           tblptrl	equ	0xFF6
  3030                           tablat	equ	0xFF5
  3031                           prodh	equ	0xFF4
  3032                           prodl	equ	0xFF3
  3033                           intcon	equ	0xFF2
  3034                           intcon2	equ	0xFF1
  3035                           intcon3	equ	0xFF0
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           indf2	equ	0xFDF
  3039                           postinc2	equ	0xFDE
  3040                           postdec2	equ	0xFDD
  3041                           fsr2h	equ	0xFDA
  3042                           fsr2l	equ	0xFD9
  3043                           status	equ	0xFD8
  3044                           
  3045 ;; *************** function _bottle_count *****************
  3046 ;; Defined at:
  3047 ;;		line 299 in file "main.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;		None
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;		None
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;Total ram usage:        0 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:   10
  3068 ;; This function calls:
  3069 ;;		___awmod
  3070 ;;		_lcdInst
  3071 ;;		_printf
  3072 ;; This function is called by:
  3073 ;;		_main
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text10
  3078  0011DA                     __ptext10:
  3079                           	opt stack 0
  3080  0011DA                     _bottle_count:
  3081                           	opt stack 20
  3082                           
  3083                           ;main.c: 300: switch(bottle_count_disp % 3){
  3084                           
  3085                           ;incstack = 0
  3086  0011DA  D065               	goto	l4013
  3087  0011DC                     l3989:
  3088                           
  3089                           ;main.c: 302: lcdInst(0b10000000);
  3090  0011DC  0E80               	movlw	128
  3091  0011DE  EC64  F014         	call	_lcdInst
  3092                           
  3093                           ;main.c: 303: printf("Bottle Count    ");
  3094  0011E2  0E5D               	movlw	low STR_8
  3095  0011E4  0100               	movlb	0	; () banked
  3096  0011E6  6F9C               	movwf	printf@f& (0+255),b
  3097  0011E8  0EFF               	movlw	high STR_8
  3098  0011EA  0100               	movlb	0	; () banked
  3099  0011EC  6F9D               	movwf	(printf@f+1)& (0+255),b
  3100  0011EE  EC09  F000         	call	_printf	;wreg free
  3101                           
  3102                           ;main.c: 304: lcdInst(0b11000000);
  3103  0011F2  0EC0               	movlw	192
  3104  0011F4  EC64  F014         	call	_lcdInst
  3105                           
  3106                           ;main.c: 305: printf("Total: %d       ", bottle_count_array[4]);
  3107  0011F8  0E4C               	movlw	low STR_9
  3108  0011FA  0100               	movlb	0	; () banked
  3109  0011FC  6F9C               	movwf	printf@f& (0+255),b
  3110  0011FE  0EFF               	movlw	high STR_9
  3111  001200  0100               	movlb	0	; () banked
  3112  001202  6F9D               	movwf	(printf@f+1)& (0+255),b
  3113  001204  C0BF  F09E         	movff	_bottle_count_array+8,?_printf+2
  3114  001208  C0C0  F09F         	movff	_bottle_count_array+9,?_printf+3
  3115  00120C  EC09  F000         	call	_printf	;wreg free
  3116                           
  3117                           ;main.c: 306: break;
  3118  001210  0012               	return	
  3119  001212                     l3995:
  3120                           
  3121                           ;main.c: 308: lcdInst(0b10000000);
  3122  001212  0E80               	movlw	128
  3123  001214  EC64  F014         	call	_lcdInst
  3124                           
  3125                           ;main.c: 309: printf("YOP W/ CAP: %d  ", bottle_count_array[0]);
  3126  001218  0E6E               	movlw	low STR_10
  3127  00121A  0100               	movlb	0	; () banked
  3128  00121C  6F9C               	movwf	printf@f& (0+255),b
  3129  00121E  0EFF               	movlw	high STR_10
  3130  001220  0100               	movlb	0	; () banked
  3131  001222  6F9D               	movwf	(printf@f+1)& (0+255),b
  3132  001224  C0B7  F09E         	movff	_bottle_count_array,?_printf+2
  3133  001228  C0B8  F09F         	movff	_bottle_count_array+1,?_printf+3
  3134  00122C  EC09  F000         	call	_printf	;wreg free
  3135                           
  3136                           ;main.c: 310: lcdInst(0b11000000);
  3137  001230  0EC0               	movlw	192
  3138  001232  EC64  F014         	call	_lcdInst
  3139                           
  3140                           ;main.c: 311: printf("YOP NO CAP: %d  ", bottle_count_array[1]);
  3141  001236  0E7F               	movlw	low STR_11
  3142  001238  0100               	movlb	0	; () banked
  3143  00123A  6F9C               	movwf	printf@f& (0+255),b
  3144  00123C  0EFF               	movlw	high STR_11
  3145  00123E  0100               	movlb	0	; () banked
  3146  001240  6F9D               	movwf	(printf@f+1)& (0+255),b
  3147  001242  C0B9  F09E         	movff	_bottle_count_array+2,?_printf+2
  3148  001246  C0BA  F09F         	movff	_bottle_count_array+3,?_printf+3
  3149  00124A  EC09  F000         	call	_printf	;wreg free
  3150                           
  3151                           ;main.c: 312: break;
  3152  00124E  0012               	return	
  3153  001250                     l4001:
  3154                           
  3155                           ;main.c: 314: lcdInst(0b10000000);
  3156  001250  0E80               	movlw	128
  3157  001252  EC64  F014         	call	_lcdInst
  3158                           
  3159                           ;main.c: 315: printf("ESKA W/ CAP: %d ", bottle_count_array[2]);
  3160  001256  0E90               	movlw	low STR_12
  3161  001258  0100               	movlb	0	; () banked
  3162  00125A  6F9C               	movwf	printf@f& (0+255),b
  3163  00125C  0EFF               	movlw	high STR_12
  3164  00125E  0100               	movlb	0	; () banked
  3165  001260  6F9D               	movwf	(printf@f+1)& (0+255),b
  3166  001262  C0BB  F09E         	movff	_bottle_count_array+4,?_printf+2
  3167  001266  C0BC  F09F         	movff	_bottle_count_array+5,?_printf+3
  3168  00126A  EC09  F000         	call	_printf	;wreg free
  3169                           
  3170                           ;main.c: 316: lcdInst(0b11000000);
  3171  00126E  0EC0               	movlw	192
  3172  001270  EC64  F014         	call	_lcdInst
  3173                           
  3174                           ;main.c: 317: printf("ESKA NO CAP: %d ", bottle_count_array[3]);
  3175  001274  0EA1               	movlw	low STR_13
  3176  001276  0100               	movlb	0	; () banked
  3177  001278  6F9C               	movwf	printf@f& (0+255),b
  3178  00127A  0EFF               	movlw	high STR_13
  3179  00127C  0100               	movlb	0	; () banked
  3180  00127E  6F9D               	movwf	(printf@f+1)& (0+255),b
  3181  001280  C0BD  F09E         	movff	_bottle_count_array+6,?_printf+2
  3182  001284  C0BE  F09F         	movff	_bottle_count_array+7,?_printf+3
  3183  001288  EC09  F000         	call	_printf	;wreg free
  3184                           
  3185                           ;main.c: 318: break;
  3186  00128C  0012               	return	
  3187  00128E                     l4007:
  3188                           
  3189                           ;main.c: 321: lcdInst(0b10000000);
  3190  00128E  0E80               	movlw	128
  3191  001290  EC64  F014         	call	_lcdInst
  3192                           
  3193                           ;main.c: 322: printf("ERR: BAD BTLCNT");
  3194  001294  0ED3               	movlw	low STR_14
  3195  001296  0100               	movlb	0	; () banked
  3196  001298  6F9C               	movwf	printf@f& (0+255),b
  3197  00129A  0EFF               	movlw	high STR_14
  3198  00129C  0100               	movlb	0	; () banked
  3199  00129E  6F9D               	movwf	(printf@f+1)& (0+255),b
  3200  0012A0  EC09  F000         	call	_printf	;wreg free
  3201  0012A4  D7F4               	goto	l4007
  3202  0012A6                     l4013:
  3203  0012A6  C0DF  F090         	movff	_bottle_count_disp,___awmod@dividend
  3204  0012AA  C0E0  F091         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3205  0012AE  0E00               	movlw	0
  3206  0012B0  0100               	movlb	0	; () banked
  3207  0012B2  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3208  0012B4  0E03               	movlw	3
  3209  0012B6  6F92               	movwf	___awmod@divisor& (0+255),b
  3210  0012B8  ECB9  F00F         	call	___awmod	;wreg free
  3211                           
  3212                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3213                           ; Switch size 1, requested type "space"
  3214                           ; Number of cases is 1, Range of values is 0 to 0
  3215                           ; switch strategies available:
  3216                           ; Name         Instructions Cycles
  3217                           ; simple_byte            4     3 (average)
  3218                           ;	Chosen strategy is simple_byte
  3219  0012BC  0100               	movlb	0	; () banked
  3220  0012BE  5191               	movf	(?___awmod+1)& (0+255),w,b
  3221  0012C0  0A00               	xorlw	0	; case 0
  3222  0012C2  A4D8               	btfss	status,2,c
  3223  0012C4  D7E4               	goto	l4007
  3224                           
  3225                           ; BSR set to: 0
  3226                           ; Switch size 1, requested type "space"
  3227                           ; Number of cases is 3, Range of values is 0 to 2
  3228                           ; switch strategies available:
  3229                           ; Name         Instructions Cycles
  3230                           ; simple_byte           10     6 (average)
  3231                           ;	Chosen strategy is simple_byte
  3232  0012C6  0100               	movlb	0	; () banked
  3233  0012C8  5190               	movf	?___awmod& (0+255),w,b
  3234  0012CA  0A00               	xorlw	0	; case 0
  3235  0012CC  B4D8               	btfsc	status,2,c
  3236  0012CE  D786               	goto	l3989
  3237  0012D0  0A01               	xorlw	1	; case 1
  3238  0012D2  B4D8               	btfsc	status,2,c
  3239  0012D4  D79E               	goto	l3995
  3240  0012D6  0A03               	xorlw	3	; case 2
  3241  0012D8  B4D8               	btfsc	status,2,c
  3242  0012DA  D7BA               	goto	l4001
  3243  0012DC  D7D8               	goto	l4007
  3244  0012DE                     __end_of_bottle_count:
  3245                           	opt stack 0
  3246                           tblptru	equ	0xFF8
  3247                           tblptrh	equ	0xFF7
  3248                           tblptrl	equ	0xFF6
  3249                           tablat	equ	0xFF5
  3250                           prodh	equ	0xFF4
  3251                           prodl	equ	0xFF3
  3252                           intcon	equ	0xFF2
  3253                           intcon2	equ	0xFF1
  3254                           intcon3	equ	0xFF0
  3255                           postinc0	equ	0xFEE
  3256                           wreg	equ	0xFE8
  3257                           indf2	equ	0xFDF
  3258                           postinc2	equ	0xFDE
  3259                           postdec2	equ	0xFDD
  3260                           fsr2h	equ	0xFDA
  3261                           fsr2l	equ	0xFD9
  3262                           status	equ	0xFD8
  3263                           
  3264 ;; *************** function _printf *****************
  3265 ;; Defined at:
  3266 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3269 ;;		 -> STR_21(15), STR_20(16), STR_19(25), STR_18(24), 
  3270 ;;		 -> STR_17(23), STR_16(18), STR_15(23), STR_14(16), 
  3271 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  3272 ;;		 -> STR_9(17), STR_8(17), STR_7(23), STR_6(23), 
  3273 ;;		 -> STR_5(20), STR_4(17), STR_3(13), STR_2(24), 
  3274 ;;		 -> STR_1(24), 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  idx             1   42[BANK0 ] unsigned char 
  3277 ;;  tmpval          4    0        struct .
  3278 ;;  cp              3    0        PTR const unsigned char 
  3279 ;;  width           2   49[BANK0 ] int 
  3280 ;;  val             2   46[BANK0 ] unsigned int 
  3281 ;;  ap              2   43[BANK0 ] PTR void [1]
  3282 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3283 ;;  len             2    0        unsigned int 
  3284 ;;  c               1   51[BANK0 ] char 
  3285 ;;  flag            1   48[BANK0 ] unsigned char 
  3286 ;;  prec            1   45[BANK0 ] char 
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  2   28[BANK0 ] int 
  3289 ;; Registers used:
  3290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3296 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3297 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3299 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;Total ram usage:       24 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    9
  3303 ;; This function calls:
  3304 ;;		___lwdiv
  3305 ;;		___lwmod
  3306 ;;		___wmul
  3307 ;;		_isdigit
  3308 ;;		_putch
  3309 ;; This function is called by:
  3310 ;;		_standby
  3311 ;;		_date_time
  3312 ;;		_bottle_count
  3313 ;;		_bottle_time
  3314 ;;		_operation
  3315 ;;		_operationend
  3316 ;;		_emergencystop
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text11
  3321  000012                     __ptext11:
  3322                           	opt stack 0
  3323  000012                     _printf:
  3324                           	opt stack 20
  3325                           
  3326                           ;doprnt.c: 466: va_list ap;
  3327                           ;doprnt.c: 499: signed char c;
  3328                           ;doprnt.c: 501: int width;
  3329                           ;doprnt.c: 506: signed char prec;
  3330                           ;doprnt.c: 508: unsigned char flag;
  3331                           ;doprnt.c: 523: union {
  3332                           ;doprnt.c: 524: unsigned long vd;
  3333                           ;doprnt.c: 525: double integ;
  3334                           ;doprnt.c: 526: } tmpval;
  3335                           ;doprnt.c: 528: unsigned int val;
  3336                           ;doprnt.c: 529: unsigned len;
  3337                           ;doprnt.c: 530: const char * cp;
  3338                           ;doprnt.c: 533: *ap = __va_start();
  3339                           
  3340                           ;incstack = 0
  3341  000012  0E9E               	movlw	low (?_printf+2)
  3342  000014  0100               	movlb	0	; () banked
  3343  000016  6FAB               	movwf	printf@ap& (0+255),b
  3344  000018  0E00               	movlw	high (?_printf+2)
  3345  00001A  0100               	movlb	0	; () banked
  3346  00001C  6FAC               	movwf	(printf@ap+1)& (0+255),b
  3347                           
  3348                           ;doprnt.c: 536: while(c = *f++) {
  3349  00001E  D1D5               	goto	l3607
  3350  000020                     l3477:
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;doprnt.c: 538: if(c != '%')
  3354  000020  0E25               	movlw	37
  3355  000022  0100               	movlb	0	; () banked
  3356  000024  19B3               	xorwf	printf@c& (0+255),w,b
  3357  000026  B4D8               	btfsc	status,2,c
  3358  000028  D005               	goto	l3481
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;doprnt.c: 540: {
  3362                           ;doprnt.c: 541: (putch(c) );
  3363  00002A  0100               	movlb	0	; () banked
  3364  00002C  51B3               	movf	printf@c& (0+255),w,b
  3365  00002E  EC5C  F014         	call	_putch
  3366                           
  3367                           ;doprnt.c: 542: continue;
  3368  000032  D1CB               	goto	l3607
  3369  000034                     l3481:
  3370                           
  3371                           ;doprnt.c: 543: }
  3372                           ;doprnt.c: 546: width = 0;
  3373  000034  0E00               	movlw	0
  3374  000036  0100               	movlb	0	; () banked
  3375  000038  6FB2               	movwf	(printf@width+1)& (0+255),b
  3376  00003A  0E00               	movlw	0
  3377  00003C  6FB1               	movwf	printf@width& (0+255),b
  3378                           
  3379                           ;doprnt.c: 548: flag = 0;
  3380  00003E  0E00               	movlw	0
  3381  000040  0100               	movlb	0	; () banked
  3382  000042  6FB0               	movwf	printf@flag& (0+255),b
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;doprnt.c: 551: switch(*f) {
  3386                           
  3387                           ;doprnt.c: 550: for(;;) {
  3388  000044  D005               	goto	l3487
  3389  000046                     l3483:
  3390                           
  3391                           ;doprnt.c: 580: flag |= 0x04;
  3392  000046  0100               	movlb	0	; () banked
  3393  000048  85B0               	bsf	printf@flag& (0+255),2,b
  3394                           
  3395                           ;doprnt.c: 581: f++;
  3396  00004A  0100               	movlb	0	; () banked
  3397  00004C  4B9C               	infsnz	printf@f& (0+255),f,b
  3398  00004E  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3399  000050                     l3487:
  3400  000050  C09C  FFF6         	movff	printf@f,tblptrl
  3401  000054  C09D  FFF7         	movff	printf@f+1,tblptrh
  3402  000058                     	if	0	;tblptru may be non-zero
  3403  000058                     	endif
  3404  000058                     	if	0	;tblptru may be non-zero
  3405  000058                     	endif
  3406  000058  0008               	tblrd		*
  3407  00005A  50F5               	movf	tablat,w,c
  3408                           
  3409                           ; Switch size 1, requested type "space"
  3410                           ; Number of cases is 1, Range of values is 48 to 48
  3411                           ; switch strategies available:
  3412                           ; Name         Instructions Cycles
  3413                           ; simple_byte            4     3 (average)
  3414                           ;	Chosen strategy is simple_byte
  3415  00005C  0A30               	xorlw	48	; case 48
  3416  00005E  B4D8               	btfsc	status,2,c
  3417  000060  D7F2               	goto	l3483
  3418                           
  3419                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3420                           
  3421                           ;doprnt.c: 586: }
  3422                           
  3423                           ;doprnt.c: 585: break;
  3424  000062  C09C  FFF6         	movff	printf@f,tblptrl
  3425  000066  C09D  FFF7         	movff	printf@f+1,tblptrh
  3426  00006A                     	if	0	;tblptru may be non-zero
  3427  00006A                     	endif
  3428  00006A                     	if	0	;tblptru may be non-zero
  3429  00006A                     	endif
  3430  00006A  0008               	tblrd		*
  3431  00006C  50F5               	movf	tablat,w,c
  3432  00006E  ECD0  F013         	call	_isdigit
  3433  000072  A0D8               	btfss	status,0,c
  3434  000074  D048               	goto	l3507
  3435                           
  3436                           ;doprnt.c: 598: width = 0;
  3437  000076  0E00               	movlw	0
  3438  000078  0100               	movlb	0	; () banked
  3439  00007A  6FB2               	movwf	(printf@width+1)& (0+255),b
  3440  00007C  0E00               	movlw	0
  3441  00007E  6FB1               	movwf	printf@width& (0+255),b
  3442  000080                     l3493:
  3443                           
  3444                           ;doprnt.c: 600: width *= 10;
  3445  000080  C0B1  F090         	movff	printf@width,___wmul@multiplier
  3446  000084  C0B2  F091         	movff	printf@width+1,___wmul@multiplier+1
  3447  000088  0E00               	movlw	0
  3448  00008A  0100               	movlb	0	; () banked
  3449  00008C  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3450  00008E  0E0A               	movlw	10
  3451  000090  6F92               	movwf	___wmul@multiplicand& (0+255),b
  3452  000092  EC9E  F013         	call	___wmul	;wreg free
  3453  000096  C090  F0B1         	movff	?___wmul,printf@width
  3454  00009A  C091  F0B2         	movff	?___wmul+1,printf@width+1
  3455                           
  3456                           ;doprnt.c: 601: width += *f++ - '0';
  3457  00009E  0ED0               	movlw	208
  3458  0000A0  0100               	movlb	0	; () banked
  3459  0000A2  6FA6               	movwf	??_printf& (0+255),b
  3460  0000A4  0EFF               	movlw	255
  3461  0000A6  0100               	movlb	0	; () banked
  3462  0000A8  6FA7               	movwf	(??_printf+1)& (0+255),b
  3463  0000AA  C09C  FFF6         	movff	printf@f,tblptrl
  3464  0000AE  C09D  FFF7         	movff	printf@f+1,tblptrh
  3465  0000B2                     	if	0	;tblptru may be non-zero
  3466  0000B2                     	endif
  3467  0000B2                     	if	0	;tblptru may be non-zero
  3468  0000B2                     	endif
  3469  0000B2  0008               	tblrd		*
  3470  0000B4  50F5               	movf	tablat,w,c
  3471  0000B6  0100               	movlb	0	; () banked
  3472  0000B8  6FA8               	movwf	(??_printf+2)& (0+255),b
  3473  0000BA  6BA9               	clrf	(??_printf+3)& (0+255),b
  3474  0000BC  0100               	movlb	0	; () banked
  3475  0000BE  51A6               	movf	??_printf& (0+255),w,b
  3476  0000C0  0100               	movlb	0	; () banked
  3477  0000C2  27A8               	addwf	(??_printf+2)& (0+255),f,b
  3478  0000C4  0100               	movlb	0	; () banked
  3479  0000C6  51A7               	movf	(??_printf+1)& (0+255),w,b
  3480  0000C8  0100               	movlb	0	; () banked
  3481  0000CA  23A9               	addwfc	(??_printf+3)& (0+255),f,b
  3482  0000CC  0100               	movlb	0	; () banked
  3483  0000CE  51A8               	movf	(??_printf+2)& (0+255),w,b
  3484  0000D0  0100               	movlb	0	; () banked
  3485  0000D2  27B1               	addwf	printf@width& (0+255),f,b
  3486  0000D4  0100               	movlb	0	; () banked
  3487  0000D6  51A9               	movf	(??_printf+3)& (0+255),w,b
  3488  0000D8  0100               	movlb	0	; () banked
  3489  0000DA  23B2               	addwfc	(printf@width+1)& (0+255),f,b
  3490                           
  3491                           ; BSR set to: 0
  3492  0000DC  0100               	movlb	0	; () banked
  3493  0000DE  4B9C               	infsnz	printf@f& (0+255),f,b
  3494  0000E0  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3498  0000E2  C09C  FFF6         	movff	printf@f,tblptrl
  3499  0000E6  C09D  FFF7         	movff	printf@f+1,tblptrh
  3500  0000EA                     	if	0	;tblptru may be non-zero
  3501  0000EA                     	endif
  3502  0000EA                     	if	0	;tblptru may be non-zero
  3503  0000EA                     	endif
  3504  0000EA  0008               	tblrd		*
  3505  0000EC  50F5               	movf	tablat,w,c
  3506  0000EE  ECD0  F013         	call	_isdigit
  3507  0000F2  A0D8               	btfss	status,0,c
  3508  0000F4  D008               	goto	l3507
  3509  0000F6  D7C4               	goto	l3493
  3510  0000F8                     l3501:
  3511                           
  3512                           ;doprnt.c: 721: flag |= 0x80;
  3513  0000F8  0100               	movlb	0	; () banked
  3514  0000FA  8FB0               	bsf	printf@flag& (0+255),7,b
  3515                           
  3516                           ;doprnt.c: 723: break;
  3517  0000FC  D020               	goto	l3509
  3518  0000FE                     l3503:
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;doprnt.c: 818: flag |= 0xC0;
  3522  0000FE  0EC0               	movlw	192
  3523  000100  0100               	movlb	0	; () banked
  3524  000102  13B0               	iorwf	printf@flag& (0+255),f,b
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;doprnt.c: 822: }
  3528                           
  3529                           ;doprnt.c: 819: break;
  3530  000104  D01C               	goto	l3509
  3531  000106                     l3507:
  3532  000106  C09C  FFF6         	movff	printf@f,tblptrl
  3533  00010A  C09D  FFF7         	movff	printf@f+1,tblptrh
  3534  00010E  0100               	movlb	0	; () banked
  3535  000110  4B9C               	infsnz	printf@f& (0+255),f,b
  3536  000112  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3537  000114                     	if	0	;tblptru may be non-zero
  3538  000114                     	endif
  3539  000114                     	if	0	;tblptru may be non-zero
  3540  000114                     	endif
  3541  000114  0008               	tblrd		*
  3542  000116  CFF5 F0B3          	movff	tablat,printf@c
  3543  00011A  0100               	movlb	0	; () banked
  3544  00011C  51B3               	movf	printf@c& (0+255),w,b
  3545                           
  3546                           ; Switch size 1, requested type "space"
  3547                           ; Number of cases is 5, Range of values is 0 to 120
  3548                           ; switch strategies available:
  3549                           ; Name         Instructions Cycles
  3550                           ; simple_byte           16     9 (average)
  3551                           ;	Chosen strategy is simple_byte
  3552  00011E  0A00               	xorlw	0	; case 0
  3553  000120  B4D8               	btfsc	status,2,c
  3554  000122  0012               	return	
  3555  000124  0A64               	xorlw	100	; case 100
  3556  000126  B4D8               	btfsc	status,2,c
  3557  000128  D00A               	goto	l3509
  3558  00012A  0A0D               	xorlw	13	; case 105
  3559  00012C  B4D8               	btfsc	status,2,c
  3560  00012E  D007               	goto	l3509
  3561  000130  0A1C               	xorlw	28	; case 117
  3562  000132  B4D8               	btfsc	status,2,c
  3563  000134  D7E4               	goto	l3503
  3564  000136  0A0D               	xorlw	13	; case 120
  3565  000138  B4D8               	btfsc	status,2,c
  3566  00013A  D7DE               	goto	l3501
  3567  00013C  D146               	goto	l3607
  3568  00013E                     l3509:
  3569                           
  3570                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  3571  00013E  C0B0  F0A6         	movff	printf@flag,??_printf
  3572  000142  0EC0               	movlw	192
  3573  000144  0100               	movlb	0	; () banked
  3574  000146  17A6               	andwf	??_printf& (0+255),f,b
  3575  000148  A4D8               	btfss	status,2,c
  3576  00014A  D019               	goto	l3521
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;doprnt.c: 1253: {
  3580                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3581  00014C  C0AB  FFD9         	movff	printf@ap,fsr2l
  3582  000150  C0AC  FFDA         	movff	printf@ap+1,fsr2h
  3583  000154  CFDE F0AE          	movff	postinc2,printf@val
  3584  000158  CFDD F0AF          	movff	postdec2,printf@val+1
  3585                           
  3586                           ; BSR set to: 0
  3587  00015C  0E02               	movlw	2
  3588  00015E  0100               	movlb	0	; () banked
  3589  000160  27AB               	addwf	printf@ap& (0+255),f,b
  3590  000162  0E00               	movlw	0
  3591  000164  23AC               	addwfc	(printf@ap+1)& (0+255),f,b
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;doprnt.c: 1261: if((int)val < 0) {
  3595  000166  0100               	movlb	0	; () banked
  3596  000168  AFAF               	btfss	(printf@val+1)& (0+255),7,b
  3597  00016A  D053               	goto	l3555
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;doprnt.c: 1262: flag |= 0x03;
  3601  00016C  0E03               	movlw	3
  3602  00016E  0100               	movlb	0	; () banked
  3603  000170  13B0               	iorwf	printf@flag& (0+255),f,b
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;doprnt.c: 1263: val = -val;
  3607  000172  0100               	movlb	0	; () banked
  3608  000174  6DAE               	negf	printf@val& (0+255),b
  3609  000176  1FAF               	comf	(printf@val+1)& (0+255),f,b
  3610  000178  B0D8               	btfsc	status,0,c
  3611  00017A  2BAF               	incf	(printf@val+1)& (0+255),f,b
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;doprnt.c: 1264: }
  3615                           ;doprnt.c: 1266: }
  3616  00017C  D04A               	goto	l3555
  3617  00017E                     l3521:
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;doprnt.c: 1268: else
  3621                           ;doprnt.c: 1273: {
  3622                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3623  00017E  C0AB  FFD9         	movff	printf@ap,fsr2l
  3624  000182  C0AC  FFDA         	movff	printf@ap+1,fsr2h
  3625  000186  CFDE F0AE          	movff	postinc2,printf@val
  3626  00018A  CFDD F0AF          	movff	postdec2,printf@val+1
  3627                           
  3628                           ; BSR set to: 0
  3629  00018E  0E02               	movlw	2
  3630  000190  0100               	movlb	0	; () banked
  3631  000192  27AB               	addwf	printf@ap& (0+255),f,b
  3632  000194  0E00               	movlw	0
  3633  000196  23AC               	addwfc	(printf@ap+1)& (0+255),f,b
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;doprnt.c: 1287: }
  3637                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3638  000198  D03C               	goto	l3555
  3639  00019A                     l3525:
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;doprnt.c: 1302: case 0xC0:
  3643                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3644  00019A  0E01               	movlw	1
  3645  00019C  0100               	movlb	0	; () banked
  3646  00019E  6FB3               	movwf	printf@c& (0+255),b
  3647  0001A0                     l3527:
  3648                           
  3649                           ; BSR set to: 0
  3650  0001A0  0E05               	movlw	5
  3651  0001A2  0100               	movlb	0	; () banked
  3652  0001A4  19B3               	xorwf	printf@c& (0+255),w,b
  3653  0001A6  B4D8               	btfsc	status,2,c
  3654  0001A8  D040               	goto	l3557
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;doprnt.c: 1306: if(val < dpowers[c])
  3658                           
  3659                           ; BSR set to: 0
  3660                           
  3661                           ; BSR set to: 0
  3662  0001AA  0100               	movlb	0	; () banked
  3663  0001AC  51B3               	movf	printf@c& (0+255),w,b
  3664  0001AE  0D02               	mullw	2
  3665  0001B0  0E06               	movlw	low _dpowers
  3666  0001B2  24F3               	addwf	prodl,w,c
  3667  0001B4  6EF6               	movwf	tblptrl,c
  3668  0001B6  0EFE               	movlw	high _dpowers
  3669  0001B8  20F4               	addwfc	prodh,w,c
  3670  0001BA  6EF7               	movwf	tblptrh,c
  3671  0001BC                     	if	0	;There are less than 3 active tblptr bytes
  3672  0001BC                     	endif
  3673  0001BC  0009               	tblrd		*+
  3674  0001BE  50F5               	movf	tablat,w,c
  3675  0001C0  0100               	movlb	0	; () banked
  3676  0001C2  5DAE               	subwf	printf@val& (0+255),w,b
  3677  0001C4  0009               	tblrd		*+
  3678  0001C6  50F5               	movf	tablat,w,c
  3679  0001C8  0100               	movlb	0	; () banked
  3680  0001CA  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  3681  0001CC  A0D8               	btfss	status,0,c
  3682  0001CE  D02D               	goto	l3557
  3683                           
  3684                           ; BSR set to: 0
  3685                           
  3686                           ; BSR set to: 0
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;doprnt.c: 1307: break;
  3690  0001D0  0100               	movlb	0	; () banked
  3691  0001D2  2BB3               	incf	printf@c& (0+255),f,b
  3692  0001D4  D7E5               	goto	l3527
  3693  0001D6                     l3539:
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3697  0001D6  0E01               	movlw	1
  3698  0001D8  0100               	movlb	0	; () banked
  3699  0001DA  6FB3               	movwf	printf@c& (0+255),b
  3700  0001DC                     l3541:
  3701                           
  3702                           ; BSR set to: 0
  3703  0001DC  0E04               	movlw	4
  3704  0001DE  0100               	movlb	0	; () banked
  3705  0001E0  19B3               	xorwf	printf@c& (0+255),w,b
  3706  0001E2  B4D8               	btfsc	status,2,c
  3707  0001E4  D022               	goto	l3557
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3711                           
  3712                           ; BSR set to: 0
  3713                           
  3714                           ; BSR set to: 0
  3715  0001E6  0100               	movlb	0	; () banked
  3716  0001E8  51B3               	movf	printf@c& (0+255),w,b
  3717  0001EA  0D02               	mullw	2
  3718  0001EC  0E10               	movlw	low _hexpowers
  3719  0001EE  24F3               	addwf	prodl,w,c
  3720  0001F0  6EF6               	movwf	tblptrl,c
  3721  0001F2  0EFE               	movlw	high _hexpowers
  3722  0001F4  20F4               	addwfc	prodh,w,c
  3723  0001F6  6EF7               	movwf	tblptrh,c
  3724  0001F8                     	if	0	;There are less than 3 active tblptr bytes
  3725  0001F8                     	endif
  3726  0001F8  0009               	tblrd		*+
  3727  0001FA  50F5               	movf	tablat,w,c
  3728  0001FC  0100               	movlb	0	; () banked
  3729  0001FE  5DAE               	subwf	printf@val& (0+255),w,b
  3730  000200  0009               	tblrd		*+
  3731  000202  50F5               	movf	tablat,w,c
  3732  000204  0100               	movlb	0	; () banked
  3733  000206  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  3734  000208  A0D8               	btfss	status,0,c
  3735  00020A  D00F               	goto	l3557
  3736                           
  3737                           ; BSR set to: 0
  3738                           
  3739                           ; BSR set to: 0
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;doprnt.c: 1318: break;
  3743  00020C  0100               	movlb	0	; () banked
  3744  00020E  2BB3               	incf	printf@c& (0+255),f,b
  3745  000210  D7E5               	goto	l3541
  3746  000212                     l3555:
  3747                           
  3748                           ; BSR set to: 0
  3749  000212  0100               	movlb	0	; () banked
  3750  000214  51B0               	movf	printf@flag& (0+255),w,b
  3751  000216  0BC0               	andlw	192
  3752                           
  3753                           ; Switch size 1, requested type "space"
  3754                           ; Number of cases is 3, Range of values is 0 to 192
  3755                           ; switch strategies available:
  3756                           ; Name         Instructions Cycles
  3757                           ; simple_byte           10     6 (average)
  3758                           ;	Chosen strategy is simple_byte
  3759  000218  0A00               	xorlw	0	; case 0
  3760  00021A  B4D8               	btfsc	status,2,c
  3761  00021C  D7BE               	goto	l3525
  3762  00021E  0A80               	xorlw	128	; case 128
  3763  000220  B4D8               	btfsc	status,2,c
  3764  000222  D7D9               	goto	l3539
  3765  000224  0A40               	xorlw	64	; case 192
  3766  000226  B4D8               	btfsc	status,2,c
  3767  000228  D7B8               	goto	l3525
  3768  00022A                     l3557:
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3772  00022A  0100               	movlb	0	; () banked
  3773  00022C  51B1               	movf	printf@width& (0+255),w,b
  3774  00022E  0100               	movlb	0	; () banked
  3775  000230  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  3776  000232  B4D8               	btfsc	status,2,c
  3777  000234  D00B               	goto	l3563
  3778                           
  3779                           ; BSR set to: 0
  3780  000236  C0B0  F0A6         	movff	printf@flag,??_printf
  3781  00023A  0E03               	movlw	3
  3782  00023C  0100               	movlb	0	; () banked
  3783  00023E  17A6               	andwf	??_printf& (0+255),f,b
  3784  000240  B4D8               	btfsc	status,2,c
  3785  000242  D004               	goto	l3563
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;doprnt.c: 1346: width--;
  3789  000244  0100               	movlb	0	; () banked
  3790  000246  07B1               	decf	printf@width& (0+255),f,b
  3791  000248  A0D8               	btfss	status,0,c
  3792  00024A  07B2               	decf	(printf@width+1)& (0+255),f,b
  3793  00024C                     l3563:
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;doprnt.c: 1381: if(width > c)
  3797  00024C  0E80               	movlw	128
  3798  00024E  0100               	movlb	0	; () banked
  3799  000250  BFB3               	btfsc	printf@c& (0+255),7,b
  3800  000252  0E7F               	movlw	127
  3801  000254  0100               	movlb	0	; () banked
  3802  000256  6FA6               	movwf	??_printf& (0+255),b
  3803  000258  0100               	movlb	0	; () banked
  3804  00025A  51B1               	movf	printf@width& (0+255),w,b
  3805  00025C  0100               	movlb	0	; () banked
  3806  00025E  5DB3               	subwf	printf@c& (0+255),w,b
  3807  000260  0100               	movlb	0	; () banked
  3808  000262  51B2               	movf	(printf@width+1)& (0+255),w,b
  3809  000264  0A80               	xorlw	128
  3810  000266  0100               	movlb	0	; () banked
  3811  000268  59A6               	subwfb	??_printf& (0+255),w,b
  3812  00026A  B0D8               	btfsc	status,0,c
  3813  00026C  D00B               	goto	l3567
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;doprnt.c: 1382: width -= c;
  3817  00026E  0100               	movlb	0	; () banked
  3818  000270  51B3               	movf	printf@c& (0+255),w,b
  3819  000272  0100               	movlb	0	; () banked
  3820  000274  5FB1               	subwf	printf@width& (0+255),f,b
  3821  000276  0E00               	movlw	0
  3822  000278  0100               	movlb	0	; () banked
  3823  00027A  BFB3               	btfsc	printf@c& (0+255),7,b
  3824  00027C  0EFF               	movlw	255
  3825  00027E  0100               	movlb	0	; () banked
  3826  000280  5BB2               	subwfb	(printf@width+1)& (0+255),f,b
  3827  000282  D005               	goto	l3569
  3828  000284                     l3567:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;doprnt.c: 1383: else
  3832                           ;doprnt.c: 1384: width = 0;
  3833  000284  0E00               	movlw	0
  3834  000286  0100               	movlb	0	; () banked
  3835  000288  6FB2               	movwf	(printf@width+1)& (0+255),b
  3836  00028A  0E00               	movlw	0
  3837  00028C  6FB1               	movwf	printf@width& (0+255),b
  3838  00028E                     l3569:
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;doprnt.c: 1387: if(flag & 0x04) {
  3842  00028E  0100               	movlb	0	; () banked
  3843  000290  A5B0               	btfss	printf@flag& (0+255),2,b
  3844  000292  D018               	goto	l3581
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;doprnt.c: 1392: if(flag & 0x03)
  3848  000294  C0B0  F0A6         	movff	printf@flag,??_printf
  3849  000298  0E03               	movlw	3
  3850  00029A  0100               	movlb	0	; () banked
  3851  00029C  17A6               	andwf	??_printf& (0+255),f,b
  3852  00029E  B4D8               	btfsc	status,2,c
  3853  0002A0  D003               	goto	l3575
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;doprnt.c: 1393: (putch('-') );
  3857  0002A2  0E2D               	movlw	45
  3858  0002A4  EC5C  F014         	call	_putch
  3859  0002A8                     l3575:
  3860                           
  3861                           ;doprnt.c: 1415: if(width)
  3862  0002A8  0100               	movlb	0	; () banked
  3863  0002AA  51B1               	movf	printf@width& (0+255),w,b
  3864  0002AC  0100               	movlb	0	; () banked
  3865  0002AE  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  3866  0002B0  B4D8               	btfsc	status,2,c
  3867  0002B2  D025               	goto	l3591
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;doprnt.c: 1417: (putch('0') );
  3871                           
  3872                           ; BSR set to: 0
  3873                           
  3874                           ;doprnt.c: 1416: do
  3875  0002B4  0E30               	movlw	48
  3876  0002B6  EC5C  F014         	call	_putch
  3877                           
  3878                           ;doprnt.c: 1418: while(--width);
  3879  0002BA  0100               	movlb	0	; () banked
  3880  0002BC  07B1               	decf	printf@width& (0+255),f,b
  3881  0002BE  A0D8               	btfss	status,0,c
  3882  0002C0  07B2               	decf	(printf@width+1)& (0+255),f,b
  3883  0002C2  D7F2               	goto	l3575
  3884  0002C4                     l3581:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;doprnt.c: 1422: {
  3888                           ;doprnt.c: 1424: if(width
  3889                           ;doprnt.c: 1428: )
  3890  0002C4  0100               	movlb	0	; () banked
  3891  0002C6  51B1               	movf	printf@width& (0+255),w,b
  3892  0002C8  0100               	movlb	0	; () banked
  3893  0002CA  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  3894  0002CC  B4D8               	btfsc	status,2,c
  3895  0002CE  D00D               	goto	l3587
  3896  0002D0                     l3583:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;doprnt.c: 1430: (putch(' ') );
  3900  0002D0  0E20               	movlw	32
  3901  0002D2  EC5C  F014         	call	_putch
  3902                           
  3903                           ;doprnt.c: 1431: while(--width);
  3904  0002D6  0100               	movlb	0	; () banked
  3905  0002D8  07B1               	decf	printf@width& (0+255),f,b
  3906  0002DA  A0D8               	btfss	status,0,c
  3907  0002DC  07B2               	decf	(printf@width+1)& (0+255),f,b
  3908  0002DE  0100               	movlb	0	; () banked
  3909  0002E0  51B1               	movf	printf@width& (0+255),w,b
  3910  0002E2  0100               	movlb	0	; () banked
  3911  0002E4  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  3912  0002E6  A4D8               	btfss	status,2,c
  3913  0002E8  D7F3               	goto	l3583
  3914  0002EA                     l3587:
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;doprnt.c: 1438: if(flag & 0x03)
  3918  0002EA  C0B0  F0A6         	movff	printf@flag,??_printf
  3919  0002EE  0E03               	movlw	3
  3920  0002F0  0100               	movlb	0	; () banked
  3921  0002F2  17A6               	andwf	??_printf& (0+255),f,b
  3922  0002F4  B4D8               	btfsc	status,2,c
  3923  0002F6  D003               	goto	l3591
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 1439: (putch('-') );
  3927  0002F8  0E2D               	movlw	45
  3928  0002FA  EC5C  F014         	call	_putch
  3929  0002FE                     l3591:
  3930                           
  3931                           ;doprnt.c: 1469: }
  3932                           ;doprnt.c: 1472: prec = c;
  3933  0002FE  C0B3  F0AD         	movff	printf@c,printf@prec
  3934                           
  3935                           ;doprnt.c: 1474: while(prec--) {
  3936  000302  D05D               	goto	l3605
  3937  000304                     l3593:
  3938                           
  3939                           ;doprnt.c: 1486: case 0xC0:
  3940                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3941  000304  0100               	movlb	0	; () banked
  3942  000306  51AD               	movf	printf@prec& (0+255),w,b
  3943  000308  0D02               	mullw	2
  3944  00030A  0E06               	movlw	low _dpowers
  3945  00030C  24F3               	addwf	prodl,w,c
  3946  00030E  6EF6               	movwf	tblptrl,c
  3947  000310  0EFE               	movlw	high _dpowers
  3948  000312  20F4               	addwfc	prodh,w,c
  3949  000314  6EF7               	movwf	tblptrh,c
  3950  000316                     	if	0	;There are less than 3 active tblptr bytes
  3951  000316                     	endif
  3952  000316  0009               	tblrd		*+
  3953  000318  CFF5 F092          	movff	tablat,___lwdiv@divisor
  3954  00031C  000A               	tblrd		*-
  3955  00031E  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  3956  000322  C0AE  F090         	movff	printf@val,___lwdiv@dividend
  3957  000326  C0AF  F091         	movff	printf@val+1,___lwdiv@dividend+1
  3958  00032A  EC24  F011         	call	___lwdiv	;wreg free
  3959  00032E  C090  F097         	movff	?___lwdiv,___lwmod@dividend
  3960  000332  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
  3961  000336  0E00               	movlw	0
  3962  000338  0100               	movlb	0	; () banked
  3963  00033A  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3964  00033C  0E0A               	movlw	10
  3965  00033E  6F99               	movwf	___lwmod@divisor& (0+255),b
  3966  000340  ECD0  F011         	call	___lwmod	;wreg free
  3967  000344  0100               	movlb	0	; () banked
  3968  000346  5197               	movf	?___lwmod& (0+255),w,b
  3969  000348  0F30               	addlw	48
  3970  00034A  0100               	movlb	0	; () banked
  3971  00034C  6FB3               	movwf	printf@c& (0+255),b
  3972                           
  3973                           ;doprnt.c: 1491: break;
  3974  00034E  D033               	goto	l3603
  3975  000350                     l3595:
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;doprnt.c: 1499: {
  3979                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3980  000350  C0AE  F090         	movff	printf@val,___lwdiv@dividend
  3981  000354  C0AF  F091         	movff	printf@val+1,___lwdiv@dividend+1
  3982  000358  0100               	movlb	0	; () banked
  3983  00035A  51AD               	movf	printf@prec& (0+255),w,b
  3984  00035C  0D02               	mullw	2
  3985  00035E  0E10               	movlw	low _hexpowers
  3986  000360  24F3               	addwf	prodl,w,c
  3987  000362  6EF6               	movwf	tblptrl,c
  3988  000364  0EFE               	movlw	high _hexpowers
  3989  000366  20F4               	addwfc	prodh,w,c
  3990  000368  6EF7               	movwf	tblptrh,c
  3991  00036A                     	if	0	;There are less than 3 active tblptr bytes
  3992  00036A                     	endif
  3993  00036A  0009               	tblrd		*+
  3994  00036C  CFF5 F092          	movff	tablat,___lwdiv@divisor
  3995  000370  000A               	tblrd		*-
  3996  000372  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  3997  000376  EC24  F011         	call	___lwdiv	;wreg free
  3998  00037A  0100               	movlb	0	; () banked
  3999  00037C  5190               	movf	?___lwdiv& (0+255),w,b
  4000  00037E  0B0F               	andlw	15
  4001  000380  0100               	movlb	0	; () banked
  4002  000382  6FAA               	movwf	printf@idx& (0+255),b
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4006  000384  0100               	movlb	0	; () banked
  4007  000386  51AA               	movf	printf@idx& (0+255),w,b
  4008  000388  0D01               	mullw	1
  4009  00038A  0E3B               	movlw	low STR_22
  4010  00038C  24F3               	addwf	prodl,w,c
  4011  00038E  6EF6               	movwf	tblptrl,c
  4012  000390  0EFF               	movlw	high STR_22
  4013  000392  20F4               	addwfc	prodh,w,c
  4014  000394  6EF7               	movwf	tblptrh,c
  4015  000396                     	if	0	;There are less than 3 active tblptr bytes
  4016  000396                     	endif
  4017  000396  0008               	tblrd		*
  4018  000398  CFF5 F0B3          	movff	tablat,printf@c
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;doprnt.c: 1523: }
  4022                           
  4023                           ;doprnt.c: 1508: }
  4024                           ;doprnt.c: 1510: break;
  4025  00039C  D00C               	goto	l3603
  4026  00039E                     l3601:
  4027  00039E  0100               	movlb	0	; () banked
  4028  0003A0  51B0               	movf	printf@flag& (0+255),w,b
  4029  0003A2  0BC0               	andlw	192
  4030                           
  4031                           ; Switch size 1, requested type "space"
  4032                           ; Number of cases is 3, Range of values is 0 to 192
  4033                           ; switch strategies available:
  4034                           ; Name         Instructions Cycles
  4035                           ; simple_byte           10     6 (average)
  4036                           ;	Chosen strategy is simple_byte
  4037  0003A4  0A00               	xorlw	0	; case 0
  4038  0003A6  B4D8               	btfsc	status,2,c
  4039  0003A8  D7AD               	goto	l3593
  4040  0003AA  0A80               	xorlw	128	; case 128
  4041  0003AC  B4D8               	btfsc	status,2,c
  4042  0003AE  D7D0               	goto	l3595
  4043  0003B0  0A40               	xorlw	64	; case 192
  4044  0003B2  B4D8               	btfsc	status,2,c
  4045  0003B4  D7A7               	goto	l3593
  4046  0003B6                     l3603:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;doprnt.c: 1524: (putch(c) );
  4050  0003B6  0100               	movlb	0	; () banked
  4051  0003B8  51B3               	movf	printf@c& (0+255),w,b
  4052  0003BA  EC5C  F014         	call	_putch
  4053  0003BE                     l3605:
  4054  0003BE  0100               	movlb	0	; () banked
  4055  0003C0  07AD               	decf	printf@prec& (0+255),f,b
  4056  0003C2  0100               	movlb	0	; () banked
  4057  0003C4  29AD               	incf	printf@prec& (0+255),w,b
  4058  0003C6  A4D8               	btfss	status,2,c
  4059  0003C8  D7EA               	goto	l3601
  4060  0003CA                     l3607:
  4061  0003CA  C09C  FFF6         	movff	printf@f,tblptrl
  4062  0003CE  C09D  FFF7         	movff	printf@f+1,tblptrh
  4063  0003D2  0100               	movlb	0	; () banked
  4064  0003D4  4B9C               	infsnz	printf@f& (0+255),f,b
  4065  0003D6  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4066  0003D8                     	if	0	;tblptru may be non-zero
  4067  0003D8                     	endif
  4068  0003D8                     	if	0	;tblptru may be non-zero
  4069  0003D8                     	endif
  4070  0003D8  0008               	tblrd		*
  4071  0003DA  CFF5 F0B3          	movff	tablat,printf@c
  4072  0003DE  0100               	movlb	0	; () banked
  4073  0003E0  51B3               	movf	printf@c& (0+255),w,b
  4074  0003E2  B4D8               	btfsc	status,2,c
  4075  0003E4  0012               	return	
  4076  0003E6  D61C               	goto	l3477
  4077  0003E8                     __end_of_printf:
  4078                           	opt stack 0
  4079                           tblptru	equ	0xFF8
  4080                           tblptrh	equ	0xFF7
  4081                           tblptrl	equ	0xFF6
  4082                           tablat	equ	0xFF5
  4083                           prodh	equ	0xFF4
  4084                           prodl	equ	0xFF3
  4085                           intcon	equ	0xFF2
  4086                           intcon2	equ	0xFF1
  4087                           intcon3	equ	0xFF0
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           indf2	equ	0xFDF
  4091                           postinc2	equ	0xFDE
  4092                           postdec2	equ	0xFDD
  4093                           fsr2h	equ	0xFDA
  4094                           fsr2l	equ	0xFD9
  4095                           status	equ	0xFD8
  4096                           
  4097 ;; *************** function _putch *****************
  4098 ;; Defined at:
  4099 ;;		line 31 in file "lcd.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  data            1    wreg     unsigned char 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  data            1   18[BANK0 ] unsigned char 
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  1    wreg      void 
  4106 ;; Registers used:
  4107 ;;		wreg, status,2, status,0, cstack
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;Total ram usage:        1 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    8
  4120 ;; This function calls:
  4121 ;;		_lcdNibble
  4122 ;; This function is called by:
  4123 ;;		_printf
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text12
  4128  0028B8                     __ptext12:
  4129                           	opt stack 0
  4130  0028B8                     _putch:
  4131                           	opt stack 20
  4132                           
  4133                           ;incstack = 0
  4134                           ;putch@data stored from wreg
  4135  0028B8  0100               	movlb	0	; () banked
  4136  0028BA  6F92               	movwf	putch@data& (0+255),b
  4137                           
  4138                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4139  0028BC  848C               	bsf	3980,2,c	;volatile
  4140                           
  4141                           ;lcd.c: 33: lcdNibble(data);
  4142  0028BE  0100               	movlb	0	; () banked
  4143  0028C0  5192               	movf	putch@data& (0+255),w,b
  4144  0028C2  EC01  F012         	call	_lcdNibble
  4145  0028C6  0012               	return		;funcret
  4146  0028C8                     __end_of_putch:
  4147                           	opt stack 0
  4148                           tblptru	equ	0xFF8
  4149                           tblptrh	equ	0xFF7
  4150                           tblptrl	equ	0xFF6
  4151                           tablat	equ	0xFF5
  4152                           prodh	equ	0xFF4
  4153                           prodl	equ	0xFF3
  4154                           intcon	equ	0xFF2
  4155                           intcon2	equ	0xFF1
  4156                           intcon3	equ	0xFF0
  4157                           postinc0	equ	0xFEE
  4158                           wreg	equ	0xFE8
  4159                           indf2	equ	0xFDF
  4160                           postinc2	equ	0xFDE
  4161                           postdec2	equ	0xFDD
  4162                           fsr2h	equ	0xFDA
  4163                           fsr2l	equ	0xFD9
  4164                           status	equ	0xFD8
  4165                           
  4166 ;; *************** function _isdigit *****************
  4167 ;; Defined at:
  4168 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;  c               1    wreg     unsigned char 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  c               1   18[BANK0 ] unsigned char 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;		None               void
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;Total ram usage:        3 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    7
  4189 ;; This function calls:
  4190 ;;		Nothing
  4191 ;; This function is called by:
  4192 ;;		_printf
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           	psect	text13
  4197  0027A0                     __ptext13:
  4198                           	opt stack 0
  4199  0027A0                     _isdigit:
  4200                           	opt stack 21
  4201                           
  4202                           ;incstack = 0
  4203                           ;isdigit@c stored from wreg
  4204  0027A0  0100               	movlb	0	; () banked
  4205  0027A2  6F92               	movwf	isdigit@c& (0+255),b
  4206  0027A4  0E00               	movlw	0
  4207  0027A6  0100               	movlb	0	; () banked
  4208  0027A8  6F91               	movwf	_isdigit$791& (0+255),b
  4209                           
  4210                           ; BSR set to: 0
  4211  0027AA  0E3A               	movlw	58
  4212  0027AC  0100               	movlb	0	; () banked
  4213  0027AE  6192               	cpfslt	isdigit@c& (0+255),b
  4214  0027B0  D007               	goto	l3297
  4215                           
  4216                           ; BSR set to: 0
  4217  0027B2  0E2F               	movlw	47
  4218  0027B4  0100               	movlb	0	; () banked
  4219  0027B6  6592               	cpfsgt	isdigit@c& (0+255),b
  4220  0027B8  D003               	goto	l3297
  4221                           
  4222                           ; BSR set to: 0
  4223  0027BA  0E01               	movlw	1
  4224  0027BC  0100               	movlb	0	; () banked
  4225  0027BE  6F91               	movwf	_isdigit$791& (0+255),b
  4226  0027C0                     l3297:
  4227                           
  4228                           ; BSR set to: 0
  4229  0027C0  C091  F090         	movff	_isdigit$791,??_isdigit
  4230  0027C4  0100               	movlb	0	; () banked
  4231  0027C6  3190               	rrcf	??_isdigit& (0+255),w,b
  4232  0027C8  0012               	return	
  4233  0027CA                     __end_of_isdigit:
  4234                           	opt stack 0
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           intcon	equ	0xFF2
  4242                           intcon2	equ	0xFF1
  4243                           intcon3	equ	0xFF0
  4244                           postinc0	equ	0xFEE
  4245                           wreg	equ	0xFE8
  4246                           indf2	equ	0xFDF
  4247                           postinc2	equ	0xFDE
  4248                           postdec2	equ	0xFDD
  4249                           fsr2h	equ	0xFDA
  4250                           fsr2l	equ	0xFD9
  4251                           status	equ	0xFD8
  4252                           
  4253 ;; *************** function ___wmul *****************
  4254 ;; Defined at:
  4255 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4258 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  product         2   20[BANK0 ] unsigned int 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  2   16[BANK0 ] unsigned int 
  4263 ;; Registers used:
  4264 ;;		wreg, status,2, status,0, prodl, prodh
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4270 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;Total ram usage:        6 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    7
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_printf
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text14
  4285  00273C                     __ptext14:
  4286                           	opt stack 0
  4287  00273C                     ___wmul:
  4288                           	opt stack 21
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;incstack = 0
  4292  00273C  0100               	movlb	0	; () banked
  4293  00273E  5190               	movf	___wmul@multiplier& (0+255),w,b
  4294  002740  0100               	movlb	0	; () banked
  4295  002742  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4296  002744  CFF3 F094          	movff	prodl,___wmul@product
  4297  002748  CFF4 F095          	movff	prodh,___wmul@product+1
  4298  00274C  0100               	movlb	0	; () banked
  4299  00274E  5190               	movf	___wmul@multiplier& (0+255),w,b
  4300  002750  0100               	movlb	0	; () banked
  4301  002752  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4302  002754  50F3               	movf	prodl,w,c
  4303  002756  0100               	movlb	0	; () banked
  4304  002758  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4305  00275A  0100               	movlb	0	; () banked
  4306  00275C  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4307  00275E  0100               	movlb	0	; () banked
  4308  002760  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4309  002762  50F3               	movf	prodl,w,c
  4310  002764  0100               	movlb	0	; () banked
  4311  002766  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4312                           
  4313                           ; BSR set to: 0
  4314  002768  C094  F090         	movff	___wmul@product,?___wmul
  4315  00276C  C095  F091         	movff	___wmul@product+1,?___wmul+1
  4316  002770  0012               	return	
  4317  002772                     __end_of___wmul:
  4318                           	opt stack 0
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           intcon2	equ	0xFF1
  4327                           intcon3	equ	0xFF0
  4328                           postinc0	equ	0xFEE
  4329                           wreg	equ	0xFE8
  4330                           indf2	equ	0xFDF
  4331                           postinc2	equ	0xFDE
  4332                           postdec2	equ	0xFDD
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function ___lwmod *****************
  4338 ;; Defined at:
  4339 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  dividend        2   23[BANK0 ] unsigned int 
  4342 ;;  divisor         2   25[BANK0 ] unsigned int 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  counter         1   27[BANK0 ] unsigned char 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  2   23[BANK0 ] unsigned int 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4354 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;Total ram usage:        5 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    7
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_printf
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text15
  4369  0023A0                     __ptext15:
  4370                           	opt stack 0
  4371  0023A0                     ___lwmod:
  4372                           	opt stack 21
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;incstack = 0
  4376  0023A0  0100               	movlb	0	; () banked
  4377  0023A2  5199               	movf	___lwmod@divisor& (0+255),w,b
  4378  0023A4  0100               	movlb	0	; () banked
  4379  0023A6  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4380  0023A8  B4D8               	btfsc	status,2,c
  4381  0023AA  D026               	goto	l843
  4382                           
  4383                           ; BSR set to: 0
  4384  0023AC  0E01               	movlw	1
  4385  0023AE  0100               	movlb	0	; () banked
  4386  0023B0  6F9B               	movwf	___lwmod@counter& (0+255),b
  4387  0023B2  D006               	goto	l3345
  4388  0023B4                     l3343:
  4389                           
  4390                           ; BSR set to: 0
  4391  0023B4  0100               	movlb	0	; () banked
  4392  0023B6  90D8               	bcf	status,0,c
  4393  0023B8  3799               	rlcf	___lwmod@divisor& (0+255),f,b
  4394  0023BA  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4395  0023BC  0100               	movlb	0	; () banked
  4396  0023BE  2B9B               	incf	___lwmod@counter& (0+255),f,b
  4397  0023C0                     l3345:
  4398                           
  4399                           ; BSR set to: 0
  4400  0023C0  0100               	movlb	0	; () banked
  4401  0023C2  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4402  0023C4  D7F7               	goto	l3343
  4403  0023C6                     l3347:
  4404                           
  4405                           ; BSR set to: 0
  4406  0023C6  0100               	movlb	0	; () banked
  4407  0023C8  5199               	movf	___lwmod@divisor& (0+255),w,b
  4408  0023CA  0100               	movlb	0	; () banked
  4409  0023CC  5D97               	subwf	___lwmod@dividend& (0+255),w,b
  4410  0023CE  0100               	movlb	0	; () banked
  4411  0023D0  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4412  0023D2  0100               	movlb	0	; () banked
  4413  0023D4  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4414  0023D6  A0D8               	btfss	status,0,c
  4415  0023D8  D008               	goto	l3351
  4416                           
  4417                           ; BSR set to: 0
  4418  0023DA  0100               	movlb	0	; () banked
  4419  0023DC  5199               	movf	___lwmod@divisor& (0+255),w,b
  4420  0023DE  0100               	movlb	0	; () banked
  4421  0023E0  5F97               	subwf	___lwmod@dividend& (0+255),f,b
  4422  0023E2  0100               	movlb	0	; () banked
  4423  0023E4  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4424  0023E6  0100               	movlb	0	; () banked
  4425  0023E8  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4426  0023EA                     l3351:
  4427                           
  4428                           ; BSR set to: 0
  4429  0023EA  0100               	movlb	0	; () banked
  4430  0023EC  90D8               	bcf	status,0,c
  4431  0023EE  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4432  0023F0  3399               	rrcf	___lwmod@divisor& (0+255),f,b
  4433                           
  4434                           ; BSR set to: 0
  4435  0023F2  0100               	movlb	0	; () banked
  4436  0023F4  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  4437  0023F6  D7E7               	goto	l3347
  4438  0023F8                     l843:
  4439                           
  4440                           ; BSR set to: 0
  4441  0023F8  C097  F097         	movff	___lwmod@dividend,?___lwmod
  4442  0023FC  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
  4443                           
  4444                           ; BSR set to: 0
  4445  002400  0012               	return		;funcret
  4446  002402                     __end_of___lwmod:
  4447                           	opt stack 0
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           prodh	equ	0xFF4
  4453                           prodl	equ	0xFF3
  4454                           intcon	equ	0xFF2
  4455                           intcon2	equ	0xFF1
  4456                           intcon3	equ	0xFF0
  4457                           postinc0	equ	0xFEE
  4458                           wreg	equ	0xFE8
  4459                           indf2	equ	0xFDF
  4460                           postinc2	equ	0xFDE
  4461                           postdec2	equ	0xFDD
  4462                           fsr2h	equ	0xFDA
  4463                           fsr2l	equ	0xFD9
  4464                           status	equ	0xFD8
  4465                           
  4466 ;; *************** function ___lwdiv *****************
  4467 ;; Defined at:
  4468 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  dividend        2   16[BANK0 ] unsigned int 
  4471 ;;  divisor         2   18[BANK0 ] unsigned int 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  quotient        2   20[BANK0 ] unsigned int 
  4474 ;;  counter         1   22[BANK0 ] unsigned char 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  2   16[BANK0 ] unsigned int 
  4477 ;; Registers used:
  4478 ;;		wreg, status,2, status,0
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4484 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;Total ram usage:        7 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    7
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_printf
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text16
  4499  002248                     __ptext16:
  4500                           	opt stack 0
  4501  002248                     ___lwdiv:
  4502                           	opt stack 21
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;incstack = 0
  4506  002248  0E00               	movlw	0
  4507  00224A  0100               	movlb	0	; () banked
  4508  00224C  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4509  00224E  0E00               	movlw	0
  4510  002250  6F94               	movwf	___lwdiv@quotient& (0+255),b
  4511                           
  4512                           ; BSR set to: 0
  4513  002252  0100               	movlb	0	; () banked
  4514  002254  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4515  002256  0100               	movlb	0	; () banked
  4516  002258  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4517  00225A  B4D8               	btfsc	status,2,c
  4518  00225C  D02C               	goto	l833
  4519                           
  4520                           ; BSR set to: 0
  4521  00225E  0E01               	movlw	1
  4522  002260  0100               	movlb	0	; () banked
  4523  002262  6F96               	movwf	___lwdiv@counter& (0+255),b
  4524  002264  D006               	goto	l3325
  4525  002266                     l3323:
  4526                           
  4527                           ; BSR set to: 0
  4528  002266  0100               	movlb	0	; () banked
  4529  002268  90D8               	bcf	status,0,c
  4530  00226A  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
  4531  00226C  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4532  00226E  0100               	movlb	0	; () banked
  4533  002270  2B96               	incf	___lwdiv@counter& (0+255),f,b
  4534  002272                     l3325:
  4535                           
  4536                           ; BSR set to: 0
  4537  002272  0100               	movlb	0	; () banked
  4538  002274  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4539  002276  D7F7               	goto	l3323
  4540  002278                     l3327:
  4541                           
  4542                           ; BSR set to: 0
  4543  002278  0100               	movlb	0	; () banked
  4544  00227A  90D8               	bcf	status,0,c
  4545  00227C  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  4546  00227E  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4547                           
  4548                           ; BSR set to: 0
  4549  002280  0100               	movlb	0	; () banked
  4550  002282  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4551  002284  0100               	movlb	0	; () banked
  4552  002286  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
  4553  002288  0100               	movlb	0	; () banked
  4554  00228A  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4555  00228C  0100               	movlb	0	; () banked
  4556  00228E  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4557  002290  A0D8               	btfss	status,0,c
  4558  002292  D00A               	goto	l3335
  4559                           
  4560                           ; BSR set to: 0
  4561  002294  0100               	movlb	0	; () banked
  4562  002296  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4563  002298  0100               	movlb	0	; () banked
  4564  00229A  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
  4565  00229C  0100               	movlb	0	; () banked
  4566  00229E  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4567  0022A0  0100               	movlb	0	; () banked
  4568  0022A2  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4569                           
  4570                           ; BSR set to: 0
  4571  0022A4  0100               	movlb	0	; () banked
  4572  0022A6  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  4573  0022A8                     l3335:
  4574                           
  4575                           ; BSR set to: 0
  4576  0022A8  0100               	movlb	0	; () banked
  4577  0022AA  90D8               	bcf	status,0,c
  4578  0022AC  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4579  0022AE  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
  4580                           
  4581                           ; BSR set to: 0
  4582  0022B0  0100               	movlb	0	; () banked
  4583  0022B2  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  4584  0022B4  D7E1               	goto	l3327
  4585  0022B6                     l833:
  4586                           
  4587                           ; BSR set to: 0
  4588  0022B6  C094  F090         	movff	___lwdiv@quotient,?___lwdiv
  4589  0022BA  C095  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4590                           
  4591                           ; BSR set to: 0
  4592  0022BE  0012               	return		;funcret
  4593  0022C0                     __end_of___lwdiv:
  4594                           	opt stack 0
  4595                           tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           intcon	equ	0xFF2
  4602                           intcon2	equ	0xFF1
  4603                           intcon3	equ	0xFF0
  4604                           postinc0	equ	0xFEE
  4605                           wreg	equ	0xFE8
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function _lcdInst *****************
  4614 ;; Defined at:
  4615 ;;		line 26 in file "lcd.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  data            1    wreg     unsigned char 
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;  data            1   18[BANK0 ] unsigned char 
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  1    wreg      void 
  4622 ;; Registers used:
  4623 ;;		wreg, status,2, status,0, cstack
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;Total ram usage:        1 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    8
  4636 ;; This function calls:
  4637 ;;		_lcdNibble
  4638 ;; This function is called by:
  4639 ;;		_initLCD
  4640 ;;		_standby
  4641 ;;		_date_time
  4642 ;;		_bottle_count
  4643 ;;		_bottle_time
  4644 ;;		_operation
  4645 ;;		_operationend
  4646 ;;		_emergencystop
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text17
  4651  0028C8                     __ptext17:
  4652                           	opt stack 0
  4653  0028C8                     _lcdInst:
  4654                           	opt stack 21
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;incstack = 0
  4658                           ;lcdInst@data stored from wreg
  4659  0028C8  0100               	movlb	0	; () banked
  4660  0028CA  6F92               	movwf	lcdInst@data& (0+255),b
  4661                           
  4662                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4663  0028CC  948C               	bcf	3980,2,c	;volatile
  4664                           
  4665                           ;lcd.c: 28: lcdNibble(data);
  4666  0028CE  0100               	movlb	0	; () banked
  4667  0028D0  5192               	movf	lcdInst@data& (0+255),w,b
  4668  0028D2  EC01  F012         	call	_lcdNibble
  4669  0028D6  0012               	return		;funcret
  4670  0028D8                     __end_of_lcdInst:
  4671                           	opt stack 0
  4672                           tblptru	equ	0xFF8
  4673                           tblptrh	equ	0xFF7
  4674                           tblptrl	equ	0xFF6
  4675                           tablat	equ	0xFF5
  4676                           prodh	equ	0xFF4
  4677                           prodl	equ	0xFF3
  4678                           intcon	equ	0xFF2
  4679                           intcon2	equ	0xFF1
  4680                           intcon3	equ	0xFF0
  4681                           postinc0	equ	0xFEE
  4682                           wreg	equ	0xFE8
  4683                           indf2	equ	0xFDF
  4684                           postinc2	equ	0xFDE
  4685                           postdec2	equ	0xFDD
  4686                           fsr2h	equ	0xFDA
  4687                           fsr2l	equ	0xFD9
  4688                           status	equ	0xFD8
  4689                           
  4690 ;; *************** function _lcdNibble *****************
  4691 ;; Defined at:
  4692 ;;		line 36 in file "lcd.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  data            1    wreg     unsigned char 
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;  data            1   17[BANK0 ] unsigned char 
  4697 ;;  temp            1   16[BANK0 ] unsigned char 
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  1    wreg      void 
  4700 ;; Registers used:
  4701 ;;		wreg, status,2, status,0
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;Total ram usage:        2 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; Hardware stack levels required when called:    7
  4714 ;; This function calls:
  4715 ;;		Nothing
  4716 ;; This function is called by:
  4717 ;;		_lcdInst
  4718 ;;		_putch
  4719 ;; This function uses a non-reentrant model
  4720 ;;
  4721                           
  4722                           	psect	text18
  4723  002402                     __ptext18:
  4724                           	opt stack 0
  4725  002402                     _lcdNibble:
  4726                           	opt stack 20
  4727                           
  4728                           ;incstack = 0
  4729                           ;lcdNibble@data stored from wreg
  4730  002402  0100               	movlb	0	; () banked
  4731  002404  6F91               	movwf	lcdNibble@data& (0+255),b
  4732                           
  4733                           ;lcd.c: 38: char temp = data & 0xF0;
  4734  002406  0100               	movlb	0	; () banked
  4735  002408  5191               	movf	lcdNibble@data& (0+255),w,b
  4736  00240A  0BF0               	andlw	240
  4737  00240C  0100               	movlb	0	; () banked
  4738  00240E  6F90               	movwf	lcdNibble@temp& (0+255),b
  4739                           
  4740                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4741  002410  508C               	movf	3980,w,c	;volatile
  4742  002412  0B0F               	andlw	15
  4743  002414  6E8C               	movwf	3980,c	;volatile
  4744                           
  4745                           ;lcd.c: 40: LATD = temp | LATD;
  4746  002416  0100               	movlb	0	; () banked
  4747  002418  5190               	movf	lcdNibble@temp& (0+255),w,b
  4748  00241A  108C               	iorwf	3980,w,c	;volatile
  4749  00241C  6E8C               	movwf	3980,c	;volatile
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4753  00241E  968C               	bcf	3980,3,c	;volatile
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4757  002420  0E19               	movlw	25
  4758  002422                     u4047:
  4759  002422  2EE8               	decfsz	wreg,f,c
  4760  002424  D7FE               	bra	u4047
  4761                           
  4762                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4763  002426  868C               	bsf	3980,3,c	;volatile
  4764                           
  4765                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4766  002428  0E19               	movlw	25
  4767  00242A                     u4057:
  4768  00242A  2EE8               	decfsz	wreg,f,c
  4769  00242C  D7FE               	bra	u4057
  4770                           
  4771                           ;lcd.c: 47: data = data << 4;
  4772  00242E  0100               	movlb	0	; () banked
  4773  002430  3991               	swapf	lcdNibble@data& (0+255),w,b
  4774  002432  0BF0               	andlw	240
  4775  002434  0100               	movlb	0	; () banked
  4776  002436  6F91               	movwf	lcdNibble@data& (0+255),b
  4777                           
  4778                           ;lcd.c: 49: temp = data & 0xF0;
  4779  002438  0100               	movlb	0	; () banked
  4780  00243A  5191               	movf	lcdNibble@data& (0+255),w,b
  4781  00243C  0BF0               	andlw	240
  4782  00243E  0100               	movlb	0	; () banked
  4783  002440  6F90               	movwf	lcdNibble@temp& (0+255),b
  4784                           
  4785                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4786  002442  508C               	movf	3980,w,c	;volatile
  4787  002444  0B0F               	andlw	15
  4788  002446  6E8C               	movwf	3980,c	;volatile
  4789                           
  4790                           ;lcd.c: 51: LATD = temp | LATD;
  4791  002448  0100               	movlb	0	; () banked
  4792  00244A  5190               	movf	lcdNibble@temp& (0+255),w,b
  4793  00244C  108C               	iorwf	3980,w,c	;volatile
  4794  00244E  6E8C               	movwf	3980,c	;volatile
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4798  002450  968C               	bcf	3980,3,c	;volatile
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4802  002452  0E19               	movlw	25
  4803  002454                     u4067:
  4804  002454  2EE8               	decfsz	wreg,f,c
  4805  002456  D7FE               	bra	u4067
  4806                           
  4807                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4808  002458  868C               	bsf	3980,3,c	;volatile
  4809                           
  4810                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4811  00245A  0E19               	movlw	25
  4812  00245C                     u4077:
  4813  00245C  2EE8               	decfsz	wreg,f,c
  4814  00245E  D7FE               	bra	u4077
  4815  002460  0012               	return		;funcret
  4816  002462                     __end_of_lcdNibble:
  4817                           	opt stack 0
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           intcon	equ	0xFF2
  4825                           intcon2	equ	0xFF1
  4826                           intcon3	equ	0xFF0
  4827                           postinc0	equ	0xFEE
  4828                           wreg	equ	0xFE8
  4829                           indf2	equ	0xFDF
  4830                           postinc2	equ	0xFDE
  4831                           postdec2	equ	0xFDD
  4832                           fsr2h	equ	0xFDA
  4833                           fsr2l	equ	0xFD9
  4834                           status	equ	0xFD8
  4835                           
  4836 ;; *************** function ___awmod *****************
  4837 ;; Defined at:
  4838 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;  dividend        2   16[BANK0 ] int 
  4841 ;;  divisor         2   18[BANK0 ] int 
  4842 ;; Auto vars:     Size  Location     Type
  4843 ;;  sign            1   21[BANK0 ] unsigned char 
  4844 ;;  counter         1   20[BANK0 ] unsigned char 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  2   16[BANK0 ] int 
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4854 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;Total ram usage:        6 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    7
  4861 ;; This function calls:
  4862 ;;		Nothing
  4863 ;; This function is called by:
  4864 ;;		_bottle_count
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text19
  4869  001F72                     __ptext19:
  4870                           	opt stack 0
  4871  001F72                     ___awmod:
  4872                           	opt stack 22
  4873                           
  4874                           ;incstack = 0
  4875  001F72  0E00               	movlw	0
  4876  001F74  0100               	movlb	0	; () banked
  4877  001F76  6F95               	movwf	___awmod@sign& (0+255),b
  4878                           
  4879                           ; BSR set to: 0
  4880  001F78  0100               	movlb	0	; () banked
  4881  001F7A  AF91               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4882  001F7C  D008               	goto	l3701
  4883                           
  4884                           ; BSR set to: 0
  4885  001F7E  0100               	movlb	0	; () banked
  4886  001F80  6D90               	negf	___awmod@dividend& (0+255),b
  4887  001F82  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  4888  001F84  B0D8               	btfsc	status,0,c
  4889  001F86  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  4890                           
  4891                           ; BSR set to: 0
  4892  001F88  0E01               	movlw	1
  4893  001F8A  0100               	movlb	0	; () banked
  4894  001F8C  6F95               	movwf	___awmod@sign& (0+255),b
  4895  001F8E                     l3701:
  4896                           
  4897                           ; BSR set to: 0
  4898  001F8E  0100               	movlb	0	; () banked
  4899  001F90  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4900  001F92  D005               	goto	l3705
  4901                           
  4902                           ; BSR set to: 0
  4903  001F94  0100               	movlb	0	; () banked
  4904  001F96  6D92               	negf	___awmod@divisor& (0+255),b
  4905  001F98  1F93               	comf	(___awmod@divisor+1)& (0+255),f,b
  4906  001F9A  B0D8               	btfsc	status,0,c
  4907  001F9C  2B93               	incf	(___awmod@divisor+1)& (0+255),f,b
  4908  001F9E                     l3705:
  4909                           
  4910                           ; BSR set to: 0
  4911  001F9E  0100               	movlb	0	; () banked
  4912  001FA0  5192               	movf	___awmod@divisor& (0+255),w,b
  4913  001FA2  0100               	movlb	0	; () banked
  4914  001FA4  1193               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4915  001FA6  B4D8               	btfsc	status,2,c
  4916  001FA8  D026               	goto	l3721
  4917                           
  4918                           ; BSR set to: 0
  4919  001FAA  0E01               	movlw	1
  4920  001FAC  0100               	movlb	0	; () banked
  4921  001FAE  6F94               	movwf	___awmod@counter& (0+255),b
  4922  001FB0  D006               	goto	l3711
  4923  001FB2                     l3709:
  4924                           
  4925                           ; BSR set to: 0
  4926  001FB2  0100               	movlb	0	; () banked
  4927  001FB4  90D8               	bcf	status,0,c
  4928  001FB6  3792               	rlcf	___awmod@divisor& (0+255),f,b
  4929  001FB8  3793               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4930  001FBA  0100               	movlb	0	; () banked
  4931  001FBC  2B94               	incf	___awmod@counter& (0+255),f,b
  4932  001FBE                     l3711:
  4933                           
  4934                           ; BSR set to: 0
  4935  001FBE  0100               	movlb	0	; () banked
  4936  001FC0  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4937  001FC2  D7F7               	goto	l3709
  4938  001FC4                     l3713:
  4939                           
  4940                           ; BSR set to: 0
  4941  001FC4  0100               	movlb	0	; () banked
  4942  001FC6  5192               	movf	___awmod@divisor& (0+255),w,b
  4943  001FC8  0100               	movlb	0	; () banked
  4944  001FCA  5D90               	subwf	___awmod@dividend& (0+255),w,b
  4945  001FCC  0100               	movlb	0	; () banked
  4946  001FCE  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  4947  001FD0  0100               	movlb	0	; () banked
  4948  001FD2  5991               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4949  001FD4  A0D8               	btfss	status,0,c
  4950  001FD6  D008               	goto	l3717
  4951                           
  4952                           ; BSR set to: 0
  4953  001FD8  0100               	movlb	0	; () banked
  4954  001FDA  5192               	movf	___awmod@divisor& (0+255),w,b
  4955  001FDC  0100               	movlb	0	; () banked
  4956  001FDE  5F90               	subwf	___awmod@dividend& (0+255),f,b
  4957  001FE0  0100               	movlb	0	; () banked
  4958  001FE2  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  4959  001FE4  0100               	movlb	0	; () banked
  4960  001FE6  5B91               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4961  001FE8                     l3717:
  4962                           
  4963                           ; BSR set to: 0
  4964  001FE8  0100               	movlb	0	; () banked
  4965  001FEA  90D8               	bcf	status,0,c
  4966  001FEC  3393               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4967  001FEE  3392               	rrcf	___awmod@divisor& (0+255),f,b
  4968                           
  4969                           ; BSR set to: 0
  4970  001FF0  0100               	movlb	0	; () banked
  4971  001FF2  2F94               	decfsz	___awmod@counter& (0+255),f,b
  4972  001FF4  D7E7               	goto	l3713
  4973  001FF6                     l3721:
  4974                           
  4975                           ; BSR set to: 0
  4976  001FF6  0100               	movlb	0	; () banked
  4977  001FF8  5195               	movf	___awmod@sign& (0+255),w,b
  4978  001FFA  0100               	movlb	0	; () banked
  4979  001FFC  B4D8               	btfsc	status,2,c
  4980  001FFE  D005               	goto	l3725
  4981                           
  4982                           ; BSR set to: 0
  4983  002000  0100               	movlb	0	; () banked
  4984  002002  6D90               	negf	___awmod@dividend& (0+255),b
  4985  002004  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  4986  002006  B0D8               	btfsc	status,0,c
  4987  002008  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  4988  00200A                     l3725:
  4989                           
  4990                           ; BSR set to: 0
  4991  00200A  C090  F090         	movff	___awmod@dividend,?___awmod
  4992  00200E  C091  F091         	movff	___awmod@dividend+1,?___awmod+1
  4993  002012  0012               	return	
  4994  002014                     __end_of___awmod:
  4995                           	opt stack 0
  4996                           tblptru	equ	0xFF8
  4997                           tblptrh	equ	0xFF7
  4998                           tblptrl	equ	0xFF6
  4999                           tablat	equ	0xFF5
  5000                           prodh	equ	0xFF4
  5001                           prodl	equ	0xFF3
  5002                           intcon	equ	0xFF2
  5003                           intcon2	equ	0xFF1
  5004                           intcon3	equ	0xFF0
  5005                           postinc0	equ	0xFEE
  5006                           wreg	equ	0xFE8
  5007                           indf2	equ	0xFDF
  5008                           postinc2	equ	0xFDE
  5009                           postdec2	equ	0xFDD
  5010                           fsr2h	equ	0xFDA
  5011                           fsr2l	equ	0xFD9
  5012                           status	equ	0xFD8
  5013                           
  5014 ;; *************** function _I2C_Master_Init *****************
  5015 ;; Defined at:
  5016 ;;		line 14 in file "I2C.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  c               4   29[BANK0 ] const unsigned long 
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;		None
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, status,2, status,0, cstack
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5030 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;Total ram usage:        8 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    8
  5037 ;; This function calls:
  5038 ;;		___lldiv
  5039 ;; This function is called by:
  5040 ;;		_main
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           	psect	text20
  5045  002462                     __ptext20:
  5046                           	opt stack 0
  5047  002462                     _I2C_Master_Init:
  5048                           	opt stack 22
  5049                           
  5050                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;incstack = 0
  5054  002462  0E00               	movlw	0
  5055  002464  6EC7               	movwf	4039,c	;volatile
  5056                           
  5057                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  5058  002466  0E28               	movlw	40
  5059  002468  6EC6               	movwf	4038,c	;volatile
  5060                           
  5061                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  5062  00246A  0E00               	movlw	0
  5063  00246C  6EC5               	movwf	4037,c	;volatile
  5064                           
  5065                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
  5066  00246E  0E80               	movlw	128
  5067  002470  0100               	movlb	0	; () banked
  5068  002472  6F90               	movwf	___lldiv@dividend& (0+255),b
  5069  002474  0E96               	movlw	150
  5070  002476  6F91               	movwf	(___lldiv@dividend+1)& (0+255),b
  5071  002478  0E98               	movlw	152
  5072  00247A  6F92               	movwf	(___lldiv@dividend+2)& (0+255),b
  5073  00247C  0E00               	movlw	0
  5074  00247E  6F93               	movwf	(___lldiv@dividend+3)& (0+255),b
  5075  002480  C09D  F0A1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5076  002484  C09E  F0A2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5077  002488  C09F  F0A3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5078  00248C  C0A0  F0A4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5079  002490  0E02               	movlw	2
  5080  002492                     u3545:
  5081  002492  90D8               	bcf	status,0,c
  5082  002494  0100               	movlb	0	; () banked
  5083  002496  37A1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5084  002498  37A2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5085  00249A  37A3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5086  00249C  37A4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5087  00249E  2EE8               	decfsz	wreg,f,c
  5088  0024A0  D7F8               	goto	u3545
  5089  0024A2  C0A1  F094         	movff	??_I2C_Master_Init,___lldiv@divisor
  5090  0024A6  C0A2  F095         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5091  0024AA  C0A3  F096         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5092  0024AE  C0A4  F097         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5093  0024B2  ECAF  F00E         	call	___lldiv	;wreg free
  5094  0024B6  0100               	movlb	0	; () banked
  5095  0024B8  0590               	decf	?___lldiv& (0+255),w,b
  5096  0024BA  6EC8               	movwf	4040,c	;volatile
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;I2C.c: 21: TRISC3 = 1;
  5100  0024BC  8694               	bsf	3988,3,c	;volatile
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;I2C.c: 22: TRISC4 = 1;
  5104  0024BE  8894               	bsf	3988,4,c	;volatile
  5105                           
  5106                           ; BSR set to: 0
  5107  0024C0  0012               	return		;funcret
  5108  0024C2                     __end_of_I2C_Master_Init:
  5109                           	opt stack 0
  5110                           tblptru	equ	0xFF8
  5111                           tblptrh	equ	0xFF7
  5112                           tblptrl	equ	0xFF6
  5113                           tablat	equ	0xFF5
  5114                           prodh	equ	0xFF4
  5115                           prodl	equ	0xFF3
  5116                           intcon	equ	0xFF2
  5117                           intcon2	equ	0xFF1
  5118                           intcon3	equ	0xFF0
  5119                           postinc0	equ	0xFEE
  5120                           wreg	equ	0xFE8
  5121                           indf2	equ	0xFDF
  5122                           postinc2	equ	0xFDE
  5123                           postdec2	equ	0xFDD
  5124                           fsr2h	equ	0xFDA
  5125                           fsr2l	equ	0xFD9
  5126                           status	equ	0xFD8
  5127                           
  5128 ;; *************** function ___lldiv *****************
  5129 ;; Defined at:
  5130 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  dividend        4   16[BANK0 ] unsigned long 
  5133 ;;  divisor         4   20[BANK0 ] unsigned long 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  quotient        4   24[BANK0 ] unsigned long 
  5136 ;;  counter         1   28[BANK0 ] unsigned char 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  4   16[BANK0 ] unsigned long 
  5139 ;; Registers used:
  5140 ;;		wreg, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5146 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;Total ram usage:       13 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    7
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_I2C_Master_Init
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text21
  5161  001D5E                     __ptext21:
  5162                           	opt stack 0
  5163  001D5E                     ___lldiv:
  5164                           	opt stack 22
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;incstack = 0
  5168  001D5E  0E00               	movlw	0
  5169  001D60  0100               	movlb	0	; () banked
  5170  001D62  6F98               	movwf	___lldiv@quotient& (0+255),b
  5171  001D64  0E00               	movlw	0
  5172  001D66  6F99               	movwf	(___lldiv@quotient+1)& (0+255),b
  5173  001D68  0E00               	movlw	0
  5174  001D6A  6F9A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5175  001D6C  0E00               	movlw	0
  5176  001D6E  6F9B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5177                           
  5178                           ; BSR set to: 0
  5179  001D70  0100               	movlb	0	; () banked
  5180  001D72  5194               	movf	___lldiv@divisor& (0+255),w,b
  5181  001D74  0100               	movlb	0	; () banked
  5182  001D76  1195               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5183  001D78  0100               	movlb	0	; () banked
  5184  001D7A  1196               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5185  001D7C  0100               	movlb	0	; () banked
  5186  001D7E  1197               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5187  001D80  B4D8               	btfsc	status,2,c
  5188  001D82  D042               	goto	l780
  5189                           
  5190                           ; BSR set to: 0
  5191  001D84  0E01               	movlw	1
  5192  001D86  0100               	movlb	0	; () banked
  5193  001D88  6F9C               	movwf	___lldiv@counter& (0+255),b
  5194  001D8A  D008               	goto	l3737
  5195  001D8C                     l3735:
  5196                           
  5197                           ; BSR set to: 0
  5198  001D8C  0100               	movlb	0	; () banked
  5199  001D8E  90D8               	bcf	status,0,c
  5200  001D90  3794               	rlcf	___lldiv@divisor& (0+255),f,b
  5201  001D92  3795               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5202  001D94  3796               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5203  001D96  3797               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5204  001D98  0100               	movlb	0	; () banked
  5205  001D9A  2B9C               	incf	___lldiv@counter& (0+255),f,b
  5206  001D9C                     l3737:
  5207                           
  5208                           ; BSR set to: 0
  5209  001D9C  0100               	movlb	0	; () banked
  5210  001D9E  AF97               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5211  001DA0  D7F5               	goto	l3735
  5212  001DA2                     l3739:
  5213                           
  5214                           ; BSR set to: 0
  5215  001DA2  0100               	movlb	0	; () banked
  5216  001DA4  90D8               	bcf	status,0,c
  5217  001DA6  3798               	rlcf	___lldiv@quotient& (0+255),f,b
  5218  001DA8  3799               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5219  001DAA  379A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5220  001DAC  379B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5221                           
  5222                           ; BSR set to: 0
  5223  001DAE  0100               	movlb	0	; () banked
  5224  001DB0  5194               	movf	___lldiv@divisor& (0+255),w,b
  5225  001DB2  0100               	movlb	0	; () banked
  5226  001DB4  5D90               	subwf	___lldiv@dividend& (0+255),w,b
  5227  001DB6  0100               	movlb	0	; () banked
  5228  001DB8  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5229  001DBA  0100               	movlb	0	; () banked
  5230  001DBC  5991               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5231  001DBE  0100               	movlb	0	; () banked
  5232  001DC0  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5233  001DC2  0100               	movlb	0	; () banked
  5234  001DC4  5992               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5235  001DC6  0100               	movlb	0	; () banked
  5236  001DC8  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5237  001DCA  0100               	movlb	0	; () banked
  5238  001DCC  5993               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5239  001DCE  A0D8               	btfss	status,0,c
  5240  001DD0  D012               	goto	l3747
  5241                           
  5242                           ; BSR set to: 0
  5243  001DD2  0100               	movlb	0	; () banked
  5244  001DD4  5194               	movf	___lldiv@divisor& (0+255),w,b
  5245  001DD6  0100               	movlb	0	; () banked
  5246  001DD8  5F90               	subwf	___lldiv@dividend& (0+255),f,b
  5247  001DDA  0100               	movlb	0	; () banked
  5248  001DDC  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5249  001DDE  0100               	movlb	0	; () banked
  5250  001DE0  5B91               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5251  001DE2  0100               	movlb	0	; () banked
  5252  001DE4  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5253  001DE6  0100               	movlb	0	; () banked
  5254  001DE8  5B92               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5255  001DEA  0100               	movlb	0	; () banked
  5256  001DEC  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5257  001DEE  0100               	movlb	0	; () banked
  5258  001DF0  5B93               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5259                           
  5260                           ; BSR set to: 0
  5261  001DF2  0100               	movlb	0	; () banked
  5262  001DF4  8198               	bsf	___lldiv@quotient& (0+255),0,b
  5263  001DF6                     l3747:
  5264                           
  5265                           ; BSR set to: 0
  5266  001DF6  0100               	movlb	0	; () banked
  5267  001DF8  90D8               	bcf	status,0,c
  5268  001DFA  3397               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5269  001DFC  3396               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5270  001DFE  3395               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5271  001E00  3394               	rrcf	___lldiv@divisor& (0+255),f,b
  5272                           
  5273                           ; BSR set to: 0
  5274  001E02  0100               	movlb	0	; () banked
  5275  001E04  2F9C               	decfsz	___lldiv@counter& (0+255),f,b
  5276  001E06  D7CD               	goto	l3739
  5277  001E08                     l780:
  5278                           
  5279                           ; BSR set to: 0
  5280  001E08  C098  F090         	movff	___lldiv@quotient,?___lldiv
  5281  001E0C  C099  F091         	movff	___lldiv@quotient+1,?___lldiv+1
  5282  001E10  C09A  F092         	movff	___lldiv@quotient+2,?___lldiv+2
  5283  001E14  C09B  F093         	movff	___lldiv@quotient+3,?___lldiv+3
  5284                           
  5285                           ; BSR set to: 0
  5286  001E18  0012               	return		;funcret
  5287  001E1A                     __end_of___lldiv:
  5288                           	opt stack 0
  5289                           tblptru	equ	0xFF8
  5290                           tblptrh	equ	0xFF7
  5291                           tblptrl	equ	0xFF6
  5292                           tablat	equ	0xFF5
  5293                           prodh	equ	0xFF4
  5294                           prodl	equ	0xFF3
  5295                           intcon	equ	0xFF2
  5296                           intcon2	equ	0xFF1
  5297                           intcon3	equ	0xFF0
  5298                           postinc0	equ	0xFEE
  5299                           wreg	equ	0xFE8
  5300                           indf2	equ	0xFDF
  5301                           postinc2	equ	0xFDE
  5302                           postdec2	equ	0xFDD
  5303                           fsr2h	equ	0xFDA
  5304                           fsr2l	equ	0xFD9
  5305                           status	equ	0xFD8
  5306                           
  5307 ;; *************** function _I2C_ColorSens_Init *****************
  5308 ;; Defined at:
  5309 ;;		line 54 in file "I2C.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  1    wreg      void 
  5316 ;; Registers used:
  5317 ;;		wreg, status,2, status,0, cstack
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;Total ram usage:        1 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    9
  5330 ;; This function calls:
  5331 ;;		_I2C_Master_Start
  5332 ;;		_I2C_Master_Stop
  5333 ;;		_I2C_Master_Write
  5334 ;; This function is called by:
  5335 ;;		_main
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text22
  5340  001950                     __ptext22:
  5341                           	opt stack 0
  5342  001950                     _I2C_ColorSens_Init:
  5343                           	opt stack 21
  5344                           
  5345                           ;I2C.c: 55: I2C_Master_Start();
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;incstack = 0
  5349  001950  EC86  F014         	call	_I2C_Master_Start	;wreg free
  5350                           
  5351                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  5352  001954  0E00               	movlw	0
  5353  001956  0100               	movlb	0	; () banked
  5354  001958  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5355  00195A  0E52               	movlw	82
  5356  00195C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5357  00195E  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5358                           
  5359                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  5360  001962  0E00               	movlw	0
  5361  001964  0100               	movlb	0	; () banked
  5362  001966  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5363  001968  0E80               	movlw	128
  5364  00196A  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5365  00196C  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5366                           
  5367                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  5368  001970  0E00               	movlw	0
  5369  001972  0100               	movlb	0	; () banked
  5370  001974  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5371  001976  0E01               	movlw	1
  5372  001978  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5373  00197A  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5374                           
  5375                           ;I2C.c: 59: I2C_Master_Stop();
  5376  00197E  EC82  F014         	call	_I2C_Master_Stop	;wreg free
  5377                           
  5378                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  5379  001982  0E0A               	movlw	10
  5380  001984  0100               	movlb	0	; () banked
  5381  001986  6F93               	movwf	??_I2C_ColorSens_Init& (0+255),b
  5382  001988  0EBC               	movlw	188
  5383  00198A                     u4087:
  5384  00198A  2EE8               	decfsz	wreg,f,c
  5385  00198C  D7FE               	bra	u4087
  5386  00198E  2F93               	decfsz	??_I2C_ColorSens_Init& (0+255),f,b
  5387  001990  D7FC               	bra	u4087
  5388  001992  F000               	nop	
  5389                           
  5390                           ;I2C.c: 63: I2C_Master_Start();
  5391  001994  EC86  F014         	call	_I2C_Master_Start	;wreg free
  5392                           
  5393                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  5394  001998  0E00               	movlw	0
  5395  00199A  0100               	movlb	0	; () banked
  5396  00199C  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5397  00199E  0E52               	movlw	82
  5398  0019A0  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5399  0019A2  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5400                           
  5401                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  5402  0019A6  0E00               	movlw	0
  5403  0019A8  0100               	movlb	0	; () banked
  5404  0019AA  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5405  0019AC  0E80               	movlw	128
  5406  0019AE  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5407  0019B0  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5408                           
  5409                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
  5410  0019B4  0E00               	movlw	0
  5411  0019B6  0100               	movlb	0	; () banked
  5412  0019B8  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5413  0019BA  0E03               	movlw	3
  5414  0019BC  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5415  0019BE  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5416                           
  5417                           ;I2C.c: 67: I2C_Master_Stop();
  5418  0019C2  EC82  F014         	call	_I2C_Master_Stop	;wreg free
  5419                           
  5420                           ;I2C.c: 69: I2C_Master_Start();
  5421  0019C6  EC86  F014         	call	_I2C_Master_Start	;wreg free
  5422                           
  5423                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  5424  0019CA  0E00               	movlw	0
  5425  0019CC  0100               	movlb	0	; () banked
  5426  0019CE  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5427  0019D0  0E52               	movlw	82
  5428  0019D2  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5429  0019D4  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5430                           
  5431                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  5432  0019D8  0E00               	movlw	0
  5433  0019DA  0100               	movlb	0	; () banked
  5434  0019DC  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5435  0019DE  0E8F               	movlw	143
  5436  0019E0  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5437  0019E2  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5438                           
  5439                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  5440  0019E6  0E00               	movlw	0
  5441  0019E8  0100               	movlb	0	; () banked
  5442  0019EA  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5443  0019EC  0E02               	movlw	2
  5444  0019EE  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5445  0019F0  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5446                           
  5447                           ;I2C.c: 73: I2C_Master_Stop();
  5448  0019F4  EC82  F014         	call	_I2C_Master_Stop	;wreg free
  5449                           
  5450                           ;I2C.c: 90: I2C_Master_Start();
  5451  0019F8  EC86  F014         	call	_I2C_Master_Start	;wreg free
  5452                           
  5453                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
  5454  0019FC  0E00               	movlw	0
  5455  0019FE  0100               	movlb	0	; () banked
  5456  001A00  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5457  001A02  0E52               	movlw	82
  5458  001A04  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5459  001A06  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5460                           
  5461                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
  5462  001A0A  0E00               	movlw	0
  5463  001A0C  0100               	movlb	0	; () banked
  5464  001A0E  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5465  001A10  0E81               	movlw	129
  5466  001A12  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5467  001A14  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5468                           
  5469                           ;I2C.c: 93: I2C_Master_Write(0b11111110);
  5470  001A18  0E00               	movlw	0
  5471  001A1A  0100               	movlb	0	; () banked
  5472  001A1C  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5473  001A1E  0EFE               	movlw	254
  5474  001A20  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5475  001A22  EC78  F014         	call	_I2C_Master_Write	;wreg free
  5476                           
  5477                           ;I2C.c: 94: I2C_Master_Stop();
  5478  001A26  EC82  F014         	call	_I2C_Master_Stop	;wreg free
  5479  001A2A  0012               	return		;funcret
  5480  001A2C                     __end_of_I2C_ColorSens_Init:
  5481                           	opt stack 0
  5482                           tblptru	equ	0xFF8
  5483                           tblptrh	equ	0xFF7
  5484                           tblptrl	equ	0xFF6
  5485                           tablat	equ	0xFF5
  5486                           prodh	equ	0xFF4
  5487                           prodl	equ	0xFF3
  5488                           intcon	equ	0xFF2
  5489                           intcon2	equ	0xFF1
  5490                           intcon3	equ	0xFF0
  5491                           postinc0	equ	0xFEE
  5492                           wreg	equ	0xFE8
  5493                           indf2	equ	0xFDF
  5494                           postinc2	equ	0xFDE
  5495                           postdec2	equ	0xFDD
  5496                           fsr2h	equ	0xFDA
  5497                           fsr2l	equ	0xFD9
  5498                           status	equ	0xFD8
  5499                           
  5500 ;; *************** function _I2C_Master_Write *****************
  5501 ;; Defined at:
  5502 ;;		line 48 in file "I2C.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  d               2   17[BANK0 ] unsigned int 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;		None
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  1    wreg      void 
  5509 ;; Registers used:
  5510 ;;		wreg, status,2, status,0, cstack
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5516 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;Total ram usage:        2 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; Hardware stack levels required when called:    8
  5523 ;; This function calls:
  5524 ;;		_I2C_Master_Wait
  5525 ;; This function is called by:
  5526 ;;		_I2C_ColorSens_Init
  5527 ;;		_date_time
  5528 ;;		_read_colorsensor
  5529 ;;		_set_time
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text23
  5534  0028F0                     __ptext23:
  5535                           	opt stack 0
  5536  0028F0                     _I2C_Master_Write:
  5537                           	opt stack 20
  5538                           
  5539                           ;I2C.c: 50: I2C_Master_Wait();
  5540                           
  5541                           ;incstack = 0
  5542  0028F0  EC49  F014         	call	_I2C_Master_Wait	;wreg free
  5543                           
  5544                           ;I2C.c: 51: SSPBUF = d;
  5545  0028F4  C091  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5546  0028F8  0012               	return		;funcret
  5547  0028FA                     __end_of_I2C_Master_Write:
  5548                           	opt stack 0
  5549                           tblptru	equ	0xFF8
  5550                           tblptrh	equ	0xFF7
  5551                           tblptrl	equ	0xFF6
  5552                           tablat	equ	0xFF5
  5553                           prodh	equ	0xFF4
  5554                           prodl	equ	0xFF3
  5555                           intcon	equ	0xFF2
  5556                           intcon2	equ	0xFF1
  5557                           intcon3	equ	0xFF0
  5558                           postinc0	equ	0xFEE
  5559                           wreg	equ	0xFE8
  5560                           indf2	equ	0xFDF
  5561                           postinc2	equ	0xFDE
  5562                           postdec2	equ	0xFDD
  5563                           fsr2h	equ	0xFDA
  5564                           fsr2l	equ	0xFD9
  5565                           status	equ	0xFD8
  5566                           
  5567 ;; *************** function _I2C_Master_Stop *****************
  5568 ;; Defined at:
  5569 ;;		line 42 in file "I2C.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;		None
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;		None
  5574 ;; Return value:  Size  Location     Type
  5575 ;;                  1    wreg      void 
  5576 ;; Registers used:
  5577 ;;		wreg, status,2, status,0, cstack
  5578 ;; Tracked objects:
  5579 ;;		On entry : 0/0
  5580 ;;		On exit  : 0/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;Total ram usage:        0 bytes
  5588 ;; Hardware stack levels used:    1
  5589 ;; Hardware stack levels required when called:    8
  5590 ;; This function calls:
  5591 ;;		_I2C_Master_Wait
  5592 ;; This function is called by:
  5593 ;;		_I2C_ColorSens_Init
  5594 ;;		_date_time
  5595 ;;		_read_colorsensor
  5596 ;;		_set_time
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text24
  5601  002904                     __ptext24:
  5602                           	opt stack 0
  5603  002904                     _I2C_Master_Stop:
  5604                           	opt stack 20
  5605                           
  5606                           ;I2C.c: 44: I2C_Master_Wait();
  5607                           
  5608                           ;incstack = 0
  5609  002904  EC49  F014         	call	_I2C_Master_Wait	;wreg free
  5610                           
  5611                           ;I2C.c: 45: PEN = 1;
  5612  002908  84C5               	bsf	4037,2,c	;volatile
  5613  00290A  0012               	return		;funcret
  5614  00290C                     __end_of_I2C_Master_Stop:
  5615                           	opt stack 0
  5616                           tblptru	equ	0xFF8
  5617                           tblptrh	equ	0xFF7
  5618                           tblptrl	equ	0xFF6
  5619                           tablat	equ	0xFF5
  5620                           prodh	equ	0xFF4
  5621                           prodl	equ	0xFF3
  5622                           intcon	equ	0xFF2
  5623                           intcon2	equ	0xFF1
  5624                           intcon3	equ	0xFF0
  5625                           postinc0	equ	0xFEE
  5626                           wreg	equ	0xFE8
  5627                           indf2	equ	0xFDF
  5628                           postinc2	equ	0xFDE
  5629                           postdec2	equ	0xFDD
  5630                           fsr2h	equ	0xFDA
  5631                           fsr2l	equ	0xFD9
  5632                           status	equ	0xFD8
  5633                           
  5634 ;; *************** function _I2C_Master_Start *****************
  5635 ;; Defined at:
  5636 ;;		line 30 in file "I2C.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;		None
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;		None
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  1    wreg      void 
  5643 ;; Registers used:
  5644 ;;		wreg, status,2, status,0, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;Total ram usage:        0 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    8
  5657 ;; This function calls:
  5658 ;;		_I2C_Master_Wait
  5659 ;; This function is called by:
  5660 ;;		_I2C_ColorSens_Init
  5661 ;;		_date_time
  5662 ;;		_read_colorsensor
  5663 ;;		_set_time
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text25
  5668  00290C                     __ptext25:
  5669                           	opt stack 0
  5670  00290C                     _I2C_Master_Start:
  5671                           	opt stack 20
  5672                           
  5673                           ;I2C.c: 32: I2C_Master_Wait();
  5674                           
  5675                           ;incstack = 0
  5676  00290C  EC49  F014         	call	_I2C_Master_Wait	;wreg free
  5677                           
  5678                           ;I2C.c: 33: SEN = 1;
  5679  002910  80C5               	bsf	4037,0,c	;volatile
  5680  002912  0012               	return		;funcret
  5681  002914                     __end_of_I2C_Master_Start:
  5682                           	opt stack 0
  5683                           tblptru	equ	0xFF8
  5684                           tblptrh	equ	0xFF7
  5685                           tblptrl	equ	0xFF6
  5686                           tablat	equ	0xFF5
  5687                           prodh	equ	0xFF4
  5688                           prodl	equ	0xFF3
  5689                           intcon	equ	0xFF2
  5690                           intcon2	equ	0xFF1
  5691                           intcon3	equ	0xFF0
  5692                           postinc0	equ	0xFEE
  5693                           wreg	equ	0xFE8
  5694                           indf2	equ	0xFDF
  5695                           postinc2	equ	0xFDE
  5696                           postdec2	equ	0xFDD
  5697                           fsr2h	equ	0xFDA
  5698                           fsr2l	equ	0xFD9
  5699                           status	equ	0xFD8
  5700                           
  5701 ;; *************** function _I2C_Master_Wait *****************
  5702 ;; Defined at:
  5703 ;;		line 25 in file "I2C.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;		None
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;		None
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  1    wreg      void 
  5710 ;; Registers used:
  5711 ;;		wreg, status,2, status,0
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;Total ram usage:        1 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    7
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_I2C_Master_Start
  5728 ;;		_I2C_Master_Stop
  5729 ;;		_I2C_Master_Write
  5730 ;;		_I2C_Master_Read
  5731 ;;		_I2C_Master_RepeatedStart
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           	psect	text26
  5736  002892                     __ptext26:
  5737                           	opt stack 0
  5738  002892                     _I2C_Master_Wait:
  5739                           	opt stack 20
  5740  002892                     l34:
  5741  002892  B4C7               	btfsc	4039,2,c	;volatile
  5742  002894  D7FE               	goto	l34
  5743  002896  CFC5 F090          	movff	4037,??_I2C_Master_Wait	;volatile
  5744  00289A  0E1F               	movlw	31
  5745  00289C  0100               	movlb	0	; () banked
  5746  00289E  1790               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5747  0028A0  B4D8               	btfsc	status,2,c
  5748  0028A2  0012               	return	
  5749  0028A4  D7F6               	goto	l34
  5750  0028A6                     __end_of_I2C_Master_Wait:
  5751                           	opt stack 0
  5752                           tblptru	equ	0xFF8
  5753                           tblptrh	equ	0xFF7
  5754                           tblptrl	equ	0xFF6
  5755                           tablat	equ	0xFF5
  5756                           prodh	equ	0xFF4
  5757                           prodl	equ	0xFF3
  5758                           intcon	equ	0xFF2
  5759                           intcon2	equ	0xFF1
  5760                           intcon3	equ	0xFF0
  5761                           postinc0	equ	0xFEE
  5762                           wreg	equ	0xFE8
  5763                           indf2	equ	0xFDF
  5764                           postinc2	equ	0xFDE
  5765                           postdec2	equ	0xFDD
  5766                           fsr2h	equ	0xFDA
  5767                           fsr2l	equ	0xFD9
  5768                           status	equ	0xFD8
  5769                           
  5770 ;; *************** function _isr *****************
  5771 ;; Defined at:
  5772 ;;		line 93 in file "main.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  i               1  114[COMRAM] unsigned char 
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  1    wreg      void 
  5779 ;; Registers used:
  5780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5787 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5788 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5789 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;Total ram usage:       19 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; Hardware stack levels required when called:    6
  5793 ;; This function calls:
  5794 ;;		_dec_to_hex
  5795 ;;		_read_time
  5796 ;;		_servo_rotate0
  5797 ;;		i2___wmul
  5798 ;;		i2_lcdInst
  5799 ;;		i2_printf
  5800 ;;		i2_read_colorsensor
  5801 ;; This function is called by:
  5802 ;;		Interrupt level 2
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	intcode
  5807  000008                     __pintcode:
  5808                           	opt stack 0
  5809  000008                     _isr:
  5810                           	opt stack 20
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;incstack = 0
  5814  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5815  00000A  EDF4  F001         	call	int_func,f	;refresh shadow registers
  5816                           tblptru	equ	0xFF8
  5817                           tblptrh	equ	0xFF7
  5818                           tblptrl	equ	0xFF6
  5819                           tablat	equ	0xFF5
  5820                           prodh	equ	0xFF4
  5821                           prodl	equ	0xFF3
  5822                           intcon	equ	0xFF2
  5823                           intcon2	equ	0xFF1
  5824                           intcon3	equ	0xFF0
  5825                           postinc0	equ	0xFEE
  5826                           wreg	equ	0xFE8
  5827                           indf2	equ	0xFDF
  5828                           postinc2	equ	0xFDE
  5829                           postdec2	equ	0xFDD
  5830                           fsr2h	equ	0xFDA
  5831                           fsr2l	equ	0xFD9
  5832                           status	equ	0xFD8
  5833                           
  5834                           	psect	intcode_body
  5835  0003E8                     __pintcode_body:
  5836                           	opt stack 20
  5837  0003E8                     int_func:
  5838                           	opt stack 20
  5839  0003E8  0006               	pop		; remove dummy address from shadow register refresh
  5840  0003EA  CFFA F082          	movff	pclath,??_isr+2
  5841  0003EE  CFFB F083          	movff	pclatu,??_isr+3
  5842  0003F2  CFE9 F084          	movff	fsr0l,??_isr+4
  5843  0003F6  CFEA F085          	movff	fsr0h,??_isr+5
  5844  0003FA  CFE1 F086          	movff	fsr1l,??_isr+6
  5845  0003FE  CFE2 F087          	movff	fsr1h,??_isr+7
  5846  000402  CFD9 F088          	movff	fsr2l,??_isr+8
  5847  000406  CFDA F089          	movff	fsr2h,??_isr+9
  5848  00040A  CFF3 F08A          	movff	prodl,??_isr+10
  5849  00040E  CFF4 F08B          	movff	prodh,??_isr+11
  5850  000412  CFF6 F08C          	movff	tblptrl,??_isr+12
  5851  000416  CFF7 F08D          	movff	tblptrh,??_isr+13
  5852  00041A  CFF8 F08E          	movff	tblptru,??_isr+14
  5853  00041E  CFF5 F08F          	movff	tablat,??_isr+15
  5854                           
  5855                           ;main.c: 94: if (INT1IF) {
  5856  000422  B0F0               	btfsc	intcon3,0,c	;volatile
  5857  000424  D0D9               	goto	i2l4389
  5858  000426  D104               	goto	i2l241
  5859  000428                     i2l243:
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;main.c: 97: LATAbits.LATA2 = 1;
  5863  000428  8489               	bsf	3977,2,c	;volatile
  5864                           
  5865                           ;main.c: 98: TMR0IE = 1;
  5866  00042A  8AF2               	bsf	intcon,5,c	;volatile
  5867                           
  5868                           ;main.c: 99: TMR0ON = 1;
  5869  00042C  8ED5               	bsf	4053,7,c	;volatile
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;main.c: 100: TMR0 = 0;
  5873  00042E  0E00               	movlw	0
  5874  000430  6ED7               	movwf	4055,c	;volatile
  5875  000432  0E00               	movlw	0
  5876  000434  6ED6               	movwf	4054,c	;volatile
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;main.c: 102: read_time();
  5880  000436  EC9C  F011         	call	_read_time	;wreg free
  5881                           
  5882                           ;main.c: 103: start_time[1] = time[1];
  5883  00043A  C0CA  F07B         	movff	_time+1,_start_time+1
  5884                           
  5885                           ;main.c: 104: start_time[0] = time[0];
  5886  00043E  C0C9  F07A         	movff	_time,_start_time
  5887                           
  5888                           ;main.c: 106: lcdInst(0b00000001);
  5889  000442  0E01               	movlw	1
  5890  000444  EC72  F014         	call	i2_lcdInst
  5891                           
  5892                           ;main.c: 107: bottle_count_disp = -1;
  5893  000448  0100               	movlb	0	; () banked
  5894  00044A  69DF               	setf	_bottle_count_disp& (0+255),b
  5895  00044C  69E0               	setf	(_bottle_count_disp+1)& (0+255),b
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;main.c: 108: curr_state = OPERATION;
  5899  00044E  0E02               	movlw	2
  5900  000450  D0B2               	goto	L7
  5901  000452                     i2l4333:
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;main.c: 111: bottle_count_disp += 1;
  5905  000452  0100               	movlb	0	; () banked
  5906  000454  4BDF               	infsnz	_bottle_count_disp& (0+255),f,b
  5907  000456  2BE0               	incf	(_bottle_count_disp+1)& (0+255),f,b
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;main.c: 112: curr_state = BOTTLECOUNT;
  5911  000458  0E05               	movlw	5
  5912  00045A  0100               	movlb	0	; () banked
  5913  00045C  6FDE               	movwf	_curr_state& (0+255),b
  5914  00045E                     i2l4337:
  5915  00045E  0E1F               	movlw	31
  5916  000460  1881               	xorwf	3969,w,c	;volatile
  5917  000462  A4D8               	btfss	status,2,c
  5918  000464  D0E3               	goto	i2l244
  5919  000466  D7FB               	goto	i2l4337
  5920  000468                     i2l4339:
  5921                           
  5922                           ;main.c: 116: operation_time = etime - stime;
  5923  000468  C07C  F080         	movff	_stime,??_isr
  5924  00046C  C07D  F081         	movff	_stime+1,??_isr+1
  5925  000470  0100               	movlb	0	; () banked
  5926  000472  1F80               	comf	??_isr& (0+255),f,b
  5927  000474  1F81               	comf	(??_isr+1)& (0+255),f,b
  5928  000476  4B80               	infsnz	??_isr& (0+255),f,b
  5929  000478  2B81               	incf	(??_isr+1)& (0+255),f,b
  5930  00047A  5078               	movf	_etime,w,c
  5931  00047C  0100               	movlb	0	; () banked
  5932  00047E  2580               	addwf	??_isr& (0+255),w,b
  5933  000480  0100               	movlb	0	; () banked
  5934  000482  6FDA               	movwf	_operation_time& (0+255),b
  5935  000484  5079               	movf	_etime+1,w,c
  5936  000486  0100               	movlb	0	; () banked
  5937  000488  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5938  00048A  0100               	movlb	0	; () banked
  5939  00048C  6FDB               	movwf	(_operation_time+1)& (0+255),b
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;main.c: 117: bottle_count_disp = -1;
  5943  00048E  0100               	movlb	0	; () banked
  5944  000490  69DF               	setf	_bottle_count_disp& (0+255),b
  5945  000492  69E0               	setf	(_bottle_count_disp+1)& (0+255),b
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;main.c: 118: curr_state = BOTTLETIME;
  5949  000494  0E06               	movlw	6
  5950  000496  D08F               	goto	L7
  5951  000498                     i2l250:
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;main.c: 121: bottle_count_disp = -1;
  5955  000498  0100               	movlb	0	; () banked
  5956  00049A  69DF               	setf	_bottle_count_disp& (0+255),b
  5957  00049C  69E0               	setf	(_bottle_count_disp+1)& (0+255),b
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;main.c: 122: curr_state = DATETIME;
  5961  00049E  0E04               	movlw	4
  5962  0004A0  D08A               	goto	L7
  5963  0004A2                     i2l251:
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;main.c: 125: LATAbits.LATA2 = 0;
  5967  0004A2  9489               	bcf	3977,2,c	;volatile
  5968                           
  5969                           ;main.c: 126: TMR0IE = 0;
  5970  0004A4  9AF2               	bcf	intcon,5,c	;volatile
  5971                           
  5972                           ;main.c: 127: TMR0ON = 0;
  5973  0004A6  9ED5               	bcf	4053,7,c	;volatile
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;main.c: 129: read_time();
  5977  0004A8  EC9C  F011         	call	_read_time	;wreg free
  5978                           
  5979                           ;main.c: 130: end_time[1] = time[1];
  5980  0004AC  C0CA  F077         	movff	_time+1,_end_time+1
  5981                           
  5982                           ;main.c: 131: end_time[0] = time[0];
  5983  0004B0  C0C9  F076         	movff	_time,_end_time
  5984                           
  5985                           ;main.c: 132: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5986  0004B4  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  5987  0004B8  6A64               	clrf	dec_to_hex@num+1,c
  5988  0004BA  EC6F  F009         	call	_dec_to_hex	;wreg free
  5989  0004BE  C063  F074         	movff	?_dec_to_hex,_isr$1325
  5990  0004C2  C064  F075         	movff	?_dec_to_hex+1,_isr$1325+1
  5991                           
  5992                           ;main.c: 132: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5993  0004C6  C074  F001         	movff	_isr$1325,i2___wmul@multiplier
  5994  0004CA  C075  F002         	movff	_isr$1325+1,i2___wmul@multiplier+1
  5995  0004CE  0E00               	movlw	0
  5996  0004D0  6E04               	movwf	i2___wmul@multiplicand+1,c
  5997  0004D2  0E3C               	movlw	60
  5998  0004D4  6E03               	movwf	i2___wmul@multiplicand,c
  5999  0004D6  ECF8  F013         	call	i2___wmul	;wreg free
  6000  0004DA  C001  F080         	movff	?i2___wmul,??_isr
  6001  0004DE  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6002  0004E2  C07A  F063         	movff	_start_time,dec_to_hex@num
  6003  0004E6  6A64               	clrf	dec_to_hex@num+1,c
  6004  0004E8  EC6F  F009         	call	_dec_to_hex	;wreg free
  6005  0004EC  5063               	movf	?_dec_to_hex,w,c
  6006  0004EE  0100               	movlb	0	; () banked
  6007  0004F0  2580               	addwf	??_isr& (0+255),w,b
  6008  0004F2  6E7C               	movwf	_stime,c
  6009  0004F4  5064               	movf	?_dec_to_hex+1,w,c
  6010  0004F6  0100               	movlb	0	; () banked
  6011  0004F8  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6012  0004FA  6E7D               	movwf	_stime+1,c
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;main.c: 133: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6016  0004FC  C077  F063         	movff	_end_time+1,dec_to_hex@num
  6017  000500  6A64               	clrf	dec_to_hex@num+1,c
  6018  000502  EC6F  F009         	call	_dec_to_hex	;wreg free
  6019  000506  C063  F074         	movff	?_dec_to_hex,_isr$1325
  6020  00050A  C064  F075         	movff	?_dec_to_hex+1,_isr$1325+1
  6021                           
  6022                           ;main.c: 133: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6023  00050E  C074  F001         	movff	_isr$1325,i2___wmul@multiplier
  6024  000512  C075  F002         	movff	_isr$1325+1,i2___wmul@multiplier+1
  6025  000516  0E00               	movlw	0
  6026  000518  6E04               	movwf	i2___wmul@multiplicand+1,c
  6027  00051A  0E3C               	movlw	60
  6028  00051C  6E03               	movwf	i2___wmul@multiplicand,c
  6029  00051E  ECF8  F013         	call	i2___wmul	;wreg free
  6030  000522  C001  F080         	movff	?i2___wmul,??_isr
  6031  000526  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6032  00052A  C076  F063         	movff	_end_time,dec_to_hex@num
  6033  00052E  6A64               	clrf	dec_to_hex@num+1,c
  6034  000530  EC6F  F009         	call	_dec_to_hex	;wreg free
  6035  000534  5063               	movf	?_dec_to_hex,w,c
  6036  000536  0100               	movlb	0	; () banked
  6037  000538  2580               	addwf	??_isr& (0+255),w,b
  6038  00053A  6E78               	movwf	_etime,c
  6039  00053C  5064               	movf	?_dec_to_hex+1,w,c
  6040  00053E  0100               	movlb	0	; () banked
  6041  000540  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6042  000542  6E79               	movwf	_etime+1,c
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;main.c: 134: lcdInst(0b00000001);
  6046  000544  0E01               	movlw	1
  6047  000546  EC72  F014         	call	i2_lcdInst
  6048                           
  6049                           ;main.c: 135: bottle_count_disp = -1;
  6050  00054A  0100               	movlb	0	; () banked
  6051  00054C  69DF               	setf	_bottle_count_disp& (0+255),b
  6052  00054E  69E0               	setf	(_bottle_count_disp+1)& (0+255),b
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;main.c: 136: curr_state = OPERATIONEND;
  6056  000550  0E03               	movlw	3
  6057  000552  D031               	goto	L7
  6058  000554                     i2l4367:
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;main.c: 139: read_colorsensor();
  6062  000554  ECE1  F00A         	call	i2_read_colorsensor	;wreg free
  6063                           
  6064                           ;main.c: 140: lcdInst(0b10000000);
  6065  000558  0E80               	movlw	128
  6066  00055A  EC72  F014         	call	i2_lcdInst
  6067                           
  6068                           ;main.c: 141: printf("C%u R%u                ", color[0], color[1]);
  6069  00055E  0E89               	movlw	low STR_1
  6070  000560  6E0D               	movwf	i2printf@f,c
  6071  000562  0EFE               	movlw	high STR_1
  6072  000564  6E0E               	movwf	i2printf@f+1,c
  6073  000566  C0C1  F00F         	movff	_color,?i2_printf+2
  6074  00056A  C0C2  F010         	movff	_color+1,?i2_printf+3
  6075  00056E  C0C3  F011         	movff	_color+2,?i2_printf+4
  6076  000572  C0C4  F012         	movff	_color+3,?i2_printf+5
  6077  000576  ECAD  F003         	call	i2_printf	;wreg free
  6078                           
  6079                           ;main.c: 142: lcdInst(0b11000000);
  6080  00057A  0EC0               	movlw	192
  6081  00057C  EC72  F014         	call	i2_lcdInst
  6082                           
  6083                           ;main.c: 143: printf("G%u B%u                ", color[2], color[3]);
  6084  000580  0E71               	movlw	low STR_2
  6085  000582  6E0D               	movwf	i2printf@f,c
  6086  000584  0EFE               	movlw	high STR_2
  6087  000586  6E0E               	movwf	i2printf@f+1,c
  6088  000588  C0C5  F00F         	movff	_color+4,?i2_printf+2
  6089  00058C  C0C6  F010         	movff	_color+5,?i2_printf+3
  6090  000590  C0C7  F011         	movff	_color+6,?i2_printf+4
  6091  000594  C0C8  F012         	movff	_color+7,?i2_printf+5
  6092  000598  ECAD  F003         	call	i2_printf	;wreg free
  6093                           
  6094                           ;main.c: 144: break;
  6095  00059C  D047               	goto	i2l244
  6096  00059E                     i2l253:
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;main.c: 146: LATAbits.LATA2 = 0;
  6100  00059E  9489               	bcf	3977,2,c	;volatile
  6101                           
  6102                           ;main.c: 147: (INTCONbits.GIE = 0);
  6103  0005A0  9EF2               	bcf	intcon,7,c	;volatile
  6104                           
  6105                           ;main.c: 148: TMR0ON = 0;
  6106  0005A2  9ED5               	bcf	4053,7,c	;volatile
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;main.c: 149: lcdInst(0b00000001);
  6110  0005A4  0E01               	movlw	1
  6111  0005A6  EC72  F014         	call	i2_lcdInst
  6112                           
  6113                           ;main.c: 150: curr_state = EMERGENCYSTOP;
  6114  0005AA  0E01               	movlw	1
  6115  0005AC  D004               	goto	L7
  6116  0005AE                     i2l254:
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;main.c: 153: bottle_count_disp = -1;
  6120  0005AE  0100               	movlb	0	; () banked
  6121  0005B0  69DF               	setf	_bottle_count_disp& (0+255),b
  6122  0005B2  69E0               	setf	(_bottle_count_disp+1)& (0+255),b
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;main.c: 154: curr_state = STANDBY;
  6126  0005B4  0E00               	movlw	0
  6127  0005B6                     L7:
  6128  0005B6  0100               	movlb	0	; () banked
  6129  0005B8  6FDE               	movwf	_curr_state& (0+255),b
  6130                           
  6131                           ;main.c: 156: break;
  6132  0005BA  D038               	goto	i2l244
  6133  0005BC                     i2l4383:
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;main.c: 158: servo_rotate0(1);
  6137  0005BC  0E00               	movlw	0
  6138  0005BE  6E02               	movwf	servo_rotate0@degree+1,c
  6139  0005C0  0E01               	movlw	1
  6140  0005C2  6E01               	movwf	servo_rotate0@degree,c
  6141  0005C4  EC0A  F010         	call	_servo_rotate0	;wreg free
  6142                           
  6143                           ;main.c: 159: break;
  6144  0005C8  D031               	goto	i2l244
  6145  0005CA                     i2l4385:
  6146                           
  6147                           ;main.c: 161: servo_rotate0(2);
  6148  0005CA  0E00               	movlw	0
  6149  0005CC  6E02               	movwf	servo_rotate0@degree+1,c
  6150  0005CE  0E02               	movlw	2
  6151  0005D0  6E01               	movwf	servo_rotate0@degree,c
  6152  0005D2  EC0A  F010         	call	_servo_rotate0	;wreg free
  6153                           
  6154                           ;main.c: 163: }
  6155                           
  6156                           ;main.c: 162: break;
  6157  0005D6  D02A               	goto	i2l244
  6158  0005D8                     i2l4389:
  6159  0005D8  3881               	swapf	3969,w,c	;volatile
  6160  0005DA  0B0F               	andlw	15
  6161  0005DC  0100               	movlb	0	; () banked
  6162  0005DE  6F80               	movwf	??_isr& (0+255),b
  6163  0005E0  6B81               	clrf	(??_isr+1)& (0+255),b
  6164                           
  6165                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6166                           ; Switch size 1, requested type "space"
  6167                           ; Number of cases is 1, Range of values is 0 to 0
  6168                           ; switch strategies available:
  6169                           ; Name         Instructions Cycles
  6170                           ; simple_byte            4     3 (average)
  6171                           ;	Chosen strategy is simple_byte
  6172  0005E2  0100               	movlb	0	; () banked
  6173  0005E4  5181               	movf	(??_isr+1)& (0+255),w,b
  6174  0005E6  0A00               	xorlw	0	; case 0
  6175  0005E8  A4D8               	btfss	status,2,c
  6176  0005EA  D020               	goto	i2l244
  6177                           
  6178                           ; BSR set to: 0
  6179                           ; Switch size 1, requested type "space"
  6180                           ; Number of cases is 10, Range of values is 0 to 14
  6181                           ; switch strategies available:
  6182                           ; Name         Instructions Cycles
  6183                           ; simple_byte           31    16 (average)
  6184                           ;	Chosen strategy is simple_byte
  6185  0005EC  0100               	movlb	0	; () banked
  6186  0005EE  5180               	movf	??_isr& (0+255),w,b
  6187  0005F0  0A00               	xorlw	0	; case 0
  6188  0005F2  B4D8               	btfsc	status,2,c
  6189  0005F4  D719               	goto	i2l243
  6190  0005F6  0A01               	xorlw	1	; case 1
  6191  0005F8  B4D8               	btfsc	status,2,c
  6192  0005FA  D72B               	goto	i2l4333
  6193  0005FC  0A03               	xorlw	3	; case 2
  6194  0005FE  B4D8               	btfsc	status,2,c
  6195  000600  D733               	goto	i2l4339
  6196  000602  0A01               	xorlw	1	; case 3
  6197  000604  B4D8               	btfsc	status,2,c
  6198  000606  D748               	goto	i2l250
  6199  000608  0A07               	xorlw	7	; case 4
  6200  00060A  B4D8               	btfsc	status,2,c
  6201  00060C  D74A               	goto	i2l251
  6202  00060E  0A01               	xorlw	1	; case 5
  6203  000610  B4D8               	btfsc	status,2,c
  6204  000612  D7A0               	goto	i2l4367
  6205  000614  0A02               	xorlw	2	; case 7
  6206  000616  B4D8               	btfsc	status,2,c
  6207  000618  D7D1               	goto	i2l4383
  6208  00061A  0A0C               	xorlw	12	; case 11
  6209  00061C  B4D8               	btfsc	status,2,c
  6210  00061E  D7D5               	goto	i2l4385
  6211  000620  0A07               	xorlw	7	; case 12
  6212  000622  B4D8               	btfsc	status,2,c
  6213  000624  D7BC               	goto	i2l253
  6214  000626  0A02               	xorlw	2	; case 14
  6215  000628  B4D8               	btfsc	status,2,c
  6216  00062A  D7C1               	goto	i2l254
  6217  00062C                     i2l244:
  6218                           
  6219                           ;main.c: 164: INT1IF = 0;
  6220  00062C  90F0               	bcf	intcon3,0,c	;volatile
  6221                           
  6222                           ;main.c: 165: }
  6223  00062E  D077               	goto	i2l265
  6224  000630                     i2l241:
  6225                           
  6226                           ;main.c: 166: else if (TMR0IF){
  6227  000630  A4F2               	btfss	intcon,2,c	;volatile
  6228  000632  D05B               	goto	i2l4415
  6229                           
  6230                           ;main.c: 167: LATAbits.LATA2 = 0;
  6231  000634  9489               	bcf	3977,2,c	;volatile
  6232                           
  6233                           ;main.c: 168: TMR0ON = 0;
  6234  000636  9ED5               	bcf	4053,7,c	;volatile
  6235                           
  6236                           ;main.c: 169: read_time();
  6237  000638  EC9C  F011         	call	_read_time	;wreg free
  6238                           
  6239                           ;main.c: 170: end_time[1] = time[1];
  6240  00063C  C0CA  F077         	movff	_time+1,_end_time+1
  6241                           
  6242                           ;main.c: 171: end_time[0] = time[0];
  6243  000640  C0C9  F076         	movff	_time,_end_time
  6244                           
  6245                           ;main.c: 172: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6246  000644  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  6247  000648  6A64               	clrf	dec_to_hex@num+1,c
  6248  00064A  EC6F  F009         	call	_dec_to_hex	;wreg free
  6249  00064E  C063  F074         	movff	?_dec_to_hex,_isr$1325
  6250  000652  C064  F075         	movff	?_dec_to_hex+1,_isr$1325+1
  6251                           
  6252                           ;main.c: 172: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6253  000656  C074  F001         	movff	_isr$1325,i2___wmul@multiplier
  6254  00065A  C075  F002         	movff	_isr$1325+1,i2___wmul@multiplier+1
  6255  00065E  0E00               	movlw	0
  6256  000660  6E04               	movwf	i2___wmul@multiplicand+1,c
  6257  000662  0E3C               	movlw	60
  6258  000664  6E03               	movwf	i2___wmul@multiplicand,c
  6259  000666  ECF8  F013         	call	i2___wmul	;wreg free
  6260  00066A  C001  F080         	movff	?i2___wmul,??_isr
  6261  00066E  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6262  000672  C07A  F063         	movff	_start_time,dec_to_hex@num
  6263  000676  6A64               	clrf	dec_to_hex@num+1,c
  6264  000678  EC6F  F009         	call	_dec_to_hex	;wreg free
  6265  00067C  5063               	movf	?_dec_to_hex,w,c
  6266  00067E  0100               	movlb	0	; () banked
  6267  000680  2580               	addwf	??_isr& (0+255),w,b
  6268  000682  6E7C               	movwf	_stime,c
  6269  000684  5064               	movf	?_dec_to_hex+1,w,c
  6270  000686  0100               	movlb	0	; () banked
  6271  000688  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6272  00068A  6E7D               	movwf	_stime+1,c
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;main.c: 173: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6276  00068C  C077  F063         	movff	_end_time+1,dec_to_hex@num
  6277  000690  6A64               	clrf	dec_to_hex@num+1,c
  6278  000692  EC6F  F009         	call	_dec_to_hex	;wreg free
  6279  000696  C063  F074         	movff	?_dec_to_hex,_isr$1325
  6280  00069A  C064  F075         	movff	?_dec_to_hex+1,_isr$1325+1
  6281                           
  6282                           ;main.c: 173: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6283  00069E  C074  F001         	movff	_isr$1325,i2___wmul@multiplier
  6284  0006A2  C075  F002         	movff	_isr$1325+1,i2___wmul@multiplier+1
  6285  0006A6  0E00               	movlw	0
  6286  0006A8  6E04               	movwf	i2___wmul@multiplicand+1,c
  6287  0006AA  0E3C               	movlw	60
  6288  0006AC  6E03               	movwf	i2___wmul@multiplicand,c
  6289  0006AE  ECF8  F013         	call	i2___wmul	;wreg free
  6290  0006B2  C001  F080         	movff	?i2___wmul,??_isr
  6291  0006B6  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6292  0006BA  C076  F063         	movff	_end_time,dec_to_hex@num
  6293  0006BE  6A64               	clrf	dec_to_hex@num+1,c
  6294  0006C0  EC6F  F009         	call	_dec_to_hex	;wreg free
  6295  0006C4  5063               	movf	?_dec_to_hex,w,c
  6296  0006C6  0100               	movlb	0	; () banked
  6297  0006C8  2580               	addwf	??_isr& (0+255),w,b
  6298  0006CA  6E78               	movwf	_etime,c
  6299  0006CC  5064               	movf	?_dec_to_hex+1,w,c
  6300  0006CE  0100               	movlb	0	; () banked
  6301  0006D0  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6302  0006D2  6E79               	movwf	_etime+1,c
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;main.c: 174: lcdInst(0b00000001);
  6306  0006D4  0E01               	movlw	1
  6307  0006D6  EC72  F014         	call	i2_lcdInst
  6308                           
  6309                           ;main.c: 175: curr_state = OPERATIONEND;
  6310  0006DA  0E03               	movlw	3
  6311  0006DC  0100               	movlb	0	; () banked
  6312  0006DE  6FDE               	movwf	_curr_state& (0+255),b
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;main.c: 176: bottle_count_disp = -1;
  6316  0006E0  0100               	movlb	0	; () banked
  6317  0006E2  69DF               	setf	_bottle_count_disp& (0+255),b
  6318  0006E4  69E0               	setf	(_bottle_count_disp+1)& (0+255),b
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;main.c: 177: TMR0IF = 0;
  6322  0006E6  94F2               	bcf	intcon,2,c	;volatile
  6323                           
  6324                           ;main.c: 178: }
  6325  0006E8  D01A               	goto	i2l265
  6326  0006EA                     i2l4415:
  6327                           
  6328                           ;main.c: 181: lcdInst(0b10000000);
  6329  0006EA  0E80               	movlw	128
  6330  0006EC  EC72  F014         	call	i2_lcdInst
  6331                           
  6332                           ;main.c: 182: printf("ERR: BAD ISR");
  6333  0006F0  0EF2               	movlw	low STR_3
  6334  0006F2  6E0D               	movwf	i2printf@f,c
  6335  0006F4  0EFF               	movlw	high STR_3
  6336  0006F6  6E0E               	movwf	i2printf@f+1,c
  6337  0006F8  ECAD  F003         	call	i2_printf	;wreg free
  6338                           
  6339                           ;main.c: 183: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  6340  0006FC  0E00               	movlw	0
  6341  0006FE  6E73               	movwf	isr@i,c
  6342  000700                     i2l4421:
  6343  000700  0E63               	movlw	99
  6344  000702  6473               	cpfsgt	isr@i,c
  6345  000704  D001               	goto	i2l4425
  6346  000706  D7F1               	goto	i2l4415
  6347  000708                     i2l4425:
  6348  000708  0E21               	movlw	33
  6349  00070A  0100               	movlb	0	; () banked
  6350  00070C  6F80               	movwf	??_isr& (0+255),b
  6351  00070E  0E76               	movlw	118
  6352  000710                     i2u409_47:
  6353  000710  2EE8               	decfsz	wreg,f,c
  6354  000712  D7FE               	bra	i2u409_47
  6355  000714  2F80               	decfsz	??_isr& (0+255),f,b
  6356  000716  D7FC               	bra	i2u409_47
  6357  000718  F000               	nop	
  6358  00071A  2A73               	incf	isr@i,f,c
  6359  00071C  D7F1               	goto	i2l4421
  6360  00071E                     i2l265:
  6361  00071E  C08F  FFF5         	movff	??_isr+15,tablat
  6362  000722  C08E  FFF8         	movff	??_isr+14,tblptru
  6363  000726  C08D  FFF7         	movff	??_isr+13,tblptrh
  6364  00072A  C08C  FFF6         	movff	??_isr+12,tblptrl
  6365  00072E  C08B  FFF4         	movff	??_isr+11,prodh
  6366  000732  C08A  FFF3         	movff	??_isr+10,prodl
  6367  000736  C089  FFDA         	movff	??_isr+9,fsr2h
  6368  00073A  C088  FFD9         	movff	??_isr+8,fsr2l
  6369  00073E  C087  FFE2         	movff	??_isr+7,fsr1h
  6370  000742  C086  FFE1         	movff	??_isr+6,fsr1l
  6371  000746  C085  FFEA         	movff	??_isr+5,fsr0h
  6372  00074A  C084  FFE9         	movff	??_isr+4,fsr0l
  6373  00074E  C083  FFFB         	movff	??_isr+3,pclatu
  6374  000752  C082  FFFA         	movff	??_isr+2,pclath
  6375  000756  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6376  000758  0011               	retfie		f
  6377  00075A                     __end_of_isr:
  6378                           	opt stack 0
  6379                           pclatu	equ	0xFFB
  6380                           pclath	equ	0xFFA
  6381                           tblptru	equ	0xFF8
  6382                           tblptrh	equ	0xFF7
  6383                           tblptrl	equ	0xFF6
  6384                           tablat	equ	0xFF5
  6385                           prodh	equ	0xFF4
  6386                           prodl	equ	0xFF3
  6387                           intcon	equ	0xFF2
  6388                           intcon2	equ	0xFF1
  6389                           intcon3	equ	0xFF0
  6390                           postinc0	equ	0xFEE
  6391                           fsr0h	equ	0xFEA
  6392                           fsr0l	equ	0xFE9
  6393                           wreg	equ	0xFE8
  6394                           fsr1h	equ	0xFE2
  6395                           fsr1l	equ	0xFE1
  6396                           indf2	equ	0xFDF
  6397                           postinc2	equ	0xFDE
  6398                           postdec2	equ	0xFDD
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function i2_read_colorsensor *****************
  6404 ;; Defined at:
  6405 ;;		line 401 in file "main.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;		None
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  read_colorse    4   11[COMRAM] unsigned char [4]
  6410 ;;  read_colorse    4    7[COMRAM] unsigned char [4]
  6411 ;;  read_colorse    2   15[COMRAM] int 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  1    wreg      void 
  6414 ;; Registers used:
  6415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;Total ram usage:       14 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    2
  6428 ;; This function calls:
  6429 ;;		i2_I2C_Master_Read
  6430 ;;		i2_I2C_Master_Start
  6431 ;;		i2_I2C_Master_Stop
  6432 ;;		i2_I2C_Master_Write
  6433 ;; This function is called by:
  6434 ;;		_isr
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text28
  6439  0015C2                     __ptext28:
  6440                           	opt stack 0
  6441  0015C2                     i2_read_colorsensor:
  6442                           	opt stack 23
  6443                           
  6444                           ;main.c: 402: unsigned char color_low[4];
  6445                           ;main.c: 403: unsigned char color_high[4];
  6446                           ;main.c: 404: int i;
  6447                           ;main.c: 407: I2C_Master_Start();
  6448                           
  6449                           ;incstack = 0
  6450  0015C2  EC8E  F014         	call	i2_I2C_Master_Start	;wreg free
  6451                           
  6452                           ;main.c: 408: I2C_Master_Write(0b01010010);
  6453  0015C6  0E00               	movlw	0
  6454  0015C8  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6455  0015CA  0E52               	movlw	82
  6456  0015CC  6E02               	movwf	i2I2C_Master_Write@d,c
  6457  0015CE  EC7D  F014         	call	i2_I2C_Master_Write	;wreg free
  6458                           
  6459                           ;main.c: 409: I2C_Master_Write(0b10110100);
  6460  0015D2  0E00               	movlw	0
  6461  0015D4  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6462  0015D6  0EB4               	movlw	180
  6463  0015D8  6E02               	movwf	i2I2C_Master_Write@d,c
  6464  0015DA  EC7D  F014         	call	i2_I2C_Master_Write	;wreg free
  6465                           
  6466                           ;main.c: 410: I2C_Master_Start();
  6467  0015DE  EC8E  F014         	call	i2_I2C_Master_Start	;wreg free
  6468                           
  6469                           ;main.c: 411: I2C_Master_Write(0b01010011);
  6470  0015E2  0E00               	movlw	0
  6471  0015E4  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6472  0015E6  0E53               	movlw	83
  6473  0015E8  6E02               	movwf	i2I2C_Master_Write@d,c
  6474  0015EA  EC7D  F014         	call	i2_I2C_Master_Write	;wreg free
  6475                           
  6476                           ;main.c: 412: for(i=0; i<3; i++){
  6477  0015EE  0E00               	movlw	0
  6478  0015F0  6E11               	movwf	i2read_colorsensor@i+1,c
  6479  0015F2  0E00               	movlw	0
  6480  0015F4  6E10               	movwf	i2read_colorsensor@i,c
  6481  0015F6                     i2l4095:
  6482  0015F6  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  6483  0015F8  D006               	goto	i2l4099
  6484  0015FA  5011               	movf	i2read_colorsensor@i+1,w,c
  6485  0015FC  E11B               	bnz	i2l4105
  6486  0015FE  0E03               	movlw	3
  6487  001600  5C10               	subwf	i2read_colorsensor@i,w,c
  6488  001602  B0D8               	btfsc	status,0,c
  6489  001604  D017               	goto	i2l4105
  6490  001606                     i2l4099:
  6491                           
  6492                           ;main.c: 413: color_low[i] = I2C_Master_Read(1);
  6493  001606  0E08               	movlw	low i2read_colorsensor@color_low
  6494  001608  2410               	addwf	i2read_colorsensor@i,w,c
  6495  00160A  6ED9               	movwf	fsr2l,c
  6496  00160C  0E00               	movlw	high i2read_colorsensor@color_low
  6497  00160E  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6498  001610  6EDA               	movwf	fsr2h,c
  6499  001612  0E01               	movlw	1
  6500  001614  ECE5  F013         	call	i2_I2C_Master_Read
  6501  001618  6EDF               	movwf	indf2,c
  6502                           
  6503                           ;main.c: 414: color_high[i] = I2C_Master_Read(1);
  6504  00161A  0E0C               	movlw	low i2read_colorsensor@color_high
  6505  00161C  2410               	addwf	i2read_colorsensor@i,w,c
  6506  00161E  6ED9               	movwf	fsr2l,c
  6507  001620  0E00               	movlw	high i2read_colorsensor@color_high
  6508  001622  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6509  001624  6EDA               	movwf	fsr2h,c
  6510  001626  0E01               	movlw	1
  6511  001628  ECE5  F013         	call	i2_I2C_Master_Read
  6512  00162C  6EDF               	movwf	indf2,c
  6513  00162E  4A10               	infsnz	i2read_colorsensor@i,f,c
  6514  001630  2A11               	incf	i2read_colorsensor@i+1,f,c
  6515  001632  D7E1               	goto	i2l4095
  6516  001634                     i2l4105:
  6517                           
  6518                           ;main.c: 415: }
  6519                           ;main.c: 416: color_low[3] = I2C_Master_Read(1);
  6520  001634  0E01               	movlw	1
  6521  001636  ECE5  F013         	call	i2_I2C_Master_Read
  6522  00163A  6E0B               	movwf	i2read_colorsensor@color_low+3,c
  6523                           
  6524                           ;main.c: 417: color_high[3] = I2C_Master_Read(0);
  6525  00163C  0E00               	movlw	0
  6526  00163E  ECE5  F013         	call	i2_I2C_Master_Read
  6527  001642  6E0F               	movwf	i2read_colorsensor@color_high+3,c
  6528                           
  6529                           ;main.c: 418: I2C_Master_Stop();
  6530  001644  EC8A  F014         	call	i2_I2C_Master_Stop	;wreg free
  6531                           
  6532                           ;main.c: 420: for(i=0; i<4; i++){
  6533  001648  0E00               	movlw	0
  6534  00164A  6E11               	movwf	i2read_colorsensor@i+1,c
  6535  00164C  0E00               	movlw	0
  6536  00164E  6E10               	movwf	i2read_colorsensor@i,c
  6537  001650                     i2l4109:
  6538  001650  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  6539  001652  D006               	goto	i2l4113
  6540  001654  5011               	movf	i2read_colorsensor@i+1,w,c
  6541  001656  E12B               	bnz	i2l353
  6542  001658  0E04               	movlw	4
  6543  00165A  5C10               	subwf	i2read_colorsensor@i,w,c
  6544  00165C  B0D8               	btfsc	status,0,c
  6545  00165E  0012               	return	
  6546  001660                     i2l4113:
  6547                           
  6548                           ;main.c: 421: color[i] = (color_high[i] << 8)|(color_low[i]);
  6549  001660  0E0C               	movlw	low i2read_colorsensor@color_high
  6550  001662  2410               	addwf	i2read_colorsensor@i,w,c
  6551  001664  6ED9               	movwf	fsr2l,c
  6552  001666  0E00               	movlw	high i2read_colorsensor@color_high
  6553  001668  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6554  00166A  6EDA               	movwf	fsr2h,c
  6555  00166C  50DF               	movf	indf2,w,c
  6556  00166E  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6557  001670  5004               	movf	??i2_read_colorsensor,w,c
  6558  001672  6E06               	movwf	(??i2_read_colorsensor+2)& (0+255),c
  6559  001674  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  6560  001676  0E08               	movlw	low i2read_colorsensor@color_low
  6561  001678  2410               	addwf	i2read_colorsensor@i,w,c
  6562  00167A  6ED9               	movwf	fsr2l,c
  6563  00167C  0E00               	movlw	high i2read_colorsensor@color_low
  6564  00167E  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6565  001680  6EDA               	movwf	fsr2h,c
  6566  001682  50DF               	movf	indf2,w,c
  6567  001684  6E07               	movwf	(??i2_read_colorsensor+3)& (0+255),c
  6568  001686  5007               	movf	??i2_read_colorsensor+3,w,c
  6569  001688  1205               	iorwf	??i2_read_colorsensor+1,f,c
  6570  00168A  0E00               	movlw	0
  6571  00168C  1206               	iorwf	??i2_read_colorsensor+2,f,c
  6572  00168E  90D8               	bcf	status,0,c
  6573  001690  3410               	rlcf	i2read_colorsensor@i,w,c
  6574  001692  6ED9               	movwf	fsr2l,c
  6575  001694  3411               	rlcf	i2read_colorsensor@i+1,w,c
  6576  001696  6EDA               	movwf	fsr2h,c
  6577  001698  0EC1               	movlw	low _color
  6578  00169A  26D9               	addwf	fsr2l,f,c
  6579  00169C  0E00               	movlw	high _color
  6580  00169E  22DA               	addwfc	fsr2h,f,c
  6581  0016A0  C005  FFDE         	movff	??i2_read_colorsensor+1,postinc2
  6582  0016A4  C006  FFDD         	movff	??i2_read_colorsensor+2,postdec2
  6583  0016A8  4A10               	infsnz	i2read_colorsensor@i,f,c
  6584  0016AA  2A11               	incf	i2read_colorsensor@i+1,f,c
  6585  0016AC  D7D1               	goto	i2l4109
  6586  0016AE                     i2l353:
  6587  0016AE  0012               	return		;funcret
  6588  0016B0                     __end_ofi2_read_colorsensor:
  6589                           	opt stack 0
  6590                           pclatu	equ	0xFFB
  6591                           pclath	equ	0xFFA
  6592                           tblptru	equ	0xFF8
  6593                           tblptrh	equ	0xFF7
  6594                           tblptrl	equ	0xFF6
  6595                           tablat	equ	0xFF5
  6596                           prodh	equ	0xFF4
  6597                           prodl	equ	0xFF3
  6598                           intcon	equ	0xFF2
  6599                           intcon2	equ	0xFF1
  6600                           intcon3	equ	0xFF0
  6601                           postinc0	equ	0xFEE
  6602                           fsr0h	equ	0xFEA
  6603                           fsr0l	equ	0xFE9
  6604                           wreg	equ	0xFE8
  6605                           fsr1h	equ	0xFE2
  6606                           fsr1l	equ	0xFE1
  6607                           indf2	equ	0xFDF
  6608                           postinc2	equ	0xFDE
  6609                           postdec2	equ	0xFDD
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function i2_printf *****************
  6615 ;; Defined at:
  6616 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6619 ;;		 -> STR_21(15), STR_20(16), STR_19(25), STR_18(24), 
  6620 ;;		 -> STR_17(23), STR_16(18), STR_15(23), STR_14(16), 
  6621 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  6622 ;;		 -> STR_9(17), STR_8(17), STR_7(23), STR_6(23), 
  6623 ;;		 -> STR_5(20), STR_4(17), STR_3(13), STR_2(24), 
  6624 ;;		 -> STR_1(24), 
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;  printf          4    0        struct .
  6627 ;;  printf          3    0        PTR const unsigned char 
  6628 ;;  printf          2   29[COMRAM] int 
  6629 ;;  printf          2   26[COMRAM] unsigned int 
  6630 ;;  printf          2   23[COMRAM] PTR void [1]
  6631 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6632 ;;  printf          2    0        unsigned int 
  6633 ;;  printf          1   31[COMRAM] char 
  6634 ;;  printf          1   28[COMRAM] unsigned char 
  6635 ;;  printf          1   25[COMRAM] char 
  6636 ;;  printf          1   22[COMRAM] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  2   12[COMRAM] int 
  6639 ;; Registers used:
  6640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6646 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;Total ram usage:       20 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    2
  6653 ;; This function calls:
  6654 ;;		i2___lwdiv
  6655 ;;		i2___lwmod
  6656 ;;		i2___wmul
  6657 ;;		i2_isdigit
  6658 ;;		i2_putch
  6659 ;; This function is called by:
  6660 ;;		_isr
  6661 ;; This function uses a non-reentrant model
  6662 ;;
  6663                           
  6664                           	psect	text29
  6665  00075A                     __ptext29:
  6666                           	opt stack 0
  6667  00075A                     i2_printf:
  6668                           	opt stack 23
  6669                           
  6670                           ;doprnt.c: 466: va_list ap;
  6671                           ;doprnt.c: 499: signed char c;
  6672                           ;doprnt.c: 501: int width;
  6673                           ;doprnt.c: 506: signed char prec;
  6674                           ;doprnt.c: 508: unsigned char flag;
  6675                           ;doprnt.c: 523: union {
  6676                           ;doprnt.c: 524: unsigned long vd;
  6677                           ;doprnt.c: 525: double integ;
  6678                           ;doprnt.c: 526: } tmpval;
  6679                           ;doprnt.c: 528: unsigned int val;
  6680                           ;doprnt.c: 529: unsigned len;
  6681                           ;doprnt.c: 530: const char * cp;
  6682                           ;doprnt.c: 533: *ap = __va_start();
  6683                           
  6684                           ;incstack = 0
  6685  00075A  0E0F               	movlw	low (?i2_printf+2)
  6686  00075C  6E18               	movwf	i2printf@ap,c
  6687  00075E  0E00               	movlw	high (?i2_printf+2)
  6688  000760  6E19               	movwf	i2printf@ap+1,c
  6689                           
  6690                           ;doprnt.c: 536: while(c = *f++) {
  6691  000762  D184               	goto	i2l4251
  6692  000764                     i2l4121:
  6693                           
  6694                           ;doprnt.c: 538: if(c != '%')
  6695  000764  0E25               	movlw	37
  6696  000766  1820               	xorwf	i2printf@c,w,c
  6697  000768  B4D8               	btfsc	status,2,c
  6698  00076A  D004               	goto	i2l4125
  6699                           
  6700                           ;doprnt.c: 540: {
  6701                           ;doprnt.c: 541: (putch(c) );
  6702  00076C  5020               	movf	i2printf@c,w,c
  6703  00076E  EC6C  F014         	call	i2_putch
  6704                           
  6705                           ;doprnt.c: 542: continue;
  6706  000772  D17C               	goto	i2l4251
  6707  000774                     i2l4125:
  6708                           
  6709                           ;doprnt.c: 543: }
  6710                           ;doprnt.c: 546: width = 0;
  6711  000774  0E00               	movlw	0
  6712  000776  6E1F               	movwf	i2printf@width+1,c
  6713  000778  0E00               	movlw	0
  6714  00077A  6E1E               	movwf	i2printf@width,c
  6715                           
  6716                           ;doprnt.c: 548: flag = 0;
  6717  00077C  0E00               	movlw	0
  6718  00077E  6E1D               	movwf	i2printf@flag,c
  6719                           
  6720                           ;doprnt.c: 551: switch(*f) {
  6721                           
  6722                           ;doprnt.c: 550: for(;;) {
  6723  000780  D003               	goto	i2l4131
  6724  000782                     i2l4127:
  6725                           
  6726                           ;doprnt.c: 580: flag |= 0x04;
  6727  000782  841D               	bsf	i2printf@flag,2,c
  6728                           
  6729                           ;doprnt.c: 581: f++;
  6730  000784  4A0D               	infsnz	i2printf@f,f,c
  6731  000786  2A0E               	incf	i2printf@f+1,f,c
  6732  000788                     i2l4131:
  6733  000788  C00D  FFF6         	movff	i2printf@f,tblptrl
  6734  00078C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6735  000790                     	if	0	;tblptru may be non-zero
  6736  000790                     	endif
  6737  000790                     	if	0	;tblptru may be non-zero
  6738  000790                     	endif
  6739  000790  0008               	tblrd		*
  6740  000792  50F5               	movf	tablat,w,c
  6741                           
  6742                           ; Switch size 1, requested type "space"
  6743                           ; Number of cases is 1, Range of values is 48 to 48
  6744                           ; switch strategies available:
  6745                           ; Name         Instructions Cycles
  6746                           ; simple_byte            4     3 (average)
  6747                           ;	Chosen strategy is simple_byte
  6748  000794  0A30               	xorlw	48	; case 48
  6749  000796  B4D8               	btfsc	status,2,c
  6750  000798  D7F4               	goto	i2l4127
  6751                           
  6752                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6753                           
  6754                           ;doprnt.c: 586: }
  6755                           
  6756                           ;doprnt.c: 585: break;
  6757  00079A  C00D  FFF6         	movff	i2printf@f,tblptrl
  6758  00079E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6759  0007A2                     	if	0	;tblptru may be non-zero
  6760  0007A2                     	endif
  6761  0007A2                     	if	0	;tblptru may be non-zero
  6762  0007A2                     	endif
  6763  0007A2  0008               	tblrd		*
  6764  0007A4  50F5               	movf	tablat,w,c
  6765  0007A6  EC2E  F014         	call	i2_isdigit
  6766  0007AA  A0D8               	btfss	status,0,c
  6767  0007AC  D038               	goto	i2l4151
  6768                           
  6769                           ;doprnt.c: 598: width = 0;
  6770  0007AE  0E00               	movlw	0
  6771  0007B0  6E1F               	movwf	i2printf@width+1,c
  6772  0007B2  0E00               	movlw	0
  6773  0007B4  6E1E               	movwf	i2printf@width,c
  6774  0007B6                     i2l4137:
  6775                           
  6776                           ;doprnt.c: 600: width *= 10;
  6777  0007B6  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  6778  0007BA  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  6779  0007BE  0E00               	movlw	0
  6780  0007C0  6E04               	movwf	i2___wmul@multiplicand+1,c
  6781  0007C2  0E0A               	movlw	10
  6782  0007C4  6E03               	movwf	i2___wmul@multiplicand,c
  6783  0007C6  ECF8  F013         	call	i2___wmul	;wreg free
  6784  0007CA  C001  F01E         	movff	?i2___wmul,i2printf@width
  6785  0007CE  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  6786                           
  6787                           ;doprnt.c: 601: width += *f++ - '0';
  6788  0007D2  0ED0               	movlw	208
  6789  0007D4  6E13               	movwf	??i2_printf& (0+255),c
  6790  0007D6  0EFF               	movlw	255
  6791  0007D8  6E14               	movwf	(??i2_printf+1)& (0+255),c
  6792  0007DA  C00D  FFF6         	movff	i2printf@f,tblptrl
  6793  0007DE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6794  0007E2                     	if	0	;tblptru may be non-zero
  6795  0007E2                     	endif
  6796  0007E2                     	if	0	;tblptru may be non-zero
  6797  0007E2                     	endif
  6798  0007E2  0008               	tblrd		*
  6799  0007E4  50F5               	movf	tablat,w,c
  6800  0007E6  6E15               	movwf	(??i2_printf+2)& (0+255),c
  6801  0007E8  6A16               	clrf	(??i2_printf+3)& (0+255),c
  6802  0007EA  5013               	movf	??i2_printf,w,c
  6803  0007EC  2615               	addwf	??i2_printf+2,f,c
  6804  0007EE  5014               	movf	??i2_printf+1,w,c
  6805  0007F0  2216               	addwfc	??i2_printf+3,f,c
  6806  0007F2  5015               	movf	??i2_printf+2,w,c
  6807  0007F4  261E               	addwf	i2printf@width,f,c
  6808  0007F6  5016               	movf	??i2_printf+3,w,c
  6809  0007F8  221F               	addwfc	i2printf@width+1,f,c
  6810  0007FA  4A0D               	infsnz	i2printf@f,f,c
  6811  0007FC  2A0E               	incf	i2printf@f+1,f,c
  6812                           
  6813                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6814  0007FE  C00D  FFF6         	movff	i2printf@f,tblptrl
  6815  000802  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6816  000806                     	if	0	;tblptru may be non-zero
  6817  000806                     	endif
  6818  000806                     	if	0	;tblptru may be non-zero
  6819  000806                     	endif
  6820  000806  0008               	tblrd		*
  6821  000808  50F5               	movf	tablat,w,c
  6822  00080A  EC2E  F014         	call	i2_isdigit
  6823  00080E  A0D8               	btfss	status,0,c
  6824  000810  D006               	goto	i2l4151
  6825  000812  D7D1               	goto	i2l4137
  6826  000814                     i2l4145:
  6827                           
  6828                           ;doprnt.c: 721: flag |= 0x80;
  6829  000814  8E1D               	bsf	i2printf@flag,7,c
  6830                           
  6831                           ;doprnt.c: 723: break;
  6832  000816  D01D               	goto	i2l4153
  6833  000818                     i2l4147:
  6834                           
  6835                           ;doprnt.c: 818: flag |= 0xC0;
  6836  000818  0EC0               	movlw	192
  6837  00081A  121D               	iorwf	i2printf@flag,f,c
  6838                           
  6839                           ;doprnt.c: 822: }
  6840                           
  6841                           ;doprnt.c: 819: break;
  6842  00081C  D01A               	goto	i2l4153
  6843  00081E                     i2l4151:
  6844  00081E  C00D  FFF6         	movff	i2printf@f,tblptrl
  6845  000822  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6846  000826  4A0D               	infsnz	i2printf@f,f,c
  6847  000828  2A0E               	incf	i2printf@f+1,f,c
  6848  00082A                     	if	0	;tblptru may be non-zero
  6849  00082A                     	endif
  6850  00082A                     	if	0	;tblptru may be non-zero
  6851  00082A                     	endif
  6852  00082A  0008               	tblrd		*
  6853  00082C  CFF5 F020          	movff	tablat,i2printf@c
  6854  000830  5020               	movf	i2printf@c,w,c
  6855                           
  6856                           ; Switch size 1, requested type "space"
  6857                           ; Number of cases is 5, Range of values is 0 to 120
  6858                           ; switch strategies available:
  6859                           ; Name         Instructions Cycles
  6860                           ; simple_byte           16     9 (average)
  6861                           ;	Chosen strategy is simple_byte
  6862  000832  0A00               	xorlw	0	; case 0
  6863  000834  B4D8               	btfsc	status,2,c
  6864  000836  0012               	return	
  6865  000838  0A64               	xorlw	100	; case 100
  6866  00083A  B4D8               	btfsc	status,2,c
  6867  00083C  D00A               	goto	i2l4153
  6868  00083E  0A0D               	xorlw	13	; case 105
  6869  000840  B4D8               	btfsc	status,2,c
  6870  000842  D007               	goto	i2l4153
  6871  000844  0A1C               	xorlw	28	; case 117
  6872  000846  B4D8               	btfsc	status,2,c
  6873  000848  D7E7               	goto	i2l4147
  6874  00084A  0A0D               	xorlw	13	; case 120
  6875  00084C  B4D8               	btfsc	status,2,c
  6876  00084E  D7E2               	goto	i2l4145
  6877  000850  D10D               	goto	i2l4251
  6878  000852                     i2l4153:
  6879                           
  6880                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  6881  000852  C01D  F013         	movff	i2printf@flag,??i2_printf
  6882  000856  0EC0               	movlw	192
  6883  000858  1613               	andwf	??i2_printf,f,c
  6884  00085A  A4D8               	btfss	status,2,c
  6885  00085C  D015               	goto	i2l4165
  6886                           
  6887                           ;doprnt.c: 1253: {
  6888                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6889  00085E  C018  FFD9         	movff	i2printf@ap,fsr2l
  6890  000862  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  6891  000866  CFDE F01B          	movff	postinc2,i2printf@val
  6892  00086A  CFDD F01C          	movff	postdec2,i2printf@val+1
  6893  00086E  0E02               	movlw	2
  6894  000870  2618               	addwf	i2printf@ap,f,c
  6895  000872  0E00               	movlw	0
  6896  000874  2219               	addwfc	i2printf@ap+1,f,c
  6897                           
  6898                           ;doprnt.c: 1261: if((int)val < 0) {
  6899  000876  AE1C               	btfss	i2printf@val+1,7,c
  6900  000878  D044               	goto	i2l4199
  6901                           
  6902                           ;doprnt.c: 1262: flag |= 0x03;
  6903  00087A  0E03               	movlw	3
  6904  00087C  121D               	iorwf	i2printf@flag,f,c
  6905                           
  6906                           ;doprnt.c: 1263: val = -val;
  6907  00087E  6C1B               	negf	i2printf@val,c
  6908  000880  1E1C               	comf	i2printf@val+1,f,c
  6909  000882  B0D8               	btfsc	status,0,c
  6910  000884  2A1C               	incf	i2printf@val+1,f,c
  6911                           
  6912                           ;doprnt.c: 1264: }
  6913                           ;doprnt.c: 1266: }
  6914  000886  D03D               	goto	i2l4199
  6915  000888                     i2l4165:
  6916                           
  6917                           ;doprnt.c: 1268: else
  6918                           ;doprnt.c: 1273: {
  6919                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6920  000888  C018  FFD9         	movff	i2printf@ap,fsr2l
  6921  00088C  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  6922  000890  CFDE F01B          	movff	postinc2,i2printf@val
  6923  000894  CFDD F01C          	movff	postdec2,i2printf@val+1
  6924  000898  0E02               	movlw	2
  6925  00089A  2618               	addwf	i2printf@ap,f,c
  6926  00089C  0E00               	movlw	0
  6927  00089E  2219               	addwfc	i2printf@ap+1,f,c
  6928                           
  6929                           ;doprnt.c: 1287: }
  6930                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  6931  0008A0  D030               	goto	i2l4199
  6932  0008A2                     i2l4169:
  6933                           
  6934                           ;doprnt.c: 1302: case 0xC0:
  6935                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6936  0008A2  0E01               	movlw	1
  6937  0008A4  6E20               	movwf	i2printf@c,c
  6938  0008A6                     i2l4171:
  6939  0008A6  0E05               	movlw	5
  6940  0008A8  1820               	xorwf	i2printf@c,w,c
  6941  0008AA  B4D8               	btfsc	status,2,c
  6942  0008AC  D035               	goto	i2l4201
  6943                           
  6944                           ;doprnt.c: 1306: if(val < dpowers[c])
  6945  0008AE  5020               	movf	i2printf@c,w,c
  6946  0008B0  0D02               	mullw	2
  6947  0008B2  0E06               	movlw	low _dpowers
  6948  0008B4  24F3               	addwf	prodl,w,c
  6949  0008B6  6EF6               	movwf	tblptrl,c
  6950  0008B8  0EFE               	movlw	high _dpowers
  6951  0008BA  20F4               	addwfc	prodh,w,c
  6952  0008BC  6EF7               	movwf	tblptrh,c
  6953  0008BE                     	if	0	;There are less than 3 active tblptr bytes
  6954  0008BE                     	endif
  6955  0008BE  0009               	tblrd		*+
  6956  0008C0  50F5               	movf	tablat,w,c
  6957  0008C2  5C1B               	subwf	i2printf@val,w,c
  6958  0008C4  0009               	tblrd		*+
  6959  0008C6  50F5               	movf	tablat,w,c
  6960  0008C8  581C               	subwfb	i2printf@val+1,w,c
  6961  0008CA  A0D8               	btfss	status,0,c
  6962  0008CC  D025               	goto	i2l4201
  6963                           
  6964                           ;doprnt.c: 1307: break;
  6965  0008CE  2A20               	incf	i2printf@c,f,c
  6966  0008D0  D7EA               	goto	i2l4171
  6967  0008D2                     i2l4183:
  6968                           
  6969                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6970  0008D2  0E01               	movlw	1
  6971  0008D4  6E20               	movwf	i2printf@c,c
  6972  0008D6                     i2l4185:
  6973  0008D6  0E04               	movlw	4
  6974  0008D8  1820               	xorwf	i2printf@c,w,c
  6975  0008DA  B4D8               	btfsc	status,2,c
  6976  0008DC  D01D               	goto	i2l4201
  6977                           
  6978                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6979  0008DE  5020               	movf	i2printf@c,w,c
  6980  0008E0  0D02               	mullw	2
  6981  0008E2  0E10               	movlw	low _hexpowers
  6982  0008E4  24F3               	addwf	prodl,w,c
  6983  0008E6  6EF6               	movwf	tblptrl,c
  6984  0008E8  0EFE               	movlw	high _hexpowers
  6985  0008EA  20F4               	addwfc	prodh,w,c
  6986  0008EC  6EF7               	movwf	tblptrh,c
  6987  0008EE                     	if	0	;There are less than 3 active tblptr bytes
  6988  0008EE                     	endif
  6989  0008EE  0009               	tblrd		*+
  6990  0008F0  50F5               	movf	tablat,w,c
  6991  0008F2  5C1B               	subwf	i2printf@val,w,c
  6992  0008F4  0009               	tblrd		*+
  6993  0008F6  50F5               	movf	tablat,w,c
  6994  0008F8  581C               	subwfb	i2printf@val+1,w,c
  6995  0008FA  A0D8               	btfss	status,0,c
  6996  0008FC  D00D               	goto	i2l4201
  6997                           
  6998                           ;doprnt.c: 1318: break;
  6999  0008FE  2A20               	incf	i2printf@c,f,c
  7000  000900  D7EA               	goto	i2l4185
  7001  000902                     i2l4199:
  7002  000902  501D               	movf	i2printf@flag,w,c
  7003  000904  0BC0               	andlw	192
  7004                           
  7005                           ; Switch size 1, requested type "space"
  7006                           ; Number of cases is 3, Range of values is 0 to 192
  7007                           ; switch strategies available:
  7008                           ; Name         Instructions Cycles
  7009                           ; simple_byte           10     6 (average)
  7010                           ;	Chosen strategy is simple_byte
  7011  000906  0A00               	xorlw	0	; case 0
  7012  000908  B4D8               	btfsc	status,2,c
  7013  00090A  D7CB               	goto	i2l4169
  7014  00090C  0A80               	xorlw	128	; case 128
  7015  00090E  B4D8               	btfsc	status,2,c
  7016  000910  D7E0               	goto	i2l4183
  7017  000912  0A40               	xorlw	64	; case 192
  7018  000914  B4D8               	btfsc	status,2,c
  7019  000916  D7C5               	goto	i2l4169
  7020  000918                     i2l4201:
  7021                           
  7022                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7023  000918  501E               	movf	i2printf@width,w,c
  7024  00091A  101F               	iorwf	i2printf@width+1,w,c
  7025  00091C  B4D8               	btfsc	status,2,c
  7026  00091E  D009               	goto	i2l4207
  7027  000920  C01D  F013         	movff	i2printf@flag,??i2_printf
  7028  000924  0E03               	movlw	3
  7029  000926  1613               	andwf	??i2_printf,f,c
  7030  000928  B4D8               	btfsc	status,2,c
  7031  00092A  D003               	goto	i2l4207
  7032                           
  7033                           ;doprnt.c: 1346: width--;
  7034  00092C  061E               	decf	i2printf@width,f,c
  7035  00092E  A0D8               	btfss	status,0,c
  7036  000930  061F               	decf	i2printf@width+1,f,c
  7037  000932                     i2l4207:
  7038                           
  7039                           ;doprnt.c: 1381: if(width > c)
  7040  000932  0E80               	movlw	128
  7041  000934  BE20               	btfsc	i2printf@c,7,c
  7042  000936  0E7F               	movlw	127
  7043  000938  6E13               	movwf	??i2_printf& (0+255),c
  7044  00093A  501E               	movf	i2printf@width,w,c
  7045  00093C  5C20               	subwf	i2printf@c,w,c
  7046  00093E  501F               	movf	i2printf@width+1,w,c
  7047  000940  0A80               	xorlw	128
  7048  000942  5813               	subwfb	??i2_printf& (0+255),w,c
  7049  000944  B0D8               	btfsc	status,0,c
  7050  000946  D007               	goto	i2l4211
  7051                           
  7052                           ;doprnt.c: 1382: width -= c;
  7053  000948  5020               	movf	i2printf@c,w,c
  7054  00094A  5E1E               	subwf	i2printf@width,f,c
  7055  00094C  0E00               	movlw	0
  7056  00094E  BE20               	btfsc	i2printf@c,7,c
  7057  000950  0EFF               	movlw	255
  7058  000952  5A1F               	subwfb	i2printf@width+1,f,c
  7059  000954  D004               	goto	i2l4213
  7060  000956                     i2l4211:
  7061                           
  7062                           ;doprnt.c: 1383: else
  7063                           ;doprnt.c: 1384: width = 0;
  7064  000956  0E00               	movlw	0
  7065  000958  6E1F               	movwf	i2printf@width+1,c
  7066  00095A  0E00               	movlw	0
  7067  00095C  6E1E               	movwf	i2printf@width,c
  7068  00095E                     i2l4213:
  7069                           
  7070                           ;doprnt.c: 1387: if(flag & 0x04) {
  7071  00095E  A41D               	btfss	i2printf@flag,2,c
  7072  000960  D014               	goto	i2l4225
  7073                           
  7074                           ;doprnt.c: 1392: if(flag & 0x03)
  7075  000962  C01D  F013         	movff	i2printf@flag,??i2_printf
  7076  000966  0E03               	movlw	3
  7077  000968  1613               	andwf	??i2_printf,f,c
  7078  00096A  B4D8               	btfsc	status,2,c
  7079  00096C  D003               	goto	i2l4219
  7080                           
  7081                           ;doprnt.c: 1393: (putch('-') );
  7082  00096E  0E2D               	movlw	45
  7083  000970  EC6C  F014         	call	i2_putch
  7084  000974                     i2l4219:
  7085                           
  7086                           ;doprnt.c: 1415: if(width)
  7087  000974  501E               	movf	i2printf@width,w,c
  7088  000976  101F               	iorwf	i2printf@width+1,w,c
  7089  000978  B4D8               	btfsc	status,2,c
  7090  00097A  D01E               	goto	i2l4235
  7091                           
  7092                           ;doprnt.c: 1417: (putch('0') );
  7093                           
  7094                           ;doprnt.c: 1416: do
  7095  00097C  0E30               	movlw	48
  7096  00097E  EC6C  F014         	call	i2_putch
  7097                           
  7098                           ;doprnt.c: 1418: while(--width);
  7099  000982  061E               	decf	i2printf@width,f,c
  7100  000984  A0D8               	btfss	status,0,c
  7101  000986  061F               	decf	i2printf@width+1,f,c
  7102  000988  D7F5               	goto	i2l4219
  7103  00098A                     i2l4225:
  7104                           
  7105                           ;doprnt.c: 1422: {
  7106                           ;doprnt.c: 1424: if(width
  7107                           ;doprnt.c: 1428: )
  7108  00098A  501E               	movf	i2printf@width,w,c
  7109  00098C  101F               	iorwf	i2printf@width+1,w,c
  7110  00098E  B4D8               	btfsc	status,2,c
  7111  000990  D00A               	goto	i2l4231
  7112  000992                     i2l4227:
  7113                           
  7114                           ;doprnt.c: 1430: (putch(' ') );
  7115  000992  0E20               	movlw	32
  7116  000994  EC6C  F014         	call	i2_putch
  7117                           
  7118                           ;doprnt.c: 1431: while(--width);
  7119  000998  061E               	decf	i2printf@width,f,c
  7120  00099A  A0D8               	btfss	status,0,c
  7121  00099C  061F               	decf	i2printf@width+1,f,c
  7122  00099E  501E               	movf	i2printf@width,w,c
  7123  0009A0  101F               	iorwf	i2printf@width+1,w,c
  7124  0009A2  A4D8               	btfss	status,2,c
  7125  0009A4  D7F6               	goto	i2l4227
  7126  0009A6                     i2l4231:
  7127                           
  7128                           ;doprnt.c: 1438: if(flag & 0x03)
  7129  0009A6  C01D  F013         	movff	i2printf@flag,??i2_printf
  7130  0009AA  0E03               	movlw	3
  7131  0009AC  1613               	andwf	??i2_printf,f,c
  7132  0009AE  B4D8               	btfsc	status,2,c
  7133  0009B0  D003               	goto	i2l4235
  7134                           
  7135                           ;doprnt.c: 1439: (putch('-') );
  7136  0009B2  0E2D               	movlw	45
  7137  0009B4  EC6C  F014         	call	i2_putch
  7138  0009B8                     i2l4235:
  7139                           
  7140                           ;doprnt.c: 1469: }
  7141                           ;doprnt.c: 1472: prec = c;
  7142  0009B8  C020  F01A         	movff	i2printf@c,i2printf@prec
  7143                           
  7144                           ;doprnt.c: 1474: while(prec--) {
  7145  0009BC  D053               	goto	i2l4249
  7146  0009BE                     i2l4237:
  7147                           
  7148                           ;doprnt.c: 1486: case 0xC0:
  7149                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7150  0009BE  501A               	movf	i2printf@prec,w,c
  7151  0009C0  0D02               	mullw	2
  7152  0009C2  0E06               	movlw	low _dpowers
  7153  0009C4  24F3               	addwf	prodl,w,c
  7154  0009C6  6EF6               	movwf	tblptrl,c
  7155  0009C8  0EFE               	movlw	high _dpowers
  7156  0009CA  20F4               	addwfc	prodh,w,c
  7157  0009CC  6EF7               	movwf	tblptrh,c
  7158  0009CE                     	if	0	;There are less than 3 active tblptr bytes
  7159  0009CE                     	endif
  7160  0009CE  0009               	tblrd		*+
  7161  0009D0  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7162  0009D4  000A               	tblrd		*-
  7163  0009D6  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7164  0009DA  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7165  0009DE  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7166  0009E2  EC8F  F012         	call	i2___lwdiv	;wreg free
  7167  0009E6  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7168  0009EA  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7169  0009EE  0E00               	movlw	0
  7170  0009F0  6E0B               	movwf	i2___lwmod@divisor+1,c
  7171  0009F2  0E0A               	movlw	10
  7172  0009F4  6E0A               	movwf	i2___lwmod@divisor,c
  7173  0009F6  EC07  F013         	call	i2___lwmod	;wreg free
  7174  0009FA  5008               	movf	?i2___lwmod,w,c
  7175  0009FC  0F30               	addlw	48
  7176  0009FE  6E20               	movwf	i2printf@c,c
  7177                           
  7178                           ;doprnt.c: 1491: break;
  7179  000A00  D02E               	goto	i2l4247
  7180  000A02                     i2l4239:
  7181                           
  7182                           ;doprnt.c: 1499: {
  7183                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7184  000A02  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7185  000A06  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7186  000A0A  501A               	movf	i2printf@prec,w,c
  7187  000A0C  0D02               	mullw	2
  7188  000A0E  0E10               	movlw	low _hexpowers
  7189  000A10  24F3               	addwf	prodl,w,c
  7190  000A12  6EF6               	movwf	tblptrl,c
  7191  000A14  0EFE               	movlw	high _hexpowers
  7192  000A16  20F4               	addwfc	prodh,w,c
  7193  000A18  6EF7               	movwf	tblptrh,c
  7194  000A1A                     	if	0	;There are less than 3 active tblptr bytes
  7195  000A1A                     	endif
  7196  000A1A  0009               	tblrd		*+
  7197  000A1C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7198  000A20  000A               	tblrd		*-
  7199  000A22  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7200  000A26  EC8F  F012         	call	i2___lwdiv	;wreg free
  7201  000A2A  5001               	movf	?i2___lwdiv,w,c
  7202  000A2C  0B0F               	andlw	15
  7203  000A2E  6E17               	movwf	i2printf@idx,c
  7204                           
  7205                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7206  000A30  5017               	movf	i2printf@idx,w,c
  7207  000A32  0D01               	mullw	1
  7208  000A34  0E3B               	movlw	low STR_22
  7209  000A36  24F3               	addwf	prodl,w,c
  7210  000A38  6EF6               	movwf	tblptrl,c
  7211  000A3A  0EFF               	movlw	high STR_22
  7212  000A3C  20F4               	addwfc	prodh,w,c
  7213  000A3E  6EF7               	movwf	tblptrh,c
  7214  000A40                     	if	0	;There are less than 3 active tblptr bytes
  7215  000A40                     	endif
  7216  000A40  0008               	tblrd		*
  7217  000A42  CFF5 F020          	movff	tablat,i2printf@c
  7218                           
  7219                           ;doprnt.c: 1523: }
  7220                           
  7221                           ;doprnt.c: 1508: }
  7222                           ;doprnt.c: 1510: break;
  7223  000A46  D00B               	goto	i2l4247
  7224  000A48                     i2l4245:
  7225  000A48  501D               	movf	i2printf@flag,w,c
  7226  000A4A  0BC0               	andlw	192
  7227                           
  7228                           ; Switch size 1, requested type "space"
  7229                           ; Number of cases is 3, Range of values is 0 to 192
  7230                           ; switch strategies available:
  7231                           ; Name         Instructions Cycles
  7232                           ; simple_byte           10     6 (average)
  7233                           ;	Chosen strategy is simple_byte
  7234  000A4C  0A00               	xorlw	0	; case 0
  7235  000A4E  B4D8               	btfsc	status,2,c
  7236  000A50  D7B6               	goto	i2l4237
  7237  000A52  0A80               	xorlw	128	; case 128
  7238  000A54  B4D8               	btfsc	status,2,c
  7239  000A56  D7D5               	goto	i2l4239
  7240  000A58  0A40               	xorlw	64	; case 192
  7241  000A5A  B4D8               	btfsc	status,2,c
  7242  000A5C  D7B0               	goto	i2l4237
  7243  000A5E                     i2l4247:
  7244                           
  7245                           ;doprnt.c: 1524: (putch(c) );
  7246  000A5E  5020               	movf	i2printf@c,w,c
  7247  000A60  EC6C  F014         	call	i2_putch
  7248  000A64                     i2l4249:
  7249  000A64  061A               	decf	i2printf@prec,f,c
  7250  000A66  281A               	incf	i2printf@prec,w,c
  7251  000A68  A4D8               	btfss	status,2,c
  7252  000A6A  D7EE               	goto	i2l4245
  7253  000A6C                     i2l4251:
  7254  000A6C  C00D  FFF6         	movff	i2printf@f,tblptrl
  7255  000A70  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7256  000A74  4A0D               	infsnz	i2printf@f,f,c
  7257  000A76  2A0E               	incf	i2printf@f+1,f,c
  7258  000A78                     	if	0	;tblptru may be non-zero
  7259  000A78                     	endif
  7260  000A78                     	if	0	;tblptru may be non-zero
  7261  000A78                     	endif
  7262  000A78  0008               	tblrd		*
  7263  000A7A  CFF5 F020          	movff	tablat,i2printf@c
  7264  000A7E  5020               	movf	i2printf@c,w,c
  7265  000A80  B4D8               	btfsc	status,2,c
  7266  000A82  0012               	return	
  7267  000A84  D66F               	goto	i2l4121
  7268  000A86                     __end_ofi2_printf:
  7269                           	opt stack 0
  7270                           pclatu	equ	0xFFB
  7271                           pclath	equ	0xFFA
  7272                           tblptru	equ	0xFF8
  7273                           tblptrh	equ	0xFF7
  7274                           tblptrl	equ	0xFF6
  7275                           tablat	equ	0xFF5
  7276                           prodh	equ	0xFF4
  7277                           prodl	equ	0xFF3
  7278                           intcon	equ	0xFF2
  7279                           intcon2	equ	0xFF1
  7280                           intcon3	equ	0xFF0
  7281                           postinc0	equ	0xFEE
  7282                           fsr0h	equ	0xFEA
  7283                           fsr0l	equ	0xFE9
  7284                           wreg	equ	0xFE8
  7285                           fsr1h	equ	0xFE2
  7286                           fsr1l	equ	0xFE1
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function i2_putch *****************
  7295 ;; Defined at:
  7296 ;;		line 31 in file "lcd.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  data            1    wreg     unsigned char 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  data            1    2[COMRAM] unsigned char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  1    wreg      void 
  7303 ;; Registers used:
  7304 ;;		wreg, status,2, status,0, cstack
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;Total ram usage:        1 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    1
  7317 ;; This function calls:
  7318 ;;		i2_lcdNibble
  7319 ;; This function is called by:
  7320 ;;		i2_printf
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           	psect	text30
  7325  0028D8                     __ptext30:
  7326                           	opt stack 0
  7327  0028D8                     i2_putch:
  7328                           	opt stack 23
  7329                           
  7330                           ;incstack = 0
  7331                           ;i2putch@data stored from wreg
  7332  0028D8  6E03               	movwf	i2putch@data,c
  7333                           
  7334                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7335  0028DA  848C               	bsf	3980,2,c	;volatile
  7336                           
  7337                           ;lcd.c: 33: lcdNibble(data);
  7338  0028DC  5003               	movf	i2putch@data,w,c
  7339  0028DE  ECE0  F012         	call	i2_lcdNibble
  7340  0028E2  0012               	return		;funcret
  7341  0028E4                     __end_ofi2_putch:
  7342                           	opt stack 0
  7343                           pclatu	equ	0xFFB
  7344                           pclath	equ	0xFFA
  7345                           tblptru	equ	0xFF8
  7346                           tblptrh	equ	0xFF7
  7347                           tblptrl	equ	0xFF6
  7348                           tablat	equ	0xFF5
  7349                           prodh	equ	0xFF4
  7350                           prodl	equ	0xFF3
  7351                           intcon	equ	0xFF2
  7352                           intcon2	equ	0xFF1
  7353                           intcon3	equ	0xFF0
  7354                           postinc0	equ	0xFEE
  7355                           fsr0h	equ	0xFEA
  7356                           fsr0l	equ	0xFE9
  7357                           wreg	equ	0xFE8
  7358                           fsr1h	equ	0xFE2
  7359                           fsr1l	equ	0xFE1
  7360                           indf2	equ	0xFDF
  7361                           postinc2	equ	0xFDE
  7362                           postdec2	equ	0xFDD
  7363                           fsr2h	equ	0xFDA
  7364                           fsr2l	equ	0xFD9
  7365                           status	equ	0xFD8
  7366                           
  7367 ;; *************** function i2_isdigit *****************
  7368 ;; Defined at:
  7369 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  c               1    wreg     unsigned char 
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;  c               1    2[COMRAM] unsigned char 
  7374 ;; Return value:  Size  Location     Type
  7375 ;;		None               void
  7376 ;; Registers used:
  7377 ;;		wreg, status,2, status,0
  7378 ;; Tracked objects:
  7379 ;;		On entry : 0/0
  7380 ;;		On exit  : 0/0
  7381 ;;		Unchanged: 0/0
  7382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7386 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;Total ram usage:        3 bytes
  7388 ;; Hardware stack levels used:    1
  7389 ;; This function calls:
  7390 ;;		Nothing
  7391 ;; This function is called by:
  7392 ;;		i2_printf
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           	psect	text31
  7397  00285C                     __ptext31:
  7398                           	opt stack 0
  7399  00285C                     i2_isdigit:
  7400                           	opt stack 24
  7401                           
  7402                           ;incstack = 0
  7403                           ;i2isdigit@c stored from wreg
  7404  00285C  6E03               	movwf	i2isdigit@c,c
  7405  00285E  0E00               	movlw	0
  7406  002860  6E02               	movwf	i2_isdigit$791,c
  7407  002862  0E3A               	movlw	58
  7408  002864  6003               	cpfslt	i2isdigit@c,c
  7409  002866  D005               	goto	i2l3789
  7410  002868  0E2F               	movlw	47
  7411  00286A  6403               	cpfsgt	i2isdigit@c,c
  7412  00286C  D002               	goto	i2l3789
  7413  00286E  0E01               	movlw	1
  7414  002870  6E02               	movwf	i2_isdigit$791,c
  7415  002872                     i2l3789:
  7416  002872  C002  F001         	movff	i2_isdigit$791,??i2_isdigit
  7417  002876  3001               	rrcf	??i2_isdigit,w,c
  7418  002878  0012               	return	
  7419  00287A                     __end_ofi2_isdigit:
  7420                           	opt stack 0
  7421                           pclatu	equ	0xFFB
  7422                           pclath	equ	0xFFA
  7423                           tblptru	equ	0xFF8
  7424                           tblptrh	equ	0xFF7
  7425                           tblptrl	equ	0xFF6
  7426                           tablat	equ	0xFF5
  7427                           prodh	equ	0xFF4
  7428                           prodl	equ	0xFF3
  7429                           intcon	equ	0xFF2
  7430                           intcon2	equ	0xFF1
  7431                           intcon3	equ	0xFF0
  7432                           postinc0	equ	0xFEE
  7433                           fsr0h	equ	0xFEA
  7434                           fsr0l	equ	0xFE9
  7435                           wreg	equ	0xFE8
  7436                           fsr1h	equ	0xFE2
  7437                           fsr1l	equ	0xFE1
  7438                           indf2	equ	0xFDF
  7439                           postinc2	equ	0xFDE
  7440                           postdec2	equ	0xFDD
  7441                           fsr2h	equ	0xFDA
  7442                           fsr2l	equ	0xFD9
  7443                           status	equ	0xFD8
  7444                           
  7445 ;; *************** function i2___lwmod *****************
  7446 ;; Defined at:
  7447 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7448 ;; Parameters:    Size  Location     Type
  7449 ;;  dividend        2    7[COMRAM] unsigned int 
  7450 ;;  divisor         2    9[COMRAM] unsigned int 
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  2    7[COMRAM] unsigned int 
  7455 ;; Registers used:
  7456 ;;		wreg, status,2, status,0
  7457 ;; Tracked objects:
  7458 ;;		On entry : 0/0
  7459 ;;		On exit  : 0/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7462 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;Total ram usage:        5 bytes
  7467 ;; Hardware stack levels used:    1
  7468 ;; This function calls:
  7469 ;;		Nothing
  7470 ;; This function is called by:
  7471 ;;		i2_printf
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	text32
  7476  00260E                     __ptext32:
  7477                           	opt stack 0
  7478  00260E                     i2___lwmod:
  7479                           	opt stack 24
  7480                           
  7481                           ;incstack = 0
  7482  00260E  500A               	movf	i2___lwmod@divisor,w,c
  7483  002610  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7484  002612  B4D8               	btfsc	status,2,c
  7485  002614  D018               	goto	i2l843
  7486  002616  0E01               	movlw	1
  7487  002618  6E0C               	movwf	i2___lwmod@counter,c
  7488  00261A  D004               	goto	i2l3821
  7489  00261C                     i2l3819:
  7490  00261C  90D8               	bcf	status,0,c
  7491  00261E  360A               	rlcf	i2___lwmod@divisor,f,c
  7492  002620  360B               	rlcf	i2___lwmod@divisor+1,f,c
  7493  002622  2A0C               	incf	i2___lwmod@counter,f,c
  7494  002624                     i2l3821:
  7495  002624  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  7496  002626  D7FA               	goto	i2l3819
  7497  002628                     i2l3823:
  7498  002628  500A               	movf	i2___lwmod@divisor,w,c
  7499  00262A  5C08               	subwf	i2___lwmod@dividend,w,c
  7500  00262C  500B               	movf	i2___lwmod@divisor+1,w,c
  7501  00262E  5809               	subwfb	i2___lwmod@dividend+1,w,c
  7502  002630  A0D8               	btfss	status,0,c
  7503  002632  D004               	goto	i2l3827
  7504  002634  500A               	movf	i2___lwmod@divisor,w,c
  7505  002636  5E08               	subwf	i2___lwmod@dividend,f,c
  7506  002638  500B               	movf	i2___lwmod@divisor+1,w,c
  7507  00263A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  7508  00263C                     i2l3827:
  7509  00263C  90D8               	bcf	status,0,c
  7510  00263E  320B               	rrcf	i2___lwmod@divisor+1,f,c
  7511  002640  320A               	rrcf	i2___lwmod@divisor,f,c
  7512  002642  2E0C               	decfsz	i2___lwmod@counter,f,c
  7513  002644  D7F1               	goto	i2l3823
  7514  002646                     i2l843:
  7515  002646  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  7516  00264A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7517  00264E  0012               	return		;funcret
  7518  002650                     __end_ofi2___lwmod:
  7519                           	opt stack 0
  7520                           pclatu	equ	0xFFB
  7521                           pclath	equ	0xFFA
  7522                           tblptru	equ	0xFF8
  7523                           tblptrh	equ	0xFF7
  7524                           tblptrl	equ	0xFF6
  7525                           tablat	equ	0xFF5
  7526                           prodh	equ	0xFF4
  7527                           prodl	equ	0xFF3
  7528                           intcon	equ	0xFF2
  7529                           intcon2	equ	0xFF1
  7530                           intcon3	equ	0xFF0
  7531                           postinc0	equ	0xFEE
  7532                           fsr0h	equ	0xFEA
  7533                           fsr0l	equ	0xFE9
  7534                           wreg	equ	0xFE8
  7535                           fsr1h	equ	0xFE2
  7536                           fsr1l	equ	0xFE1
  7537                           indf2	equ	0xFDF
  7538                           postinc2	equ	0xFDE
  7539                           postdec2	equ	0xFDD
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function i2___lwdiv *****************
  7545 ;; Defined at:
  7546 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  dividend        2    0[COMRAM] unsigned int 
  7549 ;;  divisor         2    2[COMRAM] unsigned int 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7552 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  2    0[COMRAM] unsigned int 
  7555 ;; Registers used:
  7556 ;;		wreg, status,2, status,0
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7562 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7566 ;;Total ram usage:        7 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; This function calls:
  7569 ;;		Nothing
  7570 ;; This function is called by:
  7571 ;;		i2_printf
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           	psect	text33
  7576  00251E                     __ptext33:
  7577                           	opt stack 0
  7578  00251E                     i2___lwdiv:
  7579                           	opt stack 24
  7580                           
  7581                           ;incstack = 0
  7582  00251E  0E00               	movlw	0
  7583  002520  6E06               	movwf	i2___lwdiv@quotient+1,c
  7584  002522  0E00               	movlw	0
  7585  002524  6E05               	movwf	i2___lwdiv@quotient,c
  7586  002526  5003               	movf	i2___lwdiv@divisor,w,c
  7587  002528  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7588  00252A  B4D8               	btfsc	status,2,c
  7589  00252C  D01C               	goto	i2l833
  7590  00252E  0E01               	movlw	1
  7591  002530  6E07               	movwf	i2___lwdiv@counter,c
  7592  002532  D004               	goto	i2l3801
  7593  002534                     i2l3799:
  7594  002534  90D8               	bcf	status,0,c
  7595  002536  3603               	rlcf	i2___lwdiv@divisor,f,c
  7596  002538  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7597  00253A  2A07               	incf	i2___lwdiv@counter,f,c
  7598  00253C                     i2l3801:
  7599  00253C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7600  00253E  D7FA               	goto	i2l3799
  7601  002540                     i2l3803:
  7602  002540  90D8               	bcf	status,0,c
  7603  002542  3605               	rlcf	i2___lwdiv@quotient,f,c
  7604  002544  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7605  002546  5003               	movf	i2___lwdiv@divisor,w,c
  7606  002548  5C01               	subwf	i2___lwdiv@dividend,w,c
  7607  00254A  5004               	movf	i2___lwdiv@divisor+1,w,c
  7608  00254C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7609  00254E  A0D8               	btfss	status,0,c
  7610  002550  D005               	goto	i2l3811
  7611  002552  5003               	movf	i2___lwdiv@divisor,w,c
  7612  002554  5E01               	subwf	i2___lwdiv@dividend,f,c
  7613  002556  5004               	movf	i2___lwdiv@divisor+1,w,c
  7614  002558  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  7615  00255A  8005               	bsf	i2___lwdiv@quotient,0,c
  7616  00255C                     i2l3811:
  7617  00255C  90D8               	bcf	status,0,c
  7618  00255E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  7619  002560  3203               	rrcf	i2___lwdiv@divisor,f,c
  7620  002562  2E07               	decfsz	i2___lwdiv@counter,f,c
  7621  002564  D7ED               	goto	i2l3803
  7622  002566                     i2l833:
  7623  002566  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7624  00256A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7625  00256E  0012               	return		;funcret
  7626  002570                     __end_ofi2___lwdiv:
  7627                           	opt stack 0
  7628                           pclatu	equ	0xFFB
  7629                           pclath	equ	0xFFA
  7630                           tblptru	equ	0xFF8
  7631                           tblptrh	equ	0xFF7
  7632                           tblptrl	equ	0xFF6
  7633                           tablat	equ	0xFF5
  7634                           prodh	equ	0xFF4
  7635                           prodl	equ	0xFF3
  7636                           intcon	equ	0xFF2
  7637                           intcon2	equ	0xFF1
  7638                           intcon3	equ	0xFF0
  7639                           postinc0	equ	0xFEE
  7640                           fsr0h	equ	0xFEA
  7641                           fsr0l	equ	0xFE9
  7642                           wreg	equ	0xFE8
  7643                           fsr1h	equ	0xFE2
  7644                           fsr1l	equ	0xFE1
  7645                           indf2	equ	0xFDF
  7646                           postinc2	equ	0xFDE
  7647                           postdec2	equ	0xFDD
  7648                           fsr2h	equ	0xFDA
  7649                           fsr2l	equ	0xFD9
  7650                           status	equ	0xFD8
  7651                           
  7652 ;; *************** function i2_lcdInst *****************
  7653 ;; Defined at:
  7654 ;;		line 26 in file "lcd.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;  data            1    wreg     unsigned char 
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;  data            1    2[COMRAM] unsigned char 
  7659 ;; Return value:  Size  Location     Type
  7660 ;;                  1    wreg      void 
  7661 ;; Registers used:
  7662 ;;		wreg, status,2, status,0, cstack
  7663 ;; Tracked objects:
  7664 ;;		On entry : 0/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7671 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7672 ;;Total ram usage:        1 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; Hardware stack levels required when called:    1
  7675 ;; This function calls:
  7676 ;;		i2_lcdNibble
  7677 ;; This function is called by:
  7678 ;;		_isr
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           	psect	text34
  7683  0028E4                     __ptext34:
  7684                           	opt stack 0
  7685  0028E4                     i2_lcdInst:
  7686                           	opt stack 24
  7687                           
  7688                           ;incstack = 0
  7689                           ;i2lcdInst@data stored from wreg
  7690  0028E4  6E03               	movwf	i2lcdInst@data,c
  7691                           
  7692                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  7693  0028E6  948C               	bcf	3980,2,c	;volatile
  7694                           
  7695                           ;lcd.c: 28: lcdNibble(data);
  7696  0028E8  5003               	movf	i2lcdInst@data,w,c
  7697  0028EA  ECE0  F012         	call	i2_lcdNibble
  7698  0028EE  0012               	return		;funcret
  7699  0028F0                     __end_ofi2_lcdInst:
  7700                           	opt stack 0
  7701                           pclatu	equ	0xFFB
  7702                           pclath	equ	0xFFA
  7703                           tblptru	equ	0xFF8
  7704                           tblptrh	equ	0xFF7
  7705                           tblptrl	equ	0xFF6
  7706                           tablat	equ	0xFF5
  7707                           prodh	equ	0xFF4
  7708                           prodl	equ	0xFF3
  7709                           intcon	equ	0xFF2
  7710                           intcon2	equ	0xFF1
  7711                           intcon3	equ	0xFF0
  7712                           postinc0	equ	0xFEE
  7713                           fsr0h	equ	0xFEA
  7714                           fsr0l	equ	0xFE9
  7715                           wreg	equ	0xFE8
  7716                           fsr1h	equ	0xFE2
  7717                           fsr1l	equ	0xFE1
  7718                           indf2	equ	0xFDF
  7719                           postinc2	equ	0xFDE
  7720                           postdec2	equ	0xFDD
  7721                           fsr2h	equ	0xFDA
  7722                           fsr2l	equ	0xFD9
  7723                           status	equ	0xFD8
  7724                           
  7725 ;; *************** function i2_lcdNibble *****************
  7726 ;; Defined at:
  7727 ;;		line 36 in file "lcd.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;  data            1    wreg     unsigned char 
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;  data            1    1[COMRAM] unsigned char 
  7732 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  7733 ;; Return value:  Size  Location     Type
  7734 ;;                  1    wreg      void 
  7735 ;; Registers used:
  7736 ;;		wreg, status,2, status,0
  7737 ;; Tracked objects:
  7738 ;;		On entry : 0/0
  7739 ;;		On exit  : 0/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7746 ;;Total ram usage:        2 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; This function calls:
  7749 ;;		Nothing
  7750 ;; This function is called by:
  7751 ;;		i2_lcdInst
  7752 ;;		i2_putch
  7753 ;; This function uses a non-reentrant model
  7754 ;;
  7755                           
  7756                           	psect	text35
  7757  0025C0                     __ptext35:
  7758                           	opt stack 0
  7759  0025C0                     i2_lcdNibble:
  7760                           	opt stack 23
  7761                           
  7762                           ;incstack = 0
  7763                           ;i2lcdNibble@data stored from wreg
  7764  0025C0  6E02               	movwf	i2lcdNibble@data,c
  7765                           
  7766                           ;lcd.c: 38: char temp = data & 0xF0;
  7767  0025C2  5002               	movf	i2lcdNibble@data,w,c
  7768  0025C4  0BF0               	andlw	240
  7769  0025C6  6E01               	movwf	i2lcdNibble@temp,c
  7770                           
  7771                           ;lcd.c: 39: LATD = LATD & 0x0F;
  7772  0025C8  508C               	movf	3980,w,c	;volatile
  7773  0025CA  0B0F               	andlw	15
  7774  0025CC  6E8C               	movwf	3980,c	;volatile
  7775                           
  7776                           ;lcd.c: 40: LATD = temp | LATD;
  7777  0025CE  5001               	movf	i2lcdNibble@temp,w,c
  7778  0025D0  108C               	iorwf	3980,w,c	;volatile
  7779  0025D2  6E8C               	movwf	3980,c	;volatile
  7780                           
  7781                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7782  0025D4  968C               	bcf	3980,3,c	;volatile
  7783                           
  7784                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7785  0025D6  0E19               	movlw	25
  7786  0025D8                     i2u410_47:
  7787  0025D8  2EE8               	decfsz	wreg,f,c
  7788  0025DA  D7FE               	bra	i2u410_47
  7789                           
  7790                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  7791  0025DC  868C               	bsf	3980,3,c	;volatile
  7792                           
  7793                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7794  0025DE  0E19               	movlw	25
  7795  0025E0                     i2u411_47:
  7796  0025E0  2EE8               	decfsz	wreg,f,c
  7797  0025E2  D7FE               	bra	i2u411_47
  7798                           
  7799                           ;lcd.c: 47: data = data << 4;
  7800  0025E4  3802               	swapf	i2lcdNibble@data,w,c
  7801  0025E6  0BF0               	andlw	240
  7802  0025E8  6E02               	movwf	i2lcdNibble@data,c
  7803                           
  7804                           ;lcd.c: 49: temp = data & 0xF0;
  7805  0025EA  5002               	movf	i2lcdNibble@data,w,c
  7806  0025EC  0BF0               	andlw	240
  7807  0025EE  6E01               	movwf	i2lcdNibble@temp,c
  7808                           
  7809                           ;lcd.c: 50: LATD = LATD & 0x0F;
  7810  0025F0  508C               	movf	3980,w,c	;volatile
  7811  0025F2  0B0F               	andlw	15
  7812  0025F4  6E8C               	movwf	3980,c	;volatile
  7813                           
  7814                           ;lcd.c: 51: LATD = temp | LATD;
  7815  0025F6  5001               	movf	i2lcdNibble@temp,w,c
  7816  0025F8  108C               	iorwf	3980,w,c	;volatile
  7817  0025FA  6E8C               	movwf	3980,c	;volatile
  7818                           
  7819                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  7820  0025FC  968C               	bcf	3980,3,c	;volatile
  7821                           
  7822                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7823  0025FE  0E19               	movlw	25
  7824  002600                     i2u412_47:
  7825  002600  2EE8               	decfsz	wreg,f,c
  7826  002602  D7FE               	bra	i2u412_47
  7827                           
  7828                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  7829  002604  868C               	bsf	3980,3,c	;volatile
  7830                           
  7831                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7832  002606  0E19               	movlw	25
  7833  002608                     i2u413_47:
  7834  002608  2EE8               	decfsz	wreg,f,c
  7835  00260A  D7FE               	bra	i2u413_47
  7836  00260C  0012               	return		;funcret
  7837  00260E                     __end_ofi2_lcdNibble:
  7838                           	opt stack 0
  7839                           pclatu	equ	0xFFB
  7840                           pclath	equ	0xFFA
  7841                           tblptru	equ	0xFF8
  7842                           tblptrh	equ	0xFF7
  7843                           tblptrl	equ	0xFF6
  7844                           tablat	equ	0xFF5
  7845                           prodh	equ	0xFF4
  7846                           prodl	equ	0xFF3
  7847                           intcon	equ	0xFF2
  7848                           intcon2	equ	0xFF1
  7849                           intcon3	equ	0xFF0
  7850                           postinc0	equ	0xFEE
  7851                           fsr0h	equ	0xFEA
  7852                           fsr0l	equ	0xFE9
  7853                           wreg	equ	0xFE8
  7854                           fsr1h	equ	0xFE2
  7855                           fsr1l	equ	0xFE1
  7856                           indf2	equ	0xFDF
  7857                           postinc2	equ	0xFDE
  7858                           postdec2	equ	0xFDD
  7859                           fsr2h	equ	0xFDA
  7860                           fsr2l	equ	0xFD9
  7861                           status	equ	0xFD8
  7862                           
  7863 ;; *************** function _servo_rotate0 *****************
  7864 ;; Defined at:
  7865 ;;		line 375 in file "main.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;  degree          2    0[COMRAM] int 
  7868 ;; Auto vars:     Size  Location     Type
  7869 ;;  j               2    8[COMRAM] unsigned int 
  7870 ;;  i               2    6[COMRAM] unsigned int 
  7871 ;;  duty            2    4[COMRAM] int 
  7872 ;; Return value:  Size  Location     Type
  7873 ;;                  1    wreg      void 
  7874 ;; Registers used:
  7875 ;;		wreg, status,2, status,0
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7881 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7883 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7884 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7885 ;;Total ram usage:       10 bytes
  7886 ;; Hardware stack levels used:    1
  7887 ;; This function calls:
  7888 ;;		Nothing
  7889 ;; This function is called by:
  7890 ;;		_isr
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text36
  7895  002014                     __ptext36:
  7896                           	opt stack 0
  7897  002014                     _servo_rotate0:
  7898                           	opt stack 25
  7899                           
  7900                           ;main.c: 376: unsigned int i;
  7901                           ;main.c: 377: unsigned int j;
  7902                           ;main.c: 378: int duty = degree;
  7903                           
  7904                           ;incstack = 0
  7905  002014  C001  F005         	movff	servo_rotate0@degree,servo_rotate0@duty
  7906  002018  C002  F006         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  7907                           
  7908                           ;main.c: 379: for (i=0; i<50; i++) {
  7909  00201C  0E00               	movlw	0
  7910  00201E  6E08               	movwf	servo_rotate0@i+1,c
  7911  002020  0E00               	movlw	0
  7912  002022  6E07               	movwf	servo_rotate0@i,c
  7913  002024                     i2l4067:
  7914  002024  5008               	movf	servo_rotate0@i+1,w,c
  7915  002026  E13D               	bnz	i2l335
  7916  002028  0E32               	movlw	50
  7917  00202A  5C07               	subwf	servo_rotate0@i,w,c
  7918  00202C  B0D8               	btfsc	status,0,c
  7919  00202E  0012               	return	
  7920                           
  7921                           ;main.c: 380: LATCbits.LATC0 = 1;
  7922  002030  808B               	bsf	3979,0,c	;volatile
  7923                           
  7924                           ;main.c: 381: for(j=0; j<duty; j++) _delay((unsigned long)((1)*(10000000/4000.0)));
  7925  002032  0E00               	movlw	0
  7926  002034  6E0A               	movwf	servo_rotate0@j+1,c
  7927  002036  0E00               	movlw	0
  7928  002038  6E09               	movwf	servo_rotate0@j,c
  7929  00203A  D009               	goto	i2l329
  7930  00203C                     i2l4073:
  7931  00203C  0E04               	movlw	4
  7932  00203E  6E03               	movwf	??_servo_rotate0& (0+255),c
  7933  002040  0E3E               	movlw	62
  7934  002042                     i2u414_47:
  7935  002042  2EE8               	decfsz	wreg,f,c
  7936  002044  D7FE               	bra	i2u414_47
  7937  002046  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  7938  002048  D7FC               	bra	i2u414_47
  7939  00204A  4A09               	infsnz	servo_rotate0@j,f,c
  7940  00204C  2A0A               	incf	servo_rotate0@j+1,f,c
  7941  00204E                     i2l329:
  7942  00204E  5005               	movf	servo_rotate0@duty,w,c
  7943  002050  5C09               	subwf	servo_rotate0@j,w,c
  7944  002052  5006               	movf	servo_rotate0@duty+1,w,c
  7945  002054  580A               	subwfb	servo_rotate0@j+1,w,c
  7946  002056  A0D8               	btfss	status,0,c
  7947  002058  D7F1               	goto	i2l4073
  7948                           
  7949                           ;main.c: 382: LATCbits.LATC0 = 0;
  7950  00205A  908B               	bcf	3979,0,c	;volatile
  7951                           
  7952                           ;main.c: 383: for(j=0; j<(20 - duty); j++) _delay((unsigned long)((1)*(10000000/4000.0))
      +                          );
  7953  00205C  0E00               	movlw	0
  7954  00205E  6E0A               	movwf	servo_rotate0@j+1,c
  7955  002060  0E00               	movlw	0
  7956  002062  6E09               	movwf	servo_rotate0@j,c
  7957  002064  D009               	goto	i2l332
  7958  002066                     i2l4079:
  7959  002066  0E04               	movlw	4
  7960  002068  6E03               	movwf	??_servo_rotate0& (0+255),c
  7961  00206A  0E3E               	movlw	62
  7962  00206C                     i2u415_47:
  7963  00206C  2EE8               	decfsz	wreg,f,c
  7964  00206E  D7FE               	bra	i2u415_47
  7965  002070  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  7966  002072  D7FC               	bra	i2u415_47
  7967  002074  4A09               	infsnz	servo_rotate0@j,f,c
  7968  002076  2A0A               	incf	servo_rotate0@j+1,f,c
  7969  002078                     i2l332:
  7970  002078  C005  F003         	movff	servo_rotate0@duty,??_servo_rotate0
  7971  00207C  C006  F004         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  7972  002080  1E03               	comf	??_servo_rotate0,f,c
  7973  002082  1E04               	comf	??_servo_rotate0+1,f,c
  7974  002084  4A03               	infsnz	??_servo_rotate0,f,c
  7975  002086  2A04               	incf	??_servo_rotate0+1,f,c
  7976  002088  0E14               	movlw	20
  7977  00208A  2603               	addwf	??_servo_rotate0,f,c
  7978  00208C  0E00               	movlw	0
  7979  00208E  2204               	addwfc	??_servo_rotate0+1,f,c
  7980  002090  5003               	movf	??_servo_rotate0,w,c
  7981  002092  5C09               	subwf	servo_rotate0@j,w,c
  7982  002094  5004               	movf	??_servo_rotate0+1,w,c
  7983  002096  580A               	subwfb	servo_rotate0@j+1,w,c
  7984  002098  A0D8               	btfss	status,0,c
  7985  00209A  D7E5               	goto	i2l4079
  7986  00209C  4A07               	infsnz	servo_rotate0@i,f,c
  7987  00209E  2A08               	incf	servo_rotate0@i+1,f,c
  7988  0020A0  D7C1               	goto	i2l4067
  7989  0020A2                     i2l335:
  7990  0020A2  0012               	return		;funcret
  7991  0020A4                     __end_of_servo_rotate0:
  7992                           	opt stack 0
  7993                           pclatu	equ	0xFFB
  7994                           pclath	equ	0xFFA
  7995                           tblptru	equ	0xFF8
  7996                           tblptrh	equ	0xFF7
  7997                           tblptrl	equ	0xFF6
  7998                           tablat	equ	0xFF5
  7999                           prodh	equ	0xFF4
  8000                           prodl	equ	0xFF3
  8001                           intcon	equ	0xFF2
  8002                           intcon2	equ	0xFF1
  8003                           intcon3	equ	0xFF0
  8004                           postinc0	equ	0xFEE
  8005                           fsr0h	equ	0xFEA
  8006                           fsr0l	equ	0xFE9
  8007                           wreg	equ	0xFE8
  8008                           fsr1h	equ	0xFE2
  8009                           fsr1l	equ	0xFE1
  8010                           indf2	equ	0xFDF
  8011                           postinc2	equ	0xFDE
  8012                           postdec2	equ	0xFDD
  8013                           fsr2h	equ	0xFDA
  8014                           fsr2l	equ	0xFD9
  8015                           status	equ	0xFD8
  8016                           
  8017 ;; *************** function _read_time *****************
  8018 ;; Defined at:
  8019 ;;		line 281 in file "main.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;		None
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;  i               1    3[COMRAM] unsigned char 
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;Total ram usage:        1 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    2
  8040 ;; This function calls:
  8041 ;;		i2_I2C_Master_Read
  8042 ;;		i2_I2C_Master_Start
  8043 ;;		i2_I2C_Master_Stop
  8044 ;;		i2_I2C_Master_Write
  8045 ;; This function is called by:
  8046 ;;		_isr
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           	psect	text37
  8051  002338                     __ptext37:
  8052                           	opt stack 0
  8053  002338                     _read_time:
  8054                           	opt stack 23
  8055                           
  8056                           ;main.c: 283: I2C_Master_Start();
  8057                           
  8058                           ;incstack = 0
  8059  002338  EC8E  F014         	call	i2_I2C_Master_Start	;wreg free
  8060                           
  8061                           ;main.c: 284: I2C_Master_Write(0b11010000);
  8062  00233C  0E00               	movlw	0
  8063  00233E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8064  002340  0ED0               	movlw	208
  8065  002342  6E02               	movwf	i2I2C_Master_Write@d,c
  8066  002344  EC7D  F014         	call	i2_I2C_Master_Write	;wreg free
  8067                           
  8068                           ;main.c: 285: I2C_Master_Write(0x00);
  8069  002348  0E00               	movlw	0
  8070  00234A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8071  00234C  0E00               	movlw	0
  8072  00234E  6E02               	movwf	i2I2C_Master_Write@d,c
  8073  002350  EC7D  F014         	call	i2_I2C_Master_Write	;wreg free
  8074                           
  8075                           ;main.c: 286: I2C_Master_Stop();
  8076  002354  EC8A  F014         	call	i2_I2C_Master_Stop	;wreg free
  8077                           
  8078                           ;main.c: 289: I2C_Master_Start();
  8079  002358  EC8E  F014         	call	i2_I2C_Master_Start	;wreg free
  8080                           
  8081                           ;main.c: 290: I2C_Master_Write(0b11010001);
  8082  00235C  0E00               	movlw	0
  8083  00235E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8084  002360  0ED1               	movlw	209
  8085  002362  6E02               	movwf	i2I2C_Master_Write@d,c
  8086  002364  EC7D  F014         	call	i2_I2C_Master_Write	;wreg free
  8087                           
  8088                           ;main.c: 291: for(unsigned char i=0;i<0x06;i++){
  8089  002368  0E00               	movlw	0
  8090  00236A  6E04               	movwf	read_time@i,c
  8091  00236C                     i2l4031:
  8092  00236C  0E05               	movlw	5
  8093  00236E  6404               	cpfsgt	read_time@i,c
  8094  002370  D001               	goto	i2l4035
  8095  002372  D00E               	goto	i2l4041
  8096  002374                     i2l4035:
  8097                           
  8098                           ;main.c: 292: time[i] = I2C_Master_Read(1);
  8099  002374  5004               	movf	read_time@i,w,c
  8100  002376  0D01               	mullw	1
  8101  002378  0EC9               	movlw	low _time
  8102  00237A  24F3               	addwf	prodl,w,c
  8103  00237C  6ED9               	movwf	fsr2l,c
  8104  00237E  0E00               	movlw	high _time
  8105  002380  20F4               	addwfc	prodh,w,c
  8106  002382  6EDA               	movwf	fsr2h,c
  8107  002384  0E01               	movlw	1
  8108  002386  ECE5  F013         	call	i2_I2C_Master_Read
  8109  00238A  6EDF               	movwf	indf2,c
  8110  00238C  2A04               	incf	read_time@i,f,c
  8111  00238E  D7EE               	goto	i2l4031
  8112  002390                     i2l4041:
  8113                           
  8114                           ;main.c: 293: }
  8115                           ;main.c: 294: time[6] = I2C_Master_Read(0);
  8116  002390  0E00               	movlw	0
  8117  002392  ECE5  F013         	call	i2_I2C_Master_Read
  8118  002396  0100               	movlb	0	; () banked
  8119  002398  6FCF               	movwf	(_time+6)& (0+255),b
  8120                           
  8121                           ;main.c: 295: I2C_Master_Stop();
  8122  00239A  EC8A  F014         	call	i2_I2C_Master_Stop	;wreg free
  8123  00239E  0012               	return	
  8124  0023A0                     __end_of_read_time:
  8125                           	opt stack 0
  8126                           pclatu	equ	0xFFB
  8127                           pclath	equ	0xFFA
  8128                           tblptru	equ	0xFF8
  8129                           tblptrh	equ	0xFF7
  8130                           tblptrl	equ	0xFF6
  8131                           tablat	equ	0xFF5
  8132                           prodh	equ	0xFF4
  8133                           prodl	equ	0xFF3
  8134                           intcon	equ	0xFF2
  8135                           intcon2	equ	0xFF1
  8136                           intcon3	equ	0xFF0
  8137                           postinc0	equ	0xFEE
  8138                           fsr0h	equ	0xFEA
  8139                           fsr0l	equ	0xFE9
  8140                           wreg	equ	0xFE8
  8141                           fsr1h	equ	0xFE2
  8142                           fsr1l	equ	0xFE1
  8143                           indf2	equ	0xFDF
  8144                           postinc2	equ	0xFDE
  8145                           postdec2	equ	0xFDD
  8146                           fsr2h	equ	0xFDA
  8147                           fsr2l	equ	0xFD9
  8148                           status	equ	0xFD8
  8149                           
  8150 ;; *************** function i2_I2C_Master_Write *****************
  8151 ;; Defined at:
  8152 ;;		line 48 in file "I2C.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;  d               2    1[COMRAM] unsigned int 
  8155 ;; Auto vars:     Size  Location     Type
  8156 ;;		None
  8157 ;; Return value:  Size  Location     Type
  8158 ;;                  1    wreg      void 
  8159 ;; Registers used:
  8160 ;;		wreg, status,2, status,0, cstack
  8161 ;; Tracked objects:
  8162 ;;		On entry : 0/0
  8163 ;;		On exit  : 0/0
  8164 ;;		Unchanged: 0/0
  8165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8166 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;Total ram usage:        2 bytes
  8171 ;; Hardware stack levels used:    1
  8172 ;; Hardware stack levels required when called:    1
  8173 ;; This function calls:
  8174 ;;		i2_I2C_Master_Wait
  8175 ;; This function is called by:
  8176 ;;		_read_time
  8177 ;;		i2_read_colorsensor
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	text38
  8182  0028FA                     __ptext38:
  8183                           	opt stack 0
  8184  0028FA                     i2_I2C_Master_Write:
  8185                           	opt stack 23
  8186                           
  8187                           ;I2C.c: 50: I2C_Master_Wait();
  8188                           
  8189                           ;incstack = 0
  8190  0028FA  EC53  F014         	call	i2_I2C_Master_Wait	;wreg free
  8191                           
  8192                           ;I2C.c: 51: SSPBUF = d;
  8193  0028FE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  8194  002902  0012               	return		;funcret
  8195  002904                     __end_ofi2_I2C_Master_Write:
  8196                           	opt stack 0
  8197                           pclatu	equ	0xFFB
  8198                           pclath	equ	0xFFA
  8199                           tblptru	equ	0xFF8
  8200                           tblptrh	equ	0xFF7
  8201                           tblptrl	equ	0xFF6
  8202                           tablat	equ	0xFF5
  8203                           prodh	equ	0xFF4
  8204                           prodl	equ	0xFF3
  8205                           intcon	equ	0xFF2
  8206                           intcon2	equ	0xFF1
  8207                           intcon3	equ	0xFF0
  8208                           postinc0	equ	0xFEE
  8209                           fsr0h	equ	0xFEA
  8210                           fsr0l	equ	0xFE9
  8211                           wreg	equ	0xFE8
  8212                           fsr1h	equ	0xFE2
  8213                           fsr1l	equ	0xFE1
  8214                           indf2	equ	0xFDF
  8215                           postinc2	equ	0xFDE
  8216                           postdec2	equ	0xFDD
  8217                           fsr2h	equ	0xFDA
  8218                           fsr2l	equ	0xFD9
  8219                           status	equ	0xFD8
  8220                           
  8221 ;; *************** function i2_I2C_Master_Stop *****************
  8222 ;; Defined at:
  8223 ;;		line 42 in file "I2C.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;		None
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;		None
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  1    wreg      void 
  8230 ;; Registers used:
  8231 ;;		wreg, status,2, status,0, cstack
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;Total ram usage:        0 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; Hardware stack levels required when called:    1
  8244 ;; This function calls:
  8245 ;;		i2_I2C_Master_Wait
  8246 ;; This function is called by:
  8247 ;;		_read_time
  8248 ;;		i2_read_colorsensor
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           	psect	text39
  8253  002914                     __ptext39:
  8254                           	opt stack 0
  8255  002914                     i2_I2C_Master_Stop:
  8256                           	opt stack 23
  8257                           
  8258                           ;I2C.c: 44: I2C_Master_Wait();
  8259                           
  8260                           ;incstack = 0
  8261  002914  EC53  F014         	call	i2_I2C_Master_Wait	;wreg free
  8262                           
  8263                           ;I2C.c: 45: PEN = 1;
  8264  002918  84C5               	bsf	4037,2,c	;volatile
  8265  00291A  0012               	return		;funcret
  8266  00291C                     __end_ofi2_I2C_Master_Stop:
  8267                           	opt stack 0
  8268                           pclatu	equ	0xFFB
  8269                           pclath	equ	0xFFA
  8270                           tblptru	equ	0xFF8
  8271                           tblptrh	equ	0xFF7
  8272                           tblptrl	equ	0xFF6
  8273                           tablat	equ	0xFF5
  8274                           prodh	equ	0xFF4
  8275                           prodl	equ	0xFF3
  8276                           intcon	equ	0xFF2
  8277                           intcon2	equ	0xFF1
  8278                           intcon3	equ	0xFF0
  8279                           postinc0	equ	0xFEE
  8280                           fsr0h	equ	0xFEA
  8281                           fsr0l	equ	0xFE9
  8282                           wreg	equ	0xFE8
  8283                           fsr1h	equ	0xFE2
  8284                           fsr1l	equ	0xFE1
  8285                           indf2	equ	0xFDF
  8286                           postinc2	equ	0xFDE
  8287                           postdec2	equ	0xFDD
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8
  8291                           
  8292 ;; *************** function i2_I2C_Master_Start *****************
  8293 ;; Defined at:
  8294 ;;		line 30 in file "I2C.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;		None
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;		None
  8299 ;; Return value:  Size  Location     Type
  8300 ;;                  1    wreg      void 
  8301 ;; Registers used:
  8302 ;;		wreg, status,2, status,0, cstack
  8303 ;; Tracked objects:
  8304 ;;		On entry : 0/0
  8305 ;;		On exit  : 0/0
  8306 ;;		Unchanged: 0/0
  8307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;Total ram usage:        0 bytes
  8313 ;; Hardware stack levels used:    1
  8314 ;; Hardware stack levels required when called:    1
  8315 ;; This function calls:
  8316 ;;		i2_I2C_Master_Wait
  8317 ;; This function is called by:
  8318 ;;		_read_time
  8319 ;;		i2_read_colorsensor
  8320 ;; This function uses a non-reentrant model
  8321 ;;
  8322                           
  8323                           	psect	text40
  8324  00291C                     __ptext40:
  8325                           	opt stack 0
  8326  00291C                     i2_I2C_Master_Start:
  8327                           	opt stack 23
  8328                           
  8329                           ;I2C.c: 32: I2C_Master_Wait();
  8330                           
  8331                           ;incstack = 0
  8332  00291C  EC53  F014         	call	i2_I2C_Master_Wait	;wreg free
  8333                           
  8334                           ;I2C.c: 33: SEN = 1;
  8335  002920  80C5               	bsf	4037,0,c	;volatile
  8336  002922  0012               	return		;funcret
  8337  002924                     __end_ofi2_I2C_Master_Start:
  8338                           	opt stack 0
  8339                           pclatu	equ	0xFFB
  8340                           pclath	equ	0xFFA
  8341                           tblptru	equ	0xFF8
  8342                           tblptrh	equ	0xFF7
  8343                           tblptrl	equ	0xFF6
  8344                           tablat	equ	0xFF5
  8345                           prodh	equ	0xFF4
  8346                           prodl	equ	0xFF3
  8347                           intcon	equ	0xFF2
  8348                           intcon2	equ	0xFF1
  8349                           intcon3	equ	0xFF0
  8350                           postinc0	equ	0xFEE
  8351                           fsr0h	equ	0xFEA
  8352                           fsr0l	equ	0xFE9
  8353                           wreg	equ	0xFE8
  8354                           fsr1h	equ	0xFE2
  8355                           fsr1l	equ	0xFE1
  8356                           indf2	equ	0xFDF
  8357                           postinc2	equ	0xFDE
  8358                           postdec2	equ	0xFDD
  8359                           fsr2h	equ	0xFDA
  8360                           fsr2l	equ	0xFD9
  8361                           status	equ	0xFD8
  8362                           
  8363 ;; *************** function i2_I2C_Master_Read *****************
  8364 ;; Defined at:
  8365 ;;		line 105 in file "I2C.c"
  8366 ;; Parameters:    Size  Location     Type
  8367 ;;  a               1    wreg     unsigned char 
  8368 ;; Auto vars:     Size  Location     Type
  8369 ;;  a               1    1[COMRAM] unsigned char 
  8370 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  1    wreg      unsigned char 
  8373 ;; Registers used:
  8374 ;;		wreg, status,2, status,0, cstack
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;Total ram usage:        2 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    1
  8387 ;; This function calls:
  8388 ;;		i2_I2C_Master_Wait
  8389 ;; This function is called by:
  8390 ;;		_read_time
  8391 ;;		i2_read_colorsensor
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           	psect	text41
  8396  0027CA                     __ptext41:
  8397                           	opt stack 0
  8398  0027CA                     i2_I2C_Master_Read:
  8399                           	opt stack 23
  8400                           
  8401                           ;incstack = 0
  8402                           ;i2I2C_Master_Read@a stored from wreg
  8403  0027CA  6E02               	movwf	i2I2C_Master_Read@a,c
  8404                           
  8405                           ;I2C.c: 107: unsigned char temp;
  8406                           ;I2C.c: 108: I2C_Master_Wait();
  8407  0027CC  EC53  F014         	call	i2_I2C_Master_Wait	;wreg free
  8408                           
  8409                           ;I2C.c: 109: RCEN = 1;
  8410  0027D0  86C5               	bsf	4037,3,c	;volatile
  8411                           
  8412                           ;I2C.c: 110: I2C_Master_Wait();
  8413  0027D2  EC53  F014         	call	i2_I2C_Master_Wait	;wreg free
  8414                           
  8415                           ;I2C.c: 111: temp = SSPBUF;
  8416  0027D6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  8417                           
  8418                           ;I2C.c: 112: I2C_Master_Wait();
  8419  0027DA  EC53  F014         	call	i2_I2C_Master_Wait	;wreg free
  8420                           
  8421                           ;I2C.c: 113: ACKDT = (a)?0:1;
  8422  0027DE  5002               	movf	i2I2C_Master_Read@a,w,c
  8423  0027E0  A4D8               	btfss	status,2,c
  8424  0027E2  D002               	goto	i2u344_40
  8425  0027E4  8AC5               	bsf	4037,5,c	;volatile
  8426  0027E6  D001               	goto	i2l3771
  8427  0027E8                     i2u344_40:
  8428  0027E8  9AC5               	bcf	4037,5,c	;volatile
  8429  0027EA                     i2l3771:
  8430                           
  8431                           ;I2C.c: 114: ACKEN = 1;
  8432  0027EA  88C5               	bsf	4037,4,c	;volatile
  8433                           
  8434                           ;I2C.c: 115: return temp;
  8435  0027EC  5003               	movf	i2I2C_Master_Read@temp,w,c
  8436  0027EE  0012               	return	
  8437  0027F0                     __end_ofi2_I2C_Master_Read:
  8438                           	opt stack 0
  8439                           pclatu	equ	0xFFB
  8440                           pclath	equ	0xFFA
  8441                           tblptru	equ	0xFF8
  8442                           tblptrh	equ	0xFF7
  8443                           tblptrl	equ	0xFF6
  8444                           tablat	equ	0xFF5
  8445                           prodh	equ	0xFF4
  8446                           prodl	equ	0xFF3
  8447                           intcon	equ	0xFF2
  8448                           intcon2	equ	0xFF1
  8449                           intcon3	equ	0xFF0
  8450                           postinc0	equ	0xFEE
  8451                           fsr0h	equ	0xFEA
  8452                           fsr0l	equ	0xFE9
  8453                           wreg	equ	0xFE8
  8454                           fsr1h	equ	0xFE2
  8455                           fsr1l	equ	0xFE1
  8456                           indf2	equ	0xFDF
  8457                           postinc2	equ	0xFDE
  8458                           postdec2	equ	0xFDD
  8459                           fsr2h	equ	0xFDA
  8460                           fsr2l	equ	0xFD9
  8461                           status	equ	0xFD8
  8462                           
  8463 ;; *************** function i2_I2C_Master_Wait *****************
  8464 ;; Defined at:
  8465 ;;		line 25 in file "I2C.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;		None
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;		None
  8470 ;; Return value:  Size  Location     Type
  8471 ;;                  1    wreg      void 
  8472 ;; Registers used:
  8473 ;;		wreg, status,2, status,0
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;Total ram usage:        1 bytes
  8484 ;; Hardware stack levels used:    1
  8485 ;; This function calls:
  8486 ;;		Nothing
  8487 ;; This function is called by:
  8488 ;;		i2_I2C_Master_Start
  8489 ;;		i2_I2C_Master_Stop
  8490 ;;		i2_I2C_Master_Write
  8491 ;;		i2_I2C_Master_Read
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text42
  8496  0028A6                     __ptext42:
  8497                           	opt stack 0
  8498  0028A6                     i2_I2C_Master_Wait:
  8499                           	opt stack 23
  8500  0028A6                     i2l34:
  8501  0028A6  B4C7               	btfsc	4039,2,c	;volatile
  8502  0028A8  D7FE               	goto	i2l34
  8503  0028AA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  8504  0028AE  0E1F               	movlw	31
  8505  0028B0  1601               	andwf	??i2_I2C_Master_Wait,f,c
  8506  0028B2  B4D8               	btfsc	status,2,c
  8507  0028B4  0012               	return	
  8508  0028B6  D7F7               	goto	i2l34
  8509  0028B8                     __end_ofi2_I2C_Master_Wait:
  8510                           	opt stack 0
  8511                           pclatu	equ	0xFFB
  8512                           pclath	equ	0xFFA
  8513                           tblptru	equ	0xFF8
  8514                           tblptrh	equ	0xFF7
  8515                           tblptrl	equ	0xFF6
  8516                           tablat	equ	0xFF5
  8517                           prodh	equ	0xFF4
  8518                           prodl	equ	0xFF3
  8519                           intcon	equ	0xFF2
  8520                           intcon2	equ	0xFF1
  8521                           intcon3	equ	0xFF0
  8522                           postinc0	equ	0xFEE
  8523                           fsr0h	equ	0xFEA
  8524                           fsr0l	equ	0xFE9
  8525                           wreg	equ	0xFE8
  8526                           fsr1h	equ	0xFE2
  8527                           fsr1l	equ	0xFE1
  8528                           indf2	equ	0xFDF
  8529                           postinc2	equ	0xFDE
  8530                           postdec2	equ	0xFDD
  8531                           fsr2h	equ	0xFDA
  8532                           fsr2l	equ	0xFD9
  8533                           status	equ	0xFD8
  8534                           
  8535 ;; *************** function _dec_to_hex *****************
  8536 ;; Defined at:
  8537 ;;		line 244 in file "main.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  num             2   98[COMRAM] int 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  quotient        2  112[COMRAM] int 
  8542 ;;  hexnum          2  110[COMRAM] int 
  8543 ;;  i               2  108[COMRAM] int 
  8544 ;;  temp            2  106[COMRAM] int 
  8545 ;; Return value:  Size  Location     Type
  8546 ;;                  2   98[COMRAM] int 
  8547 ;; Registers used:
  8548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8549 ;; Tracked objects:
  8550 ;;		On entry : 0/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8555 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8557 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8558 ;;Total ram usage:       16 bytes
  8559 ;; Hardware stack levels used:    1
  8560 ;; Hardware stack levels required when called:    5
  8561 ;; This function calls:
  8562 ;;		___awdiv
  8563 ;;		___awtoft
  8564 ;;		___ftadd
  8565 ;;		___ftmul
  8566 ;;		___fttol
  8567 ;;		_pow
  8568 ;; This function is called by:
  8569 ;;		_isr
  8570 ;; This function uses a non-reentrant model
  8571 ;;
  8572                           
  8573                           	psect	text43
  8574  0012DE                     __ptext43:
  8575                           	opt stack 0
  8576  0012DE                     _dec_to_hex:
  8577                           	opt stack 20
  8578                           
  8579                           ;main.c: 245: int i = 0, quotient = num, temp, hexnum = 0;
  8580                           
  8581                           ;incstack = 0
  8582  0012DE  0E00               	movlw	0
  8583  0012E0  6E6E               	movwf	dec_to_hex@i+1,c
  8584  0012E2  0E00               	movlw	0
  8585  0012E4  6E6D               	movwf	dec_to_hex@i,c
  8586  0012E6  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  8587  0012EA  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  8588  0012EE  0E00               	movlw	0
  8589  0012F0  6E70               	movwf	dec_to_hex@hexnum+1,c
  8590  0012F2  0E00               	movlw	0
  8591  0012F4  6E6F               	movwf	dec_to_hex@hexnum,c
  8592                           
  8593                           ;main.c: 247: while (quotient != 0) {
  8594  0012F6  D068               	goto	i2l4061
  8595  0012F8                     i2l4049:
  8596                           
  8597                           ;main.c: 248: temp = quotient % 16;
  8598  0012F8  0E0F               	movlw	15
  8599  0012FA  1471               	andwf	dec_to_hex@quotient,w,c
  8600  0012FC  6E6B               	movwf	dec_to_hex@temp,c
  8601  0012FE  6A6C               	clrf	dec_to_hex@temp+1,c
  8602                           
  8603                           ;main.c: 249: hexnum += temp*pow(10,i);
  8604  001300  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  8605  001304  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  8606  001308  EC67  F013         	call	___awtoft	;wreg free
  8607  00130C  C009  F065         	movff	?___awtoft,_dec_to_hex$1230
  8608  001310  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1230+1
  8609  001314  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1230+2
  8610                           
  8611                           ;main.c: 249: hexnum += temp*pow(10,i);
  8612  001318  C065  F055         	movff	_dec_to_hex$1230,pow@y
  8613  00131C  C066  F056         	movff	_dec_to_hex$1230+1,pow@y+1
  8614  001320  C067  F057         	movff	_dec_to_hex$1230+2,pow@y+2
  8615  001324  0E00               	movlw	0
  8616  001326  6E52               	movwf	pow@x,c
  8617  001328  0E20               	movlw	32
  8618  00132A  6E53               	movwf	pow@x+1,c
  8619  00132C  0E41               	movlw	65
  8620  00132E  6E54               	movwf	pow@x+2,c
  8621  001330  EC0D  F007         	call	_pow	;wreg free
  8622  001334  C052  F068         	movff	?_pow,_dec_to_hex$1231
  8623  001338  C053  F069         	movff	?_pow+1,_dec_to_hex$1231+1
  8624  00133C  C054  F06A         	movff	?_pow+2,_dec_to_hex$1231+2
  8625                           
  8626                           ;main.c: 249: hexnum += temp*pow(10,i);
  8627  001340  C068  F010         	movff	_dec_to_hex$1231,___ftmul@f2
  8628  001344  C069  F011         	movff	_dec_to_hex$1231+1,___ftmul@f2+1
  8629  001348  C06A  F012         	movff	_dec_to_hex$1231+2,___ftmul@f2+2
  8630  00134C  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  8631  001350  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  8632  001354  EC67  F013         	call	___awtoft	;wreg free
  8633  001358  C009  F00D         	movff	?___awtoft,___ftmul@f1
  8634  00135C  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  8635  001360  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  8636  001364  EC67  F00A         	call	___ftmul	;wreg free
  8637  001368  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  8638  00136C  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  8639  001370  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  8640  001374  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  8641  001378  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  8642  00137C  EC67  F013         	call	___awtoft	;wreg free
  8643  001380  C009  F01C         	movff	?___awtoft,___ftadd@f1
  8644  001384  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  8645  001388  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  8646  00138C  EC37  F006         	call	___ftadd	;wreg free
  8647  001390  C01C  F028         	movff	?___ftadd,___fttol@f1
  8648  001394  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  8649  001398  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  8650  00139C  ECED  F009         	call	___fttol	;wreg free
  8651  0013A0  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  8652  0013A4  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  8653                           
  8654                           ;main.c: 250: quotient = quotient / 16;
  8655  0013A8  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
  8656  0013AC  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  8657  0013B0  0E00               	movlw	0
  8658  0013B2  6E04               	movwf	___awdiv@divisor+1,c
  8659  0013B4  0E10               	movlw	16
  8660  0013B6  6E03               	movwf	___awdiv@divisor,c
  8661  0013B8  ECE2  F010         	call	___awdiv	;wreg free
  8662  0013BC  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
  8663  0013C0  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  8664                           
  8665                           ;main.c: 251: i += 1;
  8666  0013C4  4A6D               	infsnz	dec_to_hex@i,f,c
  8667  0013C6  2A6E               	incf	dec_to_hex@i+1,f,c
  8668  0013C8                     i2l4061:
  8669  0013C8  5071               	movf	dec_to_hex@quotient,w,c
  8670  0013CA  1072               	iorwf	dec_to_hex@quotient+1,w,c
  8671  0013CC  A4D8               	btfss	status,2,c
  8672  0013CE  D794               	goto	i2l4049
  8673                           
  8674                           ;main.c: 252: }
  8675                           ;main.c: 253: return hexnum;
  8676  0013D0  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  8677  0013D4  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  8678  0013D8  0012               	return		;funcret
  8679  0013DA                     __end_of_dec_to_hex:
  8680                           	opt stack 0
  8681                           pclatu	equ	0xFFB
  8682                           pclath	equ	0xFFA
  8683                           tblptru	equ	0xFF8
  8684                           tblptrh	equ	0xFF7
  8685                           tblptrl	equ	0xFF6
  8686                           tablat	equ	0xFF5
  8687                           prodh	equ	0xFF4
  8688                           prodl	equ	0xFF3
  8689                           intcon	equ	0xFF2
  8690                           intcon2	equ	0xFF1
  8691                           intcon3	equ	0xFF0
  8692                           postinc0	equ	0xFEE
  8693                           fsr0h	equ	0xFEA
  8694                           fsr0l	equ	0xFE9
  8695                           wreg	equ	0xFE8
  8696                           fsr1h	equ	0xFE2
  8697                           fsr1l	equ	0xFE1
  8698                           indf2	equ	0xFDF
  8699                           postinc2	equ	0xFDE
  8700                           postdec2	equ	0xFDD
  8701                           fsr2h	equ	0xFDA
  8702                           fsr2l	equ	0xFD9
  8703                           status	equ	0xFD8
  8704                           
  8705 ;; *************** function _pow *****************
  8706 ;; Defined at:
  8707 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;  x               3   81[COMRAM] int 
  8710 ;;  y               3   84[COMRAM] int 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;  yi              4   94[COMRAM] unsigned long 
  8713 ;;  sign            1   93[COMRAM] unsigned char 
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  3   81[COMRAM] unsigned char 
  8716 ;; Registers used:
  8717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8723 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8726 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;Total ram usage:       17 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    4
  8730 ;; This function calls:
  8731 ;;		___ftge
  8732 ;;		___ftmul
  8733 ;;		___ftneg
  8734 ;;		___fttol
  8735 ;;		___lltoft
  8736 ;;		_exp
  8737 ;;		_log
  8738 ;; This function is called by:
  8739 ;;		_dec_to_hex
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           	psect	text44
  8744  000E1A                     __ptext44:
  8745                           	opt stack 0
  8746  000E1A                     _pow:
  8747                           	opt stack 20
  8748                           
  8749                           ;incstack = 0
  8750  000E1A  0E00               	movlw	0
  8751  000E1C  6E5E               	movwf	pow@sign,c
  8752  000E1E  5052               	movf	pow@x,w,c
  8753  000E20  1053               	iorwf	pow@x+1,w,c
  8754  000E22  1054               	iorwf	pow@x+2,w,c
  8755  000E24  A4D8               	btfss	status,2,c
  8756  000E26  D01C               	goto	i2l3619
  8757  000E28  0E00               	movlw	0
  8758  000E2A  6E01               	movwf	___ftge@ff1,c
  8759  000E2C  0E00               	movlw	0
  8760  000E2E  6E02               	movwf	___ftge@ff1+1,c
  8761  000E30  0E00               	movlw	0
  8762  000E32  6E03               	movwf	___ftge@ff1+2,c
  8763  000E34  C055  F004         	movff	pow@y,___ftge@ff2
  8764  000E38  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  8765  000E3C  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  8766  000E40  EC9A  F010         	call	___ftge	;wreg free
  8767  000E44  A0D8               	btfss	status,0,c
  8768  000E46  D005               	goto	i2l865
  8769  000E48  0E00               	movlw	0
  8770  000E4A  0100               	movlb	0	; () banked
  8771  000E4C  6FD7               	movwf	(_errno+1)& (0+255),b
  8772  000E4E  0E21               	movlw	33
  8773  000E50  6FD6               	movwf	_errno& (0+255),b
  8774  000E52                     i2l865:
  8775  000E52  0E00               	movlw	0
  8776  000E54  6E52               	movwf	?_pow,c
  8777  000E56  0E00               	movlw	0
  8778  000E58  6E53               	movwf	?_pow+1,c
  8779  000E5A  0E00               	movlw	0
  8780  000E5C  6E54               	movwf	?_pow+2,c
  8781  000E5E  0012               	return	
  8782  000E60                     i2l3619:
  8783  000E60  5055               	movf	pow@y,w,c
  8784  000E62  1056               	iorwf	pow@y+1,w,c
  8785  000E64  1057               	iorwf	pow@y+2,w,c
  8786  000E66  A4D8               	btfss	status,2,c
  8787  000E68  D007               	goto	i2l3625
  8788  000E6A  0E00               	movlw	0
  8789  000E6C  6E52               	movwf	?_pow,c
  8790  000E6E  0E80               	movlw	128
  8791  000E70  6E53               	movwf	?_pow+1,c
  8792  000E72  0E3F               	movlw	63
  8793  000E74  6E54               	movwf	?_pow+2,c
  8794  000E76  0012               	return	
  8795  000E78                     i2l3625:
  8796  000E78  AE54               	btfss	pow@x+2,7,c
  8797  000E7A  D041               	goto	i2l3637
  8798  000E7C  C055  F028         	movff	pow@y,___fttol@f1
  8799  000E80  C056  F029         	movff	pow@y+1,___fttol@f1+1
  8800  000E84  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  8801  000E88  ECED  F009         	call	___fttol	;wreg free
  8802  000E8C  C028  F05F         	movff	?___fttol,pow@yi
  8803  000E90  C029  F060         	movff	?___fttol+1,pow@yi+1
  8804  000E94  C02A  F061         	movff	?___fttol+2,pow@yi+2
  8805  000E98  C02B  F062         	movff	?___fttol+3,pow@yi+3
  8806  000E9C  C05F  F009         	movff	pow@yi,___lltoft@c
  8807  000EA0  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  8808  000EA4  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  8809  000EA8  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  8810  000EAC  EC61  F012         	call	___lltoft	;wreg free
  8811  000EB0  5055               	movf	pow@y,w,c
  8812  000EB2  1809               	xorwf	?___lltoft,w,c
  8813  000EB4  E107               	bnz	i2u327_40
  8814  000EB6  5056               	movf	pow@y+1,w,c
  8815  000EB8  180A               	xorwf	?___lltoft+1,w,c
  8816  000EBA  E104               	bnz	i2u327_40
  8817  000EBC  5057               	movf	pow@y+2,w,c
  8818  000EBE  180B               	xorwf	?___lltoft+2,w,c
  8819  000EC0  B4D8               	btfsc	status,2,c
  8820  000EC2  D00C               	goto	i2l3633
  8821  000EC4                     i2u327_40:
  8822  000EC4  0E00               	movlw	0
  8823  000EC6  0100               	movlb	0	; () banked
  8824  000EC8  6FD7               	movwf	(_errno+1)& (0+255),b
  8825  000ECA  0E21               	movlw	33
  8826  000ECC  6FD6               	movwf	_errno& (0+255),b
  8827  000ECE  0E00               	movlw	0
  8828  000ED0  6E52               	movwf	?_pow,c
  8829  000ED2  0E00               	movlw	0
  8830  000ED4  6E53               	movwf	?_pow+1,c
  8831  000ED6  0E00               	movlw	0
  8832  000ED8  6E54               	movwf	?_pow+2,c
  8833                           
  8834                           ; BSR set to: 0
  8835  000EDA  0012               	return	
  8836  000EDC                     i2l3633:
  8837  000EDC  505F               	movf	pow@yi,w,c
  8838  000EDE  0B01               	andlw	1
  8839  000EE0  6E5E               	movwf	pow@sign,c
  8840  000EE2  C052  F001         	movff	pow@x,___ftneg@f1
  8841  000EE6  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  8842  000EEA  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  8843  000EEE  EC0B  F014         	call	___ftneg	;wreg free
  8844  000EF2  C001  F052         	movff	?___ftneg,pow@x
  8845  000EF6  C002  F053         	movff	?___ftneg+1,pow@x+1
  8846  000EFA  C003  F054         	movff	?___ftneg+2,pow@x+2
  8847  000EFE                     i2l3637:
  8848  000EFE  C052  F034         	movff	pow@x,log@x
  8849  000F02  C053  F035         	movff	pow@x+1,log@x+1
  8850  000F06  C054  F036         	movff	pow@x+2,log@x+2
  8851  000F0A  EC5E  F008         	call	_log	;wreg free
  8852  000F0E  C034  F058         	movff	?_log,_pow$1232
  8853  000F12  C035  F059         	movff	?_log+1,_pow$1232+1
  8854  000F16  C036  F05A         	movff	?_log+2,_pow$1232+2
  8855  000F1A  C058  F00D         	movff	_pow$1232,___ftmul@f1
  8856  000F1E  C059  F00E         	movff	_pow$1232+1,___ftmul@f1+1
  8857  000F22  C05A  F00F         	movff	_pow$1232+2,___ftmul@f1+2
  8858  000F26  C055  F010         	movff	pow@y,___ftmul@f2
  8859  000F2A  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  8860  000F2E  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  8861  000F32  EC67  F00A         	call	___ftmul	;wreg free
  8862  000F36  C00D  F05B         	movff	?___ftmul,_pow$1233
  8863  000F3A  C00E  F05C         	movff	?___ftmul+1,_pow$1233+1
  8864  000F3E  C00F  F05D         	movff	?___ftmul+2,_pow$1233+2
  8865  000F42  C05B  F049         	movff	_pow$1233,exp@x
  8866  000F46  C05C  F04A         	movff	_pow$1233+1,exp@x+1
  8867  000F4A  C05D  F04B         	movff	_pow$1233+2,exp@x+2
  8868  000F4E  EC43  F005         	call	_exp	;wreg free
  8869  000F52  C049  F052         	movff	?_exp,pow@x
  8870  000F56  C04A  F053         	movff	?_exp+1,pow@x+1
  8871  000F5A  C04B  F054         	movff	?_exp+2,pow@x+2
  8872  000F5E  505E               	movf	pow@sign,w,c
  8873  000F60  B4D8               	btfsc	status,2,c
  8874  000F62  D00F               	goto	i2l870
  8875  000F64  C052  F001         	movff	pow@x,___ftneg@f1
  8876  000F68  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  8877  000F6C  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  8878  000F70  EC0B  F014         	call	___ftneg	;wreg free
  8879  000F74  C001  F052         	movff	?___ftneg,?_pow
  8880  000F78  C002  F053         	movff	?___ftneg+1,?_pow+1
  8881  000F7C  C003  F054         	movff	?___ftneg+2,?_pow+2
  8882  000F80  0012               	return	
  8883  000F82                     i2l870:
  8884  000F82  C052  F052         	movff	pow@x,?_pow
  8885  000F86  C053  F053         	movff	pow@x+1,?_pow+1
  8886  000F8A  C054  F054         	movff	pow@x+2,?_pow+2
  8887  000F8E  0012               	return		;funcret
  8888  000F90                     __end_of_pow:
  8889                           	opt stack 0
  8890                           pclatu	equ	0xFFB
  8891                           pclath	equ	0xFFA
  8892                           tblptru	equ	0xFF8
  8893                           tblptrh	equ	0xFF7
  8894                           tblptrl	equ	0xFF6
  8895                           tablat	equ	0xFF5
  8896                           prodh	equ	0xFF4
  8897                           prodl	equ	0xFF3
  8898                           intcon	equ	0xFF2
  8899                           intcon2	equ	0xFF1
  8900                           intcon3	equ	0xFF0
  8901                           postinc0	equ	0xFEE
  8902                           fsr0h	equ	0xFEA
  8903                           fsr0l	equ	0xFE9
  8904                           wreg	equ	0xFE8
  8905                           fsr1h	equ	0xFE2
  8906                           fsr1l	equ	0xFE1
  8907                           indf2	equ	0xFDF
  8908                           postinc2	equ	0xFDE
  8909                           postdec2	equ	0xFDD
  8910                           fsr2h	equ	0xFDA
  8911                           fsr2l	equ	0xFD9
  8912                           status	equ	0xFD8
  8913                           
  8914 ;; *************** function _log *****************
  8915 ;; Defined at:
  8916 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;  x               3   51[COMRAM] unsigned char 
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;  exponent        2   54[COMRAM] int 
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  3   51[COMRAM] int 
  8923 ;; Registers used:
  8924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8930 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8934 ;;Total ram usage:        5 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:    3
  8937 ;; This function calls:
  8938 ;;		___awtoft
  8939 ;;		___ftadd
  8940 ;;		___ftmul
  8941 ;;		_eval_poly
  8942 ;;		_frexp
  8943 ;; This function is called by:
  8944 ;;		_pow
  8945 ;; This function uses a non-reentrant model
  8946 ;;
  8947                           
  8948                           	psect	text45
  8949  0010BC                     __ptext45:
  8950                           	opt stack 0
  8951  0010BC                     _log:
  8952                           	opt stack 20
  8953                           
  8954                           ;incstack = 0
  8955  0010BC  AE36               	btfss	log@x+2,7,c
  8956  0010BE  D00C               	goto	i2l3361
  8957  0010C0  0E00               	movlw	0
  8958  0010C2  0100               	movlb	0	; () banked
  8959  0010C4  6FD7               	movwf	(_errno+1)& (0+255),b
  8960  0010C6  0E21               	movlw	33
  8961  0010C8  6FD6               	movwf	_errno& (0+255),b
  8962  0010CA  0E00               	movlw	0
  8963  0010CC  6E34               	movwf	?_log,c
  8964  0010CE  0E00               	movlw	0
  8965  0010D0  6E35               	movwf	?_log+1,c
  8966  0010D2  0E00               	movlw	0
  8967  0010D4  6E36               	movwf	?_log+2,c
  8968                           
  8969                           ; BSR set to: 0
  8970  0010D6  0012               	return	
  8971  0010D8                     i2l3361:
  8972  0010D8  5034               	movf	log@x,w,c
  8973  0010DA  1035               	iorwf	log@x+1,w,c
  8974  0010DC  1036               	iorwf	log@x+2,w,c
  8975  0010DE  A4D8               	btfss	status,2,c
  8976  0010E0  D00C               	goto	i2l3367
  8977  0010E2  0E00               	movlw	0
  8978  0010E4  0100               	movlb	0	; () banked
  8979  0010E6  6FD7               	movwf	(_errno+1)& (0+255),b
  8980  0010E8  0E22               	movlw	34
  8981  0010EA  6FD6               	movwf	_errno& (0+255),b
  8982  0010EC  0E00               	movlw	0
  8983  0010EE  6E34               	movwf	?_log,c
  8984  0010F0  0E00               	movlw	0
  8985  0010F2  6E35               	movwf	?_log+1,c
  8986  0010F4  0E00               	movlw	0
  8987  0010F6  6E36               	movwf	?_log+2,c
  8988                           
  8989                           ; BSR set to: 0
  8990  0010F8  0012               	return	
  8991  0010FA                     i2l3367:
  8992  0010FA  0E00               	movlw	0
  8993  0010FC  6E10               	movwf	___ftmul@f2,c
  8994  0010FE  0E00               	movlw	0
  8995  001100  6E11               	movwf	___ftmul@f2+1,c
  8996  001102  0E40               	movlw	64
  8997  001104  6E12               	movwf	___ftmul@f2+2,c
  8998  001106  0E37               	movlw	low log@exponent
  8999  001108  6E04               	movwf	frexp@eptr,c
  9000  00110A  0E00               	movlw	high log@exponent
  9001  00110C  6E05               	movwf	frexp@eptr+1,c
  9002  00110E  C034  F001         	movff	log@x,frexp@value
  9003  001112  C035  F002         	movff	log@x+1,frexp@value+1
  9004  001116  C036  F003         	movff	log@x+2,frexp@value+2
  9005  00111A  EC52  F010         	call	_frexp	;wreg free
  9006  00111E  C001  F00D         	movff	?_frexp,___ftmul@f1
  9007  001122  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  9008  001126  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  9009  00112A  EC67  F00A         	call	___ftmul	;wreg free
  9010  00112E  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9011  001132  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9012  001136  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9013  00113A  0E00               	movlw	0
  9014  00113C  6E1F               	movwf	___ftadd@f2,c
  9015  00113E  0E80               	movlw	128
  9016  001140  6E20               	movwf	___ftadd@f2+1,c
  9017  001142  0EBF               	movlw	191
  9018  001144  6E21               	movwf	___ftadd@f2+2,c
  9019  001146  EC37  F006         	call	___ftadd	;wreg free
  9020  00114A  C01C  F034         	movff	?___ftadd,log@x
  9021  00114E  C01D  F035         	movff	?___ftadd+1,log@x+1
  9022  001152  C01E  F036         	movff	?___ftadd+2,log@x+2
  9023  001156  0637               	decf	log@exponent,f,c
  9024  001158  A0D8               	btfss	status,0,c
  9025  00115A  0638               	decf	log@exponent+1,f,c
  9026  00115C  C034  F028         	movff	log@x,eval_poly@x
  9027  001160  C035  F029         	movff	log@x+1,eval_poly@x+1
  9028  001164  C036  F02A         	movff	log@x+2,eval_poly@x+2
  9029  001168  0E3D               	movlw	low log@coeff
  9030  00116A  6E2B               	movwf	eval_poly@d,c
  9031  00116C  0EFE               	movlw	high log@coeff
  9032  00116E  6E2C               	movwf	eval_poly@d+1,c
  9033  001170  0E00               	movlw	0
  9034  001172  6E2E               	movwf	eval_poly@n+1,c
  9035  001174  0E08               	movlw	8
  9036  001176  6E2D               	movwf	eval_poly@n,c
  9037  001178  EC7F  F00D         	call	_eval_poly	;wreg free
  9038  00117C  C028  F034         	movff	?_eval_poly,log@x
  9039  001180  C029  F035         	movff	?_eval_poly+1,log@x+1
  9040  001184  C02A  F036         	movff	?_eval_poly+2,log@x+2
  9041  001188  0E72               	movlw	114
  9042  00118A  6E10               	movwf	___ftmul@f2,c
  9043  00118C  0E31               	movlw	49
  9044  00118E  6E11               	movwf	___ftmul@f2+1,c
  9045  001190  0E3F               	movlw	63
  9046  001192  6E12               	movwf	___ftmul@f2+2,c
  9047  001194  C037  F009         	movff	log@exponent,___awtoft@c
  9048  001198  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  9049  00119C  EC67  F013         	call	___awtoft	;wreg free
  9050  0011A0  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9051  0011A4  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9052  0011A8  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9053  0011AC  EC67  F00A         	call	___ftmul	;wreg free
  9054  0011B0  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9055  0011B4  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9056  0011B8  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9057  0011BC  C034  F01F         	movff	log@x,___ftadd@f2
  9058  0011C0  C035  F020         	movff	log@x+1,___ftadd@f2+1
  9059  0011C4  C036  F021         	movff	log@x+2,___ftadd@f2+2
  9060  0011C8  EC37  F006         	call	___ftadd	;wreg free
  9061  0011CC  C01C  F034         	movff	?___ftadd,?_log
  9062  0011D0  C01D  F035         	movff	?___ftadd+1,?_log+1
  9063  0011D4  C01E  F036         	movff	?___ftadd+2,?_log+2
  9064  0011D8  0012               	return	
  9065  0011DA                     __end_of_log:
  9066                           	opt stack 0
  9067                           pclatu	equ	0xFFB
  9068                           pclath	equ	0xFFA
  9069                           tblptru	equ	0xFF8
  9070                           tblptrh	equ	0xFF7
  9071                           tblptrl	equ	0xFF6
  9072                           tablat	equ	0xFF5
  9073                           prodh	equ	0xFF4
  9074                           prodl	equ	0xFF3
  9075                           intcon	equ	0xFF2
  9076                           intcon2	equ	0xFF1
  9077                           intcon3	equ	0xFF0
  9078                           postinc0	equ	0xFEE
  9079                           fsr0h	equ	0xFEA
  9080                           fsr0l	equ	0xFE9
  9081                           wreg	equ	0xFE8
  9082                           fsr1h	equ	0xFE2
  9083                           fsr1l	equ	0xFE1
  9084                           indf2	equ	0xFDF
  9085                           postinc2	equ	0xFDE
  9086                           postdec2	equ	0xFDD
  9087                           fsr2h	equ	0xFDA
  9088                           fsr2l	equ	0xFD9
  9089                           status	equ	0xFD8
  9090                           
  9091 ;; *************** function _exp *****************
  9092 ;; Defined at:
  9093 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;  x               3   72[COMRAM] int 
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;  exponent        2   78[COMRAM] int 
  9098 ;;  sign            1   80[COMRAM] unsigned char 
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  3   72[COMRAM] unsigned char 
  9101 ;; Registers used:
  9102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9108 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9111 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9112 ;;Total ram usage:        9 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    3
  9115 ;; This function calls:
  9116 ;;		___awtoft
  9117 ;;		___ftdiv
  9118 ;;		___ftge
  9119 ;;		___ftmul
  9120 ;;		___ftneg
  9121 ;;		___ftsub
  9122 ;;		___fttol
  9123 ;;		_eval_poly
  9124 ;;		_floor
  9125 ;;		_ldexp
  9126 ;; This function is called by:
  9127 ;;		_pow
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131                           	psect	text46
  9132  000A86                     __ptext46:
  9133                           	opt stack 0
  9134  000A86                     _exp:
  9135                           	opt stack 20
  9136                           
  9137                           ;incstack = 0
  9138  000A86  5049               	movf	exp@x,w,c
  9139  000A88  104A               	iorwf	exp@x+1,w,c
  9140  000A8A  104B               	iorwf	exp@x+2,w,c
  9141  000A8C  A4D8               	btfss	status,2,c
  9142  000A8E  D007               	goto	i2l3383
  9143  000A90  0E00               	movlw	0
  9144  000A92  6E49               	movwf	?_exp,c
  9145  000A94  0E80               	movlw	128
  9146  000A96  6E4A               	movwf	?_exp+1,c
  9147  000A98  0E3F               	movlw	63
  9148  000A9A  6E4B               	movwf	?_exp+2,c
  9149  000A9C  0012               	return	
  9150  000A9E                     i2l3383:
  9151  000A9E  0E72               	movlw	114
  9152  000AA0  6E01               	movwf	___ftge@ff1,c
  9153  000AA2  0E31               	movlw	49
  9154  000AA4  6E02               	movwf	___ftge@ff1+1,c
  9155  000AA6  0E44               	movlw	68
  9156  000AA8  6E03               	movwf	___ftge@ff1+2,c
  9157  000AAA  C049  F004         	movff	exp@x,___ftge@ff2
  9158  000AAE  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  9159  000AB2  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  9160  000AB6  EC9A  F010         	call	___ftge	;wreg free
  9161  000ABA  B0D8               	btfsc	status,0,c
  9162  000ABC  D00C               	goto	i2l3389
  9163  000ABE  0E00               	movlw	0
  9164  000AC0  0100               	movlb	0	; () banked
  9165  000AC2  6FD7               	movwf	(_errno+1)& (0+255),b
  9166  000AC4  0E22               	movlw	34
  9167  000AC6  6FD6               	movwf	_errno& (0+255),b
  9168  000AC8  0EFF               	movlw	255
  9169  000ACA  6E49               	movwf	?_exp,c
  9170  000ACC  0E7F               	movlw	127
  9171  000ACE  6E4A               	movwf	?_exp+1,c
  9172  000AD0  0E7F               	movlw	127
  9173  000AD2  6E4B               	movwf	?_exp+2,c
  9174                           
  9175                           ; BSR set to: 0
  9176  000AD4  0012               	return	
  9177  000AD6                     i2l3389:
  9178  000AD6  C049  F001         	movff	exp@x,___ftge@ff1
  9179  000ADA  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  9180  000ADE  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  9181  000AE2  0E49               	movlw	73
  9182  000AE4  6E04               	movwf	___ftge@ff2,c
  9183  000AE6  0E3A               	movlw	58
  9184  000AE8  6E05               	movwf	___ftge@ff2+1,c
  9185  000AEA  0EC4               	movlw	196
  9186  000AEC  6E06               	movwf	___ftge@ff2+2,c
  9187  000AEE  EC9A  F010         	call	___ftge	;wreg free
  9188  000AF2  B0D8               	btfsc	status,0,c
  9189  000AF4  D00C               	goto	i2l3395
  9190  000AF6  0E00               	movlw	0
  9191  000AF8  0100               	movlb	0	; () banked
  9192  000AFA  6FD7               	movwf	(_errno+1)& (0+255),b
  9193  000AFC  0E22               	movlw	34
  9194  000AFE  6FD6               	movwf	_errno& (0+255),b
  9195  000B00  0E00               	movlw	0
  9196  000B02  6E49               	movwf	?_exp,c
  9197  000B04  0E00               	movlw	0
  9198  000B06  6E4A               	movwf	?_exp+1,c
  9199  000B08  0E00               	movlw	0
  9200  000B0A  6E4B               	movwf	?_exp+2,c
  9201                           
  9202                           ; BSR set to: 0
  9203  000B0C  0012               	return	
  9204  000B0E                     i2l3395:
  9205  000B0E  AE4B               	btfss	exp@x+2,7,c
  9206  000B10  D002               	goto	i2u289_40
  9207  000B12  0E01               	movlw	1
  9208  000B14  D001               	goto	i2u290_40
  9209  000B16                     i2u289_40:
  9210  000B16  0E00               	movlw	0
  9211  000B18                     i2u290_40:
  9212  000B18  6E51               	movwf	exp@sign,c
  9213  000B1A  5051               	movf	exp@sign,w,c
  9214  000B1C  B4D8               	btfsc	status,2,c
  9215  000B1E  D00E               	goto	i2l1028
  9216  000B20  C049  F001         	movff	exp@x,___ftneg@f1
  9217  000B24  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  9218  000B28  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  9219  000B2C  EC0B  F014         	call	___ftneg	;wreg free
  9220  000B30  C001  F049         	movff	?___ftneg,exp@x
  9221  000B34  C002  F04A         	movff	?___ftneg+1,exp@x+1
  9222  000B38  C003  F04B         	movff	?___ftneg+2,exp@x+2
  9223  000B3C                     i2l1028:
  9224  000B3C  C049  F00D         	movff	exp@x,___ftmul@f1
  9225  000B40  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  9226  000B44  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  9227  000B48  0EAA               	movlw	170
  9228  000B4A  6E10               	movwf	___ftmul@f2,c
  9229  000B4C  0EB8               	movlw	184
  9230  000B4E  6E11               	movwf	___ftmul@f2+1,c
  9231  000B50  0E3F               	movlw	63
  9232  000B52  6E12               	movwf	___ftmul@f2+2,c
  9233  000B54  EC67  F00A         	call	___ftmul	;wreg free
  9234  000B58  C00D  F049         	movff	?___ftmul,exp@x
  9235  000B5C  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  9236  000B60  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  9237  000B64  C049  F041         	movff	exp@x,floor@x
  9238  000B68  C04A  F042         	movff	exp@x+1,floor@x+1
  9239  000B6C  C04B  F043         	movff	exp@x+2,floor@x+2
  9240  000B70  ECCB  F00B         	call	_floor	;wreg free
  9241  000B74  C041  F04C         	movff	?_floor,_exp$1234
  9242  000B78  C042  F04D         	movff	?_floor+1,_exp$1234+1
  9243  000B7C  C043  F04E         	movff	?_floor+2,_exp$1234+2
  9244  000B80  C04C  F028         	movff	_exp$1234,___fttol@f1
  9245  000B84  C04D  F029         	movff	_exp$1234+1,___fttol@f1+1
  9246  000B88  C04E  F02A         	movff	_exp$1234+2,___fttol@f1+2
  9247  000B8C  ECED  F009         	call	___fttol	;wreg free
  9248  000B90  C028  F04F         	movff	?___fttol,exp@exponent
  9249  000B94  C029  F050         	movff	?___fttol+1,exp@exponent+1
  9250  000B98  C049  F028         	movff	exp@x,___ftsub@f1
  9251  000B9C  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  9252  000BA0  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  9253  000BA4  C04F  F009         	movff	exp@exponent,___awtoft@c
  9254  000BA8  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  9255  000BAC  EC67  F013         	call	___awtoft	;wreg free
  9256  000BB0  C009  F02B         	movff	?___awtoft,___ftsub@f2
  9257  000BB4  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  9258  000BB8  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  9259  000BBC  EC28  F013         	call	___ftsub	;wreg free
  9260  000BC0  C028  F049         	movff	?___ftsub,exp@x
  9261  000BC4  C029  F04A         	movff	?___ftsub+1,exp@x+1
  9262  000BC8  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  9263  000BCC  C049  F028         	movff	exp@x,eval_poly@x
  9264  000BD0  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  9265  000BD4  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  9266  000BD8  0E1F               	movlw	low exp@coeff
  9267  000BDA  6E2B               	movwf	eval_poly@d,c
  9268  000BDC  0EFE               	movlw	high exp@coeff
  9269  000BDE  6E2C               	movwf	eval_poly@d+1,c
  9270  000BE0  0E00               	movlw	0
  9271  000BE2  6E2E               	movwf	eval_poly@n+1,c
  9272  000BE4  0E09               	movlw	9
  9273  000BE6  6E2D               	movwf	eval_poly@n,c
  9274  000BE8  EC7F  F00D         	call	_eval_poly	;wreg free
  9275  000BEC  C028  F034         	movff	?_eval_poly,ldexp@value
  9276  000BF0  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  9277  000BF4  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  9278  000BF8  C04F  F037         	movff	exp@exponent,ldexp@newexp
  9279  000BFC  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  9280  000C00  EC4C  F00E         	call	_ldexp	;wreg free
  9281  000C04  C034  F049         	movff	?_ldexp,exp@x
  9282  000C08  C035  F04A         	movff	?_ldexp+1,exp@x+1
  9283  000C0C  C036  F04B         	movff	?_ldexp+2,exp@x+2
  9284  000C10  5051               	movf	exp@sign,w,c
  9285  000C12  B4D8               	btfsc	status,2,c
  9286  000C14  D025               	goto	i2l1029
  9287  000C16  2849               	incf	exp@x,w,c
  9288  000C18  E10E               	bnz	i2l3417
  9289  000C1A  0E7F               	movlw	127
  9290  000C1C  184A               	xorwf	exp@x+1,w,c
  9291  000C1E  E10B               	bnz	i2l3417
  9292  000C20  0E7F               	movlw	127
  9293  000C22  184B               	xorwf	exp@x+2,w,c
  9294  000C24  A4D8               	btfss	status,2,c
  9295  000C26  D007               	goto	i2l3417
  9296  000C28  0E00               	movlw	0
  9297  000C2A  6E49               	movwf	?_exp,c
  9298  000C2C  0E00               	movlw	0
  9299  000C2E  6E4A               	movwf	?_exp+1,c
  9300  000C30  0E00               	movlw	0
  9301  000C32  6E4B               	movwf	?_exp+2,c
  9302  000C34  0012               	return	
  9303  000C36                     i2l3417:
  9304  000C36  0E00               	movlw	0
  9305  000C38  6E09               	movwf	___ftdiv@f1,c
  9306  000C3A  0E80               	movlw	128
  9307  000C3C  6E0A               	movwf	___ftdiv@f1+1,c
  9308  000C3E  0E3F               	movlw	63
  9309  000C40  6E0B               	movwf	___ftdiv@f1+2,c
  9310  000C42  C049  F00C         	movff	exp@x,___ftdiv@f2
  9311  000C46  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  9312  000C4A  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  9313  000C4E  EC58  F00B         	call	___ftdiv	;wreg free
  9314  000C52  C009  F049         	movff	?___ftdiv,?_exp
  9315  000C56  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  9316  000C5A  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  9317  000C5E  0012               	return	
  9318  000C60                     i2l1029:
  9319  000C60  C049  F049         	movff	exp@x,?_exp
  9320  000C64  C04A  F04A         	movff	exp@x+1,?_exp+1
  9321  000C68  C04B  F04B         	movff	exp@x+2,?_exp+2
  9322  000C6C  0012               	return		;funcret
  9323  000C6E                     __end_of_exp:
  9324                           	opt stack 0
  9325                           pclatu	equ	0xFFB
  9326                           pclath	equ	0xFFA
  9327                           tblptru	equ	0xFF8
  9328                           tblptrh	equ	0xFF7
  9329                           tblptrl	equ	0xFF6
  9330                           tablat	equ	0xFF5
  9331                           prodh	equ	0xFF4
  9332                           prodl	equ	0xFF3
  9333                           intcon	equ	0xFF2
  9334                           intcon2	equ	0xFF1
  9335                           intcon3	equ	0xFF0
  9336                           postinc0	equ	0xFEE
  9337                           fsr0h	equ	0xFEA
  9338                           fsr0l	equ	0xFE9
  9339                           wreg	equ	0xFE8
  9340                           fsr1h	equ	0xFE2
  9341                           fsr1l	equ	0xFE1
  9342                           indf2	equ	0xFDF
  9343                           postinc2	equ	0xFDE
  9344                           postdec2	equ	0xFDD
  9345                           fsr2h	equ	0xFDA
  9346                           fsr2l	equ	0xFD9
  9347                           status	equ	0xFD8
  9348                           
  9349 ;; *************** function _ldexp *****************
  9350 ;; Defined at:
  9351 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;  value           3   51[COMRAM] unsigned char 
  9354 ;;  newexp          2   54[COMRAM] int 
  9355 ;; Auto vars:     Size  Location     Type
  9356 ;;		None
  9357 ;; Return value:  Size  Location     Type
  9358 ;;                  3   51[COMRAM] int 
  9359 ;; Registers used:
  9360 ;;		wreg, status,2, status,0
  9361 ;; Tracked objects:
  9362 ;;		On entry : 0/0
  9363 ;;		On exit  : 0/0
  9364 ;;		Unchanged: 0/0
  9365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9366 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9368 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9369 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9370 ;;Total ram usage:        7 bytes
  9371 ;; Hardware stack levels used:    1
  9372 ;; This function calls:
  9373 ;;		Nothing
  9374 ;; This function is called by:
  9375 ;;		_exp
  9376 ;; This function uses a non-reentrant model
  9377 ;;
  9378                           
  9379                           	psect	text47
  9380  001C98                     __ptext47:
  9381                           	opt stack 0
  9382  001C98                     _ldexp:
  9383                           	opt stack 22
  9384                           
  9385                           ;incstack = 0
  9386  001C98  5034               	movf	ldexp@value,w,c
  9387  001C9A  1035               	iorwf	ldexp@value+1,w,c
  9388  001C9C  1036               	iorwf	ldexp@value+2,w,c
  9389  001C9E  A4D8               	btfss	status,2,c
  9390  001CA0  D007               	goto	i2l3229
  9391  001CA2  0E00               	movlw	0
  9392  001CA4  6E34               	movwf	?_ldexp,c
  9393  001CA6  0E00               	movlw	0
  9394  001CA8  6E35               	movwf	?_ldexp+1,c
  9395  001CAA  0E00               	movlw	0
  9396  001CAC  6E36               	movwf	?_ldexp+2,c
  9397  001CAE  0012               	return	
  9398  001CB0                     i2l3229:
  9399  001CB0  5036               	movf	ldexp@value+2,w,c
  9400  001CB2  0B7F               	andlw	127
  9401  001CB4  6E39               	movwf	??_ldexp& (0+255),c
  9402  001CB6  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  9403  001CB8  90D8               	bcf	status,0,c
  9404  001CBA  3639               	rlcf	??_ldexp,f,c
  9405  001CBC  363A               	rlcf	??_ldexp+1,f,c
  9406  001CBE  5039               	movf	??_ldexp,w,c
  9407  001CC0  2637               	addwf	ldexp@newexp,f,c
  9408  001CC2  503A               	movf	??_ldexp+1,w,c
  9409  001CC4  2238               	addwfc	ldexp@newexp+1,f,c
  9410  001CC6  AE35               	btfss	ldexp@value+1,7,c
  9411  001CC8  D003               	goto	i2u269_40
  9412  001CCA  6A39               	clrf	??_ldexp& (0+255),c
  9413  001CCC  2A39               	incf	??_ldexp& (0+255),f,c
  9414  001CCE  D001               	goto	i2u269_48
  9415  001CD0                     i2u269_40:
  9416  001CD0  6A39               	clrf	??_ldexp& (0+255),c
  9417  001CD2                     i2u269_48:
  9418  001CD2  5039               	movf	??_ldexp,w,c
  9419  001CD4  2637               	addwf	ldexp@newexp,f,c
  9420  001CD6  0E00               	movlw	0
  9421  001CD8  2238               	addwfc	ldexp@newexp+1,f,c
  9422  001CDA  AE38               	btfss	ldexp@newexp+1,7,c
  9423  001CDC  D00C               	goto	i2l3237
  9424  001CDE  0E00               	movlw	0
  9425  001CE0  0100               	movlb	0	; () banked
  9426  001CE2  6FD7               	movwf	(_errno+1)& (0+255),b
  9427  001CE4  0E22               	movlw	34
  9428  001CE6  6FD6               	movwf	_errno& (0+255),b
  9429  001CE8  0E00               	movlw	0
  9430  001CEA  6E34               	movwf	?_ldexp,c
  9431  001CEC  0E00               	movlw	0
  9432  001CEE  6E35               	movwf	?_ldexp+1,c
  9433  001CF0  0E00               	movlw	0
  9434  001CF2                     L8:
  9435  001CF2  6E36               	movwf	?_ldexp+2,c
  9436                           
  9437                           ; BSR set to: 0
  9438  001CF4  0012               	return	
  9439  001CF6                     i2l3237:
  9440  001CF6  BE38               	btfsc	ldexp@newexp+1,7,c
  9441  001CF8  D016               	goto	i2l3253
  9442  001CFA  0438               	decf	ldexp@newexp+1,w,c
  9443  001CFC  A0D8               	btfss	status,0,c
  9444  001CFE  D013               	goto	i2l3253
  9445  001D00  0E00               	movlw	0
  9446  001D02  0100               	movlb	0	; () banked
  9447  001D04  6FD7               	movwf	(_errno+1)& (0+255),b
  9448  001D06  0E22               	movlw	34
  9449  001D08  6FD6               	movwf	_errno& (0+255),b
  9450                           
  9451                           ; BSR set to: 0
  9452  001D0A  AE36               	btfss	ldexp@value+2,7,c
  9453  001D0C  D006               	goto	i2l3249
  9454                           
  9455                           ; BSR set to: 0
  9456  001D0E  0EFF               	movlw	255
  9457  001D10  6E34               	movwf	?_ldexp,c
  9458  001D12  0E7F               	movlw	127
  9459  001D14  6E35               	movwf	?_ldexp+1,c
  9460  001D16  0EFF               	movlw	255
  9461  001D18  D7EC               	goto	L8
  9462  001D1A                     i2l3249:
  9463                           
  9464                           ; BSR set to: 0
  9465  001D1A  0EFF               	movlw	255
  9466  001D1C  6E34               	movwf	?_ldexp,c
  9467  001D1E  0E7F               	movlw	127
  9468  001D20  6E35               	movwf	?_ldexp+1,c
  9469  001D22  0E7F               	movlw	127
  9470  001D24  D7E6               	goto	L8
  9471  001D26                     i2l3253:
  9472  001D26  3438               	rlcf	ldexp@newexp+1,w,c
  9473  001D28  3038               	rrcf	ldexp@newexp+1,w,c
  9474  001D2A  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  9475  001D2C  3037               	rrcf	ldexp@newexp,w,c
  9476  001D2E  6E39               	movwf	??_ldexp& (0+255),c
  9477  001D30  5036               	movf	ldexp@value+2,w,c
  9478  001D32  1839               	xorwf	??_ldexp,w,c
  9479  001D34  0B80               	andlw	-128
  9480  001D36  1839               	xorwf	??_ldexp,w,c
  9481  001D38  6E36               	movwf	ldexp@value+2,c
  9482  001D3A  C037  F039         	movff	ldexp@newexp,??_ldexp
  9483  001D3E  0E01               	movlw	1
  9484  001D40  1639               	andwf	??_ldexp,f,c
  9485  001D42  3239               	rrcf	??_ldexp,f,c
  9486  001D44  3239               	rrcf	??_ldexp,f,c
  9487  001D46  5035               	movf	ldexp@value+1,w,c
  9488  001D48  1839               	xorwf	??_ldexp,w,c
  9489  001D4A  0B7F               	andlw	-129
  9490  001D4C  1839               	xorwf	??_ldexp,w,c
  9491  001D4E  6E35               	movwf	ldexp@value+1,c
  9492  001D50  C034  F034         	movff	ldexp@value,?_ldexp
  9493  001D54  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  9494  001D58  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  9495  001D5C  0012               	return	
  9496  001D5E                     __end_of_ldexp:
  9497                           	opt stack 0
  9498                           pclatu	equ	0xFFB
  9499                           pclath	equ	0xFFA
  9500                           tblptru	equ	0xFF8
  9501                           tblptrh	equ	0xFF7
  9502                           tblptrl	equ	0xFF6
  9503                           tablat	equ	0xFF5
  9504                           prodh	equ	0xFF4
  9505                           prodl	equ	0xFF3
  9506                           intcon	equ	0xFF2
  9507                           intcon2	equ	0xFF1
  9508                           intcon3	equ	0xFF0
  9509                           postinc0	equ	0xFEE
  9510                           fsr0h	equ	0xFEA
  9511                           fsr0l	equ	0xFE9
  9512                           wreg	equ	0xFE8
  9513                           fsr1h	equ	0xFE2
  9514                           fsr1l	equ	0xFE1
  9515                           indf2	equ	0xFDF
  9516                           postinc2	equ	0xFDE
  9517                           postdec2	equ	0xFDD
  9518                           fsr2h	equ	0xFDA
  9519                           fsr2l	equ	0xFD9
  9520                           status	equ	0xFD8
  9521                           
  9522 ;; *************** function _floor *****************
  9523 ;; Defined at:
  9524 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  9525 ;; Parameters:    Size  Location     Type
  9526 ;;  x               3   64[COMRAM] int 
  9527 ;; Auto vars:     Size  Location     Type
  9528 ;;  i               3   67[COMRAM] int 
  9529 ;;  expon           2   70[COMRAM] int 
  9530 ;; Return value:  Size  Location     Type
  9531 ;;                  3   64[COMRAM] int 
  9532 ;; Registers used:
  9533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9534 ;; Tracked objects:
  9535 ;;		On entry : 0/0
  9536 ;;		On exit  : 0/0
  9537 ;;		Unchanged: 0/0
  9538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9539 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9540 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9542 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9543 ;;Total ram usage:        8 bytes
  9544 ;; Hardware stack levels used:    1
  9545 ;; Hardware stack levels required when called:    2
  9546 ;; This function calls:
  9547 ;;		___altoft
  9548 ;;		___ftadd
  9549 ;;		___ftge
  9550 ;;		___fttol
  9551 ;;		_frexp
  9552 ;; This function is called by:
  9553 ;;		_exp
  9554 ;; This function uses a non-reentrant model
  9555 ;;
  9556                           
  9557                           	psect	text48
  9558  001796                     __ptext48:
  9559                           	opt stack 0
  9560  001796                     _floor:
  9561                           	opt stack 20
  9562                           
  9563                           ;incstack = 0
  9564  001796  C041  F001         	movff	floor@x,frexp@value
  9565  00179A  C042  F002         	movff	floor@x+1,frexp@value+1
  9566  00179E  C043  F003         	movff	floor@x+2,frexp@value+2
  9567  0017A2  0E47               	movlw	low floor@expon
  9568  0017A4  6E04               	movwf	frexp@eptr,c
  9569  0017A6  0E00               	movlw	high floor@expon
  9570  0017A8  6E05               	movwf	frexp@eptr+1,c
  9571  0017AA  EC52  F010         	call	_frexp	;wreg free
  9572  0017AE  AE48               	btfss	floor@expon+1,7,c
  9573  0017B0  D010               	goto	i2l3207
  9574  0017B2  AE43               	btfss	floor@x+2,7,c
  9575  0017B4  D007               	goto	i2l3203
  9576  0017B6  0E00               	movlw	0
  9577  0017B8  6E41               	movwf	?_floor,c
  9578  0017BA  0E80               	movlw	128
  9579  0017BC  6E42               	movwf	?_floor+1,c
  9580  0017BE  0EBF               	movlw	191
  9581  0017C0  6E43               	movwf	?_floor+2,c
  9582  0017C2  0012               	return	
  9583  0017C4                     i2l3203:
  9584  0017C4  0E00               	movlw	0
  9585  0017C6  6E41               	movwf	?_floor,c
  9586  0017C8  0E00               	movlw	0
  9587  0017CA  6E42               	movwf	?_floor+1,c
  9588  0017CC  0E00               	movlw	0
  9589  0017CE  6E43               	movwf	?_floor+2,c
  9590  0017D0  0012               	return	
  9591  0017D2                     i2l3207:
  9592  0017D2  5048               	movf	floor@expon+1,w,c
  9593  0017D4  E104               	bnz	i2u265_40
  9594  0017D6  0E15               	movlw	21
  9595  0017D8  5C47               	subwf	floor@expon,w,c
  9596  0017DA  A0D8               	btfss	status,0,c
  9597  0017DC  D007               	goto	i2l3211
  9598  0017DE                     i2u265_40:
  9599  0017DE  C041  F041         	movff	floor@x,?_floor
  9600  0017E2  C042  F042         	movff	floor@x+1,?_floor+1
  9601  0017E6  C043  F043         	movff	floor@x+2,?_floor+2
  9602  0017EA  0012               	return	
  9603  0017EC                     i2l3211:
  9604  0017EC  C041  F028         	movff	floor@x,___fttol@f1
  9605  0017F0  C042  F029         	movff	floor@x+1,___fttol@f1+1
  9606  0017F4  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  9607  0017F8  ECED  F009         	call	___fttol	;wreg free
  9608  0017FC  C028  F037         	movff	?___fttol,___altoft@c
  9609  001800  C029  F038         	movff	?___fttol+1,___altoft@c+1
  9610  001804  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  9611  001808  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  9612  00180C  EC60  F011         	call	___altoft	;wreg free
  9613  001810  C037  F044         	movff	?___altoft,floor@i
  9614  001814  C038  F045         	movff	?___altoft+1,floor@i+1
  9615  001818  C039  F046         	movff	?___altoft+2,floor@i+2
  9616  00181C  C041  F001         	movff	floor@x,___ftge@ff1
  9617  001820  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  9618  001824  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  9619  001828  C044  F004         	movff	floor@i,___ftge@ff2
  9620  00182C  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  9621  001830  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  9622  001834  EC9A  F010         	call	___ftge	;wreg free
  9623  001838  B0D8               	btfsc	status,0,c
  9624  00183A  D015               	goto	i2l1039
  9625  00183C  C044  F01C         	movff	floor@i,___ftadd@f1
  9626  001840  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  9627  001844  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  9628  001848  0E00               	movlw	0
  9629  00184A  6E1F               	movwf	___ftadd@f2,c
  9630  00184C  0E80               	movlw	128
  9631  00184E  6E20               	movwf	___ftadd@f2+1,c
  9632  001850  0EBF               	movlw	191
  9633  001852  6E21               	movwf	___ftadd@f2+2,c
  9634  001854  EC37  F006         	call	___ftadd	;wreg free
  9635  001858  C01C  F041         	movff	?___ftadd,?_floor
  9636  00185C  C01D  F042         	movff	?___ftadd+1,?_floor+1
  9637  001860  C01E  F043         	movff	?___ftadd+2,?_floor+2
  9638  001864  0012               	return	
  9639  001866                     i2l1039:
  9640  001866  C044  F041         	movff	floor@i,?_floor
  9641  00186A  C045  F042         	movff	floor@i+1,?_floor+1
  9642  00186E  C046  F043         	movff	floor@i+2,?_floor+2
  9643  001872  0012               	return		;funcret
  9644  001874                     __end_of_floor:
  9645                           	opt stack 0
  9646                           pclatu	equ	0xFFB
  9647                           pclath	equ	0xFFA
  9648                           tblptru	equ	0xFF8
  9649                           tblptrh	equ	0xFF7
  9650                           tblptrl	equ	0xFF6
  9651                           tablat	equ	0xFF5
  9652                           prodh	equ	0xFF4
  9653                           prodl	equ	0xFF3
  9654                           intcon	equ	0xFF2
  9655                           intcon2	equ	0xFF1
  9656                           intcon3	equ	0xFF0
  9657                           postinc0	equ	0xFEE
  9658                           fsr0h	equ	0xFEA
  9659                           fsr0l	equ	0xFE9
  9660                           wreg	equ	0xFE8
  9661                           fsr1h	equ	0xFE2
  9662                           fsr1l	equ	0xFE1
  9663                           indf2	equ	0xFDF
  9664                           postinc2	equ	0xFDE
  9665                           postdec2	equ	0xFDD
  9666                           fsr2h	equ	0xFDA
  9667                           fsr2l	equ	0xFD9
  9668                           status	equ	0xFD8
  9669                           
  9670 ;; *************** function _frexp *****************
  9671 ;; Defined at:
  9672 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;  value           3    0[COMRAM] int 
  9675 ;;  eptr            2    3[COMRAM] PTR int 
  9676 ;;		 -> log@exponent(2), floor@expon(2), 
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;		None
  9679 ;; Return value:  Size  Location     Type
  9680 ;;                  3    0[COMRAM] PTR int 
  9681 ;; Registers used:
  9682 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9683 ;; Tracked objects:
  9684 ;;		On entry : 0/0
  9685 ;;		On exit  : 0/0
  9686 ;;		Unchanged: 0/0
  9687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9688 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9691 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9692 ;;Total ram usage:        7 bytes
  9693 ;; Hardware stack levels used:    1
  9694 ;; This function calls:
  9695 ;;		Nothing
  9696 ;; This function is called by:
  9697 ;;		_floor
  9698 ;;		_log
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           	psect	text49
  9703  0020A4                     __ptext49:
  9704                           	opt stack 0
  9705  0020A4                     _frexp:
  9706                           	opt stack 22
  9707                           
  9708                           ;incstack = 0
  9709  0020A4  5001               	movf	frexp@value,w,c
  9710  0020A6  1002               	iorwf	frexp@value+1,w,c
  9711  0020A8  1003               	iorwf	frexp@value+2,w,c
  9712  0020AA  A4D8               	btfss	status,2,c
  9713  0020AC  D00F               	goto	i2l3083
  9714  0020AE  C004  FFD9         	movff	frexp@eptr,fsr2l
  9715  0020B2  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9716  0020B6  0E00               	movlw	0
  9717  0020B8  6EDE               	movwf	postinc2,c
  9718  0020BA  0E00               	movlw	0
  9719  0020BC  6EDD               	movwf	postdec2,c
  9720  0020BE  0E00               	movlw	0
  9721  0020C0  6E01               	movwf	?_frexp,c
  9722  0020C2  0E00               	movlw	0
  9723  0020C4  6E02               	movwf	?_frexp+1,c
  9724  0020C6  0E00               	movlw	0
  9725  0020C8  6E03               	movwf	?_frexp+2,c
  9726  0020CA  0012               	return	
  9727  0020CC                     i2l3083:
  9728  0020CC  5003               	movf	frexp@value+2,w,c
  9729  0020CE  0B7F               	andlw	127
  9730  0020D0  6E06               	movwf	??_frexp& (0+255),c
  9731  0020D2  6A07               	clrf	(??_frexp+1)& (0+255),c
  9732  0020D4  90D8               	bcf	status,0,c
  9733  0020D6  3606               	rlcf	??_frexp,f,c
  9734  0020D8  3607               	rlcf	??_frexp+1,f,c
  9735  0020DA  C004  FFD9         	movff	frexp@eptr,fsr2l
  9736  0020DE  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9737  0020E2  C006  FFDE         	movff	??_frexp,postinc2
  9738  0020E6  C007  FFDD         	movff	??_frexp+1,postdec2
  9739  0020EA  AE02               	btfss	frexp@value+1,7,c
  9740  0020EC  D003               	goto	i2u252_40
  9741  0020EE  6A06               	clrf	??_frexp& (0+255),c
  9742  0020F0  2A06               	incf	??_frexp& (0+255),f,c
  9743  0020F2  D001               	goto	i2u252_48
  9744  0020F4                     i2u252_40:
  9745  0020F4  6A06               	clrf	??_frexp& (0+255),c
  9746  0020F6                     i2u252_48:
  9747  0020F6  5006               	movf	??_frexp,w,c
  9748  0020F8  C004  FFD9         	movff	frexp@eptr,fsr2l
  9749  0020FC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9750  002100  12DE               	iorwf	postinc2,f,c
  9751  002102  0E00               	movlw	0
  9752  002104  12DD               	iorwf	postdec2,f,c
  9753  002106  C004  FFD9         	movff	frexp@eptr,fsr2l
  9754  00210A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9755  00210E  0E82               	movlw	130
  9756  002110  26DE               	addwf	postinc2,f,c
  9757  002112  0EFF               	movlw	255
  9758  002114  22DD               	addwfc	postdec2,f,c
  9759  002116  8003               	bsf	frexp@value+2,0,c
  9760  002118  8203               	bsf	frexp@value+2,1,c
  9761  00211A  8403               	bsf	frexp@value+2,2,c
  9762  00211C  8603               	bsf	frexp@value+2,3,c
  9763  00211E  8803               	bsf	frexp@value+2,4,c
  9764  002120  8A03               	bsf	frexp@value+2,5,c
  9765  002122  9C03               	bcf	frexp@value+2,6,c
  9766  002124  9E02               	bcf	frexp@value+1,7,c
  9767  002126  C001  F001         	movff	frexp@value,?_frexp
  9768  00212A  C002  F002         	movff	frexp@value+1,?_frexp+1
  9769  00212E  C003  F003         	movff	frexp@value+2,?_frexp+2
  9770  002132  0012               	return	
  9771  002134                     __end_of_frexp:
  9772                           	opt stack 0
  9773                           pclatu	equ	0xFFB
  9774                           pclath	equ	0xFFA
  9775                           tblptru	equ	0xFF8
  9776                           tblptrh	equ	0xFF7
  9777                           tblptrl	equ	0xFF6
  9778                           tablat	equ	0xFF5
  9779                           prodh	equ	0xFF4
  9780                           prodl	equ	0xFF3
  9781                           intcon	equ	0xFF2
  9782                           intcon2	equ	0xFF1
  9783                           intcon3	equ	0xFF0
  9784                           postinc0	equ	0xFEE
  9785                           fsr0h	equ	0xFEA
  9786                           fsr0l	equ	0xFE9
  9787                           wreg	equ	0xFE8
  9788                           fsr1h	equ	0xFE2
  9789                           fsr1l	equ	0xFE1
  9790                           indf2	equ	0xFDF
  9791                           postinc2	equ	0xFDE
  9792                           postdec2	equ	0xFDD
  9793                           fsr2h	equ	0xFDA
  9794                           fsr2l	equ	0xFD9
  9795                           status	equ	0xFD8
  9796                           
  9797 ;; *************** function ___fttol *****************
  9798 ;; Defined at:
  9799 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;  f1              3   39[COMRAM] float 
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;  lval            4   49[COMRAM] unsigned long 
  9804 ;;  exp1            1   53[COMRAM] unsigned char 
  9805 ;;  sign1           1   48[COMRAM] unsigned char 
  9806 ;; Return value:  Size  Location     Type
  9807 ;;                  4   39[COMRAM] long 
  9808 ;; Registers used:
  9809 ;;		wreg, status,2, status,0
  9810 ;; Tracked objects:
  9811 ;;		On entry : 0/0
  9812 ;;		On exit  : 0/0
  9813 ;;		Unchanged: 0/0
  9814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9815 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9817 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9818 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9819 ;;Total ram usage:       15 bytes
  9820 ;; Hardware stack levels used:    1
  9821 ;; This function calls:
  9822 ;;		Nothing
  9823 ;; This function is called by:
  9824 ;;		_dec_to_hex
  9825 ;;		_pow
  9826 ;;		_exp
  9827 ;;		_floor
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           	psect	text50
  9832  0013DA                     __ptext50:
  9833                           	opt stack 0
  9834  0013DA                     ___fttol:
  9835                           	opt stack 21
  9836                           
  9837                           ;incstack = 0
  9838  0013DA  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  9839  0013DE  6A2D               	clrf	(??___fttol+1)& (0+255),c
  9840  0013E0  6A2E               	clrf	(??___fttol+2)& (0+255),c
  9841  0013E2  3429               	rlcf	___fttol@f1+1,w,c
  9842  0013E4  362C               	rlcf	??___fttol& (0+255),f,c
  9843  0013E6  E301               	bnc	u243_41
  9844  0013E8  802D               	bsf	(??___fttol+1)& (0+255),0,c
  9845  0013EA                     u243_41:
  9846  0013EA  502C               	movf	??___fttol,w,c
  9847  0013EC  6E36               	movwf	___fttol@exp1,c
  9848  0013EE  5036               	movf	___fttol@exp1,w,c
  9849  0013F0  A4D8               	btfss	status,2,c
  9850  0013F2  D009               	goto	i2l3035
  9851  0013F4  0E00               	movlw	0
  9852  0013F6  6E28               	movwf	?___fttol,c
  9853  0013F8  0E00               	movlw	0
  9854  0013FA  6E29               	movwf	?___fttol+1,c
  9855  0013FC  0E00               	movlw	0
  9856  0013FE  6E2A               	movwf	?___fttol+2,c
  9857  001400  0E00               	movlw	0
  9858  001402  6E2B               	movwf	?___fttol+3,c
  9859  001404  0012               	return	
  9860  001406                     i2l3035:
  9861  001406  0E17               	movlw	23
  9862  001408  6E2C               	movwf	??___fttol& (0+255),c
  9863  00140A  C028  F02D         	movff	___fttol@f1,??___fttol+1
  9864  00140E  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  9865  001412  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  9866  001416  282C               	incf	??___fttol,w,c
  9867  001418  6E30               	movwf	(??___fttol+4)& (0+255),c
  9868  00141A  D004               	goto	i2u245_40
  9869  00141C                     i2u245_45:
  9870  00141C  90D8               	bcf	status,0,c
  9871  00141E  322F               	rrcf	??___fttol+3,f,c
  9872  001420  322E               	rrcf	??___fttol+2,f,c
  9873  001422  322D               	rrcf	??___fttol+1,f,c
  9874  001424                     i2u245_40:
  9875  001424  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  9876  001426  D7FA               	goto	i2u245_45
  9877  001428  502D               	movf	??___fttol+1,w,c
  9878  00142A  6E31               	movwf	___fttol@sign1,c
  9879  00142C  8E29               	bsf	___fttol@f1+1,7,c
  9880  00142E  0EFF               	movlw	255
  9881  001430  1628               	andwf	___fttol@f1,f,c
  9882  001432  0EFF               	movlw	255
  9883  001434  1629               	andwf	___fttol@f1+1,f,c
  9884  001436  0E00               	movlw	0
  9885  001438  162A               	andwf	___fttol@f1+2,f,c
  9886  00143A  5028               	movf	___fttol@f1,w,c
  9887  00143C  6E32               	movwf	___fttol@lval,c
  9888  00143E  5029               	movf	___fttol@f1+1,w,c
  9889  001440  6E33               	movwf	___fttol@lval+1,c
  9890  001442  502A               	movf	___fttol@f1+2,w,c
  9891  001444  6E34               	movwf	___fttol@lval+2,c
  9892  001446  6A35               	clrf	___fttol@lval+3,c
  9893  001448  0E8E               	movlw	142
  9894  00144A  5E36               	subwf	___fttol@exp1,f,c
  9895  00144C  AE36               	btfss	___fttol@exp1,7,c
  9896  00144E  D016               	goto	i2l3057
  9897  001450  5036               	movf	___fttol@exp1,w,c
  9898  001452  0A80               	xorlw	128
  9899  001454  0F8F               	addlw	143
  9900  001456  B0D8               	btfsc	status,0,c
  9901  001458  D009               	goto	i2l3053
  9902  00145A  0E00               	movlw	0
  9903  00145C  6E28               	movwf	?___fttol,c
  9904  00145E  0E00               	movlw	0
  9905  001460  6E29               	movwf	?___fttol+1,c
  9906  001462  0E00               	movlw	0
  9907  001464  6E2A               	movwf	?___fttol+2,c
  9908  001466  0E00               	movlw	0
  9909  001468  6E2B               	movwf	?___fttol+3,c
  9910  00146A  0012               	return	
  9911  00146C                     i2l3053:
  9912  00146C  90D8               	bcf	status,0,c
  9913  00146E  3235               	rrcf	___fttol@lval+3,f,c
  9914  001470  3234               	rrcf	___fttol@lval+2,f,c
  9915  001472  3233               	rrcf	___fttol@lval+1,f,c
  9916  001474  3232               	rrcf	___fttol@lval,f,c
  9917  001476  3E36               	incfsz	___fttol@exp1,f,c
  9918  001478  D7F9               	goto	i2l3053
  9919  00147A  D015               	goto	i2l3067
  9920  00147C                     i2l3057:
  9921  00147C  0E17               	movlw	23
  9922  00147E  6436               	cpfsgt	___fttol@exp1,c
  9923  001480  D00F               	goto	i2l3065
  9924  001482  0E00               	movlw	0
  9925  001484  6E28               	movwf	?___fttol,c
  9926  001486  0E00               	movlw	0
  9927  001488  6E29               	movwf	?___fttol+1,c
  9928  00148A  0E00               	movlw	0
  9929  00148C  6E2A               	movwf	?___fttol+2,c
  9930  00148E  0E00               	movlw	0
  9931  001490  6E2B               	movwf	?___fttol+3,c
  9932  001492  0012               	return	
  9933  001494                     i2l3063:
  9934  001494  90D8               	bcf	status,0,c
  9935  001496  3632               	rlcf	___fttol@lval,f,c
  9936  001498  3633               	rlcf	___fttol@lval+1,f,c
  9937  00149A  3634               	rlcf	___fttol@lval+2,f,c
  9938  00149C  3635               	rlcf	___fttol@lval+3,f,c
  9939  00149E  0636               	decf	___fttol@exp1,f,c
  9940  0014A0                     i2l3065:
  9941  0014A0  5036               	movf	___fttol@exp1,w,c
  9942  0014A2  A4D8               	btfss	status,2,c
  9943  0014A4  D7F7               	goto	i2l3063
  9944  0014A6                     i2l3067:
  9945  0014A6  5031               	movf	___fttol@sign1,w,c
  9946  0014A8  B4D8               	btfsc	status,2,c
  9947  0014AA  D008               	goto	i2l3071
  9948  0014AC  1E35               	comf	___fttol@lval+3,f,c
  9949  0014AE  1E34               	comf	___fttol@lval+2,f,c
  9950  0014B0  1E33               	comf	___fttol@lval+1,f,c
  9951  0014B2  6C32               	negf	___fttol@lval,c
  9952  0014B4  0E00               	movlw	0
  9953  0014B6  2233               	addwfc	___fttol@lval+1,f,c
  9954  0014B8  2234               	addwfc	___fttol@lval+2,f,c
  9955  0014BA  2235               	addwfc	___fttol@lval+3,f,c
  9956  0014BC                     i2l3071:
  9957  0014BC  C032  F028         	movff	___fttol@lval,?___fttol
  9958  0014C0  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  9959  0014C4  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  9960  0014C8  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  9961  0014CC  0012               	return	
  9962  0014CE                     __end_of___fttol:
  9963                           	opt stack 0
  9964                           pclatu	equ	0xFFB
  9965                           pclath	equ	0xFFA
  9966                           tblptru	equ	0xFF8
  9967                           tblptrh	equ	0xFF7
  9968                           tblptrl	equ	0xFF6
  9969                           tablat	equ	0xFF5
  9970                           prodh	equ	0xFF4
  9971                           prodl	equ	0xFF3
  9972                           intcon	equ	0xFF2
  9973                           intcon2	equ	0xFF1
  9974                           intcon3	equ	0xFF0
  9975                           postinc0	equ	0xFEE
  9976                           fsr0h	equ	0xFEA
  9977                           fsr0l	equ	0xFE9
  9978                           wreg	equ	0xFE8
  9979                           fsr1h	equ	0xFE2
  9980                           fsr1l	equ	0xFE1
  9981                           indf2	equ	0xFDF
  9982                           postinc2	equ	0xFDE
  9983                           postdec2	equ	0xFDD
  9984                           fsr2h	equ	0xFDA
  9985                           fsr2l	equ	0xFD9
  9986                           status	equ	0xFD8
  9987                           
  9988 ;; *************** function ___ftge *****************
  9989 ;; Defined at:
  9990 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;  ff1             3    0[COMRAM] float 
  9993 ;;  ff2             3    3[COMRAM] float 
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;		None
  9996 ;; Return value:  Size  Location     Type
  9997 ;;		None               void
  9998 ;; Registers used:
  9999 ;;		wreg, status,2, status,0
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10005 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;Total ram usage:        9 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; This function calls:
 10012 ;;		Nothing
 10013 ;; This function is called by:
 10014 ;;		_pow
 10015 ;;		_exp
 10016 ;;		_floor
 10017 ;; This function uses a non-reentrant model
 10018 ;;
 10019                           
 10020                           	psect	text51
 10021  002134                     __ptext51:
 10022                           	opt stack 0
 10023  002134                     ___ftge:
 10024                           	opt stack 21
 10025                           
 10026                           ;incstack = 0
 10027  002134  AE03               	btfss	___ftge@ff1+2,7,c
 10028  002136  D016               	goto	i2l3015
 10029  002138  C001  F007         	movff	___ftge@ff1,??___ftge
 10030  00213C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 10031  002140  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 10032  002144  1E07               	comf	??___ftge,f,c
 10033  002146  1E08               	comf	??___ftge+1,f,c
 10034  002148  1E09               	comf	??___ftge+2,f,c
 10035  00214A  2A07               	incf	??___ftge,f,c
 10036  00214C  0E00               	movlw	0
 10037  00214E  2208               	addwfc	??___ftge+1,f,c
 10038  002150  2209               	addwfc	??___ftge+2,f,c
 10039  002152  0E00               	movlw	0
 10040  002154  2407               	addwf	??___ftge,w,c
 10041  002156  6E01               	movwf	___ftge@ff1,c
 10042  002158  0E00               	movlw	0
 10043  00215A  2008               	addwfc	??___ftge+1,w,c
 10044  00215C  6E02               	movwf	___ftge@ff1+1,c
 10045  00215E  0E80               	movlw	128
 10046  002160  2009               	addwfc	??___ftge+2,w,c
 10047  002162  6E03               	movwf	___ftge@ff1+2,c
 10048  002164                     i2l3015:
 10049  002164  AE06               	btfss	___ftge@ff2+2,7,c
 10050  002166  D016               	goto	i2l3019
 10051  002168  C004  F007         	movff	___ftge@ff2,??___ftge
 10052  00216C  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 10053  002170  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 10054  002174  1E07               	comf	??___ftge,f,c
 10055  002176  1E08               	comf	??___ftge+1,f,c
 10056  002178  1E09               	comf	??___ftge+2,f,c
 10057  00217A  2A07               	incf	??___ftge,f,c
 10058  00217C  0E00               	movlw	0
 10059  00217E  2208               	addwfc	??___ftge+1,f,c
 10060  002180  2209               	addwfc	??___ftge+2,f,c
 10061  002182  0E00               	movlw	0
 10062  002184  2407               	addwf	??___ftge,w,c
 10063  002186  6E04               	movwf	___ftge@ff2,c
 10064  002188  0E00               	movlw	0
 10065  00218A  2008               	addwfc	??___ftge+1,w,c
 10066  00218C  6E05               	movwf	___ftge@ff2+1,c
 10067  00218E  0E80               	movlw	128
 10068  002190  2009               	addwfc	??___ftge+2,w,c
 10069  002192  6E06               	movwf	___ftge@ff2+2,c
 10070  002194                     i2l3019:
 10071  002194  0E00               	movlw	0
 10072  002196  1A01               	xorwf	___ftge@ff1,f,c
 10073  002198  0E00               	movlw	0
 10074  00219A  1A02               	xorwf	___ftge@ff1+1,f,c
 10075  00219C  0E80               	movlw	128
 10076  00219E  1A03               	xorwf	___ftge@ff1+2,f,c
 10077  0021A0  0E00               	movlw	0
 10078  0021A2  1A04               	xorwf	___ftge@ff2,f,c
 10079  0021A4  0E00               	movlw	0
 10080  0021A6  1A05               	xorwf	___ftge@ff2+1,f,c
 10081  0021A8  0E80               	movlw	128
 10082  0021AA  1A06               	xorwf	___ftge@ff2+2,f,c
 10083  0021AC  5004               	movf	___ftge@ff2,w,c
 10084  0021AE  5C01               	subwf	___ftge@ff1,w,c
 10085  0021B0  5005               	movf	___ftge@ff2+1,w,c
 10086  0021B2  5802               	subwfb	___ftge@ff1+1,w,c
 10087  0021B4  5006               	movf	___ftge@ff2+2,w,c
 10088  0021B6  5803               	subwfb	___ftge@ff1+2,w,c
 10089  0021B8  B0D8               	btfsc	status,0,c
 10090  0021BA  D002               	goto	i2l3025
 10091  0021BC  90D8               	bcf	status,0,c
 10092  0021BE  0012               	return	
 10093  0021C0                     i2l3025:
 10094  0021C0  80D8               	bsf	status,0,c
 10095  0021C2  0012               	return	
 10096  0021C4                     __end_of___ftge:
 10097                           	opt stack 0
 10098                           pclatu	equ	0xFFB
 10099                           pclath	equ	0xFFA
 10100                           tblptru	equ	0xFF8
 10101                           tblptrh	equ	0xFF7
 10102                           tblptrl	equ	0xFF6
 10103                           tablat	equ	0xFF5
 10104                           prodh	equ	0xFF4
 10105                           prodl	equ	0xFF3
 10106                           intcon	equ	0xFF2
 10107                           intcon2	equ	0xFF1
 10108                           intcon3	equ	0xFF0
 10109                           postinc0	equ	0xFEE
 10110                           fsr0h	equ	0xFEA
 10111                           fsr0l	equ	0xFE9
 10112                           wreg	equ	0xFE8
 10113                           fsr1h	equ	0xFE2
 10114                           fsr1l	equ	0xFE1
 10115                           indf2	equ	0xFDF
 10116                           postinc2	equ	0xFDE
 10117                           postdec2	equ	0xFDD
 10118                           fsr2h	equ	0xFDA
 10119                           fsr2l	equ	0xFD9
 10120                           status	equ	0xFD8
 10121                           
 10122 ;; *************** function ___altoft *****************
 10123 ;; Defined at:
 10124 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;  c               4   54[COMRAM] long 
 10127 ;; Auto vars:     Size  Location     Type
 10128 ;;  sign            1   63[COMRAM] unsigned char 
 10129 ;;  exp             1   62[COMRAM] unsigned char 
 10130 ;; Return value:  Size  Location     Type
 10131 ;;                  3   54[COMRAM] float 
 10132 ;; Registers used:
 10133 ;;		wreg, status,2, status,0, cstack
 10134 ;; Tracked objects:
 10135 ;;		On entry : 0/0
 10136 ;;		On exit  : 0/0
 10137 ;;		Unchanged: 0/0
 10138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10139 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10141 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10142 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10143 ;;Total ram usage:       10 bytes
 10144 ;; Hardware stack levels used:    1
 10145 ;; Hardware stack levels required when called:    1
 10146 ;; This function calls:
 10147 ;;		___ftpack
 10148 ;; This function is called by:
 10149 ;;		_floor
 10150 ;; This function uses a non-reentrant model
 10151 ;;
 10152                           
 10153                           	psect	text52
 10154  0022C0                     __ptext52:
 10155                           	opt stack 0
 10156  0022C0                     ___altoft:
 10157                           	opt stack 20
 10158                           
 10159                           ;incstack = 0
 10160  0022C0  0E00               	movlw	0
 10161  0022C2  6E40               	movwf	___altoft@sign,c
 10162  0022C4  0E8E               	movlw	142
 10163  0022C6  6E3F               	movwf	___altoft@exp,c
 10164  0022C8  AE3A               	btfss	___altoft@c+3,7,c
 10165  0022CA  D011               	goto	i2l2887
 10166  0022CC  1E3A               	comf	___altoft@c+3,f,c
 10167  0022CE  1E39               	comf	___altoft@c+2,f,c
 10168  0022D0  1E38               	comf	___altoft@c+1,f,c
 10169  0022D2  6C37               	negf	___altoft@c,c
 10170  0022D4  0E00               	movlw	0
 10171  0022D6  2238               	addwfc	___altoft@c+1,f,c
 10172  0022D8  2239               	addwfc	___altoft@c+2,f,c
 10173  0022DA  223A               	addwfc	___altoft@c+3,f,c
 10174  0022DC  0E01               	movlw	1
 10175  0022DE  6E40               	movwf	___altoft@sign,c
 10176  0022E0  D006               	goto	i2l2887
 10177  0022E2                     i2l2885:
 10178  0022E2  90D8               	bcf	status,0,c
 10179  0022E4  323A               	rrcf	___altoft@c+3,f,c
 10180  0022E6  3239               	rrcf	___altoft@c+2,f,c
 10181  0022E8  3238               	rrcf	___altoft@c+1,f,c
 10182  0022EA  3237               	rrcf	___altoft@c,f,c
 10183  0022EC  2A3F               	incf	___altoft@exp,f,c
 10184  0022EE                     i2l2887:
 10185  0022EE  0E00               	movlw	0
 10186  0022F0  1437               	andwf	___altoft@c,w,c
 10187  0022F2  6E3B               	movwf	??___altoft& (0+255),c
 10188  0022F4  0E00               	movlw	0
 10189  0022F6  1438               	andwf	___altoft@c+1,w,c
 10190  0022F8  6E3C               	movwf	(??___altoft+1)& (0+255),c
 10191  0022FA  0E00               	movlw	0
 10192  0022FC  1439               	andwf	___altoft@c+2,w,c
 10193  0022FE  6E3D               	movwf	(??___altoft+2)& (0+255),c
 10194  002300  0EFF               	movlw	255
 10195  002302  143A               	andwf	___altoft@c+3,w,c
 10196  002304  6E3E               	movwf	(??___altoft+3)& (0+255),c
 10197  002306  503B               	movf	??___altoft,w,c
 10198  002308  103C               	iorwf	??___altoft+1,w,c
 10199  00230A  103D               	iorwf	??___altoft+2,w,c
 10200  00230C  103E               	iorwf	??___altoft+3,w,c
 10201  00230E  A4D8               	btfss	status,2,c
 10202  002310  D7E8               	goto	i2l2885
 10203  002312  C037  F001         	movff	___altoft@c,___ftpack@arg
 10204  002316  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 10205  00231A  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 10206  00231E  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 10207  002322  C040  F005         	movff	___altoft@sign,___ftpack@sign
 10208  002326  EC0D  F00F         	call	___ftpack	;wreg free
 10209  00232A  C001  F037         	movff	?___ftpack,?___altoft
 10210  00232E  C002  F038         	movff	?___ftpack+1,?___altoft+1
 10211  002332  C003  F039         	movff	?___ftpack+2,?___altoft+2
 10212  002336  0012               	return	
 10213  002338                     __end_of___altoft:
 10214                           	opt stack 0
 10215                           pclatu	equ	0xFFB
 10216                           pclath	equ	0xFFA
 10217                           tblptru	equ	0xFF8
 10218                           tblptrh	equ	0xFF7
 10219                           tblptrl	equ	0xFF6
 10220                           tablat	equ	0xFF5
 10221                           prodh	equ	0xFF4
 10222                           prodl	equ	0xFF3
 10223                           intcon	equ	0xFF2
 10224                           intcon2	equ	0xFF1
 10225                           intcon3	equ	0xFF0
 10226                           postinc0	equ	0xFEE
 10227                           fsr0h	equ	0xFEA
 10228                           fsr0l	equ	0xFE9
 10229                           wreg	equ	0xFE8
 10230                           fsr1h	equ	0xFE2
 10231                           fsr1l	equ	0xFE1
 10232                           indf2	equ	0xFDF
 10233                           postinc2	equ	0xFDE
 10234                           postdec2	equ	0xFDD
 10235                           fsr2h	equ	0xFDA
 10236                           fsr2l	equ	0xFD9
 10237                           status	equ	0xFD8
 10238                           
 10239 ;; *************** function _eval_poly *****************
 10240 ;; Defined at:
 10241 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 10242 ;; Parameters:    Size  Location     Type
 10243 ;;  x               3   39[COMRAM] float 
 10244 ;;  d               2   42[COMRAM] PTR const 
 10245 ;;		 -> log@coeff(27), exp@coeff(30), 
 10246 ;;  n               2   44[COMRAM] int 
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;  res             3   48[COMRAM] int 
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  3   39[COMRAM] int 
 10251 ;; Registers used:
 10252 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10258 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10259 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10260 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;Total ram usage:       12 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; Hardware stack levels required when called:    2
 10265 ;; This function calls:
 10266 ;;		___ftadd
 10267 ;;		___ftmul
 10268 ;;		i2___wmul
 10269 ;; This function is called by:
 10270 ;;		_exp
 10271 ;;		_log
 10272 ;; This function uses a non-reentrant model
 10273 ;;
 10274                           
 10275                           	psect	text53
 10276  001AFE                     __ptext53:
 10277                           	opt stack 0
 10278  001AFE                     _eval_poly:
 10279                           	opt stack 20
 10280                           
 10281                           ;incstack = 0
 10282  001AFE  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 10283  001B02  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 10284  001B06  0E00               	movlw	0
 10285  001B08  6E04               	movwf	i2___wmul@multiplicand+1,c
 10286  001B0A  0E03               	movlw	3
 10287  001B0C  6E03               	movwf	i2___wmul@multiplicand,c
 10288  001B0E  ECF8  F013         	call	i2___wmul	;wreg free
 10289  001B12  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 10290  001B16  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10291  001B1A  5001               	movf	?i2___wmul,w,c
 10292  001B1C  262F               	addwf	??_eval_poly,f,c
 10293  001B1E  5002               	movf	?i2___wmul+1,w,c
 10294  001B20  2230               	addwfc	??_eval_poly+1,f,c
 10295  001B22  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10296  001B26  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10297  001B2A                     	if	0	;tblptru may be non-zero
 10298  001B2A                     	endif
 10299  001B2A                     	if	0	;tblptru may be non-zero
 10300  001B2A                     	endif
 10301  001B2A  0009               	tblrd		*+
 10302  001B2C  CFF5 F031          	movff	tablat,eval_poly@res
 10303  001B30  0009               	tblrd		*+
 10304  001B32  CFF5 F032          	movff	tablat,eval_poly@res+1
 10305  001B36  000A               	tblrd		*-
 10306  001B38  CFF5 F033          	movff	tablat,eval_poly@res+2
 10307  001B3C  D03E               	goto	i2l3221
 10308  001B3E                     i2l3219:
 10309  001B3E  C031  F010         	movff	eval_poly@res,___ftmul@f2
 10310  001B42  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 10311  001B46  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 10312  001B4A  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 10313  001B4E  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 10314  001B52  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 10315  001B56  EC67  F00A         	call	___ftmul	;wreg free
 10316  001B5A  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10317  001B5E  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10318  001B62  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10319  001B66  0E00               	movlw	0
 10320  001B68  6E04               	movwf	i2___wmul@multiplicand+1,c
 10321  001B6A  0E03               	movlw	3
 10322  001B6C  6E03               	movwf	i2___wmul@multiplicand,c
 10323  001B6E  062D               	decf	eval_poly@n,f,c
 10324  001B70  A0D8               	btfss	status,0,c
 10325  001B72  062E               	decf	eval_poly@n+1,f,c
 10326  001B74  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 10327  001B78  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 10328  001B7C  ECF8  F013         	call	i2___wmul	;wreg free
 10329  001B80  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 10330  001B84  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10331  001B88  5001               	movf	?i2___wmul,w,c
 10332  001B8A  262F               	addwf	??_eval_poly,f,c
 10333  001B8C  5002               	movf	?i2___wmul+1,w,c
 10334  001B8E  2230               	addwfc	??_eval_poly+1,f,c
 10335  001B90  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10336  001B94  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10337  001B98                     	if	0	;tblptru may be non-zero
 10338  001B98                     	endif
 10339  001B98                     	if	0	;tblptru may be non-zero
 10340  001B98                     	endif
 10341  001B98  0009               	tblrd		*+
 10342  001B9A  CFF5 F01F          	movff	tablat,___ftadd@f2
 10343  001B9E  0009               	tblrd		*+
 10344  001BA0  CFF5 F020          	movff	tablat,___ftadd@f2+1
 10345  001BA4  000A               	tblrd		*-
 10346  001BA6  CFF5 F021          	movff	tablat,___ftadd@f2+2
 10347  001BAA  EC37  F006         	call	___ftadd	;wreg free
 10348  001BAE  C01C  F031         	movff	?___ftadd,eval_poly@res
 10349  001BB2  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 10350  001BB6  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 10351  001BBA                     i2l3221:
 10352  001BBA  502D               	movf	eval_poly@n,w,c
 10353  001BBC  102E               	iorwf	eval_poly@n+1,w,c
 10354  001BBE  A4D8               	btfss	status,2,c
 10355  001BC0  D7BE               	goto	i2l3219
 10356  001BC2  C031  F028         	movff	eval_poly@res,?_eval_poly
 10357  001BC6  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 10358  001BCA  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 10359  001BCE  0012               	return		;funcret
 10360  001BD0                     __end_of_eval_poly:
 10361                           	opt stack 0
 10362                           pclatu	equ	0xFFB
 10363                           pclath	equ	0xFFA
 10364                           tblptru	equ	0xFF8
 10365                           tblptrh	equ	0xFF7
 10366                           tblptrl	equ	0xFF6
 10367                           tablat	equ	0xFF5
 10368                           prodh	equ	0xFF4
 10369                           prodl	equ	0xFF3
 10370                           intcon	equ	0xFF2
 10371                           intcon2	equ	0xFF1
 10372                           intcon3	equ	0xFF0
 10373                           postinc0	equ	0xFEE
 10374                           fsr0h	equ	0xFEA
 10375                           fsr0l	equ	0xFE9
 10376                           wreg	equ	0xFE8
 10377                           fsr1h	equ	0xFE2
 10378                           fsr1l	equ	0xFE1
 10379                           indf2	equ	0xFDF
 10380                           postinc2	equ	0xFDE
 10381                           postdec2	equ	0xFDD
 10382                           fsr2h	equ	0xFDA
 10383                           fsr2l	equ	0xFD9
 10384                           status	equ	0xFD8
 10385                           
 10386 ;; *************** function i2___wmul *****************
 10387 ;; Defined at:
 10388 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 10389 ;; Parameters:    Size  Location     Type
 10390 ;;  multiplier      2    0[COMRAM] unsigned int 
 10391 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;  __wmul          2    4[COMRAM] unsigned int 
 10394 ;; Return value:  Size  Location     Type
 10395 ;;                  2    0[COMRAM] unsigned int 
 10396 ;; Registers used:
 10397 ;;		wreg, status,2, status,0, prodl, prodh
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10403 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10406 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10407 ;;Total ram usage:        6 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; This function calls:
 10410 ;;		Nothing
 10411 ;; This function is called by:
 10412 ;;		_isr
 10413 ;;		_eval_poly
 10414 ;;		i2_printf
 10415 ;; This function uses a non-reentrant model
 10416 ;;
 10417                           
 10418                           	psect	text54
 10419  0027F0                     __ptext54:
 10420                           	opt stack 0
 10421  0027F0                     i2___wmul:
 10422                           	opt stack 24
 10423                           
 10424                           ;incstack = 0
 10425  0027F0  5001               	movf	i2___wmul@multiplier,w,c
 10426  0027F2  0203               	mulwf	i2___wmul@multiplicand,c
 10427  0027F4  CFF3 F005          	movff	prodl,i2___wmul@product
 10428  0027F8  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10429  0027FC  5001               	movf	i2___wmul@multiplier,w,c
 10430  0027FE  0204               	mulwf	i2___wmul@multiplicand+1,c
 10431  002800  50F3               	movf	prodl,w,c
 10432  002802  2606               	addwf	i2___wmul@product+1,f,c
 10433  002804  5002               	movf	i2___wmul@multiplier+1,w,c
 10434  002806  0203               	mulwf	i2___wmul@multiplicand,c
 10435  002808  50F3               	movf	prodl,w,c
 10436  00280A  2606               	addwf	i2___wmul@product+1,f,c
 10437  00280C  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10438  002810  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10439  002814  0012               	return	
 10440  002816                     __end_ofi2___wmul:
 10441                           	opt stack 0
 10442                           pclatu	equ	0xFFB
 10443                           pclath	equ	0xFFA
 10444                           tblptru	equ	0xFF8
 10445                           tblptrh	equ	0xFF7
 10446                           tblptrl	equ	0xFF6
 10447                           tablat	equ	0xFF5
 10448                           prodh	equ	0xFF4
 10449                           prodl	equ	0xFF3
 10450                           intcon	equ	0xFF2
 10451                           intcon2	equ	0xFF1
 10452                           intcon3	equ	0xFF0
 10453                           postinc0	equ	0xFEE
 10454                           fsr0h	equ	0xFEA
 10455                           fsr0l	equ	0xFE9
 10456                           wreg	equ	0xFE8
 10457                           fsr1h	equ	0xFE2
 10458                           fsr1l	equ	0xFE1
 10459                           indf2	equ	0xFDF
 10460                           postinc2	equ	0xFDE
 10461                           postdec2	equ	0xFDD
 10462                           fsr2h	equ	0xFDA
 10463                           fsr2l	equ	0xFD9
 10464                           status	equ	0xFD8
 10465                           
 10466 ;; *************** function ___ftmul *****************
 10467 ;; Defined at:
 10468 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10469 ;; Parameters:    Size  Location     Type
 10470 ;;  f1              3   12[COMRAM] float 
 10471 ;;  f2              3   15[COMRAM] float 
 10472 ;; Auto vars:     Size  Location     Type
 10473 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 10474 ;;  sign            1   26[COMRAM] unsigned char 
 10475 ;;  cntr            1   25[COMRAM] unsigned char 
 10476 ;;  exp             1   21[COMRAM] unsigned char 
 10477 ;; Return value:  Size  Location     Type
 10478 ;;                  3   12[COMRAM] float 
 10479 ;; Registers used:
 10480 ;;		wreg, status,2, status,0, cstack
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10486 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;Total ram usage:       15 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; Hardware stack levels required when called:    1
 10493 ;; This function calls:
 10494 ;;		___ftpack
 10495 ;; This function is called by:
 10496 ;;		_dec_to_hex
 10497 ;;		_pow
 10498 ;;		_exp
 10499 ;;		_log
 10500 ;;		_eval_poly
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           	psect	text55
 10505  0014CE                     __ptext55:
 10506                           	opt stack 0
 10507  0014CE                     ___ftmul:
 10508                           	opt stack 20
 10509                           
 10510                           ;incstack = 0
 10511  0014CE  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 10512  0014D2  6A14               	clrf	(??___ftmul+1)& (0+255),c
 10513  0014D4  6A15               	clrf	(??___ftmul+2)& (0+255),c
 10514  0014D6  340E               	rlcf	___ftmul@f1+1,w,c
 10515  0014D8  3613               	rlcf	??___ftmul& (0+255),f,c
 10516  0014DA  E301               	bnc	u234_41
 10517  0014DC  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 10518  0014DE                     u234_41:
 10519  0014DE  5013               	movf	??___ftmul,w,c
 10520  0014E0  6E16               	movwf	___ftmul@exp,c
 10521  0014E2  5016               	movf	___ftmul@exp,w,c
 10522  0014E4  A4D8               	btfss	status,2,c
 10523  0014E6  D007               	goto	i2l2969
 10524  0014E8  0E00               	movlw	0
 10525  0014EA  6E0D               	movwf	?___ftmul,c
 10526  0014EC  0E00               	movlw	0
 10527  0014EE  6E0E               	movwf	?___ftmul+1,c
 10528  0014F0  0E00               	movlw	0
 10529  0014F2  6E0F               	movwf	?___ftmul+2,c
 10530  0014F4  0012               	return	
 10531  0014F6                     i2l2969:
 10532  0014F6  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 10533  0014FA  6A14               	clrf	(??___ftmul+1)& (0+255),c
 10534  0014FC  6A15               	clrf	(??___ftmul+2)& (0+255),c
 10535  0014FE  3411               	rlcf	___ftmul@f2+1,w,c
 10536  001500  3613               	rlcf	??___ftmul& (0+255),f,c
 10537  001502  E301               	bnc	u236_41
 10538  001504  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 10539  001506                     u236_41:
 10540  001506  5013               	movf	??___ftmul,w,c
 10541  001508  6E1B               	movwf	___ftmul@sign,c
 10542  00150A  501B               	movf	___ftmul@sign,w,c
 10543  00150C  A4D8               	btfss	status,2,c
 10544  00150E  D007               	goto	i2l2975
 10545  001510  0E00               	movlw	0
 10546  001512  6E0D               	movwf	?___ftmul,c
 10547  001514  0E00               	movlw	0
 10548  001516  6E0E               	movwf	?___ftmul+1,c
 10549  001518  0E00               	movlw	0
 10550  00151A  6E0F               	movwf	?___ftmul+2,c
 10551  00151C  0012               	return	
 10552  00151E                     i2l2975:
 10553  00151E  501B               	movf	___ftmul@sign,w,c
 10554  001520  0F7B               	addlw	123
 10555  001522  2616               	addwf	___ftmul@exp,f,c
 10556  001524  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 10557  001528  5012               	movf	___ftmul@f2+2,w,c
 10558  00152A  1A1B               	xorwf	___ftmul@sign,f,c
 10559  00152C  0E80               	movlw	128
 10560  00152E  161B               	andwf	___ftmul@sign,f,c
 10561  001530  8E0E               	bsf	___ftmul@f1+1,7,c
 10562  001532  8E11               	bsf	___ftmul@f2+1,7,c
 10563  001534  0EFF               	movlw	255
 10564  001536  1610               	andwf	___ftmul@f2,f,c
 10565  001538  0EFF               	movlw	255
 10566  00153A  1611               	andwf	___ftmul@f2+1,f,c
 10567  00153C  0E00               	movlw	0
 10568  00153E  1612               	andwf	___ftmul@f2+2,f,c
 10569  001540  0E00               	movlw	0
 10570  001542  6E17               	movwf	___ftmul@f3_as_product,c
 10571  001544  0E00               	movlw	0
 10572  001546  6E18               	movwf	___ftmul@f3_as_product+1,c
 10573  001548  0E00               	movlw	0
 10574  00154A  6E19               	movwf	___ftmul@f3_as_product+2,c
 10575  00154C  0E07               	movlw	7
 10576  00154E  6E1A               	movwf	___ftmul@cntr,c
 10577  001550                     i2l2989:
 10578  001550  A00D               	btfss	___ftmul@f1,0,c
 10579  001552  D006               	goto	i2l2993
 10580  001554  5010               	movf	___ftmul@f2,w,c
 10581  001556  2617               	addwf	___ftmul@f3_as_product,f,c
 10582  001558  5011               	movf	___ftmul@f2+1,w,c
 10583  00155A  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 10584  00155C  5012               	movf	___ftmul@f2+2,w,c
 10585  00155E  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 10586  001560                     i2l2993:
 10587  001560  90D8               	bcf	status,0,c
 10588  001562  320F               	rrcf	___ftmul@f1+2,f,c
 10589  001564  320E               	rrcf	___ftmul@f1+1,f,c
 10590  001566  320D               	rrcf	___ftmul@f1,f,c
 10591  001568  90D8               	bcf	status,0,c
 10592  00156A  3610               	rlcf	___ftmul@f2,f,c
 10593  00156C  3611               	rlcf	___ftmul@f2+1,f,c
 10594  00156E  3612               	rlcf	___ftmul@f2+2,f,c
 10595  001570  2E1A               	decfsz	___ftmul@cntr,f,c
 10596  001572  D7EE               	goto	i2l2989
 10597  001574  0E09               	movlw	9
 10598  001576  6E1A               	movwf	___ftmul@cntr,c
 10599  001578                     i2l2999:
 10600  001578  A00D               	btfss	___ftmul@f1,0,c
 10601  00157A  D006               	goto	i2l3003
 10602  00157C  5010               	movf	___ftmul@f2,w,c
 10603  00157E  2617               	addwf	___ftmul@f3_as_product,f,c
 10604  001580  5011               	movf	___ftmul@f2+1,w,c
 10605  001582  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 10606  001584  5012               	movf	___ftmul@f2+2,w,c
 10607  001586  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 10608  001588                     i2l3003:
 10609  001588  90D8               	bcf	status,0,c
 10610  00158A  320F               	rrcf	___ftmul@f1+2,f,c
 10611  00158C  320E               	rrcf	___ftmul@f1+1,f,c
 10612  00158E  320D               	rrcf	___ftmul@f1,f,c
 10613  001590  90D8               	bcf	status,0,c
 10614  001592  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 10615  001594  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 10616  001596  3217               	rrcf	___ftmul@f3_as_product,f,c
 10617  001598  2E1A               	decfsz	___ftmul@cntr,f,c
 10618  00159A  D7EE               	goto	i2l2999
 10619  00159C  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 10620  0015A0  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10621  0015A4  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10622  0015A8  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 10623  0015AC  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 10624  0015B0  EC0D  F00F         	call	___ftpack	;wreg free
 10625  0015B4  C001  F00D         	movff	?___ftpack,?___ftmul
 10626  0015B8  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 10627  0015BC  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 10628  0015C0  0012               	return	
 10629  0015C2                     __end_of___ftmul:
 10630                           	opt stack 0
 10631                           pclatu	equ	0xFFB
 10632                           pclath	equ	0xFFA
 10633                           tblptru	equ	0xFF8
 10634                           tblptrh	equ	0xFF7
 10635                           tblptrl	equ	0xFF6
 10636                           tablat	equ	0xFF5
 10637                           prodh	equ	0xFF4
 10638                           prodl	equ	0xFF3
 10639                           intcon	equ	0xFF2
 10640                           intcon2	equ	0xFF1
 10641                           intcon3	equ	0xFF0
 10642                           postinc0	equ	0xFEE
 10643                           fsr0h	equ	0xFEA
 10644                           fsr0l	equ	0xFE9
 10645                           wreg	equ	0xFE8
 10646                           fsr1h	equ	0xFE2
 10647                           fsr1l	equ	0xFE1
 10648                           indf2	equ	0xFDF
 10649                           postinc2	equ	0xFDE
 10650                           postdec2	equ	0xFDD
 10651                           fsr2h	equ	0xFDA
 10652                           fsr2l	equ	0xFD9
 10653                           status	equ	0xFD8
 10654                           
 10655 ;; *************** function ___ftsub *****************
 10656 ;; Defined at:
 10657 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 10658 ;; Parameters:    Size  Location     Type
 10659 ;;  f1              3   39[COMRAM] float 
 10660 ;;  f2              3   42[COMRAM] float 
 10661 ;; Auto vars:     Size  Location     Type
 10662 ;;		None
 10663 ;; Return value:  Size  Location     Type
 10664 ;;                  3   39[COMRAM] float 
 10665 ;; Registers used:
 10666 ;;		wreg, status,2, status,0, cstack
 10667 ;; Tracked objects:
 10668 ;;		On entry : 0/0
 10669 ;;		On exit  : 0/0
 10670 ;;		Unchanged: 0/0
 10671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10672 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10676 ;;Total ram usage:        6 bytes
 10677 ;; Hardware stack levels used:    1
 10678 ;; Hardware stack levels required when called:    2
 10679 ;; This function calls:
 10680 ;;		___ftadd
 10681 ;; This function is called by:
 10682 ;;		_exp
 10683 ;; This function uses a non-reentrant model
 10684 ;;
 10685                           
 10686                           	psect	text56
 10687  002650                     __ptext56:
 10688                           	opt stack 0
 10689  002650                     ___ftsub:
 10690                           	opt stack 20
 10691                           
 10692                           ;incstack = 0
 10693  002650  502B               	movf	___ftsub@f2,w,c
 10694  002652  102C               	iorwf	___ftsub@f2+1,w,c
 10695  002654  102D               	iorwf	___ftsub@f2+2,w,c
 10696  002656  B4D8               	btfsc	status,2,c
 10697  002658  D006               	goto	i2l3173
 10698  00265A  0E00               	movlw	0
 10699  00265C  1A2B               	xorwf	___ftsub@f2,f,c
 10700  00265E  0E00               	movlw	0
 10701  002660  1A2C               	xorwf	___ftsub@f2+1,f,c
 10702  002662  0E80               	movlw	128
 10703  002664  1A2D               	xorwf	___ftsub@f2+2,f,c
 10704  002666                     i2l3173:
 10705  002666  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 10706  00266A  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 10707  00266E  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 10708  002672  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 10709  002676  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 10710  00267A  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 10711  00267E  EC37  F006         	call	___ftadd	;wreg free
 10712  002682  C01C  F028         	movff	?___ftadd,?___ftsub
 10713  002686  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 10714  00268A  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 10715  00268E  0012               	return	
 10716  002690                     __end_of___ftsub:
 10717                           	opt stack 0
 10718                           pclatu	equ	0xFFB
 10719                           pclath	equ	0xFFA
 10720                           tblptru	equ	0xFF8
 10721                           tblptrh	equ	0xFF7
 10722                           tblptrl	equ	0xFF6
 10723                           tablat	equ	0xFF5
 10724                           prodh	equ	0xFF4
 10725                           prodl	equ	0xFF3
 10726                           intcon	equ	0xFF2
 10727                           intcon2	equ	0xFF1
 10728                           intcon3	equ	0xFF0
 10729                           postinc0	equ	0xFEE
 10730                           fsr0h	equ	0xFEA
 10731                           fsr0l	equ	0xFE9
 10732                           wreg	equ	0xFE8
 10733                           fsr1h	equ	0xFE2
 10734                           fsr1l	equ	0xFE1
 10735                           indf2	equ	0xFDF
 10736                           postinc2	equ	0xFDE
 10737                           postdec2	equ	0xFDD
 10738                           fsr2h	equ	0xFDA
 10739                           fsr2l	equ	0xFD9
 10740                           status	equ	0xFD8
 10741                           
 10742 ;; *************** function ___ftadd *****************
 10743 ;; Defined at:
 10744 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10745 ;; Parameters:    Size  Location     Type
 10746 ;;  f1              3   27[COMRAM] float 
 10747 ;;  f2              3   30[COMRAM] float 
 10748 ;; Auto vars:     Size  Location     Type
 10749 ;;  exp1            1   38[COMRAM] unsigned char 
 10750 ;;  exp2            1   37[COMRAM] unsigned char 
 10751 ;;  sign            1   36[COMRAM] unsigned char 
 10752 ;; Return value:  Size  Location     Type
 10753 ;;                  3   27[COMRAM] float 
 10754 ;; Registers used:
 10755 ;;		wreg, status,2, status,0, cstack
 10756 ;; Tracked objects:
 10757 ;;		On entry : 0/0
 10758 ;;		On exit  : 0/0
 10759 ;;		Unchanged: 0/0
 10760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10761 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10762 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10763 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10764 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10765 ;;Total ram usage:       12 bytes
 10766 ;; Hardware stack levels used:    1
 10767 ;; Hardware stack levels required when called:    1
 10768 ;; This function calls:
 10769 ;;		___ftpack
 10770 ;; This function is called by:
 10771 ;;		_dec_to_hex
 10772 ;;		___ftsub
 10773 ;;		_floor
 10774 ;;		_log
 10775 ;;		_eval_poly
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           	psect	text57
 10780  000C6E                     __ptext57:
 10781                           	opt stack 0
 10782  000C6E                     ___ftadd:
 10783                           	opt stack 20
 10784                           
 10785                           ;incstack = 0
 10786  000C6E  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 10787  000C72  6A23               	clrf	(??___ftadd+1)& (0+255),c
 10788  000C74  6A24               	clrf	(??___ftadd+2)& (0+255),c
 10789  000C76  341D               	rlcf	___ftadd@f1+1,w,c
 10790  000C78  3622               	rlcf	??___ftadd& (0+255),f,c
 10791  000C7A  E301               	bnc	u213_41
 10792  000C7C  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 10793  000C7E                     u213_41:
 10794  000C7E  5022               	movf	??___ftadd,w,c
 10795  000C80  6E27               	movwf	___ftadd@exp1,c
 10796  000C82  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 10797  000C86  6A23               	clrf	(??___ftadd+1)& (0+255),c
 10798  000C88  6A24               	clrf	(??___ftadd+2)& (0+255),c
 10799  000C8A  3420               	rlcf	___ftadd@f2+1,w,c
 10800  000C8C  3622               	rlcf	??___ftadd& (0+255),f,c
 10801  000C8E  E301               	bnc	u214_41
 10802  000C90  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 10803  000C92                     u214_41:
 10804  000C92  5022               	movf	??___ftadd,w,c
 10805  000C94  6E26               	movwf	___ftadd@exp2,c
 10806  000C96  5027               	movf	___ftadd@exp1,w,c
 10807  000C98  B4D8               	btfsc	status,2,c
 10808  000C9A  D00B               	goto	i2l673
 10809  000C9C  5026               	movf	___ftadd@exp2,w,c
 10810  000C9E  5C27               	subwf	___ftadd@exp1,w,c
 10811  000CA0  B0D8               	btfsc	status,0,c
 10812  000CA2  D00E               	goto	i2l2901
 10813  000CA4  5027               	movf	___ftadd@exp1,w,c
 10814  000CA6  0800               	sublw	0
 10815  000CA8  2426               	addwf	___ftadd@exp2,w,c
 10816  000CAA  6E22               	movwf	??___ftadd& (0+255),c
 10817  000CAC  0E18               	movlw	24
 10818  000CAE  6422               	cpfsgt	??___ftadd,c
 10819  000CB0  D007               	goto	i2l2901
 10820  000CB2                     i2l673:
 10821  000CB2  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 10822  000CB6  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 10823  000CBA  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 10824  000CBE  0012               	return	
 10825  000CC0                     i2l2901:
 10826  000CC0  5026               	movf	___ftadd@exp2,w,c
 10827  000CC2  B4D8               	btfsc	status,2,c
 10828  000CC4  D00B               	goto	i2l677
 10829  000CC6  5027               	movf	___ftadd@exp1,w,c
 10830  000CC8  5C26               	subwf	___ftadd@exp2,w,c
 10831  000CCA  B0D8               	btfsc	status,0,c
 10832  000CCC  D00E               	goto	i2l2907
 10833  000CCE  5026               	movf	___ftadd@exp2,w,c
 10834  000CD0  0800               	sublw	0
 10835  000CD2  2427               	addwf	___ftadd@exp1,w,c
 10836  000CD4  6E22               	movwf	??___ftadd& (0+255),c
 10837  000CD6  0E18               	movlw	24
 10838  000CD8  6422               	cpfsgt	??___ftadd,c
 10839  000CDA  D007               	goto	i2l2907
 10840  000CDC                     i2l677:
 10841  000CDC  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 10842  000CE0  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 10843  000CE4  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 10844  000CE8  0012               	return	
 10845  000CEA                     i2l2907:
 10846  000CEA  0E06               	movlw	6
 10847  000CEC  6E25               	movwf	___ftadd@sign,c
 10848  000CEE  BE1E               	btfsc	___ftadd@f1+2,7,c
 10849  000CF0  8E25               	bsf	___ftadd@sign,7,c
 10850  000CF2  BE21               	btfsc	___ftadd@f2+2,7,c
 10851  000CF4  8C25               	bsf	___ftadd@sign,6,c
 10852  000CF6  8E1D               	bsf	___ftadd@f1+1,7,c
 10853  000CF8  0EFF               	movlw	255
 10854  000CFA  161C               	andwf	___ftadd@f1,f,c
 10855  000CFC  0EFF               	movlw	255
 10856  000CFE  161D               	andwf	___ftadd@f1+1,f,c
 10857  000D00  0E00               	movlw	0
 10858  000D02  161E               	andwf	___ftadd@f1+2,f,c
 10859  000D04  8E20               	bsf	___ftadd@f2+1,7,c
 10860  000D06  0EFF               	movlw	255
 10861  000D08  161F               	andwf	___ftadd@f2,f,c
 10862  000D0A  0EFF               	movlw	255
 10863  000D0C  1620               	andwf	___ftadd@f2+1,f,c
 10864  000D0E  0E00               	movlw	0
 10865  000D10  1621               	andwf	___ftadd@f2+2,f,c
 10866  000D12  5026               	movf	___ftadd@exp2,w,c
 10867  000D14  5C27               	subwf	___ftadd@exp1,w,c
 10868  000D16  B0D8               	btfsc	status,0,c
 10869  000D18  D01B               	goto	i2l2933
 10870  000D1A                     i2l2923:
 10871  000D1A  90D8               	bcf	status,0,c
 10872  000D1C  361F               	rlcf	___ftadd@f2,f,c
 10873  000D1E  3620               	rlcf	___ftadd@f2+1,f,c
 10874  000D20  3621               	rlcf	___ftadd@f2+2,f,c
 10875  000D22  0626               	decf	___ftadd@exp2,f,c
 10876  000D24  5027               	movf	___ftadd@exp1,w,c
 10877  000D26  1826               	xorwf	___ftadd@exp2,w,c
 10878  000D28  B4D8               	btfsc	status,2,c
 10879  000D2A  D00D               	goto	i2l2931
 10880  000D2C  0625               	decf	___ftadd@sign,f,c
 10881  000D2E  C025  F022         	movff	___ftadd@sign,??___ftadd
 10882  000D32  0E07               	movlw	7
 10883  000D34  1622               	andwf	??___ftadd,f,c
 10884  000D36  B4D8               	btfsc	status,2,c
 10885  000D38  D006               	goto	i2l2931
 10886  000D3A  D7EF               	goto	i2l2923
 10887  000D3C                     i2l2929:
 10888  000D3C  90D8               	bcf	status,0,c
 10889  000D3E  321E               	rrcf	___ftadd@f1+2,f,c
 10890  000D40  321D               	rrcf	___ftadd@f1+1,f,c
 10891  000D42  321C               	rrcf	___ftadd@f1,f,c
 10892  000D44  2A27               	incf	___ftadd@exp1,f,c
 10893  000D46                     i2l2931:
 10894  000D46  5026               	movf	___ftadd@exp2,w,c
 10895  000D48  1827               	xorwf	___ftadd@exp1,w,c
 10896  000D4A  B4D8               	btfsc	status,2,c
 10897  000D4C  D01F               	goto	i2l688
 10898  000D4E  D7F6               	goto	i2l2929
 10899  000D50                     i2l2933:
 10900  000D50  5027               	movf	___ftadd@exp1,w,c
 10901  000D52  5C26               	subwf	___ftadd@exp2,w,c
 10902  000D54  B0D8               	btfsc	status,0,c
 10903  000D56  D01A               	goto	i2l688
 10904  000D58                     i2l2935:
 10905  000D58  90D8               	bcf	status,0,c
 10906  000D5A  361C               	rlcf	___ftadd@f1,f,c
 10907  000D5C  361D               	rlcf	___ftadd@f1+1,f,c
 10908  000D5E  361E               	rlcf	___ftadd@f1+2,f,c
 10909  000D60  0627               	decf	___ftadd@exp1,f,c
 10910  000D62  5027               	movf	___ftadd@exp1,w,c
 10911  000D64  1826               	xorwf	___ftadd@exp2,w,c
 10912  000D66  B4D8               	btfsc	status,2,c
 10913  000D68  D00D               	goto	i2l2943
 10914  000D6A  0625               	decf	___ftadd@sign,f,c
 10915  000D6C  C025  F022         	movff	___ftadd@sign,??___ftadd
 10916  000D70  0E07               	movlw	7
 10917  000D72  1622               	andwf	??___ftadd,f,c
 10918  000D74  B4D8               	btfsc	status,2,c
 10919  000D76  D006               	goto	i2l2943
 10920  000D78  D7EF               	goto	i2l2935
 10921  000D7A                     i2l2941:
 10922  000D7A  90D8               	bcf	status,0,c
 10923  000D7C  3221               	rrcf	___ftadd@f2+2,f,c
 10924  000D7E  3220               	rrcf	___ftadd@f2+1,f,c
 10925  000D80  321F               	rrcf	___ftadd@f2,f,c
 10926  000D82  2A26               	incf	___ftadd@exp2,f,c
 10927  000D84                     i2l2943:
 10928  000D84  5026               	movf	___ftadd@exp2,w,c
 10929  000D86  1827               	xorwf	___ftadd@exp1,w,c
 10930  000D88  A4D8               	btfss	status,2,c
 10931  000D8A  D7F7               	goto	i2l2941
 10932  000D8C                     i2l688:
 10933  000D8C  AE25               	btfss	___ftadd@sign,7,c
 10934  000D8E  D00C               	goto	i2l697
 10935  000D90  0EFF               	movlw	255
 10936  000D92  1A1C               	xorwf	___ftadd@f1,f,c
 10937  000D94  0EFF               	movlw	255
 10938  000D96  1A1D               	xorwf	___ftadd@f1+1,f,c
 10939  000D98  0EFF               	movlw	255
 10940  000D9A  1A1E               	xorwf	___ftadd@f1+2,f,c
 10941  000D9C  0E01               	movlw	1
 10942  000D9E  261C               	addwf	___ftadd@f1,f,c
 10943  000DA0  0E00               	movlw	0
 10944  000DA2  221D               	addwfc	___ftadd@f1+1,f,c
 10945  000DA4  0E00               	movlw	0
 10946  000DA6  221E               	addwfc	___ftadd@f1+2,f,c
 10947  000DA8                     i2l697:
 10948  000DA8  AC25               	btfss	___ftadd@sign,6,c
 10949  000DAA  D00C               	goto	i2l2949
 10950  000DAC  0EFF               	movlw	255
 10951  000DAE  1A1F               	xorwf	___ftadd@f2,f,c
 10952  000DB0  0EFF               	movlw	255
 10953  000DB2  1A20               	xorwf	___ftadd@f2+1,f,c
 10954  000DB4  0EFF               	movlw	255
 10955  000DB6  1A21               	xorwf	___ftadd@f2+2,f,c
 10956  000DB8  0E01               	movlw	1
 10957  000DBA  261F               	addwf	___ftadd@f2,f,c
 10958  000DBC  0E00               	movlw	0
 10959  000DBE  2220               	addwfc	___ftadd@f2+1,f,c
 10960  000DC0  0E00               	movlw	0
 10961  000DC2  2221               	addwfc	___ftadd@f2+2,f,c
 10962  000DC4                     i2l2949:
 10963  000DC4  0E00               	movlw	0
 10964  000DC6  6E25               	movwf	___ftadd@sign,c
 10965  000DC8  501C               	movf	___ftadd@f1,w,c
 10966  000DCA  261F               	addwf	___ftadd@f2,f,c
 10967  000DCC  501D               	movf	___ftadd@f1+1,w,c
 10968  000DCE  2220               	addwfc	___ftadd@f2+1,f,c
 10969  000DD0  501E               	movf	___ftadd@f1+2,w,c
 10970  000DD2  2221               	addwfc	___ftadd@f2+2,f,c
 10971  000DD4  AE21               	btfss	___ftadd@f2+2,7,c
 10972  000DD6  D00E               	goto	i2l2959
 10973  000DD8  0EFF               	movlw	255
 10974  000DDA  1A1F               	xorwf	___ftadd@f2,f,c
 10975  000DDC  0EFF               	movlw	255
 10976  000DDE  1A20               	xorwf	___ftadd@f2+1,f,c
 10977  000DE0  0EFF               	movlw	255
 10978  000DE2  1A21               	xorwf	___ftadd@f2+2,f,c
 10979  000DE4  0E01               	movlw	1
 10980  000DE6  261F               	addwf	___ftadd@f2,f,c
 10981  000DE8  0E00               	movlw	0
 10982  000DEA  2220               	addwfc	___ftadd@f2+1,f,c
 10983  000DEC  0E00               	movlw	0
 10984  000DEE  2221               	addwfc	___ftadd@f2+2,f,c
 10985  000DF0  0E01               	movlw	1
 10986  000DF2  6E25               	movwf	___ftadd@sign,c
 10987  000DF4                     i2l2959:
 10988  000DF4  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 10989  000DF8  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 10990  000DFC  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 10991  000E00  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 10992  000E04  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 10993  000E08  EC0D  F00F         	call	___ftpack	;wreg free
 10994  000E0C  C001  F01C         	movff	?___ftpack,?___ftadd
 10995  000E10  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 10996  000E14  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 10997  000E18  0012               	return	
 10998  000E1A                     __end_of___ftadd:
 10999                           	opt stack 0
 11000                           pclatu	equ	0xFFB
 11001                           pclath	equ	0xFFA
 11002                           tblptru	equ	0xFF8
 11003                           tblptrh	equ	0xFF7
 11004                           tblptrl	equ	0xFF6
 11005                           tablat	equ	0xFF5
 11006                           prodh	equ	0xFF4
 11007                           prodl	equ	0xFF3
 11008                           intcon	equ	0xFF2
 11009                           intcon2	equ	0xFF1
 11010                           intcon3	equ	0xFF0
 11011                           postinc0	equ	0xFEE
 11012                           fsr0h	equ	0xFEA
 11013                           fsr0l	equ	0xFE9
 11014                           wreg	equ	0xFE8
 11015                           fsr1h	equ	0xFE2
 11016                           fsr1l	equ	0xFE1
 11017                           indf2	equ	0xFDF
 11018                           postinc2	equ	0xFDE
 11019                           postdec2	equ	0xFDD
 11020                           fsr2h	equ	0xFDA
 11021                           fsr2l	equ	0xFD9
 11022                           status	equ	0xFD8
 11023                           
 11024 ;; *************** function ___ftneg *****************
 11025 ;; Defined at:
 11026 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 11027 ;; Parameters:    Size  Location     Type
 11028 ;;  f1              3    0[COMRAM] float 
 11029 ;; Auto vars:     Size  Location     Type
 11030 ;;		None
 11031 ;; Return value:  Size  Location     Type
 11032 ;;                  3    0[COMRAM] float 
 11033 ;; Registers used:
 11034 ;;		wreg, status,2, status,0
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 0/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11040 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11043 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11044 ;;Total ram usage:        3 bytes
 11045 ;; Hardware stack levels used:    1
 11046 ;; This function calls:
 11047 ;;		Nothing
 11048 ;; This function is called by:
 11049 ;;		_pow
 11050 ;;		_exp
 11051 ;; This function uses a non-reentrant model
 11052 ;;
 11053                           
 11054                           	psect	text58
 11055  002816                     __ptext58:
 11056                           	opt stack 0
 11057  002816                     ___ftneg:
 11058                           	opt stack 22
 11059                           
 11060                           ;incstack = 0
 11061  002816  5001               	movf	___ftneg@f1,w,c
 11062  002818  1002               	iorwf	___ftneg@f1+1,w,c
 11063  00281A  1003               	iorwf	___ftneg@f1+2,w,c
 11064  00281C  B4D8               	btfsc	status,2,c
 11065  00281E  D006               	goto	i2l730
 11066  002820  0E00               	movlw	0
 11067  002822  1A01               	xorwf	___ftneg@f1,f,c
 11068  002824  0E00               	movlw	0
 11069  002826  1A02               	xorwf	___ftneg@f1+1,f,c
 11070  002828  0E80               	movlw	128
 11071  00282A  1A03               	xorwf	___ftneg@f1+2,f,c
 11072  00282C                     i2l730:
 11073  00282C  C001  F001         	movff	___ftneg@f1,?___ftneg
 11074  002830  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 11075  002834  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 11076  002838  0012               	return		;funcret
 11077  00283A                     __end_of___ftneg:
 11078                           	opt stack 0
 11079                           pclatu	equ	0xFFB
 11080                           pclath	equ	0xFFA
 11081                           tblptru	equ	0xFF8
 11082                           tblptrh	equ	0xFF7
 11083                           tblptrl	equ	0xFF6
 11084                           tablat	equ	0xFF5
 11085                           prodh	equ	0xFF4
 11086                           prodl	equ	0xFF3
 11087                           intcon	equ	0xFF2
 11088                           intcon2	equ	0xFF1
 11089                           intcon3	equ	0xFF0
 11090                           postinc0	equ	0xFEE
 11091                           fsr0h	equ	0xFEA
 11092                           fsr0l	equ	0xFE9
 11093                           wreg	equ	0xFE8
 11094                           fsr1h	equ	0xFE2
 11095                           fsr1l	equ	0xFE1
 11096                           indf2	equ	0xFDF
 11097                           postinc2	equ	0xFDE
 11098                           postdec2	equ	0xFDD
 11099                           fsr2h	equ	0xFDA
 11100                           fsr2l	equ	0xFD9
 11101                           status	equ	0xFD8
 11102                           
 11103 ;; *************** function ___ftdiv *****************
 11104 ;; Defined at:
 11105 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11106 ;; Parameters:    Size  Location     Type
 11107 ;;  f1              3    8[COMRAM] float 
 11108 ;;  f2              3   11[COMRAM] float 
 11109 ;; Auto vars:     Size  Location     Type
 11110 ;;  f3              3   18[COMRAM] float 
 11111 ;;  sign            1   22[COMRAM] unsigned char 
 11112 ;;  exp             1   21[COMRAM] unsigned char 
 11113 ;;  cntr            1   17[COMRAM] unsigned char 
 11114 ;; Return value:  Size  Location     Type
 11115 ;;                  3    8[COMRAM] float 
 11116 ;; Registers used:
 11117 ;;		wreg, status,2, status,0, cstack
 11118 ;; Tracked objects:
 11119 ;;		On entry : 0/0
 11120 ;;		On exit  : 0/0
 11121 ;;		Unchanged: 0/0
 11122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11123 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11124 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11125 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11126 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11127 ;;Total ram usage:       15 bytes
 11128 ;; Hardware stack levels used:    1
 11129 ;; Hardware stack levels required when called:    1
 11130 ;; This function calls:
 11131 ;;		___ftpack
 11132 ;; This function is called by:
 11133 ;;		_exp
 11134 ;; This function uses a non-reentrant model
 11135 ;;
 11136                           
 11137                           	psect	text59
 11138  0016B0                     __ptext59:
 11139                           	opt stack 0
 11140  0016B0                     ___ftdiv:
 11141                           	opt stack 21
 11142                           
 11143                           ;incstack = 0
 11144  0016B0  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 11145  0016B4  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 11146  0016B6  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 11147  0016B8  340A               	rlcf	___ftdiv@f1+1,w,c
 11148  0016BA  360F               	rlcf	??___ftdiv& (0+255),f,c
 11149  0016BC  E301               	bnc	u255_41
 11150  0016BE  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 11151  0016C0                     u255_41:
 11152  0016C0  500F               	movf	??___ftdiv,w,c
 11153  0016C2  6E16               	movwf	___ftdiv@exp,c
 11154  0016C4  5016               	movf	___ftdiv@exp,w,c
 11155  0016C6  A4D8               	btfss	status,2,c
 11156  0016C8  D007               	goto	i2l3129
 11157  0016CA  0E00               	movlw	0
 11158  0016CC  6E09               	movwf	?___ftdiv,c
 11159  0016CE  0E00               	movlw	0
 11160  0016D0  6E0A               	movwf	?___ftdiv+1,c
 11161  0016D2  0E00               	movlw	0
 11162  0016D4  6E0B               	movwf	?___ftdiv+2,c
 11163  0016D6  0012               	return	
 11164  0016D8                     i2l3129:
 11165  0016D8  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 11166  0016DC  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 11167  0016DE  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 11168  0016E0  340D               	rlcf	___ftdiv@f2+1,w,c
 11169  0016E2  360F               	rlcf	??___ftdiv& (0+255),f,c
 11170  0016E4  E301               	bnc	u257_41
 11171  0016E6  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 11172  0016E8                     u257_41:
 11173  0016E8  500F               	movf	??___ftdiv,w,c
 11174  0016EA  6E17               	movwf	___ftdiv@sign,c
 11175  0016EC  5017               	movf	___ftdiv@sign,w,c
 11176  0016EE  A4D8               	btfss	status,2,c
 11177  0016F0  D007               	goto	i2l3135
 11178  0016F2  0E00               	movlw	0
 11179  0016F4  6E09               	movwf	?___ftdiv,c
 11180  0016F6  0E00               	movlw	0
 11181  0016F8  6E0A               	movwf	?___ftdiv+1,c
 11182  0016FA  0E00               	movlw	0
 11183  0016FC  6E0B               	movwf	?___ftdiv+2,c
 11184  0016FE  0012               	return	
 11185  001700                     i2l3135:
 11186  001700  0E00               	movlw	0
 11187  001702  6E13               	movwf	___ftdiv@f3,c
 11188  001704  0E00               	movlw	0
 11189  001706  6E14               	movwf	___ftdiv@f3+1,c
 11190  001708  0E00               	movlw	0
 11191  00170A  6E15               	movwf	___ftdiv@f3+2,c
 11192  00170C  5017               	movf	___ftdiv@sign,w,c
 11193  00170E  0F89               	addlw	137
 11194  001710  5E16               	subwf	___ftdiv@exp,f,c
 11195  001712  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 11196  001716  500E               	movf	___ftdiv@f2+2,w,c
 11197  001718  1A17               	xorwf	___ftdiv@sign,f,c
 11198  00171A  0E80               	movlw	128
 11199  00171C  1617               	andwf	___ftdiv@sign,f,c
 11200  00171E  8E0A               	bsf	___ftdiv@f1+1,7,c
 11201  001720  0EFF               	movlw	255
 11202  001722  1609               	andwf	___ftdiv@f1,f,c
 11203  001724  0EFF               	movlw	255
 11204  001726  160A               	andwf	___ftdiv@f1+1,f,c
 11205  001728  0E00               	movlw	0
 11206  00172A  160B               	andwf	___ftdiv@f1+2,f,c
 11207  00172C  8E0D               	bsf	___ftdiv@f2+1,7,c
 11208  00172E  0EFF               	movlw	255
 11209  001730  160C               	andwf	___ftdiv@f2,f,c
 11210  001732  0EFF               	movlw	255
 11211  001734  160D               	andwf	___ftdiv@f2+1,f,c
 11212  001736  0E00               	movlw	0
 11213  001738  160E               	andwf	___ftdiv@f2+2,f,c
 11214  00173A  0E18               	movlw	24
 11215  00173C  6E12               	movwf	___ftdiv@cntr,c
 11216  00173E                     i2l3155:
 11217  00173E  90D8               	bcf	status,0,c
 11218  001740  3613               	rlcf	___ftdiv@f3,f,c
 11219  001742  3614               	rlcf	___ftdiv@f3+1,f,c
 11220  001744  3615               	rlcf	___ftdiv@f3+2,f,c
 11221  001746  500C               	movf	___ftdiv@f2,w,c
 11222  001748  5C09               	subwf	___ftdiv@f1,w,c
 11223  00174A  500D               	movf	___ftdiv@f2+1,w,c
 11224  00174C  580A               	subwfb	___ftdiv@f1+1,w,c
 11225  00174E  500E               	movf	___ftdiv@f2+2,w,c
 11226  001750  580B               	subwfb	___ftdiv@f1+2,w,c
 11227  001752  A0D8               	btfss	status,0,c
 11228  001754  D007               	goto	i2l708
 11229  001756  500C               	movf	___ftdiv@f2,w,c
 11230  001758  5E09               	subwf	___ftdiv@f1,f,c
 11231  00175A  500D               	movf	___ftdiv@f2+1,w,c
 11232  00175C  5A0A               	subwfb	___ftdiv@f1+1,f,c
 11233  00175E  500E               	movf	___ftdiv@f2+2,w,c
 11234  001760  5A0B               	subwfb	___ftdiv@f1+2,f,c
 11235  001762  8013               	bsf	___ftdiv@f3,0,c
 11236  001764                     i2l708:
 11237  001764  90D8               	bcf	status,0,c
 11238  001766  3609               	rlcf	___ftdiv@f1,f,c
 11239  001768  360A               	rlcf	___ftdiv@f1+1,f,c
 11240  00176A  360B               	rlcf	___ftdiv@f1+2,f,c
 11241  00176C  2E12               	decfsz	___ftdiv@cntr,f,c
 11242  00176E  D7E7               	goto	i2l3155
 11243  001770  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 11244  001774  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11245  001778  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11246  00177C  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 11247  001780  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 11248  001784  EC0D  F00F         	call	___ftpack	;wreg free
 11249  001788  C001  F009         	movff	?___ftpack,?___ftdiv
 11250  00178C  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 11251  001790  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 11252  001794  0012               	return	
 11253  001796                     __end_of___ftdiv:
 11254                           	opt stack 0
 11255                           pclatu	equ	0xFFB
 11256                           pclath	equ	0xFFA
 11257                           tblptru	equ	0xFF8
 11258                           tblptrh	equ	0xFF7
 11259                           tblptrl	equ	0xFF6
 11260                           tablat	equ	0xFF5
 11261                           prodh	equ	0xFF4
 11262                           prodl	equ	0xFF3
 11263                           intcon	equ	0xFF2
 11264                           intcon2	equ	0xFF1
 11265                           intcon3	equ	0xFF0
 11266                           postinc0	equ	0xFEE
 11267                           fsr0h	equ	0xFEA
 11268                           fsr0l	equ	0xFE9
 11269                           wreg	equ	0xFE8
 11270                           fsr1h	equ	0xFE2
 11271                           fsr1l	equ	0xFE1
 11272                           indf2	equ	0xFDF
 11273                           postinc2	equ	0xFDE
 11274                           postdec2	equ	0xFDD
 11275                           fsr2h	equ	0xFDA
 11276                           fsr2l	equ	0xFD9
 11277                           status	equ	0xFD8
 11278                           
 11279 ;; *************** function ___awtoft *****************
 11280 ;; Defined at:
 11281 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;  c               2    8[COMRAM] int 
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;  sign            1   11[COMRAM] unsigned char 
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  3    8[COMRAM] float 
 11288 ;; Registers used:
 11289 ;;		wreg, status,2, status,0, cstack
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11295 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11298 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;Total ram usage:        4 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; Hardware stack levels required when called:    1
 11302 ;; This function calls:
 11303 ;;		___ftpack
 11304 ;; This function is called by:
 11305 ;;		_dec_to_hex
 11306 ;;		_exp
 11307 ;;		_log
 11308 ;; This function uses a non-reentrant model
 11309 ;;
 11310                           
 11311                           	psect	text60
 11312  0026CE                     __ptext60:
 11313                           	opt stack 0
 11314  0026CE                     ___awtoft:
 11315                           	opt stack 21
 11316                           
 11317                           ;incstack = 0
 11318  0026CE  0E00               	movlw	0
 11319  0026D0  6E0C               	movwf	___awtoft@sign,c
 11320  0026D2  AE0A               	btfss	___awtoft@c+1,7,c
 11321  0026D4  D006               	goto	i2l3185
 11322  0026D6  6C09               	negf	___awtoft@c,c
 11323  0026D8  1E0A               	comf	___awtoft@c+1,f,c
 11324  0026DA  B0D8               	btfsc	status,0,c
 11325  0026DC  2A0A               	incf	___awtoft@c+1,f,c
 11326  0026DE  0E01               	movlw	1
 11327  0026E0  6E0C               	movwf	___awtoft@sign,c
 11328  0026E2                     i2l3185:
 11329  0026E2  C009  F001         	movff	___awtoft@c,___ftpack@arg
 11330  0026E6  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 11331  0026EA  6A03               	clrf	___ftpack@arg+2,c
 11332  0026EC  0E8E               	movlw	142
 11333  0026EE  6E04               	movwf	___ftpack@exp,c
 11334  0026F0  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 11335  0026F4  EC0D  F00F         	call	___ftpack	;wreg free
 11336  0026F8  C001  F009         	movff	?___ftpack,?___awtoft
 11337  0026FC  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 11338  002700  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 11339  002704  0012               	return	
 11340  002706                     __end_of___awtoft:
 11341                           	opt stack 0
 11342                           pclatu	equ	0xFFB
 11343                           pclath	equ	0xFFA
 11344                           tblptru	equ	0xFF8
 11345                           tblptrh	equ	0xFF7
 11346                           tblptrl	equ	0xFF6
 11347                           tablat	equ	0xFF5
 11348                           prodh	equ	0xFF4
 11349                           prodl	equ	0xFF3
 11350                           intcon	equ	0xFF2
 11351                           intcon2	equ	0xFF1
 11352                           intcon3	equ	0xFF0
 11353                           postinc0	equ	0xFEE
 11354                           fsr0h	equ	0xFEA
 11355                           fsr0l	equ	0xFE9
 11356                           wreg	equ	0xFE8
 11357                           fsr1h	equ	0xFE2
 11358                           fsr1l	equ	0xFE1
 11359                           indf2	equ	0xFDF
 11360                           postinc2	equ	0xFDE
 11361                           postdec2	equ	0xFDD
 11362                           fsr2h	equ	0xFDA
 11363                           fsr2l	equ	0xFD9
 11364                           status	equ	0xFD8
 11365                           
 11366 ;; *************** function ___lltoft *****************
 11367 ;; Defined at:
 11368 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;  c               4    8[COMRAM] unsigned long 
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;  exp             1   16[COMRAM] unsigned char 
 11373 ;; Return value:  Size  Location     Type
 11374 ;;                  3    8[COMRAM] float 
 11375 ;; Registers used:
 11376 ;;		wreg, status,2, status,0, cstack
 11377 ;; Tracked objects:
 11378 ;;		On entry : 0/0
 11379 ;;		On exit  : 0/0
 11380 ;;		Unchanged: 0/0
 11381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11382 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11383 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11384 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11385 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11386 ;;Total ram usage:        9 bytes
 11387 ;; Hardware stack levels used:    1
 11388 ;; Hardware stack levels required when called:    1
 11389 ;; This function calls:
 11390 ;;		___ftpack
 11391 ;; This function is called by:
 11392 ;;		_pow
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           	psect	text61
 11397  0024C2                     __ptext61:
 11398                           	opt stack 0
 11399  0024C2                     ___lltoft:
 11400                           	opt stack 22
 11401                           
 11402                           ;incstack = 0
 11403  0024C2  0E8E               	movlw	142
 11404  0024C4  6E11               	movwf	___lltoft@exp,c
 11405  0024C6  D006               	goto	i2l3311
 11406  0024C8                     i2l3309:
 11407  0024C8  90D8               	bcf	status,0,c
 11408  0024CA  320C               	rrcf	___lltoft@c+3,f,c
 11409  0024CC  320B               	rrcf	___lltoft@c+2,f,c
 11410  0024CE  320A               	rrcf	___lltoft@c+1,f,c
 11411  0024D0  3209               	rrcf	___lltoft@c,f,c
 11412  0024D2  2A11               	incf	___lltoft@exp,f,c
 11413  0024D4                     i2l3311:
 11414  0024D4  0E00               	movlw	0
 11415  0024D6  1409               	andwf	___lltoft@c,w,c
 11416  0024D8  6E0D               	movwf	??___lltoft& (0+255),c
 11417  0024DA  0E00               	movlw	0
 11418  0024DC  140A               	andwf	___lltoft@c+1,w,c
 11419  0024DE  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 11420  0024E0  0E00               	movlw	0
 11421  0024E2  140B               	andwf	___lltoft@c+2,w,c
 11422  0024E4  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 11423  0024E6  0EFF               	movlw	255
 11424  0024E8  140C               	andwf	___lltoft@c+3,w,c
 11425  0024EA  6E10               	movwf	(??___lltoft+3)& (0+255),c
 11426  0024EC  500D               	movf	??___lltoft,w,c
 11427  0024EE  100E               	iorwf	??___lltoft+1,w,c
 11428  0024F0  100F               	iorwf	??___lltoft+2,w,c
 11429  0024F2  1010               	iorwf	??___lltoft+3,w,c
 11430  0024F4  A4D8               	btfss	status,2,c
 11431  0024F6  D7E8               	goto	i2l3309
 11432  0024F8  C009  F001         	movff	___lltoft@c,___ftpack@arg
 11433  0024FC  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 11434  002500  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 11435  002504  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 11436  002508  0E00               	movlw	0
 11437  00250A  6E05               	movwf	___ftpack@sign,c
 11438  00250C  EC0D  F00F         	call	___ftpack	;wreg free
 11439  002510  C001  F009         	movff	?___ftpack,?___lltoft
 11440  002514  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 11441  002518  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 11442  00251C  0012               	return	
 11443  00251E                     __end_of___lltoft:
 11444                           	opt stack 0
 11445                           pclatu	equ	0xFFB
 11446                           pclath	equ	0xFFA
 11447                           tblptru	equ	0xFF8
 11448                           tblptrh	equ	0xFF7
 11449                           tblptrl	equ	0xFF6
 11450                           tablat	equ	0xFF5
 11451                           prodh	equ	0xFF4
 11452                           prodl	equ	0xFF3
 11453                           intcon	equ	0xFF2
 11454                           intcon2	equ	0xFF1
 11455                           intcon3	equ	0xFF0
 11456                           postinc0	equ	0xFEE
 11457                           fsr0h	equ	0xFEA
 11458                           fsr0l	equ	0xFE9
 11459                           wreg	equ	0xFE8
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           indf2	equ	0xFDF
 11463                           postinc2	equ	0xFDE
 11464                           postdec2	equ	0xFDD
 11465                           fsr2h	equ	0xFDA
 11466                           fsr2l	equ	0xFD9
 11467                           status	equ	0xFD8
 11468                           
 11469 ;; *************** function ___ftpack *****************
 11470 ;; Defined at:
 11471 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11472 ;; Parameters:    Size  Location     Type
 11473 ;;  arg             3    0[COMRAM] unsigned um
 11474 ;;  exp             1    3[COMRAM] unsigned char 
 11475 ;;  sign            1    4[COMRAM] unsigned char 
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;		None
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  3    0[COMRAM] float 
 11480 ;; Registers used:
 11481 ;;		wreg, status,2, status,0
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11487 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;Total ram usage:        8 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; This function calls:
 11494 ;;		Nothing
 11495 ;; This function is called by:
 11496 ;;		___altoft
 11497 ;;		___awtoft
 11498 ;;		___ftadd
 11499 ;;		___ftdiv
 11500 ;;		___ftmul
 11501 ;;		___lltoft
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           	psect	text62
 11506  001E1A                     __ptext62:
 11507                           	opt stack 0
 11508  001E1A                     ___ftpack:
 11509                           	opt stack 20
 11510                           
 11511                           ;incstack = 0
 11512  001E1A  5004               	movf	___ftpack@exp,w,c
 11513  001E1C  B4D8               	btfsc	status,2,c
 11514  001E1E  D005               	goto	i2l2845
 11515  001E20  5001               	movf	___ftpack@arg,w,c
 11516  001E22  1002               	iorwf	___ftpack@arg+1,w,c
 11517  001E24  1003               	iorwf	___ftpack@arg+2,w,c
 11518  001E26  A4D8               	btfss	status,2,c
 11519  001E28  D00C               	goto	i2l2851
 11520  001E2A                     i2l2845:
 11521  001E2A  0E00               	movlw	0
 11522  001E2C  6E01               	movwf	?___ftpack,c
 11523  001E2E  0E00               	movlw	0
 11524  001E30  6E02               	movwf	?___ftpack+1,c
 11525  001E32  0E00               	movlw	0
 11526  001E34  6E03               	movwf	?___ftpack+2,c
 11527  001E36  0012               	return	
 11528  001E38                     i2l2849:
 11529  001E38  2A04               	incf	___ftpack@exp,f,c
 11530  001E3A  90D8               	bcf	status,0,c
 11531  001E3C  3203               	rrcf	___ftpack@arg+2,f,c
 11532  001E3E  3202               	rrcf	___ftpack@arg+1,f,c
 11533  001E40  3201               	rrcf	___ftpack@arg,f,c
 11534  001E42                     i2l2851:
 11535  001E42  0E00               	movlw	0
 11536  001E44  1401               	andwf	___ftpack@arg,w,c
 11537  001E46  6E06               	movwf	??___ftpack& (0+255),c
 11538  001E48  0E00               	movlw	0
 11539  001E4A  1402               	andwf	___ftpack@arg+1,w,c
 11540  001E4C  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11541  001E4E  0EFE               	movlw	254
 11542  001E50  1403               	andwf	___ftpack@arg+2,w,c
 11543  001E52  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11544  001E54  5006               	movf	??___ftpack,w,c
 11545  001E56  1007               	iorwf	??___ftpack+1,w,c
 11546  001E58  1008               	iorwf	??___ftpack+2,w,c
 11547  001E5A  B4D8               	btfsc	status,2,c
 11548  001E5C  D00C               	goto	i2l2857
 11549  001E5E  D7EC               	goto	i2l2849
 11550  001E60                     i2l2853:
 11551  001E60  2A04               	incf	___ftpack@exp,f,c
 11552  001E62  0E01               	movlw	1
 11553  001E64  2601               	addwf	___ftpack@arg,f,c
 11554  001E66  0E00               	movlw	0
 11555  001E68  2202               	addwfc	___ftpack@arg+1,f,c
 11556  001E6A  0E00               	movlw	0
 11557  001E6C  2203               	addwfc	___ftpack@arg+2,f,c
 11558  001E6E  90D8               	bcf	status,0,c
 11559  001E70  3203               	rrcf	___ftpack@arg+2,f,c
 11560  001E72  3202               	rrcf	___ftpack@arg+1,f,c
 11561  001E74  3201               	rrcf	___ftpack@arg,f,c
 11562  001E76                     i2l2857:
 11563  001E76  0E00               	movlw	0
 11564  001E78  1401               	andwf	___ftpack@arg,w,c
 11565  001E7A  6E06               	movwf	??___ftpack& (0+255),c
 11566  001E7C  0E00               	movlw	0
 11567  001E7E  1402               	andwf	___ftpack@arg+1,w,c
 11568  001E80  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11569  001E82  0EFF               	movlw	255
 11570  001E84  1403               	andwf	___ftpack@arg+2,w,c
 11571  001E86  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11572  001E88  5006               	movf	??___ftpack,w,c
 11573  001E8A  1007               	iorwf	??___ftpack+1,w,c
 11574  001E8C  1008               	iorwf	??___ftpack+2,w,c
 11575  001E8E  B4D8               	btfsc	status,2,c
 11576  001E90  D006               	goto	i2l2861
 11577  001E92  D7E6               	goto	i2l2853
 11578  001E94                     i2l2859:
 11579  001E94  0604               	decf	___ftpack@exp,f,c
 11580  001E96  90D8               	bcf	status,0,c
 11581  001E98  3601               	rlcf	___ftpack@arg,f,c
 11582  001E9A  3602               	rlcf	___ftpack@arg+1,f,c
 11583  001E9C  3603               	rlcf	___ftpack@arg+2,f,c
 11584  001E9E                     i2l2861:
 11585  001E9E  BE02               	btfsc	___ftpack@arg+1,7,c
 11586  001EA0  D003               	goto	i2l650
 11587  001EA2  0E02               	movlw	2
 11588  001EA4  6004               	cpfslt	___ftpack@exp,c
 11589  001EA6  D7F6               	goto	i2l2859
 11590  001EA8                     i2l650:
 11591  001EA8  A004               	btfss	___ftpack@exp,0,c
 11592  001EAA  9E02               	bcf	___ftpack@arg+1,7,c
 11593  001EAC  90D8               	bcf	status,0,c
 11594  001EAE  3204               	rrcf	___ftpack@exp,f,c
 11595  001EB0  5004               	movf	___ftpack@exp,w,c
 11596  001EB2  1203               	iorwf	___ftpack@arg+2,f,c
 11597  001EB4  5005               	movf	___ftpack@sign,w,c
 11598  001EB6  A4D8               	btfss	status,2,c
 11599  001EB8  8E03               	bsf	___ftpack@arg+2,7,c
 11600  001EBA  C001  F001         	movff	___ftpack@arg,?___ftpack
 11601  001EBE  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11602  001EC2  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11603  001EC6  0012               	return	
 11604  001EC8                     __end_of___ftpack:
 11605                           	opt stack 0
 11606                           pclatu	equ	0xFFB
 11607                           pclath	equ	0xFFA
 11608                           tblptru	equ	0xFF8
 11609                           tblptrh	equ	0xFF7
 11610                           tblptrl	equ	0xFF6
 11611                           tablat	equ	0xFF5
 11612                           prodh	equ	0xFF4
 11613                           prodl	equ	0xFF3
 11614                           intcon	equ	0xFF2
 11615                           intcon2	equ	0xFF1
 11616                           intcon3	equ	0xFF0
 11617                           postinc0	equ	0xFEE
 11618                           fsr0h	equ	0xFEA
 11619                           fsr0l	equ	0xFE9
 11620                           wreg	equ	0xFE8
 11621                           fsr1h	equ	0xFE2
 11622                           fsr1l	equ	0xFE1
 11623                           indf2	equ	0xFDF
 11624                           postinc2	equ	0xFDE
 11625                           postdec2	equ	0xFDD
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function ___awdiv *****************
 11631 ;; Defined at:
 11632 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  dividend        2    0[COMRAM] int 
 11635 ;;  divisor         2    2[COMRAM] int 
 11636 ;; Auto vars:     Size  Location     Type
 11637 ;;  quotient        2    6[COMRAM] int 
 11638 ;;  sign            1    5[COMRAM] unsigned char 
 11639 ;;  counter         1    4[COMRAM] unsigned char 
 11640 ;; Return value:  Size  Location     Type
 11641 ;;                  2    0[COMRAM] int 
 11642 ;; Registers used:
 11643 ;;		wreg, status,2, status,0
 11644 ;; Tracked objects:
 11645 ;;		On entry : 0/0
 11646 ;;		On exit  : 0/0
 11647 ;;		Unchanged: 0/0
 11648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11649 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;Total ram usage:        8 bytes
 11654 ;; Hardware stack levels used:    1
 11655 ;; This function calls:
 11656 ;;		Nothing
 11657 ;; This function is called by:
 11658 ;;		_dec_to_hex
 11659 ;; This function uses a non-reentrant model
 11660 ;;
 11661                           
 11662                           	psect	text63
 11663  0021C4                     __ptext63:
 11664                           	opt stack 0
 11665  0021C4                     ___awdiv:
 11666                           	opt stack 24
 11667                           
 11668                           ;incstack = 0
 11669  0021C4  0E00               	movlw	0
 11670  0021C6  6E06               	movwf	___awdiv@sign,c
 11671  0021C8  AE04               	btfss	___awdiv@divisor+1,7,c
 11672  0021CA  D006               	goto	i2l3657
 11673  0021CC  6C03               	negf	___awdiv@divisor,c
 11674  0021CE  1E04               	comf	___awdiv@divisor+1,f,c
 11675  0021D0  B0D8               	btfsc	status,0,c
 11676  0021D2  2A04               	incf	___awdiv@divisor+1,f,c
 11677  0021D4  0E01               	movlw	1
 11678  0021D6  6E06               	movwf	___awdiv@sign,c
 11679  0021D8                     i2l3657:
 11680  0021D8  AE02               	btfss	___awdiv@dividend+1,7,c
 11681  0021DA  D006               	goto	i2l3663
 11682  0021DC  6C01               	negf	___awdiv@dividend,c
 11683  0021DE  1E02               	comf	___awdiv@dividend+1,f,c
 11684  0021E0  B0D8               	btfsc	status,0,c
 11685  0021E2  2A02               	incf	___awdiv@dividend+1,f,c
 11686  0021E4  0E01               	movlw	1
 11687  0021E6  1A06               	xorwf	___awdiv@sign,f,c
 11688  0021E8                     i2l3663:
 11689  0021E8  0E00               	movlw	0
 11690  0021EA  6E08               	movwf	___awdiv@quotient+1,c
 11691  0021EC  0E00               	movlw	0
 11692  0021EE  6E07               	movwf	___awdiv@quotient,c
 11693  0021F0  5003               	movf	___awdiv@divisor,w,c
 11694  0021F2  1004               	iorwf	___awdiv@divisor+1,w,c
 11695  0021F4  B4D8               	btfsc	status,2,c
 11696  0021F6  D01C               	goto	i2l3685
 11697  0021F8  0E01               	movlw	1
 11698  0021FA  6E05               	movwf	___awdiv@counter,c
 11699  0021FC  D004               	goto	i2l3671
 11700  0021FE                     i2l3669:
 11701  0021FE  90D8               	bcf	status,0,c
 11702  002200  3603               	rlcf	___awdiv@divisor,f,c
 11703  002202  3604               	rlcf	___awdiv@divisor+1,f,c
 11704  002204  2A05               	incf	___awdiv@counter,f,c
 11705  002206                     i2l3671:
 11706  002206  AE04               	btfss	___awdiv@divisor+1,7,c
 11707  002208  D7FA               	goto	i2l3669
 11708  00220A                     i2l3673:
 11709  00220A  90D8               	bcf	status,0,c
 11710  00220C  3607               	rlcf	___awdiv@quotient,f,c
 11711  00220E  3608               	rlcf	___awdiv@quotient+1,f,c
 11712  002210  5003               	movf	___awdiv@divisor,w,c
 11713  002212  5C01               	subwf	___awdiv@dividend,w,c
 11714  002214  5004               	movf	___awdiv@divisor+1,w,c
 11715  002216  5802               	subwfb	___awdiv@dividend+1,w,c
 11716  002218  A0D8               	btfss	status,0,c
 11717  00221A  D005               	goto	i2l3681
 11718  00221C  5003               	movf	___awdiv@divisor,w,c
 11719  00221E  5E01               	subwf	___awdiv@dividend,f,c
 11720  002220  5004               	movf	___awdiv@divisor+1,w,c
 11721  002222  5A02               	subwfb	___awdiv@dividend+1,f,c
 11722  002224  8007               	bsf	___awdiv@quotient,0,c
 11723  002226                     i2l3681:
 11724  002226  90D8               	bcf	status,0,c
 11725  002228  3204               	rrcf	___awdiv@divisor+1,f,c
 11726  00222A  3203               	rrcf	___awdiv@divisor,f,c
 11727  00222C  2E05               	decfsz	___awdiv@counter,f,c
 11728  00222E  D7ED               	goto	i2l3673
 11729  002230                     i2l3685:
 11730  002230  5006               	movf	___awdiv@sign,w,c
 11731  002232  B4D8               	btfsc	status,2,c
 11732  002234  D004               	goto	i2l3689
 11733  002236  6C07               	negf	___awdiv@quotient,c
 11734  002238  1E08               	comf	___awdiv@quotient+1,f,c
 11735  00223A  B0D8               	btfsc	status,0,c
 11736  00223C  2A08               	incf	___awdiv@quotient+1,f,c
 11737  00223E                     i2l3689:
 11738  00223E  C007  F001         	movff	___awdiv@quotient,?___awdiv
 11739  002242  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 11740  002246  0012               	return	
 11741  002248                     __end_of___awdiv:
 11742                           	opt stack 0
 11743                           pclatu	equ	0xFFB
 11744                           pclath	equ	0xFFA
 11745                           tblptru	equ	0xFF8
 11746                           tblptrh	equ	0xFF7
 11747                           tblptrl	equ	0xFF6
 11748                           tablat	equ	0xFF5
 11749                           prodh	equ	0xFF4
 11750                           prodl	equ	0xFF3
 11751                           intcon	equ	0xFF2
 11752                           intcon2	equ	0xFF1
 11753                           intcon3	equ	0xFF0
 11754                           postinc0	equ	0xFEE
 11755                           fsr0h	equ	0xFEA
 11756                           fsr0l	equ	0xFE9
 11757                           wreg	equ	0xFE8
 11758                           fsr1h	equ	0xFE2
 11759                           fsr1l	equ	0xFE1
 11760                           indf2	equ	0xFDF
 11761                           postinc2	equ	0xFDE
 11762                           postdec2	equ	0xFDD
 11763                           fsr2h	equ	0xFDA
 11764                           fsr2l	equ	0xFD9
 11765                           status	equ	0xFD8
 11766                           pclatu	equ	0xFFB
 11767                           pclath	equ	0xFFA
 11768                           tblptru	equ	0xFF8
 11769                           tblptrh	equ	0xFF7
 11770                           tblptrl	equ	0xFF6
 11771                           tablat	equ	0xFF5
 11772                           prodh	equ	0xFF4
 11773                           prodl	equ	0xFF3
 11774                           intcon	equ	0xFF2
 11775                           intcon2	equ	0xFF1
 11776                           intcon3	equ	0xFF0
 11777                           postinc0	equ	0xFEE
 11778                           fsr0h	equ	0xFEA
 11779                           fsr0l	equ	0xFE9
 11780                           wreg	equ	0xFE8
 11781                           fsr1h	equ	0xFE2
 11782                           fsr1l	equ	0xFE1
 11783                           indf2	equ	0xFDF
 11784                           postinc2	equ	0xFDE
 11785                           postdec2	equ	0xFDD
 11786                           fsr2h	equ	0xFDA
 11787                           fsr2l	equ	0xFD9
 11788                           status	equ	0xFD8
 11789                           
 11790                           	psect	rparam
 11791  0000                     pclatu	equ	0xFFB
 11792                           pclath	equ	0xFFA
 11793                           tblptru	equ	0xFF8
 11794                           tblptrh	equ	0xFF7
 11795                           tblptrl	equ	0xFF6
 11796                           tablat	equ	0xFF5
 11797                           prodh	equ	0xFF4
 11798                           prodl	equ	0xFF3
 11799                           intcon	equ	0xFF2
 11800                           intcon2	equ	0xFF1
 11801                           intcon3	equ	0xFF0
 11802                           postinc0	equ	0xFEE
 11803                           fsr0h	equ	0xFEA
 11804                           fsr0l	equ	0xFE9
 11805                           wreg	equ	0xFE8
 11806                           fsr1h	equ	0xFE2
 11807                           fsr1l	equ	0xFE1
 11808                           indf2	equ	0xFDF
 11809                           postinc2	equ	0xFDE
 11810                           postdec2	equ	0xFDD
 11811                           fsr2h	equ	0xFDA
 11812                           fsr2l	equ	0xFD9
 11813                           status	equ	0xFD8
 11814                           
 11815                           	psect	temp
 11816  00007E                     btemp:
 11817                           	opt stack 0
 11818  00007E                     	ds	1
 11819  0000                     int$flags	set	btemp
 11820                           pclatu	equ	0xFFB
 11821                           pclath	equ	0xFFA
 11822                           tblptru	equ	0xFF8
 11823                           tblptrh	equ	0xFF7
 11824                           tblptrl	equ	0xFF6
 11825                           tablat	equ	0xFF5
 11826                           prodh	equ	0xFF4
 11827                           prodl	equ	0xFF3
 11828                           intcon	equ	0xFF2
 11829                           intcon2	equ	0xFF1
 11830                           intcon3	equ	0xFF0
 11831                           postinc0	equ	0xFEE
 11832                           fsr0h	equ	0xFEA
 11833                           fsr0l	equ	0xFE9
 11834                           wreg	equ	0xFE8
 11835                           fsr1h	equ	0xFE2
 11836                           fsr1l	equ	0xFE1
 11837                           indf2	equ	0xFDF
 11838                           postinc2	equ	0xFDE
 11839                           postdec2	equ	0xFDD
 11840                           fsr2h	equ	0xFDA
 11841                           fsr2l	equ	0xFD9
 11842                           status	equ	0xFD8


Data Sizes:
    Strings     423
    Constant    99
    Data        2
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     55      97
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_21(CODE[15]), STR_20(CODE[16]), STR_19(CODE[25]), STR_18(CODE[24]), 
		 -> STR_17(CODE[23]), STR_16(CODE[18]), STR_15(CODE[23]), STR_14(CODE[16]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[23]), STR_6(CODE[23]), 
		 -> STR_5(CODE[20]), STR_4(CODE[17]), STR_3(CODE[13]), STR_2(CODE[24]), 
		 -> STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _operationend->_printf
    _operation->_printf
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   34251
                                             54 BANK0      1     1      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    5931
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    14    14      0    1879
                                             19 BANK0     14    14      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    4052
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    4052
                                             52 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    4052
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    5645
                                             52 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    4052
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    4476
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              33    23     10    3917
                                             28 BANK0     24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     745
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   1     1      0    1480
                                             19 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1480
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   74219
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  14    14      0     557
                                              3 COMRAM    14    14      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    2277
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2     289
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     291
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69735
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58195
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   19010
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31578
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8387
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     521
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     37      61       5       75.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DE      34        0.0%
DATA                 0      0      DE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 27 18:03:14 2017

                ___altoft@exp 003F            i2_I2C_Master_Start 291C            i2_I2C_Master_Write 28FA  
               ___altoft@sign 0040                            l34 2892                ?_emergencystop 0001  
                ___awdiv@sign 0006           ___wmul@multiplicand 0092            i2___lwdiv@dividend 0001  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                ___ftadd@exp1 0027                  ___ftadd@exp2 0026                  ___ftadd@sign 0025  
                         l321 285A                           l353 10BA                           l833 22B6  
                         l843 23F8                           l780 1E08                           _GIE 007F97  
                __CFG_CPB$OFF 000000                           _PEN 007E2A                  __CFG_CPD$OFF 000000  
                         _SEN 007E28                           _PSA 007EAB           ?i2_I2C_Master_Start 0001  
         ?i2_I2C_Master_Write 0002                           _exp 0A86                           _log 10BC  
                         _isr 0008                           _pow 0E1A                  ___awmod@sign 0095  
                         prod 000FF3                           wreg 000FE8                  ?_bottle_time 0001  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0012                  ___ftdiv@sign 0017  
                __CFG_WDT$OFF 000000                          l4001 1250                          l4013 12A6  
                        l4007 128E                          l3323 2266                          l3325 2272  
                        l3501 00F8                          l4301 18F6                          l3335 22A8  
                        l3327 2278                          l3351 23EA                          l3343 23B4  
                        l3503 00FE                          l4303 18FC                          l4311 190E  
                        l3345 23C0                          l3601 039E                          l3521 017E  
                        l4305 1902                          l4313 193C                          l3347 23C6  
                        l3603 03B6                          l3507 0106                          l3451 0FCC  
                        l4307 1908                          l3701 1F8E                          l3605 03BE  
                        l3541 01DC                          l3525 019A                          l3509 013E  
                        l3461 101A                          l3711 1FBE                          l3527 01A0  
                        l3607 03CA                          l3279 2798                          l3455 0FE2  
                        l3713 1FC4                          l3721 1FF6                          l3705 1F9E  
                        l3297 27C0                          l3481 0034                          l3465 103C  
                        l3563 024C                          l3539 01D6                          l3555 0212  
                        l3483 0046                          l3725 200A                          l3717 1FE8  
                        l3709 1FB2                          l3581 02C4                          l3557 022A  
                        l3493 0080                          l3477 0020                          l3469 1052  
                        l3735 1D8C                          l3583 02D0                          l3591 02FE  
                        l3575 02A8                          l3567 0284                          l3487 0050  
                        l4295 18E4                          l3737 1D9C                          l3593 0304  
                        l3569 028E                          l4297 18EA                          l3747 1DF6  
                        l3739 1DA2                          l3595 0350                          l3587 02EA  
                        l4299 18F0                          l3941 1F0A                          l3909 1C28  
                        l3935 1EEA                          l3951 1F54                          l3929 1ECA  
                        ?_exp 0049                          l3973 1A72                          l3949 1F2C  
                        ?_log 0034                          l3969 1A68                          l3897 1C00  
                        l3995 1212                          l3979 1A92                          ?_isr 0001  
                        l3989 11DC                          ?_pow 0052            i2_read_colorsensor 15C2  
                        STR_1 FE89                          STR_2 FE71                          STR_3 FFF2  
                        STR_4 FFB2                          STR_5 FF15                          STR_6 FEE7  
                        STR_7 FEFE                          STR_8 FF5D                          STR_9 FF4C  
                        _T0CS 007EAD                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          _LATD 000F8C                          _LATE 000F8D  
                        u4007 1944                          u4017 1F62                          u4027 2578  
                        u4037 25B4                          u4047 2422                          u4057 242A  
                        u2730 2796                          u4067 2454                          u4077 245C  
                        u3550 1BEA                          u4087 198A                          u3545 2492  
                        _RCEN 007E2B                          i2l34 28A6                          _TMR0 000FD6  
                        _RSEN 007E29                          _main 1874                  ___ftpack@arg 0001  
                        _keys FDF5                  ___ftpack@exp 0004                          _time 00C9  
                        fsr0h 000FEA                          fsr1h 000FE2            i2___lwdiv@quotient 0005  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 007E  
                        exp@x 0049                          log@x 0034                          isr@i 0073  
        ??i2_I2C_Master_Start 0002          ??i2_I2C_Master_Write 0004                          pow@x 0052  
                        pow@y 0055                          prodh 000FF4                          prodl 000FF3  
                        start 000E           ?i2_read_colorsensor 0001                 __CFG_IESO$OFF 000000  
             __end_ofi2_putch 28E4                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 001A  
                ___param_bank 000000                  ___ftmul@sign 001B                   i2_lcdNibble 25C0  
               ?_bottle_count 0001                  ___fttol@exp1 0036                         ??_exp 004C  
                       ??_log 0037                  ___fttol@lval 0032                         ??_isr 0080  
                       ??_pow 0058              ?_I2C_Master_Init 009D              ?_I2C_Master_Read 0001  
            ?_I2C_Master_Wait 0001              ?_I2C_Master_Stop 0001                         ?_main 0001  
                       _ACKEN 007E2C                         _ACKDT 007E2D               __end_of___awdiv 2248  
             __end_of___ftadd 0E1A                         STR_10 FF6E                         STR_11 FF7F  
                       STR_20 FFC3                         STR_12 FF90                         STR_21 FFE3  
                       STR_13 FFA1                         STR_14 FFD3                         STR_22 FF3B  
                       STR_15 FED0                         STR_16 FF29                         STR_17 FEB9  
                       STR_18 FEA1                         STR_19 FE58               __end_of___awmod 2014  
             __end_of___ftdiv 1796               __end_of___ftneg 283A               __end_of___lldiv 1E1A  
             __end_of___ftmul 15C2               ___awdiv@divisor 0003               __end_of___ftsub 2690  
             __end_of___fttol 14CE                         _T0PS0 007EA8                         _T0PS1 007EA9  
                       _T0PS2 007EAA               __end_of___lwdiv 22C0               __end_of___lwmod 2402  
                       i2l241 0630                         i2l250 0498                         i2l251 04A2  
                       i2l243 0428                         i2l332 2078                         i2l244 062C  
                       i2l253 059E                         i2l254 05AE                         i2l335 20A2  
                       i2l329 204E                         i2l353 16AE                         i2l265 071E  
                       i2l650 1EA8                         i2l730 282C                         i2l708 1764  
                       i2l673 0CB2                         i2l833 2566                         i2l843 2646  
                       i2l677 0CDC                         i2l870 0F82                         i2l688 0D8C  
                       i2l697 0DA8                         i2l865 0E52               ___awdiv@counter 0005  
        ??i2_read_colorsensor 0004                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96               ??_servo_rotate0 0003                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000             read_colorsensor@i 009F  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011  
             __end_of_lcdInst 28D8                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _nRBPU 007F8F                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD 25C0                __CFG_EBTRB$OFF 000000  
                  i2isdigit@c 0003                 ___awtoft@sign 000C               __end_of_dpowers FE10  
                       _color 00C1                         _floor 1796                         _etime 0078  
                       _ldexp 1C98                         _frexp 20A4                         _errno 00D6  
             __end_of_isdigit 27CA                 ___ftpack@sign 0005                         _putch 28B8  
                       _stime 007C                         pclath 000FFA                         tablat 000FF5  
                       pow@yi 005F               __end_of_timeset FE1F              __end_ofi2___wmul 2816  
             __end_of_standby 1C98                         status 000FD8                __CFG_PBADEN$ON 000000  
               i2printf@width 001E                   exp@exponent 004F              __end_ofi2_printf 0A86  
          __size_ofi2___lwdiv 0052            __size_ofi2___lwmod 0042                   ldexp@newexp 0037  
             __initialization 2690                   log@exponent 0037            __size_ofi2_lcdInst 000C  
             ??_emergencystop 00B4                ??_bottle_count 00B4                  __end_of_main 1950  
                __end_of_keys FE06                    i2printf@ap 0018            __size_ofi2_isdigit 001E  
                      ??_main 00B6                 ___fttol@sign1 0031                 __activetblptr 000002  
           ?_I2C_Master_Start 0001             ?_I2C_Master_Write 0091                servo_rotate0@i 0007  
              servo_rotate0@j 0009            ??_I2C_Master_Start 0091                        _ADCON0 000FC2  
                      _ADCON1 000FC1            ??_I2C_Master_Write 0093                        ?_floor 0041  
                      ?_ldexp 0034                        ?_frexp 0001              __end_of___altoft 2338  
                      _T08BIT 007EAE              ___awdiv@dividend 0001               i2lcdNibble@data 0002  
            __end_of___awtoft 2706                        ?_putch 0001              __end_of___ftpack 1EC8  
             i2lcdNibble@temp 0001              __end_of___lltoft 251E                        _INT0IE 007F94  
                      _INT1IE 007F83                        _INT1IF 007F80                        _INT2IE 007F84  
                      i2l1028 0B3C                        i2l1029 0C60                        i2l1039 1866  
                      i2l3003 1588                        i2l3015 2164                        i2l3025 21C0  
                      i2l3019 2194                        i2l3035 1406                        i2l3211 17EC  
                      i2l3203 17C4                        i2l3221 1BBA                        i2l3053 146C  
                      i2l3311 24D4                        i2l3135 1700                        i2l3071 14BC  
                      i2l3063 1494                        i2l3207 17D2                        i2l4031 236C  
                      i2l3129 16D8                        i2l3065 14A0                        i2l3057 147C  
                      i2l4041 2390                        i2l4201 0918                        i2l4121 0764  
                      i2l4113 1660                        i2l4105 1634                        i2l3155 173E  
                      i2l3219 1B3E                        i2l3067 14A6                        i2l3083 20CC  
                      i2l4035 2374                        i2l4211 0956                        i2l4131 0788  
                      i2l3309 24C8                        u213_41 0C7E                        i2l3173 2666  
                      i2l3253 1D26                        i2l3237 1CF6                        i2l3229 1CB0  
                      i2l4061 13C8                        i2l4213 095E                        i2l4125 0774  
                      i2l4109 1650                        i2l4231 09A6                        i2l4207 0932  
                      i2l4151 081E                        i2l4127 0782                        i2l3185 26E2  
                      i2l3249 1D1A                        i2l3417 0C36                        i2l3361 10D8  
                      i2l4049 12F8                        i2l4073 203C                        i2l4225 098A  
                      i2l4145 0814                        i2l4153 0852                        i2l4137 07B6  
                      i2l4067 2024                        i2l4227 0992                        i2l4235 09B8  
                      i2l4219 0974                        i2l4171 08A6                        i2l4147 0818  
                      i2l4251 0A6C                        i2l2901 0CC0                        u214_41 0C92  
                      i2l4237 09BE                        i2l4245 0A48                        i2l4165 0888  
                      i2l4421 0700                        i2l4333 0452                        i2l3383 0A9E  
                      i2l3367 10FA                        i2l4079 2066                        i2l4239 0A02  
                      i2l4247 0A5E                        i2l4183 08D2                        i2l4095 15F6  
                      i2l4415 06EA                        i2l3633 0EDC                        i2l3625 0E78  
                      i2l3801 253C                        i2l4249 0A64                        i2l4185 08D6  
                      i2l4169 08A2                        i2l4425 0708                        i2l4337 045E  
                      i2l2851 1E42                        i2l2931 0D46                        i2l2923 0D1A  
                      i2l2907 0CEA                        i2l3395 0B0E                        i2l3619 0E60  
                      i2l3811 255C                        i2l3803 2540                        i2l4099 1606  
                      i2l4339 0468                        i2l2861 1E9E                        i2l2853 1E60  
                      i2l2845 1E2A                        i2l2941 0D7A                        i2l2933 0D50  
                      i2l3389 0AD6                        i2l3637 0EFE                        i2l3821 2624  
                      i2l3671 2206                        i2l3663 21E8                        i2l2943 0D84  
                      i2l2935 0D58                        i2l3823 2628                        i2l4199 0902  
                      i2l4383 05BC                        i2l4367 0554                        i2l3681 2226  
                      i2l3673 220A                        i2l3657 21D8                        i2l2857 1E76  
                      i2l2849 1E38                        i2l2929 0D3C                        i2l4385 05CA  
                      i2l2859 1E94                        i2l3771 27EA                        i2l3827 263C  
                      i2l3819 261C                        i2l3669 21FE                        i2l3685 2230  
                      i2l2949 0DC4                        i2l2885 22E2                        i2l4389 05D8  
                      i2l2959 0DF4                        i2l2975 151E                        i2l2887 22EE  
                      i2l3689 223E                        i2l2993 1560                        i2l2969 14F6  
                      i2l2989 1550                        i2l3789 2872                        i2l2999 1578  
                      i2l3799 2534                        u234_41 14DE                        u243_41 13EA  
                      u236_41 1506                        u255_41 16C0                        u257_41 16E8  
                      _TMR0IE 007F95                        _TMR0IF 007F92                     ??i2_putch 0003  
                      _TMR0ON 007EAF                        _SSPADD 000FC8                        _TRISC3 007CA3  
                      _TRISC4 007CA4                        _SSPBUF 000FC9                __CFG_XINST$OFF 000000  
           ?_read_colorsensor 0001                        ___ftge 2134                        ___wmul 273C  
          ??_read_colorsensor 0093                     ??___awdiv 0005                     ??___ftadd 0022  
              __CFG_STVREN$ON 000000                     ??___awmod 0094                     ??___ftdiv 000F  
                   ??___ftneg 0004                     ??___lldiv 0098                     ??___ftmul 0013  
                   ??___ftsub 002E                     ??___fttol 002C                     ??___lwdiv 0094  
                   ??___lwmod 009B                 dec_to_hex@num 0063                        clear_0 26AE  
                      clear_1 26BA              ___awdiv@quotient 0007               ___awmod@divisor 0092  
             ___awmod@counter 0094                     ??_lcdInst 0092                        _printf 0012  
                      floor@i 0044                        floor@x 0041         ___ftmul@f3_as_product 0017  
                   ??_initLCD 0093                     ??_isdigit 0090             __end_ofi2___lwdiv 2570  
                __mediumconst FDF4             __end_ofi2___lwmod 2650                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                     ??_standby 00B4  
           __end_ofi2_lcdInst 28F0             __end_ofi2_isdigit 287A              __end_ofexp@coeff FE3D  
        __size_of_bottle_time 0036              __end_oflog@coeff FE58                    __accesstop 0080  
     __end_of__initialization 26C0                    ___altoft@c 0037                    ___ftadd@f1 001C  
                  ___ftadd@f2 001F                    ___ftge@ff1 0001                    ___ftge@ff2 0004  
                eval_poly@res 0031                 ___rparam_used 000001                    ___ftdiv@f1 0009  
                  ___ftdiv@f2 000C                    ___ftdiv@f3 0013                    ___ftneg@f1 0001  
                  ___awtoft@c 0009                    ___ftmul@f1 000D                    ___ftmul@f2 0010  
                  ___ftsub@f1 0028                    ___ftsub@f2 002B                    ___fttol@f1 0028  
          i2___lwmod@dividend 0008                __pcstackCOMRAM 0001                  __pidataBANK0 2924  
                  ___lltoft@c 0009                 __end_of_floor 1874                 __end_of_ldexp 1D5E  
               __end_of_frexp 2134                 __end_of_putch 28C8                   i2printf@idx 0017  
                 i2printf@val 001B            __size_of_date_time 00D2           servo_rotate0@degree 0001  
                   ?i2___wmul 0001            __size_of_lcdNibble 0060                   i2putch@data 0003  
                   ?i2_printf 000D   __size_of_I2C_ColorSens_Init 00DC                       ??_floor 0044  
                     ??_ldexp 0039                       ??_frexp 0006          __end_of_bottle_count 12DE  
                  _dec_to_hex 12DE                       ??_putch 0092                    __pbssBANK0 00B7  
          __size_of_eval_poly 00D2             servo_rotate0@duty 0005            __size_of_read_time 0068  
                     ?___ftge 0001                  ?i2_lcdNibble 0001                       ?___wmul 0090  
                   ?___altoft 0037                     ?___awtoft 0009                     ?___ftpack 0001  
                     ?_printf 009C            __size_of_operation 00AA                     ?___lltoft 0009  
                  ??i2___wmul 0005                    ??i2_printf 0013                       _SSPCON1 000FC6  
                     _SSPCON2 000FC5                       _SSPSTAT 000FC7             __end_of_date_time 1AFE  
                     i2_putch 28D8             _bottle_count_disp 00DF   __size_ofi2_I2C_Master_Start 0008  
           __end_of_lcdNibble 2462   __size_ofi2_I2C_Master_Write 000A                 ?_operationend 0001  
                     __Hparam 0000                       __Lparam 0000               __size_of___ftge 0090  
                     ___awdiv 21C4                       ___ftadd 0C6E                       ___awmod 1F72  
                     ___ftdiv 16B0                       ___ftneg 2816                       ___lldiv 1D5E  
             __size_of___wmul 0036                       ___ftmul 14CE                       ___ftsub 2650  
                     ___fttol 13DA                       ___lwdiv 2248                       ___lwmod 23A0  
                  _curr_state 00DE                    ??___altoft 003B                       __pcinit 2690  
                  ??___awtoft 000C                    ??___ftpack 0006             __end_of_eval_poly 1BD0  
                     __ramtop 1000                       _lcdInst 28C8                    ??___lltoft 000D  
                     __ptext0 1874                       __ptext1 1BD0                       __ptext2 0F90  
                     __ptext3 287A                       __ptext4 1EC8                       __ptext5 2570  
                     __ptext6 283A                       __ptext7 1A2C                       __ptext8 2772  
                     __ptext9 2706               __size_of_printf 03D6                dec_to_hex@temp 006B  
                     _initLCD 2570             __end_of_hexpowers FE18                 i2_isdigit$791 0002  
                     _dpowers FE06                  __size_of_exp 01E8                  __size_of_log 011E  
                     _isdigit 27A0                  __size_of_isr 0752   __size_ofi2_read_colorsensor 00EE  
                __size_of_pow 0176              ___awmod@dividend 0090             __end_of_read_time 23A0  
    __size_of_I2C_Master_Init 0060      __size_of_I2C_Master_Read 002E      __size_of_I2C_Master_Wait 0014  
                  date_time@i 00B4      __size_of_I2C_Master_Stop 0008         __end_of_servo_rotate0 20A4  
                     _timeset FE18                       _testint 00D0                       _standby 1BD0  
                 ?_dec_to_hex 0063                __pintcode_body 03E8          end_of_initialization 26C0  
                     exp@sign 0051                 __Lmediumconst FDF4                       int_func 03E8  
         i2___wmul@multiplier 0001             __end_of_operation 1F72                _operation_disp 00D8  
              _operation_time 00DA                ??_operationend 00B4     __size_of_I2C_Master_Start 0008  
   __size_of_I2C_Master_Write 000A               ___lldiv@divisor 0094                       pow@sign 005E  
             ___lldiv@counter 009C                       printf@c 00B3                       printf@f 009C  
            I2C_Master_Init@c 009D              I2C_Master_Read@a 0091                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE         __end_of_emergencystop 285C  
                   _PORTAbits 000F80         __size_of_bottle_count 0104     __size_of_read_colorsensor 012C  
   read_colorsensor@color_low 0097             i2_I2C_Master_Read 27CA             i2_I2C_Master_Wait 28A6  
           i2_I2C_Master_Stop 2914             i2___lwdiv@divisor 0003                     i2___lwdiv 251E  
                   i2___lwmod 260E             i2___lwdiv@counter 0007            ?i2_I2C_Master_Read 0001  
          ?i2_I2C_Master_Wait 0001  i2read_colorsensor@color_high 000C            ?i2_I2C_Master_Stop 0001  
                  _start_time 007A                     i2_lcdInst 28E4                   ___ftdiv@exp 0016  
                 printf@width 00B1           ??i2_I2C_Master_Read 0002                     i2_isdigit 285C  
         ??i2_I2C_Master_Wait 0001           ??i2_I2C_Master_Stop 0002                   ___ftmul@exp 0016  
                _bottle_count 11DA                __end_of___ftge 21C4                __end_of___wmul 2772  
         __size_of_dec_to_hex 00FC          __size_ofi2_lcdNibble 004E                 i2lcdInst@data 0003  
                  floor@expon 0047              i2___wmul@product 0005                __end_of_printf 03E8  
                i2printf@flag 001D     __end_ofi2_I2C_Master_Read 27F0     __end_ofi2_I2C_Master_Wait 28B8  
                i2printf@prec 001A           start_initialization 2690     __end_ofi2_I2C_Master_Stop 291C  
                  eval_poly@d 002B                    eval_poly@n 002D                    eval_poly@x 0028  
           __size_ofi2___wmul 0026                    ldexp@value 0034                   __end_of_exp 0C6E  
                 __end_of_log 11DA                   __end_of_isr 075A                   __end_of_pow 0F90  
                   i2printf@c 0020                     i2printf@f 000D                 ??_bottle_time 00B4  
       i2I2C_Master_Read@temp 0003                    ?i2___lwdiv 0001                    ?i2___lwmod 0008  
           __size_ofi2_printf 032C                    frexp@value 0001             ??_I2C_Master_Init 00A1  
           ??_I2C_Master_Read 0091             ??_I2C_Master_Wait 0090                    ?i2_lcdInst 0001  
           ??_I2C_Master_Stop 0091    read_colorsensor@color_high 009B                    ?i2_isdigit 0001  
                    ??___ftge 0007                      ??___wmul 0094                   __pdataBANK0 00DF  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 00A6             __size_of___altoft 0078  
                  read_time@i 0004             __size_of___awtoft 0038             __size_of___ftpack 00AE  
           __size_of___lltoft 005C    __end_of_I2C_ColorSens_Init 1A2C                   __pbssCOMRAM 0076  
        __end_of_operationend 2892                 __pcstackBANK0 0080             i2___lwmod@divisor 000A  
           i2___lwmod@counter 000C                      ?i2_putch 0001           __end_of_bottle_time 273C  
            _I2C_Master_Start 290C           i2I2C_Master_Write@d 0002              _I2C_Master_Write 28F0  
                   _date_time 1A2C              ___lwdiv@dividend 0090             __CFG_CCP2MX$PORTC 000000  
                   __pintcode 0008                 __pmediumconst FDF4                     _lcdNibble 2402  
                    ?___awdiv 0001                      ?___ftadd 001C                      ?___awmod 0090  
                    ?___ftdiv 0009                      ?___ftneg 0001                      ?___lldiv 0090  
                    ?___ftmul 000D                      ?___ftsub 0028                      ?___fttol 0028  
                    ?___lwdiv 0090                      ?___lwmod 0097                      ?_lcdInst 0001  
            dec_to_hex@hexnum 006F                      ?_initLCD 0001                      ?_isdigit 0001  
            _read_colorsensor 0F90    __size_ofi2_I2C_Master_Read 0026    __size_ofi2_I2C_Master_Wait 0012  
                   _eval_poly 1AFE    __size_ofi2_I2C_Master_Stop 0008                     _hexpowers FE10  
                    ?_standby 0001              ___lwdiv@quotient 0094                __size_of_floor 00DE  
              __size_of_ldexp 00C6                __size_of_frexp 0090                  ??_dec_to_hex 0065  
                 ??i2___lwdiv 0005                   ??i2___lwmod 000C                     _read_time 2338  
              __size_of_putch 0010    __end_ofi2_I2C_Master_Start 2924    __end_ofi2_I2C_Master_Write 2904  
                 ??i2_lcdInst 0003                ___wmul@product 0094                      _LATAbits 000F89  
                    _LATCbits 000F8B                      _LATDbits 000F8C                   ??i2_isdigit 0001  
                  ?_date_time 0001                      i2u410_47 25D8                      i2u411_47 25E0  
                    i2u252_40 20F4                      i2u412_47 2600                      i2u245_40 1424  
                    i2u252_48 20F6                      i2u245_45 141C                      i2u413_47 2608  
                    i2u414_47 2042                      i2u327_40 0EC4                      i2u415_47 206C  
                    i2u344_40 27E8                      i2u265_40 17DE                      i2u409_47 0710  
                    i2u290_40 0B18                      i2u269_40 1CD0                      i2u269_48 1CD2  
                   _operation 1EC8                      i2u289_40 0B16              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001            __end_of_dec_to_hex 13DA    __end_ofi2_read_colorsensor 16B0  
           ___wmul@multiplier 0090                      i2___wmul 27F0                 lcdNibble@data 0091  
                  printf@flag 00B0                 lcdNibble@temp 0090                    printf@prec 00AD  
                  ?_eval_poly 0028                      i2_printf 075A                   _bottle_time 2706  
         I2C_Master_Read@temp 0092            _bottle_count_array 00B7                    ?_read_time 0001  
          dec_to_hex@quotient 0071              __size_ofi2_putch 000C                     frexp@eptr 0004  
                    __Hrparam 0000           i2read_colorsensor@i 0010                    ?_operation 0001  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000                   dec_to_hex@i 006D  
      __size_of_servo_rotate0 0090              __size_of___awdiv 0084              __size_of___ftadd 01AC  
            __size_of___awmod 00A2              __size_of___ftdiv 00E6              __size_of___ftneg 0024  
       i2___wmul@multiplicand 0003              __size_of___lldiv 00BC                      ___altoft 22C0  
            __size_of___ftmul 00F4              __size_of___ftsub 0040              __size_of___fttol 00F4  
            __size_of___lwdiv 0078              __size_of___lwmod 0062         __size_of_operationend 0018  
                    ___awtoft 26CE                      ___ftpack 1E1A                      ___lltoft 24C2  
                 _isdigit$791 0091            i2I2C_Master_Read@a 0002              __size_of_lcdInst 0010  
                    _exp$1234 004C               _I2C_Master_Init 2462               _I2C_Master_Read 2772  
            __size_of_initLCD 0050               _I2C_Master_Wait 2892                      _isr$1325 0074  
             _I2C_Master_Stop 2904              __size_of_isdigit 002A               ___lwdiv@divisor 0092  
             ___lwdiv@counter 0096                      __ptext10 11DA                      __ptext11 0012  
                    __ptext20 2462                      __ptext12 28B8                      __ptext21 1D5E  
                    __ptext13 27A0                      __ptext30 28D8                      __ptext22 1950  
                    __ptext14 273C                      __ptext31 285C                      __ptext23 28F0  
                    __ptext15 23A0                      __ptext40 291C                      __ptext32 260E  
                    __ptext24 2904                      __ptext16 2248                      __ptext41 27CA  
                    __ptext33 251E                      __ptext25 290C                      __ptext17 28C8  
                    __ptext50 13DA                      __ptext42 28A6                      __ptext34 28E4  
                    __ptext26 2892                      __ptext18 2402                      __ptext51 2134  
                    __ptext43 12DE                      __ptext35 25C0                      __ptext19 1F72  
                    __ptext60 26CE                      __ptext52 22C0                      __ptext44 0E1A  
                    __ptext36 2014                      __ptext28 15C2                      __ptext61 24C2  
                    __ptext53 1AFE                      __ptext45 10BC                      __ptext37 2338  
                    __ptext29 075A                      __ptext62 1E1A                      __ptext54 27F0  
                    __ptext46 0A86                      __ptext38 28FA                      __ptext63 21C4  
                    __ptext55 14CE                      __ptext47 1C98                      __ptext39 2914  
                    __ptext56 2650                      __ptext48 1796                      __ptext57 0C6E  
                    __ptext49 20A4                      __ptext58 2816                      __ptext59 16B0  
                    _end_time 0076              __size_of_standby 00C8                      _pow$1232 0058  
                    _pow$1233 005B        __size_of_emergencystop 0022                 __size_of_main 00DC  
             _dec_to_hex$1230 0065               _dec_to_hex$1231 0068                   ??_date_time 00B4  
                _operationend 287A                 ??i2_lcdNibble 0001                   ??_lcdNibble 0090  
                    _testflag 00DC                      int$flags 007E                     printf@idx 00AA  
                   printf@val 00AE                      exp@coeff FE1F                      log@coeff FE3D  
                   putch@data 0092      __end_of_I2C_Master_Start 2914      __end_of_I2C_Master_Write 28FA  
                  _INTCONbits 000FF2                   ??_eval_poly 002F                      isdigit@c 0092  
               _servo_rotate0 2014                   ??_read_time 0004                      intlevel2 0000  
            ___lwmod@dividend 0097              ___lldiv@dividend 0090            _I2C_ColorSens_Init 1950  
    __end_of_read_colorsensor 10BC                   ??_operation 00B4           ?_I2C_ColorSens_Init 0001  
                    printf@ap 00AB       __end_of_I2C_Master_Init 24C2       __end_of_I2C_Master_Read 27A0  
     __end_of_I2C_Master_Wait 28A6       __end_of_I2C_Master_Stop 290C                   lcdInst@data 0092  
               _emergencystop 283A           __end_ofi2_lcdNibble 260E              ___lldiv@quotient 0098  
           I2C_Master_Write@d 0091               ___lwmod@divisor 0099   i2read_colorsensor@color_low 0008  
             ___lwmod@counter 009B          ??_I2C_ColorSens_Init 0093                ?_servo_rotate0 0001  

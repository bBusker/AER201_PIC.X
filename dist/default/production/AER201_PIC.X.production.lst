

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 28 03:45:54 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    84                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    85  0000                     
    86                           ; Version 1.40
    87                           ; Generated 01/12/2016 GMT
    88                           ; 
    89                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    90                           ; All rights reserved.
    91                           ; 
    92                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    93                           ; 
    94                           ; Redistribution and use in source and binary forms, with or without modification, are
    95                           ; permitted provided that the following conditions are met:
    96                           ; 
    97                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    98                           ;        conditions and the following disclaimer.
    99                           ; 
   100                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   101                           ;        of conditions and the following disclaimer in the documentation and/or other
   102                           ;        materials provided with the distribution.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC18F4620 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     
   121                           	psect	idataBANK0
   122  002C40                     __pidataBANK0:
   123                           	opt stack 0
   124                           
   125                           ;initializer for _bottle_count_disp
   126  002C40  FFFF               	dw	65535
   127                           
   128                           	psect	mediumconst
   129  00FDD0                     __pmediumconst:
   130                           	opt stack 0
   131  00FDD0  00                 	db	0
   132  00FDD1                     _keys:
   133                           	opt stack 0
   134  00FDD1  31                 	db	49
   135  00FDD2  32                 	db	50
   136  00FDD3  33                 	db	51
   137  00FDD4  41                 	db	65
   138  00FDD5  34                 	db	52
   139  00FDD6  35                 	db	53
   140  00FDD7  36                 	db	54
   141  00FDD8  42                 	db	66
   142  00FDD9  37                 	db	55
   143  00FDDA  38                 	db	56
   144  00FDDB  39                 	db	57
   145  00FDDC  43                 	db	67
   146  00FDDD  2A                 	db	42
   147  00FDDE  30                 	db	48
   148  00FDDF  23                 	db	35
   149  00FDE0  44                 	db	68
   150  00FDE1  00                 	db	0
   151  00FDE2                     __end_of_keys:
   152                           	opt stack 0
   153  00FDE2                     _dpowers:
   154                           	opt stack 0
   155  00FDE2  0001               	dw	1
   156  00FDE4  000A               	dw	10
   157  00FDE6  0064               	dw	100
   158  00FDE8  03E8               	dw	1000
   159  00FDEA  2710               	dw	10000
   160  00FDEC                     __end_of_dpowers:
   161                           	opt stack 0
   162  00FDEC                     _hexpowers:
   163                           	opt stack 0
   164  00FDEC  0001               	dw	1
   165  00FDEE  0010               	dw	16
   166  00FDF0  0100               	dw	256
   167  00FDF2  1000               	dw	4096
   168  00FDF4                     __end_of_hexpowers:
   169                           	opt stack 0
   170  00FDF4                     _timeset:
   171                           	opt stack 0
   172  00FDF4  50                 	db	80
   173  00FDF5  35                 	db	53
   174  00FDF6  21                 	db	33
   175  00FDF7  08                 	db	8
   176  00FDF8  05                 	db	5
   177  00FDF9  02                 	db	2
   178  00FDFA  17                 	db	23
   179  00FDFB                     __end_of_timeset:
   180                           	opt stack 0
   181  00FDFB                     exp@coeff:
   182                           	opt stack 0
   183  00FDFB  00                 	db	0
   184  00FDFC  80                 	db	128
   185  00FDFD  3F                 	db	63
   186  00FDFE  72                 	db	114
   187  00FDFF  31                 	db	49
   188  00FE00  3F                 	db	63
   189  00FE01  FE                 	db	254
   190  00FE02  75                 	db	117
   191  00FE03  3E                 	db	62
   192  00FE04  58                 	db	88
   193  00FE05  63                 	db	99
   194  00FE06  3D                 	db	61
   195  00FE07  95                 	db	149
   196  00FE08  1D                 	db	29
   197  00FE09  3C                 	db	60
   198  00FE0A  C5                 	db	197
   199  00FE0B  AE                 	db	174
   200  00FE0C  3A                 	db	58
   201  00FE0D  79                 	db	121
   202  00FE0E  21                 	db	33
   203  00FE0F  39                 	db	57
   204  00FE10  94                 	db	148
   205  00FE11  80                 	db	128
   206  00FE12  37                 	db	55
   207  00FE13  93                 	db	147
   208  00FE14  A7                 	db	167
   209  00FE15  35                 	db	53
   210  00FE16  56                 	db	86
   211  00FE17  15                 	db	21
   212  00FE18  34                 	db	52
   213  00FE19                     __end_ofexp@coeff:
   214                           	opt stack 0
   215  00FE19                     log@coeff:
   216                           	opt stack 0
   217  00FE19  00                 	db	0
   218  00FE1A  00                 	db	0
   219  00FE1B  00                 	db	0
   220  00FE1C  00                 	db	0
   221  00FE1D  80                 	db	128
   222  00FE1E  3F                 	db	63
   223  00FE1F  F0                 	db	240
   224  00FE20  FF                 	db	255
   225  00FE21  BE                 	db	190
   226  00FE22  E2                 	db	226
   227  00FE23  A9                 	db	169
   228  00FE24  3E                 	db	62
   229  00FE25  83                 	db	131
   230  00FE26  76                 	db	118
   231  00FE27  BE                 	db	190
   232  00FE28  AE                 	db	174
   233  00FE29  2B                 	db	43
   234  00FE2A  3E                 	db	62
   235  00FE2B  3C                 	db	60
   236  00FE2C  C3                 	db	195
   237  00FE2D  BD                 	db	189
   238  00FE2E  D2                 	db	210
   239  00FE2F  13                 	db	19
   240  00FE30  3D                 	db	61
   241  00FE31  78                 	db	120
   242  00FE32  D3                 	db	211
   243  00FE33  BB                 	db	187
   244  00FE34                     __end_oflog@coeff:
   245                           	opt stack 0
   246  0000                     _TMR0	set	4054
   247  0000                     _ADCON0	set	4034
   248  0000                     _ADCON1	set	4033
   249  0000                     _INTCONbits	set	4082
   250  0000                     _LATA	set	3977
   251  0000                     _LATB	set	3978
   252  0000                     _LATC	set	3979
   253  0000                     _LATD	set	3980
   254  0000                     _LATDbits	set	3980
   255  0000                     _LATE	set	3981
   256  0000                     _PORTAbits	set	3968
   257  0000                     _PORTB	set	3969
   258  0000                     _PORTCbits	set	3970
   259  0000                     _SSPADD	set	4040
   260  0000                     _SSPBUF	set	4041
   261  0000                     _SSPCON1	set	4038
   262  0000                     _SSPCON2	set	4037
   263  0000                     _SSPSTAT	set	4039
   264  0000                     _TRISA	set	3986
   265  0000                     _TRISB	set	3987
   266  0000                     _TRISC	set	3988
   267  0000                     _TRISD	set	3989
   268  0000                     _TRISE	set	3990
   269  0000                     _ACKDT	set	32301
   270  0000                     _ACKEN	set	32300
   271  0000                     _INT0IE	set	32660
   272  0000                     _INT0IF	set	32657
   273  0000                     _INT1IE	set	32643
   274  0000                     _INT1IF	set	32640
   275  0000                     _INT2IE	set	32644
   276  0000                     _INT2IF	set	32641
   277  0000                     _PEN	set	32298
   278  0000                     _PSA	set	32427
   279  0000                     _RCEN	set	32299
   280  0000                     _RSEN	set	32297
   281  0000                     _SEN	set	32296
   282  0000                     _T08BIT	set	32430
   283  0000                     _T0CS	set	32429
   284  0000                     _T0PS0	set	32424
   285  0000                     _T0PS1	set	32425
   286  0000                     _T0PS2	set	32426
   287  0000                     _TMR0IE	set	32661
   288  0000                     _TMR0IF	set	32658
   289  0000                     _TMR0ON	set	32431
   290  0000                     _TRISC3	set	31907
   291  0000                     _TRISC4	set	31908
   292  0000                     _nRBPU	set	32655
   293  00FE34                     STR_21:
   294  00FE34  52                 	db	82	;'R'
   295  00FE35  75                 	db	117	;'u'
   296  00FE36  6E                 	db	110	;'n'
   297  00FE37  6E                 	db	110	;'n'
   298  00FE38  69                 	db	105	;'i'
   299  00FE39  6E                 	db	110	;'n'
   300  00FE3A  67                 	db	103	;'g'
   301  00FE3B  7E                 	db	126
   302  00FE3C  7E                 	db	126
   303  00FE3D  7E                 	db	126
   304  00FE3E  20                 	db	32
   305  00FE3F  20                 	db	32
   306  00FE40  20                 	db	32
   307  00FE41  20                 	db	32
   308  00FE42  20                 	db	32
   309  00FE43  20                 	db	32
   310  00FE44  20                 	db	32
   311  00FE45  20                 	db	32
   312  00FE46  20                 	db	32
   313  00FE47  20                 	db	32
   314  00FE48  20                 	db	32
   315  00FE49  20                 	db	32
   316  00FE4A  20                 	db	32
   317  00FE4B  20                 	db	32
   318  00FE4C  00                 	db	0
   319  00FE4D                     STR_20:
   320  00FE4D  52                 	db	82	;'R'
   321  00FE4E  75                 	db	117	;'u'
   322  00FE4F  6E                 	db	110	;'n'
   323  00FE50  6E                 	db	110	;'n'
   324  00FE51  69                 	db	105	;'i'
   325  00FE52  6E                 	db	110	;'n'
   326  00FE53  67                 	db	103	;'g'
   327  00FE54  7E                 	db	126
   328  00FE55  7E                 	db	126
   329  00FE56  20                 	db	32
   330  00FE57  20                 	db	32
   331  00FE58  20                 	db	32
   332  00FE59  20                 	db	32
   333  00FE5A  20                 	db	32
   334  00FE5B  20                 	db	32
   335  00FE5C  20                 	db	32
   336  00FE5D  20                 	db	32
   337  00FE5E  20                 	db	32
   338  00FE5F  20                 	db	32
   339  00FE60  20                 	db	32
   340  00FE61  20                 	db	32
   341  00FE62  20                 	db	32
   342  00FE63  20                 	db	32
   343  00FE64  00                 	db	0
   344  00FE65                     STR_19:
   345  00FE65  52                 	db	82	;'R'
   346  00FE66  75                 	db	117	;'u'
   347  00FE67  6E                 	db	110	;'n'
   348  00FE68  6E                 	db	110	;'n'
   349  00FE69  69                 	db	105	;'i'
   350  00FE6A  6E                 	db	110	;'n'
   351  00FE6B  67                 	db	103	;'g'
   352  00FE6C  7E                 	db	126
   353  00FE6D  20                 	db	32
   354  00FE6E  20                 	db	32
   355  00FE6F  20                 	db	32
   356  00FE70  20                 	db	32
   357  00FE71  20                 	db	32
   358  00FE72  20                 	db	32
   359  00FE73  20                 	db	32
   360  00FE74  20                 	db	32
   361  00FE75  20                 	db	32
   362  00FE76  20                 	db	32
   363  00FE77  20                 	db	32
   364  00FE78  20                 	db	32
   365  00FE79  20                 	db	32
   366  00FE7A  20                 	db	32
   367  00FE7B  00                 	db	0
   368  00FE7C                     STR_17:
   369  00FE7C  54                 	db	84	;'T'
   370  00FE7D  6F                 	db	111	;'o'
   371  00FE7E  74                 	db	116	;'t'
   372  00FE7F  61                 	db	97	;'a'
   373  00FE80  6C                 	db	108	;'l'
   374  00FE81  20                 	db	32
   375  00FE82  4F                 	db	79	;'O'
   376  00FE83  70                 	db	112	;'p'
   377  00FE84  65                 	db	101	;'e'
   378  00FE85  72                 	db	114	;'r'
   379  00FE86  61                 	db	97	;'a'
   380  00FE87  74                 	db	116	;'t'
   381  00FE88  69                 	db	105	;'i'
   382  00FE89  6F                 	db	111	;'o'
   383  00FE8A  6E                 	db	110	;'n'
   384  00FE8B  20                 	db	32
   385  00FE8C  20                 	db	32
   386  00FE8D  20                 	db	32
   387  00FE8E  20                 	db	32
   388  00FE8F  20                 	db	32
   389  00FE90  20                 	db	32
   390  00FE91  20                 	db	32
   391  00FE92  00                 	db	0
   392  00FE93                     STR_4:
   393  00FE93  44                 	db	68	;'D'
   394  00FE94  61                 	db	97	;'a'
   395  00FE95  74                 	db	116	;'t'
   396  00FE96  65                 	db	101	;'e'
   397  00FE97  3A                 	db	58	;':'
   398  00FE98  20                 	db	32
   399  00FE99  25                 	db	37
   400  00FE9A  30                 	db	48	;'0'
   401  00FE9B  32                 	db	50	;'2'
   402  00FE9C  78                 	db	120	;'x'
   403  00FE9D  2F                 	db	47
   404  00FE9E  25                 	db	37
   405  00FE9F  30                 	db	48	;'0'
   406  00FEA0  32                 	db	50	;'2'
   407  00FEA1  78                 	db	120	;'x'
   408  00FEA2  2F                 	db	47
   409  00FEA3  25                 	db	37
   410  00FEA4  30                 	db	48	;'0'
   411  00FEA5  32                 	db	50	;'2'
   412  00FEA6  78                 	db	120	;'x'
   413  00FEA7  20                 	db	32
   414  00FEA8  20                 	db	32
   415  00FEA9  00                 	db	0
   416  00FEAA                     STR_5:
   417  00FEAA  54                 	db	84	;'T'
   418  00FEAB  69                 	db	105	;'i'
   419  00FEAC  6D                 	db	109	;'m'
   420  00FEAD  65                 	db	101	;'e'
   421  00FEAE  3A                 	db	58	;':'
   422  00FEAF  20                 	db	32
   423  00FEB0  25                 	db	37
   424  00FEB1  30                 	db	48	;'0'
   425  00FEB2  32                 	db	50	;'2'
   426  00FEB3  78                 	db	120	;'x'
   427  00FEB4  3A                 	db	58	;':'
   428  00FEB5  25                 	db	37
   429  00FEB6  30                 	db	48	;'0'
   430  00FEB7  32                 	db	50	;'2'
   431  00FEB8  78                 	db	120	;'x'
   432  00FEB9  3A                 	db	58	;':'
   433  00FEBA  25                 	db	37
   434  00FEBB  30                 	db	48	;'0'
   435  00FEBC  32                 	db	50	;'2'
   436  00FEBD  78                 	db	120	;'x'
   437  00FEBE  20                 	db	32
   438  00FEBF  20                 	db	32
   439  00FEC0  00                 	db	0
   440  00FEC1                     STR_22:
   441  00FEC1  43                 	db	67	;'C'
   442  00FEC2  3A                 	db	58	;':'
   443  00FEC3  20                 	db	32
   444  00FEC4  25                 	db	37
   445  00FEC5  64                 	db	100	;'d'
   446  00FEC6  20                 	db	32
   447  00FEC7  20                 	db	32
   448  00FEC8  20                 	db	32
   449  00FEC9  20                 	db	32
   450  00FECA  20                 	db	32
   451  00FECB  20                 	db	32
   452  00FECC  20                 	db	32
   453  00FECD  20                 	db	32
   454  00FECE  20                 	db	32
   455  00FECF  20                 	db	32
   456  00FED0  20                 	db	32
   457  00FED1  20                 	db	32
   458  00FED2  20                 	db	32
   459  00FED3  20                 	db	32
   460  00FED4  20                 	db	32
   461  00FED5  20                 	db	32
   462  00FED6  00                 	db	0
   463  00FED7                     STR_18:
   464  00FED7  54                 	db	84	;'T'
   465  00FED8  69                 	db	105	;'i'
   466  00FED9  6D                 	db	109	;'m'
   467  00FEDA  65                 	db	101	;'e'
   468  00FEDB  3A                 	db	58	;':'
   469  00FEDC  20                 	db	32
   470  00FEDD  25                 	db	37
   471  00FEDE  64                 	db	100	;'d'
   472  00FEDF  20                 	db	32
   473  00FEE0  73                 	db	115	;'s'
   474  00FEE1  20                 	db	32
   475  00FEE2  20                 	db	32
   476  00FEE3  20                 	db	32
   477  00FEE4  20                 	db	32
   478  00FEE5  20                 	db	32
   479  00FEE6  20                 	db	32
   480  00FEE7  20                 	db	32
   481  00FEE8  00                 	db	0
   482  00FEE9                     STR_8:
   483  00FEE9  59                 	db	89	;'Y'
   484  00FEEA  4F                 	db	79	;'O'
   485  00FEEB  50                 	db	80	;'P'
   486  00FEEC  2B                 	db	43
   487  00FEED  43                 	db	67	;'C'
   488  00FEEE  41                 	db	65	;'A'
   489  00FEEF  50                 	db	80	;'P'
   490  00FEF0  2B                 	db	43
   491  00FEF1  4C                 	db	76	;'L'
   492  00FEF2  42                 	db	66	;'B'
   493  00FEF3  4C                 	db	76	;'L'
   494  00FEF4  3A                 	db	58	;':'
   495  00FEF5  20                 	db	32
   496  00FEF6  25                 	db	37
   497  00FEF7  64                 	db	100	;'d'
   498  00FEF8  20                 	db	32
   499  00FEF9  20                 	db	32
   500  00FEFA  00                 	db	0
   501  00FEFB                     STR_10:
   502  00FEFB  59                 	db	89	;'Y'
   503  00FEFC  4F                 	db	79	;'O'
   504  00FEFD  50                 	db	80	;'P'
   505  00FEFE  2D                 	db	45
   506  00FEFF  43                 	db	67	;'C'
   507  00FF00  41                 	db	65	;'A'
   508  00FF01  50                 	db	80	;'P'
   509  00FF02  2B                 	db	43
   510  00FF03  4C                 	db	76	;'L'
   511  00FF04  42                 	db	66	;'B'
   512  00FF05  4C                 	db	76	;'L'
   513  00FF06  3A                 	db	58	;':'
   514  00FF07  20                 	db	32
   515  00FF08  25                 	db	37
   516  00FF09  64                 	db	100	;'d'
   517  00FF0A  20                 	db	32
   518  00FF0B  20                 	db	32
   519  00FF0C  00                 	db	0
   520  00FF0D                     STR_9:
   521  00FF0D  59                 	db	89	;'Y'
   522  00FF0E  4F                 	db	79	;'O'
   523  00FF0F  50                 	db	80	;'P'
   524  00FF10  2B                 	db	43
   525  00FF11  43                 	db	67	;'C'
   526  00FF12  41                 	db	65	;'A'
   527  00FF13  50                 	db	80	;'P'
   528  00FF14  2D                 	db	45
   529  00FF15  4C                 	db	76	;'L'
   530  00FF16  42                 	db	66	;'B'
   531  00FF17  4C                 	db	76	;'L'
   532  00FF18  3A                 	db	58	;':'
   533  00FF19  20                 	db	32
   534  00FF1A  25                 	db	37
   535  00FF1B  64                 	db	100	;'d'
   536  00FF1C  20                 	db	32
   537  00FF1D  20                 	db	32
   538  00FF1E  00                 	db	0
   539  00FF1F                     STR_11:
   540  00FF1F  59                 	db	89	;'Y'
   541  00FF20  4F                 	db	79	;'O'
   542  00FF21  50                 	db	80	;'P'
   543  00FF22  2D                 	db	45
   544  00FF23  43                 	db	67	;'C'
   545  00FF24  41                 	db	65	;'A'
   546  00FF25  50                 	db	80	;'P'
   547  00FF26  2D                 	db	45
   548  00FF27  4C                 	db	76	;'L'
   549  00FF28  42                 	db	66	;'B'
   550  00FF29  4C                 	db	76	;'L'
   551  00FF2A  3A                 	db	58	;':'
   552  00FF2B  20                 	db	32
   553  00FF2C  25                 	db	37
   554  00FF2D  64                 	db	100	;'d'
   555  00FF2E  20                 	db	32
   556  00FF2F  20                 	db	32
   557  00FF30  00                 	db	0
   558  00FF31                     STR_12:
   559  00FF31  45                 	db	69	;'E'
   560  00FF32  53                 	db	83	;'S'
   561  00FF33  4B                 	db	75	;'K'
   562  00FF34  41                 	db	65	;'A'
   563  00FF35  2B                 	db	43
   564  00FF36  43                 	db	67	;'C'
   565  00FF37  41                 	db	65	;'A'
   566  00FF38  50                 	db	80	;'P'
   567  00FF39  2B                 	db	43
   568  00FF3A  4C                 	db	76	;'L'
   569  00FF3B  42                 	db	66	;'B'
   570  00FF3C  4C                 	db	76	;'L'
   571  00FF3D  3A                 	db	58	;':'
   572  00FF3E  20                 	db	32
   573  00FF3F  25                 	db	37
   574  00FF40  64                 	db	100	;'d'
   575  00FF41  20                 	db	32
   576  00FF42  00                 	db	0
   577  00FF43                     STR_14:
   578  00FF43  45                 	db	69	;'E'
   579  00FF44  53                 	db	83	;'S'
   580  00FF45  4B                 	db	75	;'K'
   581  00FF46  41                 	db	65	;'A'
   582  00FF47  2D                 	db	45
   583  00FF48  43                 	db	67	;'C'
   584  00FF49  41                 	db	65	;'A'
   585  00FF4A  50                 	db	80	;'P'
   586  00FF4B  2B                 	db	43
   587  00FF4C  4C                 	db	76	;'L'
   588  00FF4D  42                 	db	66	;'B'
   589  00FF4E  4C                 	db	76	;'L'
   590  00FF4F  3A                 	db	58	;':'
   591  00FF50  20                 	db	32
   592  00FF51  25                 	db	37
   593  00FF52  64                 	db	100	;'d'
   594  00FF53  20                 	db	32
   595  00FF54  00                 	db	0
   596  00FF55                     STR_13:
   597  00FF55  45                 	db	69	;'E'
   598  00FF56  53                 	db	83	;'S'
   599  00FF57  4B                 	db	75	;'K'
   600  00FF58  41                 	db	65	;'A'
   601  00FF59  2B                 	db	43
   602  00FF5A  43                 	db	67	;'C'
   603  00FF5B  41                 	db	65	;'A'
   604  00FF5C  50                 	db	80	;'P'
   605  00FF5D  2D                 	db	45
   606  00FF5E  4C                 	db	76	;'L'
   607  00FF5F  42                 	db	66	;'B'
   608  00FF60  4C                 	db	76	;'L'
   609  00FF61  3A                 	db	58	;':'
   610  00FF62  20                 	db	32
   611  00FF63  25                 	db	37
   612  00FF64  64                 	db	100	;'d'
   613  00FF65  20                 	db	32
   614  00FF66  00                 	db	0
   615  00FF67                     STR_15:
   616  00FF67  45                 	db	69	;'E'
   617  00FF68  53                 	db	83	;'S'
   618  00FF69  4B                 	db	75	;'K'
   619  00FF6A  41                 	db	65	;'A'
   620  00FF6B  2D                 	db	45
   621  00FF6C  43                 	db	67	;'C'
   622  00FF6D  41                 	db	65	;'A'
   623  00FF6E  50                 	db	80	;'P'
   624  00FF6F  2D                 	db	45
   625  00FF70  4C                 	db	76	;'L'
   626  00FF71  42                 	db	66	;'B'
   627  00FF72  4C                 	db	76	;'L'
   628  00FF73  3A                 	db	58	;':'
   629  00FF74  20                 	db	32
   630  00FF75  25                 	db	37
   631  00FF76  64                 	db	100	;'d'
   632  00FF77  20                 	db	32
   633  00FF78  00                 	db	0
   634  00FF79                     STR_25:
   635  00FF79  30                 	db	48	;'0'
   636  00FF7A  31                 	db	49	;'1'
   637  00FF7B  32                 	db	50	;'2'
   638  00FF7C  33                 	db	51	;'3'
   639  00FF7D  34                 	db	52	;'4'
   640  00FF7E  35                 	db	53	;'5'
   641  00FF7F  36                 	db	54	;'6'
   642  00FF80  37                 	db	55	;'7'
   643  00FF81  38                 	db	56	;'8'
   644  00FF82  39                 	db	57	;'9'
   645  00FF83  61                 	db	97	;'a'
   646  00FF84  62                 	db	98	;'b'
   647  00FF85  63                 	db	99	;'c'
   648  00FF86  64                 	db	100	;'d'
   649  00FF87  65                 	db	101	;'e'
   650  00FF88  66                 	db	102	;'f'
   651  00FF89  00                 	db	0
   652  00FF8A                     STR_2:
   653  00FF8A  73                 	db	115	;'s'
   654  00FF8B  74                 	db	116	;'t'
   655  00FF8C  61                 	db	97	;'a'
   656  00FF8D  6E                 	db	110	;'n'
   657  00FF8E  64                 	db	100	;'d'
   658  00FF8F  62                 	db	98	;'b'
   659  00FF90  79                 	db	121	;'y'
   660  00FF91  20                 	db	32
   661  00FF92  20                 	db	32
   662  00FF93  20                 	db	32
   663  00FF94  20                 	db	32
   664  00FF95  20                 	db	32
   665  00FF96  20                 	db	32
   666  00FF97  20                 	db	32
   667  00FF98  20                 	db	32
   668  00FF99  20                 	db	32
   669  00FF9A  00                 	db	0
   670  00FF9B                     STR_7:
   671  00FF9B  54                 	db	84	;'T'
   672  00FF9C  6F                 	db	111	;'o'
   673  00FF9D  74                 	db	116	;'t'
   674  00FF9E  61                 	db	97	;'a'
   675  00FF9F  6C                 	db	108	;'l'
   676  00FFA0  3A                 	db	58	;':'
   677  00FFA1  20                 	db	32
   678  00FFA2  25                 	db	37
   679  00FFA3  64                 	db	100	;'d'
   680  00FFA4  20                 	db	32
   681  00FFA5  20                 	db	32
   682  00FFA6  20                 	db	32
   683  00FFA7  20                 	db	32
   684  00FFA8  20                 	db	32
   685  00FFA9  20                 	db	32
   686  00FFAA  20                 	db	32
   687  00FFAB  00                 	db	0
   688  00FFAC                     STR_6:
   689  00FFAC  42                 	db	66	;'B'
   690  00FFAD  6F                 	db	111	;'o'
   691  00FFAE  74                 	db	116	;'t'
   692  00FFAF  74                 	db	116	;'t'
   693  00FFB0  6C                 	db	108	;'l'
   694  00FFB1  65                 	db	101	;'e'
   695  00FFB2  20                 	db	32
   696  00FFB3  43                 	db	67	;'C'
   697  00FFB4  6F                 	db	111	;'o'
   698  00FFB5  75                 	db	117	;'u'
   699  00FFB6  6E                 	db	110	;'n'
   700  00FFB7  74                 	db	116	;'t'
   701  00FFB8  20                 	db	32
   702  00FFB9  20                 	db	32
   703  00FFBA  20                 	db	32
   704  00FFBB  20                 	db	32
   705  00FFBC  00                 	db	0
   706  00FFBD                     STR_23:
   707  00FFBD  4F                 	db	79	;'O'
   708  00FFBE  70                 	db	112	;'p'
   709  00FFBF  65                 	db	101	;'e'
   710  00FFC0  72                 	db	114	;'r'
   711  00FFC1  61                 	db	97	;'a'
   712  00FFC2  74                 	db	116	;'t'
   713  00FFC3  69                 	db	105	;'i'
   714  00FFC4  6F                 	db	111	;'o'
   715  00FFC5  6E                 	db	110	;'n'
   716  00FFC6  20                 	db	32
   717  00FFC7  44                 	db	68	;'D'
   718  00FFC8  6F                 	db	111	;'o'
   719  00FFC9  6E                 	db	110	;'n'
   720  00FFCA  65                 	db	101	;'e'
   721  00FFCB  21                 	db	33
   722  00FFCC  00                 	db	0
   723  00FFCD                     STR_24:
   724  00FFCD  45                 	db	69	;'E'
   725  00FFCE  4D                 	db	77	;'M'
   726  00FFCF  45                 	db	69	;'E'
   727  00FFD0  52                 	db	82	;'R'
   728  00FFD1  47                 	db	71	;'G'
   729  00FFD2  45                 	db	69	;'E'
   730  00FFD3  4E                 	db	78	;'N'
   731  00FFD4  43                 	db	67	;'C'
   732  00FFD5  59                 	db	89	;'Y'
   733  00FFD6  20                 	db	32
   734  00FFD7  53                 	db	83	;'S'
   735  00FFD8  54                 	db	84	;'T'
   736  00FFD9  4F                 	db	79	;'O'
   737  00FFDA  50                 	db	80	;'P'
   738  00FFDB  00                 	db	0
   739  00FFDC                     STR_1:
   740  00FFDC  62                 	db	98	;'b'
   741  00FFDD  61                 	db	97	;'a'
   742  00FFDE  64                 	db	100	;'d'
   743  00FFDF  20                 	db	32
   744  00FFE0  69                 	db	105	;'i'
   745  00FFE1  6E                 	db	110	;'n'
   746  00FFE2  74                 	db	116	;'t'
   747  00FFE3  65                 	db	101	;'e'
   748  00FFE4  72                 	db	114	;'r'
   749  00FFE5  72                 	db	114	;'r'
   750  00FFE6  75                 	db	117	;'u'
   751  00FFE7  70                 	db	112	;'p'
   752  00FFE8  74                 	db	116	;'t'
   753  00FFE9  00                 	db	0
   754  00FFEA                     STR_3:
   755  00FFEA  50                 	db	80	;'P'
   756  00FFEB  4F                 	db	79	;'O'
   757  00FFEC  52                 	db	82	;'R'
   758  00FFED  54                 	db	84	;'T'
   759  00FFEE  42                 	db	66	;'B'
   760  00FFEF  3A                 	db	58	;':'
   761  00FFF0  20                 	db	32
   762  00FFF1  25                 	db	37
   763  00FFF2  64                 	db	100	;'d'
   764  00FFF3  00                 	db	0
   765  00FFF4                     STR_16:
   766  00FFF4  45                 	db	69	;'E'
   767  00FFF5  52                 	db	82	;'R'
   768  00FFF6  52                 	db	82	;'R'
   769  00FFF7  4F                 	db	79	;'O'
   770  00FFF8  52                 	db	82	;'R'
   771  00FFF9  3A                 	db	58	;':'
   772  00FFFA  20                 	db	32
   773  00FFFB  25                 	db	37
   774  00FFFC  64                 	db	100	;'d'
   775  00FFFD  00                 	db	0
   776                           
   777                           ; #config settings
   778  00FFFE  00                 	db	0	; dummy byte at the end
   779  0000                     
   780                           	psect	cinit
   781  002942                     __pcinit:
   782                           	opt stack 0
   783  002942                     start_initialization:
   784                           	opt stack 0
   785  002942                     __initialization:
   786                           	opt stack 0
   787                           
   788                           ; Initialize objects allocated to BANK0 (2 bytes)
   789                           ; load TBLPTR registers with __pidataBANK0
   790  002942  0E40               	movlw	low __pidataBANK0
   791  002944  6EF6               	movwf	tblptrl,c
   792  002946  0E2C               	movlw	high __pidataBANK0
   793  002948  6EF7               	movwf	tblptrh,c
   794  00294A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   795  00294C  6EF8               	movwf	tblptru,c
   796  00294E  0009               	tblrd		*+	;fetch initializer
   797  002950  CFF5 F0EE          	movff	tablat,__pdataBANK0
   798  002954  0009               	tblrd		*+	;fetch initializer
   799  002956  CFF5 F0EF          	movff	tablat,__pdataBANK0+1
   800                           
   801                           ; Clear objects allocated to BANK0 (68 bytes)
   802  00295A  EE00  F080         	lfsr	0,__pbssBANK0
   803  00295E  0E44               	movlw	68
   804  002960                     clear_0:
   805  002960  6AEE               	clrf	postinc0,c
   806  002962  06E8               	decf	wreg,f,c
   807  002964  E1FD               	bnz	clear_0
   808                           
   809                           ; Clear objects allocated to COMRAM (8 bytes)
   810  002966  EE00  F076         	lfsr	0,__pbssCOMRAM
   811  00296A  0E08               	movlw	8
   812  00296C                     clear_1:
   813  00296C  6AEE               	clrf	postinc0,c
   814  00296E  06E8               	decf	wreg,f,c
   815  002970  E1FD               	bnz	clear_1
   816  002972                     end_of_initialization:
   817                           	opt stack 0
   818  002972                     __end_of__initialization:
   819                           	opt stack 0
   820  002972  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   821  002974  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   822  002976  0E00               	movlw	low (__Lmediumconst shr (0+16))
   823  002978  6EF8               	movwf	tblptru,c
   824  00297A  0100               	movlb	0
   825  00297C  EF52  F00C         	goto	_main	;jump to C main() function
   826                           tblptru	equ	0xFF8
   827                           tblptrh	equ	0xFF7
   828                           tblptrl	equ	0xFF6
   829                           tablat	equ	0xFF5
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           
   833                           	psect	bssCOMRAM
   834  000076                     __pbssCOMRAM:
   835                           	opt stack 0
   836  000076                     _bottlequeue_tail:
   837                           	opt stack 0
   838  000076                     	ds	2
   839  000078                     _end_time:
   840                           	opt stack 0
   841  000078                     	ds	2
   842  00007A                     _start_time:
   843                           	opt stack 0
   844  00007A                     	ds	2
   845  00007C                     _stime:
   846                           	opt stack 0
   847  00007C                     	ds	2
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           postinc0	equ	0xFEE
   853                           wreg	equ	0xFE8
   854                           
   855                           	psect	bssBANK0
   856  000080                     __pbssBANK0:
   857                           	opt stack 0
   858  000080                     _bottlequeue:
   859                           	opt stack 0
   860  000080                     	ds	22
   861  000096                     _color:
   862                           	opt stack 0
   863  000096                     	ds	8
   864  00009E                     _time:
   865                           	opt stack 0
   866  00009E                     	ds	7
   867  0000A5                     _bottlequeue_head:
   868                           	opt stack 0
   869  0000A5                     	ds	2
   870  0000A7                     _errno:
   871                           	opt stack 0
   872  0000A7                     	ds	2
   873  0000A9                     _eska_count:
   874                           	opt stack 0
   875  0000A9                     	ds	2
   876  0000AB                     _eskacap_count:
   877                           	opt stack 0
   878  0000AB                     	ds	2
   879  0000AD                     _eskacaplbl_count:
   880                           	opt stack 0
   881  0000AD                     	ds	2
   882  0000AF                     _eskalbl_count:
   883                           	opt stack 0
   884  0000AF                     	ds	2
   885  0000B1                     _etime:
   886                           	opt stack 0
   887  0000B1                     	ds	2
   888  0000B3                     _nodedata:
   889                           	opt stack 0
   890  0000B3                     	ds	2
   891  0000B5                     _operation_disp:
   892                           	opt stack 0
   893  0000B5                     	ds	2
   894  0000B7                     _operation_time:
   895                           	opt stack 0
   896  0000B7                     	ds	2
   897  0000B9                     _total_bottle_count:
   898                           	opt stack 0
   899  0000B9                     	ds	2
   900  0000BB                     _yop_count:
   901                           	opt stack 0
   902  0000BB                     	ds	2
   903  0000BD                     _yopcap_count:
   904                           	opt stack 0
   905  0000BD                     	ds	2
   906  0000BF                     _yopcaplbl_count:
   907                           	opt stack 0
   908  0000BF                     	ds	2
   909  0000C1                     _yoplbl_count:
   910                           	opt stack 0
   911  0000C1                     	ds	2
   912  0000C3                     _curr_state:
   913                           	opt stack 0
   914  0000C3                     	ds	1
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           
   922                           	psect	dataBANK0
   923  0000EE                     __pdataBANK0:
   924                           	opt stack 0
   925  0000EE                     _bottle_count_disp:
   926                           	opt stack 0
   927  0000EE                     	ds	2
   928                           tblptru	equ	0xFF8
   929                           tblptrh	equ	0xFF7
   930                           tblptrl	equ	0xFF6
   931                           tablat	equ	0xFF5
   932                           postinc0	equ	0xFEE
   933                           wreg	equ	0xFE8
   934                           
   935                           	psect	cstackBANK1
   936  000100                     __pcstackBANK1:
   937                           	opt stack 0
   938  000100                     printf@idx:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x0
   942  000100                     	ds	1
   943  000101                     printf@ap:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x1
   947  000101                     	ds	2
   948  000103                     printf@prec:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x3
   952  000103                     	ds	1
   953  000104                     printf@val:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x4
   957  000104                     	ds	2
   958  000106                     printf@flag:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x6
   962  000106                     	ds	1
   963  000107                     printf@width:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x7
   967  000107                     	ds	2
   968  000109                     printf@c:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x9
   972  000109                     	ds	1
   973  00010A                     ??_main:
   974                           
   975                           ; 1 bytes @ 0xA
   976  00010A                     	ds	2
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           postinc0	equ	0xFEE
   982                           wreg	equ	0xFE8
   983                           
   984                           	psect	cstackBANK0
   985  0000C4                     __pcstackBANK0:
   986                           	opt stack 0
   987  0000C4                     ??_isr:
   988                           
   989                           ; 1 bytes @ 0x0
   990  0000C4                     	ds	16
   991  0000D4                     ??_isdigit:
   992  0000D4                     ??_I2C_Master_Wait:
   993  0000D4                     ?___wmul:
   994                           	opt stack 0
   995  0000D4                     ?___awmod:
   996                           	opt stack 0
   997  0000D4                     ?___lwdiv:
   998                           	opt stack 0
   999  0000D4                     ?___lldiv:
  1000                           	opt stack 0
  1001  0000D4                     lcdNibble@temp:
  1002                           	opt stack 0
  1003  0000D4                     ___wmul@multiplier:
  1004                           	opt stack 0
  1005  0000D4                     ___awmod@dividend:
  1006                           	opt stack 0
  1007  0000D4                     ___lwdiv@dividend:
  1008                           	opt stack 0
  1009  0000D4                     ___lldiv@dividend:
  1010                           	opt stack 0
  1011                           
  1012                           ; 4 bytes @ 0x10
  1013  0000D4                     	ds	1
  1014  0000D5                     I2C_Master_Read@a:
  1015                           	opt stack 0
  1016  0000D5                     lcdNibble@data:
  1017                           	opt stack 0
  1018  0000D5                     _isdigit$808:
  1019                           	opt stack 0
  1020  0000D5                     I2C_Master_Write@d:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x11
  1024  0000D5                     	ds	1
  1025  0000D6                     I2C_Master_Read@temp:
  1026                           	opt stack 0
  1027  0000D6                     lcdInst@data:
  1028                           	opt stack 0
  1029  0000D6                     putch@data:
  1030                           	opt stack 0
  1031  0000D6                     isdigit@c:
  1032                           	opt stack 0
  1033  0000D6                     ___wmul@multiplicand:
  1034                           	opt stack 0
  1035  0000D6                     ___awmod@divisor:
  1036                           	opt stack 0
  1037  0000D6                     ___lwdiv@divisor:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0x12
  1041  0000D6                     	ds	1
  1042  0000D7                     ??_read_colorsensor:
  1043  0000D7                     ??_initLCD:
  1044                           
  1045                           ; 1 bytes @ 0x13
  1046  0000D7                     	ds	1
  1047  0000D8                     ___awmod@counter:
  1048                           	opt stack 0
  1049  0000D8                     ___lwdiv@counter:
  1050                           	opt stack 0
  1051  0000D8                     ___wmul@product:
  1052                           	opt stack 0
  1053  0000D8                     ___lldiv@divisor:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x14
  1057  0000D8                     	ds	1
  1058  0000D9                     ___awmod@sign:
  1059                           	opt stack 0
  1060  0000D9                     read_colorsensor@color_low:
  1061                           	opt stack 0
  1062  0000D9                     ___lwdiv@quotient:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x15
  1066  0000D9                     	ds	2
  1067  0000DB                     ?___lwmod:
  1068                           	opt stack 0
  1069  0000DB                     read_colorsensor@color_high:
  1070                           	opt stack 0
  1071  0000DB                     ___lwmod@dividend:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x17
  1075  0000DB                     	ds	1
  1076  0000DC                     ___lldiv@quotient:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x18
  1080  0000DC                     	ds	1
  1081  0000DD                     read_colorsensor@color_comb:
  1082                           	opt stack 0
  1083  0000DD                     ___lwmod@divisor:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x19
  1087  0000DD                     	ds	2
  1088  0000DF                     ___lwmod@counter:
  1089                           	opt stack 0
  1090  0000DF                     read_colorsensor@i:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x1B
  1094  0000DF                     	ds	1
  1095  0000E0                     ?_printf:
  1096                           	opt stack 0
  1097  0000E0                     ___lldiv@counter:
  1098                           	opt stack 0
  1099  0000E0                     printf@f:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x1C
  1103  0000E0                     	ds	1
  1104  0000E1                     I2C_Master_Init@c:
  1105                           	opt stack 0
  1106                           
  1107                           ; 4 bytes @ 0x1D
  1108  0000E1                     	ds	4
  1109  0000E5                     ??_I2C_Master_Init:
  1110                           
  1111                           ; 1 bytes @ 0x21
  1112  0000E5                     	ds	3
  1113  0000E8                     ??_printf:
  1114                           
  1115                           ; 1 bytes @ 0x24
  1116  0000E8                     	ds	4
  1117  0000EC                     ??_operation:
  1118  0000EC                     date_time@i:
  1119                           	opt stack 0
  1120  0000EC                     bottle_time@time:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x28
  1124  0000EC                     	ds	2
  1125  0000EE                     tblptru	equ	0xFF8
  1126                           tblptrh	equ	0xFF7
  1127                           tblptrl	equ	0xFF6
  1128                           tablat	equ	0xFF5
  1129                           postinc0	equ	0xFEE
  1130                           wreg	equ	0xFE8
  1131                           
  1132                           ; 1 bytes @ 0x2A
  1133                           
  1134                           	psect	cstackCOMRAM
  1135  000001                     __pcstackCOMRAM:
  1136                           	opt stack 0
  1137  000001                     ??i2_I2C_Master_Wait:
  1138  000001                     ??i2_isdigit:
  1139  000001                     ?i2___wmul:
  1140                           	opt stack 0
  1141  000001                     ?i2___lwdiv:
  1142                           	opt stack 0
  1143  000001                     ?___ftpack:
  1144                           	opt stack 0
  1145  000001                     ?_frexp:
  1146                           	opt stack 0
  1147  000001                     ?___ftneg:
  1148                           	opt stack 0
  1149  000001                     i2lcdNibble@temp:
  1150                           	opt stack 0
  1151  000001                     i2___wmul@multiplier:
  1152                           	opt stack 0
  1153  000001                     i2___lwdiv@dividend:
  1154                           	opt stack 0
  1155  000001                     ___ftpack@arg:
  1156                           	opt stack 0
  1157  000001                     ___ftge@ff1:
  1158                           	opt stack 0
  1159  000001                     ___ftneg@f1:
  1160                           	opt stack 0
  1161  000001                     frexp@value:
  1162                           	opt stack 0
  1163                           
  1164                           ; 3 bytes @ 0x0
  1165  000001                     	ds	1
  1166  000002                     i2I2C_Master_Read@a:
  1167                           	opt stack 0
  1168  000002                     i2lcdNibble@data:
  1169                           	opt stack 0
  1170  000002                     i2_isdigit$808:
  1171                           	opt stack 0
  1172  000002                     i2I2C_Master_Write@d:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x1
  1176  000002                     	ds	1
  1177  000003                     i2I2C_Master_Read@temp:
  1178                           	opt stack 0
  1179  000003                     i2lcdInst@data:
  1180                           	opt stack 0
  1181  000003                     i2putch@data:
  1182                           	opt stack 0
  1183  000003                     i2isdigit@c:
  1184                           	opt stack 0
  1185  000003                     i2___wmul@multiplicand:
  1186                           	opt stack 0
  1187  000003                     i2___lwdiv@divisor:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x2
  1191  000003                     	ds	1
  1192  000004                     ??i2_read_colorsensor:
  1193  000004                     read_time@i:
  1194                           	opt stack 0
  1195  000004                     ___ftpack@exp:
  1196                           	opt stack 0
  1197  000004                     frexp@eptr:
  1198                           	opt stack 0
  1199  000004                     ___ftge@ff2:
  1200                           	opt stack 0
  1201                           
  1202                           ; 3 bytes @ 0x3
  1203  000004                     	ds	1
  1204  000005                     ___ftpack@sign:
  1205                           	opt stack 0
  1206  000005                     i2___wmul@product:
  1207                           	opt stack 0
  1208  000005                     i2___lwdiv@quotient:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x4
  1212  000005                     	ds	1
  1213  000006                     ??___ftpack:
  1214  000006                     ??_frexp:
  1215  000006                     i2read_colorsensor@color_low:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x5
  1219  000006                     	ds	1
  1220  000007                     ??___ftge:
  1221  000007                     ?___awdiv:
  1222                           	opt stack 0
  1223  000007                     i2___lwdiv@counter:
  1224                           	opt stack 0
  1225  000007                     ___awdiv@dividend:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x6
  1229  000007                     	ds	1
  1230  000008                     ?i2___lwmod:
  1231                           	opt stack 0
  1232  000008                     i2read_colorsensor@color_high:
  1233                           	opt stack 0
  1234  000008                     i2___lwmod@dividend:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x7
  1238  000008                     	ds	1
  1239  000009                     ?___ftdiv:
  1240                           	opt stack 0
  1241  000009                     ?___awtoft:
  1242                           	opt stack 0
  1243  000009                     ?___lltoft:
  1244                           	opt stack 0
  1245  000009                     ___awdiv@divisor:
  1246                           	opt stack 0
  1247  000009                     ___awtoft@c:
  1248                           	opt stack 0
  1249  000009                     ___ftdiv@f1:
  1250                           	opt stack 0
  1251  000009                     ___lltoft@c:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x8
  1255  000009                     	ds	1
  1256  00000A                     i2read_colorsensor@color_comb:
  1257                           	opt stack 0
  1258  00000A                     i2___lwmod@divisor:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x9
  1262  00000A                     	ds	1
  1263  00000B                     ___awdiv@counter:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0xA
  1267  00000B                     	ds	1
  1268  00000C                     ___awdiv@sign:
  1269                           	opt stack 0
  1270  00000C                     ___awtoft@sign:
  1271                           	opt stack 0
  1272  00000C                     i2___lwmod@counter:
  1273                           	opt stack 0
  1274  00000C                     i2read_colorsensor@i:
  1275                           	opt stack 0
  1276  00000C                     ___ftdiv@f2:
  1277                           	opt stack 0
  1278                           
  1279                           ; 3 bytes @ 0xB
  1280  00000C                     	ds	1
  1281  00000D                     ??___lltoft:
  1282  00000D                     ?i2_printf:
  1283                           	opt stack 0
  1284  00000D                     ?___ftmul:
  1285                           	opt stack 0
  1286  00000D                     ___awdiv@quotient:
  1287                           	opt stack 0
  1288  00000D                     i2printf@f:
  1289                           	opt stack 0
  1290  00000D                     ___ftmul@f1:
  1291                           	opt stack 0
  1292                           
  1293                           ; 3 bytes @ 0xC
  1294  00000D                     	ds	2
  1295  00000F                     ??___ftdiv:
  1296  00000F                     ??i2_printf:
  1297  00000F                     servo_rotate0@degree:
  1298                           	opt stack 0
  1299  00000F                     servo_rotate1@degree:
  1300                           	opt stack 0
  1301  00000F                     servo_rotate2@degree:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0xE
  1305  00000F                     	ds	1
  1306  000010                     ___ftmul@f2:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0xF
  1310  000010                     	ds	1
  1311  000011                     ??_servo_rotate0:
  1312  000011                     ??_servo_rotate2:
  1313  000011                     ??_servo_rotate1:
  1314  000011                     ___lltoft@exp:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x10
  1318  000011                     	ds	1
  1319  000012                     ___ftdiv@cntr:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x11
  1323  000012                     	ds	1
  1324  000013                     ??___ftmul:
  1325  000013                     i2printf@idx:
  1326                           	opt stack 0
  1327  000013                     servo_rotate0@duty:
  1328                           	opt stack 0
  1329  000013                     servo_rotate1@duty:
  1330                           	opt stack 0
  1331  000013                     servo_rotate2@duty:
  1332                           	opt stack 0
  1333  000013                     ___ftdiv@f3:
  1334                           	opt stack 0
  1335                           
  1336                           ; 3 bytes @ 0x12
  1337  000013                     	ds	1
  1338  000014                     i2printf@ap:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x13
  1342  000014                     	ds	1
  1343  000015                     servo_rotate0@i:
  1344                           	opt stack 0
  1345  000015                     servo_rotate1@i:
  1346                           	opt stack 0
  1347  000015                     servo_rotate2@i:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x14
  1351  000015                     	ds	1
  1352  000016                     ___ftdiv@exp:
  1353                           	opt stack 0
  1354  000016                     ___ftmul@exp:
  1355                           	opt stack 0
  1356  000016                     i2printf@prec:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x15
  1360  000016                     	ds	1
  1361  000017                     ___ftdiv@sign:
  1362                           	opt stack 0
  1363  000017                     servo_rotate0@j:
  1364                           	opt stack 0
  1365  000017                     servo_rotate1@j:
  1366                           	opt stack 0
  1367  000017                     servo_rotate2@j:
  1368                           	opt stack 0
  1369  000017                     i2printf@val:
  1370                           	opt stack 0
  1371  000017                     ___ftmul@f3_as_product:
  1372                           	opt stack 0
  1373                           
  1374                           ; 3 bytes @ 0x16
  1375  000017                     	ds	2
  1376  000019                     i2printf@flag:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x18
  1380  000019                     	ds	1
  1381  00001A                     ___ftmul@cntr:
  1382                           	opt stack 0
  1383  00001A                     i2printf@width:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x19
  1387  00001A                     	ds	1
  1388  00001B                     ___ftmul@sign:
  1389                           	opt stack 0
  1390                           
  1391                           ; 1 bytes @ 0x1A
  1392  00001B                     	ds	1
  1393  00001C                     ?___ftadd:
  1394                           	opt stack 0
  1395  00001C                     i2printf@c:
  1396                           	opt stack 0
  1397  00001C                     ___ftadd@f1:
  1398                           	opt stack 0
  1399                           
  1400                           ; 3 bytes @ 0x1B
  1401  00001C                     	ds	3
  1402  00001F                     ___ftadd@f2:
  1403                           	opt stack 0
  1404                           
  1405                           ; 3 bytes @ 0x1E
  1406  00001F                     	ds	3
  1407  000022                     ??___ftadd:
  1408                           
  1409                           ; 1 bytes @ 0x21
  1410  000022                     	ds	3
  1411  000025                     ___ftadd@sign:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x24
  1415  000025                     	ds	1
  1416  000026                     ___ftadd@exp2:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x25
  1420  000026                     	ds	1
  1421  000027                     ___ftadd@exp1:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x26
  1425  000027                     	ds	1
  1426  000028                     ?___ftsub:
  1427                           	opt stack 0
  1428  000028                     ?_eval_poly:
  1429                           	opt stack 0
  1430  000028                     ?___fttol:
  1431                           	opt stack 0
  1432  000028                     ___ftsub@f1:
  1433                           	opt stack 0
  1434  000028                     ___fttol@f1:
  1435                           	opt stack 0
  1436  000028                     eval_poly@x:
  1437                           	opt stack 0
  1438                           
  1439                           ; 3 bytes @ 0x27
  1440  000028                     	ds	3
  1441  00002B                     eval_poly@d:
  1442                           	opt stack 0
  1443  00002B                     ___ftsub@f2:
  1444                           	opt stack 0
  1445                           
  1446                           ; 3 bytes @ 0x2A
  1447  00002B                     	ds	1
  1448  00002C                     ??___fttol:
  1449                           
  1450                           ; 1 bytes @ 0x2B
  1451  00002C                     	ds	1
  1452  00002D                     eval_poly@n:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x2C
  1456  00002D                     	ds	1
  1457  00002E                     
  1458                           ; 1 bytes @ 0x2D
  1459  00002E                     	ds	1
  1460  00002F                     ??_eval_poly:
  1461                           
  1462                           ; 1 bytes @ 0x2E
  1463  00002F                     	ds	2
  1464  000031                     ___fttol@sign1:
  1465                           	opt stack 0
  1466  000031                     eval_poly@res:
  1467                           	opt stack 0
  1468                           
  1469                           ; 3 bytes @ 0x30
  1470  000031                     	ds	1
  1471  000032                     ___fttol@lval:
  1472                           	opt stack 0
  1473                           
  1474                           ; 4 bytes @ 0x31
  1475  000032                     	ds	2
  1476  000034                     ?_log:
  1477                           	opt stack 0
  1478  000034                     ?_ldexp:
  1479                           	opt stack 0
  1480  000034                     ldexp@value:
  1481                           	opt stack 0
  1482  000034                     log@x:
  1483                           	opt stack 0
  1484                           
  1485                           ; 3 bytes @ 0x33
  1486  000034                     	ds	2
  1487  000036                     ___fttol@exp1:
  1488                           	opt stack 0
  1489                           
  1490                           ; 1 bytes @ 0x35
  1491  000036                     	ds	1
  1492  000037                     ?___altoft:
  1493                           	opt stack 0
  1494  000037                     ldexp@newexp:
  1495                           	opt stack 0
  1496  000037                     log@exponent:
  1497                           	opt stack 0
  1498  000037                     ___altoft@c:
  1499                           	opt stack 0
  1500                           
  1501                           ; 4 bytes @ 0x36
  1502  000037                     	ds	2
  1503  000039                     ??_ldexp:
  1504                           
  1505                           ; 1 bytes @ 0x38
  1506  000039                     	ds	2
  1507  00003B                     ??___altoft:
  1508                           
  1509                           ; 1 bytes @ 0x3A
  1510  00003B                     	ds	4
  1511  00003F                     ___altoft@exp:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0x3E
  1515  00003F                     	ds	1
  1516  000040                     ___altoft@sign:
  1517                           	opt stack 0
  1518                           
  1519                           ; 1 bytes @ 0x3F
  1520  000040                     	ds	1
  1521  000041                     ?_floor:
  1522                           	opt stack 0
  1523  000041                     floor@x:
  1524                           	opt stack 0
  1525                           
  1526                           ; 3 bytes @ 0x40
  1527  000041                     	ds	3
  1528  000044                     floor@i:
  1529                           	opt stack 0
  1530                           
  1531                           ; 3 bytes @ 0x43
  1532  000044                     	ds	3
  1533  000047                     floor@expon:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x46
  1537  000047                     	ds	2
  1538  000049                     ?_exp:
  1539                           	opt stack 0
  1540  000049                     exp@x:
  1541                           	opt stack 0
  1542                           
  1543                           ; 3 bytes @ 0x48
  1544  000049                     	ds	3
  1545  00004C                     _exp$1248:
  1546                           	opt stack 0
  1547                           
  1548                           ; 3 bytes @ 0x4B
  1549  00004C                     	ds	3
  1550  00004F                     exp@exponent:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x4E
  1554  00004F                     	ds	2
  1555  000051                     exp@sign:
  1556                           	opt stack 0
  1557                           
  1558                           ; 1 bytes @ 0x50
  1559  000051                     	ds	1
  1560  000052                     ?_pow:
  1561                           	opt stack 0
  1562  000052                     pow@x:
  1563                           	opt stack 0
  1564                           
  1565                           ; 3 bytes @ 0x51
  1566  000052                     	ds	3
  1567  000055                     pow@y:
  1568                           	opt stack 0
  1569                           
  1570                           ; 3 bytes @ 0x54
  1571  000055                     	ds	3
  1572  000058                     _pow$1246:
  1573                           	opt stack 0
  1574                           
  1575                           ; 3 bytes @ 0x57
  1576  000058                     	ds	3
  1577  00005B                     _pow$1247:
  1578                           	opt stack 0
  1579                           
  1580                           ; 3 bytes @ 0x5A
  1581  00005B                     	ds	3
  1582  00005E                     pow@sign:
  1583                           	opt stack 0
  1584                           
  1585                           ; 1 bytes @ 0x5D
  1586  00005E                     	ds	1
  1587  00005F                     pow@yi:
  1588                           	opt stack 0
  1589                           
  1590                           ; 4 bytes @ 0x5E
  1591  00005F                     	ds	4
  1592  000063                     ?_dec_to_hex:
  1593                           	opt stack 0
  1594  000063                     dec_to_hex@num:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x62
  1598  000063                     	ds	2
  1599  000065                     _dec_to_hex$1244:
  1600                           	opt stack 0
  1601                           
  1602                           ; 3 bytes @ 0x64
  1603  000065                     	ds	3
  1604  000068                     _dec_to_hex$1245:
  1605                           	opt stack 0
  1606                           
  1607                           ; 3 bytes @ 0x67
  1608  000068                     	ds	3
  1609  00006B                     dec_to_hex@temp:
  1610                           	opt stack 0
  1611                           
  1612                           ; 2 bytes @ 0x6A
  1613  00006B                     	ds	2
  1614  00006D                     dec_to_hex@i:
  1615                           	opt stack 0
  1616                           
  1617                           ; 2 bytes @ 0x6C
  1618  00006D                     	ds	2
  1619  00006F                     dec_to_hex@hexnum:
  1620                           	opt stack 0
  1621                           
  1622                           ; 2 bytes @ 0x6E
  1623  00006F                     	ds	2
  1624  000071                     dec_to_hex@quotient:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x70
  1628  000071                     	ds	2
  1629  000073                     _isr$1340:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x72
  1633  000073                     	ds	2
  1634  000075                     isr@i:
  1635                           	opt stack 0
  1636                           
  1637                           ; 1 bytes @ 0x74
  1638  000075                     	ds	1
  1639                           tblptru	equ	0xFF8
  1640                           tblptrh	equ	0xFF7
  1641                           tblptrl	equ	0xFF6
  1642                           tablat	equ	0xFF5
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           
  1646 ;;
  1647 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1648 ;;
  1649 ;; *************** function _main *****************
  1650 ;; Defined at:
  1651 ;;		line 87 in file "main.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;		None
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;Total ram usage:        2 bytes
  1670 ;; Hardware stack levels required when called:   11
  1671 ;; This function calls:
  1672 ;;		_I2C_ColorSens_Init
  1673 ;;		_I2C_Master_Init
  1674 ;;		_bottle_count
  1675 ;;		_bottle_time
  1676 ;;		_date_time
  1677 ;;		_emergencystop
  1678 ;;		_initLCD
  1679 ;;		_operation
  1680 ;;		_operationend
  1681 ;;		_standby
  1682 ;; This function is called by:
  1683 ;;		Startup code after reset
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text0
  1688  0018A4                     __ptext0:
  1689                           	opt stack 0
  1690  0018A4                     _main:
  1691                           	opt stack 20
  1692                           
  1693                           ;main.c: 94: TRISA = 0xFF;
  1694                           
  1695                           ;incstack = 0
  1696  0018A4  6892               	setf	3986,c	;volatile
  1697                           
  1698                           ;main.c: 95: TRISB = 0xFF;
  1699  0018A6  6893               	setf	3987,c	;volatile
  1700                           
  1701                           ;main.c: 96: TRISC = 0b00011000;
  1702  0018A8  0E18               	movlw	24
  1703  0018AA  6E94               	movwf	3988,c	;volatile
  1704                           
  1705                           ;main.c: 97: TRISD = 0x00;
  1706  0018AC  0E00               	movlw	0
  1707  0018AE  6E95               	movwf	3989,c	;volatile
  1708                           
  1709                           ;main.c: 98: TRISE = 0x00;
  1710  0018B0  0E00               	movlw	0
  1711  0018B2  6E96               	movwf	3990,c	;volatile
  1712                           
  1713                           ;main.c: 100: LATA = 0x00;
  1714  0018B4  0E00               	movlw	0
  1715  0018B6  6E89               	movwf	3977,c	;volatile
  1716                           
  1717                           ;main.c: 101: LATB = 0x00;
  1718  0018B8  0E00               	movlw	0
  1719  0018BA  6E8A               	movwf	3978,c	;volatile
  1720                           
  1721                           ;main.c: 102: LATC = 0x00;
  1722  0018BC  0E00               	movlw	0
  1723  0018BE  6E8B               	movwf	3979,c	;volatile
  1724                           
  1725                           ;main.c: 103: LATD = 0x00;
  1726  0018C0  0E00               	movlw	0
  1727  0018C2  6E8C               	movwf	3980,c	;volatile
  1728                           
  1729                           ;main.c: 104: LATE = 0x00;
  1730  0018C4  0E00               	movlw	0
  1731  0018C6  6E8D               	movwf	3981,c	;volatile
  1732                           
  1733                           ;main.c: 106: ADCON0 = 0x00;
  1734  0018C8  0E00               	movlw	0
  1735  0018CA  6EC2               	movwf	4034,c	;volatile
  1736                           
  1737                           ;main.c: 107: ADCON1 = 0xFF;
  1738  0018CC  68C1               	setf	4033,c	;volatile
  1739                           
  1740                           ;main.c: 110: INT1IE = 1;
  1741  0018CE  86F0               	bsf	intcon3,3,c	;volatile
  1742                           
  1743                           ;main.c: 111: INT0IE = 0;
  1744  0018D0  98F2               	bcf	intcon,4,c	;volatile
  1745                           
  1746                           ;main.c: 112: INT2IE = 0;
  1747  0018D2  98F0               	bcf	intcon3,4,c	;volatile
  1748                           
  1749                           ;main.c: 114: nRBPU = 0;
  1750  0018D4  9EF1               	bcf	intcon2,7,c	;volatile
  1751                           
  1752                           ;main.c: 116: initLCD();
  1753  0018D6  EC11  F014         	call	_initLCD	;wreg free
  1754                           
  1755                           ;main.c: 117: I2C_Master_Init(10000);
  1756  0018DA  0E10               	movlw	16
  1757  0018DC  0100               	movlb	0	; () banked
  1758  0018DE  6FE1               	movwf	I2C_Master_Init@c& (0+255),b
  1759  0018E0  0E27               	movlw	39
  1760  0018E2  6FE2               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1761  0018E4  0E00               	movlw	0
  1762  0018E6  6FE3               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1763  0018E8  0E00               	movlw	0
  1764  0018EA  6FE4               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1765  0018EC  EC8A  F013         	call	_I2C_Master_Init	;wreg free
  1766                           
  1767                           ;main.c: 118: I2C_ColorSens_Init();
  1768  0018F0  EC2D  F015         	call	_I2C_ColorSens_Init	;wreg free
  1769                           
  1770                           ;main.c: 121: TMR0 = 0;
  1771  0018F4  0E00               	movlw	0
  1772  0018F6  6ED7               	movwf	4055,c	;volatile
  1773  0018F8  0E00               	movlw	0
  1774  0018FA  6ED6               	movwf	4054,c	;volatile
  1775                           
  1776                           ;main.c: 122: T08BIT = 0;
  1777  0018FC  9CD5               	bcf	4053,6,c	;volatile
  1778                           
  1779                           ;main.c: 123: T0CS = 0;
  1780  0018FE  9AD5               	bcf	4053,5,c	;volatile
  1781                           
  1782                           ;main.c: 124: PSA = 0;
  1783  001900  96D5               	bcf	4053,3,c	;volatile
  1784                           
  1785                           ;main.c: 125: T0PS2 = 1;
  1786  001902  84D5               	bsf	4053,2,c	;volatile
  1787                           
  1788                           ;main.c: 126: T0PS1 = 1;
  1789  001904  82D5               	bsf	4053,1,c	;volatile
  1790                           
  1791                           ;main.c: 127: T0PS0 = 1;
  1792  001906  80D5               	bsf	4053,0,c	;volatile
  1793                           
  1794                           ;main.c: 131: curr_state = STANDBY;
  1795  001908  0E00               	movlw	0
  1796  00190A  0100               	movlb	0	; () banked
  1797  00190C  6FC3               	movwf	_curr_state& (0+255),b
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 134: switch(curr_state){
  1801                           
  1802                           ;main.c: 133: while(1){
  1803  00190E  D019               	goto	l5110
  1804  001910                     l5094:
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;main.c: 136: standby();
  1808  001910  ECDC  F014         	call	_standby	;wreg free
  1809                           
  1810                           ;main.c: 137: break;
  1811  001914  D02D               	goto	l5112
  1812  001916                     l5096:
  1813                           
  1814                           ;main.c: 139: emergencystop();
  1815  001916  ECAB  F015         	call	_emergencystop	;wreg free
  1816                           
  1817                           ;main.c: 140: break;
  1818  00191A  D02A               	goto	l5112
  1819  00191C                     l5098:
  1820                           
  1821                           ;main.c: 142: operation();
  1822  00191C  ECA9  F00F         	call	_operation	;wreg free
  1823                           
  1824                           ;main.c: 143: break;
  1825  001920  D027               	goto	l5112
  1826  001922                     l5100:
  1827                           
  1828                           ;main.c: 145: operationend();
  1829  001922  ECCB  F015         	call	_operationend	;wreg free
  1830                           
  1831                           ;main.c: 146: break;
  1832  001926  D024               	goto	l5112
  1833  001928                     l5102:
  1834                           
  1835                           ;main.c: 148: date_time();
  1836  001928  EC16  F00E         	call	_date_time	;wreg free
  1837                           
  1838                           ;main.c: 149: break;
  1839  00192C  D021               	goto	l5112
  1840  00192E                     l5104:
  1841                           
  1842                           ;main.c: 151: bottle_count();
  1843  00192E  EC3B  F008         	call	_bottle_count	;wreg free
  1844                           
  1845                           ;main.c: 152: break;
  1846  001932  D01E               	goto	l5112
  1847  001934                     l5106:
  1848                           
  1849                           ;main.c: 154: bottle_time(operation_time);
  1850  001934  C0B7  F0EC         	movff	_operation_time,bottle_time@time
  1851  001938  C0B8  F0ED         	movff	_operation_time+1,bottle_time@time+1
  1852  00193C  ECF7  F014         	call	_bottle_time	;wreg free
  1853                           
  1854                           ;main.c: 156: }
  1855                           
  1856                           ;main.c: 155: break;
  1857  001940  D017               	goto	l5112
  1858  001942                     l5110:
  1859  001942  0100               	movlb	0	; () banked
  1860  001944  51C3               	movf	_curr_state& (0+255),w,b
  1861                           
  1862                           ; Switch size 1, requested type "space"
  1863                           ; Number of cases is 7, Range of values is 0 to 6
  1864                           ; switch strategies available:
  1865                           ; Name         Instructions Cycles
  1866                           ; simple_byte           22    12 (average)
  1867                           ;	Chosen strategy is simple_byte
  1868  001946  0A00               	xorlw	0	; case 0
  1869  001948  B4D8               	btfsc	status,2,c
  1870  00194A  D7E2               	goto	l5094
  1871  00194C  0A01               	xorlw	1	; case 1
  1872  00194E  B4D8               	btfsc	status,2,c
  1873  001950  D7E2               	goto	l5096
  1874  001952  0A03               	xorlw	3	; case 2
  1875  001954  B4D8               	btfsc	status,2,c
  1876  001956  D7E2               	goto	l5098
  1877  001958  0A01               	xorlw	1	; case 3
  1878  00195A  B4D8               	btfsc	status,2,c
  1879  00195C  D7E2               	goto	l5100
  1880  00195E  0A07               	xorlw	7	; case 4
  1881  001960  B4D8               	btfsc	status,2,c
  1882  001962  D7E2               	goto	l5102
  1883  001964  0A01               	xorlw	1	; case 5
  1884  001966  B4D8               	btfsc	status,2,c
  1885  001968  D7E2               	goto	l5104
  1886  00196A  0A03               	xorlw	3	; case 6
  1887  00196C  B4D8               	btfsc	status,2,c
  1888  00196E  D7E2               	goto	l5106
  1889  001970                     l5112:
  1890                           
  1891                           ;main.c: 157: _delay((unsigned long)((200)*(10000000/4000.0)));
  1892  001970  0E03               	movlw	3
  1893  001972  0101               	movlb	1	; () banked
  1894  001974  6F0B               	movwf	(??_main+1)& (0+255),b
  1895  001976  0E8A               	movlw	138
  1896  001978  0101               	movlb	1	; () banked
  1897  00197A  6F0A               	movwf	??_main& (0+255),b
  1898  00197C  0E55               	movlw	85
  1899  00197E                     u4757:
  1900  00197E  2EE8               	decfsz	wreg,f,c
  1901  001980  D7FE               	bra	u4757
  1902  001982  2F0A               	decfsz	??_main& (0+255),f,b
  1903  001984  D7FC               	bra	u4757
  1904  001986  2F0B               	decfsz	(??_main+1)& (0+255),f,b
  1905  001988  D7FA               	bra	u4757
  1906  00198A  D000               	nop2	
  1907  00198C  D7DA               	goto	l5110
  1908  00198E                     __end_of_main:
  1909                           	opt stack 0
  1910                           tblptru	equ	0xFF8
  1911                           tblptrh	equ	0xFF7
  1912                           tblptrl	equ	0xFF6
  1913                           tablat	equ	0xFF5
  1914                           intcon	equ	0xFF2
  1915                           intcon2	equ	0xFF1
  1916                           intcon3	equ	0xFF0
  1917                           postinc0	equ	0xFEE
  1918                           wreg	equ	0xFE8
  1919                           status	equ	0xFD8
  1920                           
  1921 ;; *************** function _standby *****************
  1922 ;; Defined at:
  1923 ;;		line 301 in file "main.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;		None
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;		None
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;Total ram usage:        0 bytes
  1942 ;; Hardware stack levels used:    1
  1943 ;; Hardware stack levels required when called:   10
  1944 ;; This function calls:
  1945 ;;		_lcdInst
  1946 ;;		_printf
  1947 ;; This function is called by:
  1948 ;;		_main
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text1
  1953  0029B8                     __ptext1:
  1954                           	opt stack 0
  1955  0029B8                     _standby:
  1956                           	opt stack 20
  1957                           
  1958                           ;main.c: 302: lcdInst(0b10000000);
  1959                           
  1960                           ;incstack = 0
  1961  0029B8  0E80               	movlw	128
  1962  0029BA  ECF2  F015         	call	_lcdInst
  1963                           
  1964                           ;main.c: 303: printf("standby         ");
  1965  0029BE  0E8A               	movlw	low STR_2
  1966  0029C0  0100               	movlb	0	; () banked
  1967  0029C2  6FE0               	movwf	printf@f& (0+255),b
  1968  0029C4  0EFF               	movlw	high STR_2
  1969  0029C6  0100               	movlb	0	; () banked
  1970  0029C8  6FE1               	movwf	(printf@f+1)& (0+255),b
  1971  0029CA  EC11  F003         	call	_printf	;wreg free
  1972                           
  1973                           ;main.c: 304: lcdInst(0b11000000);
  1974  0029CE  0EC0               	movlw	192
  1975  0029D0  ECF2  F015         	call	_lcdInst
  1976                           
  1977                           ;main.c: 305: printf("PORTB: %d", PORTB);
  1978  0029D4  0EEA               	movlw	low STR_3
  1979  0029D6  0100               	movlb	0	; () banked
  1980  0029D8  6FE0               	movwf	printf@f& (0+255),b
  1981  0029DA  0EFF               	movlw	high STR_3
  1982  0029DC  0100               	movlb	0	; () banked
  1983  0029DE  6FE1               	movwf	(printf@f+1)& (0+255),b
  1984  0029E0  CF81 F0E2          	movff	3969,?_printf+2	;volatile
  1985  0029E4  0100               	movlb	0	; () banked
  1986  0029E6  6BE3               	clrf	(?_printf+3)& (0+255),b
  1987  0029E8  EC11  F003         	call	_printf	;wreg free
  1988  0029EC  0012               	return	
  1989  0029EE                     __end_of_standby:
  1990                           	opt stack 0
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           intcon	equ	0xFF2
  1996                           intcon2	equ	0xFF1
  1997                           intcon3	equ	0xFF0
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _operationend *****************
  2003 ;; Defined at:
  2004 ;;		line 451 in file "main.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;		None
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;                  1    wreg      void 
  2011 ;; Registers used:
  2012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;Total ram usage:        0 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:   10
  2025 ;; This function calls:
  2026 ;;		_lcdInst
  2027 ;;		_printf
  2028 ;; This function is called by:
  2029 ;;		_main
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           	psect	text2
  2034  002B96                     __ptext2:
  2035                           	opt stack 0
  2036  002B96                     _operationend:
  2037                           	opt stack 20
  2038                           
  2039                           ;main.c: 452: lcdInst(0b10000000);
  2040                           
  2041                           ;incstack = 0
  2042  002B96  0E80               	movlw	128
  2043  002B98  ECF2  F015         	call	_lcdInst
  2044                           
  2045                           ;main.c: 453: printf("Operation Done!");
  2046  002B9C  0EBD               	movlw	low STR_23
  2047  002B9E  0100               	movlb	0	; () banked
  2048  002BA0  6FE0               	movwf	printf@f& (0+255),b
  2049  002BA2  0EFF               	movlw	high STR_23
  2050  002BA4  0100               	movlb	0	; () banked
  2051  002BA6  6FE1               	movwf	(printf@f+1)& (0+255),b
  2052  002BA8  EC11  F003         	call	_printf	;wreg free
  2053  002BAC  0012               	return	
  2054  002BAE                     __end_of_operationend:
  2055                           	opt stack 0
  2056                           tblptru	equ	0xFF8
  2057                           tblptrh	equ	0xFF7
  2058                           tblptrl	equ	0xFF6
  2059                           tablat	equ	0xFF5
  2060                           intcon	equ	0xFF2
  2061                           intcon2	equ	0xFF1
  2062                           intcon3	equ	0xFF0
  2063                           postinc0	equ	0xFEE
  2064                           wreg	equ	0xFE8
  2065                           status	equ	0xFD8
  2066                           
  2067 ;; *************** function _operation *****************
  2068 ;; Defined at:
  2069 ;;		line 426 in file "main.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;Total ram usage:        2 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:   10
  2090 ;; This function calls:
  2091 ;;		_lcdInst
  2092 ;;		_printf
  2093 ;;		_read_colorsensor
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text3
  2100  001F52                     __ptext3:
  2101                           	opt stack 0
  2102  001F52                     _operation:
  2103                           	opt stack 20
  2104                           
  2105                           ;main.c: 427: switch(operation_disp){
  2106                           
  2107                           ;incstack = 0
  2108  001F52  D031               	goto	l4964
  2109  001F54                     l4944:
  2110                           
  2111                           ;main.c: 429: lcdInst(0b10000000);
  2112  001F54  0E80               	movlw	128
  2113  001F56  ECF2  F015         	call	_lcdInst
  2114                           
  2115                           ;main.c: 430: printf("Running~              ");
  2116  001F5A  0E65               	movlw	low STR_19
  2117  001F5C  0100               	movlb	0	; () banked
  2118  001F5E  6FE0               	movwf	printf@f& (0+255),b
  2119  001F60  0EFE               	movlw	high STR_19
  2120  001F62  0100               	movlb	0	; () banked
  2121  001F64  6FE1               	movwf	(printf@f+1)& (0+255),b
  2122  001F66  EC11  F003         	call	_printf	;wreg free
  2123                           
  2124                           ;main.c: 431: operation_disp = 1;
  2125  001F6A  0E00               	movlw	0
  2126  001F6C  0100               	movlb	0	; () banked
  2127  001F6E  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2128  001F70  0E01               	movlw	1
  2129  001F72  D01F               	goto	L2
  2130  001F74                     l4950:
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;main.c: 434: lcdInst(0b10000000);
  2134  001F74  0E80               	movlw	128
  2135  001F76  ECF2  F015         	call	_lcdInst
  2136                           
  2137                           ;main.c: 435: printf("Running~~              ");
  2138  001F7A  0E4D               	movlw	low STR_20
  2139  001F7C  0100               	movlb	0	; () banked
  2140  001F7E  6FE0               	movwf	printf@f& (0+255),b
  2141  001F80  0EFE               	movlw	high STR_20
  2142  001F82  0100               	movlb	0	; () banked
  2143  001F84  6FE1               	movwf	(printf@f+1)& (0+255),b
  2144  001F86  EC11  F003         	call	_printf	;wreg free
  2145                           
  2146                           ;main.c: 436: operation_disp = 2;
  2147  001F8A  0E00               	movlw	0
  2148  001F8C  0100               	movlb	0	; () banked
  2149  001F8E  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2150  001F90  0E02               	movlw	2
  2151  001F92  D00F               	goto	L2
  2152  001F94                     l4956:
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;main.c: 439: lcdInst(0b10000000);
  2156  001F94  0E80               	movlw	128
  2157  001F96  ECF2  F015         	call	_lcdInst
  2158                           
  2159                           ;main.c: 440: printf("Running~~~              ");
  2160  001F9A  0E34               	movlw	low STR_21
  2161  001F9C  0100               	movlb	0	; () banked
  2162  001F9E  6FE0               	movwf	printf@f& (0+255),b
  2163  001FA0  0EFE               	movlw	high STR_21
  2164  001FA2  0100               	movlb	0	; () banked
  2165  001FA4  6FE1               	movwf	(printf@f+1)& (0+255),b
  2166  001FA6  EC11  F003         	call	_printf	;wreg free
  2167                           
  2168                           ;main.c: 441: operation_disp = 0;
  2169  001FAA  0E00               	movlw	0
  2170  001FAC  0100               	movlb	0	; () banked
  2171  001FAE  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2172  001FB0  0E00               	movlw	0
  2173  001FB2                     L2:
  2174  001FB2  6FB5               	movwf	_operation_disp& (0+255),b
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;main.c: 443: }
  2178                           
  2179                           ;main.c: 442: break;
  2180  001FB4  D014               	goto	l4966
  2181  001FB6                     l4964:
  2182  001FB6  C0B5  F0EC         	movff	_operation_disp,??_operation
  2183  001FBA  C0B6  F0ED         	movff	_operation_disp+1,??_operation+1
  2184                           
  2185                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2186                           ; Switch size 1, requested type "space"
  2187                           ; Number of cases is 1, Range of values is 0 to 0
  2188                           ; switch strategies available:
  2189                           ; Name         Instructions Cycles
  2190                           ; simple_byte            4     3 (average)
  2191                           ;	Chosen strategy is simple_byte
  2192  001FBE  0100               	movlb	0	; () banked
  2193  001FC0  51ED               	movf	(??_operation+1)& (0+255),w,b
  2194  001FC2  0A00               	xorlw	0	; case 0
  2195  001FC4  A4D8               	btfss	status,2,c
  2196  001FC6  D00B               	goto	l4966
  2197                           
  2198                           ; BSR set to: 0
  2199                           ; Switch size 1, requested type "space"
  2200                           ; Number of cases is 3, Range of values is 0 to 2
  2201                           ; switch strategies available:
  2202                           ; Name         Instructions Cycles
  2203                           ; simple_byte           10     6 (average)
  2204                           ;	Chosen strategy is simple_byte
  2205  001FC8  0100               	movlb	0	; () banked
  2206  001FCA  51EC               	movf	??_operation& (0+255),w,b
  2207  001FCC  0A00               	xorlw	0	; case 0
  2208  001FCE  B4D8               	btfsc	status,2,c
  2209  001FD0  D7C1               	goto	l4944
  2210  001FD2  0A01               	xorlw	1	; case 1
  2211  001FD4  B4D8               	btfsc	status,2,c
  2212  001FD6  D7CE               	goto	l4950
  2213  001FD8  0A03               	xorlw	3	; case 2
  2214  001FDA  B4D8               	btfsc	status,2,c
  2215  001FDC  D7DB               	goto	l4956
  2216  001FDE                     l4966:
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;main.c: 445: lcdInst(0b11000000);
  2220  001FDE  0EC0               	movlw	192
  2221  001FE0  ECF2  F015         	call	_lcdInst
  2222                           
  2223                           ;main.c: 446: read_colorsensor();
  2224  001FE4  ECC2  F009         	call	_read_colorsensor	;wreg free
  2225                           
  2226                           ;main.c: 447: printf("C: %d                ", color[0]);
  2227  001FE8  0EC1               	movlw	low STR_22
  2228  001FEA  0100               	movlb	0	; () banked
  2229  001FEC  6FE0               	movwf	printf@f& (0+255),b
  2230  001FEE  0EFE               	movlw	high STR_22
  2231  001FF0  0100               	movlb	0	; () banked
  2232  001FF2  6FE1               	movwf	(printf@f+1)& (0+255),b
  2233  001FF4  C096  F0E2         	movff	_color,?_printf+2
  2234  001FF8  C097  F0E3         	movff	_color+1,?_printf+3
  2235  001FFC  EC11  F003         	call	_printf	;wreg free
  2236  002000  0012               	return	
  2237  002002                     __end_of_operation:
  2238                           	opt stack 0
  2239                           tblptru	equ	0xFF8
  2240                           tblptrh	equ	0xFF7
  2241                           tblptrl	equ	0xFF6
  2242                           tablat	equ	0xFF5
  2243                           intcon	equ	0xFF2
  2244                           intcon2	equ	0xFF1
  2245                           intcon3	equ	0xFF0
  2246                           postinc0	equ	0xFEE
  2247                           wreg	equ	0xFE8
  2248                           status	equ	0xFD8
  2249                           
  2250 ;; *************** function _read_colorsensor *****************
  2251 ;; Defined at:
  2252 ;;		line 506 in file "main.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;		None
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;  i               2   27[BANK0 ] int 
  2257 ;;  color_comb      2   25[BANK0 ] int 
  2258 ;;  color_high      2   23[BANK0 ] int 
  2259 ;;  color_low       2   21[BANK0 ] int 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;Total ram usage:       10 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    9
  2276 ;; This function calls:
  2277 ;;		_I2C_Master_Read
  2278 ;;		_I2C_Master_Start
  2279 ;;		_I2C_Master_Stop
  2280 ;;		_I2C_Master_Write
  2281 ;; This function is called by:
  2282 ;;		_operation
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text4
  2287  001384                     __ptext4:
  2288                           	opt stack 0
  2289  001384                     _read_colorsensor:
  2290                           	opt stack 20
  2291                           
  2292                           ;main.c: 507: int color_low;
  2293                           ;main.c: 508: int color_high;
  2294                           ;main.c: 509: int color_comb;
  2295                           ;main.c: 510: int i;
  2296                           ;main.c: 513: I2C_Master_Start();
  2297                           
  2298                           ;incstack = 0
  2299  001384  EC14  F016         	call	_I2C_Master_Start	;wreg free
  2300                           
  2301                           ;main.c: 514: I2C_Master_Write(0b01010010);
  2302  001388  0E00               	movlw	0
  2303  00138A  0100               	movlb	0	; () banked
  2304  00138C  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2305  00138E  0E52               	movlw	82
  2306  001390  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2307  001392  EC06  F016         	call	_I2C_Master_Write	;wreg free
  2308                           
  2309                           ;main.c: 515: I2C_Master_Write(0b10110100);
  2310  001396  0E00               	movlw	0
  2311  001398  0100               	movlb	0	; () banked
  2312  00139A  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2313  00139C  0EB4               	movlw	180
  2314  00139E  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2315  0013A0  EC06  F016         	call	_I2C_Master_Write	;wreg free
  2316                           
  2317                           ;main.c: 516: I2C_Master_Start();
  2318  0013A4  EC14  F016         	call	_I2C_Master_Start	;wreg free
  2319                           
  2320                           ;main.c: 517: I2C_Master_Write(0b01010011);
  2321  0013A8  0E00               	movlw	0
  2322  0013AA  0100               	movlb	0	; () banked
  2323  0013AC  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2324  0013AE  0E53               	movlw	83
  2325  0013B0  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2326  0013B2  EC06  F016         	call	_I2C_Master_Write	;wreg free
  2327                           
  2328                           ;main.c: 518: for(i=0; i<3; i++){
  2329  0013B6  0E00               	movlw	0
  2330  0013B8  0100               	movlb	0	; () banked
  2331  0013BA  6FE0               	movwf	(read_colorsensor@i+1)& (0+255),b
  2332  0013BC  0E00               	movlw	0
  2333  0013BE  6FDF               	movwf	read_colorsensor@i& (0+255),b
  2334  0013C0                     l3560:
  2335                           
  2336                           ; BSR set to: 0
  2337  0013C0  0100               	movlb	0	; () banked
  2338  0013C2  BFE0               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2339  0013C4  D008               	goto	l3564
  2340  0013C6  0100               	movlb	0	; () banked
  2341  0013C8  51E0               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2342  0013CA  E13E               	bnz	l3574
  2343  0013CC  0E03               	movlw	3
  2344  0013CE  0100               	movlb	0	; () banked
  2345  0013D0  5DDF               	subwf	read_colorsensor@i& (0+255),w,b
  2346  0013D2  B0D8               	btfsc	status,0,c
  2347  0013D4  D039               	goto	l3574
  2348  0013D6                     l3564:
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;main.c: 519: color_low = I2C_Master_Read(1);
  2352  0013D6  0E01               	movlw	1
  2353  0013D8  EC47  F015         	call	_I2C_Master_Read
  2354  0013DC  0100               	movlb	0	; () banked
  2355  0013DE  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2356  0013E0  0100               	movlb	0	; () banked
  2357  0013E2  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2358  0013E4  0100               	movlb	0	; () banked
  2359  0013E6  6FD9               	movwf	read_colorsensor@color_low& (0+255),b
  2360  0013E8  6BDA               	clrf	(read_colorsensor@color_low+1)& (0+255),b
  2361                           
  2362                           ;main.c: 520: color_high = I2C_Master_Read(1);
  2363  0013EA  0E01               	movlw	1
  2364  0013EC  EC47  F015         	call	_I2C_Master_Read
  2365  0013F0  0100               	movlb	0	; () banked
  2366  0013F2  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2367  0013F4  0100               	movlb	0	; () banked
  2368  0013F6  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2369  0013F8  0100               	movlb	0	; () banked
  2370  0013FA  6FDB               	movwf	read_colorsensor@color_high& (0+255),b
  2371  0013FC  6BDC               	clrf	(read_colorsensor@color_high+1)& (0+255),b
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 521: color_comb = (color_high << 8)|(color_low & 0xFF);
  2375  0013FE  0100               	movlb	0	; () banked
  2376  001400  51D9               	movf	read_colorsensor@color_low& (0+255),w,b
  2377  001402  C0DB  F0D7         	movff	read_colorsensor@color_high,??_read_colorsensor
  2378  001406  C0DC  F0D8         	movff	read_colorsensor@color_high+1,??_read_colorsensor+1
  2379  00140A  C0D7  F0D8         	movff	??_read_colorsensor,??_read_colorsensor+1
  2380  00140E  0100               	movlb	0	; () banked
  2381  001410  6BD7               	clrf	??_read_colorsensor& (0+255),b
  2382  001412  0100               	movlb	0	; () banked
  2383  001414  11D7               	iorwf	??_read_colorsensor& (0+255),w,b
  2384  001416  0100               	movlb	0	; () banked
  2385  001418  6FDD               	movwf	read_colorsensor@color_comb& (0+255),b
  2386  00141A  0100               	movlb	0	; () banked
  2387  00141C  51D8               	movf	(??_read_colorsensor+1)& (0+255),w,b
  2388  00141E  0100               	movlb	0	; () banked
  2389  001420  6FDE               	movwf	(read_colorsensor@color_comb+1)& (0+255),b
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;main.c: 522: color[i] = color_comb;
  2393  001422  90D8               	bcf	status,0,c
  2394  001424  0100               	movlb	0	; () banked
  2395  001426  35DF               	rlcf	read_colorsensor@i& (0+255),w,b
  2396  001428  6ED9               	movwf	fsr2l,c
  2397  00142A  0100               	movlb	0	; () banked
  2398  00142C  35E0               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2399  00142E  6EDA               	movwf	fsr2h,c
  2400  001430  0E96               	movlw	low _color
  2401  001432  26D9               	addwf	fsr2l,f,c
  2402  001434  0E00               	movlw	high _color
  2403  001436  22DA               	addwfc	fsr2h,f,c
  2404  001438  C0DD  FFDE         	movff	read_colorsensor@color_comb,postinc2
  2405  00143C  C0DE  FFDD         	movff	read_colorsensor@color_comb+1,postdec2
  2406                           
  2407                           ; BSR set to: 0
  2408  001440  0100               	movlb	0	; () banked
  2409  001442  4BDF               	infsnz	read_colorsensor@i& (0+255),f,b
  2410  001444  2BE0               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2411  001446  D7BC               	goto	l3560
  2412  001448                     l3574:
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;main.c: 523: }
  2416                           ;main.c: 524: color_low = I2C_Master_Read(1);
  2417  001448  0E01               	movlw	1
  2418  00144A  EC47  F015         	call	_I2C_Master_Read
  2419  00144E  0100               	movlb	0	; () banked
  2420  001450  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2421  001452  0100               	movlb	0	; () banked
  2422  001454  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2423  001456  0100               	movlb	0	; () banked
  2424  001458  6FD9               	movwf	read_colorsensor@color_low& (0+255),b
  2425  00145A  6BDA               	clrf	(read_colorsensor@color_low+1)& (0+255),b
  2426                           
  2427                           ;main.c: 525: color_high = I2C_Master_Read(0);
  2428  00145C  0E00               	movlw	0
  2429  00145E  EC47  F015         	call	_I2C_Master_Read
  2430  001462  0100               	movlb	0	; () banked
  2431  001464  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2432  001466  0100               	movlb	0	; () banked
  2433  001468  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2434  00146A  0100               	movlb	0	; () banked
  2435  00146C  6FDB               	movwf	read_colorsensor@color_high& (0+255),b
  2436  00146E  6BDC               	clrf	(read_colorsensor@color_high+1)& (0+255),b
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;main.c: 526: color_comb = (color_high << 8)|(color_low & 0xFF);
  2440  001470  0100               	movlb	0	; () banked
  2441  001472  51D9               	movf	read_colorsensor@color_low& (0+255),w,b
  2442  001474  C0DB  F0D7         	movff	read_colorsensor@color_high,??_read_colorsensor
  2443  001478  C0DC  F0D8         	movff	read_colorsensor@color_high+1,??_read_colorsensor+1
  2444  00147C  C0D7  F0D8         	movff	??_read_colorsensor,??_read_colorsensor+1
  2445  001480  0100               	movlb	0	; () banked
  2446  001482  6BD7               	clrf	??_read_colorsensor& (0+255),b
  2447  001484  0100               	movlb	0	; () banked
  2448  001486  11D7               	iorwf	??_read_colorsensor& (0+255),w,b
  2449  001488  0100               	movlb	0	; () banked
  2450  00148A  6FDD               	movwf	read_colorsensor@color_comb& (0+255),b
  2451  00148C  0100               	movlb	0	; () banked
  2452  00148E  51D8               	movf	(??_read_colorsensor+1)& (0+255),w,b
  2453  001490  0100               	movlb	0	; () banked
  2454  001492  6FDE               	movwf	(read_colorsensor@color_comb+1)& (0+255),b
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;main.c: 527: color[3] = color_comb;
  2458  001494  C0DD  F09C         	movff	read_colorsensor@color_comb,_color+6
  2459  001498  C0DE  F09D         	movff	read_colorsensor@color_comb+1,_color+7
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;main.c: 528: I2C_Master_Stop();
  2463  00149C  EC10  F016         	call	_I2C_Master_Stop	;wreg free
  2464  0014A0  0012               	return	
  2465  0014A2                     __end_of_read_colorsensor:
  2466                           	opt stack 0
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           intcon	equ	0xFF2
  2472                           intcon2	equ	0xFF1
  2473                           intcon3	equ	0xFF0
  2474                           postinc0	equ	0xFEE
  2475                           wreg	equ	0xFE8
  2476                           postinc2	equ	0xFDE
  2477                           postdec2	equ	0xFDD
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _initLCD *****************
  2483 ;; Defined at:
  2484 ;;		line 14 in file "lcd.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2501 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2502 ;;Total ram usage:        1 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    9
  2505 ;; This function calls:
  2506 ;;		_lcdInst
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text5
  2513  002822                     __ptext5:
  2514                           	opt stack 0
  2515  002822                     _initLCD:
  2516                           	opt stack 21
  2517                           
  2518                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2519                           
  2520                           ;incstack = 0
  2521  002822  0E31               	movlw	49
  2522  002824  0100               	movlb	0	; () banked
  2523  002826  6FD7               	movwf	??_initLCD& (0+255),b
  2524  002828  0EB2               	movlw	178
  2525  00282A                     u4767:
  2526  00282A  2EE8               	decfsz	wreg,f,c
  2527  00282C  D7FE               	bra	u4767
  2528  00282E  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2529  002830  D7FC               	bra	u4767
  2530  002832  F000               	nop	
  2531                           
  2532                           ;lcd.c: 16: lcdInst(0b00110011);
  2533  002834  0E33               	movlw	51
  2534  002836  ECF2  F015         	call	_lcdInst
  2535                           
  2536                           ;lcd.c: 17: lcdInst(0b00110011);
  2537  00283A  0E33               	movlw	51
  2538  00283C  ECF2  F015         	call	_lcdInst
  2539                           
  2540                           ;lcd.c: 18: lcdInst(0b00110010);
  2541  002840  0E32               	movlw	50
  2542  002842  ECF2  F015         	call	_lcdInst
  2543                           
  2544                           ;lcd.c: 19: lcdInst(0b00101000);
  2545  002846  0E28               	movlw	40
  2546  002848  ECF2  F015         	call	_lcdInst
  2547                           
  2548                           ;lcd.c: 20: lcdInst(0b00001111);
  2549  00284C  0E0F               	movlw	15
  2550  00284E  ECF2  F015         	call	_lcdInst
  2551                           
  2552                           ;lcd.c: 21: lcdInst(0b00000110);
  2553  002852  0E06               	movlw	6
  2554  002854  ECF2  F015         	call	_lcdInst
  2555                           
  2556                           ;lcd.c: 22: lcdInst(0b00000001);
  2557  002858  0E01               	movlw	1
  2558  00285A  ECF2  F015         	call	_lcdInst
  2559                           
  2560                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2561  00285E  0E31               	movlw	49
  2562  002860  0100               	movlb	0	; () banked
  2563  002862  6FD7               	movwf	??_initLCD& (0+255),b
  2564  002864  0EB2               	movlw	178
  2565  002866                     u4777:
  2566  002866  2EE8               	decfsz	wreg,f,c
  2567  002868  D7FE               	bra	u4777
  2568  00286A  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2569  00286C  D7FC               	bra	u4777
  2570  00286E  F000               	nop	
  2571  002870  0012               	return		;funcret
  2572  002872                     __end_of_initLCD:
  2573                           	opt stack 0
  2574                           tblptru	equ	0xFF8
  2575                           tblptrh	equ	0xFF7
  2576                           tblptrl	equ	0xFF6
  2577                           tablat	equ	0xFF5
  2578                           intcon	equ	0xFF2
  2579                           intcon2	equ	0xFF1
  2580                           intcon3	equ	0xFF0
  2581                           postinc0	equ	0xFEE
  2582                           wreg	equ	0xFE8
  2583                           postinc2	equ	0xFDE
  2584                           postdec2	equ	0xFDD
  2585                           fsr2h	equ	0xFDA
  2586                           fsr2l	equ	0xFD9
  2587                           status	equ	0xFD8
  2588                           
  2589 ;; *************** function _emergencystop *****************
  2590 ;; Defined at:
  2591 ;;		line 457 in file "main.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;		None
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;		None
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  1    wreg      void 
  2598 ;; Registers used:
  2599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;Total ram usage:        0 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:   10
  2612 ;; This function calls:
  2613 ;;		_lcdInst
  2614 ;;		_printf
  2615 ;; This function is called by:
  2616 ;;		_main
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           	psect	text6
  2621  002B56                     __ptext6:
  2622                           	opt stack 0
  2623  002B56                     _emergencystop:
  2624                           	opt stack 20
  2625                           
  2626                           ;main.c: 458: (INTCONbits.GIE = 0);
  2627                           
  2628                           ;incstack = 0
  2629  002B56  9EF2               	bcf	intcon,7,c	;volatile
  2630                           
  2631                           ;main.c: 459: PORTAbits.RA2 = 0;
  2632  002B58  9480               	bcf	3968,2,c	;volatile
  2633                           
  2634                           ;main.c: 460: lcdInst(0b00000001);
  2635  002B5A  0E01               	movlw	1
  2636  002B5C  ECF2  F015         	call	_lcdInst
  2637                           
  2638                           ;main.c: 461: lcdInst(0b10000000);
  2639  002B60  0E80               	movlw	128
  2640  002B62  ECF2  F015         	call	_lcdInst
  2641                           
  2642                           ;main.c: 462: printf("EMERGENCY STOP");
  2643  002B66  0ECD               	movlw	low STR_24
  2644  002B68  0100               	movlb	0	; () banked
  2645  002B6A  6FE0               	movwf	printf@f& (0+255),b
  2646  002B6C  0EFF               	movlw	high STR_24
  2647  002B6E  0100               	movlb	0	; () banked
  2648  002B70  6FE1               	movwf	(printf@f+1)& (0+255),b
  2649  002B72  EC11  F003         	call	_printf	;wreg free
  2650  002B76                     l368:
  2651  002B76  D7FF               	goto	l368
  2652  002B78                     __end_of_emergencystop:
  2653                           	opt stack 0
  2654                           tblptru	equ	0xFF8
  2655                           tblptrh	equ	0xFF7
  2656                           tblptrl	equ	0xFF6
  2657                           tablat	equ	0xFF5
  2658                           intcon	equ	0xFF2
  2659                           intcon2	equ	0xFF1
  2660                           intcon3	equ	0xFF0
  2661                           postinc0	equ	0xFEE
  2662                           wreg	equ	0xFE8
  2663                           postinc2	equ	0xFDE
  2664                           postdec2	equ	0xFDD
  2665                           fsr2h	equ	0xFDA
  2666                           fsr2l	equ	0xFD9
  2667                           status	equ	0xFD8
  2668                           
  2669 ;; *************** function _date_time *****************
  2670 ;; Defined at:
  2671 ;;		line 333 in file "main.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;		None
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  i               1   40[BANK0 ] unsigned char 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;Total ram usage:        1 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:   10
  2692 ;; This function calls:
  2693 ;;		_I2C_Master_Read
  2694 ;;		_I2C_Master_Start
  2695 ;;		_I2C_Master_Stop
  2696 ;;		_I2C_Master_Write
  2697 ;;		_lcdInst
  2698 ;;		_printf
  2699 ;; This function is called by:
  2700 ;;		_main
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	text7
  2705  001C2C                     __ptext7:
  2706                           	opt stack 0
  2707  001C2C                     _date_time:
  2708                           	opt stack 20
  2709                           
  2710                           ;main.c: 335: I2C_Master_Start();
  2711                           
  2712                           ;incstack = 0
  2713  001C2C  EC14  F016         	call	_I2C_Master_Start	;wreg free
  2714                           
  2715                           ;main.c: 336: I2C_Master_Write(0b11010000);
  2716  001C30  0E00               	movlw	0
  2717  001C32  0100               	movlb	0	; () banked
  2718  001C34  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2719  001C36  0ED0               	movlw	208
  2720  001C38  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2721  001C3A  EC06  F016         	call	_I2C_Master_Write	;wreg free
  2722                           
  2723                           ;main.c: 337: I2C_Master_Write(0x00);
  2724  001C3E  0E00               	movlw	0
  2725  001C40  0100               	movlb	0	; () banked
  2726  001C42  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2727  001C44  0E00               	movlw	0
  2728  001C46  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2729  001C48  EC06  F016         	call	_I2C_Master_Write	;wreg free
  2730                           
  2731                           ;main.c: 338: I2C_Master_Stop();
  2732  001C4C  EC10  F016         	call	_I2C_Master_Stop	;wreg free
  2733                           
  2734                           ;main.c: 341: I2C_Master_Start();
  2735  001C50  EC14  F016         	call	_I2C_Master_Start	;wreg free
  2736                           
  2737                           ;main.c: 342: I2C_Master_Write(0b11010001);
  2738  001C54  0E00               	movlw	0
  2739  001C56  0100               	movlb	0	; () banked
  2740  001C58  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2741  001C5A  0ED1               	movlw	209
  2742  001C5C  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2743  001C5E  EC06  F016         	call	_I2C_Master_Write	;wreg free
  2744                           
  2745                           ;main.c: 343: for(unsigned char i=0;i<0x06;i++){
  2746  001C62  0E00               	movlw	0
  2747  001C64  0100               	movlb	0	; () banked
  2748  001C66  6FEC               	movwf	date_time@i& (0+255),b
  2749  001C68                     l4988:
  2750                           
  2751                           ; BSR set to: 0
  2752  001C68  0E05               	movlw	5
  2753  001C6A  0100               	movlb	0	; () banked
  2754  001C6C  65EC               	cpfsgt	date_time@i& (0+255),b
  2755  001C6E  D001               	goto	l4992
  2756  001C70  D010               	goto	l4998
  2757  001C72                     l4992:
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;main.c: 344: time[i] = I2C_Master_Read(1);
  2761  001C72  0100               	movlb	0	; () banked
  2762  001C74  51EC               	movf	date_time@i& (0+255),w,b
  2763  001C76  0D01               	mullw	1
  2764  001C78  0E9E               	movlw	low _time
  2765  001C7A  24F3               	addwf	prodl,w,c
  2766  001C7C  6ED9               	movwf	fsr2l,c
  2767  001C7E  0E00               	movlw	high _time
  2768  001C80  20F4               	addwfc	prodh,w,c
  2769  001C82  6EDA               	movwf	fsr2h,c
  2770  001C84  0E01               	movlw	1
  2771  001C86  EC47  F015         	call	_I2C_Master_Read
  2772  001C8A  6EDF               	movwf	indf2,c
  2773  001C8C  0100               	movlb	0	; () banked
  2774  001C8E  2BEC               	incf	date_time@i& (0+255),f,b
  2775  001C90  D7EB               	goto	l4988
  2776  001C92                     l4998:
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;main.c: 345: }
  2780                           ;main.c: 346: time[6] = I2C_Master_Read(0);
  2781  001C92  0E00               	movlw	0
  2782  001C94  EC47  F015         	call	_I2C_Master_Read
  2783  001C98  0100               	movlb	0	; () banked
  2784  001C9A  6FA4               	movwf	(_time+6)& (0+255),b
  2785                           
  2786                           ;main.c: 347: I2C_Master_Stop();
  2787  001C9C  EC10  F016         	call	_I2C_Master_Stop	;wreg free
  2788                           
  2789                           ;main.c: 350: lcdInst(0b10000000);
  2790  001CA0  0E80               	movlw	128
  2791  001CA2  ECF2  F015         	call	_lcdInst
  2792                           
  2793                           ;main.c: 351: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2794  001CA6  0E93               	movlw	low STR_4
  2795  001CA8  0100               	movlb	0	; () banked
  2796  001CAA  6FE0               	movwf	printf@f& (0+255),b
  2797  001CAC  0EFE               	movlw	high STR_4
  2798  001CAE  0100               	movlb	0	; () banked
  2799  001CB0  6FE1               	movwf	(printf@f+1)& (0+255),b
  2800  001CB2  C0A3  F0E2         	movff	_time+5,?_printf+2
  2801  001CB6  0100               	movlb	0	; () banked
  2802  001CB8  6BE3               	clrf	(?_printf+3)& (0+255),b
  2803  001CBA  C0A2  F0E4         	movff	_time+4,?_printf+4
  2804  001CBE  0100               	movlb	0	; () banked
  2805  001CC0  6BE5               	clrf	(?_printf+5)& (0+255),b
  2806  001CC2  C0A4  F0E6         	movff	_time+6,?_printf+6
  2807  001CC6  0100               	movlb	0	; () banked
  2808  001CC8  6BE7               	clrf	(?_printf+7)& (0+255),b
  2809  001CCA  EC11  F003         	call	_printf	;wreg free
  2810                           
  2811                           ;main.c: 352: lcdInst(0b11000000);
  2812  001CCE  0EC0               	movlw	192
  2813  001CD0  ECF2  F015         	call	_lcdInst
  2814                           
  2815                           ;main.c: 353: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2816  001CD4  0EAA               	movlw	low STR_5
  2817  001CD6  0100               	movlb	0	; () banked
  2818  001CD8  6FE0               	movwf	printf@f& (0+255),b
  2819  001CDA  0EFE               	movlw	high STR_5
  2820  001CDC  0100               	movlb	0	; () banked
  2821  001CDE  6FE1               	movwf	(printf@f+1)& (0+255),b
  2822  001CE0  C0A0  F0E2         	movff	_time+2,?_printf+2
  2823  001CE4  0100               	movlb	0	; () banked
  2824  001CE6  6BE3               	clrf	(?_printf+3)& (0+255),b
  2825  001CE8  C09F  F0E4         	movff	_time+1,?_printf+4
  2826  001CEC  0100               	movlb	0	; () banked
  2827  001CEE  6BE5               	clrf	(?_printf+5)& (0+255),b
  2828  001CF0  C09E  F0E6         	movff	_time,?_printf+6
  2829  001CF4  0100               	movlb	0	; () banked
  2830  001CF6  6BE7               	clrf	(?_printf+7)& (0+255),b
  2831  001CF8  EC11  F003         	call	_printf	;wreg free
  2832  001CFC  0012               	return	
  2833  001CFE                     __end_of_date_time:
  2834                           	opt stack 0
  2835                           tblptru	equ	0xFF8
  2836                           tblptrh	equ	0xFF7
  2837                           tblptrl	equ	0xFF6
  2838                           tablat	equ	0xFF5
  2839                           prodh	equ	0xFF4
  2840                           prodl	equ	0xFF3
  2841                           intcon	equ	0xFF2
  2842                           intcon2	equ	0xFF1
  2843                           intcon3	equ	0xFF0
  2844                           postinc0	equ	0xFEE
  2845                           wreg	equ	0xFE8
  2846                           indf2	equ	0xFDF
  2847                           postinc2	equ	0xFDE
  2848                           postdec2	equ	0xFDD
  2849                           fsr2h	equ	0xFDA
  2850                           fsr2l	equ	0xFD9
  2851                           status	equ	0xFD8
  2852                           
  2853 ;; *************** function _I2C_Master_Read *****************
  2854 ;; Defined at:
  2855 ;;		line 61 in file "I2C.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  a               1    wreg     unsigned char 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  a               1   17[BANK0 ] unsigned char 
  2860 ;;  temp            1   18[BANK0 ] unsigned char 
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      unsigned char 
  2863 ;; Registers used:
  2864 ;;		wreg, status,2, status,0, cstack
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;Total ram usage:        2 bytes
  2875 ;; Hardware stack levels used:    1
  2876 ;; Hardware stack levels required when called:    8
  2877 ;; This function calls:
  2878 ;;		_I2C_Master_Wait
  2879 ;; This function is called by:
  2880 ;;		_date_time
  2881 ;;		_read_colorsensor
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text8
  2886  002A8E                     __ptext8:
  2887                           	opt stack 0
  2888  002A8E                     _I2C_Master_Read:
  2889                           	opt stack 20
  2890                           
  2891                           ;incstack = 0
  2892                           ;I2C_Master_Read@a stored from wreg
  2893  002A8E  0100               	movlb	0	; () banked
  2894  002A90  6FD5               	movwf	I2C_Master_Read@a& (0+255),b
  2895                           
  2896                           ;I2C.c: 63: unsigned char temp;
  2897                           ;I2C.c: 64: I2C_Master_Wait();
  2898  002A92  ECD7  F015         	call	_I2C_Master_Wait	;wreg free
  2899                           
  2900                           ;I2C.c: 65: RCEN = 1;
  2901  002A96  86C5               	bsf	4037,3,c	;volatile
  2902                           
  2903                           ;I2C.c: 66: I2C_Master_Wait();
  2904  002A98  ECD7  F015         	call	_I2C_Master_Wait	;wreg free
  2905                           
  2906                           ;I2C.c: 67: temp = SSPBUF;
  2907  002A9C  CFC9 F0D6          	movff	4041,I2C_Master_Read@temp	;volatile
  2908                           
  2909                           ;I2C.c: 68: I2C_Master_Wait();
  2910  002AA0  ECD7  F015         	call	_I2C_Master_Wait	;wreg free
  2911                           
  2912                           ;I2C.c: 69: ACKDT = (a)?0:1;
  2913  002AA4  0100               	movlb	0	; () banked
  2914  002AA6  51D5               	movf	I2C_Master_Read@a& (0+255),w,b
  2915  002AA8  0100               	movlb	0	; () banked
  2916  002AAA  A4D8               	btfss	status,2,c
  2917  002AAC  D002               	goto	u2920
  2918  002AAE  8AC5               	bsf	4037,5,c	;volatile
  2919  002AB0  D001               	goto	l3388
  2920  002AB2                     u2920:
  2921  002AB2  9AC5               	bcf	4037,5,c	;volatile
  2922  002AB4                     l3388:
  2923                           
  2924                           ;I2C.c: 70: ACKEN = 1;
  2925  002AB4  88C5               	bsf	4037,4,c	;volatile
  2926                           
  2927                           ;I2C.c: 71: return temp;
  2928  002AB6  0100               	movlb	0	; () banked
  2929  002AB8  51D6               	movf	I2C_Master_Read@temp& (0+255),w,b
  2930  002ABA  0012               	return	
  2931  002ABC                     __end_of_I2C_Master_Read:
  2932                           	opt stack 0
  2933                           tblptru	equ	0xFF8
  2934                           tblptrh	equ	0xFF7
  2935                           tblptrl	equ	0xFF6
  2936                           tablat	equ	0xFF5
  2937                           prodh	equ	0xFF4
  2938                           prodl	equ	0xFF3
  2939                           intcon	equ	0xFF2
  2940                           intcon2	equ	0xFF1
  2941                           intcon3	equ	0xFF0
  2942                           postinc0	equ	0xFEE
  2943                           wreg	equ	0xFE8
  2944                           indf2	equ	0xFDF
  2945                           postinc2	equ	0xFDE
  2946                           postdec2	equ	0xFDD
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _bottle_time *****************
  2952 ;; Defined at:
  2953 ;;		line 418 in file "main.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  time            2   40[BANK0 ] int 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;		None
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      void 
  2960 ;; Registers used:
  2961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2967 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;Total ram usage:        2 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:   10
  2974 ;; This function calls:
  2975 ;;		_lcdInst
  2976 ;;		_printf
  2977 ;; This function is called by:
  2978 ;;		_main
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text9
  2983  0029EE                     __ptext9:
  2984                           	opt stack 0
  2985  0029EE                     _bottle_time:
  2986                           	opt stack 20
  2987                           
  2988                           ;main.c: 419: lcdInst(0b10000000);
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;incstack = 0
  2992  0029EE  0E80               	movlw	128
  2993  0029F0  ECF2  F015         	call	_lcdInst
  2994                           
  2995                           ;main.c: 420: printf("Total Operation       ");
  2996  0029F4  0E7C               	movlw	low STR_17
  2997  0029F6  0100               	movlb	0	; () banked
  2998  0029F8  6FE0               	movwf	printf@f& (0+255),b
  2999  0029FA  0EFE               	movlw	high STR_17
  3000  0029FC  0100               	movlb	0	; () banked
  3001  0029FE  6FE1               	movwf	(printf@f+1)& (0+255),b
  3002  002A00  EC11  F003         	call	_printf	;wreg free
  3003                           
  3004                           ;main.c: 421: lcdInst(0b11000000);
  3005  002A04  0EC0               	movlw	192
  3006  002A06  ECF2  F015         	call	_lcdInst
  3007                           
  3008                           ;main.c: 422: printf("Time: %d s       ", time);
  3009  002A0A  0ED7               	movlw	low STR_18
  3010  002A0C  0100               	movlb	0	; () banked
  3011  002A0E  6FE0               	movwf	printf@f& (0+255),b
  3012  002A10  0EFE               	movlw	high STR_18
  3013  002A12  0100               	movlb	0	; () banked
  3014  002A14  6FE1               	movwf	(printf@f+1)& (0+255),b
  3015  002A16  C0EC  F0E2         	movff	bottle_time@time,?_printf+2
  3016  002A1A  C0ED  F0E3         	movff	bottle_time@time+1,?_printf+3
  3017  002A1E  EC11  F003         	call	_printf	;wreg free
  3018  002A22  0012               	return	
  3019  002A24                     __end_of_bottle_time:
  3020                           	opt stack 0
  3021                           tblptru	equ	0xFF8
  3022                           tblptrh	equ	0xFF7
  3023                           tblptrl	equ	0xFF6
  3024                           tablat	equ	0xFF5
  3025                           prodh	equ	0xFF4
  3026                           prodl	equ	0xFF3
  3027                           intcon	equ	0xFF2
  3028                           intcon2	equ	0xFF1
  3029                           intcon3	equ	0xFF0
  3030                           postinc0	equ	0xFEE
  3031                           wreg	equ	0xFE8
  3032                           indf2	equ	0xFDF
  3033                           postinc2	equ	0xFDE
  3034                           postdec2	equ	0xFDD
  3035                           fsr2h	equ	0xFDA
  3036                           fsr2l	equ	0xFD9
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function _bottle_count *****************
  3040 ;; Defined at:
  3041 ;;		line 376 in file "main.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;		None
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;Total ram usage:        0 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:   10
  3062 ;; This function calls:
  3063 ;;		___awmod
  3064 ;;		_lcdInst
  3065 ;;		_printf
  3066 ;; This function is called by:
  3067 ;;		_main
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text10
  3072  001076                     __ptext10:
  3073                           	opt stack 0
  3074  001076                     _bottle_count:
  3075                           	opt stack 20
  3076                           
  3077                           ;main.c: 377: switch(bottle_count_disp % 5){
  3078                           
  3079                           ;incstack = 0
  3080  001076  D0A9               	goto	l5044
  3081  001078                     l5008:
  3082                           
  3083                           ;main.c: 379: lcdInst(0b10000000);
  3084  001078  0E80               	movlw	128
  3085  00107A  ECF2  F015         	call	_lcdInst
  3086                           
  3087                           ;main.c: 380: printf("Bottle Count    ");
  3088  00107E  0EAC               	movlw	low STR_6
  3089  001080  0100               	movlb	0	; () banked
  3090  001082  6FE0               	movwf	printf@f& (0+255),b
  3091  001084  0EFF               	movlw	high STR_6
  3092  001086  0100               	movlb	0	; () banked
  3093  001088  6FE1               	movwf	(printf@f+1)& (0+255),b
  3094  00108A  EC11  F003         	call	_printf	;wreg free
  3095                           
  3096                           ;main.c: 381: lcdInst(0b11000000);
  3097  00108E  0EC0               	movlw	192
  3098  001090  ECF2  F015         	call	_lcdInst
  3099                           
  3100                           ;main.c: 382: printf("Total: %d       ", bottle_count);
  3101  001094  0E9B               	movlw	low STR_7
  3102  001096  0100               	movlb	0	; () banked
  3103  001098  6FE0               	movwf	printf@f& (0+255),b
  3104  00109A  0EFF               	movlw	high STR_7
  3105  00109C  0100               	movlb	0	; () banked
  3106  00109E  6FE1               	movwf	(printf@f+1)& (0+255),b
  3107  0010A0  0E76               	movlw	low _bottle_count
  3108  0010A2  0100               	movlb	0	; () banked
  3109  0010A4  6FE2               	movwf	(?_printf+2)& (0+255),b
  3110  0010A6  0E10               	movlw	high _bottle_count
  3111  0010A8  0100               	movlb	0	; () banked
  3112  0010AA  6FE3               	movwf	(?_printf+3)& (0+255),b
  3113  0010AC  EC11  F003         	call	_printf	;wreg free
  3114                           
  3115                           ;main.c: 383: break;
  3116  0010B0  0012               	return	
  3117  0010B2                     l5014:
  3118                           
  3119                           ;main.c: 385: lcdInst(0b10000000);
  3120  0010B2  0E80               	movlw	128
  3121  0010B4  ECF2  F015         	call	_lcdInst
  3122                           
  3123                           ;main.c: 386: printf("YOP+CAP+LBL: %d  ", yopcaplbl_count);
  3124  0010B8  0EE9               	movlw	low STR_8
  3125  0010BA  0100               	movlb	0	; () banked
  3126  0010BC  6FE0               	movwf	printf@f& (0+255),b
  3127  0010BE  0EFE               	movlw	high STR_8
  3128  0010C0  0100               	movlb	0	; () banked
  3129  0010C2  6FE1               	movwf	(printf@f+1)& (0+255),b
  3130  0010C4  C0BF  F0E2         	movff	_yopcaplbl_count,?_printf+2
  3131  0010C8  C0C0  F0E3         	movff	_yopcaplbl_count+1,?_printf+3
  3132  0010CC  EC11  F003         	call	_printf	;wreg free
  3133                           
  3134                           ;main.c: 387: lcdInst(0b11000000);
  3135  0010D0  0EC0               	movlw	192
  3136  0010D2  ECF2  F015         	call	_lcdInst
  3137                           
  3138                           ;main.c: 388: printf("YOP+CAP-LBL: %d  ", yopcap_count);
  3139  0010D6  0E0D               	movlw	low STR_9
  3140  0010D8  0100               	movlb	0	; () banked
  3141  0010DA  6FE0               	movwf	printf@f& (0+255),b
  3142  0010DC  0EFF               	movlw	high STR_9
  3143  0010DE  0100               	movlb	0	; () banked
  3144  0010E0  6FE1               	movwf	(printf@f+1)& (0+255),b
  3145  0010E2  C0BD  F0E2         	movff	_yopcap_count,?_printf+2
  3146  0010E6  C0BE  F0E3         	movff	_yopcap_count+1,?_printf+3
  3147  0010EA  EC11  F003         	call	_printf	;wreg free
  3148                           
  3149                           ;main.c: 389: break;
  3150  0010EE  0012               	return	
  3151  0010F0                     l5020:
  3152                           
  3153                           ;main.c: 391: lcdInst(0b10000000);
  3154  0010F0  0E80               	movlw	128
  3155  0010F2  ECF2  F015         	call	_lcdInst
  3156                           
  3157                           ;main.c: 392: printf("YOP-CAP+LBL: %d  ", yoplbl_count);
  3158  0010F6  0EFB               	movlw	low STR_10
  3159  0010F8  0100               	movlb	0	; () banked
  3160  0010FA  6FE0               	movwf	printf@f& (0+255),b
  3161  0010FC  0EFE               	movlw	high STR_10
  3162  0010FE  0100               	movlb	0	; () banked
  3163  001100  6FE1               	movwf	(printf@f+1)& (0+255),b
  3164  001102  C0C1  F0E2         	movff	_yoplbl_count,?_printf+2
  3165  001106  C0C2  F0E3         	movff	_yoplbl_count+1,?_printf+3
  3166  00110A  EC11  F003         	call	_printf	;wreg free
  3167                           
  3168                           ;main.c: 393: lcdInst(0b11000000);
  3169  00110E  0EC0               	movlw	192
  3170  001110  ECF2  F015         	call	_lcdInst
  3171                           
  3172                           ;main.c: 394: printf("YOP-CAP-LBL: %d  ", yop_count);
  3173  001114  0E1F               	movlw	low STR_11
  3174  001116  0100               	movlb	0	; () banked
  3175  001118  6FE0               	movwf	printf@f& (0+255),b
  3176  00111A  0EFF               	movlw	high STR_11
  3177  00111C  0100               	movlb	0	; () banked
  3178  00111E  6FE1               	movwf	(printf@f+1)& (0+255),b
  3179  001120  C0BB  F0E2         	movff	_yop_count,?_printf+2
  3180  001124  C0BC  F0E3         	movff	_yop_count+1,?_printf+3
  3181  001128  EC11  F003         	call	_printf	;wreg free
  3182                           
  3183                           ;main.c: 395: break;
  3184  00112C  0012               	return	
  3185  00112E                     l5026:
  3186                           
  3187                           ;main.c: 397: lcdInst(0b10000000);
  3188  00112E  0E80               	movlw	128
  3189  001130  ECF2  F015         	call	_lcdInst
  3190                           
  3191                           ;main.c: 398: printf("ESKA+CAP+LBL: %d ", eskacaplbl_count);
  3192  001134  0E31               	movlw	low STR_12
  3193  001136  0100               	movlb	0	; () banked
  3194  001138  6FE0               	movwf	printf@f& (0+255),b
  3195  00113A  0EFF               	movlw	high STR_12
  3196  00113C  0100               	movlb	0	; () banked
  3197  00113E  6FE1               	movwf	(printf@f+1)& (0+255),b
  3198  001140  C0AD  F0E2         	movff	_eskacaplbl_count,?_printf+2
  3199  001144  C0AE  F0E3         	movff	_eskacaplbl_count+1,?_printf+3
  3200  001148  EC11  F003         	call	_printf	;wreg free
  3201                           
  3202                           ;main.c: 399: lcdInst(0b11000000);
  3203  00114C  0EC0               	movlw	192
  3204  00114E  ECF2  F015         	call	_lcdInst
  3205                           
  3206                           ;main.c: 400: printf("ESKA+CAP-LBL: %d ", eskacap_count);
  3207  001152  0E55               	movlw	low STR_13
  3208  001154  0100               	movlb	0	; () banked
  3209  001156  6FE0               	movwf	printf@f& (0+255),b
  3210  001158  0EFF               	movlw	high STR_13
  3211  00115A  0100               	movlb	0	; () banked
  3212  00115C  6FE1               	movwf	(printf@f+1)& (0+255),b
  3213  00115E  C0AB  F0E2         	movff	_eskacap_count,?_printf+2
  3214  001162  C0AC  F0E3         	movff	_eskacap_count+1,?_printf+3
  3215  001166  EC11  F003         	call	_printf	;wreg free
  3216                           
  3217                           ;main.c: 401: break;
  3218  00116A  0012               	return	
  3219  00116C                     l5032:
  3220                           
  3221                           ;main.c: 403: lcdInst(0b10000000);
  3222  00116C  0E80               	movlw	128
  3223  00116E  ECF2  F015         	call	_lcdInst
  3224                           
  3225                           ;main.c: 404: printf("ESKA-CAP+LBL: %d ", eskalbl_count);
  3226  001172  0E43               	movlw	low STR_14
  3227  001174  0100               	movlb	0	; () banked
  3228  001176  6FE0               	movwf	printf@f& (0+255),b
  3229  001178  0EFF               	movlw	high STR_14
  3230  00117A  0100               	movlb	0	; () banked
  3231  00117C  6FE1               	movwf	(printf@f+1)& (0+255),b
  3232  00117E  C0AF  F0E2         	movff	_eskalbl_count,?_printf+2
  3233  001182  C0B0  F0E3         	movff	_eskalbl_count+1,?_printf+3
  3234  001186  EC11  F003         	call	_printf	;wreg free
  3235                           
  3236                           ;main.c: 405: lcdInst(0b11000000);
  3237  00118A  0EC0               	movlw	192
  3238  00118C  ECF2  F015         	call	_lcdInst
  3239                           
  3240                           ;main.c: 406: printf("ESKA-CAP-LBL: %d ", eska_count);
  3241  001190  0E67               	movlw	low STR_15
  3242  001192  0100               	movlb	0	; () banked
  3243  001194  6FE0               	movwf	printf@f& (0+255),b
  3244  001196  0EFF               	movlw	high STR_15
  3245  001198  0100               	movlb	0	; () banked
  3246  00119A  6FE1               	movwf	(printf@f+1)& (0+255),b
  3247  00119C  C0A9  F0E2         	movff	_eska_count,?_printf+2
  3248  0011A0  C0AA  F0E3         	movff	_eska_count+1,?_printf+3
  3249  0011A4  EC11  F003         	call	_printf	;wreg free
  3250                           
  3251                           ;main.c: 407: break;
  3252  0011A8  0012               	return	
  3253  0011AA                     l5038:
  3254                           
  3255                           ;main.c: 410: lcdInst(0b10000000);
  3256  0011AA  0E80               	movlw	128
  3257  0011AC  ECF2  F015         	call	_lcdInst
  3258                           
  3259                           ;main.c: 411: printf("ERROR: %d", bottle_count_disp);
  3260  0011B0  0EF4               	movlw	low STR_16
  3261  0011B2  0100               	movlb	0	; () banked
  3262  0011B4  6FE0               	movwf	printf@f& (0+255),b
  3263  0011B6  0EFF               	movlw	high STR_16
  3264  0011B8  0100               	movlb	0	; () banked
  3265  0011BA  6FE1               	movwf	(printf@f+1)& (0+255),b
  3266  0011BC  C0EE  F0E2         	movff	_bottle_count_disp,?_printf+2
  3267  0011C0  C0EF  F0E3         	movff	_bottle_count_disp+1,?_printf+3
  3268  0011C4  EC11  F003         	call	_printf	;wreg free
  3269  0011C8  D7F0               	goto	l5038
  3270  0011CA                     l5044:
  3271  0011CA  C0EE  F0D4         	movff	_bottle_count_disp,___awmod@dividend
  3272  0011CE  C0EF  F0D5         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3273  0011D2  0E00               	movlw	0
  3274  0011D4  0100               	movlb	0	; () banked
  3275  0011D6  6FD7               	movwf	(___awmod@divisor+1)& (0+255),b
  3276  0011D8  0E05               	movlw	5
  3277  0011DA  6FD6               	movwf	___awmod@divisor& (0+255),b
  3278  0011DC  EC5A  F011         	call	___awmod	;wreg free
  3279                           
  3280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3281                           ; Switch size 1, requested type "space"
  3282                           ; Number of cases is 1, Range of values is 0 to 0
  3283                           ; switch strategies available:
  3284                           ; Name         Instructions Cycles
  3285                           ; simple_byte            4     3 (average)
  3286                           ;	Chosen strategy is simple_byte
  3287  0011E0  0100               	movlb	0	; () banked
  3288  0011E2  51D5               	movf	(?___awmod+1)& (0+255),w,b
  3289  0011E4  0A00               	xorlw	0	; case 0
  3290  0011E6  A4D8               	btfss	status,2,c
  3291  0011E8  D7E0               	goto	l5038
  3292                           
  3293                           ; BSR set to: 0
  3294                           ; Switch size 1, requested type "space"
  3295                           ; Number of cases is 5, Range of values is 0 to 4
  3296                           ; switch strategies available:
  3297                           ; Name         Instructions Cycles
  3298                           ; simple_byte           16     9 (average)
  3299                           ;	Chosen strategy is simple_byte
  3300  0011EA  0100               	movlb	0	; () banked
  3301  0011EC  51D4               	movf	?___awmod& (0+255),w,b
  3302  0011EE  0A00               	xorlw	0	; case 0
  3303  0011F0  B4D8               	btfsc	status,2,c
  3304  0011F2  D742               	goto	l5008
  3305  0011F4  0A01               	xorlw	1	; case 1
  3306  0011F6  B4D8               	btfsc	status,2,c
  3307  0011F8  D75C               	goto	l5014
  3308  0011FA  0A03               	xorlw	3	; case 2
  3309  0011FC  B4D8               	btfsc	status,2,c
  3310  0011FE  D778               	goto	l5020
  3311  001200  0A01               	xorlw	1	; case 3
  3312  001202  B4D8               	btfsc	status,2,c
  3313  001204  D794               	goto	l5026
  3314  001206  0A07               	xorlw	7	; case 4
  3315  001208  B4D8               	btfsc	status,2,c
  3316  00120A  D7B0               	goto	l5032
  3317  00120C  D7CE               	goto	l5038
  3318  00120E                     __end_of_bottle_count:
  3319                           	opt stack 0
  3320                           tblptru	equ	0xFF8
  3321                           tblptrh	equ	0xFF7
  3322                           tblptrl	equ	0xFF6
  3323                           tablat	equ	0xFF5
  3324                           prodh	equ	0xFF4
  3325                           prodl	equ	0xFF3
  3326                           intcon	equ	0xFF2
  3327                           intcon2	equ	0xFF1
  3328                           intcon3	equ	0xFF0
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           indf2	equ	0xFDF
  3332                           postinc2	equ	0xFDE
  3333                           postdec2	equ	0xFDD
  3334                           fsr2h	equ	0xFDA
  3335                           fsr2l	equ	0xFD9
  3336                           status	equ	0xFD8
  3337                           
  3338 ;; *************** function _printf *****************
  3339 ;; Defined at:
  3340 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3343 ;;		 -> STR_24(15), STR_23(16), STR_22(22), STR_21(25), 
  3344 ;;		 -> STR_20(24), STR_19(23), STR_18(18), STR_17(23), 
  3345 ;;		 -> STR_16(10), STR_15(18), STR_14(18), STR_13(18), 
  3346 ;;		 -> STR_12(18), STR_11(18), STR_10(18), STR_9(18), 
  3347 ;;		 -> STR_8(18), STR_7(17), STR_6(17), STR_5(23), 
  3348 ;;		 -> STR_4(23), STR_3(10), STR_2(17), STR_1(14), 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  idx             1    0[BANK1 ] unsigned char 
  3351 ;;  tmpval          4    0        struct .
  3352 ;;  cp              3    0        PTR const unsigned char 
  3353 ;;  width           2    7[BANK1 ] int 
  3354 ;;  val             2    4[BANK1 ] unsigned int 
  3355 ;;  ap              2    1[BANK1 ] PTR void [1]
  3356 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3357 ;;  len             2    0        unsigned int 
  3358 ;;  c               1    9[BANK1 ] char 
  3359 ;;  flag            1    6[BANK1 ] unsigned char 
  3360 ;;  prec            1    3[BANK1 ] char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  2   28[BANK0 ] int 
  3363 ;; Registers used:
  3364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3370 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Totals:         0      12      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;Total ram usage:       22 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    9
  3377 ;; This function calls:
  3378 ;;		___lwdiv
  3379 ;;		___lwmod
  3380 ;;		___wmul
  3381 ;;		_isdigit
  3382 ;;		_putch
  3383 ;; This function is called by:
  3384 ;;		_standby
  3385 ;;		_date_time
  3386 ;;		_bottle_count
  3387 ;;		_bottle_time
  3388 ;;		_operation
  3389 ;;		_operationend
  3390 ;;		_emergencystop
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text11
  3395  000622                     __ptext11:
  3396                           	opt stack 0
  3397  000622                     _printf:
  3398                           	opt stack 20
  3399                           
  3400                           ;doprnt.c: 466: va_list ap;
  3401                           ;doprnt.c: 499: signed char c;
  3402                           ;doprnt.c: 501: int width;
  3403                           ;doprnt.c: 506: signed char prec;
  3404                           ;doprnt.c: 508: unsigned char flag;
  3405                           ;doprnt.c: 523: union {
  3406                           ;doprnt.c: 524: unsigned long vd;
  3407                           ;doprnt.c: 525: double integ;
  3408                           ;doprnt.c: 526: } tmpval;
  3409                           ;doprnt.c: 528: unsigned int val;
  3410                           ;doprnt.c: 529: unsigned len;
  3411                           ;doprnt.c: 530: const char * cp;
  3412                           ;doprnt.c: 533: *ap = __va_start();
  3413                           
  3414                           ;incstack = 0
  3415  000622  0EE2               	movlw	low (?_printf+2)
  3416  000624  0101               	movlb	1	; () banked
  3417  000626  6F01               	movwf	printf@ap& (0+255),b
  3418  000628  0E00               	movlw	high (?_printf+2)
  3419  00062A  0101               	movlb	1	; () banked
  3420  00062C  6F02               	movwf	(printf@ap+1)& (0+255),b
  3421                           
  3422                           ;doprnt.c: 536: while(c = *f++) {
  3423  00062E  D1C4               	goto	l4908
  3424  000630                     l4782:
  3425                           
  3426                           ; BSR set to: 1
  3427                           ;doprnt.c: 538: if(c != '%')
  3428  000630  0E25               	movlw	37
  3429  000632  0101               	movlb	1	; () banked
  3430  000634  1909               	xorwf	printf@c& (0+255),w,b
  3431  000636  B4D8               	btfsc	status,2,c
  3432  000638  D005               	goto	l4786
  3433                           
  3434                           ; BSR set to: 1
  3435                           ;doprnt.c: 540: {
  3436                           ;doprnt.c: 541: (putch(c) );
  3437  00063A  0101               	movlb	1	; () banked
  3438  00063C  5109               	movf	printf@c& (0+255),w,b
  3439  00063E  ECEA  F015         	call	_putch
  3440                           
  3441                           ;doprnt.c: 542: continue;
  3442  000642  D1BA               	goto	l4908
  3443  000644                     l4786:
  3444                           
  3445                           ;doprnt.c: 543: }
  3446                           ;doprnt.c: 546: width = 0;
  3447  000644  0E00               	movlw	0
  3448  000646  0101               	movlb	1	; () banked
  3449  000648  6F08               	movwf	(printf@width+1)& (0+255),b
  3450  00064A  0E00               	movlw	0
  3451  00064C  6F07               	movwf	printf@width& (0+255),b
  3452                           
  3453                           ;doprnt.c: 548: flag = 0;
  3454  00064E  0E00               	movlw	0
  3455  000650  0101               	movlb	1	; () banked
  3456  000652  6F06               	movwf	printf@flag& (0+255),b
  3457                           
  3458                           ; BSR set to: 1
  3459                           ;doprnt.c: 551: switch(*f) {
  3460                           
  3461                           ;doprnt.c: 550: for(;;) {
  3462  000654  D005               	goto	l4792
  3463  000656                     l4788:
  3464                           
  3465                           ;doprnt.c: 580: flag |= 0x04;
  3466  000656  0101               	movlb	1	; () banked
  3467  000658  8506               	bsf	printf@flag& (0+255),2,b
  3468                           
  3469                           ;doprnt.c: 581: f++;
  3470  00065A  0100               	movlb	0	; () banked
  3471  00065C  4BE0               	infsnz	printf@f& (0+255),f,b
  3472  00065E  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3473  000660                     l4792:
  3474  000660  C0E0  FFF6         	movff	printf@f,tblptrl
  3475  000664  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3476  000668                     	if	0	;tblptru may be non-zero
  3477  000668                     	endif
  3478  000668                     	if	0	;tblptru may be non-zero
  3479  000668                     	endif
  3480  000668  0008               	tblrd		*
  3481  00066A  50F5               	movf	tablat,w,c
  3482                           
  3483                           ; Switch size 1, requested type "space"
  3484                           ; Number of cases is 1, Range of values is 48 to 48
  3485                           ; switch strategies available:
  3486                           ; Name         Instructions Cycles
  3487                           ; simple_byte            4     3 (average)
  3488                           ;	Chosen strategy is simple_byte
  3489  00066C  0A30               	xorlw	48	; case 48
  3490  00066E  B4D8               	btfsc	status,2,c
  3491  000670  D7F2               	goto	l4788
  3492                           
  3493                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3494                           
  3495                           ;doprnt.c: 586: }
  3496                           
  3497                           ;doprnt.c: 585: break;
  3498  000672  C0E0  FFF6         	movff	printf@f,tblptrl
  3499  000676  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3500  00067A                     	if	0	;tblptru may be non-zero
  3501  00067A                     	endif
  3502  00067A                     	if	0	;tblptru may be non-zero
  3503  00067A                     	endif
  3504  00067A  0008               	tblrd		*
  3505  00067C  50F5               	movf	tablat,w,c
  3506  00067E  EC5E  F015         	call	_isdigit
  3507  000682  A0D8               	btfss	status,0,c
  3508  000684  D044               	goto	l4810
  3509                           
  3510                           ;doprnt.c: 598: width = 0;
  3511  000686  0E00               	movlw	0
  3512  000688  0101               	movlb	1	; () banked
  3513  00068A  6F08               	movwf	(printf@width+1)& (0+255),b
  3514  00068C  0E00               	movlw	0
  3515  00068E  6F07               	movwf	printf@width& (0+255),b
  3516  000690                     l4798:
  3517                           
  3518                           ;doprnt.c: 600: width *= 10;
  3519  000690  C107  F0D4         	movff	printf@width,___wmul@multiplier
  3520  000694  C108  F0D5         	movff	printf@width+1,___wmul@multiplier+1
  3521  000698  0E00               	movlw	0
  3522  00069A  0100               	movlb	0	; () banked
  3523  00069C  6FD7               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3524  00069E  0E0A               	movlw	10
  3525  0006A0  6FD6               	movwf	___wmul@multiplicand& (0+255),b
  3526  0006A2  EC12  F015         	call	___wmul	;wreg free
  3527  0006A6  C0D4  F107         	movff	?___wmul,printf@width
  3528  0006AA  C0D5  F108         	movff	?___wmul+1,printf@width+1
  3529                           
  3530                           ;doprnt.c: 601: width += *f++ - '0';
  3531  0006AE  0ED0               	movlw	208
  3532  0006B0  0100               	movlb	0	; () banked
  3533  0006B2  6FE8               	movwf	??_printf& (0+255),b
  3534  0006B4  0EFF               	movlw	255
  3535  0006B6  0100               	movlb	0	; () banked
  3536  0006B8  6FE9               	movwf	(??_printf+1)& (0+255),b
  3537  0006BA  C0E0  FFF6         	movff	printf@f,tblptrl
  3538  0006BE  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3539  0006C2                     	if	0	;tblptru may be non-zero
  3540  0006C2                     	endif
  3541  0006C2                     	if	0	;tblptru may be non-zero
  3542  0006C2                     	endif
  3543  0006C2  0008               	tblrd		*
  3544  0006C4  50F5               	movf	tablat,w,c
  3545  0006C6  0100               	movlb	0	; () banked
  3546  0006C8  6FEA               	movwf	(??_printf+2)& (0+255),b
  3547  0006CA  6BEB               	clrf	(??_printf+3)& (0+255),b
  3548  0006CC  0100               	movlb	0	; () banked
  3549  0006CE  51E8               	movf	??_printf& (0+255),w,b
  3550  0006D0  0100               	movlb	0	; () banked
  3551  0006D2  27EA               	addwf	(??_printf+2)& (0+255),f,b
  3552  0006D4  0100               	movlb	0	; () banked
  3553  0006D6  51E9               	movf	(??_printf+1)& (0+255),w,b
  3554  0006D8  0100               	movlb	0	; () banked
  3555  0006DA  23EB               	addwfc	(??_printf+3)& (0+255),f,b
  3556  0006DC  0100               	movlb	0	; () banked
  3557  0006DE  51EA               	movf	(??_printf+2)& (0+255),w,b
  3558  0006E0  0101               	movlb	1	; () banked
  3559  0006E2  2707               	addwf	printf@width& (0+255),f,b
  3560  0006E4  0100               	movlb	0	; () banked
  3561  0006E6  51EB               	movf	(??_printf+3)& (0+255),w,b
  3562  0006E8  0101               	movlb	1	; () banked
  3563  0006EA  2308               	addwfc	(printf@width+1)& (0+255),f,b
  3564                           
  3565                           ; BSR set to: 1
  3566  0006EC  0100               	movlb	0	; () banked
  3567  0006EE  4BE0               	infsnz	printf@f& (0+255),f,b
  3568  0006F0  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3572  0006F2  C0E0  FFF6         	movff	printf@f,tblptrl
  3573  0006F6  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3574  0006FA                     	if	0	;tblptru may be non-zero
  3575  0006FA                     	endif
  3576  0006FA                     	if	0	;tblptru may be non-zero
  3577  0006FA                     	endif
  3578  0006FA  0008               	tblrd		*
  3579  0006FC  50F5               	movf	tablat,w,c
  3580  0006FE  EC5E  F015         	call	_isdigit
  3581  000702  A0D8               	btfss	status,0,c
  3582  000704  D004               	goto	l4810
  3583  000706  D7C4               	goto	l4798
  3584  000708                     l4806:
  3585                           
  3586                           ;doprnt.c: 721: flag |= 0x80;
  3587  000708  0101               	movlb	1	; () banked
  3588  00070A  8F06               	bsf	printf@flag& (0+255),7,b
  3589                           
  3590                           ;doprnt.c: 723: break;
  3591  00070C  D019               	goto	l441
  3592  00070E                     l4810:
  3593  00070E  C0E0  FFF6         	movff	printf@f,tblptrl
  3594  000712  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3595  000716  0100               	movlb	0	; () banked
  3596  000718  4BE0               	infsnz	printf@f& (0+255),f,b
  3597  00071A  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3598  00071C                     	if	0	;tblptru may be non-zero
  3599  00071C                     	endif
  3600  00071C                     	if	0	;tblptru may be non-zero
  3601  00071C                     	endif
  3602  00071C  0008               	tblrd		*
  3603  00071E  CFF5 F109          	movff	tablat,printf@c
  3604  000722  0101               	movlb	1	; () banked
  3605  000724  5109               	movf	printf@c& (0+255),w,b
  3606                           
  3607                           ; Switch size 1, requested type "space"
  3608                           ; Number of cases is 4, Range of values is 0 to 120
  3609                           ; switch strategies available:
  3610                           ; Name         Instructions Cycles
  3611                           ; simple_byte           13     7 (average)
  3612                           ;	Chosen strategy is simple_byte
  3613  000726  0A00               	xorlw	0	; case 0
  3614  000728  B4D8               	btfsc	status,2,c
  3615  00072A  0012               	return	
  3616  00072C  0A64               	xorlw	100	; case 100
  3617  00072E  B4D8               	btfsc	status,2,c
  3618  000730  D007               	goto	l441
  3619  000732  0A0D               	xorlw	13	; case 105
  3620  000734  B4D8               	btfsc	status,2,c
  3621  000736  D004               	goto	l441
  3622  000738  0A11               	xorlw	17	; case 120
  3623  00073A  B4D8               	btfsc	status,2,c
  3624  00073C  D7E5               	goto	l4806
  3625  00073E  D13C               	goto	l4908
  3626  000740                     l441:
  3627                           
  3628                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3629  000740  0101               	movlb	1	; () banked
  3630  000742  BF06               	btfsc	printf@flag& (0+255),7,b
  3631  000744  D019               	goto	l4822
  3632                           
  3633                           ; BSR set to: 1
  3634                           ;doprnt.c: 1253: {
  3635                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3636  000746  C101  FFD9         	movff	printf@ap,fsr2l
  3637  00074A  C102  FFDA         	movff	printf@ap+1,fsr2h
  3638  00074E  CFDE F104          	movff	postinc2,printf@val
  3639  000752  CFDD F105          	movff	postdec2,printf@val+1
  3640                           
  3641                           ; BSR set to: 1
  3642  000756  0E02               	movlw	2
  3643  000758  0101               	movlb	1	; () banked
  3644  00075A  2701               	addwf	printf@ap& (0+255),f,b
  3645  00075C  0E00               	movlw	0
  3646  00075E  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3647                           
  3648                           ; BSR set to: 1
  3649                           ;doprnt.c: 1261: if((int)val < 0) {
  3650  000760  0101               	movlb	1	; () banked
  3651  000762  AF05               	btfss	(printf@val+1)& (0+255),7,b
  3652  000764  D053               	goto	l4856
  3653                           
  3654                           ; BSR set to: 1
  3655                           ;doprnt.c: 1262: flag |= 0x03;
  3656  000766  0E03               	movlw	3
  3657  000768  0101               	movlb	1	; () banked
  3658  00076A  1306               	iorwf	printf@flag& (0+255),f,b
  3659                           
  3660                           ; BSR set to: 1
  3661                           ;doprnt.c: 1263: val = -val;
  3662  00076C  0101               	movlb	1	; () banked
  3663  00076E  6D04               	negf	printf@val& (0+255),b
  3664  000770  1F05               	comf	(printf@val+1)& (0+255),f,b
  3665  000772  B0D8               	btfsc	status,0,c
  3666  000774  2B05               	incf	(printf@val+1)& (0+255),f,b
  3667                           
  3668                           ; BSR set to: 1
  3669                           ;doprnt.c: 1264: }
  3670                           ;doprnt.c: 1266: }
  3671  000776  D04A               	goto	l4856
  3672  000778                     l4822:
  3673                           
  3674                           ; BSR set to: 1
  3675                           ;doprnt.c: 1268: else
  3676                           ;doprnt.c: 1273: {
  3677                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3678  000778  C101  FFD9         	movff	printf@ap,fsr2l
  3679  00077C  C102  FFDA         	movff	printf@ap+1,fsr2h
  3680  000780  CFDE F104          	movff	postinc2,printf@val
  3681  000784  CFDD F105          	movff	postdec2,printf@val+1
  3682                           
  3683                           ; BSR set to: 1
  3684  000788  0E02               	movlw	2
  3685  00078A  0101               	movlb	1	; () banked
  3686  00078C  2701               	addwf	printf@ap& (0+255),f,b
  3687  00078E  0E00               	movlw	0
  3688  000790  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3689                           
  3690                           ; BSR set to: 1
  3691                           ;doprnt.c: 1287: }
  3692                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3693  000792  D03C               	goto	l4856
  3694  000794                     l4826:
  3695                           
  3696                           ; BSR set to: 1
  3697                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3698  000794  0E01               	movlw	1
  3699  000796  0101               	movlb	1	; () banked
  3700  000798  6F09               	movwf	printf@c& (0+255),b
  3701  00079A                     l4828:
  3702                           
  3703                           ; BSR set to: 1
  3704  00079A  0E05               	movlw	5
  3705  00079C  0101               	movlb	1	; () banked
  3706  00079E  1909               	xorwf	printf@c& (0+255),w,b
  3707  0007A0  B4D8               	btfsc	status,2,c
  3708  0007A2  D03D               	goto	l4858
  3709                           
  3710                           ; BSR set to: 1
  3711                           ;doprnt.c: 1306: if(val < dpowers[c])
  3712                           
  3713                           ; BSR set to: 1
  3714                           
  3715                           ; BSR set to: 1
  3716  0007A4  0101               	movlb	1	; () banked
  3717  0007A6  5109               	movf	printf@c& (0+255),w,b
  3718  0007A8  0D02               	mullw	2
  3719  0007AA  0EE2               	movlw	low _dpowers
  3720  0007AC  24F3               	addwf	prodl,w,c
  3721  0007AE  6EF6               	movwf	tblptrl,c
  3722  0007B0  0EFD               	movlw	high _dpowers
  3723  0007B2  20F4               	addwfc	prodh,w,c
  3724  0007B4  6EF7               	movwf	tblptrh,c
  3725  0007B6                     	if	0	;There are less than 3 active tblptr bytes
  3726  0007B6                     	endif
  3727  0007B6  0009               	tblrd		*+
  3728  0007B8  50F5               	movf	tablat,w,c
  3729  0007BA  0101               	movlb	1	; () banked
  3730  0007BC  5D04               	subwf	printf@val& (0+255),w,b
  3731  0007BE  0009               	tblrd		*+
  3732  0007C0  50F5               	movf	tablat,w,c
  3733  0007C2  0101               	movlb	1	; () banked
  3734  0007C4  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3735  0007C6  A0D8               	btfss	status,0,c
  3736  0007C8  D02A               	goto	l4858
  3737                           
  3738                           ; BSR set to: 1
  3739                           
  3740                           ; BSR set to: 1
  3741                           
  3742                           ; BSR set to: 1
  3743                           ;doprnt.c: 1307: break;
  3744  0007CA  0101               	movlb	1	; () banked
  3745  0007CC  2B09               	incf	printf@c& (0+255),f,b
  3746  0007CE  D7E5               	goto	l4828
  3747  0007D0                     l4840:
  3748                           
  3749                           ; BSR set to: 1
  3750                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3751  0007D0  0E01               	movlw	1
  3752  0007D2  0101               	movlb	1	; () banked
  3753  0007D4  6F09               	movwf	printf@c& (0+255),b
  3754  0007D6                     l4842:
  3755                           
  3756                           ; BSR set to: 1
  3757  0007D6  0E04               	movlw	4
  3758  0007D8  0101               	movlb	1	; () banked
  3759  0007DA  1909               	xorwf	printf@c& (0+255),w,b
  3760  0007DC  B4D8               	btfsc	status,2,c
  3761  0007DE  D01F               	goto	l4858
  3762                           
  3763                           ; BSR set to: 1
  3764                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3765                           
  3766                           ; BSR set to: 1
  3767                           
  3768                           ; BSR set to: 1
  3769  0007E0  0101               	movlb	1	; () banked
  3770  0007E2  5109               	movf	printf@c& (0+255),w,b
  3771  0007E4  0D02               	mullw	2
  3772  0007E6  0EEC               	movlw	low _hexpowers
  3773  0007E8  24F3               	addwf	prodl,w,c
  3774  0007EA  6EF6               	movwf	tblptrl,c
  3775  0007EC  0EFD               	movlw	high _hexpowers
  3776  0007EE  20F4               	addwfc	prodh,w,c
  3777  0007F0  6EF7               	movwf	tblptrh,c
  3778  0007F2                     	if	0	;There are less than 3 active tblptr bytes
  3779  0007F2                     	endif
  3780  0007F2  0009               	tblrd		*+
  3781  0007F4  50F5               	movf	tablat,w,c
  3782  0007F6  0101               	movlb	1	; () banked
  3783  0007F8  5D04               	subwf	printf@val& (0+255),w,b
  3784  0007FA  0009               	tblrd		*+
  3785  0007FC  50F5               	movf	tablat,w,c
  3786  0007FE  0101               	movlb	1	; () banked
  3787  000800  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3788  000802  A0D8               	btfss	status,0,c
  3789  000804  D00C               	goto	l4858
  3790                           
  3791                           ; BSR set to: 1
  3792                           
  3793                           ; BSR set to: 1
  3794                           
  3795                           ; BSR set to: 1
  3796                           ;doprnt.c: 1318: break;
  3797  000806  0101               	movlb	1	; () banked
  3798  000808  2B09               	incf	printf@c& (0+255),f,b
  3799  00080A  D7E5               	goto	l4842
  3800  00080C                     l4856:
  3801                           
  3802                           ; BSR set to: 1
  3803  00080C  0101               	movlb	1	; () banked
  3804  00080E  5106               	movf	printf@flag& (0+255),w,b
  3805  000810  0B80               	andlw	128
  3806                           
  3807                           ; Switch size 1, requested type "space"
  3808                           ; Number of cases is 2, Range of values is 0 to 128
  3809                           ; switch strategies available:
  3810                           ; Name         Instructions Cycles
  3811                           ; simple_byte            7     4 (average)
  3812                           ;	Chosen strategy is simple_byte
  3813  000812  0A00               	xorlw	0	; case 0
  3814  000814  B4D8               	btfsc	status,2,c
  3815  000816  D7BE               	goto	l4826
  3816  000818  0A80               	xorlw	128	; case 128
  3817  00081A  B4D8               	btfsc	status,2,c
  3818  00081C  D7D9               	goto	l4840
  3819  00081E                     l4858:
  3820                           
  3821                           ; BSR set to: 1
  3822                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3823  00081E  0101               	movlb	1	; () banked
  3824  000820  5107               	movf	printf@width& (0+255),w,b
  3825  000822  0101               	movlb	1	; () banked
  3826  000824  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3827  000826  B4D8               	btfsc	status,2,c
  3828  000828  D00B               	goto	l4864
  3829                           
  3830                           ; BSR set to: 1
  3831  00082A  C106  F0E8         	movff	printf@flag,??_printf
  3832  00082E  0E03               	movlw	3
  3833  000830  0100               	movlb	0	; () banked
  3834  000832  17E8               	andwf	??_printf& (0+255),f,b
  3835  000834  B4D8               	btfsc	status,2,c
  3836  000836  D004               	goto	l4864
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;doprnt.c: 1346: width--;
  3840  000838  0101               	movlb	1	; () banked
  3841  00083A  0707               	decf	printf@width& (0+255),f,b
  3842  00083C  A0D8               	btfss	status,0,c
  3843  00083E  0708               	decf	(printf@width+1)& (0+255),f,b
  3844  000840                     l4864:
  3845                           
  3846                           ;doprnt.c: 1381: if(width > c)
  3847  000840  0E80               	movlw	128
  3848  000842  0101               	movlb	1	; () banked
  3849  000844  BF09               	btfsc	printf@c& (0+255),7,b
  3850  000846  0E7F               	movlw	127
  3851  000848  0100               	movlb	0	; () banked
  3852  00084A  6FE8               	movwf	??_printf& (0+255),b
  3853  00084C  0101               	movlb	1	; () banked
  3854  00084E  5107               	movf	printf@width& (0+255),w,b
  3855  000850  0101               	movlb	1	; () banked
  3856  000852  5D09               	subwf	printf@c& (0+255),w,b
  3857  000854  0101               	movlb	1	; () banked
  3858  000856  5108               	movf	(printf@width+1)& (0+255),w,b
  3859  000858  0A80               	xorlw	128
  3860  00085A  0100               	movlb	0	; () banked
  3861  00085C  59E8               	subwfb	??_printf& (0+255),w,b
  3862  00085E  B0D8               	btfsc	status,0,c
  3863  000860  D00B               	goto	l4868
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;doprnt.c: 1382: width -= c;
  3867  000862  0101               	movlb	1	; () banked
  3868  000864  5109               	movf	printf@c& (0+255),w,b
  3869  000866  0101               	movlb	1	; () banked
  3870  000868  5F07               	subwf	printf@width& (0+255),f,b
  3871  00086A  0E00               	movlw	0
  3872  00086C  0101               	movlb	1	; () banked
  3873  00086E  BF09               	btfsc	printf@c& (0+255),7,b
  3874  000870  0EFF               	movlw	255
  3875  000872  0101               	movlb	1	; () banked
  3876  000874  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  3877  000876  D005               	goto	l4870
  3878  000878                     l4868:
  3879                           
  3880                           ;doprnt.c: 1383: else
  3881                           ;doprnt.c: 1384: width = 0;
  3882  000878  0E00               	movlw	0
  3883  00087A  0101               	movlb	1	; () banked
  3884  00087C  6F08               	movwf	(printf@width+1)& (0+255),b
  3885  00087E  0E00               	movlw	0
  3886  000880  6F07               	movwf	printf@width& (0+255),b
  3887  000882                     l4870:
  3888                           
  3889                           ; BSR set to: 1
  3890                           ;doprnt.c: 1387: if(flag & 0x04) {
  3891  000882  0101               	movlb	1	; () banked
  3892  000884  A506               	btfss	printf@flag& (0+255),2,b
  3893  000886  D018               	goto	l4882
  3894                           
  3895                           ; BSR set to: 1
  3896                           ;doprnt.c: 1392: if(flag & 0x03)
  3897  000888  C106  F0E8         	movff	printf@flag,??_printf
  3898  00088C  0E03               	movlw	3
  3899  00088E  0100               	movlb	0	; () banked
  3900  000890  17E8               	andwf	??_printf& (0+255),f,b
  3901  000892  B4D8               	btfsc	status,2,c
  3902  000894  D003               	goto	l4876
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;doprnt.c: 1393: (putch('-') );
  3906  000896  0E2D               	movlw	45
  3907  000898  ECEA  F015         	call	_putch
  3908  00089C                     l4876:
  3909                           
  3910                           ;doprnt.c: 1415: if(width)
  3911  00089C  0101               	movlb	1	; () banked
  3912  00089E  5107               	movf	printf@width& (0+255),w,b
  3913  0008A0  0101               	movlb	1	; () banked
  3914  0008A2  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3915  0008A4  B4D8               	btfsc	status,2,c
  3916  0008A6  D025               	goto	l4892
  3917                           
  3918                           ; BSR set to: 1
  3919                           ;doprnt.c: 1417: (putch('0') );
  3920                           
  3921                           ; BSR set to: 1
  3922                           
  3923                           ;doprnt.c: 1416: do
  3924  0008A8  0E30               	movlw	48
  3925  0008AA  ECEA  F015         	call	_putch
  3926                           
  3927                           ;doprnt.c: 1418: while(--width);
  3928  0008AE  0101               	movlb	1	; () banked
  3929  0008B0  0707               	decf	printf@width& (0+255),f,b
  3930  0008B2  A0D8               	btfss	status,0,c
  3931  0008B4  0708               	decf	(printf@width+1)& (0+255),f,b
  3932  0008B6  D7F2               	goto	l4876
  3933  0008B8                     l4882:
  3934                           
  3935                           ; BSR set to: 1
  3936                           ;doprnt.c: 1422: {
  3937                           ;doprnt.c: 1424: if(width
  3938                           ;doprnt.c: 1428: )
  3939  0008B8  0101               	movlb	1	; () banked
  3940  0008BA  5107               	movf	printf@width& (0+255),w,b
  3941  0008BC  0101               	movlb	1	; () banked
  3942  0008BE  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3943  0008C0  B4D8               	btfsc	status,2,c
  3944  0008C2  D00D               	goto	l4888
  3945  0008C4                     l4884:
  3946                           
  3947                           ; BSR set to: 1
  3948                           ;doprnt.c: 1430: (putch(' ') );
  3949  0008C4  0E20               	movlw	32
  3950  0008C6  ECEA  F015         	call	_putch
  3951                           
  3952                           ;doprnt.c: 1431: while(--width);
  3953  0008CA  0101               	movlb	1	; () banked
  3954  0008CC  0707               	decf	printf@width& (0+255),f,b
  3955  0008CE  A0D8               	btfss	status,0,c
  3956  0008D0  0708               	decf	(printf@width+1)& (0+255),f,b
  3957  0008D2  0101               	movlb	1	; () banked
  3958  0008D4  5107               	movf	printf@width& (0+255),w,b
  3959  0008D6  0101               	movlb	1	; () banked
  3960  0008D8  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3961  0008DA  A4D8               	btfss	status,2,c
  3962  0008DC  D7F3               	goto	l4884
  3963  0008DE                     l4888:
  3964                           
  3965                           ; BSR set to: 1
  3966                           ;doprnt.c: 1438: if(flag & 0x03)
  3967  0008DE  C106  F0E8         	movff	printf@flag,??_printf
  3968  0008E2  0E03               	movlw	3
  3969  0008E4  0100               	movlb	0	; () banked
  3970  0008E6  17E8               	andwf	??_printf& (0+255),f,b
  3971  0008E8  B4D8               	btfsc	status,2,c
  3972  0008EA  D003               	goto	l4892
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;doprnt.c: 1439: (putch('-') );
  3976  0008EC  0E2D               	movlw	45
  3977  0008EE  ECEA  F015         	call	_putch
  3978  0008F2                     l4892:
  3979                           
  3980                           ;doprnt.c: 1469: }
  3981                           ;doprnt.c: 1472: prec = c;
  3982  0008F2  C109  F103         	movff	printf@c,printf@prec
  3983                           
  3984                           ;doprnt.c: 1474: while(prec--) {
  3985  0008F6  D05A               	goto	l4906
  3986  0008F8                     l4894:
  3987                           
  3988                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3989  0008F8  0101               	movlb	1	; () banked
  3990  0008FA  5103               	movf	printf@prec& (0+255),w,b
  3991  0008FC  0D02               	mullw	2
  3992  0008FE  0EE2               	movlw	low _dpowers
  3993  000900  24F3               	addwf	prodl,w,c
  3994  000902  6EF6               	movwf	tblptrl,c
  3995  000904  0EFD               	movlw	high _dpowers
  3996  000906  20F4               	addwfc	prodh,w,c
  3997  000908  6EF7               	movwf	tblptrh,c
  3998  00090A                     	if	0	;There are less than 3 active tblptr bytes
  3999  00090A                     	endif
  4000  00090A  0009               	tblrd		*+
  4001  00090C  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4002  000910  000A               	tblrd		*-
  4003  000912  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4004  000916  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4005  00091A  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4006  00091E  EC7D  F012         	call	___lwdiv	;wreg free
  4007  000922  C0D4  F0DB         	movff	?___lwdiv,___lwmod@dividend
  4008  000926  C0D5  F0DC         	movff	?___lwdiv+1,___lwmod@dividend+1
  4009  00092A  0E00               	movlw	0
  4010  00092C  0100               	movlb	0	; () banked
  4011  00092E  6FDE               	movwf	(___lwmod@divisor+1)& (0+255),b
  4012  000930  0E0A               	movlw	10
  4013  000932  6FDD               	movwf	___lwmod@divisor& (0+255),b
  4014  000934  EC29  F013         	call	___lwmod	;wreg free
  4015  000938  0100               	movlb	0	; () banked
  4016  00093A  51DB               	movf	?___lwmod& (0+255),w,b
  4017  00093C  0F30               	addlw	48
  4018  00093E  0101               	movlb	1	; () banked
  4019  000940  6F09               	movwf	printf@c& (0+255),b
  4020                           
  4021                           ;doprnt.c: 1491: break;
  4022  000942  D030               	goto	l4904
  4023  000944                     l4896:
  4024                           
  4025                           ; BSR set to: 1
  4026                           ;doprnt.c: 1499: {
  4027                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4028  000944  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4029  000948  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4030  00094C  0101               	movlb	1	; () banked
  4031  00094E  5103               	movf	printf@prec& (0+255),w,b
  4032  000950  0D02               	mullw	2
  4033  000952  0EEC               	movlw	low _hexpowers
  4034  000954  24F3               	addwf	prodl,w,c
  4035  000956  6EF6               	movwf	tblptrl,c
  4036  000958  0EFD               	movlw	high _hexpowers
  4037  00095A  20F4               	addwfc	prodh,w,c
  4038  00095C  6EF7               	movwf	tblptrh,c
  4039  00095E                     	if	0	;There are less than 3 active tblptr bytes
  4040  00095E                     	endif
  4041  00095E  0009               	tblrd		*+
  4042  000960  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4043  000964  000A               	tblrd		*-
  4044  000966  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4045  00096A  EC7D  F012         	call	___lwdiv	;wreg free
  4046  00096E  0100               	movlb	0	; () banked
  4047  000970  51D4               	movf	?___lwdiv& (0+255),w,b
  4048  000972  0B0F               	andlw	15
  4049  000974  0101               	movlb	1	; () banked
  4050  000976  6F00               	movwf	printf@idx& (0+255),b
  4051                           
  4052                           ; BSR set to: 1
  4053                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4054  000978  0101               	movlb	1	; () banked
  4055  00097A  5100               	movf	printf@idx& (0+255),w,b
  4056  00097C  0D01               	mullw	1
  4057  00097E  0E79               	movlw	low STR_25
  4058  000980  24F3               	addwf	prodl,w,c
  4059  000982  6EF6               	movwf	tblptrl,c
  4060  000984  0EFF               	movlw	high STR_25
  4061  000986  20F4               	addwfc	prodh,w,c
  4062  000988  6EF7               	movwf	tblptrh,c
  4063  00098A                     	if	0	;There are less than 3 active tblptr bytes
  4064  00098A                     	endif
  4065  00098A  0008               	tblrd		*
  4066  00098C  CFF5 F109          	movff	tablat,printf@c
  4067                           
  4068                           ; BSR set to: 1
  4069                           ;doprnt.c: 1523: }
  4070                           
  4071                           ;doprnt.c: 1508: }
  4072                           ;doprnt.c: 1510: break;
  4073  000990  D009               	goto	l4904
  4074  000992                     l4902:
  4075  000992  0101               	movlb	1	; () banked
  4076  000994  5106               	movf	printf@flag& (0+255),w,b
  4077  000996  0B80               	andlw	128
  4078                           
  4079                           ; Switch size 1, requested type "space"
  4080                           ; Number of cases is 2, Range of values is 0 to 128
  4081                           ; switch strategies available:
  4082                           ; Name         Instructions Cycles
  4083                           ; simple_byte            7     4 (average)
  4084                           ;	Chosen strategy is simple_byte
  4085  000998  0A00               	xorlw	0	; case 0
  4086  00099A  B4D8               	btfsc	status,2,c
  4087  00099C  D7AD               	goto	l4894
  4088  00099E  0A80               	xorlw	128	; case 128
  4089  0009A0  B4D8               	btfsc	status,2,c
  4090  0009A2  D7D0               	goto	l4896
  4091  0009A4                     l4904:
  4092                           
  4093                           ; BSR set to: 1
  4094                           ;doprnt.c: 1524: (putch(c) );
  4095  0009A4  0101               	movlb	1	; () banked
  4096  0009A6  5109               	movf	printf@c& (0+255),w,b
  4097  0009A8  ECEA  F015         	call	_putch
  4098  0009AC                     l4906:
  4099  0009AC  0101               	movlb	1	; () banked
  4100  0009AE  0703               	decf	printf@prec& (0+255),f,b
  4101  0009B0  0101               	movlb	1	; () banked
  4102  0009B2  2903               	incf	printf@prec& (0+255),w,b
  4103  0009B4  A4D8               	btfss	status,2,c
  4104  0009B6  D7ED               	goto	l4902
  4105  0009B8                     l4908:
  4106  0009B8  C0E0  FFF6         	movff	printf@f,tblptrl
  4107  0009BC  C0E1  FFF7         	movff	printf@f+1,tblptrh
  4108  0009C0  0100               	movlb	0	; () banked
  4109  0009C2  4BE0               	infsnz	printf@f& (0+255),f,b
  4110  0009C4  2BE1               	incf	(printf@f+1)& (0+255),f,b
  4111  0009C6                     	if	0	;tblptru may be non-zero
  4112  0009C6                     	endif
  4113  0009C6                     	if	0	;tblptru may be non-zero
  4114  0009C6                     	endif
  4115  0009C6  0008               	tblrd		*
  4116  0009C8  CFF5 F109          	movff	tablat,printf@c
  4117  0009CC  0101               	movlb	1	; () banked
  4118  0009CE  5109               	movf	printf@c& (0+255),w,b
  4119  0009D0  B4D8               	btfsc	status,2,c
  4120  0009D2  0012               	return	
  4121  0009D4  D62D               	goto	l4782
  4122  0009D6                     __end_of_printf:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           intcon	equ	0xFF2
  4131                           intcon2	equ	0xFF1
  4132                           intcon3	equ	0xFF0
  4133                           postinc0	equ	0xFEE
  4134                           wreg	equ	0xFE8
  4135                           indf2	equ	0xFDF
  4136                           postinc2	equ	0xFDE
  4137                           postdec2	equ	0xFDD
  4138                           fsr2h	equ	0xFDA
  4139                           fsr2l	equ	0xFD9
  4140                           status	equ	0xFD8
  4141                           
  4142 ;; *************** function _putch *****************
  4143 ;; Defined at:
  4144 ;;		line 31 in file "lcd.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  data            1    wreg     unsigned char 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  data            1   18[BANK0 ] unsigned char 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  1    wreg      void 
  4151 ;; Registers used:
  4152 ;;		wreg, status,2, status,0, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;Total ram usage:        1 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    8
  4165 ;; This function calls:
  4166 ;;		_lcdNibble
  4167 ;; This function is called by:
  4168 ;;		_printf
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           	psect	text12
  4173  002BD4                     __ptext12:
  4174                           	opt stack 0
  4175  002BD4                     _putch:
  4176                           	opt stack 20
  4177                           
  4178                           ;incstack = 0
  4179                           ;putch@data stored from wreg
  4180  002BD4  0100               	movlb	0	; () banked
  4181  002BD6  6FD6               	movwf	putch@data& (0+255),b
  4182                           
  4183                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4184  002BD8  848C               	bsf	3980,2,c	;volatile
  4185                           
  4186                           ;lcd.c: 33: lcdNibble(data);
  4187  002BDA  0100               	movlb	0	; () banked
  4188  002BDC  51D6               	movf	putch@data& (0+255),w,b
  4189  002BDE  EC5A  F013         	call	_lcdNibble
  4190  002BE2  0012               	return		;funcret
  4191  002BE4                     __end_of_putch:
  4192                           	opt stack 0
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodh	equ	0xFF4
  4198                           prodl	equ	0xFF3
  4199                           intcon	equ	0xFF2
  4200                           intcon2	equ	0xFF1
  4201                           intcon3	equ	0xFF0
  4202                           postinc0	equ	0xFEE
  4203                           wreg	equ	0xFE8
  4204                           indf2	equ	0xFDF
  4205                           postinc2	equ	0xFDE
  4206                           postdec2	equ	0xFDD
  4207                           fsr2h	equ	0xFDA
  4208                           fsr2l	equ	0xFD9
  4209                           status	equ	0xFD8
  4210                           
  4211 ;; *************** function _isdigit *****************
  4212 ;; Defined at:
  4213 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  c               1    wreg     unsigned char 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;  c               1   18[BANK0 ] unsigned char 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;		None               void
  4220 ;; Registers used:
  4221 ;;		wreg, status,2, status,0
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;Total ram usage:        3 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    7
  4234 ;; This function calls:
  4235 ;;		Nothing
  4236 ;; This function is called by:
  4237 ;;		_printf
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text13
  4242  002ABC                     __ptext13:
  4243                           	opt stack 0
  4244  002ABC                     _isdigit:
  4245                           	opt stack 21
  4246                           
  4247                           ;incstack = 0
  4248                           ;isdigit@c stored from wreg
  4249  002ABC  0100               	movlb	0	; () banked
  4250  002ABE  6FD6               	movwf	isdigit@c& (0+255),b
  4251  002AC0  0E00               	movlw	0
  4252  002AC2  0100               	movlb	0	; () banked
  4253  002AC4  6FD5               	movwf	_isdigit$808& (0+255),b
  4254                           
  4255                           ; BSR set to: 0
  4256  002AC6  0E3A               	movlw	58
  4257  002AC8  0100               	movlb	0	; () banked
  4258  002ACA  61D6               	cpfslt	isdigit@c& (0+255),b
  4259  002ACC  D007               	goto	l4728
  4260                           
  4261                           ; BSR set to: 0
  4262  002ACE  0E2F               	movlw	47
  4263  002AD0  0100               	movlb	0	; () banked
  4264  002AD2  65D6               	cpfsgt	isdigit@c& (0+255),b
  4265  002AD4  D003               	goto	l4728
  4266                           
  4267                           ; BSR set to: 0
  4268  002AD6  0E01               	movlw	1
  4269  002AD8  0100               	movlb	0	; () banked
  4270  002ADA  6FD5               	movwf	_isdigit$808& (0+255),b
  4271  002ADC                     l4728:
  4272                           
  4273                           ; BSR set to: 0
  4274  002ADC  C0D5  F0D4         	movff	_isdigit$808,??_isdigit
  4275  002AE0  0100               	movlb	0	; () banked
  4276  002AE2  31D4               	rrcf	??_isdigit& (0+255),w,b
  4277  002AE4  0012               	return	
  4278  002AE6                     __end_of_isdigit:
  4279                           	opt stack 0
  4280                           tblptru	equ	0xFF8
  4281                           tblptrh	equ	0xFF7
  4282                           tblptrl	equ	0xFF6
  4283                           tablat	equ	0xFF5
  4284                           prodh	equ	0xFF4
  4285                           prodl	equ	0xFF3
  4286                           intcon	equ	0xFF2
  4287                           intcon2	equ	0xFF1
  4288                           intcon3	equ	0xFF0
  4289                           postinc0	equ	0xFEE
  4290                           wreg	equ	0xFE8
  4291                           indf2	equ	0xFDF
  4292                           postinc2	equ	0xFDE
  4293                           postdec2	equ	0xFDD
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function ___wmul *****************
  4299 ;; Defined at:
  4300 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4303 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  product         2   20[BANK0 ] unsigned int 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  2   16[BANK0 ] unsigned int 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0, prodl, prodh
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4315 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;Total ram usage:        6 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    7
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_printf
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text14
  4330  002A24                     __ptext14:
  4331                           	opt stack 0
  4332  002A24                     ___wmul:
  4333                           	opt stack 21
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;incstack = 0
  4337  002A24  0100               	movlb	0	; () banked
  4338  002A26  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4339  002A28  0100               	movlb	0	; () banked
  4340  002A2A  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4341  002A2C  CFF3 F0D8          	movff	prodl,___wmul@product
  4342  002A30  CFF4 F0D9          	movff	prodh,___wmul@product+1
  4343  002A34  0100               	movlb	0	; () banked
  4344  002A36  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4345  002A38  0100               	movlb	0	; () banked
  4346  002A3A  03D7               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4347  002A3C  50F3               	movf	prodl,w,c
  4348  002A3E  0100               	movlb	0	; () banked
  4349  002A40  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4350  002A42  0100               	movlb	0	; () banked
  4351  002A44  51D5               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4352  002A46  0100               	movlb	0	; () banked
  4353  002A48  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4354  002A4A  50F3               	movf	prodl,w,c
  4355  002A4C  0100               	movlb	0	; () banked
  4356  002A4E  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4357                           
  4358                           ; BSR set to: 0
  4359  002A50  C0D8  F0D4         	movff	___wmul@product,?___wmul
  4360  002A54  C0D9  F0D5         	movff	___wmul@product+1,?___wmul+1
  4361  002A58  0012               	return	
  4362  002A5A                     __end_of___wmul:
  4363                           	opt stack 0
  4364                           tblptru	equ	0xFF8
  4365                           tblptrh	equ	0xFF7
  4366                           tblptrl	equ	0xFF6
  4367                           tablat	equ	0xFF5
  4368                           prodh	equ	0xFF4
  4369                           prodl	equ	0xFF3
  4370                           intcon	equ	0xFF2
  4371                           intcon2	equ	0xFF1
  4372                           intcon3	equ	0xFF0
  4373                           postinc0	equ	0xFEE
  4374                           wreg	equ	0xFE8
  4375                           indf2	equ	0xFDF
  4376                           postinc2	equ	0xFDE
  4377                           postdec2	equ	0xFDD
  4378                           fsr2h	equ	0xFDA
  4379                           fsr2l	equ	0xFD9
  4380                           status	equ	0xFD8
  4381                           
  4382 ;; *************** function ___lwmod *****************
  4383 ;; Defined at:
  4384 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  dividend        2   23[BANK0 ] unsigned int 
  4387 ;;  divisor         2   25[BANK0 ] unsigned int 
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;  counter         1   27[BANK0 ] unsigned char 
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  2   23[BANK0 ] unsigned int 
  4392 ;; Registers used:
  4393 ;;		wreg, status,2, status,0
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;Total ram usage:        5 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    7
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_printf
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text15
  4414  002652                     __ptext15:
  4415                           	opt stack 0
  4416  002652                     ___lwmod:
  4417                           	opt stack 21
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;incstack = 0
  4421  002652  0100               	movlb	0	; () banked
  4422  002654  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4423  002656  0100               	movlb	0	; () banked
  4424  002658  11DE               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4425  00265A  B4D8               	btfsc	status,2,c
  4426  00265C  D026               	goto	l896
  4427                           
  4428                           ; BSR set to: 0
  4429  00265E  0E01               	movlw	1
  4430  002660  0100               	movlb	0	; () banked
  4431  002662  6FDF               	movwf	___lwmod@counter& (0+255),b
  4432  002664  D006               	goto	l4766
  4433  002666                     l4764:
  4434                           
  4435                           ; BSR set to: 0
  4436  002666  0100               	movlb	0	; () banked
  4437  002668  90D8               	bcf	status,0,c
  4438  00266A  37DD               	rlcf	___lwmod@divisor& (0+255),f,b
  4439  00266C  37DE               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4440  00266E  0100               	movlb	0	; () banked
  4441  002670  2BDF               	incf	___lwmod@counter& (0+255),f,b
  4442  002672                     l4766:
  4443                           
  4444                           ; BSR set to: 0
  4445  002672  0100               	movlb	0	; () banked
  4446  002674  AFDE               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4447  002676  D7F7               	goto	l4764
  4448  002678                     l4768:
  4449                           
  4450                           ; BSR set to: 0
  4451  002678  0100               	movlb	0	; () banked
  4452  00267A  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4453  00267C  0100               	movlb	0	; () banked
  4454  00267E  5DDB               	subwf	___lwmod@dividend& (0+255),w,b
  4455  002680  0100               	movlb	0	; () banked
  4456  002682  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4457  002684  0100               	movlb	0	; () banked
  4458  002686  59DC               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4459  002688  A0D8               	btfss	status,0,c
  4460  00268A  D008               	goto	l4772
  4461                           
  4462                           ; BSR set to: 0
  4463  00268C  0100               	movlb	0	; () banked
  4464  00268E  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4465  002690  0100               	movlb	0	; () banked
  4466  002692  5FDB               	subwf	___lwmod@dividend& (0+255),f,b
  4467  002694  0100               	movlb	0	; () banked
  4468  002696  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4469  002698  0100               	movlb	0	; () banked
  4470  00269A  5BDC               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4471  00269C                     l4772:
  4472                           
  4473                           ; BSR set to: 0
  4474  00269C  0100               	movlb	0	; () banked
  4475  00269E  90D8               	bcf	status,0,c
  4476  0026A0  33DE               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4477  0026A2  33DD               	rrcf	___lwmod@divisor& (0+255),f,b
  4478                           
  4479                           ; BSR set to: 0
  4480  0026A4  0100               	movlb	0	; () banked
  4481  0026A6  2FDF               	decfsz	___lwmod@counter& (0+255),f,b
  4482  0026A8  D7E7               	goto	l4768
  4483  0026AA                     l896:
  4484                           
  4485                           ; BSR set to: 0
  4486  0026AA  C0DB  F0DB         	movff	___lwmod@dividend,?___lwmod
  4487  0026AE  C0DC  F0DC         	movff	___lwmod@dividend+1,?___lwmod+1
  4488                           
  4489                           ; BSR set to: 0
  4490  0026B2  0012               	return		;funcret
  4491  0026B4                     __end_of___lwmod:
  4492                           	opt stack 0
  4493                           tblptru	equ	0xFF8
  4494                           tblptrh	equ	0xFF7
  4495                           tblptrl	equ	0xFF6
  4496                           tablat	equ	0xFF5
  4497                           prodh	equ	0xFF4
  4498                           prodl	equ	0xFF3
  4499                           intcon	equ	0xFF2
  4500                           intcon2	equ	0xFF1
  4501                           intcon3	equ	0xFF0
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           indf2	equ	0xFDF
  4505                           postinc2	equ	0xFDE
  4506                           postdec2	equ	0xFDD
  4507                           fsr2h	equ	0xFDA
  4508                           fsr2l	equ	0xFD9
  4509                           status	equ	0xFD8
  4510                           
  4511 ;; *************** function ___lwdiv *****************
  4512 ;; Defined at:
  4513 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  dividend        2   16[BANK0 ] unsigned int 
  4516 ;;  divisor         2   18[BANK0 ] unsigned int 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  quotient        2   21[BANK0 ] unsigned int 
  4519 ;;  counter         1   20[BANK0 ] unsigned char 
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  2   16[BANK0 ] unsigned int 
  4522 ;; Registers used:
  4523 ;;		wreg, status,2, status,0
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4529 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;Total ram usage:        7 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    7
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_printf
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text16
  4544  0024FA                     __ptext16:
  4545                           	opt stack 0
  4546  0024FA                     ___lwdiv:
  4547                           	opt stack 21
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;incstack = 0
  4551  0024FA  0E00               	movlw	0
  4552  0024FC  0100               	movlb	0	; () banked
  4553  0024FE  6FDA               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4554  002500  0E00               	movlw	0
  4555  002502  6FD9               	movwf	___lwdiv@quotient& (0+255),b
  4556                           
  4557                           ; BSR set to: 0
  4558  002504  0100               	movlb	0	; () banked
  4559  002506  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4560  002508  0100               	movlb	0	; () banked
  4561  00250A  11D7               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4562  00250C  B4D8               	btfsc	status,2,c
  4563  00250E  D02C               	goto	l886
  4564                           
  4565                           ; BSR set to: 0
  4566  002510  0E01               	movlw	1
  4567  002512  0100               	movlb	0	; () banked
  4568  002514  6FD8               	movwf	___lwdiv@counter& (0+255),b
  4569  002516  D006               	goto	l4746
  4570  002518                     l4744:
  4571                           
  4572                           ; BSR set to: 0
  4573  002518  0100               	movlb	0	; () banked
  4574  00251A  90D8               	bcf	status,0,c
  4575  00251C  37D6               	rlcf	___lwdiv@divisor& (0+255),f,b
  4576  00251E  37D7               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4577  002520  0100               	movlb	0	; () banked
  4578  002522  2BD8               	incf	___lwdiv@counter& (0+255),f,b
  4579  002524                     l4746:
  4580                           
  4581                           ; BSR set to: 0
  4582  002524  0100               	movlb	0	; () banked
  4583  002526  AFD7               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4584  002528  D7F7               	goto	l4744
  4585  00252A                     l4748:
  4586                           
  4587                           ; BSR set to: 0
  4588  00252A  0100               	movlb	0	; () banked
  4589  00252C  90D8               	bcf	status,0,c
  4590  00252E  37D9               	rlcf	___lwdiv@quotient& (0+255),f,b
  4591  002530  37DA               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4592                           
  4593                           ; BSR set to: 0
  4594  002532  0100               	movlb	0	; () banked
  4595  002534  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4596  002536  0100               	movlb	0	; () banked
  4597  002538  5DD4               	subwf	___lwdiv@dividend& (0+255),w,b
  4598  00253A  0100               	movlb	0	; () banked
  4599  00253C  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4600  00253E  0100               	movlb	0	; () banked
  4601  002540  59D5               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4602  002542  A0D8               	btfss	status,0,c
  4603  002544  D00A               	goto	l4756
  4604                           
  4605                           ; BSR set to: 0
  4606  002546  0100               	movlb	0	; () banked
  4607  002548  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4608  00254A  0100               	movlb	0	; () banked
  4609  00254C  5FD4               	subwf	___lwdiv@dividend& (0+255),f,b
  4610  00254E  0100               	movlb	0	; () banked
  4611  002550  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4612  002552  0100               	movlb	0	; () banked
  4613  002554  5BD5               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4614                           
  4615                           ; BSR set to: 0
  4616  002556  0100               	movlb	0	; () banked
  4617  002558  81D9               	bsf	___lwdiv@quotient& (0+255),0,b
  4618  00255A                     l4756:
  4619                           
  4620                           ; BSR set to: 0
  4621  00255A  0100               	movlb	0	; () banked
  4622  00255C  90D8               	bcf	status,0,c
  4623  00255E  33D7               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4624  002560  33D6               	rrcf	___lwdiv@divisor& (0+255),f,b
  4625                           
  4626                           ; BSR set to: 0
  4627  002562  0100               	movlb	0	; () banked
  4628  002564  2FD8               	decfsz	___lwdiv@counter& (0+255),f,b
  4629  002566  D7E1               	goto	l4748
  4630  002568                     l886:
  4631                           
  4632                           ; BSR set to: 0
  4633  002568  C0D9  F0D4         	movff	___lwdiv@quotient,?___lwdiv
  4634  00256C  C0DA  F0D5         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4635                           
  4636                           ; BSR set to: 0
  4637  002570  0012               	return		;funcret
  4638  002572                     __end_of___lwdiv:
  4639                           	opt stack 0
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           intcon	equ	0xFF2
  4647                           intcon2	equ	0xFF1
  4648                           intcon3	equ	0xFF0
  4649                           postinc0	equ	0xFEE
  4650                           wreg	equ	0xFE8
  4651                           indf2	equ	0xFDF
  4652                           postinc2	equ	0xFDE
  4653                           postdec2	equ	0xFDD
  4654                           fsr2h	equ	0xFDA
  4655                           fsr2l	equ	0xFD9
  4656                           status	equ	0xFD8
  4657                           
  4658 ;; *************** function _lcdInst *****************
  4659 ;; Defined at:
  4660 ;;		line 26 in file "lcd.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;  data            1    wreg     unsigned char 
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;  data            1   18[BANK0 ] unsigned char 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      void 
  4667 ;; Registers used:
  4668 ;;		wreg, status,2, status,0, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;Total ram usage:        1 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    8
  4681 ;; This function calls:
  4682 ;;		_lcdNibble
  4683 ;; This function is called by:
  4684 ;;		_initLCD
  4685 ;;		_standby
  4686 ;;		_date_time
  4687 ;;		_bottle_count
  4688 ;;		_bottle_time
  4689 ;;		_operation
  4690 ;;		_operationend
  4691 ;;		_emergencystop
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text17
  4696  002BE4                     __ptext17:
  4697                           	opt stack 0
  4698  002BE4                     _lcdInst:
  4699                           	opt stack 21
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;incstack = 0
  4703                           ;lcdInst@data stored from wreg
  4704  002BE4  0100               	movlb	0	; () banked
  4705  002BE6  6FD6               	movwf	lcdInst@data& (0+255),b
  4706                           
  4707                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4708  002BE8  948C               	bcf	3980,2,c	;volatile
  4709                           
  4710                           ;lcd.c: 28: lcdNibble(data);
  4711  002BEA  0100               	movlb	0	; () banked
  4712  002BEC  51D6               	movf	lcdInst@data& (0+255),w,b
  4713  002BEE  EC5A  F013         	call	_lcdNibble
  4714  002BF2  0012               	return		;funcret
  4715  002BF4                     __end_of_lcdInst:
  4716                           	opt stack 0
  4717                           tblptru	equ	0xFF8
  4718                           tblptrh	equ	0xFF7
  4719                           tblptrl	equ	0xFF6
  4720                           tablat	equ	0xFF5
  4721                           prodh	equ	0xFF4
  4722                           prodl	equ	0xFF3
  4723                           intcon	equ	0xFF2
  4724                           intcon2	equ	0xFF1
  4725                           intcon3	equ	0xFF0
  4726                           postinc0	equ	0xFEE
  4727                           wreg	equ	0xFE8
  4728                           indf2	equ	0xFDF
  4729                           postinc2	equ	0xFDE
  4730                           postdec2	equ	0xFDD
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735 ;; *************** function _lcdNibble *****************
  4736 ;; Defined at:
  4737 ;;		line 36 in file "lcd.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  data            1    wreg     unsigned char 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  data            1   17[BANK0 ] unsigned char 
  4742 ;;  temp            1   16[BANK0 ] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;Total ram usage:        2 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    7
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_lcdInst
  4763 ;;		_putch
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text18
  4768  0026B4                     __ptext18:
  4769                           	opt stack 0
  4770  0026B4                     _lcdNibble:
  4771                           	opt stack 20
  4772                           
  4773                           ;incstack = 0
  4774                           ;lcdNibble@data stored from wreg
  4775  0026B4  0100               	movlb	0	; () banked
  4776  0026B6  6FD5               	movwf	lcdNibble@data& (0+255),b
  4777                           
  4778                           ;lcd.c: 38: char temp = data & 0xF0;
  4779  0026B8  0100               	movlb	0	; () banked
  4780  0026BA  51D5               	movf	lcdNibble@data& (0+255),w,b
  4781  0026BC  0BF0               	andlw	240
  4782  0026BE  0100               	movlb	0	; () banked
  4783  0026C0  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4784                           
  4785                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4786  0026C2  508C               	movf	3980,w,c	;volatile
  4787  0026C4  0B0F               	andlw	15
  4788  0026C6  6E8C               	movwf	3980,c	;volatile
  4789                           
  4790                           ;lcd.c: 40: LATD = temp | LATD;
  4791  0026C8  0100               	movlb	0	; () banked
  4792  0026CA  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4793  0026CC  108C               	iorwf	3980,w,c	;volatile
  4794  0026CE  6E8C               	movwf	3980,c	;volatile
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4798  0026D0  968C               	bcf	3980,3,c	;volatile
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4802  0026D2  0E19               	movlw	25
  4803  0026D4                     u4787:
  4804  0026D4  2EE8               	decfsz	wreg,f,c
  4805  0026D6  D7FE               	bra	u4787
  4806                           
  4807                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4808  0026D8  868C               	bsf	3980,3,c	;volatile
  4809                           
  4810                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4811  0026DA  0E19               	movlw	25
  4812  0026DC                     u4797:
  4813  0026DC  2EE8               	decfsz	wreg,f,c
  4814  0026DE  D7FE               	bra	u4797
  4815                           
  4816                           ;lcd.c: 47: data = data << 4;
  4817  0026E0  0100               	movlb	0	; () banked
  4818  0026E2  39D5               	swapf	lcdNibble@data& (0+255),w,b
  4819  0026E4  0BF0               	andlw	240
  4820  0026E6  0100               	movlb	0	; () banked
  4821  0026E8  6FD5               	movwf	lcdNibble@data& (0+255),b
  4822                           
  4823                           ;lcd.c: 49: temp = data & 0xF0;
  4824  0026EA  0100               	movlb	0	; () banked
  4825  0026EC  51D5               	movf	lcdNibble@data& (0+255),w,b
  4826  0026EE  0BF0               	andlw	240
  4827  0026F0  0100               	movlb	0	; () banked
  4828  0026F2  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4829                           
  4830                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4831  0026F4  508C               	movf	3980,w,c	;volatile
  4832  0026F6  0B0F               	andlw	15
  4833  0026F8  6E8C               	movwf	3980,c	;volatile
  4834                           
  4835                           ;lcd.c: 51: LATD = temp | LATD;
  4836  0026FA  0100               	movlb	0	; () banked
  4837  0026FC  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4838  0026FE  108C               	iorwf	3980,w,c	;volatile
  4839  002700  6E8C               	movwf	3980,c	;volatile
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4843  002702  968C               	bcf	3980,3,c	;volatile
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4847  002704  0E19               	movlw	25
  4848  002706                     u4807:
  4849  002706  2EE8               	decfsz	wreg,f,c
  4850  002708  D7FE               	bra	u4807
  4851                           
  4852                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4853  00270A  868C               	bsf	3980,3,c	;volatile
  4854                           
  4855                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4856  00270C  0E19               	movlw	25
  4857  00270E                     u4817:
  4858  00270E  2EE8               	decfsz	wreg,f,c
  4859  002710  D7FE               	bra	u4817
  4860  002712  0012               	return		;funcret
  4861  002714                     __end_of_lcdNibble:
  4862                           	opt stack 0
  4863                           tblptru	equ	0xFF8
  4864                           tblptrh	equ	0xFF7
  4865                           tblptrl	equ	0xFF6
  4866                           tablat	equ	0xFF5
  4867                           prodh	equ	0xFF4
  4868                           prodl	equ	0xFF3
  4869                           intcon	equ	0xFF2
  4870                           intcon2	equ	0xFF1
  4871                           intcon3	equ	0xFF0
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           fsr2h	equ	0xFDA
  4878                           fsr2l	equ	0xFD9
  4879                           status	equ	0xFD8
  4880                           
  4881 ;; *************** function ___awmod *****************
  4882 ;; Defined at:
  4883 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  dividend        2   16[BANK0 ] int 
  4886 ;;  divisor         2   18[BANK0 ] int 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  sign            1   21[BANK0 ] unsigned char 
  4889 ;;  counter         1   20[BANK0 ] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  2   16[BANK0 ] int 
  4892 ;; Registers used:
  4893 ;;		wreg, status,2, status,0
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4899 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;Total ram usage:        6 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    7
  4906 ;; This function calls:
  4907 ;;		Nothing
  4908 ;; This function is called by:
  4909 ;;		_bottle_count
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           	psect	text19
  4914  0022B4                     __ptext19:
  4915                           	opt stack 0
  4916  0022B4                     ___awmod:
  4917                           	opt stack 22
  4918                           
  4919                           ;incstack = 0
  4920  0022B4  0E00               	movlw	0
  4921  0022B6  0100               	movlb	0	; () banked
  4922  0022B8  6FD9               	movwf	___awmod@sign& (0+255),b
  4923                           
  4924                           ; BSR set to: 0
  4925  0022BA  0100               	movlb	0	; () banked
  4926  0022BC  AFD5               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4927  0022BE  D008               	goto	l3806
  4928                           
  4929                           ; BSR set to: 0
  4930  0022C0  0100               	movlb	0	; () banked
  4931  0022C2  6DD4               	negf	___awmod@dividend& (0+255),b
  4932  0022C4  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  4933  0022C6  B0D8               	btfsc	status,0,c
  4934  0022C8  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  4935                           
  4936                           ; BSR set to: 0
  4937  0022CA  0E01               	movlw	1
  4938  0022CC  0100               	movlb	0	; () banked
  4939  0022CE  6FD9               	movwf	___awmod@sign& (0+255),b
  4940  0022D0                     l3806:
  4941                           
  4942                           ; BSR set to: 0
  4943  0022D0  0100               	movlb	0	; () banked
  4944  0022D2  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4945  0022D4  D005               	goto	l3810
  4946                           
  4947                           ; BSR set to: 0
  4948  0022D6  0100               	movlb	0	; () banked
  4949  0022D8  6DD6               	negf	___awmod@divisor& (0+255),b
  4950  0022DA  1FD7               	comf	(___awmod@divisor+1)& (0+255),f,b
  4951  0022DC  B0D8               	btfsc	status,0,c
  4952  0022DE  2BD7               	incf	(___awmod@divisor+1)& (0+255),f,b
  4953  0022E0                     l3810:
  4954                           
  4955                           ; BSR set to: 0
  4956  0022E0  0100               	movlb	0	; () banked
  4957  0022E2  51D6               	movf	___awmod@divisor& (0+255),w,b
  4958  0022E4  0100               	movlb	0	; () banked
  4959  0022E6  11D7               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4960  0022E8  B4D8               	btfsc	status,2,c
  4961  0022EA  D026               	goto	l3826
  4962                           
  4963                           ; BSR set to: 0
  4964  0022EC  0E01               	movlw	1
  4965  0022EE  0100               	movlb	0	; () banked
  4966  0022F0  6FD8               	movwf	___awmod@counter& (0+255),b
  4967  0022F2  D006               	goto	l3816
  4968  0022F4                     l3814:
  4969                           
  4970                           ; BSR set to: 0
  4971  0022F4  0100               	movlb	0	; () banked
  4972  0022F6  90D8               	bcf	status,0,c
  4973  0022F8  37D6               	rlcf	___awmod@divisor& (0+255),f,b
  4974  0022FA  37D7               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4975  0022FC  0100               	movlb	0	; () banked
  4976  0022FE  2BD8               	incf	___awmod@counter& (0+255),f,b
  4977  002300                     l3816:
  4978                           
  4979                           ; BSR set to: 0
  4980  002300  0100               	movlb	0	; () banked
  4981  002302  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4982  002304  D7F7               	goto	l3814
  4983  002306                     l3818:
  4984                           
  4985                           ; BSR set to: 0
  4986  002306  0100               	movlb	0	; () banked
  4987  002308  51D6               	movf	___awmod@divisor& (0+255),w,b
  4988  00230A  0100               	movlb	0	; () banked
  4989  00230C  5DD4               	subwf	___awmod@dividend& (0+255),w,b
  4990  00230E  0100               	movlb	0	; () banked
  4991  002310  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  4992  002312  0100               	movlb	0	; () banked
  4993  002314  59D5               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4994  002316  A0D8               	btfss	status,0,c
  4995  002318  D008               	goto	l3822
  4996                           
  4997                           ; BSR set to: 0
  4998  00231A  0100               	movlb	0	; () banked
  4999  00231C  51D6               	movf	___awmod@divisor& (0+255),w,b
  5000  00231E  0100               	movlb	0	; () banked
  5001  002320  5FD4               	subwf	___awmod@dividend& (0+255),f,b
  5002  002322  0100               	movlb	0	; () banked
  5003  002324  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  5004  002326  0100               	movlb	0	; () banked
  5005  002328  5BD5               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5006  00232A                     l3822:
  5007                           
  5008                           ; BSR set to: 0
  5009  00232A  0100               	movlb	0	; () banked
  5010  00232C  90D8               	bcf	status,0,c
  5011  00232E  33D7               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5012  002330  33D6               	rrcf	___awmod@divisor& (0+255),f,b
  5013                           
  5014                           ; BSR set to: 0
  5015  002332  0100               	movlb	0	; () banked
  5016  002334  2FD8               	decfsz	___awmod@counter& (0+255),f,b
  5017  002336  D7E7               	goto	l3818
  5018  002338                     l3826:
  5019                           
  5020                           ; BSR set to: 0
  5021  002338  0100               	movlb	0	; () banked
  5022  00233A  51D9               	movf	___awmod@sign& (0+255),w,b
  5023  00233C  0100               	movlb	0	; () banked
  5024  00233E  B4D8               	btfsc	status,2,c
  5025  002340  D005               	goto	l3830
  5026                           
  5027                           ; BSR set to: 0
  5028  002342  0100               	movlb	0	; () banked
  5029  002344  6DD4               	negf	___awmod@dividend& (0+255),b
  5030  002346  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  5031  002348  B0D8               	btfsc	status,0,c
  5032  00234A  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  5033  00234C                     l3830:
  5034                           
  5035                           ; BSR set to: 0
  5036  00234C  C0D4  F0D4         	movff	___awmod@dividend,?___awmod
  5037  002350  C0D5  F0D5         	movff	___awmod@dividend+1,?___awmod+1
  5038  002354  0012               	return	
  5039  002356                     __end_of___awmod:
  5040                           	opt stack 0
  5041                           tblptru	equ	0xFF8
  5042                           tblptrh	equ	0xFF7
  5043                           tblptrl	equ	0xFF6
  5044                           tablat	equ	0xFF5
  5045                           prodh	equ	0xFF4
  5046                           prodl	equ	0xFF3
  5047                           intcon	equ	0xFF2
  5048                           intcon2	equ	0xFF1
  5049                           intcon3	equ	0xFF0
  5050                           postinc0	equ	0xFEE
  5051                           wreg	equ	0xFE8
  5052                           indf2	equ	0xFDF
  5053                           postinc2	equ	0xFDE
  5054                           postdec2	equ	0xFDD
  5055                           fsr2h	equ	0xFDA
  5056                           fsr2l	equ	0xFD9
  5057                           status	equ	0xFD8
  5058                           
  5059 ;; *************** function _I2C_Master_Init *****************
  5060 ;; Defined at:
  5061 ;;		line 13 in file "I2C.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  c               4   29[BANK0 ] const unsigned long 
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;		None
  5066 ;; Return value:  Size  Location     Type
  5067 ;;                  1    wreg      void 
  5068 ;; Registers used:
  5069 ;;		wreg, status,2, status,0, cstack
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5075 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5079 ;;Total ram usage:        8 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; Hardware stack levels required when called:    8
  5082 ;; This function calls:
  5083 ;;		___lldiv
  5084 ;; This function is called by:
  5085 ;;		_main
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           	psect	text20
  5090  002714                     __ptext20:
  5091                           	opt stack 0
  5092  002714                     _I2C_Master_Init:
  5093                           	opt stack 22
  5094                           
  5095                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;incstack = 0
  5099  002714  0E00               	movlw	0
  5100  002716  6EC7               	movwf	4039,c	;volatile
  5101                           
  5102                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  5103  002718  0E28               	movlw	40
  5104  00271A  6EC6               	movwf	4038,c	;volatile
  5105                           
  5106                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  5107  00271C  0E00               	movlw	0
  5108  00271E  6EC5               	movwf	4037,c	;volatile
  5109                           
  5110                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  5111  002720  0E80               	movlw	128
  5112  002722  0100               	movlb	0	; () banked
  5113  002724  6FD4               	movwf	___lldiv@dividend& (0+255),b
  5114  002726  0E96               	movlw	150
  5115  002728  6FD5               	movwf	(___lldiv@dividend+1)& (0+255),b
  5116  00272A  0E98               	movlw	152
  5117  00272C  6FD6               	movwf	(___lldiv@dividend+2)& (0+255),b
  5118  00272E  0E00               	movlw	0
  5119  002730  6FD7               	movwf	(___lldiv@dividend+3)& (0+255),b
  5120  002732  C0E1  F0E5         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5121  002736  C0E2  F0E6         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5122  00273A  C0E3  F0E7         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5123  00273E  C0E4  F0E8         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5124  002742  0E02               	movlw	2
  5125  002744                     u3715:
  5126  002744  90D8               	bcf	status,0,c
  5127  002746  0100               	movlb	0	; () banked
  5128  002748  37E5               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5129  00274A  37E6               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5130  00274C  37E7               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5131  00274E  37E8               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5132  002750  2EE8               	decfsz	wreg,f,c
  5133  002752  D7F8               	goto	u3715
  5134  002754  C0E5  F0D8         	movff	??_I2C_Master_Init,___lldiv@divisor
  5135  002758  C0E6  F0D9         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5136  00275C  C0E7  F0DA         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5137  002760  C0E8  F0DB         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5138  002764  EC4B  F00F         	call	___lldiv	;wreg free
  5139  002768  0100               	movlb	0	; () banked
  5140  00276A  05D4               	decf	?___lldiv& (0+255),w,b
  5141  00276C  6EC8               	movwf	4040,c	;volatile
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;I2C.c: 20: TRISC3 = 1;
  5145  00276E  8694               	bsf	3988,3,c	;volatile
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;I2C.c: 21: TRISC4 = 1;
  5149  002770  8894               	bsf	3988,4,c	;volatile
  5150                           
  5151                           ; BSR set to: 0
  5152  002772  0012               	return		;funcret
  5153  002774                     __end_of_I2C_Master_Init:
  5154                           	opt stack 0
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodh	equ	0xFF4
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           intcon2	equ	0xFF1
  5163                           intcon3	equ	0xFF0
  5164                           postinc0	equ	0xFEE
  5165                           wreg	equ	0xFE8
  5166                           indf2	equ	0xFDF
  5167                           postinc2	equ	0xFDE
  5168                           postdec2	equ	0xFDD
  5169                           fsr2h	equ	0xFDA
  5170                           fsr2l	equ	0xFD9
  5171                           status	equ	0xFD8
  5172                           
  5173 ;; *************** function ___lldiv *****************
  5174 ;; Defined at:
  5175 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  dividend        4   16[BANK0 ] unsigned long 
  5178 ;;  divisor         4   20[BANK0 ] unsigned long 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  quotient        4   24[BANK0 ] unsigned long 
  5181 ;;  counter         1   28[BANK0 ] unsigned char 
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  4   16[BANK0 ] unsigned long 
  5184 ;; Registers used:
  5185 ;;		wreg, status,2, status,0
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5191 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;Total ram usage:       13 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    7
  5198 ;; This function calls:
  5199 ;;		Nothing
  5200 ;; This function is called by:
  5201 ;;		_I2C_Master_Init
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           	psect	text21
  5206  001E96                     __ptext21:
  5207                           	opt stack 0
  5208  001E96                     ___lldiv:
  5209                           	opt stack 22
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;incstack = 0
  5213  001E96  0E00               	movlw	0
  5214  001E98  0100               	movlb	0	; () banked
  5215  001E9A  6FDC               	movwf	___lldiv@quotient& (0+255),b
  5216  001E9C  0E00               	movlw	0
  5217  001E9E  6FDD               	movwf	(___lldiv@quotient+1)& (0+255),b
  5218  001EA0  0E00               	movlw	0
  5219  001EA2  6FDE               	movwf	(___lldiv@quotient+2)& (0+255),b
  5220  001EA4  0E00               	movlw	0
  5221  001EA6  6FDF               	movwf	(___lldiv@quotient+3)& (0+255),b
  5222                           
  5223                           ; BSR set to: 0
  5224  001EA8  0100               	movlb	0	; () banked
  5225  001EAA  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5226  001EAC  0100               	movlb	0	; () banked
  5227  001EAE  11D9               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5228  001EB0  0100               	movlb	0	; () banked
  5229  001EB2  11DA               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5230  001EB4  0100               	movlb	0	; () banked
  5231  001EB6  11DB               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5232  001EB8  B4D8               	btfsc	status,2,c
  5233  001EBA  D042               	goto	l833
  5234                           
  5235                           ; BSR set to: 0
  5236  001EBC  0E01               	movlw	1
  5237  001EBE  0100               	movlb	0	; () banked
  5238  001EC0  6FE0               	movwf	___lldiv@counter& (0+255),b
  5239  001EC2  D008               	goto	l3842
  5240  001EC4                     l3840:
  5241                           
  5242                           ; BSR set to: 0
  5243  001EC4  0100               	movlb	0	; () banked
  5244  001EC6  90D8               	bcf	status,0,c
  5245  001EC8  37D8               	rlcf	___lldiv@divisor& (0+255),f,b
  5246  001ECA  37D9               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5247  001ECC  37DA               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5248  001ECE  37DB               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5249  001ED0  0100               	movlb	0	; () banked
  5250  001ED2  2BE0               	incf	___lldiv@counter& (0+255),f,b
  5251  001ED4                     l3842:
  5252                           
  5253                           ; BSR set to: 0
  5254  001ED4  0100               	movlb	0	; () banked
  5255  001ED6  AFDB               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5256  001ED8  D7F5               	goto	l3840
  5257  001EDA                     l3844:
  5258                           
  5259                           ; BSR set to: 0
  5260  001EDA  0100               	movlb	0	; () banked
  5261  001EDC  90D8               	bcf	status,0,c
  5262  001EDE  37DC               	rlcf	___lldiv@quotient& (0+255),f,b
  5263  001EE0  37DD               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5264  001EE2  37DE               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5265  001EE4  37DF               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5266                           
  5267                           ; BSR set to: 0
  5268  001EE6  0100               	movlb	0	; () banked
  5269  001EE8  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5270  001EEA  0100               	movlb	0	; () banked
  5271  001EEC  5DD4               	subwf	___lldiv@dividend& (0+255),w,b
  5272  001EEE  0100               	movlb	0	; () banked
  5273  001EF0  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5274  001EF2  0100               	movlb	0	; () banked
  5275  001EF4  59D5               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5276  001EF6  0100               	movlb	0	; () banked
  5277  001EF8  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5278  001EFA  0100               	movlb	0	; () banked
  5279  001EFC  59D6               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5280  001EFE  0100               	movlb	0	; () banked
  5281  001F00  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5282  001F02  0100               	movlb	0	; () banked
  5283  001F04  59D7               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5284  001F06  A0D8               	btfss	status,0,c
  5285  001F08  D012               	goto	l3852
  5286                           
  5287                           ; BSR set to: 0
  5288  001F0A  0100               	movlb	0	; () banked
  5289  001F0C  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5290  001F0E  0100               	movlb	0	; () banked
  5291  001F10  5FD4               	subwf	___lldiv@dividend& (0+255),f,b
  5292  001F12  0100               	movlb	0	; () banked
  5293  001F14  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5294  001F16  0100               	movlb	0	; () banked
  5295  001F18  5BD5               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5296  001F1A  0100               	movlb	0	; () banked
  5297  001F1C  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5298  001F1E  0100               	movlb	0	; () banked
  5299  001F20  5BD6               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5300  001F22  0100               	movlb	0	; () banked
  5301  001F24  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5302  001F26  0100               	movlb	0	; () banked
  5303  001F28  5BD7               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5304                           
  5305                           ; BSR set to: 0
  5306  001F2A  0100               	movlb	0	; () banked
  5307  001F2C  81DC               	bsf	___lldiv@quotient& (0+255),0,b
  5308  001F2E                     l3852:
  5309                           
  5310                           ; BSR set to: 0
  5311  001F2E  0100               	movlb	0	; () banked
  5312  001F30  90D8               	bcf	status,0,c
  5313  001F32  33DB               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5314  001F34  33DA               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5315  001F36  33D9               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5316  001F38  33D8               	rrcf	___lldiv@divisor& (0+255),f,b
  5317                           
  5318                           ; BSR set to: 0
  5319  001F3A  0100               	movlb	0	; () banked
  5320  001F3C  2FE0               	decfsz	___lldiv@counter& (0+255),f,b
  5321  001F3E  D7CD               	goto	l3844
  5322  001F40                     l833:
  5323                           
  5324                           ; BSR set to: 0
  5325  001F40  C0DC  F0D4         	movff	___lldiv@quotient,?___lldiv
  5326  001F44  C0DD  F0D5         	movff	___lldiv@quotient+1,?___lldiv+1
  5327  001F48  C0DE  F0D6         	movff	___lldiv@quotient+2,?___lldiv+2
  5328  001F4C  C0DF  F0D7         	movff	___lldiv@quotient+3,?___lldiv+3
  5329                           
  5330                           ; BSR set to: 0
  5331  001F50  0012               	return		;funcret
  5332  001F52                     __end_of___lldiv:
  5333                           	opt stack 0
  5334                           tblptru	equ	0xFF8
  5335                           tblptrh	equ	0xFF7
  5336                           tblptrl	equ	0xFF6
  5337                           tablat	equ	0xFF5
  5338                           prodh	equ	0xFF4
  5339                           prodl	equ	0xFF3
  5340                           intcon	equ	0xFF2
  5341                           intcon2	equ	0xFF1
  5342                           intcon3	equ	0xFF0
  5343                           postinc0	equ	0xFEE
  5344                           wreg	equ	0xFE8
  5345                           indf2	equ	0xFDF
  5346                           postinc2	equ	0xFDE
  5347                           postdec2	equ	0xFDD
  5348                           fsr2h	equ	0xFDA
  5349                           fsr2l	equ	0xFD9
  5350                           status	equ	0xFD8
  5351                           
  5352 ;; *************** function _I2C_ColorSens_Init *****************
  5353 ;; Defined at:
  5354 ;;		line 53 in file "I2C.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;		None
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;		None
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  1    wreg      void 
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;Total ram usage:        0 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    9
  5375 ;; This function calls:
  5376 ;;		_I2C_Master_Start
  5377 ;;		_I2C_Master_Stop
  5378 ;;		_I2C_Master_Write
  5379 ;; This function is called by:
  5380 ;;		_main
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text22
  5385  002A5A                     __ptext22:
  5386                           	opt stack 0
  5387  002A5A                     _I2C_ColorSens_Init:
  5388                           	opt stack 21
  5389                           
  5390                           ;I2C.c: 54: I2C_Master_Start();
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;incstack = 0
  5394  002A5A  EC14  F016         	call	_I2C_Master_Start	;wreg free
  5395                           
  5396                           ;I2C.c: 55: I2C_Master_Write(0b01010010);
  5397  002A5E  0E00               	movlw	0
  5398  002A60  0100               	movlb	0	; () banked
  5399  002A62  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5400  002A64  0E52               	movlw	82
  5401  002A66  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5402  002A68  EC06  F016         	call	_I2C_Master_Write	;wreg free
  5403                           
  5404                           ;I2C.c: 56: I2C_Master_Write(0b10000000);
  5405  002A6C  0E00               	movlw	0
  5406  002A6E  0100               	movlb	0	; () banked
  5407  002A70  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5408  002A72  0E80               	movlw	128
  5409  002A74  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5410  002A76  EC06  F016         	call	_I2C_Master_Write	;wreg free
  5411                           
  5412                           ;I2C.c: 57: I2C_Master_Write(0b00000011);
  5413  002A7A  0E00               	movlw	0
  5414  002A7C  0100               	movlb	0	; () banked
  5415  002A7E  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5416  002A80  0E03               	movlw	3
  5417  002A82  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5418  002A84  EC06  F016         	call	_I2C_Master_Write	;wreg free
  5419                           
  5420                           ;I2C.c: 58: I2C_Master_Stop();
  5421  002A88  EC10  F016         	call	_I2C_Master_Stop	;wreg free
  5422  002A8C  0012               	return		;funcret
  5423  002A8E                     __end_of_I2C_ColorSens_Init:
  5424                           	opt stack 0
  5425                           tblptru	equ	0xFF8
  5426                           tblptrh	equ	0xFF7
  5427                           tblptrl	equ	0xFF6
  5428                           tablat	equ	0xFF5
  5429                           prodh	equ	0xFF4
  5430                           prodl	equ	0xFF3
  5431                           intcon	equ	0xFF2
  5432                           intcon2	equ	0xFF1
  5433                           intcon3	equ	0xFF0
  5434                           postinc0	equ	0xFEE
  5435                           wreg	equ	0xFE8
  5436                           indf2	equ	0xFDF
  5437                           postinc2	equ	0xFDE
  5438                           postdec2	equ	0xFDD
  5439                           fsr2h	equ	0xFDA
  5440                           fsr2l	equ	0xFD9
  5441                           status	equ	0xFD8
  5442                           
  5443 ;; *************** function _I2C_Master_Write *****************
  5444 ;; Defined at:
  5445 ;;		line 47 in file "I2C.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;  d               2   17[BANK0 ] unsigned int 
  5448 ;; Auto vars:     Size  Location     Type
  5449 ;;		None
  5450 ;; Return value:  Size  Location     Type
  5451 ;;                  1    wreg      void 
  5452 ;; Registers used:
  5453 ;;		wreg, status,2, status,0, cstack
  5454 ;; Tracked objects:
  5455 ;;		On entry : 0/0
  5456 ;;		On exit  : 0/0
  5457 ;;		Unchanged: 0/0
  5458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5459 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;Total ram usage:        2 bytes
  5464 ;; Hardware stack levels used:    1
  5465 ;; Hardware stack levels required when called:    8
  5466 ;; This function calls:
  5467 ;;		_I2C_Master_Wait
  5468 ;; This function is called by:
  5469 ;;		_I2C_ColorSens_Init
  5470 ;;		_date_time
  5471 ;;		_read_colorsensor
  5472 ;;		_set_time
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text23
  5477  002C0C                     __ptext23:
  5478                           	opt stack 0
  5479  002C0C                     _I2C_Master_Write:
  5480                           	opt stack 20
  5481                           
  5482                           ;I2C.c: 49: I2C_Master_Wait();
  5483                           
  5484                           ;incstack = 0
  5485  002C0C  ECD7  F015         	call	_I2C_Master_Wait	;wreg free
  5486                           
  5487                           ;I2C.c: 50: SSPBUF = d;
  5488  002C10  C0D5  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5489  002C14  0012               	return		;funcret
  5490  002C16                     __end_of_I2C_Master_Write:
  5491                           	opt stack 0
  5492                           tblptru	equ	0xFF8
  5493                           tblptrh	equ	0xFF7
  5494                           tblptrl	equ	0xFF6
  5495                           tablat	equ	0xFF5
  5496                           prodh	equ	0xFF4
  5497                           prodl	equ	0xFF3
  5498                           intcon	equ	0xFF2
  5499                           intcon2	equ	0xFF1
  5500                           intcon3	equ	0xFF0
  5501                           postinc0	equ	0xFEE
  5502                           wreg	equ	0xFE8
  5503                           indf2	equ	0xFDF
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           fsr2h	equ	0xFDA
  5507                           fsr2l	equ	0xFD9
  5508                           status	equ	0xFD8
  5509                           
  5510 ;; *************** function _I2C_Master_Stop *****************
  5511 ;; Defined at:
  5512 ;;		line 41 in file "I2C.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;		None
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;		None
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  1    wreg      void 
  5519 ;; Registers used:
  5520 ;;		wreg, status,2, status,0, cstack
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;Total ram usage:        0 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    8
  5533 ;; This function calls:
  5534 ;;		_I2C_Master_Wait
  5535 ;; This function is called by:
  5536 ;;		_I2C_ColorSens_Init
  5537 ;;		_date_time
  5538 ;;		_read_colorsensor
  5539 ;;		_set_time
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           	psect	text24
  5544  002C20                     __ptext24:
  5545                           	opt stack 0
  5546  002C20                     _I2C_Master_Stop:
  5547                           	opt stack 20
  5548                           
  5549                           ;I2C.c: 43: I2C_Master_Wait();
  5550                           
  5551                           ;incstack = 0
  5552  002C20  ECD7  F015         	call	_I2C_Master_Wait	;wreg free
  5553                           
  5554                           ;I2C.c: 44: PEN = 1;
  5555  002C24  84C5               	bsf	4037,2,c	;volatile
  5556  002C26  0012               	return		;funcret
  5557  002C28                     __end_of_I2C_Master_Stop:
  5558                           	opt stack 0
  5559                           tblptru	equ	0xFF8
  5560                           tblptrh	equ	0xFF7
  5561                           tblptrl	equ	0xFF6
  5562                           tablat	equ	0xFF5
  5563                           prodh	equ	0xFF4
  5564                           prodl	equ	0xFF3
  5565                           intcon	equ	0xFF2
  5566                           intcon2	equ	0xFF1
  5567                           intcon3	equ	0xFF0
  5568                           postinc0	equ	0xFEE
  5569                           wreg	equ	0xFE8
  5570                           indf2	equ	0xFDF
  5571                           postinc2	equ	0xFDE
  5572                           postdec2	equ	0xFDD
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function _I2C_Master_Start *****************
  5578 ;; Defined at:
  5579 ;;		line 29 in file "I2C.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;		None
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;		None
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  1    wreg      void 
  5586 ;; Registers used:
  5587 ;;		wreg, status,2, status,0, cstack
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;Total ram usage:        0 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:    8
  5600 ;; This function calls:
  5601 ;;		_I2C_Master_Wait
  5602 ;; This function is called by:
  5603 ;;		_I2C_ColorSens_Init
  5604 ;;		_date_time
  5605 ;;		_read_colorsensor
  5606 ;;		_set_time
  5607 ;; This function uses a non-reentrant model
  5608 ;;
  5609                           
  5610                           	psect	text25
  5611  002C28                     __ptext25:
  5612                           	opt stack 0
  5613  002C28                     _I2C_Master_Start:
  5614                           	opt stack 20
  5615                           
  5616                           ;I2C.c: 31: I2C_Master_Wait();
  5617                           
  5618                           ;incstack = 0
  5619  002C28  ECD7  F015         	call	_I2C_Master_Wait	;wreg free
  5620                           
  5621                           ;I2C.c: 32: SEN = 1;
  5622  002C2C  80C5               	bsf	4037,0,c	;volatile
  5623  002C2E  0012               	return		;funcret
  5624  002C30                     __end_of_I2C_Master_Start:
  5625                           	opt stack 0
  5626                           tblptru	equ	0xFF8
  5627                           tblptrh	equ	0xFF7
  5628                           tblptrl	equ	0xFF6
  5629                           tablat	equ	0xFF5
  5630                           prodh	equ	0xFF4
  5631                           prodl	equ	0xFF3
  5632                           intcon	equ	0xFF2
  5633                           intcon2	equ	0xFF1
  5634                           intcon3	equ	0xFF0
  5635                           postinc0	equ	0xFEE
  5636                           wreg	equ	0xFE8
  5637                           indf2	equ	0xFDF
  5638                           postinc2	equ	0xFDE
  5639                           postdec2	equ	0xFDD
  5640                           fsr2h	equ	0xFDA
  5641                           fsr2l	equ	0xFD9
  5642                           status	equ	0xFD8
  5643                           
  5644 ;; *************** function _I2C_Master_Wait *****************
  5645 ;; Defined at:
  5646 ;;		line 24 in file "I2C.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;		None
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;		None
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  1    wreg      void 
  5653 ;; Registers used:
  5654 ;;		wreg, status,2, status,0
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5664 ;;Total ram usage:        1 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    7
  5667 ;; This function calls:
  5668 ;;		Nothing
  5669 ;; This function is called by:
  5670 ;;		_I2C_Master_Start
  5671 ;;		_I2C_Master_Stop
  5672 ;;		_I2C_Master_Write
  5673 ;;		_I2C_Master_Read
  5674 ;;		_I2C_Master_RepeatedStart
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           	psect	text26
  5679  002BAE                     __ptext26:
  5680                           	opt stack 0
  5681  002BAE                     _I2C_Master_Wait:
  5682                           	opt stack 20
  5683  002BAE                     l34:
  5684  002BAE  B4C7               	btfsc	4039,2,c	;volatile
  5685  002BB0  D7FE               	goto	l34
  5686  002BB2  CFC5 F0D4          	movff	4037,??_I2C_Master_Wait	;volatile
  5687  002BB6  0E1F               	movlw	31
  5688  002BB8  0100               	movlb	0	; () banked
  5689  002BBA  17D4               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5690  002BBC  B4D8               	btfsc	status,2,c
  5691  002BBE  0012               	return	
  5692  002BC0  D7F6               	goto	l34
  5693  002BC2                     __end_of_I2C_Master_Wait:
  5694                           	opt stack 0
  5695                           tblptru	equ	0xFF8
  5696                           tblptrh	equ	0xFF7
  5697                           tblptrl	equ	0xFF6
  5698                           tablat	equ	0xFF5
  5699                           prodh	equ	0xFF4
  5700                           prodl	equ	0xFF3
  5701                           intcon	equ	0xFF2
  5702                           intcon2	equ	0xFF1
  5703                           intcon3	equ	0xFF0
  5704                           postinc0	equ	0xFEE
  5705                           wreg	equ	0xFE8
  5706                           indf2	equ	0xFDF
  5707                           postinc2	equ	0xFDE
  5708                           postdec2	equ	0xFDD
  5709                           fsr2h	equ	0xFDA
  5710                           fsr2l	equ	0xFD9
  5711                           status	equ	0xFD8
  5712                           
  5713 ;; *************** function _isr *****************
  5714 ;; Defined at:
  5715 ;;		line 163 in file "main.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;		None
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;  i               1  116[COMRAM] unsigned char 
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  1    wreg      void 
  5722 ;; Registers used:
  5723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;Total ram usage:       19 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    6
  5736 ;; This function calls:
  5737 ;;		_dec_to_hex
  5738 ;;		_read_time
  5739 ;;		_servo_rotate0
  5740 ;;		_servo_rotate1
  5741 ;;		_servo_rotate2
  5742 ;;		i2___wmul
  5743 ;;		i2_lcdInst
  5744 ;;		i2_printf
  5745 ;;		i2_read_colorsensor
  5746 ;; This function is called by:
  5747 ;;		Interrupt level 2
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           	psect	intcode
  5752  000008                     __pintcode:
  5753                           	opt stack 0
  5754  000008                     _isr:
  5755                           	opt stack 20
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;incstack = 0
  5759  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5760  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           prodh	equ	0xFF4
  5766                           prodl	equ	0xFF3
  5767                           intcon	equ	0xFF2
  5768                           intcon2	equ	0xFF1
  5769                           intcon3	equ	0xFF0
  5770                           postinc0	equ	0xFEE
  5771                           wreg	equ	0xFE8
  5772                           indf2	equ	0xFDF
  5773                           postinc2	equ	0xFDE
  5774                           postdec2	equ	0xFDD
  5775                           fsr2h	equ	0xFDA
  5776                           fsr2l	equ	0xFD9
  5777                           status	equ	0xFD8
  5778                           
  5779                           	psect	intcode_body
  5780  000012                     __pintcode_body:
  5781                           	opt stack 20
  5782  000012                     int_func:
  5783                           	opt stack 20
  5784  000012  0006               	pop		; remove dummy address from shadow register refresh
  5785  000014  CFFA F0C6          	movff	pclath,??_isr+2
  5786  000018  CFFB F0C7          	movff	pclatu,??_isr+3
  5787  00001C  CFE9 F0C8          	movff	fsr0l,??_isr+4
  5788  000020  CFEA F0C9          	movff	fsr0h,??_isr+5
  5789  000024  CFE1 F0CA          	movff	fsr1l,??_isr+6
  5790  000028  CFE2 F0CB          	movff	fsr1h,??_isr+7
  5791  00002C  CFD9 F0CC          	movff	fsr2l,??_isr+8
  5792  000030  CFDA F0CD          	movff	fsr2h,??_isr+9
  5793  000034  CFF3 F0CE          	movff	prodl,??_isr+10
  5794  000038  CFF4 F0CF          	movff	prodh,??_isr+11
  5795  00003C  CFF6 F0D0          	movff	tblptrl,??_isr+12
  5796  000040  CFF7 F0D1          	movff	tblptrh,??_isr+13
  5797  000044  CFF8 F0D2          	movff	tblptru,??_isr+14
  5798  000048  CFF5 F0D3          	movff	tablat,??_isr+15
  5799                           
  5800                           ;main.c: 164: if (INT1IF) {
  5801  00004C  A0F0               	btfss	intcon3,0,c	;volatile
  5802  00004E  D0D6               	goto	i2l265
  5803                           
  5804                           ;main.c: 165: bottle_count_disp = -1;
  5805  000050  0100               	movlb	0	; () banked
  5806  000052  69EE               	setf	_bottle_count_disp& (0+255),b
  5807  000054  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5808                           
  5809                           ;main.c: 166: switch(PORTB){
  5810  000056  D0B1               	goto	i2l4486
  5811  000058                     i2l4428:
  5812                           
  5813                           ;main.c: 168: curr_state = STANDBY;
  5814  000058  0E00               	movlw	0
  5815  00005A  D09B               	goto	L7
  5816  00005C                     i2l269:
  5817                           
  5818                           ;main.c: 171: PORTAbits.RA2 = 1;
  5819  00005C  8480               	bsf	3968,2,c	;volatile
  5820                           
  5821                           ;main.c: 172: INT0IE = 1;
  5822  00005E  88F2               	bsf	intcon,4,c	;volatile
  5823                           
  5824                           ;main.c: 173: INT2IE = 1;
  5825  000060  88F0               	bsf	intcon3,4,c	;volatile
  5826                           
  5827                           ;main.c: 174: TMR0IE = 1;
  5828  000062  8AF2               	bsf	intcon,5,c	;volatile
  5829                           
  5830                           ;main.c: 175: TMR0ON = 1;
  5831  000064  8ED5               	bsf	4053,7,c	;volatile
  5832                           
  5833                           ;main.c: 176: TMR0 = 0;
  5834  000066  0E00               	movlw	0
  5835  000068  6ED7               	movwf	4055,c	;volatile
  5836  00006A  0E00               	movlw	0
  5837  00006C  6ED6               	movwf	4054,c	;volatile
  5838                           
  5839                           ;main.c: 177: read_time();
  5840  00006E  ECF5  F012         	call	_read_time	;wreg free
  5841                           
  5842                           ;main.c: 178: start_time[1] = time[1];
  5843  000072  C09F  F07B         	movff	_time+1,_start_time+1
  5844                           
  5845                           ;main.c: 179: start_time[0] = time[0];
  5846  000076  C09E  F07A         	movff	_time,_start_time
  5847                           
  5848                           ;main.c: 181: bottlequeue_head = bottlequeue_tail = 0;
  5849  00007A  0E00               	movlw	0
  5850  00007C  6E77               	movwf	_bottlequeue_tail+1,c
  5851  00007E  0E00               	movlw	0
  5852  000080  6E76               	movwf	_bottlequeue_tail,c
  5853  000082  C076  F0A5         	movff	_bottlequeue_tail,_bottlequeue_head
  5854  000086  C077  F0A6         	movff	_bottlequeue_tail+1,_bottlequeue_head+1
  5855                           
  5856                           ;main.c: 183: lcdInst(0b00000001);
  5857  00008A  0E01               	movlw	1
  5858  00008C  EC00  F016         	call	i2_lcdInst
  5859                           
  5860                           ;main.c: 184: curr_state = OPERATION;
  5861  000090  0E02               	movlw	2
  5862  000092  D07F               	goto	L7
  5863  000094                     i2l4444:
  5864                           
  5865                           ;main.c: 187: bottle_count_disp += 1;
  5866  000094  0100               	movlb	0	; () banked
  5867  000096  4BEE               	infsnz	_bottle_count_disp& (0+255),f,b
  5868  000098  2BEF               	incf	(_bottle_count_disp+1)& (0+255),f,b
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;main.c: 188: curr_state = BOTTLECOUNT;
  5872  00009A  0E05               	movlw	5
  5873  00009C  0100               	movlb	0	; () banked
  5874  00009E  6FC3               	movwf	_curr_state& (0+255),b
  5875  0000A0                     i2l4448:
  5876  0000A0  0E1F               	movlw	31
  5877  0000A2  1881               	xorwf	3969,w,c	;volatile
  5878  0000A4  A4D8               	btfss	status,2,c
  5879  0000A6  D0A8               	goto	i2l268
  5880  0000A8  D7FB               	goto	i2l4448
  5881  0000AA                     i2l4450:
  5882                           
  5883                           ;main.c: 192: operation_time = etime - stime;
  5884  0000AA  C07C  F0C4         	movff	_stime,??_isr
  5885  0000AE  C07D  F0C5         	movff	_stime+1,??_isr+1
  5886  0000B2  0100               	movlb	0	; () banked
  5887  0000B4  1FC4               	comf	??_isr& (0+255),f,b
  5888  0000B6  1FC5               	comf	(??_isr+1)& (0+255),f,b
  5889  0000B8  4BC4               	infsnz	??_isr& (0+255),f,b
  5890  0000BA  2BC5               	incf	(??_isr+1)& (0+255),f,b
  5891  0000BC  0100               	movlb	0	; () banked
  5892  0000BE  51B1               	movf	_etime& (0+255),w,b
  5893  0000C0  0100               	movlb	0	; () banked
  5894  0000C2  25C4               	addwf	??_isr& (0+255),w,b
  5895  0000C4  0100               	movlb	0	; () banked
  5896  0000C6  6FB7               	movwf	_operation_time& (0+255),b
  5897  0000C8  0100               	movlb	0	; () banked
  5898  0000CA  51B2               	movf	(_etime+1)& (0+255),w,b
  5899  0000CC  0100               	movlb	0	; () banked
  5900  0000CE  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  5901  0000D0  0100               	movlb	0	; () banked
  5902  0000D2  6FB8               	movwf	(_operation_time+1)& (0+255),b
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;main.c: 193: curr_state = BOTTLETIME;
  5906  0000D4  0E06               	movlw	6
  5907  0000D6  D05D               	goto	L7
  5908  0000D8                     i2l4454:
  5909                           
  5910                           ;main.c: 196: curr_state = DATETIME;
  5911  0000D8  0E04               	movlw	4
  5912  0000DA  D05B               	goto	L7
  5913  0000DC                     i2l4456:
  5914                           
  5915                           ;main.c: 199: read_time();
  5916  0000DC  ECF5  F012         	call	_read_time	;wreg free
  5917                           
  5918                           ;main.c: 200: end_time[1] = time[1];
  5919  0000E0  C09F  F079         	movff	_time+1,_end_time+1
  5920                           
  5921                           ;main.c: 201: end_time[0] = time[0];
  5922  0000E4  C09E  F078         	movff	_time,_end_time
  5923                           
  5924                           ;main.c: 202: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5925  0000E8  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  5926  0000EC  6A64               	clrf	dec_to_hex@num+1,c
  5927  0000EE  ECE0  F00A         	call	_dec_to_hex	;wreg free
  5928  0000F2  C063  F073         	movff	?_dec_to_hex,_isr$1340
  5929  0000F6  C064  F074         	movff	?_dec_to_hex+1,_isr$1340+1
  5930                           
  5931                           ;main.c: 202: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5932  0000FA  C073  F001         	movff	_isr$1340,i2___wmul@multiplier
  5933  0000FE  C074  F002         	movff	_isr$1340+1,i2___wmul@multiplier+1
  5934  000102  0E00               	movlw	0
  5935  000104  6E04               	movwf	i2___wmul@multiplicand+1,c
  5936  000106  0E3C               	movlw	60
  5937  000108  6E03               	movwf	i2___wmul@multiplicand,c
  5938  00010A  EC86  F015         	call	i2___wmul	;wreg free
  5939  00010E  C001  F0C4         	movff	?i2___wmul,??_isr
  5940  000112  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  5941  000116  C07A  F063         	movff	_start_time,dec_to_hex@num
  5942  00011A  6A64               	clrf	dec_to_hex@num+1,c
  5943  00011C  ECE0  F00A         	call	_dec_to_hex	;wreg free
  5944  000120  5063               	movf	?_dec_to_hex,w,c
  5945  000122  0100               	movlb	0	; () banked
  5946  000124  25C4               	addwf	??_isr& (0+255),w,b
  5947  000126  6E7C               	movwf	_stime,c
  5948  000128  5064               	movf	?_dec_to_hex+1,w,c
  5949  00012A  0100               	movlb	0	; () banked
  5950  00012C  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  5951  00012E  6E7D               	movwf	_stime+1,c
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;main.c: 203: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5955  000130  C079  F063         	movff	_end_time+1,dec_to_hex@num
  5956  000134  6A64               	clrf	dec_to_hex@num+1,c
  5957  000136  ECE0  F00A         	call	_dec_to_hex	;wreg free
  5958  00013A  C063  F073         	movff	?_dec_to_hex,_isr$1340
  5959  00013E  C064  F074         	movff	?_dec_to_hex+1,_isr$1340+1
  5960                           
  5961                           ;main.c: 203: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5962  000142  C073  F001         	movff	_isr$1340,i2___wmul@multiplier
  5963  000146  C074  F002         	movff	_isr$1340+1,i2___wmul@multiplier+1
  5964  00014A  0E00               	movlw	0
  5965  00014C  6E04               	movwf	i2___wmul@multiplicand+1,c
  5966  00014E  0E3C               	movlw	60
  5967  000150  6E03               	movwf	i2___wmul@multiplicand,c
  5968  000152  EC86  F015         	call	i2___wmul	;wreg free
  5969  000156  C001  F0C4         	movff	?i2___wmul,??_isr
  5970  00015A  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  5971  00015E  C078  F063         	movff	_end_time,dec_to_hex@num
  5972  000162  6A64               	clrf	dec_to_hex@num+1,c
  5973  000164  ECE0  F00A         	call	_dec_to_hex	;wreg free
  5974  000168  5063               	movf	?_dec_to_hex,w,c
  5975  00016A  0100               	movlb	0	; () banked
  5976  00016C  25C4               	addwf	??_isr& (0+255),w,b
  5977  00016E  0100               	movlb	0	; () banked
  5978  000170  6FB1               	movwf	_etime& (0+255),b
  5979  000172  5064               	movf	?_dec_to_hex+1,w,c
  5980  000174  0100               	movlb	0	; () banked
  5981  000176  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  5982  000178  0100               	movlb	0	; () banked
  5983  00017A  6FB2               	movwf	(_etime+1)& (0+255),b
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;main.c: 204: lcdInst(0b00000001);
  5987  00017C  0E01               	movlw	1
  5988  00017E  EC00  F016         	call	i2_lcdInst
  5989                           
  5990                           ;main.c: 205: curr_state = OPERATIONEND;
  5991  000182  0E03               	movlw	3
  5992  000184  D006               	goto	L7
  5993  000186                     i2l277:
  5994                           
  5995                           ;main.c: 208: TMR0ON = 0;
  5996  000186  9ED5               	bcf	4053,7,c	;volatile
  5997                           
  5998                           ;main.c: 209: INT0IE = 0;
  5999  000188  98F2               	bcf	intcon,4,c	;volatile
  6000                           
  6001                           ;main.c: 210: lcdInst(0b00000001);
  6002  00018A  0E01               	movlw	1
  6003  00018C  EC00  F016         	call	i2_lcdInst
  6004                           
  6005                           ;main.c: 211: curr_state = EMERGENCYSTOP;
  6006  000190  0E01               	movlw	1
  6007  000192                     L7:
  6008  000192  0100               	movlb	0	; () banked
  6009  000194  6FC3               	movwf	_curr_state& (0+255),b
  6010                           
  6011                           ;main.c: 212: break;
  6012  000196  D030               	goto	i2l268
  6013  000198                     i2l4478:
  6014                           
  6015                           ;main.c: 214: servo_rotate0(1);
  6016  000198  0E00               	movlw	0
  6017  00019A  6E10               	movwf	servo_rotate0@degree+1,c
  6018  00019C  0E01               	movlw	1
  6019  00019E  6E0F               	movwf	servo_rotate0@degree,c
  6020  0001A0  EC04  F011         	call	_servo_rotate0	;wreg free
  6021                           
  6022                           ;main.c: 215: break;
  6023  0001A4  D029               	goto	i2l268
  6024  0001A6                     i2l4480:
  6025                           
  6026                           ;main.c: 217: servo_rotate0(180);
  6027  0001A6  0E00               	movlw	0
  6028  0001A8  6E10               	movwf	servo_rotate0@degree+1,c
  6029  0001AA  0EB4               	movlw	180
  6030  0001AC  6E0F               	movwf	servo_rotate0@degree,c
  6031  0001AE  EC04  F011         	call	_servo_rotate0	;wreg free
  6032                           
  6033                           ;main.c: 218: break;
  6034  0001B2  D022               	goto	i2l268
  6035  0001B4                     i2l4482:
  6036                           
  6037                           ;main.c: 220: read_colorsensor();
  6038  0001B4  ECA9  F00D         	call	i2_read_colorsensor	;wreg free
  6039                           
  6040                           ;main.c: 222: }
  6041                           
  6042                           ;main.c: 221: break;
  6043  0001B8  D01F               	goto	i2l268
  6044  0001BA                     i2l4486:
  6045  0001BA  5081               	movf	3969,w,c	;volatile
  6046                           
  6047                           ; Switch size 1, requested type "space"
  6048                           ; Number of cases is 10, Range of values is 15 to 239
  6049                           ; switch strategies available:
  6050                           ; Name         Instructions Cycles
  6051                           ; simple_byte           31    16 (average)
  6052                           ;	Chosen strategy is simple_byte
  6053  0001BC  0A0F               	xorlw	15	; case 15
  6054  0001BE  B4D8               	btfsc	status,2,c
  6055  0001C0  D74D               	goto	i2l269
  6056  0001C2  0A10               	xorlw	16	; case 31
  6057  0001C4  B4D8               	btfsc	status,2,c
  6058  0001C6  D766               	goto	i2l4444
  6059  0001C8  0A30               	xorlw	48	; case 47
  6060  0001CA  B4D8               	btfsc	status,2,c
  6061  0001CC  D76E               	goto	i2l4450
  6062  0001CE  0A10               	xorlw	16	; case 63
  6063  0001D0  B4D8               	btfsc	status,2,c
  6064  0001D2  D782               	goto	i2l4454
  6065  0001D4  0A70               	xorlw	112	; case 79
  6066  0001D6  B4D8               	btfsc	status,2,c
  6067  0001D8  D781               	goto	i2l4456
  6068  0001DA  0A30               	xorlw	48	; case 127
  6069  0001DC  B4D8               	btfsc	status,2,c
  6070  0001DE  D7DC               	goto	i2l4478
  6071  0001E0  0AD0               	xorlw	208	; case 175
  6072  0001E2  B4D8               	btfsc	status,2,c
  6073  0001E4  D7E7               	goto	i2l4482
  6074  0001E6  0A10               	xorlw	16	; case 191
  6075  0001E8  B4D8               	btfsc	status,2,c
  6076  0001EA  D7DD               	goto	i2l4480
  6077  0001EC  0A70               	xorlw	112	; case 207
  6078  0001EE  B4D8               	btfsc	status,2,c
  6079  0001F0  D7CA               	goto	i2l277
  6080  0001F2  0A20               	xorlw	32	; case 239
  6081  0001F4  B4D8               	btfsc	status,2,c
  6082  0001F6  D730               	goto	i2l4428
  6083  0001F8                     i2l268:
  6084                           
  6085                           ;main.c: 223: INT1IF = 0;
  6086  0001F8  90F0               	bcf	intcon3,0,c	;volatile
  6087                           
  6088                           ;main.c: 224: }
  6089  0001FA  D1F5               	goto	i2l313
  6090  0001FC                     i2l265:
  6091                           
  6092                           ;main.c: 225: else if (INT0IF){
  6093  0001FC  A2F2               	btfss	intcon,1,c	;volatile
  6094  0001FE  D10D               	goto	i2l282
  6095                           
  6096                           ;main.c: 226: if(PORTAbits.RA3){
  6097  000200  A680               	btfss	3968,3,c	;volatile
  6098  000202  D109               	goto	i2l4542
  6099                           
  6100                           ;main.c: 227: read_colorsensor();
  6101  000204  ECA9  F00D         	call	i2_read_colorsensor	;wreg free
  6102                           
  6103                           ;main.c: 228: if (color[0]>10000 && color[1]>10000 && color[2]>10000 && color[3]>10000) 
      +                          bottlequeue[bottlequeue_tail] = 2;
  6104  000208  0100               	movlb	0	; () banked
  6105  00020A  BF97               	btfsc	(_color+1)& (0+255),7,b
  6106  00020C  D034               	goto	i2l4502
  6107  00020E  0E11               	movlw	17
  6108  000210  0100               	movlb	0	; () banked
  6109  000212  5D96               	subwf	_color& (0+255),w,b
  6110  000214  0E27               	movlw	39
  6111  000216  0100               	movlb	0	; () banked
  6112  000218  5997               	subwfb	(_color+1)& (0+255),w,b
  6113  00021A  A0D8               	btfss	status,0,c
  6114  00021C  D02C               	goto	i2l4502
  6115                           
  6116                           ; BSR set to: 0
  6117  00021E  0100               	movlb	0	; () banked
  6118  000220  BF99               	btfsc	(_color+3)& (0+255),7,b
  6119  000222  D029               	goto	i2l4502
  6120  000224  0E11               	movlw	17
  6121  000226  0100               	movlb	0	; () banked
  6122  000228  5D98               	subwf	(_color+2)& (0+255),w,b
  6123  00022A  0E27               	movlw	39
  6124  00022C  0100               	movlb	0	; () banked
  6125  00022E  5999               	subwfb	(_color+3)& (0+255),w,b
  6126  000230  A0D8               	btfss	status,0,c
  6127  000232  D021               	goto	i2l4502
  6128                           
  6129                           ; BSR set to: 0
  6130  000234  0100               	movlb	0	; () banked
  6131  000236  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6132  000238  D01E               	goto	i2l4502
  6133  00023A  0E11               	movlw	17
  6134  00023C  0100               	movlb	0	; () banked
  6135  00023E  5D9A               	subwf	(_color+4)& (0+255),w,b
  6136  000240  0E27               	movlw	39
  6137  000242  0100               	movlb	0	; () banked
  6138  000244  599B               	subwfb	(_color+5)& (0+255),w,b
  6139  000246  A0D8               	btfss	status,0,c
  6140  000248  D016               	goto	i2l4502
  6141                           
  6142                           ; BSR set to: 0
  6143  00024A  0100               	movlb	0	; () banked
  6144  00024C  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6145  00024E  D013               	goto	i2l4502
  6146  000250  0E11               	movlw	17
  6147  000252  0100               	movlb	0	; () banked
  6148  000254  5D9C               	subwf	(_color+6)& (0+255),w,b
  6149  000256  0E27               	movlw	39
  6150  000258  0100               	movlb	0	; () banked
  6151  00025A  599D               	subwfb	(_color+7)& (0+255),w,b
  6152  00025C  A0D8               	btfss	status,0,c
  6153  00025E  D00B               	goto	i2l4502
  6154                           
  6155                           ; BSR set to: 0
  6156  000260  90D8               	bcf	status,0,c
  6157  000262  3476               	rlcf	_bottlequeue_tail,w,c
  6158  000264  6ED9               	movwf	fsr2l,c
  6159  000266  3477               	rlcf	_bottlequeue_tail+1,w,c
  6160  000268  6EDA               	movwf	fsr2h,c
  6161  00026A  0E80               	movlw	low _bottlequeue
  6162  00026C  26D9               	addwf	fsr2l,f,c
  6163  00026E  0E00               	movlw	high _bottlequeue
  6164  000270  22DA               	addwfc	fsr2h,f,c
  6165  000272  0E02               	movlw	2
  6166  000274  D0A4               	goto	L10
  6167  000276                     i2l4502:
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;main.c: 229: else if (color[0]<3000 && color[1]<1100 && color[2]<1100 && color[3]<1200)
      +                           bottlequeue[bottlequeue_tail] = 4;
  6171  000276  0100               	movlb	0	; () banked
  6172  000278  BF97               	btfsc	(_color+1)& (0+255),7,b
  6173  00027A  D008               	goto	i2l4504
  6174  00027C  0EB8               	movlw	184
  6175  00027E  0100               	movlb	0	; () banked
  6176  000280  5D96               	subwf	_color& (0+255),w,b
  6177  000282  0E0B               	movlw	11
  6178  000284  0100               	movlb	0	; () banked
  6179  000286  5997               	subwfb	(_color+1)& (0+255),w,b
  6180  000288  B0D8               	btfsc	status,0,c
  6181  00028A  D02C               	goto	i2l4512
  6182  00028C                     i2l4504:
  6183                           
  6184                           ; BSR set to: 0
  6185  00028C  0100               	movlb	0	; () banked
  6186  00028E  BF99               	btfsc	(_color+3)& (0+255),7,b
  6187  000290  D008               	goto	i2l4506
  6188  000292  0E4C               	movlw	76
  6189  000294  0100               	movlb	0	; () banked
  6190  000296  5D98               	subwf	(_color+2)& (0+255),w,b
  6191  000298  0E04               	movlw	4
  6192  00029A  0100               	movlb	0	; () banked
  6193  00029C  5999               	subwfb	(_color+3)& (0+255),w,b
  6194  00029E  B0D8               	btfsc	status,0,c
  6195  0002A0  D021               	goto	i2l4512
  6196  0002A2                     i2l4506:
  6197                           
  6198                           ; BSR set to: 0
  6199  0002A2  0100               	movlb	0	; () banked
  6200  0002A4  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6201  0002A6  D008               	goto	i2l4508
  6202  0002A8  0E4C               	movlw	76
  6203  0002AA  0100               	movlb	0	; () banked
  6204  0002AC  5D9A               	subwf	(_color+4)& (0+255),w,b
  6205  0002AE  0E04               	movlw	4
  6206  0002B0  0100               	movlb	0	; () banked
  6207  0002B2  599B               	subwfb	(_color+5)& (0+255),w,b
  6208  0002B4  B0D8               	btfsc	status,0,c
  6209  0002B6  D016               	goto	i2l4512
  6210  0002B8                     i2l4508:
  6211                           
  6212                           ; BSR set to: 0
  6213  0002B8  0100               	movlb	0	; () banked
  6214  0002BA  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6215  0002BC  D008               	goto	i2l4510
  6216  0002BE  0EB0               	movlw	176
  6217  0002C0  0100               	movlb	0	; () banked
  6218  0002C2  5D9C               	subwf	(_color+6)& (0+255),w,b
  6219  0002C4  0E04               	movlw	4
  6220  0002C6  0100               	movlb	0	; () banked
  6221  0002C8  599D               	subwfb	(_color+7)& (0+255),w,b
  6222  0002CA  B0D8               	btfsc	status,0,c
  6223  0002CC  D00B               	goto	i2l4512
  6224  0002CE                     i2l4510:
  6225                           
  6226                           ; BSR set to: 0
  6227  0002CE  90D8               	bcf	status,0,c
  6228  0002D0  3476               	rlcf	_bottlequeue_tail,w,c
  6229  0002D2  6ED9               	movwf	fsr2l,c
  6230  0002D4  3477               	rlcf	_bottlequeue_tail+1,w,c
  6231  0002D6  6EDA               	movwf	fsr2h,c
  6232  0002D8  0E80               	movlw	low _bottlequeue
  6233  0002DA  26D9               	addwf	fsr2l,f,c
  6234  0002DC  0E00               	movlw	high _bottlequeue
  6235  0002DE  22DA               	addwfc	fsr2h,f,c
  6236  0002E0  0E04               	movlw	4
  6237  0002E2  D06D               	goto	L10
  6238  0002E4                     i2l4512:
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;main.c: 230: else if (color[0]<5200 && color[1]<3200 && color[3]<1400 && color[3]<1300)
      +                           bottlequeue[bottlequeue_tail] = 0;
  6242  0002E4  0100               	movlb	0	; () banked
  6243  0002E6  BF97               	btfsc	(_color+1)& (0+255),7,b
  6244  0002E8  D008               	goto	i2l4514
  6245  0002EA  0E50               	movlw	80
  6246  0002EC  0100               	movlb	0	; () banked
  6247  0002EE  5D96               	subwf	_color& (0+255),w,b
  6248  0002F0  0E14               	movlw	20
  6249  0002F2  0100               	movlb	0	; () banked
  6250  0002F4  5997               	subwfb	(_color+1)& (0+255),w,b
  6251  0002F6  B0D8               	btfsc	status,0,c
  6252  0002F8  D02C               	goto	i2l4522
  6253  0002FA                     i2l4514:
  6254                           
  6255                           ; BSR set to: 0
  6256  0002FA  0100               	movlb	0	; () banked
  6257  0002FC  BF99               	btfsc	(_color+3)& (0+255),7,b
  6258  0002FE  D008               	goto	i2l4516
  6259  000300  0E80               	movlw	128
  6260  000302  0100               	movlb	0	; () banked
  6261  000304  5D98               	subwf	(_color+2)& (0+255),w,b
  6262  000306  0E0C               	movlw	12
  6263  000308  0100               	movlb	0	; () banked
  6264  00030A  5999               	subwfb	(_color+3)& (0+255),w,b
  6265  00030C  B0D8               	btfsc	status,0,c
  6266  00030E  D021               	goto	i2l4522
  6267  000310                     i2l4516:
  6268                           
  6269                           ; BSR set to: 0
  6270  000310  0100               	movlb	0	; () banked
  6271  000312  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6272  000314  D008               	goto	i2l4518
  6273  000316  0E78               	movlw	120
  6274  000318  0100               	movlb	0	; () banked
  6275  00031A  5D9C               	subwf	(_color+6)& (0+255),w,b
  6276  00031C  0E05               	movlw	5
  6277  00031E  0100               	movlb	0	; () banked
  6278  000320  599D               	subwfb	(_color+7)& (0+255),w,b
  6279  000322  B0D8               	btfsc	status,0,c
  6280  000324  D016               	goto	i2l4522
  6281  000326                     i2l4518:
  6282                           
  6283                           ; BSR set to: 0
  6284  000326  0100               	movlb	0	; () banked
  6285  000328  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6286  00032A  D008               	goto	i2l4520
  6287  00032C  0E14               	movlw	20
  6288  00032E  0100               	movlb	0	; () banked
  6289  000330  5D9C               	subwf	(_color+6)& (0+255),w,b
  6290  000332  0E05               	movlw	5
  6291  000334  0100               	movlb	0	; () banked
  6292  000336  599D               	subwfb	(_color+7)& (0+255),w,b
  6293  000338  B0D8               	btfsc	status,0,c
  6294  00033A  D00B               	goto	i2l4522
  6295  00033C                     i2l4520:
  6296                           
  6297                           ; BSR set to: 0
  6298  00033C  90D8               	bcf	status,0,c
  6299  00033E  3476               	rlcf	_bottlequeue_tail,w,c
  6300  000340  6ED9               	movwf	fsr2l,c
  6301  000342  3477               	rlcf	_bottlequeue_tail+1,w,c
  6302  000344  6EDA               	movwf	fsr2h,c
  6303  000346  0E80               	movlw	low _bottlequeue
  6304  000348  26D9               	addwf	fsr2l,f,c
  6305  00034A  0E00               	movlw	high _bottlequeue
  6306  00034C  22DA               	addwfc	fsr2h,f,c
  6307  00034E  0E00               	movlw	0
  6308  000350  D036               	goto	L10
  6309  000352                     i2l4522:
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;main.c: 231: else if (color[0]>10000 && color[1]>3600 && color[2]>3900 && color[3]>3400
      +                          ) bottlequeue[bottlequeue_tail] = 6;
  6313  000352  0100               	movlb	0	; () banked
  6314  000354  BF97               	btfsc	(_color+1)& (0+255),7,b
  6315  000356  D036               	goto	i2l4532
  6316  000358  0E11               	movlw	17
  6317  00035A  0100               	movlb	0	; () banked
  6318  00035C  5D96               	subwf	_color& (0+255),w,b
  6319  00035E  0E27               	movlw	39
  6320  000360  0100               	movlb	0	; () banked
  6321  000362  5997               	subwfb	(_color+1)& (0+255),w,b
  6322  000364  A0D8               	btfss	status,0,c
  6323  000366  D02E               	goto	i2l4532
  6324                           
  6325                           ; BSR set to: 0
  6326  000368  0100               	movlb	0	; () banked
  6327  00036A  BF99               	btfsc	(_color+3)& (0+255),7,b
  6328  00036C  D02B               	goto	i2l4532
  6329  00036E  0E11               	movlw	17
  6330  000370  0100               	movlb	0	; () banked
  6331  000372  5D98               	subwf	(_color+2)& (0+255),w,b
  6332  000374  0E0E               	movlw	14
  6333  000376  0100               	movlb	0	; () banked
  6334  000378  5999               	subwfb	(_color+3)& (0+255),w,b
  6335  00037A  A0D8               	btfss	status,0,c
  6336  00037C  D023               	goto	i2l4532
  6337                           
  6338                           ; BSR set to: 0
  6339  00037E  0100               	movlb	0	; () banked
  6340  000380  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6341  000382  D020               	goto	i2l4532
  6342  000384  0E3D               	movlw	61
  6343  000386  0100               	movlb	0	; () banked
  6344  000388  5D9A               	subwf	(_color+4)& (0+255),w,b
  6345  00038A  0E0F               	movlw	15
  6346  00038C  0100               	movlb	0	; () banked
  6347  00038E  599B               	subwfb	(_color+5)& (0+255),w,b
  6348  000390  A0D8               	btfss	status,0,c
  6349  000392  D018               	goto	i2l4532
  6350                           
  6351                           ; BSR set to: 0
  6352  000394  0100               	movlb	0	; () banked
  6353  000396  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6354  000398  D015               	goto	i2l4532
  6355  00039A  0E49               	movlw	73
  6356  00039C  0100               	movlb	0	; () banked
  6357  00039E  5D9C               	subwf	(_color+6)& (0+255),w,b
  6358  0003A0  0E0D               	movlw	13
  6359  0003A2  0100               	movlb	0	; () banked
  6360  0003A4  599D               	subwfb	(_color+7)& (0+255),w,b
  6361  0003A6  A0D8               	btfss	status,0,c
  6362  0003A8  D00D               	goto	i2l4532
  6363                           
  6364                           ; BSR set to: 0
  6365  0003AA  90D8               	bcf	status,0,c
  6366  0003AC  3476               	rlcf	_bottlequeue_tail,w,c
  6367  0003AE  6ED9               	movwf	fsr2l,c
  6368  0003B0  3477               	rlcf	_bottlequeue_tail+1,w,c
  6369  0003B2  6EDA               	movwf	fsr2h,c
  6370  0003B4  0E80               	movlw	low _bottlequeue
  6371  0003B6  26D9               	addwf	fsr2l,f,c
  6372  0003B8  0E00               	movlw	high _bottlequeue
  6373  0003BA  22DA               	addwfc	fsr2h,f,c
  6374  0003BC  0E06               	movlw	6
  6375  0003BE                     L10:
  6376  0003BE  6EDE               	movwf	postinc2,c
  6377  0003C0  0E00               	movlw	0
  6378  0003C2  6EDD               	movwf	postdec2,c
  6379  0003C4                     i2l4532:
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;main.c: 232: _delay((unsigned long)((150)*(10000000/4000.0)));
  6383  0003C4  0E02               	movlw	2
  6384  0003C6  0100               	movlb	0	; () banked
  6385  0003C8  6FC5               	movwf	(??_isr+1)& (0+255),b
  6386  0003CA  0EE7               	movlw	231
  6387  0003CC  0100               	movlb	0	; () banked
  6388  0003CE  6FC4               	movwf	??_isr& (0+255),b
  6389  0003D0  0E00               	movlw	0
  6390  0003D2                     i2u482_47:
  6391  0003D2  2EE8               	decfsz	wreg,f,c
  6392  0003D4  D7FE               	bra	i2u482_47
  6393  0003D6  2FC4               	decfsz	??_isr& (0+255),f,b
  6394  0003D8  D7FC               	bra	i2u482_47
  6395  0003DA  2FC5               	decfsz	(??_isr+1)& (0+255),f,b
  6396  0003DC  D7FA               	bra	i2u482_47
  6397  0003DE  F000               	nop	
  6398                           
  6399                           ;main.c: 233: read_colorsensor();
  6400  0003E0  ECA9  F00D         	call	i2_read_colorsensor	;wreg free
  6401                           
  6402                           ;main.c: 234: if (color[0]>1000) bottlequeue[bottlequeue_tail] += 1;
  6403  0003E4  0100               	movlb	0	; () banked
  6404  0003E6  BF97               	btfsc	(_color+1)& (0+255),7,b
  6405  0003E8  D014               	goto	i2l4540
  6406  0003EA  0EE9               	movlw	233
  6407  0003EC  0100               	movlb	0	; () banked
  6408  0003EE  5D96               	subwf	_color& (0+255),w,b
  6409  0003F0  0E03               	movlw	3
  6410  0003F2  0100               	movlb	0	; () banked
  6411  0003F4  5997               	subwfb	(_color+1)& (0+255),w,b
  6412  0003F6  A0D8               	btfss	status,0,c
  6413  0003F8  D00C               	goto	i2l4540
  6414                           
  6415                           ; BSR set to: 0
  6416  0003FA  90D8               	bcf	status,0,c
  6417  0003FC  3476               	rlcf	_bottlequeue_tail,w,c
  6418  0003FE  6ED9               	movwf	fsr2l,c
  6419  000400  3477               	rlcf	_bottlequeue_tail+1,w,c
  6420  000402  6EDA               	movwf	fsr2h,c
  6421  000404  0E80               	movlw	low _bottlequeue
  6422  000406  26D9               	addwf	fsr2l,f,c
  6423  000408  0E00               	movlw	high _bottlequeue
  6424  00040A  22DA               	addwfc	fsr2h,f,c
  6425  00040C  2ADE               	incf	postinc2,f,c
  6426  00040E  0E00               	movlw	0
  6427  000410  22DD               	addwfc	postdec2,f,c
  6428  000412                     i2l4540:
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;main.c: 235: bottlequeue_tail += 1;
  6432  000412  4A76               	infsnz	_bottlequeue_tail,f,c
  6433  000414  2A77               	incf	_bottlequeue_tail+1,f,c
  6434  000416                     i2l4542:
  6435                           
  6436                           ;main.c: 236: }
  6437                           ;main.c: 237: INT0IF = 0;
  6438  000416  92F2               	bcf	intcon,1,c	;volatile
  6439                           
  6440                           ;main.c: 238: }
  6441  000418  D0E6               	goto	i2l313
  6442  00041A                     i2l282:
  6443                           
  6444                           ;main.c: 239: else if (INT2IF){
  6445  00041A  A2F0               	btfss	intcon3,1,c	;volatile
  6446  00041C  D0B6               	goto	i2l293
  6447                           
  6448                           ;main.c: 240: if(PORTAbits.RA4){
  6449  00041E  A880               	btfss	3968,4,c	;volatile
  6450  000420  D0B2               	goto	i2l294
  6451                           
  6452                           ;main.c: 241: nodedata = bottlequeue[bottlequeue_head];
  6453  000422  90D8               	bcf	status,0,c
  6454  000424  0100               	movlb	0	; () banked
  6455  000426  35A5               	rlcf	_bottlequeue_head& (0+255),w,b
  6456  000428  6ED9               	movwf	fsr2l,c
  6457  00042A  0100               	movlb	0	; () banked
  6458  00042C  35A6               	rlcf	(_bottlequeue_head+1)& (0+255),w,b
  6459  00042E  6EDA               	movwf	fsr2h,c
  6460  000430  0E80               	movlw	low _bottlequeue
  6461  000432  26D9               	addwf	fsr2l,f,c
  6462  000434  0E00               	movlw	high _bottlequeue
  6463  000436  22DA               	addwfc	fsr2h,f,c
  6464  000438  CFDE F0B3          	movff	postinc2,_nodedata
  6465  00043C  CFDD F0B4          	movff	postdec2,_nodedata+1
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;main.c: 242: bottlequeue_head += 1;
  6469  000440  0100               	movlb	0	; () banked
  6470  000442  4BA5               	infsnz	_bottlequeue_head& (0+255),f,b
  6471  000444  2BA6               	incf	(_bottlequeue_head+1)& (0+255),f,b
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;main.c: 243: total_bottle_count += 1;
  6475  000446  0100               	movlb	0	; () banked
  6476  000448  4BB9               	infsnz	_total_bottle_count& (0+255),f,b
  6477  00044A  2BBA               	incf	(_total_bottle_count+1)& (0+255),f,b
  6478                           
  6479                           ;main.c: 244: switch (nodedata){
  6480  00044C  D079               	goto	i2l4586
  6481  00044E                     i2l4552:
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;main.c: 246: servo_rotate0(0);
  6485  00044E  0E00               	movlw	0
  6486  000450  6E10               	movwf	servo_rotate0@degree+1,c
  6487  000452  0E00               	movlw	0
  6488  000454  6E0F               	movwf	servo_rotate0@degree,c
  6489  000456  EC04  F011         	call	_servo_rotate0	;wreg free
  6490                           
  6491                           ;main.c: 247: servo_rotate2(0);
  6492  00045A  0E00               	movlw	0
  6493  00045C  6E10               	movwf	servo_rotate2@degree+1,c
  6494  00045E  0E00               	movlw	0
  6495  000460  6E0F               	movwf	servo_rotate2@degree,c
  6496  000462  EC58  F010         	call	_servo_rotate2	;wreg free
  6497                           
  6498                           ;main.c: 248: yopcaplbl_count += 1;
  6499  000466  0100               	movlb	0	; () banked
  6500  000468  4BBF               	infsnz	_yopcaplbl_count& (0+255),f,b
  6501  00046A  2BC0               	incf	(_yopcaplbl_count+1)& (0+255),f,b
  6502  00046C                     i2l4556:
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;main.c: 250: servo_rotate0(0);
  6506  00046C  0E00               	movlw	0
  6507  00046E  6E10               	movwf	servo_rotate0@degree+1,c
  6508  000470  0E00               	movlw	0
  6509  000472  6E0F               	movwf	servo_rotate0@degree,c
  6510  000474  EC04  F011         	call	_servo_rotate0	;wreg free
  6511                           
  6512                           ;main.c: 251: servo_rotate2(0);
  6513  000478  0E00               	movlw	0
  6514  00047A  6E10               	movwf	servo_rotate2@degree+1,c
  6515  00047C  0E00               	movlw	0
  6516  00047E  6E0F               	movwf	servo_rotate2@degree,c
  6517  000480  EC58  F010         	call	_servo_rotate2	;wreg free
  6518                           
  6519                           ;main.c: 252: yopcap_count += 1;
  6520  000484  0100               	movlb	0	; () banked
  6521  000486  4BBD               	infsnz	_yopcap_count& (0+255),f,b
  6522  000488  2BBE               	incf	(_yopcap_count+1)& (0+255),f,b
  6523  00048A                     i2l298:
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;main.c: 254: servo_rotate0(0);
  6527  00048A  0E00               	movlw	0
  6528  00048C  6E10               	movwf	servo_rotate0@degree+1,c
  6529  00048E  0E00               	movlw	0
  6530  000490  6E0F               	movwf	servo_rotate0@degree,c
  6531  000492  EC04  F011         	call	_servo_rotate0	;wreg free
  6532                           
  6533                           ;main.c: 255: servo_rotate2(120);
  6534  000496  0E00               	movlw	0
  6535  000498  6E10               	movwf	servo_rotate2@degree+1,c
  6536  00049A  0E78               	movlw	120
  6537  00049C  6E0F               	movwf	servo_rotate2@degree,c
  6538  00049E  EC58  F010         	call	_servo_rotate2	;wreg free
  6539                           
  6540                           ;main.c: 256: yoplbl_count += 1;
  6541  0004A2  0100               	movlb	0	; () banked
  6542  0004A4  4BC1               	infsnz	_yoplbl_count& (0+255),f,b
  6543  0004A6  2BC2               	incf	(_yoplbl_count+1)& (0+255),f,b
  6544  0004A8                     i2l4564:
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;main.c: 258: servo_rotate0(0);
  6548  0004A8  0E00               	movlw	0
  6549  0004AA  6E10               	movwf	servo_rotate0@degree+1,c
  6550  0004AC  0E00               	movlw	0
  6551  0004AE  6E0F               	movwf	servo_rotate0@degree,c
  6552  0004B0  EC04  F011         	call	_servo_rotate0	;wreg free
  6553                           
  6554                           ;main.c: 259: servo_rotate2(120);
  6555  0004B4  0E00               	movlw	0
  6556  0004B6  6E10               	movwf	servo_rotate2@degree+1,c
  6557  0004B8  0E78               	movlw	120
  6558  0004BA  6E0F               	movwf	servo_rotate2@degree,c
  6559  0004BC  EC58  F010         	call	_servo_rotate2	;wreg free
  6560                           
  6561                           ;main.c: 260: yop_count += 1;
  6562  0004C0  0100               	movlb	0	; () banked
  6563  0004C2  4BBB               	infsnz	_yop_count& (0+255),f,b
  6564  0004C4  2BBC               	incf	(_yop_count+1)& (0+255),f,b
  6565  0004C6                     i2l300:
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;main.c: 262: servo_rotate0(120);
  6569  0004C6  0E00               	movlw	0
  6570  0004C8  6E10               	movwf	servo_rotate0@degree+1,c
  6571  0004CA  0E78               	movlw	120
  6572  0004CC  6E0F               	movwf	servo_rotate0@degree,c
  6573  0004CE  EC04  F011         	call	_servo_rotate0	;wreg free
  6574                           
  6575                           ;main.c: 263: servo_rotate1(0);
  6576  0004D2  0E00               	movlw	0
  6577  0004D4  6E10               	movwf	servo_rotate1@degree+1,c
  6578  0004D6  0E00               	movlw	0
  6579  0004D8  6E0F               	movwf	servo_rotate1@degree,c
  6580  0004DA  ECAE  F010         	call	_servo_rotate1	;wreg free
  6581                           
  6582                           ;main.c: 264: eskacaplbl_count += 1;
  6583  0004DE  0100               	movlb	0	; () banked
  6584  0004E0  4BAD               	infsnz	_eskacaplbl_count& (0+255),f,b
  6585  0004E2  2BAE               	incf	(_eskacaplbl_count+1)& (0+255),f,b
  6586  0004E4                     i2l4572:
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;main.c: 266: servo_rotate0(120);
  6590  0004E4  0E00               	movlw	0
  6591  0004E6  6E10               	movwf	servo_rotate0@degree+1,c
  6592  0004E8  0E78               	movlw	120
  6593  0004EA  6E0F               	movwf	servo_rotate0@degree,c
  6594  0004EC  EC04  F011         	call	_servo_rotate0	;wreg free
  6595                           
  6596                           ;main.c: 267: servo_rotate1(0);
  6597  0004F0  0E00               	movlw	0
  6598  0004F2  6E10               	movwf	servo_rotate1@degree+1,c
  6599  0004F4  0E00               	movlw	0
  6600  0004F6  6E0F               	movwf	servo_rotate1@degree,c
  6601  0004F8  ECAE  F010         	call	_servo_rotate1	;wreg free
  6602                           
  6603                           ;main.c: 268: eskacap_count += 1;
  6604  0004FC  0100               	movlb	0	; () banked
  6605  0004FE  4BAB               	infsnz	_eskacap_count& (0+255),f,b
  6606  000500  2BAC               	incf	(_eskacap_count+1)& (0+255),f,b
  6607  000502                     i2l302:
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;main.c: 270: servo_rotate0(120);
  6611  000502  0E00               	movlw	0
  6612  000504  6E10               	movwf	servo_rotate0@degree+1,c
  6613  000506  0E78               	movlw	120
  6614  000508  6E0F               	movwf	servo_rotate0@degree,c
  6615  00050A  EC04  F011         	call	_servo_rotate0	;wreg free
  6616                           
  6617                           ;main.c: 271: servo_rotate1(120);
  6618  00050E  0E00               	movlw	0
  6619  000510  6E10               	movwf	servo_rotate1@degree+1,c
  6620  000512  0E78               	movlw	120
  6621  000514  6E0F               	movwf	servo_rotate1@degree,c
  6622  000516  ECAE  F010         	call	_servo_rotate1	;wreg free
  6623                           
  6624                           ;main.c: 272: eskalbl_count += 1;
  6625  00051A  0100               	movlb	0	; () banked
  6626  00051C  4BAF               	infsnz	_eskalbl_count& (0+255),f,b
  6627  00051E  2BB0               	incf	(_eskalbl_count+1)& (0+255),f,b
  6628  000520                     i2l4580:
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;main.c: 274: servo_rotate0(120);
  6632  000520  0E00               	movlw	0
  6633  000522  6E10               	movwf	servo_rotate0@degree+1,c
  6634  000524  0E78               	movlw	120
  6635  000526  6E0F               	movwf	servo_rotate0@degree,c
  6636  000528  EC04  F011         	call	_servo_rotate0	;wreg free
  6637                           
  6638                           ;main.c: 275: servo_rotate1(120);
  6639  00052C  0E00               	movlw	0
  6640  00052E  6E10               	movwf	servo_rotate1@degree+1,c
  6641  000530  0E78               	movlw	120
  6642  000532  6E0F               	movwf	servo_rotate1@degree,c
  6643  000534  ECAE  F010         	call	_servo_rotate1	;wreg free
  6644                           
  6645                           ;main.c: 276: eska_count += 1;
  6646  000538  0100               	movlb	0	; () banked
  6647  00053A  4BA9               	infsnz	_eska_count& (0+255),f,b
  6648  00053C  2BAA               	incf	(_eska_count+1)& (0+255),f,b
  6649                           
  6650                           ;main.c: 277: }
  6651  00053E  D023               	goto	i2l294
  6652  000540                     i2l4586:
  6653                           
  6654                           ; BSR set to: 0
  6655  000540  C0B3  F0C4         	movff	_nodedata,??_isr
  6656  000544  C0B4  F0C5         	movff	_nodedata+1,??_isr+1
  6657                           
  6658                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6659                           ; Switch size 1, requested type "space"
  6660                           ; Number of cases is 1, Range of values is 0 to 0
  6661                           ; switch strategies available:
  6662                           ; Name         Instructions Cycles
  6663                           ; simple_byte            4     3 (average)
  6664                           ;	Chosen strategy is simple_byte
  6665  000548  0100               	movlb	0	; () banked
  6666  00054A  51C5               	movf	(??_isr+1)& (0+255),w,b
  6667  00054C  0A00               	xorlw	0	; case 0
  6668  00054E  A4D8               	btfss	status,2,c
  6669  000550  D01A               	goto	i2l294
  6670                           
  6671                           ; BSR set to: 0
  6672                           ; Switch size 1, requested type "space"
  6673                           ; Number of cases is 8, Range of values is 0 to 7
  6674                           ; switch strategies available:
  6675                           ; Name         Instructions Cycles
  6676                           ; simple_byte           25    13 (average)
  6677                           ;	Chosen strategy is simple_byte
  6678  000552  0100               	movlb	0	; () banked
  6679  000554  51C4               	movf	??_isr& (0+255),w,b
  6680  000556  0A00               	xorlw	0	; case 0
  6681  000558  B4D8               	btfsc	status,2,c
  6682  00055A  D779               	goto	i2l4552
  6683  00055C  0A01               	xorlw	1	; case 1
  6684  00055E  B4D8               	btfsc	status,2,c
  6685  000560  D785               	goto	i2l4556
  6686  000562  0A03               	xorlw	3	; case 2
  6687  000564  B4D8               	btfsc	status,2,c
  6688  000566  D791               	goto	i2l298
  6689  000568  0A01               	xorlw	1	; case 3
  6690  00056A  B4D8               	btfsc	status,2,c
  6691  00056C  D79D               	goto	i2l4564
  6692  00056E  0A07               	xorlw	7	; case 4
  6693  000570  B4D8               	btfsc	status,2,c
  6694  000572  D7A9               	goto	i2l300
  6695  000574  0A01               	xorlw	1	; case 5
  6696  000576  B4D8               	btfsc	status,2,c
  6697  000578  D7B5               	goto	i2l4572
  6698  00057A  0A03               	xorlw	3	; case 6
  6699  00057C  B4D8               	btfsc	status,2,c
  6700  00057E  D7C1               	goto	i2l302
  6701  000580  0A01               	xorlw	1	; case 7
  6702  000582  B4D8               	btfsc	status,2,c
  6703  000584  D7CD               	goto	i2l4580
  6704  000586                     i2l294:
  6705                           
  6706                           ;main.c: 278: }
  6707                           ;main.c: 279: INT2IF = 0;
  6708  000586  92F0               	bcf	intcon3,1,c	;volatile
  6709                           
  6710                           ;main.c: 280: }
  6711  000588  D02E               	goto	i2l313
  6712  00058A                     i2l293:
  6713                           
  6714                           ;main.c: 281: else if (TMR0IF){
  6715  00058A  A4F2               	btfss	intcon,2,c	;volatile
  6716  00058C  D012               	goto	i2l4604
  6717                           
  6718                           ;main.c: 282: TMR0ON = 0;
  6719  00058E  9ED5               	bcf	4053,7,c	;volatile
  6720                           
  6721                           ;main.c: 283: read_time();
  6722  000590  ECF5  F012         	call	_read_time	;wreg free
  6723                           
  6724                           ;main.c: 284: end_time[1] = time[1];
  6725  000594  C09F  F079         	movff	_time+1,_end_time+1
  6726                           
  6727                           ;main.c: 285: end_time[0] = time[0];
  6728  000598  C09E  F078         	movff	_time,_end_time
  6729                           
  6730                           ;main.c: 286: lcdInst(0b00000001);
  6731  00059C  0E01               	movlw	1
  6732  00059E  EC00  F016         	call	i2_lcdInst
  6733                           
  6734                           ;main.c: 287: curr_state = OPERATIONEND;
  6735  0005A2  0E03               	movlw	3
  6736  0005A4  0100               	movlb	0	; () banked
  6737  0005A6  6FC3               	movwf	_curr_state& (0+255),b
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;main.c: 288: bottle_count_disp = -1;
  6741  0005A8  0100               	movlb	0	; () banked
  6742  0005AA  69EE               	setf	_bottle_count_disp& (0+255),b
  6743  0005AC  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;main.c: 289: TMR0IF = 0;
  6747  0005AE  94F2               	bcf	intcon,2,c	;volatile
  6748                           
  6749                           ;main.c: 290: }
  6750  0005B0  D01A               	goto	i2l313
  6751  0005B2                     i2l4604:
  6752                           
  6753                           ;main.c: 293: lcdInst(0b10000000);
  6754  0005B2  0E80               	movlw	128
  6755  0005B4  EC00  F016         	call	i2_lcdInst
  6756                           
  6757                           ;main.c: 294: printf("bad interrupt");
  6758  0005B8  0EDC               	movlw	low STR_1
  6759  0005BA  6E0D               	movwf	i2printf@f,c
  6760  0005BC  0EFF               	movlw	high STR_1
  6761  0005BE  6E0E               	movwf	i2printf@f+1,c
  6762  0005C0  ECEB  F004         	call	i2_printf	;wreg free
  6763                           
  6764                           ;main.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  6765  0005C4  0E00               	movlw	0
  6766  0005C6  6E75               	movwf	isr@i,c
  6767  0005C8                     i2l4610:
  6768  0005C8  0E63               	movlw	99
  6769  0005CA  6475               	cpfsgt	isr@i,c
  6770  0005CC  D001               	goto	i2l4614
  6771  0005CE  D7F1               	goto	i2l4604
  6772  0005D0                     i2l4614:
  6773  0005D0  0E21               	movlw	33
  6774  0005D2  0100               	movlb	0	; () banked
  6775  0005D4  6FC4               	movwf	??_isr& (0+255),b
  6776  0005D6  0E76               	movlw	118
  6777  0005D8                     i2u483_47:
  6778  0005D8  2EE8               	decfsz	wreg,f,c
  6779  0005DA  D7FE               	bra	i2u483_47
  6780  0005DC  2FC4               	decfsz	??_isr& (0+255),f,b
  6781  0005DE  D7FC               	bra	i2u483_47
  6782  0005E0  F000               	nop	
  6783  0005E2  2A75               	incf	isr@i,f,c
  6784  0005E4  D7F1               	goto	i2l4610
  6785  0005E6                     i2l313:
  6786  0005E6  C0D3  FFF5         	movff	??_isr+15,tablat
  6787  0005EA  C0D2  FFF8         	movff	??_isr+14,tblptru
  6788  0005EE  C0D1  FFF7         	movff	??_isr+13,tblptrh
  6789  0005F2  C0D0  FFF6         	movff	??_isr+12,tblptrl
  6790  0005F6  C0CF  FFF4         	movff	??_isr+11,prodh
  6791  0005FA  C0CE  FFF3         	movff	??_isr+10,prodl
  6792  0005FE  C0CD  FFDA         	movff	??_isr+9,fsr2h
  6793  000602  C0CC  FFD9         	movff	??_isr+8,fsr2l
  6794  000606  C0CB  FFE2         	movff	??_isr+7,fsr1h
  6795  00060A  C0CA  FFE1         	movff	??_isr+6,fsr1l
  6796  00060E  C0C9  FFEA         	movff	??_isr+5,fsr0h
  6797  000612  C0C8  FFE9         	movff	??_isr+4,fsr0l
  6798  000616  C0C7  FFFB         	movff	??_isr+3,pclatu
  6799  00061A  C0C6  FFFA         	movff	??_isr+2,pclath
  6800  00061E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6801  000620  0011               	retfie		f
  6802  000622                     __end_of_isr:
  6803                           	opt stack 0
  6804                           pclatu	equ	0xFFB
  6805                           pclath	equ	0xFFA
  6806                           tblptru	equ	0xFF8
  6807                           tblptrh	equ	0xFF7
  6808                           tblptrl	equ	0xFF6
  6809                           tablat	equ	0xFF5
  6810                           prodh	equ	0xFF4
  6811                           prodl	equ	0xFF3
  6812                           intcon	equ	0xFF2
  6813                           intcon2	equ	0xFF1
  6814                           intcon3	equ	0xFF0
  6815                           postinc0	equ	0xFEE
  6816                           fsr0h	equ	0xFEA
  6817                           fsr0l	equ	0xFE9
  6818                           wreg	equ	0xFE8
  6819                           fsr1h	equ	0xFE2
  6820                           fsr1l	equ	0xFE1
  6821                           indf2	equ	0xFDF
  6822                           postinc2	equ	0xFDE
  6823                           postdec2	equ	0xFDD
  6824                           fsr2h	equ	0xFDA
  6825                           fsr2l	equ	0xFD9
  6826                           status	equ	0xFD8
  6827                           
  6828 ;; *************** function i2_read_colorsensor *****************
  6829 ;; Defined at:
  6830 ;;		line 506 in file "main.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;		None
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;  read_colorse    2   11[COMRAM] int 
  6835 ;;  read_colorse    2    9[COMRAM] int 
  6836 ;;  read_colorse    2    7[COMRAM] int 
  6837 ;;  read_colorse    2    5[COMRAM] int 
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;Total ram usage:       10 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    2
  6854 ;; This function calls:
  6855 ;;		i2_I2C_Master_Read
  6856 ;;		i2_I2C_Master_Start
  6857 ;;		i2_I2C_Master_Stop
  6858 ;;		i2_I2C_Master_Write
  6859 ;; This function is called by:
  6860 ;;		_isr
  6861 ;; This function uses a non-reentrant model
  6862 ;;
  6863                           
  6864                           	psect	text28
  6865  001B52                     __ptext28:
  6866                           	opt stack 0
  6867  001B52                     i2_read_colorsensor:
  6868                           	opt stack 23
  6869                           
  6870                           ;main.c: 507: int color_low;
  6871                           ;main.c: 508: int color_high;
  6872                           ;main.c: 509: int color_comb;
  6873                           ;main.c: 510: int i;
  6874                           ;main.c: 513: I2C_Master_Start();
  6875                           
  6876                           ;incstack = 0
  6877  001B52  EC1C  F016         	call	i2_I2C_Master_Start	;wreg free
  6878                           
  6879                           ;main.c: 514: I2C_Master_Write(0b01010010);
  6880  001B56  0E00               	movlw	0
  6881  001B58  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6882  001B5A  0E52               	movlw	82
  6883  001B5C  6E02               	movwf	i2I2C_Master_Write@d,c
  6884  001B5E  EC0B  F016         	call	i2_I2C_Master_Write	;wreg free
  6885                           
  6886                           ;main.c: 515: I2C_Master_Write(0b10110100);
  6887  001B62  0E00               	movlw	0
  6888  001B64  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6889  001B66  0EB4               	movlw	180
  6890  001B68  6E02               	movwf	i2I2C_Master_Write@d,c
  6891  001B6A  EC0B  F016         	call	i2_I2C_Master_Write	;wreg free
  6892                           
  6893                           ;main.c: 516: I2C_Master_Start();
  6894  001B6E  EC1C  F016         	call	i2_I2C_Master_Start	;wreg free
  6895                           
  6896                           ;main.c: 517: I2C_Master_Write(0b01010011);
  6897  001B72  0E00               	movlw	0
  6898  001B74  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6899  001B76  0E53               	movlw	83
  6900  001B78  6E02               	movwf	i2I2C_Master_Write@d,c
  6901  001B7A  EC0B  F016         	call	i2_I2C_Master_Write	;wreg free
  6902                           
  6903                           ;main.c: 518: for(i=0; i<3; i++){
  6904  001B7E  0E00               	movlw	0
  6905  001B80  6E0D               	movwf	i2read_colorsensor@i+1,c
  6906  001B82  0E00               	movlw	0
  6907  001B84  6E0C               	movwf	i2read_colorsensor@i,c
  6908  001B86                     i2l4210:
  6909  001B86  BE0D               	btfsc	i2read_colorsensor@i+1,7,c
  6910  001B88  D006               	goto	i2l4214
  6911  001B8A  500D               	movf	i2read_colorsensor@i+1,w,c
  6912  001B8C  E12E               	bnz	i2l4224
  6913  001B8E  0E03               	movlw	3
  6914  001B90  5C0C               	subwf	i2read_colorsensor@i,w,c
  6915  001B92  B0D8               	btfsc	status,0,c
  6916  001B94  D02A               	goto	i2l4224
  6917  001B96                     i2l4214:
  6918                           
  6919                           ;main.c: 519: color_low = I2C_Master_Read(1);
  6920  001B96  0E01               	movlw	1
  6921  001B98  EC73  F015         	call	i2_I2C_Master_Read
  6922  001B9C  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6923  001B9E  5004               	movf	??i2_read_colorsensor,w,c
  6924  001BA0  6E06               	movwf	i2read_colorsensor@color_low,c
  6925  001BA2  6A07               	clrf	i2read_colorsensor@color_low+1,c
  6926                           
  6927                           ;main.c: 520: color_high = I2C_Master_Read(1);
  6928  001BA4  0E01               	movlw	1
  6929  001BA6  EC73  F015         	call	i2_I2C_Master_Read
  6930  001BAA  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6931  001BAC  5004               	movf	??i2_read_colorsensor,w,c
  6932  001BAE  6E08               	movwf	i2read_colorsensor@color_high,c
  6933  001BB0  6A09               	clrf	i2read_colorsensor@color_high+1,c
  6934                           
  6935                           ;main.c: 521: color_comb = (color_high << 8)|(color_low & 0xFF);
  6936  001BB2  5006               	movf	i2read_colorsensor@color_low,w,c
  6937  001BB4  C008  F004         	movff	i2read_colorsensor@color_high,??i2_read_colorsensor
  6938  001BB8  C009  F005         	movff	i2read_colorsensor@color_high+1,??i2_read_colorsensor+1
  6939  001BBC  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  6940  001BC0  6A04               	clrf	??i2_read_colorsensor,c
  6941  001BC2  1004               	iorwf	??i2_read_colorsensor,w,c
  6942  001BC4  6E0A               	movwf	i2read_colorsensor@color_comb,c
  6943  001BC6  5005               	movf	??i2_read_colorsensor+1,w,c
  6944  001BC8  6E0B               	movwf	i2read_colorsensor@color_comb+1,c
  6945                           
  6946                           ;main.c: 522: color[i] = color_comb;
  6947  001BCA  90D8               	bcf	status,0,c
  6948  001BCC  340C               	rlcf	i2read_colorsensor@i,w,c
  6949  001BCE  6ED9               	movwf	fsr2l,c
  6950  001BD0  340D               	rlcf	i2read_colorsensor@i+1,w,c
  6951  001BD2  6EDA               	movwf	fsr2h,c
  6952  001BD4  0E96               	movlw	low _color
  6953  001BD6  26D9               	addwf	fsr2l,f,c
  6954  001BD8  0E00               	movlw	high _color
  6955  001BDA  22DA               	addwfc	fsr2h,f,c
  6956  001BDC  C00A  FFDE         	movff	i2read_colorsensor@color_comb,postinc2
  6957  001BE0  C00B  FFDD         	movff	i2read_colorsensor@color_comb+1,postdec2
  6958  001BE4  4A0C               	infsnz	i2read_colorsensor@i,f,c
  6959  001BE6  2A0D               	incf	i2read_colorsensor@i+1,f,c
  6960  001BE8  D7CE               	goto	i2l4210
  6961  001BEA                     i2l4224:
  6962                           
  6963                           ;main.c: 523: }
  6964                           ;main.c: 524: color_low = I2C_Master_Read(1);
  6965  001BEA  0E01               	movlw	1
  6966  001BEC  EC73  F015         	call	i2_I2C_Master_Read
  6967  001BF0  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6968  001BF2  5004               	movf	??i2_read_colorsensor,w,c
  6969  001BF4  6E06               	movwf	i2read_colorsensor@color_low,c
  6970  001BF6  6A07               	clrf	i2read_colorsensor@color_low+1,c
  6971                           
  6972                           ;main.c: 525: color_high = I2C_Master_Read(0);
  6973  001BF8  0E00               	movlw	0
  6974  001BFA  EC73  F015         	call	i2_I2C_Master_Read
  6975  001BFE  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6976  001C00  5004               	movf	??i2_read_colorsensor,w,c
  6977  001C02  6E08               	movwf	i2read_colorsensor@color_high,c
  6978  001C04  6A09               	clrf	i2read_colorsensor@color_high+1,c
  6979                           
  6980                           ;main.c: 526: color_comb = (color_high << 8)|(color_low & 0xFF);
  6981  001C06  5006               	movf	i2read_colorsensor@color_low,w,c
  6982  001C08  C008  F004         	movff	i2read_colorsensor@color_high,??i2_read_colorsensor
  6983  001C0C  C009  F005         	movff	i2read_colorsensor@color_high+1,??i2_read_colorsensor+1
  6984  001C10  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  6985  001C14  6A04               	clrf	??i2_read_colorsensor,c
  6986  001C16  1004               	iorwf	??i2_read_colorsensor,w,c
  6987  001C18  6E0A               	movwf	i2read_colorsensor@color_comb,c
  6988  001C1A  5005               	movf	??i2_read_colorsensor+1,w,c
  6989  001C1C  6E0B               	movwf	i2read_colorsensor@color_comb+1,c
  6990                           
  6991                           ;main.c: 527: color[3] = color_comb;
  6992  001C1E  C00A  F09C         	movff	i2read_colorsensor@color_comb,_color+6
  6993  001C22  C00B  F09D         	movff	i2read_colorsensor@color_comb+1,_color+7
  6994                           
  6995                           ;main.c: 528: I2C_Master_Stop();
  6996  001C26  EC18  F016         	call	i2_I2C_Master_Stop	;wreg free
  6997  001C2A  0012               	return	
  6998  001C2C                     __end_ofi2_read_colorsensor:
  6999                           	opt stack 0
  7000                           pclatu	equ	0xFFB
  7001                           pclath	equ	0xFFA
  7002                           tblptru	equ	0xFF8
  7003                           tblptrh	equ	0xFF7
  7004                           tblptrl	equ	0xFF6
  7005                           tablat	equ	0xFF5
  7006                           prodh	equ	0xFF4
  7007                           prodl	equ	0xFF3
  7008                           intcon	equ	0xFF2
  7009                           intcon2	equ	0xFF1
  7010                           intcon3	equ	0xFF0
  7011                           postinc0	equ	0xFEE
  7012                           fsr0h	equ	0xFEA
  7013                           fsr0l	equ	0xFE9
  7014                           wreg	equ	0xFE8
  7015                           fsr1h	equ	0xFE2
  7016                           fsr1l	equ	0xFE1
  7017                           indf2	equ	0xFDF
  7018                           postinc2	equ	0xFDE
  7019                           postdec2	equ	0xFDD
  7020                           fsr2h	equ	0xFDA
  7021                           fsr2l	equ	0xFD9
  7022                           status	equ	0xFD8
  7023                           
  7024 ;; *************** function i2_printf *****************
  7025 ;; Defined at:
  7026 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7029 ;;		 -> STR_24(15), STR_23(16), STR_22(22), STR_21(25), 
  7030 ;;		 -> STR_20(24), STR_19(23), STR_18(18), STR_17(23), 
  7031 ;;		 -> STR_16(10), STR_15(18), STR_14(18), STR_13(18), 
  7032 ;;		 -> STR_12(18), STR_11(18), STR_10(18), STR_9(18), 
  7033 ;;		 -> STR_8(18), STR_7(17), STR_6(17), STR_5(23), 
  7034 ;;		 -> STR_4(23), STR_3(10), STR_2(17), STR_1(14), 
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;  printf          4    0        struct .
  7037 ;;  printf          3    0        PTR const unsigned char 
  7038 ;;  printf          2   25[COMRAM] int 
  7039 ;;  printf          2   22[COMRAM] unsigned int 
  7040 ;;  printf          2   19[COMRAM] PTR void [1]
  7041 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7042 ;;  printf          2    0        unsigned int 
  7043 ;;  printf          1   27[COMRAM] char 
  7044 ;;  printf          1   24[COMRAM] unsigned char 
  7045 ;;  printf          1   21[COMRAM] char 
  7046 ;;  printf          1   18[COMRAM] unsigned char 
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  2   12[COMRAM] int 
  7049 ;; Registers used:
  7050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7056 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;Total ram usage:       16 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    2
  7063 ;; This function calls:
  7064 ;;		i2___lwdiv
  7065 ;;		i2___lwmod
  7066 ;;		i2___wmul
  7067 ;;		i2_isdigit
  7068 ;;		i2_putch
  7069 ;; This function is called by:
  7070 ;;		_isr
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           	psect	text29
  7075  0009D6                     __ptext29:
  7076                           	opt stack 0
  7077  0009D6                     i2_printf:
  7078                           	opt stack 23
  7079                           
  7080                           ;doprnt.c: 466: va_list ap;
  7081                           ;doprnt.c: 499: signed char c;
  7082                           ;doprnt.c: 501: int width;
  7083                           ;doprnt.c: 506: signed char prec;
  7084                           ;doprnt.c: 508: unsigned char flag;
  7085                           ;doprnt.c: 523: union {
  7086                           ;doprnt.c: 524: unsigned long vd;
  7087                           ;doprnt.c: 525: double integ;
  7088                           ;doprnt.c: 526: } tmpval;
  7089                           ;doprnt.c: 528: unsigned int val;
  7090                           ;doprnt.c: 529: unsigned len;
  7091                           ;doprnt.c: 530: const char * cp;
  7092                           ;doprnt.c: 533: *ap = __va_start();
  7093                           
  7094                           ;incstack = 0
  7095  0009D6  0E0F               	movlw	low (?i2_printf+2)
  7096  0009D8  6E14               	movwf	i2printf@ap,c
  7097  0009DA  0E00               	movlw	high (?i2_printf+2)
  7098  0009DC  6E15               	movwf	i2printf@ap+1,c
  7099                           
  7100                           ;doprnt.c: 536: while(c = *f++) {
  7101  0009DE  D174               	goto	i2l4362
  7102  0009E0                     i2l4236:
  7103                           
  7104                           ;doprnt.c: 538: if(c != '%')
  7105  0009E0  0E25               	movlw	37
  7106  0009E2  181C               	xorwf	i2printf@c,w,c
  7107  0009E4  B4D8               	btfsc	status,2,c
  7108  0009E6  D004               	goto	i2l4240
  7109                           
  7110                           ;doprnt.c: 540: {
  7111                           ;doprnt.c: 541: (putch(c) );
  7112  0009E8  501C               	movf	i2printf@c,w,c
  7113  0009EA  ECFA  F015         	call	i2_putch
  7114                           
  7115                           ;doprnt.c: 542: continue;
  7116  0009EE  D16C               	goto	i2l4362
  7117  0009F0                     i2l4240:
  7118                           
  7119                           ;doprnt.c: 543: }
  7120                           ;doprnt.c: 546: width = 0;
  7121  0009F0  0E00               	movlw	0
  7122  0009F2  6E1B               	movwf	i2printf@width+1,c
  7123  0009F4  0E00               	movlw	0
  7124  0009F6  6E1A               	movwf	i2printf@width,c
  7125                           
  7126                           ;doprnt.c: 548: flag = 0;
  7127  0009F8  0E00               	movlw	0
  7128  0009FA  6E19               	movwf	i2printf@flag,c
  7129                           
  7130                           ;doprnt.c: 551: switch(*f) {
  7131                           
  7132                           ;doprnt.c: 550: for(;;) {
  7133  0009FC  D003               	goto	i2l4246
  7134  0009FE                     i2l4242:
  7135                           
  7136                           ;doprnt.c: 580: flag |= 0x04;
  7137  0009FE  8419               	bsf	i2printf@flag,2,c
  7138                           
  7139                           ;doprnt.c: 581: f++;
  7140  000A00  4A0D               	infsnz	i2printf@f,f,c
  7141  000A02  2A0E               	incf	i2printf@f+1,f,c
  7142  000A04                     i2l4246:
  7143  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
  7144  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7145  000A0C                     	if	0	;tblptru may be non-zero
  7146  000A0C                     	endif
  7147  000A0C                     	if	0	;tblptru may be non-zero
  7148  000A0C                     	endif
  7149  000A0C  0008               	tblrd		*
  7150  000A0E  50F5               	movf	tablat,w,c
  7151                           
  7152                           ; Switch size 1, requested type "space"
  7153                           ; Number of cases is 1, Range of values is 48 to 48
  7154                           ; switch strategies available:
  7155                           ; Name         Instructions Cycles
  7156                           ; simple_byte            4     3 (average)
  7157                           ;	Chosen strategy is simple_byte
  7158  000A10  0A30               	xorlw	48	; case 48
  7159  000A12  B4D8               	btfsc	status,2,c
  7160  000A14  D7F4               	goto	i2l4242
  7161                           
  7162                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7163                           
  7164                           ;doprnt.c: 586: }
  7165                           
  7166                           ;doprnt.c: 585: break;
  7167  000A16  C00D  FFF6         	movff	i2printf@f,tblptrl
  7168  000A1A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7169  000A1E                     	if	0	;tblptru may be non-zero
  7170  000A1E                     	endif
  7171  000A1E                     	if	0	;tblptru may be non-zero
  7172  000A1E                     	endif
  7173  000A1E  0008               	tblrd		*
  7174  000A20  50F5               	movf	tablat,w,c
  7175  000A22  ECBC  F015         	call	i2_isdigit
  7176  000A26  A0D8               	btfss	status,0,c
  7177  000A28  D035               	goto	i2l4264
  7178                           
  7179                           ;doprnt.c: 598: width = 0;
  7180  000A2A  0E00               	movlw	0
  7181  000A2C  6E1B               	movwf	i2printf@width+1,c
  7182  000A2E  0E00               	movlw	0
  7183  000A30  6E1A               	movwf	i2printf@width,c
  7184  000A32                     i2l4252:
  7185                           
  7186                           ;doprnt.c: 600: width *= 10;
  7187  000A32  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  7188  000A36  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7189  000A3A  0E00               	movlw	0
  7190  000A3C  6E04               	movwf	i2___wmul@multiplicand+1,c
  7191  000A3E  0E0A               	movlw	10
  7192  000A40  6E03               	movwf	i2___wmul@multiplicand,c
  7193  000A42  EC86  F015         	call	i2___wmul	;wreg free
  7194  000A46  C001  F01A         	movff	?i2___wmul,i2printf@width
  7195  000A4A  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  7196                           
  7197                           ;doprnt.c: 601: width += *f++ - '0';
  7198  000A4E  0ED0               	movlw	208
  7199  000A50  6E0F               	movwf	??i2_printf& (0+255),c
  7200  000A52  0EFF               	movlw	255
  7201  000A54  6E10               	movwf	(??i2_printf+1)& (0+255),c
  7202  000A56  C00D  FFF6         	movff	i2printf@f,tblptrl
  7203  000A5A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7204  000A5E                     	if	0	;tblptru may be non-zero
  7205  000A5E                     	endif
  7206  000A5E                     	if	0	;tblptru may be non-zero
  7207  000A5E                     	endif
  7208  000A5E  0008               	tblrd		*
  7209  000A60  50F5               	movf	tablat,w,c
  7210  000A62  6E11               	movwf	(??i2_printf+2)& (0+255),c
  7211  000A64  6A12               	clrf	(??i2_printf+3)& (0+255),c
  7212  000A66  500F               	movf	??i2_printf,w,c
  7213  000A68  2611               	addwf	??i2_printf+2,f,c
  7214  000A6A  5010               	movf	??i2_printf+1,w,c
  7215  000A6C  2212               	addwfc	??i2_printf+3,f,c
  7216  000A6E  5011               	movf	??i2_printf+2,w,c
  7217  000A70  261A               	addwf	i2printf@width,f,c
  7218  000A72  5012               	movf	??i2_printf+3,w,c
  7219  000A74  221B               	addwfc	i2printf@width+1,f,c
  7220  000A76  4A0D               	infsnz	i2printf@f,f,c
  7221  000A78  2A0E               	incf	i2printf@f+1,f,c
  7222                           
  7223                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7224  000A7A  C00D  FFF6         	movff	i2printf@f,tblptrl
  7225  000A7E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7226  000A82                     	if	0	;tblptru may be non-zero
  7227  000A82                     	endif
  7228  000A82                     	if	0	;tblptru may be non-zero
  7229  000A82                     	endif
  7230  000A82  0008               	tblrd		*
  7231  000A84  50F5               	movf	tablat,w,c
  7232  000A86  ECBC  F015         	call	i2_isdigit
  7233  000A8A  A0D8               	btfss	status,0,c
  7234  000A8C  D003               	goto	i2l4264
  7235  000A8E  D7D1               	goto	i2l4252
  7236  000A90                     i2l4260:
  7237                           
  7238                           ;doprnt.c: 721: flag |= 0x80;
  7239  000A90  8E19               	bsf	i2printf@flag,7,c
  7240                           
  7241                           ;doprnt.c: 723: break;
  7242  000A92  D017               	goto	i2l441
  7243  000A94                     i2l4264:
  7244  000A94  C00D  FFF6         	movff	i2printf@f,tblptrl
  7245  000A98  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7246  000A9C  4A0D               	infsnz	i2printf@f,f,c
  7247  000A9E  2A0E               	incf	i2printf@f+1,f,c
  7248  000AA0                     	if	0	;tblptru may be non-zero
  7249  000AA0                     	endif
  7250  000AA0                     	if	0	;tblptru may be non-zero
  7251  000AA0                     	endif
  7252  000AA0  0008               	tblrd		*
  7253  000AA2  CFF5 F01C          	movff	tablat,i2printf@c
  7254  000AA6  501C               	movf	i2printf@c,w,c
  7255                           
  7256                           ; Switch size 1, requested type "space"
  7257                           ; Number of cases is 4, Range of values is 0 to 120
  7258                           ; switch strategies available:
  7259                           ; Name         Instructions Cycles
  7260                           ; simple_byte           13     7 (average)
  7261                           ;	Chosen strategy is simple_byte
  7262  000AA8  0A00               	xorlw	0	; case 0
  7263  000AAA  B4D8               	btfsc	status,2,c
  7264  000AAC  0012               	return	
  7265  000AAE  0A64               	xorlw	100	; case 100
  7266  000AB0  B4D8               	btfsc	status,2,c
  7267  000AB2  D007               	goto	i2l441
  7268  000AB4  0A0D               	xorlw	13	; case 105
  7269  000AB6  B4D8               	btfsc	status,2,c
  7270  000AB8  D004               	goto	i2l441
  7271  000ABA  0A11               	xorlw	17	; case 120
  7272  000ABC  B4D8               	btfsc	status,2,c
  7273  000ABE  D7E8               	goto	i2l4260
  7274  000AC0  D103               	goto	i2l4362
  7275  000AC2                     i2l441:
  7276                           
  7277                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7278  000AC2  BE19               	btfsc	i2printf@flag,7,c
  7279  000AC4  D015               	goto	i2l4276
  7280                           
  7281                           ;doprnt.c: 1253: {
  7282                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7283  000AC6  C014  FFD9         	movff	i2printf@ap,fsr2l
  7284  000ACA  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  7285  000ACE  CFDE F017          	movff	postinc2,i2printf@val
  7286  000AD2  CFDD F018          	movff	postdec2,i2printf@val+1
  7287  000AD6  0E02               	movlw	2
  7288  000AD8  2614               	addwf	i2printf@ap,f,c
  7289  000ADA  0E00               	movlw	0
  7290  000ADC  2215               	addwfc	i2printf@ap+1,f,c
  7291                           
  7292                           ;doprnt.c: 1261: if((int)val < 0) {
  7293  000ADE  AE18               	btfss	i2printf@val+1,7,c
  7294  000AE0  D044               	goto	i2l4310
  7295                           
  7296                           ;doprnt.c: 1262: flag |= 0x03;
  7297  000AE2  0E03               	movlw	3
  7298  000AE4  1219               	iorwf	i2printf@flag,f,c
  7299                           
  7300                           ;doprnt.c: 1263: val = -val;
  7301  000AE6  6C17               	negf	i2printf@val,c
  7302  000AE8  1E18               	comf	i2printf@val+1,f,c
  7303  000AEA  B0D8               	btfsc	status,0,c
  7304  000AEC  2A18               	incf	i2printf@val+1,f,c
  7305                           
  7306                           ;doprnt.c: 1264: }
  7307                           ;doprnt.c: 1266: }
  7308  000AEE  D03D               	goto	i2l4310
  7309  000AF0                     i2l4276:
  7310                           
  7311                           ;doprnt.c: 1268: else
  7312                           ;doprnt.c: 1273: {
  7313                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7314  000AF0  C014  FFD9         	movff	i2printf@ap,fsr2l
  7315  000AF4  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  7316  000AF8  CFDE F017          	movff	postinc2,i2printf@val
  7317  000AFC  CFDD F018          	movff	postdec2,i2printf@val+1
  7318  000B00  0E02               	movlw	2
  7319  000B02  2614               	addwf	i2printf@ap,f,c
  7320  000B04  0E00               	movlw	0
  7321  000B06  2215               	addwfc	i2printf@ap+1,f,c
  7322                           
  7323                           ;doprnt.c: 1287: }
  7324                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7325  000B08  D030               	goto	i2l4310
  7326  000B0A                     i2l4280:
  7327                           
  7328                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7329  000B0A  0E01               	movlw	1
  7330  000B0C  6E1C               	movwf	i2printf@c,c
  7331  000B0E                     i2l4282:
  7332  000B0E  0E05               	movlw	5
  7333  000B10  181C               	xorwf	i2printf@c,w,c
  7334  000B12  B4D8               	btfsc	status,2,c
  7335  000B14  D032               	goto	i2l4312
  7336                           
  7337                           ;doprnt.c: 1306: if(val < dpowers[c])
  7338  000B16  501C               	movf	i2printf@c,w,c
  7339  000B18  0D02               	mullw	2
  7340  000B1A  0EE2               	movlw	low _dpowers
  7341  000B1C  24F3               	addwf	prodl,w,c
  7342  000B1E  6EF6               	movwf	tblptrl,c
  7343  000B20  0EFD               	movlw	high _dpowers
  7344  000B22  20F4               	addwfc	prodh,w,c
  7345  000B24  6EF7               	movwf	tblptrh,c
  7346  000B26                     	if	0	;There are less than 3 active tblptr bytes
  7347  000B26                     	endif
  7348  000B26  0009               	tblrd		*+
  7349  000B28  50F5               	movf	tablat,w,c
  7350  000B2A  5C17               	subwf	i2printf@val,w,c
  7351  000B2C  0009               	tblrd		*+
  7352  000B2E  50F5               	movf	tablat,w,c
  7353  000B30  5818               	subwfb	i2printf@val+1,w,c
  7354  000B32  A0D8               	btfss	status,0,c
  7355  000B34  D022               	goto	i2l4312
  7356                           
  7357                           ;doprnt.c: 1307: break;
  7358  000B36  2A1C               	incf	i2printf@c,f,c
  7359  000B38  D7EA               	goto	i2l4282
  7360  000B3A                     i2l4294:
  7361                           
  7362                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7363  000B3A  0E01               	movlw	1
  7364  000B3C  6E1C               	movwf	i2printf@c,c
  7365  000B3E                     i2l4296:
  7366  000B3E  0E04               	movlw	4
  7367  000B40  181C               	xorwf	i2printf@c,w,c
  7368  000B42  B4D8               	btfsc	status,2,c
  7369  000B44  D01A               	goto	i2l4312
  7370                           
  7371                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7372  000B46  501C               	movf	i2printf@c,w,c
  7373  000B48  0D02               	mullw	2
  7374  000B4A  0EEC               	movlw	low _hexpowers
  7375  000B4C  24F3               	addwf	prodl,w,c
  7376  000B4E  6EF6               	movwf	tblptrl,c
  7377  000B50  0EFD               	movlw	high _hexpowers
  7378  000B52  20F4               	addwfc	prodh,w,c
  7379  000B54  6EF7               	movwf	tblptrh,c
  7380  000B56                     	if	0	;There are less than 3 active tblptr bytes
  7381  000B56                     	endif
  7382  000B56  0009               	tblrd		*+
  7383  000B58  50F5               	movf	tablat,w,c
  7384  000B5A  5C17               	subwf	i2printf@val,w,c
  7385  000B5C  0009               	tblrd		*+
  7386  000B5E  50F5               	movf	tablat,w,c
  7387  000B60  5818               	subwfb	i2printf@val+1,w,c
  7388  000B62  A0D8               	btfss	status,0,c
  7389  000B64  D00A               	goto	i2l4312
  7390                           
  7391                           ;doprnt.c: 1318: break;
  7392  000B66  2A1C               	incf	i2printf@c,f,c
  7393  000B68  D7EA               	goto	i2l4296
  7394  000B6A                     i2l4310:
  7395  000B6A  5019               	movf	i2printf@flag,w,c
  7396  000B6C  0B80               	andlw	128
  7397                           
  7398                           ; Switch size 1, requested type "space"
  7399                           ; Number of cases is 2, Range of values is 0 to 128
  7400                           ; switch strategies available:
  7401                           ; Name         Instructions Cycles
  7402                           ; simple_byte            7     4 (average)
  7403                           ;	Chosen strategy is simple_byte
  7404  000B6E  0A00               	xorlw	0	; case 0
  7405  000B70  B4D8               	btfsc	status,2,c
  7406  000B72  D7CB               	goto	i2l4280
  7407  000B74  0A80               	xorlw	128	; case 128
  7408  000B76  B4D8               	btfsc	status,2,c
  7409  000B78  D7E0               	goto	i2l4294
  7410  000B7A                     i2l4312:
  7411                           
  7412                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7413  000B7A  501A               	movf	i2printf@width,w,c
  7414  000B7C  101B               	iorwf	i2printf@width+1,w,c
  7415  000B7E  B4D8               	btfsc	status,2,c
  7416  000B80  D009               	goto	i2l4318
  7417  000B82  C019  F00F         	movff	i2printf@flag,??i2_printf
  7418  000B86  0E03               	movlw	3
  7419  000B88  160F               	andwf	??i2_printf,f,c
  7420  000B8A  B4D8               	btfsc	status,2,c
  7421  000B8C  D003               	goto	i2l4318
  7422                           
  7423                           ;doprnt.c: 1346: width--;
  7424  000B8E  061A               	decf	i2printf@width,f,c
  7425  000B90  A0D8               	btfss	status,0,c
  7426  000B92  061B               	decf	i2printf@width+1,f,c
  7427  000B94                     i2l4318:
  7428                           
  7429                           ;doprnt.c: 1381: if(width > c)
  7430  000B94  0E80               	movlw	128
  7431  000B96  BE1C               	btfsc	i2printf@c,7,c
  7432  000B98  0E7F               	movlw	127
  7433  000B9A  6E0F               	movwf	??i2_printf& (0+255),c
  7434  000B9C  501A               	movf	i2printf@width,w,c
  7435  000B9E  5C1C               	subwf	i2printf@c,w,c
  7436  000BA0  501B               	movf	i2printf@width+1,w,c
  7437  000BA2  0A80               	xorlw	128
  7438  000BA4  580F               	subwfb	??i2_printf& (0+255),w,c
  7439  000BA6  B0D8               	btfsc	status,0,c
  7440  000BA8  D007               	goto	i2l4322
  7441                           
  7442                           ;doprnt.c: 1382: width -= c;
  7443  000BAA  501C               	movf	i2printf@c,w,c
  7444  000BAC  5E1A               	subwf	i2printf@width,f,c
  7445  000BAE  0E00               	movlw	0
  7446  000BB0  BE1C               	btfsc	i2printf@c,7,c
  7447  000BB2  0EFF               	movlw	255
  7448  000BB4  5A1B               	subwfb	i2printf@width+1,f,c
  7449  000BB6  D004               	goto	i2l4324
  7450  000BB8                     i2l4322:
  7451                           
  7452                           ;doprnt.c: 1383: else
  7453                           ;doprnt.c: 1384: width = 0;
  7454  000BB8  0E00               	movlw	0
  7455  000BBA  6E1B               	movwf	i2printf@width+1,c
  7456  000BBC  0E00               	movlw	0
  7457  000BBE  6E1A               	movwf	i2printf@width,c
  7458  000BC0                     i2l4324:
  7459                           
  7460                           ;doprnt.c: 1387: if(flag & 0x04) {
  7461  000BC0  A419               	btfss	i2printf@flag,2,c
  7462  000BC2  D014               	goto	i2l4336
  7463                           
  7464                           ;doprnt.c: 1392: if(flag & 0x03)
  7465  000BC4  C019  F00F         	movff	i2printf@flag,??i2_printf
  7466  000BC8  0E03               	movlw	3
  7467  000BCA  160F               	andwf	??i2_printf,f,c
  7468  000BCC  B4D8               	btfsc	status,2,c
  7469  000BCE  D003               	goto	i2l4330
  7470                           
  7471                           ;doprnt.c: 1393: (putch('-') );
  7472  000BD0  0E2D               	movlw	45
  7473  000BD2  ECFA  F015         	call	i2_putch
  7474  000BD6                     i2l4330:
  7475                           
  7476                           ;doprnt.c: 1415: if(width)
  7477  000BD6  501A               	movf	i2printf@width,w,c
  7478  000BD8  101B               	iorwf	i2printf@width+1,w,c
  7479  000BDA  B4D8               	btfsc	status,2,c
  7480  000BDC  D01E               	goto	i2l4346
  7481                           
  7482                           ;doprnt.c: 1417: (putch('0') );
  7483                           
  7484                           ;doprnt.c: 1416: do
  7485  000BDE  0E30               	movlw	48
  7486  000BE0  ECFA  F015         	call	i2_putch
  7487                           
  7488                           ;doprnt.c: 1418: while(--width);
  7489  000BE4  061A               	decf	i2printf@width,f,c
  7490  000BE6  A0D8               	btfss	status,0,c
  7491  000BE8  061B               	decf	i2printf@width+1,f,c
  7492  000BEA  D7F5               	goto	i2l4330
  7493  000BEC                     i2l4336:
  7494                           
  7495                           ;doprnt.c: 1422: {
  7496                           ;doprnt.c: 1424: if(width
  7497                           ;doprnt.c: 1428: )
  7498  000BEC  501A               	movf	i2printf@width,w,c
  7499  000BEE  101B               	iorwf	i2printf@width+1,w,c
  7500  000BF0  B4D8               	btfsc	status,2,c
  7501  000BF2  D00A               	goto	i2l4342
  7502  000BF4                     i2l4338:
  7503                           
  7504                           ;doprnt.c: 1430: (putch(' ') );
  7505  000BF4  0E20               	movlw	32
  7506  000BF6  ECFA  F015         	call	i2_putch
  7507                           
  7508                           ;doprnt.c: 1431: while(--width);
  7509  000BFA  061A               	decf	i2printf@width,f,c
  7510  000BFC  A0D8               	btfss	status,0,c
  7511  000BFE  061B               	decf	i2printf@width+1,f,c
  7512  000C00  501A               	movf	i2printf@width,w,c
  7513  000C02  101B               	iorwf	i2printf@width+1,w,c
  7514  000C04  A4D8               	btfss	status,2,c
  7515  000C06  D7F6               	goto	i2l4338
  7516  000C08                     i2l4342:
  7517                           
  7518                           ;doprnt.c: 1438: if(flag & 0x03)
  7519  000C08  C019  F00F         	movff	i2printf@flag,??i2_printf
  7520  000C0C  0E03               	movlw	3
  7521  000C0E  160F               	andwf	??i2_printf,f,c
  7522  000C10  B4D8               	btfsc	status,2,c
  7523  000C12  D003               	goto	i2l4346
  7524                           
  7525                           ;doprnt.c: 1439: (putch('-') );
  7526  000C14  0E2D               	movlw	45
  7527  000C16  ECFA  F015         	call	i2_putch
  7528  000C1A                     i2l4346:
  7529                           
  7530                           ;doprnt.c: 1469: }
  7531                           ;doprnt.c: 1472: prec = c;
  7532  000C1A  C01C  F016         	movff	i2printf@c,i2printf@prec
  7533                           
  7534                           ;doprnt.c: 1474: while(prec--) {
  7535  000C1E  D050               	goto	i2l4360
  7536  000C20                     i2l4348:
  7537                           
  7538                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7539  000C20  5016               	movf	i2printf@prec,w,c
  7540  000C22  0D02               	mullw	2
  7541  000C24  0EE2               	movlw	low _dpowers
  7542  000C26  24F3               	addwf	prodl,w,c
  7543  000C28  6EF6               	movwf	tblptrl,c
  7544  000C2A  0EFD               	movlw	high _dpowers
  7545  000C2C  20F4               	addwfc	prodh,w,c
  7546  000C2E  6EF7               	movwf	tblptrh,c
  7547  000C30                     	if	0	;There are less than 3 active tblptr bytes
  7548  000C30                     	endif
  7549  000C30  0009               	tblrd		*+
  7550  000C32  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7551  000C36  000A               	tblrd		*-
  7552  000C38  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7553  000C3C  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7554  000C40  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7555  000C44  ECE8  F013         	call	i2___lwdiv	;wreg free
  7556  000C48  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7557  000C4C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7558  000C50  0E00               	movlw	0
  7559  000C52  6E0B               	movwf	i2___lwmod@divisor+1,c
  7560  000C54  0E0A               	movlw	10
  7561  000C56  6E0A               	movwf	i2___lwmod@divisor,c
  7562  000C58  EC60  F014         	call	i2___lwmod	;wreg free
  7563  000C5C  5008               	movf	?i2___lwmod,w,c
  7564  000C5E  0F30               	addlw	48
  7565  000C60  6E1C               	movwf	i2printf@c,c
  7566                           
  7567                           ;doprnt.c: 1491: break;
  7568  000C62  D02B               	goto	i2l4358
  7569  000C64                     i2l4350:
  7570                           
  7571                           ;doprnt.c: 1499: {
  7572                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7573  000C64  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7574  000C68  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7575  000C6C  5016               	movf	i2printf@prec,w,c
  7576  000C6E  0D02               	mullw	2
  7577  000C70  0EEC               	movlw	low _hexpowers
  7578  000C72  24F3               	addwf	prodl,w,c
  7579  000C74  6EF6               	movwf	tblptrl,c
  7580  000C76  0EFD               	movlw	high _hexpowers
  7581  000C78  20F4               	addwfc	prodh,w,c
  7582  000C7A  6EF7               	movwf	tblptrh,c
  7583  000C7C                     	if	0	;There are less than 3 active tblptr bytes
  7584  000C7C                     	endif
  7585  000C7C  0009               	tblrd		*+
  7586  000C7E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7587  000C82  000A               	tblrd		*-
  7588  000C84  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7589  000C88  ECE8  F013         	call	i2___lwdiv	;wreg free
  7590  000C8C  5001               	movf	?i2___lwdiv,w,c
  7591  000C8E  0B0F               	andlw	15
  7592  000C90  6E13               	movwf	i2printf@idx,c
  7593                           
  7594                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7595  000C92  5013               	movf	i2printf@idx,w,c
  7596  000C94  0D01               	mullw	1
  7597  000C96  0E79               	movlw	low STR_25
  7598  000C98  24F3               	addwf	prodl,w,c
  7599  000C9A  6EF6               	movwf	tblptrl,c
  7600  000C9C  0EFF               	movlw	high STR_25
  7601  000C9E  20F4               	addwfc	prodh,w,c
  7602  000CA0  6EF7               	movwf	tblptrh,c
  7603  000CA2                     	if	0	;There are less than 3 active tblptr bytes
  7604  000CA2                     	endif
  7605  000CA2  0008               	tblrd		*
  7606  000CA4  CFF5 F01C          	movff	tablat,i2printf@c
  7607                           
  7608                           ;doprnt.c: 1523: }
  7609                           
  7610                           ;doprnt.c: 1508: }
  7611                           ;doprnt.c: 1510: break;
  7612  000CA8  D008               	goto	i2l4358
  7613  000CAA                     i2l4356:
  7614  000CAA  5019               	movf	i2printf@flag,w,c
  7615  000CAC  0B80               	andlw	128
  7616                           
  7617                           ; Switch size 1, requested type "space"
  7618                           ; Number of cases is 2, Range of values is 0 to 128
  7619                           ; switch strategies available:
  7620                           ; Name         Instructions Cycles
  7621                           ; simple_byte            7     4 (average)
  7622                           ;	Chosen strategy is simple_byte
  7623  000CAE  0A00               	xorlw	0	; case 0
  7624  000CB0  B4D8               	btfsc	status,2,c
  7625  000CB2  D7B6               	goto	i2l4348
  7626  000CB4  0A80               	xorlw	128	; case 128
  7627  000CB6  B4D8               	btfsc	status,2,c
  7628  000CB8  D7D5               	goto	i2l4350
  7629  000CBA                     i2l4358:
  7630                           
  7631                           ;doprnt.c: 1524: (putch(c) );
  7632  000CBA  501C               	movf	i2printf@c,w,c
  7633  000CBC  ECFA  F015         	call	i2_putch
  7634  000CC0                     i2l4360:
  7635  000CC0  0616               	decf	i2printf@prec,f,c
  7636  000CC2  2816               	incf	i2printf@prec,w,c
  7637  000CC4  A4D8               	btfss	status,2,c
  7638  000CC6  D7F1               	goto	i2l4356
  7639  000CC8                     i2l4362:
  7640  000CC8  C00D  FFF6         	movff	i2printf@f,tblptrl
  7641  000CCC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7642  000CD0  4A0D               	infsnz	i2printf@f,f,c
  7643  000CD2  2A0E               	incf	i2printf@f+1,f,c
  7644  000CD4                     	if	0	;tblptru may be non-zero
  7645  000CD4                     	endif
  7646  000CD4                     	if	0	;tblptru may be non-zero
  7647  000CD4                     	endif
  7648  000CD4  0008               	tblrd		*
  7649  000CD6  CFF5 F01C          	movff	tablat,i2printf@c
  7650  000CDA  501C               	movf	i2printf@c,w,c
  7651  000CDC  B4D8               	btfsc	status,2,c
  7652  000CDE  0012               	return	
  7653  000CE0  D67F               	goto	i2l4236
  7654  000CE2                     __end_ofi2_printf:
  7655                           	opt stack 0
  7656                           pclatu	equ	0xFFB
  7657                           pclath	equ	0xFFA
  7658                           tblptru	equ	0xFF8
  7659                           tblptrh	equ	0xFF7
  7660                           tblptrl	equ	0xFF6
  7661                           tablat	equ	0xFF5
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           intcon	equ	0xFF2
  7665                           intcon2	equ	0xFF1
  7666                           intcon3	equ	0xFF0
  7667                           postinc0	equ	0xFEE
  7668                           fsr0h	equ	0xFEA
  7669                           fsr0l	equ	0xFE9
  7670                           wreg	equ	0xFE8
  7671                           fsr1h	equ	0xFE2
  7672                           fsr1l	equ	0xFE1
  7673                           indf2	equ	0xFDF
  7674                           postinc2	equ	0xFDE
  7675                           postdec2	equ	0xFDD
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680 ;; *************** function i2_putch *****************
  7681 ;; Defined at:
  7682 ;;		line 31 in file "lcd.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;  data            1    wreg     unsigned char 
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  data            1    2[COMRAM] unsigned char 
  7687 ;; Return value:  Size  Location     Type
  7688 ;;                  1    wreg      void 
  7689 ;; Registers used:
  7690 ;;		wreg, status,2, status,0, cstack
  7691 ;; Tracked objects:
  7692 ;;		On entry : 0/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;Total ram usage:        1 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; Hardware stack levels required when called:    1
  7703 ;; This function calls:
  7704 ;;		i2_lcdNibble
  7705 ;; This function is called by:
  7706 ;;		i2_printf
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           	psect	text30
  7711  002BF4                     __ptext30:
  7712                           	opt stack 0
  7713  002BF4                     i2_putch:
  7714                           	opt stack 23
  7715                           
  7716                           ;incstack = 0
  7717                           ;i2putch@data stored from wreg
  7718  002BF4  6E03               	movwf	i2putch@data,c
  7719                           
  7720                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7721  002BF6  848C               	bsf	3980,2,c	;volatile
  7722                           
  7723                           ;lcd.c: 33: lcdNibble(data);
  7724  002BF8  5003               	movf	i2putch@data,w,c
  7725  002BFA  EC39  F014         	call	i2_lcdNibble
  7726  002BFE  0012               	return		;funcret
  7727  002C00                     __end_ofi2_putch:
  7728                           	opt stack 0
  7729                           pclatu	equ	0xFFB
  7730                           pclath	equ	0xFFA
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           prodh	equ	0xFF4
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           intcon2	equ	0xFF1
  7739                           intcon3	equ	0xFF0
  7740                           postinc0	equ	0xFEE
  7741                           fsr0h	equ	0xFEA
  7742                           fsr0l	equ	0xFE9
  7743                           wreg	equ	0xFE8
  7744                           fsr1h	equ	0xFE2
  7745                           fsr1l	equ	0xFE1
  7746                           indf2	equ	0xFDF
  7747                           postinc2	equ	0xFDE
  7748                           postdec2	equ	0xFDD
  7749                           fsr2h	equ	0xFDA
  7750                           fsr2l	equ	0xFD9
  7751                           status	equ	0xFD8
  7752                           
  7753 ;; *************** function i2_isdigit *****************
  7754 ;; Defined at:
  7755 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  c               1    wreg     unsigned char 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  c               1    2[COMRAM] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;		None               void
  7762 ;; Registers used:
  7763 ;;		wreg, status,2, status,0
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;Total ram usage:        3 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		i2_printf
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text31
  7783  002B78                     __ptext31:
  7784                           	opt stack 0
  7785  002B78                     i2_isdigit:
  7786                           	opt stack 24
  7787                           
  7788                           ;incstack = 0
  7789                           ;i2isdigit@c stored from wreg
  7790  002B78  6E03               	movwf	i2isdigit@c,c
  7791  002B7A  0E00               	movlw	0
  7792  002B7C  6E02               	movwf	i2_isdigit$808,c
  7793  002B7E  0E3A               	movlw	58
  7794  002B80  6003               	cpfslt	i2isdigit@c,c
  7795  002B82  D005               	goto	i2l3894
  7796  002B84  0E2F               	movlw	47
  7797  002B86  6403               	cpfsgt	i2isdigit@c,c
  7798  002B88  D002               	goto	i2l3894
  7799  002B8A  0E01               	movlw	1
  7800  002B8C  6E02               	movwf	i2_isdigit$808,c
  7801  002B8E                     i2l3894:
  7802  002B8E  C002  F001         	movff	i2_isdigit$808,??i2_isdigit
  7803  002B92  3001               	rrcf	??i2_isdigit,w,c
  7804  002B94  0012               	return	
  7805  002B96                     __end_ofi2_isdigit:
  7806                           	opt stack 0
  7807                           pclatu	equ	0xFFB
  7808                           pclath	equ	0xFFA
  7809                           tblptru	equ	0xFF8
  7810                           tblptrh	equ	0xFF7
  7811                           tblptrl	equ	0xFF6
  7812                           tablat	equ	0xFF5
  7813                           prodh	equ	0xFF4
  7814                           prodl	equ	0xFF3
  7815                           intcon	equ	0xFF2
  7816                           intcon2	equ	0xFF1
  7817                           intcon3	equ	0xFF0
  7818                           postinc0	equ	0xFEE
  7819                           fsr0h	equ	0xFEA
  7820                           fsr0l	equ	0xFE9
  7821                           wreg	equ	0xFE8
  7822                           fsr1h	equ	0xFE2
  7823                           fsr1l	equ	0xFE1
  7824                           indf2	equ	0xFDF
  7825                           postinc2	equ	0xFDE
  7826                           postdec2	equ	0xFDD
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function i2___lwmod *****************
  7832 ;; Defined at:
  7833 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  dividend        2    7[COMRAM] unsigned int 
  7836 ;;  divisor         2    9[COMRAM] unsigned int 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  2    7[COMRAM] unsigned int 
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;Total ram usage:        5 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		i2_printf
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text32
  7862  0028C0                     __ptext32:
  7863                           	opt stack 0
  7864  0028C0                     i2___lwmod:
  7865                           	opt stack 24
  7866                           
  7867                           ;incstack = 0
  7868  0028C0  500A               	movf	i2___lwmod@divisor,w,c
  7869  0028C2  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7870  0028C4  B4D8               	btfsc	status,2,c
  7871  0028C6  D018               	goto	i2l896
  7872  0028C8  0E01               	movlw	1
  7873  0028CA  6E0C               	movwf	i2___lwmod@counter,c
  7874  0028CC  D004               	goto	i2l3926
  7875  0028CE                     i2l3924:
  7876  0028CE  90D8               	bcf	status,0,c
  7877  0028D0  360A               	rlcf	i2___lwmod@divisor,f,c
  7878  0028D2  360B               	rlcf	i2___lwmod@divisor+1,f,c
  7879  0028D4  2A0C               	incf	i2___lwmod@counter,f,c
  7880  0028D6                     i2l3926:
  7881  0028D6  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  7882  0028D8  D7FA               	goto	i2l3924
  7883  0028DA                     i2l3928:
  7884  0028DA  500A               	movf	i2___lwmod@divisor,w,c
  7885  0028DC  5C08               	subwf	i2___lwmod@dividend,w,c
  7886  0028DE  500B               	movf	i2___lwmod@divisor+1,w,c
  7887  0028E0  5809               	subwfb	i2___lwmod@dividend+1,w,c
  7888  0028E2  A0D8               	btfss	status,0,c
  7889  0028E4  D004               	goto	i2l3932
  7890  0028E6  500A               	movf	i2___lwmod@divisor,w,c
  7891  0028E8  5E08               	subwf	i2___lwmod@dividend,f,c
  7892  0028EA  500B               	movf	i2___lwmod@divisor+1,w,c
  7893  0028EC  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  7894  0028EE                     i2l3932:
  7895  0028EE  90D8               	bcf	status,0,c
  7896  0028F0  320B               	rrcf	i2___lwmod@divisor+1,f,c
  7897  0028F2  320A               	rrcf	i2___lwmod@divisor,f,c
  7898  0028F4  2E0C               	decfsz	i2___lwmod@counter,f,c
  7899  0028F6  D7F1               	goto	i2l3928
  7900  0028F8                     i2l896:
  7901  0028F8  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  7902  0028FC  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7903  002900  0012               	return		;funcret
  7904  002902                     __end_ofi2___lwmod:
  7905                           	opt stack 0
  7906                           pclatu	equ	0xFFB
  7907                           pclath	equ	0xFFA
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           intcon	equ	0xFF2
  7915                           intcon2	equ	0xFF1
  7916                           intcon3	equ	0xFF0
  7917                           postinc0	equ	0xFEE
  7918                           fsr0h	equ	0xFEA
  7919                           fsr0l	equ	0xFE9
  7920                           wreg	equ	0xFE8
  7921                           fsr1h	equ	0xFE2
  7922                           fsr1l	equ	0xFE1
  7923                           indf2	equ	0xFDF
  7924                           postinc2	equ	0xFDE
  7925                           postdec2	equ	0xFDD
  7926                           fsr2h	equ	0xFDA
  7927                           fsr2l	equ	0xFD9
  7928                           status	equ	0xFD8
  7929                           
  7930 ;; *************** function i2___lwdiv *****************
  7931 ;; Defined at:
  7932 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7933 ;; Parameters:    Size  Location     Type
  7934 ;;  dividend        2    0[COMRAM] unsigned int 
  7935 ;;  divisor         2    2[COMRAM] unsigned int 
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7938 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  2    0[COMRAM] unsigned int 
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7949 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;Total ram usage:        7 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; This function calls:
  7955 ;;		Nothing
  7956 ;; This function is called by:
  7957 ;;		i2_printf
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           	psect	text33
  7962  0027D0                     __ptext33:
  7963                           	opt stack 0
  7964  0027D0                     i2___lwdiv:
  7965                           	opt stack 24
  7966                           
  7967                           ;incstack = 0
  7968  0027D0  0E00               	movlw	0
  7969  0027D2  6E06               	movwf	i2___lwdiv@quotient+1,c
  7970  0027D4  0E00               	movlw	0
  7971  0027D6  6E05               	movwf	i2___lwdiv@quotient,c
  7972  0027D8  5003               	movf	i2___lwdiv@divisor,w,c
  7973  0027DA  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7974  0027DC  B4D8               	btfsc	status,2,c
  7975  0027DE  D01C               	goto	i2l886
  7976  0027E0  0E01               	movlw	1
  7977  0027E2  6E07               	movwf	i2___lwdiv@counter,c
  7978  0027E4  D004               	goto	i2l3906
  7979  0027E6                     i2l3904:
  7980  0027E6  90D8               	bcf	status,0,c
  7981  0027E8  3603               	rlcf	i2___lwdiv@divisor,f,c
  7982  0027EA  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7983  0027EC  2A07               	incf	i2___lwdiv@counter,f,c
  7984  0027EE                     i2l3906:
  7985  0027EE  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7986  0027F0  D7FA               	goto	i2l3904
  7987  0027F2                     i2l3908:
  7988  0027F2  90D8               	bcf	status,0,c
  7989  0027F4  3605               	rlcf	i2___lwdiv@quotient,f,c
  7990  0027F6  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7991  0027F8  5003               	movf	i2___lwdiv@divisor,w,c
  7992  0027FA  5C01               	subwf	i2___lwdiv@dividend,w,c
  7993  0027FC  5004               	movf	i2___lwdiv@divisor+1,w,c
  7994  0027FE  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7995  002800  A0D8               	btfss	status,0,c
  7996  002802  D005               	goto	i2l3916
  7997  002804  5003               	movf	i2___lwdiv@divisor,w,c
  7998  002806  5E01               	subwf	i2___lwdiv@dividend,f,c
  7999  002808  5004               	movf	i2___lwdiv@divisor+1,w,c
  8000  00280A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8001  00280C  8005               	bsf	i2___lwdiv@quotient,0,c
  8002  00280E                     i2l3916:
  8003  00280E  90D8               	bcf	status,0,c
  8004  002810  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8005  002812  3203               	rrcf	i2___lwdiv@divisor,f,c
  8006  002814  2E07               	decfsz	i2___lwdiv@counter,f,c
  8007  002816  D7ED               	goto	i2l3908
  8008  002818                     i2l886:
  8009  002818  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8010  00281C  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8011  002820  0012               	return		;funcret
  8012  002822                     __end_ofi2___lwdiv:
  8013                           	opt stack 0
  8014                           pclatu	equ	0xFFB
  8015                           pclath	equ	0xFFA
  8016                           tblptru	equ	0xFF8
  8017                           tblptrh	equ	0xFF7
  8018                           tblptrl	equ	0xFF6
  8019                           tablat	equ	0xFF5
  8020                           prodh	equ	0xFF4
  8021                           prodl	equ	0xFF3
  8022                           intcon	equ	0xFF2
  8023                           intcon2	equ	0xFF1
  8024                           intcon3	equ	0xFF0
  8025                           postinc0	equ	0xFEE
  8026                           fsr0h	equ	0xFEA
  8027                           fsr0l	equ	0xFE9
  8028                           wreg	equ	0xFE8
  8029                           fsr1h	equ	0xFE2
  8030                           fsr1l	equ	0xFE1
  8031                           indf2	equ	0xFDF
  8032                           postinc2	equ	0xFDE
  8033                           postdec2	equ	0xFDD
  8034                           fsr2h	equ	0xFDA
  8035                           fsr2l	equ	0xFD9
  8036                           status	equ	0xFD8
  8037                           
  8038 ;; *************** function i2_lcdInst *****************
  8039 ;; Defined at:
  8040 ;;		line 26 in file "lcd.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;  data            1    wreg     unsigned char 
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;  data            1    2[COMRAM] unsigned char 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      void 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2, status,0, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8058 ;;Total ram usage:        1 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    1
  8061 ;; This function calls:
  8062 ;;		i2_lcdNibble
  8063 ;; This function is called by:
  8064 ;;		_isr
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text34
  8069  002C00                     __ptext34:
  8070                           	opt stack 0
  8071  002C00                     i2_lcdInst:
  8072                           	opt stack 24
  8073                           
  8074                           ;incstack = 0
  8075                           ;i2lcdInst@data stored from wreg
  8076  002C00  6E03               	movwf	i2lcdInst@data,c
  8077                           
  8078                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  8079  002C02  948C               	bcf	3980,2,c	;volatile
  8080                           
  8081                           ;lcd.c: 28: lcdNibble(data);
  8082  002C04  5003               	movf	i2lcdInst@data,w,c
  8083  002C06  EC39  F014         	call	i2_lcdNibble
  8084  002C0A  0012               	return		;funcret
  8085  002C0C                     __end_ofi2_lcdInst:
  8086                           	opt stack 0
  8087                           pclatu	equ	0xFFB
  8088                           pclath	equ	0xFFA
  8089                           tblptru	equ	0xFF8
  8090                           tblptrh	equ	0xFF7
  8091                           tblptrl	equ	0xFF6
  8092                           tablat	equ	0xFF5
  8093                           prodh	equ	0xFF4
  8094                           prodl	equ	0xFF3
  8095                           intcon	equ	0xFF2
  8096                           intcon2	equ	0xFF1
  8097                           intcon3	equ	0xFF0
  8098                           postinc0	equ	0xFEE
  8099                           fsr0h	equ	0xFEA
  8100                           fsr0l	equ	0xFE9
  8101                           wreg	equ	0xFE8
  8102                           fsr1h	equ	0xFE2
  8103                           fsr1l	equ	0xFE1
  8104                           indf2	equ	0xFDF
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           
  8111 ;; *************** function i2_lcdNibble *****************
  8112 ;; Defined at:
  8113 ;;		line 36 in file "lcd.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  data            1    wreg     unsigned char 
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;  data            1    1[COMRAM] unsigned char 
  8118 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      void 
  8121 ;; Registers used:
  8122 ;;		wreg, status,2, status,0
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;Total ram usage:        2 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; This function calls:
  8135 ;;		Nothing
  8136 ;; This function is called by:
  8137 ;;		i2_lcdInst
  8138 ;;		i2_putch
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text35
  8143  002872                     __ptext35:
  8144                           	opt stack 0
  8145  002872                     i2_lcdNibble:
  8146                           	opt stack 23
  8147                           
  8148                           ;incstack = 0
  8149                           ;i2lcdNibble@data stored from wreg
  8150  002872  6E02               	movwf	i2lcdNibble@data,c
  8151                           
  8152                           ;lcd.c: 38: char temp = data & 0xF0;
  8153  002874  5002               	movf	i2lcdNibble@data,w,c
  8154  002876  0BF0               	andlw	240
  8155  002878  6E01               	movwf	i2lcdNibble@temp,c
  8156                           
  8157                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8158  00287A  508C               	movf	3980,w,c	;volatile
  8159  00287C  0B0F               	andlw	15
  8160  00287E  6E8C               	movwf	3980,c	;volatile
  8161                           
  8162                           ;lcd.c: 40: LATD = temp | LATD;
  8163  002880  5001               	movf	i2lcdNibble@temp,w,c
  8164  002882  108C               	iorwf	3980,w,c	;volatile
  8165  002884  6E8C               	movwf	3980,c	;volatile
  8166                           
  8167                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  8168  002886  968C               	bcf	3980,3,c	;volatile
  8169                           
  8170                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8171  002888  0E19               	movlw	25
  8172  00288A                     i2u484_47:
  8173  00288A  2EE8               	decfsz	wreg,f,c
  8174  00288C  D7FE               	bra	i2u484_47
  8175                           
  8176                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  8177  00288E  868C               	bsf	3980,3,c	;volatile
  8178                           
  8179                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8180  002890  0E19               	movlw	25
  8181  002892                     i2u485_47:
  8182  002892  2EE8               	decfsz	wreg,f,c
  8183  002894  D7FE               	bra	i2u485_47
  8184                           
  8185                           ;lcd.c: 47: data = data << 4;
  8186  002896  3802               	swapf	i2lcdNibble@data,w,c
  8187  002898  0BF0               	andlw	240
  8188  00289A  6E02               	movwf	i2lcdNibble@data,c
  8189                           
  8190                           ;lcd.c: 49: temp = data & 0xF0;
  8191  00289C  5002               	movf	i2lcdNibble@data,w,c
  8192  00289E  0BF0               	andlw	240
  8193  0028A0  6E01               	movwf	i2lcdNibble@temp,c
  8194                           
  8195                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8196  0028A2  508C               	movf	3980,w,c	;volatile
  8197  0028A4  0B0F               	andlw	15
  8198  0028A6  6E8C               	movwf	3980,c	;volatile
  8199                           
  8200                           ;lcd.c: 51: LATD = temp | LATD;
  8201  0028A8  5001               	movf	i2lcdNibble@temp,w,c
  8202  0028AA  108C               	iorwf	3980,w,c	;volatile
  8203  0028AC  6E8C               	movwf	3980,c	;volatile
  8204                           
  8205                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8206  0028AE  968C               	bcf	3980,3,c	;volatile
  8207                           
  8208                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8209  0028B0  0E19               	movlw	25
  8210  0028B2                     i2u486_47:
  8211  0028B2  2EE8               	decfsz	wreg,f,c
  8212  0028B4  D7FE               	bra	i2u486_47
  8213                           
  8214                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8215  0028B6  868C               	bsf	3980,3,c	;volatile
  8216                           
  8217                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8218  0028B8  0E19               	movlw	25
  8219  0028BA                     i2u487_47:
  8220  0028BA  2EE8               	decfsz	wreg,f,c
  8221  0028BC  D7FE               	bra	i2u487_47
  8222  0028BE  0012               	return		;funcret
  8223  0028C0                     __end_ofi2_lcdNibble:
  8224                           	opt stack 0
  8225                           pclatu	equ	0xFFB
  8226                           pclath	equ	0xFFA
  8227                           tblptru	equ	0xFF8
  8228                           tblptrh	equ	0xFF7
  8229                           tblptrl	equ	0xFF6
  8230                           tablat	equ	0xFF5
  8231                           prodh	equ	0xFF4
  8232                           prodl	equ	0xFF3
  8233                           intcon	equ	0xFF2
  8234                           intcon2	equ	0xFF1
  8235                           intcon3	equ	0xFF0
  8236                           postinc0	equ	0xFEE
  8237                           fsr0h	equ	0xFEA
  8238                           fsr0l	equ	0xFE9
  8239                           wreg	equ	0xFE8
  8240                           fsr1h	equ	0xFE2
  8241                           fsr1l	equ	0xFE1
  8242                           indf2	equ	0xFDF
  8243                           postinc2	equ	0xFDE
  8244                           postdec2	equ	0xFDD
  8245                           fsr2h	equ	0xFDA
  8246                           fsr2l	equ	0xFD9
  8247                           status	equ	0xFD8
  8248                           
  8249 ;; *************** function _servo_rotate2 *****************
  8250 ;; Defined at:
  8251 ;;		line 493 in file "main.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;  degree          2   14[COMRAM] int 
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  j               2   22[COMRAM] unsigned int 
  8256 ;;  i               2   20[COMRAM] unsigned int 
  8257 ;;  duty            2   18[COMRAM] int 
  8258 ;; Return value:  Size  Location     Type
  8259 ;;                  1    wreg      void 
  8260 ;; Registers used:
  8261 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8267 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8269 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8270 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8271 ;;Total ram usage:       10 bytes
  8272 ;; Hardware stack levels used:    1
  8273 ;; Hardware stack levels required when called:    1
  8274 ;; This function calls:
  8275 ;;		___awdiv
  8276 ;;		i2___wmul
  8277 ;; This function is called by:
  8278 ;;		_isr
  8279 ;; This function uses a non-reentrant model
  8280 ;;
  8281                           
  8282                           	psect	text36
  8283  0020B0                     __ptext36:
  8284                           	opt stack 0
  8285  0020B0                     _servo_rotate2:
  8286                           	opt stack 24
  8287                           
  8288                           ;main.c: 494: unsigned int i;
  8289                           ;main.c: 495: unsigned int j;
  8290                           ;main.c: 496: int duty = degree*10/90;
  8291                           
  8292                           ;incstack = 0
  8293  0020B0  C00F  F001         	movff	servo_rotate2@degree,i2___wmul@multiplier
  8294  0020B4  C010  F002         	movff	servo_rotate2@degree+1,i2___wmul@multiplier+1
  8295  0020B8  0E00               	movlw	0
  8296  0020BA  6E04               	movwf	i2___wmul@multiplicand+1,c
  8297  0020BC  0E0A               	movlw	10
  8298  0020BE  6E03               	movwf	i2___wmul@multiplicand,c
  8299  0020C0  EC86  F015         	call	i2___wmul	;wreg free
  8300  0020C4  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8301  0020C8  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8302  0020CC  0E00               	movlw	0
  8303  0020CE  6E0A               	movwf	___awdiv@divisor+1,c
  8304  0020D0  0E5A               	movlw	90
  8305  0020D2  6E09               	movwf	___awdiv@divisor,c
  8306  0020D4  EC3B  F012         	call	___awdiv	;wreg free
  8307  0020D8  C007  F013         	movff	?___awdiv,servo_rotate2@duty
  8308  0020DC  C008  F014         	movff	?___awdiv+1,servo_rotate2@duty+1
  8309                           
  8310                           ;main.c: 497: for (i=0; i<50; i++) {
  8311  0020E0  0E00               	movlw	0
  8312  0020E2  6E16               	movwf	servo_rotate2@i+1,c
  8313  0020E4  0E00               	movlw	0
  8314  0020E6  6E15               	movwf	servo_rotate2@i,c
  8315  0020E8                     i2l4158:
  8316  0020E8  5016               	movf	servo_rotate2@i+1,w,c
  8317  0020EA  E137               	bnz	i2l404
  8318  0020EC  0E32               	movlw	50
  8319  0020EE  5C15               	subwf	servo_rotate2@i,w,c
  8320  0020F0  B0D8               	btfsc	status,0,c
  8321  0020F2  0012               	return	
  8322                           
  8323                           ;main.c: 498: PORTCbits.RC2 = 1;
  8324  0020F4  8482               	bsf	3970,2,c	;volatile
  8325                           
  8326                           ;main.c: 499: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8327  0020F6  0E00               	movlw	0
  8328  0020F8  6E18               	movwf	servo_rotate2@j+1,c
  8329  0020FA  0E00               	movlw	0
  8330  0020FC  6E17               	movwf	servo_rotate2@j,c
  8331  0020FE  D006               	goto	i2l398
  8332  002100                     i2l4164:
  8333  002100  0E53               	movlw	83
  8334  002102                     i2u488_47:
  8335  002102  2EE8               	decfsz	wreg,f,c
  8336  002104  D7FE               	bra	i2u488_47
  8337  002106  F000               	nop	
  8338  002108  4A17               	infsnz	servo_rotate2@j,f,c
  8339  00210A  2A18               	incf	servo_rotate2@j+1,f,c
  8340  00210C                     i2l398:
  8341  00210C  5013               	movf	servo_rotate2@duty,w,c
  8342  00210E  5C17               	subwf	servo_rotate2@j,w,c
  8343  002110  5014               	movf	servo_rotate2@duty+1,w,c
  8344  002112  5818               	subwfb	servo_rotate2@j+1,w,c
  8345  002114  A0D8               	btfss	status,0,c
  8346  002116  D7F4               	goto	i2l4164
  8347                           
  8348                           ;main.c: 500: PORTCbits.RC2 = 0;
  8349  002118  9482               	bcf	3970,2,c	;volatile
  8350                           
  8351                           ;main.c: 501: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8352  00211A  0E00               	movlw	0
  8353  00211C  6E18               	movwf	servo_rotate2@j+1,c
  8354  00211E  0E00               	movlw	0
  8355  002120  6E17               	movwf	servo_rotate2@j,c
  8356  002122  D006               	goto	i2l401
  8357  002124                     i2l4170:
  8358  002124  0E53               	movlw	83
  8359  002126                     i2u489_47:
  8360  002126  2EE8               	decfsz	wreg,f,c
  8361  002128  D7FE               	bra	i2u489_47
  8362  00212A  F000               	nop	
  8363  00212C  4A17               	infsnz	servo_rotate2@j,f,c
  8364  00212E  2A18               	incf	servo_rotate2@j+1,f,c
  8365  002130                     i2l401:
  8366  002130  C013  F011         	movff	servo_rotate2@duty,??_servo_rotate2
  8367  002134  C014  F012         	movff	servo_rotate2@duty+1,??_servo_rotate2+1
  8368  002138  1E11               	comf	??_servo_rotate2,f,c
  8369  00213A  1E12               	comf	??_servo_rotate2+1,f,c
  8370  00213C  4A11               	infsnz	??_servo_rotate2,f,c
  8371  00213E  2A12               	incf	??_servo_rotate2+1,f,c
  8372  002140  0EC8               	movlw	200
  8373  002142  2611               	addwf	??_servo_rotate2,f,c
  8374  002144  0E00               	movlw	0
  8375  002146  2212               	addwfc	??_servo_rotate2+1,f,c
  8376  002148  5011               	movf	??_servo_rotate2,w,c
  8377  00214A  5C17               	subwf	servo_rotate2@j,w,c
  8378  00214C  5012               	movf	??_servo_rotate2+1,w,c
  8379  00214E  5818               	subwfb	servo_rotate2@j+1,w,c
  8380  002150  A0D8               	btfss	status,0,c
  8381  002152  D7E8               	goto	i2l4170
  8382  002154  4A15               	infsnz	servo_rotate2@i,f,c
  8383  002156  2A16               	incf	servo_rotate2@i+1,f,c
  8384  002158  D7C7               	goto	i2l4158
  8385  00215A                     i2l404:
  8386  00215A  0012               	return		;funcret
  8387  00215C                     __end_of_servo_rotate2:
  8388                           	opt stack 0
  8389                           pclatu	equ	0xFFB
  8390                           pclath	equ	0xFFA
  8391                           tblptru	equ	0xFF8
  8392                           tblptrh	equ	0xFF7
  8393                           tblptrl	equ	0xFF6
  8394                           tablat	equ	0xFF5
  8395                           prodh	equ	0xFF4
  8396                           prodl	equ	0xFF3
  8397                           intcon	equ	0xFF2
  8398                           intcon2	equ	0xFF1
  8399                           intcon3	equ	0xFF0
  8400                           postinc0	equ	0xFEE
  8401                           fsr0h	equ	0xFEA
  8402                           fsr0l	equ	0xFE9
  8403                           wreg	equ	0xFE8
  8404                           fsr1h	equ	0xFE2
  8405                           fsr1l	equ	0xFE1
  8406                           indf2	equ	0xFDF
  8407                           postinc2	equ	0xFDE
  8408                           postdec2	equ	0xFDD
  8409                           fsr2h	equ	0xFDA
  8410                           fsr2l	equ	0xFD9
  8411                           status	equ	0xFD8
  8412                           
  8413 ;; *************** function _servo_rotate1 *****************
  8414 ;; Defined at:
  8415 ;;		line 480 in file "main.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;  degree          2   14[COMRAM] int 
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;  j               2   22[COMRAM] unsigned int 
  8420 ;;  i               2   20[COMRAM] unsigned int 
  8421 ;;  duty            2   18[COMRAM] int 
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  1    wreg      void 
  8424 ;; Registers used:
  8425 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8431 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;Total ram usage:       10 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:    1
  8438 ;; This function calls:
  8439 ;;		___awdiv
  8440 ;;		i2___wmul
  8441 ;; This function is called by:
  8442 ;;		_isr
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           	psect	text37
  8447  00215C                     __ptext37:
  8448                           	opt stack 0
  8449  00215C                     _servo_rotate1:
  8450                           	opt stack 24
  8451                           
  8452                           ;main.c: 481: unsigned int i;
  8453                           ;main.c: 482: unsigned int j;
  8454                           ;main.c: 483: int duty = degree*10/90;
  8455                           
  8456                           ;incstack = 0
  8457  00215C  C00F  F001         	movff	servo_rotate1@degree,i2___wmul@multiplier
  8458  002160  C010  F002         	movff	servo_rotate1@degree+1,i2___wmul@multiplier+1
  8459  002164  0E00               	movlw	0
  8460  002166  6E04               	movwf	i2___wmul@multiplicand+1,c
  8461  002168  0E0A               	movlw	10
  8462  00216A  6E03               	movwf	i2___wmul@multiplicand,c
  8463  00216C  EC86  F015         	call	i2___wmul	;wreg free
  8464  002170  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8465  002174  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8466  002178  0E00               	movlw	0
  8467  00217A  6E0A               	movwf	___awdiv@divisor+1,c
  8468  00217C  0E5A               	movlw	90
  8469  00217E  6E09               	movwf	___awdiv@divisor,c
  8470  002180  EC3B  F012         	call	___awdiv	;wreg free
  8471  002184  C007  F013         	movff	?___awdiv,servo_rotate1@duty
  8472  002188  C008  F014         	movff	?___awdiv+1,servo_rotate1@duty+1
  8473                           
  8474                           ;main.c: 484: for (i=0; i<50; i++) {
  8475  00218C  0E00               	movlw	0
  8476  00218E  6E16               	movwf	servo_rotate1@i+1,c
  8477  002190  0E00               	movlw	0
  8478  002192  6E15               	movwf	servo_rotate1@i,c
  8479  002194                     i2l4182:
  8480  002194  5016               	movf	servo_rotate1@i+1,w,c
  8481  002196  E137               	bnz	i2l393
  8482  002198  0E32               	movlw	50
  8483  00219A  5C15               	subwf	servo_rotate1@i,w,c
  8484  00219C  B0D8               	btfsc	status,0,c
  8485  00219E  0012               	return	
  8486                           
  8487                           ;main.c: 485: PORTCbits.RC1 = 1;
  8488  0021A0  8282               	bsf	3970,1,c	;volatile
  8489                           
  8490                           ;main.c: 486: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8491  0021A2  0E00               	movlw	0
  8492  0021A4  6E18               	movwf	servo_rotate1@j+1,c
  8493  0021A6  0E00               	movlw	0
  8494  0021A8  6E17               	movwf	servo_rotate1@j,c
  8495  0021AA  D006               	goto	i2l387
  8496  0021AC                     i2l4188:
  8497  0021AC  0E53               	movlw	83
  8498  0021AE                     i2u490_47:
  8499  0021AE  2EE8               	decfsz	wreg,f,c
  8500  0021B0  D7FE               	bra	i2u490_47
  8501  0021B2  F000               	nop	
  8502  0021B4  4A17               	infsnz	servo_rotate1@j,f,c
  8503  0021B6  2A18               	incf	servo_rotate1@j+1,f,c
  8504  0021B8                     i2l387:
  8505  0021B8  5013               	movf	servo_rotate1@duty,w,c
  8506  0021BA  5C17               	subwf	servo_rotate1@j,w,c
  8507  0021BC  5014               	movf	servo_rotate1@duty+1,w,c
  8508  0021BE  5818               	subwfb	servo_rotate1@j+1,w,c
  8509  0021C0  A0D8               	btfss	status,0,c
  8510  0021C2  D7F4               	goto	i2l4188
  8511                           
  8512                           ;main.c: 487: PORTCbits.RC1 = 0;
  8513  0021C4  9282               	bcf	3970,1,c	;volatile
  8514                           
  8515                           ;main.c: 488: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8516  0021C6  0E00               	movlw	0
  8517  0021C8  6E18               	movwf	servo_rotate1@j+1,c
  8518  0021CA  0E00               	movlw	0
  8519  0021CC  6E17               	movwf	servo_rotate1@j,c
  8520  0021CE  D006               	goto	i2l390
  8521  0021D0                     i2l4194:
  8522  0021D0  0E53               	movlw	83
  8523  0021D2                     i2u491_47:
  8524  0021D2  2EE8               	decfsz	wreg,f,c
  8525  0021D4  D7FE               	bra	i2u491_47
  8526  0021D6  F000               	nop	
  8527  0021D8  4A17               	infsnz	servo_rotate1@j,f,c
  8528  0021DA  2A18               	incf	servo_rotate1@j+1,f,c
  8529  0021DC                     i2l390:
  8530  0021DC  C013  F011         	movff	servo_rotate1@duty,??_servo_rotate1
  8531  0021E0  C014  F012         	movff	servo_rotate1@duty+1,??_servo_rotate1+1
  8532  0021E4  1E11               	comf	??_servo_rotate1,f,c
  8533  0021E6  1E12               	comf	??_servo_rotate1+1,f,c
  8534  0021E8  4A11               	infsnz	??_servo_rotate1,f,c
  8535  0021EA  2A12               	incf	??_servo_rotate1+1,f,c
  8536  0021EC  0EC8               	movlw	200
  8537  0021EE  2611               	addwf	??_servo_rotate1,f,c
  8538  0021F0  0E00               	movlw	0
  8539  0021F2  2212               	addwfc	??_servo_rotate1+1,f,c
  8540  0021F4  5011               	movf	??_servo_rotate1,w,c
  8541  0021F6  5C17               	subwf	servo_rotate1@j,w,c
  8542  0021F8  5012               	movf	??_servo_rotate1+1,w,c
  8543  0021FA  5818               	subwfb	servo_rotate1@j+1,w,c
  8544  0021FC  A0D8               	btfss	status,0,c
  8545  0021FE  D7E8               	goto	i2l4194
  8546  002200  4A15               	infsnz	servo_rotate1@i,f,c
  8547  002202  2A16               	incf	servo_rotate1@i+1,f,c
  8548  002204  D7C7               	goto	i2l4182
  8549  002206                     i2l393:
  8550  002206  0012               	return		;funcret
  8551  002208                     __end_of_servo_rotate1:
  8552                           	opt stack 0
  8553                           pclatu	equ	0xFFB
  8554                           pclath	equ	0xFFA
  8555                           tblptru	equ	0xFF8
  8556                           tblptrh	equ	0xFF7
  8557                           tblptrl	equ	0xFF6
  8558                           tablat	equ	0xFF5
  8559                           prodh	equ	0xFF4
  8560                           prodl	equ	0xFF3
  8561                           intcon	equ	0xFF2
  8562                           intcon2	equ	0xFF1
  8563                           intcon3	equ	0xFF0
  8564                           postinc0	equ	0xFEE
  8565                           fsr0h	equ	0xFEA
  8566                           fsr0l	equ	0xFE9
  8567                           wreg	equ	0xFE8
  8568                           fsr1h	equ	0xFE2
  8569                           fsr1l	equ	0xFE1
  8570                           indf2	equ	0xFDF
  8571                           postinc2	equ	0xFDE
  8572                           postdec2	equ	0xFDD
  8573                           fsr2h	equ	0xFDA
  8574                           fsr2l	equ	0xFD9
  8575                           status	equ	0xFD8
  8576                           
  8577 ;; *************** function _servo_rotate0 *****************
  8578 ;; Defined at:
  8579 ;;		line 467 in file "main.c"
  8580 ;; Parameters:    Size  Location     Type
  8581 ;;  degree          2   14[COMRAM] int 
  8582 ;; Auto vars:     Size  Location     Type
  8583 ;;  j               2   22[COMRAM] unsigned int 
  8584 ;;  i               2   20[COMRAM] unsigned int 
  8585 ;;  duty            2   18[COMRAM] int 
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  1    wreg      void 
  8588 ;; Registers used:
  8589 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;Total ram usage:       10 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    1
  8602 ;; This function calls:
  8603 ;;		___awdiv
  8604 ;;		i2___wmul
  8605 ;; This function is called by:
  8606 ;;		_isr
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           	psect	text38
  8611  002208                     __ptext38:
  8612                           	opt stack 0
  8613  002208                     _servo_rotate0:
  8614                           	opt stack 24
  8615                           
  8616                           ;main.c: 468: unsigned int i;
  8617                           ;main.c: 469: unsigned int j;
  8618                           ;main.c: 470: int duty = degree*10/90;
  8619                           
  8620                           ;incstack = 0
  8621  002208  C00F  F001         	movff	servo_rotate0@degree,i2___wmul@multiplier
  8622  00220C  C010  F002         	movff	servo_rotate0@degree+1,i2___wmul@multiplier+1
  8623  002210  0E00               	movlw	0
  8624  002212  6E04               	movwf	i2___wmul@multiplicand+1,c
  8625  002214  0E0A               	movlw	10
  8626  002216  6E03               	movwf	i2___wmul@multiplicand,c
  8627  002218  EC86  F015         	call	i2___wmul	;wreg free
  8628  00221C  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8629  002220  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8630  002224  0E00               	movlw	0
  8631  002226  6E0A               	movwf	___awdiv@divisor+1,c
  8632  002228  0E5A               	movlw	90
  8633  00222A  6E09               	movwf	___awdiv@divisor,c
  8634  00222C  EC3B  F012         	call	___awdiv	;wreg free
  8635  002230  C007  F013         	movff	?___awdiv,servo_rotate0@duty
  8636  002234  C008  F014         	movff	?___awdiv+1,servo_rotate0@duty+1
  8637                           
  8638                           ;main.c: 471: for (i=0; i<50; i++) {
  8639  002238  0E00               	movlw	0
  8640  00223A  6E16               	movwf	servo_rotate0@i+1,c
  8641  00223C  0E00               	movlw	0
  8642  00223E  6E15               	movwf	servo_rotate0@i,c
  8643  002240                     i2l4134:
  8644  002240  5016               	movf	servo_rotate0@i+1,w,c
  8645  002242  E137               	bnz	i2l382
  8646  002244  0E32               	movlw	50
  8647  002246  5C15               	subwf	servo_rotate0@i,w,c
  8648  002248  B0D8               	btfsc	status,0,c
  8649  00224A  0012               	return	
  8650                           
  8651                           ;main.c: 472: PORTCbits.RC0 = 1;
  8652  00224C  8082               	bsf	3970,0,c	;volatile
  8653                           
  8654                           ;main.c: 473: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8655  00224E  0E00               	movlw	0
  8656  002250  6E18               	movwf	servo_rotate0@j+1,c
  8657  002252  0E00               	movlw	0
  8658  002254  6E17               	movwf	servo_rotate0@j,c
  8659  002256  D006               	goto	i2l376
  8660  002258                     i2l4140:
  8661  002258  0E53               	movlw	83
  8662  00225A                     i2u492_47:
  8663  00225A  2EE8               	decfsz	wreg,f,c
  8664  00225C  D7FE               	bra	i2u492_47
  8665  00225E  F000               	nop	
  8666  002260  4A17               	infsnz	servo_rotate0@j,f,c
  8667  002262  2A18               	incf	servo_rotate0@j+1,f,c
  8668  002264                     i2l376:
  8669  002264  5013               	movf	servo_rotate0@duty,w,c
  8670  002266  5C17               	subwf	servo_rotate0@j,w,c
  8671  002268  5014               	movf	servo_rotate0@duty+1,w,c
  8672  00226A  5818               	subwfb	servo_rotate0@j+1,w,c
  8673  00226C  A0D8               	btfss	status,0,c
  8674  00226E  D7F4               	goto	i2l4140
  8675                           
  8676                           ;main.c: 474: PORTCbits.RC0 = 0;
  8677  002270  9082               	bcf	3970,0,c	;volatile
  8678                           
  8679                           ;main.c: 475: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8680  002272  0E00               	movlw	0
  8681  002274  6E18               	movwf	servo_rotate0@j+1,c
  8682  002276  0E00               	movlw	0
  8683  002278  6E17               	movwf	servo_rotate0@j,c
  8684  00227A  D006               	goto	i2l379
  8685  00227C                     i2l4146:
  8686  00227C  0E53               	movlw	83
  8687  00227E                     i2u493_47:
  8688  00227E  2EE8               	decfsz	wreg,f,c
  8689  002280  D7FE               	bra	i2u493_47
  8690  002282  F000               	nop	
  8691  002284  4A17               	infsnz	servo_rotate0@j,f,c
  8692  002286  2A18               	incf	servo_rotate0@j+1,f,c
  8693  002288                     i2l379:
  8694  002288  C013  F011         	movff	servo_rotate0@duty,??_servo_rotate0
  8695  00228C  C014  F012         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  8696  002290  1E11               	comf	??_servo_rotate0,f,c
  8697  002292  1E12               	comf	??_servo_rotate0+1,f,c
  8698  002294  4A11               	infsnz	??_servo_rotate0,f,c
  8699  002296  2A12               	incf	??_servo_rotate0+1,f,c
  8700  002298  0EC8               	movlw	200
  8701  00229A  2611               	addwf	??_servo_rotate0,f,c
  8702  00229C  0E00               	movlw	0
  8703  00229E  2212               	addwfc	??_servo_rotate0+1,f,c
  8704  0022A0  5011               	movf	??_servo_rotate0,w,c
  8705  0022A2  5C17               	subwf	servo_rotate0@j,w,c
  8706  0022A4  5012               	movf	??_servo_rotate0+1,w,c
  8707  0022A6  5818               	subwfb	servo_rotate0@j+1,w,c
  8708  0022A8  A0D8               	btfss	status,0,c
  8709  0022AA  D7E8               	goto	i2l4146
  8710  0022AC  4A15               	infsnz	servo_rotate0@i,f,c
  8711  0022AE  2A16               	incf	servo_rotate0@i+1,f,c
  8712  0022B0  D7C7               	goto	i2l4134
  8713  0022B2                     i2l382:
  8714  0022B2  0012               	return		;funcret
  8715  0022B4                     __end_of_servo_rotate0:
  8716                           	opt stack 0
  8717                           pclatu	equ	0xFFB
  8718                           pclath	equ	0xFFA
  8719                           tblptru	equ	0xFF8
  8720                           tblptrh	equ	0xFF7
  8721                           tblptrl	equ	0xFF6
  8722                           tablat	equ	0xFF5
  8723                           prodh	equ	0xFF4
  8724                           prodl	equ	0xFF3
  8725                           intcon	equ	0xFF2
  8726                           intcon2	equ	0xFF1
  8727                           intcon3	equ	0xFF0
  8728                           postinc0	equ	0xFEE
  8729                           fsr0h	equ	0xFEA
  8730                           fsr0l	equ	0xFE9
  8731                           wreg	equ	0xFE8
  8732                           fsr1h	equ	0xFE2
  8733                           fsr1l	equ	0xFE1
  8734                           indf2	equ	0xFDF
  8735                           postinc2	equ	0xFDE
  8736                           postdec2	equ	0xFDD
  8737                           fsr2h	equ	0xFDA
  8738                           fsr2l	equ	0xFD9
  8739                           status	equ	0xFD8
  8740                           
  8741 ;; *************** function _read_time *****************
  8742 ;; Defined at:
  8743 ;;		line 358 in file "main.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;		None
  8746 ;; Auto vars:     Size  Location     Type
  8747 ;;  i               1    3[COMRAM] unsigned char 
  8748 ;; Return value:  Size  Location     Type
  8749 ;;                  1    wreg      void 
  8750 ;; Registers used:
  8751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8761 ;;Total ram usage:        1 bytes
  8762 ;; Hardware stack levels used:    1
  8763 ;; Hardware stack levels required when called:    2
  8764 ;; This function calls:
  8765 ;;		i2_I2C_Master_Read
  8766 ;;		i2_I2C_Master_Start
  8767 ;;		i2_I2C_Master_Stop
  8768 ;;		i2_I2C_Master_Write
  8769 ;; This function is called by:
  8770 ;;		_isr
  8771 ;; This function uses a non-reentrant model
  8772 ;;
  8773                           
  8774                           	psect	text39
  8775  0025EA                     __ptext39:
  8776                           	opt stack 0
  8777  0025EA                     _read_time:
  8778                           	opt stack 23
  8779                           
  8780                           ;main.c: 360: I2C_Master_Start();
  8781                           
  8782                           ;incstack = 0
  8783  0025EA  EC1C  F016         	call	i2_I2C_Master_Start	;wreg free
  8784                           
  8785                           ;main.c: 361: I2C_Master_Write(0b11010000);
  8786  0025EE  0E00               	movlw	0
  8787  0025F0  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8788  0025F2  0ED0               	movlw	208
  8789  0025F4  6E02               	movwf	i2I2C_Master_Write@d,c
  8790  0025F6  EC0B  F016         	call	i2_I2C_Master_Write	;wreg free
  8791                           
  8792                           ;main.c: 362: I2C_Master_Write(0x00);
  8793  0025FA  0E00               	movlw	0
  8794  0025FC  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8795  0025FE  0E00               	movlw	0
  8796  002600  6E02               	movwf	i2I2C_Master_Write@d,c
  8797  002602  EC0B  F016         	call	i2_I2C_Master_Write	;wreg free
  8798                           
  8799                           ;main.c: 363: I2C_Master_Stop();
  8800  002606  EC18  F016         	call	i2_I2C_Master_Stop	;wreg free
  8801                           
  8802                           ;main.c: 366: I2C_Master_Start();
  8803  00260A  EC1C  F016         	call	i2_I2C_Master_Start	;wreg free
  8804                           
  8805                           ;main.c: 367: I2C_Master_Write(0b11010001);
  8806  00260E  0E00               	movlw	0
  8807  002610  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8808  002612  0ED1               	movlw	209
  8809  002614  6E02               	movwf	i2I2C_Master_Write@d,c
  8810  002616  EC0B  F016         	call	i2_I2C_Master_Write	;wreg free
  8811                           
  8812                           ;main.c: 368: for(unsigned char i=0;i<0x06;i++){
  8813  00261A  0E00               	movlw	0
  8814  00261C  6E04               	movwf	read_time@i,c
  8815  00261E                     i2l4098:
  8816  00261E  0E05               	movlw	5
  8817  002620  6404               	cpfsgt	read_time@i,c
  8818  002622  D001               	goto	i2l4102
  8819  002624  D00E               	goto	i2l4108
  8820  002626                     i2l4102:
  8821                           
  8822                           ;main.c: 369: time[i] = I2C_Master_Read(1);
  8823  002626  5004               	movf	read_time@i,w,c
  8824  002628  0D01               	mullw	1
  8825  00262A  0E9E               	movlw	low _time
  8826  00262C  24F3               	addwf	prodl,w,c
  8827  00262E  6ED9               	movwf	fsr2l,c
  8828  002630  0E00               	movlw	high _time
  8829  002632  20F4               	addwfc	prodh,w,c
  8830  002634  6EDA               	movwf	fsr2h,c
  8831  002636  0E01               	movlw	1
  8832  002638  EC73  F015         	call	i2_I2C_Master_Read
  8833  00263C  6EDF               	movwf	indf2,c
  8834  00263E  2A04               	incf	read_time@i,f,c
  8835  002640  D7EE               	goto	i2l4098
  8836  002642                     i2l4108:
  8837                           
  8838                           ;main.c: 370: }
  8839                           ;main.c: 371: time[6] = I2C_Master_Read(0);
  8840  002642  0E00               	movlw	0
  8841  002644  EC73  F015         	call	i2_I2C_Master_Read
  8842  002648  0100               	movlb	0	; () banked
  8843  00264A  6FA4               	movwf	(_time+6)& (0+255),b
  8844                           
  8845                           ;main.c: 372: I2C_Master_Stop();
  8846  00264C  EC18  F016         	call	i2_I2C_Master_Stop	;wreg free
  8847  002650  0012               	return	
  8848  002652                     __end_of_read_time:
  8849                           	opt stack 0
  8850                           pclatu	equ	0xFFB
  8851                           pclath	equ	0xFFA
  8852                           tblptru	equ	0xFF8
  8853                           tblptrh	equ	0xFF7
  8854                           tblptrl	equ	0xFF6
  8855                           tablat	equ	0xFF5
  8856                           prodh	equ	0xFF4
  8857                           prodl	equ	0xFF3
  8858                           intcon	equ	0xFF2
  8859                           intcon2	equ	0xFF1
  8860                           intcon3	equ	0xFF0
  8861                           postinc0	equ	0xFEE
  8862                           fsr0h	equ	0xFEA
  8863                           fsr0l	equ	0xFE9
  8864                           wreg	equ	0xFE8
  8865                           fsr1h	equ	0xFE2
  8866                           fsr1l	equ	0xFE1
  8867                           indf2	equ	0xFDF
  8868                           postinc2	equ	0xFDE
  8869                           postdec2	equ	0xFDD
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function i2_I2C_Master_Write *****************
  8875 ;; Defined at:
  8876 ;;		line 47 in file "I2C.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;  d               2    1[COMRAM] unsigned int 
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;		None
  8881 ;; Return value:  Size  Location     Type
  8882 ;;                  1    wreg      void 
  8883 ;; Registers used:
  8884 ;;		wreg, status,2, status,0, cstack
  8885 ;; Tracked objects:
  8886 ;;		On entry : 0/0
  8887 ;;		On exit  : 0/0
  8888 ;;		Unchanged: 0/0
  8889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8890 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8893 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8894 ;;Total ram usage:        2 bytes
  8895 ;; Hardware stack levels used:    1
  8896 ;; Hardware stack levels required when called:    1
  8897 ;; This function calls:
  8898 ;;		i2_I2C_Master_Wait
  8899 ;; This function is called by:
  8900 ;;		_read_time
  8901 ;;		i2_read_colorsensor
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           	psect	text40
  8906  002C16                     __ptext40:
  8907                           	opt stack 0
  8908  002C16                     i2_I2C_Master_Write:
  8909                           	opt stack 23
  8910                           
  8911                           ;I2C.c: 49: I2C_Master_Wait();
  8912                           
  8913                           ;incstack = 0
  8914  002C16  ECE1  F015         	call	i2_I2C_Master_Wait	;wreg free
  8915                           
  8916                           ;I2C.c: 50: SSPBUF = d;
  8917  002C1A  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  8918  002C1E  0012               	return		;funcret
  8919  002C20                     __end_ofi2_I2C_Master_Write:
  8920                           	opt stack 0
  8921                           pclatu	equ	0xFFB
  8922                           pclath	equ	0xFFA
  8923                           tblptru	equ	0xFF8
  8924                           tblptrh	equ	0xFF7
  8925                           tblptrl	equ	0xFF6
  8926                           tablat	equ	0xFF5
  8927                           prodh	equ	0xFF4
  8928                           prodl	equ	0xFF3
  8929                           intcon	equ	0xFF2
  8930                           intcon2	equ	0xFF1
  8931                           intcon3	equ	0xFF0
  8932                           postinc0	equ	0xFEE
  8933                           fsr0h	equ	0xFEA
  8934                           fsr0l	equ	0xFE9
  8935                           wreg	equ	0xFE8
  8936                           fsr1h	equ	0xFE2
  8937                           fsr1l	equ	0xFE1
  8938                           indf2	equ	0xFDF
  8939                           postinc2	equ	0xFDE
  8940                           postdec2	equ	0xFDD
  8941                           fsr2h	equ	0xFDA
  8942                           fsr2l	equ	0xFD9
  8943                           status	equ	0xFD8
  8944                           
  8945 ;; *************** function i2_I2C_Master_Stop *****************
  8946 ;; Defined at:
  8947 ;;		line 41 in file "I2C.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;		None
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;		None
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  1    wreg      void 
  8954 ;; Registers used:
  8955 ;;		wreg, status,2, status,0, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8965 ;;Total ram usage:        0 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:    1
  8968 ;; This function calls:
  8969 ;;		i2_I2C_Master_Wait
  8970 ;; This function is called by:
  8971 ;;		_read_time
  8972 ;;		i2_read_colorsensor
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           	psect	text41
  8977  002C30                     __ptext41:
  8978                           	opt stack 0
  8979  002C30                     i2_I2C_Master_Stop:
  8980                           	opt stack 23
  8981                           
  8982                           ;I2C.c: 43: I2C_Master_Wait();
  8983                           
  8984                           ;incstack = 0
  8985  002C30  ECE1  F015         	call	i2_I2C_Master_Wait	;wreg free
  8986                           
  8987                           ;I2C.c: 44: PEN = 1;
  8988  002C34  84C5               	bsf	4037,2,c	;volatile
  8989  002C36  0012               	return		;funcret
  8990  002C38                     __end_ofi2_I2C_Master_Stop:
  8991                           	opt stack 0
  8992                           pclatu	equ	0xFFB
  8993                           pclath	equ	0xFFA
  8994                           tblptru	equ	0xFF8
  8995                           tblptrh	equ	0xFF7
  8996                           tblptrl	equ	0xFF6
  8997                           tablat	equ	0xFF5
  8998                           prodh	equ	0xFF4
  8999                           prodl	equ	0xFF3
  9000                           intcon	equ	0xFF2
  9001                           intcon2	equ	0xFF1
  9002                           intcon3	equ	0xFF0
  9003                           postinc0	equ	0xFEE
  9004                           fsr0h	equ	0xFEA
  9005                           fsr0l	equ	0xFE9
  9006                           wreg	equ	0xFE8
  9007                           fsr1h	equ	0xFE2
  9008                           fsr1l	equ	0xFE1
  9009                           indf2	equ	0xFDF
  9010                           postinc2	equ	0xFDE
  9011                           postdec2	equ	0xFDD
  9012                           fsr2h	equ	0xFDA
  9013                           fsr2l	equ	0xFD9
  9014                           status	equ	0xFD8
  9015                           
  9016 ;; *************** function i2_I2C_Master_Start *****************
  9017 ;; Defined at:
  9018 ;;		line 29 in file "I2C.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;		None
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;		None
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      void 
  9025 ;; Registers used:
  9026 ;;		wreg, status,2, status,0, cstack
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9036 ;;Total ram usage:        0 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:    1
  9039 ;; This function calls:
  9040 ;;		i2_I2C_Master_Wait
  9041 ;; This function is called by:
  9042 ;;		_read_time
  9043 ;;		i2_read_colorsensor
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           	psect	text42
  9048  002C38                     __ptext42:
  9049                           	opt stack 0
  9050  002C38                     i2_I2C_Master_Start:
  9051                           	opt stack 23
  9052                           
  9053                           ;I2C.c: 31: I2C_Master_Wait();
  9054                           
  9055                           ;incstack = 0
  9056  002C38  ECE1  F015         	call	i2_I2C_Master_Wait	;wreg free
  9057                           
  9058                           ;I2C.c: 32: SEN = 1;
  9059  002C3C  80C5               	bsf	4037,0,c	;volatile
  9060  002C3E  0012               	return		;funcret
  9061  002C40                     __end_ofi2_I2C_Master_Start:
  9062                           	opt stack 0
  9063                           pclatu	equ	0xFFB
  9064                           pclath	equ	0xFFA
  9065                           tblptru	equ	0xFF8
  9066                           tblptrh	equ	0xFF7
  9067                           tblptrl	equ	0xFF6
  9068                           tablat	equ	0xFF5
  9069                           prodh	equ	0xFF4
  9070                           prodl	equ	0xFF3
  9071                           intcon	equ	0xFF2
  9072                           intcon2	equ	0xFF1
  9073                           intcon3	equ	0xFF0
  9074                           postinc0	equ	0xFEE
  9075                           fsr0h	equ	0xFEA
  9076                           fsr0l	equ	0xFE9
  9077                           wreg	equ	0xFE8
  9078                           fsr1h	equ	0xFE2
  9079                           fsr1l	equ	0xFE1
  9080                           indf2	equ	0xFDF
  9081                           postinc2	equ	0xFDE
  9082                           postdec2	equ	0xFDD
  9083                           fsr2h	equ	0xFDA
  9084                           fsr2l	equ	0xFD9
  9085                           status	equ	0xFD8
  9086                           
  9087 ;; *************** function i2_I2C_Master_Read *****************
  9088 ;; Defined at:
  9089 ;;		line 61 in file "I2C.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;  a               1    wreg     unsigned char 
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;  a               1    1[COMRAM] unsigned char 
  9094 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9095 ;; Return value:  Size  Location     Type
  9096 ;;                  1    wreg      unsigned char 
  9097 ;; Registers used:
  9098 ;;		wreg, status,2, status,0, cstack
  9099 ;; Tracked objects:
  9100 ;;		On entry : 0/0
  9101 ;;		On exit  : 0/0
  9102 ;;		Unchanged: 0/0
  9103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;Total ram usage:        2 bytes
  9109 ;; Hardware stack levels used:    1
  9110 ;; Hardware stack levels required when called:    1
  9111 ;; This function calls:
  9112 ;;		i2_I2C_Master_Wait
  9113 ;; This function is called by:
  9114 ;;		_read_time
  9115 ;;		i2_read_colorsensor
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           	psect	text43
  9120  002AE6                     __ptext43:
  9121                           	opt stack 0
  9122  002AE6                     i2_I2C_Master_Read:
  9123                           	opt stack 23
  9124                           
  9125                           ;incstack = 0
  9126                           ;i2I2C_Master_Read@a stored from wreg
  9127  002AE6  6E02               	movwf	i2I2C_Master_Read@a,c
  9128                           
  9129                           ;I2C.c: 63: unsigned char temp;
  9130                           ;I2C.c: 64: I2C_Master_Wait();
  9131  002AE8  ECE1  F015         	call	i2_I2C_Master_Wait	;wreg free
  9132                           
  9133                           ;I2C.c: 65: RCEN = 1;
  9134  002AEC  86C5               	bsf	4037,3,c	;volatile
  9135                           
  9136                           ;I2C.c: 66: I2C_Master_Wait();
  9137  002AEE  ECE1  F015         	call	i2_I2C_Master_Wait	;wreg free
  9138                           
  9139                           ;I2C.c: 67: temp = SSPBUF;
  9140  002AF2  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9141                           
  9142                           ;I2C.c: 68: I2C_Master_Wait();
  9143  002AF6  ECE1  F015         	call	i2_I2C_Master_Wait	;wreg free
  9144                           
  9145                           ;I2C.c: 69: ACKDT = (a)?0:1;
  9146  002AFA  5002               	movf	i2I2C_Master_Read@a,w,c
  9147  002AFC  A4D8               	btfss	status,2,c
  9148  002AFE  D002               	goto	i2u361_40
  9149  002B00  8AC5               	bsf	4037,5,c	;volatile
  9150  002B02  D001               	goto	i2l3876
  9151  002B04                     i2u361_40:
  9152  002B04  9AC5               	bcf	4037,5,c	;volatile
  9153  002B06                     i2l3876:
  9154                           
  9155                           ;I2C.c: 70: ACKEN = 1;
  9156  002B06  88C5               	bsf	4037,4,c	;volatile
  9157                           
  9158                           ;I2C.c: 71: return temp;
  9159  002B08  5003               	movf	i2I2C_Master_Read@temp,w,c
  9160  002B0A  0012               	return	
  9161  002B0C                     __end_ofi2_I2C_Master_Read:
  9162                           	opt stack 0
  9163                           pclatu	equ	0xFFB
  9164                           pclath	equ	0xFFA
  9165                           tblptru	equ	0xFF8
  9166                           tblptrh	equ	0xFF7
  9167                           tblptrl	equ	0xFF6
  9168                           tablat	equ	0xFF5
  9169                           prodh	equ	0xFF4
  9170                           prodl	equ	0xFF3
  9171                           intcon	equ	0xFF2
  9172                           intcon2	equ	0xFF1
  9173                           intcon3	equ	0xFF0
  9174                           postinc0	equ	0xFEE
  9175                           fsr0h	equ	0xFEA
  9176                           fsr0l	equ	0xFE9
  9177                           wreg	equ	0xFE8
  9178                           fsr1h	equ	0xFE2
  9179                           fsr1l	equ	0xFE1
  9180                           indf2	equ	0xFDF
  9181                           postinc2	equ	0xFDE
  9182                           postdec2	equ	0xFDD
  9183                           fsr2h	equ	0xFDA
  9184                           fsr2l	equ	0xFD9
  9185                           status	equ	0xFD8
  9186                           
  9187 ;; *************** function i2_I2C_Master_Wait *****************
  9188 ;; Defined at:
  9189 ;;		line 24 in file "I2C.c"
  9190 ;; Parameters:    Size  Location     Type
  9191 ;;		None
  9192 ;; Auto vars:     Size  Location     Type
  9193 ;;		None
  9194 ;; Return value:  Size  Location     Type
  9195 ;;                  1    wreg      void 
  9196 ;; Registers used:
  9197 ;;		wreg, status,2, status,0
  9198 ;; Tracked objects:
  9199 ;;		On entry : 0/0
  9200 ;;		On exit  : 0/0
  9201 ;;		Unchanged: 0/0
  9202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9206 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;Total ram usage:        1 bytes
  9208 ;; Hardware stack levels used:    1
  9209 ;; This function calls:
  9210 ;;		Nothing
  9211 ;; This function is called by:
  9212 ;;		i2_I2C_Master_Start
  9213 ;;		i2_I2C_Master_Stop
  9214 ;;		i2_I2C_Master_Write
  9215 ;;		i2_I2C_Master_Read
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           	psect	text44
  9220  002BC2                     __ptext44:
  9221                           	opt stack 0
  9222  002BC2                     i2_I2C_Master_Wait:
  9223                           	opt stack 23
  9224  002BC2                     i2l34:
  9225  002BC2  B4C7               	btfsc	4039,2,c	;volatile
  9226  002BC4  D7FE               	goto	i2l34
  9227  002BC6  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  9228  002BCA  0E1F               	movlw	31
  9229  002BCC  1601               	andwf	??i2_I2C_Master_Wait,f,c
  9230  002BCE  B4D8               	btfsc	status,2,c
  9231  002BD0  0012               	return	
  9232  002BD2  D7F7               	goto	i2l34
  9233  002BD4                     __end_ofi2_I2C_Master_Wait:
  9234                           	opt stack 0
  9235                           pclatu	equ	0xFFB
  9236                           pclath	equ	0xFFA
  9237                           tblptru	equ	0xFF8
  9238                           tblptrh	equ	0xFF7
  9239                           tblptrl	equ	0xFF6
  9240                           tablat	equ	0xFF5
  9241                           prodh	equ	0xFF4
  9242                           prodl	equ	0xFF3
  9243                           intcon	equ	0xFF2
  9244                           intcon2	equ	0xFF1
  9245                           intcon3	equ	0xFF0
  9246                           postinc0	equ	0xFEE
  9247                           fsr0h	equ	0xFEA
  9248                           fsr0l	equ	0xFE9
  9249                           wreg	equ	0xFE8
  9250                           fsr1h	equ	0xFE2
  9251                           fsr1l	equ	0xFE1
  9252                           indf2	equ	0xFDF
  9253                           postinc2	equ	0xFDE
  9254                           postdec2	equ	0xFDD
  9255                           fsr2h	equ	0xFDA
  9256                           fsr2l	equ	0xFD9
  9257                           status	equ	0xFD8
  9258                           
  9259 ;; *************** function _dec_to_hex *****************
  9260 ;; Defined at:
  9261 ;;		line 319 in file "main.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;  num             2   98[COMRAM] int 
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;  quotient        2  112[COMRAM] int 
  9266 ;;  hexnum          2  110[COMRAM] int 
  9267 ;;  i               2  108[COMRAM] int 
  9268 ;;  temp            2  106[COMRAM] int 
  9269 ;; Return value:  Size  Location     Type
  9270 ;;                  2   98[COMRAM] int 
  9271 ;; Registers used:
  9272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9278 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;Total ram usage:       16 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; Hardware stack levels required when called:    5
  9285 ;; This function calls:
  9286 ;;		___awdiv
  9287 ;;		___awtoft
  9288 ;;		___ftadd
  9289 ;;		___ftmul
  9290 ;;		___fttol
  9291 ;;		_pow
  9292 ;; This function is called by:
  9293 ;;		_isr
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           	psect	text45
  9298  0015C0                     __ptext45:
  9299                           	opt stack 0
  9300  0015C0                     _dec_to_hex:
  9301                           	opt stack 20
  9302                           
  9303                           ;main.c: 320: int i = 0, quotient = num, temp, hexnum = 0;
  9304                           
  9305                           ;incstack = 0
  9306  0015C0  0E00               	movlw	0
  9307  0015C2  6E6E               	movwf	dec_to_hex@i+1,c
  9308  0015C4  0E00               	movlw	0
  9309  0015C6  6E6D               	movwf	dec_to_hex@i,c
  9310  0015C8  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  9311  0015CC  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  9312  0015D0  0E00               	movlw	0
  9313  0015D2  6E70               	movwf	dec_to_hex@hexnum+1,c
  9314  0015D4  0E00               	movlw	0
  9315  0015D6  6E6F               	movwf	dec_to_hex@hexnum,c
  9316                           
  9317                           ;main.c: 322: while (quotient != 0) {
  9318  0015D8  D068               	goto	i2l4128
  9319  0015DA                     i2l4116:
  9320                           
  9321                           ;main.c: 323: temp = quotient % 16;
  9322  0015DA  0E0F               	movlw	15
  9323  0015DC  1471               	andwf	dec_to_hex@quotient,w,c
  9324  0015DE  6E6B               	movwf	dec_to_hex@temp,c
  9325  0015E0  6A6C               	clrf	dec_to_hex@temp+1,c
  9326                           
  9327                           ;main.c: 325: hexnum += temp*pow(10,i);
  9328  0015E2  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  9329  0015E6  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  9330  0015EA  ECC0  F014         	call	___awtoft	;wreg free
  9331  0015EE  C009  F065         	movff	?___awtoft,_dec_to_hex$1244
  9332  0015F2  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1244+1
  9333  0015F6  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1244+2
  9334                           
  9335                           ;main.c: 325: hexnum += temp*pow(10,i);
  9336  0015FA  C065  F055         	movff	_dec_to_hex$1244,pow@y
  9337  0015FE  C066  F056         	movff	_dec_to_hex$1244+1,pow@y+1
  9338  001602  C067  F057         	movff	_dec_to_hex$1244+2,pow@y+2
  9339  001606  0E00               	movlw	0
  9340  001608  6E52               	movwf	pow@x,c
  9341  00160A  0E20               	movlw	32
  9342  00160C  6E53               	movwf	pow@x+1,c
  9343  00160E  0E41               	movlw	65
  9344  001610  6E54               	movwf	pow@x+2,c
  9345  001612  EC07  F009         	call	_pow	;wreg free
  9346  001616  C052  F068         	movff	?_pow,_dec_to_hex$1245
  9347  00161A  C053  F069         	movff	?_pow+1,_dec_to_hex$1245+1
  9348  00161E  C054  F06A         	movff	?_pow+2,_dec_to_hex$1245+2
  9349                           
  9350                           ;main.c: 325: hexnum += temp*pow(10,i);
  9351  001622  C068  F010         	movff	_dec_to_hex$1245,___ftmul@f2
  9352  001626  C069  F011         	movff	_dec_to_hex$1245+1,___ftmul@f2+1
  9353  00162A  C06A  F012         	movff	_dec_to_hex$1245+2,___ftmul@f2+2
  9354  00162E  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  9355  001632  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  9356  001636  ECC0  F014         	call	___awtoft	;wreg free
  9357  00163A  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9358  00163E  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9359  001642  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9360  001646  ECD8  F00B         	call	___ftmul	;wreg free
  9361  00164A  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  9362  00164E  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  9363  001652  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  9364  001656  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  9365  00165A  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  9366  00165E  ECC0  F014         	call	___awtoft	;wreg free
  9367  001662  C009  F01C         	movff	?___awtoft,___ftadd@f1
  9368  001666  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  9369  00166A  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  9370  00166E  EC65  F007         	call	___ftadd	;wreg free
  9371  001672  C01C  F028         	movff	?___ftadd,___fttol@f1
  9372  001676  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  9373  00167A  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  9374  00167E  EC5E  F00B         	call	___fttol	;wreg free
  9375  001682  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  9376  001686  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  9377                           
  9378                           ;main.c: 327: quotient = quotient / 16;
  9379  00168A  C071  F007         	movff	dec_to_hex@quotient,___awdiv@dividend
  9380  00168E  C072  F008         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  9381  001692  0E00               	movlw	0
  9382  001694  6E0A               	movwf	___awdiv@divisor+1,c
  9383  001696  0E10               	movlw	16
  9384  001698  6E09               	movwf	___awdiv@divisor,c
  9385  00169A  EC3B  F012         	call	___awdiv	;wreg free
  9386  00169E  C007  F071         	movff	?___awdiv,dec_to_hex@quotient
  9387  0016A2  C008  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  9388                           
  9389                           ;main.c: 328: i += 1;
  9390  0016A6  4A6D               	infsnz	dec_to_hex@i,f,c
  9391  0016A8  2A6E               	incf	dec_to_hex@i+1,f,c
  9392  0016AA                     i2l4128:
  9393  0016AA  5071               	movf	dec_to_hex@quotient,w,c
  9394  0016AC  1072               	iorwf	dec_to_hex@quotient+1,w,c
  9395  0016AE  A4D8               	btfss	status,2,c
  9396  0016B0  D794               	goto	i2l4116
  9397                           
  9398                           ;main.c: 329: }
  9399                           ;main.c: 330: return hexnum;
  9400  0016B2  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  9401  0016B6  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  9402  0016BA  0012               	return		;funcret
  9403  0016BC                     __end_of_dec_to_hex:
  9404                           	opt stack 0
  9405                           pclatu	equ	0xFFB
  9406                           pclath	equ	0xFFA
  9407                           tblptru	equ	0xFF8
  9408                           tblptrh	equ	0xFF7
  9409                           tblptrl	equ	0xFF6
  9410                           tablat	equ	0xFF5
  9411                           prodh	equ	0xFF4
  9412                           prodl	equ	0xFF3
  9413                           intcon	equ	0xFF2
  9414                           intcon2	equ	0xFF1
  9415                           intcon3	equ	0xFF0
  9416                           postinc0	equ	0xFEE
  9417                           fsr0h	equ	0xFEA
  9418                           fsr0l	equ	0xFE9
  9419                           wreg	equ	0xFE8
  9420                           fsr1h	equ	0xFE2
  9421                           fsr1l	equ	0xFE1
  9422                           indf2	equ	0xFDF
  9423                           postinc2	equ	0xFDE
  9424                           postdec2	equ	0xFDD
  9425                           fsr2h	equ	0xFDA
  9426                           fsr2l	equ	0xFD9
  9427                           status	equ	0xFD8
  9428                           
  9429 ;; *************** function _pow *****************
  9430 ;; Defined at:
  9431 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;  x               3   81[COMRAM] int 
  9434 ;;  y               3   84[COMRAM] int 
  9435 ;; Auto vars:     Size  Location     Type
  9436 ;;  yi              4   94[COMRAM] unsigned long 
  9437 ;;  sign            1   93[COMRAM] unsigned char 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  3   81[COMRAM] unsigned char 
  9440 ;; Registers used:
  9441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9447 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9448 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9450 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9451 ;;Total ram usage:       17 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    4
  9454 ;; This function calls:
  9455 ;;		___ftge
  9456 ;;		___ftmul
  9457 ;;		___ftneg
  9458 ;;		___fttol
  9459 ;;		___lltoft
  9460 ;;		_exp
  9461 ;;		_log
  9462 ;; This function is called by:
  9463 ;;		_dec_to_hex
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           	psect	text46
  9468  00120E                     __ptext46:
  9469                           	opt stack 0
  9470  00120E                     _pow:
  9471                           	opt stack 20
  9472                           
  9473                           ;incstack = 0
  9474  00120E  0E00               	movlw	0
  9475  001210  6E5E               	movwf	pow@sign,c
  9476  001212  5052               	movf	pow@x,w,c
  9477  001214  1053               	iorwf	pow@x+1,w,c
  9478  001216  1054               	iorwf	pow@x+2,w,c
  9479  001218  A4D8               	btfss	status,2,c
  9480  00121A  D01C               	goto	i2l3724
  9481  00121C  0E00               	movlw	0
  9482  00121E  6E01               	movwf	___ftge@ff1,c
  9483  001220  0E00               	movlw	0
  9484  001222  6E02               	movwf	___ftge@ff1+1,c
  9485  001224  0E00               	movlw	0
  9486  001226  6E03               	movwf	___ftge@ff1+2,c
  9487  001228  C055  F004         	movff	pow@y,___ftge@ff2
  9488  00122C  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  9489  001230  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  9490  001234  ECF3  F011         	call	___ftge	;wreg free
  9491  001238  A0D8               	btfss	status,0,c
  9492  00123A  D005               	goto	i2l918
  9493  00123C  0E00               	movlw	0
  9494  00123E  0100               	movlb	0	; () banked
  9495  001240  6FA8               	movwf	(_errno+1)& (0+255),b
  9496  001242  0E21               	movlw	33
  9497  001244  6FA7               	movwf	_errno& (0+255),b
  9498  001246                     i2l918:
  9499  001246  0E00               	movlw	0
  9500  001248  6E52               	movwf	?_pow,c
  9501  00124A  0E00               	movlw	0
  9502  00124C  6E53               	movwf	?_pow+1,c
  9503  00124E  0E00               	movlw	0
  9504  001250  6E54               	movwf	?_pow+2,c
  9505  001252  0012               	return	
  9506  001254                     i2l3724:
  9507  001254  5055               	movf	pow@y,w,c
  9508  001256  1056               	iorwf	pow@y+1,w,c
  9509  001258  1057               	iorwf	pow@y+2,w,c
  9510  00125A  A4D8               	btfss	status,2,c
  9511  00125C  D007               	goto	i2l3730
  9512  00125E  0E00               	movlw	0
  9513  001260  6E52               	movwf	?_pow,c
  9514  001262  0E80               	movlw	128
  9515  001264  6E53               	movwf	?_pow+1,c
  9516  001266  0E3F               	movlw	63
  9517  001268  6E54               	movwf	?_pow+2,c
  9518  00126A  0012               	return	
  9519  00126C                     i2l3730:
  9520  00126C  AE54               	btfss	pow@x+2,7,c
  9521  00126E  D041               	goto	i2l3742
  9522  001270  C055  F028         	movff	pow@y,___fttol@f1
  9523  001274  C056  F029         	movff	pow@y+1,___fttol@f1+1
  9524  001278  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  9525  00127C  EC5E  F00B         	call	___fttol	;wreg free
  9526  001280  C028  F05F         	movff	?___fttol,pow@yi
  9527  001284  C029  F060         	movff	?___fttol+1,pow@yi+1
  9528  001288  C02A  F061         	movff	?___fttol+2,pow@yi+2
  9529  00128C  C02B  F062         	movff	?___fttol+3,pow@yi+3
  9530  001290  C05F  F009         	movff	pow@yi,___lltoft@c
  9531  001294  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  9532  001298  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  9533  00129C  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  9534  0012A0  ECBA  F013         	call	___lltoft	;wreg free
  9535  0012A4  5055               	movf	pow@y,w,c
  9536  0012A6  1809               	xorwf	?___lltoft,w,c
  9537  0012A8  E107               	bnz	i2u344_40
  9538  0012AA  5056               	movf	pow@y+1,w,c
  9539  0012AC  180A               	xorwf	?___lltoft+1,w,c
  9540  0012AE  E104               	bnz	i2u344_40
  9541  0012B0  5057               	movf	pow@y+2,w,c
  9542  0012B2  180B               	xorwf	?___lltoft+2,w,c
  9543  0012B4  B4D8               	btfsc	status,2,c
  9544  0012B6  D00C               	goto	i2l3738
  9545  0012B8                     i2u344_40:
  9546  0012B8  0E00               	movlw	0
  9547  0012BA  0100               	movlb	0	; () banked
  9548  0012BC  6FA8               	movwf	(_errno+1)& (0+255),b
  9549  0012BE  0E21               	movlw	33
  9550  0012C0  6FA7               	movwf	_errno& (0+255),b
  9551  0012C2  0E00               	movlw	0
  9552  0012C4  6E52               	movwf	?_pow,c
  9553  0012C6  0E00               	movlw	0
  9554  0012C8  6E53               	movwf	?_pow+1,c
  9555  0012CA  0E00               	movlw	0
  9556  0012CC  6E54               	movwf	?_pow+2,c
  9557                           
  9558                           ; BSR set to: 0
  9559  0012CE  0012               	return	
  9560  0012D0                     i2l3738:
  9561  0012D0  505F               	movf	pow@yi,w,c
  9562  0012D2  0B01               	andlw	1
  9563  0012D4  6E5E               	movwf	pow@sign,c
  9564  0012D6  C052  F001         	movff	pow@x,___ftneg@f1
  9565  0012DA  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9566  0012DE  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9567  0012E2  EC99  F015         	call	___ftneg	;wreg free
  9568  0012E6  C001  F052         	movff	?___ftneg,pow@x
  9569  0012EA  C002  F053         	movff	?___ftneg+1,pow@x+1
  9570  0012EE  C003  F054         	movff	?___ftneg+2,pow@x+2
  9571  0012F2                     i2l3742:
  9572  0012F2  C052  F034         	movff	pow@x,log@x
  9573  0012F6  C053  F035         	movff	pow@x+1,log@x+1
  9574  0012FA  C054  F036         	movff	pow@x+2,log@x+2
  9575  0012FE  EC51  F00A         	call	_log	;wreg free
  9576  001302  C034  F058         	movff	?_log,_pow$1246
  9577  001306  C035  F059         	movff	?_log+1,_pow$1246+1
  9578  00130A  C036  F05A         	movff	?_log+2,_pow$1246+2
  9579  00130E  C058  F00D         	movff	_pow$1246,___ftmul@f1
  9580  001312  C059  F00E         	movff	_pow$1246+1,___ftmul@f1+1
  9581  001316  C05A  F00F         	movff	_pow$1246+2,___ftmul@f1+2
  9582  00131A  C055  F010         	movff	pow@y,___ftmul@f2
  9583  00131E  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  9584  001322  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  9585  001326  ECD8  F00B         	call	___ftmul	;wreg free
  9586  00132A  C00D  F05B         	movff	?___ftmul,_pow$1247
  9587  00132E  C00E  F05C         	movff	?___ftmul+1,_pow$1247+1
  9588  001332  C00F  F05D         	movff	?___ftmul+2,_pow$1247+2
  9589  001336  C05B  F049         	movff	_pow$1247,exp@x
  9590  00133A  C05C  F04A         	movff	_pow$1247+1,exp@x+1
  9591  00133E  C05D  F04B         	movff	_pow$1247+2,exp@x+2
  9592  001342  EC71  F006         	call	_exp	;wreg free
  9593  001346  C049  F052         	movff	?_exp,pow@x
  9594  00134A  C04A  F053         	movff	?_exp+1,pow@x+1
  9595  00134E  C04B  F054         	movff	?_exp+2,pow@x+2
  9596  001352  505E               	movf	pow@sign,w,c
  9597  001354  B4D8               	btfsc	status,2,c
  9598  001356  D00F               	goto	i2l923
  9599  001358  C052  F001         	movff	pow@x,___ftneg@f1
  9600  00135C  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9601  001360  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9602  001364  EC99  F015         	call	___ftneg	;wreg free
  9603  001368  C001  F052         	movff	?___ftneg,?_pow
  9604  00136C  C002  F053         	movff	?___ftneg+1,?_pow+1
  9605  001370  C003  F054         	movff	?___ftneg+2,?_pow+2
  9606  001374  0012               	return	
  9607  001376                     i2l923:
  9608  001376  C052  F052         	movff	pow@x,?_pow
  9609  00137A  C053  F053         	movff	pow@x+1,?_pow+1
  9610  00137E  C054  F054         	movff	pow@x+2,?_pow+2
  9611  001382  0012               	return		;funcret
  9612  001384                     __end_of_pow:
  9613                           	opt stack 0
  9614                           pclatu	equ	0xFFB
  9615                           pclath	equ	0xFFA
  9616                           tblptru	equ	0xFF8
  9617                           tblptrh	equ	0xFF7
  9618                           tblptrl	equ	0xFF6
  9619                           tablat	equ	0xFF5
  9620                           prodh	equ	0xFF4
  9621                           prodl	equ	0xFF3
  9622                           intcon	equ	0xFF2
  9623                           intcon2	equ	0xFF1
  9624                           intcon3	equ	0xFF0
  9625                           postinc0	equ	0xFEE
  9626                           fsr0h	equ	0xFEA
  9627                           fsr0l	equ	0xFE9
  9628                           wreg	equ	0xFE8
  9629                           fsr1h	equ	0xFE2
  9630                           fsr1l	equ	0xFE1
  9631                           indf2	equ	0xFDF
  9632                           postinc2	equ	0xFDE
  9633                           postdec2	equ	0xFDD
  9634                           fsr2h	equ	0xFDA
  9635                           fsr2l	equ	0xFD9
  9636                           status	equ	0xFD8
  9637                           
  9638 ;; *************** function _log *****************
  9639 ;; Defined at:
  9640 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;  x               3   51[COMRAM] unsigned char 
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;  exponent        2   54[COMRAM] int 
  9645 ;; Return value:  Size  Location     Type
  9646 ;;                  3   51[COMRAM] int 
  9647 ;; Registers used:
  9648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9654 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9657 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9658 ;;Total ram usage:        5 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; Hardware stack levels required when called:    3
  9661 ;; This function calls:
  9662 ;;		___awtoft
  9663 ;;		___ftadd
  9664 ;;		___ftmul
  9665 ;;		_eval_poly
  9666 ;;		_frexp
  9667 ;; This function is called by:
  9668 ;;		_pow
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           	psect	text47
  9673  0014A2                     __ptext47:
  9674                           	opt stack 0
  9675  0014A2                     _log:
  9676                           	opt stack 20
  9677                           
  9678                           ;incstack = 0
  9679  0014A2  AE36               	btfss	log@x+2,7,c
  9680  0014A4  D00C               	goto	i2l3470
  9681  0014A6  0E00               	movlw	0
  9682  0014A8  0100               	movlb	0	; () banked
  9683  0014AA  6FA8               	movwf	(_errno+1)& (0+255),b
  9684  0014AC  0E21               	movlw	33
  9685  0014AE  6FA7               	movwf	_errno& (0+255),b
  9686  0014B0  0E00               	movlw	0
  9687  0014B2  6E34               	movwf	?_log,c
  9688  0014B4  0E00               	movlw	0
  9689  0014B6  6E35               	movwf	?_log+1,c
  9690  0014B8  0E00               	movlw	0
  9691  0014BA  6E36               	movwf	?_log+2,c
  9692                           
  9693                           ; BSR set to: 0
  9694  0014BC  0012               	return	
  9695  0014BE                     i2l3470:
  9696  0014BE  5034               	movf	log@x,w,c
  9697  0014C0  1035               	iorwf	log@x+1,w,c
  9698  0014C2  1036               	iorwf	log@x+2,w,c
  9699  0014C4  A4D8               	btfss	status,2,c
  9700  0014C6  D00C               	goto	i2l3476
  9701  0014C8  0E00               	movlw	0
  9702  0014CA  0100               	movlb	0	; () banked
  9703  0014CC  6FA8               	movwf	(_errno+1)& (0+255),b
  9704  0014CE  0E22               	movlw	34
  9705  0014D0  6FA7               	movwf	_errno& (0+255),b
  9706  0014D2  0E00               	movlw	0
  9707  0014D4  6E34               	movwf	?_log,c
  9708  0014D6  0E00               	movlw	0
  9709  0014D8  6E35               	movwf	?_log+1,c
  9710  0014DA  0E00               	movlw	0
  9711  0014DC  6E36               	movwf	?_log+2,c
  9712                           
  9713                           ; BSR set to: 0
  9714  0014DE  0012               	return	
  9715  0014E0                     i2l3476:
  9716  0014E0  0E00               	movlw	0
  9717  0014E2  6E10               	movwf	___ftmul@f2,c
  9718  0014E4  0E00               	movlw	0
  9719  0014E6  6E11               	movwf	___ftmul@f2+1,c
  9720  0014E8  0E40               	movlw	64
  9721  0014EA  6E12               	movwf	___ftmul@f2+2,c
  9722  0014EC  0E37               	movlw	low log@exponent
  9723  0014EE  6E04               	movwf	frexp@eptr,c
  9724  0014F0  0E00               	movlw	high log@exponent
  9725  0014F2  6E05               	movwf	frexp@eptr+1,c
  9726  0014F4  C034  F001         	movff	log@x,frexp@value
  9727  0014F8  C035  F002         	movff	log@x+1,frexp@value+1
  9728  0014FC  C036  F003         	movff	log@x+2,frexp@value+2
  9729  001500  ECAB  F011         	call	_frexp	;wreg free
  9730  001504  C001  F00D         	movff	?_frexp,___ftmul@f1
  9731  001508  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  9732  00150C  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  9733  001510  ECD8  F00B         	call	___ftmul	;wreg free
  9734  001514  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9735  001518  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9736  00151C  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9737  001520  0E00               	movlw	0
  9738  001522  6E1F               	movwf	___ftadd@f2,c
  9739  001524  0E80               	movlw	128
  9740  001526  6E20               	movwf	___ftadd@f2+1,c
  9741  001528  0EBF               	movlw	191
  9742  00152A  6E21               	movwf	___ftadd@f2+2,c
  9743  00152C  EC65  F007         	call	___ftadd	;wreg free
  9744  001530  C01C  F034         	movff	?___ftadd,log@x
  9745  001534  C01D  F035         	movff	?___ftadd+1,log@x+1
  9746  001538  C01E  F036         	movff	?___ftadd+2,log@x+2
  9747  00153C  0637               	decf	log@exponent,f,c
  9748  00153E  A0D8               	btfss	status,0,c
  9749  001540  0638               	decf	log@exponent+1,f,c
  9750  001542  C034  F028         	movff	log@x,eval_poly@x
  9751  001546  C035  F029         	movff	log@x+1,eval_poly@x+1
  9752  00154A  C036  F02A         	movff	log@x+2,eval_poly@x+2
  9753  00154E  0E19               	movlw	low log@coeff
  9754  001550  6E2B               	movwf	eval_poly@d,c
  9755  001552  0EFE               	movlw	high log@coeff
  9756  001554  6E2C               	movwf	eval_poly@d+1,c
  9757  001556  0E00               	movlw	0
  9758  001558  6E2E               	movwf	eval_poly@n+1,c
  9759  00155A  0E08               	movlw	8
  9760  00155C  6E2D               	movwf	eval_poly@n,c
  9761  00155E  EC7F  F00E         	call	_eval_poly	;wreg free
  9762  001562  C028  F034         	movff	?_eval_poly,log@x
  9763  001566  C029  F035         	movff	?_eval_poly+1,log@x+1
  9764  00156A  C02A  F036         	movff	?_eval_poly+2,log@x+2
  9765  00156E  0E72               	movlw	114
  9766  001570  6E10               	movwf	___ftmul@f2,c
  9767  001572  0E31               	movlw	49
  9768  001574  6E11               	movwf	___ftmul@f2+1,c
  9769  001576  0E3F               	movlw	63
  9770  001578  6E12               	movwf	___ftmul@f2+2,c
  9771  00157A  C037  F009         	movff	log@exponent,___awtoft@c
  9772  00157E  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  9773  001582  ECC0  F014         	call	___awtoft	;wreg free
  9774  001586  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9775  00158A  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9776  00158E  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9777  001592  ECD8  F00B         	call	___ftmul	;wreg free
  9778  001596  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9779  00159A  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9780  00159E  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9781  0015A2  C034  F01F         	movff	log@x,___ftadd@f2
  9782  0015A6  C035  F020         	movff	log@x+1,___ftadd@f2+1
  9783  0015AA  C036  F021         	movff	log@x+2,___ftadd@f2+2
  9784  0015AE  EC65  F007         	call	___ftadd	;wreg free
  9785  0015B2  C01C  F034         	movff	?___ftadd,?_log
  9786  0015B6  C01D  F035         	movff	?___ftadd+1,?_log+1
  9787  0015BA  C01E  F036         	movff	?___ftadd+2,?_log+2
  9788  0015BE  0012               	return	
  9789  0015C0                     __end_of_log:
  9790                           	opt stack 0
  9791                           pclatu	equ	0xFFB
  9792                           pclath	equ	0xFFA
  9793                           tblptru	equ	0xFF8
  9794                           tblptrh	equ	0xFF7
  9795                           tblptrl	equ	0xFF6
  9796                           tablat	equ	0xFF5
  9797                           prodh	equ	0xFF4
  9798                           prodl	equ	0xFF3
  9799                           intcon	equ	0xFF2
  9800                           intcon2	equ	0xFF1
  9801                           intcon3	equ	0xFF0
  9802                           postinc0	equ	0xFEE
  9803                           fsr0h	equ	0xFEA
  9804                           fsr0l	equ	0xFE9
  9805                           wreg	equ	0xFE8
  9806                           fsr1h	equ	0xFE2
  9807                           fsr1l	equ	0xFE1
  9808                           indf2	equ	0xFDF
  9809                           postinc2	equ	0xFDE
  9810                           postdec2	equ	0xFDD
  9811                           fsr2h	equ	0xFDA
  9812                           fsr2l	equ	0xFD9
  9813                           status	equ	0xFD8
  9814                           
  9815 ;; *************** function _exp *****************
  9816 ;; Defined at:
  9817 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;  x               3   72[COMRAM] int 
  9820 ;; Auto vars:     Size  Location     Type
  9821 ;;  exponent        2   78[COMRAM] int 
  9822 ;;  sign            1   80[COMRAM] unsigned char 
  9823 ;; Return value:  Size  Location     Type
  9824 ;;                  3   72[COMRAM] unsigned char 
  9825 ;; Registers used:
  9826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9832 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9836 ;;Total ram usage:        9 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; Hardware stack levels required when called:    3
  9839 ;; This function calls:
  9840 ;;		___awtoft
  9841 ;;		___ftdiv
  9842 ;;		___ftge
  9843 ;;		___ftmul
  9844 ;;		___ftneg
  9845 ;;		___ftsub
  9846 ;;		___fttol
  9847 ;;		_eval_poly
  9848 ;;		_floor
  9849 ;;		_ldexp
  9850 ;; This function is called by:
  9851 ;;		_pow
  9852 ;; This function uses a non-reentrant model
  9853 ;;
  9854                           
  9855                           	psect	text48
  9856  000CE2                     __ptext48:
  9857                           	opt stack 0
  9858  000CE2                     _exp:
  9859                           	opt stack 20
  9860                           
  9861                           ;incstack = 0
  9862  000CE2  5049               	movf	exp@x,w,c
  9863  000CE4  104A               	iorwf	exp@x+1,w,c
  9864  000CE6  104B               	iorwf	exp@x+2,w,c
  9865  000CE8  A4D8               	btfss	status,2,c
  9866  000CEA  D007               	goto	i2l3492
  9867  000CEC  0E00               	movlw	0
  9868  000CEE  6E49               	movwf	?_exp,c
  9869  000CF0  0E80               	movlw	128
  9870  000CF2  6E4A               	movwf	?_exp+1,c
  9871  000CF4  0E3F               	movlw	63
  9872  000CF6  6E4B               	movwf	?_exp+2,c
  9873  000CF8  0012               	return	
  9874  000CFA                     i2l3492:
  9875  000CFA  0E72               	movlw	114
  9876  000CFC  6E01               	movwf	___ftge@ff1,c
  9877  000CFE  0E31               	movlw	49
  9878  000D00  6E02               	movwf	___ftge@ff1+1,c
  9879  000D02  0E44               	movlw	68
  9880  000D04  6E03               	movwf	___ftge@ff1+2,c
  9881  000D06  C049  F004         	movff	exp@x,___ftge@ff2
  9882  000D0A  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  9883  000D0E  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  9884  000D12  ECF3  F011         	call	___ftge	;wreg free
  9885  000D16  B0D8               	btfsc	status,0,c
  9886  000D18  D00C               	goto	i2l3498
  9887  000D1A  0E00               	movlw	0
  9888  000D1C  0100               	movlb	0	; () banked
  9889  000D1E  6FA8               	movwf	(_errno+1)& (0+255),b
  9890  000D20  0E22               	movlw	34
  9891  000D22  6FA7               	movwf	_errno& (0+255),b
  9892  000D24  0EFF               	movlw	255
  9893  000D26  6E49               	movwf	?_exp,c
  9894  000D28  0E7F               	movlw	127
  9895  000D2A  6E4A               	movwf	?_exp+1,c
  9896  000D2C  0E7F               	movlw	127
  9897  000D2E  6E4B               	movwf	?_exp+2,c
  9898                           
  9899                           ; BSR set to: 0
  9900  000D30  0012               	return	
  9901  000D32                     i2l3498:
  9902  000D32  C049  F001         	movff	exp@x,___ftge@ff1
  9903  000D36  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  9904  000D3A  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  9905  000D3E  0E49               	movlw	73
  9906  000D40  6E04               	movwf	___ftge@ff2,c
  9907  000D42  0E3A               	movlw	58
  9908  000D44  6E05               	movwf	___ftge@ff2+1,c
  9909  000D46  0EC4               	movlw	196
  9910  000D48  6E06               	movwf	___ftge@ff2+2,c
  9911  000D4A  ECF3  F011         	call	___ftge	;wreg free
  9912  000D4E  B0D8               	btfsc	status,0,c
  9913  000D50  D00C               	goto	i2l3504
  9914  000D52  0E00               	movlw	0
  9915  000D54  0100               	movlb	0	; () banked
  9916  000D56  6FA8               	movwf	(_errno+1)& (0+255),b
  9917  000D58  0E22               	movlw	34
  9918  000D5A  6FA7               	movwf	_errno& (0+255),b
  9919  000D5C  0E00               	movlw	0
  9920  000D5E  6E49               	movwf	?_exp,c
  9921  000D60  0E00               	movlw	0
  9922  000D62  6E4A               	movwf	?_exp+1,c
  9923  000D64  0E00               	movlw	0
  9924  000D66  6E4B               	movwf	?_exp+2,c
  9925                           
  9926                           ; BSR set to: 0
  9927  000D68  0012               	return	
  9928  000D6A                     i2l3504:
  9929  000D6A  AE4B               	btfss	exp@x+2,7,c
  9930  000D6C  D002               	goto	i2u308_40
  9931  000D6E  0E01               	movlw	1
  9932  000D70  D001               	goto	i2u309_40
  9933  000D72                     i2u308_40:
  9934  000D72  0E00               	movlw	0
  9935  000D74                     i2u309_40:
  9936  000D74  6E51               	movwf	exp@sign,c
  9937  000D76  5051               	movf	exp@sign,w,c
  9938  000D78  B4D8               	btfsc	status,2,c
  9939  000D7A  D00E               	goto	i2l1081
  9940  000D7C  C049  F001         	movff	exp@x,___ftneg@f1
  9941  000D80  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  9942  000D84  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  9943  000D88  EC99  F015         	call	___ftneg	;wreg free
  9944  000D8C  C001  F049         	movff	?___ftneg,exp@x
  9945  000D90  C002  F04A         	movff	?___ftneg+1,exp@x+1
  9946  000D94  C003  F04B         	movff	?___ftneg+2,exp@x+2
  9947  000D98                     i2l1081:
  9948  000D98  C049  F00D         	movff	exp@x,___ftmul@f1
  9949  000D9C  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  9950  000DA0  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  9951  000DA4  0EAA               	movlw	170
  9952  000DA6  6E10               	movwf	___ftmul@f2,c
  9953  000DA8  0EB8               	movlw	184
  9954  000DAA  6E11               	movwf	___ftmul@f2+1,c
  9955  000DAC  0E3F               	movlw	63
  9956  000DAE  6E12               	movwf	___ftmul@f2+2,c
  9957  000DB0  ECD8  F00B         	call	___ftmul	;wreg free
  9958  000DB4  C00D  F049         	movff	?___ftmul,exp@x
  9959  000DB8  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  9960  000DBC  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  9961  000DC0  C049  F041         	movff	exp@x,floor@x
  9962  000DC4  C04A  F042         	movff	exp@x+1,floor@x+1
  9963  000DC8  C04B  F043         	movff	exp@x+2,floor@x+2
  9964  000DCC  EC3A  F00D         	call	_floor	;wreg free
  9965  000DD0  C041  F04C         	movff	?_floor,_exp$1248
  9966  000DD4  C042  F04D         	movff	?_floor+1,_exp$1248+1
  9967  000DD8  C043  F04E         	movff	?_floor+2,_exp$1248+2
  9968  000DDC  C04C  F028         	movff	_exp$1248,___fttol@f1
  9969  000DE0  C04D  F029         	movff	_exp$1248+1,___fttol@f1+1
  9970  000DE4  C04E  F02A         	movff	_exp$1248+2,___fttol@f1+2
  9971  000DE8  EC5E  F00B         	call	___fttol	;wreg free
  9972  000DEC  C028  F04F         	movff	?___fttol,exp@exponent
  9973  000DF0  C029  F050         	movff	?___fttol+1,exp@exponent+1
  9974  000DF4  C049  F028         	movff	exp@x,___ftsub@f1
  9975  000DF8  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  9976  000DFC  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  9977  000E00  C04F  F009         	movff	exp@exponent,___awtoft@c
  9978  000E04  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  9979  000E08  ECC0  F014         	call	___awtoft	;wreg free
  9980  000E0C  C009  F02B         	movff	?___awtoft,___ftsub@f2
  9981  000E10  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  9982  000E14  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  9983  000E18  EC81  F014         	call	___ftsub	;wreg free
  9984  000E1C  C028  F049         	movff	?___ftsub,exp@x
  9985  000E20  C029  F04A         	movff	?___ftsub+1,exp@x+1
  9986  000E24  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  9987  000E28  C049  F028         	movff	exp@x,eval_poly@x
  9988  000E2C  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  9989  000E30  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  9990  000E34  0EFB               	movlw	low exp@coeff
  9991  000E36  6E2B               	movwf	eval_poly@d,c
  9992  000E38  0EFD               	movlw	high exp@coeff
  9993  000E3A  6E2C               	movwf	eval_poly@d+1,c
  9994  000E3C  0E00               	movlw	0
  9995  000E3E  6E2E               	movwf	eval_poly@n+1,c
  9996  000E40  0E09               	movlw	9
  9997  000E42  6E2D               	movwf	eval_poly@n,c
  9998  000E44  EC7F  F00E         	call	_eval_poly	;wreg free
  9999  000E48  C028  F034         	movff	?_eval_poly,ldexp@value
 10000  000E4C  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 10001  000E50  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 10002  000E54  C04F  F037         	movff	exp@exponent,ldexp@newexp
 10003  000E58  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 10004  000E5C  ECE8  F00E         	call	_ldexp	;wreg free
 10005  000E60  C034  F049         	movff	?_ldexp,exp@x
 10006  000E64  C035  F04A         	movff	?_ldexp+1,exp@x+1
 10007  000E68  C036  F04B         	movff	?_ldexp+2,exp@x+2
 10008  000E6C  5051               	movf	exp@sign,w,c
 10009  000E6E  B4D8               	btfsc	status,2,c
 10010  000E70  D025               	goto	i2l1082
 10011  000E72  2849               	incf	exp@x,w,c
 10012  000E74  E10E               	bnz	i2l3526
 10013  000E76  0E7F               	movlw	127
 10014  000E78  184A               	xorwf	exp@x+1,w,c
 10015  000E7A  E10B               	bnz	i2l3526
 10016  000E7C  0E7F               	movlw	127
 10017  000E7E  184B               	xorwf	exp@x+2,w,c
 10018  000E80  A4D8               	btfss	status,2,c
 10019  000E82  D007               	goto	i2l3526
 10020  000E84  0E00               	movlw	0
 10021  000E86  6E49               	movwf	?_exp,c
 10022  000E88  0E00               	movlw	0
 10023  000E8A  6E4A               	movwf	?_exp+1,c
 10024  000E8C  0E00               	movlw	0
 10025  000E8E  6E4B               	movwf	?_exp+2,c
 10026  000E90  0012               	return	
 10027  000E92                     i2l3526:
 10028  000E92  0E00               	movlw	0
 10029  000E94  6E09               	movwf	___ftdiv@f1,c
 10030  000E96  0E80               	movlw	128
 10031  000E98  6E0A               	movwf	___ftdiv@f1+1,c
 10032  000E9A  0E3F               	movlw	63
 10033  000E9C  6E0B               	movwf	___ftdiv@f1+2,c
 10034  000E9E  C049  F00C         	movff	exp@x,___ftdiv@f2
 10035  000EA2  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
 10036  000EA6  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
 10037  000EAA  ECC7  F00C         	call	___ftdiv	;wreg free
 10038  000EAE  C009  F049         	movff	?___ftdiv,?_exp
 10039  000EB2  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
 10040  000EB6  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
 10041  000EBA  0012               	return	
 10042  000EBC                     i2l1082:
 10043  000EBC  C049  F049         	movff	exp@x,?_exp
 10044  000EC0  C04A  F04A         	movff	exp@x+1,?_exp+1
 10045  000EC4  C04B  F04B         	movff	exp@x+2,?_exp+2
 10046  000EC8  0012               	return		;funcret
 10047  000ECA                     __end_of_exp:
 10048                           	opt stack 0
 10049                           pclatu	equ	0xFFB
 10050                           pclath	equ	0xFFA
 10051                           tblptru	equ	0xFF8
 10052                           tblptrh	equ	0xFF7
 10053                           tblptrl	equ	0xFF6
 10054                           tablat	equ	0xFF5
 10055                           prodh	equ	0xFF4
 10056                           prodl	equ	0xFF3
 10057                           intcon	equ	0xFF2
 10058                           intcon2	equ	0xFF1
 10059                           intcon3	equ	0xFF0
 10060                           postinc0	equ	0xFEE
 10061                           fsr0h	equ	0xFEA
 10062                           fsr0l	equ	0xFE9
 10063                           wreg	equ	0xFE8
 10064                           fsr1h	equ	0xFE2
 10065                           fsr1l	equ	0xFE1
 10066                           indf2	equ	0xFDF
 10067                           postinc2	equ	0xFDE
 10068                           postdec2	equ	0xFDD
 10069                           fsr2h	equ	0xFDA
 10070                           fsr2l	equ	0xFD9
 10071                           status	equ	0xFD8
 10072                           
 10073 ;; *************** function _ldexp *****************
 10074 ;; Defined at:
 10075 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10076 ;; Parameters:    Size  Location     Type
 10077 ;;  value           3   51[COMRAM] unsigned char 
 10078 ;;  newexp          2   54[COMRAM] int 
 10079 ;; Auto vars:     Size  Location     Type
 10080 ;;		None
 10081 ;; Return value:  Size  Location     Type
 10082 ;;                  3   51[COMRAM] int 
 10083 ;; Registers used:
 10084 ;;		wreg, status,2, status,0
 10085 ;; Tracked objects:
 10086 ;;		On entry : 0/0
 10087 ;;		On exit  : 0/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10090 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;Total ram usage:        7 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; This function calls:
 10097 ;;		Nothing
 10098 ;; This function is called by:
 10099 ;;		_exp
 10100 ;; This function uses a non-reentrant model
 10101 ;;
 10102                           
 10103                           	psect	text49
 10104  001DD0                     __ptext49:
 10105                           	opt stack 0
 10106  001DD0                     _ldexp:
 10107                           	opt stack 22
 10108                           
 10109                           ;incstack = 0
 10110  001DD0  5034               	movf	ldexp@value,w,c
 10111  001DD2  1035               	iorwf	ldexp@value+1,w,c
 10112  001DD4  1036               	iorwf	ldexp@value+2,w,c
 10113  001DD6  A4D8               	btfss	status,2,c
 10114  001DD8  D007               	goto	i2l3338
 10115  001DDA  0E00               	movlw	0
 10116  001DDC  6E34               	movwf	?_ldexp,c
 10117  001DDE  0E00               	movlw	0
 10118  001DE0  6E35               	movwf	?_ldexp+1,c
 10119  001DE2  0E00               	movlw	0
 10120  001DE4  6E36               	movwf	?_ldexp+2,c
 10121  001DE6  0012               	return	
 10122  001DE8                     i2l3338:
 10123  001DE8  5036               	movf	ldexp@value+2,w,c
 10124  001DEA  0B7F               	andlw	127
 10125  001DEC  6E39               	movwf	??_ldexp& (0+255),c
 10126  001DEE  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 10127  001DF0  90D8               	bcf	status,0,c
 10128  001DF2  3639               	rlcf	??_ldexp,f,c
 10129  001DF4  363A               	rlcf	??_ldexp+1,f,c
 10130  001DF6  5039               	movf	??_ldexp,w,c
 10131  001DF8  2637               	addwf	ldexp@newexp,f,c
 10132  001DFA  503A               	movf	??_ldexp+1,w,c
 10133  001DFC  2238               	addwfc	ldexp@newexp+1,f,c
 10134  001DFE  AE35               	btfss	ldexp@value+1,7,c
 10135  001E00  D003               	goto	i2u288_40
 10136  001E02  6A39               	clrf	??_ldexp& (0+255),c
 10137  001E04  2A39               	incf	??_ldexp& (0+255),f,c
 10138  001E06  D001               	goto	i2u288_48
 10139  001E08                     i2u288_40:
 10140  001E08  6A39               	clrf	??_ldexp& (0+255),c
 10141  001E0A                     i2u288_48:
 10142  001E0A  5039               	movf	??_ldexp,w,c
 10143  001E0C  2637               	addwf	ldexp@newexp,f,c
 10144  001E0E  0E00               	movlw	0
 10145  001E10  2238               	addwfc	ldexp@newexp+1,f,c
 10146  001E12  AE38               	btfss	ldexp@newexp+1,7,c
 10147  001E14  D00C               	goto	i2l3346
 10148  001E16  0E00               	movlw	0
 10149  001E18  0100               	movlb	0	; () banked
 10150  001E1A  6FA8               	movwf	(_errno+1)& (0+255),b
 10151  001E1C  0E22               	movlw	34
 10152  001E1E  6FA7               	movwf	_errno& (0+255),b
 10153  001E20  0E00               	movlw	0
 10154  001E22  6E34               	movwf	?_ldexp,c
 10155  001E24  0E00               	movlw	0
 10156  001E26  6E35               	movwf	?_ldexp+1,c
 10157  001E28  0E00               	movlw	0
 10158  001E2A                     L11:
 10159  001E2A  6E36               	movwf	?_ldexp+2,c
 10160                           
 10161                           ; BSR set to: 0
 10162  001E2C  0012               	return	
 10163  001E2E                     i2l3346:
 10164  001E2E  BE38               	btfsc	ldexp@newexp+1,7,c
 10165  001E30  D016               	goto	i2l3362
 10166  001E32  0438               	decf	ldexp@newexp+1,w,c
 10167  001E34  A0D8               	btfss	status,0,c
 10168  001E36  D013               	goto	i2l3362
 10169  001E38  0E00               	movlw	0
 10170  001E3A  0100               	movlb	0	; () banked
 10171  001E3C  6FA8               	movwf	(_errno+1)& (0+255),b
 10172  001E3E  0E22               	movlw	34
 10173  001E40  6FA7               	movwf	_errno& (0+255),b
 10174                           
 10175                           ; BSR set to: 0
 10176  001E42  AE36               	btfss	ldexp@value+2,7,c
 10177  001E44  D006               	goto	i2l3358
 10178                           
 10179                           ; BSR set to: 0
 10180  001E46  0EFF               	movlw	255
 10181  001E48  6E34               	movwf	?_ldexp,c
 10182  001E4A  0E7F               	movlw	127
 10183  001E4C  6E35               	movwf	?_ldexp+1,c
 10184  001E4E  0EFF               	movlw	255
 10185  001E50  D7EC               	goto	L11
 10186  001E52                     i2l3358:
 10187                           
 10188                           ; BSR set to: 0
 10189  001E52  0EFF               	movlw	255
 10190  001E54  6E34               	movwf	?_ldexp,c
 10191  001E56  0E7F               	movlw	127
 10192  001E58  6E35               	movwf	?_ldexp+1,c
 10193  001E5A  0E7F               	movlw	127
 10194  001E5C  D7E6               	goto	L11
 10195  001E5E                     i2l3362:
 10196  001E5E  3438               	rlcf	ldexp@newexp+1,w,c
 10197  001E60  3038               	rrcf	ldexp@newexp+1,w,c
 10198  001E62  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 10199  001E64  3037               	rrcf	ldexp@newexp,w,c
 10200  001E66  6E39               	movwf	??_ldexp& (0+255),c
 10201  001E68  5036               	movf	ldexp@value+2,w,c
 10202  001E6A  1839               	xorwf	??_ldexp,w,c
 10203  001E6C  0B80               	andlw	-128
 10204  001E6E  1839               	xorwf	??_ldexp,w,c
 10205  001E70  6E36               	movwf	ldexp@value+2,c
 10206  001E72  C037  F039         	movff	ldexp@newexp,??_ldexp
 10207  001E76  0E01               	movlw	1
 10208  001E78  1639               	andwf	??_ldexp,f,c
 10209  001E7A  3239               	rrcf	??_ldexp,f,c
 10210  001E7C  3239               	rrcf	??_ldexp,f,c
 10211  001E7E  5035               	movf	ldexp@value+1,w,c
 10212  001E80  1839               	xorwf	??_ldexp,w,c
 10213  001E82  0B7F               	andlw	-129
 10214  001E84  1839               	xorwf	??_ldexp,w,c
 10215  001E86  6E35               	movwf	ldexp@value+1,c
 10216  001E88  C034  F034         	movff	ldexp@value,?_ldexp
 10217  001E8C  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 10218  001E90  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 10219  001E94  0012               	return	
 10220  001E96                     __end_of_ldexp:
 10221                           	opt stack 0
 10222                           pclatu	equ	0xFFB
 10223                           pclath	equ	0xFFA
 10224                           tblptru	equ	0xFF8
 10225                           tblptrh	equ	0xFF7
 10226                           tblptrl	equ	0xFF6
 10227                           tablat	equ	0xFF5
 10228                           prodh	equ	0xFF4
 10229                           prodl	equ	0xFF3
 10230                           intcon	equ	0xFF2
 10231                           intcon2	equ	0xFF1
 10232                           intcon3	equ	0xFF0
 10233                           postinc0	equ	0xFEE
 10234                           fsr0h	equ	0xFEA
 10235                           fsr0l	equ	0xFE9
 10236                           wreg	equ	0xFE8
 10237                           fsr1h	equ	0xFE2
 10238                           fsr1l	equ	0xFE1
 10239                           indf2	equ	0xFDF
 10240                           postinc2	equ	0xFDE
 10241                           postdec2	equ	0xFDD
 10242                           fsr2h	equ	0xFDA
 10243                           fsr2l	equ	0xFD9
 10244                           status	equ	0xFD8
 10245                           
 10246 ;; *************** function _floor *****************
 10247 ;; Defined at:
 10248 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;  x               3   64[COMRAM] int 
 10251 ;; Auto vars:     Size  Location     Type
 10252 ;;  i               3   67[COMRAM] int 
 10253 ;;  expon           2   70[COMRAM] int 
 10254 ;; Return value:  Size  Location     Type
 10255 ;;                  3   64[COMRAM] int 
 10256 ;; Registers used:
 10257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10258 ;; Tracked objects:
 10259 ;;		On entry : 0/0
 10260 ;;		On exit  : 0/0
 10261 ;;		Unchanged: 0/0
 10262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10263 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10266 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10267 ;;Total ram usage:        8 bytes
 10268 ;; Hardware stack levels used:    1
 10269 ;; Hardware stack levels required when called:    2
 10270 ;; This function calls:
 10271 ;;		___altoft
 10272 ;;		___ftadd
 10273 ;;		___ftge
 10274 ;;		___fttol
 10275 ;;		_frexp
 10276 ;; This function is called by:
 10277 ;;		_exp
 10278 ;; This function uses a non-reentrant model
 10279 ;;
 10280                           
 10281                           	psect	text50
 10282  001A74                     __ptext50:
 10283                           	opt stack 0
 10284  001A74                     _floor:
 10285                           	opt stack 20
 10286                           
 10287                           ;incstack = 0
 10288  001A74  C041  F001         	movff	floor@x,frexp@value
 10289  001A78  C042  F002         	movff	floor@x+1,frexp@value+1
 10290  001A7C  C043  F003         	movff	floor@x+2,frexp@value+2
 10291  001A80  0E47               	movlw	low floor@expon
 10292  001A82  6E04               	movwf	frexp@eptr,c
 10293  001A84  0E00               	movlw	high floor@expon
 10294  001A86  6E05               	movwf	frexp@eptr+1,c
 10295  001A88  ECAB  F011         	call	_frexp	;wreg free
 10296  001A8C  AE48               	btfss	floor@expon+1,7,c
 10297  001A8E  D010               	goto	i2l3316
 10298  001A90  AE43               	btfss	floor@x+2,7,c
 10299  001A92  D007               	goto	i2l3312
 10300  001A94  0E00               	movlw	0
 10301  001A96  6E41               	movwf	?_floor,c
 10302  001A98  0E80               	movlw	128
 10303  001A9A  6E42               	movwf	?_floor+1,c
 10304  001A9C  0EBF               	movlw	191
 10305  001A9E  6E43               	movwf	?_floor+2,c
 10306  001AA0  0012               	return	
 10307  001AA2                     i2l3312:
 10308  001AA2  0E00               	movlw	0
 10309  001AA4  6E41               	movwf	?_floor,c
 10310  001AA6  0E00               	movlw	0
 10311  001AA8  6E42               	movwf	?_floor+1,c
 10312  001AAA  0E00               	movlw	0
 10313  001AAC  6E43               	movwf	?_floor+2,c
 10314  001AAE  0012               	return	
 10315  001AB0                     i2l3316:
 10316  001AB0  5048               	movf	floor@expon+1,w,c
 10317  001AB2  E104               	bnz	i2u284_40
 10318  001AB4  0E15               	movlw	21
 10319  001AB6  5C47               	subwf	floor@expon,w,c
 10320  001AB8  A0D8               	btfss	status,0,c
 10321  001ABA  D007               	goto	i2l3320
 10322  001ABC                     i2u284_40:
 10323  001ABC  C041  F041         	movff	floor@x,?_floor
 10324  001AC0  C042  F042         	movff	floor@x+1,?_floor+1
 10325  001AC4  C043  F043         	movff	floor@x+2,?_floor+2
 10326  001AC8  0012               	return	
 10327  001ACA                     i2l3320:
 10328  001ACA  C041  F028         	movff	floor@x,___fttol@f1
 10329  001ACE  C042  F029         	movff	floor@x+1,___fttol@f1+1
 10330  001AD2  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 10331  001AD6  EC5E  F00B         	call	___fttol	;wreg free
 10332  001ADA  C028  F037         	movff	?___fttol,___altoft@c
 10333  001ADE  C029  F038         	movff	?___fttol+1,___altoft@c+1
 10334  001AE2  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 10335  001AE6  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 10336  001AEA  ECB9  F012         	call	___altoft	;wreg free
 10337  001AEE  C037  F044         	movff	?___altoft,floor@i
 10338  001AF2  C038  F045         	movff	?___altoft+1,floor@i+1
 10339  001AF6  C039  F046         	movff	?___altoft+2,floor@i+2
 10340  001AFA  C041  F001         	movff	floor@x,___ftge@ff1
 10341  001AFE  C042  F002         	movff	floor@x+1,___ftge@ff1+1
 10342  001B02  C043  F003         	movff	floor@x+2,___ftge@ff1+2
 10343  001B06  C044  F004         	movff	floor@i,___ftge@ff2
 10344  001B0A  C045  F005         	movff	floor@i+1,___ftge@ff2+1
 10345  001B0E  C046  F006         	movff	floor@i+2,___ftge@ff2+2
 10346  001B12  ECF3  F011         	call	___ftge	;wreg free
 10347  001B16  B0D8               	btfsc	status,0,c
 10348  001B18  D015               	goto	i2l1092
 10349  001B1A  C044  F01C         	movff	floor@i,___ftadd@f1
 10350  001B1E  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 10351  001B22  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 10352  001B26  0E00               	movlw	0
 10353  001B28  6E1F               	movwf	___ftadd@f2,c
 10354  001B2A  0E80               	movlw	128
 10355  001B2C  6E20               	movwf	___ftadd@f2+1,c
 10356  001B2E  0EBF               	movlw	191
 10357  001B30  6E21               	movwf	___ftadd@f2+2,c
 10358  001B32  EC65  F007         	call	___ftadd	;wreg free
 10359  001B36  C01C  F041         	movff	?___ftadd,?_floor
 10360  001B3A  C01D  F042         	movff	?___ftadd+1,?_floor+1
 10361  001B3E  C01E  F043         	movff	?___ftadd+2,?_floor+2
 10362  001B42  0012               	return	
 10363  001B44                     i2l1092:
 10364  001B44  C044  F041         	movff	floor@i,?_floor
 10365  001B48  C045  F042         	movff	floor@i+1,?_floor+1
 10366  001B4C  C046  F043         	movff	floor@i+2,?_floor+2
 10367  001B50  0012               	return		;funcret
 10368  001B52                     __end_of_floor:
 10369                           	opt stack 0
 10370                           pclatu	equ	0xFFB
 10371                           pclath	equ	0xFFA
 10372                           tblptru	equ	0xFF8
 10373                           tblptrh	equ	0xFF7
 10374                           tblptrl	equ	0xFF6
 10375                           tablat	equ	0xFF5
 10376                           prodh	equ	0xFF4
 10377                           prodl	equ	0xFF3
 10378                           intcon	equ	0xFF2
 10379                           intcon2	equ	0xFF1
 10380                           intcon3	equ	0xFF0
 10381                           postinc0	equ	0xFEE
 10382                           fsr0h	equ	0xFEA
 10383                           fsr0l	equ	0xFE9
 10384                           wreg	equ	0xFE8
 10385                           fsr1h	equ	0xFE2
 10386                           fsr1l	equ	0xFE1
 10387                           indf2	equ	0xFDF
 10388                           postinc2	equ	0xFDE
 10389                           postdec2	equ	0xFDD
 10390                           fsr2h	equ	0xFDA
 10391                           fsr2l	equ	0xFD9
 10392                           status	equ	0xFD8
 10393                           
 10394 ;; *************** function _frexp *****************
 10395 ;; Defined at:
 10396 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;  value           3    0[COMRAM] int 
 10399 ;;  eptr            2    3[COMRAM] PTR int 
 10400 ;;		 -> log@exponent(2), floor@expon(2), 
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;		None
 10403 ;; Return value:  Size  Location     Type
 10404 ;;                  3    0[COMRAM] PTR int 
 10405 ;; Registers used:
 10406 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10407 ;; Tracked objects:
 10408 ;;		On entry : 0/0
 10409 ;;		On exit  : 0/0
 10410 ;;		Unchanged: 0/0
 10411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10412 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10415 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10416 ;;Total ram usage:        7 bytes
 10417 ;; Hardware stack levels used:    1
 10418 ;; This function calls:
 10419 ;;		Nothing
 10420 ;; This function is called by:
 10421 ;;		_floor
 10422 ;;		_log
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           	psect	text51
 10427  002356                     __ptext51:
 10428                           	opt stack 0
 10429  002356                     _frexp:
 10430                           	opt stack 22
 10431                           
 10432                           ;incstack = 0
 10433  002356  5001               	movf	frexp@value,w,c
 10434  002358  1002               	iorwf	frexp@value+1,w,c
 10435  00235A  1003               	iorwf	frexp@value+2,w,c
 10436  00235C  A4D8               	btfss	status,2,c
 10437  00235E  D00F               	goto	i2l3192
 10438  002360  C004  FFD9         	movff	frexp@eptr,fsr2l
 10439  002364  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10440  002368  0E00               	movlw	0
 10441  00236A  6EDE               	movwf	postinc2,c
 10442  00236C  0E00               	movlw	0
 10443  00236E  6EDD               	movwf	postdec2,c
 10444  002370  0E00               	movlw	0
 10445  002372  6E01               	movwf	?_frexp,c
 10446  002374  0E00               	movlw	0
 10447  002376  6E02               	movwf	?_frexp+1,c
 10448  002378  0E00               	movlw	0
 10449  00237A  6E03               	movwf	?_frexp+2,c
 10450  00237C  0012               	return	
 10451  00237E                     i2l3192:
 10452  00237E  5003               	movf	frexp@value+2,w,c
 10453  002380  0B7F               	andlw	127
 10454  002382  6E06               	movwf	??_frexp& (0+255),c
 10455  002384  6A07               	clrf	(??_frexp+1)& (0+255),c
 10456  002386  90D8               	bcf	status,0,c
 10457  002388  3606               	rlcf	??_frexp,f,c
 10458  00238A  3607               	rlcf	??_frexp+1,f,c
 10459  00238C  C004  FFD9         	movff	frexp@eptr,fsr2l
 10460  002390  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10461  002394  C006  FFDE         	movff	??_frexp,postinc2
 10462  002398  C007  FFDD         	movff	??_frexp+1,postdec2
 10463  00239C  AE02               	btfss	frexp@value+1,7,c
 10464  00239E  D003               	goto	i2u271_40
 10465  0023A0  6A06               	clrf	??_frexp& (0+255),c
 10466  0023A2  2A06               	incf	??_frexp& (0+255),f,c
 10467  0023A4  D001               	goto	i2u271_48
 10468  0023A6                     i2u271_40:
 10469  0023A6  6A06               	clrf	??_frexp& (0+255),c
 10470  0023A8                     i2u271_48:
 10471  0023A8  5006               	movf	??_frexp,w,c
 10472  0023AA  C004  FFD9         	movff	frexp@eptr,fsr2l
 10473  0023AE  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10474  0023B2  12DE               	iorwf	postinc2,f,c
 10475  0023B4  0E00               	movlw	0
 10476  0023B6  12DD               	iorwf	postdec2,f,c
 10477  0023B8  C004  FFD9         	movff	frexp@eptr,fsr2l
 10478  0023BC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10479  0023C0  0E82               	movlw	130
 10480  0023C2  26DE               	addwf	postinc2,f,c
 10481  0023C4  0EFF               	movlw	255
 10482  0023C6  22DD               	addwfc	postdec2,f,c
 10483  0023C8  8003               	bsf	frexp@value+2,0,c
 10484  0023CA  8203               	bsf	frexp@value+2,1,c
 10485  0023CC  8403               	bsf	frexp@value+2,2,c
 10486  0023CE  8603               	bsf	frexp@value+2,3,c
 10487  0023D0  8803               	bsf	frexp@value+2,4,c
 10488  0023D2  8A03               	bsf	frexp@value+2,5,c
 10489  0023D4  9C03               	bcf	frexp@value+2,6,c
 10490  0023D6  9E02               	bcf	frexp@value+1,7,c
 10491  0023D8  C001  F001         	movff	frexp@value,?_frexp
 10492  0023DC  C002  F002         	movff	frexp@value+1,?_frexp+1
 10493  0023E0  C003  F003         	movff	frexp@value+2,?_frexp+2
 10494  0023E4  0012               	return	
 10495  0023E6                     __end_of_frexp:
 10496                           	opt stack 0
 10497                           pclatu	equ	0xFFB
 10498                           pclath	equ	0xFFA
 10499                           tblptru	equ	0xFF8
 10500                           tblptrh	equ	0xFF7
 10501                           tblptrl	equ	0xFF6
 10502                           tablat	equ	0xFF5
 10503                           prodh	equ	0xFF4
 10504                           prodl	equ	0xFF3
 10505                           intcon	equ	0xFF2
 10506                           intcon2	equ	0xFF1
 10507                           intcon3	equ	0xFF0
 10508                           postinc0	equ	0xFEE
 10509                           fsr0h	equ	0xFEA
 10510                           fsr0l	equ	0xFE9
 10511                           wreg	equ	0xFE8
 10512                           fsr1h	equ	0xFE2
 10513                           fsr1l	equ	0xFE1
 10514                           indf2	equ	0xFDF
 10515                           postinc2	equ	0xFDE
 10516                           postdec2	equ	0xFDD
 10517                           fsr2h	equ	0xFDA
 10518                           fsr2l	equ	0xFD9
 10519                           status	equ	0xFD8
 10520                           
 10521 ;; *************** function ___fttol *****************
 10522 ;; Defined at:
 10523 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10524 ;; Parameters:    Size  Location     Type
 10525 ;;  f1              3   39[COMRAM] float 
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;  lval            4   49[COMRAM] unsigned long 
 10528 ;;  exp1            1   53[COMRAM] unsigned char 
 10529 ;;  sign1           1   48[COMRAM] unsigned char 
 10530 ;; Return value:  Size  Location     Type
 10531 ;;                  4   39[COMRAM] long 
 10532 ;; Registers used:
 10533 ;;		wreg, status,2, status,0
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10539 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;Total ram usage:       15 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; This function calls:
 10546 ;;		Nothing
 10547 ;; This function is called by:
 10548 ;;		_dec_to_hex
 10549 ;;		_pow
 10550 ;;		_exp
 10551 ;;		_floor
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           	psect	text52
 10556  0016BC                     __ptext52:
 10557                           	opt stack 0
 10558  0016BC                     ___fttol:
 10559                           	opt stack 21
 10560                           
 10561                           ;incstack = 0
 10562  0016BC  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 10563  0016C0  6A2D               	clrf	(??___fttol+1)& (0+255),c
 10564  0016C2  6A2E               	clrf	(??___fttol+2)& (0+255),c
 10565  0016C4  3429               	rlcf	___fttol@f1+1,w,c
 10566  0016C6  362C               	rlcf	??___fttol& (0+255),f,c
 10567  0016C8  E301               	bnc	u262_41
 10568  0016CA  802D               	bsf	(??___fttol+1)& (0+255),0,c
 10569  0016CC                     u262_41:
 10570  0016CC  502C               	movf	??___fttol,w,c
 10571  0016CE  6E36               	movwf	___fttol@exp1,c
 10572  0016D0  5036               	movf	___fttol@exp1,w,c
 10573  0016D2  A4D8               	btfss	status,2,c
 10574  0016D4  D009               	goto	i2l3144
 10575  0016D6  0E00               	movlw	0
 10576  0016D8  6E28               	movwf	?___fttol,c
 10577  0016DA  0E00               	movlw	0
 10578  0016DC  6E29               	movwf	?___fttol+1,c
 10579  0016DE  0E00               	movlw	0
 10580  0016E0  6E2A               	movwf	?___fttol+2,c
 10581  0016E2  0E00               	movlw	0
 10582  0016E4  6E2B               	movwf	?___fttol+3,c
 10583  0016E6  0012               	return	
 10584  0016E8                     i2l3144:
 10585  0016E8  0E17               	movlw	23
 10586  0016EA  6E2C               	movwf	??___fttol& (0+255),c
 10587  0016EC  C028  F02D         	movff	___fttol@f1,??___fttol+1
 10588  0016F0  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 10589  0016F4  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 10590  0016F8  282C               	incf	??___fttol,w,c
 10591  0016FA  6E30               	movwf	(??___fttol+4)& (0+255),c
 10592  0016FC  D004               	goto	i2u264_40
 10593  0016FE                     i2u264_45:
 10594  0016FE  90D8               	bcf	status,0,c
 10595  001700  322F               	rrcf	??___fttol+3,f,c
 10596  001702  322E               	rrcf	??___fttol+2,f,c
 10597  001704  322D               	rrcf	??___fttol+1,f,c
 10598  001706                     i2u264_40:
 10599  001706  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 10600  001708  D7FA               	goto	i2u264_45
 10601  00170A  502D               	movf	??___fttol+1,w,c
 10602  00170C  6E31               	movwf	___fttol@sign1,c
 10603  00170E  8E29               	bsf	___fttol@f1+1,7,c
 10604  001710  0EFF               	movlw	255
 10605  001712  1628               	andwf	___fttol@f1,f,c
 10606  001714  0EFF               	movlw	255
 10607  001716  1629               	andwf	___fttol@f1+1,f,c
 10608  001718  0E00               	movlw	0
 10609  00171A  162A               	andwf	___fttol@f1+2,f,c
 10610  00171C  5028               	movf	___fttol@f1,w,c
 10611  00171E  6E32               	movwf	___fttol@lval,c
 10612  001720  5029               	movf	___fttol@f1+1,w,c
 10613  001722  6E33               	movwf	___fttol@lval+1,c
 10614  001724  502A               	movf	___fttol@f1+2,w,c
 10615  001726  6E34               	movwf	___fttol@lval+2,c
 10616  001728  6A35               	clrf	___fttol@lval+3,c
 10617  00172A  0E8E               	movlw	142
 10618  00172C  5E36               	subwf	___fttol@exp1,f,c
 10619  00172E  AE36               	btfss	___fttol@exp1,7,c
 10620  001730  D016               	goto	i2l3166
 10621  001732  5036               	movf	___fttol@exp1,w,c
 10622  001734  0A80               	xorlw	128
 10623  001736  0F8F               	addlw	143
 10624  001738  B0D8               	btfsc	status,0,c
 10625  00173A  D009               	goto	i2l3162
 10626  00173C  0E00               	movlw	0
 10627  00173E  6E28               	movwf	?___fttol,c
 10628  001740  0E00               	movlw	0
 10629  001742  6E29               	movwf	?___fttol+1,c
 10630  001744  0E00               	movlw	0
 10631  001746  6E2A               	movwf	?___fttol+2,c
 10632  001748  0E00               	movlw	0
 10633  00174A  6E2B               	movwf	?___fttol+3,c
 10634  00174C  0012               	return	
 10635  00174E                     i2l3162:
 10636  00174E  90D8               	bcf	status,0,c
 10637  001750  3235               	rrcf	___fttol@lval+3,f,c
 10638  001752  3234               	rrcf	___fttol@lval+2,f,c
 10639  001754  3233               	rrcf	___fttol@lval+1,f,c
 10640  001756  3232               	rrcf	___fttol@lval,f,c
 10641  001758  3E36               	incfsz	___fttol@exp1,f,c
 10642  00175A  D7F9               	goto	i2l3162
 10643  00175C  D015               	goto	i2l3176
 10644  00175E                     i2l3166:
 10645  00175E  0E17               	movlw	23
 10646  001760  6436               	cpfsgt	___fttol@exp1,c
 10647  001762  D00F               	goto	i2l3174
 10648  001764  0E00               	movlw	0
 10649  001766  6E28               	movwf	?___fttol,c
 10650  001768  0E00               	movlw	0
 10651  00176A  6E29               	movwf	?___fttol+1,c
 10652  00176C  0E00               	movlw	0
 10653  00176E  6E2A               	movwf	?___fttol+2,c
 10654  001770  0E00               	movlw	0
 10655  001772  6E2B               	movwf	?___fttol+3,c
 10656  001774  0012               	return	
 10657  001776                     i2l3172:
 10658  001776  90D8               	bcf	status,0,c
 10659  001778  3632               	rlcf	___fttol@lval,f,c
 10660  00177A  3633               	rlcf	___fttol@lval+1,f,c
 10661  00177C  3634               	rlcf	___fttol@lval+2,f,c
 10662  00177E  3635               	rlcf	___fttol@lval+3,f,c
 10663  001780  0636               	decf	___fttol@exp1,f,c
 10664  001782                     i2l3174:
 10665  001782  5036               	movf	___fttol@exp1,w,c
 10666  001784  A4D8               	btfss	status,2,c
 10667  001786  D7F7               	goto	i2l3172
 10668  001788                     i2l3176:
 10669  001788  5031               	movf	___fttol@sign1,w,c
 10670  00178A  B4D8               	btfsc	status,2,c
 10671  00178C  D008               	goto	i2l3180
 10672  00178E  1E35               	comf	___fttol@lval+3,f,c
 10673  001790  1E34               	comf	___fttol@lval+2,f,c
 10674  001792  1E33               	comf	___fttol@lval+1,f,c
 10675  001794  6C32               	negf	___fttol@lval,c
 10676  001796  0E00               	movlw	0
 10677  001798  2233               	addwfc	___fttol@lval+1,f,c
 10678  00179A  2234               	addwfc	___fttol@lval+2,f,c
 10679  00179C  2235               	addwfc	___fttol@lval+3,f,c
 10680  00179E                     i2l3180:
 10681  00179E  C032  F028         	movff	___fttol@lval,?___fttol
 10682  0017A2  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 10683  0017A6  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 10684  0017AA  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 10685  0017AE  0012               	return	
 10686  0017B0                     __end_of___fttol:
 10687                           	opt stack 0
 10688                           pclatu	equ	0xFFB
 10689                           pclath	equ	0xFFA
 10690                           tblptru	equ	0xFF8
 10691                           tblptrh	equ	0xFF7
 10692                           tblptrl	equ	0xFF6
 10693                           tablat	equ	0xFF5
 10694                           prodh	equ	0xFF4
 10695                           prodl	equ	0xFF3
 10696                           intcon	equ	0xFF2
 10697                           intcon2	equ	0xFF1
 10698                           intcon3	equ	0xFF0
 10699                           postinc0	equ	0xFEE
 10700                           fsr0h	equ	0xFEA
 10701                           fsr0l	equ	0xFE9
 10702                           wreg	equ	0xFE8
 10703                           fsr1h	equ	0xFE2
 10704                           fsr1l	equ	0xFE1
 10705                           indf2	equ	0xFDF
 10706                           postinc2	equ	0xFDE
 10707                           postdec2	equ	0xFDD
 10708                           fsr2h	equ	0xFDA
 10709                           fsr2l	equ	0xFD9
 10710                           status	equ	0xFD8
 10711                           
 10712 ;; *************** function ___ftge *****************
 10713 ;; Defined at:
 10714 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10715 ;; Parameters:    Size  Location     Type
 10716 ;;  ff1             3    0[COMRAM] float 
 10717 ;;  ff2             3    3[COMRAM] float 
 10718 ;; Auto vars:     Size  Location     Type
 10719 ;;		None
 10720 ;; Return value:  Size  Location     Type
 10721 ;;		None               void
 10722 ;; Registers used:
 10723 ;;		wreg, status,2, status,0
 10724 ;; Tracked objects:
 10725 ;;		On entry : 0/0
 10726 ;;		On exit  : 0/0
 10727 ;;		Unchanged: 0/0
 10728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10729 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10731 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10732 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10733 ;;Total ram usage:        9 bytes
 10734 ;; Hardware stack levels used:    1
 10735 ;; This function calls:
 10736 ;;		Nothing
 10737 ;; This function is called by:
 10738 ;;		_pow
 10739 ;;		_exp
 10740 ;;		_floor
 10741 ;; This function uses a non-reentrant model
 10742 ;;
 10743                           
 10744                           	psect	text53
 10745  0023E6                     __ptext53:
 10746                           	opt stack 0
 10747  0023E6                     ___ftge:
 10748                           	opt stack 21
 10749                           
 10750                           ;incstack = 0
 10751  0023E6  AE03               	btfss	___ftge@ff1+2,7,c
 10752  0023E8  D016               	goto	i2l3124
 10753  0023EA  C001  F007         	movff	___ftge@ff1,??___ftge
 10754  0023EE  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 10755  0023F2  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 10756  0023F6  1E07               	comf	??___ftge,f,c
 10757  0023F8  1E08               	comf	??___ftge+1,f,c
 10758  0023FA  1E09               	comf	??___ftge+2,f,c
 10759  0023FC  2A07               	incf	??___ftge,f,c
 10760  0023FE  0E00               	movlw	0
 10761  002400  2208               	addwfc	??___ftge+1,f,c
 10762  002402  2209               	addwfc	??___ftge+2,f,c
 10763  002404  0E00               	movlw	0
 10764  002406  2407               	addwf	??___ftge,w,c
 10765  002408  6E01               	movwf	___ftge@ff1,c
 10766  00240A  0E00               	movlw	0
 10767  00240C  2008               	addwfc	??___ftge+1,w,c
 10768  00240E  6E02               	movwf	___ftge@ff1+1,c
 10769  002410  0E80               	movlw	128
 10770  002412  2009               	addwfc	??___ftge+2,w,c
 10771  002414  6E03               	movwf	___ftge@ff1+2,c
 10772  002416                     i2l3124:
 10773  002416  AE06               	btfss	___ftge@ff2+2,7,c
 10774  002418  D016               	goto	i2l3128
 10775  00241A  C004  F007         	movff	___ftge@ff2,??___ftge
 10776  00241E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 10777  002422  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 10778  002426  1E07               	comf	??___ftge,f,c
 10779  002428  1E08               	comf	??___ftge+1,f,c
 10780  00242A  1E09               	comf	??___ftge+2,f,c
 10781  00242C  2A07               	incf	??___ftge,f,c
 10782  00242E  0E00               	movlw	0
 10783  002430  2208               	addwfc	??___ftge+1,f,c
 10784  002432  2209               	addwfc	??___ftge+2,f,c
 10785  002434  0E00               	movlw	0
 10786  002436  2407               	addwf	??___ftge,w,c
 10787  002438  6E04               	movwf	___ftge@ff2,c
 10788  00243A  0E00               	movlw	0
 10789  00243C  2008               	addwfc	??___ftge+1,w,c
 10790  00243E  6E05               	movwf	___ftge@ff2+1,c
 10791  002440  0E80               	movlw	128
 10792  002442  2009               	addwfc	??___ftge+2,w,c
 10793  002444  6E06               	movwf	___ftge@ff2+2,c
 10794  002446                     i2l3128:
 10795  002446  0E00               	movlw	0
 10796  002448  1A01               	xorwf	___ftge@ff1,f,c
 10797  00244A  0E00               	movlw	0
 10798  00244C  1A02               	xorwf	___ftge@ff1+1,f,c
 10799  00244E  0E80               	movlw	128
 10800  002450  1A03               	xorwf	___ftge@ff1+2,f,c
 10801  002452  0E00               	movlw	0
 10802  002454  1A04               	xorwf	___ftge@ff2,f,c
 10803  002456  0E00               	movlw	0
 10804  002458  1A05               	xorwf	___ftge@ff2+1,f,c
 10805  00245A  0E80               	movlw	128
 10806  00245C  1A06               	xorwf	___ftge@ff2+2,f,c
 10807  00245E  5004               	movf	___ftge@ff2,w,c
 10808  002460  5C01               	subwf	___ftge@ff1,w,c
 10809  002462  5005               	movf	___ftge@ff2+1,w,c
 10810  002464  5802               	subwfb	___ftge@ff1+1,w,c
 10811  002466  5006               	movf	___ftge@ff2+2,w,c
 10812  002468  5803               	subwfb	___ftge@ff1+2,w,c
 10813  00246A  B0D8               	btfsc	status,0,c
 10814  00246C  D002               	goto	i2l3134
 10815  00246E  90D8               	bcf	status,0,c
 10816  002470  0012               	return	
 10817  002472                     i2l3134:
 10818  002472  80D8               	bsf	status,0,c
 10819  002474  0012               	return	
 10820  002476                     __end_of___ftge:
 10821                           	opt stack 0
 10822                           pclatu	equ	0xFFB
 10823                           pclath	equ	0xFFA
 10824                           tblptru	equ	0xFF8
 10825                           tblptrh	equ	0xFF7
 10826                           tblptrl	equ	0xFF6
 10827                           tablat	equ	0xFF5
 10828                           prodh	equ	0xFF4
 10829                           prodl	equ	0xFF3
 10830                           intcon	equ	0xFF2
 10831                           intcon2	equ	0xFF1
 10832                           intcon3	equ	0xFF0
 10833                           postinc0	equ	0xFEE
 10834                           fsr0h	equ	0xFEA
 10835                           fsr0l	equ	0xFE9
 10836                           wreg	equ	0xFE8
 10837                           fsr1h	equ	0xFE2
 10838                           fsr1l	equ	0xFE1
 10839                           indf2	equ	0xFDF
 10840                           postinc2	equ	0xFDE
 10841                           postdec2	equ	0xFDD
 10842                           fsr2h	equ	0xFDA
 10843                           fsr2l	equ	0xFD9
 10844                           status	equ	0xFD8
 10845                           
 10846 ;; *************** function ___altoft *****************
 10847 ;; Defined at:
 10848 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;  c               4   54[COMRAM] long 
 10851 ;; Auto vars:     Size  Location     Type
 10852 ;;  sign            1   63[COMRAM] unsigned char 
 10853 ;;  exp             1   62[COMRAM] unsigned char 
 10854 ;; Return value:  Size  Location     Type
 10855 ;;                  3   54[COMRAM] float 
 10856 ;; Registers used:
 10857 ;;		wreg, status,2, status,0, cstack
 10858 ;; Tracked objects:
 10859 ;;		On entry : 0/0
 10860 ;;		On exit  : 0/0
 10861 ;;		Unchanged: 0/0
 10862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10863 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10864 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10865 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;Total ram usage:       10 bytes
 10868 ;; Hardware stack levels used:    1
 10869 ;; Hardware stack levels required when called:    1
 10870 ;; This function calls:
 10871 ;;		___ftpack
 10872 ;; This function is called by:
 10873 ;;		_floor
 10874 ;; This function uses a non-reentrant model
 10875 ;;
 10876                           
 10877                           	psect	text54
 10878  002572                     __ptext54:
 10879                           	opt stack 0
 10880  002572                     ___altoft:
 10881                           	opt stack 20
 10882                           
 10883                           ;incstack = 0
 10884  002572  0E00               	movlw	0
 10885  002574  6E40               	movwf	___altoft@sign,c
 10886  002576  0E8E               	movlw	142
 10887  002578  6E3F               	movwf	___altoft@exp,c
 10888  00257A  AE3A               	btfss	___altoft@c+3,7,c
 10889  00257C  D011               	goto	i2l2996
 10890  00257E  1E3A               	comf	___altoft@c+3,f,c
 10891  002580  1E39               	comf	___altoft@c+2,f,c
 10892  002582  1E38               	comf	___altoft@c+1,f,c
 10893  002584  6C37               	negf	___altoft@c,c
 10894  002586  0E00               	movlw	0
 10895  002588  2238               	addwfc	___altoft@c+1,f,c
 10896  00258A  2239               	addwfc	___altoft@c+2,f,c
 10897  00258C  223A               	addwfc	___altoft@c+3,f,c
 10898  00258E  0E01               	movlw	1
 10899  002590  6E40               	movwf	___altoft@sign,c
 10900  002592  D006               	goto	i2l2996
 10901  002594                     i2l2994:
 10902  002594  90D8               	bcf	status,0,c
 10903  002596  323A               	rrcf	___altoft@c+3,f,c
 10904  002598  3239               	rrcf	___altoft@c+2,f,c
 10905  00259A  3238               	rrcf	___altoft@c+1,f,c
 10906  00259C  3237               	rrcf	___altoft@c,f,c
 10907  00259E  2A3F               	incf	___altoft@exp,f,c
 10908  0025A0                     i2l2996:
 10909  0025A0  0E00               	movlw	0
 10910  0025A2  1437               	andwf	___altoft@c,w,c
 10911  0025A4  6E3B               	movwf	??___altoft& (0+255),c
 10912  0025A6  0E00               	movlw	0
 10913  0025A8  1438               	andwf	___altoft@c+1,w,c
 10914  0025AA  6E3C               	movwf	(??___altoft+1)& (0+255),c
 10915  0025AC  0E00               	movlw	0
 10916  0025AE  1439               	andwf	___altoft@c+2,w,c
 10917  0025B0  6E3D               	movwf	(??___altoft+2)& (0+255),c
 10918  0025B2  0EFF               	movlw	255
 10919  0025B4  143A               	andwf	___altoft@c+3,w,c
 10920  0025B6  6E3E               	movwf	(??___altoft+3)& (0+255),c
 10921  0025B8  503B               	movf	??___altoft,w,c
 10922  0025BA  103C               	iorwf	??___altoft+1,w,c
 10923  0025BC  103D               	iorwf	??___altoft+2,w,c
 10924  0025BE  103E               	iorwf	??___altoft+3,w,c
 10925  0025C0  A4D8               	btfss	status,2,c
 10926  0025C2  D7E8               	goto	i2l2994
 10927  0025C4  C037  F001         	movff	___altoft@c,___ftpack@arg
 10928  0025C8  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 10929  0025CC  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 10930  0025D0  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 10931  0025D4  C040  F005         	movff	___altoft@sign,___ftpack@sign
 10932  0025D8  EC01  F010         	call	___ftpack	;wreg free
 10933  0025DC  C001  F037         	movff	?___ftpack,?___altoft
 10934  0025E0  C002  F038         	movff	?___ftpack+1,?___altoft+1
 10935  0025E4  C003  F039         	movff	?___ftpack+2,?___altoft+2
 10936  0025E8  0012               	return	
 10937  0025EA                     __end_of___altoft:
 10938                           	opt stack 0
 10939                           pclatu	equ	0xFFB
 10940                           pclath	equ	0xFFA
 10941                           tblptru	equ	0xFF8
 10942                           tblptrh	equ	0xFF7
 10943                           tblptrl	equ	0xFF6
 10944                           tablat	equ	0xFF5
 10945                           prodh	equ	0xFF4
 10946                           prodl	equ	0xFF3
 10947                           intcon	equ	0xFF2
 10948                           intcon2	equ	0xFF1
 10949                           intcon3	equ	0xFF0
 10950                           postinc0	equ	0xFEE
 10951                           fsr0h	equ	0xFEA
 10952                           fsr0l	equ	0xFE9
 10953                           wreg	equ	0xFE8
 10954                           fsr1h	equ	0xFE2
 10955                           fsr1l	equ	0xFE1
 10956                           indf2	equ	0xFDF
 10957                           postinc2	equ	0xFDE
 10958                           postdec2	equ	0xFDD
 10959                           fsr2h	equ	0xFDA
 10960                           fsr2l	equ	0xFD9
 10961                           status	equ	0xFD8
 10962                           
 10963 ;; *************** function _eval_poly *****************
 10964 ;; Defined at:
 10965 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;  x               3   39[COMRAM] float 
 10968 ;;  d               2   42[COMRAM] PTR const 
 10969 ;;		 -> log@coeff(27), exp@coeff(30), 
 10970 ;;  n               2   44[COMRAM] int 
 10971 ;; Auto vars:     Size  Location     Type
 10972 ;;  res             3   48[COMRAM] int 
 10973 ;; Return value:  Size  Location     Type
 10974 ;;                  3   39[COMRAM] int 
 10975 ;; Registers used:
 10976 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10977 ;; Tracked objects:
 10978 ;;		On entry : 0/0
 10979 ;;		On exit  : 0/0
 10980 ;;		Unchanged: 0/0
 10981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10982 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10986 ;;Total ram usage:       12 bytes
 10987 ;; Hardware stack levels used:    1
 10988 ;; Hardware stack levels required when called:    2
 10989 ;; This function calls:
 10990 ;;		___ftadd
 10991 ;;		___ftmul
 10992 ;;		i2___wmul
 10993 ;; This function is called by:
 10994 ;;		_exp
 10995 ;;		_log
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           	psect	text55
 11000  001CFE                     __ptext55:
 11001                           	opt stack 0
 11002  001CFE                     _eval_poly:
 11003                           	opt stack 20
 11004                           
 11005                           ;incstack = 0
 11006  001CFE  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11007  001D02  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11008  001D06  0E00               	movlw	0
 11009  001D08  6E04               	movwf	i2___wmul@multiplicand+1,c
 11010  001D0A  0E03               	movlw	3
 11011  001D0C  6E03               	movwf	i2___wmul@multiplicand,c
 11012  001D0E  EC86  F015         	call	i2___wmul	;wreg free
 11013  001D12  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11014  001D16  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11015  001D1A  5001               	movf	?i2___wmul,w,c
 11016  001D1C  262F               	addwf	??_eval_poly,f,c
 11017  001D1E  5002               	movf	?i2___wmul+1,w,c
 11018  001D20  2230               	addwfc	??_eval_poly+1,f,c
 11019  001D22  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11020  001D26  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11021  001D2A                     	if	0	;tblptru may be non-zero
 11022  001D2A                     	endif
 11023  001D2A                     	if	0	;tblptru may be non-zero
 11024  001D2A                     	endif
 11025  001D2A  0009               	tblrd		*+
 11026  001D2C  CFF5 F031          	movff	tablat,eval_poly@res
 11027  001D30  0009               	tblrd		*+
 11028  001D32  CFF5 F032          	movff	tablat,eval_poly@res+1
 11029  001D36  000A               	tblrd		*-
 11030  001D38  CFF5 F033          	movff	tablat,eval_poly@res+2
 11031  001D3C  D03E               	goto	i2l3330
 11032  001D3E                     i2l3328:
 11033  001D3E  C031  F010         	movff	eval_poly@res,___ftmul@f2
 11034  001D42  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 11035  001D46  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 11036  001D4A  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 11037  001D4E  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 11038  001D52  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 11039  001D56  ECD8  F00B         	call	___ftmul	;wreg free
 11040  001D5A  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 11041  001D5E  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 11042  001D62  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 11043  001D66  0E00               	movlw	0
 11044  001D68  6E04               	movwf	i2___wmul@multiplicand+1,c
 11045  001D6A  0E03               	movlw	3
 11046  001D6C  6E03               	movwf	i2___wmul@multiplicand,c
 11047  001D6E  062D               	decf	eval_poly@n,f,c
 11048  001D70  A0D8               	btfss	status,0,c
 11049  001D72  062E               	decf	eval_poly@n+1,f,c
 11050  001D74  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11051  001D78  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11052  001D7C  EC86  F015         	call	i2___wmul	;wreg free
 11053  001D80  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11054  001D84  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11055  001D88  5001               	movf	?i2___wmul,w,c
 11056  001D8A  262F               	addwf	??_eval_poly,f,c
 11057  001D8C  5002               	movf	?i2___wmul+1,w,c
 11058  001D8E  2230               	addwfc	??_eval_poly+1,f,c
 11059  001D90  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11060  001D94  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11061  001D98                     	if	0	;tblptru may be non-zero
 11062  001D98                     	endif
 11063  001D98                     	if	0	;tblptru may be non-zero
 11064  001D98                     	endif
 11065  001D98  0009               	tblrd		*+
 11066  001D9A  CFF5 F01F          	movff	tablat,___ftadd@f2
 11067  001D9E  0009               	tblrd		*+
 11068  001DA0  CFF5 F020          	movff	tablat,___ftadd@f2+1
 11069  001DA4  000A               	tblrd		*-
 11070  001DA6  CFF5 F021          	movff	tablat,___ftadd@f2+2
 11071  001DAA  EC65  F007         	call	___ftadd	;wreg free
 11072  001DAE  C01C  F031         	movff	?___ftadd,eval_poly@res
 11073  001DB2  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 11074  001DB6  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 11075  001DBA                     i2l3330:
 11076  001DBA  502D               	movf	eval_poly@n,w,c
 11077  001DBC  102E               	iorwf	eval_poly@n+1,w,c
 11078  001DBE  A4D8               	btfss	status,2,c
 11079  001DC0  D7BE               	goto	i2l3328
 11080  001DC2  C031  F028         	movff	eval_poly@res,?_eval_poly
 11081  001DC6  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 11082  001DCA  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 11083  001DCE  0012               	return		;funcret
 11084  001DD0                     __end_of_eval_poly:
 11085                           	opt stack 0
 11086                           pclatu	equ	0xFFB
 11087                           pclath	equ	0xFFA
 11088                           tblptru	equ	0xFF8
 11089                           tblptrh	equ	0xFF7
 11090                           tblptrl	equ	0xFF6
 11091                           tablat	equ	0xFF5
 11092                           prodh	equ	0xFF4
 11093                           prodl	equ	0xFF3
 11094                           intcon	equ	0xFF2
 11095                           intcon2	equ	0xFF1
 11096                           intcon3	equ	0xFF0
 11097                           postinc0	equ	0xFEE
 11098                           fsr0h	equ	0xFEA
 11099                           fsr0l	equ	0xFE9
 11100                           wreg	equ	0xFE8
 11101                           fsr1h	equ	0xFE2
 11102                           fsr1l	equ	0xFE1
 11103                           indf2	equ	0xFDF
 11104                           postinc2	equ	0xFDE
 11105                           postdec2	equ	0xFDD
 11106                           fsr2h	equ	0xFDA
 11107                           fsr2l	equ	0xFD9
 11108                           status	equ	0xFD8
 11109                           
 11110 ;; *************** function i2___wmul *****************
 11111 ;; Defined at:
 11112 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11113 ;; Parameters:    Size  Location     Type
 11114 ;;  multiplier      2    0[COMRAM] unsigned int 
 11115 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;  __wmul          2    4[COMRAM] unsigned int 
 11118 ;; Return value:  Size  Location     Type
 11119 ;;                  2    0[COMRAM] unsigned int 
 11120 ;; Registers used:
 11121 ;;		wreg, status,2, status,0, prodl, prodh
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11127 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11130 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11131 ;;Total ram usage:        6 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; This function calls:
 11134 ;;		Nothing
 11135 ;; This function is called by:
 11136 ;;		_isr
 11137 ;;		_servo_rotate0
 11138 ;;		_servo_rotate1
 11139 ;;		_servo_rotate2
 11140 ;;		_eval_poly
 11141 ;;		i2_printf
 11142 ;; This function uses a non-reentrant model
 11143 ;;
 11144                           
 11145                           	psect	text56
 11146  002B0C                     __ptext56:
 11147                           	opt stack 0
 11148  002B0C                     i2___wmul:
 11149                           	opt stack 24
 11150                           
 11151                           ;incstack = 0
 11152  002B0C  5001               	movf	i2___wmul@multiplier,w,c
 11153  002B0E  0203               	mulwf	i2___wmul@multiplicand,c
 11154  002B10  CFF3 F005          	movff	prodl,i2___wmul@product
 11155  002B14  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11156  002B18  5001               	movf	i2___wmul@multiplier,w,c
 11157  002B1A  0204               	mulwf	i2___wmul@multiplicand+1,c
 11158  002B1C  50F3               	movf	prodl,w,c
 11159  002B1E  2606               	addwf	i2___wmul@product+1,f,c
 11160  002B20  5002               	movf	i2___wmul@multiplier+1,w,c
 11161  002B22  0203               	mulwf	i2___wmul@multiplicand,c
 11162  002B24  50F3               	movf	prodl,w,c
 11163  002B26  2606               	addwf	i2___wmul@product+1,f,c
 11164  002B28  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11165  002B2C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11166  002B30  0012               	return	
 11167  002B32                     __end_ofi2___wmul:
 11168                           	opt stack 0
 11169                           pclatu	equ	0xFFB
 11170                           pclath	equ	0xFFA
 11171                           tblptru	equ	0xFF8
 11172                           tblptrh	equ	0xFF7
 11173                           tblptrl	equ	0xFF6
 11174                           tablat	equ	0xFF5
 11175                           prodh	equ	0xFF4
 11176                           prodl	equ	0xFF3
 11177                           intcon	equ	0xFF2
 11178                           intcon2	equ	0xFF1
 11179                           intcon3	equ	0xFF0
 11180                           postinc0	equ	0xFEE
 11181                           fsr0h	equ	0xFEA
 11182                           fsr0l	equ	0xFE9
 11183                           wreg	equ	0xFE8
 11184                           fsr1h	equ	0xFE2
 11185                           fsr1l	equ	0xFE1
 11186                           indf2	equ	0xFDF
 11187                           postinc2	equ	0xFDE
 11188                           postdec2	equ	0xFDD
 11189                           fsr2h	equ	0xFDA
 11190                           fsr2l	equ	0xFD9
 11191                           status	equ	0xFD8
 11192                           
 11193 ;; *************** function ___ftmul *****************
 11194 ;; Defined at:
 11195 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11196 ;; Parameters:    Size  Location     Type
 11197 ;;  f1              3   12[COMRAM] float 
 11198 ;;  f2              3   15[COMRAM] float 
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 11201 ;;  sign            1   26[COMRAM] unsigned char 
 11202 ;;  cntr            1   25[COMRAM] unsigned char 
 11203 ;;  exp             1   21[COMRAM] unsigned char 
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  3   12[COMRAM] float 
 11206 ;; Registers used:
 11207 ;;		wreg, status,2, status,0, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11213 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11215 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11216 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;Total ram usage:       15 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    1
 11220 ;; This function calls:
 11221 ;;		___ftpack
 11222 ;; This function is called by:
 11223 ;;		_dec_to_hex
 11224 ;;		_pow
 11225 ;;		_exp
 11226 ;;		_log
 11227 ;;		_eval_poly
 11228 ;; This function uses a non-reentrant model
 11229 ;;
 11230                           
 11231                           	psect	text57
 11232  0017B0                     __ptext57:
 11233                           	opt stack 0
 11234  0017B0                     ___ftmul:
 11235                           	opt stack 20
 11236                           
 11237                           ;incstack = 0
 11238  0017B0  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 11239  0017B4  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11240  0017B6  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11241  0017B8  340E               	rlcf	___ftmul@f1+1,w,c
 11242  0017BA  3613               	rlcf	??___ftmul& (0+255),f,c
 11243  0017BC  E301               	bnc	u253_41
 11244  0017BE  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11245  0017C0                     u253_41:
 11246  0017C0  5013               	movf	??___ftmul,w,c
 11247  0017C2  6E16               	movwf	___ftmul@exp,c
 11248  0017C4  5016               	movf	___ftmul@exp,w,c
 11249  0017C6  A4D8               	btfss	status,2,c
 11250  0017C8  D007               	goto	i2l3078
 11251  0017CA  0E00               	movlw	0
 11252  0017CC  6E0D               	movwf	?___ftmul,c
 11253  0017CE  0E00               	movlw	0
 11254  0017D0  6E0E               	movwf	?___ftmul+1,c
 11255  0017D2  0E00               	movlw	0
 11256  0017D4  6E0F               	movwf	?___ftmul+2,c
 11257  0017D6  0012               	return	
 11258  0017D8                     i2l3078:
 11259  0017D8  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 11260  0017DC  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11261  0017DE  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11262  0017E0  3411               	rlcf	___ftmul@f2+1,w,c
 11263  0017E2  3613               	rlcf	??___ftmul& (0+255),f,c
 11264  0017E4  E301               	bnc	u255_41
 11265  0017E6  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11266  0017E8                     u255_41:
 11267  0017E8  5013               	movf	??___ftmul,w,c
 11268  0017EA  6E1B               	movwf	___ftmul@sign,c
 11269  0017EC  501B               	movf	___ftmul@sign,w,c
 11270  0017EE  A4D8               	btfss	status,2,c
 11271  0017F0  D007               	goto	i2l3084
 11272  0017F2  0E00               	movlw	0
 11273  0017F4  6E0D               	movwf	?___ftmul,c
 11274  0017F6  0E00               	movlw	0
 11275  0017F8  6E0E               	movwf	?___ftmul+1,c
 11276  0017FA  0E00               	movlw	0
 11277  0017FC  6E0F               	movwf	?___ftmul+2,c
 11278  0017FE  0012               	return	
 11279  001800                     i2l3084:
 11280  001800  501B               	movf	___ftmul@sign,w,c
 11281  001802  0F7B               	addlw	123
 11282  001804  2616               	addwf	___ftmul@exp,f,c
 11283  001806  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 11284  00180A  5012               	movf	___ftmul@f2+2,w,c
 11285  00180C  1A1B               	xorwf	___ftmul@sign,f,c
 11286  00180E  0E80               	movlw	128
 11287  001810  161B               	andwf	___ftmul@sign,f,c
 11288  001812  8E0E               	bsf	___ftmul@f1+1,7,c
 11289  001814  8E11               	bsf	___ftmul@f2+1,7,c
 11290  001816  0EFF               	movlw	255
 11291  001818  1610               	andwf	___ftmul@f2,f,c
 11292  00181A  0EFF               	movlw	255
 11293  00181C  1611               	andwf	___ftmul@f2+1,f,c
 11294  00181E  0E00               	movlw	0
 11295  001820  1612               	andwf	___ftmul@f2+2,f,c
 11296  001822  0E00               	movlw	0
 11297  001824  6E17               	movwf	___ftmul@f3_as_product,c
 11298  001826  0E00               	movlw	0
 11299  001828  6E18               	movwf	___ftmul@f3_as_product+1,c
 11300  00182A  0E00               	movlw	0
 11301  00182C  6E19               	movwf	___ftmul@f3_as_product+2,c
 11302  00182E  0E07               	movlw	7
 11303  001830  6E1A               	movwf	___ftmul@cntr,c
 11304  001832                     i2l3098:
 11305  001832  A00D               	btfss	___ftmul@f1,0,c
 11306  001834  D006               	goto	i2l3102
 11307  001836  5010               	movf	___ftmul@f2,w,c
 11308  001838  2617               	addwf	___ftmul@f3_as_product,f,c
 11309  00183A  5011               	movf	___ftmul@f2+1,w,c
 11310  00183C  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11311  00183E  5012               	movf	___ftmul@f2+2,w,c
 11312  001840  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11313  001842                     i2l3102:
 11314  001842  90D8               	bcf	status,0,c
 11315  001844  320F               	rrcf	___ftmul@f1+2,f,c
 11316  001846  320E               	rrcf	___ftmul@f1+1,f,c
 11317  001848  320D               	rrcf	___ftmul@f1,f,c
 11318  00184A  90D8               	bcf	status,0,c
 11319  00184C  3610               	rlcf	___ftmul@f2,f,c
 11320  00184E  3611               	rlcf	___ftmul@f2+1,f,c
 11321  001850  3612               	rlcf	___ftmul@f2+2,f,c
 11322  001852  2E1A               	decfsz	___ftmul@cntr,f,c
 11323  001854  D7EE               	goto	i2l3098
 11324  001856  0E09               	movlw	9
 11325  001858  6E1A               	movwf	___ftmul@cntr,c
 11326  00185A                     i2l3108:
 11327  00185A  A00D               	btfss	___ftmul@f1,0,c
 11328  00185C  D006               	goto	i2l3112
 11329  00185E  5010               	movf	___ftmul@f2,w,c
 11330  001860  2617               	addwf	___ftmul@f3_as_product,f,c
 11331  001862  5011               	movf	___ftmul@f2+1,w,c
 11332  001864  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11333  001866  5012               	movf	___ftmul@f2+2,w,c
 11334  001868  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11335  00186A                     i2l3112:
 11336  00186A  90D8               	bcf	status,0,c
 11337  00186C  320F               	rrcf	___ftmul@f1+2,f,c
 11338  00186E  320E               	rrcf	___ftmul@f1+1,f,c
 11339  001870  320D               	rrcf	___ftmul@f1,f,c
 11340  001872  90D8               	bcf	status,0,c
 11341  001874  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 11342  001876  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 11343  001878  3217               	rrcf	___ftmul@f3_as_product,f,c
 11344  00187A  2E1A               	decfsz	___ftmul@cntr,f,c
 11345  00187C  D7EE               	goto	i2l3108
 11346  00187E  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 11347  001882  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11348  001886  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11349  00188A  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 11350  00188E  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 11351  001892  EC01  F010         	call	___ftpack	;wreg free
 11352  001896  C001  F00D         	movff	?___ftpack,?___ftmul
 11353  00189A  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 11354  00189E  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 11355  0018A2  0012               	return	
 11356  0018A4                     __end_of___ftmul:
 11357                           	opt stack 0
 11358                           pclatu	equ	0xFFB
 11359                           pclath	equ	0xFFA
 11360                           tblptru	equ	0xFF8
 11361                           tblptrh	equ	0xFF7
 11362                           tblptrl	equ	0xFF6
 11363                           tablat	equ	0xFF5
 11364                           prodh	equ	0xFF4
 11365                           prodl	equ	0xFF3
 11366                           intcon	equ	0xFF2
 11367                           intcon2	equ	0xFF1
 11368                           intcon3	equ	0xFF0
 11369                           postinc0	equ	0xFEE
 11370                           fsr0h	equ	0xFEA
 11371                           fsr0l	equ	0xFE9
 11372                           wreg	equ	0xFE8
 11373                           fsr1h	equ	0xFE2
 11374                           fsr1l	equ	0xFE1
 11375                           indf2	equ	0xFDF
 11376                           postinc2	equ	0xFDE
 11377                           postdec2	equ	0xFDD
 11378                           fsr2h	equ	0xFDA
 11379                           fsr2l	equ	0xFD9
 11380                           status	equ	0xFD8
 11381                           
 11382 ;; *************** function ___ftsub *****************
 11383 ;; Defined at:
 11384 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 11385 ;; Parameters:    Size  Location     Type
 11386 ;;  f1              3   39[COMRAM] float 
 11387 ;;  f2              3   42[COMRAM] float 
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;		None
 11390 ;; Return value:  Size  Location     Type
 11391 ;;                  3   39[COMRAM] float 
 11392 ;; Registers used:
 11393 ;;		wreg, status,2, status,0, cstack
 11394 ;; Tracked objects:
 11395 ;;		On entry : 0/0
 11396 ;;		On exit  : 0/0
 11397 ;;		Unchanged: 0/0
 11398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11399 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11402 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11403 ;;Total ram usage:        6 bytes
 11404 ;; Hardware stack levels used:    1
 11405 ;; Hardware stack levels required when called:    2
 11406 ;; This function calls:
 11407 ;;		___ftadd
 11408 ;; This function is called by:
 11409 ;;		_exp
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413                           	psect	text58
 11414  002902                     __ptext58:
 11415                           	opt stack 0
 11416  002902                     ___ftsub:
 11417                           	opt stack 20
 11418                           
 11419                           ;incstack = 0
 11420  002902  502B               	movf	___ftsub@f2,w,c
 11421  002904  102C               	iorwf	___ftsub@f2+1,w,c
 11422  002906  102D               	iorwf	___ftsub@f2+2,w,c
 11423  002908  B4D8               	btfsc	status,2,c
 11424  00290A  D006               	goto	i2l3282
 11425  00290C  0E00               	movlw	0
 11426  00290E  1A2B               	xorwf	___ftsub@f2,f,c
 11427  002910  0E00               	movlw	0
 11428  002912  1A2C               	xorwf	___ftsub@f2+1,f,c
 11429  002914  0E80               	movlw	128
 11430  002916  1A2D               	xorwf	___ftsub@f2+2,f,c
 11431  002918                     i2l3282:
 11432  002918  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 11433  00291C  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 11434  002920  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 11435  002924  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 11436  002928  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 11437  00292C  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 11438  002930  EC65  F007         	call	___ftadd	;wreg free
 11439  002934  C01C  F028         	movff	?___ftadd,?___ftsub
 11440  002938  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 11441  00293C  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 11442  002940  0012               	return	
 11443  002942                     __end_of___ftsub:
 11444                           	opt stack 0
 11445                           pclatu	equ	0xFFB
 11446                           pclath	equ	0xFFA
 11447                           tblptru	equ	0xFF8
 11448                           tblptrh	equ	0xFF7
 11449                           tblptrl	equ	0xFF6
 11450                           tablat	equ	0xFF5
 11451                           prodh	equ	0xFF4
 11452                           prodl	equ	0xFF3
 11453                           intcon	equ	0xFF2
 11454                           intcon2	equ	0xFF1
 11455                           intcon3	equ	0xFF0
 11456                           postinc0	equ	0xFEE
 11457                           fsr0h	equ	0xFEA
 11458                           fsr0l	equ	0xFE9
 11459                           wreg	equ	0xFE8
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           indf2	equ	0xFDF
 11463                           postinc2	equ	0xFDE
 11464                           postdec2	equ	0xFDD
 11465                           fsr2h	equ	0xFDA
 11466                           fsr2l	equ	0xFD9
 11467                           status	equ	0xFD8
 11468                           
 11469 ;; *************** function ___ftadd *****************
 11470 ;; Defined at:
 11471 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11472 ;; Parameters:    Size  Location     Type
 11473 ;;  f1              3   27[COMRAM] float 
 11474 ;;  f2              3   30[COMRAM] float 
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;  exp1            1   38[COMRAM] unsigned char 
 11477 ;;  exp2            1   37[COMRAM] unsigned char 
 11478 ;;  sign            1   36[COMRAM] unsigned char 
 11479 ;; Return value:  Size  Location     Type
 11480 ;;                  3   27[COMRAM] float 
 11481 ;; Registers used:
 11482 ;;		wreg, status,2, status,0, cstack
 11483 ;; Tracked objects:
 11484 ;;		On entry : 0/0
 11485 ;;		On exit  : 0/0
 11486 ;;		Unchanged: 0/0
 11487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11488 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;Total ram usage:       12 bytes
 11493 ;; Hardware stack levels used:    1
 11494 ;; Hardware stack levels required when called:    1
 11495 ;; This function calls:
 11496 ;;		___ftpack
 11497 ;; This function is called by:
 11498 ;;		_dec_to_hex
 11499 ;;		___ftsub
 11500 ;;		_floor
 11501 ;;		_log
 11502 ;;		_eval_poly
 11503 ;; This function uses a non-reentrant model
 11504 ;;
 11505                           
 11506                           	psect	text59
 11507  000ECA                     __ptext59:
 11508                           	opt stack 0
 11509  000ECA                     ___ftadd:
 11510                           	opt stack 20
 11511                           
 11512                           ;incstack = 0
 11513  000ECA  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 11514  000ECE  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11515  000ED0  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11516  000ED2  341D               	rlcf	___ftadd@f1+1,w,c
 11517  000ED4  3622               	rlcf	??___ftadd& (0+255),f,c
 11518  000ED6  E301               	bnc	u232_41
 11519  000ED8  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11520  000EDA                     u232_41:
 11521  000EDA  5022               	movf	??___ftadd,w,c
 11522  000EDC  6E27               	movwf	___ftadd@exp1,c
 11523  000EDE  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 11524  000EE2  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11525  000EE4  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11526  000EE6  3420               	rlcf	___ftadd@f2+1,w,c
 11527  000EE8  3622               	rlcf	??___ftadd& (0+255),f,c
 11528  000EEA  E301               	bnc	u233_41
 11529  000EEC  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11530  000EEE                     u233_41:
 11531  000EEE  5022               	movf	??___ftadd,w,c
 11532  000EF0  6E26               	movwf	___ftadd@exp2,c
 11533  000EF2  5027               	movf	___ftadd@exp1,w,c
 11534  000EF4  B4D8               	btfsc	status,2,c
 11535  000EF6  D00B               	goto	i2l726
 11536  000EF8  5026               	movf	___ftadd@exp2,w,c
 11537  000EFA  5C27               	subwf	___ftadd@exp1,w,c
 11538  000EFC  B0D8               	btfsc	status,0,c
 11539  000EFE  D00E               	goto	i2l3010
 11540  000F00  5027               	movf	___ftadd@exp1,w,c
 11541  000F02  0800               	sublw	0
 11542  000F04  2426               	addwf	___ftadd@exp2,w,c
 11543  000F06  6E22               	movwf	??___ftadd& (0+255),c
 11544  000F08  0E18               	movlw	24
 11545  000F0A  6422               	cpfsgt	??___ftadd,c
 11546  000F0C  D007               	goto	i2l3010
 11547  000F0E                     i2l726:
 11548  000F0E  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 11549  000F12  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 11550  000F16  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 11551  000F1A  0012               	return	
 11552  000F1C                     i2l3010:
 11553  000F1C  5026               	movf	___ftadd@exp2,w,c
 11554  000F1E  B4D8               	btfsc	status,2,c
 11555  000F20  D00B               	goto	i2l730
 11556  000F22  5027               	movf	___ftadd@exp1,w,c
 11557  000F24  5C26               	subwf	___ftadd@exp2,w,c
 11558  000F26  B0D8               	btfsc	status,0,c
 11559  000F28  D00E               	goto	i2l3016
 11560  000F2A  5026               	movf	___ftadd@exp2,w,c
 11561  000F2C  0800               	sublw	0
 11562  000F2E  2427               	addwf	___ftadd@exp1,w,c
 11563  000F30  6E22               	movwf	??___ftadd& (0+255),c
 11564  000F32  0E18               	movlw	24
 11565  000F34  6422               	cpfsgt	??___ftadd,c
 11566  000F36  D007               	goto	i2l3016
 11567  000F38                     i2l730:
 11568  000F38  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 11569  000F3C  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 11570  000F40  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 11571  000F44  0012               	return	
 11572  000F46                     i2l3016:
 11573  000F46  0E06               	movlw	6
 11574  000F48  6E25               	movwf	___ftadd@sign,c
 11575  000F4A  BE1E               	btfsc	___ftadd@f1+2,7,c
 11576  000F4C  8E25               	bsf	___ftadd@sign,7,c
 11577  000F4E  BE21               	btfsc	___ftadd@f2+2,7,c
 11578  000F50  8C25               	bsf	___ftadd@sign,6,c
 11579  000F52  8E1D               	bsf	___ftadd@f1+1,7,c
 11580  000F54  0EFF               	movlw	255
 11581  000F56  161C               	andwf	___ftadd@f1,f,c
 11582  000F58  0EFF               	movlw	255
 11583  000F5A  161D               	andwf	___ftadd@f1+1,f,c
 11584  000F5C  0E00               	movlw	0
 11585  000F5E  161E               	andwf	___ftadd@f1+2,f,c
 11586  000F60  8E20               	bsf	___ftadd@f2+1,7,c
 11587  000F62  0EFF               	movlw	255
 11588  000F64  161F               	andwf	___ftadd@f2,f,c
 11589  000F66  0EFF               	movlw	255
 11590  000F68  1620               	andwf	___ftadd@f2+1,f,c
 11591  000F6A  0E00               	movlw	0
 11592  000F6C  1621               	andwf	___ftadd@f2+2,f,c
 11593  000F6E  5026               	movf	___ftadd@exp2,w,c
 11594  000F70  5C27               	subwf	___ftadd@exp1,w,c
 11595  000F72  B0D8               	btfsc	status,0,c
 11596  000F74  D01B               	goto	i2l3042
 11597  000F76                     i2l3032:
 11598  000F76  90D8               	bcf	status,0,c
 11599  000F78  361F               	rlcf	___ftadd@f2,f,c
 11600  000F7A  3620               	rlcf	___ftadd@f2+1,f,c
 11601  000F7C  3621               	rlcf	___ftadd@f2+2,f,c
 11602  000F7E  0626               	decf	___ftadd@exp2,f,c
 11603  000F80  5027               	movf	___ftadd@exp1,w,c
 11604  000F82  1826               	xorwf	___ftadd@exp2,w,c
 11605  000F84  B4D8               	btfsc	status,2,c
 11606  000F86  D00D               	goto	i2l3040
 11607  000F88  0625               	decf	___ftadd@sign,f,c
 11608  000F8A  C025  F022         	movff	___ftadd@sign,??___ftadd
 11609  000F8E  0E07               	movlw	7
 11610  000F90  1622               	andwf	??___ftadd,f,c
 11611  000F92  B4D8               	btfsc	status,2,c
 11612  000F94  D006               	goto	i2l3040
 11613  000F96  D7EF               	goto	i2l3032
 11614  000F98                     i2l3038:
 11615  000F98  90D8               	bcf	status,0,c
 11616  000F9A  321E               	rrcf	___ftadd@f1+2,f,c
 11617  000F9C  321D               	rrcf	___ftadd@f1+1,f,c
 11618  000F9E  321C               	rrcf	___ftadd@f1,f,c
 11619  000FA0  2A27               	incf	___ftadd@exp1,f,c
 11620  000FA2                     i2l3040:
 11621  000FA2  5026               	movf	___ftadd@exp2,w,c
 11622  000FA4  1827               	xorwf	___ftadd@exp1,w,c
 11623  000FA6  B4D8               	btfsc	status,2,c
 11624  000FA8  D01F               	goto	i2l741
 11625  000FAA  D7F6               	goto	i2l3038
 11626  000FAC                     i2l3042:
 11627  000FAC  5027               	movf	___ftadd@exp1,w,c
 11628  000FAE  5C26               	subwf	___ftadd@exp2,w,c
 11629  000FB0  B0D8               	btfsc	status,0,c
 11630  000FB2  D01A               	goto	i2l741
 11631  000FB4                     i2l3044:
 11632  000FB4  90D8               	bcf	status,0,c
 11633  000FB6  361C               	rlcf	___ftadd@f1,f,c
 11634  000FB8  361D               	rlcf	___ftadd@f1+1,f,c
 11635  000FBA  361E               	rlcf	___ftadd@f1+2,f,c
 11636  000FBC  0627               	decf	___ftadd@exp1,f,c
 11637  000FBE  5027               	movf	___ftadd@exp1,w,c
 11638  000FC0  1826               	xorwf	___ftadd@exp2,w,c
 11639  000FC2  B4D8               	btfsc	status,2,c
 11640  000FC4  D00D               	goto	i2l3052
 11641  000FC6  0625               	decf	___ftadd@sign,f,c
 11642  000FC8  C025  F022         	movff	___ftadd@sign,??___ftadd
 11643  000FCC  0E07               	movlw	7
 11644  000FCE  1622               	andwf	??___ftadd,f,c
 11645  000FD0  B4D8               	btfsc	status,2,c
 11646  000FD2  D006               	goto	i2l3052
 11647  000FD4  D7EF               	goto	i2l3044
 11648  000FD6                     i2l3050:
 11649  000FD6  90D8               	bcf	status,0,c
 11650  000FD8  3221               	rrcf	___ftadd@f2+2,f,c
 11651  000FDA  3220               	rrcf	___ftadd@f2+1,f,c
 11652  000FDC  321F               	rrcf	___ftadd@f2,f,c
 11653  000FDE  2A26               	incf	___ftadd@exp2,f,c
 11654  000FE0                     i2l3052:
 11655  000FE0  5026               	movf	___ftadd@exp2,w,c
 11656  000FE2  1827               	xorwf	___ftadd@exp1,w,c
 11657  000FE4  A4D8               	btfss	status,2,c
 11658  000FE6  D7F7               	goto	i2l3050
 11659  000FE8                     i2l741:
 11660  000FE8  AE25               	btfss	___ftadd@sign,7,c
 11661  000FEA  D00C               	goto	i2l750
 11662  000FEC  0EFF               	movlw	255
 11663  000FEE  1A1C               	xorwf	___ftadd@f1,f,c
 11664  000FF0  0EFF               	movlw	255
 11665  000FF2  1A1D               	xorwf	___ftadd@f1+1,f,c
 11666  000FF4  0EFF               	movlw	255
 11667  000FF6  1A1E               	xorwf	___ftadd@f1+2,f,c
 11668  000FF8  0E01               	movlw	1
 11669  000FFA  261C               	addwf	___ftadd@f1,f,c
 11670  000FFC  0E00               	movlw	0
 11671  000FFE  221D               	addwfc	___ftadd@f1+1,f,c
 11672  001000  0E00               	movlw	0
 11673  001002  221E               	addwfc	___ftadd@f1+2,f,c
 11674  001004                     i2l750:
 11675  001004  AC25               	btfss	___ftadd@sign,6,c
 11676  001006  D00C               	goto	i2l3058
 11677  001008  0EFF               	movlw	255
 11678  00100A  1A1F               	xorwf	___ftadd@f2,f,c
 11679  00100C  0EFF               	movlw	255
 11680  00100E  1A20               	xorwf	___ftadd@f2+1,f,c
 11681  001010  0EFF               	movlw	255
 11682  001012  1A21               	xorwf	___ftadd@f2+2,f,c
 11683  001014  0E01               	movlw	1
 11684  001016  261F               	addwf	___ftadd@f2,f,c
 11685  001018  0E00               	movlw	0
 11686  00101A  2220               	addwfc	___ftadd@f2+1,f,c
 11687  00101C  0E00               	movlw	0
 11688  00101E  2221               	addwfc	___ftadd@f2+2,f,c
 11689  001020                     i2l3058:
 11690  001020  0E00               	movlw	0
 11691  001022  6E25               	movwf	___ftadd@sign,c
 11692  001024  501C               	movf	___ftadd@f1,w,c
 11693  001026  261F               	addwf	___ftadd@f2,f,c
 11694  001028  501D               	movf	___ftadd@f1+1,w,c
 11695  00102A  2220               	addwfc	___ftadd@f2+1,f,c
 11696  00102C  501E               	movf	___ftadd@f1+2,w,c
 11697  00102E  2221               	addwfc	___ftadd@f2+2,f,c
 11698  001030  AE21               	btfss	___ftadd@f2+2,7,c
 11699  001032  D00E               	goto	i2l3068
 11700  001034  0EFF               	movlw	255
 11701  001036  1A1F               	xorwf	___ftadd@f2,f,c
 11702  001038  0EFF               	movlw	255
 11703  00103A  1A20               	xorwf	___ftadd@f2+1,f,c
 11704  00103C  0EFF               	movlw	255
 11705  00103E  1A21               	xorwf	___ftadd@f2+2,f,c
 11706  001040  0E01               	movlw	1
 11707  001042  261F               	addwf	___ftadd@f2,f,c
 11708  001044  0E00               	movlw	0
 11709  001046  2220               	addwfc	___ftadd@f2+1,f,c
 11710  001048  0E00               	movlw	0
 11711  00104A  2221               	addwfc	___ftadd@f2+2,f,c
 11712  00104C  0E01               	movlw	1
 11713  00104E  6E25               	movwf	___ftadd@sign,c
 11714  001050                     i2l3068:
 11715  001050  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 11716  001054  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11717  001058  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11718  00105C  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 11719  001060  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 11720  001064  EC01  F010         	call	___ftpack	;wreg free
 11721  001068  C001  F01C         	movff	?___ftpack,?___ftadd
 11722  00106C  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 11723  001070  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 11724  001074  0012               	return	
 11725  001076                     __end_of___ftadd:
 11726                           	opt stack 0
 11727                           pclatu	equ	0xFFB
 11728                           pclath	equ	0xFFA
 11729                           tblptru	equ	0xFF8
 11730                           tblptrh	equ	0xFF7
 11731                           tblptrl	equ	0xFF6
 11732                           tablat	equ	0xFF5
 11733                           prodh	equ	0xFF4
 11734                           prodl	equ	0xFF3
 11735                           intcon	equ	0xFF2
 11736                           intcon2	equ	0xFF1
 11737                           intcon3	equ	0xFF0
 11738                           postinc0	equ	0xFEE
 11739                           fsr0h	equ	0xFEA
 11740                           fsr0l	equ	0xFE9
 11741                           wreg	equ	0xFE8
 11742                           fsr1h	equ	0xFE2
 11743                           fsr1l	equ	0xFE1
 11744                           indf2	equ	0xFDF
 11745                           postinc2	equ	0xFDE
 11746                           postdec2	equ	0xFDD
 11747                           fsr2h	equ	0xFDA
 11748                           fsr2l	equ	0xFD9
 11749                           status	equ	0xFD8
 11750                           
 11751 ;; *************** function ___ftneg *****************
 11752 ;; Defined at:
 11753 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 11754 ;; Parameters:    Size  Location     Type
 11755 ;;  f1              3    0[COMRAM] float 
 11756 ;; Auto vars:     Size  Location     Type
 11757 ;;		None
 11758 ;; Return value:  Size  Location     Type
 11759 ;;                  3    0[COMRAM] float 
 11760 ;; Registers used:
 11761 ;;		wreg, status,2, status,0
 11762 ;; Tracked objects:
 11763 ;;		On entry : 0/0
 11764 ;;		On exit  : 0/0
 11765 ;;		Unchanged: 0/0
 11766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11767 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11771 ;;Total ram usage:        3 bytes
 11772 ;; Hardware stack levels used:    1
 11773 ;; This function calls:
 11774 ;;		Nothing
 11775 ;; This function is called by:
 11776 ;;		_pow
 11777 ;;		_exp
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           	psect	text60
 11782  002B32                     __ptext60:
 11783                           	opt stack 0
 11784  002B32                     ___ftneg:
 11785                           	opt stack 22
 11786                           
 11787                           ;incstack = 0
 11788  002B32  5001               	movf	___ftneg@f1,w,c
 11789  002B34  1002               	iorwf	___ftneg@f1+1,w,c
 11790  002B36  1003               	iorwf	___ftneg@f1+2,w,c
 11791  002B38  B4D8               	btfsc	status,2,c
 11792  002B3A  D006               	goto	i2l783
 11793  002B3C  0E00               	movlw	0
 11794  002B3E  1A01               	xorwf	___ftneg@f1,f,c
 11795  002B40  0E00               	movlw	0
 11796  002B42  1A02               	xorwf	___ftneg@f1+1,f,c
 11797  002B44  0E80               	movlw	128
 11798  002B46  1A03               	xorwf	___ftneg@f1+2,f,c
 11799  002B48                     i2l783:
 11800  002B48  C001  F001         	movff	___ftneg@f1,?___ftneg
 11801  002B4C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 11802  002B50  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 11803  002B54  0012               	return		;funcret
 11804  002B56                     __end_of___ftneg:
 11805                           	opt stack 0
 11806                           pclatu	equ	0xFFB
 11807                           pclath	equ	0xFFA
 11808                           tblptru	equ	0xFF8
 11809                           tblptrh	equ	0xFF7
 11810                           tblptrl	equ	0xFF6
 11811                           tablat	equ	0xFF5
 11812                           prodh	equ	0xFF4
 11813                           prodl	equ	0xFF3
 11814                           intcon	equ	0xFF2
 11815                           intcon2	equ	0xFF1
 11816                           intcon3	equ	0xFF0
 11817                           postinc0	equ	0xFEE
 11818                           fsr0h	equ	0xFEA
 11819                           fsr0l	equ	0xFE9
 11820                           wreg	equ	0xFE8
 11821                           fsr1h	equ	0xFE2
 11822                           fsr1l	equ	0xFE1
 11823                           indf2	equ	0xFDF
 11824                           postinc2	equ	0xFDE
 11825                           postdec2	equ	0xFDD
 11826                           fsr2h	equ	0xFDA
 11827                           fsr2l	equ	0xFD9
 11828                           status	equ	0xFD8
 11829                           
 11830 ;; *************** function ___ftdiv *****************
 11831 ;; Defined at:
 11832 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11833 ;; Parameters:    Size  Location     Type
 11834 ;;  f1              3    8[COMRAM] float 
 11835 ;;  f2              3   11[COMRAM] float 
 11836 ;; Auto vars:     Size  Location     Type
 11837 ;;  f3              3   18[COMRAM] float 
 11838 ;;  sign            1   22[COMRAM] unsigned char 
 11839 ;;  exp             1   21[COMRAM] unsigned char 
 11840 ;;  cntr            1   17[COMRAM] unsigned char 
 11841 ;; Return value:  Size  Location     Type
 11842 ;;                  3    8[COMRAM] float 
 11843 ;; Registers used:
 11844 ;;		wreg, status,2, status,0, cstack
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11850 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11851 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11852 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11853 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11854 ;;Total ram usage:       15 bytes
 11855 ;; Hardware stack levels used:    1
 11856 ;; Hardware stack levels required when called:    1
 11857 ;; This function calls:
 11858 ;;		___ftpack
 11859 ;; This function is called by:
 11860 ;;		_exp
 11861 ;; This function uses a non-reentrant model
 11862 ;;
 11863                           
 11864                           	psect	text61
 11865  00198E                     __ptext61:
 11866                           	opt stack 0
 11867  00198E                     ___ftdiv:
 11868                           	opt stack 21
 11869                           
 11870                           ;incstack = 0
 11871  00198E  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 11872  001992  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 11873  001994  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 11874  001996  340A               	rlcf	___ftdiv@f1+1,w,c
 11875  001998  360F               	rlcf	??___ftdiv& (0+255),f,c
 11876  00199A  E301               	bnc	u274_41
 11877  00199C  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 11878  00199E                     u274_41:
 11879  00199E  500F               	movf	??___ftdiv,w,c
 11880  0019A0  6E16               	movwf	___ftdiv@exp,c
 11881  0019A2  5016               	movf	___ftdiv@exp,w,c
 11882  0019A4  A4D8               	btfss	status,2,c
 11883  0019A6  D007               	goto	i2l3238
 11884  0019A8  0E00               	movlw	0
 11885  0019AA  6E09               	movwf	?___ftdiv,c
 11886  0019AC  0E00               	movlw	0
 11887  0019AE  6E0A               	movwf	?___ftdiv+1,c
 11888  0019B0  0E00               	movlw	0
 11889  0019B2  6E0B               	movwf	?___ftdiv+2,c
 11890  0019B4  0012               	return	
 11891  0019B6                     i2l3238:
 11892  0019B6  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 11893  0019BA  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 11894  0019BC  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 11895  0019BE  340D               	rlcf	___ftdiv@f2+1,w,c
 11896  0019C0  360F               	rlcf	??___ftdiv& (0+255),f,c
 11897  0019C2  E301               	bnc	u276_41
 11898  0019C4  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 11899  0019C6                     u276_41:
 11900  0019C6  500F               	movf	??___ftdiv,w,c
 11901  0019C8  6E17               	movwf	___ftdiv@sign,c
 11902  0019CA  5017               	movf	___ftdiv@sign,w,c
 11903  0019CC  A4D8               	btfss	status,2,c
 11904  0019CE  D007               	goto	i2l3244
 11905  0019D0  0E00               	movlw	0
 11906  0019D2  6E09               	movwf	?___ftdiv,c
 11907  0019D4  0E00               	movlw	0
 11908  0019D6  6E0A               	movwf	?___ftdiv+1,c
 11909  0019D8  0E00               	movlw	0
 11910  0019DA  6E0B               	movwf	?___ftdiv+2,c
 11911  0019DC  0012               	return	
 11912  0019DE                     i2l3244:
 11913  0019DE  0E00               	movlw	0
 11914  0019E0  6E13               	movwf	___ftdiv@f3,c
 11915  0019E2  0E00               	movlw	0
 11916  0019E4  6E14               	movwf	___ftdiv@f3+1,c
 11917  0019E6  0E00               	movlw	0
 11918  0019E8  6E15               	movwf	___ftdiv@f3+2,c
 11919  0019EA  5017               	movf	___ftdiv@sign,w,c
 11920  0019EC  0F89               	addlw	137
 11921  0019EE  5E16               	subwf	___ftdiv@exp,f,c
 11922  0019F0  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 11923  0019F4  500E               	movf	___ftdiv@f2+2,w,c
 11924  0019F6  1A17               	xorwf	___ftdiv@sign,f,c
 11925  0019F8  0E80               	movlw	128
 11926  0019FA  1617               	andwf	___ftdiv@sign,f,c
 11927  0019FC  8E0A               	bsf	___ftdiv@f1+1,7,c
 11928  0019FE  0EFF               	movlw	255
 11929  001A00  1609               	andwf	___ftdiv@f1,f,c
 11930  001A02  0EFF               	movlw	255
 11931  001A04  160A               	andwf	___ftdiv@f1+1,f,c
 11932  001A06  0E00               	movlw	0
 11933  001A08  160B               	andwf	___ftdiv@f1+2,f,c
 11934  001A0A  8E0D               	bsf	___ftdiv@f2+1,7,c
 11935  001A0C  0EFF               	movlw	255
 11936  001A0E  160C               	andwf	___ftdiv@f2,f,c
 11937  001A10  0EFF               	movlw	255
 11938  001A12  160D               	andwf	___ftdiv@f2+1,f,c
 11939  001A14  0E00               	movlw	0
 11940  001A16  160E               	andwf	___ftdiv@f2+2,f,c
 11941  001A18  0E18               	movlw	24
 11942  001A1A  6E12               	movwf	___ftdiv@cntr,c
 11943  001A1C                     i2l3264:
 11944  001A1C  90D8               	bcf	status,0,c
 11945  001A1E  3613               	rlcf	___ftdiv@f3,f,c
 11946  001A20  3614               	rlcf	___ftdiv@f3+1,f,c
 11947  001A22  3615               	rlcf	___ftdiv@f3+2,f,c
 11948  001A24  500C               	movf	___ftdiv@f2,w,c
 11949  001A26  5C09               	subwf	___ftdiv@f1,w,c
 11950  001A28  500D               	movf	___ftdiv@f2+1,w,c
 11951  001A2A  580A               	subwfb	___ftdiv@f1+1,w,c
 11952  001A2C  500E               	movf	___ftdiv@f2+2,w,c
 11953  001A2E  580B               	subwfb	___ftdiv@f1+2,w,c
 11954  001A30  A0D8               	btfss	status,0,c
 11955  001A32  D007               	goto	i2l761
 11956  001A34  500C               	movf	___ftdiv@f2,w,c
 11957  001A36  5E09               	subwf	___ftdiv@f1,f,c
 11958  001A38  500D               	movf	___ftdiv@f2+1,w,c
 11959  001A3A  5A0A               	subwfb	___ftdiv@f1+1,f,c
 11960  001A3C  500E               	movf	___ftdiv@f2+2,w,c
 11961  001A3E  5A0B               	subwfb	___ftdiv@f1+2,f,c
 11962  001A40  8013               	bsf	___ftdiv@f3,0,c
 11963  001A42                     i2l761:
 11964  001A42  90D8               	bcf	status,0,c
 11965  001A44  3609               	rlcf	___ftdiv@f1,f,c
 11966  001A46  360A               	rlcf	___ftdiv@f1+1,f,c
 11967  001A48  360B               	rlcf	___ftdiv@f1+2,f,c
 11968  001A4A  2E12               	decfsz	___ftdiv@cntr,f,c
 11969  001A4C  D7E7               	goto	i2l3264
 11970  001A4E  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 11971  001A52  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11972  001A56  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11973  001A5A  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 11974  001A5E  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 11975  001A62  EC01  F010         	call	___ftpack	;wreg free
 11976  001A66  C001  F009         	movff	?___ftpack,?___ftdiv
 11977  001A6A  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 11978  001A6E  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 11979  001A72  0012               	return	
 11980  001A74                     __end_of___ftdiv:
 11981                           	opt stack 0
 11982                           pclatu	equ	0xFFB
 11983                           pclath	equ	0xFFA
 11984                           tblptru	equ	0xFF8
 11985                           tblptrh	equ	0xFF7
 11986                           tblptrl	equ	0xFF6
 11987                           tablat	equ	0xFF5
 11988                           prodh	equ	0xFF4
 11989                           prodl	equ	0xFF3
 11990                           intcon	equ	0xFF2
 11991                           intcon2	equ	0xFF1
 11992                           intcon3	equ	0xFF0
 11993                           postinc0	equ	0xFEE
 11994                           fsr0h	equ	0xFEA
 11995                           fsr0l	equ	0xFE9
 11996                           wreg	equ	0xFE8
 11997                           fsr1h	equ	0xFE2
 11998                           fsr1l	equ	0xFE1
 11999                           indf2	equ	0xFDF
 12000                           postinc2	equ	0xFDE
 12001                           postdec2	equ	0xFDD
 12002                           fsr2h	equ	0xFDA
 12003                           fsr2l	equ	0xFD9
 12004                           status	equ	0xFD8
 12005                           
 12006 ;; *************** function ___awtoft *****************
 12007 ;; Defined at:
 12008 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12009 ;; Parameters:    Size  Location     Type
 12010 ;;  c               2    8[COMRAM] int 
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;  sign            1   11[COMRAM] unsigned char 
 12013 ;; Return value:  Size  Location     Type
 12014 ;;                  3    8[COMRAM] float 
 12015 ;; Registers used:
 12016 ;;		wreg, status,2, status,0, cstack
 12017 ;; Tracked objects:
 12018 ;;		On entry : 0/0
 12019 ;;		On exit  : 0/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12022 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12025 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12026 ;;Total ram usage:        4 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; Hardware stack levels required when called:    1
 12029 ;; This function calls:
 12030 ;;		___ftpack
 12031 ;; This function is called by:
 12032 ;;		_dec_to_hex
 12033 ;;		_exp
 12034 ;;		_log
 12035 ;; This function uses a non-reentrant model
 12036 ;;
 12037                           
 12038                           	psect	text62
 12039  002980                     __ptext62:
 12040                           	opt stack 0
 12041  002980                     ___awtoft:
 12042                           	opt stack 21
 12043                           
 12044                           ;incstack = 0
 12045  002980  0E00               	movlw	0
 12046  002982  6E0C               	movwf	___awtoft@sign,c
 12047  002984  AE0A               	btfss	___awtoft@c+1,7,c
 12048  002986  D006               	goto	i2l3294
 12049  002988  6C09               	negf	___awtoft@c,c
 12050  00298A  1E0A               	comf	___awtoft@c+1,f,c
 12051  00298C  B0D8               	btfsc	status,0,c
 12052  00298E  2A0A               	incf	___awtoft@c+1,f,c
 12053  002990  0E01               	movlw	1
 12054  002992  6E0C               	movwf	___awtoft@sign,c
 12055  002994                     i2l3294:
 12056  002994  C009  F001         	movff	___awtoft@c,___ftpack@arg
 12057  002998  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 12058  00299C  6A03               	clrf	___ftpack@arg+2,c
 12059  00299E  0E8E               	movlw	142
 12060  0029A0  6E04               	movwf	___ftpack@exp,c
 12061  0029A2  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 12062  0029A6  EC01  F010         	call	___ftpack	;wreg free
 12063  0029AA  C001  F009         	movff	?___ftpack,?___awtoft
 12064  0029AE  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 12065  0029B2  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 12066  0029B6  0012               	return	
 12067  0029B8                     __end_of___awtoft:
 12068                           	opt stack 0
 12069                           pclatu	equ	0xFFB
 12070                           pclath	equ	0xFFA
 12071                           tblptru	equ	0xFF8
 12072                           tblptrh	equ	0xFF7
 12073                           tblptrl	equ	0xFF6
 12074                           tablat	equ	0xFF5
 12075                           prodh	equ	0xFF4
 12076                           prodl	equ	0xFF3
 12077                           intcon	equ	0xFF2
 12078                           intcon2	equ	0xFF1
 12079                           intcon3	equ	0xFF0
 12080                           postinc0	equ	0xFEE
 12081                           fsr0h	equ	0xFEA
 12082                           fsr0l	equ	0xFE9
 12083                           wreg	equ	0xFE8
 12084                           fsr1h	equ	0xFE2
 12085                           fsr1l	equ	0xFE1
 12086                           indf2	equ	0xFDF
 12087                           postinc2	equ	0xFDE
 12088                           postdec2	equ	0xFDD
 12089                           fsr2h	equ	0xFDA
 12090                           fsr2l	equ	0xFD9
 12091                           status	equ	0xFD8
 12092                           
 12093 ;; *************** function ___lltoft *****************
 12094 ;; Defined at:
 12095 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 12096 ;; Parameters:    Size  Location     Type
 12097 ;;  c               4    8[COMRAM] unsigned long 
 12098 ;; Auto vars:     Size  Location     Type
 12099 ;;  exp             1   16[COMRAM] unsigned char 
 12100 ;; Return value:  Size  Location     Type
 12101 ;;                  3    8[COMRAM] float 
 12102 ;; Registers used:
 12103 ;;		wreg, status,2, status,0, cstack
 12104 ;; Tracked objects:
 12105 ;;		On entry : 0/0
 12106 ;;		On exit  : 0/0
 12107 ;;		Unchanged: 0/0
 12108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12109 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12111 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12112 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12113 ;;Total ram usage:        9 bytes
 12114 ;; Hardware stack levels used:    1
 12115 ;; Hardware stack levels required when called:    1
 12116 ;; This function calls:
 12117 ;;		___ftpack
 12118 ;; This function is called by:
 12119 ;;		_pow
 12120 ;; This function uses a non-reentrant model
 12121 ;;
 12122                           
 12123                           	psect	text63
 12124  002774                     __ptext63:
 12125                           	opt stack 0
 12126  002774                     ___lltoft:
 12127                           	opt stack 22
 12128                           
 12129                           ;incstack = 0
 12130  002774  0E8E               	movlw	142
 12131  002776  6E11               	movwf	___lltoft@exp,c
 12132  002778  D006               	goto	i2l3420
 12133  00277A                     i2l3418:
 12134  00277A  90D8               	bcf	status,0,c
 12135  00277C  320C               	rrcf	___lltoft@c+3,f,c
 12136  00277E  320B               	rrcf	___lltoft@c+2,f,c
 12137  002780  320A               	rrcf	___lltoft@c+1,f,c
 12138  002782  3209               	rrcf	___lltoft@c,f,c
 12139  002784  2A11               	incf	___lltoft@exp,f,c
 12140  002786                     i2l3420:
 12141  002786  0E00               	movlw	0
 12142  002788  1409               	andwf	___lltoft@c,w,c
 12143  00278A  6E0D               	movwf	??___lltoft& (0+255),c
 12144  00278C  0E00               	movlw	0
 12145  00278E  140A               	andwf	___lltoft@c+1,w,c
 12146  002790  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12147  002792  0E00               	movlw	0
 12148  002794  140B               	andwf	___lltoft@c+2,w,c
 12149  002796  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12150  002798  0EFF               	movlw	255
 12151  00279A  140C               	andwf	___lltoft@c+3,w,c
 12152  00279C  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12153  00279E  500D               	movf	??___lltoft,w,c
 12154  0027A0  100E               	iorwf	??___lltoft+1,w,c
 12155  0027A2  100F               	iorwf	??___lltoft+2,w,c
 12156  0027A4  1010               	iorwf	??___lltoft+3,w,c
 12157  0027A6  A4D8               	btfss	status,2,c
 12158  0027A8  D7E8               	goto	i2l3418
 12159  0027AA  C009  F001         	movff	___lltoft@c,___ftpack@arg
 12160  0027AE  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 12161  0027B2  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 12162  0027B6  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 12163  0027BA  0E00               	movlw	0
 12164  0027BC  6E05               	movwf	___ftpack@sign,c
 12165  0027BE  EC01  F010         	call	___ftpack	;wreg free
 12166  0027C2  C001  F009         	movff	?___ftpack,?___lltoft
 12167  0027C6  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 12168  0027CA  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 12169  0027CE  0012               	return	
 12170  0027D0                     __end_of___lltoft:
 12171                           	opt stack 0
 12172                           pclatu	equ	0xFFB
 12173                           pclath	equ	0xFFA
 12174                           tblptru	equ	0xFF8
 12175                           tblptrh	equ	0xFF7
 12176                           tblptrl	equ	0xFF6
 12177                           tablat	equ	0xFF5
 12178                           prodh	equ	0xFF4
 12179                           prodl	equ	0xFF3
 12180                           intcon	equ	0xFF2
 12181                           intcon2	equ	0xFF1
 12182                           intcon3	equ	0xFF0
 12183                           postinc0	equ	0xFEE
 12184                           fsr0h	equ	0xFEA
 12185                           fsr0l	equ	0xFE9
 12186                           wreg	equ	0xFE8
 12187                           fsr1h	equ	0xFE2
 12188                           fsr1l	equ	0xFE1
 12189                           indf2	equ	0xFDF
 12190                           postinc2	equ	0xFDE
 12191                           postdec2	equ	0xFDD
 12192                           fsr2h	equ	0xFDA
 12193                           fsr2l	equ	0xFD9
 12194                           status	equ	0xFD8
 12195                           
 12196 ;; *************** function ___ftpack *****************
 12197 ;; Defined at:
 12198 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12199 ;; Parameters:    Size  Location     Type
 12200 ;;  arg             3    0[COMRAM] unsigned um
 12201 ;;  exp             1    3[COMRAM] unsigned char 
 12202 ;;  sign            1    4[COMRAM] unsigned char 
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;		None
 12205 ;; Return value:  Size  Location     Type
 12206 ;;                  3    0[COMRAM] float 
 12207 ;; Registers used:
 12208 ;;		wreg, status,2, status,0
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12214 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12217 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12218 ;;Total ram usage:        8 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; This function calls:
 12221 ;;		Nothing
 12222 ;; This function is called by:
 12223 ;;		___altoft
 12224 ;;		___awtoft
 12225 ;;		___ftadd
 12226 ;;		___ftdiv
 12227 ;;		___ftmul
 12228 ;;		___lltoft
 12229 ;; This function uses a non-reentrant model
 12230 ;;
 12231                           
 12232                           	psect	text64
 12233  002002                     __ptext64:
 12234                           	opt stack 0
 12235  002002                     ___ftpack:
 12236                           	opt stack 20
 12237                           
 12238                           ;incstack = 0
 12239  002002  5004               	movf	___ftpack@exp,w,c
 12240  002004  B4D8               	btfsc	status,2,c
 12241  002006  D005               	goto	i2l2954
 12242  002008  5001               	movf	___ftpack@arg,w,c
 12243  00200A  1002               	iorwf	___ftpack@arg+1,w,c
 12244  00200C  1003               	iorwf	___ftpack@arg+2,w,c
 12245  00200E  A4D8               	btfss	status,2,c
 12246  002010  D00C               	goto	i2l2960
 12247  002012                     i2l2954:
 12248  002012  0E00               	movlw	0
 12249  002014  6E01               	movwf	?___ftpack,c
 12250  002016  0E00               	movlw	0
 12251  002018  6E02               	movwf	?___ftpack+1,c
 12252  00201A  0E00               	movlw	0
 12253  00201C  6E03               	movwf	?___ftpack+2,c
 12254  00201E  0012               	return	
 12255  002020                     i2l2958:
 12256  002020  2A04               	incf	___ftpack@exp,f,c
 12257  002022  90D8               	bcf	status,0,c
 12258  002024  3203               	rrcf	___ftpack@arg+2,f,c
 12259  002026  3202               	rrcf	___ftpack@arg+1,f,c
 12260  002028  3201               	rrcf	___ftpack@arg,f,c
 12261  00202A                     i2l2960:
 12262  00202A  0E00               	movlw	0
 12263  00202C  1401               	andwf	___ftpack@arg,w,c
 12264  00202E  6E06               	movwf	??___ftpack& (0+255),c
 12265  002030  0E00               	movlw	0
 12266  002032  1402               	andwf	___ftpack@arg+1,w,c
 12267  002034  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12268  002036  0EFE               	movlw	254
 12269  002038  1403               	andwf	___ftpack@arg+2,w,c
 12270  00203A  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12271  00203C  5006               	movf	??___ftpack,w,c
 12272  00203E  1007               	iorwf	??___ftpack+1,w,c
 12273  002040  1008               	iorwf	??___ftpack+2,w,c
 12274  002042  B4D8               	btfsc	status,2,c
 12275  002044  D00C               	goto	i2l2966
 12276  002046  D7EC               	goto	i2l2958
 12277  002048                     i2l2962:
 12278  002048  2A04               	incf	___ftpack@exp,f,c
 12279  00204A  0E01               	movlw	1
 12280  00204C  2601               	addwf	___ftpack@arg,f,c
 12281  00204E  0E00               	movlw	0
 12282  002050  2202               	addwfc	___ftpack@arg+1,f,c
 12283  002052  0E00               	movlw	0
 12284  002054  2203               	addwfc	___ftpack@arg+2,f,c
 12285  002056  90D8               	bcf	status,0,c
 12286  002058  3203               	rrcf	___ftpack@arg+2,f,c
 12287  00205A  3202               	rrcf	___ftpack@arg+1,f,c
 12288  00205C  3201               	rrcf	___ftpack@arg,f,c
 12289  00205E                     i2l2966:
 12290  00205E  0E00               	movlw	0
 12291  002060  1401               	andwf	___ftpack@arg,w,c
 12292  002062  6E06               	movwf	??___ftpack& (0+255),c
 12293  002064  0E00               	movlw	0
 12294  002066  1402               	andwf	___ftpack@arg+1,w,c
 12295  002068  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12296  00206A  0EFF               	movlw	255
 12297  00206C  1403               	andwf	___ftpack@arg+2,w,c
 12298  00206E  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12299  002070  5006               	movf	??___ftpack,w,c
 12300  002072  1007               	iorwf	??___ftpack+1,w,c
 12301  002074  1008               	iorwf	??___ftpack+2,w,c
 12302  002076  B4D8               	btfsc	status,2,c
 12303  002078  D006               	goto	i2l2970
 12304  00207A  D7E6               	goto	i2l2962
 12305  00207C                     i2l2968:
 12306  00207C  0604               	decf	___ftpack@exp,f,c
 12307  00207E  90D8               	bcf	status,0,c
 12308  002080  3601               	rlcf	___ftpack@arg,f,c
 12309  002082  3602               	rlcf	___ftpack@arg+1,f,c
 12310  002084  3603               	rlcf	___ftpack@arg+2,f,c
 12311  002086                     i2l2970:
 12312  002086  BE02               	btfsc	___ftpack@arg+1,7,c
 12313  002088  D003               	goto	i2l703
 12314  00208A  0E02               	movlw	2
 12315  00208C  6004               	cpfslt	___ftpack@exp,c
 12316  00208E  D7F6               	goto	i2l2968
 12317  002090                     i2l703:
 12318  002090  A004               	btfss	___ftpack@exp,0,c
 12319  002092  9E02               	bcf	___ftpack@arg+1,7,c
 12320  002094  90D8               	bcf	status,0,c
 12321  002096  3204               	rrcf	___ftpack@exp,f,c
 12322  002098  5004               	movf	___ftpack@exp,w,c
 12323  00209A  1203               	iorwf	___ftpack@arg+2,f,c
 12324  00209C  5005               	movf	___ftpack@sign,w,c
 12325  00209E  A4D8               	btfss	status,2,c
 12326  0020A0  8E03               	bsf	___ftpack@arg+2,7,c
 12327  0020A2  C001  F001         	movff	___ftpack@arg,?___ftpack
 12328  0020A6  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 12329  0020AA  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 12330  0020AE  0012               	return	
 12331  0020B0                     __end_of___ftpack:
 12332                           	opt stack 0
 12333                           pclatu	equ	0xFFB
 12334                           pclath	equ	0xFFA
 12335                           tblptru	equ	0xFF8
 12336                           tblptrh	equ	0xFF7
 12337                           tblptrl	equ	0xFF6
 12338                           tablat	equ	0xFF5
 12339                           prodh	equ	0xFF4
 12340                           prodl	equ	0xFF3
 12341                           intcon	equ	0xFF2
 12342                           intcon2	equ	0xFF1
 12343                           intcon3	equ	0xFF0
 12344                           postinc0	equ	0xFEE
 12345                           fsr0h	equ	0xFEA
 12346                           fsr0l	equ	0xFE9
 12347                           wreg	equ	0xFE8
 12348                           fsr1h	equ	0xFE2
 12349                           fsr1l	equ	0xFE1
 12350                           indf2	equ	0xFDF
 12351                           postinc2	equ	0xFDE
 12352                           postdec2	equ	0xFDD
 12353                           fsr2h	equ	0xFDA
 12354                           fsr2l	equ	0xFD9
 12355                           status	equ	0xFD8
 12356                           
 12357 ;; *************** function ___awdiv *****************
 12358 ;; Defined at:
 12359 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12360 ;; Parameters:    Size  Location     Type
 12361 ;;  dividend        2    6[COMRAM] int 
 12362 ;;  divisor         2    8[COMRAM] int 
 12363 ;; Auto vars:     Size  Location     Type
 12364 ;;  quotient        2   12[COMRAM] int 
 12365 ;;  sign            1   11[COMRAM] unsigned char 
 12366 ;;  counter         1   10[COMRAM] unsigned char 
 12367 ;; Return value:  Size  Location     Type
 12368 ;;                  2    6[COMRAM] int 
 12369 ;; Registers used:
 12370 ;;		wreg, status,2, status,0
 12371 ;; Tracked objects:
 12372 ;;		On entry : 0/0
 12373 ;;		On exit  : 0/0
 12374 ;;		Unchanged: 0/0
 12375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12376 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12377 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12379 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12380 ;;Total ram usage:        8 bytes
 12381 ;; Hardware stack levels used:    1
 12382 ;; This function calls:
 12383 ;;		Nothing
 12384 ;; This function is called by:
 12385 ;;		_dec_to_hex
 12386 ;;		_servo_rotate0
 12387 ;;		_servo_rotate1
 12388 ;;		_servo_rotate2
 12389 ;; This function uses a non-reentrant model
 12390 ;;
 12391                           
 12392                           	psect	text65
 12393  002476                     __ptext65:
 12394                           	opt stack 0
 12395  002476                     ___awdiv:
 12396                           	opt stack 24
 12397                           
 12398                           ;incstack = 0
 12399  002476  0E00               	movlw	0
 12400  002478  6E0C               	movwf	___awdiv@sign,c
 12401  00247A  AE0A               	btfss	___awdiv@divisor+1,7,c
 12402  00247C  D006               	goto	i2l3762
 12403  00247E  6C09               	negf	___awdiv@divisor,c
 12404  002480  1E0A               	comf	___awdiv@divisor+1,f,c
 12405  002482  B0D8               	btfsc	status,0,c
 12406  002484  2A0A               	incf	___awdiv@divisor+1,f,c
 12407  002486  0E01               	movlw	1
 12408  002488  6E0C               	movwf	___awdiv@sign,c
 12409  00248A                     i2l3762:
 12410  00248A  AE08               	btfss	___awdiv@dividend+1,7,c
 12411  00248C  D006               	goto	i2l3768
 12412  00248E  6C07               	negf	___awdiv@dividend,c
 12413  002490  1E08               	comf	___awdiv@dividend+1,f,c
 12414  002492  B0D8               	btfsc	status,0,c
 12415  002494  2A08               	incf	___awdiv@dividend+1,f,c
 12416  002496  0E01               	movlw	1
 12417  002498  1A0C               	xorwf	___awdiv@sign,f,c
 12418  00249A                     i2l3768:
 12419  00249A  0E00               	movlw	0
 12420  00249C  6E0E               	movwf	___awdiv@quotient+1,c
 12421  00249E  0E00               	movlw	0
 12422  0024A0  6E0D               	movwf	___awdiv@quotient,c
 12423  0024A2  5009               	movf	___awdiv@divisor,w,c
 12424  0024A4  100A               	iorwf	___awdiv@divisor+1,w,c
 12425  0024A6  B4D8               	btfsc	status,2,c
 12426  0024A8  D01C               	goto	i2l3790
 12427  0024AA  0E01               	movlw	1
 12428  0024AC  6E0B               	movwf	___awdiv@counter,c
 12429  0024AE  D004               	goto	i2l3776
 12430  0024B0                     i2l3774:
 12431  0024B0  90D8               	bcf	status,0,c
 12432  0024B2  3609               	rlcf	___awdiv@divisor,f,c
 12433  0024B4  360A               	rlcf	___awdiv@divisor+1,f,c
 12434  0024B6  2A0B               	incf	___awdiv@counter,f,c
 12435  0024B8                     i2l3776:
 12436  0024B8  AE0A               	btfss	___awdiv@divisor+1,7,c
 12437  0024BA  D7FA               	goto	i2l3774
 12438  0024BC                     i2l3778:
 12439  0024BC  90D8               	bcf	status,0,c
 12440  0024BE  360D               	rlcf	___awdiv@quotient,f,c
 12441  0024C0  360E               	rlcf	___awdiv@quotient+1,f,c
 12442  0024C2  5009               	movf	___awdiv@divisor,w,c
 12443  0024C4  5C07               	subwf	___awdiv@dividend,w,c
 12444  0024C6  500A               	movf	___awdiv@divisor+1,w,c
 12445  0024C8  5808               	subwfb	___awdiv@dividend+1,w,c
 12446  0024CA  A0D8               	btfss	status,0,c
 12447  0024CC  D005               	goto	i2l3786
 12448  0024CE  5009               	movf	___awdiv@divisor,w,c
 12449  0024D0  5E07               	subwf	___awdiv@dividend,f,c
 12450  0024D2  500A               	movf	___awdiv@divisor+1,w,c
 12451  0024D4  5A08               	subwfb	___awdiv@dividend+1,f,c
 12452  0024D6  800D               	bsf	___awdiv@quotient,0,c
 12453  0024D8                     i2l3786:
 12454  0024D8  90D8               	bcf	status,0,c
 12455  0024DA  320A               	rrcf	___awdiv@divisor+1,f,c
 12456  0024DC  3209               	rrcf	___awdiv@divisor,f,c
 12457  0024DE  2E0B               	decfsz	___awdiv@counter,f,c
 12458  0024E0  D7ED               	goto	i2l3778
 12459  0024E2                     i2l3790:
 12460  0024E2  500C               	movf	___awdiv@sign,w,c
 12461  0024E4  B4D8               	btfsc	status,2,c
 12462  0024E6  D004               	goto	i2l3794
 12463  0024E8  6C0D               	negf	___awdiv@quotient,c
 12464  0024EA  1E0E               	comf	___awdiv@quotient+1,f,c
 12465  0024EC  B0D8               	btfsc	status,0,c
 12466  0024EE  2A0E               	incf	___awdiv@quotient+1,f,c
 12467  0024F0                     i2l3794:
 12468  0024F0  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 12469  0024F4  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 12470  0024F8  0012               	return	
 12471  0024FA                     __end_of___awdiv:
 12472                           	opt stack 0
 12473                           pclatu	equ	0xFFB
 12474                           pclath	equ	0xFFA
 12475                           tblptru	equ	0xFF8
 12476                           tblptrh	equ	0xFF7
 12477                           tblptrl	equ	0xFF6
 12478                           tablat	equ	0xFF5
 12479                           prodh	equ	0xFF4
 12480                           prodl	equ	0xFF3
 12481                           intcon	equ	0xFF2
 12482                           intcon2	equ	0xFF1
 12483                           intcon3	equ	0xFF0
 12484                           postinc0	equ	0xFEE
 12485                           fsr0h	equ	0xFEA
 12486                           fsr0l	equ	0xFE9
 12487                           wreg	equ	0xFE8
 12488                           fsr1h	equ	0xFE2
 12489                           fsr1l	equ	0xFE1
 12490                           indf2	equ	0xFDF
 12491                           postinc2	equ	0xFDE
 12492                           postdec2	equ	0xFDD
 12493                           fsr2h	equ	0xFDA
 12494                           fsr2l	equ	0xFD9
 12495                           status	equ	0xFD8
 12496                           pclatu	equ	0xFFB
 12497                           pclath	equ	0xFFA
 12498                           tblptru	equ	0xFF8
 12499                           tblptrh	equ	0xFF7
 12500                           tblptrl	equ	0xFF6
 12501                           tablat	equ	0xFF5
 12502                           prodh	equ	0xFF4
 12503                           prodl	equ	0xFF3
 12504                           intcon	equ	0xFF2
 12505                           intcon2	equ	0xFF1
 12506                           intcon3	equ	0xFF0
 12507                           postinc0	equ	0xFEE
 12508                           fsr0h	equ	0xFEA
 12509                           fsr0l	equ	0xFE9
 12510                           wreg	equ	0xFE8
 12511                           fsr1h	equ	0xFE2
 12512                           fsr1l	equ	0xFE1
 12513                           indf2	equ	0xFDF
 12514                           postinc2	equ	0xFDE
 12515                           postdec2	equ	0xFDD
 12516                           fsr2h	equ	0xFDA
 12517                           fsr2l	equ	0xFD9
 12518                           status	equ	0xFD8
 12519                           
 12520                           	psect	text66
 12521  000000                     __ptext66:
 12522                           	opt stack 0
 12523                           pclatu	equ	0xFFB
 12524                           pclath	equ	0xFFA
 12525                           tblptru	equ	0xFF8
 12526                           tblptrh	equ	0xFF7
 12527                           tblptrl	equ	0xFF6
 12528                           tablat	equ	0xFF5
 12529                           prodh	equ	0xFF4
 12530                           prodl	equ	0xFF3
 12531                           intcon	equ	0xFF2
 12532                           intcon2	equ	0xFF1
 12533                           intcon3	equ	0xFF0
 12534                           postinc0	equ	0xFEE
 12535                           fsr0h	equ	0xFEA
 12536                           fsr0l	equ	0xFE9
 12537                           wreg	equ	0xFE8
 12538                           fsr1h	equ	0xFE2
 12539                           fsr1l	equ	0xFE1
 12540                           indf2	equ	0xFDF
 12541                           postinc2	equ	0xFDE
 12542                           postdec2	equ	0xFDD
 12543                           fsr2h	equ	0xFDA
 12544                           fsr2l	equ	0xFD9
 12545                           status	equ	0xFD8
 12546                           
 12547                           	psect	rparam
 12548  0000                     pclatu	equ	0xFFB
 12549                           pclath	equ	0xFFA
 12550                           tblptru	equ	0xFF8
 12551                           tblptrh	equ	0xFF7
 12552                           tblptrl	equ	0xFF6
 12553                           tablat	equ	0xFF5
 12554                           prodh	equ	0xFF4
 12555                           prodl	equ	0xFF3
 12556                           intcon	equ	0xFF2
 12557                           intcon2	equ	0xFF1
 12558                           intcon3	equ	0xFF0
 12559                           postinc0	equ	0xFEE
 12560                           fsr0h	equ	0xFEA
 12561                           fsr0l	equ	0xFE9
 12562                           wreg	equ	0xFE8
 12563                           fsr1h	equ	0xFE2
 12564                           fsr1l	equ	0xFE1
 12565                           indf2	equ	0xFDF
 12566                           postinc2	equ	0xFDE
 12567                           postdec2	equ	0xFDD
 12568                           fsr2h	equ	0xFDA
 12569                           fsr2l	equ	0xFD9
 12570                           status	equ	0xFD8
 12571                           
 12572                           	psect	temp
 12573  00007E                     btemp:
 12574                           	opt stack 0
 12575  00007E                     	ds	1
 12576  0000                     int$flags	set	btemp
 12577                           pclatu	equ	0xFFB
 12578                           pclath	equ	0xFFA
 12579                           tblptru	equ	0xFF8
 12580                           tblptrh	equ	0xFF7
 12581                           tblptrl	equ	0xFF6
 12582                           tablat	equ	0xFF5
 12583                           prodh	equ	0xFF4
 12584                           prodl	equ	0xFF3
 12585                           intcon	equ	0xFF2
 12586                           intcon2	equ	0xFF1
 12587                           intcon3	equ	0xFF0
 12588                           postinc0	equ	0xFEE
 12589                           fsr0h	equ	0xFEA
 12590                           fsr0l	equ	0xFE9
 12591                           wreg	equ	0xFE8
 12592                           fsr1h	equ	0xFE2
 12593                           fsr1l	equ	0xFE1
 12594                           indf2	equ	0xFDF
 12595                           postinc2	equ	0xFDE
 12596                           postdec2	equ	0xFDD
 12597                           fsr2h	equ	0xFDA
 12598                           fsr2l	equ	0xFD9
 12599                           status	equ	0xFD8


Data Sizes:
    Strings     458
    Constant    99
    Data        2
    BSS         76
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     42     112
    BANK1           256     12      12
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_24(CODE[15]), STR_23(CODE[16]), STR_22(CODE[22]), STR_21(CODE[25]), 
		 -> STR_20(CODE[24]), STR_19(CODE[23]), STR_18(CODE[18]), STR_17(CODE[23]), 
		 -> STR_16(CODE[10]), STR_15(CODE[18]), STR_14(CODE[18]), STR_13(CODE[18]), 
		 -> STR_12(CODE[18]), STR_11(CODE[18]), STR_10(CODE[18]), STR_9(CODE[18]), 
		 -> STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), 
		 -> STR_4(CODE[23]), STR_3(CODE[10]), STR_2(CODE[17]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _servo_rotate2->___awdiv
    _servo_rotate1->___awdiv
    _servo_rotate0->___awdiv
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_bottle_time
    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   43886
                                             10 BANK1      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    5668
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    5668
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    6823
                                             40 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    10    10      0    1155
                                             19 BANK0     10    10      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    5668
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    6716
                                             40 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          2     0      2    5776
                                             40 BANK0      2     0      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    6092
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    5473
                                             28 BANK0     12     4      8
                                              0 BANK1     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     980
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   0     0      0     904
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     904
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 21    21      0   79599
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
                      _servo_rotate1
                      _servo_rotate2
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  10    10      0     429
                                              3 COMRAM    10    10      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            25    23      2    2276
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate2                                       10     8      2    1802
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate1                                       10     8      2    1802
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2    2186
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     291
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69967
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58299
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   19062
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31630
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8439
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     573
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     812
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
       i2___wmul (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   _servo_rotate1
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   _servo_rotate2
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C       C       7        4.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      70       5       87.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F9      34        0.0%
DATA                 0      0      F9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 28 03:45:54 2017

                ___altoft@exp 003F            i2_I2C_Master_Start 2C38            i2_I2C_Master_Write 2C16  
               ___altoft@sign 0040                            l34 2BAE                ?_emergencystop 0001  
                ___awdiv@sign 000C           ___wmul@multiplicand 00D6            i2___lwdiv@dividend 0001  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                ___ftadd@exp1 0027                  ___ftadd@exp2 0026                  ___ftadd@sign 0025  
                         l441 0740                           l368 2B76                           l833 1F40  
                         l886 2568                           l896 26AA                  __CFG_CPB$OFF 000000  
                         _PEN 007E2A                  __CFG_CPD$OFF 000000                           _SEN 007E28  
                         _PSA 007EAB           ?i2_I2C_Master_Start 0001           ?i2_I2C_Master_Write 0002  
                         _exp 0CE2                           _log 14A2                           _isr 0008  
                         _pow 120E                  ___awmod@sign 00D9                           prod 000FF3  
                         wreg 000FE8                  ?_bottle_time 00EC                  __CFG_LVP$OFF 000000  
                ___ftdiv@cntr 0012                  ___ftdiv@sign 0017                  __CFG_WDT$OFF 000000  
                        l5020 10F0                          l5100 1922                          l5014 10B2  
                        l5102 1928                          l5110 1942                          l5032 116C  
                        l5008 1078                          l5104 192E                          l5112 1970  
                        l5026 112E                          l5106 1934                          l5044 11CA  
                        l5038 11AA                          l3560 13C0                          l3810 22E0  
                        l3388 2AB4                          l3564 13D6                          l3830 234C  
                        l3822 232A                          l3814 22F4                          l3806 22D0  
                        l3574 1448                          l5094 1910                          l3840 1EC4  
                        l3816 2300                          l5096 1916                          l3842 1ED4  
                        l3818 2306                          l3826 2338                          l4810 070E  
                        l5098 191C                          l3852 1F2E                          l3844 1EDA  
                        l4902 0992                          l4822 0778                          l4806 0708  
                        l4744 2518                          l4728 2ADC                          l4904 09A4  
                        l4840 07D0                          l4746 2524                          l4906 09AC  
                        l4842 07D6                          l4826 0794                          l4756 255A  
                        l4748 252A                          l4772 269C                          l4764 2666  
                        l4828 079A                          l4908 09B8                          ?_exp 0049  
                        ?_log 0034                          l4766 2672                          l4870 0882  
                        l4782 0630                          l4950 1F74                          l4768 2678  
                        l4864 0840                          l4856 080C                          l4792 0660  
                        l4944 1F54                          l4882 08B8                          l4858 081E  
                        l4786 0644                          l4884 08C4                          l4892 08F2  
                        l4876 089C                          l4868 0878                          l4788 0656  
                        l4956 1F94                          l4964 1FB6                          ?_isr 0001  
                        l4894 08F8                          l4798 0690                          l4966 1FDE  
                        l4896 0944                          l4888 08DE                          l4992 1C72  
                        l4988 1C68                          l4998 1C92                          ?_pow 0052  
          i2_read_colorsensor 1B52                          STR_1 FFDC                          STR_2 FF8A  
                        STR_3 FFEA                          STR_4 FE93                          STR_5 FEAA  
                        STR_6 FFAC                          STR_7 FF9B                          STR_8 FEE9  
                        STR_9 FF0D                          _T0CS 007EAD                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u2920 2AB2                          u3715 2744  
                        _RCEN 007E2B                          u4807 2706                          u4817 270E  
                        i2l34 2BC2                          u4757 197E                          u4767 282A  
                        u4777 2866                          u4787 26D4                          u4797 26DC  
                        _TMR0 000FD6                          _RSEN 007E29                          _main 18A4  
                ___ftpack@arg 0001                          _keys FDD1                  ___ftpack@exp 0004  
                        _time 009E                          fsr0h 000FEA                          fsr1h 000FE2  
          i2___lwdiv@quotient 0005                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 007E                          exp@x 0049                          log@x 0034  
                        isr@i 0075          ??i2_I2C_Master_Start 0002          ??i2_I2C_Master_Write 0004  
                        pow@x 0052                          pow@y 0055                          prodh 000FF4  
                        prodl 000FF3                          start 000E           ?i2_read_colorsensor 0001  
               __CFG_IESO$OFF 000000               __end_ofi2_putch 2C00                 __CFG_MCLRE$ON 000000  
                ___ftmul@cntr 001A                  ___param_bank 000000                  ___ftmul@sign 001B  
                 i2_lcdNibble 2872                 ?_bottle_count 0001                  ___fttol@exp1 0036  
                       ??_exp 004C                         ??_log 0037                  ___fttol@lval 0032  
                       ??_isr 00C4                         ??_pow 0058                 _eskacap_count 00AB  
            ?_I2C_Master_Init 00E1              ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001  
            ?_I2C_Master_Stop 0001                         ?_main 0001                         _ACKEN 007E2C  
                       _ACKDT 007E2D               __end_of___awdiv 24FA               __end_of___ftadd 1076  
                       STR_10 FEFB                         STR_11 FF1F                         STR_12 FF31  
                       STR_20 FE4D                         STR_13 FF55                         STR_21 FE34  
                       STR_14 FF43                         STR_22 FEC1                         STR_23 FFBD  
                       STR_15 FF67                         STR_16 FFF4                         STR_24 FFCD  
                       STR_25 FF79                         STR_17 FE7C                         STR_18 FED7  
                       STR_19 FE65               __end_of___awmod 2356               __end_of___ftdiv 1A74  
             __end_of___ftneg 2B56               __end_of___lldiv 1F52               __end_of___ftmul 18A4  
             ___awdiv@divisor 0009               __end_of___ftsub 2942               __end_of___fttol 17B0  
                       _T0PS0 007EA8                         _T0PS1 007EA9                         _T0PS2 007EAA  
             __end_of___lwdiv 2572               __end_of___lwmod 26B4                         i2l300 04C6  
                       i2l302 0502                         i2l401 2130                         i2l313 05E6  
                       i2l404 215A                         i2l441 0AC2                         i2l265 01FC  
                       i2l282 041A                         i2l268 01F8                         i2l293 058A  
                       i2l277 0186                         i2l269 005C                         i2l382 22B2  
                       i2l390 21DC                         i2l294 0586                         i2l703 2090  
                       i2l376 2264                         i2l393 2206                         i2l730 0F38  
                       i2l298 048A                         i2l379 2288                         i2l387 21B8  
                       i2l741 0FE8                         i2l750 1004                         i2l726 0F0E  
                       i2l398 210C                         i2l761 1A42                         i2l923 1376  
                       i2l918 1246                         i2l783 2B48               ___awdiv@counter 000B  
                       i2l886 2818                         i2l896 28F8          ??i2_read_colorsensor 0004  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
             ??_servo_rotate0 0011               ??_servo_rotate1 0011               ??_servo_rotate2 0011  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
           read_colorsensor@i 00DF                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
                ___lltoft@exp 0011               __end_of_lcdInst 2BF4                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                         _nRBPU 007F8F                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initLCD 2872  
              __CFG_EBTRB$OFF 000000                    i2isdigit@c 0003                 ___awtoft@sign 000C  
             __end_of_dpowers FDEC                         _color 0096                         _floor 1A74  
                       _etime 00B1                         _ldexp 1DD0                         _frexp 2356  
                       _errno 00A7               __end_of_isdigit 2AE6                 ___ftpack@sign 0005  
                       _putch 2BD4                         _stime 007C                         pclath 000FFA  
                       tablat 000FF5                 _eskalbl_count 00AF                         pow@yi 005F  
             __end_of_timeset FDFB              __end_ofi2___wmul 2B32               __end_of_standby 29EE  
                       status 000FD8                __CFG_PBADEN$ON 000000                 i2printf@width 001A  
                 exp@exponent 004F              __end_ofi2_printf 0CE2            __size_ofi2___lwdiv 0052  
          __size_ofi2___lwmod 0042                   ldexp@newexp 0037               __initialization 2942  
                 log@exponent 0037            __size_ofi2_lcdInst 000C               ??_emergencystop 00EC  
              ??_bottle_count 00EC                  __end_of_main 198E                  __end_of_keys FDE2  
                  i2printf@ap 0014            __size_ofi2_isdigit 001E                        ??_main 010A  
               ___fttol@sign1 0031                 __activetblptr 000002             ?_I2C_Master_Start 0001  
           ?_I2C_Master_Write 00D5                servo_rotate0@i 0015                servo_rotate0@j 0017  
              servo_rotate1@i 0015                servo_rotate1@j 0017                servo_rotate2@i 0015  
              servo_rotate2@j 0017            ??_I2C_Master_Start 00D5                        _ADCON0 000FC2  
                      _ADCON1 000FC1            ??_I2C_Master_Write 00D7                        ?_floor 0041  
                      ?_ldexp 0034                        ?_frexp 0001              __end_of___altoft 25EA  
                      _T08BIT 007EAE              ___awdiv@dividend 0007               i2lcdNibble@data 0002  
            __end_of___awtoft 29B8                        ?_putch 0001              __end_of___ftpack 20B0  
             i2lcdNibble@temp 0001              __end_of___lltoft 27D0                        _INT0IE 007F94  
                      _INT0IF 007F91                        _INT1IE 007F83                        _INT1IF 007F80  
                      _INT2IE 007F84                        _INT2IF 007F81                        i2l1081 0D98  
                      i2l3010 0F1C                        i2l1082 0EBC                        i2l1092 1B44  
                      i2l3102 1842                        i2l3040 0FA2                        i2l3032 0F76  
                      i2l3016 0F46                        i2l3112 186A                        i2l3050 0FD6  
                      i2l3042 0FAC                        i2l3052 0FE0                        i2l3044 0FB4  
                      i2l3108 185A                        i2l3124 2416                        i2l3038 0F98  
                      i2l3134 2472                        i2l4102 2626                        i2l3128 2446  
                      i2l3144 16E8                        i2l3320 1ACA                        i2l3312 1AA2  
                      i2l3058 1020                        i2l3330 1DBA                        i2l3162 174E  
                      i2l4210 1B86                        i2l3420 2786                        i2l3244 19DE  
                      i2l3068 1050                        i2l3084 1800                        i2l3180 179E  
                      i2l3172 1776                        i2l3316 1AB0                        i2l4116 15DA  
                      i2l4108 2642                        i2l4140 2258                        i2l3238 19B6  
                      i2l3078 17D8                        i2l3174 1782                        i2l3166 175E  
                      i2l4134 2240                        i2l4310 0B6A                        i2l4214 1B96  
                      i2l3264 1A1C                        i2l3328 1D3E                        i2l3176 1788  
                      i2l3192 237E                        i2l3504 0D6A                        i2l4128 16AA  
                      i2l4312 0B7A                        i2l4240 09F0                        i2l4224 1BEA  
                      i2l3418 277A                        i2l3282 2918                        i2l3098 1832  
                      i2l3362 1E5E                        i2l3346 1E2E                        i2l3338 1DE8  
                      i2l4146 227C                        i2l4170 2124                        i2l4330 0BD6  
                      i2l4322 0BB8                        i2l4242 09FE                        i2l4164 2100  
                      i2l4324 0BC0                        i2l4260 0A90                        i2l4252 0A32  
                      i2l4236 09E0                        i2l3294 2994                        i2l3358 1E52  
                      i2l3526 0E92                        i2l3470 14BE                        i2l4182 2194  
                      i2l4158 20E8                        i2l4350 0C64                        i2l4342 0C08  
                      i2l4318 0B94                        i2l4246 0A04                        i2l4510 02CE  
                      i2l4502 0276                        i2l4360 0CC0                        i2l4336 0BEC  
                      i2l4280 0B0A                        i2l4264 0A94                        i2l4520 033C  
                      i2l4504 028C                        i2l4512 02E4                        i2l3730 126C  
                      i2l4098 261E                        i2l4194 21D0                        i2l4338 0BF4  
                      i2l4346 0C1A                        i2l4282 0B0E                        i2l4362 0CC8  
                      i2l4610 05C8                        i2l4514 02FA                        i2l4522 0352  
                      i2l4506 02A2                        i2l4450 00AA                        i2l3492 0CFA  
                      i2l3476 14E0                        i2l3724 1254                        i2l4188 21AC  
                      i2l4348 0C20                        i2l4356 0CAA                        i2l4276 0AF0  
                      i2l4604 05B2                        i2l4540 0412                        i2l4516 0310  
                      i2l4508 02B8                        i2l4532 03C4                        i2l4444 0094  
                      i2l4428 0058                        i2l3742 12F2                        i2l4358 0CBA  
                      i2l4294 0B3A                        i2l4614 05D0                        i2l4518 0326  
                      i2l4542 0416                        i2l4454 00D8                        i2l2960 202A  
                      i2l3904 27E6                        i2l4296 0B3E                        i2l4552 044E  
                      i2l4480 01A6                        i2l4456 00DC                        i2l4448 00A0  
                      i2l3762 248A                        i2l2970 2086                        i2l2962 2048  
                      i2l2954 2012                        i2l3498 0D32                        i2l3738 12D0  
                      i2l3906 27EE                        i2l4482 01B4                        i2l3916 280E  
                      i2l3908 27F2                        i2l3932 28EE                        i2l3924 28CE  
                      i2l4580 0520                        i2l4572 04E4                        i2l4564 04A8  
                      i2l4556 046C                        u232_41 0EDA                        i2l3774 24B0  
                      i2l3790 24E2                        i2l2966 205E                        i2l2958 2020  
                      i2l3926 28D6                        i2l4478 0198                        i2l4486 01BA  
                      i2l3776 24B8                        i2l3768 249A                        i2l2968 207C  
                      i2l3928 28DA                        i2l3794 24F0                        i2l3786 24D8  
                      i2l3778 24BC                        i2l2994 2594                        i2l4586 0540  
                      i2l2996 25A0                        i2l3876 2B06                        u233_41 0EEE  
                      i2l3894 2B8E                        u253_41 17C0                        u262_41 16CC  
                      u255_41 17E8                        u274_41 199E                        u276_41 19C6  
                      _TMR0IE 007F95                        _TMR0IF 007F92                     ??i2_putch 0003  
                      _TMR0ON 007EAF                        _SSPADD 000FC8                        _TRISC3 007CA3  
                      _TRISC4 007CA4                        _SSPBUF 000FC9                __CFG_XINST$OFF 000000  
           ?_read_colorsensor 0001                        ___ftge 23E6                  _yopcap_count 00BD  
                      ___wmul 2A24            ??_read_colorsensor 00D7                     ??___awdiv 000B  
                   ??___ftadd 0022                __CFG_STVREN$ON 000000                     ??___awmod 00D8  
                   ??___ftdiv 000F                     ??___ftneg 0004                     ??___lldiv 00DC  
                   ??___ftmul 0013                     ??___ftsub 002E                     ??___fttol 002C  
                   ??___lwdiv 00D8                     ??___lwmod 00DF                 dec_to_hex@num 0063  
                      clear_0 2960                        clear_1 296C              ___awdiv@quotient 000D  
             ___awmod@divisor 00D6               ___awmod@counter 00D8                     ??_lcdInst 00D6  
                      _printf 0622                        floor@i 0044                        floor@x 0041  
       ___ftmul@f3_as_product 0017                     ??_initLCD 00D7                     ??_isdigit 00D4  
           __end_ofi2___lwdiv 2822                  __mediumconst FDD0             __end_ofi2___lwmod 2902  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_standby 00EC             __end_ofi2_lcdInst 2C0C                  _yoplbl_count 00C1  
           __end_ofi2_isdigit 2B96              __end_ofexp@coeff FE19          __size_of_bottle_time 0036  
            __end_oflog@coeff FE34                    __accesstop 0080       __end_of__initialization 2972  
                  ___altoft@c 0037                    ___ftadd@f1 001C                    ___ftadd@f2 001F  
                  ___ftge@ff1 0001                    ___ftge@ff2 0004                  eval_poly@res 0031  
               ___rparam_used 000001                    ___ftdiv@f1 0009                    ___ftdiv@f2 000C  
                  ___ftdiv@f3 0013                    ___ftneg@f1 0001                    ___awtoft@c 0009  
                  ___ftmul@f1 000D                    ___ftmul@f2 0010                    ___ftsub@f1 0028  
                  ___ftsub@f2 002B                    ___fttol@f1 0028            i2___lwmod@dividend 0008  
              __pcstackCOMRAM 0001                  __pidataBANK0 2C40                    ___lltoft@c 0009  
               __end_of_floor 1B52                 __end_of_ldexp 1E96                 __end_of_frexp 23E6  
               __end_of_putch 2BE4                   i2printf@idx 0013                   i2printf@val 0017  
          __size_of_date_time 00D2           servo_rotate0@degree 000F           servo_rotate1@degree 000F  
         servo_rotate2@degree 000F                     ?i2___wmul 0001            __size_of_lcdNibble 0060  
                 i2putch@data 0003                     ?i2_printf 000D   __size_of_I2C_ColorSens_Init 0034  
                     ??_floor 0044                       ??_ldexp 0039                       ??_frexp 0006  
        __end_of_bottle_count 120E                    _dec_to_hex 15C0                       ??_putch 00D6  
                  __pbssBANK0 0080            __size_of_eval_poly 00D2             servo_rotate0@duty 0013  
           servo_rotate1@duty 0013             servo_rotate2@duty 0013            __size_of_read_time 0068  
                     ?___ftge 0001                  ?i2_lcdNibble 0001                       ?___wmul 00D4  
                   ?___altoft 0037                     ?___awtoft 0009                     ?___ftpack 0001  
                     ?_printf 00E0            __size_of_operation 00B0                     ?___lltoft 0009  
                  ??i2___wmul 0005                    ??i2_printf 000F                       _SSPCON1 000FC6  
                     _SSPCON2 000FC5                       _SSPSTAT 000FC7             __end_of_date_time 1CFE  
                  _eska_count 00A9                       i2_putch 2BF4             _bottle_count_disp 00EE  
 __size_ofi2_I2C_Master_Start 0008             __end_of_lcdNibble 2714   __size_ofi2_I2C_Master_Write 000A  
               ?_operationend 0001                       __Hparam 0000                       __Lparam 0000  
             __size_of___ftge 0090                       ___awdiv 2476                       ___ftadd 0ECA  
                     ___awmod 22B4                       ___ftdiv 198E                       ___ftneg 2B32  
                     ___lldiv 1E96               __size_of___wmul 0036                       ___ftmul 17B0  
                     ___ftsub 2902                       ___fttol 16BC                       ___lwdiv 24FA  
                     ___lwmod 2652                    _curr_state 00C3                    ??___altoft 003B  
                     __pcinit 2942                    ??___awtoft 000C                    ??___ftpack 0006  
           __end_of_eval_poly 1DD0                       __ramtop 1000                       _lcdInst 2BE4  
                  ??___lltoft 000D                       __ptext0 18A4                       __ptext1 29B8  
                     __ptext2 2B96                       __ptext3 1F52                       __ptext4 1384  
                     __ptext5 2822                       __ptext6 2B56                       __ptext7 1C2C  
                     __ptext8 2A8E                       __ptext9 29EE               __size_of_printf 03B4  
              dec_to_hex@temp 006B                       _initLCD 2822             __end_of_hexpowers FDF4  
               i2_isdigit$808 0002                       _dpowers FDE2                  __size_of_exp 01E8  
                __size_of_log 011E                       _isdigit 2ABC                  __size_of_isr 061A  
 __size_ofi2_read_colorsensor 00DA                  __size_of_pow 0176              ___awmod@dividend 00D4  
           __end_of_read_time 2652      __size_of_I2C_Master_Init 0060      __size_of_I2C_Master_Read 002E  
    __size_of_I2C_Master_Wait 0014                    date_time@i 00EC      __size_of_I2C_Master_Stop 0008  
       __end_of_servo_rotate0 22B4         __end_of_servo_rotate1 2208         __end_of_servo_rotate2 215C  
                     _timeset FDF4                       _standby 29B8                   ?_dec_to_hex 0063  
              __pintcode_body 0012          end_of_initialization 2972                       exp@sign 0051  
               __Lmediumconst FDD0                       int_func 0012           i2___wmul@multiplier 0001  
           __end_of_operation 2002                _operation_disp 00B5                _operation_time 00B7  
              ??_operationend 00EC     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 00D8                       pow@sign 005E               ___lldiv@counter 00E0  
                     printf@c 0109                       printf@f 00E0              I2C_Master_Init@c 00E1  
            I2C_Master_Read@a 00D5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE         __end_of_emergencystop 2B78                     _PORTAbits 000F80  
                   _PORTCbits 000F82         __size_of_bottle_count 0198     __size_of_read_colorsensor 011E  
   read_colorsensor@color_low 00D9             i2_I2C_Master_Read 2AE6             i2_I2C_Master_Wait 2BC2  
           i2_I2C_Master_Stop 2C30             i2___lwdiv@divisor 0003                     i2___lwdiv 27D0  
                   i2___lwmod 28C0             i2___lwdiv@counter 0007            ?i2_I2C_Master_Read 0001  
          ?i2_I2C_Master_Wait 0001  i2read_colorsensor@color_comb 000A  i2read_colorsensor@color_high 0008  
          ?i2_I2C_Master_Stop 0001                    _start_time 007A                     i2_lcdInst 2C00  
                 ___ftdiv@exp 0016                   printf@width 0107           ??i2_I2C_Master_Read 0002  
                   i2_isdigit 2B78           ??i2_I2C_Master_Wait 0001           ??i2_I2C_Master_Stop 0002  
                 ___ftmul@exp 0016                  _bottle_count 1076                __end_of___ftge 2476  
              __end_of___wmul 2A5A           __size_of_dec_to_hex 00FC          __size_ofi2_lcdNibble 004E  
          _total_bottle_count 00B9                 i2lcdInst@data 0003                    floor@expon 0047  
            i2___wmul@product 0005                __end_of_printf 09D6                  i2printf@flag 0019  
   __end_ofi2_I2C_Master_Read 2B0C     __end_ofi2_I2C_Master_Wait 2BD4                  i2printf@prec 0016  
         start_initialization 2942     __end_ofi2_I2C_Master_Stop 2C38                    eval_poly@d 002B  
                  eval_poly@n 002D                    eval_poly@x 0028             __size_ofi2___wmul 0026  
                  ldexp@value 0034                   __end_of_exp 0ECA                   __end_of_log 15C0  
                 __end_of_isr 0622                   __end_of_pow 1384                     i2printf@c 001C  
                   i2printf@f 000D                 ??_bottle_time 00EE         i2I2C_Master_Read@temp 0003  
                  ?i2___lwdiv 0001                    ?i2___lwmod 0008             __size_ofi2_printf 030C  
                  frexp@value 0001             ??_I2C_Master_Init 00E5             ??_I2C_Master_Read 00D5  
           ??_I2C_Master_Wait 00D4                    ?i2_lcdInst 0001             ??_I2C_Master_Stop 00D5  
  read_colorsensor@color_comb 00DD    read_colorsensor@color_high 00DB                    ?i2_isdigit 0001  
                    ??___ftge 0007                      ??___wmul 00D8                   __pdataBANK0 00EE  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 00E8             __size_of___altoft 0078  
                  read_time@i 0004             __size_of___awtoft 0038             __size_of___ftpack 00AE  
           __size_of___lltoft 005C    __end_of_I2C_ColorSens_Init 2A8E                   __pbssCOMRAM 0076  
        __end_of_operationend 2BAE                 __pcstackBANK0 00C4                 __pcstackBANK1 0100  
           i2___lwmod@divisor 000A             i2___lwmod@counter 000C                      ?i2_putch 0001  
         __end_of_bottle_time 2A24              _I2C_Master_Start 2C28           i2I2C_Master_Write@d 0002  
            _I2C_Master_Write 2C0C              _eskacaplbl_count 00AD                     _date_time 1C2C  
            ___lwdiv@dividend 00D4             __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  
               __pmediumconst FDD0                     _lcdNibble 26B4               _yopcaplbl_count 00BF  
                    ?___awdiv 0007                      ?___ftadd 001C                      ?___awmod 00D4  
                    ?___ftdiv 0009                      ?___ftneg 0001                      ?___lldiv 00D4  
                    ?___ftmul 000D                      ?___ftsub 0028                      ?___fttol 0028  
                    ?___lwdiv 00D4                      ?___lwmod 00DB                      ?_lcdInst 0001  
            dec_to_hex@hexnum 006F                      ?_initLCD 0001                      ?_isdigit 0001  
            _read_colorsensor 1384    __size_ofi2_I2C_Master_Read 0026    __size_ofi2_I2C_Master_Wait 0012  
                   _eval_poly 1CFE    __size_ofi2_I2C_Master_Stop 0008                     _hexpowers FDEC  
                    ?_standby 0001              ___lwdiv@quotient 00D9                __size_of_floor 00DE  
              __size_of_ldexp 00C6                __size_of_frexp 0090                  ??_dec_to_hex 0065  
                 ??i2___lwdiv 0005                   ??i2___lwmod 000C                     _read_time 25EA  
              __size_of_putch 0010    __end_ofi2_I2C_Master_Start 2C40    __end_ofi2_I2C_Master_Write 2C20  
                 ??i2_lcdInst 0003                ___wmul@product 00D8                      _LATDbits 000F8C  
                 ??i2_isdigit 0001                    ?_date_time 0001                      i2u308_40 0D72  
                    i2u309_40 0D74                      i2u271_40 23A6                      i2u264_40 1706  
                    i2u271_48 23A8                      i2u344_40 12B8                      i2u264_45 16FE  
                    i2u361_40 2B04                      i2u284_40 1ABC                     _operation 1F52  
                    i2u288_40 1E08                      i2u288_48 1E0A                      i2u490_47 21AE  
                    i2u482_47 03D2                      i2u491_47 21D2                      i2u483_47 05D8  
                    i2u492_47 225A                      i2u484_47 288A                      i2u493_47 227E  
                    i2u485_47 2892                      i2u486_47 28B2                      i2u487_47 28BA  
                    i2u488_47 2102                      i2u489_47 2126              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001            __end_of_dec_to_hex 16BC    __end_ofi2_read_colorsensor 1C2C  
           ___wmul@multiplier 00D4                      i2___wmul 2B0C                 lcdNibble@data 00D5  
                  printf@flag 0106                 lcdNibble@temp 00D4                    printf@prec 0103  
                  ?_eval_poly 0028                      i2_printf 09D6                   _bottle_time 29EE  
         I2C_Master_Read@temp 00D6                     _yop_count 00BB                    ?_read_time 0001  
          dec_to_hex@quotient 0071                   _bottlequeue 0080              __size_ofi2_putch 000C  
                   frexp@eptr 0004                      __Hrparam 0000           i2read_colorsensor@i 000C  
                  ?_operation 0001                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
                 dec_to_hex@i 006D        __size_of_servo_rotate0 00AC        __size_of_servo_rotate1 00AC  
      __size_of_servo_rotate2 00AC               bottle_time@time 00EC              __size_of___awdiv 0084  
            __size_of___ftadd 01AC              __size_of___awmod 00A2              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024         i2___wmul@multiplicand 0003              __size_of___lldiv 00BC  
                    ___altoft 2572              __size_of___ftmul 00F4              __size_of___ftsub 0040  
            __size_of___fttol 00F4              __size_of___lwdiv 0078              __size_of___lwmod 0062  
       __size_of_operationend 0018                      ___awtoft 2980                      ___ftpack 2002  
                    ___lltoft 2774                   _isdigit$808 00D5            i2I2C_Master_Read@a 0002  
            __size_of_lcdInst 0010                      _exp$1248 004C               _I2C_Master_Init 2714  
             _I2C_Master_Read 2A8E              __size_of_initLCD 0050               _I2C_Master_Wait 2BAE  
                    _isr$1340 0073               _I2C_Master_Stop 2C20              __size_of_isdigit 002A  
             ___lwdiv@divisor 00D6               ___lwdiv@counter 00D8                      __ptext10 1076  
                    __ptext11 0622                      __ptext20 2714                      __ptext12 2BD4  
                    __ptext21 1E96                      __ptext13 2ABC                      __ptext30 2BF4  
                    __ptext22 2A5A                      __ptext14 2A24                      __ptext31 2B78  
                    __ptext23 2C0C                      __ptext15 2652                      __ptext40 2C16  
                    __ptext32 28C0                      __ptext24 2C20                      __ptext16 24FA  
                    __ptext41 2C30                      __ptext33 27D0                      __ptext25 2C28  
                    __ptext17 2BE4                      __ptext50 1A74                      __ptext42 2C38  
                    __ptext34 2C00                      __ptext26 2BAE                      __ptext18 26B4  
                    __ptext51 2356                      __ptext43 2AE6                      __ptext35 2872  
                    __ptext19 22B4                      __ptext60 2B32                      __ptext52 16BC  
                    __ptext44 2BC2                      __ptext36 20B0                      __ptext28 1B52  
                    __ptext61 198E                      __ptext53 23E6                      __ptext45 15C0  
                    __ptext37 215C                      __ptext29 09D6                      __ptext62 2980  
                    __ptext54 2572                      __ptext46 120E                      __ptext38 2208  
                    __ptext63 2774                      __ptext55 1CFE                      __ptext47 14A2  
                    __ptext39 25EA                      __ptext64 2002                      __ptext56 2B0C  
                    __ptext48 0CE2                      __ptext65 2476                      __ptext57 17B0  
                    __ptext49 1DD0                      __ptext66 0000                      __ptext58 2902  
                    __ptext59 0ECA                      _end_time 0078              __size_of_standby 0036  
                    _pow$1246 0058                      _pow$1247 005B        __size_of_emergencystop 0022  
               __size_of_main 00EA                      _nodedata 00B3               _dec_to_hex$1244 0065  
             _dec_to_hex$1245 0068                   ??_date_time 00EC                  _operationend 2B96  
               ??i2_lcdNibble 0001                   ??_lcdNibble 00D4                      int$flags 007E  
                   printf@idx 0100                     printf@val 0104                      exp@coeff FDFB  
                    log@coeff FE19              _bottlequeue_head 00A5                     putch@data 00D6  
    __end_of_I2C_Master_Start 2C30              _bottlequeue_tail 0076      __end_of_I2C_Master_Write 2C16  
                  _INTCONbits 000FF2                   ??_eval_poly 002F                      isdigit@c 00D6  
               _servo_rotate0 2208                 _servo_rotate1 215C                 _servo_rotate2 20B0  
                 ??_read_time 0004                      intlevel2 0000              ___lwmod@dividend 00DB  
            ___lldiv@dividend 00D4            _I2C_ColorSens_Init 2A5A      __end_of_read_colorsensor 14A2  
                 ??_operation 00EC           ?_I2C_ColorSens_Init 0001                      printf@ap 0101  
     __end_of_I2C_Master_Init 2774       __end_of_I2C_Master_Read 2ABC       __end_of_I2C_Master_Wait 2BC2  
     __end_of_I2C_Master_Stop 2C28                   lcdInst@data 00D6                 _emergencystop 2B56  
         __end_ofi2_lcdNibble 28C0              ___lldiv@quotient 00DC             I2C_Master_Write@d 00D5  
             ___lwmod@divisor 00DD   i2read_colorsensor@color_low 0006               ___lwmod@counter 00DF  
        ??_I2C_ColorSens_Init 00D7                ?_servo_rotate0 000F                ?_servo_rotate1 000F  
              ?_servo_rotate2 000F  

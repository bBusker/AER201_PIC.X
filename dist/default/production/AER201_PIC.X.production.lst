

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 21 14:39:09 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    82                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    83  0000                     
    84                           ; Version 1.40
    85                           ; Generated 01/12/2016 GMT
    86                           ; 
    87                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    88                           ; All rights reserved.
    89                           ; 
    90                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    91                           ; 
    92                           ; Redistribution and use in source and binary forms, with or without modification, are
    93                           ; permitted provided that the following conditions are met:
    94                           ; 
    95                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    96                           ;        conditions and the following disclaimer.
    97                           ; 
    98                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    99                           ;        of conditions and the following disclaimer in the documentation and/or other
   100                           ;        materials provided with the distribution.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC18F4620 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118  0000                     
   119                           	psect	idataBANK0
   120  002C0C                     __pidataBANK0:
   121                           	opt stack 0
   122                           
   123                           ;initializer for _bottle_count_disp
   124  002C0C  FFFF               	dw	65535
   125                           
   126                           	psect	mediumconst
   127  00FD90                     __pmediumconst:
   128                           	opt stack 0
   129  00FD90  00                 	db	0
   130  00FD91                     _keys:
   131                           	opt stack 0
   132  00FD91  31                 	db	49
   133  00FD92  32                 	db	50
   134  00FD93  33                 	db	51
   135  00FD94  41                 	db	65
   136  00FD95  34                 	db	52
   137  00FD96  35                 	db	53
   138  00FD97  36                 	db	54
   139  00FD98  42                 	db	66
   140  00FD99  37                 	db	55
   141  00FD9A  38                 	db	56
   142  00FD9B  39                 	db	57
   143  00FD9C  43                 	db	67
   144  00FD9D  2A                 	db	42
   145  00FD9E  30                 	db	48
   146  00FD9F  23                 	db	35
   147  00FDA0  44                 	db	68
   148  00FDA1  00                 	db	0
   149  00FDA2                     __end_of_keys:
   150                           	opt stack 0
   151  00FDA2                     _dpowers:
   152                           	opt stack 0
   153  00FDA2  0001               	dw	1
   154  00FDA4  000A               	dw	10
   155  00FDA6  0064               	dw	100
   156  00FDA8  03E8               	dw	1000
   157  00FDAA  2710               	dw	10000
   158  00FDAC                     __end_of_dpowers:
   159                           	opt stack 0
   160  00FDAC                     _hexpowers:
   161                           	opt stack 0
   162  00FDAC  0001               	dw	1
   163  00FDAE  0010               	dw	16
   164  00FDB0  0100               	dw	256
   165  00FDB2  1000               	dw	4096
   166  00FDB4                     __end_of_hexpowers:
   167                           	opt stack 0
   168  00FDB4                     _timeset:
   169                           	opt stack 0
   170  00FDB4  50                 	db	80
   171  00FDB5  35                 	db	53
   172  00FDB6  21                 	db	33
   173  00FDB7  08                 	db	8
   174  00FDB8  05                 	db	5
   175  00FDB9  02                 	db	2
   176  00FDBA  17                 	db	23
   177  00FDBB                     __end_of_timeset:
   178                           	opt stack 0
   179  00FDBB                     exp@coeff:
   180                           	opt stack 0
   181  00FDBB  00                 	db	0
   182  00FDBC  80                 	db	128
   183  00FDBD  3F                 	db	63
   184  00FDBE  72                 	db	114
   185  00FDBF  31                 	db	49
   186  00FDC0  3F                 	db	63
   187  00FDC1  FE                 	db	254
   188  00FDC2  75                 	db	117
   189  00FDC3  3E                 	db	62
   190  00FDC4  58                 	db	88
   191  00FDC5  63                 	db	99
   192  00FDC6  3D                 	db	61
   193  00FDC7  95                 	db	149
   194  00FDC8  1D                 	db	29
   195  00FDC9  3C                 	db	60
   196  00FDCA  C5                 	db	197
   197  00FDCB  AE                 	db	174
   198  00FDCC  3A                 	db	58
   199  00FDCD  79                 	db	121
   200  00FDCE  21                 	db	33
   201  00FDCF  39                 	db	57
   202  00FDD0  94                 	db	148
   203  00FDD1  80                 	db	128
   204  00FDD2  37                 	db	55
   205  00FDD3  93                 	db	147
   206  00FDD4  A7                 	db	167
   207  00FDD5  35                 	db	53
   208  00FDD6  56                 	db	86
   209  00FDD7  15                 	db	21
   210  00FDD8  34                 	db	52
   211  00FDD9                     __end_ofexp@coeff:
   212                           	opt stack 0
   213  00FDD9                     log@coeff:
   214                           	opt stack 0
   215  00FDD9  00                 	db	0
   216  00FDDA  00                 	db	0
   217  00FDDB  00                 	db	0
   218  00FDDC  00                 	db	0
   219  00FDDD  80                 	db	128
   220  00FDDE  3F                 	db	63
   221  00FDDF  F0                 	db	240
   222  00FDE0  FF                 	db	255
   223  00FDE1  BE                 	db	190
   224  00FDE2  E2                 	db	226
   225  00FDE3  A9                 	db	169
   226  00FDE4  3E                 	db	62
   227  00FDE5  83                 	db	131
   228  00FDE6  76                 	db	118
   229  00FDE7  BE                 	db	190
   230  00FDE8  AE                 	db	174
   231  00FDE9  2B                 	db	43
   232  00FDEA  3E                 	db	62
   233  00FDEB  3C                 	db	60
   234  00FDEC  C3                 	db	195
   235  00FDED  BD                 	db	189
   236  00FDEE  D2                 	db	210
   237  00FDEF  13                 	db	19
   238  00FDF0  3D                 	db	61
   239  00FDF1  78                 	db	120
   240  00FDF2  D3                 	db	211
   241  00FDF3  BB                 	db	187
   242  00FDF4                     __end_oflog@coeff:
   243                           	opt stack 0
   244  0000                     _TMR0	set	4054
   245  0000                     _ADCON0	set	4034
   246  0000                     _ADCON1	set	4033
   247  0000                     _INTCONbits	set	4082
   248  0000                     _LATA	set	3977
   249  0000                     _LATAbits	set	3977
   250  0000                     _LATB	set	3978
   251  0000                     _LATC	set	3979
   252  0000                     _LATCbits	set	3979
   253  0000                     _LATD	set	3980
   254  0000                     _LATDbits	set	3980
   255  0000                     _LATE	set	3981
   256  0000                     _PORTAbits	set	3968
   257  0000                     _PORTB	set	3969
   258  0000                     _SSPADD	set	4040
   259  0000                     _SSPBUF	set	4041
   260  0000                     _SSPCON1	set	4038
   261  0000                     _SSPCON2	set	4037
   262  0000                     _SSPSTAT	set	4039
   263  0000                     _TRISA	set	3986
   264  0000                     _TRISB	set	3987
   265  0000                     _TRISC	set	3988
   266  0000                     _TRISD	set	3989
   267  0000                     _TRISE	set	3990
   268  0000                     _ACKDT	set	32301
   269  0000                     _ACKEN	set	32300
   270  0000                     _GIE	set	32663
   271  0000                     _INT0IE	set	32660
   272  0000                     _INT1IE	set	32643
   273  0000                     _INT1IF	set	32640
   274  0000                     _INT2IE	set	32644
   275  0000                     _PEN	set	32298
   276  0000                     _PSA	set	32427
   277  0000                     _RCEN	set	32299
   278  0000                     _RSEN	set	32297
   279  0000                     _SEN	set	32296
   280  0000                     _T08BIT	set	32430
   281  0000                     _T0CS	set	32429
   282  0000                     _T0PS0	set	32424
   283  0000                     _T0PS1	set	32425
   284  0000                     _T0PS2	set	32426
   285  0000                     _TMR0IE	set	32661
   286  0000                     _TMR0IF	set	32658
   287  0000                     _TMR0ON	set	32431
   288  0000                     _TRISC3	set	31907
   289  0000                     _TRISC4	set	31908
   290  0000                     _nRBPU	set	32655
   291  00FDF4                     STR_26:
   292  00FDF4  52                 	db	82	;'R'
   293  00FDF5  25                 	db	37
   294  00FDF6  64                 	db	100	;'d'
   295  00FDF7  20                 	db	32
   296  00FDF8  47                 	db	71	;'G'
   297  00FDF9  25                 	db	37
   298  00FDFA  64                 	db	100	;'d'
   299  00FDFB  20                 	db	32
   300  00FDFC  42                 	db	66	;'B'
   301  00FDFD  25                 	db	37
   302  00FDFE  64                 	db	100	;'d'
   303  00FDFF  20                 	db	32
   304  00FE00  20                 	db	32
   305  00FE01  20                 	db	32
   306  00FE02  20                 	db	32
   307  00FE03  20                 	db	32
   308  00FE04  20                 	db	32
   309  00FE05  20                 	db	32
   310  00FE06  20                 	db	32
   311  00FE07  20                 	db	32
   312  00FE08  20                 	db	32
   313  00FE09  20                 	db	32
   314  00FE0A  20                 	db	32
   315  00FE0B  20                 	db	32
   316  00FE0C  20                 	db	32
   317  00FE0D  20                 	db	32
   318  00FE0E  20                 	db	32
   319  00FE0F  00                 	db	0
   320  00FE10                     STR_25:
   321  00FE10  52                 	db	82	;'R'
   322  00FE11  75                 	db	117	;'u'
   323  00FE12  6E                 	db	110	;'n'
   324  00FE13  6E                 	db	110	;'n'
   325  00FE14  69                 	db	105	;'i'
   326  00FE15  6E                 	db	110	;'n'
   327  00FE16  67                 	db	103	;'g'
   328  00FE17  7E                 	db	126
   329  00FE18  7E                 	db	126
   330  00FE19  7E                 	db	126
   331  00FE1A  20                 	db	32
   332  00FE1B  20                 	db	32
   333  00FE1C  20                 	db	32
   334  00FE1D  20                 	db	32
   335  00FE1E  20                 	db	32
   336  00FE1F  20                 	db	32
   337  00FE20  20                 	db	32
   338  00FE21  20                 	db	32
   339  00FE22  20                 	db	32
   340  00FE23  20                 	db	32
   341  00FE24  20                 	db	32
   342  00FE25  20                 	db	32
   343  00FE26  20                 	db	32
   344  00FE27  20                 	db	32
   345  00FE28  00                 	db	0
   346  00FE29                     STR_2:
   347  00FE29  47                 	db	71	;'G'
   348  00FE2A  25                 	db	37
   349  00FE2B  75                 	db	117	;'u'
   350  00FE2C  20                 	db	32
   351  00FE2D  42                 	db	66	;'B'
   352  00FE2E  25                 	db	37
   353  00FE2F  75                 	db	117	;'u'
   354  00FE30  20                 	db	32
   355  00FE31  20                 	db	32
   356  00FE32  20                 	db	32
   357  00FE33  20                 	db	32
   358  00FE34  20                 	db	32
   359  00FE35  20                 	db	32
   360  00FE36  20                 	db	32
   361  00FE37  20                 	db	32
   362  00FE38  20                 	db	32
   363  00FE39  20                 	db	32
   364  00FE3A  20                 	db	32
   365  00FE3B  20                 	db	32
   366  00FE3C  20                 	db	32
   367  00FE3D  20                 	db	32
   368  00FE3E  20                 	db	32
   369  00FE3F  20                 	db	32
   370  00FE40  00                 	db	0
   371  00FE41                     STR_1:
   372  00FE41  43                 	db	67	;'C'
   373  00FE42  25                 	db	37
   374  00FE43  75                 	db	117	;'u'
   375  00FE44  20                 	db	32
   376  00FE45  52                 	db	82	;'R'
   377  00FE46  25                 	db	37
   378  00FE47  75                 	db	117	;'u'
   379  00FE48  20                 	db	32
   380  00FE49  20                 	db	32
   381  00FE4A  20                 	db	32
   382  00FE4B  20                 	db	32
   383  00FE4C  20                 	db	32
   384  00FE4D  20                 	db	32
   385  00FE4E  20                 	db	32
   386  00FE4F  20                 	db	32
   387  00FE50  20                 	db	32
   388  00FE51  20                 	db	32
   389  00FE52  20                 	db	32
   390  00FE53  20                 	db	32
   391  00FE54  20                 	db	32
   392  00FE55  20                 	db	32
   393  00FE56  20                 	db	32
   394  00FE57  20                 	db	32
   395  00FE58  00                 	db	0
   396  00FE59                     STR_24:
   397  00FE59  52                 	db	82	;'R'
   398  00FE5A  75                 	db	117	;'u'
   399  00FE5B  6E                 	db	110	;'n'
   400  00FE5C  6E                 	db	110	;'n'
   401  00FE5D  69                 	db	105	;'i'
   402  00FE5E  6E                 	db	110	;'n'
   403  00FE5F  67                 	db	103	;'g'
   404  00FE60  7E                 	db	126
   405  00FE61  7E                 	db	126
   406  00FE62  20                 	db	32
   407  00FE63  20                 	db	32
   408  00FE64  20                 	db	32
   409  00FE65  20                 	db	32
   410  00FE66  20                 	db	32
   411  00FE67  20                 	db	32
   412  00FE68  20                 	db	32
   413  00FE69  20                 	db	32
   414  00FE6A  20                 	db	32
   415  00FE6B  20                 	db	32
   416  00FE6C  20                 	db	32
   417  00FE6D  20                 	db	32
   418  00FE6E  20                 	db	32
   419  00FE6F  20                 	db	32
   420  00FE70  00                 	db	0
   421  00FE71                     STR_23:
   422  00FE71  52                 	db	82	;'R'
   423  00FE72  75                 	db	117	;'u'
   424  00FE73  6E                 	db	110	;'n'
   425  00FE74  6E                 	db	110	;'n'
   426  00FE75  69                 	db	105	;'i'
   427  00FE76  6E                 	db	110	;'n'
   428  00FE77  67                 	db	103	;'g'
   429  00FE78  7E                 	db	126
   430  00FE79  20                 	db	32
   431  00FE7A  20                 	db	32
   432  00FE7B  20                 	db	32
   433  00FE7C  20                 	db	32
   434  00FE7D  20                 	db	32
   435  00FE7E  20                 	db	32
   436  00FE7F  20                 	db	32
   437  00FE80  20                 	db	32
   438  00FE81  20                 	db	32
   439  00FE82  20                 	db	32
   440  00FE83  20                 	db	32
   441  00FE84  20                 	db	32
   442  00FE85  20                 	db	32
   443  00FE86  20                 	db	32
   444  00FE87  00                 	db	0
   445  00FE88                     STR_21:
   446  00FE88  54                 	db	84	;'T'
   447  00FE89  6F                 	db	111	;'o'
   448  00FE8A  74                 	db	116	;'t'
   449  00FE8B  61                 	db	97	;'a'
   450  00FE8C  6C                 	db	108	;'l'
   451  00FE8D  20                 	db	32
   452  00FE8E  4F                 	db	79	;'O'
   453  00FE8F  70                 	db	112	;'p'
   454  00FE90  65                 	db	101	;'e'
   455  00FE91  72                 	db	114	;'r'
   456  00FE92  61                 	db	97	;'a'
   457  00FE93  74                 	db	116	;'t'
   458  00FE94  69                 	db	105	;'i'
   459  00FE95  6F                 	db	111	;'o'
   460  00FE96  6E                 	db	110	;'n'
   461  00FE97  20                 	db	32
   462  00FE98  20                 	db	32
   463  00FE99  20                 	db	32
   464  00FE9A  20                 	db	32
   465  00FE9B  20                 	db	32
   466  00FE9C  20                 	db	32
   467  00FE9D  20                 	db	32
   468  00FE9E  00                 	db	0
   469  00FE9F                     STR_8:
   470  00FE9F  44                 	db	68	;'D'
   471  00FEA0  61                 	db	97	;'a'
   472  00FEA1  74                 	db	116	;'t'
   473  00FEA2  65                 	db	101	;'e'
   474  00FEA3  3A                 	db	58	;':'
   475  00FEA4  20                 	db	32
   476  00FEA5  25                 	db	37
   477  00FEA6  30                 	db	48	;'0'
   478  00FEA7  32                 	db	50	;'2'
   479  00FEA8  78                 	db	120	;'x'
   480  00FEA9  2F                 	db	47
   481  00FEAA  25                 	db	37
   482  00FEAB  30                 	db	48	;'0'
   483  00FEAC  32                 	db	50	;'2'
   484  00FEAD  78                 	db	120	;'x'
   485  00FEAE  2F                 	db	47
   486  00FEAF  25                 	db	37
   487  00FEB0  30                 	db	48	;'0'
   488  00FEB1  32                 	db	50	;'2'
   489  00FEB2  78                 	db	120	;'x'
   490  00FEB3  20                 	db	32
   491  00FEB4  20                 	db	32
   492  00FEB5  00                 	db	0
   493  00FEB6                     STR_9:
   494  00FEB6  54                 	db	84	;'T'
   495  00FEB7  69                 	db	105	;'i'
   496  00FEB8  6D                 	db	109	;'m'
   497  00FEB9  65                 	db	101	;'e'
   498  00FEBA  3A                 	db	58	;':'
   499  00FEBB  20                 	db	32
   500  00FEBC  25                 	db	37
   501  00FEBD  30                 	db	48	;'0'
   502  00FEBE  32                 	db	50	;'2'
   503  00FEBF  78                 	db	120	;'x'
   504  00FEC0  3A                 	db	58	;':'
   505  00FEC1  25                 	db	37
   506  00FEC2  30                 	db	48	;'0'
   507  00FEC3  32                 	db	50	;'2'
   508  00FEC4  78                 	db	120	;'x'
   509  00FEC5  3A                 	db	58	;':'
   510  00FEC6  25                 	db	37
   511  00FEC7  30                 	db	48	;'0'
   512  00FEC8  32                 	db	50	;'2'
   513  00FEC9  78                 	db	120	;'x'
   514  00FECA  20                 	db	32
   515  00FECB  20                 	db	32
   516  00FECC  00                 	db	0
   517  00FECD                     STR_7:
   518  00FECD  25                 	db	37
   519  00FECE  30                 	db	48	;'0'
   520  00FECF  33                 	db	51	;'3'
   521  00FED0  64                 	db	100	;'d'
   522  00FED1  20                 	db	32
   523  00FED2  25                 	db	37
   524  00FED3  30                 	db	48	;'0'
   525  00FED4  33                 	db	51	;'3'
   526  00FED5  64                 	db	100	;'d'
   527  00FED6  20                 	db	32
   528  00FED7  25                 	db	37
   529  00FED8  30                 	db	48	;'0'
   530  00FED9  33                 	db	51	;'3'
   531  00FEDA  64                 	db	100	;'d'
   532  00FEDB  20                 	db	32
   533  00FEDC  25                 	db	37
   534  00FEDD  30                 	db	48	;'0'
   535  00FEDE  33                 	db	51	;'3'
   536  00FEDF  64                 	db	100	;'d'
   537  00FEE0  00                 	db	0
   538  00FEE1                     STR_22:
   539  00FEE1  54                 	db	84	;'T'
   540  00FEE2  69                 	db	105	;'i'
   541  00FEE3  6D                 	db	109	;'m'
   542  00FEE4  65                 	db	101	;'e'
   543  00FEE5  3A                 	db	58	;':'
   544  00FEE6  20                 	db	32
   545  00FEE7  25                 	db	37
   546  00FEE8  64                 	db	100	;'d'
   547  00FEE9  20                 	db	32
   548  00FEEA  73                 	db	115	;'s'
   549  00FEEB  20                 	db	32
   550  00FEEC  20                 	db	32
   551  00FEED  20                 	db	32
   552  00FEEE  20                 	db	32
   553  00FEEF  20                 	db	32
   554  00FEF0  20                 	db	32
   555  00FEF1  20                 	db	32
   556  00FEF2  00                 	db	0
   557  00FEF3                     STR_12:
   558  00FEF3  59                 	db	89	;'Y'
   559  00FEF4  4F                 	db	79	;'O'
   560  00FEF5  50                 	db	80	;'P'
   561  00FEF6  2B                 	db	43
   562  00FEF7  43                 	db	67	;'C'
   563  00FEF8  41                 	db	65	;'A'
   564  00FEF9  50                 	db	80	;'P'
   565  00FEFA  2B                 	db	43
   566  00FEFB  4C                 	db	76	;'L'
   567  00FEFC  42                 	db	66	;'B'
   568  00FEFD  4C                 	db	76	;'L'
   569  00FEFE  3A                 	db	58	;':'
   570  00FEFF  20                 	db	32
   571  00FF00  25                 	db	37
   572  00FF01  64                 	db	100	;'d'
   573  00FF02  20                 	db	32
   574  00FF03  20                 	db	32
   575  00FF04  00                 	db	0
   576  00FF05                     STR_14:
   577  00FF05  59                 	db	89	;'Y'
   578  00FF06  4F                 	db	79	;'O'
   579  00FF07  50                 	db	80	;'P'
   580  00FF08  2D                 	db	45
   581  00FF09  43                 	db	67	;'C'
   582  00FF0A  41                 	db	65	;'A'
   583  00FF0B  50                 	db	80	;'P'
   584  00FF0C  2B                 	db	43
   585  00FF0D  4C                 	db	76	;'L'
   586  00FF0E  42                 	db	66	;'B'
   587  00FF0F  4C                 	db	76	;'L'
   588  00FF10  3A                 	db	58	;':'
   589  00FF11  20                 	db	32
   590  00FF12  25                 	db	37
   591  00FF13  64                 	db	100	;'d'
   592  00FF14  20                 	db	32
   593  00FF15  20                 	db	32
   594  00FF16  00                 	db	0
   595  00FF17                     STR_13:
   596  00FF17  59                 	db	89	;'Y'
   597  00FF18  4F                 	db	79	;'O'
   598  00FF19  50                 	db	80	;'P'
   599  00FF1A  2B                 	db	43
   600  00FF1B  43                 	db	67	;'C'
   601  00FF1C  41                 	db	65	;'A'
   602  00FF1D  50                 	db	80	;'P'
   603  00FF1E  2D                 	db	45
   604  00FF1F  4C                 	db	76	;'L'
   605  00FF20  42                 	db	66	;'B'
   606  00FF21  4C                 	db	76	;'L'
   607  00FF22  3A                 	db	58	;':'
   608  00FF23  20                 	db	32
   609  00FF24  25                 	db	37
   610  00FF25  64                 	db	100	;'d'
   611  00FF26  20                 	db	32
   612  00FF27  20                 	db	32
   613  00FF28  00                 	db	0
   614  00FF29                     STR_15:
   615  00FF29  59                 	db	89	;'Y'
   616  00FF2A  4F                 	db	79	;'O'
   617  00FF2B  50                 	db	80	;'P'
   618  00FF2C  2D                 	db	45
   619  00FF2D  43                 	db	67	;'C'
   620  00FF2E  41                 	db	65	;'A'
   621  00FF2F  50                 	db	80	;'P'
   622  00FF30  2D                 	db	45
   623  00FF31  4C                 	db	76	;'L'
   624  00FF32  42                 	db	66	;'B'
   625  00FF33  4C                 	db	76	;'L'
   626  00FF34  3A                 	db	58	;':'
   627  00FF35  20                 	db	32
   628  00FF36  25                 	db	37
   629  00FF37  64                 	db	100	;'d'
   630  00FF38  20                 	db	32
   631  00FF39  20                 	db	32
   632  00FF3A  00                 	db	0
   633  00FF3B                     STR_16:
   634  00FF3B  45                 	db	69	;'E'
   635  00FF3C  53                 	db	83	;'S'
   636  00FF3D  4B                 	db	75	;'K'
   637  00FF3E  41                 	db	65	;'A'
   638  00FF3F  2B                 	db	43
   639  00FF40  43                 	db	67	;'C'
   640  00FF41  41                 	db	65	;'A'
   641  00FF42  50                 	db	80	;'P'
   642  00FF43  2B                 	db	43
   643  00FF44  4C                 	db	76	;'L'
   644  00FF45  42                 	db	66	;'B'
   645  00FF46  4C                 	db	76	;'L'
   646  00FF47  3A                 	db	58	;':'
   647  00FF48  20                 	db	32
   648  00FF49  25                 	db	37
   649  00FF4A  64                 	db	100	;'d'
   650  00FF4B  20                 	db	32
   651  00FF4C  00                 	db	0
   652  00FF4D                     STR_18:
   653  00FF4D  45                 	db	69	;'E'
   654  00FF4E  53                 	db	83	;'S'
   655  00FF4F  4B                 	db	75	;'K'
   656  00FF50  41                 	db	65	;'A'
   657  00FF51  2D                 	db	45
   658  00FF52  43                 	db	67	;'C'
   659  00FF53  41                 	db	65	;'A'
   660  00FF54  50                 	db	80	;'P'
   661  00FF55  2B                 	db	43
   662  00FF56  4C                 	db	76	;'L'
   663  00FF57  42                 	db	66	;'B'
   664  00FF58  4C                 	db	76	;'L'
   665  00FF59  3A                 	db	58	;':'
   666  00FF5A  20                 	db	32
   667  00FF5B  25                 	db	37
   668  00FF5C  64                 	db	100	;'d'
   669  00FF5D  20                 	db	32
   670  00FF5E  00                 	db	0
   671  00FF5F                     STR_17:
   672  00FF5F  45                 	db	69	;'E'
   673  00FF60  53                 	db	83	;'S'
   674  00FF61  4B                 	db	75	;'K'
   675  00FF62  41                 	db	65	;'A'
   676  00FF63  2B                 	db	43
   677  00FF64  43                 	db	67	;'C'
   678  00FF65  41                 	db	65	;'A'
   679  00FF66  50                 	db	80	;'P'
   680  00FF67  2D                 	db	45
   681  00FF68  4C                 	db	76	;'L'
   682  00FF69  42                 	db	66	;'B'
   683  00FF6A  4C                 	db	76	;'L'
   684  00FF6B  3A                 	db	58	;':'
   685  00FF6C  20                 	db	32
   686  00FF6D  25                 	db	37
   687  00FF6E  64                 	db	100	;'d'
   688  00FF6F  20                 	db	32
   689  00FF70  00                 	db	0
   690  00FF71                     STR_19:
   691  00FF71  45                 	db	69	;'E'
   692  00FF72  53                 	db	83	;'S'
   693  00FF73  4B                 	db	75	;'K'
   694  00FF74  41                 	db	65	;'A'
   695  00FF75  2D                 	db	45
   696  00FF76  43                 	db	67	;'C'
   697  00FF77  41                 	db	65	;'A'
   698  00FF78  50                 	db	80	;'P'
   699  00FF79  2D                 	db	45
   700  00FF7A  4C                 	db	76	;'L'
   701  00FF7B  42                 	db	66	;'B'
   702  00FF7C  4C                 	db	76	;'L'
   703  00FF7D  3A                 	db	58	;':'
   704  00FF7E  20                 	db	32
   705  00FF7F  25                 	db	37
   706  00FF80  64                 	db	100	;'d'
   707  00FF81  20                 	db	32
   708  00FF82  00                 	db	0
   709  00FF83                     STR_29:
   710  00FF83  30                 	db	48	;'0'
   711  00FF84  31                 	db	49	;'1'
   712  00FF85  32                 	db	50	;'2'
   713  00FF86  33                 	db	51	;'3'
   714  00FF87  34                 	db	52	;'4'
   715  00FF88  35                 	db	53	;'5'
   716  00FF89  36                 	db	54	;'6'
   717  00FF8A  37                 	db	55	;'7'
   718  00FF8B  38                 	db	56	;'8'
   719  00FF8C  39                 	db	57	;'9'
   720  00FF8D  61                 	db	97	;'a'
   721  00FF8E  62                 	db	98	;'b'
   722  00FF8F  63                 	db	99	;'c'
   723  00FF90  64                 	db	100	;'d'
   724  00FF91  65                 	db	101	;'e'
   725  00FF92  66                 	db	102	;'f'
   726  00FF93  00                 	db	0
   727  00FF94                     STR_11:
   728  00FF94  54                 	db	84	;'T'
   729  00FF95  6F                 	db	111	;'o'
   730  00FF96  74                 	db	116	;'t'
   731  00FF97  61                 	db	97	;'a'
   732  00FF98  6C                 	db	108	;'l'
   733  00FF99  3A                 	db	58	;':'
   734  00FF9A  20                 	db	32
   735  00FF9B  25                 	db	37
   736  00FF9C  64                 	db	100	;'d'
   737  00FF9D  20                 	db	32
   738  00FF9E  20                 	db	32
   739  00FF9F  20                 	db	32
   740  00FFA0  20                 	db	32
   741  00FFA1  20                 	db	32
   742  00FFA2  20                 	db	32
   743  00FFA3  20                 	db	32
   744  00FFA4  00                 	db	0
   745  00FFA5                     STR_10:
   746  00FFA5  42                 	db	66	;'B'
   747  00FFA6  6F                 	db	111	;'o'
   748  00FFA7  74                 	db	116	;'t'
   749  00FFA8  74                 	db	116	;'t'
   750  00FFA9  6C                 	db	108	;'l'
   751  00FFAA  65                 	db	101	;'e'
   752  00FFAB  20                 	db	32
   753  00FFAC  43                 	db	67	;'C'
   754  00FFAD  6F                 	db	111	;'o'
   755  00FFAE  75                 	db	117	;'u'
   756  00FFAF  6E                 	db	110	;'n'
   757  00FFB0  74                 	db	116	;'t'
   758  00FFB1  20                 	db	32
   759  00FFB2  20                 	db	32
   760  00FFB3  20                 	db	32
   761  00FFB4  20                 	db	32
   762  00FFB5  00                 	db	0
   763  00FFB6                     STR_6:
   764  00FFB6  25                 	db	37
   765  00FFB7  30                 	db	48	;'0'
   766  00FFB8  33                 	db	51	;'3'
   767  00FFB9  64                 	db	100	;'d'
   768  00FFBA  2C                 	db	44
   769  00FFBB  20                 	db	32
   770  00FFBC  25                 	db	37
   771  00FFBD  30                 	db	48	;'0'
   772  00FFBE  33                 	db	51	;'3'
   773  00FFBF  64                 	db	100	;'d'
   774  00FFC0  2C                 	db	44
   775  00FFC1  20                 	db	32
   776  00FFC2  25                 	db	37
   777  00FFC3  30                 	db	48	;'0'
   778  00FFC4  33                 	db	51	;'3'
   779  00FFC5  64                 	db	100	;'d'
   780  00FFC6  00                 	db	0
   781  00FFC7                     STR_27:
   782  00FFC7  4F                 	db	79	;'O'
   783  00FFC8  70                 	db	112	;'p'
   784  00FFC9  65                 	db	101	;'e'
   785  00FFCA  72                 	db	114	;'r'
   786  00FFCB  61                 	db	97	;'a'
   787  00FFCC  74                 	db	116	;'t'
   788  00FFCD  69                 	db	105	;'i'
   789  00FFCE  6F                 	db	111	;'o'
   790  00FFCF  6E                 	db	110	;'n'
   791  00FFD0  20                 	db	32
   792  00FFD1  44                 	db	68	;'D'
   793  00FFD2  6F                 	db	111	;'o'
   794  00FFD3  6E                 	db	110	;'n'
   795  00FFD4  65                 	db	101	;'e'
   796  00FFD5  21                 	db	33
   797  00FFD6  00                 	db	0
   798  00FFD7                     STR_28:
   799  00FFD7  45                 	db	69	;'E'
   800  00FFD8  4D                 	db	77	;'M'
   801  00FFD9  45                 	db	69	;'E'
   802  00FFDA  52                 	db	82	;'R'
   803  00FFDB  47                 	db	71	;'G'
   804  00FFDC  45                 	db	69	;'E'
   805  00FFDD  4E                 	db	78	;'N'
   806  00FFDE  43                 	db	67	;'C'
   807  00FFDF  59                 	db	89	;'Y'
   808  00FFE0  20                 	db	32
   809  00FFE1  53                 	db	83	;'S'
   810  00FFE2  54                 	db	84	;'T'
   811  00FFE3  4F                 	db	79	;'O'
   812  00FFE4  50                 	db	80	;'P'
   813  00FFE5  00                 	db	0
   814  00FFE6                     STR_5:
   815  00FFE6  62                 	db	98	;'b'
   816  00FFE7  61                 	db	97	;'a'
   817  00FFE8  64                 	db	100	;'d'
   818  00FFE9  20                 	db	32
   819  00FFEA  69                 	db	105	;'i'
   820  00FFEB  6E                 	db	110	;'n'
   821  00FFEC  74                 	db	116	;'t'
   822  00FFED  65                 	db	101	;'e'
   823  00FFEE  72                 	db	114	;'r'
   824  00FFEF  72                 	db	114	;'r'
   825  00FFF0  75                 	db	117	;'u'
   826  00FFF1  70                 	db	112	;'p'
   827  00FFF2  74                 	db	116	;'t'
   828  00FFF3  00                 	db	0
   829  00FFF4                     STR_20:
   830  00FFF4  45                 	db	69	;'E'
   831  00FFF5  52                 	db	82	;'R'
   832  00FFF6  52                 	db	82	;'R'
   833  00FFF7  4F                 	db	79	;'O'
   834  00FFF8  52                 	db	82	;'R'
   835  00FFF9  3A                 	db	58	;':'
   836  00FFFA  20                 	db	32
   837  00FFFB  25                 	db	37
   838  00FFFC  64                 	db	100	;'d'
   839  00FFFD  00                 	db	0
   840  0000                     
   841                           ; #config settings
   842  00FFFE  00                 	db	0	; dummy byte at the end
   843  0000                     
   844                           	psect	cinit
   845  0028EA                     __pcinit:
   846                           	opt stack 0
   847  0028EA                     start_initialization:
   848                           	opt stack 0
   849  0028EA                     __initialization:
   850                           	opt stack 0
   851                           
   852                           ; Initialize objects allocated to BANK0 (2 bytes)
   853                           ; load TBLPTR registers with __pidataBANK0
   854  0028EA  0E0C               	movlw	low __pidataBANK0
   855  0028EC  6EF6               	movwf	tblptrl,c
   856  0028EE  0E2C               	movlw	high __pidataBANK0
   857  0028F0  6EF7               	movwf	tblptrh,c
   858  0028F2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   859  0028F4  6EF8               	movwf	tblptru,c
   860  0028F6  0009               	tblrd		*+	;fetch initializer
   861  0028F8  CFF5 F0ED          	movff	tablat,__pdataBANK0
   862  0028FC  0009               	tblrd		*+	;fetch initializer
   863  0028FE  CFF5 F0EE          	movff	tablat,__pdataBANK0+1
   864                           
   865                           ; Clear objects allocated to BANK1 (22 bytes)
   866  002902  EE01  F000         	lfsr	0,__pbssBANK1
   867  002906  0E16               	movlw	22
   868  002908                     clear_0:
   869  002908  6AEE               	clrf	postinc0,c
   870  00290A  06E8               	decf	wreg,f,c
   871  00290C  E1FD               	bnz	clear_0
   872                           
   873                           ; Clear objects allocated to BANK0 (54 bytes)
   874  00290E  EE00  F0B7         	lfsr	0,__pbssBANK0
   875  002912  0E36               	movlw	54
   876  002914                     clear_1:
   877  002914  6AEE               	clrf	postinc0,c
   878  002916  06E8               	decf	wreg,f,c
   879  002918  E1FD               	bnz	clear_1
   880                           
   881                           ; Clear objects allocated to COMRAM (8 bytes)
   882  00291A  EE00  F076         	lfsr	0,__pbssCOMRAM
   883  00291E  0E08               	movlw	8
   884  002920                     clear_2:
   885  002920  6AEE               	clrf	postinc0,c
   886  002922  06E8               	decf	wreg,f,c
   887  002924  E1FD               	bnz	clear_2
   888  002926                     end_of_initialization:
   889                           	opt stack 0
   890  002926                     __end_of__initialization:
   891                           	opt stack 0
   892  002926  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   893  002928  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   894  00292A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   895  00292C  6EF8               	movwf	tblptru,c
   896  00292E  0100               	movlb	0
   897  002930  EF11  F00E         	goto	_main	;jump to C main() function
   898                           tblptru	equ	0xFF8
   899                           tblptrh	equ	0xFF7
   900                           tblptrl	equ	0xFF6
   901                           tablat	equ	0xFF5
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           
   905                           	psect	bssCOMRAM
   906  000076                     __pbssCOMRAM:
   907                           	opt stack 0
   908  000076                     _color:
   909                           	opt stack 0
   910  000076                     	ds	8
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           postinc0	equ	0xFEE
   916                           wreg	equ	0xFE8
   917                           
   918                           	psect	bssBANK0
   919  0000B7                     __pbssBANK0:
   920                           	opt stack 0
   921  0000B7                     _time:
   922                           	opt stack 0
   923  0000B7                     	ds	7
   924  0000BE                     _testint:
   925                           	opt stack 0
   926  0000BE                     	ds	6
   927  0000C4                     _bottlequeue_head:
   928                           	opt stack 0
   929  0000C4                     	ds	2
   930  0000C6                     _bottlequeue_tail:
   931                           	opt stack 0
   932  0000C6                     	ds	2
   933  0000C8                     _end_time:
   934                           	opt stack 0
   935  0000C8                     	ds	2
   936  0000CA                     _errno:
   937                           	opt stack 0
   938  0000CA                     	ds	2
   939  0000CC                     _eska_count:
   940                           	opt stack 0
   941  0000CC                     	ds	2
   942  0000CE                     _eskacap_count:
   943                           	opt stack 0
   944  0000CE                     	ds	2
   945  0000D0                     _eskacaplbl_count:
   946                           	opt stack 0
   947  0000D0                     	ds	2
   948  0000D2                     _eskalbl_count:
   949                           	opt stack 0
   950  0000D2                     	ds	2
   951  0000D4                     _etime:
   952                           	opt stack 0
   953  0000D4                     	ds	2
   954  0000D6                     _nodedata:
   955                           	opt stack 0
   956  0000D6                     	ds	2
   957  0000D8                     _operation_disp:
   958                           	opt stack 0
   959  0000D8                     	ds	2
   960  0000DA                     _operation_time:
   961                           	opt stack 0
   962  0000DA                     	ds	2
   963  0000DC                     _start_time:
   964                           	opt stack 0
   965  0000DC                     	ds	2
   966  0000DE                     _stime:
   967                           	opt stack 0
   968  0000DE                     	ds	2
   969  0000E0                     _testflag:
   970                           	opt stack 0
   971  0000E0                     	ds	2
   972  0000E2                     _total_bottle_count:
   973                           	opt stack 0
   974  0000E2                     	ds	2
   975  0000E4                     _yop_count:
   976                           	opt stack 0
   977  0000E4                     	ds	2
   978  0000E6                     _yopcap_count:
   979                           	opt stack 0
   980  0000E6                     	ds	2
   981  0000E8                     _yopcaplbl_count:
   982                           	opt stack 0
   983  0000E8                     	ds	2
   984  0000EA                     _yoplbl_count:
   985                           	opt stack 0
   986  0000EA                     	ds	2
   987  0000EC                     _curr_state:
   988                           	opt stack 0
   989  0000EC                     	ds	1
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           
   997                           	psect	dataBANK0
   998  0000ED                     __pdataBANK0:
   999                           	opt stack 0
  1000  0000ED                     _bottle_count_disp:
  1001                           	opt stack 0
  1002  0000ED                     	ds	2
  1003                           tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           tblptrl	equ	0xFF6
  1006                           tablat	equ	0xFF5
  1007                           postinc0	equ	0xFEE
  1008                           wreg	equ	0xFE8
  1009                           
  1010                           	psect	bssBANK1
  1011  000100                     __pbssBANK1:
  1012                           	opt stack 0
  1013  000100                     _bottlequeue:
  1014                           	opt stack 0
  1015  000100                     	ds	22
  1016                           tblptru	equ	0xFF8
  1017                           tblptrh	equ	0xFF7
  1018                           tblptrl	equ	0xFF6
  1019                           tablat	equ	0xFF5
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           
  1023                           	psect	cstackBANK0
  1024  000080                     __pcstackBANK0:
  1025                           	opt stack 0
  1026  000080                     ??_isr:
  1027                           
  1028                           ; 1 bytes @ 0x0
  1029  000080                     	ds	16
  1030  000090                     ??_isdigit:
  1031  000090                     ??_I2C_Master_Wait:
  1032  000090                     ?___wmul:
  1033                           	opt stack 0
  1034  000090                     ?___awmod:
  1035                           	opt stack 0
  1036  000090                     ?___lwdiv:
  1037                           	opt stack 0
  1038  000090                     ?___lldiv:
  1039                           	opt stack 0
  1040  000090                     lcdNibble@temp:
  1041                           	opt stack 0
  1042  000090                     ___wmul@multiplier:
  1043                           	opt stack 0
  1044  000090                     ___awmod@dividend:
  1045                           	opt stack 0
  1046  000090                     ___lwdiv@dividend:
  1047                           	opt stack 0
  1048  000090                     ___lldiv@dividend:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x10
  1052  000090                     	ds	1
  1053  000091                     I2C_Master_Read@a:
  1054                           	opt stack 0
  1055  000091                     lcdNibble@data:
  1056                           	opt stack 0
  1057  000091                     _isdigit$816:
  1058                           	opt stack 0
  1059  000091                     I2C_Master_Write@d:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x11
  1063  000091                     	ds	1
  1064  000092                     I2C_Master_Read@temp:
  1065                           	opt stack 0
  1066  000092                     lcdInst@data:
  1067                           	opt stack 0
  1068  000092                     putch@data:
  1069                           	opt stack 0
  1070  000092                     isdigit@c:
  1071                           	opt stack 0
  1072  000092                     ___wmul@multiplicand:
  1073                           	opt stack 0
  1074  000092                     ___awmod@divisor:
  1075                           	opt stack 0
  1076  000092                     ___lwdiv@divisor:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x12
  1080  000092                     	ds	1
  1081  000093                     ??_read_colorsensor:
  1082  000093                     ??_I2C_ColorSens_Init:
  1083  000093                     ??_initLCD:
  1084                           
  1085                           ; 1 bytes @ 0x13
  1086  000093                     	ds	1
  1087  000094                     ___awmod@counter:
  1088                           	opt stack 0
  1089  000094                     ___wmul@product:
  1090                           	opt stack 0
  1091  000094                     ___lwdiv@quotient:
  1092                           	opt stack 0
  1093  000094                     ___lldiv@divisor:
  1094                           	opt stack 0
  1095                           
  1096                           ; 4 bytes @ 0x14
  1097  000094                     	ds	1
  1098  000095                     ___awmod@sign:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0x15
  1102  000095                     	ds	1
  1103  000096                     ___lwdiv@counter:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x16
  1107  000096                     	ds	1
  1108  000097                     ?___lwmod:
  1109                           	opt stack 0
  1110  000097                     ___lwmod@dividend:
  1111                           	opt stack 0
  1112  000097                     read_colorsensor@color_low:
  1113                           	opt stack 0
  1114                           
  1115                           ; 4 bytes @ 0x17
  1116  000097                     	ds	1
  1117  000098                     ___lldiv@quotient:
  1118                           	opt stack 0
  1119                           
  1120                           ; 4 bytes @ 0x18
  1121  000098                     	ds	1
  1122  000099                     ___lwmod@divisor:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x19
  1126  000099                     	ds	2
  1127  00009B                     ___lwmod@counter:
  1128                           	opt stack 0
  1129  00009B                     read_colorsensor@color_high:
  1130                           	opt stack 0
  1131                           
  1132                           ; 4 bytes @ 0x1B
  1133  00009B                     	ds	1
  1134  00009C                     ?_printf:
  1135                           	opt stack 0
  1136  00009C                     ___lldiv@counter:
  1137                           	opt stack 0
  1138  00009C                     printf@f:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x1C
  1142  00009C                     	ds	1
  1143  00009D                     I2C_Master_Init@c:
  1144                           	opt stack 0
  1145                           
  1146                           ; 4 bytes @ 0x1D
  1147  00009D                     	ds	2
  1148  00009F                     read_colorsensor@i:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x1F
  1152  00009F                     	ds	2
  1153  0000A1                     ??_I2C_Master_Init:
  1154                           
  1155                           ; 1 bytes @ 0x21
  1156  0000A1                     	ds	5
  1157  0000A6                     ??_printf:
  1158                           
  1159                           ; 1 bytes @ 0x26
  1160  0000A6                     	ds	4
  1161  0000AA                     printf@idx:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x2A
  1165  0000AA                     	ds	1
  1166  0000AB                     printf@ap:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x2B
  1170  0000AB                     	ds	2
  1171  0000AD                     printf@prec:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0x2D
  1175  0000AD                     	ds	1
  1176  0000AE                     printf@val:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x2E
  1180  0000AE                     	ds	2
  1181  0000B0                     printf@flag:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0x30
  1185  0000B0                     	ds	1
  1186  0000B1                     printf@width:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x31
  1190  0000B1                     	ds	2
  1191  0000B3                     printf@c:
  1192                           	opt stack 0
  1193                           
  1194                           ; 1 bytes @ 0x33
  1195  0000B3                     	ds	1
  1196  0000B4                     ??_operation:
  1197  0000B4                     date_time@i:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x34
  1201  0000B4                     	ds	2
  1202  0000B6                     ??_main:
  1203                           
  1204                           ; 1 bytes @ 0x36
  1205  0000B6                     	ds	1
  1206                           tblptru	equ	0xFF8
  1207                           tblptrh	equ	0xFF7
  1208                           tblptrl	equ	0xFF6
  1209                           tablat	equ	0xFF5
  1210                           postinc0	equ	0xFEE
  1211                           wreg	equ	0xFE8
  1212                           
  1213                           	psect	cstackCOMRAM
  1214  000001                     __pcstackCOMRAM:
  1215                           	opt stack 0
  1216  000001                     ??i2_I2C_Master_Wait:
  1217  000001                     ??i2_isdigit:
  1218  000001                     ?___awdiv:
  1219                           	opt stack 0
  1220  000001                     ?i2___wmul:
  1221                           	opt stack 0
  1222  000001                     ?i2___lwdiv:
  1223                           	opt stack 0
  1224  000001                     ?___ftpack:
  1225                           	opt stack 0
  1226  000001                     ?_frexp:
  1227                           	opt stack 0
  1228  000001                     ?___ftneg:
  1229                           	opt stack 0
  1230  000001                     i2lcdNibble@temp:
  1231                           	opt stack 0
  1232  000001                     servo_rotate0@degree:
  1233                           	opt stack 0
  1234  000001                     ___awdiv@dividend:
  1235                           	opt stack 0
  1236  000001                     i2___wmul@multiplier:
  1237                           	opt stack 0
  1238  000001                     i2___lwdiv@dividend:
  1239                           	opt stack 0
  1240  000001                     ___ftpack@arg:
  1241                           	opt stack 0
  1242  000001                     ___ftge@ff1:
  1243                           	opt stack 0
  1244  000001                     ___ftneg@f1:
  1245                           	opt stack 0
  1246  000001                     frexp@value:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x0
  1250  000001                     	ds	1
  1251  000002                     i2I2C_Master_Read@a:
  1252                           	opt stack 0
  1253  000002                     i2lcdNibble@data:
  1254                           	opt stack 0
  1255  000002                     i2_isdigit$816:
  1256                           	opt stack 0
  1257  000002                     i2I2C_Master_Write@d:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x1
  1261  000002                     	ds	1
  1262  000003                     ??_servo_rotate0:
  1263  000003                     i2I2C_Master_Read@temp:
  1264                           	opt stack 0
  1265  000003                     i2lcdInst@data:
  1266                           	opt stack 0
  1267  000003                     i2putch@data:
  1268                           	opt stack 0
  1269  000003                     i2isdigit@c:
  1270                           	opt stack 0
  1271  000003                     ___awdiv@divisor:
  1272                           	opt stack 0
  1273  000003                     i2___wmul@multiplicand:
  1274                           	opt stack 0
  1275  000003                     i2___lwdiv@divisor:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x2
  1279  000003                     	ds	1
  1280  000004                     ??i2_I2C_ColorSens_Init:
  1281  000004                     ??i2_read_colorsensor:
  1282  000004                     read_time@i:
  1283                           	opt stack 0
  1284  000004                     ___ftpack@exp:
  1285                           	opt stack 0
  1286  000004                     frexp@eptr:
  1287                           	opt stack 0
  1288  000004                     ___ftge@ff2:
  1289                           	opt stack 0
  1290                           
  1291                           ; 3 bytes @ 0x3
  1292  000004                     	ds	1
  1293  000005                     ___awdiv@counter:
  1294                           	opt stack 0
  1295  000005                     ___ftpack@sign:
  1296                           	opt stack 0
  1297  000005                     servo_rotate0@duty:
  1298                           	opt stack 0
  1299  000005                     i2___wmul@product:
  1300                           	opt stack 0
  1301  000005                     i2___lwdiv@quotient:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0x4
  1305  000005                     	ds	1
  1306  000006                     ??___ftpack:
  1307  000006                     ??_frexp:
  1308  000006                     ___awdiv@sign:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x5
  1312  000006                     	ds	1
  1313  000007                     ??___ftge:
  1314  000007                     i2___lwdiv@counter:
  1315                           	opt stack 0
  1316  000007                     servo_rotate0@i:
  1317                           	opt stack 0
  1318  000007                     ___awdiv@quotient:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x6
  1322  000007                     	ds	1
  1323  000008                     ?i2___lwmod:
  1324                           	opt stack 0
  1325  000008                     i2___lwmod@dividend:
  1326                           	opt stack 0
  1327  000008                     i2read_colorsensor@color_low:
  1328                           	opt stack 0
  1329                           
  1330                           ; 4 bytes @ 0x7
  1331  000008                     	ds	1
  1332  000009                     ?___ftdiv:
  1333                           	opt stack 0
  1334  000009                     ?___awtoft:
  1335                           	opt stack 0
  1336  000009                     ?___lltoft:
  1337                           	opt stack 0
  1338  000009                     servo_rotate0@j:
  1339                           	opt stack 0
  1340  000009                     ___awtoft@c:
  1341                           	opt stack 0
  1342  000009                     ___ftdiv@f1:
  1343                           	opt stack 0
  1344  000009                     ___lltoft@c:
  1345                           	opt stack 0
  1346                           
  1347                           ; 4 bytes @ 0x8
  1348  000009                     	ds	1
  1349  00000A                     i2___lwmod@divisor:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x9
  1353  00000A                     	ds	2
  1354  00000C                     ___awtoft@sign:
  1355                           	opt stack 0
  1356  00000C                     i2___lwmod@counter:
  1357                           	opt stack 0
  1358  00000C                     ___ftdiv@f2:
  1359                           	opt stack 0
  1360  00000C                     i2read_colorsensor@color_high:
  1361                           	opt stack 0
  1362                           
  1363                           ; 4 bytes @ 0xB
  1364  00000C                     	ds	1
  1365  00000D                     ??___lltoft:
  1366  00000D                     ?i2_printf:
  1367                           	opt stack 0
  1368  00000D                     ?___ftmul:
  1369                           	opt stack 0
  1370  00000D                     i2printf@f:
  1371                           	opt stack 0
  1372  00000D                     ___ftmul@f1:
  1373                           	opt stack 0
  1374                           
  1375                           ; 3 bytes @ 0xC
  1376  00000D                     	ds	2
  1377  00000F                     ??___ftdiv:
  1378                           
  1379                           ; 1 bytes @ 0xE
  1380  00000F                     	ds	1
  1381  000010                     i2read_colorsensor@i:
  1382                           	opt stack 0
  1383  000010                     ___ftmul@f2:
  1384                           	opt stack 0
  1385                           
  1386                           ; 3 bytes @ 0xF
  1387  000010                     	ds	1
  1388  000011                     ___lltoft@exp:
  1389                           	opt stack 0
  1390                           
  1391                           ; 1 bytes @ 0x10
  1392  000011                     	ds	1
  1393  000012                     ___ftdiv@cntr:
  1394                           	opt stack 0
  1395                           
  1396                           ; 1 bytes @ 0x11
  1397  000012                     	ds	1
  1398  000013                     ??___ftmul:
  1399  000013                     ??i2_printf:
  1400  000013                     ___ftdiv@f3:
  1401                           	opt stack 0
  1402                           
  1403                           ; 3 bytes @ 0x12
  1404  000013                     	ds	3
  1405  000016                     ___ftdiv@exp:
  1406                           	opt stack 0
  1407  000016                     ___ftmul@exp:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x15
  1411  000016                     	ds	1
  1412  000017                     ___ftdiv@sign:
  1413                           	opt stack 0
  1414  000017                     i2printf@idx:
  1415                           	opt stack 0
  1416  000017                     ___ftmul@f3_as_product:
  1417                           	opt stack 0
  1418                           
  1419                           ; 3 bytes @ 0x16
  1420  000017                     	ds	1
  1421  000018                     i2printf@ap:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x17
  1425  000018                     	ds	2
  1426  00001A                     ___ftmul@cntr:
  1427                           	opt stack 0
  1428  00001A                     i2printf@prec:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x19
  1432  00001A                     	ds	1
  1433  00001B                     ___ftmul@sign:
  1434                           	opt stack 0
  1435  00001B                     i2printf@val:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x1A
  1439  00001B                     	ds	1
  1440  00001C                     ?___ftadd:
  1441                           	opt stack 0
  1442  00001C                     ___ftadd@f1:
  1443                           	opt stack 0
  1444                           
  1445                           ; 3 bytes @ 0x1B
  1446  00001C                     	ds	1
  1447  00001D                     i2printf@flag:
  1448                           	opt stack 0
  1449                           
  1450                           ; 1 bytes @ 0x1C
  1451  00001D                     	ds	1
  1452  00001E                     i2printf@width:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x1D
  1456  00001E                     	ds	1
  1457  00001F                     ___ftadd@f2:
  1458                           	opt stack 0
  1459                           
  1460                           ; 3 bytes @ 0x1E
  1461  00001F                     	ds	1
  1462  000020                     i2printf@c:
  1463                           	opt stack 0
  1464                           
  1465                           ; 1 bytes @ 0x1F
  1466  000020                     	ds	2
  1467  000022                     ??___ftadd:
  1468                           
  1469                           ; 1 bytes @ 0x21
  1470  000022                     	ds	3
  1471  000025                     ___ftadd@sign:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x24
  1475  000025                     	ds	1
  1476  000026                     ___ftadd@exp2:
  1477                           	opt stack 0
  1478                           
  1479                           ; 1 bytes @ 0x25
  1480  000026                     	ds	1
  1481  000027                     ___ftadd@exp1:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0x26
  1485  000027                     	ds	1
  1486  000028                     ?___ftsub:
  1487                           	opt stack 0
  1488  000028                     ?_eval_poly:
  1489                           	opt stack 0
  1490  000028                     ?___fttol:
  1491                           	opt stack 0
  1492  000028                     ___ftsub@f1:
  1493                           	opt stack 0
  1494  000028                     ___fttol@f1:
  1495                           	opt stack 0
  1496  000028                     eval_poly@x:
  1497                           	opt stack 0
  1498                           
  1499                           ; 3 bytes @ 0x27
  1500  000028                     	ds	3
  1501  00002B                     eval_poly@d:
  1502                           	opt stack 0
  1503  00002B                     ___ftsub@f2:
  1504                           	opt stack 0
  1505                           
  1506                           ; 3 bytes @ 0x2A
  1507  00002B                     	ds	1
  1508  00002C                     ??___fttol:
  1509                           
  1510                           ; 1 bytes @ 0x2B
  1511  00002C                     	ds	1
  1512  00002D                     eval_poly@n:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x2C
  1516  00002D                     	ds	1
  1517  00002E                     
  1518                           ; 1 bytes @ 0x2D
  1519  00002E                     	ds	1
  1520  00002F                     ??_eval_poly:
  1521                           
  1522                           ; 1 bytes @ 0x2E
  1523  00002F                     	ds	2
  1524  000031                     ___fttol@sign1:
  1525                           	opt stack 0
  1526  000031                     eval_poly@res:
  1527                           	opt stack 0
  1528                           
  1529                           ; 3 bytes @ 0x30
  1530  000031                     	ds	1
  1531  000032                     ___fttol@lval:
  1532                           	opt stack 0
  1533                           
  1534                           ; 4 bytes @ 0x31
  1535  000032                     	ds	2
  1536  000034                     ?_log:
  1537                           	opt stack 0
  1538  000034                     ?_ldexp:
  1539                           	opt stack 0
  1540  000034                     ldexp@value:
  1541                           	opt stack 0
  1542  000034                     log@x:
  1543                           	opt stack 0
  1544                           
  1545                           ; 3 bytes @ 0x33
  1546  000034                     	ds	2
  1547  000036                     ___fttol@exp1:
  1548                           	opt stack 0
  1549                           
  1550                           ; 1 bytes @ 0x35
  1551  000036                     	ds	1
  1552  000037                     ?___altoft:
  1553                           	opt stack 0
  1554  000037                     ldexp@newexp:
  1555                           	opt stack 0
  1556  000037                     log@exponent:
  1557                           	opt stack 0
  1558  000037                     ___altoft@c:
  1559                           	opt stack 0
  1560                           
  1561                           ; 4 bytes @ 0x36
  1562  000037                     	ds	2
  1563  000039                     ??_ldexp:
  1564                           
  1565                           ; 1 bytes @ 0x38
  1566  000039                     	ds	2
  1567  00003B                     ??___altoft:
  1568                           
  1569                           ; 1 bytes @ 0x3A
  1570  00003B                     	ds	4
  1571  00003F                     ___altoft@exp:
  1572                           	opt stack 0
  1573                           
  1574                           ; 1 bytes @ 0x3E
  1575  00003F                     	ds	1
  1576  000040                     ___altoft@sign:
  1577                           	opt stack 0
  1578                           
  1579                           ; 1 bytes @ 0x3F
  1580  000040                     	ds	1
  1581  000041                     ?_floor:
  1582                           	opt stack 0
  1583  000041                     floor@x:
  1584                           	opt stack 0
  1585                           
  1586                           ; 3 bytes @ 0x40
  1587  000041                     	ds	3
  1588  000044                     floor@i:
  1589                           	opt stack 0
  1590                           
  1591                           ; 3 bytes @ 0x43
  1592  000044                     	ds	3
  1593  000047                     floor@expon:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x46
  1597  000047                     	ds	2
  1598  000049                     ?_exp:
  1599                           	opt stack 0
  1600  000049                     exp@x:
  1601                           	opt stack 0
  1602                           
  1603                           ; 3 bytes @ 0x48
  1604  000049                     	ds	3
  1605  00004C                     _exp$1265:
  1606                           	opt stack 0
  1607                           
  1608                           ; 3 bytes @ 0x4B
  1609  00004C                     	ds	3
  1610  00004F                     exp@exponent:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x4E
  1614  00004F                     	ds	2
  1615  000051                     exp@sign:
  1616                           	opt stack 0
  1617                           
  1618                           ; 1 bytes @ 0x50
  1619  000051                     	ds	1
  1620  000052                     ?_pow:
  1621                           	opt stack 0
  1622  000052                     pow@x:
  1623                           	opt stack 0
  1624                           
  1625                           ; 3 bytes @ 0x51
  1626  000052                     	ds	3
  1627  000055                     pow@y:
  1628                           	opt stack 0
  1629                           
  1630                           ; 3 bytes @ 0x54
  1631  000055                     	ds	3
  1632  000058                     _pow$1263:
  1633                           	opt stack 0
  1634                           
  1635                           ; 3 bytes @ 0x57
  1636  000058                     	ds	3
  1637  00005B                     _pow$1264:
  1638                           	opt stack 0
  1639                           
  1640                           ; 3 bytes @ 0x5A
  1641  00005B                     	ds	3
  1642  00005E                     pow@sign:
  1643                           	opt stack 0
  1644                           
  1645                           ; 1 bytes @ 0x5D
  1646  00005E                     	ds	1
  1647  00005F                     pow@yi:
  1648                           	opt stack 0
  1649                           
  1650                           ; 4 bytes @ 0x5E
  1651  00005F                     	ds	4
  1652  000063                     ?_dec_to_hex:
  1653                           	opt stack 0
  1654  000063                     dec_to_hex@num:
  1655                           	opt stack 0
  1656                           
  1657                           ; 2 bytes @ 0x62
  1658  000063                     	ds	2
  1659  000065                     _dec_to_hex$1261:
  1660                           	opt stack 0
  1661                           
  1662                           ; 3 bytes @ 0x64
  1663  000065                     	ds	3
  1664  000068                     _dec_to_hex$1262:
  1665                           	opt stack 0
  1666                           
  1667                           ; 3 bytes @ 0x67
  1668  000068                     	ds	3
  1669  00006B                     dec_to_hex@temp:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x6A
  1673  00006B                     	ds	2
  1674  00006D                     dec_to_hex@i:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0x6C
  1678  00006D                     	ds	2
  1679  00006F                     dec_to_hex@hexnum:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x6E
  1683  00006F                     	ds	2
  1684  000071                     dec_to_hex@quotient:
  1685                           	opt stack 0
  1686                           
  1687                           ; 2 bytes @ 0x70
  1688  000071                     	ds	2
  1689  000073                     isr@i:
  1690                           	opt stack 0
  1691                           
  1692                           ; 1 bytes @ 0x72
  1693  000073                     	ds	1
  1694  000074                     _isr$1360:
  1695                           	opt stack 0
  1696                           
  1697                           ; 2 bytes @ 0x73
  1698  000074                     	ds	2
  1699                           tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           postinc0	equ	0xFEE
  1704                           wreg	equ	0xFE8
  1705                           
  1706 ;;
  1707 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1708 ;;
  1709 ;; *************** function _main *****************
  1710 ;; Defined at:
  1711 ;;		line 90 in file "main.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;		None
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;		None
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;Total ram usage:        1 bytes
  1730 ;; Hardware stack levels required when called:   11
  1731 ;; This function calls:
  1732 ;;		_I2C_ColorSens_Init
  1733 ;;		_I2C_Master_Init
  1734 ;;		_bottle_count
  1735 ;;		_bottle_time
  1736 ;;		_date_time
  1737 ;;		_emergencystop
  1738 ;;		_initLCD
  1739 ;;		_operation
  1740 ;;		_operationend
  1741 ;;		_standby
  1742 ;; This function is called by:
  1743 ;;		Startup code after reset
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text0
  1748  001C22                     __ptext0:
  1749                           	opt stack 0
  1750  001C22                     _main:
  1751                           	opt stack 20
  1752                           
  1753                           ;main.c: 97: TRISA = 0b11111011;
  1754                           
  1755                           ;incstack = 0
  1756  001C22  0EFB               	movlw	251
  1757  001C24  6E92               	movwf	3986,c	;volatile
  1758                           
  1759                           ;main.c: 98: TRISB = 0xFF;
  1760  001C26  6893               	setf	3987,c	;volatile
  1761                           
  1762                           ;main.c: 99: TRISC = 0x00;
  1763  001C28  0E00               	movlw	0
  1764  001C2A  6E94               	movwf	3988,c	;volatile
  1765                           
  1766                           ;main.c: 100: TRISD = 0x00;
  1767  001C2C  0E00               	movlw	0
  1768  001C2E  6E95               	movwf	3989,c	;volatile
  1769                           
  1770                           ;main.c: 101: TRISE = 0x00;
  1771  001C30  0E00               	movlw	0
  1772  001C32  6E96               	movwf	3990,c	;volatile
  1773                           
  1774                           ;main.c: 103: LATA = 0x00;
  1775  001C34  0E00               	movlw	0
  1776  001C36  6E89               	movwf	3977,c	;volatile
  1777                           
  1778                           ;main.c: 104: LATB = 0x00;
  1779  001C38  0E00               	movlw	0
  1780  001C3A  6E8A               	movwf	3978,c	;volatile
  1781                           
  1782                           ;main.c: 105: LATC = 0x00;
  1783  001C3C  0E00               	movlw	0
  1784  001C3E  6E8B               	movwf	3979,c	;volatile
  1785                           
  1786                           ;main.c: 106: LATD = 0x00;
  1787  001C40  0E00               	movlw	0
  1788  001C42  6E8C               	movwf	3980,c	;volatile
  1789                           
  1790                           ;main.c: 107: LATE = 0x00;
  1791  001C44  0E00               	movlw	0
  1792  001C46  6E8D               	movwf	3981,c	;volatile
  1793                           
  1794                           ;main.c: 109: ADCON0 = 0x00;
  1795  001C48  0E00               	movlw	0
  1796  001C4A  6EC2               	movwf	4034,c	;volatile
  1797                           
  1798                           ;main.c: 110: ADCON1 = 0xFF;
  1799  001C4C  68C1               	setf	4033,c	;volatile
  1800                           
  1801                           ;main.c: 113: GIE = 1;
  1802  001C4E  8EF2               	bsf	intcon,7,c	;volatile
  1803                           
  1804                           ;main.c: 114: INT1IE = 1;
  1805  001C50  86F0               	bsf	intcon3,3,c	;volatile
  1806                           
  1807                           ;main.c: 115: INT0IE = 0;
  1808  001C52  98F2               	bcf	intcon,4,c	;volatile
  1809                           
  1810                           ;main.c: 117: INT2IE = 0;
  1811  001C54  98F0               	bcf	intcon3,4,c	;volatile
  1812                           
  1813                           ;main.c: 119: nRBPU = 0;
  1814  001C56  9EF1               	bcf	intcon2,7,c	;volatile
  1815                           
  1816                           ;main.c: 121: initLCD();
  1817  001C58  EC26  F014         	call	_initLCD	;wreg free
  1818                           
  1819                           ;main.c: 122: I2C_Master_Init(10000);
  1820  001C5C  0E10               	movlw	16
  1821  001C5E  0100               	movlb	0	; () banked
  1822  001C60  6F9D               	movwf	I2C_Master_Init@c& (0+255),b
  1823  001C62  0E27               	movlw	39
  1824  001C64  6F9E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1825  001C66  0E00               	movlw	0
  1826  001C68  6F9F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1827  001C6A  0E00               	movlw	0
  1828  001C6C  6FA0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1829  001C6E  EC9F  F013         	call	_I2C_Master_Init	;wreg free
  1830                           
  1831                           ;main.c: 123: I2C_ColorSens_Init();
  1832  001C72  ECCD  F008         	call	_I2C_ColorSens_Init	;wreg free
  1833                           
  1834                           ;main.c: 126: TMR0 = 0;
  1835  001C76  0E00               	movlw	0
  1836  001C78  6ED7               	movwf	4055,c	;volatile
  1837  001C7A  0E00               	movlw	0
  1838  001C7C  6ED6               	movwf	4054,c	;volatile
  1839                           
  1840                           ;main.c: 127: T08BIT = 0;
  1841  001C7E  9CD5               	bcf	4053,6,c	;volatile
  1842                           
  1843                           ;main.c: 128: T0CS = 0;
  1844  001C80  9AD5               	bcf	4053,5,c	;volatile
  1845                           
  1846                           ;main.c: 129: PSA = 0;
  1847  001C82  96D5               	bcf	4053,3,c	;volatile
  1848                           
  1849                           ;main.c: 130: T0PS2 = 1;
  1850  001C84  84D5               	bsf	4053,2,c	;volatile
  1851                           
  1852                           ;main.c: 131: T0PS1 = 1;
  1853  001C86  82D5               	bsf	4053,1,c	;volatile
  1854                           
  1855                           ;main.c: 132: T0PS0 = 1;
  1856  001C88  80D5               	bsf	4053,0,c	;volatile
  1857                           
  1858                           ;main.c: 136: curr_state = STANDBY;
  1859  001C8A  0E00               	movlw	0
  1860  001C8C  0100               	movlb	0	; () banked
  1861  001C8E  6FEC               	movwf	_curr_state& (0+255),b
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 139: switch(curr_state){
  1865                           
  1866                           ;main.c: 138: while(1){
  1867  001C90  D015               	goto	l4577
  1868  001C92                     l4561:
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;main.c: 141: standby();
  1872  001C92  EC14  F010         	call	_standby	;wreg free
  1873                           
  1874                           ;main.c: 142: break;
  1875  001C96  D029               	goto	l4579
  1876  001C98                     l4563:
  1877                           
  1878                           ;main.c: 144: emergencystop();
  1879  001C98  EC91  F015         	call	_emergencystop	;wreg free
  1880                           
  1881                           ;main.c: 145: break;
  1882  001C9C  D026               	goto	l4579
  1883  001C9E                     l4565:
  1884                           
  1885                           ;main.c: 147: operation();
  1886  001C9E  ECB4  F00F         	call	_operation	;wreg free
  1887                           
  1888                           ;main.c: 148: break;
  1889  001CA2  D023               	goto	l4579
  1890  001CA4                     l4567:
  1891                           
  1892                           ;main.c: 150: operationend();
  1893  001CA4  ECB1  F015         	call	_operationend	;wreg free
  1894                           
  1895                           ;main.c: 151: break;
  1896  001CA8  D020               	goto	l4579
  1897  001CAA                     l4569:
  1898                           
  1899                           ;main.c: 153: date_time();
  1900  001CAA  EC7F  F00E         	call	_date_time	;wreg free
  1901                           
  1902                           ;main.c: 154: break;
  1903  001CAE  D01D               	goto	l4579
  1904  001CB0                     l4571:
  1905                           
  1906                           ;main.c: 156: bottle_count();
  1907  001CB0  EC48  F007         	call	_bottle_count	;wreg free
  1908                           
  1909                           ;main.c: 157: break;
  1910  001CB4  D01A               	goto	l4579
  1911  001CB6                     l4573:
  1912                           
  1913                           ;main.c: 159: bottle_time();
  1914  001CB6  ECF7  F014         	call	_bottle_time	;wreg free
  1915                           
  1916                           ;main.c: 161: }
  1917                           
  1918                           ;main.c: 160: break;
  1919  001CBA  D017               	goto	l4579
  1920  001CBC                     l4577:
  1921  001CBC  0100               	movlb	0	; () banked
  1922  001CBE  51EC               	movf	_curr_state& (0+255),w,b
  1923                           
  1924                           ; Switch size 1, requested type "space"
  1925                           ; Number of cases is 7, Range of values is 0 to 6
  1926                           ; switch strategies available:
  1927                           ; Name         Instructions Cycles
  1928                           ; simple_byte           22    12 (average)
  1929                           ;	Chosen strategy is simple_byte
  1930  001CC0  0A00               	xorlw	0	; case 0
  1931  001CC2  B4D8               	btfsc	status,2,c
  1932  001CC4  D7E6               	goto	l4561
  1933  001CC6  0A01               	xorlw	1	; case 1
  1934  001CC8  B4D8               	btfsc	status,2,c
  1935  001CCA  D7E6               	goto	l4563
  1936  001CCC  0A03               	xorlw	3	; case 2
  1937  001CCE  B4D8               	btfsc	status,2,c
  1938  001CD0  D7E6               	goto	l4565
  1939  001CD2  0A01               	xorlw	1	; case 3
  1940  001CD4  B4D8               	btfsc	status,2,c
  1941  001CD6  D7E6               	goto	l4567
  1942  001CD8  0A07               	xorlw	7	; case 4
  1943  001CDA  B4D8               	btfsc	status,2,c
  1944  001CDC  D7E6               	goto	l4569
  1945  001CDE  0A01               	xorlw	1	; case 5
  1946  001CE0  B4D8               	btfsc	status,2,c
  1947  001CE2  D7E6               	goto	l4571
  1948  001CE4  0A03               	xorlw	3	; case 6
  1949  001CE6  B4D8               	btfsc	status,2,c
  1950  001CE8  D7E6               	goto	l4573
  1951  001CEA                     l4579:
  1952                           
  1953                           ;main.c: 162: _delay((unsigned long)((10)*(10000000/4000.0)));
  1954  001CEA  0E21               	movlw	33
  1955  001CEC  0100               	movlb	0	; () banked
  1956  001CEE  6FB6               	movwf	??_main& (0+255),b
  1957  001CF0  0E76               	movlw	118
  1958  001CF2                     u4127:
  1959  001CF2  2EE8               	decfsz	wreg,f,c
  1960  001CF4  D7FE               	bra	u4127
  1961  001CF6  2FB6               	decfsz	??_main& (0+255),f,b
  1962  001CF8  D7FC               	bra	u4127
  1963  001CFA  F000               	nop	
  1964  001CFC  D7DF               	goto	l4577
  1965  001CFE                     __end_of_main:
  1966                           	opt stack 0
  1967                           tblptru	equ	0xFF8
  1968                           tblptrh	equ	0xFF7
  1969                           tblptrl	equ	0xFF6
  1970                           tablat	equ	0xFF5
  1971                           intcon	equ	0xFF2
  1972                           intcon2	equ	0xFF1
  1973                           intcon3	equ	0xFF0
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           status	equ	0xFD8
  1977                           
  1978 ;; *************** function _standby *****************
  1979 ;; Defined at:
  1980 ;;		line 376 in file "main.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;		None
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;		None
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  1    wreg      void 
  1987 ;; Registers used:
  1988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;Total ram usage:        0 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:   10
  2001 ;; This function calls:
  2002 ;;		_lcdInst
  2003 ;;		_printf
  2004 ;;		_read_colorsensor
  2005 ;; This function is called by:
  2006 ;;		_main
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text1
  2011  002028                     __ptext1:
  2012                           	opt stack 0
  2013  002028                     _standby:
  2014                           	opt stack 20
  2015                           
  2016                           ;main.c: 377: read_colorsensor();
  2017                           
  2018                           ;incstack = 0
  2019  002028  EC21  F00A         	call	_read_colorsensor	;wreg free
  2020                           
  2021                           ;main.c: 378: if((color[0]>50) && (color[0]<55)){
  2022  00202C  BE77               	btfsc	_color+1,7,c
  2023  00202E  D022               	goto	l4097
  2024  002030  5077               	movf	_color+1,w,c
  2025  002032  E104               	bnz	u3590
  2026  002034  0E33               	movlw	51
  2027  002036  5C76               	subwf	_color,w,c
  2028  002038  A0D8               	btfss	status,0,c
  2029  00203A  D01C               	goto	l4097
  2030  00203C                     u3590:
  2031  00203C  BE77               	btfsc	_color+1,7,c
  2032  00203E  D006               	goto	l4085
  2033  002040  5077               	movf	_color+1,w,c
  2034  002042  E118               	bnz	l4097
  2035  002044  0E37               	movlw	55
  2036  002046  5C76               	subwf	_color,w,c
  2037  002048  B0D8               	btfsc	status,0,c
  2038  00204A  D014               	goto	l4097
  2039  00204C                     l4085:
  2040                           
  2041                           ;main.c: 379: testflag += 1;
  2042  00204C  0100               	movlb	0	; () banked
  2043  00204E  4BE0               	infsnz	_testflag& (0+255),f,b
  2044  002050  2BE1               	incf	(_testflag+1)& (0+255),f,b
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 380: if(testflag = 2){
  2048  002052  0E00               	movlw	0
  2049  002054  0100               	movlb	0	; () banked
  2050  002056  6FE1               	movwf	(_testflag+1)& (0+255),b
  2051  002058  0E02               	movlw	2
  2052  00205A  6FE0               	movwf	_testflag& (0+255),b
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;main.c: 381: testint[0] = color[1];
  2056  00205C  C078  F0BE         	movff	_color+2,_testint
  2057  002060  C079  F0BF         	movff	_color+3,_testint+1
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;main.c: 382: testint[1] = color[2];
  2061  002064  C07A  F0C0         	movff	_color+4,_testint+2
  2062  002068  C07B  F0C1         	movff	_color+5,_testint+3
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;main.c: 383: testint[2] = color[3];
  2066  00206C  C07C  F0C2         	movff	_color+6,_testint+4
  2067  002070  C07D  F0C3         	movff	_color+7,_testint+5
  2068  002074                     l4097:
  2069                           
  2070                           ;main.c: 387: else{
  2071                           ;main.c: 388: testflag = 0;
  2072  002074  0E00               	movlw	0
  2073  002076  0100               	movlb	0	; () banked
  2074  002078  6FE1               	movwf	(_testflag+1)& (0+255),b
  2075  00207A  0E00               	movlw	0
  2076  00207C  6FE0               	movwf	_testflag& (0+255),b
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;main.c: 389: }
  2080                           ;main.c: 390: lcdInst(0b10000000);
  2081                           
  2082                           ; BSR set to: 0
  2083  00207E  0E80               	movlw	128
  2084  002080  ECD8  F015         	call	_lcdInst
  2085                           
  2086                           ;main.c: 391: printf("%03d, %03d, %03d", testint[0], testint[1], testint[2]);
  2087  002084  0EB6               	movlw	low STR_6
  2088  002086  0100               	movlb	0	; () banked
  2089  002088  6F9C               	movwf	printf@f& (0+255),b
  2090  00208A  0EFF               	movlw	high STR_6
  2091  00208C  0100               	movlb	0	; () banked
  2092  00208E  6F9D               	movwf	(printf@f+1)& (0+255),b
  2093  002090  C0BE  F09E         	movff	_testint,?_printf+2
  2094  002094  C0BF  F09F         	movff	_testint+1,?_printf+3
  2095  002098  C0C0  F0A0         	movff	_testint+2,?_printf+4
  2096  00209C  C0C1  F0A1         	movff	_testint+3,?_printf+5
  2097  0020A0  C0C2  F0A2         	movff	_testint+4,?_printf+6
  2098  0020A4  C0C3  F0A3         	movff	_testint+5,?_printf+7
  2099  0020A8  ECFD  F001         	call	_printf	;wreg free
  2100                           
  2101                           ;main.c: 392: lcdInst(0b11000000);
  2102  0020AC  0EC0               	movlw	192
  2103  0020AE  ECD8  F015         	call	_lcdInst
  2104                           
  2105                           ;main.c: 393: printf("%03d %03d %03d %03d", color[0], color[1], color[2], color[3]);
  2106  0020B2  0ECD               	movlw	low STR_7
  2107  0020B4  0100               	movlb	0	; () banked
  2108  0020B6  6F9C               	movwf	printf@f& (0+255),b
  2109  0020B8  0EFE               	movlw	high STR_7
  2110  0020BA  0100               	movlb	0	; () banked
  2111  0020BC  6F9D               	movwf	(printf@f+1)& (0+255),b
  2112  0020BE  C076  F09E         	movff	_color,?_printf+2
  2113  0020C2  C077  F09F         	movff	_color+1,?_printf+3
  2114  0020C6  C078  F0A0         	movff	_color+2,?_printf+4
  2115  0020CA  C079  F0A1         	movff	_color+3,?_printf+5
  2116  0020CE  C07A  F0A2         	movff	_color+4,?_printf+6
  2117  0020D2  C07B  F0A3         	movff	_color+5,?_printf+7
  2118  0020D6  C07C  F0A4         	movff	_color+6,?_printf+8
  2119  0020DA  C07D  F0A5         	movff	_color+7,?_printf+9
  2120  0020DE  ECFD  F001         	call	_printf	;wreg free
  2121  0020E2  0012               	return	
  2122  0020E4                     __end_of_standby:
  2123                           	opt stack 0
  2124                           tblptru	equ	0xFF8
  2125                           tblptrh	equ	0xFF7
  2126                           tblptrl	equ	0xFF6
  2127                           tablat	equ	0xFF5
  2128                           intcon	equ	0xFF2
  2129                           intcon2	equ	0xFF1
  2130                           intcon3	equ	0xFF0
  2131                           postinc0	equ	0xFEE
  2132                           wreg	equ	0xFE8
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _operationend *****************
  2136 ;; Defined at:
  2137 ;;		line 563 in file "main.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;		None
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;		None
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  1    wreg      void 
  2144 ;; Registers used:
  2145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;Total ram usage:        0 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:   10
  2158 ;; This function calls:
  2159 ;;		_lcdInst
  2160 ;;		_printf
  2161 ;; This function is called by:
  2162 ;;		_main
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text2
  2167  002B62                     __ptext2:
  2168                           	opt stack 0
  2169  002B62                     _operationend:
  2170                           	opt stack 20
  2171                           
  2172                           ;main.c: 564: lcdInst(0b10000000);
  2173                           
  2174                           ;incstack = 0
  2175  002B62  0E80               	movlw	128
  2176  002B64  ECD8  F015         	call	_lcdInst
  2177                           
  2178                           ;main.c: 565: printf("Operation Done!");
  2179  002B68  0EC7               	movlw	low STR_27
  2180  002B6A  0100               	movlb	0	; () banked
  2181  002B6C  6F9C               	movwf	printf@f& (0+255),b
  2182  002B6E  0EFF               	movlw	high STR_27
  2183  002B70  0100               	movlb	0	; () banked
  2184  002B72  6F9D               	movwf	(printf@f+1)& (0+255),b
  2185  002B74  ECFD  F001         	call	_printf	;wreg free
  2186  002B78  0012               	return	
  2187  002B7A                     __end_of_operationend:
  2188                           	opt stack 0
  2189                           tblptru	equ	0xFF8
  2190                           tblptrh	equ	0xFF7
  2191                           tblptrl	equ	0xFF6
  2192                           tablat	equ	0xFF5
  2193                           intcon	equ	0xFF2
  2194                           intcon2	equ	0xFF1
  2195                           intcon3	equ	0xFF0
  2196                           postinc0	equ	0xFEE
  2197                           wreg	equ	0xFE8
  2198                           status	equ	0xFD8
  2199                           
  2200 ;; *************** function _operation *****************
  2201 ;; Defined at:
  2202 ;;		line 538 in file "main.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;		None
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;		None
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      void 
  2209 ;; Registers used:
  2210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;Total ram usage:        2 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:   10
  2223 ;; This function calls:
  2224 ;;		_lcdInst
  2225 ;;		_printf
  2226 ;;		_read_colorsensor
  2227 ;; This function is called by:
  2228 ;;		_main
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text3
  2233  001F68                     __ptext3:
  2234                           	opt stack 0
  2235  001F68                     _operation:
  2236                           	opt stack 20
  2237                           
  2238                           ;main.c: 539: switch(operation_disp){
  2239                           
  2240                           ;incstack = 0
  2241  001F68  D031               	goto	l4137
  2242  001F6A                     l4117:
  2243                           
  2244                           ;main.c: 541: lcdInst(0b10000000);
  2245  001F6A  0E80               	movlw	128
  2246  001F6C  ECD8  F015         	call	_lcdInst
  2247                           
  2248                           ;main.c: 542: printf("Running~              ");
  2249  001F70  0E71               	movlw	low STR_23
  2250  001F72  0100               	movlb	0	; () banked
  2251  001F74  6F9C               	movwf	printf@f& (0+255),b
  2252  001F76  0EFE               	movlw	high STR_23
  2253  001F78  0100               	movlb	0	; () banked
  2254  001F7A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2255  001F7C  ECFD  F001         	call	_printf	;wreg free
  2256                           
  2257                           ;main.c: 543: operation_disp = 1;
  2258  001F80  0E00               	movlw	0
  2259  001F82  0100               	movlb	0	; () banked
  2260  001F84  6FD9               	movwf	(_operation_disp+1)& (0+255),b
  2261  001F86  0E01               	movlw	1
  2262  001F88  D01F               	goto	L2
  2263  001F8A                     l4123:
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;main.c: 546: lcdInst(0b10000000);
  2267  001F8A  0E80               	movlw	128
  2268  001F8C  ECD8  F015         	call	_lcdInst
  2269                           
  2270                           ;main.c: 547: printf("Running~~              ");
  2271  001F90  0E59               	movlw	low STR_24
  2272  001F92  0100               	movlb	0	; () banked
  2273  001F94  6F9C               	movwf	printf@f& (0+255),b
  2274  001F96  0EFE               	movlw	high STR_24
  2275  001F98  0100               	movlb	0	; () banked
  2276  001F9A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2277  001F9C  ECFD  F001         	call	_printf	;wreg free
  2278                           
  2279                           ;main.c: 548: operation_disp = 2;
  2280  001FA0  0E00               	movlw	0
  2281  001FA2  0100               	movlb	0	; () banked
  2282  001FA4  6FD9               	movwf	(_operation_disp+1)& (0+255),b
  2283  001FA6  0E02               	movlw	2
  2284  001FA8  D00F               	goto	L2
  2285  001FAA                     l4129:
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;main.c: 551: lcdInst(0b10000000);
  2289  001FAA  0E80               	movlw	128
  2290  001FAC  ECD8  F015         	call	_lcdInst
  2291                           
  2292                           ;main.c: 552: printf("Running~~~              ");
  2293  001FB0  0E10               	movlw	low STR_25
  2294  001FB2  0100               	movlb	0	; () banked
  2295  001FB4  6F9C               	movwf	printf@f& (0+255),b
  2296  001FB6  0EFE               	movlw	high STR_25
  2297  001FB8  0100               	movlb	0	; () banked
  2298  001FBA  6F9D               	movwf	(printf@f+1)& (0+255),b
  2299  001FBC  ECFD  F001         	call	_printf	;wreg free
  2300                           
  2301                           ;main.c: 553: operation_disp = 0;
  2302  001FC0  0E00               	movlw	0
  2303  001FC2  0100               	movlb	0	; () banked
  2304  001FC4  6FD9               	movwf	(_operation_disp+1)& (0+255),b
  2305  001FC6  0E00               	movlw	0
  2306  001FC8                     L2:
  2307  001FC8  6FD8               	movwf	_operation_disp& (0+255),b
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;main.c: 555: }
  2311                           
  2312                           ;main.c: 554: break;
  2313  001FCA  D014               	goto	l4139
  2314  001FCC                     l4137:
  2315  001FCC  C0D8  F0B4         	movff	_operation_disp,??_operation
  2316  001FD0  C0D9  F0B5         	movff	_operation_disp+1,??_operation+1
  2317                           
  2318                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2319                           ; Switch size 1, requested type "space"
  2320                           ; Number of cases is 1, Range of values is 0 to 0
  2321                           ; switch strategies available:
  2322                           ; Name         Instructions Cycles
  2323                           ; simple_byte            4     3 (average)
  2324                           ;	Chosen strategy is simple_byte
  2325  001FD4  0100               	movlb	0	; () banked
  2326  001FD6  51B5               	movf	(??_operation+1)& (0+255),w,b
  2327  001FD8  0A00               	xorlw	0	; case 0
  2328  001FDA  A4D8               	btfss	status,2,c
  2329  001FDC  D00B               	goto	l4139
  2330                           
  2331                           ; BSR set to: 0
  2332                           ; Switch size 1, requested type "space"
  2333                           ; Number of cases is 3, Range of values is 0 to 2
  2334                           ; switch strategies available:
  2335                           ; Name         Instructions Cycles
  2336                           ; simple_byte           10     6 (average)
  2337                           ;	Chosen strategy is simple_byte
  2338  001FDE  0100               	movlb	0	; () banked
  2339  001FE0  51B4               	movf	??_operation& (0+255),w,b
  2340  001FE2  0A00               	xorlw	0	; case 0
  2341  001FE4  B4D8               	btfsc	status,2,c
  2342  001FE6  D7C1               	goto	l4117
  2343  001FE8  0A01               	xorlw	1	; case 1
  2344  001FEA  B4D8               	btfsc	status,2,c
  2345  001FEC  D7CE               	goto	l4123
  2346  001FEE  0A03               	xorlw	3	; case 2
  2347  001FF0  B4D8               	btfsc	status,2,c
  2348  001FF2  D7DB               	goto	l4129
  2349  001FF4                     l4139:
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;main.c: 557: lcdInst(0b11000000);
  2353  001FF4  0EC0               	movlw	192
  2354  001FF6  ECD8  F015         	call	_lcdInst
  2355                           
  2356                           ;main.c: 558: read_colorsensor();
  2357  001FFA  EC21  F00A         	call	_read_colorsensor	;wreg free
  2358                           
  2359                           ;main.c: 559: printf("R%d G%d B%d                ", color[1], color[2], color[3]);
  2360  001FFE  0EF4               	movlw	low STR_26
  2361  002000  0100               	movlb	0	; () banked
  2362  002002  6F9C               	movwf	printf@f& (0+255),b
  2363  002004  0EFD               	movlw	high STR_26
  2364  002006  0100               	movlb	0	; () banked
  2365  002008  6F9D               	movwf	(printf@f+1)& (0+255),b
  2366  00200A  C078  F09E         	movff	_color+2,?_printf+2
  2367  00200E  C079  F09F         	movff	_color+3,?_printf+3
  2368  002012  C07A  F0A0         	movff	_color+4,?_printf+4
  2369  002016  C07B  F0A1         	movff	_color+5,?_printf+5
  2370  00201A  C07C  F0A2         	movff	_color+6,?_printf+6
  2371  00201E  C07D  F0A3         	movff	_color+7,?_printf+7
  2372  002022  ECFD  F001         	call	_printf	;wreg free
  2373  002026  0012               	return	
  2374  002028                     __end_of_operation:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           intcon	equ	0xFF2
  2381                           intcon2	equ	0xFF1
  2382                           intcon3	equ	0xFF0
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _read_colorsensor *****************
  2388 ;; Defined at:
  2389 ;;		line 618 in file "main.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  color_high      4   27[BANK0 ] unsigned char [4]
  2394 ;;  color_low       4   23[BANK0 ] unsigned char [4]
  2395 ;;  i               2   31[BANK0 ] int 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;Total ram usage:       14 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    9
  2412 ;; This function calls:
  2413 ;;		_I2C_Master_Read
  2414 ;;		_I2C_Master_Start
  2415 ;;		_I2C_Master_Stop
  2416 ;;		_I2C_Master_Write
  2417 ;; This function is called by:
  2418 ;;		_standby
  2419 ;;		_operation
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text4
  2424  001442                     __ptext4:
  2425                           	opt stack 0
  2426  001442                     _read_colorsensor:
  2427                           	opt stack 20
  2428                           
  2429                           ;main.c: 623: unsigned char color_low[4];
  2430                           ;main.c: 624: unsigned char color_high[4];
  2431                           ;main.c: 625: int i;
  2432                           ;main.c: 628: I2C_Master_Start();
  2433                           
  2434                           ;incstack = 0
  2435  001442  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  2436                           
  2437                           ;main.c: 629: I2C_Master_Write(0b01010010);
  2438  001446  0E00               	movlw	0
  2439  001448  0100               	movlb	0	; () banked
  2440  00144A  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2441  00144C  0E52               	movlw	82
  2442  00144E  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2443  001450  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  2444                           
  2445                           ;main.c: 630: I2C_Master_Write(0b10110100);
  2446  001454  0E00               	movlw	0
  2447  001456  0100               	movlb	0	; () banked
  2448  001458  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2449  00145A  0EB4               	movlw	180
  2450  00145C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2451  00145E  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  2452                           
  2453                           ;main.c: 631: I2C_Master_Start();
  2454  001462  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  2455                           
  2456                           ;main.c: 632: I2C_Master_Write(0b01010011);
  2457  001466  0E00               	movlw	0
  2458  001468  0100               	movlb	0	; () banked
  2459  00146A  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2460  00146C  0E53               	movlw	83
  2461  00146E  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2462  001470  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  2463                           
  2464                           ;main.c: 633: for(i=0; i<3; i++){
  2465  001474  0E00               	movlw	0
  2466  001476  0100               	movlb	0	; () banked
  2467  001478  6FA0               	movwf	(read_colorsensor@i+1)& (0+255),b
  2468  00147A  0E00               	movlw	0
  2469  00147C  6F9F               	movwf	read_colorsensor@i& (0+255),b
  2470  00147E                     l3613:
  2471                           
  2472                           ; BSR set to: 0
  2473  00147E  0100               	movlb	0	; () banked
  2474  001480  BFA0               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2475  001482  D008               	goto	l3617
  2476  001484  0100               	movlb	0	; () banked
  2477  001486  51A0               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2478  001488  E121               	bnz	l3623
  2479  00148A  0E03               	movlw	3
  2480  00148C  0100               	movlb	0	; () banked
  2481  00148E  5D9F               	subwf	read_colorsensor@i& (0+255),w,b
  2482  001490  B0D8               	btfsc	status,0,c
  2483  001492  D01C               	goto	l3623
  2484  001494                     l3617:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;main.c: 634: color_low[i] = I2C_Master_Read(1);
  2488  001494  0E97               	movlw	low read_colorsensor@color_low
  2489  001496  0100               	movlb	0	; () banked
  2490  001498  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2491  00149A  6ED9               	movwf	fsr2l,c
  2492  00149C  0E00               	movlw	high read_colorsensor@color_low
  2493  00149E  0100               	movlb	0	; () banked
  2494  0014A0  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2495  0014A2  6EDA               	movwf	fsr2h,c
  2496  0014A4  0E01               	movlw	1
  2497  0014A6  EC2D  F015         	call	_I2C_Master_Read
  2498  0014AA  6EDF               	movwf	indf2,c
  2499                           
  2500                           ;main.c: 635: color_high[i] = I2C_Master_Read(1);
  2501  0014AC  0E9B               	movlw	low read_colorsensor@color_high
  2502  0014AE  0100               	movlb	0	; () banked
  2503  0014B0  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2504  0014B2  6ED9               	movwf	fsr2l,c
  2505  0014B4  0E00               	movlw	high read_colorsensor@color_high
  2506  0014B6  0100               	movlb	0	; () banked
  2507  0014B8  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2508  0014BA  6EDA               	movwf	fsr2h,c
  2509  0014BC  0E01               	movlw	1
  2510  0014BE  EC2D  F015         	call	_I2C_Master_Read
  2511  0014C2  6EDF               	movwf	indf2,c
  2512  0014C4  0100               	movlb	0	; () banked
  2513  0014C6  4B9F               	infsnz	read_colorsensor@i& (0+255),f,b
  2514  0014C8  2BA0               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2515  0014CA  D7D9               	goto	l3613
  2516  0014CC                     l3623:
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;main.c: 636: }
  2520                           ;main.c: 637: color_low[3] = I2C_Master_Read(1);
  2521  0014CC  0E01               	movlw	1
  2522  0014CE  EC2D  F015         	call	_I2C_Master_Read
  2523  0014D2  0100               	movlb	0	; () banked
  2524  0014D4  6F9A               	movwf	(read_colorsensor@color_low+3)& (0+255),b
  2525                           
  2526                           ;main.c: 638: color_high[3] = I2C_Master_Read(0);
  2527  0014D6  0E00               	movlw	0
  2528  0014D8  EC2D  F015         	call	_I2C_Master_Read
  2529  0014DC  0100               	movlb	0	; () banked
  2530  0014DE  6F9E               	movwf	(read_colorsensor@color_high+3)& (0+255),b
  2531                           
  2532                           ;main.c: 639: I2C_Master_Stop();
  2533  0014E0  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  2534                           
  2535                           ;main.c: 641: for(i=0; i<4; i++){
  2536  0014E4  0E00               	movlw	0
  2537  0014E6  0100               	movlb	0	; () banked
  2538  0014E8  6FA0               	movwf	(read_colorsensor@i+1)& (0+255),b
  2539  0014EA  0E00               	movlw	0
  2540  0014EC  6F9F               	movwf	read_colorsensor@i& (0+255),b
  2541  0014EE                     l3627:
  2542                           
  2543                           ; BSR set to: 0
  2544  0014EE  0100               	movlb	0	; () banked
  2545  0014F0  BFA0               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2546  0014F2  D008               	goto	l3631
  2547  0014F4  0100               	movlb	0	; () banked
  2548  0014F6  51A0               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2549  0014F8  E139               	bnz	l395
  2550  0014FA  0E04               	movlw	4
  2551  0014FC  0100               	movlb	0	; () banked
  2552  0014FE  5D9F               	subwf	read_colorsensor@i& (0+255),w,b
  2553  001500  B0D8               	btfsc	status,0,c
  2554  001502  0012               	return	
  2555  001504                     l3631:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 642: color[i] = (color_high[i] << 8)|(color_low[i]);
  2559  001504  0E9B               	movlw	low read_colorsensor@color_high
  2560  001506  0100               	movlb	0	; () banked
  2561  001508  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2562  00150A  6ED9               	movwf	fsr2l,c
  2563  00150C  0E00               	movlw	high read_colorsensor@color_high
  2564  00150E  0100               	movlb	0	; () banked
  2565  001510  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2566  001512  6EDA               	movwf	fsr2h,c
  2567  001514  50DF               	movf	indf2,w,c
  2568  001516  0100               	movlb	0	; () banked
  2569  001518  6F93               	movwf	??_read_colorsensor& (0+255),b
  2570  00151A  0100               	movlb	0	; () banked
  2571  00151C  5193               	movf	??_read_colorsensor& (0+255),w,b
  2572  00151E  0100               	movlb	0	; () banked
  2573  001520  6F95               	movwf	(??_read_colorsensor+2)& (0+255),b
  2574  001522  6B94               	clrf	(??_read_colorsensor+1)& (0+255),b
  2575  001524  0E97               	movlw	low read_colorsensor@color_low
  2576  001526  0100               	movlb	0	; () banked
  2577  001528  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2578  00152A  6ED9               	movwf	fsr2l,c
  2579  00152C  0E00               	movlw	high read_colorsensor@color_low
  2580  00152E  0100               	movlb	0	; () banked
  2581  001530  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2582  001532  6EDA               	movwf	fsr2h,c
  2583  001534  50DF               	movf	indf2,w,c
  2584  001536  0100               	movlb	0	; () banked
  2585  001538  6F96               	movwf	(??_read_colorsensor+3)& (0+255),b
  2586  00153A  0100               	movlb	0	; () banked
  2587  00153C  5196               	movf	(??_read_colorsensor+3)& (0+255),w,b
  2588  00153E  0100               	movlb	0	; () banked
  2589  001540  1394               	iorwf	(??_read_colorsensor+1)& (0+255),f,b
  2590  001542  0E00               	movlw	0
  2591  001544  1395               	iorwf	(??_read_colorsensor+2)& (0+255),f,b
  2592  001546  90D8               	bcf	status,0,c
  2593  001548  0100               	movlb	0	; () banked
  2594  00154A  359F               	rlcf	read_colorsensor@i& (0+255),w,b
  2595  00154C  6ED9               	movwf	fsr2l,c
  2596  00154E  0100               	movlb	0	; () banked
  2597  001550  35A0               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2598  001552  6EDA               	movwf	fsr2h,c
  2599  001554  0E76               	movlw	low _color
  2600  001556  26D9               	addwf	fsr2l,f,c
  2601  001558  0E00               	movlw	high _color
  2602  00155A  22DA               	addwfc	fsr2h,f,c
  2603  00155C  C094  FFDE         	movff	??_read_colorsensor+1,postinc2
  2604  001560  C095  FFDD         	movff	??_read_colorsensor+2,postdec2
  2605                           
  2606                           ; BSR set to: 0
  2607  001564  0100               	movlb	0	; () banked
  2608  001566  4B9F               	infsnz	read_colorsensor@i& (0+255),f,b
  2609  001568  2BA0               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2610  00156A  D7C1               	goto	l3627
  2611  00156C                     l395:
  2612                           
  2613                           ; BSR set to: 0
  2614  00156C  0012               	return		;funcret
  2615  00156E                     __end_of_read_colorsensor:
  2616                           	opt stack 0
  2617                           tblptru	equ	0xFF8
  2618                           tblptrh	equ	0xFF7
  2619                           tblptrl	equ	0xFF6
  2620                           tablat	equ	0xFF5
  2621                           intcon	equ	0xFF2
  2622                           intcon2	equ	0xFF1
  2623                           intcon3	equ	0xFF0
  2624                           postinc0	equ	0xFEE
  2625                           wreg	equ	0xFE8
  2626                           indf2	equ	0xFDF
  2627                           postinc2	equ	0xFDE
  2628                           postdec2	equ	0xFDD
  2629                           fsr2h	equ	0xFDA
  2630                           fsr2l	equ	0xFD9
  2631                           status	equ	0xFD8
  2632                           
  2633 ;; *************** function _initLCD *****************
  2634 ;; Defined at:
  2635 ;;		line 14 in file "lcd.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;		None
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;		None
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2, status,0, cstack
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;Total ram usage:        1 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    9
  2656 ;; This function calls:
  2657 ;;		_lcdInst
  2658 ;; This function is called by:
  2659 ;;		_main
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text5
  2664  00284C                     __ptext5:
  2665                           	opt stack 0
  2666  00284C                     _initLCD:
  2667                           	opt stack 21
  2668                           
  2669                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;incstack = 0
  2673  00284C  0E31               	movlw	49
  2674  00284E  0100               	movlb	0	; () banked
  2675  002850  6F93               	movwf	??_initLCD& (0+255),b
  2676  002852  0EB2               	movlw	178
  2677  002854                     u4137:
  2678  002854  2EE8               	decfsz	wreg,f,c
  2679  002856  D7FE               	bra	u4137
  2680  002858  2F93               	decfsz	??_initLCD& (0+255),f,b
  2681  00285A  D7FC               	bra	u4137
  2682  00285C  F000               	nop	
  2683                           
  2684                           ;lcd.c: 16: lcdInst(0b00110011);
  2685  00285E  0E33               	movlw	51
  2686  002860  ECD8  F015         	call	_lcdInst
  2687                           
  2688                           ;lcd.c: 17: lcdInst(0b00110011);
  2689  002864  0E33               	movlw	51
  2690  002866  ECD8  F015         	call	_lcdInst
  2691                           
  2692                           ;lcd.c: 18: lcdInst(0b00110010);
  2693  00286A  0E32               	movlw	50
  2694  00286C  ECD8  F015         	call	_lcdInst
  2695                           
  2696                           ;lcd.c: 19: lcdInst(0b00101000);
  2697  002870  0E28               	movlw	40
  2698  002872  ECD8  F015         	call	_lcdInst
  2699                           
  2700                           ;lcd.c: 20: lcdInst(0b00001111);
  2701  002876  0E0F               	movlw	15
  2702  002878  ECD8  F015         	call	_lcdInst
  2703                           
  2704                           ;lcd.c: 21: lcdInst(0b00000110);
  2705  00287C  0E06               	movlw	6
  2706  00287E  ECD8  F015         	call	_lcdInst
  2707                           
  2708                           ;lcd.c: 22: lcdInst(0b00000001);
  2709  002882  0E01               	movlw	1
  2710  002884  ECD8  F015         	call	_lcdInst
  2711                           
  2712                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2713  002888  0E31               	movlw	49
  2714  00288A  0100               	movlb	0	; () banked
  2715  00288C  6F93               	movwf	??_initLCD& (0+255),b
  2716  00288E  0EB2               	movlw	178
  2717  002890                     u4147:
  2718  002890  2EE8               	decfsz	wreg,f,c
  2719  002892  D7FE               	bra	u4147
  2720  002894  2F93               	decfsz	??_initLCD& (0+255),f,b
  2721  002896  D7FC               	bra	u4147
  2722  002898  F000               	nop	
  2723  00289A  0012               	return		;funcret
  2724  00289C                     __end_of_initLCD:
  2725                           	opt stack 0
  2726                           tblptru	equ	0xFF8
  2727                           tblptrh	equ	0xFF7
  2728                           tblptrl	equ	0xFF6
  2729                           tablat	equ	0xFF5
  2730                           intcon	equ	0xFF2
  2731                           intcon2	equ	0xFF1
  2732                           intcon3	equ	0xFF0
  2733                           postinc0	equ	0xFEE
  2734                           wreg	equ	0xFE8
  2735                           indf2	equ	0xFDF
  2736                           postinc2	equ	0xFDE
  2737                           postdec2	equ	0xFDD
  2738                           fsr2h	equ	0xFDA
  2739                           fsr2l	equ	0xFD9
  2740                           status	equ	0xFD8
  2741                           
  2742 ;; *************** function _emergencystop *****************
  2743 ;; Defined at:
  2744 ;;		line 569 in file "main.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;		None
  2747 ;; Auto vars:     Size  Location     Type
  2748 ;;		None
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      void 
  2751 ;; Registers used:
  2752 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;Total ram usage:        0 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:   10
  2765 ;; This function calls:
  2766 ;;		_lcdInst
  2767 ;;		_printf
  2768 ;; This function is called by:
  2769 ;;		_main
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text6
  2774  002B22                     __ptext6:
  2775                           	opt stack 0
  2776  002B22                     _emergencystop:
  2777                           	opt stack 20
  2778                           
  2779                           ;main.c: 570: (INTCONbits.GIE = 0);
  2780                           
  2781                           ;incstack = 0
  2782  002B22  9EF2               	bcf	intcon,7,c	;volatile
  2783                           
  2784                           ;main.c: 571: PORTAbits.RA2 = 0;
  2785  002B24  9480               	bcf	3968,2,c	;volatile
  2786                           
  2787                           ;main.c: 572: lcdInst(0b00000001);
  2788  002B26  0E01               	movlw	1
  2789  002B28  ECD8  F015         	call	_lcdInst
  2790                           
  2791                           ;main.c: 573: lcdInst(0b10000000);
  2792  002B2C  0E80               	movlw	128
  2793  002B2E  ECD8  F015         	call	_lcdInst
  2794                           
  2795                           ;main.c: 574: printf("EMERGENCY STOP");
  2796  002B32  0ED7               	movlw	low STR_28
  2797  002B34  0100               	movlb	0	; () banked
  2798  002B36  6F9C               	movwf	printf@f& (0+255),b
  2799  002B38  0EFF               	movlw	high STR_28
  2800  002B3A  0100               	movlb	0	; () banked
  2801  002B3C  6F9D               	movwf	(printf@f+1)& (0+255),b
  2802  002B3E  ECFD  F001         	call	_printf	;wreg free
  2803  002B42                     l352:
  2804  002B42  D7FF               	goto	l352
  2805  002B44                     __end_of_emergencystop:
  2806                           	opt stack 0
  2807                           tblptru	equ	0xFF8
  2808                           tblptrh	equ	0xFF7
  2809                           tblptrl	equ	0xFF6
  2810                           tablat	equ	0xFF5
  2811                           intcon	equ	0xFF2
  2812                           intcon2	equ	0xFF1
  2813                           intcon3	equ	0xFF0
  2814                           postinc0	equ	0xFEE
  2815                           wreg	equ	0xFE8
  2816                           indf2	equ	0xFDF
  2817                           postinc2	equ	0xFDE
  2818                           postdec2	equ	0xFDD
  2819                           fsr2h	equ	0xFDA
  2820                           fsr2l	equ	0xFD9
  2821                           status	equ	0xFD8
  2822                           
  2823 ;; *************** function _date_time *****************
  2824 ;; Defined at:
  2825 ;;		line 445 in file "main.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;		None
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;  i               1   52[BANK0 ] unsigned char 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;Total ram usage:        1 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:   10
  2846 ;; This function calls:
  2847 ;;		_I2C_Master_Read
  2848 ;;		_I2C_Master_Start
  2849 ;;		_I2C_Master_Stop
  2850 ;;		_I2C_Master_Write
  2851 ;;		_lcdInst
  2852 ;;		_printf
  2853 ;; This function is called by:
  2854 ;;		_main
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text7
  2859  001CFE                     __ptext7:
  2860                           	opt stack 0
  2861  001CFE                     _date_time:
  2862                           	opt stack 20
  2863                           
  2864                           ;main.c: 447: I2C_Master_Start();
  2865                           
  2866                           ;incstack = 0
  2867  001CFE  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  2868                           
  2869                           ;main.c: 448: I2C_Master_Write(0b11010000);
  2870  001D02  0E00               	movlw	0
  2871  001D04  0100               	movlb	0	; () banked
  2872  001D06  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2873  001D08  0ED0               	movlw	208
  2874  001D0A  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2875  001D0C  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  2876                           
  2877                           ;main.c: 449: I2C_Master_Write(0x00);
  2878  001D10  0E00               	movlw	0
  2879  001D12  0100               	movlb	0	; () banked
  2880  001D14  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2881  001D16  0E00               	movlw	0
  2882  001D18  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2883  001D1A  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  2884                           
  2885                           ;main.c: 450: I2C_Master_Stop();
  2886  001D1E  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  2887                           
  2888                           ;main.c: 453: I2C_Master_Start();
  2889  001D22  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  2890                           
  2891                           ;main.c: 454: I2C_Master_Write(0b11010001);
  2892  001D26  0E00               	movlw	0
  2893  001D28  0100               	movlb	0	; () banked
  2894  001D2A  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2895  001D2C  0ED1               	movlw	209
  2896  001D2E  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2897  001D30  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  2898                           
  2899                           ;main.c: 455: for(unsigned char i=0;i<0x06;i++){
  2900  001D34  0E00               	movlw	0
  2901  001D36  0100               	movlb	0	; () banked
  2902  001D38  6FB4               	movwf	date_time@i& (0+255),b
  2903  001D3A                     l4161:
  2904                           
  2905                           ; BSR set to: 0
  2906  001D3A  0E05               	movlw	5
  2907  001D3C  0100               	movlb	0	; () banked
  2908  001D3E  65B4               	cpfsgt	date_time@i& (0+255),b
  2909  001D40  D001               	goto	l4165
  2910  001D42  D010               	goto	l4171
  2911  001D44                     l4165:
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;main.c: 456: time[i] = I2C_Master_Read(1);
  2915  001D44  0100               	movlb	0	; () banked
  2916  001D46  51B4               	movf	date_time@i& (0+255),w,b
  2917  001D48  0D01               	mullw	1
  2918  001D4A  0EB7               	movlw	low _time
  2919  001D4C  24F3               	addwf	prodl,w,c
  2920  001D4E  6ED9               	movwf	fsr2l,c
  2921  001D50  0E00               	movlw	high _time
  2922  001D52  20F4               	addwfc	prodh,w,c
  2923  001D54  6EDA               	movwf	fsr2h,c
  2924  001D56  0E01               	movlw	1
  2925  001D58  EC2D  F015         	call	_I2C_Master_Read
  2926  001D5C  6EDF               	movwf	indf2,c
  2927  001D5E  0100               	movlb	0	; () banked
  2928  001D60  2BB4               	incf	date_time@i& (0+255),f,b
  2929  001D62  D7EB               	goto	l4161
  2930  001D64                     l4171:
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;main.c: 457: }
  2934                           ;main.c: 458: time[6] = I2C_Master_Read(0);
  2935  001D64  0E00               	movlw	0
  2936  001D66  EC2D  F015         	call	_I2C_Master_Read
  2937  001D6A  0100               	movlb	0	; () banked
  2938  001D6C  6FBD               	movwf	(_time+6)& (0+255),b
  2939                           
  2940                           ;main.c: 459: I2C_Master_Stop();
  2941  001D6E  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  2942                           
  2943                           ;main.c: 462: lcdInst(0b10000000);
  2944  001D72  0E80               	movlw	128
  2945  001D74  ECD8  F015         	call	_lcdInst
  2946                           
  2947                           ;main.c: 463: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2948  001D78  0E9F               	movlw	low STR_8
  2949  001D7A  0100               	movlb	0	; () banked
  2950  001D7C  6F9C               	movwf	printf@f& (0+255),b
  2951  001D7E  0EFE               	movlw	high STR_8
  2952  001D80  0100               	movlb	0	; () banked
  2953  001D82  6F9D               	movwf	(printf@f+1)& (0+255),b
  2954  001D84  C0BC  F09E         	movff	_time+5,?_printf+2
  2955  001D88  0100               	movlb	0	; () banked
  2956  001D8A  6B9F               	clrf	(?_printf+3)& (0+255),b
  2957  001D8C  C0BB  F0A0         	movff	_time+4,?_printf+4
  2958  001D90  0100               	movlb	0	; () banked
  2959  001D92  6BA1               	clrf	(?_printf+5)& (0+255),b
  2960  001D94  C0BD  F0A2         	movff	_time+6,?_printf+6
  2961  001D98  0100               	movlb	0	; () banked
  2962  001D9A  6BA3               	clrf	(?_printf+7)& (0+255),b
  2963  001D9C  ECFD  F001         	call	_printf	;wreg free
  2964                           
  2965                           ;main.c: 464: lcdInst(0b11000000);
  2966  001DA0  0EC0               	movlw	192
  2967  001DA2  ECD8  F015         	call	_lcdInst
  2968                           
  2969                           ;main.c: 465: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2970  001DA6  0EB6               	movlw	low STR_9
  2971  001DA8  0100               	movlb	0	; () banked
  2972  001DAA  6F9C               	movwf	printf@f& (0+255),b
  2973  001DAC  0EFE               	movlw	high STR_9
  2974  001DAE  0100               	movlb	0	; () banked
  2975  001DB0  6F9D               	movwf	(printf@f+1)& (0+255),b
  2976  001DB2  C0B9  F09E         	movff	_time+2,?_printf+2
  2977  001DB6  0100               	movlb	0	; () banked
  2978  001DB8  6B9F               	clrf	(?_printf+3)& (0+255),b
  2979  001DBA  C0B8  F0A0         	movff	_time+1,?_printf+4
  2980  001DBE  0100               	movlb	0	; () banked
  2981  001DC0  6BA1               	clrf	(?_printf+5)& (0+255),b
  2982  001DC2  C0B7  F0A2         	movff	_time,?_printf+6
  2983  001DC6  0100               	movlb	0	; () banked
  2984  001DC8  6BA3               	clrf	(?_printf+7)& (0+255),b
  2985  001DCA  ECFD  F001         	call	_printf	;wreg free
  2986  001DCE  0012               	return	
  2987  001DD0                     __end_of_date_time:
  2988                           	opt stack 0
  2989                           tblptru	equ	0xFF8
  2990                           tblptrh	equ	0xFF7
  2991                           tblptrl	equ	0xFF6
  2992                           tablat	equ	0xFF5
  2993                           prodh	equ	0xFF4
  2994                           prodl	equ	0xFF3
  2995                           intcon	equ	0xFF2
  2996                           intcon2	equ	0xFF1
  2997                           intcon3	equ	0xFF0
  2998                           postinc0	equ	0xFEE
  2999                           wreg	equ	0xFE8
  3000                           indf2	equ	0xFDF
  3001                           postinc2	equ	0xFDE
  3002                           postdec2	equ	0xFDD
  3003                           fsr2h	equ	0xFDA
  3004                           fsr2l	equ	0xFD9
  3005                           status	equ	0xFD8
  3006                           
  3007 ;; *************** function _I2C_Master_Read *****************
  3008 ;; Defined at:
  3009 ;;		line 105 in file "I2C.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;  a               1    wreg     unsigned char 
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;  a               1   17[BANK0 ] unsigned char 
  3014 ;;  temp            1   18[BANK0 ] unsigned char 
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      unsigned char 
  3017 ;; Registers used:
  3018 ;;		wreg, status,2, status,0, cstack
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;Total ram usage:        2 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    8
  3031 ;; This function calls:
  3032 ;;		_I2C_Master_Wait
  3033 ;; This function is called by:
  3034 ;;		_date_time
  3035 ;;		_read_colorsensor
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           	psect	text8
  3040  002A5A                     __ptext8:
  3041                           	opt stack 0
  3042  002A5A                     _I2C_Master_Read:
  3043                           	opt stack 20
  3044                           
  3045                           ;incstack = 0
  3046                           ;I2C_Master_Read@a stored from wreg
  3047  002A5A  0100               	movlb	0	; () banked
  3048  002A5C  6F91               	movwf	I2C_Master_Read@a& (0+255),b
  3049                           
  3050                           ;I2C.c: 107: unsigned char temp;
  3051                           ;I2C.c: 108: I2C_Master_Wait();
  3052  002A5E  ECBD  F015         	call	_I2C_Master_Wait	;wreg free
  3053                           
  3054                           ;I2C.c: 109: RCEN = 1;
  3055  002A62  86C5               	bsf	4037,3,c	;volatile
  3056                           
  3057                           ;I2C.c: 110: I2C_Master_Wait();
  3058  002A64  ECBD  F015         	call	_I2C_Master_Wait	;wreg free
  3059                           
  3060                           ;I2C.c: 111: temp = SSPBUF;
  3061  002A68  CFC9 F092          	movff	4041,I2C_Master_Read@temp	;volatile
  3062                           
  3063                           ;I2C.c: 112: I2C_Master_Wait();
  3064  002A6C  ECBD  F015         	call	_I2C_Master_Wait	;wreg free
  3065                           
  3066                           ;I2C.c: 113: ACKDT = (a)?0:1;
  3067  002A70  0100               	movlb	0	; () banked
  3068  002A72  5191               	movf	I2C_Master_Read@a& (0+255),w,b
  3069  002A74  0100               	movlb	0	; () banked
  3070  002A76  A4D8               	btfss	status,2,c
  3071  002A78  D002               	goto	u2770
  3072  002A7A  8AC5               	bsf	4037,5,c	;volatile
  3073  002A7C  D001               	goto	l3441
  3074  002A7E                     u2770:
  3075  002A7E  9AC5               	bcf	4037,5,c	;volatile
  3076  002A80                     l3441:
  3077                           
  3078                           ;I2C.c: 114: ACKEN = 1;
  3079  002A80  88C5               	bsf	4037,4,c	;volatile
  3080                           
  3081                           ;I2C.c: 115: return temp;
  3082  002A82  0100               	movlb	0	; () banked
  3083  002A84  5192               	movf	I2C_Master_Read@temp& (0+255),w,b
  3084  002A86  0012               	return	
  3085  002A88                     __end_of_I2C_Master_Read:
  3086                           	opt stack 0
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           prodh	equ	0xFF4
  3092                           prodl	equ	0xFF3
  3093                           intcon	equ	0xFF2
  3094                           intcon2	equ	0xFF1
  3095                           intcon3	equ	0xFF0
  3096                           postinc0	equ	0xFEE
  3097                           wreg	equ	0xFE8
  3098                           indf2	equ	0xFDF
  3099                           postinc2	equ	0xFDE
  3100                           postdec2	equ	0xFDD
  3101                           fsr2h	equ	0xFDA
  3102                           fsr2l	equ	0xFD9
  3103                           status	equ	0xFD8
  3104                           
  3105 ;; *************** function _bottle_time *****************
  3106 ;; Defined at:
  3107 ;;		line 530 in file "main.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;		None
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;Total ram usage:        0 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:   10
  3128 ;; This function calls:
  3129 ;;		_lcdInst
  3130 ;;		_printf
  3131 ;; This function is called by:
  3132 ;;		_main
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           	psect	text9
  3137  0029EE                     __ptext9:
  3138                           	opt stack 0
  3139  0029EE                     _bottle_time:
  3140                           	opt stack 20
  3141                           
  3142                           ;main.c: 531: lcdInst(0b10000000);
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;incstack = 0
  3146  0029EE  0E80               	movlw	128
  3147  0029F0  ECD8  F015         	call	_lcdInst
  3148                           
  3149                           ;main.c: 532: printf("Total Operation       ");
  3150  0029F4  0E88               	movlw	low STR_21
  3151  0029F6  0100               	movlb	0	; () banked
  3152  0029F8  6F9C               	movwf	printf@f& (0+255),b
  3153  0029FA  0EFE               	movlw	high STR_21
  3154  0029FC  0100               	movlb	0	; () banked
  3155  0029FE  6F9D               	movwf	(printf@f+1)& (0+255),b
  3156  002A00  ECFD  F001         	call	_printf	;wreg free
  3157                           
  3158                           ;main.c: 533: lcdInst(0b11000000);
  3159  002A04  0EC0               	movlw	192
  3160  002A06  ECD8  F015         	call	_lcdInst
  3161                           
  3162                           ;main.c: 534: printf("Time: %d s       ", operation_time);
  3163  002A0A  0EE1               	movlw	low STR_22
  3164  002A0C  0100               	movlb	0	; () banked
  3165  002A0E  6F9C               	movwf	printf@f& (0+255),b
  3166  002A10  0EFE               	movlw	high STR_22
  3167  002A12  0100               	movlb	0	; () banked
  3168  002A14  6F9D               	movwf	(printf@f+1)& (0+255),b
  3169  002A16  C0DA  F09E         	movff	_operation_time,?_printf+2
  3170  002A1A  C0DB  F09F         	movff	_operation_time+1,?_printf+3
  3171  002A1E  ECFD  F001         	call	_printf	;wreg free
  3172  002A22  0012               	return	
  3173  002A24                     __end_of_bottle_time:
  3174                           	opt stack 0
  3175                           tblptru	equ	0xFF8
  3176                           tblptrh	equ	0xFF7
  3177                           tblptrl	equ	0xFF6
  3178                           tablat	equ	0xFF5
  3179                           prodh	equ	0xFF4
  3180                           prodl	equ	0xFF3
  3181                           intcon	equ	0xFF2
  3182                           intcon2	equ	0xFF1
  3183                           intcon3	equ	0xFF0
  3184                           postinc0	equ	0xFEE
  3185                           wreg	equ	0xFE8
  3186                           indf2	equ	0xFDF
  3187                           postinc2	equ	0xFDE
  3188                           postdec2	equ	0xFDD
  3189                           fsr2h	equ	0xFDA
  3190                           fsr2l	equ	0xFD9
  3191                           status	equ	0xFD8
  3192                           
  3193 ;; *************** function _bottle_count *****************
  3194 ;; Defined at:
  3195 ;;		line 488 in file "main.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;		None
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;		None
  3200 ;; Return value:  Size  Location     Type
  3201 ;;                  1    wreg      void 
  3202 ;; Registers used:
  3203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3204 ;; Tracked objects:
  3205 ;;		On entry : 0/0
  3206 ;;		On exit  : 0/0
  3207 ;;		Unchanged: 0/0
  3208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3213 ;;Total ram usage:        0 bytes
  3214 ;; Hardware stack levels used:    1
  3215 ;; Hardware stack levels required when called:   10
  3216 ;; This function calls:
  3217 ;;		___awmod
  3218 ;;		_lcdInst
  3219 ;;		_printf
  3220 ;; This function is called by:
  3221 ;;		_main
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text10
  3226  000E90                     __ptext10:
  3227                           	opt stack 0
  3228  000E90                     _bottle_count:
  3229                           	opt stack 20
  3230                           
  3231                           ;main.c: 489: switch(bottle_count_disp % 5){
  3232                           
  3233                           ;incstack = 0
  3234  000E90  D0A7               	goto	l4217
  3235  000E92                     l4181:
  3236                           
  3237                           ;main.c: 491: lcdInst(0b10000000);
  3238  000E92  0E80               	movlw	128
  3239  000E94  ECD8  F015         	call	_lcdInst
  3240                           
  3241                           ;main.c: 492: printf("Bottle Count    ");
  3242  000E98  0EA5               	movlw	low STR_10
  3243  000E9A  0100               	movlb	0	; () banked
  3244  000E9C  6F9C               	movwf	printf@f& (0+255),b
  3245  000E9E  0EFF               	movlw	high STR_10
  3246  000EA0  0100               	movlb	0	; () banked
  3247  000EA2  6F9D               	movwf	(printf@f+1)& (0+255),b
  3248  000EA4  ECFD  F001         	call	_printf	;wreg free
  3249                           
  3250                           ;main.c: 493: lcdInst(0b11000000);
  3251  000EA8  0EC0               	movlw	192
  3252  000EAA  ECD8  F015         	call	_lcdInst
  3253                           
  3254                           ;main.c: 494: printf("Total: %d       ", total_bottle_count);
  3255  000EAE  0E94               	movlw	low STR_11
  3256  000EB0  0100               	movlb	0	; () banked
  3257  000EB2  6F9C               	movwf	printf@f& (0+255),b
  3258  000EB4  0EFF               	movlw	high STR_11
  3259  000EB6  0100               	movlb	0	; () banked
  3260  000EB8  6F9D               	movwf	(printf@f+1)& (0+255),b
  3261  000EBA  C0E2  F09E         	movff	_total_bottle_count,?_printf+2
  3262  000EBE  C0E3  F09F         	movff	_total_bottle_count+1,?_printf+3
  3263  000EC2  ECFD  F001         	call	_printf	;wreg free
  3264                           
  3265                           ;main.c: 495: break;
  3266  000EC6  0012               	return	
  3267  000EC8                     l4187:
  3268                           
  3269                           ;main.c: 497: lcdInst(0b10000000);
  3270  000EC8  0E80               	movlw	128
  3271  000ECA  ECD8  F015         	call	_lcdInst
  3272                           
  3273                           ;main.c: 498: printf("YOP+CAP+LBL: %d  ", yopcaplbl_count);
  3274  000ECE  0EF3               	movlw	low STR_12
  3275  000ED0  0100               	movlb	0	; () banked
  3276  000ED2  6F9C               	movwf	printf@f& (0+255),b
  3277  000ED4  0EFE               	movlw	high STR_12
  3278  000ED6  0100               	movlb	0	; () banked
  3279  000ED8  6F9D               	movwf	(printf@f+1)& (0+255),b
  3280  000EDA  C0E8  F09E         	movff	_yopcaplbl_count,?_printf+2
  3281  000EDE  C0E9  F09F         	movff	_yopcaplbl_count+1,?_printf+3
  3282  000EE2  ECFD  F001         	call	_printf	;wreg free
  3283                           
  3284                           ;main.c: 499: lcdInst(0b11000000);
  3285  000EE6  0EC0               	movlw	192
  3286  000EE8  ECD8  F015         	call	_lcdInst
  3287                           
  3288                           ;main.c: 500: printf("YOP+CAP-LBL: %d  ", yopcap_count);
  3289  000EEC  0E17               	movlw	low STR_13
  3290  000EEE  0100               	movlb	0	; () banked
  3291  000EF0  6F9C               	movwf	printf@f& (0+255),b
  3292  000EF2  0EFF               	movlw	high STR_13
  3293  000EF4  0100               	movlb	0	; () banked
  3294  000EF6  6F9D               	movwf	(printf@f+1)& (0+255),b
  3295  000EF8  C0E6  F09E         	movff	_yopcap_count,?_printf+2
  3296  000EFC  C0E7  F09F         	movff	_yopcap_count+1,?_printf+3
  3297  000F00  ECFD  F001         	call	_printf	;wreg free
  3298                           
  3299                           ;main.c: 501: break;
  3300  000F04  0012               	return	
  3301  000F06                     l4193:
  3302                           
  3303                           ;main.c: 503: lcdInst(0b10000000);
  3304  000F06  0E80               	movlw	128
  3305  000F08  ECD8  F015         	call	_lcdInst
  3306                           
  3307                           ;main.c: 504: printf("YOP-CAP+LBL: %d  ", yoplbl_count);
  3308  000F0C  0E05               	movlw	low STR_14
  3309  000F0E  0100               	movlb	0	; () banked
  3310  000F10  6F9C               	movwf	printf@f& (0+255),b
  3311  000F12  0EFF               	movlw	high STR_14
  3312  000F14  0100               	movlb	0	; () banked
  3313  000F16  6F9D               	movwf	(printf@f+1)& (0+255),b
  3314  000F18  C0EA  F09E         	movff	_yoplbl_count,?_printf+2
  3315  000F1C  C0EB  F09F         	movff	_yoplbl_count+1,?_printf+3
  3316  000F20  ECFD  F001         	call	_printf	;wreg free
  3317                           
  3318                           ;main.c: 505: lcdInst(0b11000000);
  3319  000F24  0EC0               	movlw	192
  3320  000F26  ECD8  F015         	call	_lcdInst
  3321                           
  3322                           ;main.c: 506: printf("YOP-CAP-LBL: %d  ", yop_count);
  3323  000F2A  0E29               	movlw	low STR_15
  3324  000F2C  0100               	movlb	0	; () banked
  3325  000F2E  6F9C               	movwf	printf@f& (0+255),b
  3326  000F30  0EFF               	movlw	high STR_15
  3327  000F32  0100               	movlb	0	; () banked
  3328  000F34  6F9D               	movwf	(printf@f+1)& (0+255),b
  3329  000F36  C0E4  F09E         	movff	_yop_count,?_printf+2
  3330  000F3A  C0E5  F09F         	movff	_yop_count+1,?_printf+3
  3331  000F3E  ECFD  F001         	call	_printf	;wreg free
  3332                           
  3333                           ;main.c: 507: break;
  3334  000F42  0012               	return	
  3335  000F44                     l4199:
  3336                           
  3337                           ;main.c: 509: lcdInst(0b10000000);
  3338  000F44  0E80               	movlw	128
  3339  000F46  ECD8  F015         	call	_lcdInst
  3340                           
  3341                           ;main.c: 510: printf("ESKA+CAP+LBL: %d ", eskacaplbl_count);
  3342  000F4A  0E3B               	movlw	low STR_16
  3343  000F4C  0100               	movlb	0	; () banked
  3344  000F4E  6F9C               	movwf	printf@f& (0+255),b
  3345  000F50  0EFF               	movlw	high STR_16
  3346  000F52  0100               	movlb	0	; () banked
  3347  000F54  6F9D               	movwf	(printf@f+1)& (0+255),b
  3348  000F56  C0D0  F09E         	movff	_eskacaplbl_count,?_printf+2
  3349  000F5A  C0D1  F09F         	movff	_eskacaplbl_count+1,?_printf+3
  3350  000F5E  ECFD  F001         	call	_printf	;wreg free
  3351                           
  3352                           ;main.c: 511: lcdInst(0b11000000);
  3353  000F62  0EC0               	movlw	192
  3354  000F64  ECD8  F015         	call	_lcdInst
  3355                           
  3356                           ;main.c: 512: printf("ESKA+CAP-LBL: %d ", eskacap_count);
  3357  000F68  0E5F               	movlw	low STR_17
  3358  000F6A  0100               	movlb	0	; () banked
  3359  000F6C  6F9C               	movwf	printf@f& (0+255),b
  3360  000F6E  0EFF               	movlw	high STR_17
  3361  000F70  0100               	movlb	0	; () banked
  3362  000F72  6F9D               	movwf	(printf@f+1)& (0+255),b
  3363  000F74  C0CE  F09E         	movff	_eskacap_count,?_printf+2
  3364  000F78  C0CF  F09F         	movff	_eskacap_count+1,?_printf+3
  3365  000F7C  ECFD  F001         	call	_printf	;wreg free
  3366                           
  3367                           ;main.c: 513: break;
  3368  000F80  0012               	return	
  3369  000F82                     l4205:
  3370                           
  3371                           ;main.c: 515: lcdInst(0b10000000);
  3372  000F82  0E80               	movlw	128
  3373  000F84  ECD8  F015         	call	_lcdInst
  3374                           
  3375                           ;main.c: 516: printf("ESKA-CAP+LBL: %d ", eskalbl_count);
  3376  000F88  0E4D               	movlw	low STR_18
  3377  000F8A  0100               	movlb	0	; () banked
  3378  000F8C  6F9C               	movwf	printf@f& (0+255),b
  3379  000F8E  0EFF               	movlw	high STR_18
  3380  000F90  0100               	movlb	0	; () banked
  3381  000F92  6F9D               	movwf	(printf@f+1)& (0+255),b
  3382  000F94  C0D2  F09E         	movff	_eskalbl_count,?_printf+2
  3383  000F98  C0D3  F09F         	movff	_eskalbl_count+1,?_printf+3
  3384  000F9C  ECFD  F001         	call	_printf	;wreg free
  3385                           
  3386                           ;main.c: 517: lcdInst(0b11000000);
  3387  000FA0  0EC0               	movlw	192
  3388  000FA2  ECD8  F015         	call	_lcdInst
  3389                           
  3390                           ;main.c: 518: printf("ESKA-CAP-LBL: %d ", eska_count);
  3391  000FA6  0E71               	movlw	low STR_19
  3392  000FA8  0100               	movlb	0	; () banked
  3393  000FAA  6F9C               	movwf	printf@f& (0+255),b
  3394  000FAC  0EFF               	movlw	high STR_19
  3395  000FAE  0100               	movlb	0	; () banked
  3396  000FB0  6F9D               	movwf	(printf@f+1)& (0+255),b
  3397  000FB2  C0CC  F09E         	movff	_eska_count,?_printf+2
  3398  000FB6  C0CD  F09F         	movff	_eska_count+1,?_printf+3
  3399  000FBA  ECFD  F001         	call	_printf	;wreg free
  3400                           
  3401                           ;main.c: 519: break;
  3402  000FBE  0012               	return	
  3403  000FC0                     l4211:
  3404                           
  3405                           ;main.c: 522: lcdInst(0b10000000);
  3406  000FC0  0E80               	movlw	128
  3407  000FC2  ECD8  F015         	call	_lcdInst
  3408                           
  3409                           ;main.c: 523: printf("ERROR: %d", bottle_count_disp);
  3410  000FC6  0EF4               	movlw	low STR_20
  3411  000FC8  0100               	movlb	0	; () banked
  3412  000FCA  6F9C               	movwf	printf@f& (0+255),b
  3413  000FCC  0EFF               	movlw	high STR_20
  3414  000FCE  0100               	movlb	0	; () banked
  3415  000FD0  6F9D               	movwf	(printf@f+1)& (0+255),b
  3416  000FD2  C0ED  F09E         	movff	_bottle_count_disp,?_printf+2
  3417  000FD6  C0EE  F09F         	movff	_bottle_count_disp+1,?_printf+3
  3418  000FDA  ECFD  F001         	call	_printf	;wreg free
  3419  000FDE  D7F0               	goto	l4211
  3420  000FE0                     l4217:
  3421  000FE0  C0ED  F090         	movff	_bottle_count_disp,___awmod@dividend
  3422  000FE4  C0EE  F091         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3423  000FE8  0E00               	movlw	0
  3424  000FEA  0100               	movlb	0	; () banked
  3425  000FEC  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3426  000FEE  0E05               	movlw	5
  3427  000FF0  6F92               	movwf	___awmod@divisor& (0+255),b
  3428  000FF2  EC27  F011         	call	___awmod	;wreg free
  3429                           
  3430                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3431                           ; Switch size 1, requested type "space"
  3432                           ; Number of cases is 1, Range of values is 0 to 0
  3433                           ; switch strategies available:
  3434                           ; Name         Instructions Cycles
  3435                           ; simple_byte            4     3 (average)
  3436                           ;	Chosen strategy is simple_byte
  3437  000FF6  0100               	movlb	0	; () banked
  3438  000FF8  5191               	movf	(?___awmod+1)& (0+255),w,b
  3439  000FFA  0A00               	xorlw	0	; case 0
  3440  000FFC  A4D8               	btfss	status,2,c
  3441  000FFE  D7E0               	goto	l4211
  3442                           
  3443                           ; BSR set to: 0
  3444                           ; Switch size 1, requested type "space"
  3445                           ; Number of cases is 5, Range of values is 0 to 4
  3446                           ; switch strategies available:
  3447                           ; Name         Instructions Cycles
  3448                           ; simple_byte           16     9 (average)
  3449                           ;	Chosen strategy is simple_byte
  3450  001000  0100               	movlb	0	; () banked
  3451  001002  5190               	movf	?___awmod& (0+255),w,b
  3452  001004  0A00               	xorlw	0	; case 0
  3453  001006  B4D8               	btfsc	status,2,c
  3454  001008  D744               	goto	l4181
  3455  00100A  0A01               	xorlw	1	; case 1
  3456  00100C  B4D8               	btfsc	status,2,c
  3457  00100E  D75C               	goto	l4187
  3458  001010  0A03               	xorlw	3	; case 2
  3459  001012  B4D8               	btfsc	status,2,c
  3460  001014  D778               	goto	l4193
  3461  001016  0A01               	xorlw	1	; case 3
  3462  001018  B4D8               	btfsc	status,2,c
  3463  00101A  D794               	goto	l4199
  3464  00101C  0A07               	xorlw	7	; case 4
  3465  00101E  B4D8               	btfsc	status,2,c
  3466  001020  D7B0               	goto	l4205
  3467  001022  D7CE               	goto	l4211
  3468  001024                     __end_of_bottle_count:
  3469                           	opt stack 0
  3470                           tblptru	equ	0xFF8
  3471                           tblptrh	equ	0xFF7
  3472                           tblptrl	equ	0xFF6
  3473                           tablat	equ	0xFF5
  3474                           prodh	equ	0xFF4
  3475                           prodl	equ	0xFF3
  3476                           intcon	equ	0xFF2
  3477                           intcon2	equ	0xFF1
  3478                           intcon3	equ	0xFF0
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           indf2	equ	0xFDF
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8
  3487                           
  3488 ;; *************** function _printf *****************
  3489 ;; Defined at:
  3490 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3493 ;;		 -> STR_28(15), STR_27(16), STR_26(28), STR_25(25), 
  3494 ;;		 -> STR_24(24), STR_23(23), STR_22(18), STR_21(23), 
  3495 ;;		 -> STR_20(10), STR_19(18), STR_18(18), STR_17(18), 
  3496 ;;		 -> STR_16(18), STR_15(18), STR_14(18), STR_13(18), 
  3497 ;;		 -> STR_12(18), STR_11(17), STR_10(17), STR_9(23), 
  3498 ;;		 -> STR_8(23), STR_7(20), STR_6(17), STR_5(14), 
  3499 ;;		 -> STR_4(24), STR_3(24), STR_2(24), STR_1(24), 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  idx             1   42[BANK0 ] unsigned char 
  3502 ;;  tmpval          4    0        struct .
  3503 ;;  cp              3    0        PTR const unsigned char 
  3504 ;;  width           2   49[BANK0 ] int 
  3505 ;;  val             2   46[BANK0 ] unsigned int 
  3506 ;;  ap              2   43[BANK0 ] PTR void [1]
  3507 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3508 ;;  len             2    0        unsigned int 
  3509 ;;  c               1   51[BANK0 ] char 
  3510 ;;  flag            1   48[BANK0 ] unsigned char 
  3511 ;;  prec            1   45[BANK0 ] char 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  2   28[BANK0 ] int 
  3514 ;; Registers used:
  3515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3521 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;Total ram usage:       24 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    9
  3528 ;; This function calls:
  3529 ;;		___lwdiv
  3530 ;;		___lwmod
  3531 ;;		___wmul
  3532 ;;		_isdigit
  3533 ;;		_putch
  3534 ;; This function is called by:
  3535 ;;		_standby
  3536 ;;		_date_time
  3537 ;;		_bottle_count
  3538 ;;		_bottle_time
  3539 ;;		_operation
  3540 ;;		_operationend
  3541 ;;		_emergencystop
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           	psect	text11
  3546  0003FA                     __ptext11:
  3547                           	opt stack 0
  3548  0003FA                     _printf:
  3549                           	opt stack 20
  3550                           
  3551                           ;doprnt.c: 466: va_list ap;
  3552                           ;doprnt.c: 499: signed char c;
  3553                           ;doprnt.c: 501: int width;
  3554                           ;doprnt.c: 506: signed char prec;
  3555                           ;doprnt.c: 508: unsigned char flag;
  3556                           ;doprnt.c: 523: union {
  3557                           ;doprnt.c: 524: unsigned long vd;
  3558                           ;doprnt.c: 525: double integ;
  3559                           ;doprnt.c: 526: } tmpval;
  3560                           ;doprnt.c: 528: unsigned int val;
  3561                           ;doprnt.c: 529: unsigned len;
  3562                           ;doprnt.c: 530: const char * cp;
  3563                           ;doprnt.c: 533: *ap = __va_start();
  3564                           
  3565                           ;incstack = 0
  3566  0003FA  0E9E               	movlw	low (?_printf+2)
  3567  0003FC  0100               	movlb	0	; () banked
  3568  0003FE  6FAB               	movwf	printf@ap& (0+255),b
  3569  000400  0E00               	movlw	high (?_printf+2)
  3570  000402  0100               	movlb	0	; () banked
  3571  000404  6FAC               	movwf	(printf@ap+1)& (0+255),b
  3572                           
  3573                           ;doprnt.c: 536: while(c = *f++) {
  3574  000406  D1D5               	goto	l3769
  3575  000408                     l3639:
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;doprnt.c: 538: if(c != '%')
  3579  000408  0E25               	movlw	37
  3580  00040A  0100               	movlb	0	; () banked
  3581  00040C  19B3               	xorwf	printf@c& (0+255),w,b
  3582  00040E  B4D8               	btfsc	status,2,c
  3583  000410  D005               	goto	l3643
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;doprnt.c: 540: {
  3587                           ;doprnt.c: 541: (putch(c) );
  3588  000412  0100               	movlb	0	; () banked
  3589  000414  51B3               	movf	printf@c& (0+255),w,b
  3590  000416  ECD0  F015         	call	_putch
  3591                           
  3592                           ;doprnt.c: 542: continue;
  3593  00041A  D1CB               	goto	l3769
  3594  00041C                     l3643:
  3595                           
  3596                           ;doprnt.c: 543: }
  3597                           ;doprnt.c: 546: width = 0;
  3598  00041C  0E00               	movlw	0
  3599  00041E  0100               	movlb	0	; () banked
  3600  000420  6FB2               	movwf	(printf@width+1)& (0+255),b
  3601  000422  0E00               	movlw	0
  3602  000424  6FB1               	movwf	printf@width& (0+255),b
  3603                           
  3604                           ;doprnt.c: 548: flag = 0;
  3605  000426  0E00               	movlw	0
  3606  000428  0100               	movlb	0	; () banked
  3607  00042A  6FB0               	movwf	printf@flag& (0+255),b
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;doprnt.c: 551: switch(*f) {
  3611                           
  3612                           ;doprnt.c: 550: for(;;) {
  3613  00042C  D005               	goto	l3649
  3614  00042E                     l3645:
  3615                           
  3616                           ;doprnt.c: 580: flag |= 0x04;
  3617  00042E  0100               	movlb	0	; () banked
  3618  000430  85B0               	bsf	printf@flag& (0+255),2,b
  3619                           
  3620                           ;doprnt.c: 581: f++;
  3621  000432  0100               	movlb	0	; () banked
  3622  000434  4B9C               	infsnz	printf@f& (0+255),f,b
  3623  000436  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3624  000438                     l3649:
  3625  000438  C09C  FFF6         	movff	printf@f,tblptrl
  3626  00043C  C09D  FFF7         	movff	printf@f+1,tblptrh
  3627  000440                     	if	0	;tblptru may be non-zero
  3628  000440                     	endif
  3629  000440                     	if	0	;tblptru may be non-zero
  3630  000440                     	endif
  3631  000440  0008               	tblrd		*
  3632  000442  50F5               	movf	tablat,w,c
  3633                           
  3634                           ; Switch size 1, requested type "space"
  3635                           ; Number of cases is 1, Range of values is 48 to 48
  3636                           ; switch strategies available:
  3637                           ; Name         Instructions Cycles
  3638                           ; simple_byte            4     3 (average)
  3639                           ;	Chosen strategy is simple_byte
  3640  000444  0A30               	xorlw	48	; case 48
  3641  000446  B4D8               	btfsc	status,2,c
  3642  000448  D7F2               	goto	l3645
  3643                           
  3644                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3645                           
  3646                           ;doprnt.c: 586: }
  3647                           
  3648                           ;doprnt.c: 585: break;
  3649  00044A  C09C  FFF6         	movff	printf@f,tblptrl
  3650  00044E  C09D  FFF7         	movff	printf@f+1,tblptrh
  3651  000452                     	if	0	;tblptru may be non-zero
  3652  000452                     	endif
  3653  000452                     	if	0	;tblptru may be non-zero
  3654  000452                     	endif
  3655  000452  0008               	tblrd		*
  3656  000454  50F5               	movf	tablat,w,c
  3657  000456  EC44  F015         	call	_isdigit
  3658  00045A  A0D8               	btfss	status,0,c
  3659  00045C  D048               	goto	l3669
  3660                           
  3661                           ;doprnt.c: 598: width = 0;
  3662  00045E  0E00               	movlw	0
  3663  000460  0100               	movlb	0	; () banked
  3664  000462  6FB2               	movwf	(printf@width+1)& (0+255),b
  3665  000464  0E00               	movlw	0
  3666  000466  6FB1               	movwf	printf@width& (0+255),b
  3667  000468                     l3655:
  3668                           
  3669                           ;doprnt.c: 600: width *= 10;
  3670  000468  C0B1  F090         	movff	printf@width,___wmul@multiplier
  3671  00046C  C0B2  F091         	movff	printf@width+1,___wmul@multiplier+1
  3672  000470  0E00               	movlw	0
  3673  000472  0100               	movlb	0	; () banked
  3674  000474  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3675  000476  0E0A               	movlw	10
  3676  000478  6F92               	movwf	___wmul@multiplicand& (0+255),b
  3677  00047A  EC12  F015         	call	___wmul	;wreg free
  3678  00047E  C090  F0B1         	movff	?___wmul,printf@width
  3679  000482  C091  F0B2         	movff	?___wmul+1,printf@width+1
  3680                           
  3681                           ;doprnt.c: 601: width += *f++ - '0';
  3682  000486  0ED0               	movlw	208
  3683  000488  0100               	movlb	0	; () banked
  3684  00048A  6FA6               	movwf	??_printf& (0+255),b
  3685  00048C  0EFF               	movlw	255
  3686  00048E  0100               	movlb	0	; () banked
  3687  000490  6FA7               	movwf	(??_printf+1)& (0+255),b
  3688  000492  C09C  FFF6         	movff	printf@f,tblptrl
  3689  000496  C09D  FFF7         	movff	printf@f+1,tblptrh
  3690  00049A                     	if	0	;tblptru may be non-zero
  3691  00049A                     	endif
  3692  00049A                     	if	0	;tblptru may be non-zero
  3693  00049A                     	endif
  3694  00049A  0008               	tblrd		*
  3695  00049C  50F5               	movf	tablat,w,c
  3696  00049E  0100               	movlb	0	; () banked
  3697  0004A0  6FA8               	movwf	(??_printf+2)& (0+255),b
  3698  0004A2  6BA9               	clrf	(??_printf+3)& (0+255),b
  3699  0004A4  0100               	movlb	0	; () banked
  3700  0004A6  51A6               	movf	??_printf& (0+255),w,b
  3701  0004A8  0100               	movlb	0	; () banked
  3702  0004AA  27A8               	addwf	(??_printf+2)& (0+255),f,b
  3703  0004AC  0100               	movlb	0	; () banked
  3704  0004AE  51A7               	movf	(??_printf+1)& (0+255),w,b
  3705  0004B0  0100               	movlb	0	; () banked
  3706  0004B2  23A9               	addwfc	(??_printf+3)& (0+255),f,b
  3707  0004B4  0100               	movlb	0	; () banked
  3708  0004B6  51A8               	movf	(??_printf+2)& (0+255),w,b
  3709  0004B8  0100               	movlb	0	; () banked
  3710  0004BA  27B1               	addwf	printf@width& (0+255),f,b
  3711  0004BC  0100               	movlb	0	; () banked
  3712  0004BE  51A9               	movf	(??_printf+3)& (0+255),w,b
  3713  0004C0  0100               	movlb	0	; () banked
  3714  0004C2  23B2               	addwfc	(printf@width+1)& (0+255),f,b
  3715                           
  3716                           ; BSR set to: 0
  3717  0004C4  0100               	movlb	0	; () banked
  3718  0004C6  4B9C               	infsnz	printf@f& (0+255),f,b
  3719  0004C8  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3723  0004CA  C09C  FFF6         	movff	printf@f,tblptrl
  3724  0004CE  C09D  FFF7         	movff	printf@f+1,tblptrh
  3725  0004D2                     	if	0	;tblptru may be non-zero
  3726  0004D2                     	endif
  3727  0004D2                     	if	0	;tblptru may be non-zero
  3728  0004D2                     	endif
  3729  0004D2  0008               	tblrd		*
  3730  0004D4  50F5               	movf	tablat,w,c
  3731  0004D6  EC44  F015         	call	_isdigit
  3732  0004DA  A0D8               	btfss	status,0,c
  3733  0004DC  D008               	goto	l3669
  3734  0004DE  D7C4               	goto	l3655
  3735  0004E0                     l3663:
  3736                           
  3737                           ;doprnt.c: 721: flag |= 0x80;
  3738  0004E0  0100               	movlb	0	; () banked
  3739  0004E2  8FB0               	bsf	printf@flag& (0+255),7,b
  3740                           
  3741                           ;doprnt.c: 723: break;
  3742  0004E4  D020               	goto	l3671
  3743  0004E6                     l3665:
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;doprnt.c: 818: flag |= 0xC0;
  3747  0004E6  0EC0               	movlw	192
  3748  0004E8  0100               	movlb	0	; () banked
  3749  0004EA  13B0               	iorwf	printf@flag& (0+255),f,b
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;doprnt.c: 822: }
  3753                           
  3754                           ;doprnt.c: 819: break;
  3755  0004EC  D01C               	goto	l3671
  3756  0004EE                     l3669:
  3757  0004EE  C09C  FFF6         	movff	printf@f,tblptrl
  3758  0004F2  C09D  FFF7         	movff	printf@f+1,tblptrh
  3759  0004F6  0100               	movlb	0	; () banked
  3760  0004F8  4B9C               	infsnz	printf@f& (0+255),f,b
  3761  0004FA  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3762  0004FC                     	if	0	;tblptru may be non-zero
  3763  0004FC                     	endif
  3764  0004FC                     	if	0	;tblptru may be non-zero
  3765  0004FC                     	endif
  3766  0004FC  0008               	tblrd		*
  3767  0004FE  CFF5 F0B3          	movff	tablat,printf@c
  3768  000502  0100               	movlb	0	; () banked
  3769  000504  51B3               	movf	printf@c& (0+255),w,b
  3770                           
  3771                           ; Switch size 1, requested type "space"
  3772                           ; Number of cases is 5, Range of values is 0 to 120
  3773                           ; switch strategies available:
  3774                           ; Name         Instructions Cycles
  3775                           ; simple_byte           16     9 (average)
  3776                           ;	Chosen strategy is simple_byte
  3777  000506  0A00               	xorlw	0	; case 0
  3778  000508  B4D8               	btfsc	status,2,c
  3779  00050A  0012               	return	
  3780  00050C  0A64               	xorlw	100	; case 100
  3781  00050E  B4D8               	btfsc	status,2,c
  3782  000510  D00A               	goto	l3671
  3783  000512  0A0D               	xorlw	13	; case 105
  3784  000514  B4D8               	btfsc	status,2,c
  3785  000516  D007               	goto	l3671
  3786  000518  0A1C               	xorlw	28	; case 117
  3787  00051A  B4D8               	btfsc	status,2,c
  3788  00051C  D7E4               	goto	l3665
  3789  00051E  0A0D               	xorlw	13	; case 120
  3790  000520  B4D8               	btfsc	status,2,c
  3791  000522  D7DE               	goto	l3663
  3792  000524  D146               	goto	l3769
  3793  000526                     l3671:
  3794                           
  3795                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  3796  000526  C0B0  F0A6         	movff	printf@flag,??_printf
  3797  00052A  0EC0               	movlw	192
  3798  00052C  0100               	movlb	0	; () banked
  3799  00052E  17A6               	andwf	??_printf& (0+255),f,b
  3800  000530  A4D8               	btfss	status,2,c
  3801  000532  D019               	goto	l3683
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;doprnt.c: 1253: {
  3805                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3806  000534  C0AB  FFD9         	movff	printf@ap,fsr2l
  3807  000538  C0AC  FFDA         	movff	printf@ap+1,fsr2h
  3808  00053C  CFDE F0AE          	movff	postinc2,printf@val
  3809  000540  CFDD F0AF          	movff	postdec2,printf@val+1
  3810                           
  3811                           ; BSR set to: 0
  3812  000544  0E02               	movlw	2
  3813  000546  0100               	movlb	0	; () banked
  3814  000548  27AB               	addwf	printf@ap& (0+255),f,b
  3815  00054A  0E00               	movlw	0
  3816  00054C  23AC               	addwfc	(printf@ap+1)& (0+255),f,b
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;doprnt.c: 1261: if((int)val < 0) {
  3820  00054E  0100               	movlb	0	; () banked
  3821  000550  AFAF               	btfss	(printf@val+1)& (0+255),7,b
  3822  000552  D053               	goto	l3717
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;doprnt.c: 1262: flag |= 0x03;
  3826  000554  0E03               	movlw	3
  3827  000556  0100               	movlb	0	; () banked
  3828  000558  13B0               	iorwf	printf@flag& (0+255),f,b
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;doprnt.c: 1263: val = -val;
  3832  00055A  0100               	movlb	0	; () banked
  3833  00055C  6DAE               	negf	printf@val& (0+255),b
  3834  00055E  1FAF               	comf	(printf@val+1)& (0+255),f,b
  3835  000560  B0D8               	btfsc	status,0,c
  3836  000562  2BAF               	incf	(printf@val+1)& (0+255),f,b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;doprnt.c: 1264: }
  3840                           ;doprnt.c: 1266: }
  3841  000564  D04A               	goto	l3717
  3842  000566                     l3683:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;doprnt.c: 1268: else
  3846                           ;doprnt.c: 1273: {
  3847                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3848  000566  C0AB  FFD9         	movff	printf@ap,fsr2l
  3849  00056A  C0AC  FFDA         	movff	printf@ap+1,fsr2h
  3850  00056E  CFDE F0AE          	movff	postinc2,printf@val
  3851  000572  CFDD F0AF          	movff	postdec2,printf@val+1
  3852                           
  3853                           ; BSR set to: 0
  3854  000576  0E02               	movlw	2
  3855  000578  0100               	movlb	0	; () banked
  3856  00057A  27AB               	addwf	printf@ap& (0+255),f,b
  3857  00057C  0E00               	movlw	0
  3858  00057E  23AC               	addwfc	(printf@ap+1)& (0+255),f,b
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;doprnt.c: 1287: }
  3862                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3863  000580  D03C               	goto	l3717
  3864  000582                     l3687:
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;doprnt.c: 1302: case 0xC0:
  3868                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3869  000582  0E01               	movlw	1
  3870  000584  0100               	movlb	0	; () banked
  3871  000586  6FB3               	movwf	printf@c& (0+255),b
  3872  000588                     l3689:
  3873                           
  3874                           ; BSR set to: 0
  3875  000588  0E05               	movlw	5
  3876  00058A  0100               	movlb	0	; () banked
  3877  00058C  19B3               	xorwf	printf@c& (0+255),w,b
  3878  00058E  B4D8               	btfsc	status,2,c
  3879  000590  D040               	goto	l3719
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;doprnt.c: 1306: if(val < dpowers[c])
  3883                           
  3884                           ; BSR set to: 0
  3885                           
  3886                           ; BSR set to: 0
  3887  000592  0100               	movlb	0	; () banked
  3888  000594  51B3               	movf	printf@c& (0+255),w,b
  3889  000596  0D02               	mullw	2
  3890  000598  0EA2               	movlw	low _dpowers
  3891  00059A  24F3               	addwf	prodl,w,c
  3892  00059C  6EF6               	movwf	tblptrl,c
  3893  00059E  0EFD               	movlw	high _dpowers
  3894  0005A0  20F4               	addwfc	prodh,w,c
  3895  0005A2  6EF7               	movwf	tblptrh,c
  3896  0005A4                     	if	0	;There are less than 3 active tblptr bytes
  3897  0005A4                     	endif
  3898  0005A4  0009               	tblrd		*+
  3899  0005A6  50F5               	movf	tablat,w,c
  3900  0005A8  0100               	movlb	0	; () banked
  3901  0005AA  5DAE               	subwf	printf@val& (0+255),w,b
  3902  0005AC  0009               	tblrd		*+
  3903  0005AE  50F5               	movf	tablat,w,c
  3904  0005B0  0100               	movlb	0	; () banked
  3905  0005B2  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  3906  0005B4  A0D8               	btfss	status,0,c
  3907  0005B6  D02D               	goto	l3719
  3908                           
  3909                           ; BSR set to: 0
  3910                           
  3911                           ; BSR set to: 0
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;doprnt.c: 1307: break;
  3915  0005B8  0100               	movlb	0	; () banked
  3916  0005BA  2BB3               	incf	printf@c& (0+255),f,b
  3917  0005BC  D7E5               	goto	l3689
  3918  0005BE                     l3701:
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3922  0005BE  0E01               	movlw	1
  3923  0005C0  0100               	movlb	0	; () banked
  3924  0005C2  6FB3               	movwf	printf@c& (0+255),b
  3925  0005C4                     l3703:
  3926                           
  3927                           ; BSR set to: 0
  3928  0005C4  0E04               	movlw	4
  3929  0005C6  0100               	movlb	0	; () banked
  3930  0005C8  19B3               	xorwf	printf@c& (0+255),w,b
  3931  0005CA  B4D8               	btfsc	status,2,c
  3932  0005CC  D022               	goto	l3719
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3936                           
  3937                           ; BSR set to: 0
  3938                           
  3939                           ; BSR set to: 0
  3940  0005CE  0100               	movlb	0	; () banked
  3941  0005D0  51B3               	movf	printf@c& (0+255),w,b
  3942  0005D2  0D02               	mullw	2
  3943  0005D4  0EAC               	movlw	low _hexpowers
  3944  0005D6  24F3               	addwf	prodl,w,c
  3945  0005D8  6EF6               	movwf	tblptrl,c
  3946  0005DA  0EFD               	movlw	high _hexpowers
  3947  0005DC  20F4               	addwfc	prodh,w,c
  3948  0005DE  6EF7               	movwf	tblptrh,c
  3949  0005E0                     	if	0	;There are less than 3 active tblptr bytes
  3950  0005E0                     	endif
  3951  0005E0  0009               	tblrd		*+
  3952  0005E2  50F5               	movf	tablat,w,c
  3953  0005E4  0100               	movlb	0	; () banked
  3954  0005E6  5DAE               	subwf	printf@val& (0+255),w,b
  3955  0005E8  0009               	tblrd		*+
  3956  0005EA  50F5               	movf	tablat,w,c
  3957  0005EC  0100               	movlb	0	; () banked
  3958  0005EE  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  3959  0005F0  A0D8               	btfss	status,0,c
  3960  0005F2  D00F               	goto	l3719
  3961                           
  3962                           ; BSR set to: 0
  3963                           
  3964                           ; BSR set to: 0
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;doprnt.c: 1318: break;
  3968  0005F4  0100               	movlb	0	; () banked
  3969  0005F6  2BB3               	incf	printf@c& (0+255),f,b
  3970  0005F8  D7E5               	goto	l3703
  3971  0005FA                     l3717:
  3972                           
  3973                           ; BSR set to: 0
  3974  0005FA  0100               	movlb	0	; () banked
  3975  0005FC  51B0               	movf	printf@flag& (0+255),w,b
  3976  0005FE  0BC0               	andlw	192
  3977                           
  3978                           ; Switch size 1, requested type "space"
  3979                           ; Number of cases is 3, Range of values is 0 to 192
  3980                           ; switch strategies available:
  3981                           ; Name         Instructions Cycles
  3982                           ; simple_byte           10     6 (average)
  3983                           ;	Chosen strategy is simple_byte
  3984  000600  0A00               	xorlw	0	; case 0
  3985  000602  B4D8               	btfsc	status,2,c
  3986  000604  D7BE               	goto	l3687
  3987  000606  0A80               	xorlw	128	; case 128
  3988  000608  B4D8               	btfsc	status,2,c
  3989  00060A  D7D9               	goto	l3701
  3990  00060C  0A40               	xorlw	64	; case 192
  3991  00060E  B4D8               	btfsc	status,2,c
  3992  000610  D7B8               	goto	l3687
  3993  000612                     l3719:
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3997  000612  0100               	movlb	0	; () banked
  3998  000614  51B1               	movf	printf@width& (0+255),w,b
  3999  000616  0100               	movlb	0	; () banked
  4000  000618  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  4001  00061A  B4D8               	btfsc	status,2,c
  4002  00061C  D00B               	goto	l3725
  4003                           
  4004                           ; BSR set to: 0
  4005  00061E  C0B0  F0A6         	movff	printf@flag,??_printf
  4006  000622  0E03               	movlw	3
  4007  000624  0100               	movlb	0	; () banked
  4008  000626  17A6               	andwf	??_printf& (0+255),f,b
  4009  000628  B4D8               	btfsc	status,2,c
  4010  00062A  D004               	goto	l3725
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;doprnt.c: 1346: width--;
  4014  00062C  0100               	movlb	0	; () banked
  4015  00062E  07B1               	decf	printf@width& (0+255),f,b
  4016  000630  A0D8               	btfss	status,0,c
  4017  000632  07B2               	decf	(printf@width+1)& (0+255),f,b
  4018  000634                     l3725:
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;doprnt.c: 1381: if(width > c)
  4022  000634  0E80               	movlw	128
  4023  000636  0100               	movlb	0	; () banked
  4024  000638  BFB3               	btfsc	printf@c& (0+255),7,b
  4025  00063A  0E7F               	movlw	127
  4026  00063C  0100               	movlb	0	; () banked
  4027  00063E  6FA6               	movwf	??_printf& (0+255),b
  4028  000640  0100               	movlb	0	; () banked
  4029  000642  51B1               	movf	printf@width& (0+255),w,b
  4030  000644  0100               	movlb	0	; () banked
  4031  000646  5DB3               	subwf	printf@c& (0+255),w,b
  4032  000648  0100               	movlb	0	; () banked
  4033  00064A  51B2               	movf	(printf@width+1)& (0+255),w,b
  4034  00064C  0A80               	xorlw	128
  4035  00064E  0100               	movlb	0	; () banked
  4036  000650  59A6               	subwfb	??_printf& (0+255),w,b
  4037  000652  B0D8               	btfsc	status,0,c
  4038  000654  D00B               	goto	l3729
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;doprnt.c: 1382: width -= c;
  4042  000656  0100               	movlb	0	; () banked
  4043  000658  51B3               	movf	printf@c& (0+255),w,b
  4044  00065A  0100               	movlb	0	; () banked
  4045  00065C  5FB1               	subwf	printf@width& (0+255),f,b
  4046  00065E  0E00               	movlw	0
  4047  000660  0100               	movlb	0	; () banked
  4048  000662  BFB3               	btfsc	printf@c& (0+255),7,b
  4049  000664  0EFF               	movlw	255
  4050  000666  0100               	movlb	0	; () banked
  4051  000668  5BB2               	subwfb	(printf@width+1)& (0+255),f,b
  4052  00066A  D005               	goto	l3731
  4053  00066C                     l3729:
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;doprnt.c: 1383: else
  4057                           ;doprnt.c: 1384: width = 0;
  4058  00066C  0E00               	movlw	0
  4059  00066E  0100               	movlb	0	; () banked
  4060  000670  6FB2               	movwf	(printf@width+1)& (0+255),b
  4061  000672  0E00               	movlw	0
  4062  000674  6FB1               	movwf	printf@width& (0+255),b
  4063  000676                     l3731:
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;doprnt.c: 1387: if(flag & 0x04) {
  4067  000676  0100               	movlb	0	; () banked
  4068  000678  A5B0               	btfss	printf@flag& (0+255),2,b
  4069  00067A  D018               	goto	l3743
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;doprnt.c: 1392: if(flag & 0x03)
  4073  00067C  C0B0  F0A6         	movff	printf@flag,??_printf
  4074  000680  0E03               	movlw	3
  4075  000682  0100               	movlb	0	; () banked
  4076  000684  17A6               	andwf	??_printf& (0+255),f,b
  4077  000686  B4D8               	btfsc	status,2,c
  4078  000688  D003               	goto	l3737
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;doprnt.c: 1393: (putch('-') );
  4082  00068A  0E2D               	movlw	45
  4083  00068C  ECD0  F015         	call	_putch
  4084  000690                     l3737:
  4085                           
  4086                           ;doprnt.c: 1415: if(width)
  4087  000690  0100               	movlb	0	; () banked
  4088  000692  51B1               	movf	printf@width& (0+255),w,b
  4089  000694  0100               	movlb	0	; () banked
  4090  000696  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  4091  000698  B4D8               	btfsc	status,2,c
  4092  00069A  D025               	goto	l3753
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;doprnt.c: 1417: (putch('0') );
  4096                           
  4097                           ; BSR set to: 0
  4098                           
  4099                           ;doprnt.c: 1416: do
  4100  00069C  0E30               	movlw	48
  4101  00069E  ECD0  F015         	call	_putch
  4102                           
  4103                           ;doprnt.c: 1418: while(--width);
  4104  0006A2  0100               	movlb	0	; () banked
  4105  0006A4  07B1               	decf	printf@width& (0+255),f,b
  4106  0006A6  A0D8               	btfss	status,0,c
  4107  0006A8  07B2               	decf	(printf@width+1)& (0+255),f,b
  4108  0006AA  D7F2               	goto	l3737
  4109  0006AC                     l3743:
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;doprnt.c: 1422: {
  4113                           ;doprnt.c: 1424: if(width
  4114                           ;doprnt.c: 1428: )
  4115  0006AC  0100               	movlb	0	; () banked
  4116  0006AE  51B1               	movf	printf@width& (0+255),w,b
  4117  0006B0  0100               	movlb	0	; () banked
  4118  0006B2  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  4119  0006B4  B4D8               	btfsc	status,2,c
  4120  0006B6  D00D               	goto	l3749
  4121  0006B8                     l3745:
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;doprnt.c: 1430: (putch(' ') );
  4125  0006B8  0E20               	movlw	32
  4126  0006BA  ECD0  F015         	call	_putch
  4127                           
  4128                           ;doprnt.c: 1431: while(--width);
  4129  0006BE  0100               	movlb	0	; () banked
  4130  0006C0  07B1               	decf	printf@width& (0+255),f,b
  4131  0006C2  A0D8               	btfss	status,0,c
  4132  0006C4  07B2               	decf	(printf@width+1)& (0+255),f,b
  4133  0006C6  0100               	movlb	0	; () banked
  4134  0006C8  51B1               	movf	printf@width& (0+255),w,b
  4135  0006CA  0100               	movlb	0	; () banked
  4136  0006CC  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  4137  0006CE  A4D8               	btfss	status,2,c
  4138  0006D0  D7F3               	goto	l3745
  4139  0006D2                     l3749:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;doprnt.c: 1438: if(flag & 0x03)
  4143  0006D2  C0B0  F0A6         	movff	printf@flag,??_printf
  4144  0006D6  0E03               	movlw	3
  4145  0006D8  0100               	movlb	0	; () banked
  4146  0006DA  17A6               	andwf	??_printf& (0+255),f,b
  4147  0006DC  B4D8               	btfsc	status,2,c
  4148  0006DE  D003               	goto	l3753
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;doprnt.c: 1439: (putch('-') );
  4152  0006E0  0E2D               	movlw	45
  4153  0006E2  ECD0  F015         	call	_putch
  4154  0006E6                     l3753:
  4155                           
  4156                           ;doprnt.c: 1469: }
  4157                           ;doprnt.c: 1472: prec = c;
  4158  0006E6  C0B3  F0AD         	movff	printf@c,printf@prec
  4159                           
  4160                           ;doprnt.c: 1474: while(prec--) {
  4161  0006EA  D05D               	goto	l3767
  4162  0006EC                     l3755:
  4163                           
  4164                           ;doprnt.c: 1486: case 0xC0:
  4165                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4166  0006EC  0100               	movlb	0	; () banked
  4167  0006EE  51AD               	movf	printf@prec& (0+255),w,b
  4168  0006F0  0D02               	mullw	2
  4169  0006F2  0EA2               	movlw	low _dpowers
  4170  0006F4  24F3               	addwf	prodl,w,c
  4171  0006F6  6EF6               	movwf	tblptrl,c
  4172  0006F8  0EFD               	movlw	high _dpowers
  4173  0006FA  20F4               	addwfc	prodh,w,c
  4174  0006FC  6EF7               	movwf	tblptrh,c
  4175  0006FE                     	if	0	;There are less than 3 active tblptr bytes
  4176  0006FE                     	endif
  4177  0006FE  0009               	tblrd		*+
  4178  000700  CFF5 F092          	movff	tablat,___lwdiv@divisor
  4179  000704  000A               	tblrd		*-
  4180  000706  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  4181  00070A  C0AE  F090         	movff	printf@val,___lwdiv@dividend
  4182  00070E  C0AF  F091         	movff	printf@val+1,___lwdiv@dividend+1
  4183  000712  EC92  F012         	call	___lwdiv	;wreg free
  4184  000716  C090  F097         	movff	?___lwdiv,___lwmod@dividend
  4185  00071A  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
  4186  00071E  0E00               	movlw	0
  4187  000720  0100               	movlb	0	; () banked
  4188  000722  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4189  000724  0E0A               	movlw	10
  4190  000726  6F99               	movwf	___lwmod@divisor& (0+255),b
  4191  000728  EC3E  F013         	call	___lwmod	;wreg free
  4192  00072C  0100               	movlb	0	; () banked
  4193  00072E  5197               	movf	?___lwmod& (0+255),w,b
  4194  000730  0F30               	addlw	48
  4195  000732  0100               	movlb	0	; () banked
  4196  000734  6FB3               	movwf	printf@c& (0+255),b
  4197                           
  4198                           ;doprnt.c: 1491: break;
  4199  000736  D033               	goto	l3765
  4200  000738                     l3757:
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;doprnt.c: 1499: {
  4204                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4205  000738  C0AE  F090         	movff	printf@val,___lwdiv@dividend
  4206  00073C  C0AF  F091         	movff	printf@val+1,___lwdiv@dividend+1
  4207  000740  0100               	movlb	0	; () banked
  4208  000742  51AD               	movf	printf@prec& (0+255),w,b
  4209  000744  0D02               	mullw	2
  4210  000746  0EAC               	movlw	low _hexpowers
  4211  000748  24F3               	addwf	prodl,w,c
  4212  00074A  6EF6               	movwf	tblptrl,c
  4213  00074C  0EFD               	movlw	high _hexpowers
  4214  00074E  20F4               	addwfc	prodh,w,c
  4215  000750  6EF7               	movwf	tblptrh,c
  4216  000752                     	if	0	;There are less than 3 active tblptr bytes
  4217  000752                     	endif
  4218  000752  0009               	tblrd		*+
  4219  000754  CFF5 F092          	movff	tablat,___lwdiv@divisor
  4220  000758  000A               	tblrd		*-
  4221  00075A  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  4222  00075E  EC92  F012         	call	___lwdiv	;wreg free
  4223  000762  0100               	movlb	0	; () banked
  4224  000764  5190               	movf	?___lwdiv& (0+255),w,b
  4225  000766  0B0F               	andlw	15
  4226  000768  0100               	movlb	0	; () banked
  4227  00076A  6FAA               	movwf	printf@idx& (0+255),b
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4231  00076C  0100               	movlb	0	; () banked
  4232  00076E  51AA               	movf	printf@idx& (0+255),w,b
  4233  000770  0D01               	mullw	1
  4234  000772  0E83               	movlw	low STR_29
  4235  000774  24F3               	addwf	prodl,w,c
  4236  000776  6EF6               	movwf	tblptrl,c
  4237  000778  0EFF               	movlw	high STR_29
  4238  00077A  20F4               	addwfc	prodh,w,c
  4239  00077C  6EF7               	movwf	tblptrh,c
  4240  00077E                     	if	0	;There are less than 3 active tblptr bytes
  4241  00077E                     	endif
  4242  00077E  0008               	tblrd		*
  4243  000780  CFF5 F0B3          	movff	tablat,printf@c
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;doprnt.c: 1523: }
  4247                           
  4248                           ;doprnt.c: 1508: }
  4249                           ;doprnt.c: 1510: break;
  4250  000784  D00C               	goto	l3765
  4251  000786                     l3763:
  4252  000786  0100               	movlb	0	; () banked
  4253  000788  51B0               	movf	printf@flag& (0+255),w,b
  4254  00078A  0BC0               	andlw	192
  4255                           
  4256                           ; Switch size 1, requested type "space"
  4257                           ; Number of cases is 3, Range of values is 0 to 192
  4258                           ; switch strategies available:
  4259                           ; Name         Instructions Cycles
  4260                           ; simple_byte           10     6 (average)
  4261                           ;	Chosen strategy is simple_byte
  4262  00078C  0A00               	xorlw	0	; case 0
  4263  00078E  B4D8               	btfsc	status,2,c
  4264  000790  D7AD               	goto	l3755
  4265  000792  0A80               	xorlw	128	; case 128
  4266  000794  B4D8               	btfsc	status,2,c
  4267  000796  D7D0               	goto	l3757
  4268  000798  0A40               	xorlw	64	; case 192
  4269  00079A  B4D8               	btfsc	status,2,c
  4270  00079C  D7A7               	goto	l3755
  4271  00079E                     l3765:
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;doprnt.c: 1524: (putch(c) );
  4275  00079E  0100               	movlb	0	; () banked
  4276  0007A0  51B3               	movf	printf@c& (0+255),w,b
  4277  0007A2  ECD0  F015         	call	_putch
  4278  0007A6                     l3767:
  4279  0007A6  0100               	movlb	0	; () banked
  4280  0007A8  07AD               	decf	printf@prec& (0+255),f,b
  4281  0007AA  0100               	movlb	0	; () banked
  4282  0007AC  29AD               	incf	printf@prec& (0+255),w,b
  4283  0007AE  A4D8               	btfss	status,2,c
  4284  0007B0  D7EA               	goto	l3763
  4285  0007B2                     l3769:
  4286  0007B2  C09C  FFF6         	movff	printf@f,tblptrl
  4287  0007B6  C09D  FFF7         	movff	printf@f+1,tblptrh
  4288  0007BA  0100               	movlb	0	; () banked
  4289  0007BC  4B9C               	infsnz	printf@f& (0+255),f,b
  4290  0007BE  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4291  0007C0                     	if	0	;tblptru may be non-zero
  4292  0007C0                     	endif
  4293  0007C0                     	if	0	;tblptru may be non-zero
  4294  0007C0                     	endif
  4295  0007C0  0008               	tblrd		*
  4296  0007C2  CFF5 F0B3          	movff	tablat,printf@c
  4297  0007C6  0100               	movlb	0	; () banked
  4298  0007C8  51B3               	movf	printf@c& (0+255),w,b
  4299  0007CA  B4D8               	btfsc	status,2,c
  4300  0007CC  0012               	return	
  4301  0007CE  D61C               	goto	l3639
  4302  0007D0                     __end_of_printf:
  4303                           	opt stack 0
  4304                           tblptru	equ	0xFF8
  4305                           tblptrh	equ	0xFF7
  4306                           tblptrl	equ	0xFF6
  4307                           tablat	equ	0xFF5
  4308                           prodh	equ	0xFF4
  4309                           prodl	equ	0xFF3
  4310                           intcon	equ	0xFF2
  4311                           intcon2	equ	0xFF1
  4312                           intcon3	equ	0xFF0
  4313                           postinc0	equ	0xFEE
  4314                           wreg	equ	0xFE8
  4315                           indf2	equ	0xFDF
  4316                           postinc2	equ	0xFDE
  4317                           postdec2	equ	0xFDD
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function _putch *****************
  4323 ;; Defined at:
  4324 ;;		line 31 in file "lcd.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  data            1    wreg     unsigned char 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  data            1   18[BANK0 ] unsigned char 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      void 
  4331 ;; Registers used:
  4332 ;;		wreg, status,2, status,0, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;Total ram usage:        1 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    8
  4345 ;; This function calls:
  4346 ;;		_lcdNibble
  4347 ;; This function is called by:
  4348 ;;		_printf
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	text12
  4353  002BA0                     __ptext12:
  4354                           	opt stack 0
  4355  002BA0                     _putch:
  4356                           	opt stack 20
  4357                           
  4358                           ;incstack = 0
  4359                           ;putch@data stored from wreg
  4360  002BA0  0100               	movlb	0	; () banked
  4361  002BA2  6F92               	movwf	putch@data& (0+255),b
  4362                           
  4363                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4364  002BA4  848C               	bsf	3980,2,c	;volatile
  4365                           
  4366                           ;lcd.c: 33: lcdNibble(data);
  4367  002BA6  0100               	movlb	0	; () banked
  4368  002BA8  5192               	movf	putch@data& (0+255),w,b
  4369  002BAA  EC6F  F013         	call	_lcdNibble
  4370  002BAE  0012               	return		;funcret
  4371  002BB0                     __end_of_putch:
  4372                           	opt stack 0
  4373                           tblptru	equ	0xFF8
  4374                           tblptrh	equ	0xFF7
  4375                           tblptrl	equ	0xFF6
  4376                           tablat	equ	0xFF5
  4377                           prodh	equ	0xFF4
  4378                           prodl	equ	0xFF3
  4379                           intcon	equ	0xFF2
  4380                           intcon2	equ	0xFF1
  4381                           intcon3	equ	0xFF0
  4382                           postinc0	equ	0xFEE
  4383                           wreg	equ	0xFE8
  4384                           indf2	equ	0xFDF
  4385                           postinc2	equ	0xFDE
  4386                           postdec2	equ	0xFDD
  4387                           fsr2h	equ	0xFDA
  4388                           fsr2l	equ	0xFD9
  4389                           status	equ	0xFD8
  4390                           
  4391 ;; *************** function _isdigit *****************
  4392 ;; Defined at:
  4393 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;  c               1    wreg     unsigned char 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  c               1   18[BANK0 ] unsigned char 
  4398 ;; Return value:  Size  Location     Type
  4399 ;;		None               void
  4400 ;; Registers used:
  4401 ;;		wreg, status,2, status,0
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;Total ram usage:        3 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    7
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_printf
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text13
  4422  002A88                     __ptext13:
  4423                           	opt stack 0
  4424  002A88                     _isdigit:
  4425                           	opt stack 21
  4426                           
  4427                           ;incstack = 0
  4428                           ;isdigit@c stored from wreg
  4429  002A88  0100               	movlb	0	; () banked
  4430  002A8A  6F92               	movwf	isdigit@c& (0+255),b
  4431  002A8C  0E00               	movlw	0
  4432  002A8E  0100               	movlb	0	; () banked
  4433  002A90  6F91               	movwf	_isdigit$816& (0+255),b
  4434                           
  4435                           ; BSR set to: 0
  4436  002A92  0E3A               	movlw	58
  4437  002A94  0100               	movlb	0	; () banked
  4438  002A96  6192               	cpfslt	isdigit@c& (0+255),b
  4439  002A98  D007               	goto	l3459
  4440                           
  4441                           ; BSR set to: 0
  4442  002A9A  0E2F               	movlw	47
  4443  002A9C  0100               	movlb	0	; () banked
  4444  002A9E  6592               	cpfsgt	isdigit@c& (0+255),b
  4445  002AA0  D003               	goto	l3459
  4446                           
  4447                           ; BSR set to: 0
  4448  002AA2  0E01               	movlw	1
  4449  002AA4  0100               	movlb	0	; () banked
  4450  002AA6  6F91               	movwf	_isdigit$816& (0+255),b
  4451  002AA8                     l3459:
  4452                           
  4453                           ; BSR set to: 0
  4454  002AA8  C091  F090         	movff	_isdigit$816,??_isdigit
  4455  002AAC  0100               	movlb	0	; () banked
  4456  002AAE  3190               	rrcf	??_isdigit& (0+255),w,b
  4457  002AB0  0012               	return	
  4458  002AB2                     __end_of_isdigit:
  4459                           	opt stack 0
  4460                           tblptru	equ	0xFF8
  4461                           tblptrh	equ	0xFF7
  4462                           tblptrl	equ	0xFF6
  4463                           tablat	equ	0xFF5
  4464                           prodh	equ	0xFF4
  4465                           prodl	equ	0xFF3
  4466                           intcon	equ	0xFF2
  4467                           intcon2	equ	0xFF1
  4468                           intcon3	equ	0xFF0
  4469                           postinc0	equ	0xFEE
  4470                           wreg	equ	0xFE8
  4471                           indf2	equ	0xFDF
  4472                           postinc2	equ	0xFDE
  4473                           postdec2	equ	0xFDD
  4474                           fsr2h	equ	0xFDA
  4475                           fsr2l	equ	0xFD9
  4476                           status	equ	0xFD8
  4477                           
  4478 ;; *************** function ___wmul *****************
  4479 ;; Defined at:
  4480 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4483 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;  product         2   20[BANK0 ] unsigned int 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  2   16[BANK0 ] unsigned int 
  4488 ;; Registers used:
  4489 ;;		wreg, status,2, status,0, prodl, prodh
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;Total ram usage:        6 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    7
  4502 ;; This function calls:
  4503 ;;		Nothing
  4504 ;; This function is called by:
  4505 ;;		_printf
  4506 ;;		_servo_rotate1
  4507 ;;		_servo_rotate2
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text14
  4512  002A24                     __ptext14:
  4513                           	opt stack 0
  4514  002A24                     ___wmul:
  4515                           	opt stack 21
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;incstack = 0
  4519  002A24  0100               	movlb	0	; () banked
  4520  002A26  5190               	movf	___wmul@multiplier& (0+255),w,b
  4521  002A28  0100               	movlb	0	; () banked
  4522  002A2A  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4523  002A2C  CFF3 F094          	movff	prodl,___wmul@product
  4524  002A30  CFF4 F095          	movff	prodh,___wmul@product+1
  4525  002A34  0100               	movlb	0	; () banked
  4526  002A36  5190               	movf	___wmul@multiplier& (0+255),w,b
  4527  002A38  0100               	movlb	0	; () banked
  4528  002A3A  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4529  002A3C  50F3               	movf	prodl,w,c
  4530  002A3E  0100               	movlb	0	; () banked
  4531  002A40  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4532  002A42  0100               	movlb	0	; () banked
  4533  002A44  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4534  002A46  0100               	movlb	0	; () banked
  4535  002A48  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4536  002A4A  50F3               	movf	prodl,w,c
  4537  002A4C  0100               	movlb	0	; () banked
  4538  002A4E  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4539                           
  4540                           ; BSR set to: 0
  4541  002A50  C094  F090         	movff	___wmul@product,?___wmul
  4542  002A54  C095  F091         	movff	___wmul@product+1,?___wmul+1
  4543  002A58  0012               	return	
  4544  002A5A                     __end_of___wmul:
  4545                           	opt stack 0
  4546                           tblptru	equ	0xFF8
  4547                           tblptrh	equ	0xFF7
  4548                           tblptrl	equ	0xFF6
  4549                           tablat	equ	0xFF5
  4550                           prodh	equ	0xFF4
  4551                           prodl	equ	0xFF3
  4552                           intcon	equ	0xFF2
  4553                           intcon2	equ	0xFF1
  4554                           intcon3	equ	0xFF0
  4555                           postinc0	equ	0xFEE
  4556                           wreg	equ	0xFE8
  4557                           indf2	equ	0xFDF
  4558                           postinc2	equ	0xFDE
  4559                           postdec2	equ	0xFDD
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           
  4564 ;; *************** function ___lwmod *****************
  4565 ;; Defined at:
  4566 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  dividend        2   23[BANK0 ] unsigned int 
  4569 ;;  divisor         2   25[BANK0 ] unsigned int 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  counter         1   27[BANK0 ] unsigned char 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  2   23[BANK0 ] unsigned int 
  4574 ;; Registers used:
  4575 ;;		wreg, status,2, status,0
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4581 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;Total ram usage:        5 bytes
  4586 ;; Hardware stack levels used:    1
  4587 ;; Hardware stack levels required when called:    7
  4588 ;; This function calls:
  4589 ;;		Nothing
  4590 ;; This function is called by:
  4591 ;;		_printf
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595                           	psect	text15
  4596  00267C                     __ptext15:
  4597                           	opt stack 0
  4598  00267C                     ___lwmod:
  4599                           	opt stack 21
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;incstack = 0
  4603  00267C  0100               	movlb	0	; () banked
  4604  00267E  5199               	movf	___lwmod@divisor& (0+255),w,b
  4605  002680  0100               	movlb	0	; () banked
  4606  002682  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4607  002684  B4D8               	btfsc	status,2,c
  4608  002686  D026               	goto	l885
  4609                           
  4610                           ; BSR set to: 0
  4611  002688  0E01               	movlw	1
  4612  00268A  0100               	movlb	0	; () banked
  4613  00268C  6F9B               	movwf	___lwmod@counter& (0+255),b
  4614  00268E  D006               	goto	l3507
  4615  002690                     l3505:
  4616                           
  4617                           ; BSR set to: 0
  4618  002690  0100               	movlb	0	; () banked
  4619  002692  90D8               	bcf	status,0,c
  4620  002694  3799               	rlcf	___lwmod@divisor& (0+255),f,b
  4621  002696  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4622  002698  0100               	movlb	0	; () banked
  4623  00269A  2B9B               	incf	___lwmod@counter& (0+255),f,b
  4624  00269C                     l3507:
  4625                           
  4626                           ; BSR set to: 0
  4627  00269C  0100               	movlb	0	; () banked
  4628  00269E  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4629  0026A0  D7F7               	goto	l3505
  4630  0026A2                     l3509:
  4631                           
  4632                           ; BSR set to: 0
  4633  0026A2  0100               	movlb	0	; () banked
  4634  0026A4  5199               	movf	___lwmod@divisor& (0+255),w,b
  4635  0026A6  0100               	movlb	0	; () banked
  4636  0026A8  5D97               	subwf	___lwmod@dividend& (0+255),w,b
  4637  0026AA  0100               	movlb	0	; () banked
  4638  0026AC  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4639  0026AE  0100               	movlb	0	; () banked
  4640  0026B0  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4641  0026B2  A0D8               	btfss	status,0,c
  4642  0026B4  D008               	goto	l3513
  4643                           
  4644                           ; BSR set to: 0
  4645  0026B6  0100               	movlb	0	; () banked
  4646  0026B8  5199               	movf	___lwmod@divisor& (0+255),w,b
  4647  0026BA  0100               	movlb	0	; () banked
  4648  0026BC  5F97               	subwf	___lwmod@dividend& (0+255),f,b
  4649  0026BE  0100               	movlb	0	; () banked
  4650  0026C0  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4651  0026C2  0100               	movlb	0	; () banked
  4652  0026C4  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4653  0026C6                     l3513:
  4654                           
  4655                           ; BSR set to: 0
  4656  0026C6  0100               	movlb	0	; () banked
  4657  0026C8  90D8               	bcf	status,0,c
  4658  0026CA  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4659  0026CC  3399               	rrcf	___lwmod@divisor& (0+255),f,b
  4660                           
  4661                           ; BSR set to: 0
  4662  0026CE  0100               	movlb	0	; () banked
  4663  0026D0  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  4664  0026D2  D7E7               	goto	l3509
  4665  0026D4                     l885:
  4666                           
  4667                           ; BSR set to: 0
  4668  0026D4  C097  F097         	movff	___lwmod@dividend,?___lwmod
  4669  0026D8  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
  4670                           
  4671                           ; BSR set to: 0
  4672  0026DC  0012               	return		;funcret
  4673  0026DE                     __end_of___lwmod:
  4674                           	opt stack 0
  4675                           tblptru	equ	0xFF8
  4676                           tblptrh	equ	0xFF7
  4677                           tblptrl	equ	0xFF6
  4678                           tablat	equ	0xFF5
  4679                           prodh	equ	0xFF4
  4680                           prodl	equ	0xFF3
  4681                           intcon	equ	0xFF2
  4682                           intcon2	equ	0xFF1
  4683                           intcon3	equ	0xFF0
  4684                           postinc0	equ	0xFEE
  4685                           wreg	equ	0xFE8
  4686                           indf2	equ	0xFDF
  4687                           postinc2	equ	0xFDE
  4688                           postdec2	equ	0xFDD
  4689                           fsr2h	equ	0xFDA
  4690                           fsr2l	equ	0xFD9
  4691                           status	equ	0xFD8
  4692                           
  4693 ;; *************** function ___lwdiv *****************
  4694 ;; Defined at:
  4695 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  dividend        2   16[BANK0 ] unsigned int 
  4698 ;;  divisor         2   18[BANK0 ] unsigned int 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  quotient        2   20[BANK0 ] unsigned int 
  4701 ;;  counter         1   22[BANK0 ] unsigned char 
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  2   16[BANK0 ] unsigned int 
  4704 ;; Registers used:
  4705 ;;		wreg, status,2, status,0
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4711 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;Total ram usage:        7 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    7
  4718 ;; This function calls:
  4719 ;;		Nothing
  4720 ;; This function is called by:
  4721 ;;		_printf
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           	psect	text16
  4726  002524                     __ptext16:
  4727                           	opt stack 0
  4728  002524                     ___lwdiv:
  4729                           	opt stack 21
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;incstack = 0
  4733  002524  0E00               	movlw	0
  4734  002526  0100               	movlb	0	; () banked
  4735  002528  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4736  00252A  0E00               	movlw	0
  4737  00252C  6F94               	movwf	___lwdiv@quotient& (0+255),b
  4738                           
  4739                           ; BSR set to: 0
  4740  00252E  0100               	movlb	0	; () banked
  4741  002530  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4742  002532  0100               	movlb	0	; () banked
  4743  002534  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4744  002536  B4D8               	btfsc	status,2,c
  4745  002538  D02C               	goto	l875
  4746                           
  4747                           ; BSR set to: 0
  4748  00253A  0E01               	movlw	1
  4749  00253C  0100               	movlb	0	; () banked
  4750  00253E  6F96               	movwf	___lwdiv@counter& (0+255),b
  4751  002540  D006               	goto	l3487
  4752  002542                     l3485:
  4753                           
  4754                           ; BSR set to: 0
  4755  002542  0100               	movlb	0	; () banked
  4756  002544  90D8               	bcf	status,0,c
  4757  002546  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
  4758  002548  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4759  00254A  0100               	movlb	0	; () banked
  4760  00254C  2B96               	incf	___lwdiv@counter& (0+255),f,b
  4761  00254E                     l3487:
  4762                           
  4763                           ; BSR set to: 0
  4764  00254E  0100               	movlb	0	; () banked
  4765  002550  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4766  002552  D7F7               	goto	l3485
  4767  002554                     l3489:
  4768                           
  4769                           ; BSR set to: 0
  4770  002554  0100               	movlb	0	; () banked
  4771  002556  90D8               	bcf	status,0,c
  4772  002558  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  4773  00255A  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4774                           
  4775                           ; BSR set to: 0
  4776  00255C  0100               	movlb	0	; () banked
  4777  00255E  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4778  002560  0100               	movlb	0	; () banked
  4779  002562  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
  4780  002564  0100               	movlb	0	; () banked
  4781  002566  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4782  002568  0100               	movlb	0	; () banked
  4783  00256A  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4784  00256C  A0D8               	btfss	status,0,c
  4785  00256E  D00A               	goto	l3497
  4786                           
  4787                           ; BSR set to: 0
  4788  002570  0100               	movlb	0	; () banked
  4789  002572  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4790  002574  0100               	movlb	0	; () banked
  4791  002576  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
  4792  002578  0100               	movlb	0	; () banked
  4793  00257A  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4794  00257C  0100               	movlb	0	; () banked
  4795  00257E  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4796                           
  4797                           ; BSR set to: 0
  4798  002580  0100               	movlb	0	; () banked
  4799  002582  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  4800  002584                     l3497:
  4801                           
  4802                           ; BSR set to: 0
  4803  002584  0100               	movlb	0	; () banked
  4804  002586  90D8               	bcf	status,0,c
  4805  002588  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4806  00258A  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
  4807                           
  4808                           ; BSR set to: 0
  4809  00258C  0100               	movlb	0	; () banked
  4810  00258E  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  4811  002590  D7E1               	goto	l3489
  4812  002592                     l875:
  4813                           
  4814                           ; BSR set to: 0
  4815  002592  C094  F090         	movff	___lwdiv@quotient,?___lwdiv
  4816  002596  C095  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4817                           
  4818                           ; BSR set to: 0
  4819  00259A  0012               	return		;funcret
  4820  00259C                     __end_of___lwdiv:
  4821                           	opt stack 0
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           intcon	equ	0xFF2
  4829                           intcon2	equ	0xFF1
  4830                           intcon3	equ	0xFF0
  4831                           postinc0	equ	0xFEE
  4832                           wreg	equ	0xFE8
  4833                           indf2	equ	0xFDF
  4834                           postinc2	equ	0xFDE
  4835                           postdec2	equ	0xFDD
  4836                           fsr2h	equ	0xFDA
  4837                           fsr2l	equ	0xFD9
  4838                           status	equ	0xFD8
  4839                           
  4840 ;; *************** function _lcdInst *****************
  4841 ;; Defined at:
  4842 ;;		line 26 in file "lcd.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;  data            1    wreg     unsigned char 
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  data            1   18[BANK0 ] unsigned char 
  4847 ;; Return value:  Size  Location     Type
  4848 ;;                  1    wreg      void 
  4849 ;; Registers used:
  4850 ;;		wreg, status,2, status,0, cstack
  4851 ;; Tracked objects:
  4852 ;;		On entry : 0/0
  4853 ;;		On exit  : 0/0
  4854 ;;		Unchanged: 0/0
  4855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;Total ram usage:        1 bytes
  4861 ;; Hardware stack levels used:    1
  4862 ;; Hardware stack levels required when called:    8
  4863 ;; This function calls:
  4864 ;;		_lcdNibble
  4865 ;; This function is called by:
  4866 ;;		_initLCD
  4867 ;;		_standby
  4868 ;;		_date_time
  4869 ;;		_bottle_count
  4870 ;;		_bottle_time
  4871 ;;		_operation
  4872 ;;		_operationend
  4873 ;;		_emergencystop
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text17
  4878  002BB0                     __ptext17:
  4879                           	opt stack 0
  4880  002BB0                     _lcdInst:
  4881                           	opt stack 21
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;incstack = 0
  4885                           ;lcdInst@data stored from wreg
  4886  002BB0  0100               	movlb	0	; () banked
  4887  002BB2  6F92               	movwf	lcdInst@data& (0+255),b
  4888                           
  4889                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4890  002BB4  948C               	bcf	3980,2,c	;volatile
  4891                           
  4892                           ;lcd.c: 28: lcdNibble(data);
  4893  002BB6  0100               	movlb	0	; () banked
  4894  002BB8  5192               	movf	lcdInst@data& (0+255),w,b
  4895  002BBA  EC6F  F013         	call	_lcdNibble
  4896  002BBE  0012               	return		;funcret
  4897  002BC0                     __end_of_lcdInst:
  4898                           	opt stack 0
  4899                           tblptru	equ	0xFF8
  4900                           tblptrh	equ	0xFF7
  4901                           tblptrl	equ	0xFF6
  4902                           tablat	equ	0xFF5
  4903                           prodh	equ	0xFF4
  4904                           prodl	equ	0xFF3
  4905                           intcon	equ	0xFF2
  4906                           intcon2	equ	0xFF1
  4907                           intcon3	equ	0xFF0
  4908                           postinc0	equ	0xFEE
  4909                           wreg	equ	0xFE8
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           postdec2	equ	0xFDD
  4913                           fsr2h	equ	0xFDA
  4914                           fsr2l	equ	0xFD9
  4915                           status	equ	0xFD8
  4916                           
  4917 ;; *************** function _lcdNibble *****************
  4918 ;; Defined at:
  4919 ;;		line 36 in file "lcd.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  data            1    wreg     unsigned char 
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;  data            1   17[BANK0 ] unsigned char 
  4924 ;;  temp            1   16[BANK0 ] unsigned char 
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      void 
  4927 ;; Registers used:
  4928 ;;		wreg, status,2, status,0
  4929 ;; Tracked objects:
  4930 ;;		On entry : 0/0
  4931 ;;		On exit  : 0/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;Total ram usage:        2 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:    7
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_lcdInst
  4945 ;;		_putch
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           	psect	text18
  4950  0026DE                     __ptext18:
  4951                           	opt stack 0
  4952  0026DE                     _lcdNibble:
  4953                           	opt stack 20
  4954                           
  4955                           ;incstack = 0
  4956                           ;lcdNibble@data stored from wreg
  4957  0026DE  0100               	movlb	0	; () banked
  4958  0026E0  6F91               	movwf	lcdNibble@data& (0+255),b
  4959                           
  4960                           ;lcd.c: 38: char temp = data & 0xF0;
  4961  0026E2  0100               	movlb	0	; () banked
  4962  0026E4  5191               	movf	lcdNibble@data& (0+255),w,b
  4963  0026E6  0BF0               	andlw	240
  4964  0026E8  0100               	movlb	0	; () banked
  4965  0026EA  6F90               	movwf	lcdNibble@temp& (0+255),b
  4966                           
  4967                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4968  0026EC  508C               	movf	3980,w,c	;volatile
  4969  0026EE  0B0F               	andlw	15
  4970  0026F0  6E8C               	movwf	3980,c	;volatile
  4971                           
  4972                           ;lcd.c: 40: LATD = temp | LATD;
  4973  0026F2  0100               	movlb	0	; () banked
  4974  0026F4  5190               	movf	lcdNibble@temp& (0+255),w,b
  4975  0026F6  108C               	iorwf	3980,w,c	;volatile
  4976  0026F8  6E8C               	movwf	3980,c	;volatile
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4980  0026FA  968C               	bcf	3980,3,c	;volatile
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4984  0026FC  0E19               	movlw	25
  4985  0026FE                     u4157:
  4986  0026FE  2EE8               	decfsz	wreg,f,c
  4987  002700  D7FE               	bra	u4157
  4988                           
  4989                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4990  002702  868C               	bsf	3980,3,c	;volatile
  4991                           
  4992                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4993  002704  0E19               	movlw	25
  4994  002706                     u4167:
  4995  002706  2EE8               	decfsz	wreg,f,c
  4996  002708  D7FE               	bra	u4167
  4997                           
  4998                           ;lcd.c: 47: data = data << 4;
  4999  00270A  0100               	movlb	0	; () banked
  5000  00270C  3991               	swapf	lcdNibble@data& (0+255),w,b
  5001  00270E  0BF0               	andlw	240
  5002  002710  0100               	movlb	0	; () banked
  5003  002712  6F91               	movwf	lcdNibble@data& (0+255),b
  5004                           
  5005                           ;lcd.c: 49: temp = data & 0xF0;
  5006  002714  0100               	movlb	0	; () banked
  5007  002716  5191               	movf	lcdNibble@data& (0+255),w,b
  5008  002718  0BF0               	andlw	240
  5009  00271A  0100               	movlb	0	; () banked
  5010  00271C  6F90               	movwf	lcdNibble@temp& (0+255),b
  5011                           
  5012                           ;lcd.c: 50: LATD = LATD & 0x0F;
  5013  00271E  508C               	movf	3980,w,c	;volatile
  5014  002720  0B0F               	andlw	15
  5015  002722  6E8C               	movwf	3980,c	;volatile
  5016                           
  5017                           ;lcd.c: 51: LATD = temp | LATD;
  5018  002724  0100               	movlb	0	; () banked
  5019  002726  5190               	movf	lcdNibble@temp& (0+255),w,b
  5020  002728  108C               	iorwf	3980,w,c	;volatile
  5021  00272A  6E8C               	movwf	3980,c	;volatile
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  5025  00272C  968C               	bcf	3980,3,c	;volatile
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5029  00272E  0E19               	movlw	25
  5030  002730                     u4177:
  5031  002730  2EE8               	decfsz	wreg,f,c
  5032  002732  D7FE               	bra	u4177
  5033                           
  5034                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  5035  002734  868C               	bsf	3980,3,c	;volatile
  5036                           
  5037                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5038  002736  0E19               	movlw	25
  5039  002738                     u4187:
  5040  002738  2EE8               	decfsz	wreg,f,c
  5041  00273A  D7FE               	bra	u4187
  5042  00273C  0012               	return		;funcret
  5043  00273E                     __end_of_lcdNibble:
  5044                           	opt stack 0
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           prodh	equ	0xFF4
  5050                           prodl	equ	0xFF3
  5051                           intcon	equ	0xFF2
  5052                           intcon2	equ	0xFF1
  5053                           intcon3	equ	0xFF0
  5054                           postinc0	equ	0xFEE
  5055                           wreg	equ	0xFE8
  5056                           indf2	equ	0xFDF
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           fsr2h	equ	0xFDA
  5060                           fsr2l	equ	0xFD9
  5061                           status	equ	0xFD8
  5062                           
  5063 ;; *************** function ___awmod *****************
  5064 ;; Defined at:
  5065 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;  dividend        2   16[BANK0 ] int 
  5068 ;;  divisor         2   18[BANK0 ] int 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  sign            1   21[BANK0 ] unsigned char 
  5071 ;;  counter         1   20[BANK0 ] unsigned char 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  2   16[BANK0 ] int 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5081 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;Total ram usage:        6 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    7
  5088 ;; This function calls:
  5089 ;;		Nothing
  5090 ;; This function is called by:
  5091 ;;		_bottle_count
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text19
  5096  00224E                     __ptext19:
  5097                           	opt stack 0
  5098  00224E                     ___awmod:
  5099                           	opt stack 22
  5100                           
  5101                           ;incstack = 0
  5102  00224E  0E00               	movlw	0
  5103  002250  0100               	movlb	0	; () banked
  5104  002252  6F95               	movwf	___awmod@sign& (0+255),b
  5105                           
  5106                           ; BSR set to: 0
  5107  002254  0100               	movlb	0	; () banked
  5108  002256  AF91               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5109  002258  D008               	goto	l3863
  5110                           
  5111                           ; BSR set to: 0
  5112  00225A  0100               	movlb	0	; () banked
  5113  00225C  6D90               	negf	___awmod@dividend& (0+255),b
  5114  00225E  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  5115  002260  B0D8               	btfsc	status,0,c
  5116  002262  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  5117                           
  5118                           ; BSR set to: 0
  5119  002264  0E01               	movlw	1
  5120  002266  0100               	movlb	0	; () banked
  5121  002268  6F95               	movwf	___awmod@sign& (0+255),b
  5122  00226A                     l3863:
  5123                           
  5124                           ; BSR set to: 0
  5125  00226A  0100               	movlb	0	; () banked
  5126  00226C  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5127  00226E  D005               	goto	l3867
  5128                           
  5129                           ; BSR set to: 0
  5130  002270  0100               	movlb	0	; () banked
  5131  002272  6D92               	negf	___awmod@divisor& (0+255),b
  5132  002274  1F93               	comf	(___awmod@divisor+1)& (0+255),f,b
  5133  002276  B0D8               	btfsc	status,0,c
  5134  002278  2B93               	incf	(___awmod@divisor+1)& (0+255),f,b
  5135  00227A                     l3867:
  5136                           
  5137                           ; BSR set to: 0
  5138  00227A  0100               	movlb	0	; () banked
  5139  00227C  5192               	movf	___awmod@divisor& (0+255),w,b
  5140  00227E  0100               	movlb	0	; () banked
  5141  002280  1193               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5142  002282  B4D8               	btfsc	status,2,c
  5143  002284  D026               	goto	l3883
  5144                           
  5145                           ; BSR set to: 0
  5146  002286  0E01               	movlw	1
  5147  002288  0100               	movlb	0	; () banked
  5148  00228A  6F94               	movwf	___awmod@counter& (0+255),b
  5149  00228C  D006               	goto	l3873
  5150  00228E                     l3871:
  5151                           
  5152                           ; BSR set to: 0
  5153  00228E  0100               	movlb	0	; () banked
  5154  002290  90D8               	bcf	status,0,c
  5155  002292  3792               	rlcf	___awmod@divisor& (0+255),f,b
  5156  002294  3793               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5157  002296  0100               	movlb	0	; () banked
  5158  002298  2B94               	incf	___awmod@counter& (0+255),f,b
  5159  00229A                     l3873:
  5160                           
  5161                           ; BSR set to: 0
  5162  00229A  0100               	movlb	0	; () banked
  5163  00229C  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5164  00229E  D7F7               	goto	l3871
  5165  0022A0                     l3875:
  5166                           
  5167                           ; BSR set to: 0
  5168  0022A0  0100               	movlb	0	; () banked
  5169  0022A2  5192               	movf	___awmod@divisor& (0+255),w,b
  5170  0022A4  0100               	movlb	0	; () banked
  5171  0022A6  5D90               	subwf	___awmod@dividend& (0+255),w,b
  5172  0022A8  0100               	movlb	0	; () banked
  5173  0022AA  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  5174  0022AC  0100               	movlb	0	; () banked
  5175  0022AE  5991               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5176  0022B0  A0D8               	btfss	status,0,c
  5177  0022B2  D008               	goto	l3879
  5178                           
  5179                           ; BSR set to: 0
  5180  0022B4  0100               	movlb	0	; () banked
  5181  0022B6  5192               	movf	___awmod@divisor& (0+255),w,b
  5182  0022B8  0100               	movlb	0	; () banked
  5183  0022BA  5F90               	subwf	___awmod@dividend& (0+255),f,b
  5184  0022BC  0100               	movlb	0	; () banked
  5185  0022BE  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  5186  0022C0  0100               	movlb	0	; () banked
  5187  0022C2  5B91               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5188  0022C4                     l3879:
  5189                           
  5190                           ; BSR set to: 0
  5191  0022C4  0100               	movlb	0	; () banked
  5192  0022C6  90D8               	bcf	status,0,c
  5193  0022C8  3393               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5194  0022CA  3392               	rrcf	___awmod@divisor& (0+255),f,b
  5195                           
  5196                           ; BSR set to: 0
  5197  0022CC  0100               	movlb	0	; () banked
  5198  0022CE  2F94               	decfsz	___awmod@counter& (0+255),f,b
  5199  0022D0  D7E7               	goto	l3875
  5200  0022D2                     l3883:
  5201                           
  5202                           ; BSR set to: 0
  5203  0022D2  0100               	movlb	0	; () banked
  5204  0022D4  5195               	movf	___awmod@sign& (0+255),w,b
  5205  0022D6  0100               	movlb	0	; () banked
  5206  0022D8  B4D8               	btfsc	status,2,c
  5207  0022DA  D005               	goto	l3887
  5208                           
  5209                           ; BSR set to: 0
  5210  0022DC  0100               	movlb	0	; () banked
  5211  0022DE  6D90               	negf	___awmod@dividend& (0+255),b
  5212  0022E0  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  5213  0022E2  B0D8               	btfsc	status,0,c
  5214  0022E4  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  5215  0022E6                     l3887:
  5216                           
  5217                           ; BSR set to: 0
  5218  0022E6  C090  F090         	movff	___awmod@dividend,?___awmod
  5219  0022EA  C091  F091         	movff	___awmod@dividend+1,?___awmod+1
  5220  0022EE  0012               	return	
  5221  0022F0                     __end_of___awmod:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           prodh	equ	0xFF4
  5228                           prodl	equ	0xFF3
  5229                           intcon	equ	0xFF2
  5230                           intcon2	equ	0xFF1
  5231                           intcon3	equ	0xFF0
  5232                           postinc0	equ	0xFEE
  5233                           wreg	equ	0xFE8
  5234                           indf2	equ	0xFDF
  5235                           postinc2	equ	0xFDE
  5236                           postdec2	equ	0xFDD
  5237                           fsr2h	equ	0xFDA
  5238                           fsr2l	equ	0xFD9
  5239                           status	equ	0xFD8
  5240                           
  5241 ;; *************** function _I2C_Master_Init *****************
  5242 ;; Defined at:
  5243 ;;		line 14 in file "I2C.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  c               4   29[BANK0 ] const unsigned long 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      void 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2, status,0, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5257 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;Total ram usage:        8 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    8
  5264 ;; This function calls:
  5265 ;;		___lldiv
  5266 ;; This function is called by:
  5267 ;;		_main
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text20
  5272  00273E                     __ptext20:
  5273                           	opt stack 0
  5274  00273E                     _I2C_Master_Init:
  5275                           	opt stack 22
  5276                           
  5277                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;incstack = 0
  5281  00273E  0E00               	movlw	0
  5282  002740  6EC7               	movwf	4039,c	;volatile
  5283                           
  5284                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  5285  002742  0E28               	movlw	40
  5286  002744  6EC6               	movwf	4038,c	;volatile
  5287                           
  5288                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  5289  002746  0E00               	movlw	0
  5290  002748  6EC5               	movwf	4037,c	;volatile
  5291                           
  5292                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
  5293  00274A  0E80               	movlw	128
  5294  00274C  0100               	movlb	0	; () banked
  5295  00274E  6F90               	movwf	___lldiv@dividend& (0+255),b
  5296  002750  0E96               	movlw	150
  5297  002752  6F91               	movwf	(___lldiv@dividend+1)& (0+255),b
  5298  002754  0E98               	movlw	152
  5299  002756  6F92               	movwf	(___lldiv@dividend+2)& (0+255),b
  5300  002758  0E00               	movlw	0
  5301  00275A  6F93               	movwf	(___lldiv@dividend+3)& (0+255),b
  5302  00275C  C09D  F0A1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5303  002760  C09E  F0A2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5304  002764  C09F  F0A3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5305  002768  C0A0  F0A4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5306  00276C  0E02               	movlw	2
  5307  00276E                     u3585:
  5308  00276E  90D8               	bcf	status,0,c
  5309  002770  0100               	movlb	0	; () banked
  5310  002772  37A1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5311  002774  37A2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5312  002776  37A3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5313  002778  37A4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5314  00277A  2EE8               	decfsz	wreg,f,c
  5315  00277C  D7F8               	goto	u3585
  5316  00277E  C0A1  F094         	movff	??_I2C_Master_Init,___lldiv@divisor
  5317  002782  C0A2  F095         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5318  002786  C0A3  F096         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5319  00278A  C0A4  F097         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5320  00278E  EC72  F010         	call	___lldiv	;wreg free
  5321  002792  0100               	movlb	0	; () banked
  5322  002794  0590               	decf	?___lldiv& (0+255),w,b
  5323  002796  6EC8               	movwf	4040,c	;volatile
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;I2C.c: 21: TRISC3 = 1;
  5327  002798  8694               	bsf	3988,3,c	;volatile
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;I2C.c: 22: TRISC4 = 1;
  5331  00279A  8894               	bsf	3988,4,c	;volatile
  5332                           
  5333                           ; BSR set to: 0
  5334  00279C  0012               	return		;funcret
  5335  00279E                     __end_of_I2C_Master_Init:
  5336                           	opt stack 0
  5337                           tblptru	equ	0xFF8
  5338                           tblptrh	equ	0xFF7
  5339                           tblptrl	equ	0xFF6
  5340                           tablat	equ	0xFF5
  5341                           prodh	equ	0xFF4
  5342                           prodl	equ	0xFF3
  5343                           intcon	equ	0xFF2
  5344                           intcon2	equ	0xFF1
  5345                           intcon3	equ	0xFF0
  5346                           postinc0	equ	0xFEE
  5347                           wreg	equ	0xFE8
  5348                           indf2	equ	0xFDF
  5349                           postinc2	equ	0xFDE
  5350                           postdec2	equ	0xFDD
  5351                           fsr2h	equ	0xFDA
  5352                           fsr2l	equ	0xFD9
  5353                           status	equ	0xFD8
  5354                           
  5355 ;; *************** function ___lldiv *****************
  5356 ;; Defined at:
  5357 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  dividend        4   16[BANK0 ] unsigned long 
  5360 ;;  divisor         4   20[BANK0 ] unsigned long 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  quotient        4   24[BANK0 ] unsigned long 
  5363 ;;  counter         1   28[BANK0 ] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  4   16[BANK0 ] unsigned long 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5373 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;Total ram usage:       13 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    7
  5380 ;; This function calls:
  5381 ;;		Nothing
  5382 ;; This function is called by:
  5383 ;;		_I2C_Master_Init
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text21
  5388  0020E4                     __ptext21:
  5389                           	opt stack 0
  5390  0020E4                     ___lldiv:
  5391                           	opt stack 22
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;incstack = 0
  5395  0020E4  0E00               	movlw	0
  5396  0020E6  0100               	movlb	0	; () banked
  5397  0020E8  6F98               	movwf	___lldiv@quotient& (0+255),b
  5398  0020EA  0E00               	movlw	0
  5399  0020EC  6F99               	movwf	(___lldiv@quotient+1)& (0+255),b
  5400  0020EE  0E00               	movlw	0
  5401  0020F0  6F9A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5402  0020F2  0E00               	movlw	0
  5403  0020F4  6F9B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5404                           
  5405                           ; BSR set to: 0
  5406  0020F6  0100               	movlb	0	; () banked
  5407  0020F8  5194               	movf	___lldiv@divisor& (0+255),w,b
  5408  0020FA  0100               	movlb	0	; () banked
  5409  0020FC  1195               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5410  0020FE  0100               	movlb	0	; () banked
  5411  002100  1196               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5412  002102  0100               	movlb	0	; () banked
  5413  002104  1197               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5414  002106  B4D8               	btfsc	status,2,c
  5415  002108  D042               	goto	l822
  5416                           
  5417                           ; BSR set to: 0
  5418  00210A  0E01               	movlw	1
  5419  00210C  0100               	movlb	0	; () banked
  5420  00210E  6F9C               	movwf	___lldiv@counter& (0+255),b
  5421  002110  D008               	goto	l3899
  5422  002112                     l3897:
  5423                           
  5424                           ; BSR set to: 0
  5425  002112  0100               	movlb	0	; () banked
  5426  002114  90D8               	bcf	status,0,c
  5427  002116  3794               	rlcf	___lldiv@divisor& (0+255),f,b
  5428  002118  3795               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5429  00211A  3796               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5430  00211C  3797               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5431  00211E  0100               	movlb	0	; () banked
  5432  002120  2B9C               	incf	___lldiv@counter& (0+255),f,b
  5433  002122                     l3899:
  5434                           
  5435                           ; BSR set to: 0
  5436  002122  0100               	movlb	0	; () banked
  5437  002124  AF97               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5438  002126  D7F5               	goto	l3897
  5439  002128                     l3901:
  5440                           
  5441                           ; BSR set to: 0
  5442  002128  0100               	movlb	0	; () banked
  5443  00212A  90D8               	bcf	status,0,c
  5444  00212C  3798               	rlcf	___lldiv@quotient& (0+255),f,b
  5445  00212E  3799               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5446  002130  379A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5447  002132  379B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5448                           
  5449                           ; BSR set to: 0
  5450  002134  0100               	movlb	0	; () banked
  5451  002136  5194               	movf	___lldiv@divisor& (0+255),w,b
  5452  002138  0100               	movlb	0	; () banked
  5453  00213A  5D90               	subwf	___lldiv@dividend& (0+255),w,b
  5454  00213C  0100               	movlb	0	; () banked
  5455  00213E  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5456  002140  0100               	movlb	0	; () banked
  5457  002142  5991               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5458  002144  0100               	movlb	0	; () banked
  5459  002146  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5460  002148  0100               	movlb	0	; () banked
  5461  00214A  5992               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5462  00214C  0100               	movlb	0	; () banked
  5463  00214E  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5464  002150  0100               	movlb	0	; () banked
  5465  002152  5993               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5466  002154  A0D8               	btfss	status,0,c
  5467  002156  D012               	goto	l3909
  5468                           
  5469                           ; BSR set to: 0
  5470  002158  0100               	movlb	0	; () banked
  5471  00215A  5194               	movf	___lldiv@divisor& (0+255),w,b
  5472  00215C  0100               	movlb	0	; () banked
  5473  00215E  5F90               	subwf	___lldiv@dividend& (0+255),f,b
  5474  002160  0100               	movlb	0	; () banked
  5475  002162  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5476  002164  0100               	movlb	0	; () banked
  5477  002166  5B91               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5478  002168  0100               	movlb	0	; () banked
  5479  00216A  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5480  00216C  0100               	movlb	0	; () banked
  5481  00216E  5B92               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5482  002170  0100               	movlb	0	; () banked
  5483  002172  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5484  002174  0100               	movlb	0	; () banked
  5485  002176  5B93               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5486                           
  5487                           ; BSR set to: 0
  5488  002178  0100               	movlb	0	; () banked
  5489  00217A  8198               	bsf	___lldiv@quotient& (0+255),0,b
  5490  00217C                     l3909:
  5491                           
  5492                           ; BSR set to: 0
  5493  00217C  0100               	movlb	0	; () banked
  5494  00217E  90D8               	bcf	status,0,c
  5495  002180  3397               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5496  002182  3396               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5497  002184  3395               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5498  002186  3394               	rrcf	___lldiv@divisor& (0+255),f,b
  5499                           
  5500                           ; BSR set to: 0
  5501  002188  0100               	movlb	0	; () banked
  5502  00218A  2F9C               	decfsz	___lldiv@counter& (0+255),f,b
  5503  00218C  D7CD               	goto	l3901
  5504  00218E                     l822:
  5505                           
  5506                           ; BSR set to: 0
  5507  00218E  C098  F090         	movff	___lldiv@quotient,?___lldiv
  5508  002192  C099  F091         	movff	___lldiv@quotient+1,?___lldiv+1
  5509  002196  C09A  F092         	movff	___lldiv@quotient+2,?___lldiv+2
  5510  00219A  C09B  F093         	movff	___lldiv@quotient+3,?___lldiv+3
  5511                           
  5512                           ; BSR set to: 0
  5513  00219E  0012               	return		;funcret
  5514  0021A0                     __end_of___lldiv:
  5515                           	opt stack 0
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           intcon2	equ	0xFF1
  5524                           intcon3	equ	0xFF0
  5525                           postinc0	equ	0xFEE
  5526                           wreg	equ	0xFE8
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function _I2C_ColorSens_Init *****************
  5535 ;; Defined at:
  5536 ;;		line 54 in file "I2C.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;		None
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;		None
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, status,2, status,0, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;Total ram usage:        1 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    9
  5557 ;; This function calls:
  5558 ;;		_I2C_Master_Start
  5559 ;;		_I2C_Master_Stop
  5560 ;;		_I2C_Master_Write
  5561 ;; This function is called by:
  5562 ;;		_main
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text22
  5567  00119A                     __ptext22:
  5568                           	opt stack 0
  5569  00119A                     _I2C_ColorSens_Init:
  5570                           	opt stack 21
  5571                           
  5572                           ;I2C.c: 55: I2C_Master_Start();
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;incstack = 0
  5576  00119A  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  5577                           
  5578                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  5579  00119E  0E00               	movlw	0
  5580  0011A0  0100               	movlb	0	; () banked
  5581  0011A2  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5582  0011A4  0E52               	movlw	82
  5583  0011A6  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5584  0011A8  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5585                           
  5586                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  5587  0011AC  0E00               	movlw	0
  5588  0011AE  0100               	movlb	0	; () banked
  5589  0011B0  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5590  0011B2  0E80               	movlw	128
  5591  0011B4  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5592  0011B6  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5593                           
  5594                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  5595  0011BA  0E00               	movlw	0
  5596  0011BC  0100               	movlb	0	; () banked
  5597  0011BE  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5598  0011C0  0E01               	movlw	1
  5599  0011C2  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5600  0011C4  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5601                           
  5602                           ;I2C.c: 59: I2C_Master_Stop();
  5603  0011C8  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  5604                           
  5605                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  5606  0011CC  0E0A               	movlw	10
  5607  0011CE  0100               	movlb	0	; () banked
  5608  0011D0  6F93               	movwf	??_I2C_ColorSens_Init& (0+255),b
  5609  0011D2  0EBC               	movlw	188
  5610  0011D4                     u4197:
  5611  0011D4  2EE8               	decfsz	wreg,f,c
  5612  0011D6  D7FE               	bra	u4197
  5613  0011D8  2F93               	decfsz	??_I2C_ColorSens_Init& (0+255),f,b
  5614  0011DA  D7FC               	bra	u4197
  5615  0011DC  F000               	nop	
  5616                           
  5617                           ;I2C.c: 63: I2C_Master_Start();
  5618  0011DE  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  5619                           
  5620                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  5621  0011E2  0E00               	movlw	0
  5622  0011E4  0100               	movlb	0	; () banked
  5623  0011E6  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5624  0011E8  0E52               	movlw	82
  5625  0011EA  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5626  0011EC  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5627                           
  5628                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  5629  0011F0  0E00               	movlw	0
  5630  0011F2  0100               	movlb	0	; () banked
  5631  0011F4  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5632  0011F6  0E80               	movlw	128
  5633  0011F8  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5634  0011FA  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5635                           
  5636                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
  5637  0011FE  0E00               	movlw	0
  5638  001200  0100               	movlb	0	; () banked
  5639  001202  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5640  001204  0E03               	movlw	3
  5641  001206  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5642  001208  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5643                           
  5644                           ;I2C.c: 67: I2C_Master_Stop();
  5645  00120C  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  5646                           
  5647                           ;I2C.c: 69: I2C_Master_Start();
  5648  001210  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  5649                           
  5650                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  5651  001214  0E00               	movlw	0
  5652  001216  0100               	movlb	0	; () banked
  5653  001218  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5654  00121A  0E52               	movlw	82
  5655  00121C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5656  00121E  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5657                           
  5658                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  5659  001222  0E00               	movlw	0
  5660  001224  0100               	movlb	0	; () banked
  5661  001226  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5662  001228  0E8F               	movlw	143
  5663  00122A  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5664  00122C  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5665                           
  5666                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  5667  001230  0E00               	movlw	0
  5668  001232  0100               	movlb	0	; () banked
  5669  001234  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5670  001236  0E02               	movlw	2
  5671  001238  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5672  00123A  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5673                           
  5674                           ;I2C.c: 73: I2C_Master_Stop();
  5675  00123E  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  5676                           
  5677                           ;I2C.c: 75: I2C_Master_Start();
  5678  001242  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  5679                           
  5680                           ;I2C.c: 76: I2C_Master_Write(0b01010010);
  5681  001246  0E00               	movlw	0
  5682  001248  0100               	movlb	0	; () banked
  5683  00124A  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5684  00124C  0E52               	movlw	82
  5685  00124E  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5686  001250  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5687                           
  5688                           ;I2C.c: 77: I2C_Master_Write(0b10100100);
  5689  001254  0E00               	movlw	0
  5690  001256  0100               	movlb	0	; () banked
  5691  001258  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5692  00125A  0EA4               	movlw	164
  5693  00125C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5694  00125E  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5695                           
  5696                           ;I2C.c: 78: I2C_Master_Write(0x00);
  5697  001262  0E00               	movlw	0
  5698  001264  0100               	movlb	0	; () banked
  5699  001266  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5700  001268  0E00               	movlw	0
  5701  00126A  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5702  00126C  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5703                           
  5704                           ;I2C.c: 79: I2C_Master_Write(0x00);
  5705  001270  0E00               	movlw	0
  5706  001272  0100               	movlb	0	; () banked
  5707  001274  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5708  001276  0E00               	movlw	0
  5709  001278  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5710  00127A  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5711                           
  5712                           ;I2C.c: 80: I2C_Master_Write(0x00);
  5713  00127E  0E00               	movlw	0
  5714  001280  0100               	movlb	0	; () banked
  5715  001282  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5716  001284  0E00               	movlw	0
  5717  001286  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5718  001288  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5719                           
  5720                           ;I2C.c: 81: I2C_Master_Write(0b01001010);
  5721  00128C  0E00               	movlw	0
  5722  00128E  0100               	movlb	0	; () banked
  5723  001290  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5724  001292  0E4A               	movlw	74
  5725  001294  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5726  001296  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5727                           
  5728                           ;I2C.c: 82: I2C_Master_Stop();
  5729  00129A  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  5730                           
  5731                           ;I2C.c: 84: I2C_Master_Start();
  5732  00129E  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  5733                           
  5734                           ;I2C.c: 85: I2C_Master_Write(0b01010010);
  5735  0012A2  0E00               	movlw	0
  5736  0012A4  0100               	movlb	0	; () banked
  5737  0012A6  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5738  0012A8  0E52               	movlw	82
  5739  0012AA  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5740  0012AC  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5741                           
  5742                           ;I2C.c: 86: I2C_Master_Write(0b10001100);
  5743  0012B0  0E00               	movlw	0
  5744  0012B2  0100               	movlb	0	; () banked
  5745  0012B4  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5746  0012B6  0E8C               	movlw	140
  5747  0012B8  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5748  0012BA  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5749                           
  5750                           ;I2C.c: 87: I2C_Master_Write(0b00000001);
  5751  0012BE  0E00               	movlw	0
  5752  0012C0  0100               	movlb	0	; () banked
  5753  0012C2  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5754  0012C4  0E01               	movlw	1
  5755  0012C6  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5756  0012C8  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5757                           
  5758                           ;I2C.c: 88: I2C_Master_Stop();
  5759  0012CC  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  5760                           
  5761                           ;I2C.c: 90: I2C_Master_Start();
  5762  0012D0  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  5763                           
  5764                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
  5765  0012D4  0E00               	movlw	0
  5766  0012D6  0100               	movlb	0	; () banked
  5767  0012D8  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5768  0012DA  0E52               	movlw	82
  5769  0012DC  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5770  0012DE  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5771                           
  5772                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
  5773  0012E2  0E00               	movlw	0
  5774  0012E4  0100               	movlb	0	; () banked
  5775  0012E6  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5776  0012E8  0E81               	movlw	129
  5777  0012EA  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5778  0012EC  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5779                           
  5780                           ;I2C.c: 93: I2C_Master_Write(0b11111110);
  5781  0012F0  0E00               	movlw	0
  5782  0012F2  0100               	movlb	0	; () banked
  5783  0012F4  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5784  0012F6  0EFE               	movlw	254
  5785  0012F8  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5786  0012FA  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  5787                           
  5788                           ;I2C.c: 94: I2C_Master_Stop();
  5789  0012FE  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  5790  001302  0012               	return		;funcret
  5791  001304                     __end_of_I2C_ColorSens_Init:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           intcon	equ	0xFF2
  5800                           intcon2	equ	0xFF1
  5801                           intcon3	equ	0xFF0
  5802                           postinc0	equ	0xFEE
  5803                           wreg	equ	0xFE8
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function _I2C_Master_Write *****************
  5812 ;; Defined at:
  5813 ;;		line 48 in file "I2C.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  d               2   17[BANK0 ] unsigned int 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;		None
  5818 ;; Return value:  Size  Location     Type
  5819 ;;                  1    wreg      void 
  5820 ;; Registers used:
  5821 ;;		wreg, status,2, status,0, cstack
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5827 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;Total ram usage:        2 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; Hardware stack levels required when called:    8
  5834 ;; This function calls:
  5835 ;;		_I2C_Master_Wait
  5836 ;; This function is called by:
  5837 ;;		_I2C_ColorSens_Init
  5838 ;;		_date_time
  5839 ;;		_read_colorsensor
  5840 ;;		_I2C_ColorSens_ClearInt
  5841 ;;		_set_time
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text23
  5846  002BD8                     __ptext23:
  5847                           	opt stack 0
  5848  002BD8                     _I2C_Master_Write:
  5849                           	opt stack 20
  5850                           
  5851                           ;I2C.c: 50: I2C_Master_Wait();
  5852                           
  5853                           ;incstack = 0
  5854  002BD8  ECBD  F015         	call	_I2C_Master_Wait	;wreg free
  5855                           
  5856                           ;I2C.c: 51: SSPBUF = d;
  5857  002BDC  C091  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5858  002BE0  0012               	return		;funcret
  5859  002BE2                     __end_of_I2C_Master_Write:
  5860                           	opt stack 0
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           intcon	equ	0xFF2
  5868                           intcon2	equ	0xFF1
  5869                           intcon3	equ	0xFF0
  5870                           postinc0	equ	0xFEE
  5871                           wreg	equ	0xFE8
  5872                           indf2	equ	0xFDF
  5873                           postinc2	equ	0xFDE
  5874                           postdec2	equ	0xFDD
  5875                           fsr2h	equ	0xFDA
  5876                           fsr2l	equ	0xFD9
  5877                           status	equ	0xFD8
  5878                           
  5879 ;; *************** function _I2C_Master_Stop *****************
  5880 ;; Defined at:
  5881 ;;		line 42 in file "I2C.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;		None
  5884 ;; Auto vars:     Size  Location     Type
  5885 ;;		None
  5886 ;; Return value:  Size  Location     Type
  5887 ;;                  1    wreg      void 
  5888 ;; Registers used:
  5889 ;;		wreg, status,2, status,0, cstack
  5890 ;; Tracked objects:
  5891 ;;		On entry : 0/0
  5892 ;;		On exit  : 0/0
  5893 ;;		Unchanged: 0/0
  5894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5899 ;;Total ram usage:        0 bytes
  5900 ;; Hardware stack levels used:    1
  5901 ;; Hardware stack levels required when called:    8
  5902 ;; This function calls:
  5903 ;;		_I2C_Master_Wait
  5904 ;; This function is called by:
  5905 ;;		_I2C_ColorSens_Init
  5906 ;;		_date_time
  5907 ;;		_read_colorsensor
  5908 ;;		_I2C_ColorSens_ClearInt
  5909 ;;		_set_time
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text24
  5914  002BEC                     __ptext24:
  5915                           	opt stack 0
  5916  002BEC                     _I2C_Master_Stop:
  5917                           	opt stack 20
  5918                           
  5919                           ;I2C.c: 44: I2C_Master_Wait();
  5920                           
  5921                           ;incstack = 0
  5922  002BEC  ECBD  F015         	call	_I2C_Master_Wait	;wreg free
  5923                           
  5924                           ;I2C.c: 45: PEN = 1;
  5925  002BF0  84C5               	bsf	4037,2,c	;volatile
  5926  002BF2  0012               	return		;funcret
  5927  002BF4                     __end_of_I2C_Master_Stop:
  5928                           	opt stack 0
  5929                           tblptru	equ	0xFF8
  5930                           tblptrh	equ	0xFF7
  5931                           tblptrl	equ	0xFF6
  5932                           tablat	equ	0xFF5
  5933                           prodh	equ	0xFF4
  5934                           prodl	equ	0xFF3
  5935                           intcon	equ	0xFF2
  5936                           intcon2	equ	0xFF1
  5937                           intcon3	equ	0xFF0
  5938                           postinc0	equ	0xFEE
  5939                           wreg	equ	0xFE8
  5940                           indf2	equ	0xFDF
  5941                           postinc2	equ	0xFDE
  5942                           postdec2	equ	0xFDD
  5943                           fsr2h	equ	0xFDA
  5944                           fsr2l	equ	0xFD9
  5945                           status	equ	0xFD8
  5946                           
  5947 ;; *************** function _I2C_Master_Start *****************
  5948 ;; Defined at:
  5949 ;;		line 30 in file "I2C.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;		None
  5952 ;; Auto vars:     Size  Location     Type
  5953 ;;		None
  5954 ;; Return value:  Size  Location     Type
  5955 ;;                  1    wreg      void 
  5956 ;; Registers used:
  5957 ;;		wreg, status,2, status,0, cstack
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;Total ram usage:        0 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    8
  5970 ;; This function calls:
  5971 ;;		_I2C_Master_Wait
  5972 ;; This function is called by:
  5973 ;;		_I2C_ColorSens_Init
  5974 ;;		_date_time
  5975 ;;		_read_colorsensor
  5976 ;;		_I2C_ColorSens_ClearInt
  5977 ;;		_set_time
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text25
  5982  002BF4                     __ptext25:
  5983                           	opt stack 0
  5984  002BF4                     _I2C_Master_Start:
  5985                           	opt stack 20
  5986                           
  5987                           ;I2C.c: 32: I2C_Master_Wait();
  5988                           
  5989                           ;incstack = 0
  5990  002BF4  ECBD  F015         	call	_I2C_Master_Wait	;wreg free
  5991                           
  5992                           ;I2C.c: 33: SEN = 1;
  5993  002BF8  80C5               	bsf	4037,0,c	;volatile
  5994  002BFA  0012               	return		;funcret
  5995  002BFC                     __end_of_I2C_Master_Start:
  5996                           	opt stack 0
  5997                           tblptru	equ	0xFF8
  5998                           tblptrh	equ	0xFF7
  5999                           tblptrl	equ	0xFF6
  6000                           tablat	equ	0xFF5
  6001                           prodh	equ	0xFF4
  6002                           prodl	equ	0xFF3
  6003                           intcon	equ	0xFF2
  6004                           intcon2	equ	0xFF1
  6005                           intcon3	equ	0xFF0
  6006                           postinc0	equ	0xFEE
  6007                           wreg	equ	0xFE8
  6008                           indf2	equ	0xFDF
  6009                           postinc2	equ	0xFDE
  6010                           postdec2	equ	0xFDD
  6011                           fsr2h	equ	0xFDA
  6012                           fsr2l	equ	0xFD9
  6013                           status	equ	0xFD8
  6014                           
  6015 ;; *************** function _I2C_Master_Wait *****************
  6016 ;; Defined at:
  6017 ;;		line 25 in file "I2C.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;		None
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;		None
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  1    wreg      void 
  6024 ;; Registers used:
  6025 ;;		wreg, status,2, status,0
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;Total ram usage:        1 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    7
  6038 ;; This function calls:
  6039 ;;		Nothing
  6040 ;; This function is called by:
  6041 ;;		_I2C_Master_Start
  6042 ;;		_I2C_Master_Stop
  6043 ;;		_I2C_Master_Write
  6044 ;;		_I2C_Master_Read
  6045 ;;		_I2C_Master_RepeatedStart
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           	psect	text26
  6050  002B7A                     __ptext26:
  6051                           	opt stack 0
  6052  002B7A                     _I2C_Master_Wait:
  6053                           	opt stack 20
  6054  002B7A                     l34:
  6055  002B7A  B4C7               	btfsc	4039,2,c	;volatile
  6056  002B7C  D7FE               	goto	l34
  6057  002B7E  CFC5 F090          	movff	4037,??_I2C_Master_Wait	;volatile
  6058  002B82  0E1F               	movlw	31
  6059  002B84  0100               	movlb	0	; () banked
  6060  002B86  1790               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6061  002B88  B4D8               	btfsc	status,2,c
  6062  002B8A  0012               	return	
  6063  002B8C  D7F6               	goto	l34
  6064  002B8E                     __end_of_I2C_Master_Wait:
  6065                           	opt stack 0
  6066                           tblptru	equ	0xFF8
  6067                           tblptrh	equ	0xFF7
  6068                           tblptrl	equ	0xFF6
  6069                           tablat	equ	0xFF5
  6070                           prodh	equ	0xFF4
  6071                           prodl	equ	0xFF3
  6072                           intcon	equ	0xFF2
  6073                           intcon2	equ	0xFF1
  6074                           intcon3	equ	0xFF0
  6075                           postinc0	equ	0xFEE
  6076                           wreg	equ	0xFE8
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function _isr *****************
  6085 ;; Defined at:
  6086 ;;		line 168 in file "main.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;		None
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  i               1  114[COMRAM] unsigned char 
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      void 
  6093 ;; Registers used:
  6094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6101 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;Total ram usage:       19 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    6
  6107 ;; This function calls:
  6108 ;;		_dec_to_hex
  6109 ;;		_read_time
  6110 ;;		_servo_rotate0
  6111 ;;		i2_I2C_ColorSens_Init
  6112 ;;		i2___wmul
  6113 ;;		i2_lcdInst
  6114 ;;		i2_printf
  6115 ;;		i2_read_colorsensor
  6116 ;; This function is called by:
  6117 ;;		Interrupt level 2
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           	psect	intcode
  6122  000008                     __pintcode:
  6123                           	opt stack 0
  6124  000008                     _isr:
  6125                           	opt stack 20
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;incstack = 0
  6129  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6130  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  6131                           tblptru	equ	0xFF8
  6132                           tblptrh	equ	0xFF7
  6133                           tblptrl	equ	0xFF6
  6134                           tablat	equ	0xFF5
  6135                           prodh	equ	0xFF4
  6136                           prodl	equ	0xFF3
  6137                           intcon	equ	0xFF2
  6138                           intcon2	equ	0xFF1
  6139                           intcon3	equ	0xFF0
  6140                           postinc0	equ	0xFEE
  6141                           wreg	equ	0xFE8
  6142                           indf2	equ	0xFDF
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           fsr2h	equ	0xFDA
  6146                           fsr2l	equ	0xFD9
  6147                           status	equ	0xFD8
  6148                           
  6149                           	psect	intcode_body
  6150  000012                     __pintcode_body:
  6151                           	opt stack 20
  6152  000012                     int_func:
  6153                           	opt stack 20
  6154  000012  0006               	pop		; remove dummy address from shadow register refresh
  6155  000014  CFFA F082          	movff	pclath,??_isr+2
  6156  000018  CFFB F083          	movff	pclatu,??_isr+3
  6157  00001C  CFE9 F084          	movff	fsr0l,??_isr+4
  6158  000020  CFEA F085          	movff	fsr0h,??_isr+5
  6159  000024  CFE1 F086          	movff	fsr1l,??_isr+6
  6160  000028  CFE2 F087          	movff	fsr1h,??_isr+7
  6161  00002C  CFD9 F088          	movff	fsr2l,??_isr+8
  6162  000030  CFDA F089          	movff	fsr2h,??_isr+9
  6163  000034  CFF3 F08A          	movff	prodl,??_isr+10
  6164  000038  CFF4 F08B          	movff	prodh,??_isr+11
  6165  00003C  CFF6 F08C          	movff	tblptrl,??_isr+12
  6166  000040  CFF7 F08D          	movff	tblptrh,??_isr+13
  6167  000044  CFF8 F08E          	movff	tblptru,??_isr+14
  6168  000048  CFF5 F08F          	movff	tablat,??_isr+15
  6169                           
  6170                           ;main.c: 169: if (INT1IF) {
  6171  00004C  B0F0               	btfsc	intcon3,0,c	;volatile
  6172  00004E  D115               	goto	i2l4671
  6173  000050  D13B               	goto	i2l268
  6174  000052                     i2l270:
  6175                           
  6176                           ;main.c: 172: bottle_count_disp = -1;
  6177  000052  0100               	movlb	0	; () banked
  6178  000054  69ED               	setf	_bottle_count_disp& (0+255),b
  6179  000056  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;main.c: 173: curr_state = STANDBY;
  6183  000058  0E00               	movlw	0
  6184  00005A  0100               	movlb	0	; () banked
  6185  00005C  6FEC               	movwf	_curr_state& (0+255),b
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;main.c: 174: I2C_ColorSens_Init();
  6189  00005E  EC82  F009         	call	i2_I2C_ColorSens_Init	;wreg free
  6190                           
  6191                           ;main.c: 175: break;
  6192  000062  D130               	goto	i2l271
  6193  000064                     i2l272:
  6194                           
  6195                           ;main.c: 177: LATAbits.LATA2 = 1;
  6196  000064  8489               	bsf	3977,2,c	;volatile
  6197                           
  6198                           ;main.c: 180: TMR0IE = 1;
  6199  000066  8AF2               	bsf	intcon,5,c	;volatile
  6200                           
  6201                           ;main.c: 181: TMR0ON = 1;
  6202  000068  8ED5               	bsf	4053,7,c	;volatile
  6203                           
  6204                           ;main.c: 182: TMR0 = 0;
  6205  00006A  0E00               	movlw	0
  6206  00006C  6ED7               	movwf	4055,c	;volatile
  6207  00006E  0E00               	movlw	0
  6208  000070  6ED6               	movwf	4054,c	;volatile
  6209                           
  6210                           ;main.c: 184: read_time();
  6211  000072  EC0A  F013         	call	_read_time	;wreg free
  6212                           
  6213                           ;main.c: 185: start_time[1] = time[1];
  6214  000076  C0B8  F0DD         	movff	_time+1,_start_time+1
  6215                           
  6216                           ;main.c: 186: start_time[0] = time[0];
  6217  00007A  C0B7  F0DC         	movff	_time,_start_time
  6218                           
  6219                           ;main.c: 188: bottlequeue_head = bottlequeue_tail = 0;
  6220  00007E  0E00               	movlw	0
  6221  000080  0100               	movlb	0	; () banked
  6222  000082  6FC7               	movwf	(_bottlequeue_tail+1)& (0+255),b
  6223  000084  0E00               	movlw	0
  6224  000086  6FC6               	movwf	_bottlequeue_tail& (0+255),b
  6225  000088  C0C6  F0C4         	movff	_bottlequeue_tail,_bottlequeue_head
  6226  00008C  C0C7  F0C5         	movff	_bottlequeue_tail+1,_bottlequeue_head+1
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;main.c: 190: lcdInst(0b00000001);
  6230  000090  0E01               	movlw	1
  6231  000092  ECE6  F015         	call	i2_lcdInst
  6232                           
  6233                           ;main.c: 191: bottle_count_disp = -1;
  6234  000096  0100               	movlb	0	; () banked
  6235  000098  69ED               	setf	_bottle_count_disp& (0+255),b
  6236  00009A  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;main.c: 192: curr_state = OPERATION;
  6240  00009C  0E02               	movlw	2
  6241  00009E  D0DC               	goto	L7
  6242  0000A0                     i2l4605:
  6243                           
  6244                           ;main.c: 195: bottle_count_disp += 1;
  6245  0000A0  0100               	movlb	0	; () banked
  6246  0000A2  4BED               	infsnz	_bottle_count_disp& (0+255),f,b
  6247  0000A4  2BEE               	incf	(_bottle_count_disp+1)& (0+255),f,b
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;main.c: 196: curr_state = BOTTLECOUNT;
  6251  0000A6  0E05               	movlw	5
  6252  0000A8  0100               	movlb	0	; () banked
  6253  0000AA  6FEC               	movwf	_curr_state& (0+255),b
  6254  0000AC                     i2l4609:
  6255  0000AC  0E1F               	movlw	31
  6256  0000AE  1881               	xorwf	3969,w,c	;volatile
  6257  0000B0  A4D8               	btfss	status,2,c
  6258  0000B2  D108               	goto	i2l271
  6259  0000B4  D7FB               	goto	i2l4609
  6260  0000B6                     i2l4611:
  6261                           
  6262                           ;main.c: 200: operation_time = etime - stime;
  6263  0000B6  C0DE  F080         	movff	_stime,??_isr
  6264  0000BA  C0DF  F081         	movff	_stime+1,??_isr+1
  6265  0000BE  0100               	movlb	0	; () banked
  6266  0000C0  1F80               	comf	??_isr& (0+255),f,b
  6267  0000C2  1F81               	comf	(??_isr+1)& (0+255),f,b
  6268  0000C4  4B80               	infsnz	??_isr& (0+255),f,b
  6269  0000C6  2B81               	incf	(??_isr+1)& (0+255),f,b
  6270  0000C8  0100               	movlb	0	; () banked
  6271  0000CA  51D4               	movf	_etime& (0+255),w,b
  6272  0000CC  0100               	movlb	0	; () banked
  6273  0000CE  2580               	addwf	??_isr& (0+255),w,b
  6274  0000D0  0100               	movlb	0	; () banked
  6275  0000D2  6FDA               	movwf	_operation_time& (0+255),b
  6276  0000D4  0100               	movlb	0	; () banked
  6277  0000D6  51D5               	movf	(_etime+1)& (0+255),w,b
  6278  0000D8  0100               	movlb	0	; () banked
  6279  0000DA  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6280  0000DC  0100               	movlb	0	; () banked
  6281  0000DE  6FDB               	movwf	(_operation_time+1)& (0+255),b
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;main.c: 201: bottle_count_disp = -1;
  6285  0000E0  0100               	movlb	0	; () banked
  6286  0000E2  69ED               	setf	_bottle_count_disp& (0+255),b
  6287  0000E4  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;main.c: 202: curr_state = BOTTLETIME;
  6291  0000E6  0E06               	movlw	6
  6292  0000E8  D0B7               	goto	L7
  6293  0000EA                     i2l278:
  6294                           
  6295                           ;main.c: 205: bottle_count_disp = -1;
  6296  0000EA  0100               	movlb	0	; () banked
  6297  0000EC  69ED               	setf	_bottle_count_disp& (0+255),b
  6298  0000EE  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;main.c: 206: curr_state = DATETIME;
  6302  0000F0  0E04               	movlw	4
  6303  0000F2  D0B2               	goto	L7
  6304  0000F4                     i2l279:
  6305                           
  6306                           ;main.c: 209: LATAbits.LATA2 = 0;
  6307  0000F4  9489               	bcf	3977,2,c	;volatile
  6308                           
  6309                           ;main.c: 210: INT0IE = 0;
  6310  0000F6  98F2               	bcf	intcon,4,c	;volatile
  6311                           
  6312                           ;main.c: 211: INT2IE = 0;
  6313  0000F8  98F0               	bcf	intcon3,4,c	;volatile
  6314                           
  6315                           ;main.c: 212: TMR0IE = 0;
  6316  0000FA  9AF2               	bcf	intcon,5,c	;volatile
  6317                           
  6318                           ;main.c: 213: TMR0ON = 0;
  6319  0000FC  9ED5               	bcf	4053,7,c	;volatile
  6320                           
  6321                           ;main.c: 215: read_time();
  6322  0000FE  EC0A  F013         	call	_read_time	;wreg free
  6323                           
  6324                           ;main.c: 216: end_time[1] = time[1];
  6325  000102  C0B8  F0C9         	movff	_time+1,_end_time+1
  6326                           
  6327                           ;main.c: 217: end_time[0] = time[0];
  6328  000106  C0B7  F0C8         	movff	_time,_end_time
  6329                           
  6330                           ;main.c: 218: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6331  00010A  C0DD  F063         	movff	_start_time+1,dec_to_hex@num
  6332  00010E  6A64               	clrf	dec_to_hex@num+1,c
  6333  000110  EC46  F00B         	call	_dec_to_hex	;wreg free
  6334  000114  C063  F074         	movff	?_dec_to_hex,_isr$1360
  6335  000118  C064  F075         	movff	?_dec_to_hex+1,_isr$1360+1
  6336                           
  6337                           ;main.c: 218: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6338  00011C  C074  F001         	movff	_isr$1360,i2___wmul@multiplier
  6339  000120  C075  F002         	movff	_isr$1360+1,i2___wmul@multiplier+1
  6340  000124  0E00               	movlw	0
  6341  000126  6E04               	movwf	i2___wmul@multiplicand+1,c
  6342  000128  0E3C               	movlw	60
  6343  00012A  6E03               	movwf	i2___wmul@multiplicand,c
  6344  00012C  EC6C  F015         	call	i2___wmul	;wreg free
  6345  000130  C001  F080         	movff	?i2___wmul,??_isr
  6346  000134  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6347  000138  C0DC  F063         	movff	_start_time,dec_to_hex@num
  6348  00013C  6A64               	clrf	dec_to_hex@num+1,c
  6349  00013E  EC46  F00B         	call	_dec_to_hex	;wreg free
  6350  000142  5063               	movf	?_dec_to_hex,w,c
  6351  000144  0100               	movlb	0	; () banked
  6352  000146  2580               	addwf	??_isr& (0+255),w,b
  6353  000148  0100               	movlb	0	; () banked
  6354  00014A  6FDE               	movwf	_stime& (0+255),b
  6355  00014C  5064               	movf	?_dec_to_hex+1,w,c
  6356  00014E  0100               	movlb	0	; () banked
  6357  000150  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6358  000152  0100               	movlb	0	; () banked
  6359  000154  6FDF               	movwf	(_stime+1)& (0+255),b
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;main.c: 219: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6363  000156  C0C9  F063         	movff	_end_time+1,dec_to_hex@num
  6364  00015A  6A64               	clrf	dec_to_hex@num+1,c
  6365  00015C  EC46  F00B         	call	_dec_to_hex	;wreg free
  6366  000160  C063  F074         	movff	?_dec_to_hex,_isr$1360
  6367  000164  C064  F075         	movff	?_dec_to_hex+1,_isr$1360+1
  6368                           
  6369                           ;main.c: 219: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6370  000168  C074  F001         	movff	_isr$1360,i2___wmul@multiplier
  6371  00016C  C075  F002         	movff	_isr$1360+1,i2___wmul@multiplier+1
  6372  000170  0E00               	movlw	0
  6373  000172  6E04               	movwf	i2___wmul@multiplicand+1,c
  6374  000174  0E3C               	movlw	60
  6375  000176  6E03               	movwf	i2___wmul@multiplicand,c
  6376  000178  EC6C  F015         	call	i2___wmul	;wreg free
  6377  00017C  C001  F080         	movff	?i2___wmul,??_isr
  6378  000180  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6379  000184  C0C8  F063         	movff	_end_time,dec_to_hex@num
  6380  000188  6A64               	clrf	dec_to_hex@num+1,c
  6381  00018A  EC46  F00B         	call	_dec_to_hex	;wreg free
  6382  00018E  5063               	movf	?_dec_to_hex,w,c
  6383  000190  0100               	movlb	0	; () banked
  6384  000192  2580               	addwf	??_isr& (0+255),w,b
  6385  000194  0100               	movlb	0	; () banked
  6386  000196  6FD4               	movwf	_etime& (0+255),b
  6387  000198  5064               	movf	?_dec_to_hex+1,w,c
  6388  00019A  0100               	movlb	0	; () banked
  6389  00019C  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6390  00019E  0100               	movlb	0	; () banked
  6391  0001A0  6FD5               	movwf	(_etime+1)& (0+255),b
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;main.c: 220: lcdInst(0b00000001);
  6395  0001A2  0E01               	movlw	1
  6396  0001A4  ECE6  F015         	call	i2_lcdInst
  6397                           
  6398                           ;main.c: 221: bottle_count_disp = -1;
  6399  0001A8  0100               	movlb	0	; () banked
  6400  0001AA  69ED               	setf	_bottle_count_disp& (0+255),b
  6401  0001AC  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;main.c: 222: curr_state = OPERATIONEND;
  6405  0001AE  0E03               	movlw	3
  6406  0001B0  D053               	goto	L7
  6407  0001B2                     i2l4639:
  6408                           
  6409                           ;main.c: 225: read_colorsensor();
  6410  0001B2  ECB8  F00C         	call	i2_read_colorsensor	;wreg free
  6411                           
  6412                           ;main.c: 226: lcdInst(0b10000000);
  6413  0001B6  0E80               	movlw	128
  6414  0001B8  ECE6  F015         	call	i2_lcdInst
  6415                           
  6416                           ;main.c: 227: printf("C%u R%u                ", color[0], color[1]);
  6417  0001BC  0E41               	movlw	low STR_1
  6418  0001BE  6E0D               	movwf	i2printf@f,c
  6419  0001C0  0EFE               	movlw	high STR_1
  6420  0001C2  6E0E               	movwf	i2printf@f+1,c
  6421  0001C4  C076  F00F         	movff	_color,?i2_printf+2
  6422  0001C8  C077  F010         	movff	_color+1,?i2_printf+3
  6423  0001CC  C078  F011         	movff	_color+2,?i2_printf+4
  6424  0001D0  C079  F012         	movff	_color+3,?i2_printf+5
  6425  0001D4  ECE8  F003         	call	i2_printf	;wreg free
  6426                           
  6427                           ;main.c: 228: lcdInst(0b11000000);
  6428  0001D8  0EC0               	movlw	192
  6429  0001DA  ECE6  F015         	call	i2_lcdInst
  6430                           
  6431                           ;main.c: 229: printf("G%u B%u                ", color[2], color[3]);
  6432  0001DE  0E29               	movlw	low STR_2
  6433  0001E0  6E0D               	movwf	i2printf@f,c
  6434  0001E2  0EFE               	movlw	high STR_2
  6435  0001E4  6E0E               	movwf	i2printf@f+1,c
  6436  0001E6  C07A  F00F         	movff	_color+4,?i2_printf+2
  6437  0001EA  C07B  F010         	movff	_color+5,?i2_printf+3
  6438  0001EE  C07C  F011         	movff	_color+6,?i2_printf+4
  6439  0001F2  C07D  F012         	movff	_color+7,?i2_printf+5
  6440  0001F6  ECE8  F003         	call	i2_printf	;wreg free
  6441                           
  6442                           ;main.c: 230: break;
  6443  0001FA  D064               	goto	i2l271
  6444  0001FC                     i2l4649:
  6445                           
  6446                           ;main.c: 232: read_colorsensor();
  6447  0001FC  ECB8  F00C         	call	i2_read_colorsensor	;wreg free
  6448                           
  6449                           ;main.c: 233: lcdInst(0b10000000);
  6450  000200  0E80               	movlw	128
  6451  000202  ECE6  F015         	call	i2_lcdInst
  6452                           
  6453                           ;main.c: 234: printf("C%u R%u                ", color[0], color[1]);
  6454  000206  0E41               	movlw	low STR_1
  6455  000208  6E0D               	movwf	i2printf@f,c
  6456  00020A  0EFE               	movlw	high STR_1
  6457  00020C  6E0E               	movwf	i2printf@f+1,c
  6458  00020E  C076  F00F         	movff	_color,?i2_printf+2
  6459  000212  C077  F010         	movff	_color+1,?i2_printf+3
  6460  000216  C078  F011         	movff	_color+2,?i2_printf+4
  6461  00021A  C079  F012         	movff	_color+3,?i2_printf+5
  6462  00021E  ECE8  F003         	call	i2_printf	;wreg free
  6463                           
  6464                           ;main.c: 235: lcdInst(0b11000000);
  6465  000222  0EC0               	movlw	192
  6466  000224  ECE6  F015         	call	i2_lcdInst
  6467                           
  6468                           ;main.c: 236: printf("G%u B%u                ", color[2], color[3]);
  6469  000228  0E29               	movlw	low STR_2
  6470  00022A  6E0D               	movwf	i2printf@f,c
  6471  00022C  0EFE               	movlw	high STR_2
  6472  00022E  6E0E               	movwf	i2printf@f+1,c
  6473  000230  C07A  F00F         	movff	_color+4,?i2_printf+2
  6474  000234  C07B  F010         	movff	_color+5,?i2_printf+3
  6475  000238  C07C  F011         	movff	_color+6,?i2_printf+4
  6476  00023C  C07D  F012         	movff	_color+7,?i2_printf+5
  6477  000240  ECE8  F003         	call	i2_printf	;wreg free
  6478                           
  6479                           ;main.c: 237: break;
  6480  000244  D03F               	goto	i2l271
  6481  000246                     i2l4659:
  6482                           
  6483                           ;main.c: 239: curr_state = STANDBY;
  6484  000246  0E00               	movlw	0
  6485  000248  D007               	goto	L7
  6486  00024A                     i2l283:
  6487                           
  6488                           ;main.c: 242: LATAbits.LATA2 = 0;
  6489  00024A  9489               	bcf	3977,2,c	;volatile
  6490                           
  6491                           ;main.c: 243: (INTCONbits.GIE = 0);
  6492  00024C  9EF2               	bcf	intcon,7,c	;volatile
  6493                           
  6494                           ;main.c: 244: TMR0ON = 0;
  6495  00024E  9ED5               	bcf	4053,7,c	;volatile
  6496                           
  6497                           ;main.c: 245: lcdInst(0b00000001);
  6498  000250  0E01               	movlw	1
  6499  000252  ECE6  F015         	call	i2_lcdInst
  6500                           
  6501                           ;main.c: 246: curr_state = EMERGENCYSTOP;
  6502  000256  0E01               	movlw	1
  6503  000258                     L7:
  6504  000258  0100               	movlb	0	; () banked
  6505  00025A  6FEC               	movwf	_curr_state& (0+255),b
  6506                           
  6507                           ;main.c: 247: break;
  6508  00025C  D033               	goto	i2l271
  6509  00025E                     i2l4665:
  6510                           
  6511                           ;main.c: 249: servo_rotate0(1);
  6512  00025E  0E00               	movlw	0
  6513  000260  6E02               	movwf	servo_rotate0@degree+1,c
  6514  000262  0E01               	movlw	1
  6515  000264  6E01               	movwf	servo_rotate0@degree,c
  6516  000266  EC78  F011         	call	_servo_rotate0	;wreg free
  6517                           
  6518                           ;main.c: 250: break;
  6519  00026A  D02C               	goto	i2l271
  6520  00026C                     i2l4667:
  6521                           
  6522                           ;main.c: 252: servo_rotate0(2);
  6523  00026C  0E00               	movlw	0
  6524  00026E  6E02               	movwf	servo_rotate0@degree+1,c
  6525  000270  0E02               	movlw	2
  6526  000272  6E01               	movwf	servo_rotate0@degree,c
  6527  000274  EC78  F011         	call	_servo_rotate0	;wreg free
  6528                           
  6529                           ;main.c: 254: }
  6530                           
  6531                           ;main.c: 253: break;
  6532  000278  D025               	goto	i2l271
  6533  00027A                     i2l4671:
  6534  00027A  5081               	movf	3969,w,c	;volatile
  6535                           
  6536                           ; Switch size 1, requested type "space"
  6537                           ; Number of cases is 12, Range of values is 15 to 239
  6538                           ; switch strategies available:
  6539                           ; Name         Instructions Cycles
  6540                           ; simple_byte           37    19 (average)
  6541                           ;	Chosen strategy is simple_byte
  6542  00027C  0A0F               	xorlw	15	; case 15
  6543  00027E  B4D8               	btfsc	status,2,c
  6544  000280  D6F1               	goto	i2l272
  6545  000282  0A10               	xorlw	16	; case 31
  6546  000284  B4D8               	btfsc	status,2,c
  6547  000286  D70C               	goto	i2l4605
  6548  000288  0A30               	xorlw	48	; case 47
  6549  00028A  B4D8               	btfsc	status,2,c
  6550  00028C  D714               	goto	i2l4611
  6551  00028E  0A10               	xorlw	16	; case 63
  6552  000290  B4D8               	btfsc	status,2,c
  6553  000292  D72B               	goto	i2l278
  6554  000294  0A70               	xorlw	112	; case 79
  6555  000296  B4D8               	btfsc	status,2,c
  6556  000298  D72D               	goto	i2l279
  6557  00029A  0A14               	xorlw	20	; case 91
  6558  00029C  B4D8               	btfsc	status,2,c
  6559  00029E  D7AE               	goto	i2l4649
  6560  0002A0  0A04               	xorlw	4	; case 95
  6561  0002A2  B4D8               	btfsc	status,2,c
  6562  0002A4  D786               	goto	i2l4639
  6563  0002A6  0A20               	xorlw	32	; case 127
  6564  0002A8  B4D8               	btfsc	status,2,c
  6565  0002AA  D7D9               	goto	i2l4665
  6566  0002AC  0AC0               	xorlw	192	; case 191
  6567  0002AE  B4D8               	btfsc	status,2,c
  6568  0002B0  D7DD               	goto	i2l4667
  6569  0002B2  0A70               	xorlw	112	; case 207
  6570  0002B4  B4D8               	btfsc	status,2,c
  6571  0002B6  D7C9               	goto	i2l283
  6572  0002B8  0A24               	xorlw	36	; case 235
  6573  0002BA  B4D8               	btfsc	status,2,c
  6574  0002BC  D7C4               	goto	i2l4659
  6575  0002BE  0A04               	xorlw	4	; case 239
  6576  0002C0  B4D8               	btfsc	status,2,c
  6577  0002C2  D6C7               	goto	i2l270
  6578  0002C4                     i2l271:
  6579                           
  6580                           ;main.c: 255: INT1IF = 0;
  6581  0002C4  90F0               	bcf	intcon3,0,c	;volatile
  6582                           
  6583                           ;main.c: 256: }
  6584  0002C6  D07B               	goto	i2l294
  6585  0002C8                     i2l268:
  6586                           
  6587                           ;main.c: 353: else if (TMR0IF){
  6588  0002C8  A4F2               	btfss	intcon,2,c	;volatile
  6589  0002CA  D05F               	goto	i2l4697
  6590                           
  6591                           ;main.c: 354: LATAbits.LATA2 = 0;
  6592  0002CC  9489               	bcf	3977,2,c	;volatile
  6593                           
  6594                           ;main.c: 355: TMR0ON = 0;
  6595  0002CE  9ED5               	bcf	4053,7,c	;volatile
  6596                           
  6597                           ;main.c: 356: read_time();
  6598  0002D0  EC0A  F013         	call	_read_time	;wreg free
  6599                           
  6600                           ;main.c: 357: end_time[1] = time[1];
  6601  0002D4  C0B8  F0C9         	movff	_time+1,_end_time+1
  6602                           
  6603                           ;main.c: 358: end_time[0] = time[0];
  6604  0002D8  C0B7  F0C8         	movff	_time,_end_time
  6605                           
  6606                           ;main.c: 359: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6607  0002DC  C0DD  F063         	movff	_start_time+1,dec_to_hex@num
  6608  0002E0  6A64               	clrf	dec_to_hex@num+1,c
  6609  0002E2  EC46  F00B         	call	_dec_to_hex	;wreg free
  6610  0002E6  C063  F074         	movff	?_dec_to_hex,_isr$1360
  6611  0002EA  C064  F075         	movff	?_dec_to_hex+1,_isr$1360+1
  6612                           
  6613                           ;main.c: 359: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6614  0002EE  C074  F001         	movff	_isr$1360,i2___wmul@multiplier
  6615  0002F2  C075  F002         	movff	_isr$1360+1,i2___wmul@multiplier+1
  6616  0002F6  0E00               	movlw	0
  6617  0002F8  6E04               	movwf	i2___wmul@multiplicand+1,c
  6618  0002FA  0E3C               	movlw	60
  6619  0002FC  6E03               	movwf	i2___wmul@multiplicand,c
  6620  0002FE  EC6C  F015         	call	i2___wmul	;wreg free
  6621  000302  C001  F080         	movff	?i2___wmul,??_isr
  6622  000306  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6623  00030A  C0DC  F063         	movff	_start_time,dec_to_hex@num
  6624  00030E  6A64               	clrf	dec_to_hex@num+1,c
  6625  000310  EC46  F00B         	call	_dec_to_hex	;wreg free
  6626  000314  5063               	movf	?_dec_to_hex,w,c
  6627  000316  0100               	movlb	0	; () banked
  6628  000318  2580               	addwf	??_isr& (0+255),w,b
  6629  00031A  0100               	movlb	0	; () banked
  6630  00031C  6FDE               	movwf	_stime& (0+255),b
  6631  00031E  5064               	movf	?_dec_to_hex+1,w,c
  6632  000320  0100               	movlb	0	; () banked
  6633  000322  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6634  000324  0100               	movlb	0	; () banked
  6635  000326  6FDF               	movwf	(_stime+1)& (0+255),b
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;main.c: 360: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6639  000328  C0C9  F063         	movff	_end_time+1,dec_to_hex@num
  6640  00032C  6A64               	clrf	dec_to_hex@num+1,c
  6641  00032E  EC46  F00B         	call	_dec_to_hex	;wreg free
  6642  000332  C063  F074         	movff	?_dec_to_hex,_isr$1360
  6643  000336  C064  F075         	movff	?_dec_to_hex+1,_isr$1360+1
  6644                           
  6645                           ;main.c: 360: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6646  00033A  C074  F001         	movff	_isr$1360,i2___wmul@multiplier
  6647  00033E  C075  F002         	movff	_isr$1360+1,i2___wmul@multiplier+1
  6648  000342  0E00               	movlw	0
  6649  000344  6E04               	movwf	i2___wmul@multiplicand+1,c
  6650  000346  0E3C               	movlw	60
  6651  000348  6E03               	movwf	i2___wmul@multiplicand,c
  6652  00034A  EC6C  F015         	call	i2___wmul	;wreg free
  6653  00034E  C001  F080         	movff	?i2___wmul,??_isr
  6654  000352  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6655  000356  C0C8  F063         	movff	_end_time,dec_to_hex@num
  6656  00035A  6A64               	clrf	dec_to_hex@num+1,c
  6657  00035C  EC46  F00B         	call	_dec_to_hex	;wreg free
  6658  000360  5063               	movf	?_dec_to_hex,w,c
  6659  000362  0100               	movlb	0	; () banked
  6660  000364  2580               	addwf	??_isr& (0+255),w,b
  6661  000366  0100               	movlb	0	; () banked
  6662  000368  6FD4               	movwf	_etime& (0+255),b
  6663  00036A  5064               	movf	?_dec_to_hex+1,w,c
  6664  00036C  0100               	movlb	0	; () banked
  6665  00036E  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6666  000370  0100               	movlb	0	; () banked
  6667  000372  6FD5               	movwf	(_etime+1)& (0+255),b
  6668                           
  6669                           ; BSR set to: 0
  6670                           ;main.c: 361: lcdInst(0b00000001);
  6671  000374  0E01               	movlw	1
  6672  000376  ECE6  F015         	call	i2_lcdInst
  6673                           
  6674                           ;main.c: 362: curr_state = OPERATIONEND;
  6675  00037A  0E03               	movlw	3
  6676  00037C  0100               	movlb	0	; () banked
  6677  00037E  6FEC               	movwf	_curr_state& (0+255),b
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;main.c: 363: bottle_count_disp = -1;
  6681  000380  0100               	movlb	0	; () banked
  6682  000382  69ED               	setf	_bottle_count_disp& (0+255),b
  6683  000384  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;main.c: 364: TMR0IF = 0;
  6687  000386  94F2               	bcf	intcon,2,c	;volatile
  6688                           
  6689                           ;main.c: 365: }
  6690  000388  D01A               	goto	i2l294
  6691  00038A                     i2l4697:
  6692                           
  6693                           ;main.c: 368: lcdInst(0b10000000);
  6694  00038A  0E80               	movlw	128
  6695  00038C  ECE6  F015         	call	i2_lcdInst
  6696                           
  6697                           ;main.c: 369: printf("bad interrupt");
  6698  000390  0EE6               	movlw	low STR_5
  6699  000392  6E0D               	movwf	i2printf@f,c
  6700  000394  0EFF               	movlw	high STR_5
  6701  000396  6E0E               	movwf	i2printf@f+1,c
  6702  000398  ECE8  F003         	call	i2_printf	;wreg free
  6703                           
  6704                           ;main.c: 370: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  6705  00039C  0E00               	movlw	0
  6706  00039E  6E73               	movwf	isr@i,c
  6707  0003A0                     i2l4703:
  6708  0003A0  0E63               	movlw	99
  6709  0003A2  6473               	cpfsgt	isr@i,c
  6710  0003A4  D001               	goto	i2l4707
  6711  0003A6  D7F1               	goto	i2l4697
  6712  0003A8                     i2l4707:
  6713  0003A8  0E21               	movlw	33
  6714  0003AA  0100               	movlb	0	; () banked
  6715  0003AC  6F80               	movwf	??_isr& (0+255),b
  6716  0003AE  0E76               	movlw	118
  6717  0003B0                     i2u420_47:
  6718  0003B0  2EE8               	decfsz	wreg,f,c
  6719  0003B2  D7FE               	bra	i2u420_47
  6720  0003B4  2F80               	decfsz	??_isr& (0+255),f,b
  6721  0003B6  D7FC               	bra	i2u420_47
  6722  0003B8  F000               	nop	
  6723  0003BA  2A73               	incf	isr@i,f,c
  6724  0003BC  D7F1               	goto	i2l4703
  6725  0003BE                     i2l294:
  6726  0003BE  C08F  FFF5         	movff	??_isr+15,tablat
  6727  0003C2  C08E  FFF8         	movff	??_isr+14,tblptru
  6728  0003C6  C08D  FFF7         	movff	??_isr+13,tblptrh
  6729  0003CA  C08C  FFF6         	movff	??_isr+12,tblptrl
  6730  0003CE  C08B  FFF4         	movff	??_isr+11,prodh
  6731  0003D2  C08A  FFF3         	movff	??_isr+10,prodl
  6732  0003D6  C089  FFDA         	movff	??_isr+9,fsr2h
  6733  0003DA  C088  FFD9         	movff	??_isr+8,fsr2l
  6734  0003DE  C087  FFE2         	movff	??_isr+7,fsr1h
  6735  0003E2  C086  FFE1         	movff	??_isr+6,fsr1l
  6736  0003E6  C085  FFEA         	movff	??_isr+5,fsr0h
  6737  0003EA  C084  FFE9         	movff	??_isr+4,fsr0l
  6738  0003EE  C083  FFFB         	movff	??_isr+3,pclatu
  6739  0003F2  C082  FFFA         	movff	??_isr+2,pclath
  6740  0003F6  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6741  0003F8  0011               	retfie		f
  6742  0003FA                     __end_of_isr:
  6743                           	opt stack 0
  6744                           pclatu	equ	0xFFB
  6745                           pclath	equ	0xFFA
  6746                           tblptru	equ	0xFF8
  6747                           tblptrh	equ	0xFF7
  6748                           tblptrl	equ	0xFF6
  6749                           tablat	equ	0xFF5
  6750                           prodh	equ	0xFF4
  6751                           prodl	equ	0xFF3
  6752                           intcon	equ	0xFF2
  6753                           intcon2	equ	0xFF1
  6754                           intcon3	equ	0xFF0
  6755                           postinc0	equ	0xFEE
  6756                           fsr0h	equ	0xFEA
  6757                           fsr0l	equ	0xFE9
  6758                           wreg	equ	0xFE8
  6759                           fsr1h	equ	0xFE2
  6760                           fsr1l	equ	0xFE1
  6761                           indf2	equ	0xFDF
  6762                           postinc2	equ	0xFDE
  6763                           postdec2	equ	0xFDD
  6764                           fsr2h	equ	0xFDA
  6765                           fsr2l	equ	0xFD9
  6766                           status	equ	0xFD8
  6767                           
  6768 ;; *************** function i2_read_colorsensor *****************
  6769 ;; Defined at:
  6770 ;;		line 618 in file "main.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;		None
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;  read_colorse    4   11[COMRAM] unsigned char [4]
  6775 ;;  read_colorse    4    7[COMRAM] unsigned char [4]
  6776 ;;  read_colorse    2   15[COMRAM] int 
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;Total ram usage:       14 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    2
  6793 ;; This function calls:
  6794 ;;		i2_I2C_Master_Read
  6795 ;;		i2_I2C_Master_Start
  6796 ;;		i2_I2C_Master_Stop
  6797 ;;		i2_I2C_Master_Write
  6798 ;; This function is called by:
  6799 ;;		_isr
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           	psect	text28
  6804  001970                     __ptext28:
  6805                           	opt stack 0
  6806  001970                     i2_read_colorsensor:
  6807                           	opt stack 23
  6808                           
  6809                           ;main.c: 623: unsigned char color_low[4];
  6810                           ;main.c: 624: unsigned char color_high[4];
  6811                           ;main.c: 625: int i;
  6812                           ;main.c: 628: I2C_Master_Start();
  6813                           
  6814                           ;incstack = 0
  6815  001970  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
  6816                           
  6817                           ;main.c: 629: I2C_Master_Write(0b01010010);
  6818  001974  0E00               	movlw	0
  6819  001976  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6820  001978  0E52               	movlw	82
  6821  00197A  6E02               	movwf	i2I2C_Master_Write@d,c
  6822  00197C  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  6823                           
  6824                           ;main.c: 630: I2C_Master_Write(0b10110100);
  6825  001980  0E00               	movlw	0
  6826  001982  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6827  001984  0EB4               	movlw	180
  6828  001986  6E02               	movwf	i2I2C_Master_Write@d,c
  6829  001988  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  6830                           
  6831                           ;main.c: 631: I2C_Master_Start();
  6832  00198C  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
  6833                           
  6834                           ;main.c: 632: I2C_Master_Write(0b01010011);
  6835  001990  0E00               	movlw	0
  6836  001992  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6837  001994  0E53               	movlw	83
  6838  001996  6E02               	movwf	i2I2C_Master_Write@d,c
  6839  001998  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  6840                           
  6841                           ;main.c: 633: for(i=0; i<3; i++){
  6842  00199C  0E00               	movlw	0
  6843  00199E  6E11               	movwf	i2read_colorsensor@i+1,c
  6844  0019A0  0E00               	movlw	0
  6845  0019A2  6E10               	movwf	i2read_colorsensor@i,c
  6846  0019A4                     i2l4359:
  6847  0019A4  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  6848  0019A6  D006               	goto	i2l4363
  6849  0019A8  5011               	movf	i2read_colorsensor@i+1,w,c
  6850  0019AA  E11B               	bnz	i2l4369
  6851  0019AC  0E03               	movlw	3
  6852  0019AE  5C10               	subwf	i2read_colorsensor@i,w,c
  6853  0019B0  B0D8               	btfsc	status,0,c
  6854  0019B2  D017               	goto	i2l4369
  6855  0019B4                     i2l4363:
  6856                           
  6857                           ;main.c: 634: color_low[i] = I2C_Master_Read(1);
  6858  0019B4  0E08               	movlw	low i2read_colorsensor@color_low
  6859  0019B6  2410               	addwf	i2read_colorsensor@i,w,c
  6860  0019B8  6ED9               	movwf	fsr2l,c
  6861  0019BA  0E00               	movlw	high i2read_colorsensor@color_low
  6862  0019BC  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6863  0019BE  6EDA               	movwf	fsr2h,c
  6864  0019C0  0E01               	movlw	1
  6865  0019C2  EC59  F015         	call	i2_I2C_Master_Read
  6866  0019C6  6EDF               	movwf	indf2,c
  6867                           
  6868                           ;main.c: 635: color_high[i] = I2C_Master_Read(1);
  6869  0019C8  0E0C               	movlw	low i2read_colorsensor@color_high
  6870  0019CA  2410               	addwf	i2read_colorsensor@i,w,c
  6871  0019CC  6ED9               	movwf	fsr2l,c
  6872  0019CE  0E00               	movlw	high i2read_colorsensor@color_high
  6873  0019D0  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6874  0019D2  6EDA               	movwf	fsr2h,c
  6875  0019D4  0E01               	movlw	1
  6876  0019D6  EC59  F015         	call	i2_I2C_Master_Read
  6877  0019DA  6EDF               	movwf	indf2,c
  6878  0019DC  4A10               	infsnz	i2read_colorsensor@i,f,c
  6879  0019DE  2A11               	incf	i2read_colorsensor@i+1,f,c
  6880  0019E0  D7E1               	goto	i2l4359
  6881  0019E2                     i2l4369:
  6882                           
  6883                           ;main.c: 636: }
  6884                           ;main.c: 637: color_low[3] = I2C_Master_Read(1);
  6885  0019E2  0E01               	movlw	1
  6886  0019E4  EC59  F015         	call	i2_I2C_Master_Read
  6887  0019E8  6E0B               	movwf	i2read_colorsensor@color_low+3,c
  6888                           
  6889                           ;main.c: 638: color_high[3] = I2C_Master_Read(0);
  6890  0019EA  0E00               	movlw	0
  6891  0019EC  EC59  F015         	call	i2_I2C_Master_Read
  6892  0019F0  6E0F               	movwf	i2read_colorsensor@color_high+3,c
  6893                           
  6894                           ;main.c: 639: I2C_Master_Stop();
  6895  0019F2  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
  6896                           
  6897                           ;main.c: 641: for(i=0; i<4; i++){
  6898  0019F6  0E00               	movlw	0
  6899  0019F8  6E11               	movwf	i2read_colorsensor@i+1,c
  6900  0019FA  0E00               	movlw	0
  6901  0019FC  6E10               	movwf	i2read_colorsensor@i,c
  6902  0019FE                     i2l4373:
  6903  0019FE  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  6904  001A00  D006               	goto	i2l4377
  6905  001A02  5011               	movf	i2read_colorsensor@i+1,w,c
  6906  001A04  E12B               	bnz	i2l395
  6907  001A06  0E04               	movlw	4
  6908  001A08  5C10               	subwf	i2read_colorsensor@i,w,c
  6909  001A0A  B0D8               	btfsc	status,0,c
  6910  001A0C  0012               	return	
  6911  001A0E                     i2l4377:
  6912                           
  6913                           ;main.c: 642: color[i] = (color_high[i] << 8)|(color_low[i]);
  6914  001A0E  0E0C               	movlw	low i2read_colorsensor@color_high
  6915  001A10  2410               	addwf	i2read_colorsensor@i,w,c
  6916  001A12  6ED9               	movwf	fsr2l,c
  6917  001A14  0E00               	movlw	high i2read_colorsensor@color_high
  6918  001A16  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6919  001A18  6EDA               	movwf	fsr2h,c
  6920  001A1A  50DF               	movf	indf2,w,c
  6921  001A1C  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6922  001A1E  5004               	movf	??i2_read_colorsensor,w,c
  6923  001A20  6E06               	movwf	(??i2_read_colorsensor+2)& (0+255),c
  6924  001A22  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  6925  001A24  0E08               	movlw	low i2read_colorsensor@color_low
  6926  001A26  2410               	addwf	i2read_colorsensor@i,w,c
  6927  001A28  6ED9               	movwf	fsr2l,c
  6928  001A2A  0E00               	movlw	high i2read_colorsensor@color_low
  6929  001A2C  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6930  001A2E  6EDA               	movwf	fsr2h,c
  6931  001A30  50DF               	movf	indf2,w,c
  6932  001A32  6E07               	movwf	(??i2_read_colorsensor+3)& (0+255),c
  6933  001A34  5007               	movf	??i2_read_colorsensor+3,w,c
  6934  001A36  1205               	iorwf	??i2_read_colorsensor+1,f,c
  6935  001A38  0E00               	movlw	0
  6936  001A3A  1206               	iorwf	??i2_read_colorsensor+2,f,c
  6937  001A3C  90D8               	bcf	status,0,c
  6938  001A3E  3410               	rlcf	i2read_colorsensor@i,w,c
  6939  001A40  6ED9               	movwf	fsr2l,c
  6940  001A42  3411               	rlcf	i2read_colorsensor@i+1,w,c
  6941  001A44  6EDA               	movwf	fsr2h,c
  6942  001A46  0E76               	movlw	low _color
  6943  001A48  26D9               	addwf	fsr2l,f,c
  6944  001A4A  0E00               	movlw	high _color
  6945  001A4C  22DA               	addwfc	fsr2h,f,c
  6946  001A4E  C005  FFDE         	movff	??i2_read_colorsensor+1,postinc2
  6947  001A52  C006  FFDD         	movff	??i2_read_colorsensor+2,postdec2
  6948  001A56  4A10               	infsnz	i2read_colorsensor@i,f,c
  6949  001A58  2A11               	incf	i2read_colorsensor@i+1,f,c
  6950  001A5A  D7D1               	goto	i2l4373
  6951  001A5C                     i2l395:
  6952  001A5C  0012               	return		;funcret
  6953  001A5E                     __end_ofi2_read_colorsensor:
  6954                           	opt stack 0
  6955                           pclatu	equ	0xFFB
  6956                           pclath	equ	0xFFA
  6957                           tblptru	equ	0xFF8
  6958                           tblptrh	equ	0xFF7
  6959                           tblptrl	equ	0xFF6
  6960                           tablat	equ	0xFF5
  6961                           prodh	equ	0xFF4
  6962                           prodl	equ	0xFF3
  6963                           intcon	equ	0xFF2
  6964                           intcon2	equ	0xFF1
  6965                           intcon3	equ	0xFF0
  6966                           postinc0	equ	0xFEE
  6967                           fsr0h	equ	0xFEA
  6968                           fsr0l	equ	0xFE9
  6969                           wreg	equ	0xFE8
  6970                           fsr1h	equ	0xFE2
  6971                           fsr1l	equ	0xFE1
  6972                           indf2	equ	0xFDF
  6973                           postinc2	equ	0xFDE
  6974                           postdec2	equ	0xFDD
  6975                           fsr2h	equ	0xFDA
  6976                           fsr2l	equ	0xFD9
  6977                           status	equ	0xFD8
  6978                           
  6979 ;; *************** function i2_printf *****************
  6980 ;; Defined at:
  6981 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6984 ;;		 -> STR_28(15), STR_27(16), STR_26(28), STR_25(25), 
  6985 ;;		 -> STR_24(24), STR_23(23), STR_22(18), STR_21(23), 
  6986 ;;		 -> STR_20(10), STR_19(18), STR_18(18), STR_17(18), 
  6987 ;;		 -> STR_16(18), STR_15(18), STR_14(18), STR_13(18), 
  6988 ;;		 -> STR_12(18), STR_11(17), STR_10(17), STR_9(23), 
  6989 ;;		 -> STR_8(23), STR_7(20), STR_6(17), STR_5(14), 
  6990 ;;		 -> STR_4(24), STR_3(24), STR_2(24), STR_1(24), 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  printf          4    0        struct .
  6993 ;;  printf          3    0        PTR const unsigned char 
  6994 ;;  printf          2   29[COMRAM] int 
  6995 ;;  printf          2   26[COMRAM] unsigned int 
  6996 ;;  printf          2   23[COMRAM] PTR void [1]
  6997 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6998 ;;  printf          2    0        unsigned int 
  6999 ;;  printf          1   31[COMRAM] char 
  7000 ;;  printf          1   28[COMRAM] unsigned char 
  7001 ;;  printf          1   25[COMRAM] char 
  7002 ;;  printf          1   22[COMRAM] unsigned char 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  2   12[COMRAM] int 
  7005 ;; Registers used:
  7006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7012 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;Total ram usage:       20 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    2
  7019 ;; This function calls:
  7020 ;;		i2___lwdiv
  7021 ;;		i2___lwmod
  7022 ;;		i2___wmul
  7023 ;;		i2_isdigit
  7024 ;;		i2_putch
  7025 ;; This function is called by:
  7026 ;;		_isr
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           	psect	text29
  7031  0007D0                     __ptext29:
  7032                           	opt stack 0
  7033  0007D0                     i2_printf:
  7034                           	opt stack 23
  7035                           
  7036                           ;doprnt.c: 466: va_list ap;
  7037                           ;doprnt.c: 499: signed char c;
  7038                           ;doprnt.c: 501: int width;
  7039                           ;doprnt.c: 506: signed char prec;
  7040                           ;doprnt.c: 508: unsigned char flag;
  7041                           ;doprnt.c: 523: union {
  7042                           ;doprnt.c: 524: unsigned long vd;
  7043                           ;doprnt.c: 525: double integ;
  7044                           ;doprnt.c: 526: } tmpval;
  7045                           ;doprnt.c: 528: unsigned int val;
  7046                           ;doprnt.c: 529: unsigned len;
  7047                           ;doprnt.c: 530: const char * cp;
  7048                           ;doprnt.c: 533: *ap = __va_start();
  7049                           
  7050                           ;incstack = 0
  7051  0007D0  0E0F               	movlw	low (?i2_printf+2)
  7052  0007D2  6E18               	movwf	i2printf@ap,c
  7053  0007D4  0E00               	movlw	high (?i2_printf+2)
  7054  0007D6  6E19               	movwf	i2printf@ap+1,c
  7055                           
  7056                           ;doprnt.c: 536: while(c = *f++) {
  7057  0007D8  D184               	goto	i2l4515
  7058  0007DA                     i2l4385:
  7059                           
  7060                           ;doprnt.c: 538: if(c != '%')
  7061  0007DA  0E25               	movlw	37
  7062  0007DC  1820               	xorwf	i2printf@c,w,c
  7063  0007DE  B4D8               	btfsc	status,2,c
  7064  0007E0  D004               	goto	i2l4389
  7065                           
  7066                           ;doprnt.c: 540: {
  7067                           ;doprnt.c: 541: (putch(c) );
  7068  0007E2  5020               	movf	i2printf@c,w,c
  7069  0007E4  ECE0  F015         	call	i2_putch
  7070                           
  7071                           ;doprnt.c: 542: continue;
  7072  0007E8  D17C               	goto	i2l4515
  7073  0007EA                     i2l4389:
  7074                           
  7075                           ;doprnt.c: 543: }
  7076                           ;doprnt.c: 546: width = 0;
  7077  0007EA  0E00               	movlw	0
  7078  0007EC  6E1F               	movwf	i2printf@width+1,c
  7079  0007EE  0E00               	movlw	0
  7080  0007F0  6E1E               	movwf	i2printf@width,c
  7081                           
  7082                           ;doprnt.c: 548: flag = 0;
  7083  0007F2  0E00               	movlw	0
  7084  0007F4  6E1D               	movwf	i2printf@flag,c
  7085                           
  7086                           ;doprnt.c: 551: switch(*f) {
  7087                           
  7088                           ;doprnt.c: 550: for(;;) {
  7089  0007F6  D003               	goto	i2l4395
  7090  0007F8                     i2l4391:
  7091                           
  7092                           ;doprnt.c: 580: flag |= 0x04;
  7093  0007F8  841D               	bsf	i2printf@flag,2,c
  7094                           
  7095                           ;doprnt.c: 581: f++;
  7096  0007FA  4A0D               	infsnz	i2printf@f,f,c
  7097  0007FC  2A0E               	incf	i2printf@f+1,f,c
  7098  0007FE                     i2l4395:
  7099  0007FE  C00D  FFF6         	movff	i2printf@f,tblptrl
  7100  000802  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7101  000806                     	if	0	;tblptru may be non-zero
  7102  000806                     	endif
  7103  000806                     	if	0	;tblptru may be non-zero
  7104  000806                     	endif
  7105  000806  0008               	tblrd		*
  7106  000808  50F5               	movf	tablat,w,c
  7107                           
  7108                           ; Switch size 1, requested type "space"
  7109                           ; Number of cases is 1, Range of values is 48 to 48
  7110                           ; switch strategies available:
  7111                           ; Name         Instructions Cycles
  7112                           ; simple_byte            4     3 (average)
  7113                           ;	Chosen strategy is simple_byte
  7114  00080A  0A30               	xorlw	48	; case 48
  7115  00080C  B4D8               	btfsc	status,2,c
  7116  00080E  D7F4               	goto	i2l4391
  7117                           
  7118                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7119                           
  7120                           ;doprnt.c: 586: }
  7121                           
  7122                           ;doprnt.c: 585: break;
  7123  000810  C00D  FFF6         	movff	i2printf@f,tblptrl
  7124  000814  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7125  000818                     	if	0	;tblptru may be non-zero
  7126  000818                     	endif
  7127  000818                     	if	0	;tblptru may be non-zero
  7128  000818                     	endif
  7129  000818  0008               	tblrd		*
  7130  00081A  50F5               	movf	tablat,w,c
  7131  00081C  ECA2  F015         	call	i2_isdigit
  7132  000820  A0D8               	btfss	status,0,c
  7133  000822  D038               	goto	i2l4415
  7134                           
  7135                           ;doprnt.c: 598: width = 0;
  7136  000824  0E00               	movlw	0
  7137  000826  6E1F               	movwf	i2printf@width+1,c
  7138  000828  0E00               	movlw	0
  7139  00082A  6E1E               	movwf	i2printf@width,c
  7140  00082C                     i2l4401:
  7141                           
  7142                           ;doprnt.c: 600: width *= 10;
  7143  00082C  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  7144  000830  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7145  000834  0E00               	movlw	0
  7146  000836  6E04               	movwf	i2___wmul@multiplicand+1,c
  7147  000838  0E0A               	movlw	10
  7148  00083A  6E03               	movwf	i2___wmul@multiplicand,c
  7149  00083C  EC6C  F015         	call	i2___wmul	;wreg free
  7150  000840  C001  F01E         	movff	?i2___wmul,i2printf@width
  7151  000844  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  7152                           
  7153                           ;doprnt.c: 601: width += *f++ - '0';
  7154  000848  0ED0               	movlw	208
  7155  00084A  6E13               	movwf	??i2_printf& (0+255),c
  7156  00084C  0EFF               	movlw	255
  7157  00084E  6E14               	movwf	(??i2_printf+1)& (0+255),c
  7158  000850  C00D  FFF6         	movff	i2printf@f,tblptrl
  7159  000854  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7160  000858                     	if	0	;tblptru may be non-zero
  7161  000858                     	endif
  7162  000858                     	if	0	;tblptru may be non-zero
  7163  000858                     	endif
  7164  000858  0008               	tblrd		*
  7165  00085A  50F5               	movf	tablat,w,c
  7166  00085C  6E15               	movwf	(??i2_printf+2)& (0+255),c
  7167  00085E  6A16               	clrf	(??i2_printf+3)& (0+255),c
  7168  000860  5013               	movf	??i2_printf,w,c
  7169  000862  2615               	addwf	??i2_printf+2,f,c
  7170  000864  5014               	movf	??i2_printf+1,w,c
  7171  000866  2216               	addwfc	??i2_printf+3,f,c
  7172  000868  5015               	movf	??i2_printf+2,w,c
  7173  00086A  261E               	addwf	i2printf@width,f,c
  7174  00086C  5016               	movf	??i2_printf+3,w,c
  7175  00086E  221F               	addwfc	i2printf@width+1,f,c
  7176  000870  4A0D               	infsnz	i2printf@f,f,c
  7177  000872  2A0E               	incf	i2printf@f+1,f,c
  7178                           
  7179                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7180  000874  C00D  FFF6         	movff	i2printf@f,tblptrl
  7181  000878  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7182  00087C                     	if	0	;tblptru may be non-zero
  7183  00087C                     	endif
  7184  00087C                     	if	0	;tblptru may be non-zero
  7185  00087C                     	endif
  7186  00087C  0008               	tblrd		*
  7187  00087E  50F5               	movf	tablat,w,c
  7188  000880  ECA2  F015         	call	i2_isdigit
  7189  000884  A0D8               	btfss	status,0,c
  7190  000886  D006               	goto	i2l4415
  7191  000888  D7D1               	goto	i2l4401
  7192  00088A                     i2l4409:
  7193                           
  7194                           ;doprnt.c: 721: flag |= 0x80;
  7195  00088A  8E1D               	bsf	i2printf@flag,7,c
  7196                           
  7197                           ;doprnt.c: 723: break;
  7198  00088C  D01D               	goto	i2l4417
  7199  00088E                     i2l4411:
  7200                           
  7201                           ;doprnt.c: 818: flag |= 0xC0;
  7202  00088E  0EC0               	movlw	192
  7203  000890  121D               	iorwf	i2printf@flag,f,c
  7204                           
  7205                           ;doprnt.c: 822: }
  7206                           
  7207                           ;doprnt.c: 819: break;
  7208  000892  D01A               	goto	i2l4417
  7209  000894                     i2l4415:
  7210  000894  C00D  FFF6         	movff	i2printf@f,tblptrl
  7211  000898  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7212  00089C  4A0D               	infsnz	i2printf@f,f,c
  7213  00089E  2A0E               	incf	i2printf@f+1,f,c
  7214  0008A0                     	if	0	;tblptru may be non-zero
  7215  0008A0                     	endif
  7216  0008A0                     	if	0	;tblptru may be non-zero
  7217  0008A0                     	endif
  7218  0008A0  0008               	tblrd		*
  7219  0008A2  CFF5 F020          	movff	tablat,i2printf@c
  7220  0008A6  5020               	movf	i2printf@c,w,c
  7221                           
  7222                           ; Switch size 1, requested type "space"
  7223                           ; Number of cases is 5, Range of values is 0 to 120
  7224                           ; switch strategies available:
  7225                           ; Name         Instructions Cycles
  7226                           ; simple_byte           16     9 (average)
  7227                           ;	Chosen strategy is simple_byte
  7228  0008A8  0A00               	xorlw	0	; case 0
  7229  0008AA  B4D8               	btfsc	status,2,c
  7230  0008AC  0012               	return	
  7231  0008AE  0A64               	xorlw	100	; case 100
  7232  0008B0  B4D8               	btfsc	status,2,c
  7233  0008B2  D00A               	goto	i2l4417
  7234  0008B4  0A0D               	xorlw	13	; case 105
  7235  0008B6  B4D8               	btfsc	status,2,c
  7236  0008B8  D007               	goto	i2l4417
  7237  0008BA  0A1C               	xorlw	28	; case 117
  7238  0008BC  B4D8               	btfsc	status,2,c
  7239  0008BE  D7E7               	goto	i2l4411
  7240  0008C0  0A0D               	xorlw	13	; case 120
  7241  0008C2  B4D8               	btfsc	status,2,c
  7242  0008C4  D7E2               	goto	i2l4409
  7243  0008C6  D10D               	goto	i2l4515
  7244  0008C8                     i2l4417:
  7245                           
  7246                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7247  0008C8  C01D  F013         	movff	i2printf@flag,??i2_printf
  7248  0008CC  0EC0               	movlw	192
  7249  0008CE  1613               	andwf	??i2_printf,f,c
  7250  0008D0  A4D8               	btfss	status,2,c
  7251  0008D2  D015               	goto	i2l4429
  7252                           
  7253                           ;doprnt.c: 1253: {
  7254                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7255  0008D4  C018  FFD9         	movff	i2printf@ap,fsr2l
  7256  0008D8  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7257  0008DC  CFDE F01B          	movff	postinc2,i2printf@val
  7258  0008E0  CFDD F01C          	movff	postdec2,i2printf@val+1
  7259  0008E4  0E02               	movlw	2
  7260  0008E6  2618               	addwf	i2printf@ap,f,c
  7261  0008E8  0E00               	movlw	0
  7262  0008EA  2219               	addwfc	i2printf@ap+1,f,c
  7263                           
  7264                           ;doprnt.c: 1261: if((int)val < 0) {
  7265  0008EC  AE1C               	btfss	i2printf@val+1,7,c
  7266  0008EE  D044               	goto	i2l4463
  7267                           
  7268                           ;doprnt.c: 1262: flag |= 0x03;
  7269  0008F0  0E03               	movlw	3
  7270  0008F2  121D               	iorwf	i2printf@flag,f,c
  7271                           
  7272                           ;doprnt.c: 1263: val = -val;
  7273  0008F4  6C1B               	negf	i2printf@val,c
  7274  0008F6  1E1C               	comf	i2printf@val+1,f,c
  7275  0008F8  B0D8               	btfsc	status,0,c
  7276  0008FA  2A1C               	incf	i2printf@val+1,f,c
  7277                           
  7278                           ;doprnt.c: 1264: }
  7279                           ;doprnt.c: 1266: }
  7280  0008FC  D03D               	goto	i2l4463
  7281  0008FE                     i2l4429:
  7282                           
  7283                           ;doprnt.c: 1268: else
  7284                           ;doprnt.c: 1273: {
  7285                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7286  0008FE  C018  FFD9         	movff	i2printf@ap,fsr2l
  7287  000902  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7288  000906  CFDE F01B          	movff	postinc2,i2printf@val
  7289  00090A  CFDD F01C          	movff	postdec2,i2printf@val+1
  7290  00090E  0E02               	movlw	2
  7291  000910  2618               	addwf	i2printf@ap,f,c
  7292  000912  0E00               	movlw	0
  7293  000914  2219               	addwfc	i2printf@ap+1,f,c
  7294                           
  7295                           ;doprnt.c: 1287: }
  7296                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7297  000916  D030               	goto	i2l4463
  7298  000918                     i2l4433:
  7299                           
  7300                           ;doprnt.c: 1302: case 0xC0:
  7301                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7302  000918  0E01               	movlw	1
  7303  00091A  6E20               	movwf	i2printf@c,c
  7304  00091C                     i2l4435:
  7305  00091C  0E05               	movlw	5
  7306  00091E  1820               	xorwf	i2printf@c,w,c
  7307  000920  B4D8               	btfsc	status,2,c
  7308  000922  D035               	goto	i2l4465
  7309                           
  7310                           ;doprnt.c: 1306: if(val < dpowers[c])
  7311  000924  5020               	movf	i2printf@c,w,c
  7312  000926  0D02               	mullw	2
  7313  000928  0EA2               	movlw	low _dpowers
  7314  00092A  24F3               	addwf	prodl,w,c
  7315  00092C  6EF6               	movwf	tblptrl,c
  7316  00092E  0EFD               	movlw	high _dpowers
  7317  000930  20F4               	addwfc	prodh,w,c
  7318  000932  6EF7               	movwf	tblptrh,c
  7319  000934                     	if	0	;There are less than 3 active tblptr bytes
  7320  000934                     	endif
  7321  000934  0009               	tblrd		*+
  7322  000936  50F5               	movf	tablat,w,c
  7323  000938  5C1B               	subwf	i2printf@val,w,c
  7324  00093A  0009               	tblrd		*+
  7325  00093C  50F5               	movf	tablat,w,c
  7326  00093E  581C               	subwfb	i2printf@val+1,w,c
  7327  000940  A0D8               	btfss	status,0,c
  7328  000942  D025               	goto	i2l4465
  7329                           
  7330                           ;doprnt.c: 1307: break;
  7331  000944  2A20               	incf	i2printf@c,f,c
  7332  000946  D7EA               	goto	i2l4435
  7333  000948                     i2l4447:
  7334                           
  7335                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7336  000948  0E01               	movlw	1
  7337  00094A  6E20               	movwf	i2printf@c,c
  7338  00094C                     i2l4449:
  7339  00094C  0E04               	movlw	4
  7340  00094E  1820               	xorwf	i2printf@c,w,c
  7341  000950  B4D8               	btfsc	status,2,c
  7342  000952  D01D               	goto	i2l4465
  7343                           
  7344                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7345  000954  5020               	movf	i2printf@c,w,c
  7346  000956  0D02               	mullw	2
  7347  000958  0EAC               	movlw	low _hexpowers
  7348  00095A  24F3               	addwf	prodl,w,c
  7349  00095C  6EF6               	movwf	tblptrl,c
  7350  00095E  0EFD               	movlw	high _hexpowers
  7351  000960  20F4               	addwfc	prodh,w,c
  7352  000962  6EF7               	movwf	tblptrh,c
  7353  000964                     	if	0	;There are less than 3 active tblptr bytes
  7354  000964                     	endif
  7355  000964  0009               	tblrd		*+
  7356  000966  50F5               	movf	tablat,w,c
  7357  000968  5C1B               	subwf	i2printf@val,w,c
  7358  00096A  0009               	tblrd		*+
  7359  00096C  50F5               	movf	tablat,w,c
  7360  00096E  581C               	subwfb	i2printf@val+1,w,c
  7361  000970  A0D8               	btfss	status,0,c
  7362  000972  D00D               	goto	i2l4465
  7363                           
  7364                           ;doprnt.c: 1318: break;
  7365  000974  2A20               	incf	i2printf@c,f,c
  7366  000976  D7EA               	goto	i2l4449
  7367  000978                     i2l4463:
  7368  000978  501D               	movf	i2printf@flag,w,c
  7369  00097A  0BC0               	andlw	192
  7370                           
  7371                           ; Switch size 1, requested type "space"
  7372                           ; Number of cases is 3, Range of values is 0 to 192
  7373                           ; switch strategies available:
  7374                           ; Name         Instructions Cycles
  7375                           ; simple_byte           10     6 (average)
  7376                           ;	Chosen strategy is simple_byte
  7377  00097C  0A00               	xorlw	0	; case 0
  7378  00097E  B4D8               	btfsc	status,2,c
  7379  000980  D7CB               	goto	i2l4433
  7380  000982  0A80               	xorlw	128	; case 128
  7381  000984  B4D8               	btfsc	status,2,c
  7382  000986  D7E0               	goto	i2l4447
  7383  000988  0A40               	xorlw	64	; case 192
  7384  00098A  B4D8               	btfsc	status,2,c
  7385  00098C  D7C5               	goto	i2l4433
  7386  00098E                     i2l4465:
  7387                           
  7388                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7389  00098E  501E               	movf	i2printf@width,w,c
  7390  000990  101F               	iorwf	i2printf@width+1,w,c
  7391  000992  B4D8               	btfsc	status,2,c
  7392  000994  D009               	goto	i2l4471
  7393  000996  C01D  F013         	movff	i2printf@flag,??i2_printf
  7394  00099A  0E03               	movlw	3
  7395  00099C  1613               	andwf	??i2_printf,f,c
  7396  00099E  B4D8               	btfsc	status,2,c
  7397  0009A0  D003               	goto	i2l4471
  7398                           
  7399                           ;doprnt.c: 1346: width--;
  7400  0009A2  061E               	decf	i2printf@width,f,c
  7401  0009A4  A0D8               	btfss	status,0,c
  7402  0009A6  061F               	decf	i2printf@width+1,f,c
  7403  0009A8                     i2l4471:
  7404                           
  7405                           ;doprnt.c: 1381: if(width > c)
  7406  0009A8  0E80               	movlw	128
  7407  0009AA  BE20               	btfsc	i2printf@c,7,c
  7408  0009AC  0E7F               	movlw	127
  7409  0009AE  6E13               	movwf	??i2_printf& (0+255),c
  7410  0009B0  501E               	movf	i2printf@width,w,c
  7411  0009B2  5C20               	subwf	i2printf@c,w,c
  7412  0009B4  501F               	movf	i2printf@width+1,w,c
  7413  0009B6  0A80               	xorlw	128
  7414  0009B8  5813               	subwfb	??i2_printf& (0+255),w,c
  7415  0009BA  B0D8               	btfsc	status,0,c
  7416  0009BC  D007               	goto	i2l4475
  7417                           
  7418                           ;doprnt.c: 1382: width -= c;
  7419  0009BE  5020               	movf	i2printf@c,w,c
  7420  0009C0  5E1E               	subwf	i2printf@width,f,c
  7421  0009C2  0E00               	movlw	0
  7422  0009C4  BE20               	btfsc	i2printf@c,7,c
  7423  0009C6  0EFF               	movlw	255
  7424  0009C8  5A1F               	subwfb	i2printf@width+1,f,c
  7425  0009CA  D004               	goto	i2l4477
  7426  0009CC                     i2l4475:
  7427                           
  7428                           ;doprnt.c: 1383: else
  7429                           ;doprnt.c: 1384: width = 0;
  7430  0009CC  0E00               	movlw	0
  7431  0009CE  6E1F               	movwf	i2printf@width+1,c
  7432  0009D0  0E00               	movlw	0
  7433  0009D2  6E1E               	movwf	i2printf@width,c
  7434  0009D4                     i2l4477:
  7435                           
  7436                           ;doprnt.c: 1387: if(flag & 0x04) {
  7437  0009D4  A41D               	btfss	i2printf@flag,2,c
  7438  0009D6  D014               	goto	i2l4489
  7439                           
  7440                           ;doprnt.c: 1392: if(flag & 0x03)
  7441  0009D8  C01D  F013         	movff	i2printf@flag,??i2_printf
  7442  0009DC  0E03               	movlw	3
  7443  0009DE  1613               	andwf	??i2_printf,f,c
  7444  0009E0  B4D8               	btfsc	status,2,c
  7445  0009E2  D003               	goto	i2l4483
  7446                           
  7447                           ;doprnt.c: 1393: (putch('-') );
  7448  0009E4  0E2D               	movlw	45
  7449  0009E6  ECE0  F015         	call	i2_putch
  7450  0009EA                     i2l4483:
  7451                           
  7452                           ;doprnt.c: 1415: if(width)
  7453  0009EA  501E               	movf	i2printf@width,w,c
  7454  0009EC  101F               	iorwf	i2printf@width+1,w,c
  7455  0009EE  B4D8               	btfsc	status,2,c
  7456  0009F0  D01E               	goto	i2l4499
  7457                           
  7458                           ;doprnt.c: 1417: (putch('0') );
  7459                           
  7460                           ;doprnt.c: 1416: do
  7461  0009F2  0E30               	movlw	48
  7462  0009F4  ECE0  F015         	call	i2_putch
  7463                           
  7464                           ;doprnt.c: 1418: while(--width);
  7465  0009F8  061E               	decf	i2printf@width,f,c
  7466  0009FA  A0D8               	btfss	status,0,c
  7467  0009FC  061F               	decf	i2printf@width+1,f,c
  7468  0009FE  D7F5               	goto	i2l4483
  7469  000A00                     i2l4489:
  7470                           
  7471                           ;doprnt.c: 1422: {
  7472                           ;doprnt.c: 1424: if(width
  7473                           ;doprnt.c: 1428: )
  7474  000A00  501E               	movf	i2printf@width,w,c
  7475  000A02  101F               	iorwf	i2printf@width+1,w,c
  7476  000A04  B4D8               	btfsc	status,2,c
  7477  000A06  D00A               	goto	i2l4495
  7478  000A08                     i2l4491:
  7479                           
  7480                           ;doprnt.c: 1430: (putch(' ') );
  7481  000A08  0E20               	movlw	32
  7482  000A0A  ECE0  F015         	call	i2_putch
  7483                           
  7484                           ;doprnt.c: 1431: while(--width);
  7485  000A0E  061E               	decf	i2printf@width,f,c
  7486  000A10  A0D8               	btfss	status,0,c
  7487  000A12  061F               	decf	i2printf@width+1,f,c
  7488  000A14  501E               	movf	i2printf@width,w,c
  7489  000A16  101F               	iorwf	i2printf@width+1,w,c
  7490  000A18  A4D8               	btfss	status,2,c
  7491  000A1A  D7F6               	goto	i2l4491
  7492  000A1C                     i2l4495:
  7493                           
  7494                           ;doprnt.c: 1438: if(flag & 0x03)
  7495  000A1C  C01D  F013         	movff	i2printf@flag,??i2_printf
  7496  000A20  0E03               	movlw	3
  7497  000A22  1613               	andwf	??i2_printf,f,c
  7498  000A24  B4D8               	btfsc	status,2,c
  7499  000A26  D003               	goto	i2l4499
  7500                           
  7501                           ;doprnt.c: 1439: (putch('-') );
  7502  000A28  0E2D               	movlw	45
  7503  000A2A  ECE0  F015         	call	i2_putch
  7504  000A2E                     i2l4499:
  7505                           
  7506                           ;doprnt.c: 1469: }
  7507                           ;doprnt.c: 1472: prec = c;
  7508  000A2E  C020  F01A         	movff	i2printf@c,i2printf@prec
  7509                           
  7510                           ;doprnt.c: 1474: while(prec--) {
  7511  000A32  D053               	goto	i2l4513
  7512  000A34                     i2l4501:
  7513                           
  7514                           ;doprnt.c: 1486: case 0xC0:
  7515                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7516  000A34  501A               	movf	i2printf@prec,w,c
  7517  000A36  0D02               	mullw	2
  7518  000A38  0EA2               	movlw	low _dpowers
  7519  000A3A  24F3               	addwf	prodl,w,c
  7520  000A3C  6EF6               	movwf	tblptrl,c
  7521  000A3E  0EFD               	movlw	high _dpowers
  7522  000A40  20F4               	addwfc	prodh,w,c
  7523  000A42  6EF7               	movwf	tblptrh,c
  7524  000A44                     	if	0	;There are less than 3 active tblptr bytes
  7525  000A44                     	endif
  7526  000A44  0009               	tblrd		*+
  7527  000A46  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7528  000A4A  000A               	tblrd		*-
  7529  000A4C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7530  000A50  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7531  000A54  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7532  000A58  ECFD  F013         	call	i2___lwdiv	;wreg free
  7533  000A5C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7534  000A60  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7535  000A64  0E00               	movlw	0
  7536  000A66  6E0B               	movwf	i2___lwmod@divisor+1,c
  7537  000A68  0E0A               	movlw	10
  7538  000A6A  6E0A               	movwf	i2___lwmod@divisor,c
  7539  000A6C  EC9A  F014         	call	i2___lwmod	;wreg free
  7540  000A70  5008               	movf	?i2___lwmod,w,c
  7541  000A72  0F30               	addlw	48
  7542  000A74  6E20               	movwf	i2printf@c,c
  7543                           
  7544                           ;doprnt.c: 1491: break;
  7545  000A76  D02E               	goto	i2l4511
  7546  000A78                     i2l4503:
  7547                           
  7548                           ;doprnt.c: 1499: {
  7549                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7550  000A78  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7551  000A7C  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7552  000A80  501A               	movf	i2printf@prec,w,c
  7553  000A82  0D02               	mullw	2
  7554  000A84  0EAC               	movlw	low _hexpowers
  7555  000A86  24F3               	addwf	prodl,w,c
  7556  000A88  6EF6               	movwf	tblptrl,c
  7557  000A8A  0EFD               	movlw	high _hexpowers
  7558  000A8C  20F4               	addwfc	prodh,w,c
  7559  000A8E  6EF7               	movwf	tblptrh,c
  7560  000A90                     	if	0	;There are less than 3 active tblptr bytes
  7561  000A90                     	endif
  7562  000A90  0009               	tblrd		*+
  7563  000A92  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7564  000A96  000A               	tblrd		*-
  7565  000A98  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7566  000A9C  ECFD  F013         	call	i2___lwdiv	;wreg free
  7567  000AA0  5001               	movf	?i2___lwdiv,w,c
  7568  000AA2  0B0F               	andlw	15
  7569  000AA4  6E17               	movwf	i2printf@idx,c
  7570                           
  7571                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7572  000AA6  5017               	movf	i2printf@idx,w,c
  7573  000AA8  0D01               	mullw	1
  7574  000AAA  0E83               	movlw	low STR_29
  7575  000AAC  24F3               	addwf	prodl,w,c
  7576  000AAE  6EF6               	movwf	tblptrl,c
  7577  000AB0  0EFF               	movlw	high STR_29
  7578  000AB2  20F4               	addwfc	prodh,w,c
  7579  000AB4  6EF7               	movwf	tblptrh,c
  7580  000AB6                     	if	0	;There are less than 3 active tblptr bytes
  7581  000AB6                     	endif
  7582  000AB6  0008               	tblrd		*
  7583  000AB8  CFF5 F020          	movff	tablat,i2printf@c
  7584                           
  7585                           ;doprnt.c: 1523: }
  7586                           
  7587                           ;doprnt.c: 1508: }
  7588                           ;doprnt.c: 1510: break;
  7589  000ABC  D00B               	goto	i2l4511
  7590  000ABE                     i2l4509:
  7591  000ABE  501D               	movf	i2printf@flag,w,c
  7592  000AC0  0BC0               	andlw	192
  7593                           
  7594                           ; Switch size 1, requested type "space"
  7595                           ; Number of cases is 3, Range of values is 0 to 192
  7596                           ; switch strategies available:
  7597                           ; Name         Instructions Cycles
  7598                           ; simple_byte           10     6 (average)
  7599                           ;	Chosen strategy is simple_byte
  7600  000AC2  0A00               	xorlw	0	; case 0
  7601  000AC4  B4D8               	btfsc	status,2,c
  7602  000AC6  D7B6               	goto	i2l4501
  7603  000AC8  0A80               	xorlw	128	; case 128
  7604  000ACA  B4D8               	btfsc	status,2,c
  7605  000ACC  D7D5               	goto	i2l4503
  7606  000ACE  0A40               	xorlw	64	; case 192
  7607  000AD0  B4D8               	btfsc	status,2,c
  7608  000AD2  D7B0               	goto	i2l4501
  7609  000AD4                     i2l4511:
  7610                           
  7611                           ;doprnt.c: 1524: (putch(c) );
  7612  000AD4  5020               	movf	i2printf@c,w,c
  7613  000AD6  ECE0  F015         	call	i2_putch
  7614  000ADA                     i2l4513:
  7615  000ADA  061A               	decf	i2printf@prec,f,c
  7616  000ADC  281A               	incf	i2printf@prec,w,c
  7617  000ADE  A4D8               	btfss	status,2,c
  7618  000AE0  D7EE               	goto	i2l4509
  7619  000AE2                     i2l4515:
  7620  000AE2  C00D  FFF6         	movff	i2printf@f,tblptrl
  7621  000AE6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7622  000AEA  4A0D               	infsnz	i2printf@f,f,c
  7623  000AEC  2A0E               	incf	i2printf@f+1,f,c
  7624  000AEE                     	if	0	;tblptru may be non-zero
  7625  000AEE                     	endif
  7626  000AEE                     	if	0	;tblptru may be non-zero
  7627  000AEE                     	endif
  7628  000AEE  0008               	tblrd		*
  7629  000AF0  CFF5 F020          	movff	tablat,i2printf@c
  7630  000AF4  5020               	movf	i2printf@c,w,c
  7631  000AF6  B4D8               	btfsc	status,2,c
  7632  000AF8  0012               	return	
  7633  000AFA  D66F               	goto	i2l4385
  7634  000AFC                     __end_ofi2_printf:
  7635                           	opt stack 0
  7636                           pclatu	equ	0xFFB
  7637                           pclath	equ	0xFFA
  7638                           tblptru	equ	0xFF8
  7639                           tblptrh	equ	0xFF7
  7640                           tblptrl	equ	0xFF6
  7641                           tablat	equ	0xFF5
  7642                           prodh	equ	0xFF4
  7643                           prodl	equ	0xFF3
  7644                           intcon	equ	0xFF2
  7645                           intcon2	equ	0xFF1
  7646                           intcon3	equ	0xFF0
  7647                           postinc0	equ	0xFEE
  7648                           fsr0h	equ	0xFEA
  7649                           fsr0l	equ	0xFE9
  7650                           wreg	equ	0xFE8
  7651                           fsr1h	equ	0xFE2
  7652                           fsr1l	equ	0xFE1
  7653                           indf2	equ	0xFDF
  7654                           postinc2	equ	0xFDE
  7655                           postdec2	equ	0xFDD
  7656                           fsr2h	equ	0xFDA
  7657                           fsr2l	equ	0xFD9
  7658                           status	equ	0xFD8
  7659                           
  7660 ;; *************** function i2_putch *****************
  7661 ;; Defined at:
  7662 ;;		line 31 in file "lcd.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;  data            1    wreg     unsigned char 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  data            1    2[COMRAM] unsigned char 
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      void 
  7669 ;; Registers used:
  7670 ;;		wreg, status,2, status,0, cstack
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7679 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;Total ram usage:        1 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    1
  7683 ;; This function calls:
  7684 ;;		i2_lcdNibble
  7685 ;; This function is called by:
  7686 ;;		i2_printf
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text30
  7691  002BC0                     __ptext30:
  7692                           	opt stack 0
  7693  002BC0                     i2_putch:
  7694                           	opt stack 23
  7695                           
  7696                           ;incstack = 0
  7697                           ;i2putch@data stored from wreg
  7698  002BC0  6E03               	movwf	i2putch@data,c
  7699                           
  7700                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7701  002BC2  848C               	bsf	3980,2,c	;volatile
  7702                           
  7703                           ;lcd.c: 33: lcdNibble(data);
  7704  002BC4  5003               	movf	i2putch@data,w,c
  7705  002BC6  EC4E  F014         	call	i2_lcdNibble
  7706  002BCA  0012               	return		;funcret
  7707  002BCC                     __end_ofi2_putch:
  7708                           	opt stack 0
  7709                           pclatu	equ	0xFFB
  7710                           pclath	equ	0xFFA
  7711                           tblptru	equ	0xFF8
  7712                           tblptrh	equ	0xFF7
  7713                           tblptrl	equ	0xFF6
  7714                           tablat	equ	0xFF5
  7715                           prodh	equ	0xFF4
  7716                           prodl	equ	0xFF3
  7717                           intcon	equ	0xFF2
  7718                           intcon2	equ	0xFF1
  7719                           intcon3	equ	0xFF0
  7720                           postinc0	equ	0xFEE
  7721                           fsr0h	equ	0xFEA
  7722                           fsr0l	equ	0xFE9
  7723                           wreg	equ	0xFE8
  7724                           fsr1h	equ	0xFE2
  7725                           fsr1l	equ	0xFE1
  7726                           indf2	equ	0xFDF
  7727                           postinc2	equ	0xFDE
  7728                           postdec2	equ	0xFDD
  7729                           fsr2h	equ	0xFDA
  7730                           fsr2l	equ	0xFD9
  7731                           status	equ	0xFD8
  7732                           
  7733 ;; *************** function i2_isdigit *****************
  7734 ;; Defined at:
  7735 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;  c               1    wreg     unsigned char 
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;  c               1    2[COMRAM] unsigned char 
  7740 ;; Return value:  Size  Location     Type
  7741 ;;		None               void
  7742 ;; Registers used:
  7743 ;;		wreg, status,2, status,0
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;Total ram usage:        3 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; This function calls:
  7756 ;;		Nothing
  7757 ;; This function is called by:
  7758 ;;		i2_printf
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           	psect	text31
  7763  002B44                     __ptext31:
  7764                           	opt stack 0
  7765  002B44                     i2_isdigit:
  7766                           	opt stack 24
  7767                           
  7768                           ;incstack = 0
  7769                           ;i2isdigit@c stored from wreg
  7770  002B44  6E03               	movwf	i2isdigit@c,c
  7771  002B46  0E00               	movlw	0
  7772  002B48  6E02               	movwf	i2_isdigit$816,c
  7773  002B4A  0E3A               	movlw	58
  7774  002B4C  6003               	cpfslt	i2isdigit@c,c
  7775  002B4E  D005               	goto	i2l3951
  7776  002B50  0E2F               	movlw	47
  7777  002B52  6403               	cpfsgt	i2isdigit@c,c
  7778  002B54  D002               	goto	i2l3951
  7779  002B56  0E01               	movlw	1
  7780  002B58  6E02               	movwf	i2_isdigit$816,c
  7781  002B5A                     i2l3951:
  7782  002B5A  C002  F001         	movff	i2_isdigit$816,??i2_isdigit
  7783  002B5E  3001               	rrcf	??i2_isdigit,w,c
  7784  002B60  0012               	return	
  7785  002B62                     __end_ofi2_isdigit:
  7786                           	opt stack 0
  7787                           pclatu	equ	0xFFB
  7788                           pclath	equ	0xFFA
  7789                           tblptru	equ	0xFF8
  7790                           tblptrh	equ	0xFF7
  7791                           tblptrl	equ	0xFF6
  7792                           tablat	equ	0xFF5
  7793                           prodh	equ	0xFF4
  7794                           prodl	equ	0xFF3
  7795                           intcon	equ	0xFF2
  7796                           intcon2	equ	0xFF1
  7797                           intcon3	equ	0xFF0
  7798                           postinc0	equ	0xFEE
  7799                           fsr0h	equ	0xFEA
  7800                           fsr0l	equ	0xFE9
  7801                           wreg	equ	0xFE8
  7802                           fsr1h	equ	0xFE2
  7803                           fsr1l	equ	0xFE1
  7804                           indf2	equ	0xFDF
  7805                           postinc2	equ	0xFDE
  7806                           postdec2	equ	0xFDD
  7807                           fsr2h	equ	0xFDA
  7808                           fsr2l	equ	0xFD9
  7809                           status	equ	0xFD8
  7810                           
  7811 ;; *************** function i2___lwmod *****************
  7812 ;; Defined at:
  7813 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;  dividend        2    7[COMRAM] unsigned int 
  7816 ;;  divisor         2    9[COMRAM] unsigned int 
  7817 ;; Auto vars:     Size  Location     Type
  7818 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7819 ;; Return value:  Size  Location     Type
  7820 ;;                  2    7[COMRAM] unsigned int 
  7821 ;; Registers used:
  7822 ;;		wreg, status,2, status,0
  7823 ;; Tracked objects:
  7824 ;;		On entry : 0/0
  7825 ;;		On exit  : 0/0
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7828 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;Total ram usage:        5 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; This function calls:
  7835 ;;		Nothing
  7836 ;; This function is called by:
  7837 ;;		i2_printf
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text32
  7842  002934                     __ptext32:
  7843                           	opt stack 0
  7844  002934                     i2___lwmod:
  7845                           	opt stack 24
  7846                           
  7847                           ;incstack = 0
  7848  002934  500A               	movf	i2___lwmod@divisor,w,c
  7849  002936  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7850  002938  B4D8               	btfsc	status,2,c
  7851  00293A  D018               	goto	i2l885
  7852  00293C  0E01               	movlw	1
  7853  00293E  6E0C               	movwf	i2___lwmod@counter,c
  7854  002940  D004               	goto	i2l3983
  7855  002942                     i2l3981:
  7856  002942  90D8               	bcf	status,0,c
  7857  002944  360A               	rlcf	i2___lwmod@divisor,f,c
  7858  002946  360B               	rlcf	i2___lwmod@divisor+1,f,c
  7859  002948  2A0C               	incf	i2___lwmod@counter,f,c
  7860  00294A                     i2l3983:
  7861  00294A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  7862  00294C  D7FA               	goto	i2l3981
  7863  00294E                     i2l3985:
  7864  00294E  500A               	movf	i2___lwmod@divisor,w,c
  7865  002950  5C08               	subwf	i2___lwmod@dividend,w,c
  7866  002952  500B               	movf	i2___lwmod@divisor+1,w,c
  7867  002954  5809               	subwfb	i2___lwmod@dividend+1,w,c
  7868  002956  A0D8               	btfss	status,0,c
  7869  002958  D004               	goto	i2l3989
  7870  00295A  500A               	movf	i2___lwmod@divisor,w,c
  7871  00295C  5E08               	subwf	i2___lwmod@dividend,f,c
  7872  00295E  500B               	movf	i2___lwmod@divisor+1,w,c
  7873  002960  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  7874  002962                     i2l3989:
  7875  002962  90D8               	bcf	status,0,c
  7876  002964  320B               	rrcf	i2___lwmod@divisor+1,f,c
  7877  002966  320A               	rrcf	i2___lwmod@divisor,f,c
  7878  002968  2E0C               	decfsz	i2___lwmod@counter,f,c
  7879  00296A  D7F1               	goto	i2l3985
  7880  00296C                     i2l885:
  7881  00296C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  7882  002970  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7883  002974  0012               	return		;funcret
  7884  002976                     __end_ofi2___lwmod:
  7885                           	opt stack 0
  7886                           pclatu	equ	0xFFB
  7887                           pclath	equ	0xFFA
  7888                           tblptru	equ	0xFF8
  7889                           tblptrh	equ	0xFF7
  7890                           tblptrl	equ	0xFF6
  7891                           tablat	equ	0xFF5
  7892                           prodh	equ	0xFF4
  7893                           prodl	equ	0xFF3
  7894                           intcon	equ	0xFF2
  7895                           intcon2	equ	0xFF1
  7896                           intcon3	equ	0xFF0
  7897                           postinc0	equ	0xFEE
  7898                           fsr0h	equ	0xFEA
  7899                           fsr0l	equ	0xFE9
  7900                           wreg	equ	0xFE8
  7901                           fsr1h	equ	0xFE2
  7902                           fsr1l	equ	0xFE1
  7903                           indf2	equ	0xFDF
  7904                           postinc2	equ	0xFDE
  7905                           postdec2	equ	0xFDD
  7906                           fsr2h	equ	0xFDA
  7907                           fsr2l	equ	0xFD9
  7908                           status	equ	0xFD8
  7909                           
  7910 ;; *************** function i2___lwdiv *****************
  7911 ;; Defined at:
  7912 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;  dividend        2    0[COMRAM] unsigned int 
  7915 ;;  divisor         2    2[COMRAM] unsigned int 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7918 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7919 ;; Return value:  Size  Location     Type
  7920 ;;                  2    0[COMRAM] unsigned int 
  7921 ;; Registers used:
  7922 ;;		wreg, status,2, status,0
  7923 ;; Tracked objects:
  7924 ;;		On entry : 0/0
  7925 ;;		On exit  : 0/0
  7926 ;;		Unchanged: 0/0
  7927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;Total ram usage:        7 bytes
  7933 ;; Hardware stack levels used:    1
  7934 ;; This function calls:
  7935 ;;		Nothing
  7936 ;; This function is called by:
  7937 ;;		i2_printf
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           	psect	text33
  7942  0027FA                     __ptext33:
  7943                           	opt stack 0
  7944  0027FA                     i2___lwdiv:
  7945                           	opt stack 24
  7946                           
  7947                           ;incstack = 0
  7948  0027FA  0E00               	movlw	0
  7949  0027FC  6E06               	movwf	i2___lwdiv@quotient+1,c
  7950  0027FE  0E00               	movlw	0
  7951  002800  6E05               	movwf	i2___lwdiv@quotient,c
  7952  002802  5003               	movf	i2___lwdiv@divisor,w,c
  7953  002804  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7954  002806  B4D8               	btfsc	status,2,c
  7955  002808  D01C               	goto	i2l875
  7956  00280A  0E01               	movlw	1
  7957  00280C  6E07               	movwf	i2___lwdiv@counter,c
  7958  00280E  D004               	goto	i2l3963
  7959  002810                     i2l3961:
  7960  002810  90D8               	bcf	status,0,c
  7961  002812  3603               	rlcf	i2___lwdiv@divisor,f,c
  7962  002814  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7963  002816  2A07               	incf	i2___lwdiv@counter,f,c
  7964  002818                     i2l3963:
  7965  002818  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7966  00281A  D7FA               	goto	i2l3961
  7967  00281C                     i2l3965:
  7968  00281C  90D8               	bcf	status,0,c
  7969  00281E  3605               	rlcf	i2___lwdiv@quotient,f,c
  7970  002820  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7971  002822  5003               	movf	i2___lwdiv@divisor,w,c
  7972  002824  5C01               	subwf	i2___lwdiv@dividend,w,c
  7973  002826  5004               	movf	i2___lwdiv@divisor+1,w,c
  7974  002828  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7975  00282A  A0D8               	btfss	status,0,c
  7976  00282C  D005               	goto	i2l3973
  7977  00282E  5003               	movf	i2___lwdiv@divisor,w,c
  7978  002830  5E01               	subwf	i2___lwdiv@dividend,f,c
  7979  002832  5004               	movf	i2___lwdiv@divisor+1,w,c
  7980  002834  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  7981  002836  8005               	bsf	i2___lwdiv@quotient,0,c
  7982  002838                     i2l3973:
  7983  002838  90D8               	bcf	status,0,c
  7984  00283A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  7985  00283C  3203               	rrcf	i2___lwdiv@divisor,f,c
  7986  00283E  2E07               	decfsz	i2___lwdiv@counter,f,c
  7987  002840  D7ED               	goto	i2l3965
  7988  002842                     i2l875:
  7989  002842  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7990  002846  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7991  00284A  0012               	return		;funcret
  7992  00284C                     __end_ofi2___lwdiv:
  7993                           	opt stack 0
  7994                           pclatu	equ	0xFFB
  7995                           pclath	equ	0xFFA
  7996                           tblptru	equ	0xFF8
  7997                           tblptrh	equ	0xFF7
  7998                           tblptrl	equ	0xFF6
  7999                           tablat	equ	0xFF5
  8000                           prodh	equ	0xFF4
  8001                           prodl	equ	0xFF3
  8002                           intcon	equ	0xFF2
  8003                           intcon2	equ	0xFF1
  8004                           intcon3	equ	0xFF0
  8005                           postinc0	equ	0xFEE
  8006                           fsr0h	equ	0xFEA
  8007                           fsr0l	equ	0xFE9
  8008                           wreg	equ	0xFE8
  8009                           fsr1h	equ	0xFE2
  8010                           fsr1l	equ	0xFE1
  8011                           indf2	equ	0xFDF
  8012                           postinc2	equ	0xFDE
  8013                           postdec2	equ	0xFDD
  8014                           fsr2h	equ	0xFDA
  8015                           fsr2l	equ	0xFD9
  8016                           status	equ	0xFD8
  8017                           
  8018 ;; *************** function i2_lcdInst *****************
  8019 ;; Defined at:
  8020 ;;		line 26 in file "lcd.c"
  8021 ;; Parameters:    Size  Location     Type
  8022 ;;  data            1    wreg     unsigned char 
  8023 ;; Auto vars:     Size  Location     Type
  8024 ;;  data            1    2[COMRAM] unsigned char 
  8025 ;; Return value:  Size  Location     Type
  8026 ;;                  1    wreg      void 
  8027 ;; Registers used:
  8028 ;;		wreg, status,2, status,0, cstack
  8029 ;; Tracked objects:
  8030 ;;		On entry : 0/0
  8031 ;;		On exit  : 0/0
  8032 ;;		Unchanged: 0/0
  8033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8035 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;Total ram usage:        1 bytes
  8039 ;; Hardware stack levels used:    1
  8040 ;; Hardware stack levels required when called:    1
  8041 ;; This function calls:
  8042 ;;		i2_lcdNibble
  8043 ;; This function is called by:
  8044 ;;		_isr
  8045 ;; This function uses a non-reentrant model
  8046 ;;
  8047                           
  8048                           	psect	text34
  8049  002BCC                     __ptext34:
  8050                           	opt stack 0
  8051  002BCC                     i2_lcdInst:
  8052                           	opt stack 24
  8053                           
  8054                           ;incstack = 0
  8055                           ;i2lcdInst@data stored from wreg
  8056  002BCC  6E03               	movwf	i2lcdInst@data,c
  8057                           
  8058                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  8059  002BCE  948C               	bcf	3980,2,c	;volatile
  8060                           
  8061                           ;lcd.c: 28: lcdNibble(data);
  8062  002BD0  5003               	movf	i2lcdInst@data,w,c
  8063  002BD2  EC4E  F014         	call	i2_lcdNibble
  8064  002BD6  0012               	return		;funcret
  8065  002BD8                     __end_ofi2_lcdInst:
  8066                           	opt stack 0
  8067                           pclatu	equ	0xFFB
  8068                           pclath	equ	0xFFA
  8069                           tblptru	equ	0xFF8
  8070                           tblptrh	equ	0xFF7
  8071                           tblptrl	equ	0xFF6
  8072                           tablat	equ	0xFF5
  8073                           prodh	equ	0xFF4
  8074                           prodl	equ	0xFF3
  8075                           intcon	equ	0xFF2
  8076                           intcon2	equ	0xFF1
  8077                           intcon3	equ	0xFF0
  8078                           postinc0	equ	0xFEE
  8079                           fsr0h	equ	0xFEA
  8080                           fsr0l	equ	0xFE9
  8081                           wreg	equ	0xFE8
  8082                           fsr1h	equ	0xFE2
  8083                           fsr1l	equ	0xFE1
  8084                           indf2	equ	0xFDF
  8085                           postinc2	equ	0xFDE
  8086                           postdec2	equ	0xFDD
  8087                           fsr2h	equ	0xFDA
  8088                           fsr2l	equ	0xFD9
  8089                           status	equ	0xFD8
  8090                           
  8091 ;; *************** function i2_lcdNibble *****************
  8092 ;; Defined at:
  8093 ;;		line 36 in file "lcd.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;  data            1    wreg     unsigned char 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  data            1    1[COMRAM] unsigned char 
  8098 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      void 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2, status,0
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;Total ram usage:        2 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; This function calls:
  8115 ;;		Nothing
  8116 ;; This function is called by:
  8117 ;;		i2_lcdInst
  8118 ;;		i2_putch
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text35
  8123  00289C                     __ptext35:
  8124                           	opt stack 0
  8125  00289C                     i2_lcdNibble:
  8126                           	opt stack 23
  8127                           
  8128                           ;incstack = 0
  8129                           ;i2lcdNibble@data stored from wreg
  8130  00289C  6E02               	movwf	i2lcdNibble@data,c
  8131                           
  8132                           ;lcd.c: 38: char temp = data & 0xF0;
  8133  00289E  5002               	movf	i2lcdNibble@data,w,c
  8134  0028A0  0BF0               	andlw	240
  8135  0028A2  6E01               	movwf	i2lcdNibble@temp,c
  8136                           
  8137                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8138  0028A4  508C               	movf	3980,w,c	;volatile
  8139  0028A6  0B0F               	andlw	15
  8140  0028A8  6E8C               	movwf	3980,c	;volatile
  8141                           
  8142                           ;lcd.c: 40: LATD = temp | LATD;
  8143  0028AA  5001               	movf	i2lcdNibble@temp,w,c
  8144  0028AC  108C               	iorwf	3980,w,c	;volatile
  8145  0028AE  6E8C               	movwf	3980,c	;volatile
  8146                           
  8147                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  8148  0028B0  968C               	bcf	3980,3,c	;volatile
  8149                           
  8150                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8151  0028B2  0E19               	movlw	25
  8152  0028B4                     i2u421_47:
  8153  0028B4  2EE8               	decfsz	wreg,f,c
  8154  0028B6  D7FE               	bra	i2u421_47
  8155                           
  8156                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  8157  0028B8  868C               	bsf	3980,3,c	;volatile
  8158                           
  8159                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8160  0028BA  0E19               	movlw	25
  8161  0028BC                     i2u422_47:
  8162  0028BC  2EE8               	decfsz	wreg,f,c
  8163  0028BE  D7FE               	bra	i2u422_47
  8164                           
  8165                           ;lcd.c: 47: data = data << 4;
  8166  0028C0  3802               	swapf	i2lcdNibble@data,w,c
  8167  0028C2  0BF0               	andlw	240
  8168  0028C4  6E02               	movwf	i2lcdNibble@data,c
  8169                           
  8170                           ;lcd.c: 49: temp = data & 0xF0;
  8171  0028C6  5002               	movf	i2lcdNibble@data,w,c
  8172  0028C8  0BF0               	andlw	240
  8173  0028CA  6E01               	movwf	i2lcdNibble@temp,c
  8174                           
  8175                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8176  0028CC  508C               	movf	3980,w,c	;volatile
  8177  0028CE  0B0F               	andlw	15
  8178  0028D0  6E8C               	movwf	3980,c	;volatile
  8179                           
  8180                           ;lcd.c: 51: LATD = temp | LATD;
  8181  0028D2  5001               	movf	i2lcdNibble@temp,w,c
  8182  0028D4  108C               	iorwf	3980,w,c	;volatile
  8183  0028D6  6E8C               	movwf	3980,c	;volatile
  8184                           
  8185                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8186  0028D8  968C               	bcf	3980,3,c	;volatile
  8187                           
  8188                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8189  0028DA  0E19               	movlw	25
  8190  0028DC                     i2u423_47:
  8191  0028DC  2EE8               	decfsz	wreg,f,c
  8192  0028DE  D7FE               	bra	i2u423_47
  8193                           
  8194                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8195  0028E0  868C               	bsf	3980,3,c	;volatile
  8196                           
  8197                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8198  0028E2  0E19               	movlw	25
  8199  0028E4                     i2u424_47:
  8200  0028E4  2EE8               	decfsz	wreg,f,c
  8201  0028E6  D7FE               	bra	i2u424_47
  8202  0028E8  0012               	return		;funcret
  8203  0028EA                     __end_ofi2_lcdNibble:
  8204                           	opt stack 0
  8205                           pclatu	equ	0xFFB
  8206                           pclath	equ	0xFFA
  8207                           tblptru	equ	0xFF8
  8208                           tblptrh	equ	0xFF7
  8209                           tblptrl	equ	0xFF6
  8210                           tablat	equ	0xFF5
  8211                           prodh	equ	0xFF4
  8212                           prodl	equ	0xFF3
  8213                           intcon	equ	0xFF2
  8214                           intcon2	equ	0xFF1
  8215                           intcon3	equ	0xFF0
  8216                           postinc0	equ	0xFEE
  8217                           fsr0h	equ	0xFEA
  8218                           fsr0l	equ	0xFE9
  8219                           wreg	equ	0xFE8
  8220                           fsr1h	equ	0xFE2
  8221                           fsr1l	equ	0xFE1
  8222                           indf2	equ	0xFDF
  8223                           postinc2	equ	0xFDE
  8224                           postdec2	equ	0xFDD
  8225                           fsr2h	equ	0xFDA
  8226                           fsr2l	equ	0xFD9
  8227                           status	equ	0xFD8
  8228                           
  8229 ;; *************** function i2_I2C_ColorSens_Init *****************
  8230 ;; Defined at:
  8231 ;;		line 54 in file "I2C.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;		None
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;		None
  8236 ;; Return value:  Size  Location     Type
  8237 ;;                  1    wreg      void 
  8238 ;; Registers used:
  8239 ;;		wreg, status,2, status,0, cstack
  8240 ;; Tracked objects:
  8241 ;;		On entry : 0/0
  8242 ;;		On exit  : 0/0
  8243 ;;		Unchanged: 0/0
  8244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8247 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;Total ram usage:        1 bytes
  8250 ;; Hardware stack levels used:    1
  8251 ;; Hardware stack levels required when called:    2
  8252 ;; This function calls:
  8253 ;;		i2_I2C_Master_Start
  8254 ;;		i2_I2C_Master_Stop
  8255 ;;		i2_I2C_Master_Write
  8256 ;; This function is called by:
  8257 ;;		_isr
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           	psect	text36
  8262  001304                     __ptext36:
  8263                           	opt stack 0
  8264  001304                     i2_I2C_ColorSens_Init:
  8265                           	opt stack 23
  8266                           
  8267                           ;I2C.c: 55: I2C_Master_Start();
  8268                           
  8269                           ;incstack = 0
  8270  001304  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
  8271                           
  8272                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  8273  001308  0E00               	movlw	0
  8274  00130A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8275  00130C  0E52               	movlw	82
  8276  00130E  6E02               	movwf	i2I2C_Master_Write@d,c
  8277  001310  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8278                           
  8279                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  8280  001314  0E00               	movlw	0
  8281  001316  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8282  001318  0E80               	movlw	128
  8283  00131A  6E02               	movwf	i2I2C_Master_Write@d,c
  8284  00131C  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8285                           
  8286                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  8287  001320  0E00               	movlw	0
  8288  001322  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8289  001324  0E01               	movlw	1
  8290  001326  6E02               	movwf	i2I2C_Master_Write@d,c
  8291  001328  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8292                           
  8293                           ;I2C.c: 59: I2C_Master_Stop();
  8294  00132C  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
  8295                           
  8296                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  8297  001330  0E0A               	movlw	10
  8298  001332  6E04               	movwf	??i2_I2C_ColorSens_Init& (0+255),c
  8299  001334  0EBC               	movlw	188
  8300  001336                     i2u425_47:
  8301  001336  2EE8               	decfsz	wreg,f,c
  8302  001338  D7FE               	bra	i2u425_47
  8303  00133A  2E04               	decfsz	??i2_I2C_ColorSens_Init& (0+255),f,c
  8304  00133C  D7FC               	bra	i2u425_47
  8305  00133E  D000               	nop2	
  8306                           
  8307                           ;I2C.c: 63: I2C_Master_Start();
  8308  001340  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
  8309                           
  8310                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  8311  001344  0E00               	movlw	0
  8312  001346  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8313  001348  0E52               	movlw	82
  8314  00134A  6E02               	movwf	i2I2C_Master_Write@d,c
  8315  00134C  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8316                           
  8317                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  8318  001350  0E00               	movlw	0
  8319  001352  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8320  001354  0E80               	movlw	128
  8321  001356  6E02               	movwf	i2I2C_Master_Write@d,c
  8322  001358  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8323                           
  8324                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
  8325  00135C  0E00               	movlw	0
  8326  00135E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8327  001360  0E03               	movlw	3
  8328  001362  6E02               	movwf	i2I2C_Master_Write@d,c
  8329  001364  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8330                           
  8331                           ;I2C.c: 67: I2C_Master_Stop();
  8332  001368  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
  8333                           
  8334                           ;I2C.c: 69: I2C_Master_Start();
  8335  00136C  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
  8336                           
  8337                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  8338  001370  0E00               	movlw	0
  8339  001372  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8340  001374  0E52               	movlw	82
  8341  001376  6E02               	movwf	i2I2C_Master_Write@d,c
  8342  001378  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8343                           
  8344                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  8345  00137C  0E00               	movlw	0
  8346  00137E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8347  001380  0E8F               	movlw	143
  8348  001382  6E02               	movwf	i2I2C_Master_Write@d,c
  8349  001384  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8350                           
  8351                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  8352  001388  0E00               	movlw	0
  8353  00138A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8354  00138C  0E02               	movlw	2
  8355  00138E  6E02               	movwf	i2I2C_Master_Write@d,c
  8356  001390  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8357                           
  8358                           ;I2C.c: 73: I2C_Master_Stop();
  8359  001394  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
  8360                           
  8361                           ;I2C.c: 75: I2C_Master_Start();
  8362  001398  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
  8363                           
  8364                           ;I2C.c: 76: I2C_Master_Write(0b01010010);
  8365  00139C  0E00               	movlw	0
  8366  00139E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8367  0013A0  0E52               	movlw	82
  8368  0013A2  6E02               	movwf	i2I2C_Master_Write@d,c
  8369  0013A4  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8370                           
  8371                           ;I2C.c: 77: I2C_Master_Write(0b10100100);
  8372  0013A8  0E00               	movlw	0
  8373  0013AA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8374  0013AC  0EA4               	movlw	164
  8375  0013AE  6E02               	movwf	i2I2C_Master_Write@d,c
  8376  0013B0  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8377                           
  8378                           ;I2C.c: 78: I2C_Master_Write(0x00);
  8379  0013B4  0E00               	movlw	0
  8380  0013B6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8381  0013B8  0E00               	movlw	0
  8382  0013BA  6E02               	movwf	i2I2C_Master_Write@d,c
  8383  0013BC  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8384                           
  8385                           ;I2C.c: 79: I2C_Master_Write(0x00);
  8386  0013C0  0E00               	movlw	0
  8387  0013C2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8388  0013C4  0E00               	movlw	0
  8389  0013C6  6E02               	movwf	i2I2C_Master_Write@d,c
  8390  0013C8  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8391                           
  8392                           ;I2C.c: 80: I2C_Master_Write(0x00);
  8393  0013CC  0E00               	movlw	0
  8394  0013CE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8395  0013D0  0E00               	movlw	0
  8396  0013D2  6E02               	movwf	i2I2C_Master_Write@d,c
  8397  0013D4  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8398                           
  8399                           ;I2C.c: 81: I2C_Master_Write(0b01001010);
  8400  0013D8  0E00               	movlw	0
  8401  0013DA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8402  0013DC  0E4A               	movlw	74
  8403  0013DE  6E02               	movwf	i2I2C_Master_Write@d,c
  8404  0013E0  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8405                           
  8406                           ;I2C.c: 82: I2C_Master_Stop();
  8407  0013E4  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
  8408                           
  8409                           ;I2C.c: 84: I2C_Master_Start();
  8410  0013E8  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
  8411                           
  8412                           ;I2C.c: 85: I2C_Master_Write(0b01010010);
  8413  0013EC  0E00               	movlw	0
  8414  0013EE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8415  0013F0  0E52               	movlw	82
  8416  0013F2  6E02               	movwf	i2I2C_Master_Write@d,c
  8417  0013F4  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8418                           
  8419                           ;I2C.c: 86: I2C_Master_Write(0b10001100);
  8420  0013F8  0E00               	movlw	0
  8421  0013FA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8422  0013FC  0E8C               	movlw	140
  8423  0013FE  6E02               	movwf	i2I2C_Master_Write@d,c
  8424  001400  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8425                           
  8426                           ;I2C.c: 87: I2C_Master_Write(0b00000001);
  8427  001404  0E00               	movlw	0
  8428  001406  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8429  001408  0E01               	movlw	1
  8430  00140A  6E02               	movwf	i2I2C_Master_Write@d,c
  8431  00140C  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8432                           
  8433                           ;I2C.c: 88: I2C_Master_Stop();
  8434  001410  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
  8435                           
  8436                           ;I2C.c: 90: I2C_Master_Start();
  8437  001414  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
  8438                           
  8439                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
  8440  001418  0E00               	movlw	0
  8441  00141A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8442  00141C  0E52               	movlw	82
  8443  00141E  6E02               	movwf	i2I2C_Master_Write@d,c
  8444  001420  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8445                           
  8446                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
  8447  001424  0E00               	movlw	0
  8448  001426  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8449  001428  0E81               	movlw	129
  8450  00142A  6E02               	movwf	i2I2C_Master_Write@d,c
  8451  00142C  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8452                           
  8453                           ;I2C.c: 93: I2C_Master_Write(0b11111110);
  8454  001430  0E00               	movlw	0
  8455  001432  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8456  001434  0EFE               	movlw	254
  8457  001436  6E02               	movwf	i2I2C_Master_Write@d,c
  8458  001438  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8459                           
  8460                           ;I2C.c: 94: I2C_Master_Stop();
  8461  00143C  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
  8462  001440  0012               	return		;funcret
  8463  001442                     __end_ofi2_I2C_ColorSens_Init:
  8464                           	opt stack 0
  8465                           pclatu	equ	0xFFB
  8466                           pclath	equ	0xFFA
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           prodh	equ	0xFF4
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           intcon2	equ	0xFF1
  8475                           intcon3	equ	0xFF0
  8476                           postinc0	equ	0xFEE
  8477                           fsr0h	equ	0xFEA
  8478                           fsr0l	equ	0xFE9
  8479                           wreg	equ	0xFE8
  8480                           fsr1h	equ	0xFE2
  8481                           fsr1l	equ	0xFE1
  8482                           indf2	equ	0xFDF
  8483                           postinc2	equ	0xFDE
  8484                           postdec2	equ	0xFDD
  8485                           fsr2h	equ	0xFDA
  8486                           fsr2l	equ	0xFD9
  8487                           status	equ	0xFD8
  8488                           
  8489 ;; *************** function _servo_rotate0 *****************
  8490 ;; Defined at:
  8491 ;;		line 579 in file "main.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  degree          2    0[COMRAM] int 
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;  j               2    8[COMRAM] unsigned int 
  8496 ;;  i               2    6[COMRAM] unsigned int 
  8497 ;;  duty            2    4[COMRAM] int 
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      void 
  8500 ;; Registers used:
  8501 ;;		wreg, status,2, status,0
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8507 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;Total ram usage:       10 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; This function calls:
  8514 ;;		Nothing
  8515 ;; This function is called by:
  8516 ;;		_isr
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           	psect	text37
  8521  0022F0                     __ptext37:
  8522                           	opt stack 0
  8523  0022F0                     _servo_rotate0:
  8524                           	opt stack 25
  8525                           
  8526                           ;main.c: 580: unsigned int i;
  8527                           ;main.c: 581: unsigned int j;
  8528                           ;main.c: 582: int duty = degree;
  8529                           
  8530                           ;incstack = 0
  8531  0022F0  C001  F005         	movff	servo_rotate0@degree,servo_rotate0@duty
  8532  0022F4  C002  F006         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  8533                           
  8534                           ;main.c: 583: for (i=0; i<50; i++) {
  8535  0022F8  0E00               	movlw	0
  8536  0022FA  6E08               	movwf	servo_rotate0@i+1,c
  8537  0022FC  0E00               	movlw	0
  8538  0022FE  6E07               	movwf	servo_rotate0@i,c
  8539  002300                     i2l4271:
  8540  002300  5008               	movf	servo_rotate0@i+1,w,c
  8541  002302  E13D               	bnz	i2l366
  8542  002304  0E32               	movlw	50
  8543  002306  5C07               	subwf	servo_rotate0@i,w,c
  8544  002308  B0D8               	btfsc	status,0,c
  8545  00230A  0012               	return	
  8546                           
  8547                           ;main.c: 584: LATCbits.LATC0 = 1;
  8548  00230C  808B               	bsf	3979,0,c	;volatile
  8549                           
  8550                           ;main.c: 585: for(j=0; j<duty; j++) _delay((unsigned long)((1)*(10000000/4000.0)));
  8551  00230E  0E00               	movlw	0
  8552  002310  6E0A               	movwf	servo_rotate0@j+1,c
  8553  002312  0E00               	movlw	0
  8554  002314  6E09               	movwf	servo_rotate0@j,c
  8555  002316  D009               	goto	i2l360
  8556  002318                     i2l4277:
  8557  002318  0E04               	movlw	4
  8558  00231A  6E03               	movwf	??_servo_rotate0& (0+255),c
  8559  00231C  0E3E               	movlw	62
  8560  00231E                     i2u426_47:
  8561  00231E  2EE8               	decfsz	wreg,f,c
  8562  002320  D7FE               	bra	i2u426_47
  8563  002322  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8564  002324  D7FC               	bra	i2u426_47
  8565  002326  4A09               	infsnz	servo_rotate0@j,f,c
  8566  002328  2A0A               	incf	servo_rotate0@j+1,f,c
  8567  00232A                     i2l360:
  8568  00232A  5005               	movf	servo_rotate0@duty,w,c
  8569  00232C  5C09               	subwf	servo_rotate0@j,w,c
  8570  00232E  5006               	movf	servo_rotate0@duty+1,w,c
  8571  002330  580A               	subwfb	servo_rotate0@j+1,w,c
  8572  002332  A0D8               	btfss	status,0,c
  8573  002334  D7F1               	goto	i2l4277
  8574                           
  8575                           ;main.c: 586: LATCbits.LATC0 = 0;
  8576  002336  908B               	bcf	3979,0,c	;volatile
  8577                           
  8578                           ;main.c: 587: for(j=0; j<(20 - duty); j++) _delay((unsigned long)((1)*(10000000/4000.0))
      +                          );
  8579  002338  0E00               	movlw	0
  8580  00233A  6E0A               	movwf	servo_rotate0@j+1,c
  8581  00233C  0E00               	movlw	0
  8582  00233E  6E09               	movwf	servo_rotate0@j,c
  8583  002340  D009               	goto	i2l363
  8584  002342                     i2l4283:
  8585  002342  0E04               	movlw	4
  8586  002344  6E03               	movwf	??_servo_rotate0& (0+255),c
  8587  002346  0E3E               	movlw	62
  8588  002348                     i2u427_47:
  8589  002348  2EE8               	decfsz	wreg,f,c
  8590  00234A  D7FE               	bra	i2u427_47
  8591  00234C  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8592  00234E  D7FC               	bra	i2u427_47
  8593  002350  4A09               	infsnz	servo_rotate0@j,f,c
  8594  002352  2A0A               	incf	servo_rotate0@j+1,f,c
  8595  002354                     i2l363:
  8596  002354  C005  F003         	movff	servo_rotate0@duty,??_servo_rotate0
  8597  002358  C006  F004         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  8598  00235C  1E03               	comf	??_servo_rotate0,f,c
  8599  00235E  1E04               	comf	??_servo_rotate0+1,f,c
  8600  002360  4A03               	infsnz	??_servo_rotate0,f,c
  8601  002362  2A04               	incf	??_servo_rotate0+1,f,c
  8602  002364  0E14               	movlw	20
  8603  002366  2603               	addwf	??_servo_rotate0,f,c
  8604  002368  0E00               	movlw	0
  8605  00236A  2204               	addwfc	??_servo_rotate0+1,f,c
  8606  00236C  5003               	movf	??_servo_rotate0,w,c
  8607  00236E  5C09               	subwf	servo_rotate0@j,w,c
  8608  002370  5004               	movf	??_servo_rotate0+1,w,c
  8609  002372  580A               	subwfb	servo_rotate0@j+1,w,c
  8610  002374  A0D8               	btfss	status,0,c
  8611  002376  D7E5               	goto	i2l4283
  8612  002378  4A07               	infsnz	servo_rotate0@i,f,c
  8613  00237A  2A08               	incf	servo_rotate0@i+1,f,c
  8614  00237C  D7C1               	goto	i2l4271
  8615  00237E                     i2l366:
  8616  00237E  0012               	return		;funcret
  8617  002380                     __end_of_servo_rotate0:
  8618                           	opt stack 0
  8619                           pclatu	equ	0xFFB
  8620                           pclath	equ	0xFFA
  8621                           tblptru	equ	0xFF8
  8622                           tblptrh	equ	0xFF7
  8623                           tblptrl	equ	0xFF6
  8624                           tablat	equ	0xFF5
  8625                           prodh	equ	0xFF4
  8626                           prodl	equ	0xFF3
  8627                           intcon	equ	0xFF2
  8628                           intcon2	equ	0xFF1
  8629                           intcon3	equ	0xFF0
  8630                           postinc0	equ	0xFEE
  8631                           fsr0h	equ	0xFEA
  8632                           fsr0l	equ	0xFE9
  8633                           wreg	equ	0xFE8
  8634                           fsr1h	equ	0xFE2
  8635                           fsr1l	equ	0xFE1
  8636                           indf2	equ	0xFDF
  8637                           postinc2	equ	0xFDE
  8638                           postdec2	equ	0xFDD
  8639                           fsr2h	equ	0xFDA
  8640                           fsr2l	equ	0xFD9
  8641                           status	equ	0xFD8
  8642                           
  8643 ;; *************** function _read_time *****************
  8644 ;; Defined at:
  8645 ;;		line 470 in file "main.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;		None
  8648 ;; Auto vars:     Size  Location     Type
  8649 ;;  i               1    3[COMRAM] unsigned char 
  8650 ;; Return value:  Size  Location     Type
  8651 ;;                  1    wreg      void 
  8652 ;; Registers used:
  8653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8654 ;; Tracked objects:
  8655 ;;		On entry : 0/0
  8656 ;;		On exit  : 0/0
  8657 ;;		Unchanged: 0/0
  8658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8663 ;;Total ram usage:        1 bytes
  8664 ;; Hardware stack levels used:    1
  8665 ;; Hardware stack levels required when called:    2
  8666 ;; This function calls:
  8667 ;;		i2_I2C_Master_Read
  8668 ;;		i2_I2C_Master_Start
  8669 ;;		i2_I2C_Master_Stop
  8670 ;;		i2_I2C_Master_Write
  8671 ;; This function is called by:
  8672 ;;		_isr
  8673 ;; This function uses a non-reentrant model
  8674 ;;
  8675                           
  8676                           	psect	text38
  8677  002614                     __ptext38:
  8678                           	opt stack 0
  8679  002614                     _read_time:
  8680                           	opt stack 23
  8681                           
  8682                           ;main.c: 472: I2C_Master_Start();
  8683                           
  8684                           ;incstack = 0
  8685  002614  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
  8686                           
  8687                           ;main.c: 473: I2C_Master_Write(0b11010000);
  8688  002618  0E00               	movlw	0
  8689  00261A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8690  00261C  0ED0               	movlw	208
  8691  00261E  6E02               	movwf	i2I2C_Master_Write@d,c
  8692  002620  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8693                           
  8694                           ;main.c: 474: I2C_Master_Write(0x00);
  8695  002624  0E00               	movlw	0
  8696  002626  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8697  002628  0E00               	movlw	0
  8698  00262A  6E02               	movwf	i2I2C_Master_Write@d,c
  8699  00262C  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8700                           
  8701                           ;main.c: 475: I2C_Master_Stop();
  8702  002630  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
  8703                           
  8704                           ;main.c: 478: I2C_Master_Start();
  8705  002634  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
  8706                           
  8707                           ;main.c: 479: I2C_Master_Write(0b11010001);
  8708  002638  0E00               	movlw	0
  8709  00263A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8710  00263C  0ED1               	movlw	209
  8711  00263E  6E02               	movwf	i2I2C_Master_Write@d,c
  8712  002640  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
  8713                           
  8714                           ;main.c: 480: for(unsigned char i=0;i<0x06;i++){
  8715  002644  0E00               	movlw	0
  8716  002646  6E04               	movwf	read_time@i,c
  8717  002648                     i2l4235:
  8718  002648  0E05               	movlw	5
  8719  00264A  6404               	cpfsgt	read_time@i,c
  8720  00264C  D001               	goto	i2l4239
  8721  00264E  D00E               	goto	i2l4245
  8722  002650                     i2l4239:
  8723                           
  8724                           ;main.c: 481: time[i] = I2C_Master_Read(1);
  8725  002650  5004               	movf	read_time@i,w,c
  8726  002652  0D01               	mullw	1
  8727  002654  0EB7               	movlw	low _time
  8728  002656  24F3               	addwf	prodl,w,c
  8729  002658  6ED9               	movwf	fsr2l,c
  8730  00265A  0E00               	movlw	high _time
  8731  00265C  20F4               	addwfc	prodh,w,c
  8732  00265E  6EDA               	movwf	fsr2h,c
  8733  002660  0E01               	movlw	1
  8734  002662  EC59  F015         	call	i2_I2C_Master_Read
  8735  002666  6EDF               	movwf	indf2,c
  8736  002668  2A04               	incf	read_time@i,f,c
  8737  00266A  D7EE               	goto	i2l4235
  8738  00266C                     i2l4245:
  8739                           
  8740                           ;main.c: 482: }
  8741                           ;main.c: 483: time[6] = I2C_Master_Read(0);
  8742  00266C  0E00               	movlw	0
  8743  00266E  EC59  F015         	call	i2_I2C_Master_Read
  8744  002672  0100               	movlb	0	; () banked
  8745  002674  6FBD               	movwf	(_time+6)& (0+255),b
  8746                           
  8747                           ;main.c: 484: I2C_Master_Stop();
  8748  002676  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
  8749  00267A  0012               	return	
  8750  00267C                     __end_of_read_time:
  8751                           	opt stack 0
  8752                           pclatu	equ	0xFFB
  8753                           pclath	equ	0xFFA
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           intcon	equ	0xFF2
  8761                           intcon2	equ	0xFF1
  8762                           intcon3	equ	0xFF0
  8763                           postinc0	equ	0xFEE
  8764                           fsr0h	equ	0xFEA
  8765                           fsr0l	equ	0xFE9
  8766                           wreg	equ	0xFE8
  8767                           fsr1h	equ	0xFE2
  8768                           fsr1l	equ	0xFE1
  8769                           indf2	equ	0xFDF
  8770                           postinc2	equ	0xFDE
  8771                           postdec2	equ	0xFDD
  8772                           fsr2h	equ	0xFDA
  8773                           fsr2l	equ	0xFD9
  8774                           status	equ	0xFD8
  8775                           
  8776 ;; *************** function i2_I2C_Master_Write *****************
  8777 ;; Defined at:
  8778 ;;		line 48 in file "I2C.c"
  8779 ;; Parameters:    Size  Location     Type
  8780 ;;  d               2    1[COMRAM] unsigned int 
  8781 ;; Auto vars:     Size  Location     Type
  8782 ;;		None
  8783 ;; Return value:  Size  Location     Type
  8784 ;;                  1    wreg      void 
  8785 ;; Registers used:
  8786 ;;		wreg, status,2, status,0, cstack
  8787 ;; Tracked objects:
  8788 ;;		On entry : 0/0
  8789 ;;		On exit  : 0/0
  8790 ;;		Unchanged: 0/0
  8791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8795 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8796 ;;Total ram usage:        2 bytes
  8797 ;; Hardware stack levels used:    1
  8798 ;; Hardware stack levels required when called:    1
  8799 ;; This function calls:
  8800 ;;		i2_I2C_Master_Wait
  8801 ;; This function is called by:
  8802 ;;		_read_time
  8803 ;;		i2_I2C_ColorSens_Init
  8804 ;;		i2_read_colorsensor
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           	psect	text39
  8809  002BE2                     __ptext39:
  8810                           	opt stack 0
  8811  002BE2                     i2_I2C_Master_Write:
  8812                           	opt stack 23
  8813                           
  8814                           ;I2C.c: 50: I2C_Master_Wait();
  8815                           
  8816                           ;incstack = 0
  8817  002BE2  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
  8818                           
  8819                           ;I2C.c: 51: SSPBUF = d;
  8820  002BE6  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  8821  002BEA  0012               	return		;funcret
  8822  002BEC                     __end_ofi2_I2C_Master_Write:
  8823                           	opt stack 0
  8824                           pclatu	equ	0xFFB
  8825                           pclath	equ	0xFFA
  8826                           tblptru	equ	0xFF8
  8827                           tblptrh	equ	0xFF7
  8828                           tblptrl	equ	0xFF6
  8829                           tablat	equ	0xFF5
  8830                           prodh	equ	0xFF4
  8831                           prodl	equ	0xFF3
  8832                           intcon	equ	0xFF2
  8833                           intcon2	equ	0xFF1
  8834                           intcon3	equ	0xFF0
  8835                           postinc0	equ	0xFEE
  8836                           fsr0h	equ	0xFEA
  8837                           fsr0l	equ	0xFE9
  8838                           wreg	equ	0xFE8
  8839                           fsr1h	equ	0xFE2
  8840                           fsr1l	equ	0xFE1
  8841                           indf2	equ	0xFDF
  8842                           postinc2	equ	0xFDE
  8843                           postdec2	equ	0xFDD
  8844                           fsr2h	equ	0xFDA
  8845                           fsr2l	equ	0xFD9
  8846                           status	equ	0xFD8
  8847                           
  8848 ;; *************** function i2_I2C_Master_Stop *****************
  8849 ;; Defined at:
  8850 ;;		line 42 in file "I2C.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;		None
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;		None
  8855 ;; Return value:  Size  Location     Type
  8856 ;;                  1    wreg      void 
  8857 ;; Registers used:
  8858 ;;		wreg, status,2, status,0, cstack
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;Total ram usage:        0 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; Hardware stack levels required when called:    1
  8871 ;; This function calls:
  8872 ;;		i2_I2C_Master_Wait
  8873 ;; This function is called by:
  8874 ;;		_read_time
  8875 ;;		i2_I2C_ColorSens_Init
  8876 ;;		i2_read_colorsensor
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           	psect	text40
  8881  002BFC                     __ptext40:
  8882                           	opt stack 0
  8883  002BFC                     i2_I2C_Master_Stop:
  8884                           	opt stack 23
  8885                           
  8886                           ;I2C.c: 44: I2C_Master_Wait();
  8887                           
  8888                           ;incstack = 0
  8889  002BFC  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
  8890                           
  8891                           ;I2C.c: 45: PEN = 1;
  8892  002C00  84C5               	bsf	4037,2,c	;volatile
  8893  002C02  0012               	return		;funcret
  8894  002C04                     __end_ofi2_I2C_Master_Stop:
  8895                           	opt stack 0
  8896                           pclatu	equ	0xFFB
  8897                           pclath	equ	0xFFA
  8898                           tblptru	equ	0xFF8
  8899                           tblptrh	equ	0xFF7
  8900                           tblptrl	equ	0xFF6
  8901                           tablat	equ	0xFF5
  8902                           prodh	equ	0xFF4
  8903                           prodl	equ	0xFF3
  8904                           intcon	equ	0xFF2
  8905                           intcon2	equ	0xFF1
  8906                           intcon3	equ	0xFF0
  8907                           postinc0	equ	0xFEE
  8908                           fsr0h	equ	0xFEA
  8909                           fsr0l	equ	0xFE9
  8910                           wreg	equ	0xFE8
  8911                           fsr1h	equ	0xFE2
  8912                           fsr1l	equ	0xFE1
  8913                           indf2	equ	0xFDF
  8914                           postinc2	equ	0xFDE
  8915                           postdec2	equ	0xFDD
  8916                           fsr2h	equ	0xFDA
  8917                           fsr2l	equ	0xFD9
  8918                           status	equ	0xFD8
  8919                           
  8920 ;; *************** function i2_I2C_Master_Start *****************
  8921 ;; Defined at:
  8922 ;;		line 30 in file "I2C.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;		None
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;		None
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  1    wreg      void 
  8929 ;; Registers used:
  8930 ;;		wreg, status,2, status,0, cstack
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;Total ram usage:        0 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    1
  8943 ;; This function calls:
  8944 ;;		i2_I2C_Master_Wait
  8945 ;; This function is called by:
  8946 ;;		_read_time
  8947 ;;		i2_I2C_ColorSens_Init
  8948 ;;		i2_read_colorsensor
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           	psect	text41
  8953  002C04                     __ptext41:
  8954                           	opt stack 0
  8955  002C04                     i2_I2C_Master_Start:
  8956                           	opt stack 23
  8957                           
  8958                           ;I2C.c: 32: I2C_Master_Wait();
  8959                           
  8960                           ;incstack = 0
  8961  002C04  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
  8962                           
  8963                           ;I2C.c: 33: SEN = 1;
  8964  002C08  80C5               	bsf	4037,0,c	;volatile
  8965  002C0A  0012               	return		;funcret
  8966  002C0C                     __end_ofi2_I2C_Master_Start:
  8967                           	opt stack 0
  8968                           pclatu	equ	0xFFB
  8969                           pclath	equ	0xFFA
  8970                           tblptru	equ	0xFF8
  8971                           tblptrh	equ	0xFF7
  8972                           tblptrl	equ	0xFF6
  8973                           tablat	equ	0xFF5
  8974                           prodh	equ	0xFF4
  8975                           prodl	equ	0xFF3
  8976                           intcon	equ	0xFF2
  8977                           intcon2	equ	0xFF1
  8978                           intcon3	equ	0xFF0
  8979                           postinc0	equ	0xFEE
  8980                           fsr0h	equ	0xFEA
  8981                           fsr0l	equ	0xFE9
  8982                           wreg	equ	0xFE8
  8983                           fsr1h	equ	0xFE2
  8984                           fsr1l	equ	0xFE1
  8985                           indf2	equ	0xFDF
  8986                           postinc2	equ	0xFDE
  8987                           postdec2	equ	0xFDD
  8988                           fsr2h	equ	0xFDA
  8989                           fsr2l	equ	0xFD9
  8990                           status	equ	0xFD8
  8991                           
  8992 ;; *************** function i2_I2C_Master_Read *****************
  8993 ;; Defined at:
  8994 ;;		line 105 in file "I2C.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  a               1    wreg     unsigned char 
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  a               1    1[COMRAM] unsigned char 
  8999 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      unsigned char 
  9002 ;; Registers used:
  9003 ;;		wreg, status,2, status,0, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9012 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9013 ;;Total ram usage:        2 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    1
  9016 ;; This function calls:
  9017 ;;		i2_I2C_Master_Wait
  9018 ;; This function is called by:
  9019 ;;		_read_time
  9020 ;;		i2_read_colorsensor
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           	psect	text42
  9025  002AB2                     __ptext42:
  9026                           	opt stack 0
  9027  002AB2                     i2_I2C_Master_Read:
  9028                           	opt stack 23
  9029                           
  9030                           ;incstack = 0
  9031                           ;i2I2C_Master_Read@a stored from wreg
  9032  002AB2  6E02               	movwf	i2I2C_Master_Read@a,c
  9033                           
  9034                           ;I2C.c: 107: unsigned char temp;
  9035                           ;I2C.c: 108: I2C_Master_Wait();
  9036  002AB4  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
  9037                           
  9038                           ;I2C.c: 109: RCEN = 1;
  9039  002AB8  86C5               	bsf	4037,3,c	;volatile
  9040                           
  9041                           ;I2C.c: 110: I2C_Master_Wait();
  9042  002ABA  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
  9043                           
  9044                           ;I2C.c: 111: temp = SSPBUF;
  9045  002ABE  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9046                           
  9047                           ;I2C.c: 112: I2C_Master_Wait();
  9048  002AC2  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
  9049                           
  9050                           ;I2C.c: 113: ACKDT = (a)?0:1;
  9051  002AC6  5002               	movf	i2I2C_Master_Read@a,w,c
  9052  002AC8  A4D8               	btfss	status,2,c
  9053  002ACA  D002               	goto	i2u348_40
  9054  002ACC  8AC5               	bsf	4037,5,c	;volatile
  9055  002ACE  D001               	goto	i2l3933
  9056  002AD0                     i2u348_40:
  9057  002AD0  9AC5               	bcf	4037,5,c	;volatile
  9058  002AD2                     i2l3933:
  9059                           
  9060                           ;I2C.c: 114: ACKEN = 1;
  9061  002AD2  88C5               	bsf	4037,4,c	;volatile
  9062                           
  9063                           ;I2C.c: 115: return temp;
  9064  002AD4  5003               	movf	i2I2C_Master_Read@temp,w,c
  9065  002AD6  0012               	return	
  9066  002AD8                     __end_ofi2_I2C_Master_Read:
  9067                           	opt stack 0
  9068                           pclatu	equ	0xFFB
  9069                           pclath	equ	0xFFA
  9070                           tblptru	equ	0xFF8
  9071                           tblptrh	equ	0xFF7
  9072                           tblptrl	equ	0xFF6
  9073                           tablat	equ	0xFF5
  9074                           prodh	equ	0xFF4
  9075                           prodl	equ	0xFF3
  9076                           intcon	equ	0xFF2
  9077                           intcon2	equ	0xFF1
  9078                           intcon3	equ	0xFF0
  9079                           postinc0	equ	0xFEE
  9080                           fsr0h	equ	0xFEA
  9081                           fsr0l	equ	0xFE9
  9082                           wreg	equ	0xFE8
  9083                           fsr1h	equ	0xFE2
  9084                           fsr1l	equ	0xFE1
  9085                           indf2	equ	0xFDF
  9086                           postinc2	equ	0xFDE
  9087                           postdec2	equ	0xFDD
  9088                           fsr2h	equ	0xFDA
  9089                           fsr2l	equ	0xFD9
  9090                           status	equ	0xFD8
  9091                           
  9092 ;; *************** function i2_I2C_Master_Wait *****************
  9093 ;; Defined at:
  9094 ;;		line 25 in file "I2C.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  1    wreg      void 
  9101 ;; Registers used:
  9102 ;;		wreg, status,2, status,0
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9110 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9111 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9112 ;;Total ram usage:        1 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		i2_I2C_Master_Start
  9118 ;;		i2_I2C_Master_Stop
  9119 ;;		i2_I2C_Master_Write
  9120 ;;		i2_I2C_Master_Read
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124                           	psect	text43
  9125  002B8E                     __ptext43:
  9126                           	opt stack 0
  9127  002B8E                     i2_I2C_Master_Wait:
  9128                           	opt stack 23
  9129  002B8E                     i2l34:
  9130  002B8E  B4C7               	btfsc	4039,2,c	;volatile
  9131  002B90  D7FE               	goto	i2l34
  9132  002B92  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  9133  002B96  0E1F               	movlw	31
  9134  002B98  1601               	andwf	??i2_I2C_Master_Wait,f,c
  9135  002B9A  B4D8               	btfsc	status,2,c
  9136  002B9C  0012               	return	
  9137  002B9E  D7F7               	goto	i2l34
  9138  002BA0                     __end_ofi2_I2C_Master_Wait:
  9139                           	opt stack 0
  9140                           pclatu	equ	0xFFB
  9141                           pclath	equ	0xFFA
  9142                           tblptru	equ	0xFF8
  9143                           tblptrh	equ	0xFF7
  9144                           tblptrl	equ	0xFF6
  9145                           tablat	equ	0xFF5
  9146                           prodh	equ	0xFF4
  9147                           prodl	equ	0xFF3
  9148                           intcon	equ	0xFF2
  9149                           intcon2	equ	0xFF1
  9150                           intcon3	equ	0xFF0
  9151                           postinc0	equ	0xFEE
  9152                           fsr0h	equ	0xFEA
  9153                           fsr0l	equ	0xFE9
  9154                           wreg	equ	0xFE8
  9155                           fsr1h	equ	0xFE2
  9156                           fsr1l	equ	0xFE1
  9157                           indf2	equ	0xFDF
  9158                           postinc2	equ	0xFDE
  9159                           postdec2	equ	0xFDD
  9160                           fsr2h	equ	0xFDA
  9161                           fsr2l	equ	0xFD9
  9162                           status	equ	0xFD8
  9163                           
  9164 ;; *************** function _dec_to_hex *****************
  9165 ;; Defined at:
  9166 ;;		line 431 in file "main.c"
  9167 ;; Parameters:    Size  Location     Type
  9168 ;;  num             2   98[COMRAM] int 
  9169 ;; Auto vars:     Size  Location     Type
  9170 ;;  quotient        2  112[COMRAM] int 
  9171 ;;  hexnum          2  110[COMRAM] int 
  9172 ;;  i               2  108[COMRAM] int 
  9173 ;;  temp            2  106[COMRAM] int 
  9174 ;; Return value:  Size  Location     Type
  9175 ;;                  2   98[COMRAM] int 
  9176 ;; Registers used:
  9177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9178 ;; Tracked objects:
  9179 ;;		On entry : 0/0
  9180 ;;		On exit  : 0/0
  9181 ;;		Unchanged: 0/0
  9182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9183 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9184 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9186 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9187 ;;Total ram usage:       16 bytes
  9188 ;; Hardware stack levels used:    1
  9189 ;; Hardware stack levels required when called:    5
  9190 ;; This function calls:
  9191 ;;		___awdiv
  9192 ;;		___awtoft
  9193 ;;		___ftadd
  9194 ;;		___ftmul
  9195 ;;		___fttol
  9196 ;;		_pow
  9197 ;; This function is called by:
  9198 ;;		_isr
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text44
  9203  00168C                     __ptext44:
  9204                           	opt stack 0
  9205  00168C                     _dec_to_hex:
  9206                           	opt stack 20
  9207                           
  9208                           ;main.c: 432: int i = 0, quotient = num, temp, hexnum = 0;
  9209                           
  9210                           ;incstack = 0
  9211  00168C  0E00               	movlw	0
  9212  00168E  6E6E               	movwf	dec_to_hex@i+1,c
  9213  001690  0E00               	movlw	0
  9214  001692  6E6D               	movwf	dec_to_hex@i,c
  9215  001694  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  9216  001698  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  9217  00169C  0E00               	movlw	0
  9218  00169E  6E70               	movwf	dec_to_hex@hexnum+1,c
  9219  0016A0  0E00               	movlw	0
  9220  0016A2  6E6F               	movwf	dec_to_hex@hexnum,c
  9221                           
  9222                           ;main.c: 434: while (quotient != 0) {
  9223  0016A4  D068               	goto	i2l4265
  9224  0016A6                     i2l4253:
  9225                           
  9226                           ;main.c: 435: temp = quotient % 16;
  9227  0016A6  0E0F               	movlw	15
  9228  0016A8  1471               	andwf	dec_to_hex@quotient,w,c
  9229  0016AA  6E6B               	movwf	dec_to_hex@temp,c
  9230  0016AC  6A6C               	clrf	dec_to_hex@temp+1,c
  9231                           
  9232                           ;main.c: 437: hexnum += temp*pow(10,i);
  9233  0016AE  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  9234  0016B2  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  9235  0016B6  ECDB  F014         	call	___awtoft	;wreg free
  9236  0016BA  C009  F065         	movff	?___awtoft,_dec_to_hex$1261
  9237  0016BE  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1261+1
  9238  0016C2  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1261+2
  9239                           
  9240                           ;main.c: 437: hexnum += temp*pow(10,i);
  9241  0016C6  C065  F055         	movff	_dec_to_hex$1261,pow@y
  9242  0016CA  C066  F056         	movff	_dec_to_hex$1261+1,pow@y+1
  9243  0016CE  C067  F057         	movff	_dec_to_hex$1261+2,pow@y+2
  9244  0016D2  0E00               	movlw	0
  9245  0016D4  6E52               	movwf	pow@x,c
  9246  0016D6  0E20               	movlw	32
  9247  0016D8  6E53               	movwf	pow@x+1,c
  9248  0016DA  0E41               	movlw	65
  9249  0016DC  6E54               	movwf	pow@x+2,c
  9250  0016DE  EC12  F008         	call	_pow	;wreg free
  9251  0016E2  C052  F068         	movff	?_pow,_dec_to_hex$1262
  9252  0016E6  C053  F069         	movff	?_pow+1,_dec_to_hex$1262+1
  9253  0016EA  C054  F06A         	movff	?_pow+2,_dec_to_hex$1262+2
  9254                           
  9255                           ;main.c: 437: hexnum += temp*pow(10,i);
  9256  0016EE  C068  F010         	movff	_dec_to_hex$1262,___ftmul@f2
  9257  0016F2  C069  F011         	movff	_dec_to_hex$1262+1,___ftmul@f2+1
  9258  0016F6  C06A  F012         	movff	_dec_to_hex$1262+2,___ftmul@f2+2
  9259  0016FA  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  9260  0016FE  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  9261  001702  ECDB  F014         	call	___awtoft	;wreg free
  9262  001706  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9263  00170A  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9264  00170E  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9265  001712  EC3E  F00C         	call	___ftmul	;wreg free
  9266  001716  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  9267  00171A  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  9268  00171E  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  9269  001722  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  9270  001726  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  9271  00172A  ECDB  F014         	call	___awtoft	;wreg free
  9272  00172E  C009  F01C         	movff	?___awtoft,___ftadd@f1
  9273  001732  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  9274  001736  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  9275  00173A  EC72  F006         	call	___ftadd	;wreg free
  9276  00173E  C01C  F028         	movff	?___ftadd,___fttol@f1
  9277  001742  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  9278  001746  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  9279  00174A  ECC4  F00B         	call	___fttol	;wreg free
  9280  00174E  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  9281  001752  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  9282                           
  9283                           ;main.c: 439: quotient = quotient / 16;
  9284  001756  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
  9285  00175A  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  9286  00175E  0E00               	movlw	0
  9287  001760  6E04               	movwf	___awdiv@divisor+1,c
  9288  001762  0E10               	movlw	16
  9289  001764  6E03               	movwf	___awdiv@divisor,c
  9290  001766  EC50  F012         	call	___awdiv	;wreg free
  9291  00176A  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
  9292  00176E  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  9293                           
  9294                           ;main.c: 440: i += 1;
  9295  001772  4A6D               	infsnz	dec_to_hex@i,f,c
  9296  001774  2A6E               	incf	dec_to_hex@i+1,f,c
  9297  001776                     i2l4265:
  9298  001776  5071               	movf	dec_to_hex@quotient,w,c
  9299  001778  1072               	iorwf	dec_to_hex@quotient+1,w,c
  9300  00177A  A4D8               	btfss	status,2,c
  9301  00177C  D794               	goto	i2l4253
  9302                           
  9303                           ;main.c: 441: }
  9304                           ;main.c: 442: return hexnum;
  9305  00177E  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  9306  001782  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  9307  001786  0012               	return		;funcret
  9308  001788                     __end_of_dec_to_hex:
  9309                           	opt stack 0
  9310                           pclatu	equ	0xFFB
  9311                           pclath	equ	0xFFA
  9312                           tblptru	equ	0xFF8
  9313                           tblptrh	equ	0xFF7
  9314                           tblptrl	equ	0xFF6
  9315                           tablat	equ	0xFF5
  9316                           prodh	equ	0xFF4
  9317                           prodl	equ	0xFF3
  9318                           intcon	equ	0xFF2
  9319                           intcon2	equ	0xFF1
  9320                           intcon3	equ	0xFF0
  9321                           postinc0	equ	0xFEE
  9322                           fsr0h	equ	0xFEA
  9323                           fsr0l	equ	0xFE9
  9324                           wreg	equ	0xFE8
  9325                           fsr1h	equ	0xFE2
  9326                           fsr1l	equ	0xFE1
  9327                           indf2	equ	0xFDF
  9328                           postinc2	equ	0xFDE
  9329                           postdec2	equ	0xFDD
  9330                           fsr2h	equ	0xFDA
  9331                           fsr2l	equ	0xFD9
  9332                           status	equ	0xFD8
  9333                           
  9334 ;; *************** function _pow *****************
  9335 ;; Defined at:
  9336 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;  x               3   81[COMRAM] int 
  9339 ;;  y               3   84[COMRAM] int 
  9340 ;; Auto vars:     Size  Location     Type
  9341 ;;  yi              4   94[COMRAM] unsigned long 
  9342 ;;  sign            1   93[COMRAM] unsigned char 
  9343 ;; Return value:  Size  Location     Type
  9344 ;;                  3   81[COMRAM] unsigned char 
  9345 ;; Registers used:
  9346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9352 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9353 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9355 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9356 ;;Total ram usage:       17 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    4
  9359 ;; This function calls:
  9360 ;;		___ftge
  9361 ;;		___ftmul
  9362 ;;		___ftneg
  9363 ;;		___fttol
  9364 ;;		___lltoft
  9365 ;;		_exp
  9366 ;;		_log
  9367 ;; This function is called by:
  9368 ;;		_dec_to_hex
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           	psect	text45
  9373  001024                     __ptext45:
  9374                           	opt stack 0
  9375  001024                     _pow:
  9376                           	opt stack 20
  9377                           
  9378                           ;incstack = 0
  9379  001024  0E00               	movlw	0
  9380  001026  6E5E               	movwf	pow@sign,c
  9381  001028  5052               	movf	pow@x,w,c
  9382  00102A  1053               	iorwf	pow@x+1,w,c
  9383  00102C  1054               	iorwf	pow@x+2,w,c
  9384  00102E  A4D8               	btfss	status,2,c
  9385  001030  D01C               	goto	i2l3781
  9386  001032  0E00               	movlw	0
  9387  001034  6E01               	movwf	___ftge@ff1,c
  9388  001036  0E00               	movlw	0
  9389  001038  6E02               	movwf	___ftge@ff1+1,c
  9390  00103A  0E00               	movlw	0
  9391  00103C  6E03               	movwf	___ftge@ff1+2,c
  9392  00103E  C055  F004         	movff	pow@y,___ftge@ff2
  9393  001042  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  9394  001046  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  9395  00104A  EC08  F012         	call	___ftge	;wreg free
  9396  00104E  A0D8               	btfss	status,0,c
  9397  001050  D005               	goto	i2l907
  9398  001052  0E00               	movlw	0
  9399  001054  0100               	movlb	0	; () banked
  9400  001056  6FCB               	movwf	(_errno+1)& (0+255),b
  9401  001058  0E21               	movlw	33
  9402  00105A  6FCA               	movwf	_errno& (0+255),b
  9403  00105C                     i2l907:
  9404  00105C  0E00               	movlw	0
  9405  00105E  6E52               	movwf	?_pow,c
  9406  001060  0E00               	movlw	0
  9407  001062  6E53               	movwf	?_pow+1,c
  9408  001064  0E00               	movlw	0
  9409  001066  6E54               	movwf	?_pow+2,c
  9410  001068  0012               	return	
  9411  00106A                     i2l3781:
  9412  00106A  5055               	movf	pow@y,w,c
  9413  00106C  1056               	iorwf	pow@y+1,w,c
  9414  00106E  1057               	iorwf	pow@y+2,w,c
  9415  001070  A4D8               	btfss	status,2,c
  9416  001072  D007               	goto	i2l3787
  9417  001074  0E00               	movlw	0
  9418  001076  6E52               	movwf	?_pow,c
  9419  001078  0E80               	movlw	128
  9420  00107A  6E53               	movwf	?_pow+1,c
  9421  00107C  0E3F               	movlw	63
  9422  00107E  6E54               	movwf	?_pow+2,c
  9423  001080  0012               	return	
  9424  001082                     i2l3787:
  9425  001082  AE54               	btfss	pow@x+2,7,c
  9426  001084  D041               	goto	i2l3799
  9427  001086  C055  F028         	movff	pow@y,___fttol@f1
  9428  00108A  C056  F029         	movff	pow@y+1,___fttol@f1+1
  9429  00108E  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  9430  001092  ECC4  F00B         	call	___fttol	;wreg free
  9431  001096  C028  F05F         	movff	?___fttol,pow@yi
  9432  00109A  C029  F060         	movff	?___fttol+1,pow@yi+1
  9433  00109E  C02A  F061         	movff	?___fttol+2,pow@yi+2
  9434  0010A2  C02B  F062         	movff	?___fttol+3,pow@yi+3
  9435  0010A6  C05F  F009         	movff	pow@yi,___lltoft@c
  9436  0010AA  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  9437  0010AE  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  9438  0010B2  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  9439  0010B6  ECCF  F013         	call	___lltoft	;wreg free
  9440  0010BA  5055               	movf	pow@y,w,c
  9441  0010BC  1809               	xorwf	?___lltoft,w,c
  9442  0010BE  E107               	bnz	i2u331_40
  9443  0010C0  5056               	movf	pow@y+1,w,c
  9444  0010C2  180A               	xorwf	?___lltoft+1,w,c
  9445  0010C4  E104               	bnz	i2u331_40
  9446  0010C6  5057               	movf	pow@y+2,w,c
  9447  0010C8  180B               	xorwf	?___lltoft+2,w,c
  9448  0010CA  B4D8               	btfsc	status,2,c
  9449  0010CC  D00C               	goto	i2l3795
  9450  0010CE                     i2u331_40:
  9451  0010CE  0E00               	movlw	0
  9452  0010D0  0100               	movlb	0	; () banked
  9453  0010D2  6FCB               	movwf	(_errno+1)& (0+255),b
  9454  0010D4  0E21               	movlw	33
  9455  0010D6  6FCA               	movwf	_errno& (0+255),b
  9456  0010D8  0E00               	movlw	0
  9457  0010DA  6E52               	movwf	?_pow,c
  9458  0010DC  0E00               	movlw	0
  9459  0010DE  6E53               	movwf	?_pow+1,c
  9460  0010E0  0E00               	movlw	0
  9461  0010E2  6E54               	movwf	?_pow+2,c
  9462                           
  9463                           ; BSR set to: 0
  9464  0010E4  0012               	return	
  9465  0010E6                     i2l3795:
  9466  0010E6  505F               	movf	pow@yi,w,c
  9467  0010E8  0B01               	andlw	1
  9468  0010EA  6E5E               	movwf	pow@sign,c
  9469  0010EC  C052  F001         	movff	pow@x,___ftneg@f1
  9470  0010F0  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9471  0010F4  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9472  0010F8  EC7F  F015         	call	___ftneg	;wreg free
  9473  0010FC  C001  F052         	movff	?___ftneg,pow@x
  9474  001100  C002  F053         	movff	?___ftneg+1,pow@x+1
  9475  001104  C003  F054         	movff	?___ftneg+2,pow@x+2
  9476  001108                     i2l3799:
  9477  001108  C052  F034         	movff	pow@x,log@x
  9478  00110C  C053  F035         	movff	pow@x+1,log@x+1
  9479  001110  C054  F036         	movff	pow@x+2,log@x+2
  9480  001114  ECB7  F00A         	call	_log	;wreg free
  9481  001118  C034  F058         	movff	?_log,_pow$1263
  9482  00111C  C035  F059         	movff	?_log+1,_pow$1263+1
  9483  001120  C036  F05A         	movff	?_log+2,_pow$1263+2
  9484  001124  C058  F00D         	movff	_pow$1263,___ftmul@f1
  9485  001128  C059  F00E         	movff	_pow$1263+1,___ftmul@f1+1
  9486  00112C  C05A  F00F         	movff	_pow$1263+2,___ftmul@f1+2
  9487  001130  C055  F010         	movff	pow@y,___ftmul@f2
  9488  001134  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  9489  001138  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  9490  00113C  EC3E  F00C         	call	___ftmul	;wreg free
  9491  001140  C00D  F05B         	movff	?___ftmul,_pow$1264
  9492  001144  C00E  F05C         	movff	?___ftmul+1,_pow$1264+1
  9493  001148  C00F  F05D         	movff	?___ftmul+2,_pow$1264+2
  9494  00114C  C05B  F049         	movff	_pow$1264,exp@x
  9495  001150  C05C  F04A         	movff	_pow$1264+1,exp@x+1
  9496  001154  C05D  F04B         	movff	_pow$1264+2,exp@x+2
  9497  001158  EC7E  F005         	call	_exp	;wreg free
  9498  00115C  C049  F052         	movff	?_exp,pow@x
  9499  001160  C04A  F053         	movff	?_exp+1,pow@x+1
  9500  001164  C04B  F054         	movff	?_exp+2,pow@x+2
  9501  001168  505E               	movf	pow@sign,w,c
  9502  00116A  B4D8               	btfsc	status,2,c
  9503  00116C  D00F               	goto	i2l912
  9504  00116E  C052  F001         	movff	pow@x,___ftneg@f1
  9505  001172  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9506  001176  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9507  00117A  EC7F  F015         	call	___ftneg	;wreg free
  9508  00117E  C001  F052         	movff	?___ftneg,?_pow
  9509  001182  C002  F053         	movff	?___ftneg+1,?_pow+1
  9510  001186  C003  F054         	movff	?___ftneg+2,?_pow+2
  9511  00118A  0012               	return	
  9512  00118C                     i2l912:
  9513  00118C  C052  F052         	movff	pow@x,?_pow
  9514  001190  C053  F053         	movff	pow@x+1,?_pow+1
  9515  001194  C054  F054         	movff	pow@x+2,?_pow+2
  9516  001198  0012               	return		;funcret
  9517  00119A                     __end_of_pow:
  9518                           	opt stack 0
  9519                           pclatu	equ	0xFFB
  9520                           pclath	equ	0xFFA
  9521                           tblptru	equ	0xFF8
  9522                           tblptrh	equ	0xFF7
  9523                           tblptrl	equ	0xFF6
  9524                           tablat	equ	0xFF5
  9525                           prodh	equ	0xFF4
  9526                           prodl	equ	0xFF3
  9527                           intcon	equ	0xFF2
  9528                           intcon2	equ	0xFF1
  9529                           intcon3	equ	0xFF0
  9530                           postinc0	equ	0xFEE
  9531                           fsr0h	equ	0xFEA
  9532                           fsr0l	equ	0xFE9
  9533                           wreg	equ	0xFE8
  9534                           fsr1h	equ	0xFE2
  9535                           fsr1l	equ	0xFE1
  9536                           indf2	equ	0xFDF
  9537                           postinc2	equ	0xFDE
  9538                           postdec2	equ	0xFDD
  9539                           fsr2h	equ	0xFDA
  9540                           fsr2l	equ	0xFD9
  9541                           status	equ	0xFD8
  9542                           
  9543 ;; *************** function _log *****************
  9544 ;; Defined at:
  9545 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;  x               3   51[COMRAM] unsigned char 
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;  exponent        2   54[COMRAM] int 
  9550 ;; Return value:  Size  Location     Type
  9551 ;;                  3   51[COMRAM] int 
  9552 ;; Registers used:
  9553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9559 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;Total ram usage:        5 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    3
  9566 ;; This function calls:
  9567 ;;		___awtoft
  9568 ;;		___ftadd
  9569 ;;		___ftmul
  9570 ;;		_eval_poly
  9571 ;;		_frexp
  9572 ;; This function is called by:
  9573 ;;		_pow
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           	psect	text46
  9578  00156E                     __ptext46:
  9579                           	opt stack 0
  9580  00156E                     _log:
  9581                           	opt stack 20
  9582                           
  9583                           ;incstack = 0
  9584  00156E  AE36               	btfss	log@x+2,7,c
  9585  001570  D00C               	goto	i2l3523
  9586  001572  0E00               	movlw	0
  9587  001574  0100               	movlb	0	; () banked
  9588  001576  6FCB               	movwf	(_errno+1)& (0+255),b
  9589  001578  0E21               	movlw	33
  9590  00157A  6FCA               	movwf	_errno& (0+255),b
  9591  00157C  0E00               	movlw	0
  9592  00157E  6E34               	movwf	?_log,c
  9593  001580  0E00               	movlw	0
  9594  001582  6E35               	movwf	?_log+1,c
  9595  001584  0E00               	movlw	0
  9596  001586  6E36               	movwf	?_log+2,c
  9597                           
  9598                           ; BSR set to: 0
  9599  001588  0012               	return	
  9600  00158A                     i2l3523:
  9601  00158A  5034               	movf	log@x,w,c
  9602  00158C  1035               	iorwf	log@x+1,w,c
  9603  00158E  1036               	iorwf	log@x+2,w,c
  9604  001590  A4D8               	btfss	status,2,c
  9605  001592  D00C               	goto	i2l3529
  9606  001594  0E00               	movlw	0
  9607  001596  0100               	movlb	0	; () banked
  9608  001598  6FCB               	movwf	(_errno+1)& (0+255),b
  9609  00159A  0E22               	movlw	34
  9610  00159C  6FCA               	movwf	_errno& (0+255),b
  9611  00159E  0E00               	movlw	0
  9612  0015A0  6E34               	movwf	?_log,c
  9613  0015A2  0E00               	movlw	0
  9614  0015A4  6E35               	movwf	?_log+1,c
  9615  0015A6  0E00               	movlw	0
  9616  0015A8  6E36               	movwf	?_log+2,c
  9617                           
  9618                           ; BSR set to: 0
  9619  0015AA  0012               	return	
  9620  0015AC                     i2l3529:
  9621  0015AC  0E00               	movlw	0
  9622  0015AE  6E10               	movwf	___ftmul@f2,c
  9623  0015B0  0E00               	movlw	0
  9624  0015B2  6E11               	movwf	___ftmul@f2+1,c
  9625  0015B4  0E40               	movlw	64
  9626  0015B6  6E12               	movwf	___ftmul@f2+2,c
  9627  0015B8  0E37               	movlw	low log@exponent
  9628  0015BA  6E04               	movwf	frexp@eptr,c
  9629  0015BC  0E00               	movlw	high log@exponent
  9630  0015BE  6E05               	movwf	frexp@eptr+1,c
  9631  0015C0  C034  F001         	movff	log@x,frexp@value
  9632  0015C4  C035  F002         	movff	log@x+1,frexp@value+1
  9633  0015C8  C036  F003         	movff	log@x+2,frexp@value+2
  9634  0015CC  ECC0  F011         	call	_frexp	;wreg free
  9635  0015D0  C001  F00D         	movff	?_frexp,___ftmul@f1
  9636  0015D4  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  9637  0015D8  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  9638  0015DC  EC3E  F00C         	call	___ftmul	;wreg free
  9639  0015E0  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9640  0015E4  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9641  0015E8  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9642  0015EC  0E00               	movlw	0
  9643  0015EE  6E1F               	movwf	___ftadd@f2,c
  9644  0015F0  0E80               	movlw	128
  9645  0015F2  6E20               	movwf	___ftadd@f2+1,c
  9646  0015F4  0EBF               	movlw	191
  9647  0015F6  6E21               	movwf	___ftadd@f2+2,c
  9648  0015F8  EC72  F006         	call	___ftadd	;wreg free
  9649  0015FC  C01C  F034         	movff	?___ftadd,log@x
  9650  001600  C01D  F035         	movff	?___ftadd+1,log@x+1
  9651  001604  C01E  F036         	movff	?___ftadd+2,log@x+2
  9652  001608  0637               	decf	log@exponent,f,c
  9653  00160A  A0D8               	btfss	status,0,c
  9654  00160C  0638               	decf	log@exponent+1,f,c
  9655  00160E  C034  F028         	movff	log@x,eval_poly@x
  9656  001612  C035  F029         	movff	log@x+1,eval_poly@x+1
  9657  001616  C036  F02A         	movff	log@x+2,eval_poly@x+2
  9658  00161A  0ED9               	movlw	low log@coeff
  9659  00161C  6E2B               	movwf	eval_poly@d,c
  9660  00161E  0EFD               	movlw	high log@coeff
  9661  001620  6E2C               	movwf	eval_poly@d+1,c
  9662  001622  0E00               	movlw	0
  9663  001624  6E2E               	movwf	eval_poly@n+1,c
  9664  001626  0E08               	movlw	8
  9665  001628  6E2D               	movwf	eval_poly@n,c
  9666  00162A  ECE8  F00E         	call	_eval_poly	;wreg free
  9667  00162E  C028  F034         	movff	?_eval_poly,log@x
  9668  001632  C029  F035         	movff	?_eval_poly+1,log@x+1
  9669  001636  C02A  F036         	movff	?_eval_poly+2,log@x+2
  9670  00163A  0E72               	movlw	114
  9671  00163C  6E10               	movwf	___ftmul@f2,c
  9672  00163E  0E31               	movlw	49
  9673  001640  6E11               	movwf	___ftmul@f2+1,c
  9674  001642  0E3F               	movlw	63
  9675  001644  6E12               	movwf	___ftmul@f2+2,c
  9676  001646  C037  F009         	movff	log@exponent,___awtoft@c
  9677  00164A  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  9678  00164E  ECDB  F014         	call	___awtoft	;wreg free
  9679  001652  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9680  001656  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9681  00165A  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9682  00165E  EC3E  F00C         	call	___ftmul	;wreg free
  9683  001662  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9684  001666  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9685  00166A  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9686  00166E  C034  F01F         	movff	log@x,___ftadd@f2
  9687  001672  C035  F020         	movff	log@x+1,___ftadd@f2+1
  9688  001676  C036  F021         	movff	log@x+2,___ftadd@f2+2
  9689  00167A  EC72  F006         	call	___ftadd	;wreg free
  9690  00167E  C01C  F034         	movff	?___ftadd,?_log
  9691  001682  C01D  F035         	movff	?___ftadd+1,?_log+1
  9692  001686  C01E  F036         	movff	?___ftadd+2,?_log+2
  9693  00168A  0012               	return	
  9694  00168C                     __end_of_log:
  9695                           	opt stack 0
  9696                           pclatu	equ	0xFFB
  9697                           pclath	equ	0xFFA
  9698                           tblptru	equ	0xFF8
  9699                           tblptrh	equ	0xFF7
  9700                           tblptrl	equ	0xFF6
  9701                           tablat	equ	0xFF5
  9702                           prodh	equ	0xFF4
  9703                           prodl	equ	0xFF3
  9704                           intcon	equ	0xFF2
  9705                           intcon2	equ	0xFF1
  9706                           intcon3	equ	0xFF0
  9707                           postinc0	equ	0xFEE
  9708                           fsr0h	equ	0xFEA
  9709                           fsr0l	equ	0xFE9
  9710                           wreg	equ	0xFE8
  9711                           fsr1h	equ	0xFE2
  9712                           fsr1l	equ	0xFE1
  9713                           indf2	equ	0xFDF
  9714                           postinc2	equ	0xFDE
  9715                           postdec2	equ	0xFDD
  9716                           fsr2h	equ	0xFDA
  9717                           fsr2l	equ	0xFD9
  9718                           status	equ	0xFD8
  9719                           
  9720 ;; *************** function _exp *****************
  9721 ;; Defined at:
  9722 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;  x               3   72[COMRAM] int 
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;  exponent        2   78[COMRAM] int 
  9727 ;;  sign            1   80[COMRAM] unsigned char 
  9728 ;; Return value:  Size  Location     Type
  9729 ;;                  3   72[COMRAM] unsigned char 
  9730 ;; Registers used:
  9731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9737 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;Total ram usage:        9 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    3
  9744 ;; This function calls:
  9745 ;;		___awtoft
  9746 ;;		___ftdiv
  9747 ;;		___ftge
  9748 ;;		___ftmul
  9749 ;;		___ftneg
  9750 ;;		___ftsub
  9751 ;;		___fttol
  9752 ;;		_eval_poly
  9753 ;;		_floor
  9754 ;;		_ldexp
  9755 ;; This function is called by:
  9756 ;;		_pow
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           	psect	text47
  9761  000AFC                     __ptext47:
  9762                           	opt stack 0
  9763  000AFC                     _exp:
  9764                           	opt stack 20
  9765                           
  9766                           ;incstack = 0
  9767  000AFC  5049               	movf	exp@x,w,c
  9768  000AFE  104A               	iorwf	exp@x+1,w,c
  9769  000B00  104B               	iorwf	exp@x+2,w,c
  9770  000B02  A4D8               	btfss	status,2,c
  9771  000B04  D007               	goto	i2l3545
  9772  000B06  0E00               	movlw	0
  9773  000B08  6E49               	movwf	?_exp,c
  9774  000B0A  0E80               	movlw	128
  9775  000B0C  6E4A               	movwf	?_exp+1,c
  9776  000B0E  0E3F               	movlw	63
  9777  000B10  6E4B               	movwf	?_exp+2,c
  9778  000B12  0012               	return	
  9779  000B14                     i2l3545:
  9780  000B14  0E72               	movlw	114
  9781  000B16  6E01               	movwf	___ftge@ff1,c
  9782  000B18  0E31               	movlw	49
  9783  000B1A  6E02               	movwf	___ftge@ff1+1,c
  9784  000B1C  0E44               	movlw	68
  9785  000B1E  6E03               	movwf	___ftge@ff1+2,c
  9786  000B20  C049  F004         	movff	exp@x,___ftge@ff2
  9787  000B24  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  9788  000B28  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  9789  000B2C  EC08  F012         	call	___ftge	;wreg free
  9790  000B30  B0D8               	btfsc	status,0,c
  9791  000B32  D00C               	goto	i2l3551
  9792  000B34  0E00               	movlw	0
  9793  000B36  0100               	movlb	0	; () banked
  9794  000B38  6FCB               	movwf	(_errno+1)& (0+255),b
  9795  000B3A  0E22               	movlw	34
  9796  000B3C  6FCA               	movwf	_errno& (0+255),b
  9797  000B3E  0EFF               	movlw	255
  9798  000B40  6E49               	movwf	?_exp,c
  9799  000B42  0E7F               	movlw	127
  9800  000B44  6E4A               	movwf	?_exp+1,c
  9801  000B46  0E7F               	movlw	127
  9802  000B48  6E4B               	movwf	?_exp+2,c
  9803                           
  9804                           ; BSR set to: 0
  9805  000B4A  0012               	return	
  9806  000B4C                     i2l3551:
  9807  000B4C  C049  F001         	movff	exp@x,___ftge@ff1
  9808  000B50  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  9809  000B54  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  9810  000B58  0E49               	movlw	73
  9811  000B5A  6E04               	movwf	___ftge@ff2,c
  9812  000B5C  0E3A               	movlw	58
  9813  000B5E  6E05               	movwf	___ftge@ff2+1,c
  9814  000B60  0EC4               	movlw	196
  9815  000B62  6E06               	movwf	___ftge@ff2+2,c
  9816  000B64  EC08  F012         	call	___ftge	;wreg free
  9817  000B68  B0D8               	btfsc	status,0,c
  9818  000B6A  D00C               	goto	i2l3557
  9819  000B6C  0E00               	movlw	0
  9820  000B6E  0100               	movlb	0	; () banked
  9821  000B70  6FCB               	movwf	(_errno+1)& (0+255),b
  9822  000B72  0E22               	movlw	34
  9823  000B74  6FCA               	movwf	_errno& (0+255),b
  9824  000B76  0E00               	movlw	0
  9825  000B78  6E49               	movwf	?_exp,c
  9826  000B7A  0E00               	movlw	0
  9827  000B7C  6E4A               	movwf	?_exp+1,c
  9828  000B7E  0E00               	movlw	0
  9829  000B80  6E4B               	movwf	?_exp+2,c
  9830                           
  9831                           ; BSR set to: 0
  9832  000B82  0012               	return	
  9833  000B84                     i2l3557:
  9834  000B84  AE4B               	btfss	exp@x+2,7,c
  9835  000B86  D002               	goto	i2u293_40
  9836  000B88  0E01               	movlw	1
  9837  000B8A  D001               	goto	i2u294_40
  9838  000B8C                     i2u293_40:
  9839  000B8C  0E00               	movlw	0
  9840  000B8E                     i2u294_40:
  9841  000B8E  6E51               	movwf	exp@sign,c
  9842  000B90  5051               	movf	exp@sign,w,c
  9843  000B92  B4D8               	btfsc	status,2,c
  9844  000B94  D00E               	goto	i2l1070
  9845  000B96  C049  F001         	movff	exp@x,___ftneg@f1
  9846  000B9A  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  9847  000B9E  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  9848  000BA2  EC7F  F015         	call	___ftneg	;wreg free
  9849  000BA6  C001  F049         	movff	?___ftneg,exp@x
  9850  000BAA  C002  F04A         	movff	?___ftneg+1,exp@x+1
  9851  000BAE  C003  F04B         	movff	?___ftneg+2,exp@x+2
  9852  000BB2                     i2l1070:
  9853  000BB2  C049  F00D         	movff	exp@x,___ftmul@f1
  9854  000BB6  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  9855  000BBA  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  9856  000BBE  0EAA               	movlw	170
  9857  000BC0  6E10               	movwf	___ftmul@f2,c
  9858  000BC2  0EB8               	movlw	184
  9859  000BC4  6E11               	movwf	___ftmul@f2+1,c
  9860  000BC6  0E3F               	movlw	63
  9861  000BC8  6E12               	movwf	___ftmul@f2+2,c
  9862  000BCA  EC3E  F00C         	call	___ftmul	;wreg free
  9863  000BCE  C00D  F049         	movff	?___ftmul,exp@x
  9864  000BD2  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  9865  000BD6  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  9866  000BDA  C049  F041         	movff	exp@x,floor@x
  9867  000BDE  C04A  F042         	movff	exp@x+1,floor@x+1
  9868  000BE2  C04B  F043         	movff	exp@x+2,floor@x+2
  9869  000BE6  ECA2  F00D         	call	_floor	;wreg free
  9870  000BEA  C041  F04C         	movff	?_floor,_exp$1265
  9871  000BEE  C042  F04D         	movff	?_floor+1,_exp$1265+1
  9872  000BF2  C043  F04E         	movff	?_floor+2,_exp$1265+2
  9873  000BF6  C04C  F028         	movff	_exp$1265,___fttol@f1
  9874  000BFA  C04D  F029         	movff	_exp$1265+1,___fttol@f1+1
  9875  000BFE  C04E  F02A         	movff	_exp$1265+2,___fttol@f1+2
  9876  000C02  ECC4  F00B         	call	___fttol	;wreg free
  9877  000C06  C028  F04F         	movff	?___fttol,exp@exponent
  9878  000C0A  C029  F050         	movff	?___fttol+1,exp@exponent+1
  9879  000C0E  C049  F028         	movff	exp@x,___ftsub@f1
  9880  000C12  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  9881  000C16  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  9882  000C1A  C04F  F009         	movff	exp@exponent,___awtoft@c
  9883  000C1E  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  9884  000C22  ECDB  F014         	call	___awtoft	;wreg free
  9885  000C26  C009  F02B         	movff	?___awtoft,___ftsub@f2
  9886  000C2A  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  9887  000C2E  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  9888  000C32  ECBB  F014         	call	___ftsub	;wreg free
  9889  000C36  C028  F049         	movff	?___ftsub,exp@x
  9890  000C3A  C029  F04A         	movff	?___ftsub+1,exp@x+1
  9891  000C3E  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  9892  000C42  C049  F028         	movff	exp@x,eval_poly@x
  9893  000C46  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  9894  000C4A  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  9895  000C4E  0EBB               	movlw	low exp@coeff
  9896  000C50  6E2B               	movwf	eval_poly@d,c
  9897  000C52  0EFD               	movlw	high exp@coeff
  9898  000C54  6E2C               	movwf	eval_poly@d+1,c
  9899  000C56  0E00               	movlw	0
  9900  000C58  6E2E               	movwf	eval_poly@n+1,c
  9901  000C5A  0E09               	movlw	9
  9902  000C5C  6E2D               	movwf	eval_poly@n,c
  9903  000C5E  ECE8  F00E         	call	_eval_poly	;wreg free
  9904  000C62  C028  F034         	movff	?_eval_poly,ldexp@value
  9905  000C66  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  9906  000C6A  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  9907  000C6E  C04F  F037         	movff	exp@exponent,ldexp@newexp
  9908  000C72  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  9909  000C76  EC51  F00F         	call	_ldexp	;wreg free
  9910  000C7A  C034  F049         	movff	?_ldexp,exp@x
  9911  000C7E  C035  F04A         	movff	?_ldexp+1,exp@x+1
  9912  000C82  C036  F04B         	movff	?_ldexp+2,exp@x+2
  9913  000C86  5051               	movf	exp@sign,w,c
  9914  000C88  B4D8               	btfsc	status,2,c
  9915  000C8A  D025               	goto	i2l1071
  9916  000C8C  2849               	incf	exp@x,w,c
  9917  000C8E  E10E               	bnz	i2l3579
  9918  000C90  0E7F               	movlw	127
  9919  000C92  184A               	xorwf	exp@x+1,w,c
  9920  000C94  E10B               	bnz	i2l3579
  9921  000C96  0E7F               	movlw	127
  9922  000C98  184B               	xorwf	exp@x+2,w,c
  9923  000C9A  A4D8               	btfss	status,2,c
  9924  000C9C  D007               	goto	i2l3579
  9925  000C9E  0E00               	movlw	0
  9926  000CA0  6E49               	movwf	?_exp,c
  9927  000CA2  0E00               	movlw	0
  9928  000CA4  6E4A               	movwf	?_exp+1,c
  9929  000CA6  0E00               	movlw	0
  9930  000CA8  6E4B               	movwf	?_exp+2,c
  9931  000CAA  0012               	return	
  9932  000CAC                     i2l3579:
  9933  000CAC  0E00               	movlw	0
  9934  000CAE  6E09               	movwf	___ftdiv@f1,c
  9935  000CB0  0E80               	movlw	128
  9936  000CB2  6E0A               	movwf	___ftdiv@f1+1,c
  9937  000CB4  0E3F               	movlw	63
  9938  000CB6  6E0B               	movwf	___ftdiv@f1+2,c
  9939  000CB8  C049  F00C         	movff	exp@x,___ftdiv@f2
  9940  000CBC  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  9941  000CC0  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  9942  000CC4  EC2F  F00D         	call	___ftdiv	;wreg free
  9943  000CC8  C009  F049         	movff	?___ftdiv,?_exp
  9944  000CCC  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  9945  000CD0  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  9946  000CD4  0012               	return	
  9947  000CD6                     i2l1071:
  9948  000CD6  C049  F049         	movff	exp@x,?_exp
  9949  000CDA  C04A  F04A         	movff	exp@x+1,?_exp+1
  9950  000CDE  C04B  F04B         	movff	exp@x+2,?_exp+2
  9951  000CE2  0012               	return		;funcret
  9952  000CE4                     __end_of_exp:
  9953                           	opt stack 0
  9954                           pclatu	equ	0xFFB
  9955                           pclath	equ	0xFFA
  9956                           tblptru	equ	0xFF8
  9957                           tblptrh	equ	0xFF7
  9958                           tblptrl	equ	0xFF6
  9959                           tablat	equ	0xFF5
  9960                           prodh	equ	0xFF4
  9961                           prodl	equ	0xFF3
  9962                           intcon	equ	0xFF2
  9963                           intcon2	equ	0xFF1
  9964                           intcon3	equ	0xFF0
  9965                           postinc0	equ	0xFEE
  9966                           fsr0h	equ	0xFEA
  9967                           fsr0l	equ	0xFE9
  9968                           wreg	equ	0xFE8
  9969                           fsr1h	equ	0xFE2
  9970                           fsr1l	equ	0xFE1
  9971                           indf2	equ	0xFDF
  9972                           postinc2	equ	0xFDE
  9973                           postdec2	equ	0xFDD
  9974                           fsr2h	equ	0xFDA
  9975                           fsr2l	equ	0xFD9
  9976                           status	equ	0xFD8
  9977                           
  9978 ;; *************** function _ldexp *****************
  9979 ;; Defined at:
  9980 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  9981 ;; Parameters:    Size  Location     Type
  9982 ;;  value           3   51[COMRAM] unsigned char 
  9983 ;;  newexp          2   54[COMRAM] int 
  9984 ;; Auto vars:     Size  Location     Type
  9985 ;;		None
  9986 ;; Return value:  Size  Location     Type
  9987 ;;                  3   51[COMRAM] int 
  9988 ;; Registers used:
  9989 ;;		wreg, status,2, status,0
  9990 ;; Tracked objects:
  9991 ;;		On entry : 0/0
  9992 ;;		On exit  : 0/0
  9993 ;;		Unchanged: 0/0
  9994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9995 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9997 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9998 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;Total ram usage:        7 bytes
 10000 ;; Hardware stack levels used:    1
 10001 ;; This function calls:
 10002 ;;		Nothing
 10003 ;; This function is called by:
 10004 ;;		_exp
 10005 ;; This function uses a non-reentrant model
 10006 ;;
 10007                           
 10008                           	psect	text48
 10009  001EA2                     __ptext48:
 10010                           	opt stack 0
 10011  001EA2                     _ldexp:
 10012                           	opt stack 22
 10013                           
 10014                           ;incstack = 0
 10015  001EA2  5034               	movf	ldexp@value,w,c
 10016  001EA4  1035               	iorwf	ldexp@value+1,w,c
 10017  001EA6  1036               	iorwf	ldexp@value+2,w,c
 10018  001EA8  A4D8               	btfss	status,2,c
 10019  001EAA  D007               	goto	i2l3391
 10020  001EAC  0E00               	movlw	0
 10021  001EAE  6E34               	movwf	?_ldexp,c
 10022  001EB0  0E00               	movlw	0
 10023  001EB2  6E35               	movwf	?_ldexp+1,c
 10024  001EB4  0E00               	movlw	0
 10025  001EB6  6E36               	movwf	?_ldexp+2,c
 10026  001EB8  0012               	return	
 10027  001EBA                     i2l3391:
 10028  001EBA  5036               	movf	ldexp@value+2,w,c
 10029  001EBC  0B7F               	andlw	127
 10030  001EBE  6E39               	movwf	??_ldexp& (0+255),c
 10031  001EC0  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 10032  001EC2  90D8               	bcf	status,0,c
 10033  001EC4  3639               	rlcf	??_ldexp,f,c
 10034  001EC6  363A               	rlcf	??_ldexp+1,f,c
 10035  001EC8  5039               	movf	??_ldexp,w,c
 10036  001ECA  2637               	addwf	ldexp@newexp,f,c
 10037  001ECC  503A               	movf	??_ldexp+1,w,c
 10038  001ECE  2238               	addwfc	ldexp@newexp+1,f,c
 10039  001ED0  AE35               	btfss	ldexp@value+1,7,c
 10040  001ED2  D003               	goto	i2u273_40
 10041  001ED4  6A39               	clrf	??_ldexp& (0+255),c
 10042  001ED6  2A39               	incf	??_ldexp& (0+255),f,c
 10043  001ED8  D001               	goto	i2u273_48
 10044  001EDA                     i2u273_40:
 10045  001EDA  6A39               	clrf	??_ldexp& (0+255),c
 10046  001EDC                     i2u273_48:
 10047  001EDC  5039               	movf	??_ldexp,w,c
 10048  001EDE  2637               	addwf	ldexp@newexp,f,c
 10049  001EE0  0E00               	movlw	0
 10050  001EE2  2238               	addwfc	ldexp@newexp+1,f,c
 10051  001EE4  AE38               	btfss	ldexp@newexp+1,7,c
 10052  001EE6  D00C               	goto	i2l3399
 10053  001EE8  0E00               	movlw	0
 10054  001EEA  0100               	movlb	0	; () banked
 10055  001EEC  6FCB               	movwf	(_errno+1)& (0+255),b
 10056  001EEE  0E22               	movlw	34
 10057  001EF0  6FCA               	movwf	_errno& (0+255),b
 10058  001EF2  0E00               	movlw	0
 10059  001EF4  6E34               	movwf	?_ldexp,c
 10060  001EF6  0E00               	movlw	0
 10061  001EF8  6E35               	movwf	?_ldexp+1,c
 10062  001EFA  0E00               	movlw	0
 10063  001EFC                     L8:
 10064  001EFC  6E36               	movwf	?_ldexp+2,c
 10065                           
 10066                           ; BSR set to: 0
 10067  001EFE  0012               	return	
 10068  001F00                     i2l3399:
 10069  001F00  BE38               	btfsc	ldexp@newexp+1,7,c
 10070  001F02  D016               	goto	i2l3415
 10071  001F04  0438               	decf	ldexp@newexp+1,w,c
 10072  001F06  A0D8               	btfss	status,0,c
 10073  001F08  D013               	goto	i2l3415
 10074  001F0A  0E00               	movlw	0
 10075  001F0C  0100               	movlb	0	; () banked
 10076  001F0E  6FCB               	movwf	(_errno+1)& (0+255),b
 10077  001F10  0E22               	movlw	34
 10078  001F12  6FCA               	movwf	_errno& (0+255),b
 10079                           
 10080                           ; BSR set to: 0
 10081  001F14  AE36               	btfss	ldexp@value+2,7,c
 10082  001F16  D006               	goto	i2l3411
 10083                           
 10084                           ; BSR set to: 0
 10085  001F18  0EFF               	movlw	255
 10086  001F1A  6E34               	movwf	?_ldexp,c
 10087  001F1C  0E7F               	movlw	127
 10088  001F1E  6E35               	movwf	?_ldexp+1,c
 10089  001F20  0EFF               	movlw	255
 10090  001F22  D7EC               	goto	L8
 10091  001F24                     i2l3411:
 10092                           
 10093                           ; BSR set to: 0
 10094  001F24  0EFF               	movlw	255
 10095  001F26  6E34               	movwf	?_ldexp,c
 10096  001F28  0E7F               	movlw	127
 10097  001F2A  6E35               	movwf	?_ldexp+1,c
 10098  001F2C  0E7F               	movlw	127
 10099  001F2E  D7E6               	goto	L8
 10100  001F30                     i2l3415:
 10101  001F30  3438               	rlcf	ldexp@newexp+1,w,c
 10102  001F32  3038               	rrcf	ldexp@newexp+1,w,c
 10103  001F34  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 10104  001F36  3037               	rrcf	ldexp@newexp,w,c
 10105  001F38  6E39               	movwf	??_ldexp& (0+255),c
 10106  001F3A  5036               	movf	ldexp@value+2,w,c
 10107  001F3C  1839               	xorwf	??_ldexp,w,c
 10108  001F3E  0B80               	andlw	-128
 10109  001F40  1839               	xorwf	??_ldexp,w,c
 10110  001F42  6E36               	movwf	ldexp@value+2,c
 10111  001F44  C037  F039         	movff	ldexp@newexp,??_ldexp
 10112  001F48  0E01               	movlw	1
 10113  001F4A  1639               	andwf	??_ldexp,f,c
 10114  001F4C  3239               	rrcf	??_ldexp,f,c
 10115  001F4E  3239               	rrcf	??_ldexp,f,c
 10116  001F50  5035               	movf	ldexp@value+1,w,c
 10117  001F52  1839               	xorwf	??_ldexp,w,c
 10118  001F54  0B7F               	andlw	-129
 10119  001F56  1839               	xorwf	??_ldexp,w,c
 10120  001F58  6E35               	movwf	ldexp@value+1,c
 10121  001F5A  C034  F034         	movff	ldexp@value,?_ldexp
 10122  001F5E  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 10123  001F62  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 10124  001F66  0012               	return	
 10125  001F68                     __end_of_ldexp:
 10126                           	opt stack 0
 10127                           pclatu	equ	0xFFB
 10128                           pclath	equ	0xFFA
 10129                           tblptru	equ	0xFF8
 10130                           tblptrh	equ	0xFF7
 10131                           tblptrl	equ	0xFF6
 10132                           tablat	equ	0xFF5
 10133                           prodh	equ	0xFF4
 10134                           prodl	equ	0xFF3
 10135                           intcon	equ	0xFF2
 10136                           intcon2	equ	0xFF1
 10137                           intcon3	equ	0xFF0
 10138                           postinc0	equ	0xFEE
 10139                           fsr0h	equ	0xFEA
 10140                           fsr0l	equ	0xFE9
 10141                           wreg	equ	0xFE8
 10142                           fsr1h	equ	0xFE2
 10143                           fsr1l	equ	0xFE1
 10144                           indf2	equ	0xFDF
 10145                           postinc2	equ	0xFDE
 10146                           postdec2	equ	0xFDD
 10147                           fsr2h	equ	0xFDA
 10148                           fsr2l	equ	0xFD9
 10149                           status	equ	0xFD8
 10150                           
 10151 ;; *************** function _floor *****************
 10152 ;; Defined at:
 10153 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;  x               3   64[COMRAM] int 
 10156 ;; Auto vars:     Size  Location     Type
 10157 ;;  i               3   67[COMRAM] int 
 10158 ;;  expon           2   70[COMRAM] int 
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  3   64[COMRAM] int 
 10161 ;; Registers used:
 10162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10168 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10169 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10171 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10172 ;;Total ram usage:        8 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    2
 10175 ;; This function calls:
 10176 ;;		___altoft
 10177 ;;		___ftadd
 10178 ;;		___ftge
 10179 ;;		___fttol
 10180 ;;		_frexp
 10181 ;; This function is called by:
 10182 ;;		_exp
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           	psect	text49
 10187  001B44                     __ptext49:
 10188                           	opt stack 0
 10189  001B44                     _floor:
 10190                           	opt stack 20
 10191                           
 10192                           ;incstack = 0
 10193  001B44  C041  F001         	movff	floor@x,frexp@value
 10194  001B48  C042  F002         	movff	floor@x+1,frexp@value+1
 10195  001B4C  C043  F003         	movff	floor@x+2,frexp@value+2
 10196  001B50  0E47               	movlw	low floor@expon
 10197  001B52  6E04               	movwf	frexp@eptr,c
 10198  001B54  0E00               	movlw	high floor@expon
 10199  001B56  6E05               	movwf	frexp@eptr+1,c
 10200  001B58  ECC0  F011         	call	_frexp	;wreg free
 10201  001B5C  AE48               	btfss	floor@expon+1,7,c
 10202  001B5E  D010               	goto	i2l3369
 10203  001B60  AE43               	btfss	floor@x+2,7,c
 10204  001B62  D007               	goto	i2l3365
 10205  001B64  0E00               	movlw	0
 10206  001B66  6E41               	movwf	?_floor,c
 10207  001B68  0E80               	movlw	128
 10208  001B6A  6E42               	movwf	?_floor+1,c
 10209  001B6C  0EBF               	movlw	191
 10210  001B6E  6E43               	movwf	?_floor+2,c
 10211  001B70  0012               	return	
 10212  001B72                     i2l3365:
 10213  001B72  0E00               	movlw	0
 10214  001B74  6E41               	movwf	?_floor,c
 10215  001B76  0E00               	movlw	0
 10216  001B78  6E42               	movwf	?_floor+1,c
 10217  001B7A  0E00               	movlw	0
 10218  001B7C  6E43               	movwf	?_floor+2,c
 10219  001B7E  0012               	return	
 10220  001B80                     i2l3369:
 10221  001B80  5048               	movf	floor@expon+1,w,c
 10222  001B82  E104               	bnz	i2u269_40
 10223  001B84  0E15               	movlw	21
 10224  001B86  5C47               	subwf	floor@expon,w,c
 10225  001B88  A0D8               	btfss	status,0,c
 10226  001B8A  D007               	goto	i2l3373
 10227  001B8C                     i2u269_40:
 10228  001B8C  C041  F041         	movff	floor@x,?_floor
 10229  001B90  C042  F042         	movff	floor@x+1,?_floor+1
 10230  001B94  C043  F043         	movff	floor@x+2,?_floor+2
 10231  001B98  0012               	return	
 10232  001B9A                     i2l3373:
 10233  001B9A  C041  F028         	movff	floor@x,___fttol@f1
 10234  001B9E  C042  F029         	movff	floor@x+1,___fttol@f1+1
 10235  001BA2  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 10236  001BA6  ECC4  F00B         	call	___fttol	;wreg free
 10237  001BAA  C028  F037         	movff	?___fttol,___altoft@c
 10238  001BAE  C029  F038         	movff	?___fttol+1,___altoft@c+1
 10239  001BB2  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 10240  001BB6  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 10241  001BBA  ECCE  F012         	call	___altoft	;wreg free
 10242  001BBE  C037  F044         	movff	?___altoft,floor@i
 10243  001BC2  C038  F045         	movff	?___altoft+1,floor@i+1
 10244  001BC6  C039  F046         	movff	?___altoft+2,floor@i+2
 10245  001BCA  C041  F001         	movff	floor@x,___ftge@ff1
 10246  001BCE  C042  F002         	movff	floor@x+1,___ftge@ff1+1
 10247  001BD2  C043  F003         	movff	floor@x+2,___ftge@ff1+2
 10248  001BD6  C044  F004         	movff	floor@i,___ftge@ff2
 10249  001BDA  C045  F005         	movff	floor@i+1,___ftge@ff2+1
 10250  001BDE  C046  F006         	movff	floor@i+2,___ftge@ff2+2
 10251  001BE2  EC08  F012         	call	___ftge	;wreg free
 10252  001BE6  B0D8               	btfsc	status,0,c
 10253  001BE8  D015               	goto	i2l1081
 10254  001BEA  C044  F01C         	movff	floor@i,___ftadd@f1
 10255  001BEE  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 10256  001BF2  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 10257  001BF6  0E00               	movlw	0
 10258  001BF8  6E1F               	movwf	___ftadd@f2,c
 10259  001BFA  0E80               	movlw	128
 10260  001BFC  6E20               	movwf	___ftadd@f2+1,c
 10261  001BFE  0EBF               	movlw	191
 10262  001C00  6E21               	movwf	___ftadd@f2+2,c
 10263  001C02  EC72  F006         	call	___ftadd	;wreg free
 10264  001C06  C01C  F041         	movff	?___ftadd,?_floor
 10265  001C0A  C01D  F042         	movff	?___ftadd+1,?_floor+1
 10266  001C0E  C01E  F043         	movff	?___ftadd+2,?_floor+2
 10267  001C12  0012               	return	
 10268  001C14                     i2l1081:
 10269  001C14  C044  F041         	movff	floor@i,?_floor
 10270  001C18  C045  F042         	movff	floor@i+1,?_floor+1
 10271  001C1C  C046  F043         	movff	floor@i+2,?_floor+2
 10272  001C20  0012               	return		;funcret
 10273  001C22                     __end_of_floor:
 10274                           	opt stack 0
 10275                           pclatu	equ	0xFFB
 10276                           pclath	equ	0xFFA
 10277                           tblptru	equ	0xFF8
 10278                           tblptrh	equ	0xFF7
 10279                           tblptrl	equ	0xFF6
 10280                           tablat	equ	0xFF5
 10281                           prodh	equ	0xFF4
 10282                           prodl	equ	0xFF3
 10283                           intcon	equ	0xFF2
 10284                           intcon2	equ	0xFF1
 10285                           intcon3	equ	0xFF0
 10286                           postinc0	equ	0xFEE
 10287                           fsr0h	equ	0xFEA
 10288                           fsr0l	equ	0xFE9
 10289                           wreg	equ	0xFE8
 10290                           fsr1h	equ	0xFE2
 10291                           fsr1l	equ	0xFE1
 10292                           indf2	equ	0xFDF
 10293                           postinc2	equ	0xFDE
 10294                           postdec2	equ	0xFDD
 10295                           fsr2h	equ	0xFDA
 10296                           fsr2l	equ	0xFD9
 10297                           status	equ	0xFD8
 10298                           
 10299 ;; *************** function _frexp *****************
 10300 ;; Defined at:
 10301 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;  value           3    0[COMRAM] int 
 10304 ;;  eptr            2    3[COMRAM] PTR int 
 10305 ;;		 -> log@exponent(2), floor@expon(2), 
 10306 ;; Auto vars:     Size  Location     Type
 10307 ;;		None
 10308 ;; Return value:  Size  Location     Type
 10309 ;;                  3    0[COMRAM] PTR int 
 10310 ;; Registers used:
 10311 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10312 ;; Tracked objects:
 10313 ;;		On entry : 0/0
 10314 ;;		On exit  : 0/0
 10315 ;;		Unchanged: 0/0
 10316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10317 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10319 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10320 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10321 ;;Total ram usage:        7 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; This function calls:
 10324 ;;		Nothing
 10325 ;; This function is called by:
 10326 ;;		_floor
 10327 ;;		_log
 10328 ;; This function uses a non-reentrant model
 10329 ;;
 10330                           
 10331                           	psect	text50
 10332  002380                     __ptext50:
 10333                           	opt stack 0
 10334  002380                     _frexp:
 10335                           	opt stack 22
 10336                           
 10337                           ;incstack = 0
 10338  002380  5001               	movf	frexp@value,w,c
 10339  002382  1002               	iorwf	frexp@value+1,w,c
 10340  002384  1003               	iorwf	frexp@value+2,w,c
 10341  002386  A4D8               	btfss	status,2,c
 10342  002388  D00F               	goto	i2l3245
 10343  00238A  C004  FFD9         	movff	frexp@eptr,fsr2l
 10344  00238E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10345  002392  0E00               	movlw	0
 10346  002394  6EDE               	movwf	postinc2,c
 10347  002396  0E00               	movlw	0
 10348  002398  6EDD               	movwf	postdec2,c
 10349  00239A  0E00               	movlw	0
 10350  00239C  6E01               	movwf	?_frexp,c
 10351  00239E  0E00               	movlw	0
 10352  0023A0  6E02               	movwf	?_frexp+1,c
 10353  0023A2  0E00               	movlw	0
 10354  0023A4  6E03               	movwf	?_frexp+2,c
 10355  0023A6  0012               	return	
 10356  0023A8                     i2l3245:
 10357  0023A8  5003               	movf	frexp@value+2,w,c
 10358  0023AA  0B7F               	andlw	127
 10359  0023AC  6E06               	movwf	??_frexp& (0+255),c
 10360  0023AE  6A07               	clrf	(??_frexp+1)& (0+255),c
 10361  0023B0  90D8               	bcf	status,0,c
 10362  0023B2  3606               	rlcf	??_frexp,f,c
 10363  0023B4  3607               	rlcf	??_frexp+1,f,c
 10364  0023B6  C004  FFD9         	movff	frexp@eptr,fsr2l
 10365  0023BA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10366  0023BE  C006  FFDE         	movff	??_frexp,postinc2
 10367  0023C2  C007  FFDD         	movff	??_frexp+1,postdec2
 10368  0023C6  AE02               	btfss	frexp@value+1,7,c
 10369  0023C8  D003               	goto	i2u256_40
 10370  0023CA  6A06               	clrf	??_frexp& (0+255),c
 10371  0023CC  2A06               	incf	??_frexp& (0+255),f,c
 10372  0023CE  D001               	goto	i2u256_48
 10373  0023D0                     i2u256_40:
 10374  0023D0  6A06               	clrf	??_frexp& (0+255),c
 10375  0023D2                     i2u256_48:
 10376  0023D2  5006               	movf	??_frexp,w,c
 10377  0023D4  C004  FFD9         	movff	frexp@eptr,fsr2l
 10378  0023D8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10379  0023DC  12DE               	iorwf	postinc2,f,c
 10380  0023DE  0E00               	movlw	0
 10381  0023E0  12DD               	iorwf	postdec2,f,c
 10382  0023E2  C004  FFD9         	movff	frexp@eptr,fsr2l
 10383  0023E6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10384  0023EA  0E82               	movlw	130
 10385  0023EC  26DE               	addwf	postinc2,f,c
 10386  0023EE  0EFF               	movlw	255
 10387  0023F0  22DD               	addwfc	postdec2,f,c
 10388  0023F2  8003               	bsf	frexp@value+2,0,c
 10389  0023F4  8203               	bsf	frexp@value+2,1,c
 10390  0023F6  8403               	bsf	frexp@value+2,2,c
 10391  0023F8  8603               	bsf	frexp@value+2,3,c
 10392  0023FA  8803               	bsf	frexp@value+2,4,c
 10393  0023FC  8A03               	bsf	frexp@value+2,5,c
 10394  0023FE  9C03               	bcf	frexp@value+2,6,c
 10395  002400  9E02               	bcf	frexp@value+1,7,c
 10396  002402  C001  F001         	movff	frexp@value,?_frexp
 10397  002406  C002  F002         	movff	frexp@value+1,?_frexp+1
 10398  00240A  C003  F003         	movff	frexp@value+2,?_frexp+2
 10399  00240E  0012               	return	
 10400  002410                     __end_of_frexp:
 10401                           	opt stack 0
 10402                           pclatu	equ	0xFFB
 10403                           pclath	equ	0xFFA
 10404                           tblptru	equ	0xFF8
 10405                           tblptrh	equ	0xFF7
 10406                           tblptrl	equ	0xFF6
 10407                           tablat	equ	0xFF5
 10408                           prodh	equ	0xFF4
 10409                           prodl	equ	0xFF3
 10410                           intcon	equ	0xFF2
 10411                           intcon2	equ	0xFF1
 10412                           intcon3	equ	0xFF0
 10413                           postinc0	equ	0xFEE
 10414                           fsr0h	equ	0xFEA
 10415                           fsr0l	equ	0xFE9
 10416                           wreg	equ	0xFE8
 10417                           fsr1h	equ	0xFE2
 10418                           fsr1l	equ	0xFE1
 10419                           indf2	equ	0xFDF
 10420                           postinc2	equ	0xFDE
 10421                           postdec2	equ	0xFDD
 10422                           fsr2h	equ	0xFDA
 10423                           fsr2l	equ	0xFD9
 10424                           status	equ	0xFD8
 10425                           
 10426 ;; *************** function ___fttol *****************
 10427 ;; Defined at:
 10428 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;  f1              3   39[COMRAM] float 
 10431 ;; Auto vars:     Size  Location     Type
 10432 ;;  lval            4   49[COMRAM] unsigned long 
 10433 ;;  exp1            1   53[COMRAM] unsigned char 
 10434 ;;  sign1           1   48[COMRAM] unsigned char 
 10435 ;; Return value:  Size  Location     Type
 10436 ;;                  4   39[COMRAM] long 
 10437 ;; Registers used:
 10438 ;;		wreg, status,2, status,0
 10439 ;; Tracked objects:
 10440 ;;		On entry : 0/0
 10441 ;;		On exit  : 0/0
 10442 ;;		Unchanged: 0/0
 10443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10444 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10445 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10446 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;Total ram usage:       15 bytes
 10449 ;; Hardware stack levels used:    1
 10450 ;; This function calls:
 10451 ;;		Nothing
 10452 ;; This function is called by:
 10453 ;;		_dec_to_hex
 10454 ;;		_pow
 10455 ;;		_exp
 10456 ;;		_floor
 10457 ;; This function uses a non-reentrant model
 10458 ;;
 10459                           
 10460                           	psect	text51
 10461  001788                     __ptext51:
 10462                           	opt stack 0
 10463  001788                     ___fttol:
 10464                           	opt stack 21
 10465                           
 10466                           ;incstack = 0
 10467  001788  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 10468  00178C  6A2D               	clrf	(??___fttol+1)& (0+255),c
 10469  00178E  6A2E               	clrf	(??___fttol+2)& (0+255),c
 10470  001790  3429               	rlcf	___fttol@f1+1,w,c
 10471  001792  362C               	rlcf	??___fttol& (0+255),f,c
 10472  001794  E301               	bnc	u247_41
 10473  001796  802D               	bsf	(??___fttol+1)& (0+255),0,c
 10474  001798                     u247_41:
 10475  001798  502C               	movf	??___fttol,w,c
 10476  00179A  6E36               	movwf	___fttol@exp1,c
 10477  00179C  5036               	movf	___fttol@exp1,w,c
 10478  00179E  A4D8               	btfss	status,2,c
 10479  0017A0  D009               	goto	i2l3197
 10480  0017A2  0E00               	movlw	0
 10481  0017A4  6E28               	movwf	?___fttol,c
 10482  0017A6  0E00               	movlw	0
 10483  0017A8  6E29               	movwf	?___fttol+1,c
 10484  0017AA  0E00               	movlw	0
 10485  0017AC  6E2A               	movwf	?___fttol+2,c
 10486  0017AE  0E00               	movlw	0
 10487  0017B0  6E2B               	movwf	?___fttol+3,c
 10488  0017B2  0012               	return	
 10489  0017B4                     i2l3197:
 10490  0017B4  0E17               	movlw	23
 10491  0017B6  6E2C               	movwf	??___fttol& (0+255),c
 10492  0017B8  C028  F02D         	movff	___fttol@f1,??___fttol+1
 10493  0017BC  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 10494  0017C0  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 10495  0017C4  282C               	incf	??___fttol,w,c
 10496  0017C6  6E30               	movwf	(??___fttol+4)& (0+255),c
 10497  0017C8  D004               	goto	i2u249_40
 10498  0017CA                     i2u249_45:
 10499  0017CA  90D8               	bcf	status,0,c
 10500  0017CC  322F               	rrcf	??___fttol+3,f,c
 10501  0017CE  322E               	rrcf	??___fttol+2,f,c
 10502  0017D0  322D               	rrcf	??___fttol+1,f,c
 10503  0017D2                     i2u249_40:
 10504  0017D2  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 10505  0017D4  D7FA               	goto	i2u249_45
 10506  0017D6  502D               	movf	??___fttol+1,w,c
 10507  0017D8  6E31               	movwf	___fttol@sign1,c
 10508  0017DA  8E29               	bsf	___fttol@f1+1,7,c
 10509  0017DC  0EFF               	movlw	255
 10510  0017DE  1628               	andwf	___fttol@f1,f,c
 10511  0017E0  0EFF               	movlw	255
 10512  0017E2  1629               	andwf	___fttol@f1+1,f,c
 10513  0017E4  0E00               	movlw	0
 10514  0017E6  162A               	andwf	___fttol@f1+2,f,c
 10515  0017E8  5028               	movf	___fttol@f1,w,c
 10516  0017EA  6E32               	movwf	___fttol@lval,c
 10517  0017EC  5029               	movf	___fttol@f1+1,w,c
 10518  0017EE  6E33               	movwf	___fttol@lval+1,c
 10519  0017F0  502A               	movf	___fttol@f1+2,w,c
 10520  0017F2  6E34               	movwf	___fttol@lval+2,c
 10521  0017F4  6A35               	clrf	___fttol@lval+3,c
 10522  0017F6  0E8E               	movlw	142
 10523  0017F8  5E36               	subwf	___fttol@exp1,f,c
 10524  0017FA  AE36               	btfss	___fttol@exp1,7,c
 10525  0017FC  D016               	goto	i2l3219
 10526  0017FE  5036               	movf	___fttol@exp1,w,c
 10527  001800  0A80               	xorlw	128
 10528  001802  0F8F               	addlw	143
 10529  001804  B0D8               	btfsc	status,0,c
 10530  001806  D009               	goto	i2l3215
 10531  001808  0E00               	movlw	0
 10532  00180A  6E28               	movwf	?___fttol,c
 10533  00180C  0E00               	movlw	0
 10534  00180E  6E29               	movwf	?___fttol+1,c
 10535  001810  0E00               	movlw	0
 10536  001812  6E2A               	movwf	?___fttol+2,c
 10537  001814  0E00               	movlw	0
 10538  001816  6E2B               	movwf	?___fttol+3,c
 10539  001818  0012               	return	
 10540  00181A                     i2l3215:
 10541  00181A  90D8               	bcf	status,0,c
 10542  00181C  3235               	rrcf	___fttol@lval+3,f,c
 10543  00181E  3234               	rrcf	___fttol@lval+2,f,c
 10544  001820  3233               	rrcf	___fttol@lval+1,f,c
 10545  001822  3232               	rrcf	___fttol@lval,f,c
 10546  001824  3E36               	incfsz	___fttol@exp1,f,c
 10547  001826  D7F9               	goto	i2l3215
 10548  001828  D015               	goto	i2l3229
 10549  00182A                     i2l3219:
 10550  00182A  0E17               	movlw	23
 10551  00182C  6436               	cpfsgt	___fttol@exp1,c
 10552  00182E  D00F               	goto	i2l3227
 10553  001830  0E00               	movlw	0
 10554  001832  6E28               	movwf	?___fttol,c
 10555  001834  0E00               	movlw	0
 10556  001836  6E29               	movwf	?___fttol+1,c
 10557  001838  0E00               	movlw	0
 10558  00183A  6E2A               	movwf	?___fttol+2,c
 10559  00183C  0E00               	movlw	0
 10560  00183E  6E2B               	movwf	?___fttol+3,c
 10561  001840  0012               	return	
 10562  001842                     i2l3225:
 10563  001842  90D8               	bcf	status,0,c
 10564  001844  3632               	rlcf	___fttol@lval,f,c
 10565  001846  3633               	rlcf	___fttol@lval+1,f,c
 10566  001848  3634               	rlcf	___fttol@lval+2,f,c
 10567  00184A  3635               	rlcf	___fttol@lval+3,f,c
 10568  00184C  0636               	decf	___fttol@exp1,f,c
 10569  00184E                     i2l3227:
 10570  00184E  5036               	movf	___fttol@exp1,w,c
 10571  001850  A4D8               	btfss	status,2,c
 10572  001852  D7F7               	goto	i2l3225
 10573  001854                     i2l3229:
 10574  001854  5031               	movf	___fttol@sign1,w,c
 10575  001856  B4D8               	btfsc	status,2,c
 10576  001858  D008               	goto	i2l3233
 10577  00185A  1E35               	comf	___fttol@lval+3,f,c
 10578  00185C  1E34               	comf	___fttol@lval+2,f,c
 10579  00185E  1E33               	comf	___fttol@lval+1,f,c
 10580  001860  6C32               	negf	___fttol@lval,c
 10581  001862  0E00               	movlw	0
 10582  001864  2233               	addwfc	___fttol@lval+1,f,c
 10583  001866  2234               	addwfc	___fttol@lval+2,f,c
 10584  001868  2235               	addwfc	___fttol@lval+3,f,c
 10585  00186A                     i2l3233:
 10586  00186A  C032  F028         	movff	___fttol@lval,?___fttol
 10587  00186E  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 10588  001872  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 10589  001876  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 10590  00187A  0012               	return	
 10591  00187C                     __end_of___fttol:
 10592                           	opt stack 0
 10593                           pclatu	equ	0xFFB
 10594                           pclath	equ	0xFFA
 10595                           tblptru	equ	0xFF8
 10596                           tblptrh	equ	0xFF7
 10597                           tblptrl	equ	0xFF6
 10598                           tablat	equ	0xFF5
 10599                           prodh	equ	0xFF4
 10600                           prodl	equ	0xFF3
 10601                           intcon	equ	0xFF2
 10602                           intcon2	equ	0xFF1
 10603                           intcon3	equ	0xFF0
 10604                           postinc0	equ	0xFEE
 10605                           fsr0h	equ	0xFEA
 10606                           fsr0l	equ	0xFE9
 10607                           wreg	equ	0xFE8
 10608                           fsr1h	equ	0xFE2
 10609                           fsr1l	equ	0xFE1
 10610                           indf2	equ	0xFDF
 10611                           postinc2	equ	0xFDE
 10612                           postdec2	equ	0xFDD
 10613                           fsr2h	equ	0xFDA
 10614                           fsr2l	equ	0xFD9
 10615                           status	equ	0xFD8
 10616                           
 10617 ;; *************** function ___ftge *****************
 10618 ;; Defined at:
 10619 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10620 ;; Parameters:    Size  Location     Type
 10621 ;;  ff1             3    0[COMRAM] float 
 10622 ;;  ff2             3    3[COMRAM] float 
 10623 ;; Auto vars:     Size  Location     Type
 10624 ;;		None
 10625 ;; Return value:  Size  Location     Type
 10626 ;;		None               void
 10627 ;; Registers used:
 10628 ;;		wreg, status,2, status,0
 10629 ;; Tracked objects:
 10630 ;;		On entry : 0/0
 10631 ;;		On exit  : 0/0
 10632 ;;		Unchanged: 0/0
 10633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10634 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10637 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10638 ;;Total ram usage:        9 bytes
 10639 ;; Hardware stack levels used:    1
 10640 ;; This function calls:
 10641 ;;		Nothing
 10642 ;; This function is called by:
 10643 ;;		_pow
 10644 ;;		_exp
 10645 ;;		_floor
 10646 ;; This function uses a non-reentrant model
 10647 ;;
 10648                           
 10649                           	psect	text52
 10650  002410                     __ptext52:
 10651                           	opt stack 0
 10652  002410                     ___ftge:
 10653                           	opt stack 21
 10654                           
 10655                           ;incstack = 0
 10656  002410  AE03               	btfss	___ftge@ff1+2,7,c
 10657  002412  D016               	goto	i2l3177
 10658  002414  C001  F007         	movff	___ftge@ff1,??___ftge
 10659  002418  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 10660  00241C  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 10661  002420  1E07               	comf	??___ftge,f,c
 10662  002422  1E08               	comf	??___ftge+1,f,c
 10663  002424  1E09               	comf	??___ftge+2,f,c
 10664  002426  2A07               	incf	??___ftge,f,c
 10665  002428  0E00               	movlw	0
 10666  00242A  2208               	addwfc	??___ftge+1,f,c
 10667  00242C  2209               	addwfc	??___ftge+2,f,c
 10668  00242E  0E00               	movlw	0
 10669  002430  2407               	addwf	??___ftge,w,c
 10670  002432  6E01               	movwf	___ftge@ff1,c
 10671  002434  0E00               	movlw	0
 10672  002436  2008               	addwfc	??___ftge+1,w,c
 10673  002438  6E02               	movwf	___ftge@ff1+1,c
 10674  00243A  0E80               	movlw	128
 10675  00243C  2009               	addwfc	??___ftge+2,w,c
 10676  00243E  6E03               	movwf	___ftge@ff1+2,c
 10677  002440                     i2l3177:
 10678  002440  AE06               	btfss	___ftge@ff2+2,7,c
 10679  002442  D016               	goto	i2l3181
 10680  002444  C004  F007         	movff	___ftge@ff2,??___ftge
 10681  002448  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 10682  00244C  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 10683  002450  1E07               	comf	??___ftge,f,c
 10684  002452  1E08               	comf	??___ftge+1,f,c
 10685  002454  1E09               	comf	??___ftge+2,f,c
 10686  002456  2A07               	incf	??___ftge,f,c
 10687  002458  0E00               	movlw	0
 10688  00245A  2208               	addwfc	??___ftge+1,f,c
 10689  00245C  2209               	addwfc	??___ftge+2,f,c
 10690  00245E  0E00               	movlw	0
 10691  002460  2407               	addwf	??___ftge,w,c
 10692  002462  6E04               	movwf	___ftge@ff2,c
 10693  002464  0E00               	movlw	0
 10694  002466  2008               	addwfc	??___ftge+1,w,c
 10695  002468  6E05               	movwf	___ftge@ff2+1,c
 10696  00246A  0E80               	movlw	128
 10697  00246C  2009               	addwfc	??___ftge+2,w,c
 10698  00246E  6E06               	movwf	___ftge@ff2+2,c
 10699  002470                     i2l3181:
 10700  002470  0E00               	movlw	0
 10701  002472  1A01               	xorwf	___ftge@ff1,f,c
 10702  002474  0E00               	movlw	0
 10703  002476  1A02               	xorwf	___ftge@ff1+1,f,c
 10704  002478  0E80               	movlw	128
 10705  00247A  1A03               	xorwf	___ftge@ff1+2,f,c
 10706  00247C  0E00               	movlw	0
 10707  00247E  1A04               	xorwf	___ftge@ff2,f,c
 10708  002480  0E00               	movlw	0
 10709  002482  1A05               	xorwf	___ftge@ff2+1,f,c
 10710  002484  0E80               	movlw	128
 10711  002486  1A06               	xorwf	___ftge@ff2+2,f,c
 10712  002488  5004               	movf	___ftge@ff2,w,c
 10713  00248A  5C01               	subwf	___ftge@ff1,w,c
 10714  00248C  5005               	movf	___ftge@ff2+1,w,c
 10715  00248E  5802               	subwfb	___ftge@ff1+1,w,c
 10716  002490  5006               	movf	___ftge@ff2+2,w,c
 10717  002492  5803               	subwfb	___ftge@ff1+2,w,c
 10718  002494  B0D8               	btfsc	status,0,c
 10719  002496  D002               	goto	i2l3187
 10720  002498  90D8               	bcf	status,0,c
 10721  00249A  0012               	return	
 10722  00249C                     i2l3187:
 10723  00249C  80D8               	bsf	status,0,c
 10724  00249E  0012               	return	
 10725  0024A0                     __end_of___ftge:
 10726                           	opt stack 0
 10727                           pclatu	equ	0xFFB
 10728                           pclath	equ	0xFFA
 10729                           tblptru	equ	0xFF8
 10730                           tblptrh	equ	0xFF7
 10731                           tblptrl	equ	0xFF6
 10732                           tablat	equ	0xFF5
 10733                           prodh	equ	0xFF4
 10734                           prodl	equ	0xFF3
 10735                           intcon	equ	0xFF2
 10736                           intcon2	equ	0xFF1
 10737                           intcon3	equ	0xFF0
 10738                           postinc0	equ	0xFEE
 10739                           fsr0h	equ	0xFEA
 10740                           fsr0l	equ	0xFE9
 10741                           wreg	equ	0xFE8
 10742                           fsr1h	equ	0xFE2
 10743                           fsr1l	equ	0xFE1
 10744                           indf2	equ	0xFDF
 10745                           postinc2	equ	0xFDE
 10746                           postdec2	equ	0xFDD
 10747                           fsr2h	equ	0xFDA
 10748                           fsr2l	equ	0xFD9
 10749                           status	equ	0xFD8
 10750                           
 10751 ;; *************** function ___altoft *****************
 10752 ;; Defined at:
 10753 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 10754 ;; Parameters:    Size  Location     Type
 10755 ;;  c               4   54[COMRAM] long 
 10756 ;; Auto vars:     Size  Location     Type
 10757 ;;  sign            1   63[COMRAM] unsigned char 
 10758 ;;  exp             1   62[COMRAM] unsigned char 
 10759 ;; Return value:  Size  Location     Type
 10760 ;;                  3   54[COMRAM] float 
 10761 ;; Registers used:
 10762 ;;		wreg, status,2, status,0, cstack
 10763 ;; Tracked objects:
 10764 ;;		On entry : 0/0
 10765 ;;		On exit  : 0/0
 10766 ;;		Unchanged: 0/0
 10767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10768 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10769 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10770 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10771 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10772 ;;Total ram usage:       10 bytes
 10773 ;; Hardware stack levels used:    1
 10774 ;; Hardware stack levels required when called:    1
 10775 ;; This function calls:
 10776 ;;		___ftpack
 10777 ;; This function is called by:
 10778 ;;		_floor
 10779 ;; This function uses a non-reentrant model
 10780 ;;
 10781                           
 10782                           	psect	text53
 10783  00259C                     __ptext53:
 10784                           	opt stack 0
 10785  00259C                     ___altoft:
 10786                           	opt stack 20
 10787                           
 10788                           ;incstack = 0
 10789  00259C  0E00               	movlw	0
 10790  00259E  6E40               	movwf	___altoft@sign,c
 10791  0025A0  0E8E               	movlw	142
 10792  0025A2  6E3F               	movwf	___altoft@exp,c
 10793  0025A4  AE3A               	btfss	___altoft@c+3,7,c
 10794  0025A6  D011               	goto	i2l3049
 10795  0025A8  1E3A               	comf	___altoft@c+3,f,c
 10796  0025AA  1E39               	comf	___altoft@c+2,f,c
 10797  0025AC  1E38               	comf	___altoft@c+1,f,c
 10798  0025AE  6C37               	negf	___altoft@c,c
 10799  0025B0  0E00               	movlw	0
 10800  0025B2  2238               	addwfc	___altoft@c+1,f,c
 10801  0025B4  2239               	addwfc	___altoft@c+2,f,c
 10802  0025B6  223A               	addwfc	___altoft@c+3,f,c
 10803  0025B8  0E01               	movlw	1
 10804  0025BA  6E40               	movwf	___altoft@sign,c
 10805  0025BC  D006               	goto	i2l3049
 10806  0025BE                     i2l3047:
 10807  0025BE  90D8               	bcf	status,0,c
 10808  0025C0  323A               	rrcf	___altoft@c+3,f,c
 10809  0025C2  3239               	rrcf	___altoft@c+2,f,c
 10810  0025C4  3238               	rrcf	___altoft@c+1,f,c
 10811  0025C6  3237               	rrcf	___altoft@c,f,c
 10812  0025C8  2A3F               	incf	___altoft@exp,f,c
 10813  0025CA                     i2l3049:
 10814  0025CA  0E00               	movlw	0
 10815  0025CC  1437               	andwf	___altoft@c,w,c
 10816  0025CE  6E3B               	movwf	??___altoft& (0+255),c
 10817  0025D0  0E00               	movlw	0
 10818  0025D2  1438               	andwf	___altoft@c+1,w,c
 10819  0025D4  6E3C               	movwf	(??___altoft+1)& (0+255),c
 10820  0025D6  0E00               	movlw	0
 10821  0025D8  1439               	andwf	___altoft@c+2,w,c
 10822  0025DA  6E3D               	movwf	(??___altoft+2)& (0+255),c
 10823  0025DC  0EFF               	movlw	255
 10824  0025DE  143A               	andwf	___altoft@c+3,w,c
 10825  0025E0  6E3E               	movwf	(??___altoft+3)& (0+255),c
 10826  0025E2  503B               	movf	??___altoft,w,c
 10827  0025E4  103C               	iorwf	??___altoft+1,w,c
 10828  0025E6  103D               	iorwf	??___altoft+2,w,c
 10829  0025E8  103E               	iorwf	??___altoft+3,w,c
 10830  0025EA  A4D8               	btfss	status,2,c
 10831  0025EC  D7E8               	goto	i2l3047
 10832  0025EE  C037  F001         	movff	___altoft@c,___ftpack@arg
 10833  0025F2  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 10834  0025F6  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 10835  0025FA  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 10836  0025FE  C040  F005         	movff	___altoft@sign,___ftpack@sign
 10837  002602  ECD0  F010         	call	___ftpack	;wreg free
 10838  002606  C001  F037         	movff	?___ftpack,?___altoft
 10839  00260A  C002  F038         	movff	?___ftpack+1,?___altoft+1
 10840  00260E  C003  F039         	movff	?___ftpack+2,?___altoft+2
 10841  002612  0012               	return	
 10842  002614                     __end_of___altoft:
 10843                           	opt stack 0
 10844                           pclatu	equ	0xFFB
 10845                           pclath	equ	0xFFA
 10846                           tblptru	equ	0xFF8
 10847                           tblptrh	equ	0xFF7
 10848                           tblptrl	equ	0xFF6
 10849                           tablat	equ	0xFF5
 10850                           prodh	equ	0xFF4
 10851                           prodl	equ	0xFF3
 10852                           intcon	equ	0xFF2
 10853                           intcon2	equ	0xFF1
 10854                           intcon3	equ	0xFF0
 10855                           postinc0	equ	0xFEE
 10856                           fsr0h	equ	0xFEA
 10857                           fsr0l	equ	0xFE9
 10858                           wreg	equ	0xFE8
 10859                           fsr1h	equ	0xFE2
 10860                           fsr1l	equ	0xFE1
 10861                           indf2	equ	0xFDF
 10862                           postinc2	equ	0xFDE
 10863                           postdec2	equ	0xFDD
 10864                           fsr2h	equ	0xFDA
 10865                           fsr2l	equ	0xFD9
 10866                           status	equ	0xFD8
 10867                           
 10868 ;; *************** function _eval_poly *****************
 10869 ;; Defined at:
 10870 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 10871 ;; Parameters:    Size  Location     Type
 10872 ;;  x               3   39[COMRAM] float 
 10873 ;;  d               2   42[COMRAM] PTR const 
 10874 ;;		 -> log@coeff(27), exp@coeff(30), 
 10875 ;;  n               2   44[COMRAM] int 
 10876 ;; Auto vars:     Size  Location     Type
 10877 ;;  res             3   48[COMRAM] int 
 10878 ;; Return value:  Size  Location     Type
 10879 ;;                  3   39[COMRAM] int 
 10880 ;; Registers used:
 10881 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10882 ;; Tracked objects:
 10883 ;;		On entry : 0/0
 10884 ;;		On exit  : 0/0
 10885 ;;		Unchanged: 0/0
 10886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10887 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10888 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10889 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10890 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10891 ;;Total ram usage:       12 bytes
 10892 ;; Hardware stack levels used:    1
 10893 ;; Hardware stack levels required when called:    2
 10894 ;; This function calls:
 10895 ;;		___ftadd
 10896 ;;		___ftmul
 10897 ;;		i2___wmul
 10898 ;; This function is called by:
 10899 ;;		_exp
 10900 ;;		_log
 10901 ;; This function uses a non-reentrant model
 10902 ;;
 10903                           
 10904                           	psect	text54
 10905  001DD0                     __ptext54:
 10906                           	opt stack 0
 10907  001DD0                     _eval_poly:
 10908                           	opt stack 20
 10909                           
 10910                           ;incstack = 0
 10911  001DD0  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 10912  001DD4  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 10913  001DD8  0E00               	movlw	0
 10914  001DDA  6E04               	movwf	i2___wmul@multiplicand+1,c
 10915  001DDC  0E03               	movlw	3
 10916  001DDE  6E03               	movwf	i2___wmul@multiplicand,c
 10917  001DE0  EC6C  F015         	call	i2___wmul	;wreg free
 10918  001DE4  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 10919  001DE8  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10920  001DEC  5001               	movf	?i2___wmul,w,c
 10921  001DEE  262F               	addwf	??_eval_poly,f,c
 10922  001DF0  5002               	movf	?i2___wmul+1,w,c
 10923  001DF2  2230               	addwfc	??_eval_poly+1,f,c
 10924  001DF4  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10925  001DF8  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10926  001DFC                     	if	0	;tblptru may be non-zero
 10927  001DFC                     	endif
 10928  001DFC                     	if	0	;tblptru may be non-zero
 10929  001DFC                     	endif
 10930  001DFC  0009               	tblrd		*+
 10931  001DFE  CFF5 F031          	movff	tablat,eval_poly@res
 10932  001E02  0009               	tblrd		*+
 10933  001E04  CFF5 F032          	movff	tablat,eval_poly@res+1
 10934  001E08  000A               	tblrd		*-
 10935  001E0A  CFF5 F033          	movff	tablat,eval_poly@res+2
 10936  001E0E  D03E               	goto	i2l3383
 10937  001E10                     i2l3381:
 10938  001E10  C031  F010         	movff	eval_poly@res,___ftmul@f2
 10939  001E14  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 10940  001E18  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 10941  001E1C  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 10942  001E20  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 10943  001E24  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 10944  001E28  EC3E  F00C         	call	___ftmul	;wreg free
 10945  001E2C  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10946  001E30  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10947  001E34  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10948  001E38  0E00               	movlw	0
 10949  001E3A  6E04               	movwf	i2___wmul@multiplicand+1,c
 10950  001E3C  0E03               	movlw	3
 10951  001E3E  6E03               	movwf	i2___wmul@multiplicand,c
 10952  001E40  062D               	decf	eval_poly@n,f,c
 10953  001E42  A0D8               	btfss	status,0,c
 10954  001E44  062E               	decf	eval_poly@n+1,f,c
 10955  001E46  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 10956  001E4A  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 10957  001E4E  EC6C  F015         	call	i2___wmul	;wreg free
 10958  001E52  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 10959  001E56  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10960  001E5A  5001               	movf	?i2___wmul,w,c
 10961  001E5C  262F               	addwf	??_eval_poly,f,c
 10962  001E5E  5002               	movf	?i2___wmul+1,w,c
 10963  001E60  2230               	addwfc	??_eval_poly+1,f,c
 10964  001E62  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10965  001E66  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10966  001E6A                     	if	0	;tblptru may be non-zero
 10967  001E6A                     	endif
 10968  001E6A                     	if	0	;tblptru may be non-zero
 10969  001E6A                     	endif
 10970  001E6A  0009               	tblrd		*+
 10971  001E6C  CFF5 F01F          	movff	tablat,___ftadd@f2
 10972  001E70  0009               	tblrd		*+
 10973  001E72  CFF5 F020          	movff	tablat,___ftadd@f2+1
 10974  001E76  000A               	tblrd		*-
 10975  001E78  CFF5 F021          	movff	tablat,___ftadd@f2+2
 10976  001E7C  EC72  F006         	call	___ftadd	;wreg free
 10977  001E80  C01C  F031         	movff	?___ftadd,eval_poly@res
 10978  001E84  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 10979  001E88  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 10980  001E8C                     i2l3383:
 10981  001E8C  502D               	movf	eval_poly@n,w,c
 10982  001E8E  102E               	iorwf	eval_poly@n+1,w,c
 10983  001E90  A4D8               	btfss	status,2,c
 10984  001E92  D7BE               	goto	i2l3381
 10985  001E94  C031  F028         	movff	eval_poly@res,?_eval_poly
 10986  001E98  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 10987  001E9C  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 10988  001EA0  0012               	return		;funcret
 10989  001EA2                     __end_of_eval_poly:
 10990                           	opt stack 0
 10991                           pclatu	equ	0xFFB
 10992                           pclath	equ	0xFFA
 10993                           tblptru	equ	0xFF8
 10994                           tblptrh	equ	0xFF7
 10995                           tblptrl	equ	0xFF6
 10996                           tablat	equ	0xFF5
 10997                           prodh	equ	0xFF4
 10998                           prodl	equ	0xFF3
 10999                           intcon	equ	0xFF2
 11000                           intcon2	equ	0xFF1
 11001                           intcon3	equ	0xFF0
 11002                           postinc0	equ	0xFEE
 11003                           fsr0h	equ	0xFEA
 11004                           fsr0l	equ	0xFE9
 11005                           wreg	equ	0xFE8
 11006                           fsr1h	equ	0xFE2
 11007                           fsr1l	equ	0xFE1
 11008                           indf2	equ	0xFDF
 11009                           postinc2	equ	0xFDE
 11010                           postdec2	equ	0xFDD
 11011                           fsr2h	equ	0xFDA
 11012                           fsr2l	equ	0xFD9
 11013                           status	equ	0xFD8
 11014                           
 11015 ;; *************** function i2___wmul *****************
 11016 ;; Defined at:
 11017 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;  multiplier      2    0[COMRAM] unsigned int 
 11020 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;  __wmul          2    4[COMRAM] unsigned int 
 11023 ;; Return value:  Size  Location     Type
 11024 ;;                  2    0[COMRAM] unsigned int 
 11025 ;; Registers used:
 11026 ;;		wreg, status,2, status,0, prodl, prodh
 11027 ;; Tracked objects:
 11028 ;;		On entry : 0/0
 11029 ;;		On exit  : 0/0
 11030 ;;		Unchanged: 0/0
 11031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11032 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11033 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11035 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11036 ;;Total ram usage:        6 bytes
 11037 ;; Hardware stack levels used:    1
 11038 ;; This function calls:
 11039 ;;		Nothing
 11040 ;; This function is called by:
 11041 ;;		_isr
 11042 ;;		_eval_poly
 11043 ;;		i2_printf
 11044 ;; This function uses a non-reentrant model
 11045 ;;
 11046                           
 11047                           	psect	text55
 11048  002AD8                     __ptext55:
 11049                           	opt stack 0
 11050  002AD8                     i2___wmul:
 11051                           	opt stack 24
 11052                           
 11053                           ;incstack = 0
 11054  002AD8  5001               	movf	i2___wmul@multiplier,w,c
 11055  002ADA  0203               	mulwf	i2___wmul@multiplicand,c
 11056  002ADC  CFF3 F005          	movff	prodl,i2___wmul@product
 11057  002AE0  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11058  002AE4  5001               	movf	i2___wmul@multiplier,w,c
 11059  002AE6  0204               	mulwf	i2___wmul@multiplicand+1,c
 11060  002AE8  50F3               	movf	prodl,w,c
 11061  002AEA  2606               	addwf	i2___wmul@product+1,f,c
 11062  002AEC  5002               	movf	i2___wmul@multiplier+1,w,c
 11063  002AEE  0203               	mulwf	i2___wmul@multiplicand,c
 11064  002AF0  50F3               	movf	prodl,w,c
 11065  002AF2  2606               	addwf	i2___wmul@product+1,f,c
 11066  002AF4  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11067  002AF8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11068  002AFC  0012               	return	
 11069  002AFE                     __end_ofi2___wmul:
 11070                           	opt stack 0
 11071                           pclatu	equ	0xFFB
 11072                           pclath	equ	0xFFA
 11073                           tblptru	equ	0xFF8
 11074                           tblptrh	equ	0xFF7
 11075                           tblptrl	equ	0xFF6
 11076                           tablat	equ	0xFF5
 11077                           prodh	equ	0xFF4
 11078                           prodl	equ	0xFF3
 11079                           intcon	equ	0xFF2
 11080                           intcon2	equ	0xFF1
 11081                           intcon3	equ	0xFF0
 11082                           postinc0	equ	0xFEE
 11083                           fsr0h	equ	0xFEA
 11084                           fsr0l	equ	0xFE9
 11085                           wreg	equ	0xFE8
 11086                           fsr1h	equ	0xFE2
 11087                           fsr1l	equ	0xFE1
 11088                           indf2	equ	0xFDF
 11089                           postinc2	equ	0xFDE
 11090                           postdec2	equ	0xFDD
 11091                           fsr2h	equ	0xFDA
 11092                           fsr2l	equ	0xFD9
 11093                           status	equ	0xFD8
 11094                           
 11095 ;; *************** function ___ftmul *****************
 11096 ;; Defined at:
 11097 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11098 ;; Parameters:    Size  Location     Type
 11099 ;;  f1              3   12[COMRAM] float 
 11100 ;;  f2              3   15[COMRAM] float 
 11101 ;; Auto vars:     Size  Location     Type
 11102 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 11103 ;;  sign            1   26[COMRAM] unsigned char 
 11104 ;;  cntr            1   25[COMRAM] unsigned char 
 11105 ;;  exp             1   21[COMRAM] unsigned char 
 11106 ;; Return value:  Size  Location     Type
 11107 ;;                  3   12[COMRAM] float 
 11108 ;; Registers used:
 11109 ;;		wreg, status,2, status,0, cstack
 11110 ;; Tracked objects:
 11111 ;;		On entry : 0/0
 11112 ;;		On exit  : 0/0
 11113 ;;		Unchanged: 0/0
 11114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11115 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11116 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11118 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11119 ;;Total ram usage:       15 bytes
 11120 ;; Hardware stack levels used:    1
 11121 ;; Hardware stack levels required when called:    1
 11122 ;; This function calls:
 11123 ;;		___ftpack
 11124 ;; This function is called by:
 11125 ;;		_dec_to_hex
 11126 ;;		_pow
 11127 ;;		_exp
 11128 ;;		_log
 11129 ;;		_eval_poly
 11130 ;; This function uses a non-reentrant model
 11131 ;;
 11132                           
 11133                           	psect	text56
 11134  00187C                     __ptext56:
 11135                           	opt stack 0
 11136  00187C                     ___ftmul:
 11137                           	opt stack 20
 11138                           
 11139                           ;incstack = 0
 11140  00187C  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 11141  001880  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11142  001882  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11143  001884  340E               	rlcf	___ftmul@f1+1,w,c
 11144  001886  3613               	rlcf	??___ftmul& (0+255),f,c
 11145  001888  E301               	bnc	u238_41
 11146  00188A  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11147  00188C                     u238_41:
 11148  00188C  5013               	movf	??___ftmul,w,c
 11149  00188E  6E16               	movwf	___ftmul@exp,c
 11150  001890  5016               	movf	___ftmul@exp,w,c
 11151  001892  A4D8               	btfss	status,2,c
 11152  001894  D007               	goto	i2l3131
 11153  001896  0E00               	movlw	0
 11154  001898  6E0D               	movwf	?___ftmul,c
 11155  00189A  0E00               	movlw	0
 11156  00189C  6E0E               	movwf	?___ftmul+1,c
 11157  00189E  0E00               	movlw	0
 11158  0018A0  6E0F               	movwf	?___ftmul+2,c
 11159  0018A2  0012               	return	
 11160  0018A4                     i2l3131:
 11161  0018A4  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 11162  0018A8  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11163  0018AA  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11164  0018AC  3411               	rlcf	___ftmul@f2+1,w,c
 11165  0018AE  3613               	rlcf	??___ftmul& (0+255),f,c
 11166  0018B0  E301               	bnc	u240_41
 11167  0018B2  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11168  0018B4                     u240_41:
 11169  0018B4  5013               	movf	??___ftmul,w,c
 11170  0018B6  6E1B               	movwf	___ftmul@sign,c
 11171  0018B8  501B               	movf	___ftmul@sign,w,c
 11172  0018BA  A4D8               	btfss	status,2,c
 11173  0018BC  D007               	goto	i2l3137
 11174  0018BE  0E00               	movlw	0
 11175  0018C0  6E0D               	movwf	?___ftmul,c
 11176  0018C2  0E00               	movlw	0
 11177  0018C4  6E0E               	movwf	?___ftmul+1,c
 11178  0018C6  0E00               	movlw	0
 11179  0018C8  6E0F               	movwf	?___ftmul+2,c
 11180  0018CA  0012               	return	
 11181  0018CC                     i2l3137:
 11182  0018CC  501B               	movf	___ftmul@sign,w,c
 11183  0018CE  0F7B               	addlw	123
 11184  0018D0  2616               	addwf	___ftmul@exp,f,c
 11185  0018D2  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 11186  0018D6  5012               	movf	___ftmul@f2+2,w,c
 11187  0018D8  1A1B               	xorwf	___ftmul@sign,f,c
 11188  0018DA  0E80               	movlw	128
 11189  0018DC  161B               	andwf	___ftmul@sign,f,c
 11190  0018DE  8E0E               	bsf	___ftmul@f1+1,7,c
 11191  0018E0  8E11               	bsf	___ftmul@f2+1,7,c
 11192  0018E2  0EFF               	movlw	255
 11193  0018E4  1610               	andwf	___ftmul@f2,f,c
 11194  0018E6  0EFF               	movlw	255
 11195  0018E8  1611               	andwf	___ftmul@f2+1,f,c
 11196  0018EA  0E00               	movlw	0
 11197  0018EC  1612               	andwf	___ftmul@f2+2,f,c
 11198  0018EE  0E00               	movlw	0
 11199  0018F0  6E17               	movwf	___ftmul@f3_as_product,c
 11200  0018F2  0E00               	movlw	0
 11201  0018F4  6E18               	movwf	___ftmul@f3_as_product+1,c
 11202  0018F6  0E00               	movlw	0
 11203  0018F8  6E19               	movwf	___ftmul@f3_as_product+2,c
 11204  0018FA  0E07               	movlw	7
 11205  0018FC  6E1A               	movwf	___ftmul@cntr,c
 11206  0018FE                     i2l3151:
 11207  0018FE  A00D               	btfss	___ftmul@f1,0,c
 11208  001900  D006               	goto	i2l3155
 11209  001902  5010               	movf	___ftmul@f2,w,c
 11210  001904  2617               	addwf	___ftmul@f3_as_product,f,c
 11211  001906  5011               	movf	___ftmul@f2+1,w,c
 11212  001908  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11213  00190A  5012               	movf	___ftmul@f2+2,w,c
 11214  00190C  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11215  00190E                     i2l3155:
 11216  00190E  90D8               	bcf	status,0,c
 11217  001910  320F               	rrcf	___ftmul@f1+2,f,c
 11218  001912  320E               	rrcf	___ftmul@f1+1,f,c
 11219  001914  320D               	rrcf	___ftmul@f1,f,c
 11220  001916  90D8               	bcf	status,0,c
 11221  001918  3610               	rlcf	___ftmul@f2,f,c
 11222  00191A  3611               	rlcf	___ftmul@f2+1,f,c
 11223  00191C  3612               	rlcf	___ftmul@f2+2,f,c
 11224  00191E  2E1A               	decfsz	___ftmul@cntr,f,c
 11225  001920  D7EE               	goto	i2l3151
 11226  001922  0E09               	movlw	9
 11227  001924  6E1A               	movwf	___ftmul@cntr,c
 11228  001926                     i2l3161:
 11229  001926  A00D               	btfss	___ftmul@f1,0,c
 11230  001928  D006               	goto	i2l3165
 11231  00192A  5010               	movf	___ftmul@f2,w,c
 11232  00192C  2617               	addwf	___ftmul@f3_as_product,f,c
 11233  00192E  5011               	movf	___ftmul@f2+1,w,c
 11234  001930  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11235  001932  5012               	movf	___ftmul@f2+2,w,c
 11236  001934  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11237  001936                     i2l3165:
 11238  001936  90D8               	bcf	status,0,c
 11239  001938  320F               	rrcf	___ftmul@f1+2,f,c
 11240  00193A  320E               	rrcf	___ftmul@f1+1,f,c
 11241  00193C  320D               	rrcf	___ftmul@f1,f,c
 11242  00193E  90D8               	bcf	status,0,c
 11243  001940  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 11244  001942  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 11245  001944  3217               	rrcf	___ftmul@f3_as_product,f,c
 11246  001946  2E1A               	decfsz	___ftmul@cntr,f,c
 11247  001948  D7EE               	goto	i2l3161
 11248  00194A  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 11249  00194E  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11250  001952  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11251  001956  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 11252  00195A  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 11253  00195E  ECD0  F010         	call	___ftpack	;wreg free
 11254  001962  C001  F00D         	movff	?___ftpack,?___ftmul
 11255  001966  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 11256  00196A  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 11257  00196E  0012               	return	
 11258  001970                     __end_of___ftmul:
 11259                           	opt stack 0
 11260                           pclatu	equ	0xFFB
 11261                           pclath	equ	0xFFA
 11262                           tblptru	equ	0xFF8
 11263                           tblptrh	equ	0xFF7
 11264                           tblptrl	equ	0xFF6
 11265                           tablat	equ	0xFF5
 11266                           prodh	equ	0xFF4
 11267                           prodl	equ	0xFF3
 11268                           intcon	equ	0xFF2
 11269                           intcon2	equ	0xFF1
 11270                           intcon3	equ	0xFF0
 11271                           postinc0	equ	0xFEE
 11272                           fsr0h	equ	0xFEA
 11273                           fsr0l	equ	0xFE9
 11274                           wreg	equ	0xFE8
 11275                           fsr1h	equ	0xFE2
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           fsr2h	equ	0xFDA
 11281                           fsr2l	equ	0xFD9
 11282                           status	equ	0xFD8
 11283                           
 11284 ;; *************** function ___ftsub *****************
 11285 ;; Defined at:
 11286 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;  f1              3   39[COMRAM] float 
 11289 ;;  f2              3   42[COMRAM] float 
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;		None
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  3   39[COMRAM] float 
 11294 ;; Registers used:
 11295 ;;		wreg, status,2, status,0, cstack
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11301 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11305 ;;Total ram usage:        6 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    2
 11308 ;; This function calls:
 11309 ;;		___ftadd
 11310 ;; This function is called by:
 11311 ;;		_exp
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           	psect	text57
 11316  002976                     __ptext57:
 11317                           	opt stack 0
 11318  002976                     ___ftsub:
 11319                           	opt stack 20
 11320                           
 11321                           ;incstack = 0
 11322  002976  502B               	movf	___ftsub@f2,w,c
 11323  002978  102C               	iorwf	___ftsub@f2+1,w,c
 11324  00297A  102D               	iorwf	___ftsub@f2+2,w,c
 11325  00297C  B4D8               	btfsc	status,2,c
 11326  00297E  D006               	goto	i2l3335
 11327  002980  0E00               	movlw	0
 11328  002982  1A2B               	xorwf	___ftsub@f2,f,c
 11329  002984  0E00               	movlw	0
 11330  002986  1A2C               	xorwf	___ftsub@f2+1,f,c
 11331  002988  0E80               	movlw	128
 11332  00298A  1A2D               	xorwf	___ftsub@f2+2,f,c
 11333  00298C                     i2l3335:
 11334  00298C  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 11335  002990  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 11336  002994  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 11337  002998  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 11338  00299C  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 11339  0029A0  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 11340  0029A4  EC72  F006         	call	___ftadd	;wreg free
 11341  0029A8  C01C  F028         	movff	?___ftadd,?___ftsub
 11342  0029AC  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 11343  0029B0  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 11344  0029B4  0012               	return	
 11345  0029B6                     __end_of___ftsub:
 11346                           	opt stack 0
 11347                           pclatu	equ	0xFFB
 11348                           pclath	equ	0xFFA
 11349                           tblptru	equ	0xFF8
 11350                           tblptrh	equ	0xFF7
 11351                           tblptrl	equ	0xFF6
 11352                           tablat	equ	0xFF5
 11353                           prodh	equ	0xFF4
 11354                           prodl	equ	0xFF3
 11355                           intcon	equ	0xFF2
 11356                           intcon2	equ	0xFF1
 11357                           intcon3	equ	0xFF0
 11358                           postinc0	equ	0xFEE
 11359                           fsr0h	equ	0xFEA
 11360                           fsr0l	equ	0xFE9
 11361                           wreg	equ	0xFE8
 11362                           fsr1h	equ	0xFE2
 11363                           fsr1l	equ	0xFE1
 11364                           indf2	equ	0xFDF
 11365                           postinc2	equ	0xFDE
 11366                           postdec2	equ	0xFDD
 11367                           fsr2h	equ	0xFDA
 11368                           fsr2l	equ	0xFD9
 11369                           status	equ	0xFD8
 11370                           
 11371 ;; *************** function ___ftadd *****************
 11372 ;; Defined at:
 11373 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11374 ;; Parameters:    Size  Location     Type
 11375 ;;  f1              3   27[COMRAM] float 
 11376 ;;  f2              3   30[COMRAM] float 
 11377 ;; Auto vars:     Size  Location     Type
 11378 ;;  exp1            1   38[COMRAM] unsigned char 
 11379 ;;  exp2            1   37[COMRAM] unsigned char 
 11380 ;;  sign            1   36[COMRAM] unsigned char 
 11381 ;; Return value:  Size  Location     Type
 11382 ;;                  3   27[COMRAM] float 
 11383 ;; Registers used:
 11384 ;;		wreg, status,2, status,0, cstack
 11385 ;; Tracked objects:
 11386 ;;		On entry : 0/0
 11387 ;;		On exit  : 0/0
 11388 ;;		Unchanged: 0/0
 11389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11390 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11392 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11393 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11394 ;;Total ram usage:       12 bytes
 11395 ;; Hardware stack levels used:    1
 11396 ;; Hardware stack levels required when called:    1
 11397 ;; This function calls:
 11398 ;;		___ftpack
 11399 ;; This function is called by:
 11400 ;;		_dec_to_hex
 11401 ;;		___ftsub
 11402 ;;		_floor
 11403 ;;		_log
 11404 ;;		_eval_poly
 11405 ;; This function uses a non-reentrant model
 11406 ;;
 11407                           
 11408                           	psect	text58
 11409  000CE4                     __ptext58:
 11410                           	opt stack 0
 11411  000CE4                     ___ftadd:
 11412                           	opt stack 20
 11413                           
 11414                           ;incstack = 0
 11415  000CE4  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 11416  000CE8  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11417  000CEA  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11418  000CEC  341D               	rlcf	___ftadd@f1+1,w,c
 11419  000CEE  3622               	rlcf	??___ftadd& (0+255),f,c
 11420  000CF0  E301               	bnc	u217_41
 11421  000CF2  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11422  000CF4                     u217_41:
 11423  000CF4  5022               	movf	??___ftadd,w,c
 11424  000CF6  6E27               	movwf	___ftadd@exp1,c
 11425  000CF8  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 11426  000CFC  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11427  000CFE  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11428  000D00  3420               	rlcf	___ftadd@f2+1,w,c
 11429  000D02  3622               	rlcf	??___ftadd& (0+255),f,c
 11430  000D04  E301               	bnc	u218_41
 11431  000D06  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11432  000D08                     u218_41:
 11433  000D08  5022               	movf	??___ftadd,w,c
 11434  000D0A  6E26               	movwf	___ftadd@exp2,c
 11435  000D0C  5027               	movf	___ftadd@exp1,w,c
 11436  000D0E  B4D8               	btfsc	status,2,c
 11437  000D10  D00B               	goto	i2l715
 11438  000D12  5026               	movf	___ftadd@exp2,w,c
 11439  000D14  5C27               	subwf	___ftadd@exp1,w,c
 11440  000D16  B0D8               	btfsc	status,0,c
 11441  000D18  D00E               	goto	i2l3063
 11442  000D1A  5027               	movf	___ftadd@exp1,w,c
 11443  000D1C  0800               	sublw	0
 11444  000D1E  2426               	addwf	___ftadd@exp2,w,c
 11445  000D20  6E22               	movwf	??___ftadd& (0+255),c
 11446  000D22  0E18               	movlw	24
 11447  000D24  6422               	cpfsgt	??___ftadd,c
 11448  000D26  D007               	goto	i2l3063
 11449  000D28                     i2l715:
 11450  000D28  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 11451  000D2C  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 11452  000D30  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 11453  000D34  0012               	return	
 11454  000D36                     i2l3063:
 11455  000D36  5026               	movf	___ftadd@exp2,w,c
 11456  000D38  B4D8               	btfsc	status,2,c
 11457  000D3A  D00B               	goto	i2l719
 11458  000D3C  5027               	movf	___ftadd@exp1,w,c
 11459  000D3E  5C26               	subwf	___ftadd@exp2,w,c
 11460  000D40  B0D8               	btfsc	status,0,c
 11461  000D42  D00E               	goto	i2l3069
 11462  000D44  5026               	movf	___ftadd@exp2,w,c
 11463  000D46  0800               	sublw	0
 11464  000D48  2427               	addwf	___ftadd@exp1,w,c
 11465  000D4A  6E22               	movwf	??___ftadd& (0+255),c
 11466  000D4C  0E18               	movlw	24
 11467  000D4E  6422               	cpfsgt	??___ftadd,c
 11468  000D50  D007               	goto	i2l3069
 11469  000D52                     i2l719:
 11470  000D52  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 11471  000D56  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 11472  000D5A  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 11473  000D5E  0012               	return	
 11474  000D60                     i2l3069:
 11475  000D60  0E06               	movlw	6
 11476  000D62  6E25               	movwf	___ftadd@sign,c
 11477  000D64  BE1E               	btfsc	___ftadd@f1+2,7,c
 11478  000D66  8E25               	bsf	___ftadd@sign,7,c
 11479  000D68  BE21               	btfsc	___ftadd@f2+2,7,c
 11480  000D6A  8C25               	bsf	___ftadd@sign,6,c
 11481  000D6C  8E1D               	bsf	___ftadd@f1+1,7,c
 11482  000D6E  0EFF               	movlw	255
 11483  000D70  161C               	andwf	___ftadd@f1,f,c
 11484  000D72  0EFF               	movlw	255
 11485  000D74  161D               	andwf	___ftadd@f1+1,f,c
 11486  000D76  0E00               	movlw	0
 11487  000D78  161E               	andwf	___ftadd@f1+2,f,c
 11488  000D7A  8E20               	bsf	___ftadd@f2+1,7,c
 11489  000D7C  0EFF               	movlw	255
 11490  000D7E  161F               	andwf	___ftadd@f2,f,c
 11491  000D80  0EFF               	movlw	255
 11492  000D82  1620               	andwf	___ftadd@f2+1,f,c
 11493  000D84  0E00               	movlw	0
 11494  000D86  1621               	andwf	___ftadd@f2+2,f,c
 11495  000D88  5026               	movf	___ftadd@exp2,w,c
 11496  000D8A  5C27               	subwf	___ftadd@exp1,w,c
 11497  000D8C  B0D8               	btfsc	status,0,c
 11498  000D8E  D01B               	goto	i2l3095
 11499  000D90                     i2l3085:
 11500  000D90  90D8               	bcf	status,0,c
 11501  000D92  361F               	rlcf	___ftadd@f2,f,c
 11502  000D94  3620               	rlcf	___ftadd@f2+1,f,c
 11503  000D96  3621               	rlcf	___ftadd@f2+2,f,c
 11504  000D98  0626               	decf	___ftadd@exp2,f,c
 11505  000D9A  5027               	movf	___ftadd@exp1,w,c
 11506  000D9C  1826               	xorwf	___ftadd@exp2,w,c
 11507  000D9E  B4D8               	btfsc	status,2,c
 11508  000DA0  D00D               	goto	i2l3093
 11509  000DA2  0625               	decf	___ftadd@sign,f,c
 11510  000DA4  C025  F022         	movff	___ftadd@sign,??___ftadd
 11511  000DA8  0E07               	movlw	7
 11512  000DAA  1622               	andwf	??___ftadd,f,c
 11513  000DAC  B4D8               	btfsc	status,2,c
 11514  000DAE  D006               	goto	i2l3093
 11515  000DB0  D7EF               	goto	i2l3085
 11516  000DB2                     i2l3091:
 11517  000DB2  90D8               	bcf	status,0,c
 11518  000DB4  321E               	rrcf	___ftadd@f1+2,f,c
 11519  000DB6  321D               	rrcf	___ftadd@f1+1,f,c
 11520  000DB8  321C               	rrcf	___ftadd@f1,f,c
 11521  000DBA  2A27               	incf	___ftadd@exp1,f,c
 11522  000DBC                     i2l3093:
 11523  000DBC  5026               	movf	___ftadd@exp2,w,c
 11524  000DBE  1827               	xorwf	___ftadd@exp1,w,c
 11525  000DC0  B4D8               	btfsc	status,2,c
 11526  000DC2  D01F               	goto	i2l730
 11527  000DC4  D7F6               	goto	i2l3091
 11528  000DC6                     i2l3095:
 11529  000DC6  5027               	movf	___ftadd@exp1,w,c
 11530  000DC8  5C26               	subwf	___ftadd@exp2,w,c
 11531  000DCA  B0D8               	btfsc	status,0,c
 11532  000DCC  D01A               	goto	i2l730
 11533  000DCE                     i2l3097:
 11534  000DCE  90D8               	bcf	status,0,c
 11535  000DD0  361C               	rlcf	___ftadd@f1,f,c
 11536  000DD2  361D               	rlcf	___ftadd@f1+1,f,c
 11537  000DD4  361E               	rlcf	___ftadd@f1+2,f,c
 11538  000DD6  0627               	decf	___ftadd@exp1,f,c
 11539  000DD8  5027               	movf	___ftadd@exp1,w,c
 11540  000DDA  1826               	xorwf	___ftadd@exp2,w,c
 11541  000DDC  B4D8               	btfsc	status,2,c
 11542  000DDE  D00D               	goto	i2l3105
 11543  000DE0  0625               	decf	___ftadd@sign,f,c
 11544  000DE2  C025  F022         	movff	___ftadd@sign,??___ftadd
 11545  000DE6  0E07               	movlw	7
 11546  000DE8  1622               	andwf	??___ftadd,f,c
 11547  000DEA  B4D8               	btfsc	status,2,c
 11548  000DEC  D006               	goto	i2l3105
 11549  000DEE  D7EF               	goto	i2l3097
 11550  000DF0                     i2l3103:
 11551  000DF0  90D8               	bcf	status,0,c
 11552  000DF2  3221               	rrcf	___ftadd@f2+2,f,c
 11553  000DF4  3220               	rrcf	___ftadd@f2+1,f,c
 11554  000DF6  321F               	rrcf	___ftadd@f2,f,c
 11555  000DF8  2A26               	incf	___ftadd@exp2,f,c
 11556  000DFA                     i2l3105:
 11557  000DFA  5026               	movf	___ftadd@exp2,w,c
 11558  000DFC  1827               	xorwf	___ftadd@exp1,w,c
 11559  000DFE  A4D8               	btfss	status,2,c
 11560  000E00  D7F7               	goto	i2l3103
 11561  000E02                     i2l730:
 11562  000E02  AE25               	btfss	___ftadd@sign,7,c
 11563  000E04  D00C               	goto	i2l739
 11564  000E06  0EFF               	movlw	255
 11565  000E08  1A1C               	xorwf	___ftadd@f1,f,c
 11566  000E0A  0EFF               	movlw	255
 11567  000E0C  1A1D               	xorwf	___ftadd@f1+1,f,c
 11568  000E0E  0EFF               	movlw	255
 11569  000E10  1A1E               	xorwf	___ftadd@f1+2,f,c
 11570  000E12  0E01               	movlw	1
 11571  000E14  261C               	addwf	___ftadd@f1,f,c
 11572  000E16  0E00               	movlw	0
 11573  000E18  221D               	addwfc	___ftadd@f1+1,f,c
 11574  000E1A  0E00               	movlw	0
 11575  000E1C  221E               	addwfc	___ftadd@f1+2,f,c
 11576  000E1E                     i2l739:
 11577  000E1E  AC25               	btfss	___ftadd@sign,6,c
 11578  000E20  D00C               	goto	i2l3111
 11579  000E22  0EFF               	movlw	255
 11580  000E24  1A1F               	xorwf	___ftadd@f2,f,c
 11581  000E26  0EFF               	movlw	255
 11582  000E28  1A20               	xorwf	___ftadd@f2+1,f,c
 11583  000E2A  0EFF               	movlw	255
 11584  000E2C  1A21               	xorwf	___ftadd@f2+2,f,c
 11585  000E2E  0E01               	movlw	1
 11586  000E30  261F               	addwf	___ftadd@f2,f,c
 11587  000E32  0E00               	movlw	0
 11588  000E34  2220               	addwfc	___ftadd@f2+1,f,c
 11589  000E36  0E00               	movlw	0
 11590  000E38  2221               	addwfc	___ftadd@f2+2,f,c
 11591  000E3A                     i2l3111:
 11592  000E3A  0E00               	movlw	0
 11593  000E3C  6E25               	movwf	___ftadd@sign,c
 11594  000E3E  501C               	movf	___ftadd@f1,w,c
 11595  000E40  261F               	addwf	___ftadd@f2,f,c
 11596  000E42  501D               	movf	___ftadd@f1+1,w,c
 11597  000E44  2220               	addwfc	___ftadd@f2+1,f,c
 11598  000E46  501E               	movf	___ftadd@f1+2,w,c
 11599  000E48  2221               	addwfc	___ftadd@f2+2,f,c
 11600  000E4A  AE21               	btfss	___ftadd@f2+2,7,c
 11601  000E4C  D00E               	goto	i2l3121
 11602  000E4E  0EFF               	movlw	255
 11603  000E50  1A1F               	xorwf	___ftadd@f2,f,c
 11604  000E52  0EFF               	movlw	255
 11605  000E54  1A20               	xorwf	___ftadd@f2+1,f,c
 11606  000E56  0EFF               	movlw	255
 11607  000E58  1A21               	xorwf	___ftadd@f2+2,f,c
 11608  000E5A  0E01               	movlw	1
 11609  000E5C  261F               	addwf	___ftadd@f2,f,c
 11610  000E5E  0E00               	movlw	0
 11611  000E60  2220               	addwfc	___ftadd@f2+1,f,c
 11612  000E62  0E00               	movlw	0
 11613  000E64  2221               	addwfc	___ftadd@f2+2,f,c
 11614  000E66  0E01               	movlw	1
 11615  000E68  6E25               	movwf	___ftadd@sign,c
 11616  000E6A                     i2l3121:
 11617  000E6A  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 11618  000E6E  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11619  000E72  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11620  000E76  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 11621  000E7A  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 11622  000E7E  ECD0  F010         	call	___ftpack	;wreg free
 11623  000E82  C001  F01C         	movff	?___ftpack,?___ftadd
 11624  000E86  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 11625  000E8A  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 11626  000E8E  0012               	return	
 11627  000E90                     __end_of___ftadd:
 11628                           	opt stack 0
 11629                           pclatu	equ	0xFFB
 11630                           pclath	equ	0xFFA
 11631                           tblptru	equ	0xFF8
 11632                           tblptrh	equ	0xFF7
 11633                           tblptrl	equ	0xFF6
 11634                           tablat	equ	0xFF5
 11635                           prodh	equ	0xFF4
 11636                           prodl	equ	0xFF3
 11637                           intcon	equ	0xFF2
 11638                           intcon2	equ	0xFF1
 11639                           intcon3	equ	0xFF0
 11640                           postinc0	equ	0xFEE
 11641                           fsr0h	equ	0xFEA
 11642                           fsr0l	equ	0xFE9
 11643                           wreg	equ	0xFE8
 11644                           fsr1h	equ	0xFE2
 11645                           fsr1l	equ	0xFE1
 11646                           indf2	equ	0xFDF
 11647                           postinc2	equ	0xFDE
 11648                           postdec2	equ	0xFDD
 11649                           fsr2h	equ	0xFDA
 11650                           fsr2l	equ	0xFD9
 11651                           status	equ	0xFD8
 11652                           
 11653 ;; *************** function ___ftneg *****************
 11654 ;; Defined at:
 11655 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 11656 ;; Parameters:    Size  Location     Type
 11657 ;;  f1              3    0[COMRAM] float 
 11658 ;; Auto vars:     Size  Location     Type
 11659 ;;		None
 11660 ;; Return value:  Size  Location     Type
 11661 ;;                  3    0[COMRAM] float 
 11662 ;; Registers used:
 11663 ;;		wreg, status,2, status,0
 11664 ;; Tracked objects:
 11665 ;;		On entry : 0/0
 11666 ;;		On exit  : 0/0
 11667 ;;		Unchanged: 0/0
 11668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11669 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11672 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11673 ;;Total ram usage:        3 bytes
 11674 ;; Hardware stack levels used:    1
 11675 ;; This function calls:
 11676 ;;		Nothing
 11677 ;; This function is called by:
 11678 ;;		_pow
 11679 ;;		_exp
 11680 ;; This function uses a non-reentrant model
 11681 ;;
 11682                           
 11683                           	psect	text59
 11684  002AFE                     __ptext59:
 11685                           	opt stack 0
 11686  002AFE                     ___ftneg:
 11687                           	opt stack 22
 11688                           
 11689                           ;incstack = 0
 11690  002AFE  5001               	movf	___ftneg@f1,w,c
 11691  002B00  1002               	iorwf	___ftneg@f1+1,w,c
 11692  002B02  1003               	iorwf	___ftneg@f1+2,w,c
 11693  002B04  B4D8               	btfsc	status,2,c
 11694  002B06  D006               	goto	i2l772
 11695  002B08  0E00               	movlw	0
 11696  002B0A  1A01               	xorwf	___ftneg@f1,f,c
 11697  002B0C  0E00               	movlw	0
 11698  002B0E  1A02               	xorwf	___ftneg@f1+1,f,c
 11699  002B10  0E80               	movlw	128
 11700  002B12  1A03               	xorwf	___ftneg@f1+2,f,c
 11701  002B14                     i2l772:
 11702  002B14  C001  F001         	movff	___ftneg@f1,?___ftneg
 11703  002B18  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 11704  002B1C  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 11705  002B20  0012               	return		;funcret
 11706  002B22                     __end_of___ftneg:
 11707                           	opt stack 0
 11708                           pclatu	equ	0xFFB
 11709                           pclath	equ	0xFFA
 11710                           tblptru	equ	0xFF8
 11711                           tblptrh	equ	0xFF7
 11712                           tblptrl	equ	0xFF6
 11713                           tablat	equ	0xFF5
 11714                           prodh	equ	0xFF4
 11715                           prodl	equ	0xFF3
 11716                           intcon	equ	0xFF2
 11717                           intcon2	equ	0xFF1
 11718                           intcon3	equ	0xFF0
 11719                           postinc0	equ	0xFEE
 11720                           fsr0h	equ	0xFEA
 11721                           fsr0l	equ	0xFE9
 11722                           wreg	equ	0xFE8
 11723                           fsr1h	equ	0xFE2
 11724                           fsr1l	equ	0xFE1
 11725                           indf2	equ	0xFDF
 11726                           postinc2	equ	0xFDE
 11727                           postdec2	equ	0xFDD
 11728                           fsr2h	equ	0xFDA
 11729                           fsr2l	equ	0xFD9
 11730                           status	equ	0xFD8
 11731                           
 11732 ;; *************** function ___ftdiv *****************
 11733 ;; Defined at:
 11734 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11735 ;; Parameters:    Size  Location     Type
 11736 ;;  f1              3    8[COMRAM] float 
 11737 ;;  f2              3   11[COMRAM] float 
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;  f3              3   18[COMRAM] float 
 11740 ;;  sign            1   22[COMRAM] unsigned char 
 11741 ;;  exp             1   21[COMRAM] unsigned char 
 11742 ;;  cntr            1   17[COMRAM] unsigned char 
 11743 ;; Return value:  Size  Location     Type
 11744 ;;                  3    8[COMRAM] float 
 11745 ;; Registers used:
 11746 ;;		wreg, status,2, status,0, cstack
 11747 ;; Tracked objects:
 11748 ;;		On entry : 0/0
 11749 ;;		On exit  : 0/0
 11750 ;;		Unchanged: 0/0
 11751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11752 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11753 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11754 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11755 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11756 ;;Total ram usage:       15 bytes
 11757 ;; Hardware stack levels used:    1
 11758 ;; Hardware stack levels required when called:    1
 11759 ;; This function calls:
 11760 ;;		___ftpack
 11761 ;; This function is called by:
 11762 ;;		_exp
 11763 ;; This function uses a non-reentrant model
 11764 ;;
 11765                           
 11766                           	psect	text60
 11767  001A5E                     __ptext60:
 11768                           	opt stack 0
 11769  001A5E                     ___ftdiv:
 11770                           	opt stack 21
 11771                           
 11772                           ;incstack = 0
 11773  001A5E  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 11774  001A62  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 11775  001A64  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 11776  001A66  340A               	rlcf	___ftdiv@f1+1,w,c
 11777  001A68  360F               	rlcf	??___ftdiv& (0+255),f,c
 11778  001A6A  E301               	bnc	u259_41
 11779  001A6C  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 11780  001A6E                     u259_41:
 11781  001A6E  500F               	movf	??___ftdiv,w,c
 11782  001A70  6E16               	movwf	___ftdiv@exp,c
 11783  001A72  5016               	movf	___ftdiv@exp,w,c
 11784  001A74  A4D8               	btfss	status,2,c
 11785  001A76  D007               	goto	i2l3291
 11786  001A78  0E00               	movlw	0
 11787  001A7A  6E09               	movwf	?___ftdiv,c
 11788  001A7C  0E00               	movlw	0
 11789  001A7E  6E0A               	movwf	?___ftdiv+1,c
 11790  001A80  0E00               	movlw	0
 11791  001A82  6E0B               	movwf	?___ftdiv+2,c
 11792  001A84  0012               	return	
 11793  001A86                     i2l3291:
 11794  001A86  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 11795  001A8A  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 11796  001A8C  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 11797  001A8E  340D               	rlcf	___ftdiv@f2+1,w,c
 11798  001A90  360F               	rlcf	??___ftdiv& (0+255),f,c
 11799  001A92  E301               	bnc	u261_41
 11800  001A94  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 11801  001A96                     u261_41:
 11802  001A96  500F               	movf	??___ftdiv,w,c
 11803  001A98  6E17               	movwf	___ftdiv@sign,c
 11804  001A9A  5017               	movf	___ftdiv@sign,w,c
 11805  001A9C  A4D8               	btfss	status,2,c
 11806  001A9E  D007               	goto	i2l3297
 11807  001AA0  0E00               	movlw	0
 11808  001AA2  6E09               	movwf	?___ftdiv,c
 11809  001AA4  0E00               	movlw	0
 11810  001AA6  6E0A               	movwf	?___ftdiv+1,c
 11811  001AA8  0E00               	movlw	0
 11812  001AAA  6E0B               	movwf	?___ftdiv+2,c
 11813  001AAC  0012               	return	
 11814  001AAE                     i2l3297:
 11815  001AAE  0E00               	movlw	0
 11816  001AB0  6E13               	movwf	___ftdiv@f3,c
 11817  001AB2  0E00               	movlw	0
 11818  001AB4  6E14               	movwf	___ftdiv@f3+1,c
 11819  001AB6  0E00               	movlw	0
 11820  001AB8  6E15               	movwf	___ftdiv@f3+2,c
 11821  001ABA  5017               	movf	___ftdiv@sign,w,c
 11822  001ABC  0F89               	addlw	137
 11823  001ABE  5E16               	subwf	___ftdiv@exp,f,c
 11824  001AC0  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 11825  001AC4  500E               	movf	___ftdiv@f2+2,w,c
 11826  001AC6  1A17               	xorwf	___ftdiv@sign,f,c
 11827  001AC8  0E80               	movlw	128
 11828  001ACA  1617               	andwf	___ftdiv@sign,f,c
 11829  001ACC  8E0A               	bsf	___ftdiv@f1+1,7,c
 11830  001ACE  0EFF               	movlw	255
 11831  001AD0  1609               	andwf	___ftdiv@f1,f,c
 11832  001AD2  0EFF               	movlw	255
 11833  001AD4  160A               	andwf	___ftdiv@f1+1,f,c
 11834  001AD6  0E00               	movlw	0
 11835  001AD8  160B               	andwf	___ftdiv@f1+2,f,c
 11836  001ADA  8E0D               	bsf	___ftdiv@f2+1,7,c
 11837  001ADC  0EFF               	movlw	255
 11838  001ADE  160C               	andwf	___ftdiv@f2,f,c
 11839  001AE0  0EFF               	movlw	255
 11840  001AE2  160D               	andwf	___ftdiv@f2+1,f,c
 11841  001AE4  0E00               	movlw	0
 11842  001AE6  160E               	andwf	___ftdiv@f2+2,f,c
 11843  001AE8  0E18               	movlw	24
 11844  001AEA  6E12               	movwf	___ftdiv@cntr,c
 11845  001AEC                     i2l3317:
 11846  001AEC  90D8               	bcf	status,0,c
 11847  001AEE  3613               	rlcf	___ftdiv@f3,f,c
 11848  001AF0  3614               	rlcf	___ftdiv@f3+1,f,c
 11849  001AF2  3615               	rlcf	___ftdiv@f3+2,f,c
 11850  001AF4  500C               	movf	___ftdiv@f2,w,c
 11851  001AF6  5C09               	subwf	___ftdiv@f1,w,c
 11852  001AF8  500D               	movf	___ftdiv@f2+1,w,c
 11853  001AFA  580A               	subwfb	___ftdiv@f1+1,w,c
 11854  001AFC  500E               	movf	___ftdiv@f2+2,w,c
 11855  001AFE  580B               	subwfb	___ftdiv@f1+2,w,c
 11856  001B00  A0D8               	btfss	status,0,c
 11857  001B02  D007               	goto	i2l750
 11858  001B04  500C               	movf	___ftdiv@f2,w,c
 11859  001B06  5E09               	subwf	___ftdiv@f1,f,c
 11860  001B08  500D               	movf	___ftdiv@f2+1,w,c
 11861  001B0A  5A0A               	subwfb	___ftdiv@f1+1,f,c
 11862  001B0C  500E               	movf	___ftdiv@f2+2,w,c
 11863  001B0E  5A0B               	subwfb	___ftdiv@f1+2,f,c
 11864  001B10  8013               	bsf	___ftdiv@f3,0,c
 11865  001B12                     i2l750:
 11866  001B12  90D8               	bcf	status,0,c
 11867  001B14  3609               	rlcf	___ftdiv@f1,f,c
 11868  001B16  360A               	rlcf	___ftdiv@f1+1,f,c
 11869  001B18  360B               	rlcf	___ftdiv@f1+2,f,c
 11870  001B1A  2E12               	decfsz	___ftdiv@cntr,f,c
 11871  001B1C  D7E7               	goto	i2l3317
 11872  001B1E  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 11873  001B22  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11874  001B26  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11875  001B2A  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 11876  001B2E  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 11877  001B32  ECD0  F010         	call	___ftpack	;wreg free
 11878  001B36  C001  F009         	movff	?___ftpack,?___ftdiv
 11879  001B3A  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 11880  001B3E  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 11881  001B42  0012               	return	
 11882  001B44                     __end_of___ftdiv:
 11883                           	opt stack 0
 11884                           pclatu	equ	0xFFB
 11885                           pclath	equ	0xFFA
 11886                           tblptru	equ	0xFF8
 11887                           tblptrh	equ	0xFF7
 11888                           tblptrl	equ	0xFF6
 11889                           tablat	equ	0xFF5
 11890                           prodh	equ	0xFF4
 11891                           prodl	equ	0xFF3
 11892                           intcon	equ	0xFF2
 11893                           intcon2	equ	0xFF1
 11894                           intcon3	equ	0xFF0
 11895                           postinc0	equ	0xFEE
 11896                           fsr0h	equ	0xFEA
 11897                           fsr0l	equ	0xFE9
 11898                           wreg	equ	0xFE8
 11899                           fsr1h	equ	0xFE2
 11900                           fsr1l	equ	0xFE1
 11901                           indf2	equ	0xFDF
 11902                           postinc2	equ	0xFDE
 11903                           postdec2	equ	0xFDD
 11904                           fsr2h	equ	0xFDA
 11905                           fsr2l	equ	0xFD9
 11906                           status	equ	0xFD8
 11907                           
 11908 ;; *************** function ___awtoft *****************
 11909 ;; Defined at:
 11910 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;  c               2    8[COMRAM] int 
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;  sign            1   11[COMRAM] unsigned char 
 11915 ;; Return value:  Size  Location     Type
 11916 ;;                  3    8[COMRAM] float 
 11917 ;; Registers used:
 11918 ;;		wreg, status,2, status,0, cstack
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11924 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11927 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11928 ;;Total ram usage:        4 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; Hardware stack levels required when called:    1
 11931 ;; This function calls:
 11932 ;;		___ftpack
 11933 ;; This function is called by:
 11934 ;;		_dec_to_hex
 11935 ;;		_exp
 11936 ;;		_log
 11937 ;; This function uses a non-reentrant model
 11938 ;;
 11939                           
 11940                           	psect	text61
 11941  0029B6                     __ptext61:
 11942                           	opt stack 0
 11943  0029B6                     ___awtoft:
 11944                           	opt stack 21
 11945                           
 11946                           ;incstack = 0
 11947  0029B6  0E00               	movlw	0
 11948  0029B8  6E0C               	movwf	___awtoft@sign,c
 11949  0029BA  AE0A               	btfss	___awtoft@c+1,7,c
 11950  0029BC  D006               	goto	i2l3347
 11951  0029BE  6C09               	negf	___awtoft@c,c
 11952  0029C0  1E0A               	comf	___awtoft@c+1,f,c
 11953  0029C2  B0D8               	btfsc	status,0,c
 11954  0029C4  2A0A               	incf	___awtoft@c+1,f,c
 11955  0029C6  0E01               	movlw	1
 11956  0029C8  6E0C               	movwf	___awtoft@sign,c
 11957  0029CA                     i2l3347:
 11958  0029CA  C009  F001         	movff	___awtoft@c,___ftpack@arg
 11959  0029CE  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 11960  0029D2  6A03               	clrf	___ftpack@arg+2,c
 11961  0029D4  0E8E               	movlw	142
 11962  0029D6  6E04               	movwf	___ftpack@exp,c
 11963  0029D8  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 11964  0029DC  ECD0  F010         	call	___ftpack	;wreg free
 11965  0029E0  C001  F009         	movff	?___ftpack,?___awtoft
 11966  0029E4  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 11967  0029E8  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 11968  0029EC  0012               	return	
 11969  0029EE                     __end_of___awtoft:
 11970                           	opt stack 0
 11971                           pclatu	equ	0xFFB
 11972                           pclath	equ	0xFFA
 11973                           tblptru	equ	0xFF8
 11974                           tblptrh	equ	0xFF7
 11975                           tblptrl	equ	0xFF6
 11976                           tablat	equ	0xFF5
 11977                           prodh	equ	0xFF4
 11978                           prodl	equ	0xFF3
 11979                           intcon	equ	0xFF2
 11980                           intcon2	equ	0xFF1
 11981                           intcon3	equ	0xFF0
 11982                           postinc0	equ	0xFEE
 11983                           fsr0h	equ	0xFEA
 11984                           fsr0l	equ	0xFE9
 11985                           wreg	equ	0xFE8
 11986                           fsr1h	equ	0xFE2
 11987                           fsr1l	equ	0xFE1
 11988                           indf2	equ	0xFDF
 11989                           postinc2	equ	0xFDE
 11990                           postdec2	equ	0xFDD
 11991                           fsr2h	equ	0xFDA
 11992                           fsr2l	equ	0xFD9
 11993                           status	equ	0xFD8
 11994                           
 11995 ;; *************** function ___lltoft *****************
 11996 ;; Defined at:
 11997 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 11998 ;; Parameters:    Size  Location     Type
 11999 ;;  c               4    8[COMRAM] unsigned long 
 12000 ;; Auto vars:     Size  Location     Type
 12001 ;;  exp             1   16[COMRAM] unsigned char 
 12002 ;; Return value:  Size  Location     Type
 12003 ;;                  3    8[COMRAM] float 
 12004 ;; Registers used:
 12005 ;;		wreg, status,2, status,0, cstack
 12006 ;; Tracked objects:
 12007 ;;		On entry : 0/0
 12008 ;;		On exit  : 0/0
 12009 ;;		Unchanged: 0/0
 12010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12011 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12012 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12013 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12014 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12015 ;;Total ram usage:        9 bytes
 12016 ;; Hardware stack levels used:    1
 12017 ;; Hardware stack levels required when called:    1
 12018 ;; This function calls:
 12019 ;;		___ftpack
 12020 ;; This function is called by:
 12021 ;;		_pow
 12022 ;; This function uses a non-reentrant model
 12023 ;;
 12024                           
 12025                           	psect	text62
 12026  00279E                     __ptext62:
 12027                           	opt stack 0
 12028  00279E                     ___lltoft:
 12029                           	opt stack 22
 12030                           
 12031                           ;incstack = 0
 12032  00279E  0E8E               	movlw	142
 12033  0027A0  6E11               	movwf	___lltoft@exp,c
 12034  0027A2  D006               	goto	i2l3473
 12035  0027A4                     i2l3471:
 12036  0027A4  90D8               	bcf	status,0,c
 12037  0027A6  320C               	rrcf	___lltoft@c+3,f,c
 12038  0027A8  320B               	rrcf	___lltoft@c+2,f,c
 12039  0027AA  320A               	rrcf	___lltoft@c+1,f,c
 12040  0027AC  3209               	rrcf	___lltoft@c,f,c
 12041  0027AE  2A11               	incf	___lltoft@exp,f,c
 12042  0027B0                     i2l3473:
 12043  0027B0  0E00               	movlw	0
 12044  0027B2  1409               	andwf	___lltoft@c,w,c
 12045  0027B4  6E0D               	movwf	??___lltoft& (0+255),c
 12046  0027B6  0E00               	movlw	0
 12047  0027B8  140A               	andwf	___lltoft@c+1,w,c
 12048  0027BA  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12049  0027BC  0E00               	movlw	0
 12050  0027BE  140B               	andwf	___lltoft@c+2,w,c
 12051  0027C0  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12052  0027C2  0EFF               	movlw	255
 12053  0027C4  140C               	andwf	___lltoft@c+3,w,c
 12054  0027C6  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12055  0027C8  500D               	movf	??___lltoft,w,c
 12056  0027CA  100E               	iorwf	??___lltoft+1,w,c
 12057  0027CC  100F               	iorwf	??___lltoft+2,w,c
 12058  0027CE  1010               	iorwf	??___lltoft+3,w,c
 12059  0027D0  A4D8               	btfss	status,2,c
 12060  0027D2  D7E8               	goto	i2l3471
 12061  0027D4  C009  F001         	movff	___lltoft@c,___ftpack@arg
 12062  0027D8  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 12063  0027DC  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 12064  0027E0  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 12065  0027E4  0E00               	movlw	0
 12066  0027E6  6E05               	movwf	___ftpack@sign,c
 12067  0027E8  ECD0  F010         	call	___ftpack	;wreg free
 12068  0027EC  C001  F009         	movff	?___ftpack,?___lltoft
 12069  0027F0  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 12070  0027F4  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 12071  0027F8  0012               	return	
 12072  0027FA                     __end_of___lltoft:
 12073                           	opt stack 0
 12074                           pclatu	equ	0xFFB
 12075                           pclath	equ	0xFFA
 12076                           tblptru	equ	0xFF8
 12077                           tblptrh	equ	0xFF7
 12078                           tblptrl	equ	0xFF6
 12079                           tablat	equ	0xFF5
 12080                           prodh	equ	0xFF4
 12081                           prodl	equ	0xFF3
 12082                           intcon	equ	0xFF2
 12083                           intcon2	equ	0xFF1
 12084                           intcon3	equ	0xFF0
 12085                           postinc0	equ	0xFEE
 12086                           fsr0h	equ	0xFEA
 12087                           fsr0l	equ	0xFE9
 12088                           wreg	equ	0xFE8
 12089                           fsr1h	equ	0xFE2
 12090                           fsr1l	equ	0xFE1
 12091                           indf2	equ	0xFDF
 12092                           postinc2	equ	0xFDE
 12093                           postdec2	equ	0xFDD
 12094                           fsr2h	equ	0xFDA
 12095                           fsr2l	equ	0xFD9
 12096                           status	equ	0xFD8
 12097                           
 12098 ;; *************** function ___ftpack *****************
 12099 ;; Defined at:
 12100 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12101 ;; Parameters:    Size  Location     Type
 12102 ;;  arg             3    0[COMRAM] unsigned um
 12103 ;;  exp             1    3[COMRAM] unsigned char 
 12104 ;;  sign            1    4[COMRAM] unsigned char 
 12105 ;; Auto vars:     Size  Location     Type
 12106 ;;		None
 12107 ;; Return value:  Size  Location     Type
 12108 ;;                  3    0[COMRAM] float 
 12109 ;; Registers used:
 12110 ;;		wreg, status,2, status,0
 12111 ;; Tracked objects:
 12112 ;;		On entry : 0/0
 12113 ;;		On exit  : 0/0
 12114 ;;		Unchanged: 0/0
 12115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12116 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12118 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12119 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12120 ;;Total ram usage:        8 bytes
 12121 ;; Hardware stack levels used:    1
 12122 ;; This function calls:
 12123 ;;		Nothing
 12124 ;; This function is called by:
 12125 ;;		___altoft
 12126 ;;		___awtoft
 12127 ;;		___ftadd
 12128 ;;		___ftdiv
 12129 ;;		___ftmul
 12130 ;;		___lltoft
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           	psect	text63
 12135  0021A0                     __ptext63:
 12136                           	opt stack 0
 12137  0021A0                     ___ftpack:
 12138                           	opt stack 20
 12139                           
 12140                           ;incstack = 0
 12141  0021A0  5004               	movf	___ftpack@exp,w,c
 12142  0021A2  B4D8               	btfsc	status,2,c
 12143  0021A4  D005               	goto	i2l3007
 12144  0021A6  5001               	movf	___ftpack@arg,w,c
 12145  0021A8  1002               	iorwf	___ftpack@arg+1,w,c
 12146  0021AA  1003               	iorwf	___ftpack@arg+2,w,c
 12147  0021AC  A4D8               	btfss	status,2,c
 12148  0021AE  D00C               	goto	i2l3013
 12149  0021B0                     i2l3007:
 12150  0021B0  0E00               	movlw	0
 12151  0021B2  6E01               	movwf	?___ftpack,c
 12152  0021B4  0E00               	movlw	0
 12153  0021B6  6E02               	movwf	?___ftpack+1,c
 12154  0021B8  0E00               	movlw	0
 12155  0021BA  6E03               	movwf	?___ftpack+2,c
 12156  0021BC  0012               	return	
 12157  0021BE                     i2l3011:
 12158  0021BE  2A04               	incf	___ftpack@exp,f,c
 12159  0021C0  90D8               	bcf	status,0,c
 12160  0021C2  3203               	rrcf	___ftpack@arg+2,f,c
 12161  0021C4  3202               	rrcf	___ftpack@arg+1,f,c
 12162  0021C6  3201               	rrcf	___ftpack@arg,f,c
 12163  0021C8                     i2l3013:
 12164  0021C8  0E00               	movlw	0
 12165  0021CA  1401               	andwf	___ftpack@arg,w,c
 12166  0021CC  6E06               	movwf	??___ftpack& (0+255),c
 12167  0021CE  0E00               	movlw	0
 12168  0021D0  1402               	andwf	___ftpack@arg+1,w,c
 12169  0021D2  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12170  0021D4  0EFE               	movlw	254
 12171  0021D6  1403               	andwf	___ftpack@arg+2,w,c
 12172  0021D8  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12173  0021DA  5006               	movf	??___ftpack,w,c
 12174  0021DC  1007               	iorwf	??___ftpack+1,w,c
 12175  0021DE  1008               	iorwf	??___ftpack+2,w,c
 12176  0021E0  B4D8               	btfsc	status,2,c
 12177  0021E2  D00C               	goto	i2l3019
 12178  0021E4  D7EC               	goto	i2l3011
 12179  0021E6                     i2l3015:
 12180  0021E6  2A04               	incf	___ftpack@exp,f,c
 12181  0021E8  0E01               	movlw	1
 12182  0021EA  2601               	addwf	___ftpack@arg,f,c
 12183  0021EC  0E00               	movlw	0
 12184  0021EE  2202               	addwfc	___ftpack@arg+1,f,c
 12185  0021F0  0E00               	movlw	0
 12186  0021F2  2203               	addwfc	___ftpack@arg+2,f,c
 12187  0021F4  90D8               	bcf	status,0,c
 12188  0021F6  3203               	rrcf	___ftpack@arg+2,f,c
 12189  0021F8  3202               	rrcf	___ftpack@arg+1,f,c
 12190  0021FA  3201               	rrcf	___ftpack@arg,f,c
 12191  0021FC                     i2l3019:
 12192  0021FC  0E00               	movlw	0
 12193  0021FE  1401               	andwf	___ftpack@arg,w,c
 12194  002200  6E06               	movwf	??___ftpack& (0+255),c
 12195  002202  0E00               	movlw	0
 12196  002204  1402               	andwf	___ftpack@arg+1,w,c
 12197  002206  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12198  002208  0EFF               	movlw	255
 12199  00220A  1403               	andwf	___ftpack@arg+2,w,c
 12200  00220C  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12201  00220E  5006               	movf	??___ftpack,w,c
 12202  002210  1007               	iorwf	??___ftpack+1,w,c
 12203  002212  1008               	iorwf	??___ftpack+2,w,c
 12204  002214  B4D8               	btfsc	status,2,c
 12205  002216  D006               	goto	i2l3023
 12206  002218  D7E6               	goto	i2l3015
 12207  00221A                     i2l3021:
 12208  00221A  0604               	decf	___ftpack@exp,f,c
 12209  00221C  90D8               	bcf	status,0,c
 12210  00221E  3601               	rlcf	___ftpack@arg,f,c
 12211  002220  3602               	rlcf	___ftpack@arg+1,f,c
 12212  002222  3603               	rlcf	___ftpack@arg+2,f,c
 12213  002224                     i2l3023:
 12214  002224  BE02               	btfsc	___ftpack@arg+1,7,c
 12215  002226  D003               	goto	i2l692
 12216  002228  0E02               	movlw	2
 12217  00222A  6004               	cpfslt	___ftpack@exp,c
 12218  00222C  D7F6               	goto	i2l3021
 12219  00222E                     i2l692:
 12220  00222E  A004               	btfss	___ftpack@exp,0,c
 12221  002230  9E02               	bcf	___ftpack@arg+1,7,c
 12222  002232  90D8               	bcf	status,0,c
 12223  002234  3204               	rrcf	___ftpack@exp,f,c
 12224  002236  5004               	movf	___ftpack@exp,w,c
 12225  002238  1203               	iorwf	___ftpack@arg+2,f,c
 12226  00223A  5005               	movf	___ftpack@sign,w,c
 12227  00223C  A4D8               	btfss	status,2,c
 12228  00223E  8E03               	bsf	___ftpack@arg+2,7,c
 12229  002240  C001  F001         	movff	___ftpack@arg,?___ftpack
 12230  002244  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 12231  002248  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 12232  00224C  0012               	return	
 12233  00224E                     __end_of___ftpack:
 12234                           	opt stack 0
 12235                           pclatu	equ	0xFFB
 12236                           pclath	equ	0xFFA
 12237                           tblptru	equ	0xFF8
 12238                           tblptrh	equ	0xFF7
 12239                           tblptrl	equ	0xFF6
 12240                           tablat	equ	0xFF5
 12241                           prodh	equ	0xFF4
 12242                           prodl	equ	0xFF3
 12243                           intcon	equ	0xFF2
 12244                           intcon2	equ	0xFF1
 12245                           intcon3	equ	0xFF0
 12246                           postinc0	equ	0xFEE
 12247                           fsr0h	equ	0xFEA
 12248                           fsr0l	equ	0xFE9
 12249                           wreg	equ	0xFE8
 12250                           fsr1h	equ	0xFE2
 12251                           fsr1l	equ	0xFE1
 12252                           indf2	equ	0xFDF
 12253                           postinc2	equ	0xFDE
 12254                           postdec2	equ	0xFDD
 12255                           fsr2h	equ	0xFDA
 12256                           fsr2l	equ	0xFD9
 12257                           status	equ	0xFD8
 12258                           
 12259 ;; *************** function ___awdiv *****************
 12260 ;; Defined at:
 12261 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;  dividend        2    0[COMRAM] int 
 12264 ;;  divisor         2    2[COMRAM] int 
 12265 ;; Auto vars:     Size  Location     Type
 12266 ;;  quotient        2    6[COMRAM] int 
 12267 ;;  sign            1    5[COMRAM] unsigned char 
 12268 ;;  counter         1    4[COMRAM] unsigned char 
 12269 ;; Return value:  Size  Location     Type
 12270 ;;                  2    0[COMRAM] int 
 12271 ;; Registers used:
 12272 ;;		wreg, status,2, status,0
 12273 ;; Tracked objects:
 12274 ;;		On entry : 0/0
 12275 ;;		On exit  : 0/0
 12276 ;;		Unchanged: 0/0
 12277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12278 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12279 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12281 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12282 ;;Total ram usage:        8 bytes
 12283 ;; Hardware stack levels used:    1
 12284 ;; This function calls:
 12285 ;;		Nothing
 12286 ;; This function is called by:
 12287 ;;		_dec_to_hex
 12288 ;;		_servo_rotate1
 12289 ;;		_servo_rotate2
 12290 ;; This function uses a non-reentrant model
 12291 ;;
 12292                           
 12293                           	psect	text64
 12294  0024A0                     __ptext64:
 12295                           	opt stack 0
 12296  0024A0                     ___awdiv:
 12297                           	opt stack 24
 12298                           
 12299                           ;incstack = 0
 12300  0024A0  0E00               	movlw	0
 12301  0024A2  6E06               	movwf	___awdiv@sign,c
 12302  0024A4  AE04               	btfss	___awdiv@divisor+1,7,c
 12303  0024A6  D006               	goto	i2l3819
 12304  0024A8  6C03               	negf	___awdiv@divisor,c
 12305  0024AA  1E04               	comf	___awdiv@divisor+1,f,c
 12306  0024AC  B0D8               	btfsc	status,0,c
 12307  0024AE  2A04               	incf	___awdiv@divisor+1,f,c
 12308  0024B0  0E01               	movlw	1
 12309  0024B2  6E06               	movwf	___awdiv@sign,c
 12310  0024B4                     i2l3819:
 12311  0024B4  AE02               	btfss	___awdiv@dividend+1,7,c
 12312  0024B6  D006               	goto	i2l3825
 12313  0024B8  6C01               	negf	___awdiv@dividend,c
 12314  0024BA  1E02               	comf	___awdiv@dividend+1,f,c
 12315  0024BC  B0D8               	btfsc	status,0,c
 12316  0024BE  2A02               	incf	___awdiv@dividend+1,f,c
 12317  0024C0  0E01               	movlw	1
 12318  0024C2  1A06               	xorwf	___awdiv@sign,f,c
 12319  0024C4                     i2l3825:
 12320  0024C4  0E00               	movlw	0
 12321  0024C6  6E08               	movwf	___awdiv@quotient+1,c
 12322  0024C8  0E00               	movlw	0
 12323  0024CA  6E07               	movwf	___awdiv@quotient,c
 12324  0024CC  5003               	movf	___awdiv@divisor,w,c
 12325  0024CE  1004               	iorwf	___awdiv@divisor+1,w,c
 12326  0024D0  B4D8               	btfsc	status,2,c
 12327  0024D2  D01C               	goto	i2l3847
 12328  0024D4  0E01               	movlw	1
 12329  0024D6  6E05               	movwf	___awdiv@counter,c
 12330  0024D8  D004               	goto	i2l3833
 12331  0024DA                     i2l3831:
 12332  0024DA  90D8               	bcf	status,0,c
 12333  0024DC  3603               	rlcf	___awdiv@divisor,f,c
 12334  0024DE  3604               	rlcf	___awdiv@divisor+1,f,c
 12335  0024E0  2A05               	incf	___awdiv@counter,f,c
 12336  0024E2                     i2l3833:
 12337  0024E2  AE04               	btfss	___awdiv@divisor+1,7,c
 12338  0024E4  D7FA               	goto	i2l3831
 12339  0024E6                     i2l3835:
 12340  0024E6  90D8               	bcf	status,0,c
 12341  0024E8  3607               	rlcf	___awdiv@quotient,f,c
 12342  0024EA  3608               	rlcf	___awdiv@quotient+1,f,c
 12343  0024EC  5003               	movf	___awdiv@divisor,w,c
 12344  0024EE  5C01               	subwf	___awdiv@dividend,w,c
 12345  0024F0  5004               	movf	___awdiv@divisor+1,w,c
 12346  0024F2  5802               	subwfb	___awdiv@dividend+1,w,c
 12347  0024F4  A0D8               	btfss	status,0,c
 12348  0024F6  D005               	goto	i2l3843
 12349  0024F8  5003               	movf	___awdiv@divisor,w,c
 12350  0024FA  5E01               	subwf	___awdiv@dividend,f,c
 12351  0024FC  5004               	movf	___awdiv@divisor+1,w,c
 12352  0024FE  5A02               	subwfb	___awdiv@dividend+1,f,c
 12353  002500  8007               	bsf	___awdiv@quotient,0,c
 12354  002502                     i2l3843:
 12355  002502  90D8               	bcf	status,0,c
 12356  002504  3204               	rrcf	___awdiv@divisor+1,f,c
 12357  002506  3203               	rrcf	___awdiv@divisor,f,c
 12358  002508  2E05               	decfsz	___awdiv@counter,f,c
 12359  00250A  D7ED               	goto	i2l3835
 12360  00250C                     i2l3847:
 12361  00250C  5006               	movf	___awdiv@sign,w,c
 12362  00250E  B4D8               	btfsc	status,2,c
 12363  002510  D004               	goto	i2l3851
 12364  002512  6C07               	negf	___awdiv@quotient,c
 12365  002514  1E08               	comf	___awdiv@quotient+1,f,c
 12366  002516  B0D8               	btfsc	status,0,c
 12367  002518  2A08               	incf	___awdiv@quotient+1,f,c
 12368  00251A                     i2l3851:
 12369  00251A  C007  F001         	movff	___awdiv@quotient,?___awdiv
 12370  00251E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 12371  002522  0012               	return	
 12372  002524                     __end_of___awdiv:
 12373                           	opt stack 0
 12374                           pclatu	equ	0xFFB
 12375                           pclath	equ	0xFFA
 12376                           tblptru	equ	0xFF8
 12377                           tblptrh	equ	0xFF7
 12378                           tblptrl	equ	0xFF6
 12379                           tablat	equ	0xFF5
 12380                           prodh	equ	0xFF4
 12381                           prodl	equ	0xFF3
 12382                           intcon	equ	0xFF2
 12383                           intcon2	equ	0xFF1
 12384                           intcon3	equ	0xFF0
 12385                           postinc0	equ	0xFEE
 12386                           fsr0h	equ	0xFEA
 12387                           fsr0l	equ	0xFE9
 12388                           wreg	equ	0xFE8
 12389                           fsr1h	equ	0xFE2
 12390                           fsr1l	equ	0xFE1
 12391                           indf2	equ	0xFDF
 12392                           postinc2	equ	0xFDE
 12393                           postdec2	equ	0xFDD
 12394                           fsr2h	equ	0xFDA
 12395                           fsr2l	equ	0xFD9
 12396                           status	equ	0xFD8
 12397                           pclatu	equ	0xFFB
 12398                           pclath	equ	0xFFA
 12399                           tblptru	equ	0xFF8
 12400                           tblptrh	equ	0xFF7
 12401                           tblptrl	equ	0xFF6
 12402                           tablat	equ	0xFF5
 12403                           prodh	equ	0xFF4
 12404                           prodl	equ	0xFF3
 12405                           intcon	equ	0xFF2
 12406                           intcon2	equ	0xFF1
 12407                           intcon3	equ	0xFF0
 12408                           postinc0	equ	0xFEE
 12409                           fsr0h	equ	0xFEA
 12410                           fsr0l	equ	0xFE9
 12411                           wreg	equ	0xFE8
 12412                           fsr1h	equ	0xFE2
 12413                           fsr1l	equ	0xFE1
 12414                           indf2	equ	0xFDF
 12415                           postinc2	equ	0xFDE
 12416                           postdec2	equ	0xFDD
 12417                           fsr2h	equ	0xFDA
 12418                           fsr2l	equ	0xFD9
 12419                           status	equ	0xFD8
 12420                           
 12421                           	psect	rparam
 12422  0000                     pclatu	equ	0xFFB
 12423                           pclath	equ	0xFFA
 12424                           tblptru	equ	0xFF8
 12425                           tblptrh	equ	0xFF7
 12426                           tblptrl	equ	0xFF6
 12427                           tablat	equ	0xFF5
 12428                           prodh	equ	0xFF4
 12429                           prodl	equ	0xFF3
 12430                           intcon	equ	0xFF2
 12431                           intcon2	equ	0xFF1
 12432                           intcon3	equ	0xFF0
 12433                           postinc0	equ	0xFEE
 12434                           fsr0h	equ	0xFEA
 12435                           fsr0l	equ	0xFE9
 12436                           wreg	equ	0xFE8
 12437                           fsr1h	equ	0xFE2
 12438                           fsr1l	equ	0xFE1
 12439                           indf2	equ	0xFDF
 12440                           postinc2	equ	0xFDE
 12441                           postdec2	equ	0xFDD
 12442                           fsr2h	equ	0xFDA
 12443                           fsr2l	equ	0xFD9
 12444                           status	equ	0xFD8
 12445                           
 12446                           	psect	temp
 12447  00007E                     btemp:
 12448                           	opt stack 0
 12449  00007E                     	ds	1
 12450  0000                     int$flags	set	btemp
 12451                           pclatu	equ	0xFFB
 12452                           pclath	equ	0xFFA
 12453                           tblptru	equ	0xFF8
 12454                           tblptrh	equ	0xFF7
 12455                           tblptrl	equ	0xFF6
 12456                           tablat	equ	0xFF5
 12457                           prodh	equ	0xFF4
 12458                           prodl	equ	0xFF3
 12459                           intcon	equ	0xFF2
 12460                           intcon2	equ	0xFF1
 12461                           intcon3	equ	0xFF0
 12462                           postinc0	equ	0xFEE
 12463                           fsr0h	equ	0xFEA
 12464                           fsr0l	equ	0xFE9
 12465                           wreg	equ	0xFE8
 12466                           fsr1h	equ	0xFE2
 12467                           fsr1l	equ	0xFE1
 12468                           indf2	equ	0xFDF
 12469                           postinc2	equ	0xFDE
 12470                           postdec2	equ	0xFDD
 12471                           fsr2h	equ	0xFDA
 12472                           fsr2l	equ	0xFD9
 12473                           status	equ	0xFD8


Data Sizes:
    Strings     522
    Constant    99
    Data        2
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     55     111
    BANK1           256      0      22
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_28(CODE[15]), STR_27(CODE[16]), STR_26(CODE[28]), STR_25(CODE[25]), 
		 -> STR_24(CODE[24]), STR_23(CODE[23]), STR_22(CODE[18]), STR_21(CODE[23]), 
		 -> STR_20(CODE[10]), STR_19(CODE[18]), STR_18(CODE[18]), STR_17(CODE[18]), 
		 -> STR_16(CODE[18]), STR_15(CODE[18]), STR_14(CODE[18]), STR_13(CODE[18]), 
		 -> STR_12(CODE[18]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[23]), 
		 -> STR_8(CODE[23]), STR_7(CODE[20]), STR_6(CODE[17]), STR_5(CODE[14]), 
		 -> STR_4(CODE[24]), STR_3(CODE[24]), STR_2(CODE[24]), STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2_I2C_ColorSens_Init->i2_I2C_Master_Write
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   43766
                                             54 BANK0      1     1      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    7351
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    4704
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    7351
                                             52 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    14    14      0    2647
                                             19 BANK0     14    14      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    4704
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    7065
                                             52 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    4704
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    5128
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              33    23     10    4569
                                             28 BANK0     24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1001
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   1     1      0    2248
                                             19 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    2248
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   76343
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
               i2_I2C_ColorSens_Init
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  14    14      0    1103
                                              3 COMRAM    14    14      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    2329
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) i2_I2C_ColorSens_Init                                 1     1      0     724
                                              3 COMRAM     1     1      0
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2     289
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     837
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     724
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69991
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58195
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   19010
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31578
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8387
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     521
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     684
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
   i2_I2C_ColorSens_Init
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      16       7        8.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     37      6F       5       86.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     102      34        0.0%
DATA                 0      0     102       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 21 14:39:09 2017

                 ___altoft@exp 003F             i2_I2C_Master_Start 2C04             i2_I2C_Master_Write 2BE2  
                ___altoft@sign 0040                             l34 2B7A                 ?_emergencystop 0001  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0092             i2___lwdiv@dividend 0001  
                  __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                    __CFG_OSC$HS 000000  
                 ___ftadd@exp1 0027                   ___ftadd@exp2 0026                   ___ftadd@sign 0025  
                          l352 2B42                            l395 156C                            l822 218E  
                          l875 2592                            l885 26D4                            _GIE 007F97  
                 __CFG_CPB$OFF 000000                            _PEN 007E2A                   __CFG_CPD$OFF 000000  
                          _SEN 007E28                            _PSA 007EAB            ?i2_I2C_Master_Start 0001  
          ?i2_I2C_Master_Write 0002                            _exp 0AFC                            _log 156E  
                          _isr 0008                            _pow 1024                   ___awmod@sign 0095  
                          prod 000FF3                            wreg 000FE8                   ?_bottle_time 0001  
                 __CFG_LVP$OFF 000000                   ___ftdiv@cntr 0012                   ___ftdiv@sign 0017  
                 __CFG_WDT$OFF 000000                           l4211 0FC0                           l4123 1F8A  
                         l4205 0F82                           l4117 1F6A                           l3513 26C6  
                         l3505 2690                           l4217 0FE0                           l3441 2A80  
                         l4161 1D3A                           l4129 1FAA                           l4137 1FCC  
                         l3507 269C                           l4171 1D64                           l4139 1FF4  
                         l3509 26A2                           l3701 05BE                           l4181 0E92  
                         l4165 1D44                           l3613 147E                           l4085 204C  
                         l3703 05C4                           l3631 1504                           l3623 14CC  
                         l4193 0F06                           l3617 1494                           l4097 2074  
                         l3459 2AA8                           l3731 0676                           l3643 041C  
                         l4187 0EC8                           l3627 14EE                           l3901 2128  
                         l3485 2542                           l3725 0634                           l3717 05FA  
                         l3645 042E                           l3487 254E                           l3743 06AC  
                         l3719 0612                           l3663 04E0                           l3671 0526  
                         l3655 0468                           l3639 0408                           l4199 0F44  
                         l3497 2584                           l3489 2554                           l3745 06B8  
                         l3753 06E6                           l3737 0690                           l3729 066C  
                         l3665 04E6                           l3649 0438                           l4561 1C92  
                         l3755 06EC                           l3763 0786                           l3683 0566  
                         l4571 1CB0                           l4563 1C98                           l3909 217C  
                         l3757 0738                           l3765 079E                           l3749 06D2  
                         l3669 04EE                           l4573 1CB6                           l4565 1C9E  
                         l3871 228E                           l3863 226A                           l3767 07A6  
                         l3687 0582                           l4567 1CA4                           l3873 229A  
                         l3689 0588                           l3769 07B2                           l4569 1CAA  
                         l4577 1CBC                           l3875 22A0                           l3883 22D2  
                         l3867 227A                           l4579 1CEA                           ?_exp 0049  
                         ?_log 0034                           l3887 22E6                           l3879 22C4  
                         l3897 2112                           l3899 2122                           ?_isr 0001  
                         ?_pow 0052             i2_read_colorsensor 1970                           STR_1 FE41  
                         STR_2 FE29                           STR_3 FE41                           STR_4 FE29  
                         STR_5 FFE6                           STR_6 FFB6                           STR_7 FECD  
                         STR_8 FE9F                           STR_9 FEB6                           _T0CS 007EAD  
                         _LATA 000F89                           _LATB 000F8A                           _LATC 000F8B  
                         _LATD 000F8C                           _LATE 000F8D                           u4127 1CF2  
                         u4137 2854                           u4147 2890                           u4157 26FE  
                         u4167 2706                           u4177 2730                           u2770 2A7E  
                         u4187 2738                           u4197 11D4                           u3590 203C  
                         u3585 276E                           _RCEN 007E2B                           i2l34 2B8E  
                         _TMR0 000FD6                           _RSEN 007E29                           _main 1C22  
                 ___ftpack@arg 0001                           _keys FD91                   ___ftpack@exp 0004  
                         _time 00B7                           fsr0h 000FEA                           fsr1h 000FE2  
           i2___lwdiv@quotient 0005                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 007E                           exp@x 0049                           log@x 0034  
                         isr@i 0073           ??i2_I2C_Master_Start 0002           ??i2_I2C_Master_Write 0004  
                         pow@x 0052                           pow@y 0055                           prodh 000FF4  
                         prodl 000FF3                           start 000E            ?i2_read_colorsensor 0001  
                __CFG_IESO$OFF 000000                __end_ofi2_putch 2BCC                  __CFG_MCLRE$ON 000000  
                 ___ftmul@cntr 001A                   ___param_bank 000000                   ___ftmul@sign 001B  
                  i2_lcdNibble 289C                  ?_bottle_count 0001                   ___fttol@exp1 0036  
                        ??_exp 004C                          ??_log 0037                   ___fttol@lval 0032  
                        ??_isr 0080                          ??_pow 0058                  _eskacap_count 00CE  
             ?_I2C_Master_Init 009D               ?_I2C_Master_Read 0001               ?_I2C_Master_Wait 0001  
             ?_I2C_Master_Stop 0001                          ?_main 0001                          _ACKEN 007E2C  
                        _ACKDT 007E2D                __end_of___awdiv 2524                __end_of___ftadd 0E90  
                        STR_10 FFA5                          STR_11 FF94                          STR_20 FFF4  
                        STR_12 FEF3                          STR_13 FF17                          STR_21 FE88  
                        STR_14 FF05                          STR_22 FEE1                          STR_15 FF29  
                        STR_23 FE71                          STR_16 FF3B                          STR_24 FE59  
                        STR_17 FF5F                          STR_25 FE10                          STR_18 FF4D  
                        STR_26 FDF4                          STR_27 FFC7                          STR_19 FF71  
                        STR_28 FFD7                __end_of___awmod 22F0                          STR_29 FF83  
              __end_of___ftdiv 1B44                __end_of___ftneg 2B22                __end_of___lldiv 21A0  
              __end_of___ftmul 1970                ___awdiv@divisor 0003                __end_of___ftsub 29B6  
              __end_of___fttol 187C                          _T0PS0 007EA8                          _T0PS1 007EA9  
                        _T0PS2 007EAA                __end_of___lwdiv 259C                __end_of___lwmod 26DE  
                        i2l270 0052                          i2l271 02C4                          i2l360 232A  
                        i2l272 0064                          i2l363 2354                          i2l283 024A  
                        i2l268 02C8                          i2l366 237E                          i2l294 03BE  
                        i2l278 00EA                          i2l279 00F4                          i2l730 0E02  
                        i2l715 0D28                          i2l395 1A5C                          i2l750 1B12  
                        i2l719 0D52                          i2l912 118C                          i2l739 0E1E  
                        i2l907 105C                          i2l692 222E                          i2l772 2B14  
                        i2l875 2842                ___awdiv@counter 0005                          i2l885 296C  
         ??i2_read_colorsensor 0004                          _PORTB 000F81                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96                ??_servo_rotate0 0003                  __CFG_PWRT$OFF 000000  
                __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000              read_colorsensor@i 009F  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                   ___lltoft@exp 0011  
              __end_of_lcdInst 2BC0                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                        _nRBPU 007F8F                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                __end_of_initLCD 289C                 __CFG_EBTRB$OFF 000000  
                   i2isdigit@c 0003                  ___awtoft@sign 000C                __end_of_dpowers FDAC  
                        _color 0076                          _floor 1B44                          _etime 00D4  
                        _ldexp 1EA2                          _frexp 2380                          _errno 00CA  
              __end_of_isdigit 2AB2                  ___ftpack@sign 0005                          _putch 2BA0  
                        _stime 00DE                          pclath 000FFA                          tablat 000FF5  
                _eskalbl_count 00D2                          pow@yi 005F                __end_of_timeset FDBB  
             __end_ofi2___wmul 2AFE                __end_of_standby 20E4                          status 000FD8  
               __CFG_PBADEN$ON 000000                  i2printf@width 001E                    exp@exponent 004F  
             __end_ofi2_printf 0AFC             __size_ofi2___lwdiv 0052             __size_ofi2___lwmod 0042  
                  ldexp@newexp 0037                __initialization 28EA                    log@exponent 0037  
           __size_ofi2_lcdInst 000C                ??_emergencystop 00B4                 ??_bottle_count 00B4  
                 __end_of_main 1CFE                   __end_of_keys FDA2                     i2printf@ap 0018  
           __size_ofi2_isdigit 001E   __end_ofi2_I2C_ColorSens_Init 1442                         ??_main 00B6  
                ___fttol@sign1 0031                  __activetblptr 000002              ?_I2C_Master_Start 0001  
            ?_I2C_Master_Write 0091                 servo_rotate0@i 0007                 servo_rotate0@j 0009  
           ??_I2C_Master_Start 0091                         _ADCON0 000FC2                         _ADCON1 000FC1  
           ??_I2C_Master_Write 0093                         ?_floor 0041                         ?_ldexp 0034  
                       ?_frexp 0001               __end_of___altoft 2614                         _T08BIT 007EAE  
             ___awdiv@dividend 0001                i2lcdNibble@data 0002               __end_of___awtoft 29EE  
                       ?_putch 0001               __end_of___ftpack 224E                i2lcdNibble@temp 0001  
             __end_of___lltoft 27FA                         _INT0IE 007F94                         _INT1IE 007F83  
                       _INT1IF 007F80                         _INT2IE 007F84                         i2l1070 0BB2  
                       i2l1071 0CD6                         i2l1081 1C14                         i2l3011 21BE  
                       i2l3021 221A                         i2l3013 21C8                         i2l3023 2224  
                       i2l3015 21E6                         i2l3007 21B0                         i2l3111 0E3A  
                       i2l3103 0DF0                         i2l3121 0E6A                         i2l3105 0DFA  
                       i2l3019 21FC                         i2l3131 18A4                         i2l3063 0D36  
                       i2l3151 18FE                         i2l3047 25BE                         i2l3215 181A  
                       i2l3161 1926                         i2l3137 18CC                         i2l3049 25CA  
                       i2l3233 186A                         i2l3225 1842                         i2l3091 0DB2  
                       i2l3155 190E                         i2l3227 184E                         i2l3219 182A  
                       i2l3411 1F24                         i2l3317 1AEC                         i2l3093 0DBC  
                       i2l3085 0D90                         i2l3069 0D60                         i2l3165 1936  
                       i2l3181 2470                         i2l3229 1854                         i2l3245 23A8  
                       i2l3095 0DC6                         i2l3335 298C                         i2l3415 1F30  
                       i2l3097 0DCE                         i2l3177 2440                         i2l4401 082C  
                       i2l3347 29CA                         i2l3291 1A86                         i2l3187 249C  
                       i2l3523 158A                         i2l4235 2648                         i2l4411 088E  
                       i2l3381 1E10                         i2l3197 17B4                         i2l3373 1B9A  
                       i2l3365 1B72                         i2l4253 16A6                         i2l4245 266C  
                       i2l4501 0A34                         i2l3471 27A4                         i2l3383 1E8C  
                       i2l3391 1EBA                         i2l3551 0B4C                         i2l4239 2650  
                       i2l4271 2300                         i2l4503 0A78                         i2l4511 0AD4  
                       i2l4415 0894                         i2l3473 27B0                         i2l3297 1AAE  
                       i2l3369 1B80                         i2l3545 0B14                         i2l3529 15AC  
                       i2l4265 1776                         i2l4513 0ADA                         i2l4433 0918  
                       i2l4409 088A                         i2l4417 08C8                         i2l4283 2342  
                       i2l4435 091C                         i2l4515 0AE2                         i2l4363 19B4  
                       i2l4611 00B6                         i2l3557 0B84                         i2l4277 2318  
                       i2l4509 0ABE                         i2l4429 08FE                         i2l4373 19FE  
                       i2l4605 00A0                         i2l3831 24DA                         i2l3399 1F00  
                       i2l4471 09A8                         i2l4447 0948                         i2l4463 0978  
                       i2l4391 07F8                         i2l4359 19A4                         i2l4703 03A0  
                       i2l3833 24E2                         i2l3825 24C4                         i2l4449 094C  
                       i2l4465 098E                         i2l4385 07DA                         i2l4377 1A0E  
                       i2l4369 19E2                         i2l4609 00AC                         i2l3851 251A  
                       i2l3843 2502                         i2l3835 24E6                         i2l3819 24B4  
                       i2l3579 0CAC                         i2l4491 0A08                         i2l4483 09EA  
                       i2l4475 09CC                         i2l4395 07FE                         i2l4707 03A8  
                       u240_41 18B4                         i2l3781 106A                         i2l3933 2AD2  
                       i2l4477 09D4                         i2l4389 07EA                         i2l3847 250C  
                       i2l3951 2B5A                         i2l4495 0A1C                         i2l4639 01B2  
                       i2l4671 027A                         i2l3961 2810                         i2l4489 0A00  
                       i2l4665 025E                         i2l4649 01FC                         i2l3795 10E6  
                       i2l3787 1082                         i2l3963 2818                         i2l4499 0A2E  
                       i2l4667 026C                         i2l4659 0246                         u217_41 0CF4  
                       i2l3973 2838                         i2l3965 281C                         i2l3981 2942  
                       i2l3799 1108                         i2l3983 294A                         i2l3985 294E  
                       i2l4697 038A                         u218_41 0D08                         i2l3989 2962  
                       u261_41 1A96                         u238_41 188C                         u247_41 1798  
                       u259_41 1A6E                         _TMR0IE 007F95                         _TMR0IF 007F92  
                    ??i2_putch 0003                         _TMR0ON 007EAF                         _SSPADD 000FC8  
                       _TRISC3 007CA3                         _TRISC4 007CA4                         _SSPBUF 000FC9  
               __CFG_XINST$OFF 000000              ?_read_colorsensor 0001                         ___ftge 2410  
                 _yopcap_count 00E6                         ___wmul 2A24             ??_read_colorsensor 0093  
                    ??___awdiv 0005                      ??___ftadd 0022                 __CFG_STVREN$ON 000000  
                    ??___awmod 0094                      ??___ftdiv 000F                      ??___ftneg 0004  
                    ??___lldiv 0098                      ??___ftmul 0013                      ??___ftsub 002E  
                    ??___fttol 002C                      ??___lwdiv 0094                      ??___lwmod 009B  
                dec_to_hex@num 0063                         clear_0 2908                         clear_1 2914  
                       clear_2 2920               ___awdiv@quotient 0007                ___awmod@divisor 0092  
              ___awmod@counter 0094                      ??_lcdInst 0092                         _printf 03FA  
                       floor@i 0044                         floor@x 0041          ___ftmul@f3_as_product 0017  
                    ??_initLCD 0093                      ??_isdigit 0090              __end_ofi2___lwdiv 284C  
                 __mediumconst FD90              __end_ofi2___lwmod 2976                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                      ??_standby 00B4  
            __end_ofi2_lcdInst 2BD8                   _yoplbl_count 00EA              __end_ofi2_isdigit 2B62  
             __end_ofexp@coeff FDD9           __size_of_bottle_time 0036               __end_oflog@coeff FDF4  
                   __accesstop 0080        __end_of__initialization 2926                     ___altoft@c 0037  
                   ___ftadd@f1 001C                     ___ftadd@f2 001F                     ___ftge@ff1 0001  
                   ___ftge@ff2 0004                   eval_poly@res 0031                  ___rparam_used 000001  
                   ___ftdiv@f1 0009                     ___ftdiv@f2 000C                     ___ftdiv@f3 0013  
                   ___ftneg@f1 0001                     ___awtoft@c 0009                     ___ftmul@f1 000D  
                   ___ftmul@f2 0010                     ___ftsub@f1 0028                     ___ftsub@f2 002B  
                   ___fttol@f1 0028             i2___lwmod@dividend 0008                 __pcstackCOMRAM 0001  
                 __pidataBANK0 2C0C                     ___lltoft@c 0009                  __end_of_floor 1C22  
                __end_of_ldexp 1F68                  __end_of_frexp 2410                  __end_of_putch 2BB0  
                  i2printf@idx 0017                    i2printf@val 001B             __size_of_date_time 00D2  
          servo_rotate0@degree 0001                      ?i2___wmul 0001             __size_of_lcdNibble 0060  
                  i2putch@data 0003                      ?i2_printf 000D    __size_of_I2C_ColorSens_Init 016A  
                      ??_floor 0044                        ??_ldexp 0039                        ??_frexp 0006  
         __end_of_bottle_count 1024                     _dec_to_hex 168C                        ??_putch 0092  
                   __pbssBANK0 00B7                     __pbssBANK1 0100             __size_of_eval_poly 00D2  
         i2_I2C_ColorSens_Init 1304              servo_rotate0@duty 0005             __size_of_read_time 0068  
                      ?___ftge 0001                   ?i2_lcdNibble 0001                        ?___wmul 0090  
                    ?___altoft 0037                      ?___awtoft 0009                      ?___ftpack 0001  
                      ?_printf 009C             __size_of_operation 00C0                      ?___lltoft 0009  
                   ??i2___wmul 0005                     ??i2_printf 0013                        _SSPCON1 000FC6  
                      _SSPCON2 000FC5                        _SSPSTAT 000FC7              __end_of_date_time 1DD0  
        ?i2_I2C_ColorSens_Init 0001                     _eska_count 00CC                        i2_putch 2BC0  
            _bottle_count_disp 00ED    __size_ofi2_I2C_Master_Start 0008              __end_of_lcdNibble 273E  
  __size_ofi2_I2C_Master_Write 000A                  ?_operationend 0001                        __Hparam 0000  
                      __Lparam 0000                __size_of___ftge 0090                        ___awdiv 24A0  
                      ___ftadd 0CE4                        ___awmod 224E                        ___ftdiv 1A5E  
                      ___ftneg 2AFE                        ___lldiv 20E4                __size_of___wmul 0036  
                      ___ftmul 187C                        ___ftsub 2976                        ___fttol 1788  
                      ___lwdiv 2524                        ___lwmod 267C                     _curr_state 00EC  
                   ??___altoft 003B                        __pcinit 28EA                     ??___awtoft 000C  
                   ??___ftpack 0006              __end_of_eval_poly 1EA2                        __ramtop 1000  
                      _lcdInst 2BB0                     ??___lltoft 000D                        __ptext0 1C22  
                      __ptext1 2028                        __ptext2 2B62                        __ptext3 1F68  
                      __ptext4 1442                        __ptext5 284C                        __ptext6 2B22  
                      __ptext7 1CFE                        __ptext8 2A5A                        __ptext9 29EE  
              __size_of_printf 03D6                 dec_to_hex@temp 006B                        _initLCD 284C  
            __end_of_hexpowers FDB4                  i2_isdigit$816 0002                        _dpowers FDA2  
                 __size_of_exp 01E8                   __size_of_log 011E                        _isdigit 2A88  
                 __size_of_isr 03F2    __size_ofi2_read_colorsensor 00EE                   __size_of_pow 0176  
             ___awmod@dividend 0090              __end_of_read_time 267C       __size_of_I2C_Master_Init 0060  
     __size_of_I2C_Master_Read 002E       __size_of_I2C_Master_Wait 0014                     date_time@i 00B4  
     __size_of_I2C_Master_Stop 0008          __end_of_servo_rotate0 2380                        _timeset FDB4  
                      _testint 00BE                        _standby 2028                    ?_dec_to_hex 0063  
               __pintcode_body 0012           end_of_initialization 2926                        exp@sign 0051  
                __Lmediumconst FD90                        int_func 0012            i2___wmul@multiplier 0001  
            __end_of_operation 2028                 _operation_disp 00D8                 _operation_time 00DA  
               ??_operationend 00B4      __size_of_I2C_Master_Start 0008      __size_of_I2C_Master_Write 000A  
              ___lldiv@divisor 0094                        pow@sign 005E                ___lldiv@counter 009C  
                      printf@c 00B3                        printf@f 009C               I2C_Master_Init@c 009D  
             I2C_Master_Read@a 0091                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE          __end_of_emergencystop 2B44                      _PORTAbits 000F80  
        __size_of_bottle_count 0194      __size_of_read_colorsensor 012C      read_colorsensor@color_low 0097  
            i2_I2C_Master_Read 2AB2              i2_I2C_Master_Wait 2B8E              i2_I2C_Master_Stop 2BFC  
            i2___lwdiv@divisor 0003                      i2___lwdiv 27FA                      i2___lwmod 2934  
            i2___lwdiv@counter 0007             ?i2_I2C_Master_Read 0001             ?i2_I2C_Master_Wait 0001  
       ??i2_I2C_ColorSens_Init 0004   i2read_colorsensor@color_high 000C             ?i2_I2C_Master_Stop 0001  
                   _start_time 00DC                      i2_lcdInst 2BCC                    ___ftdiv@exp 0016  
                  printf@width 00B1            ??i2_I2C_Master_Read 0002                      i2_isdigit 2B44  
          ??i2_I2C_Master_Wait 0001            ??i2_I2C_Master_Stop 0002                    ___ftmul@exp 0016  
                 _bottle_count 0E90                 __end_of___ftge 24A0                 __end_of___wmul 2A5A  
          __size_of_dec_to_hex 00FC           __size_ofi2_lcdNibble 004E             _total_bottle_count 00E2  
                i2lcdInst@data 0003                     floor@expon 0047               i2___wmul@product 0005  
               __end_of_printf 07D0                   i2printf@flag 001D      __end_ofi2_I2C_Master_Read 2AD8  
    __end_ofi2_I2C_Master_Wait 2BA0                   i2printf@prec 001A            start_initialization 28EA  
    __end_ofi2_I2C_Master_Stop 2C04                     eval_poly@d 002B                     eval_poly@n 002D  
                   eval_poly@x 0028              __size_ofi2___wmul 0026                     ldexp@value 0034  
                  __end_of_exp 0CE4                    __end_of_log 168C                    __end_of_isr 03FA  
                  __end_of_pow 119A                      i2printf@c 0020                      i2printf@f 000D  
                ??_bottle_time 00B4          i2I2C_Master_Read@temp 0003                     ?i2___lwdiv 0001  
                   ?i2___lwmod 0008              __size_ofi2_printf 032C                     frexp@value 0001  
            ??_I2C_Master_Init 00A1              ??_I2C_Master_Read 0091              ??_I2C_Master_Wait 0090  
                   ?i2_lcdInst 0001              ??_I2C_Master_Stop 0091     read_colorsensor@color_high 009B  
                   ?i2_isdigit 0001                       ??___ftge 0007                       ??___wmul 0094  
                  __pdataBANK0 00ED               __CFG_LPT1OSC$OFF 000000                       ??_printf 00A6  
            __size_of___altoft 0078                     read_time@i 0004              __size_of___awtoft 0038  
            __size_of___ftpack 00AE              __size_of___lltoft 005C     __end_of_I2C_ColorSens_Init 1304  
                  __pbssCOMRAM 0076           __end_of_operationend 2B7A                  __pcstackBANK0 0080  
            i2___lwmod@divisor 000A              i2___lwmod@counter 000C                       ?i2_putch 0001  
          __end_of_bottle_time 2A24               _I2C_Master_Start 2BF4            i2I2C_Master_Write@d 0002  
             _I2C_Master_Write 2BD8               _eskacaplbl_count 00D0                      _date_time 1CFE  
             ___lwdiv@dividend 0090              __CFG_CCP2MX$PORTC 000000                      __pintcode 0008  
                __pmediumconst FD90                      _lcdNibble 26DE                _yopcaplbl_count 00E8  
                     ?___awdiv 0001                       ?___ftadd 001C                       ?___awmod 0090  
                     ?___ftdiv 0009                       ?___ftneg 0001                       ?___lldiv 0090  
                     ?___ftmul 000D                       ?___ftsub 0028                       ?___fttol 0028  
                     ?___lwdiv 0090                       ?___lwmod 0097                       ?_lcdInst 0001  
             dec_to_hex@hexnum 006F                       ?_initLCD 0001                       ?_isdigit 0001  
             _read_colorsensor 1442     __size_ofi2_I2C_Master_Read 0026     __size_ofi2_I2C_Master_Wait 0012  
                    _eval_poly 1DD0     __size_ofi2_I2C_Master_Stop 0008                      _hexpowers FDAC  
                     ?_standby 0001               ___lwdiv@quotient 0094                 __size_of_floor 00DE  
               __size_of_ldexp 00C6                 __size_of_frexp 0090                   ??_dec_to_hex 0065  
                  ??i2___lwdiv 0005                    ??i2___lwmod 000C                      _read_time 2614  
               __size_of_putch 0010     __end_ofi2_I2C_Master_Start 2C0C     __end_ofi2_I2C_Master_Write 2BEC  
                  ??i2_lcdInst 0003                 ___wmul@product 0094                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                    ??i2_isdigit 0001  
                   ?_date_time 0001                       i2u331_40 10CE                       i2u420_47 03B0  
                     i2u421_47 28B4                       i2u422_47 28BC                       i2u423_47 28DC  
                     i2u256_40 23D0                       i2u424_47 28E4                       i2u249_40 17D2  
                     i2u256_48 23D2                       i2u273_40 1EDA                       i2u249_45 17CA  
                     i2u425_47 1336                       i2u273_48 1EDC                       i2u426_47 231E  
                     i2u427_47 2348                       i2u348_40 2AD0                       i2u269_40 1B8C  
                     i2u293_40 0B8C                       i2u294_40 0B8E                      _operation 1F68  
             __CFG_WDTPS$32768 000000                     ?_lcdNibble 0001             __end_of_dec_to_hex 1788  
   __end_ofi2_read_colorsensor 1A5E              ___wmul@multiplier 0090                       i2___wmul 2AD8  
                lcdNibble@data 0091                     printf@flag 00B0                  lcdNibble@temp 0090  
                   printf@prec 00AD                     ?_eval_poly 0028                       i2_printf 07D0  
                  _bottle_time 29EE            I2C_Master_Read@temp 0092                      _yop_count 00E4  
                   ?_read_time 0001             dec_to_hex@quotient 0071                    _bottlequeue 0100  
             __size_ofi2_putch 000C                      frexp@eptr 0004                       __Hrparam 0000  
          i2read_colorsensor@i 0010                     ?_operation 0001                       __Lrparam 0000  
           __CFG_BOREN$SBORDIS 000000                    dec_to_hex@i 006D         __size_of_servo_rotate0 0090  
             __size_of___awdiv 0084               __size_of___ftadd 01AC               __size_of___awmod 00A2  
             __size_of___ftdiv 00E6               __size_of___ftneg 0024          i2___wmul@multiplicand 0003  
             __size_of___lldiv 00BC                       ___altoft 259C               __size_of___ftmul 00F4  
             __size_of___ftsub 0040               __size_of___fttol 00F4               __size_of___lwdiv 0078  
             __size_of___lwmod 0062          __size_of_operationend 0018                       ___awtoft 29B6  
                     ___ftpack 21A0                       ___lltoft 279E                    _isdigit$816 0091  
           i2I2C_Master_Read@a 0002               __size_of_lcdInst 0010                       _exp$1265 004C  
              _I2C_Master_Init 273E                _I2C_Master_Read 2A5A               __size_of_initLCD 0050  
              _I2C_Master_Wait 2B7A                _I2C_Master_Stop 2BEC                       _isr$1360 0074  
             __size_of_isdigit 002A                ___lwdiv@divisor 0092                ___lwdiv@counter 0096  
                     __ptext10 0E90                       __ptext11 03FA                       __ptext20 273E  
                     __ptext12 2BA0                       __ptext21 20E4                       __ptext13 2A88  
                     __ptext30 2BC0                       __ptext22 119A                       __ptext14 2A24  
                     __ptext31 2B44                       __ptext23 2BD8                       __ptext15 267C  
                     __ptext40 2BFC                       __ptext32 2934                       __ptext24 2BEC  
                     __ptext16 2524                       __ptext41 2C04                       __ptext33 27FA  
                     __ptext25 2BF4                       __ptext17 2BB0                       __ptext50 2380  
                     __ptext42 2AB2                       __ptext34 2BCC                       __ptext26 2B7A  
                     __ptext18 26DE                       __ptext51 1788                       __ptext43 2B8E  
                     __ptext35 289C                       __ptext19 224E                       __ptext60 1A5E  
                     __ptext52 2410                       __ptext44 168C                       __ptext36 1304  
                     __ptext28 1970                       __ptext61 29B6                       __ptext53 259C  
                     __ptext45 1024                       __ptext37 22F0                       __ptext29 07D0  
                     __ptext62 279E                       __ptext54 1DD0                       __ptext46 156E  
                     __ptext38 2614                       __ptext63 21A0                       __ptext55 2AD8  
                     __ptext47 0AFC                       __ptext39 2BE2                       __ptext64 24A0  
                     __ptext56 187C                       __ptext48 1EA2                       __ptext57 2976  
                     __ptext49 1B44                       __ptext58 0CE4                       __ptext59 2AFE  
                     _end_time 00C8               __size_of_standby 00BC                       _pow$1263 0058  
                     _pow$1264 005B         __size_of_emergencystop 0022                  __size_of_main 00DC  
__size_ofi2_I2C_ColorSens_Init 013E                       _nodedata 00D6                _dec_to_hex$1261 0065  
              _dec_to_hex$1262 0068                    ??_date_time 00B4                   _operationend 2B62  
                ??i2_lcdNibble 0001                    ??_lcdNibble 0090                       _testflag 00E0  
                     int$flags 007E                      printf@idx 00AA                      printf@val 00AE  
                     exp@coeff FDBB                       log@coeff FDD9               _bottlequeue_head 00C4  
                    putch@data 0092       __end_of_I2C_Master_Start 2BFC               _bottlequeue_tail 00C6  
     __end_of_I2C_Master_Write 2BE2                     _INTCONbits 000FF2                    ??_eval_poly 002F  
                     isdigit@c 0092                  _servo_rotate0 22F0                    ??_read_time 0004  
                     intlevel2 0000               ___lwmod@dividend 0097               ___lldiv@dividend 0090  
           _I2C_ColorSens_Init 119A       __end_of_read_colorsensor 156E                    ??_operation 00B4  
          ?_I2C_ColorSens_Init 0001                       printf@ap 00AB        __end_of_I2C_Master_Init 279E  
      __end_of_I2C_Master_Read 2A88        __end_of_I2C_Master_Wait 2B8E        __end_of_I2C_Master_Stop 2BF4  
                  lcdInst@data 0092                  _emergencystop 2B22            __end_ofi2_lcdNibble 28EA  
             ___lldiv@quotient 0098              I2C_Master_Write@d 0091                ___lwmod@divisor 0099  
  i2read_colorsensor@color_low 0008                ___lwmod@counter 009B           ??_I2C_ColorSens_Init 0093  
               ?_servo_rotate0 0001  

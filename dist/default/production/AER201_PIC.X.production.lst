

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 28 17:28:16 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.40
    86                           ; Generated 01/12/2016 GMT
    87                           ; 
    88                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	idataBANK0
   121  002CF8                     __pidataBANK0:
   122                           	opt stack 0
   123                           
   124                           ;initializer for _bottle_count_disp
   125  002CF8  FFFF               	dw	65535
   126                           
   127                           	psect	mediumconst
   128  00FDCA                     __pmediumconst:
   129                           	opt stack 0
   130  00FDCA  00                 	db	0
   131  00FDCB                     _keys:
   132                           	opt stack 0
   133  00FDCB  31                 	db	49
   134  00FDCC  32                 	db	50
   135  00FDCD  33                 	db	51
   136  00FDCE  41                 	db	65
   137  00FDCF  34                 	db	52
   138  00FDD0  35                 	db	53
   139  00FDD1  36                 	db	54
   140  00FDD2  42                 	db	66
   141  00FDD3  37                 	db	55
   142  00FDD4  38                 	db	56
   143  00FDD5  39                 	db	57
   144  00FDD6  43                 	db	67
   145  00FDD7  2A                 	db	42
   146  00FDD8  30                 	db	48
   147  00FDD9  23                 	db	35
   148  00FDDA  44                 	db	68
   149  00FDDB  00                 	db	0
   150  00FDDC                     __end_of_keys:
   151                           	opt stack 0
   152  00FDDC                     _dpowers:
   153                           	opt stack 0
   154  00FDDC  0001               	dw	1
   155  00FDDE  000A               	dw	10
   156  00FDE0  0064               	dw	100
   157  00FDE2  03E8               	dw	1000
   158  00FDE4  2710               	dw	10000
   159  00FDE6                     __end_of_dpowers:
   160                           	opt stack 0
   161  00FDE6                     _hexpowers:
   162                           	opt stack 0
   163  00FDE6  0001               	dw	1
   164  00FDE8  0010               	dw	16
   165  00FDEA  0100               	dw	256
   166  00FDEC  1000               	dw	4096
   167  00FDEE                     __end_of_hexpowers:
   168                           	opt stack 0
   169  00FDEE                     _timeset:
   170                           	opt stack 0
   171  00FDEE  50                 	db	80
   172  00FDEF  35                 	db	53
   173  00FDF0  21                 	db	33
   174  00FDF1  08                 	db	8
   175  00FDF2  05                 	db	5
   176  00FDF3  02                 	db	2
   177  00FDF4  17                 	db	23
   178  00FDF5                     __end_of_timeset:
   179                           	opt stack 0
   180  00FDF5                     exp@coeff:
   181                           	opt stack 0
   182  00FDF5  00                 	db	0
   183  00FDF6  80                 	db	128
   184  00FDF7  3F                 	db	63
   185  00FDF8  72                 	db	114
   186  00FDF9  31                 	db	49
   187  00FDFA  3F                 	db	63
   188  00FDFB  FE                 	db	254
   189  00FDFC  75                 	db	117
   190  00FDFD  3E                 	db	62
   191  00FDFE  58                 	db	88
   192  00FDFF  63                 	db	99
   193  00FE00  3D                 	db	61
   194  00FE01  95                 	db	149
   195  00FE02  1D                 	db	29
   196  00FE03  3C                 	db	60
   197  00FE04  C5                 	db	197
   198  00FE05  AE                 	db	174
   199  00FE06  3A                 	db	58
   200  00FE07  79                 	db	121
   201  00FE08  21                 	db	33
   202  00FE09  39                 	db	57
   203  00FE0A  94                 	db	148
   204  00FE0B  80                 	db	128
   205  00FE0C  37                 	db	55
   206  00FE0D  93                 	db	147
   207  00FE0E  A7                 	db	167
   208  00FE0F  35                 	db	53
   209  00FE10  56                 	db	86
   210  00FE11  15                 	db	21
   211  00FE12  34                 	db	52
   212  00FE13                     __end_ofexp@coeff:
   213                           	opt stack 0
   214  00FE13                     log@coeff:
   215                           	opt stack 0
   216  00FE13  00                 	db	0
   217  00FE14  00                 	db	0
   218  00FE15  00                 	db	0
   219  00FE16  00                 	db	0
   220  00FE17  80                 	db	128
   221  00FE18  3F                 	db	63
   222  00FE19  F0                 	db	240
   223  00FE1A  FF                 	db	255
   224  00FE1B  BE                 	db	190
   225  00FE1C  E2                 	db	226
   226  00FE1D  A9                 	db	169
   227  00FE1E  3E                 	db	62
   228  00FE1F  83                 	db	131
   229  00FE20  76                 	db	118
   230  00FE21  BE                 	db	190
   231  00FE22  AE                 	db	174
   232  00FE23  2B                 	db	43
   233  00FE24  3E                 	db	62
   234  00FE25  3C                 	db	60
   235  00FE26  C3                 	db	195
   236  00FE27  BD                 	db	189
   237  00FE28  D2                 	db	210
   238  00FE29  13                 	db	19
   239  00FE2A  3D                 	db	61
   240  00FE2B  78                 	db	120
   241  00FE2C  D3                 	db	211
   242  00FE2D  BB                 	db	187
   243  00FE2E                     __end_oflog@coeff:
   244                           	opt stack 0
   245  0000                     _TMR0	set	4054
   246  0000                     _ADCON0	set	4034
   247  0000                     _ADCON1	set	4033
   248  0000                     _INTCONbits	set	4082
   249  0000                     _LATA	set	3977
   250  0000                     _LATAbits	set	3977
   251  0000                     _LATB	set	3978
   252  0000                     _LATC	set	3979
   253  0000                     _LATCbits	set	3979
   254  0000                     _LATD	set	3980
   255  0000                     _LATDbits	set	3980
   256  0000                     _LATE	set	3981
   257  0000                     _PORTAbits	set	3968
   258  0000                     _PORTB	set	3969
   259  0000                     _SSPADD	set	4040
   260  0000                     _SSPBUF	set	4041
   261  0000                     _SSPCON1	set	4038
   262  0000                     _SSPCON2	set	4037
   263  0000                     _SSPSTAT	set	4039
   264  0000                     _TRISA	set	3986
   265  0000                     _TRISB	set	3987
   266  0000                     _TRISC	set	3988
   267  0000                     _TRISD	set	3989
   268  0000                     _TRISE	set	3990
   269  0000                     _ACKDT	set	32301
   270  0000                     _ACKEN	set	32300
   271  0000                     _GIE	set	32663
   272  0000                     _INT0IE	set	32660
   273  0000                     _INT0IF	set	32657
   274  0000                     _INT1IE	set	32643
   275  0000                     _INT1IF	set	32640
   276  0000                     _INT2IE	set	32644
   277  0000                     _INT2IF	set	32641
   278  0000                     _PEN	set	32298
   279  0000                     _PSA	set	32427
   280  0000                     _RCEN	set	32299
   281  0000                     _RSEN	set	32297
   282  0000                     _SEN	set	32296
   283  0000                     _T08BIT	set	32430
   284  0000                     _T0CS	set	32429
   285  0000                     _T0PS0	set	32424
   286  0000                     _T0PS1	set	32425
   287  0000                     _T0PS2	set	32426
   288  0000                     _TMR0IE	set	32661
   289  0000                     _TMR0IF	set	32658
   290  0000                     _TMR0ON	set	32431
   291  0000                     _TRISC3	set	31907
   292  0000                     _TRISC4	set	31908
   293  0000                     _nRBPU	set	32655
   294  00FE2E                     STR_22:
   295  00FE2E  52                 	db	82	;'R'
   296  00FE2F  25                 	db	37
   297  00FE30  64                 	db	100	;'d'
   298  00FE31  20                 	db	32
   299  00FE32  47                 	db	71	;'G'
   300  00FE33  25                 	db	37
   301  00FE34  64                 	db	100	;'d'
   302  00FE35  20                 	db	32
   303  00FE36  42                 	db	66	;'B'
   304  00FE37  25                 	db	37
   305  00FE38  64                 	db	100	;'d'
   306  00FE39  20                 	db	32
   307  00FE3A  20                 	db	32
   308  00FE3B  20                 	db	32
   309  00FE3C  20                 	db	32
   310  00FE3D  20                 	db	32
   311  00FE3E  20                 	db	32
   312  00FE3F  20                 	db	32
   313  00FE40  20                 	db	32
   314  00FE41  20                 	db	32
   315  00FE42  20                 	db	32
   316  00FE43  20                 	db	32
   317  00FE44  20                 	db	32
   318  00FE45  20                 	db	32
   319  00FE46  20                 	db	32
   320  00FE47  20                 	db	32
   321  00FE48  20                 	db	32
   322  00FE49  00                 	db	0
   323  00FE4A                     STR_21:
   324  00FE4A  52                 	db	82	;'R'
   325  00FE4B  75                 	db	117	;'u'
   326  00FE4C  6E                 	db	110	;'n'
   327  00FE4D  6E                 	db	110	;'n'
   328  00FE4E  69                 	db	105	;'i'
   329  00FE4F  6E                 	db	110	;'n'
   330  00FE50  67                 	db	103	;'g'
   331  00FE51  7E                 	db	126
   332  00FE52  7E                 	db	126
   333  00FE53  7E                 	db	126
   334  00FE54  20                 	db	32
   335  00FE55  20                 	db	32
   336  00FE56  20                 	db	32
   337  00FE57  20                 	db	32
   338  00FE58  20                 	db	32
   339  00FE59  20                 	db	32
   340  00FE5A  20                 	db	32
   341  00FE5B  20                 	db	32
   342  00FE5C  20                 	db	32
   343  00FE5D  20                 	db	32
   344  00FE5E  20                 	db	32
   345  00FE5F  20                 	db	32
   346  00FE60  20                 	db	32
   347  00FE61  20                 	db	32
   348  00FE62  00                 	db	0
   349  00FE63                     STR_20:
   350  00FE63  52                 	db	82	;'R'
   351  00FE64  75                 	db	117	;'u'
   352  00FE65  6E                 	db	110	;'n'
   353  00FE66  6E                 	db	110	;'n'
   354  00FE67  69                 	db	105	;'i'
   355  00FE68  6E                 	db	110	;'n'
   356  00FE69  67                 	db	103	;'g'
   357  00FE6A  7E                 	db	126
   358  00FE6B  7E                 	db	126
   359  00FE6C  20                 	db	32
   360  00FE6D  20                 	db	32
   361  00FE6E  20                 	db	32
   362  00FE6F  20                 	db	32
   363  00FE70  20                 	db	32
   364  00FE71  20                 	db	32
   365  00FE72  20                 	db	32
   366  00FE73  20                 	db	32
   367  00FE74  20                 	db	32
   368  00FE75  20                 	db	32
   369  00FE76  20                 	db	32
   370  00FE77  20                 	db	32
   371  00FE78  20                 	db	32
   372  00FE79  20                 	db	32
   373  00FE7A  00                 	db	0
   374  00FE7B                     STR_19:
   375  00FE7B  52                 	db	82	;'R'
   376  00FE7C  75                 	db	117	;'u'
   377  00FE7D  6E                 	db	110	;'n'
   378  00FE7E  6E                 	db	110	;'n'
   379  00FE7F  69                 	db	105	;'i'
   380  00FE80  6E                 	db	110	;'n'
   381  00FE81  67                 	db	103	;'g'
   382  00FE82  7E                 	db	126
   383  00FE83  20                 	db	32
   384  00FE84  20                 	db	32
   385  00FE85  20                 	db	32
   386  00FE86  20                 	db	32
   387  00FE87  20                 	db	32
   388  00FE88  20                 	db	32
   389  00FE89  20                 	db	32
   390  00FE8A  20                 	db	32
   391  00FE8B  20                 	db	32
   392  00FE8C  20                 	db	32
   393  00FE8D  20                 	db	32
   394  00FE8E  20                 	db	32
   395  00FE8F  20                 	db	32
   396  00FE90  20                 	db	32
   397  00FE91  00                 	db	0
   398  00FE92                     STR_17:
   399  00FE92  54                 	db	84	;'T'
   400  00FE93  6F                 	db	111	;'o'
   401  00FE94  74                 	db	116	;'t'
   402  00FE95  61                 	db	97	;'a'
   403  00FE96  6C                 	db	108	;'l'
   404  00FE97  20                 	db	32
   405  00FE98  4F                 	db	79	;'O'
   406  00FE99  70                 	db	112	;'p'
   407  00FE9A  65                 	db	101	;'e'
   408  00FE9B  72                 	db	114	;'r'
   409  00FE9C  61                 	db	97	;'a'
   410  00FE9D  74                 	db	116	;'t'
   411  00FE9E  69                 	db	105	;'i'
   412  00FE9F  6F                 	db	111	;'o'
   413  00FEA0  6E                 	db	110	;'n'
   414  00FEA1  20                 	db	32
   415  00FEA2  20                 	db	32
   416  00FEA3  20                 	db	32
   417  00FEA4  20                 	db	32
   418  00FEA5  20                 	db	32
   419  00FEA6  20                 	db	32
   420  00FEA7  20                 	db	32
   421  00FEA8  00                 	db	0
   422  00FEA9                     STR_4:
   423  00FEA9  44                 	db	68	;'D'
   424  00FEAA  61                 	db	97	;'a'
   425  00FEAB  74                 	db	116	;'t'
   426  00FEAC  65                 	db	101	;'e'
   427  00FEAD  3A                 	db	58	;':'
   428  00FEAE  20                 	db	32
   429  00FEAF  25                 	db	37
   430  00FEB0  30                 	db	48	;'0'
   431  00FEB1  32                 	db	50	;'2'
   432  00FEB2  78                 	db	120	;'x'
   433  00FEB3  2F                 	db	47
   434  00FEB4  25                 	db	37
   435  00FEB5  30                 	db	48	;'0'
   436  00FEB6  32                 	db	50	;'2'
   437  00FEB7  78                 	db	120	;'x'
   438  00FEB8  2F                 	db	47
   439  00FEB9  25                 	db	37
   440  00FEBA  30                 	db	48	;'0'
   441  00FEBB  32                 	db	50	;'2'
   442  00FEBC  78                 	db	120	;'x'
   443  00FEBD  20                 	db	32
   444  00FEBE  20                 	db	32
   445  00FEBF  00                 	db	0
   446  00FEC0                     STR_5:
   447  00FEC0  54                 	db	84	;'T'
   448  00FEC1  69                 	db	105	;'i'
   449  00FEC2  6D                 	db	109	;'m'
   450  00FEC3  65                 	db	101	;'e'
   451  00FEC4  3A                 	db	58	;':'
   452  00FEC5  20                 	db	32
   453  00FEC6  25                 	db	37
   454  00FEC7  30                 	db	48	;'0'
   455  00FEC8  32                 	db	50	;'2'
   456  00FEC9  78                 	db	120	;'x'
   457  00FECA  3A                 	db	58	;':'
   458  00FECB  25                 	db	37
   459  00FECC  30                 	db	48	;'0'
   460  00FECD  32                 	db	50	;'2'
   461  00FECE  78                 	db	120	;'x'
   462  00FECF  3A                 	db	58	;':'
   463  00FED0  25                 	db	37
   464  00FED1  30                 	db	48	;'0'
   465  00FED2  32                 	db	50	;'2'
   466  00FED3  78                 	db	120	;'x'
   467  00FED4  20                 	db	32
   468  00FED5  20                 	db	32
   469  00FED6  00                 	db	0
   470  00FED7                     STR_18:
   471  00FED7  54                 	db	84	;'T'
   472  00FED8  69                 	db	105	;'i'
   473  00FED9  6D                 	db	109	;'m'
   474  00FEDA  65                 	db	101	;'e'
   475  00FEDB  3A                 	db	58	;':'
   476  00FEDC  20                 	db	32
   477  00FEDD  25                 	db	37
   478  00FEDE  64                 	db	100	;'d'
   479  00FEDF  20                 	db	32
   480  00FEE0  73                 	db	115	;'s'
   481  00FEE1  20                 	db	32
   482  00FEE2  20                 	db	32
   483  00FEE3  20                 	db	32
   484  00FEE4  20                 	db	32
   485  00FEE5  20                 	db	32
   486  00FEE6  20                 	db	32
   487  00FEE7  20                 	db	32
   488  00FEE8  00                 	db	0
   489  00FEE9                     STR_8:
   490  00FEE9  59                 	db	89	;'Y'
   491  00FEEA  4F                 	db	79	;'O'
   492  00FEEB  50                 	db	80	;'P'
   493  00FEEC  2B                 	db	43
   494  00FEED  43                 	db	67	;'C'
   495  00FEEE  41                 	db	65	;'A'
   496  00FEEF  50                 	db	80	;'P'
   497  00FEF0  2B                 	db	43
   498  00FEF1  4C                 	db	76	;'L'
   499  00FEF2  42                 	db	66	;'B'
   500  00FEF3  4C                 	db	76	;'L'
   501  00FEF4  3A                 	db	58	;':'
   502  00FEF5  20                 	db	32
   503  00FEF6  25                 	db	37
   504  00FEF7  64                 	db	100	;'d'
   505  00FEF8  20                 	db	32
   506  00FEF9  20                 	db	32
   507  00FEFA  00                 	db	0
   508  00FEFB                     STR_10:
   509  00FEFB  59                 	db	89	;'Y'
   510  00FEFC  4F                 	db	79	;'O'
   511  00FEFD  50                 	db	80	;'P'
   512  00FEFE  2D                 	db	45
   513  00FEFF  43                 	db	67	;'C'
   514  00FF00  41                 	db	65	;'A'
   515  00FF01  50                 	db	80	;'P'
   516  00FF02  2B                 	db	43
   517  00FF03  4C                 	db	76	;'L'
   518  00FF04  42                 	db	66	;'B'
   519  00FF05  4C                 	db	76	;'L'
   520  00FF06  3A                 	db	58	;':'
   521  00FF07  20                 	db	32
   522  00FF08  25                 	db	37
   523  00FF09  64                 	db	100	;'d'
   524  00FF0A  20                 	db	32
   525  00FF0B  20                 	db	32
   526  00FF0C  00                 	db	0
   527  00FF0D                     STR_9:
   528  00FF0D  59                 	db	89	;'Y'
   529  00FF0E  4F                 	db	79	;'O'
   530  00FF0F  50                 	db	80	;'P'
   531  00FF10  2B                 	db	43
   532  00FF11  43                 	db	67	;'C'
   533  00FF12  41                 	db	65	;'A'
   534  00FF13  50                 	db	80	;'P'
   535  00FF14  2D                 	db	45
   536  00FF15  4C                 	db	76	;'L'
   537  00FF16  42                 	db	66	;'B'
   538  00FF17  4C                 	db	76	;'L'
   539  00FF18  3A                 	db	58	;':'
   540  00FF19  20                 	db	32
   541  00FF1A  25                 	db	37
   542  00FF1B  64                 	db	100	;'d'
   543  00FF1C  20                 	db	32
   544  00FF1D  20                 	db	32
   545  00FF1E  00                 	db	0
   546  00FF1F                     STR_11:
   547  00FF1F  59                 	db	89	;'Y'
   548  00FF20  4F                 	db	79	;'O'
   549  00FF21  50                 	db	80	;'P'
   550  00FF22  2D                 	db	45
   551  00FF23  43                 	db	67	;'C'
   552  00FF24  41                 	db	65	;'A'
   553  00FF25  50                 	db	80	;'P'
   554  00FF26  2D                 	db	45
   555  00FF27  4C                 	db	76	;'L'
   556  00FF28  42                 	db	66	;'B'
   557  00FF29  4C                 	db	76	;'L'
   558  00FF2A  3A                 	db	58	;':'
   559  00FF2B  20                 	db	32
   560  00FF2C  25                 	db	37
   561  00FF2D  64                 	db	100	;'d'
   562  00FF2E  20                 	db	32
   563  00FF2F  20                 	db	32
   564  00FF30  00                 	db	0
   565  00FF31                     STR_12:
   566  00FF31  45                 	db	69	;'E'
   567  00FF32  53                 	db	83	;'S'
   568  00FF33  4B                 	db	75	;'K'
   569  00FF34  41                 	db	65	;'A'
   570  00FF35  2B                 	db	43
   571  00FF36  43                 	db	67	;'C'
   572  00FF37  41                 	db	65	;'A'
   573  00FF38  50                 	db	80	;'P'
   574  00FF39  2B                 	db	43
   575  00FF3A  4C                 	db	76	;'L'
   576  00FF3B  42                 	db	66	;'B'
   577  00FF3C  4C                 	db	76	;'L'
   578  00FF3D  3A                 	db	58	;':'
   579  00FF3E  20                 	db	32
   580  00FF3F  25                 	db	37
   581  00FF40  64                 	db	100	;'d'
   582  00FF41  20                 	db	32
   583  00FF42  00                 	db	0
   584  00FF43                     STR_14:
   585  00FF43  45                 	db	69	;'E'
   586  00FF44  53                 	db	83	;'S'
   587  00FF45  4B                 	db	75	;'K'
   588  00FF46  41                 	db	65	;'A'
   589  00FF47  2D                 	db	45
   590  00FF48  43                 	db	67	;'C'
   591  00FF49  41                 	db	65	;'A'
   592  00FF4A  50                 	db	80	;'P'
   593  00FF4B  2B                 	db	43
   594  00FF4C  4C                 	db	76	;'L'
   595  00FF4D  42                 	db	66	;'B'
   596  00FF4E  4C                 	db	76	;'L'
   597  00FF4F  3A                 	db	58	;':'
   598  00FF50  20                 	db	32
   599  00FF51  25                 	db	37
   600  00FF52  64                 	db	100	;'d'
   601  00FF53  20                 	db	32
   602  00FF54  00                 	db	0
   603  00FF55                     STR_13:
   604  00FF55  45                 	db	69	;'E'
   605  00FF56  53                 	db	83	;'S'
   606  00FF57  4B                 	db	75	;'K'
   607  00FF58  41                 	db	65	;'A'
   608  00FF59  2B                 	db	43
   609  00FF5A  43                 	db	67	;'C'
   610  00FF5B  41                 	db	65	;'A'
   611  00FF5C  50                 	db	80	;'P'
   612  00FF5D  2D                 	db	45
   613  00FF5E  4C                 	db	76	;'L'
   614  00FF5F  42                 	db	66	;'B'
   615  00FF60  4C                 	db	76	;'L'
   616  00FF61  3A                 	db	58	;':'
   617  00FF62  20                 	db	32
   618  00FF63  25                 	db	37
   619  00FF64  64                 	db	100	;'d'
   620  00FF65  20                 	db	32
   621  00FF66  00                 	db	0
   622  00FF67                     STR_15:
   623  00FF67  45                 	db	69	;'E'
   624  00FF68  53                 	db	83	;'S'
   625  00FF69  4B                 	db	75	;'K'
   626  00FF6A  41                 	db	65	;'A'
   627  00FF6B  2D                 	db	45
   628  00FF6C  43                 	db	67	;'C'
   629  00FF6D  41                 	db	65	;'A'
   630  00FF6E  50                 	db	80	;'P'
   631  00FF6F  2D                 	db	45
   632  00FF70  4C                 	db	76	;'L'
   633  00FF71  42                 	db	66	;'B'
   634  00FF72  4C                 	db	76	;'L'
   635  00FF73  3A                 	db	58	;':'
   636  00FF74  20                 	db	32
   637  00FF75  25                 	db	37
   638  00FF76  64                 	db	100	;'d'
   639  00FF77  20                 	db	32
   640  00FF78  00                 	db	0
   641  00FF79                     STR_25:
   642  00FF79  30                 	db	48	;'0'
   643  00FF7A  31                 	db	49	;'1'
   644  00FF7B  32                 	db	50	;'2'
   645  00FF7C  33                 	db	51	;'3'
   646  00FF7D  34                 	db	52	;'4'
   647  00FF7E  35                 	db	53	;'5'
   648  00FF7F  36                 	db	54	;'6'
   649  00FF80  37                 	db	55	;'7'
   650  00FF81  38                 	db	56	;'8'
   651  00FF82  39                 	db	57	;'9'
   652  00FF83  61                 	db	97	;'a'
   653  00FF84  62                 	db	98	;'b'
   654  00FF85  63                 	db	99	;'c'
   655  00FF86  64                 	db	100	;'d'
   656  00FF87  65                 	db	101	;'e'
   657  00FF88  66                 	db	102	;'f'
   658  00FF89  00                 	db	0
   659  00FF8A                     STR_2:
   660  00FF8A  73                 	db	115	;'s'
   661  00FF8B  74                 	db	116	;'t'
   662  00FF8C  61                 	db	97	;'a'
   663  00FF8D  6E                 	db	110	;'n'
   664  00FF8E  64                 	db	100	;'d'
   665  00FF8F  62                 	db	98	;'b'
   666  00FF90  79                 	db	121	;'y'
   667  00FF91  20                 	db	32
   668  00FF92  20                 	db	32
   669  00FF93  20                 	db	32
   670  00FF94  20                 	db	32
   671  00FF95  20                 	db	32
   672  00FF96  20                 	db	32
   673  00FF97  20                 	db	32
   674  00FF98  20                 	db	32
   675  00FF99  20                 	db	32
   676  00FF9A  00                 	db	0
   677  00FF9B                     STR_7:
   678  00FF9B  54                 	db	84	;'T'
   679  00FF9C  6F                 	db	111	;'o'
   680  00FF9D  74                 	db	116	;'t'
   681  00FF9E  61                 	db	97	;'a'
   682  00FF9F  6C                 	db	108	;'l'
   683  00FFA0  3A                 	db	58	;':'
   684  00FFA1  20                 	db	32
   685  00FFA2  25                 	db	37
   686  00FFA3  64                 	db	100	;'d'
   687  00FFA4  20                 	db	32
   688  00FFA5  20                 	db	32
   689  00FFA6  20                 	db	32
   690  00FFA7  20                 	db	32
   691  00FFA8  20                 	db	32
   692  00FFA9  20                 	db	32
   693  00FFAA  20                 	db	32
   694  00FFAB  00                 	db	0
   695  00FFAC                     STR_6:
   696  00FFAC  42                 	db	66	;'B'
   697  00FFAD  6F                 	db	111	;'o'
   698  00FFAE  74                 	db	116	;'t'
   699  00FFAF  74                 	db	116	;'t'
   700  00FFB0  6C                 	db	108	;'l'
   701  00FFB1  65                 	db	101	;'e'
   702  00FFB2  20                 	db	32
   703  00FFB3  43                 	db	67	;'C'
   704  00FFB4  6F                 	db	111	;'o'
   705  00FFB5  75                 	db	117	;'u'
   706  00FFB6  6E                 	db	110	;'n'
   707  00FFB7  74                 	db	116	;'t'
   708  00FFB8  20                 	db	32
   709  00FFB9  20                 	db	32
   710  00FFBA  20                 	db	32
   711  00FFBB  20                 	db	32
   712  00FFBC  00                 	db	0
   713  00FFBD                     STR_23:
   714  00FFBD  4F                 	db	79	;'O'
   715  00FFBE  70                 	db	112	;'p'
   716  00FFBF  65                 	db	101	;'e'
   717  00FFC0  72                 	db	114	;'r'
   718  00FFC1  61                 	db	97	;'a'
   719  00FFC2  74                 	db	116	;'t'
   720  00FFC3  69                 	db	105	;'i'
   721  00FFC4  6F                 	db	111	;'o'
   722  00FFC5  6E                 	db	110	;'n'
   723  00FFC6  20                 	db	32
   724  00FFC7  44                 	db	68	;'D'
   725  00FFC8  6F                 	db	111	;'o'
   726  00FFC9  6E                 	db	110	;'n'
   727  00FFCA  65                 	db	101	;'e'
   728  00FFCB  21                 	db	33
   729  00FFCC  00                 	db	0
   730  00FFCD                     STR_24:
   731  00FFCD  45                 	db	69	;'E'
   732  00FFCE  4D                 	db	77	;'M'
   733  00FFCF  45                 	db	69	;'E'
   734  00FFD0  52                 	db	82	;'R'
   735  00FFD1  47                 	db	71	;'G'
   736  00FFD2  45                 	db	69	;'E'
   737  00FFD3  4E                 	db	78	;'N'
   738  00FFD4  43                 	db	67	;'C'
   739  00FFD5  59                 	db	89	;'Y'
   740  00FFD6  20                 	db	32
   741  00FFD7  53                 	db	83	;'S'
   742  00FFD8  54                 	db	84	;'T'
   743  00FFD9  4F                 	db	79	;'O'
   744  00FFDA  50                 	db	80	;'P'
   745  00FFDB  00                 	db	0
   746  00FFDC                     STR_1:
   747  00FFDC  62                 	db	98	;'b'
   748  00FFDD  61                 	db	97	;'a'
   749  00FFDE  64                 	db	100	;'d'
   750  00FFDF  20                 	db	32
   751  00FFE0  69                 	db	105	;'i'
   752  00FFE1  6E                 	db	110	;'n'
   753  00FFE2  74                 	db	116	;'t'
   754  00FFE3  65                 	db	101	;'e'
   755  00FFE4  72                 	db	114	;'r'
   756  00FFE5  72                 	db	114	;'r'
   757  00FFE6  75                 	db	117	;'u'
   758  00FFE7  70                 	db	112	;'p'
   759  00FFE8  74                 	db	116	;'t'
   760  00FFE9  00                 	db	0
   761  00FFEA                     STR_3:
   762  00FFEA  50                 	db	80	;'P'
   763  00FFEB  4F                 	db	79	;'O'
   764  00FFEC  52                 	db	82	;'R'
   765  00FFED  54                 	db	84	;'T'
   766  00FFEE  42                 	db	66	;'B'
   767  00FFEF  3A                 	db	58	;':'
   768  00FFF0  20                 	db	32
   769  00FFF1  25                 	db	37
   770  00FFF2  64                 	db	100	;'d'
   771  00FFF3  00                 	db	0
   772  00FFF4                     STR_16:
   773  00FFF4  45                 	db	69	;'E'
   774  00FFF5  52                 	db	82	;'R'
   775  00FFF6  52                 	db	82	;'R'
   776  00FFF7  4F                 	db	79	;'O'
   777  00FFF8  52                 	db	82	;'R'
   778  00FFF9  3A                 	db	58	;':'
   779  00FFFA  20                 	db	32
   780  00FFFB  25                 	db	37
   781  00FFFC  64                 	db	100	;'d'
   782  00FFFD  00                 	db	0
   783                           
   784                           ; #config settings
   785  00FFFE  00                 	db	0	; dummy byte at the end
   786  0000                     
   787                           	psect	cinit
   788  0029FA                     __pcinit:
   789                           	opt stack 0
   790  0029FA                     start_initialization:
   791                           	opt stack 0
   792  0029FA                     __initialization:
   793                           	opt stack 0
   794                           
   795                           ; Initialize objects allocated to BANK0 (2 bytes)
   796                           ; load TBLPTR registers with __pidataBANK0
   797  0029FA  0EF8               	movlw	low __pidataBANK0
   798  0029FC  6EF6               	movwf	tblptrl,c
   799  0029FE  0E2C               	movlw	high __pidataBANK0
   800  002A00  6EF7               	movwf	tblptrh,c
   801  002A02  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   802  002A04  6EF8               	movwf	tblptru,c
   803  002A06  0009               	tblrd		*+	;fetch initializer
   804  002A08  CFF5 F0EE          	movff	tablat,__pdataBANK0
   805  002A0C  0009               	tblrd		*+	;fetch initializer
   806  002A0E  CFF5 F0EF          	movff	tablat,__pdataBANK0+1
   807                           
   808                           ; Clear objects allocated to BANK0 (68 bytes)
   809  002A12  EE00  F080         	lfsr	0,__pbssBANK0
   810  002A16  0E44               	movlw	68
   811  002A18                     clear_0:
   812  002A18  6AEE               	clrf	postinc0,c
   813  002A1A  06E8               	decf	wreg,f,c
   814  002A1C  E1FD               	bnz	clear_0
   815                           
   816                           ; Clear objects allocated to COMRAM (8 bytes)
   817  002A1E  EE00  F076         	lfsr	0,__pbssCOMRAM
   818  002A22  0E08               	movlw	8
   819  002A24                     clear_1:
   820  002A24  6AEE               	clrf	postinc0,c
   821  002A26  06E8               	decf	wreg,f,c
   822  002A28  E1FD               	bnz	clear_1
   823  002A2A                     end_of_initialization:
   824                           	opt stack 0
   825  002A2A                     __end_of__initialization:
   826                           	opt stack 0
   827  002A2A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   828  002A2C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   829  002A2E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   830  002A30  6EF8               	movwf	tblptru,c
   831  002A32  0100               	movlb	0
   832  002A34  EFAE  F00C         	goto	_main	;jump to C main() function
   833                           tblptru	equ	0xFF8
   834                           tblptrh	equ	0xFF7
   835                           tblptrl	equ	0xFF6
   836                           tablat	equ	0xFF5
   837                           postinc0	equ	0xFEE
   838                           wreg	equ	0xFE8
   839                           
   840                           	psect	bssCOMRAM
   841  000076                     __pbssCOMRAM:
   842                           	opt stack 0
   843  000076                     _bottlequeue_tail:
   844                           	opt stack 0
   845  000076                     	ds	2
   846  000078                     _end_time:
   847                           	opt stack 0
   848  000078                     	ds	2
   849  00007A                     _start_time:
   850                           	opt stack 0
   851  00007A                     	ds	2
   852  00007C                     _stime:
   853                           	opt stack 0
   854  00007C                     	ds	2
   855                           tblptru	equ	0xFF8
   856                           tblptrh	equ	0xFF7
   857                           tblptrl	equ	0xFF6
   858                           tablat	equ	0xFF5
   859                           postinc0	equ	0xFEE
   860                           wreg	equ	0xFE8
   861                           
   862                           	psect	bssBANK0
   863  000080                     __pbssBANK0:
   864                           	opt stack 0
   865  000080                     _bottlequeue:
   866                           	opt stack 0
   867  000080                     	ds	22
   868  000096                     _color:
   869                           	opt stack 0
   870  000096                     	ds	8
   871  00009E                     _time:
   872                           	opt stack 0
   873  00009E                     	ds	7
   874  0000A5                     _bottlequeue_head:
   875                           	opt stack 0
   876  0000A5                     	ds	2
   877  0000A7                     _errno:
   878                           	opt stack 0
   879  0000A7                     	ds	2
   880  0000A9                     _eska_count:
   881                           	opt stack 0
   882  0000A9                     	ds	2
   883  0000AB                     _eskacap_count:
   884                           	opt stack 0
   885  0000AB                     	ds	2
   886  0000AD                     _eskacaplbl_count:
   887                           	opt stack 0
   888  0000AD                     	ds	2
   889  0000AF                     _eskalbl_count:
   890                           	opt stack 0
   891  0000AF                     	ds	2
   892  0000B1                     _etime:
   893                           	opt stack 0
   894  0000B1                     	ds	2
   895  0000B3                     _nodedata:
   896                           	opt stack 0
   897  0000B3                     	ds	2
   898  0000B5                     _operation_disp:
   899                           	opt stack 0
   900  0000B5                     	ds	2
   901  0000B7                     _operation_time:
   902                           	opt stack 0
   903  0000B7                     	ds	2
   904  0000B9                     _total_bottle_count:
   905                           	opt stack 0
   906  0000B9                     	ds	2
   907  0000BB                     _yop_count:
   908                           	opt stack 0
   909  0000BB                     	ds	2
   910  0000BD                     _yopcap_count:
   911                           	opt stack 0
   912  0000BD                     	ds	2
   913  0000BF                     _yopcaplbl_count:
   914                           	opt stack 0
   915  0000BF                     	ds	2
   916  0000C1                     _yoplbl_count:
   917                           	opt stack 0
   918  0000C1                     	ds	2
   919  0000C3                     _curr_state:
   920                           	opt stack 0
   921  0000C3                     	ds	1
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           
   929                           	psect	dataBANK0
   930  0000EE                     __pdataBANK0:
   931                           	opt stack 0
   932  0000EE                     _bottle_count_disp:
   933                           	opt stack 0
   934  0000EE                     	ds	2
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           
   942                           	psect	cstackBANK1
   943  000100                     __pcstackBANK1:
   944                           	opt stack 0
   945  000100                     printf@idx:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x0
   949  000100                     	ds	1
   950  000101                     printf@ap:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x1
   954  000101                     	ds	2
   955  000103                     printf@prec:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x3
   959  000103                     	ds	1
   960  000104                     printf@val:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x4
   964  000104                     	ds	2
   965  000106                     printf@flag:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x6
   969  000106                     	ds	1
   970  000107                     printf@width:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x7
   974  000107                     	ds	2
   975  000109                     printf@c:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x9
   979  000109                     	ds	1
   980  00010A                     ??_main:
   981                           
   982                           ; 1 bytes @ 0xA
   983  00010A                     	ds	2
   984                           tblptru	equ	0xFF8
   985                           tblptrh	equ	0xFF7
   986                           tblptrl	equ	0xFF6
   987                           tablat	equ	0xFF5
   988                           postinc0	equ	0xFEE
   989                           wreg	equ	0xFE8
   990                           
   991                           	psect	cstackBANK0
   992  0000C4                     __pcstackBANK0:
   993                           	opt stack 0
   994  0000C4                     ??_isr:
   995                           
   996                           ; 1 bytes @ 0x0
   997  0000C4                     	ds	16
   998  0000D4                     ??_isdigit:
   999  0000D4                     ??_I2C_Master_Wait:
  1000  0000D4                     ?___wmul:
  1001                           	opt stack 0
  1002  0000D4                     ?___awmod:
  1003                           	opt stack 0
  1004  0000D4                     ?___lwdiv:
  1005                           	opt stack 0
  1006  0000D4                     ?___lldiv:
  1007                           	opt stack 0
  1008  0000D4                     lcdNibble@temp:
  1009                           	opt stack 0
  1010  0000D4                     ___wmul@multiplier:
  1011                           	opt stack 0
  1012  0000D4                     ___awmod@dividend:
  1013                           	opt stack 0
  1014  0000D4                     ___lwdiv@dividend:
  1015                           	opt stack 0
  1016  0000D4                     ___lldiv@dividend:
  1017                           	opt stack 0
  1018                           
  1019                           ; 4 bytes @ 0x10
  1020  0000D4                     	ds	1
  1021  0000D5                     I2C_Master_Read@a:
  1022                           	opt stack 0
  1023  0000D5                     lcdNibble@data:
  1024                           	opt stack 0
  1025  0000D5                     _isdigit$822:
  1026                           	opt stack 0
  1027  0000D5                     I2C_Master_Write@d:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x11
  1031  0000D5                     	ds	1
  1032  0000D6                     I2C_Master_Read@temp:
  1033                           	opt stack 0
  1034  0000D6                     lcdInst@data:
  1035                           	opt stack 0
  1036  0000D6                     putch@data:
  1037                           	opt stack 0
  1038  0000D6                     isdigit@c:
  1039                           	opt stack 0
  1040  0000D6                     ___wmul@multiplicand:
  1041                           	opt stack 0
  1042  0000D6                     ___awmod@divisor:
  1043                           	opt stack 0
  1044  0000D6                     ___lwdiv@divisor:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x12
  1048  0000D6                     	ds	1
  1049  0000D7                     ??_read_colorsensor:
  1050  0000D7                     ??_initLCD:
  1051                           
  1052                           ; 1 bytes @ 0x13
  1053  0000D7                     	ds	1
  1054  0000D8                     ___awmod@counter:
  1055                           	opt stack 0
  1056  0000D8                     ___lwdiv@counter:
  1057                           	opt stack 0
  1058  0000D8                     ___wmul@product:
  1059                           	opt stack 0
  1060  0000D8                     ___lldiv@divisor:
  1061                           	opt stack 0
  1062                           
  1063                           ; 4 bytes @ 0x14
  1064  0000D8                     	ds	1
  1065  0000D9                     ___awmod@sign:
  1066                           	opt stack 0
  1067  0000D9                     read_colorsensor@color_low:
  1068                           	opt stack 0
  1069  0000D9                     ___lwdiv@quotient:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x15
  1073  0000D9                     	ds	2
  1074  0000DB                     ?___lwmod:
  1075                           	opt stack 0
  1076  0000DB                     read_colorsensor@color_high:
  1077                           	opt stack 0
  1078  0000DB                     ___lwmod@dividend:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x17
  1082  0000DB                     	ds	1
  1083  0000DC                     ___lldiv@quotient:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x18
  1087  0000DC                     	ds	1
  1088  0000DD                     read_colorsensor@color_comb:
  1089                           	opt stack 0
  1090  0000DD                     ___lwmod@divisor:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x19
  1094  0000DD                     	ds	2
  1095  0000DF                     ___lwmod@counter:
  1096                           	opt stack 0
  1097  0000DF                     read_colorsensor@i:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x1B
  1101  0000DF                     	ds	1
  1102  0000E0                     ?_printf:
  1103                           	opt stack 0
  1104  0000E0                     ___lldiv@counter:
  1105                           	opt stack 0
  1106  0000E0                     printf@f:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x1C
  1110  0000E0                     	ds	1
  1111  0000E1                     I2C_Master_Init@c:
  1112                           	opt stack 0
  1113                           
  1114                           ; 4 bytes @ 0x1D
  1115  0000E1                     	ds	4
  1116  0000E5                     ??_I2C_Master_Init:
  1117                           
  1118                           ; 1 bytes @ 0x21
  1119  0000E5                     	ds	3
  1120  0000E8                     ??_printf:
  1121                           
  1122                           ; 1 bytes @ 0x24
  1123  0000E8                     	ds	4
  1124  0000EC                     ??_operation:
  1125  0000EC                     date_time@i:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x28
  1129  0000EC                     	ds	2
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           
  1137                           	psect	cstackCOMRAM
  1138  000001                     __pcstackCOMRAM:
  1139                           	opt stack 0
  1140  000001                     ??i2_I2C_Master_Wait:
  1141  000001                     ??i2_isdigit:
  1142  000001                     ?i2___wmul:
  1143                           	opt stack 0
  1144  000001                     ?i2___lwdiv:
  1145                           	opt stack 0
  1146  000001                     ?___ftpack:
  1147                           	opt stack 0
  1148  000001                     ?_frexp:
  1149                           	opt stack 0
  1150  000001                     ?___ftneg:
  1151                           	opt stack 0
  1152  000001                     i2lcdNibble@temp:
  1153                           	opt stack 0
  1154  000001                     servo_rotate0@degree:
  1155                           	opt stack 0
  1156  000001                     i2___wmul@multiplier:
  1157                           	opt stack 0
  1158  000001                     i2___lwdiv@dividend:
  1159                           	opt stack 0
  1160  000001                     ___ftpack@arg:
  1161                           	opt stack 0
  1162  000001                     ___ftge@ff1:
  1163                           	opt stack 0
  1164  000001                     ___ftneg@f1:
  1165                           	opt stack 0
  1166  000001                     frexp@value:
  1167                           	opt stack 0
  1168                           
  1169                           ; 3 bytes @ 0x0
  1170  000001                     	ds	1
  1171  000002                     i2I2C_Master_Read@a:
  1172                           	opt stack 0
  1173  000002                     i2lcdNibble@data:
  1174                           	opt stack 0
  1175  000002                     i2_isdigit$822:
  1176                           	opt stack 0
  1177  000002                     i2I2C_Master_Write@d:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x1
  1181  000002                     	ds	1
  1182  000003                     ??_servo_rotate0:
  1183  000003                     i2I2C_Master_Read@temp:
  1184                           	opt stack 0
  1185  000003                     i2lcdInst@data:
  1186                           	opt stack 0
  1187  000003                     i2putch@data:
  1188                           	opt stack 0
  1189  000003                     i2isdigit@c:
  1190                           	opt stack 0
  1191  000003                     i2___wmul@multiplicand:
  1192                           	opt stack 0
  1193  000003                     i2___lwdiv@divisor:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x2
  1197  000003                     	ds	1
  1198  000004                     ??i2_read_colorsensor:
  1199  000004                     read_time@i:
  1200                           	opt stack 0
  1201  000004                     ___ftpack@exp:
  1202                           	opt stack 0
  1203  000004                     frexp@eptr:
  1204                           	opt stack 0
  1205  000004                     ___ftge@ff2:
  1206                           	opt stack 0
  1207                           
  1208                           ; 3 bytes @ 0x3
  1209  000004                     	ds	1
  1210  000005                     ___ftpack@sign:
  1211                           	opt stack 0
  1212  000005                     servo_rotate0@duty:
  1213                           	opt stack 0
  1214  000005                     i2___wmul@product:
  1215                           	opt stack 0
  1216  000005                     i2___lwdiv@quotient:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x4
  1220  000005                     	ds	1
  1221  000006                     ??___ftpack:
  1222  000006                     ??_frexp:
  1223  000006                     i2read_colorsensor@color_low:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x5
  1227  000006                     	ds	1
  1228  000007                     ??___ftge:
  1229  000007                     ?___awdiv:
  1230                           	opt stack 0
  1231  000007                     i2___lwdiv@counter:
  1232                           	opt stack 0
  1233  000007                     servo_rotate0@i:
  1234                           	opt stack 0
  1235  000007                     ___awdiv@dividend:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x6
  1239  000007                     	ds	1
  1240  000008                     ?i2___lwmod:
  1241                           	opt stack 0
  1242  000008                     i2read_colorsensor@color_high:
  1243                           	opt stack 0
  1244  000008                     i2___lwmod@dividend:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x7
  1248  000008                     	ds	1
  1249  000009                     ?___ftdiv:
  1250                           	opt stack 0
  1251  000009                     ?___awtoft:
  1252                           	opt stack 0
  1253  000009                     ?___lltoft:
  1254                           	opt stack 0
  1255  000009                     servo_rotate0@j:
  1256                           	opt stack 0
  1257  000009                     ___awdiv@divisor:
  1258                           	opt stack 0
  1259  000009                     ___awtoft@c:
  1260                           	opt stack 0
  1261  000009                     ___ftdiv@f1:
  1262                           	opt stack 0
  1263  000009                     ___lltoft@c:
  1264                           	opt stack 0
  1265                           
  1266                           ; 4 bytes @ 0x8
  1267  000009                     	ds	1
  1268  00000A                     i2read_colorsensor@color_comb:
  1269                           	opt stack 0
  1270  00000A                     i2___lwmod@divisor:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0x9
  1274  00000A                     	ds	1
  1275  00000B                     ___awdiv@counter:
  1276                           	opt stack 0
  1277                           
  1278                           ; 1 bytes @ 0xA
  1279  00000B                     	ds	1
  1280  00000C                     ___awdiv@sign:
  1281                           	opt stack 0
  1282  00000C                     ___awtoft@sign:
  1283                           	opt stack 0
  1284  00000C                     i2___lwmod@counter:
  1285                           	opt stack 0
  1286  00000C                     i2read_colorsensor@i:
  1287                           	opt stack 0
  1288  00000C                     ___ftdiv@f2:
  1289                           	opt stack 0
  1290                           
  1291                           ; 3 bytes @ 0xB
  1292  00000C                     	ds	1
  1293  00000D                     ??___lltoft:
  1294  00000D                     ?i2_printf:
  1295                           	opt stack 0
  1296  00000D                     ?___ftmul:
  1297                           	opt stack 0
  1298  00000D                     ___awdiv@quotient:
  1299                           	opt stack 0
  1300  00000D                     i2printf@f:
  1301                           	opt stack 0
  1302  00000D                     ___ftmul@f1:
  1303                           	opt stack 0
  1304                           
  1305                           ; 3 bytes @ 0xC
  1306  00000D                     	ds	2
  1307  00000F                     ??___ftdiv:
  1308  00000F                     ??i2_printf:
  1309  00000F                     servo_rotate1@degree:
  1310                           	opt stack 0
  1311  00000F                     servo_rotate2@degree:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0xE
  1315  00000F                     	ds	1
  1316  000010                     ___ftmul@f2:
  1317                           	opt stack 0
  1318                           
  1319                           ; 3 bytes @ 0xF
  1320  000010                     	ds	1
  1321  000011                     ??_servo_rotate2:
  1322  000011                     ??_servo_rotate1:
  1323  000011                     ___lltoft@exp:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x10
  1327  000011                     	ds	1
  1328  000012                     ___ftdiv@cntr:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x11
  1332  000012                     	ds	1
  1333  000013                     ??___ftmul:
  1334  000013                     i2printf@idx:
  1335                           	opt stack 0
  1336  000013                     servo_rotate1@duty:
  1337                           	opt stack 0
  1338  000013                     servo_rotate2@duty:
  1339                           	opt stack 0
  1340  000013                     ___ftdiv@f3:
  1341                           	opt stack 0
  1342                           
  1343                           ; 3 bytes @ 0x12
  1344  000013                     	ds	1
  1345  000014                     i2printf@ap:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x13
  1349  000014                     	ds	1
  1350  000015                     servo_rotate1@i:
  1351                           	opt stack 0
  1352  000015                     servo_rotate2@i:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x14
  1356  000015                     	ds	1
  1357  000016                     ___ftdiv@exp:
  1358                           	opt stack 0
  1359  000016                     ___ftmul@exp:
  1360                           	opt stack 0
  1361  000016                     i2printf@prec:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x15
  1365  000016                     	ds	1
  1366  000017                     ___ftdiv@sign:
  1367                           	opt stack 0
  1368  000017                     servo_rotate1@j:
  1369                           	opt stack 0
  1370  000017                     servo_rotate2@j:
  1371                           	opt stack 0
  1372  000017                     i2printf@val:
  1373                           	opt stack 0
  1374  000017                     ___ftmul@f3_as_product:
  1375                           	opt stack 0
  1376                           
  1377                           ; 3 bytes @ 0x16
  1378  000017                     	ds	2
  1379  000019                     i2printf@flag:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x18
  1383  000019                     	ds	1
  1384  00001A                     ___ftmul@cntr:
  1385                           	opt stack 0
  1386  00001A                     i2printf@width:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x19
  1390  00001A                     	ds	1
  1391  00001B                     ___ftmul@sign:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x1A
  1395  00001B                     	ds	1
  1396  00001C                     ?___ftadd:
  1397                           	opt stack 0
  1398  00001C                     i2printf@c:
  1399                           	opt stack 0
  1400  00001C                     ___ftadd@f1:
  1401                           	opt stack 0
  1402                           
  1403                           ; 3 bytes @ 0x1B
  1404  00001C                     	ds	3
  1405  00001F                     ___ftadd@f2:
  1406                           	opt stack 0
  1407                           
  1408                           ; 3 bytes @ 0x1E
  1409  00001F                     	ds	3
  1410  000022                     ??___ftadd:
  1411                           
  1412                           ; 1 bytes @ 0x21
  1413  000022                     	ds	3
  1414  000025                     ___ftadd@sign:
  1415                           	opt stack 0
  1416                           
  1417                           ; 1 bytes @ 0x24
  1418  000025                     	ds	1
  1419  000026                     ___ftadd@exp2:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x25
  1423  000026                     	ds	1
  1424  000027                     ___ftadd@exp1:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x26
  1428  000027                     	ds	1
  1429  000028                     ?___ftsub:
  1430                           	opt stack 0
  1431  000028                     ?_eval_poly:
  1432                           	opt stack 0
  1433  000028                     ?___fttol:
  1434                           	opt stack 0
  1435  000028                     ___ftsub@f1:
  1436                           	opt stack 0
  1437  000028                     ___fttol@f1:
  1438                           	opt stack 0
  1439  000028                     eval_poly@x:
  1440                           	opt stack 0
  1441                           
  1442                           ; 3 bytes @ 0x27
  1443  000028                     	ds	3
  1444  00002B                     eval_poly@d:
  1445                           	opt stack 0
  1446  00002B                     ___ftsub@f2:
  1447                           	opt stack 0
  1448                           
  1449                           ; 3 bytes @ 0x2A
  1450  00002B                     	ds	1
  1451  00002C                     ??___fttol:
  1452                           
  1453                           ; 1 bytes @ 0x2B
  1454  00002C                     	ds	1
  1455  00002D                     eval_poly@n:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x2C
  1459  00002D                     	ds	1
  1460  00002E                     
  1461                           ; 1 bytes @ 0x2D
  1462  00002E                     	ds	1
  1463  00002F                     ??_eval_poly:
  1464                           
  1465                           ; 1 bytes @ 0x2E
  1466  00002F                     	ds	2
  1467  000031                     ___fttol@sign1:
  1468                           	opt stack 0
  1469  000031                     eval_poly@res:
  1470                           	opt stack 0
  1471                           
  1472                           ; 3 bytes @ 0x30
  1473  000031                     	ds	1
  1474  000032                     ___fttol@lval:
  1475                           	opt stack 0
  1476                           
  1477                           ; 4 bytes @ 0x31
  1478  000032                     	ds	2
  1479  000034                     ?_log:
  1480                           	opt stack 0
  1481  000034                     ?_ldexp:
  1482                           	opt stack 0
  1483  000034                     ldexp@value:
  1484                           	opt stack 0
  1485  000034                     log@x:
  1486                           	opt stack 0
  1487                           
  1488                           ; 3 bytes @ 0x33
  1489  000034                     	ds	2
  1490  000036                     ___fttol@exp1:
  1491                           	opt stack 0
  1492                           
  1493                           ; 1 bytes @ 0x35
  1494  000036                     	ds	1
  1495  000037                     ?___altoft:
  1496                           	opt stack 0
  1497  000037                     ldexp@newexp:
  1498                           	opt stack 0
  1499  000037                     log@exponent:
  1500                           	opt stack 0
  1501  000037                     ___altoft@c:
  1502                           	opt stack 0
  1503                           
  1504                           ; 4 bytes @ 0x36
  1505  000037                     	ds	2
  1506  000039                     ??_ldexp:
  1507                           
  1508                           ; 1 bytes @ 0x38
  1509  000039                     	ds	2
  1510  00003B                     ??___altoft:
  1511                           
  1512                           ; 1 bytes @ 0x3A
  1513  00003B                     	ds	4
  1514  00003F                     ___altoft@exp:
  1515                           	opt stack 0
  1516                           
  1517                           ; 1 bytes @ 0x3E
  1518  00003F                     	ds	1
  1519  000040                     ___altoft@sign:
  1520                           	opt stack 0
  1521                           
  1522                           ; 1 bytes @ 0x3F
  1523  000040                     	ds	1
  1524  000041                     ?_floor:
  1525                           	opt stack 0
  1526  000041                     floor@x:
  1527                           	opt stack 0
  1528                           
  1529                           ; 3 bytes @ 0x40
  1530  000041                     	ds	3
  1531  000044                     floor@i:
  1532                           	opt stack 0
  1533                           
  1534                           ; 3 bytes @ 0x43
  1535  000044                     	ds	3
  1536  000047                     floor@expon:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x46
  1540  000047                     	ds	2
  1541  000049                     ?_exp:
  1542                           	opt stack 0
  1543  000049                     exp@x:
  1544                           	opt stack 0
  1545                           
  1546                           ; 3 bytes @ 0x48
  1547  000049                     	ds	3
  1548  00004C                     _exp$1262:
  1549                           	opt stack 0
  1550                           
  1551                           ; 3 bytes @ 0x4B
  1552  00004C                     	ds	3
  1553  00004F                     exp@exponent:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0x4E
  1557  00004F                     	ds	2
  1558  000051                     exp@sign:
  1559                           	opt stack 0
  1560                           
  1561                           ; 1 bytes @ 0x50
  1562  000051                     	ds	1
  1563  000052                     ?_pow:
  1564                           	opt stack 0
  1565  000052                     pow@x:
  1566                           	opt stack 0
  1567                           
  1568                           ; 3 bytes @ 0x51
  1569  000052                     	ds	3
  1570  000055                     pow@y:
  1571                           	opt stack 0
  1572                           
  1573                           ; 3 bytes @ 0x54
  1574  000055                     	ds	3
  1575  000058                     _pow$1260:
  1576                           	opt stack 0
  1577                           
  1578                           ; 3 bytes @ 0x57
  1579  000058                     	ds	3
  1580  00005B                     _pow$1261:
  1581                           	opt stack 0
  1582                           
  1583                           ; 3 bytes @ 0x5A
  1584  00005B                     	ds	3
  1585  00005E                     pow@sign:
  1586                           	opt stack 0
  1587                           
  1588                           ; 1 bytes @ 0x5D
  1589  00005E                     	ds	1
  1590  00005F                     pow@yi:
  1591                           	opt stack 0
  1592                           
  1593                           ; 4 bytes @ 0x5E
  1594  00005F                     	ds	4
  1595  000063                     ?_dec_to_hex:
  1596                           	opt stack 0
  1597  000063                     dec_to_hex@num:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0x62
  1601  000063                     	ds	2
  1602  000065                     _dec_to_hex$1258:
  1603                           	opt stack 0
  1604                           
  1605                           ; 3 bytes @ 0x64
  1606  000065                     	ds	3
  1607  000068                     _dec_to_hex$1259:
  1608                           	opt stack 0
  1609                           
  1610                           ; 3 bytes @ 0x67
  1611  000068                     	ds	3
  1612  00006B                     dec_to_hex@temp:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x6A
  1616  00006B                     	ds	2
  1617  00006D                     dec_to_hex@i:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x6C
  1621  00006D                     	ds	2
  1622  00006F                     dec_to_hex@hexnum:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x6E
  1626  00006F                     	ds	2
  1627  000071                     dec_to_hex@quotient:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x70
  1631  000071                     	ds	2
  1632  000073                     isr@i:
  1633                           	opt stack 0
  1634                           
  1635                           ; 1 bytes @ 0x72
  1636  000073                     	ds	1
  1637  000074                     _isr$1354:
  1638                           	opt stack 0
  1639                           
  1640                           ; 2 bytes @ 0x73
  1641  000074                     	ds	2
  1642                           tblptru	equ	0xFF8
  1643                           tblptrh	equ	0xFF7
  1644                           tblptrl	equ	0xFF6
  1645                           tablat	equ	0xFF5
  1646                           postinc0	equ	0xFEE
  1647                           wreg	equ	0xFE8
  1648                           
  1649 ;;
  1650 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1651 ;;
  1652 ;; *************** function _main *****************
  1653 ;; Defined at:
  1654 ;;		line 87 in file "main.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;		None
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;		None
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;Total ram usage:        2 bytes
  1673 ;; Hardware stack levels required when called:   11
  1674 ;; This function calls:
  1675 ;;		_I2C_ColorSens_Init
  1676 ;;		_I2C_Master_Init
  1677 ;;		_bottle_count
  1678 ;;		_bottle_time
  1679 ;;		_date_time
  1680 ;;		_emergencystop
  1681 ;;		_initLCD
  1682 ;;		_operation
  1683 ;;		_operationend
  1684 ;;		_standby
  1685 ;; This function is called by:
  1686 ;;		Startup code after reset
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text0
  1691  00195C                     __ptext0:
  1692                           	opt stack 0
  1693  00195C                     _main:
  1694                           	opt stack 20
  1695                           
  1696                           ;main.c: 94: TRISA = 0b11111011;
  1697                           
  1698                           ;incstack = 0
  1699  00195C  0EFB               	movlw	251
  1700  00195E  6E92               	movwf	3986,c	;volatile
  1701                           
  1702                           ;main.c: 95: TRISB = 0xFF;
  1703  001960  6893               	setf	3987,c	;volatile
  1704                           
  1705                           ;main.c: 96: TRISC = 0x00;
  1706  001962  0E00               	movlw	0
  1707  001964  6E94               	movwf	3988,c	;volatile
  1708                           
  1709                           ;main.c: 97: TRISD = 0x00;
  1710  001966  0E00               	movlw	0
  1711  001968  6E95               	movwf	3989,c	;volatile
  1712                           
  1713                           ;main.c: 98: TRISE = 0x00;
  1714  00196A  0E00               	movlw	0
  1715  00196C  6E96               	movwf	3990,c	;volatile
  1716                           
  1717                           ;main.c: 100: LATA = 0x00;
  1718  00196E  0E00               	movlw	0
  1719  001970  6E89               	movwf	3977,c	;volatile
  1720                           
  1721                           ;main.c: 101: LATB = 0x00;
  1722  001972  0E00               	movlw	0
  1723  001974  6E8A               	movwf	3978,c	;volatile
  1724                           
  1725                           ;main.c: 102: LATC = 0x00;
  1726  001976  0E00               	movlw	0
  1727  001978  6E8B               	movwf	3979,c	;volatile
  1728                           
  1729                           ;main.c: 103: LATD = 0x00;
  1730  00197A  0E00               	movlw	0
  1731  00197C  6E8C               	movwf	3980,c	;volatile
  1732                           
  1733                           ;main.c: 104: LATE = 0x00;
  1734  00197E  0E00               	movlw	0
  1735  001980  6E8D               	movwf	3981,c	;volatile
  1736                           
  1737                           ;main.c: 106: ADCON0 = 0x00;
  1738  001982  0E00               	movlw	0
  1739  001984  6EC2               	movwf	4034,c	;volatile
  1740                           
  1741                           ;main.c: 107: ADCON1 = 0xFF;
  1742  001986  68C1               	setf	4033,c	;volatile
  1743                           
  1744                           ;main.c: 110: GIE = 1;
  1745  001988  8EF2               	bsf	intcon,7,c	;volatile
  1746                           
  1747                           ;main.c: 111: INT1IE = 1;
  1748  00198A  86F0               	bsf	intcon3,3,c	;volatile
  1749                           
  1750                           ;main.c: 112: INT0IE = 0;
  1751  00198C  98F2               	bcf	intcon,4,c	;volatile
  1752                           
  1753                           ;main.c: 113: INT2IE = 0;
  1754  00198E  98F0               	bcf	intcon3,4,c	;volatile
  1755                           
  1756                           ;main.c: 115: nRBPU = 0;
  1757  001990  9EF1               	bcf	intcon2,7,c	;volatile
  1758                           
  1759                           ;main.c: 117: initLCD();
  1760  001992  EC6D  F014         	call	_initLCD	;wreg free
  1761                           
  1762                           ;main.c: 118: I2C_Master_Init(10000);
  1763  001996  0E10               	movlw	16
  1764  001998  0100               	movlb	0	; () banked
  1765  00199A  6FE1               	movwf	I2C_Master_Init@c& (0+255),b
  1766  00199C  0E27               	movlw	39
  1767  00199E  6FE2               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1768  0019A0  0E00               	movlw	0
  1769  0019A2  6FE3               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1770  0019A4  0E00               	movlw	0
  1771  0019A6  6FE4               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1772  0019A8  ECE6  F013         	call	_I2C_Master_Init	;wreg free
  1773                           
  1774                           ;main.c: 119: I2C_ColorSens_Init();
  1775  0019AC  EC89  F015         	call	_I2C_ColorSens_Init	;wreg free
  1776                           
  1777                           ;main.c: 122: TMR0 = 0;
  1778  0019B0  0E00               	movlw	0
  1779  0019B2  6ED7               	movwf	4055,c	;volatile
  1780  0019B4  0E00               	movlw	0
  1781  0019B6  6ED6               	movwf	4054,c	;volatile
  1782                           
  1783                           ;main.c: 123: T08BIT = 0;
  1784  0019B8  9CD5               	bcf	4053,6,c	;volatile
  1785                           
  1786                           ;main.c: 124: T0CS = 0;
  1787  0019BA  9AD5               	bcf	4053,5,c	;volatile
  1788                           
  1789                           ;main.c: 125: PSA = 0;
  1790  0019BC  96D5               	bcf	4053,3,c	;volatile
  1791                           
  1792                           ;main.c: 126: T0PS2 = 1;
  1793  0019BE  84D5               	bsf	4053,2,c	;volatile
  1794                           
  1795                           ;main.c: 127: T0PS1 = 1;
  1796  0019C0  82D5               	bsf	4053,1,c	;volatile
  1797                           
  1798                           ;main.c: 128: T0PS0 = 1;
  1799  0019C2  80D5               	bsf	4053,0,c	;volatile
  1800                           
  1801                           ;main.c: 132: curr_state = STANDBY;
  1802  0019C4  0E00               	movlw	0
  1803  0019C6  0100               	movlb	0	; () banked
  1804  0019C8  6FC3               	movwf	_curr_state& (0+255),b
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;main.c: 135: switch(curr_state){
  1808                           
  1809                           ;main.c: 134: while(1){
  1810  0019CA  D015               	goto	l5175
  1811  0019CC                     l5159:
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 137: standby();
  1815  0019CC  EC38  F015         	call	_standby	;wreg free
  1816                           
  1817                           ;main.c: 138: break;
  1818  0019D0  D029               	goto	l5177
  1819  0019D2                     l5161:
  1820                           
  1821                           ;main.c: 140: emergencystop();
  1822  0019D2  EC07  F016         	call	_emergencystop	;wreg free
  1823                           
  1824                           ;main.c: 141: break;
  1825  0019D6  D026               	goto	l5177
  1826  0019D8                     l5163:
  1827                           
  1828                           ;main.c: 143: operation();
  1829  0019D8  ECA5  F00F         	call	_operation	;wreg free
  1830                           
  1831                           ;main.c: 144: break;
  1832  0019DC  D023               	goto	l5177
  1833  0019DE                     l5165:
  1834                           
  1835                           ;main.c: 146: operationend();
  1836  0019DE  EC27  F016         	call	_operationend	;wreg free
  1837                           
  1838                           ;main.c: 147: break;
  1839  0019E2  D020               	goto	l5177
  1840  0019E4                     l5167:
  1841                           
  1842                           ;main.c: 149: date_time();
  1843  0019E4  EC70  F00E         	call	_date_time	;wreg free
  1844                           
  1845                           ;main.c: 150: break;
  1846  0019E8  D01D               	goto	l5177
  1847  0019EA                     l5169:
  1848                           
  1849                           ;main.c: 152: bottle_count();
  1850  0019EA  EC99  F008         	call	_bottle_count	;wreg free
  1851                           
  1852                           ;main.c: 153: break;
  1853  0019EE  D01A               	goto	l5177
  1854  0019F0                     l5171:
  1855                           
  1856                           ;main.c: 155: bottle_time();
  1857  0019F0  EC53  F015         	call	_bottle_time	;wreg free
  1858                           
  1859                           ;main.c: 157: }
  1860                           
  1861                           ;main.c: 156: break;
  1862  0019F4  D017               	goto	l5177
  1863  0019F6                     l5175:
  1864  0019F6  0100               	movlb	0	; () banked
  1865  0019F8  51C3               	movf	_curr_state& (0+255),w,b
  1866                           
  1867                           ; Switch size 1, requested type "space"
  1868                           ; Number of cases is 7, Range of values is 0 to 6
  1869                           ; switch strategies available:
  1870                           ; Name         Instructions Cycles
  1871                           ; simple_byte           22    12 (average)
  1872                           ;	Chosen strategy is simple_byte
  1873  0019FA  0A00               	xorlw	0	; case 0
  1874  0019FC  B4D8               	btfsc	status,2,c
  1875  0019FE  D7E6               	goto	l5159
  1876  001A00  0A01               	xorlw	1	; case 1
  1877  001A02  B4D8               	btfsc	status,2,c
  1878  001A04  D7E6               	goto	l5161
  1879  001A06  0A03               	xorlw	3	; case 2
  1880  001A08  B4D8               	btfsc	status,2,c
  1881  001A0A  D7E6               	goto	l5163
  1882  001A0C  0A01               	xorlw	1	; case 3
  1883  001A0E  B4D8               	btfsc	status,2,c
  1884  001A10  D7E6               	goto	l5165
  1885  001A12  0A07               	xorlw	7	; case 4
  1886  001A14  B4D8               	btfsc	status,2,c
  1887  001A16  D7E6               	goto	l5167
  1888  001A18  0A01               	xorlw	1	; case 5
  1889  001A1A  B4D8               	btfsc	status,2,c
  1890  001A1C  D7E6               	goto	l5169
  1891  001A1E  0A03               	xorlw	3	; case 6
  1892  001A20  B4D8               	btfsc	status,2,c
  1893  001A22  D7E6               	goto	l5171
  1894  001A24                     l5177:
  1895                           
  1896                           ;main.c: 158: _delay((unsigned long)((200)*(10000000/4000.0)));
  1897  001A24  0E03               	movlw	3
  1898  001A26  0101               	movlb	1	; () banked
  1899  001A28  6F0B               	movwf	(??_main+1)& (0+255),b
  1900  001A2A  0E8A               	movlw	138
  1901  001A2C  0101               	movlb	1	; () banked
  1902  001A2E  6F0A               	movwf	??_main& (0+255),b
  1903  001A30  0E55               	movlw	85
  1904  001A32                     u4757:
  1905  001A32  2EE8               	decfsz	wreg,f,c
  1906  001A34  D7FE               	bra	u4757
  1907  001A36  2F0A               	decfsz	??_main& (0+255),f,b
  1908  001A38  D7FC               	bra	u4757
  1909  001A3A  2F0B               	decfsz	(??_main+1)& (0+255),f,b
  1910  001A3C  D7FA               	bra	u4757
  1911  001A3E  D000               	nop2	
  1912  001A40  D7DA               	goto	l5175
  1913  001A42                     __end_of_main:
  1914                           	opt stack 0
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           intcon	equ	0xFF2
  1920                           intcon2	equ	0xFF1
  1921                           intcon3	equ	0xFF0
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           status	equ	0xFD8
  1925                           
  1926 ;; *************** function _standby *****************
  1927 ;; Defined at:
  1928 ;;		line 322 in file "main.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;		None
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;		None
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  1    wreg      void 
  1935 ;; Registers used:
  1936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;Total ram usage:        0 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; Hardware stack levels required when called:   10
  1949 ;; This function calls:
  1950 ;;		_lcdInst
  1951 ;;		_printf
  1952 ;; This function is called by:
  1953 ;;		_main
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           	psect	text1
  1958  002A70                     __ptext1:
  1959                           	opt stack 0
  1960  002A70                     _standby:
  1961                           	opt stack 20
  1962                           
  1963                           ;main.c: 323: lcdInst(0b10000000);
  1964                           
  1965                           ;incstack = 0
  1966  002A70  0E80               	movlw	128
  1967  002A72  EC4E  F016         	call	_lcdInst
  1968                           
  1969                           ;main.c: 324: printf("standby         ");
  1970  002A76  0E8A               	movlw	low STR_2
  1971  002A78  0100               	movlb	0	; () banked
  1972  002A7A  6FE0               	movwf	printf@f& (0+255),b
  1973  002A7C  0EFF               	movlw	high STR_2
  1974  002A7E  0100               	movlb	0	; () banked
  1975  002A80  6FE1               	movwf	(printf@f+1)& (0+255),b
  1976  002A82  EC6F  F003         	call	_printf	;wreg free
  1977                           
  1978                           ;main.c: 325: lcdInst(0b11000000);
  1979  002A86  0EC0               	movlw	192
  1980  002A88  EC4E  F016         	call	_lcdInst
  1981                           
  1982                           ;main.c: 326: printf("PORTB: %d", PORTB);
  1983  002A8C  0EEA               	movlw	low STR_3
  1984  002A8E  0100               	movlb	0	; () banked
  1985  002A90  6FE0               	movwf	printf@f& (0+255),b
  1986  002A92  0EFF               	movlw	high STR_3
  1987  002A94  0100               	movlb	0	; () banked
  1988  002A96  6FE1               	movwf	(printf@f+1)& (0+255),b
  1989  002A98  CF81 F0E2          	movff	3969,?_printf+2	;volatile
  1990  002A9C  0100               	movlb	0	; () banked
  1991  002A9E  6BE3               	clrf	(?_printf+3)& (0+255),b
  1992  002AA0  EC6F  F003         	call	_printf	;wreg free
  1993  002AA4  0012               	return	
  1994  002AA6                     __end_of_standby:
  1995                           	opt stack 0
  1996                           tblptru	equ	0xFF8
  1997                           tblptrh	equ	0xFF7
  1998                           tblptrl	equ	0xFF6
  1999                           tablat	equ	0xFF5
  2000                           intcon	equ	0xFF2
  2001                           intcon2	equ	0xFF1
  2002                           intcon3	equ	0xFF0
  2003                           postinc0	equ	0xFEE
  2004                           wreg	equ	0xFE8
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _operationend *****************
  2008 ;; Defined at:
  2009 ;;		line 472 in file "main.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;Total ram usage:        0 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:   10
  2030 ;; This function calls:
  2031 ;;		_lcdInst
  2032 ;;		_printf
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text2
  2039  002C4E                     __ptext2:
  2040                           	opt stack 0
  2041  002C4E                     _operationend:
  2042                           	opt stack 20
  2043                           
  2044                           ;main.c: 473: lcdInst(0b10000000);
  2045                           
  2046                           ;incstack = 0
  2047  002C4E  0E80               	movlw	128
  2048  002C50  EC4E  F016         	call	_lcdInst
  2049                           
  2050                           ;main.c: 474: printf("Operation Done!");
  2051  002C54  0EBD               	movlw	low STR_23
  2052  002C56  0100               	movlb	0	; () banked
  2053  002C58  6FE0               	movwf	printf@f& (0+255),b
  2054  002C5A  0EFF               	movlw	high STR_23
  2055  002C5C  0100               	movlb	0	; () banked
  2056  002C5E  6FE1               	movwf	(printf@f+1)& (0+255),b
  2057  002C60  EC6F  F003         	call	_printf	;wreg free
  2058  002C64  0012               	return	
  2059  002C66                     __end_of_operationend:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           intcon	equ	0xFF2
  2066                           intcon2	equ	0xFF1
  2067                           intcon3	equ	0xFF0
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _operation *****************
  2073 ;; Defined at:
  2074 ;;		line 447 in file "main.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;Total ram usage:        2 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:   10
  2095 ;; This function calls:
  2096 ;;		_lcdInst
  2097 ;;		_printf
  2098 ;;		_read_colorsensor
  2099 ;; This function is called by:
  2100 ;;		_main
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text3
  2105  001F4A                     __ptext3:
  2106                           	opt stack 0
  2107  001F4A                     _operation:
  2108                           	opt stack 20
  2109                           
  2110                           ;main.c: 448: switch(operation_disp){
  2111                           
  2112                           ;incstack = 0
  2113  001F4A  D031               	goto	l5027
  2114  001F4C                     l5007:
  2115                           
  2116                           ;main.c: 450: lcdInst(0b10000000);
  2117  001F4C  0E80               	movlw	128
  2118  001F4E  EC4E  F016         	call	_lcdInst
  2119                           
  2120                           ;main.c: 451: printf("Running~              ");
  2121  001F52  0E7B               	movlw	low STR_19
  2122  001F54  0100               	movlb	0	; () banked
  2123  001F56  6FE0               	movwf	printf@f& (0+255),b
  2124  001F58  0EFE               	movlw	high STR_19
  2125  001F5A  0100               	movlb	0	; () banked
  2126  001F5C  6FE1               	movwf	(printf@f+1)& (0+255),b
  2127  001F5E  EC6F  F003         	call	_printf	;wreg free
  2128                           
  2129                           ;main.c: 452: operation_disp = 1;
  2130  001F62  0E00               	movlw	0
  2131  001F64  0100               	movlb	0	; () banked
  2132  001F66  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2133  001F68  0E01               	movlw	1
  2134  001F6A  D01F               	goto	L2
  2135  001F6C                     l5013:
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;main.c: 455: lcdInst(0b10000000);
  2139  001F6C  0E80               	movlw	128
  2140  001F6E  EC4E  F016         	call	_lcdInst
  2141                           
  2142                           ;main.c: 456: printf("Running~~              ");
  2143  001F72  0E63               	movlw	low STR_20
  2144  001F74  0100               	movlb	0	; () banked
  2145  001F76  6FE0               	movwf	printf@f& (0+255),b
  2146  001F78  0EFE               	movlw	high STR_20
  2147  001F7A  0100               	movlb	0	; () banked
  2148  001F7C  6FE1               	movwf	(printf@f+1)& (0+255),b
  2149  001F7E  EC6F  F003         	call	_printf	;wreg free
  2150                           
  2151                           ;main.c: 457: operation_disp = 2;
  2152  001F82  0E00               	movlw	0
  2153  001F84  0100               	movlb	0	; () banked
  2154  001F86  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2155  001F88  0E02               	movlw	2
  2156  001F8A  D00F               	goto	L2
  2157  001F8C                     l5019:
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;main.c: 460: lcdInst(0b10000000);
  2161  001F8C  0E80               	movlw	128
  2162  001F8E  EC4E  F016         	call	_lcdInst
  2163                           
  2164                           ;main.c: 461: printf("Running~~~              ");
  2165  001F92  0E4A               	movlw	low STR_21
  2166  001F94  0100               	movlb	0	; () banked
  2167  001F96  6FE0               	movwf	printf@f& (0+255),b
  2168  001F98  0EFE               	movlw	high STR_21
  2169  001F9A  0100               	movlb	0	; () banked
  2170  001F9C  6FE1               	movwf	(printf@f+1)& (0+255),b
  2171  001F9E  EC6F  F003         	call	_printf	;wreg free
  2172                           
  2173                           ;main.c: 462: operation_disp = 0;
  2174  001FA2  0E00               	movlw	0
  2175  001FA4  0100               	movlb	0	; () banked
  2176  001FA6  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2177  001FA8  0E00               	movlw	0
  2178  001FAA                     L2:
  2179  001FAA  6FB5               	movwf	_operation_disp& (0+255),b
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;main.c: 464: }
  2183                           
  2184                           ;main.c: 463: break;
  2185  001FAC  D014               	goto	l5029
  2186  001FAE                     l5027:
  2187  001FAE  C0B5  F0EC         	movff	_operation_disp,??_operation
  2188  001FB2  C0B6  F0ED         	movff	_operation_disp+1,??_operation+1
  2189                           
  2190                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2191                           ; Switch size 1, requested type "space"
  2192                           ; Number of cases is 1, Range of values is 0 to 0
  2193                           ; switch strategies available:
  2194                           ; Name         Instructions Cycles
  2195                           ; simple_byte            4     3 (average)
  2196                           ;	Chosen strategy is simple_byte
  2197  001FB6  0100               	movlb	0	; () banked
  2198  001FB8  51ED               	movf	(??_operation+1)& (0+255),w,b
  2199  001FBA  0A00               	xorlw	0	; case 0
  2200  001FBC  A4D8               	btfss	status,2,c
  2201  001FBE  D00B               	goto	l5029
  2202                           
  2203                           ; BSR set to: 0
  2204                           ; Switch size 1, requested type "space"
  2205                           ; Number of cases is 3, Range of values is 0 to 2
  2206                           ; switch strategies available:
  2207                           ; Name         Instructions Cycles
  2208                           ; simple_byte           10     6 (average)
  2209                           ;	Chosen strategy is simple_byte
  2210  001FC0  0100               	movlb	0	; () banked
  2211  001FC2  51EC               	movf	??_operation& (0+255),w,b
  2212  001FC4  0A00               	xorlw	0	; case 0
  2213  001FC6  B4D8               	btfsc	status,2,c
  2214  001FC8  D7C1               	goto	l5007
  2215  001FCA  0A01               	xorlw	1	; case 1
  2216  001FCC  B4D8               	btfsc	status,2,c
  2217  001FCE  D7CE               	goto	l5013
  2218  001FD0  0A03               	xorlw	3	; case 2
  2219  001FD2  B4D8               	btfsc	status,2,c
  2220  001FD4  D7DB               	goto	l5019
  2221  001FD6                     l5029:
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;main.c: 466: lcdInst(0b11000000);
  2225  001FD6  0EC0               	movlw	192
  2226  001FD8  EC4E  F016         	call	_lcdInst
  2227                           
  2228                           ;main.c: 467: read_colorsensor();
  2229  001FDC  EC1E  F00A         	call	_read_colorsensor	;wreg free
  2230                           
  2231                           ;main.c: 468: printf("R%d G%d B%d                ", color[1], color[2], color[3]);
  2232  001FE0  0E2E               	movlw	low STR_22
  2233  001FE2  0100               	movlb	0	; () banked
  2234  001FE4  6FE0               	movwf	printf@f& (0+255),b
  2235  001FE6  0EFE               	movlw	high STR_22
  2236  001FE8  0100               	movlb	0	; () banked
  2237  001FEA  6FE1               	movwf	(printf@f+1)& (0+255),b
  2238  001FEC  C098  F0E2         	movff	_color+2,?_printf+2
  2239  001FF0  C099  F0E3         	movff	_color+3,?_printf+3
  2240  001FF4  C09A  F0E4         	movff	_color+4,?_printf+4
  2241  001FF8  C09B  F0E5         	movff	_color+5,?_printf+5
  2242  001FFC  C09C  F0E6         	movff	_color+6,?_printf+6
  2243  002000  C09D  F0E7         	movff	_color+7,?_printf+7
  2244  002004  EC6F  F003         	call	_printf	;wreg free
  2245  002008  0012               	return	
  2246  00200A                     __end_of_operation:
  2247                           	opt stack 0
  2248                           tblptru	equ	0xFF8
  2249                           tblptrh	equ	0xFF7
  2250                           tblptrl	equ	0xFF6
  2251                           tablat	equ	0xFF5
  2252                           intcon	equ	0xFF2
  2253                           intcon2	equ	0xFF1
  2254                           intcon3	equ	0xFF0
  2255                           postinc0	equ	0xFEE
  2256                           wreg	equ	0xFE8
  2257                           status	equ	0xFD8
  2258                           
  2259 ;; *************** function _read_colorsensor *****************
  2260 ;; Defined at:
  2261 ;;		line 527 in file "main.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  i               2   27[BANK0 ] int 
  2266 ;;  color_comb      2   25[BANK0 ] int 
  2267 ;;  color_high      2   23[BANK0 ] int 
  2268 ;;  color_low       2   21[BANK0 ] int 
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  1    wreg      void 
  2271 ;; Registers used:
  2272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2279 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2280 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2281 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2282 ;;Total ram usage:       10 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    9
  2285 ;; This function calls:
  2286 ;;		_I2C_Master_Read
  2287 ;;		_I2C_Master_Start
  2288 ;;		_I2C_Master_Stop
  2289 ;;		_I2C_Master_Write
  2290 ;; This function is called by:
  2291 ;;		_operation
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text4
  2296  00143C                     __ptext4:
  2297                           	opt stack 0
  2298  00143C                     _read_colorsensor:
  2299                           	opt stack 20
  2300                           
  2301                           ;main.c: 532: int color_low;
  2302                           ;main.c: 533: int color_high;
  2303                           ;main.c: 534: int color_comb;
  2304                           ;main.c: 535: int i;
  2305                           ;main.c: 538: I2C_Master_Start();
  2306                           
  2307                           ;incstack = 0
  2308  00143C  EC70  F016         	call	_I2C_Master_Start	;wreg free
  2309                           
  2310                           ;main.c: 539: I2C_Master_Write(0b01010010);
  2311  001440  0E00               	movlw	0
  2312  001442  0100               	movlb	0	; () banked
  2313  001444  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2314  001446  0E52               	movlw	82
  2315  001448  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2316  00144A  EC62  F016         	call	_I2C_Master_Write	;wreg free
  2317                           
  2318                           ;main.c: 540: I2C_Master_Write(0b10110100);
  2319  00144E  0E00               	movlw	0
  2320  001450  0100               	movlb	0	; () banked
  2321  001452  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2322  001454  0EB4               	movlw	180
  2323  001456  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2324  001458  EC62  F016         	call	_I2C_Master_Write	;wreg free
  2325                           
  2326                           ;main.c: 541: I2C_Master_Start();
  2327  00145C  EC70  F016         	call	_I2C_Master_Start	;wreg free
  2328                           
  2329                           ;main.c: 542: I2C_Master_Write(0b01010011);
  2330  001460  0E00               	movlw	0
  2331  001462  0100               	movlb	0	; () banked
  2332  001464  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2333  001466  0E53               	movlw	83
  2334  001468  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2335  00146A  EC62  F016         	call	_I2C_Master_Write	;wreg free
  2336                           
  2337                           ;main.c: 543: for(i=0; i<3; i++){
  2338  00146E  0E00               	movlw	0
  2339  001470  0100               	movlb	0	; () banked
  2340  001472  6FE0               	movwf	(read_colorsensor@i+1)& (0+255),b
  2341  001474  0E00               	movlw	0
  2342  001476  6FDF               	movwf	read_colorsensor@i& (0+255),b
  2343  001478                     l3593:
  2344                           
  2345                           ; BSR set to: 0
  2346  001478  0100               	movlb	0	; () banked
  2347  00147A  BFE0               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2348  00147C  D008               	goto	l3597
  2349  00147E  0100               	movlb	0	; () banked
  2350  001480  51E0               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2351  001482  E13E               	bnz	l3607
  2352  001484  0E03               	movlw	3
  2353  001486  0100               	movlb	0	; () banked
  2354  001488  5DDF               	subwf	read_colorsensor@i& (0+255),w,b
  2355  00148A  B0D8               	btfsc	status,0,c
  2356  00148C  D039               	goto	l3607
  2357  00148E                     l3597:
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;main.c: 544: color_low = I2C_Master_Read(1);
  2361  00148E  0E01               	movlw	1
  2362  001490  ECA3  F015         	call	_I2C_Master_Read
  2363  001494  0100               	movlb	0	; () banked
  2364  001496  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2365  001498  0100               	movlb	0	; () banked
  2366  00149A  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2367  00149C  0100               	movlb	0	; () banked
  2368  00149E  6FD9               	movwf	read_colorsensor@color_low& (0+255),b
  2369  0014A0  6BDA               	clrf	(read_colorsensor@color_low+1)& (0+255),b
  2370                           
  2371                           ;main.c: 545: color_high = I2C_Master_Read(1);
  2372  0014A2  0E01               	movlw	1
  2373  0014A4  ECA3  F015         	call	_I2C_Master_Read
  2374  0014A8  0100               	movlb	0	; () banked
  2375  0014AA  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2376  0014AC  0100               	movlb	0	; () banked
  2377  0014AE  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2378  0014B0  0100               	movlb	0	; () banked
  2379  0014B2  6FDB               	movwf	read_colorsensor@color_high& (0+255),b
  2380  0014B4  6BDC               	clrf	(read_colorsensor@color_high+1)& (0+255),b
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;main.c: 546: color_comb = (color_high << 8)|(color_low & 0xFF);
  2384  0014B6  0100               	movlb	0	; () banked
  2385  0014B8  51D9               	movf	read_colorsensor@color_low& (0+255),w,b
  2386  0014BA  C0DB  F0D7         	movff	read_colorsensor@color_high,??_read_colorsensor
  2387  0014BE  C0DC  F0D8         	movff	read_colorsensor@color_high+1,??_read_colorsensor+1
  2388  0014C2  C0D7  F0D8         	movff	??_read_colorsensor,??_read_colorsensor+1
  2389  0014C6  0100               	movlb	0	; () banked
  2390  0014C8  6BD7               	clrf	??_read_colorsensor& (0+255),b
  2391  0014CA  0100               	movlb	0	; () banked
  2392  0014CC  11D7               	iorwf	??_read_colorsensor& (0+255),w,b
  2393  0014CE  0100               	movlb	0	; () banked
  2394  0014D0  6FDD               	movwf	read_colorsensor@color_comb& (0+255),b
  2395  0014D2  0100               	movlb	0	; () banked
  2396  0014D4  51D8               	movf	(??_read_colorsensor+1)& (0+255),w,b
  2397  0014D6  0100               	movlb	0	; () banked
  2398  0014D8  6FDE               	movwf	(read_colorsensor@color_comb+1)& (0+255),b
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;main.c: 547: color[i] = color_comb;
  2402  0014DA  90D8               	bcf	status,0,c
  2403  0014DC  0100               	movlb	0	; () banked
  2404  0014DE  35DF               	rlcf	read_colorsensor@i& (0+255),w,b
  2405  0014E0  6ED9               	movwf	fsr2l,c
  2406  0014E2  0100               	movlb	0	; () banked
  2407  0014E4  35E0               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2408  0014E6  6EDA               	movwf	fsr2h,c
  2409  0014E8  0E96               	movlw	low _color
  2410  0014EA  26D9               	addwf	fsr2l,f,c
  2411  0014EC  0E00               	movlw	high _color
  2412  0014EE  22DA               	addwfc	fsr2h,f,c
  2413  0014F0  C0DD  FFDE         	movff	read_colorsensor@color_comb,postinc2
  2414  0014F4  C0DE  FFDD         	movff	read_colorsensor@color_comb+1,postdec2
  2415                           
  2416                           ; BSR set to: 0
  2417  0014F8  0100               	movlb	0	; () banked
  2418  0014FA  4BDF               	infsnz	read_colorsensor@i& (0+255),f,b
  2419  0014FC  2BE0               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2420  0014FE  D7BC               	goto	l3593
  2421  001500                     l3607:
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;main.c: 548: }
  2425                           ;main.c: 549: color_low = I2C_Master_Read(1);
  2426  001500  0E01               	movlw	1
  2427  001502  ECA3  F015         	call	_I2C_Master_Read
  2428  001506  0100               	movlb	0	; () banked
  2429  001508  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2430  00150A  0100               	movlb	0	; () banked
  2431  00150C  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2432  00150E  0100               	movlb	0	; () banked
  2433  001510  6FD9               	movwf	read_colorsensor@color_low& (0+255),b
  2434  001512  6BDA               	clrf	(read_colorsensor@color_low+1)& (0+255),b
  2435                           
  2436                           ;main.c: 550: color_high = I2C_Master_Read(0);
  2437  001514  0E00               	movlw	0
  2438  001516  ECA3  F015         	call	_I2C_Master_Read
  2439  00151A  0100               	movlb	0	; () banked
  2440  00151C  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2441  00151E  0100               	movlb	0	; () banked
  2442  001520  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2443  001522  0100               	movlb	0	; () banked
  2444  001524  6FDB               	movwf	read_colorsensor@color_high& (0+255),b
  2445  001526  6BDC               	clrf	(read_colorsensor@color_high+1)& (0+255),b
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;main.c: 551: color_comb = (color_high << 8)|(color_low & 0xFF);
  2449  001528  0100               	movlb	0	; () banked
  2450  00152A  51D9               	movf	read_colorsensor@color_low& (0+255),w,b
  2451  00152C  C0DB  F0D7         	movff	read_colorsensor@color_high,??_read_colorsensor
  2452  001530  C0DC  F0D8         	movff	read_colorsensor@color_high+1,??_read_colorsensor+1
  2453  001534  C0D7  F0D8         	movff	??_read_colorsensor,??_read_colorsensor+1
  2454  001538  0100               	movlb	0	; () banked
  2455  00153A  6BD7               	clrf	??_read_colorsensor& (0+255),b
  2456  00153C  0100               	movlb	0	; () banked
  2457  00153E  11D7               	iorwf	??_read_colorsensor& (0+255),w,b
  2458  001540  0100               	movlb	0	; () banked
  2459  001542  6FDD               	movwf	read_colorsensor@color_comb& (0+255),b
  2460  001544  0100               	movlb	0	; () banked
  2461  001546  51D8               	movf	(??_read_colorsensor+1)& (0+255),w,b
  2462  001548  0100               	movlb	0	; () banked
  2463  00154A  6FDE               	movwf	(read_colorsensor@color_comb+1)& (0+255),b
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;main.c: 552: color[3] = color_comb;
  2467  00154C  C0DD  F09C         	movff	read_colorsensor@color_comb,_color+6
  2468  001550  C0DE  F09D         	movff	read_colorsensor@color_comb+1,_color+7
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;main.c: 553: I2C_Master_Stop();
  2472  001554  EC6C  F016         	call	_I2C_Master_Stop	;wreg free
  2473  001558  0012               	return	
  2474  00155A                     __end_of_read_colorsensor:
  2475                           	opt stack 0
  2476                           tblptru	equ	0xFF8
  2477                           tblptrh	equ	0xFF7
  2478                           tblptrl	equ	0xFF6
  2479                           tablat	equ	0xFF5
  2480                           intcon	equ	0xFF2
  2481                           intcon2	equ	0xFF1
  2482                           intcon3	equ	0xFF0
  2483                           postinc0	equ	0xFEE
  2484                           wreg	equ	0xFE8
  2485                           postinc2	equ	0xFDE
  2486                           postdec2	equ	0xFDD
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function _initLCD *****************
  2492 ;; Defined at:
  2493 ;;		line 14 in file "lcd.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;		None
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;		None
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      void 
  2500 ;; Registers used:
  2501 ;;		wreg, status,2, status,0, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2510 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2511 ;;Total ram usage:        1 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    9
  2514 ;; This function calls:
  2515 ;;		_lcdInst
  2516 ;; This function is called by:
  2517 ;;		_main
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           	psect	text5
  2522  0028DA                     __ptext5:
  2523                           	opt stack 0
  2524  0028DA                     _initLCD:
  2525                           	opt stack 21
  2526                           
  2527                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2528                           
  2529                           ;incstack = 0
  2530  0028DA  0E31               	movlw	49
  2531  0028DC  0100               	movlb	0	; () banked
  2532  0028DE  6FD7               	movwf	??_initLCD& (0+255),b
  2533  0028E0  0EB2               	movlw	178
  2534  0028E2                     u4767:
  2535  0028E2  2EE8               	decfsz	wreg,f,c
  2536  0028E4  D7FE               	bra	u4767
  2537  0028E6  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2538  0028E8  D7FC               	bra	u4767
  2539  0028EA  F000               	nop	
  2540                           
  2541                           ;lcd.c: 16: lcdInst(0b00110011);
  2542  0028EC  0E33               	movlw	51
  2543  0028EE  EC4E  F016         	call	_lcdInst
  2544                           
  2545                           ;lcd.c: 17: lcdInst(0b00110011);
  2546  0028F2  0E33               	movlw	51
  2547  0028F4  EC4E  F016         	call	_lcdInst
  2548                           
  2549                           ;lcd.c: 18: lcdInst(0b00110010);
  2550  0028F8  0E32               	movlw	50
  2551  0028FA  EC4E  F016         	call	_lcdInst
  2552                           
  2553                           ;lcd.c: 19: lcdInst(0b00101000);
  2554  0028FE  0E28               	movlw	40
  2555  002900  EC4E  F016         	call	_lcdInst
  2556                           
  2557                           ;lcd.c: 20: lcdInst(0b00001111);
  2558  002904  0E0F               	movlw	15
  2559  002906  EC4E  F016         	call	_lcdInst
  2560                           
  2561                           ;lcd.c: 21: lcdInst(0b00000110);
  2562  00290A  0E06               	movlw	6
  2563  00290C  EC4E  F016         	call	_lcdInst
  2564                           
  2565                           ;lcd.c: 22: lcdInst(0b00000001);
  2566  002910  0E01               	movlw	1
  2567  002912  EC4E  F016         	call	_lcdInst
  2568                           
  2569                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2570  002916  0E31               	movlw	49
  2571  002918  0100               	movlb	0	; () banked
  2572  00291A  6FD7               	movwf	??_initLCD& (0+255),b
  2573  00291C  0EB2               	movlw	178
  2574  00291E                     u4777:
  2575  00291E  2EE8               	decfsz	wreg,f,c
  2576  002920  D7FE               	bra	u4777
  2577  002922  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2578  002924  D7FC               	bra	u4777
  2579  002926  F000               	nop	
  2580  002928  0012               	return		;funcret
  2581  00292A                     __end_of_initLCD:
  2582                           	opt stack 0
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           intcon	equ	0xFF2
  2588                           intcon2	equ	0xFF1
  2589                           intcon3	equ	0xFF0
  2590                           postinc0	equ	0xFEE
  2591                           wreg	equ	0xFE8
  2592                           postinc2	equ	0xFDE
  2593                           postdec2	equ	0xFDD
  2594                           fsr2h	equ	0xFDA
  2595                           fsr2l	equ	0xFD9
  2596                           status	equ	0xFD8
  2597                           
  2598 ;; *************** function _emergencystop *****************
  2599 ;; Defined at:
  2600 ;;		line 478 in file "main.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;		None
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;Total ram usage:        0 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:   10
  2621 ;; This function calls:
  2622 ;;		_lcdInst
  2623 ;;		_printf
  2624 ;; This function is called by:
  2625 ;;		_main
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text6
  2630  002C0E                     __ptext6:
  2631                           	opt stack 0
  2632  002C0E                     _emergencystop:
  2633                           	opt stack 20
  2634                           
  2635                           ;main.c: 479: (INTCONbits.GIE = 0);
  2636                           
  2637                           ;incstack = 0
  2638  002C0E  9EF2               	bcf	intcon,7,c	;volatile
  2639                           
  2640                           ;main.c: 480: PORTAbits.RA2 = 0;
  2641  002C10  9480               	bcf	3968,2,c	;volatile
  2642                           
  2643                           ;main.c: 481: lcdInst(0b00000001);
  2644  002C12  0E01               	movlw	1
  2645  002C14  EC4E  F016         	call	_lcdInst
  2646                           
  2647                           ;main.c: 482: lcdInst(0b10000000);
  2648  002C18  0E80               	movlw	128
  2649  002C1A  EC4E  F016         	call	_lcdInst
  2650                           
  2651                           ;main.c: 483: printf("EMERGENCY STOP");
  2652  002C1E  0ECD               	movlw	low STR_24
  2653  002C20  0100               	movlb	0	; () banked
  2654  002C22  6FE0               	movwf	printf@f& (0+255),b
  2655  002C24  0EFF               	movlw	high STR_24
  2656  002C26  0100               	movlb	0	; () banked
  2657  002C28  6FE1               	movwf	(printf@f+1)& (0+255),b
  2658  002C2A  EC6F  F003         	call	_printf	;wreg free
  2659  002C2E                     l371:
  2660  002C2E  D7FF               	goto	l371
  2661  002C30                     __end_of_emergencystop:
  2662                           	opt stack 0
  2663                           tblptru	equ	0xFF8
  2664                           tblptrh	equ	0xFF7
  2665                           tblptrl	equ	0xFF6
  2666                           tablat	equ	0xFF5
  2667                           intcon	equ	0xFF2
  2668                           intcon2	equ	0xFF1
  2669                           intcon3	equ	0xFF0
  2670                           postinc0	equ	0xFEE
  2671                           wreg	equ	0xFE8
  2672                           postinc2	equ	0xFDE
  2673                           postdec2	equ	0xFDD
  2674                           fsr2h	equ	0xFDA
  2675                           fsr2l	equ	0xFD9
  2676                           status	equ	0xFD8
  2677                           
  2678 ;; *************** function _date_time *****************
  2679 ;; Defined at:
  2680 ;;		line 354 in file "main.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;		None
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  i               1   40[BANK0 ] unsigned char 
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2695 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;Total ram usage:        1 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:   10
  2701 ;; This function calls:
  2702 ;;		_I2C_Master_Read
  2703 ;;		_I2C_Master_Start
  2704 ;;		_I2C_Master_Stop
  2705 ;;		_I2C_Master_Write
  2706 ;;		_lcdInst
  2707 ;;		_printf
  2708 ;; This function is called by:
  2709 ;;		_main
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           	psect	text7
  2714  001CE0                     __ptext7:
  2715                           	opt stack 0
  2716  001CE0                     _date_time:
  2717                           	opt stack 20
  2718                           
  2719                           ;main.c: 356: I2C_Master_Start();
  2720                           
  2721                           ;incstack = 0
  2722  001CE0  EC70  F016         	call	_I2C_Master_Start	;wreg free
  2723                           
  2724                           ;main.c: 357: I2C_Master_Write(0b11010000);
  2725  001CE4  0E00               	movlw	0
  2726  001CE6  0100               	movlb	0	; () banked
  2727  001CE8  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2728  001CEA  0ED0               	movlw	208
  2729  001CEC  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2730  001CEE  EC62  F016         	call	_I2C_Master_Write	;wreg free
  2731                           
  2732                           ;main.c: 358: I2C_Master_Write(0x00);
  2733  001CF2  0E00               	movlw	0
  2734  001CF4  0100               	movlb	0	; () banked
  2735  001CF6  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2736  001CF8  0E00               	movlw	0
  2737  001CFA  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2738  001CFC  EC62  F016         	call	_I2C_Master_Write	;wreg free
  2739                           
  2740                           ;main.c: 359: I2C_Master_Stop();
  2741  001D00  EC6C  F016         	call	_I2C_Master_Stop	;wreg free
  2742                           
  2743                           ;main.c: 362: I2C_Master_Start();
  2744  001D04  EC70  F016         	call	_I2C_Master_Start	;wreg free
  2745                           
  2746                           ;main.c: 363: I2C_Master_Write(0b11010001);
  2747  001D08  0E00               	movlw	0
  2748  001D0A  0100               	movlb	0	; () banked
  2749  001D0C  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2750  001D0E  0ED1               	movlw	209
  2751  001D10  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2752  001D12  EC62  F016         	call	_I2C_Master_Write	;wreg free
  2753                           
  2754                           ;main.c: 364: for(unsigned char i=0;i<0x06;i++){
  2755  001D16  0E00               	movlw	0
  2756  001D18  0100               	movlb	0	; () banked
  2757  001D1A  6FEC               	movwf	date_time@i& (0+255),b
  2758  001D1C                     l5051:
  2759                           
  2760                           ; BSR set to: 0
  2761  001D1C  0E05               	movlw	5
  2762  001D1E  0100               	movlb	0	; () banked
  2763  001D20  65EC               	cpfsgt	date_time@i& (0+255),b
  2764  001D22  D001               	goto	l5055
  2765  001D24  D010               	goto	l5061
  2766  001D26                     l5055:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;main.c: 365: time[i] = I2C_Master_Read(1);
  2770  001D26  0100               	movlb	0	; () banked
  2771  001D28  51EC               	movf	date_time@i& (0+255),w,b
  2772  001D2A  0D01               	mullw	1
  2773  001D2C  0E9E               	movlw	low _time
  2774  001D2E  24F3               	addwf	prodl,w,c
  2775  001D30  6ED9               	movwf	fsr2l,c
  2776  001D32  0E00               	movlw	high _time
  2777  001D34  20F4               	addwfc	prodh,w,c
  2778  001D36  6EDA               	movwf	fsr2h,c
  2779  001D38  0E01               	movlw	1
  2780  001D3A  ECA3  F015         	call	_I2C_Master_Read
  2781  001D3E  6EDF               	movwf	indf2,c
  2782  001D40  0100               	movlb	0	; () banked
  2783  001D42  2BEC               	incf	date_time@i& (0+255),f,b
  2784  001D44  D7EB               	goto	l5051
  2785  001D46                     l5061:
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;main.c: 366: }
  2789                           ;main.c: 367: time[6] = I2C_Master_Read(0);
  2790  001D46  0E00               	movlw	0
  2791  001D48  ECA3  F015         	call	_I2C_Master_Read
  2792  001D4C  0100               	movlb	0	; () banked
  2793  001D4E  6FA4               	movwf	(_time+6)& (0+255),b
  2794                           
  2795                           ;main.c: 368: I2C_Master_Stop();
  2796  001D50  EC6C  F016         	call	_I2C_Master_Stop	;wreg free
  2797                           
  2798                           ;main.c: 371: lcdInst(0b10000000);
  2799  001D54  0E80               	movlw	128
  2800  001D56  EC4E  F016         	call	_lcdInst
  2801                           
  2802                           ;main.c: 372: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2803  001D5A  0EA9               	movlw	low STR_4
  2804  001D5C  0100               	movlb	0	; () banked
  2805  001D5E  6FE0               	movwf	printf@f& (0+255),b
  2806  001D60  0EFE               	movlw	high STR_4
  2807  001D62  0100               	movlb	0	; () banked
  2808  001D64  6FE1               	movwf	(printf@f+1)& (0+255),b
  2809  001D66  C0A3  F0E2         	movff	_time+5,?_printf+2
  2810  001D6A  0100               	movlb	0	; () banked
  2811  001D6C  6BE3               	clrf	(?_printf+3)& (0+255),b
  2812  001D6E  C0A2  F0E4         	movff	_time+4,?_printf+4
  2813  001D72  0100               	movlb	0	; () banked
  2814  001D74  6BE5               	clrf	(?_printf+5)& (0+255),b
  2815  001D76  C0A4  F0E6         	movff	_time+6,?_printf+6
  2816  001D7A  0100               	movlb	0	; () banked
  2817  001D7C  6BE7               	clrf	(?_printf+7)& (0+255),b
  2818  001D7E  EC6F  F003         	call	_printf	;wreg free
  2819                           
  2820                           ;main.c: 373: lcdInst(0b11000000);
  2821  001D82  0EC0               	movlw	192
  2822  001D84  EC4E  F016         	call	_lcdInst
  2823                           
  2824                           ;main.c: 374: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2825  001D88  0EC0               	movlw	low STR_5
  2826  001D8A  0100               	movlb	0	; () banked
  2827  001D8C  6FE0               	movwf	printf@f& (0+255),b
  2828  001D8E  0EFE               	movlw	high STR_5
  2829  001D90  0100               	movlb	0	; () banked
  2830  001D92  6FE1               	movwf	(printf@f+1)& (0+255),b
  2831  001D94  C0A0  F0E2         	movff	_time+2,?_printf+2
  2832  001D98  0100               	movlb	0	; () banked
  2833  001D9A  6BE3               	clrf	(?_printf+3)& (0+255),b
  2834  001D9C  C09F  F0E4         	movff	_time+1,?_printf+4
  2835  001DA0  0100               	movlb	0	; () banked
  2836  001DA2  6BE5               	clrf	(?_printf+5)& (0+255),b
  2837  001DA4  C09E  F0E6         	movff	_time,?_printf+6
  2838  001DA8  0100               	movlb	0	; () banked
  2839  001DAA  6BE7               	clrf	(?_printf+7)& (0+255),b
  2840  001DAC  EC6F  F003         	call	_printf	;wreg free
  2841  001DB0  0012               	return	
  2842  001DB2                     __end_of_date_time:
  2843                           	opt stack 0
  2844                           tblptru	equ	0xFF8
  2845                           tblptrh	equ	0xFF7
  2846                           tblptrl	equ	0xFF6
  2847                           tablat	equ	0xFF5
  2848                           prodh	equ	0xFF4
  2849                           prodl	equ	0xFF3
  2850                           intcon	equ	0xFF2
  2851                           intcon2	equ	0xFF1
  2852                           intcon3	equ	0xFF0
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           indf2	equ	0xFDF
  2856                           postinc2	equ	0xFDE
  2857                           postdec2	equ	0xFDD
  2858                           fsr2h	equ	0xFDA
  2859                           fsr2l	equ	0xFD9
  2860                           status	equ	0xFD8
  2861                           
  2862 ;; *************** function _I2C_Master_Read *****************
  2863 ;; Defined at:
  2864 ;;		line 61 in file "I2C.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  a               1    wreg     unsigned char 
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;  a               1   17[BANK0 ] unsigned char 
  2869 ;;  temp            1   18[BANK0 ] unsigned char 
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      unsigned char 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0, cstack
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;Total ram usage:        2 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    8
  2886 ;; This function calls:
  2887 ;;		_I2C_Master_Wait
  2888 ;; This function is called by:
  2889 ;;		_date_time
  2890 ;;		_read_colorsensor
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text8
  2895  002B46                     __ptext8:
  2896                           	opt stack 0
  2897  002B46                     _I2C_Master_Read:
  2898                           	opt stack 20
  2899                           
  2900                           ;incstack = 0
  2901                           ;I2C_Master_Read@a stored from wreg
  2902  002B46  0100               	movlb	0	; () banked
  2903  002B48  6FD5               	movwf	I2C_Master_Read@a& (0+255),b
  2904                           
  2905                           ;I2C.c: 63: unsigned char temp;
  2906                           ;I2C.c: 64: I2C_Master_Wait();
  2907  002B4A  EC33  F016         	call	_I2C_Master_Wait	;wreg free
  2908                           
  2909                           ;I2C.c: 65: RCEN = 1;
  2910  002B4E  86C5               	bsf	4037,3,c	;volatile
  2911                           
  2912                           ;I2C.c: 66: I2C_Master_Wait();
  2913  002B50  EC33  F016         	call	_I2C_Master_Wait	;wreg free
  2914                           
  2915                           ;I2C.c: 67: temp = SSPBUF;
  2916  002B54  CFC9 F0D6          	movff	4041,I2C_Master_Read@temp	;volatile
  2917                           
  2918                           ;I2C.c: 68: I2C_Master_Wait();
  2919  002B58  EC33  F016         	call	_I2C_Master_Wait	;wreg free
  2920                           
  2921                           ;I2C.c: 69: ACKDT = (a)?0:1;
  2922  002B5C  0100               	movlb	0	; () banked
  2923  002B5E  51D5               	movf	I2C_Master_Read@a& (0+255),w,b
  2924  002B60  0100               	movlb	0	; () banked
  2925  002B62  A4D8               	btfss	status,2,c
  2926  002B64  D002               	goto	u2920
  2927  002B66  8AC5               	bsf	4037,5,c	;volatile
  2928  002B68  D001               	goto	l3421
  2929  002B6A                     u2920:
  2930  002B6A  9AC5               	bcf	4037,5,c	;volatile
  2931  002B6C                     l3421:
  2932                           
  2933                           ;I2C.c: 70: ACKEN = 1;
  2934  002B6C  88C5               	bsf	4037,4,c	;volatile
  2935                           
  2936                           ;I2C.c: 71: return temp;
  2937  002B6E  0100               	movlb	0	; () banked
  2938  002B70  51D6               	movf	I2C_Master_Read@temp& (0+255),w,b
  2939  002B72  0012               	return	
  2940  002B74                     __end_of_I2C_Master_Read:
  2941                           	opt stack 0
  2942                           tblptru	equ	0xFF8
  2943                           tblptrh	equ	0xFF7
  2944                           tblptrl	equ	0xFF6
  2945                           tablat	equ	0xFF5
  2946                           prodh	equ	0xFF4
  2947                           prodl	equ	0xFF3
  2948                           intcon	equ	0xFF2
  2949                           intcon2	equ	0xFF1
  2950                           intcon3	equ	0xFF0
  2951                           postinc0	equ	0xFEE
  2952                           wreg	equ	0xFE8
  2953                           indf2	equ	0xFDF
  2954                           postinc2	equ	0xFDE
  2955                           postdec2	equ	0xFDD
  2956                           fsr2h	equ	0xFDA
  2957                           fsr2l	equ	0xFD9
  2958                           status	equ	0xFD8
  2959                           
  2960 ;; *************** function _bottle_time *****************
  2961 ;; Defined at:
  2962 ;;		line 439 in file "main.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;		None
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;		None
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;Total ram usage:        0 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:   10
  2983 ;; This function calls:
  2984 ;;		_lcdInst
  2985 ;;		_printf
  2986 ;; This function is called by:
  2987 ;;		_main
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text9
  2992  002AA6                     __ptext9:
  2993                           	opt stack 0
  2994  002AA6                     _bottle_time:
  2995                           	opt stack 20
  2996                           
  2997                           ;main.c: 440: lcdInst(0b10000000);
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;incstack = 0
  3001  002AA6  0E80               	movlw	128
  3002  002AA8  EC4E  F016         	call	_lcdInst
  3003                           
  3004                           ;main.c: 441: printf("Total Operation       ");
  3005  002AAC  0E92               	movlw	low STR_17
  3006  002AAE  0100               	movlb	0	; () banked
  3007  002AB0  6FE0               	movwf	printf@f& (0+255),b
  3008  002AB2  0EFE               	movlw	high STR_17
  3009  002AB4  0100               	movlb	0	; () banked
  3010  002AB6  6FE1               	movwf	(printf@f+1)& (0+255),b
  3011  002AB8  EC6F  F003         	call	_printf	;wreg free
  3012                           
  3013                           ;main.c: 442: lcdInst(0b11000000);
  3014  002ABC  0EC0               	movlw	192
  3015  002ABE  EC4E  F016         	call	_lcdInst
  3016                           
  3017                           ;main.c: 443: printf("Time: %d s       ", operation_time);
  3018  002AC2  0ED7               	movlw	low STR_18
  3019  002AC4  0100               	movlb	0	; () banked
  3020  002AC6  6FE0               	movwf	printf@f& (0+255),b
  3021  002AC8  0EFE               	movlw	high STR_18
  3022  002ACA  0100               	movlb	0	; () banked
  3023  002ACC  6FE1               	movwf	(printf@f+1)& (0+255),b
  3024  002ACE  C0B7  F0E2         	movff	_operation_time,?_printf+2
  3025  002AD2  C0B8  F0E3         	movff	_operation_time+1,?_printf+3
  3026  002AD6  EC6F  F003         	call	_printf	;wreg free
  3027  002ADA  0012               	return	
  3028  002ADC                     __end_of_bottle_time:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           intcon	equ	0xFF2
  3037                           intcon2	equ	0xFF1
  3038                           intcon3	equ	0xFF0
  3039                           postinc0	equ	0xFEE
  3040                           wreg	equ	0xFE8
  3041                           indf2	equ	0xFDF
  3042                           postinc2	equ	0xFDE
  3043                           postdec2	equ	0xFDD
  3044                           fsr2h	equ	0xFDA
  3045                           fsr2l	equ	0xFD9
  3046                           status	equ	0xFD8
  3047                           
  3048 ;; *************** function _bottle_count *****************
  3049 ;; Defined at:
  3050 ;;		line 397 in file "main.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;		None
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      void 
  3057 ;; Registers used:
  3058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;Total ram usage:        0 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:   10
  3071 ;; This function calls:
  3072 ;;		___awmod
  3073 ;;		_lcdInst
  3074 ;;		_printf
  3075 ;; This function is called by:
  3076 ;;		_main
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text10
  3081  001132                     __ptext10:
  3082                           	opt stack 0
  3083  001132                     _bottle_count:
  3084                           	opt stack 20
  3085                           
  3086                           ;main.c: 398: switch(bottle_count_disp % 5){
  3087                           
  3088                           ;incstack = 0
  3089  001132  D0A7               	goto	l5107
  3090  001134                     l5071:
  3091                           
  3092                           ;main.c: 400: lcdInst(0b10000000);
  3093  001134  0E80               	movlw	128
  3094  001136  EC4E  F016         	call	_lcdInst
  3095                           
  3096                           ;main.c: 401: printf("Bottle Count    ");
  3097  00113A  0EAC               	movlw	low STR_6
  3098  00113C  0100               	movlb	0	; () banked
  3099  00113E  6FE0               	movwf	printf@f& (0+255),b
  3100  001140  0EFF               	movlw	high STR_6
  3101  001142  0100               	movlb	0	; () banked
  3102  001144  6FE1               	movwf	(printf@f+1)& (0+255),b
  3103  001146  EC6F  F003         	call	_printf	;wreg free
  3104                           
  3105                           ;main.c: 402: lcdInst(0b11000000);
  3106  00114A  0EC0               	movlw	192
  3107  00114C  EC4E  F016         	call	_lcdInst
  3108                           
  3109                           ;main.c: 403: printf("Total: %d       ", total_bottle_count);
  3110  001150  0E9B               	movlw	low STR_7
  3111  001152  0100               	movlb	0	; () banked
  3112  001154  6FE0               	movwf	printf@f& (0+255),b
  3113  001156  0EFF               	movlw	high STR_7
  3114  001158  0100               	movlb	0	; () banked
  3115  00115A  6FE1               	movwf	(printf@f+1)& (0+255),b
  3116  00115C  C0B9  F0E2         	movff	_total_bottle_count,?_printf+2
  3117  001160  C0BA  F0E3         	movff	_total_bottle_count+1,?_printf+3
  3118  001164  EC6F  F003         	call	_printf	;wreg free
  3119                           
  3120                           ;main.c: 404: break;
  3121  001168  0012               	return	
  3122  00116A                     l5077:
  3123                           
  3124                           ;main.c: 406: lcdInst(0b10000000);
  3125  00116A  0E80               	movlw	128
  3126  00116C  EC4E  F016         	call	_lcdInst
  3127                           
  3128                           ;main.c: 407: printf("YOP+CAP+LBL: %d  ", yopcaplbl_count);
  3129  001170  0EE9               	movlw	low STR_8
  3130  001172  0100               	movlb	0	; () banked
  3131  001174  6FE0               	movwf	printf@f& (0+255),b
  3132  001176  0EFE               	movlw	high STR_8
  3133  001178  0100               	movlb	0	; () banked
  3134  00117A  6FE1               	movwf	(printf@f+1)& (0+255),b
  3135  00117C  C0BF  F0E2         	movff	_yopcaplbl_count,?_printf+2
  3136  001180  C0C0  F0E3         	movff	_yopcaplbl_count+1,?_printf+3
  3137  001184  EC6F  F003         	call	_printf	;wreg free
  3138                           
  3139                           ;main.c: 408: lcdInst(0b11000000);
  3140  001188  0EC0               	movlw	192
  3141  00118A  EC4E  F016         	call	_lcdInst
  3142                           
  3143                           ;main.c: 409: printf("YOP+CAP-LBL: %d  ", yopcap_count);
  3144  00118E  0E0D               	movlw	low STR_9
  3145  001190  0100               	movlb	0	; () banked
  3146  001192  6FE0               	movwf	printf@f& (0+255),b
  3147  001194  0EFF               	movlw	high STR_9
  3148  001196  0100               	movlb	0	; () banked
  3149  001198  6FE1               	movwf	(printf@f+1)& (0+255),b
  3150  00119A  C0BD  F0E2         	movff	_yopcap_count,?_printf+2
  3151  00119E  C0BE  F0E3         	movff	_yopcap_count+1,?_printf+3
  3152  0011A2  EC6F  F003         	call	_printf	;wreg free
  3153                           
  3154                           ;main.c: 410: break;
  3155  0011A6  0012               	return	
  3156  0011A8                     l5083:
  3157                           
  3158                           ;main.c: 412: lcdInst(0b10000000);
  3159  0011A8  0E80               	movlw	128
  3160  0011AA  EC4E  F016         	call	_lcdInst
  3161                           
  3162                           ;main.c: 413: printf("YOP-CAP+LBL: %d  ", yoplbl_count);
  3163  0011AE  0EFB               	movlw	low STR_10
  3164  0011B0  0100               	movlb	0	; () banked
  3165  0011B2  6FE0               	movwf	printf@f& (0+255),b
  3166  0011B4  0EFE               	movlw	high STR_10
  3167  0011B6  0100               	movlb	0	; () banked
  3168  0011B8  6FE1               	movwf	(printf@f+1)& (0+255),b
  3169  0011BA  C0C1  F0E2         	movff	_yoplbl_count,?_printf+2
  3170  0011BE  C0C2  F0E3         	movff	_yoplbl_count+1,?_printf+3
  3171  0011C2  EC6F  F003         	call	_printf	;wreg free
  3172                           
  3173                           ;main.c: 414: lcdInst(0b11000000);
  3174  0011C6  0EC0               	movlw	192
  3175  0011C8  EC4E  F016         	call	_lcdInst
  3176                           
  3177                           ;main.c: 415: printf("YOP-CAP-LBL: %d  ", yop_count);
  3178  0011CC  0E1F               	movlw	low STR_11
  3179  0011CE  0100               	movlb	0	; () banked
  3180  0011D0  6FE0               	movwf	printf@f& (0+255),b
  3181  0011D2  0EFF               	movlw	high STR_11
  3182  0011D4  0100               	movlb	0	; () banked
  3183  0011D6  6FE1               	movwf	(printf@f+1)& (0+255),b
  3184  0011D8  C0BB  F0E2         	movff	_yop_count,?_printf+2
  3185  0011DC  C0BC  F0E3         	movff	_yop_count+1,?_printf+3
  3186  0011E0  EC6F  F003         	call	_printf	;wreg free
  3187                           
  3188                           ;main.c: 416: break;
  3189  0011E4  0012               	return	
  3190  0011E6                     l5089:
  3191                           
  3192                           ;main.c: 418: lcdInst(0b10000000);
  3193  0011E6  0E80               	movlw	128
  3194  0011E8  EC4E  F016         	call	_lcdInst
  3195                           
  3196                           ;main.c: 419: printf("ESKA+CAP+LBL: %d ", eskacaplbl_count);
  3197  0011EC  0E31               	movlw	low STR_12
  3198  0011EE  0100               	movlb	0	; () banked
  3199  0011F0  6FE0               	movwf	printf@f& (0+255),b
  3200  0011F2  0EFF               	movlw	high STR_12
  3201  0011F4  0100               	movlb	0	; () banked
  3202  0011F6  6FE1               	movwf	(printf@f+1)& (0+255),b
  3203  0011F8  C0AD  F0E2         	movff	_eskacaplbl_count,?_printf+2
  3204  0011FC  C0AE  F0E3         	movff	_eskacaplbl_count+1,?_printf+3
  3205  001200  EC6F  F003         	call	_printf	;wreg free
  3206                           
  3207                           ;main.c: 420: lcdInst(0b11000000);
  3208  001204  0EC0               	movlw	192
  3209  001206  EC4E  F016         	call	_lcdInst
  3210                           
  3211                           ;main.c: 421: printf("ESKA+CAP-LBL: %d ", eskacap_count);
  3212  00120A  0E55               	movlw	low STR_13
  3213  00120C  0100               	movlb	0	; () banked
  3214  00120E  6FE0               	movwf	printf@f& (0+255),b
  3215  001210  0EFF               	movlw	high STR_13
  3216  001212  0100               	movlb	0	; () banked
  3217  001214  6FE1               	movwf	(printf@f+1)& (0+255),b
  3218  001216  C0AB  F0E2         	movff	_eskacap_count,?_printf+2
  3219  00121A  C0AC  F0E3         	movff	_eskacap_count+1,?_printf+3
  3220  00121E  EC6F  F003         	call	_printf	;wreg free
  3221                           
  3222                           ;main.c: 422: break;
  3223  001222  0012               	return	
  3224  001224                     l5095:
  3225                           
  3226                           ;main.c: 424: lcdInst(0b10000000);
  3227  001224  0E80               	movlw	128
  3228  001226  EC4E  F016         	call	_lcdInst
  3229                           
  3230                           ;main.c: 425: printf("ESKA-CAP+LBL: %d ", eskalbl_count);
  3231  00122A  0E43               	movlw	low STR_14
  3232  00122C  0100               	movlb	0	; () banked
  3233  00122E  6FE0               	movwf	printf@f& (0+255),b
  3234  001230  0EFF               	movlw	high STR_14
  3235  001232  0100               	movlb	0	; () banked
  3236  001234  6FE1               	movwf	(printf@f+1)& (0+255),b
  3237  001236  C0AF  F0E2         	movff	_eskalbl_count,?_printf+2
  3238  00123A  C0B0  F0E3         	movff	_eskalbl_count+1,?_printf+3
  3239  00123E  EC6F  F003         	call	_printf	;wreg free
  3240                           
  3241                           ;main.c: 426: lcdInst(0b11000000);
  3242  001242  0EC0               	movlw	192
  3243  001244  EC4E  F016         	call	_lcdInst
  3244                           
  3245                           ;main.c: 427: printf("ESKA-CAP-LBL: %d ", eska_count);
  3246  001248  0E67               	movlw	low STR_15
  3247  00124A  0100               	movlb	0	; () banked
  3248  00124C  6FE0               	movwf	printf@f& (0+255),b
  3249  00124E  0EFF               	movlw	high STR_15
  3250  001250  0100               	movlb	0	; () banked
  3251  001252  6FE1               	movwf	(printf@f+1)& (0+255),b
  3252  001254  C0A9  F0E2         	movff	_eska_count,?_printf+2
  3253  001258  C0AA  F0E3         	movff	_eska_count+1,?_printf+3
  3254  00125C  EC6F  F003         	call	_printf	;wreg free
  3255                           
  3256                           ;main.c: 428: break;
  3257  001260  0012               	return	
  3258  001262                     l5101:
  3259                           
  3260                           ;main.c: 431: lcdInst(0b10000000);
  3261  001262  0E80               	movlw	128
  3262  001264  EC4E  F016         	call	_lcdInst
  3263                           
  3264                           ;main.c: 432: printf("ERROR: %d", bottle_count_disp);
  3265  001268  0EF4               	movlw	low STR_16
  3266  00126A  0100               	movlb	0	; () banked
  3267  00126C  6FE0               	movwf	printf@f& (0+255),b
  3268  00126E  0EFF               	movlw	high STR_16
  3269  001270  0100               	movlb	0	; () banked
  3270  001272  6FE1               	movwf	(printf@f+1)& (0+255),b
  3271  001274  C0EE  F0E2         	movff	_bottle_count_disp,?_printf+2
  3272  001278  C0EF  F0E3         	movff	_bottle_count_disp+1,?_printf+3
  3273  00127C  EC6F  F003         	call	_printf	;wreg free
  3274  001280  D7F0               	goto	l5101
  3275  001282                     l5107:
  3276  001282  C0EE  F0D4         	movff	_bottle_count_disp,___awmod@dividend
  3277  001286  C0EF  F0D5         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3278  00128A  0E00               	movlw	0
  3279  00128C  0100               	movlb	0	; () banked
  3280  00128E  6FD7               	movwf	(___awmod@divisor+1)& (0+255),b
  3281  001290  0E05               	movlw	5
  3282  001292  6FD6               	movwf	___awmod@divisor& (0+255),b
  3283  001294  EC6E  F011         	call	___awmod	;wreg free
  3284                           
  3285                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3286                           ; Switch size 1, requested type "space"
  3287                           ; Number of cases is 1, Range of values is 0 to 0
  3288                           ; switch strategies available:
  3289                           ; Name         Instructions Cycles
  3290                           ; simple_byte            4     3 (average)
  3291                           ;	Chosen strategy is simple_byte
  3292  001298  0100               	movlb	0	; () banked
  3293  00129A  51D5               	movf	(?___awmod+1)& (0+255),w,b
  3294  00129C  0A00               	xorlw	0	; case 0
  3295  00129E  A4D8               	btfss	status,2,c
  3296  0012A0  D7E0               	goto	l5101
  3297                           
  3298                           ; BSR set to: 0
  3299                           ; Switch size 1, requested type "space"
  3300                           ; Number of cases is 5, Range of values is 0 to 4
  3301                           ; switch strategies available:
  3302                           ; Name         Instructions Cycles
  3303                           ; simple_byte           16     9 (average)
  3304                           ;	Chosen strategy is simple_byte
  3305  0012A2  0100               	movlb	0	; () banked
  3306  0012A4  51D4               	movf	?___awmod& (0+255),w,b
  3307  0012A6  0A00               	xorlw	0	; case 0
  3308  0012A8  B4D8               	btfsc	status,2,c
  3309  0012AA  D744               	goto	l5071
  3310  0012AC  0A01               	xorlw	1	; case 1
  3311  0012AE  B4D8               	btfsc	status,2,c
  3312  0012B0  D75C               	goto	l5077
  3313  0012B2  0A03               	xorlw	3	; case 2
  3314  0012B4  B4D8               	btfsc	status,2,c
  3315  0012B6  D778               	goto	l5083
  3316  0012B8  0A01               	xorlw	1	; case 3
  3317  0012BA  B4D8               	btfsc	status,2,c
  3318  0012BC  D794               	goto	l5089
  3319  0012BE  0A07               	xorlw	7	; case 4
  3320  0012C0  B4D8               	btfsc	status,2,c
  3321  0012C2  D7B0               	goto	l5095
  3322  0012C4  D7CE               	goto	l5101
  3323  0012C6                     __end_of_bottle_count:
  3324                           	opt stack 0
  3325                           tblptru	equ	0xFF8
  3326                           tblptrh	equ	0xFF7
  3327                           tblptrl	equ	0xFF6
  3328                           tablat	equ	0xFF5
  3329                           prodh	equ	0xFF4
  3330                           prodl	equ	0xFF3
  3331                           intcon	equ	0xFF2
  3332                           intcon2	equ	0xFF1
  3333                           intcon3	equ	0xFF0
  3334                           postinc0	equ	0xFEE
  3335                           wreg	equ	0xFE8
  3336                           indf2	equ	0xFDF
  3337                           postinc2	equ	0xFDE
  3338                           postdec2	equ	0xFDD
  3339                           fsr2h	equ	0xFDA
  3340                           fsr2l	equ	0xFD9
  3341                           status	equ	0xFD8
  3342                           
  3343 ;; *************** function _printf *****************
  3344 ;; Defined at:
  3345 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3348 ;;		 -> STR_24(15), STR_23(16), STR_22(28), STR_21(25), 
  3349 ;;		 -> STR_20(24), STR_19(23), STR_18(18), STR_17(23), 
  3350 ;;		 -> STR_16(10), STR_15(18), STR_14(18), STR_13(18), 
  3351 ;;		 -> STR_12(18), STR_11(18), STR_10(18), STR_9(18), 
  3352 ;;		 -> STR_8(18), STR_7(17), STR_6(17), STR_5(23), 
  3353 ;;		 -> STR_4(23), STR_3(10), STR_2(17), STR_1(14), 
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;  idx             1    0[BANK1 ] unsigned char 
  3356 ;;  tmpval          4    0        struct .
  3357 ;;  cp              3    0        PTR const unsigned char 
  3358 ;;  width           2    7[BANK1 ] int 
  3359 ;;  val             2    4[BANK1 ] unsigned int 
  3360 ;;  ap              2    1[BANK1 ] PTR void [1]
  3361 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3362 ;;  len             2    0        unsigned int 
  3363 ;;  c               1    9[BANK1 ] char 
  3364 ;;  flag            1    6[BANK1 ] unsigned char 
  3365 ;;  prec            1    3[BANK1 ] char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  2   28[BANK0 ] int 
  3368 ;; Registers used:
  3369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3375 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Totals:         0      12      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;Total ram usage:       22 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    9
  3382 ;; This function calls:
  3383 ;;		___lwdiv
  3384 ;;		___lwmod
  3385 ;;		___wmul
  3386 ;;		_isdigit
  3387 ;;		_putch
  3388 ;; This function is called by:
  3389 ;;		_standby
  3390 ;;		_date_time
  3391 ;;		_bottle_count
  3392 ;;		_bottle_time
  3393 ;;		_operation
  3394 ;;		_operationend
  3395 ;;		_emergencystop
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text11
  3400  0006DE                     __ptext11:
  3401                           	opt stack 0
  3402  0006DE                     _printf:
  3403                           	opt stack 20
  3404                           
  3405                           ;doprnt.c: 466: va_list ap;
  3406                           ;doprnt.c: 499: signed char c;
  3407                           ;doprnt.c: 501: int width;
  3408                           ;doprnt.c: 506: signed char prec;
  3409                           ;doprnt.c: 508: unsigned char flag;
  3410                           ;doprnt.c: 523: union {
  3411                           ;doprnt.c: 524: unsigned long vd;
  3412                           ;doprnt.c: 525: double integ;
  3413                           ;doprnt.c: 526: } tmpval;
  3414                           ;doprnt.c: 528: unsigned int val;
  3415                           ;doprnt.c: 529: unsigned len;
  3416                           ;doprnt.c: 530: const char * cp;
  3417                           ;doprnt.c: 533: *ap = __va_start();
  3418                           
  3419                           ;incstack = 0
  3420  0006DE  0EE2               	movlw	low (?_printf+2)
  3421  0006E0  0101               	movlb	1	; () banked
  3422  0006E2  6F01               	movwf	printf@ap& (0+255),b
  3423  0006E4  0E00               	movlw	high (?_printf+2)
  3424  0006E6  0101               	movlb	1	; () banked
  3425  0006E8  6F02               	movwf	(printf@ap+1)& (0+255),b
  3426                           
  3427                           ;doprnt.c: 536: while(c = *f++) {
  3428  0006EA  D1C4               	goto	l4971
  3429  0006EC                     l4845:
  3430                           
  3431                           ; BSR set to: 1
  3432                           ;doprnt.c: 538: if(c != '%')
  3433  0006EC  0E25               	movlw	37
  3434  0006EE  0101               	movlb	1	; () banked
  3435  0006F0  1909               	xorwf	printf@c& (0+255),w,b
  3436  0006F2  B4D8               	btfsc	status,2,c
  3437  0006F4  D005               	goto	l4849
  3438                           
  3439                           ; BSR set to: 1
  3440                           ;doprnt.c: 540: {
  3441                           ;doprnt.c: 541: (putch(c) );
  3442  0006F6  0101               	movlb	1	; () banked
  3443  0006F8  5109               	movf	printf@c& (0+255),w,b
  3444  0006FA  EC46  F016         	call	_putch
  3445                           
  3446                           ;doprnt.c: 542: continue;
  3447  0006FE  D1BA               	goto	l4971
  3448  000700                     l4849:
  3449                           
  3450                           ;doprnt.c: 543: }
  3451                           ;doprnt.c: 546: width = 0;
  3452  000700  0E00               	movlw	0
  3453  000702  0101               	movlb	1	; () banked
  3454  000704  6F08               	movwf	(printf@width+1)& (0+255),b
  3455  000706  0E00               	movlw	0
  3456  000708  6F07               	movwf	printf@width& (0+255),b
  3457                           
  3458                           ;doprnt.c: 548: flag = 0;
  3459  00070A  0E00               	movlw	0
  3460  00070C  0101               	movlb	1	; () banked
  3461  00070E  6F06               	movwf	printf@flag& (0+255),b
  3462                           
  3463                           ; BSR set to: 1
  3464                           ;doprnt.c: 551: switch(*f) {
  3465                           
  3466                           ;doprnt.c: 550: for(;;) {
  3467  000710  D005               	goto	l4855
  3468  000712                     l4851:
  3469                           
  3470                           ;doprnt.c: 580: flag |= 0x04;
  3471  000712  0101               	movlb	1	; () banked
  3472  000714  8506               	bsf	printf@flag& (0+255),2,b
  3473                           
  3474                           ;doprnt.c: 581: f++;
  3475  000716  0100               	movlb	0	; () banked
  3476  000718  4BE0               	infsnz	printf@f& (0+255),f,b
  3477  00071A  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3478  00071C                     l4855:
  3479  00071C  C0E0  FFF6         	movff	printf@f,tblptrl
  3480  000720  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3481  000724                     	if	0	;tblptru may be non-zero
  3482  000724                     	endif
  3483  000724                     	if	0	;tblptru may be non-zero
  3484  000724                     	endif
  3485  000724  0008               	tblrd		*
  3486  000726  50F5               	movf	tablat,w,c
  3487                           
  3488                           ; Switch size 1, requested type "space"
  3489                           ; Number of cases is 1, Range of values is 48 to 48
  3490                           ; switch strategies available:
  3491                           ; Name         Instructions Cycles
  3492                           ; simple_byte            4     3 (average)
  3493                           ;	Chosen strategy is simple_byte
  3494  000728  0A30               	xorlw	48	; case 48
  3495  00072A  B4D8               	btfsc	status,2,c
  3496  00072C  D7F2               	goto	l4851
  3497                           
  3498                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3499                           
  3500                           ;doprnt.c: 586: }
  3501                           
  3502                           ;doprnt.c: 585: break;
  3503  00072E  C0E0  FFF6         	movff	printf@f,tblptrl
  3504  000732  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3505  000736                     	if	0	;tblptru may be non-zero
  3506  000736                     	endif
  3507  000736                     	if	0	;tblptru may be non-zero
  3508  000736                     	endif
  3509  000736  0008               	tblrd		*
  3510  000738  50F5               	movf	tablat,w,c
  3511  00073A  ECBA  F015         	call	_isdigit
  3512  00073E  A0D8               	btfss	status,0,c
  3513  000740  D044               	goto	l4873
  3514                           
  3515                           ;doprnt.c: 598: width = 0;
  3516  000742  0E00               	movlw	0
  3517  000744  0101               	movlb	1	; () banked
  3518  000746  6F08               	movwf	(printf@width+1)& (0+255),b
  3519  000748  0E00               	movlw	0
  3520  00074A  6F07               	movwf	printf@width& (0+255),b
  3521  00074C                     l4861:
  3522                           
  3523                           ;doprnt.c: 600: width *= 10;
  3524  00074C  C107  F0D4         	movff	printf@width,___wmul@multiplier
  3525  000750  C108  F0D5         	movff	printf@width+1,___wmul@multiplier+1
  3526  000754  0E00               	movlw	0
  3527  000756  0100               	movlb	0	; () banked
  3528  000758  6FD7               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3529  00075A  0E0A               	movlw	10
  3530  00075C  6FD6               	movwf	___wmul@multiplicand& (0+255),b
  3531  00075E  EC6E  F015         	call	___wmul	;wreg free
  3532  000762  C0D4  F107         	movff	?___wmul,printf@width
  3533  000766  C0D5  F108         	movff	?___wmul+1,printf@width+1
  3534                           
  3535                           ;doprnt.c: 601: width += *f++ - '0';
  3536  00076A  0ED0               	movlw	208
  3537  00076C  0100               	movlb	0	; () banked
  3538  00076E  6FE8               	movwf	??_printf& (0+255),b
  3539  000770  0EFF               	movlw	255
  3540  000772  0100               	movlb	0	; () banked
  3541  000774  6FE9               	movwf	(??_printf+1)& (0+255),b
  3542  000776  C0E0  FFF6         	movff	printf@f,tblptrl
  3543  00077A  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3544  00077E                     	if	0	;tblptru may be non-zero
  3545  00077E                     	endif
  3546  00077E                     	if	0	;tblptru may be non-zero
  3547  00077E                     	endif
  3548  00077E  0008               	tblrd		*
  3549  000780  50F5               	movf	tablat,w,c
  3550  000782  0100               	movlb	0	; () banked
  3551  000784  6FEA               	movwf	(??_printf+2)& (0+255),b
  3552  000786  6BEB               	clrf	(??_printf+3)& (0+255),b
  3553  000788  0100               	movlb	0	; () banked
  3554  00078A  51E8               	movf	??_printf& (0+255),w,b
  3555  00078C  0100               	movlb	0	; () banked
  3556  00078E  27EA               	addwf	(??_printf+2)& (0+255),f,b
  3557  000790  0100               	movlb	0	; () banked
  3558  000792  51E9               	movf	(??_printf+1)& (0+255),w,b
  3559  000794  0100               	movlb	0	; () banked
  3560  000796  23EB               	addwfc	(??_printf+3)& (0+255),f,b
  3561  000798  0100               	movlb	0	; () banked
  3562  00079A  51EA               	movf	(??_printf+2)& (0+255),w,b
  3563  00079C  0101               	movlb	1	; () banked
  3564  00079E  2707               	addwf	printf@width& (0+255),f,b
  3565  0007A0  0100               	movlb	0	; () banked
  3566  0007A2  51EB               	movf	(??_printf+3)& (0+255),w,b
  3567  0007A4  0101               	movlb	1	; () banked
  3568  0007A6  2308               	addwfc	(printf@width+1)& (0+255),f,b
  3569                           
  3570                           ; BSR set to: 1
  3571  0007A8  0100               	movlb	0	; () banked
  3572  0007AA  4BE0               	infsnz	printf@f& (0+255),f,b
  3573  0007AC  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3577  0007AE  C0E0  FFF6         	movff	printf@f,tblptrl
  3578  0007B2  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3579  0007B6                     	if	0	;tblptru may be non-zero
  3580  0007B6                     	endif
  3581  0007B6                     	if	0	;tblptru may be non-zero
  3582  0007B6                     	endif
  3583  0007B6  0008               	tblrd		*
  3584  0007B8  50F5               	movf	tablat,w,c
  3585  0007BA  ECBA  F015         	call	_isdigit
  3586  0007BE  A0D8               	btfss	status,0,c
  3587  0007C0  D004               	goto	l4873
  3588  0007C2  D7C4               	goto	l4861
  3589  0007C4                     l4869:
  3590                           
  3591                           ;doprnt.c: 721: flag |= 0x80;
  3592  0007C4  0101               	movlb	1	; () banked
  3593  0007C6  8F06               	bsf	printf@flag& (0+255),7,b
  3594                           
  3595                           ;doprnt.c: 723: break;
  3596  0007C8  D019               	goto	l444
  3597  0007CA                     l4873:
  3598  0007CA  C0E0  FFF6         	movff	printf@f,tblptrl
  3599  0007CE  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3600  0007D2  0100               	movlb	0	; () banked
  3601  0007D4  4BE0               	infsnz	printf@f& (0+255),f,b
  3602  0007D6  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3603  0007D8                     	if	0	;tblptru may be non-zero
  3604  0007D8                     	endif
  3605  0007D8                     	if	0	;tblptru may be non-zero
  3606  0007D8                     	endif
  3607  0007D8  0008               	tblrd		*
  3608  0007DA  CFF5 F109          	movff	tablat,printf@c
  3609  0007DE  0101               	movlb	1	; () banked
  3610  0007E0  5109               	movf	printf@c& (0+255),w,b
  3611                           
  3612                           ; Switch size 1, requested type "space"
  3613                           ; Number of cases is 4, Range of values is 0 to 120
  3614                           ; switch strategies available:
  3615                           ; Name         Instructions Cycles
  3616                           ; simple_byte           13     7 (average)
  3617                           ;	Chosen strategy is simple_byte
  3618  0007E2  0A00               	xorlw	0	; case 0
  3619  0007E4  B4D8               	btfsc	status,2,c
  3620  0007E6  0012               	return	
  3621  0007E8  0A64               	xorlw	100	; case 100
  3622  0007EA  B4D8               	btfsc	status,2,c
  3623  0007EC  D007               	goto	l444
  3624  0007EE  0A0D               	xorlw	13	; case 105
  3625  0007F0  B4D8               	btfsc	status,2,c
  3626  0007F2  D004               	goto	l444
  3627  0007F4  0A11               	xorlw	17	; case 120
  3628  0007F6  B4D8               	btfsc	status,2,c
  3629  0007F8  D7E5               	goto	l4869
  3630  0007FA  D13C               	goto	l4971
  3631  0007FC                     l444:
  3632                           
  3633                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3634  0007FC  0101               	movlb	1	; () banked
  3635  0007FE  BF06               	btfsc	printf@flag& (0+255),7,b
  3636  000800  D019               	goto	l4885
  3637                           
  3638                           ; BSR set to: 1
  3639                           ;doprnt.c: 1253: {
  3640                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3641  000802  C101  FFD9         	movff	printf@ap,fsr2l
  3642  000806  C102  FFDA         	movff	printf@ap+1,fsr2h
  3643  00080A  CFDE F104          	movff	postinc2,printf@val
  3644  00080E  CFDD F105          	movff	postdec2,printf@val+1
  3645                           
  3646                           ; BSR set to: 1
  3647  000812  0E02               	movlw	2
  3648  000814  0101               	movlb	1	; () banked
  3649  000816  2701               	addwf	printf@ap& (0+255),f,b
  3650  000818  0E00               	movlw	0
  3651  00081A  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3652                           
  3653                           ; BSR set to: 1
  3654                           ;doprnt.c: 1261: if((int)val < 0) {
  3655  00081C  0101               	movlb	1	; () banked
  3656  00081E  AF05               	btfss	(printf@val+1)& (0+255),7,b
  3657  000820  D053               	goto	l4919
  3658                           
  3659                           ; BSR set to: 1
  3660                           ;doprnt.c: 1262: flag |= 0x03;
  3661  000822  0E03               	movlw	3
  3662  000824  0101               	movlb	1	; () banked
  3663  000826  1306               	iorwf	printf@flag& (0+255),f,b
  3664                           
  3665                           ; BSR set to: 1
  3666                           ;doprnt.c: 1263: val = -val;
  3667  000828  0101               	movlb	1	; () banked
  3668  00082A  6D04               	negf	printf@val& (0+255),b
  3669  00082C  1F05               	comf	(printf@val+1)& (0+255),f,b
  3670  00082E  B0D8               	btfsc	status,0,c
  3671  000830  2B05               	incf	(printf@val+1)& (0+255),f,b
  3672                           
  3673                           ; BSR set to: 1
  3674                           ;doprnt.c: 1264: }
  3675                           ;doprnt.c: 1266: }
  3676  000832  D04A               	goto	l4919
  3677  000834                     l4885:
  3678                           
  3679                           ; BSR set to: 1
  3680                           ;doprnt.c: 1268: else
  3681                           ;doprnt.c: 1273: {
  3682                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3683  000834  C101  FFD9         	movff	printf@ap,fsr2l
  3684  000838  C102  FFDA         	movff	printf@ap+1,fsr2h
  3685  00083C  CFDE F104          	movff	postinc2,printf@val
  3686  000840  CFDD F105          	movff	postdec2,printf@val+1
  3687                           
  3688                           ; BSR set to: 1
  3689  000844  0E02               	movlw	2
  3690  000846  0101               	movlb	1	; () banked
  3691  000848  2701               	addwf	printf@ap& (0+255),f,b
  3692  00084A  0E00               	movlw	0
  3693  00084C  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3694                           
  3695                           ; BSR set to: 1
  3696                           ;doprnt.c: 1287: }
  3697                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3698  00084E  D03C               	goto	l4919
  3699  000850                     l4889:
  3700                           
  3701                           ; BSR set to: 1
  3702                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3703  000850  0E01               	movlw	1
  3704  000852  0101               	movlb	1	; () banked
  3705  000854  6F09               	movwf	printf@c& (0+255),b
  3706  000856                     l4891:
  3707                           
  3708                           ; BSR set to: 1
  3709  000856  0E05               	movlw	5
  3710  000858  0101               	movlb	1	; () banked
  3711  00085A  1909               	xorwf	printf@c& (0+255),w,b
  3712  00085C  B4D8               	btfsc	status,2,c
  3713  00085E  D03D               	goto	l4921
  3714                           
  3715                           ; BSR set to: 1
  3716                           ;doprnt.c: 1306: if(val < dpowers[c])
  3717                           
  3718                           ; BSR set to: 1
  3719                           
  3720                           ; BSR set to: 1
  3721  000860  0101               	movlb	1	; () banked
  3722  000862  5109               	movf	printf@c& (0+255),w,b
  3723  000864  0D02               	mullw	2
  3724  000866  0EDC               	movlw	low _dpowers
  3725  000868  24F3               	addwf	prodl,w,c
  3726  00086A  6EF6               	movwf	tblptrl,c
  3727  00086C  0EFD               	movlw	high _dpowers
  3728  00086E  20F4               	addwfc	prodh,w,c
  3729  000870  6EF7               	movwf	tblptrh,c
  3730  000872                     	if	0	;There are less than 3 active tblptr bytes
  3731  000872                     	endif
  3732  000872  0009               	tblrd		*+
  3733  000874  50F5               	movf	tablat,w,c
  3734  000876  0101               	movlb	1	; () banked
  3735  000878  5D04               	subwf	printf@val& (0+255),w,b
  3736  00087A  0009               	tblrd		*+
  3737  00087C  50F5               	movf	tablat,w,c
  3738  00087E  0101               	movlb	1	; () banked
  3739  000880  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3740  000882  A0D8               	btfss	status,0,c
  3741  000884  D02A               	goto	l4921
  3742                           
  3743                           ; BSR set to: 1
  3744                           
  3745                           ; BSR set to: 1
  3746                           
  3747                           ; BSR set to: 1
  3748                           ;doprnt.c: 1307: break;
  3749  000886  0101               	movlb	1	; () banked
  3750  000888  2B09               	incf	printf@c& (0+255),f,b
  3751  00088A  D7E5               	goto	l4891
  3752  00088C                     l4903:
  3753                           
  3754                           ; BSR set to: 1
  3755                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3756  00088C  0E01               	movlw	1
  3757  00088E  0101               	movlb	1	; () banked
  3758  000890  6F09               	movwf	printf@c& (0+255),b
  3759  000892                     l4905:
  3760                           
  3761                           ; BSR set to: 1
  3762  000892  0E04               	movlw	4
  3763  000894  0101               	movlb	1	; () banked
  3764  000896  1909               	xorwf	printf@c& (0+255),w,b
  3765  000898  B4D8               	btfsc	status,2,c
  3766  00089A  D01F               	goto	l4921
  3767                           
  3768                           ; BSR set to: 1
  3769                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3770                           
  3771                           ; BSR set to: 1
  3772                           
  3773                           ; BSR set to: 1
  3774  00089C  0101               	movlb	1	; () banked
  3775  00089E  5109               	movf	printf@c& (0+255),w,b
  3776  0008A0  0D02               	mullw	2
  3777  0008A2  0EE6               	movlw	low _hexpowers
  3778  0008A4  24F3               	addwf	prodl,w,c
  3779  0008A6  6EF6               	movwf	tblptrl,c
  3780  0008A8  0EFD               	movlw	high _hexpowers
  3781  0008AA  20F4               	addwfc	prodh,w,c
  3782  0008AC  6EF7               	movwf	tblptrh,c
  3783  0008AE                     	if	0	;There are less than 3 active tblptr bytes
  3784  0008AE                     	endif
  3785  0008AE  0009               	tblrd		*+
  3786  0008B0  50F5               	movf	tablat,w,c
  3787  0008B2  0101               	movlb	1	; () banked
  3788  0008B4  5D04               	subwf	printf@val& (0+255),w,b
  3789  0008B6  0009               	tblrd		*+
  3790  0008B8  50F5               	movf	tablat,w,c
  3791  0008BA  0101               	movlb	1	; () banked
  3792  0008BC  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3793  0008BE  A0D8               	btfss	status,0,c
  3794  0008C0  D00C               	goto	l4921
  3795                           
  3796                           ; BSR set to: 1
  3797                           
  3798                           ; BSR set to: 1
  3799                           
  3800                           ; BSR set to: 1
  3801                           ;doprnt.c: 1318: break;
  3802  0008C2  0101               	movlb	1	; () banked
  3803  0008C4  2B09               	incf	printf@c& (0+255),f,b
  3804  0008C6  D7E5               	goto	l4905
  3805  0008C8                     l4919:
  3806                           
  3807                           ; BSR set to: 1
  3808  0008C8  0101               	movlb	1	; () banked
  3809  0008CA  5106               	movf	printf@flag& (0+255),w,b
  3810  0008CC  0B80               	andlw	128
  3811                           
  3812                           ; Switch size 1, requested type "space"
  3813                           ; Number of cases is 2, Range of values is 0 to 128
  3814                           ; switch strategies available:
  3815                           ; Name         Instructions Cycles
  3816                           ; simple_byte            7     4 (average)
  3817                           ;	Chosen strategy is simple_byte
  3818  0008CE  0A00               	xorlw	0	; case 0
  3819  0008D0  B4D8               	btfsc	status,2,c
  3820  0008D2  D7BE               	goto	l4889
  3821  0008D4  0A80               	xorlw	128	; case 128
  3822  0008D6  B4D8               	btfsc	status,2,c
  3823  0008D8  D7D9               	goto	l4903
  3824  0008DA                     l4921:
  3825                           
  3826                           ; BSR set to: 1
  3827                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3828  0008DA  0101               	movlb	1	; () banked
  3829  0008DC  5107               	movf	printf@width& (0+255),w,b
  3830  0008DE  0101               	movlb	1	; () banked
  3831  0008E0  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3832  0008E2  B4D8               	btfsc	status,2,c
  3833  0008E4  D00B               	goto	l4927
  3834                           
  3835                           ; BSR set to: 1
  3836  0008E6  C106  F0E8         	movff	printf@flag,??_printf
  3837  0008EA  0E03               	movlw	3
  3838  0008EC  0100               	movlb	0	; () banked
  3839  0008EE  17E8               	andwf	??_printf& (0+255),f,b
  3840  0008F0  B4D8               	btfsc	status,2,c
  3841  0008F2  D004               	goto	l4927
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;doprnt.c: 1346: width--;
  3845  0008F4  0101               	movlb	1	; () banked
  3846  0008F6  0707               	decf	printf@width& (0+255),f,b
  3847  0008F8  A0D8               	btfss	status,0,c
  3848  0008FA  0708               	decf	(printf@width+1)& (0+255),f,b
  3849  0008FC                     l4927:
  3850                           
  3851                           ;doprnt.c: 1381: if(width > c)
  3852  0008FC  0E80               	movlw	128
  3853  0008FE  0101               	movlb	1	; () banked
  3854  000900  BF09               	btfsc	printf@c& (0+255),7,b
  3855  000902  0E7F               	movlw	127
  3856  000904  0100               	movlb	0	; () banked
  3857  000906  6FE8               	movwf	??_printf& (0+255),b
  3858  000908  0101               	movlb	1	; () banked
  3859  00090A  5107               	movf	printf@width& (0+255),w,b
  3860  00090C  0101               	movlb	1	; () banked
  3861  00090E  5D09               	subwf	printf@c& (0+255),w,b
  3862  000910  0101               	movlb	1	; () banked
  3863  000912  5108               	movf	(printf@width+1)& (0+255),w,b
  3864  000914  0A80               	xorlw	128
  3865  000916  0100               	movlb	0	; () banked
  3866  000918  59E8               	subwfb	??_printf& (0+255),w,b
  3867  00091A  B0D8               	btfsc	status,0,c
  3868  00091C  D00B               	goto	l4931
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;doprnt.c: 1382: width -= c;
  3872  00091E  0101               	movlb	1	; () banked
  3873  000920  5109               	movf	printf@c& (0+255),w,b
  3874  000922  0101               	movlb	1	; () banked
  3875  000924  5F07               	subwf	printf@width& (0+255),f,b
  3876  000926  0E00               	movlw	0
  3877  000928  0101               	movlb	1	; () banked
  3878  00092A  BF09               	btfsc	printf@c& (0+255),7,b
  3879  00092C  0EFF               	movlw	255
  3880  00092E  0101               	movlb	1	; () banked
  3881  000930  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  3882  000932  D005               	goto	l4933
  3883  000934                     l4931:
  3884                           
  3885                           ;doprnt.c: 1383: else
  3886                           ;doprnt.c: 1384: width = 0;
  3887  000934  0E00               	movlw	0
  3888  000936  0101               	movlb	1	; () banked
  3889  000938  6F08               	movwf	(printf@width+1)& (0+255),b
  3890  00093A  0E00               	movlw	0
  3891  00093C  6F07               	movwf	printf@width& (0+255),b
  3892  00093E                     l4933:
  3893                           
  3894                           ; BSR set to: 1
  3895                           ;doprnt.c: 1387: if(flag & 0x04) {
  3896  00093E  0101               	movlb	1	; () banked
  3897  000940  A506               	btfss	printf@flag& (0+255),2,b
  3898  000942  D018               	goto	l4945
  3899                           
  3900                           ; BSR set to: 1
  3901                           ;doprnt.c: 1392: if(flag & 0x03)
  3902  000944  C106  F0E8         	movff	printf@flag,??_printf
  3903  000948  0E03               	movlw	3
  3904  00094A  0100               	movlb	0	; () banked
  3905  00094C  17E8               	andwf	??_printf& (0+255),f,b
  3906  00094E  B4D8               	btfsc	status,2,c
  3907  000950  D003               	goto	l4939
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;doprnt.c: 1393: (putch('-') );
  3911  000952  0E2D               	movlw	45
  3912  000954  EC46  F016         	call	_putch
  3913  000958                     l4939:
  3914                           
  3915                           ;doprnt.c: 1415: if(width)
  3916  000958  0101               	movlb	1	; () banked
  3917  00095A  5107               	movf	printf@width& (0+255),w,b
  3918  00095C  0101               	movlb	1	; () banked
  3919  00095E  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3920  000960  B4D8               	btfsc	status,2,c
  3921  000962  D025               	goto	l4955
  3922                           
  3923                           ; BSR set to: 1
  3924                           ;doprnt.c: 1417: (putch('0') );
  3925                           
  3926                           ; BSR set to: 1
  3927                           
  3928                           ;doprnt.c: 1416: do
  3929  000964  0E30               	movlw	48
  3930  000966  EC46  F016         	call	_putch
  3931                           
  3932                           ;doprnt.c: 1418: while(--width);
  3933  00096A  0101               	movlb	1	; () banked
  3934  00096C  0707               	decf	printf@width& (0+255),f,b
  3935  00096E  A0D8               	btfss	status,0,c
  3936  000970  0708               	decf	(printf@width+1)& (0+255),f,b
  3937  000972  D7F2               	goto	l4939
  3938  000974                     l4945:
  3939                           
  3940                           ; BSR set to: 1
  3941                           ;doprnt.c: 1422: {
  3942                           ;doprnt.c: 1424: if(width
  3943                           ;doprnt.c: 1428: )
  3944  000974  0101               	movlb	1	; () banked
  3945  000976  5107               	movf	printf@width& (0+255),w,b
  3946  000978  0101               	movlb	1	; () banked
  3947  00097A  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3948  00097C  B4D8               	btfsc	status,2,c
  3949  00097E  D00D               	goto	l4951
  3950  000980                     l4947:
  3951                           
  3952                           ; BSR set to: 1
  3953                           ;doprnt.c: 1430: (putch(' ') );
  3954  000980  0E20               	movlw	32
  3955  000982  EC46  F016         	call	_putch
  3956                           
  3957                           ;doprnt.c: 1431: while(--width);
  3958  000986  0101               	movlb	1	; () banked
  3959  000988  0707               	decf	printf@width& (0+255),f,b
  3960  00098A  A0D8               	btfss	status,0,c
  3961  00098C  0708               	decf	(printf@width+1)& (0+255),f,b
  3962  00098E  0101               	movlb	1	; () banked
  3963  000990  5107               	movf	printf@width& (0+255),w,b
  3964  000992  0101               	movlb	1	; () banked
  3965  000994  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3966  000996  A4D8               	btfss	status,2,c
  3967  000998  D7F3               	goto	l4947
  3968  00099A                     l4951:
  3969                           
  3970                           ; BSR set to: 1
  3971                           ;doprnt.c: 1438: if(flag & 0x03)
  3972  00099A  C106  F0E8         	movff	printf@flag,??_printf
  3973  00099E  0E03               	movlw	3
  3974  0009A0  0100               	movlb	0	; () banked
  3975  0009A2  17E8               	andwf	??_printf& (0+255),f,b
  3976  0009A4  B4D8               	btfsc	status,2,c
  3977  0009A6  D003               	goto	l4955
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;doprnt.c: 1439: (putch('-') );
  3981  0009A8  0E2D               	movlw	45
  3982  0009AA  EC46  F016         	call	_putch
  3983  0009AE                     l4955:
  3984                           
  3985                           ;doprnt.c: 1469: }
  3986                           ;doprnt.c: 1472: prec = c;
  3987  0009AE  C109  F103         	movff	printf@c,printf@prec
  3988                           
  3989                           ;doprnt.c: 1474: while(prec--) {
  3990  0009B2  D05A               	goto	l4969
  3991  0009B4                     l4957:
  3992                           
  3993                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3994  0009B4  0101               	movlb	1	; () banked
  3995  0009B6  5103               	movf	printf@prec& (0+255),w,b
  3996  0009B8  0D02               	mullw	2
  3997  0009BA  0EDC               	movlw	low _dpowers
  3998  0009BC  24F3               	addwf	prodl,w,c
  3999  0009BE  6EF6               	movwf	tblptrl,c
  4000  0009C0  0EFD               	movlw	high _dpowers
  4001  0009C2  20F4               	addwfc	prodh,w,c
  4002  0009C4  6EF7               	movwf	tblptrh,c
  4003  0009C6                     	if	0	;There are less than 3 active tblptr bytes
  4004  0009C6                     	endif
  4005  0009C6  0009               	tblrd		*+
  4006  0009C8  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4007  0009CC  000A               	tblrd		*-
  4008  0009CE  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4009  0009D2  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4010  0009D6  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4011  0009DA  ECD9  F012         	call	___lwdiv	;wreg free
  4012  0009DE  C0D4  F0DB         	movff	?___lwdiv,___lwmod@dividend
  4013  0009E2  C0D5  F0DC         	movff	?___lwdiv+1,___lwmod@dividend+1
  4014  0009E6  0E00               	movlw	0
  4015  0009E8  0100               	movlb	0	; () banked
  4016  0009EA  6FDE               	movwf	(___lwmod@divisor+1)& (0+255),b
  4017  0009EC  0E0A               	movlw	10
  4018  0009EE  6FDD               	movwf	___lwmod@divisor& (0+255),b
  4019  0009F0  EC85  F013         	call	___lwmod	;wreg free
  4020  0009F4  0100               	movlb	0	; () banked
  4021  0009F6  51DB               	movf	?___lwmod& (0+255),w,b
  4022  0009F8  0F30               	addlw	48
  4023  0009FA  0101               	movlb	1	; () banked
  4024  0009FC  6F09               	movwf	printf@c& (0+255),b
  4025                           
  4026                           ;doprnt.c: 1491: break;
  4027  0009FE  D030               	goto	l4967
  4028  000A00                     l4959:
  4029                           
  4030                           ; BSR set to: 1
  4031                           ;doprnt.c: 1499: {
  4032                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4033  000A00  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4034  000A04  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4035  000A08  0101               	movlb	1	; () banked
  4036  000A0A  5103               	movf	printf@prec& (0+255),w,b
  4037  000A0C  0D02               	mullw	2
  4038  000A0E  0EE6               	movlw	low _hexpowers
  4039  000A10  24F3               	addwf	prodl,w,c
  4040  000A12  6EF6               	movwf	tblptrl,c
  4041  000A14  0EFD               	movlw	high _hexpowers
  4042  000A16  20F4               	addwfc	prodh,w,c
  4043  000A18  6EF7               	movwf	tblptrh,c
  4044  000A1A                     	if	0	;There are less than 3 active tblptr bytes
  4045  000A1A                     	endif
  4046  000A1A  0009               	tblrd		*+
  4047  000A1C  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4048  000A20  000A               	tblrd		*-
  4049  000A22  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4050  000A26  ECD9  F012         	call	___lwdiv	;wreg free
  4051  000A2A  0100               	movlb	0	; () banked
  4052  000A2C  51D4               	movf	?___lwdiv& (0+255),w,b
  4053  000A2E  0B0F               	andlw	15
  4054  000A30  0101               	movlb	1	; () banked
  4055  000A32  6F00               	movwf	printf@idx& (0+255),b
  4056                           
  4057                           ; BSR set to: 1
  4058                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4059  000A34  0101               	movlb	1	; () banked
  4060  000A36  5100               	movf	printf@idx& (0+255),w,b
  4061  000A38  0D01               	mullw	1
  4062  000A3A  0E79               	movlw	low STR_25
  4063  000A3C  24F3               	addwf	prodl,w,c
  4064  000A3E  6EF6               	movwf	tblptrl,c
  4065  000A40  0EFF               	movlw	high STR_25
  4066  000A42  20F4               	addwfc	prodh,w,c
  4067  000A44  6EF7               	movwf	tblptrh,c
  4068  000A46                     	if	0	;There are less than 3 active tblptr bytes
  4069  000A46                     	endif
  4070  000A46  0008               	tblrd		*
  4071  000A48  CFF5 F109          	movff	tablat,printf@c
  4072                           
  4073                           ; BSR set to: 1
  4074                           ;doprnt.c: 1523: }
  4075                           
  4076                           ;doprnt.c: 1508: }
  4077                           ;doprnt.c: 1510: break;
  4078  000A4C  D009               	goto	l4967
  4079  000A4E                     l4965:
  4080  000A4E  0101               	movlb	1	; () banked
  4081  000A50  5106               	movf	printf@flag& (0+255),w,b
  4082  000A52  0B80               	andlw	128
  4083                           
  4084                           ; Switch size 1, requested type "space"
  4085                           ; Number of cases is 2, Range of values is 0 to 128
  4086                           ; switch strategies available:
  4087                           ; Name         Instructions Cycles
  4088                           ; simple_byte            7     4 (average)
  4089                           ;	Chosen strategy is simple_byte
  4090  000A54  0A00               	xorlw	0	; case 0
  4091  000A56  B4D8               	btfsc	status,2,c
  4092  000A58  D7AD               	goto	l4957
  4093  000A5A  0A80               	xorlw	128	; case 128
  4094  000A5C  B4D8               	btfsc	status,2,c
  4095  000A5E  D7D0               	goto	l4959
  4096  000A60                     l4967:
  4097                           
  4098                           ; BSR set to: 1
  4099                           ;doprnt.c: 1524: (putch(c) );
  4100  000A60  0101               	movlb	1	; () banked
  4101  000A62  5109               	movf	printf@c& (0+255),w,b
  4102  000A64  EC46  F016         	call	_putch
  4103  000A68                     l4969:
  4104  000A68  0101               	movlb	1	; () banked
  4105  000A6A  0703               	decf	printf@prec& (0+255),f,b
  4106  000A6C  0101               	movlb	1	; () banked
  4107  000A6E  2903               	incf	printf@prec& (0+255),w,b
  4108  000A70  A4D8               	btfss	status,2,c
  4109  000A72  D7ED               	goto	l4965
  4110  000A74                     l4971:
  4111  000A74  C0E0  FFF6         	movff	printf@f,tblptrl
  4112  000A78  C0E1  FFF7         	movff	printf@f+1,tblptrh
  4113  000A7C  0100               	movlb	0	; () banked
  4114  000A7E  4BE0               	infsnz	printf@f& (0+255),f,b
  4115  000A80  2BE1               	incf	(printf@f+1)& (0+255),f,b
  4116  000A82                     	if	0	;tblptru may be non-zero
  4117  000A82                     	endif
  4118  000A82                     	if	0	;tblptru may be non-zero
  4119  000A82                     	endif
  4120  000A82  0008               	tblrd		*
  4121  000A84  CFF5 F109          	movff	tablat,printf@c
  4122  000A88  0101               	movlb	1	; () banked
  4123  000A8A  5109               	movf	printf@c& (0+255),w,b
  4124  000A8C  B4D8               	btfsc	status,2,c
  4125  000A8E  0012               	return	
  4126  000A90  D62D               	goto	l4845
  4127  000A92                     __end_of_printf:
  4128                           	opt stack 0
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           intcon	equ	0xFF2
  4136                           intcon2	equ	0xFF1
  4137                           intcon3	equ	0xFF0
  4138                           postinc0	equ	0xFEE
  4139                           wreg	equ	0xFE8
  4140                           indf2	equ	0xFDF
  4141                           postinc2	equ	0xFDE
  4142                           postdec2	equ	0xFDD
  4143                           fsr2h	equ	0xFDA
  4144                           fsr2l	equ	0xFD9
  4145                           status	equ	0xFD8
  4146                           
  4147 ;; *************** function _putch *****************
  4148 ;; Defined at:
  4149 ;;		line 31 in file "lcd.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  data            1    wreg     unsigned char 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;  data            1   18[BANK0 ] unsigned char 
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2, status,0, cstack
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;Total ram usage:        1 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    8
  4170 ;; This function calls:
  4171 ;;		_lcdNibble
  4172 ;; This function is called by:
  4173 ;;		_printf
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           	psect	text12
  4178  002C8C                     __ptext12:
  4179                           	opt stack 0
  4180  002C8C                     _putch:
  4181                           	opt stack 20
  4182                           
  4183                           ;incstack = 0
  4184                           ;putch@data stored from wreg
  4185  002C8C  0100               	movlb	0	; () banked
  4186  002C8E  6FD6               	movwf	putch@data& (0+255),b
  4187                           
  4188                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4189  002C90  848C               	bsf	3980,2,c	;volatile
  4190                           
  4191                           ;lcd.c: 33: lcdNibble(data);
  4192  002C92  0100               	movlb	0	; () banked
  4193  002C94  51D6               	movf	putch@data& (0+255),w,b
  4194  002C96  ECB6  F013         	call	_lcdNibble
  4195  002C9A  0012               	return		;funcret
  4196  002C9C                     __end_of_putch:
  4197                           	opt stack 0
  4198                           tblptru	equ	0xFF8
  4199                           tblptrh	equ	0xFF7
  4200                           tblptrl	equ	0xFF6
  4201                           tablat	equ	0xFF5
  4202                           prodh	equ	0xFF4
  4203                           prodl	equ	0xFF3
  4204                           intcon	equ	0xFF2
  4205                           intcon2	equ	0xFF1
  4206                           intcon3	equ	0xFF0
  4207                           postinc0	equ	0xFEE
  4208                           wreg	equ	0xFE8
  4209                           indf2	equ	0xFDF
  4210                           postinc2	equ	0xFDE
  4211                           postdec2	equ	0xFDD
  4212                           fsr2h	equ	0xFDA
  4213                           fsr2l	equ	0xFD9
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _isdigit *****************
  4217 ;; Defined at:
  4218 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;  c               1    wreg     unsigned char 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  c               1   18[BANK0 ] unsigned char 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;		None               void
  4225 ;; Registers used:
  4226 ;;		wreg, status,2, status,0
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;Total ram usage:        3 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    7
  4239 ;; This function calls:
  4240 ;;		Nothing
  4241 ;; This function is called by:
  4242 ;;		_printf
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           	psect	text13
  4247  002B74                     __ptext13:
  4248                           	opt stack 0
  4249  002B74                     _isdigit:
  4250                           	opt stack 21
  4251                           
  4252                           ;incstack = 0
  4253                           ;isdigit@c stored from wreg
  4254  002B74  0100               	movlb	0	; () banked
  4255  002B76  6FD6               	movwf	isdigit@c& (0+255),b
  4256  002B78  0E00               	movlw	0
  4257  002B7A  0100               	movlb	0	; () banked
  4258  002B7C  6FD5               	movwf	_isdigit$822& (0+255),b
  4259                           
  4260                           ; BSR set to: 0
  4261  002B7E  0E3A               	movlw	58
  4262  002B80  0100               	movlb	0	; () banked
  4263  002B82  61D6               	cpfslt	isdigit@c& (0+255),b
  4264  002B84  D007               	goto	l4791
  4265                           
  4266                           ; BSR set to: 0
  4267  002B86  0E2F               	movlw	47
  4268  002B88  0100               	movlb	0	; () banked
  4269  002B8A  65D6               	cpfsgt	isdigit@c& (0+255),b
  4270  002B8C  D003               	goto	l4791
  4271                           
  4272                           ; BSR set to: 0
  4273  002B8E  0E01               	movlw	1
  4274  002B90  0100               	movlb	0	; () banked
  4275  002B92  6FD5               	movwf	_isdigit$822& (0+255),b
  4276  002B94                     l4791:
  4277                           
  4278                           ; BSR set to: 0
  4279  002B94  C0D5  F0D4         	movff	_isdigit$822,??_isdigit
  4280  002B98  0100               	movlb	0	; () banked
  4281  002B9A  31D4               	rrcf	??_isdigit& (0+255),w,b
  4282  002B9C  0012               	return	
  4283  002B9E                     __end_of_isdigit:
  4284                           	opt stack 0
  4285                           tblptru	equ	0xFF8
  4286                           tblptrh	equ	0xFF7
  4287                           tblptrl	equ	0xFF6
  4288                           tablat	equ	0xFF5
  4289                           prodh	equ	0xFF4
  4290                           prodl	equ	0xFF3
  4291                           intcon	equ	0xFF2
  4292                           intcon2	equ	0xFF1
  4293                           intcon3	equ	0xFF0
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           indf2	equ	0xFDF
  4297                           postinc2	equ	0xFDE
  4298                           postdec2	equ	0xFDD
  4299                           fsr2h	equ	0xFDA
  4300                           fsr2l	equ	0xFD9
  4301                           status	equ	0xFD8
  4302                           
  4303 ;; *************** function ___wmul *****************
  4304 ;; Defined at:
  4305 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4308 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  product         2   20[BANK0 ] unsigned int 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  2   16[BANK0 ] unsigned int 
  4313 ;; Registers used:
  4314 ;;		wreg, status,2, status,0, prodl, prodh
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4320 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;Total ram usage:        6 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    7
  4327 ;; This function calls:
  4328 ;;		Nothing
  4329 ;; This function is called by:
  4330 ;;		_printf
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           	psect	text14
  4335  002ADC                     __ptext14:
  4336                           	opt stack 0
  4337  002ADC                     ___wmul:
  4338                           	opt stack 21
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;incstack = 0
  4342  002ADC  0100               	movlb	0	; () banked
  4343  002ADE  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4344  002AE0  0100               	movlb	0	; () banked
  4345  002AE2  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4346  002AE4  CFF3 F0D8          	movff	prodl,___wmul@product
  4347  002AE8  CFF4 F0D9          	movff	prodh,___wmul@product+1
  4348  002AEC  0100               	movlb	0	; () banked
  4349  002AEE  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4350  002AF0  0100               	movlb	0	; () banked
  4351  002AF2  03D7               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4352  002AF4  50F3               	movf	prodl,w,c
  4353  002AF6  0100               	movlb	0	; () banked
  4354  002AF8  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4355  002AFA  0100               	movlb	0	; () banked
  4356  002AFC  51D5               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4357  002AFE  0100               	movlb	0	; () banked
  4358  002B00  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4359  002B02  50F3               	movf	prodl,w,c
  4360  002B04  0100               	movlb	0	; () banked
  4361  002B06  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4362                           
  4363                           ; BSR set to: 0
  4364  002B08  C0D8  F0D4         	movff	___wmul@product,?___wmul
  4365  002B0C  C0D9  F0D5         	movff	___wmul@product+1,?___wmul+1
  4366  002B10  0012               	return	
  4367  002B12                     __end_of___wmul:
  4368                           	opt stack 0
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           prodh	equ	0xFF4
  4374                           prodl	equ	0xFF3
  4375                           intcon	equ	0xFF2
  4376                           intcon2	equ	0xFF1
  4377                           intcon3	equ	0xFF0
  4378                           postinc0	equ	0xFEE
  4379                           wreg	equ	0xFE8
  4380                           indf2	equ	0xFDF
  4381                           postinc2	equ	0xFDE
  4382                           postdec2	equ	0xFDD
  4383                           fsr2h	equ	0xFDA
  4384                           fsr2l	equ	0xFD9
  4385                           status	equ	0xFD8
  4386                           
  4387 ;; *************** function ___lwmod *****************
  4388 ;; Defined at:
  4389 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  dividend        2   23[BANK0 ] unsigned int 
  4392 ;;  divisor         2   25[BANK0 ] unsigned int 
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;  counter         1   27[BANK0 ] unsigned char 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  2   23[BANK0 ] unsigned int 
  4397 ;; Registers used:
  4398 ;;		wreg, status,2, status,0
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4404 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;Total ram usage:        5 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    7
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_printf
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text15
  4419  00270A                     __ptext15:
  4420                           	opt stack 0
  4421  00270A                     ___lwmod:
  4422                           	opt stack 21
  4423                           
  4424                           ; BSR set to: 0
  4425                           ;incstack = 0
  4426  00270A  0100               	movlb	0	; () banked
  4427  00270C  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4428  00270E  0100               	movlb	0	; () banked
  4429  002710  11DE               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4430  002712  B4D8               	btfsc	status,2,c
  4431  002714  D026               	goto	l899
  4432                           
  4433                           ; BSR set to: 0
  4434  002716  0E01               	movlw	1
  4435  002718  0100               	movlb	0	; () banked
  4436  00271A  6FDF               	movwf	___lwmod@counter& (0+255),b
  4437  00271C  D006               	goto	l4829
  4438  00271E                     l4827:
  4439                           
  4440                           ; BSR set to: 0
  4441  00271E  0100               	movlb	0	; () banked
  4442  002720  90D8               	bcf	status,0,c
  4443  002722  37DD               	rlcf	___lwmod@divisor& (0+255),f,b
  4444  002724  37DE               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4445  002726  0100               	movlb	0	; () banked
  4446  002728  2BDF               	incf	___lwmod@counter& (0+255),f,b
  4447  00272A                     l4829:
  4448                           
  4449                           ; BSR set to: 0
  4450  00272A  0100               	movlb	0	; () banked
  4451  00272C  AFDE               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4452  00272E  D7F7               	goto	l4827
  4453  002730                     l4831:
  4454                           
  4455                           ; BSR set to: 0
  4456  002730  0100               	movlb	0	; () banked
  4457  002732  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4458  002734  0100               	movlb	0	; () banked
  4459  002736  5DDB               	subwf	___lwmod@dividend& (0+255),w,b
  4460  002738  0100               	movlb	0	; () banked
  4461  00273A  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4462  00273C  0100               	movlb	0	; () banked
  4463  00273E  59DC               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4464  002740  A0D8               	btfss	status,0,c
  4465  002742  D008               	goto	l4835
  4466                           
  4467                           ; BSR set to: 0
  4468  002744  0100               	movlb	0	; () banked
  4469  002746  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4470  002748  0100               	movlb	0	; () banked
  4471  00274A  5FDB               	subwf	___lwmod@dividend& (0+255),f,b
  4472  00274C  0100               	movlb	0	; () banked
  4473  00274E  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4474  002750  0100               	movlb	0	; () banked
  4475  002752  5BDC               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4476  002754                     l4835:
  4477                           
  4478                           ; BSR set to: 0
  4479  002754  0100               	movlb	0	; () banked
  4480  002756  90D8               	bcf	status,0,c
  4481  002758  33DE               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4482  00275A  33DD               	rrcf	___lwmod@divisor& (0+255),f,b
  4483                           
  4484                           ; BSR set to: 0
  4485  00275C  0100               	movlb	0	; () banked
  4486  00275E  2FDF               	decfsz	___lwmod@counter& (0+255),f,b
  4487  002760  D7E7               	goto	l4831
  4488  002762                     l899:
  4489                           
  4490                           ; BSR set to: 0
  4491  002762  C0DB  F0DB         	movff	___lwmod@dividend,?___lwmod
  4492  002766  C0DC  F0DC         	movff	___lwmod@dividend+1,?___lwmod+1
  4493                           
  4494                           ; BSR set to: 0
  4495  00276A  0012               	return		;funcret
  4496  00276C                     __end_of___lwmod:
  4497                           	opt stack 0
  4498                           tblptru	equ	0xFF8
  4499                           tblptrh	equ	0xFF7
  4500                           tblptrl	equ	0xFF6
  4501                           tablat	equ	0xFF5
  4502                           prodh	equ	0xFF4
  4503                           prodl	equ	0xFF3
  4504                           intcon	equ	0xFF2
  4505                           intcon2	equ	0xFF1
  4506                           intcon3	equ	0xFF0
  4507                           postinc0	equ	0xFEE
  4508                           wreg	equ	0xFE8
  4509                           indf2	equ	0xFDF
  4510                           postinc2	equ	0xFDE
  4511                           postdec2	equ	0xFDD
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function ___lwdiv *****************
  4517 ;; Defined at:
  4518 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  dividend        2   16[BANK0 ] unsigned int 
  4521 ;;  divisor         2   18[BANK0 ] unsigned int 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  quotient        2   21[BANK0 ] unsigned int 
  4524 ;;  counter         1   20[BANK0 ] unsigned char 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  2   16[BANK0 ] unsigned int 
  4527 ;; Registers used:
  4528 ;;		wreg, status,2, status,0
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4534 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4535 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;Total ram usage:        7 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    7
  4541 ;; This function calls:
  4542 ;;		Nothing
  4543 ;; This function is called by:
  4544 ;;		_printf
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           	psect	text16
  4549  0025B2                     __ptext16:
  4550                           	opt stack 0
  4551  0025B2                     ___lwdiv:
  4552                           	opt stack 21
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;incstack = 0
  4556  0025B2  0E00               	movlw	0
  4557  0025B4  0100               	movlb	0	; () banked
  4558  0025B6  6FDA               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4559  0025B8  0E00               	movlw	0
  4560  0025BA  6FD9               	movwf	___lwdiv@quotient& (0+255),b
  4561                           
  4562                           ; BSR set to: 0
  4563  0025BC  0100               	movlb	0	; () banked
  4564  0025BE  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4565  0025C0  0100               	movlb	0	; () banked
  4566  0025C2  11D7               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4567  0025C4  B4D8               	btfsc	status,2,c
  4568  0025C6  D02C               	goto	l889
  4569                           
  4570                           ; BSR set to: 0
  4571  0025C8  0E01               	movlw	1
  4572  0025CA  0100               	movlb	0	; () banked
  4573  0025CC  6FD8               	movwf	___lwdiv@counter& (0+255),b
  4574  0025CE  D006               	goto	l4809
  4575  0025D0                     l4807:
  4576                           
  4577                           ; BSR set to: 0
  4578  0025D0  0100               	movlb	0	; () banked
  4579  0025D2  90D8               	bcf	status,0,c
  4580  0025D4  37D6               	rlcf	___lwdiv@divisor& (0+255),f,b
  4581  0025D6  37D7               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4582  0025D8  0100               	movlb	0	; () banked
  4583  0025DA  2BD8               	incf	___lwdiv@counter& (0+255),f,b
  4584  0025DC                     l4809:
  4585                           
  4586                           ; BSR set to: 0
  4587  0025DC  0100               	movlb	0	; () banked
  4588  0025DE  AFD7               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4589  0025E0  D7F7               	goto	l4807
  4590  0025E2                     l4811:
  4591                           
  4592                           ; BSR set to: 0
  4593  0025E2  0100               	movlb	0	; () banked
  4594  0025E4  90D8               	bcf	status,0,c
  4595  0025E6  37D9               	rlcf	___lwdiv@quotient& (0+255),f,b
  4596  0025E8  37DA               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4597                           
  4598                           ; BSR set to: 0
  4599  0025EA  0100               	movlb	0	; () banked
  4600  0025EC  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4601  0025EE  0100               	movlb	0	; () banked
  4602  0025F0  5DD4               	subwf	___lwdiv@dividend& (0+255),w,b
  4603  0025F2  0100               	movlb	0	; () banked
  4604  0025F4  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4605  0025F6  0100               	movlb	0	; () banked
  4606  0025F8  59D5               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4607  0025FA  A0D8               	btfss	status,0,c
  4608  0025FC  D00A               	goto	l4819
  4609                           
  4610                           ; BSR set to: 0
  4611  0025FE  0100               	movlb	0	; () banked
  4612  002600  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4613  002602  0100               	movlb	0	; () banked
  4614  002604  5FD4               	subwf	___lwdiv@dividend& (0+255),f,b
  4615  002606  0100               	movlb	0	; () banked
  4616  002608  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4617  00260A  0100               	movlb	0	; () banked
  4618  00260C  5BD5               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4619                           
  4620                           ; BSR set to: 0
  4621  00260E  0100               	movlb	0	; () banked
  4622  002610  81D9               	bsf	___lwdiv@quotient& (0+255),0,b
  4623  002612                     l4819:
  4624                           
  4625                           ; BSR set to: 0
  4626  002612  0100               	movlb	0	; () banked
  4627  002614  90D8               	bcf	status,0,c
  4628  002616  33D7               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4629  002618  33D6               	rrcf	___lwdiv@divisor& (0+255),f,b
  4630                           
  4631                           ; BSR set to: 0
  4632  00261A  0100               	movlb	0	; () banked
  4633  00261C  2FD8               	decfsz	___lwdiv@counter& (0+255),f,b
  4634  00261E  D7E1               	goto	l4811
  4635  002620                     l889:
  4636                           
  4637                           ; BSR set to: 0
  4638  002620  C0D9  F0D4         	movff	___lwdiv@quotient,?___lwdiv
  4639  002624  C0DA  F0D5         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4640                           
  4641                           ; BSR set to: 0
  4642  002628  0012               	return		;funcret
  4643  00262A                     __end_of___lwdiv:
  4644                           	opt stack 0
  4645                           tblptru	equ	0xFF8
  4646                           tblptrh	equ	0xFF7
  4647                           tblptrl	equ	0xFF6
  4648                           tablat	equ	0xFF5
  4649                           prodh	equ	0xFF4
  4650                           prodl	equ	0xFF3
  4651                           intcon	equ	0xFF2
  4652                           intcon2	equ	0xFF1
  4653                           intcon3	equ	0xFF0
  4654                           postinc0	equ	0xFEE
  4655                           wreg	equ	0xFE8
  4656                           indf2	equ	0xFDF
  4657                           postinc2	equ	0xFDE
  4658                           postdec2	equ	0xFDD
  4659                           fsr2h	equ	0xFDA
  4660                           fsr2l	equ	0xFD9
  4661                           status	equ	0xFD8
  4662                           
  4663 ;; *************** function _lcdInst *****************
  4664 ;; Defined at:
  4665 ;;		line 26 in file "lcd.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  data            1    wreg     unsigned char 
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;  data            1   18[BANK0 ] unsigned char 
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  1    wreg      void 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4682 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4683 ;;Total ram usage:        1 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    8
  4686 ;; This function calls:
  4687 ;;		_lcdNibble
  4688 ;; This function is called by:
  4689 ;;		_initLCD
  4690 ;;		_standby
  4691 ;;		_date_time
  4692 ;;		_bottle_count
  4693 ;;		_bottle_time
  4694 ;;		_operation
  4695 ;;		_operationend
  4696 ;;		_emergencystop
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           	psect	text17
  4701  002C9C                     __ptext17:
  4702                           	opt stack 0
  4703  002C9C                     _lcdInst:
  4704                           	opt stack 21
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;incstack = 0
  4708                           ;lcdInst@data stored from wreg
  4709  002C9C  0100               	movlb	0	; () banked
  4710  002C9E  6FD6               	movwf	lcdInst@data& (0+255),b
  4711                           
  4712                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4713  002CA0  948C               	bcf	3980,2,c	;volatile
  4714                           
  4715                           ;lcd.c: 28: lcdNibble(data);
  4716  002CA2  0100               	movlb	0	; () banked
  4717  002CA4  51D6               	movf	lcdInst@data& (0+255),w,b
  4718  002CA6  ECB6  F013         	call	_lcdNibble
  4719  002CAA  0012               	return		;funcret
  4720  002CAC                     __end_of_lcdInst:
  4721                           	opt stack 0
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           prodh	equ	0xFF4
  4727                           prodl	equ	0xFF3
  4728                           intcon	equ	0xFF2
  4729                           intcon2	equ	0xFF1
  4730                           intcon3	equ	0xFF0
  4731                           postinc0	equ	0xFEE
  4732                           wreg	equ	0xFE8
  4733                           indf2	equ	0xFDF
  4734                           postinc2	equ	0xFDE
  4735                           postdec2	equ	0xFDD
  4736                           fsr2h	equ	0xFDA
  4737                           fsr2l	equ	0xFD9
  4738                           status	equ	0xFD8
  4739                           
  4740 ;; *************** function _lcdNibble *****************
  4741 ;; Defined at:
  4742 ;;		line 36 in file "lcd.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;  data            1    wreg     unsigned char 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;  data            1   17[BANK0 ] unsigned char 
  4747 ;;  temp            1   16[BANK0 ] unsigned char 
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  1    wreg      void 
  4750 ;; Registers used:
  4751 ;;		wreg, status,2, status,0
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;Total ram usage:        2 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    7
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		_lcdInst
  4768 ;;		_putch
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           	psect	text18
  4773  00276C                     __ptext18:
  4774                           	opt stack 0
  4775  00276C                     _lcdNibble:
  4776                           	opt stack 20
  4777                           
  4778                           ;incstack = 0
  4779                           ;lcdNibble@data stored from wreg
  4780  00276C  0100               	movlb	0	; () banked
  4781  00276E  6FD5               	movwf	lcdNibble@data& (0+255),b
  4782                           
  4783                           ;lcd.c: 38: char temp = data & 0xF0;
  4784  002770  0100               	movlb	0	; () banked
  4785  002772  51D5               	movf	lcdNibble@data& (0+255),w,b
  4786  002774  0BF0               	andlw	240
  4787  002776  0100               	movlb	0	; () banked
  4788  002778  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4789                           
  4790                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4791  00277A  508C               	movf	3980,w,c	;volatile
  4792  00277C  0B0F               	andlw	15
  4793  00277E  6E8C               	movwf	3980,c	;volatile
  4794                           
  4795                           ;lcd.c: 40: LATD = temp | LATD;
  4796  002780  0100               	movlb	0	; () banked
  4797  002782  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4798  002784  108C               	iorwf	3980,w,c	;volatile
  4799  002786  6E8C               	movwf	3980,c	;volatile
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4803  002788  968C               	bcf	3980,3,c	;volatile
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4807  00278A  0E19               	movlw	25
  4808  00278C                     u4787:
  4809  00278C  2EE8               	decfsz	wreg,f,c
  4810  00278E  D7FE               	bra	u4787
  4811                           
  4812                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4813  002790  868C               	bsf	3980,3,c	;volatile
  4814                           
  4815                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4816  002792  0E19               	movlw	25
  4817  002794                     u4797:
  4818  002794  2EE8               	decfsz	wreg,f,c
  4819  002796  D7FE               	bra	u4797
  4820                           
  4821                           ;lcd.c: 47: data = data << 4;
  4822  002798  0100               	movlb	0	; () banked
  4823  00279A  39D5               	swapf	lcdNibble@data& (0+255),w,b
  4824  00279C  0BF0               	andlw	240
  4825  00279E  0100               	movlb	0	; () banked
  4826  0027A0  6FD5               	movwf	lcdNibble@data& (0+255),b
  4827                           
  4828                           ;lcd.c: 49: temp = data & 0xF0;
  4829  0027A2  0100               	movlb	0	; () banked
  4830  0027A4  51D5               	movf	lcdNibble@data& (0+255),w,b
  4831  0027A6  0BF0               	andlw	240
  4832  0027A8  0100               	movlb	0	; () banked
  4833  0027AA  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4834                           
  4835                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4836  0027AC  508C               	movf	3980,w,c	;volatile
  4837  0027AE  0B0F               	andlw	15
  4838  0027B0  6E8C               	movwf	3980,c	;volatile
  4839                           
  4840                           ;lcd.c: 51: LATD = temp | LATD;
  4841  0027B2  0100               	movlb	0	; () banked
  4842  0027B4  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4843  0027B6  108C               	iorwf	3980,w,c	;volatile
  4844  0027B8  6E8C               	movwf	3980,c	;volatile
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4848  0027BA  968C               	bcf	3980,3,c	;volatile
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4852  0027BC  0E19               	movlw	25
  4853  0027BE                     u4807:
  4854  0027BE  2EE8               	decfsz	wreg,f,c
  4855  0027C0  D7FE               	bra	u4807
  4856                           
  4857                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4858  0027C2  868C               	bsf	3980,3,c	;volatile
  4859                           
  4860                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4861  0027C4  0E19               	movlw	25
  4862  0027C6                     u4817:
  4863  0027C6  2EE8               	decfsz	wreg,f,c
  4864  0027C8  D7FE               	bra	u4817
  4865  0027CA  0012               	return		;funcret
  4866  0027CC                     __end_of_lcdNibble:
  4867                           	opt stack 0
  4868                           tblptru	equ	0xFF8
  4869                           tblptrh	equ	0xFF7
  4870                           tblptrl	equ	0xFF6
  4871                           tablat	equ	0xFF5
  4872                           prodh	equ	0xFF4
  4873                           prodl	equ	0xFF3
  4874                           intcon	equ	0xFF2
  4875                           intcon2	equ	0xFF1
  4876                           intcon3	equ	0xFF0
  4877                           postinc0	equ	0xFEE
  4878                           wreg	equ	0xFE8
  4879                           indf2	equ	0xFDF
  4880                           postinc2	equ	0xFDE
  4881                           postdec2	equ	0xFDD
  4882                           fsr2h	equ	0xFDA
  4883                           fsr2l	equ	0xFD9
  4884                           status	equ	0xFD8
  4885                           
  4886 ;; *************** function ___awmod *****************
  4887 ;; Defined at:
  4888 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;  dividend        2   16[BANK0 ] int 
  4891 ;;  divisor         2   18[BANK0 ] int 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  sign            1   21[BANK0 ] unsigned char 
  4894 ;;  counter         1   20[BANK0 ] unsigned char 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  2   16[BANK0 ] int 
  4897 ;; Registers used:
  4898 ;;		wreg, status,2, status,0
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4904 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4907 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;Total ram usage:        6 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    7
  4911 ;; This function calls:
  4912 ;;		Nothing
  4913 ;; This function is called by:
  4914 ;;		_bottle_count
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text19
  4919  0022DC                     __ptext19:
  4920                           	opt stack 0
  4921  0022DC                     ___awmod:
  4922                           	opt stack 22
  4923                           
  4924                           ;incstack = 0
  4925  0022DC  0E00               	movlw	0
  4926  0022DE  0100               	movlb	0	; () banked
  4927  0022E0  6FD9               	movwf	___awmod@sign& (0+255),b
  4928                           
  4929                           ; BSR set to: 0
  4930  0022E2  0100               	movlb	0	; () banked
  4931  0022E4  AFD5               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4932  0022E6  D008               	goto	l3839
  4933                           
  4934                           ; BSR set to: 0
  4935  0022E8  0100               	movlb	0	; () banked
  4936  0022EA  6DD4               	negf	___awmod@dividend& (0+255),b
  4937  0022EC  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  4938  0022EE  B0D8               	btfsc	status,0,c
  4939  0022F0  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  4940                           
  4941                           ; BSR set to: 0
  4942  0022F2  0E01               	movlw	1
  4943  0022F4  0100               	movlb	0	; () banked
  4944  0022F6  6FD9               	movwf	___awmod@sign& (0+255),b
  4945  0022F8                     l3839:
  4946                           
  4947                           ; BSR set to: 0
  4948  0022F8  0100               	movlb	0	; () banked
  4949  0022FA  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4950  0022FC  D005               	goto	l3843
  4951                           
  4952                           ; BSR set to: 0
  4953  0022FE  0100               	movlb	0	; () banked
  4954  002300  6DD6               	negf	___awmod@divisor& (0+255),b
  4955  002302  1FD7               	comf	(___awmod@divisor+1)& (0+255),f,b
  4956  002304  B0D8               	btfsc	status,0,c
  4957  002306  2BD7               	incf	(___awmod@divisor+1)& (0+255),f,b
  4958  002308                     l3843:
  4959                           
  4960                           ; BSR set to: 0
  4961  002308  0100               	movlb	0	; () banked
  4962  00230A  51D6               	movf	___awmod@divisor& (0+255),w,b
  4963  00230C  0100               	movlb	0	; () banked
  4964  00230E  11D7               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4965  002310  B4D8               	btfsc	status,2,c
  4966  002312  D026               	goto	l3859
  4967                           
  4968                           ; BSR set to: 0
  4969  002314  0E01               	movlw	1
  4970  002316  0100               	movlb	0	; () banked
  4971  002318  6FD8               	movwf	___awmod@counter& (0+255),b
  4972  00231A  D006               	goto	l3849
  4973  00231C                     l3847:
  4974                           
  4975                           ; BSR set to: 0
  4976  00231C  0100               	movlb	0	; () banked
  4977  00231E  90D8               	bcf	status,0,c
  4978  002320  37D6               	rlcf	___awmod@divisor& (0+255),f,b
  4979  002322  37D7               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4980  002324  0100               	movlb	0	; () banked
  4981  002326  2BD8               	incf	___awmod@counter& (0+255),f,b
  4982  002328                     l3849:
  4983                           
  4984                           ; BSR set to: 0
  4985  002328  0100               	movlb	0	; () banked
  4986  00232A  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4987  00232C  D7F7               	goto	l3847
  4988  00232E                     l3851:
  4989                           
  4990                           ; BSR set to: 0
  4991  00232E  0100               	movlb	0	; () banked
  4992  002330  51D6               	movf	___awmod@divisor& (0+255),w,b
  4993  002332  0100               	movlb	0	; () banked
  4994  002334  5DD4               	subwf	___awmod@dividend& (0+255),w,b
  4995  002336  0100               	movlb	0	; () banked
  4996  002338  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  4997  00233A  0100               	movlb	0	; () banked
  4998  00233C  59D5               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4999  00233E  A0D8               	btfss	status,0,c
  5000  002340  D008               	goto	l3855
  5001                           
  5002                           ; BSR set to: 0
  5003  002342  0100               	movlb	0	; () banked
  5004  002344  51D6               	movf	___awmod@divisor& (0+255),w,b
  5005  002346  0100               	movlb	0	; () banked
  5006  002348  5FD4               	subwf	___awmod@dividend& (0+255),f,b
  5007  00234A  0100               	movlb	0	; () banked
  5008  00234C  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  5009  00234E  0100               	movlb	0	; () banked
  5010  002350  5BD5               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5011  002352                     l3855:
  5012                           
  5013                           ; BSR set to: 0
  5014  002352  0100               	movlb	0	; () banked
  5015  002354  90D8               	bcf	status,0,c
  5016  002356  33D7               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5017  002358  33D6               	rrcf	___awmod@divisor& (0+255),f,b
  5018                           
  5019                           ; BSR set to: 0
  5020  00235A  0100               	movlb	0	; () banked
  5021  00235C  2FD8               	decfsz	___awmod@counter& (0+255),f,b
  5022  00235E  D7E7               	goto	l3851
  5023  002360                     l3859:
  5024                           
  5025                           ; BSR set to: 0
  5026  002360  0100               	movlb	0	; () banked
  5027  002362  51D9               	movf	___awmod@sign& (0+255),w,b
  5028  002364  0100               	movlb	0	; () banked
  5029  002366  B4D8               	btfsc	status,2,c
  5030  002368  D005               	goto	l3863
  5031                           
  5032                           ; BSR set to: 0
  5033  00236A  0100               	movlb	0	; () banked
  5034  00236C  6DD4               	negf	___awmod@dividend& (0+255),b
  5035  00236E  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  5036  002370  B0D8               	btfsc	status,0,c
  5037  002372  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  5038  002374                     l3863:
  5039                           
  5040                           ; BSR set to: 0
  5041  002374  C0D4  F0D4         	movff	___awmod@dividend,?___awmod
  5042  002378  C0D5  F0D5         	movff	___awmod@dividend+1,?___awmod+1
  5043  00237C  0012               	return	
  5044  00237E                     __end_of___awmod:
  5045                           	opt stack 0
  5046                           tblptru	equ	0xFF8
  5047                           tblptrh	equ	0xFF7
  5048                           tblptrl	equ	0xFF6
  5049                           tablat	equ	0xFF5
  5050                           prodh	equ	0xFF4
  5051                           prodl	equ	0xFF3
  5052                           intcon	equ	0xFF2
  5053                           intcon2	equ	0xFF1
  5054                           intcon3	equ	0xFF0
  5055                           postinc0	equ	0xFEE
  5056                           wreg	equ	0xFE8
  5057                           indf2	equ	0xFDF
  5058                           postinc2	equ	0xFDE
  5059                           postdec2	equ	0xFDD
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _I2C_Master_Init *****************
  5065 ;; Defined at:
  5066 ;;		line 13 in file "I2C.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  c               4   29[BANK0 ] const unsigned long 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;		None
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      void 
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5080 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;Total ram usage:        8 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    8
  5087 ;; This function calls:
  5088 ;;		___lldiv
  5089 ;; This function is called by:
  5090 ;;		_main
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text20
  5095  0027CC                     __ptext20:
  5096                           	opt stack 0
  5097  0027CC                     _I2C_Master_Init:
  5098                           	opt stack 22
  5099                           
  5100                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;incstack = 0
  5104  0027CC  0E00               	movlw	0
  5105  0027CE  6EC7               	movwf	4039,c	;volatile
  5106                           
  5107                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  5108  0027D0  0E28               	movlw	40
  5109  0027D2  6EC6               	movwf	4038,c	;volatile
  5110                           
  5111                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  5112  0027D4  0E00               	movlw	0
  5113  0027D6  6EC5               	movwf	4037,c	;volatile
  5114                           
  5115                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  5116  0027D8  0E80               	movlw	128
  5117  0027DA  0100               	movlb	0	; () banked
  5118  0027DC  6FD4               	movwf	___lldiv@dividend& (0+255),b
  5119  0027DE  0E96               	movlw	150
  5120  0027E0  6FD5               	movwf	(___lldiv@dividend+1)& (0+255),b
  5121  0027E2  0E98               	movlw	152
  5122  0027E4  6FD6               	movwf	(___lldiv@dividend+2)& (0+255),b
  5123  0027E6  0E00               	movlw	0
  5124  0027E8  6FD7               	movwf	(___lldiv@dividend+3)& (0+255),b
  5125  0027EA  C0E1  F0E5         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5126  0027EE  C0E2  F0E6         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5127  0027F2  C0E3  F0E7         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5128  0027F6  C0E4  F0E8         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5129  0027FA  0E02               	movlw	2
  5130  0027FC                     u3715:
  5131  0027FC  90D8               	bcf	status,0,c
  5132  0027FE  0100               	movlb	0	; () banked
  5133  002800  37E5               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5134  002802  37E6               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5135  002804  37E7               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5136  002806  37E8               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5137  002808  2EE8               	decfsz	wreg,f,c
  5138  00280A  D7F8               	goto	u3715
  5139  00280C  C0E5  F0D8         	movff	??_I2C_Master_Init,___lldiv@divisor
  5140  002810  C0E6  F0D9         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5141  002814  C0E7  F0DA         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5142  002818  C0E8  F0DB         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5143  00281C  EC05  F010         	call	___lldiv	;wreg free
  5144  002820  0100               	movlb	0	; () banked
  5145  002822  05D4               	decf	?___lldiv& (0+255),w,b
  5146  002824  6EC8               	movwf	4040,c	;volatile
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;I2C.c: 20: TRISC3 = 1;
  5150  002826  8694               	bsf	3988,3,c	;volatile
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;I2C.c: 21: TRISC4 = 1;
  5154  002828  8894               	bsf	3988,4,c	;volatile
  5155                           
  5156                           ; BSR set to: 0
  5157  00282A  0012               	return		;funcret
  5158  00282C                     __end_of_I2C_Master_Init:
  5159                           	opt stack 0
  5160                           tblptru	equ	0xFF8
  5161                           tblptrh	equ	0xFF7
  5162                           tblptrl	equ	0xFF6
  5163                           tablat	equ	0xFF5
  5164                           prodh	equ	0xFF4
  5165                           prodl	equ	0xFF3
  5166                           intcon	equ	0xFF2
  5167                           intcon2	equ	0xFF1
  5168                           intcon3	equ	0xFF0
  5169                           postinc0	equ	0xFEE
  5170                           wreg	equ	0xFE8
  5171                           indf2	equ	0xFDF
  5172                           postinc2	equ	0xFDE
  5173                           postdec2	equ	0xFDD
  5174                           fsr2h	equ	0xFDA
  5175                           fsr2l	equ	0xFD9
  5176                           status	equ	0xFD8
  5177                           
  5178 ;; *************** function ___lldiv *****************
  5179 ;; Defined at:
  5180 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  dividend        4   16[BANK0 ] unsigned long 
  5183 ;;  divisor         4   20[BANK0 ] unsigned long 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  quotient        4   24[BANK0 ] unsigned long 
  5186 ;;  counter         1   28[BANK0 ] unsigned char 
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  4   16[BANK0 ] unsigned long 
  5189 ;; Registers used:
  5190 ;;		wreg, status,2, status,0
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5196 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5199 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5200 ;;Total ram usage:       13 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; Hardware stack levels required when called:    7
  5203 ;; This function calls:
  5204 ;;		Nothing
  5205 ;; This function is called by:
  5206 ;;		_I2C_Master_Init
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           	psect	text21
  5211  00200A                     __ptext21:
  5212                           	opt stack 0
  5213  00200A                     ___lldiv:
  5214                           	opt stack 22
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;incstack = 0
  5218  00200A  0E00               	movlw	0
  5219  00200C  0100               	movlb	0	; () banked
  5220  00200E  6FDC               	movwf	___lldiv@quotient& (0+255),b
  5221  002010  0E00               	movlw	0
  5222  002012  6FDD               	movwf	(___lldiv@quotient+1)& (0+255),b
  5223  002014  0E00               	movlw	0
  5224  002016  6FDE               	movwf	(___lldiv@quotient+2)& (0+255),b
  5225  002018  0E00               	movlw	0
  5226  00201A  6FDF               	movwf	(___lldiv@quotient+3)& (0+255),b
  5227                           
  5228                           ; BSR set to: 0
  5229  00201C  0100               	movlb	0	; () banked
  5230  00201E  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5231  002020  0100               	movlb	0	; () banked
  5232  002022  11D9               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5233  002024  0100               	movlb	0	; () banked
  5234  002026  11DA               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5235  002028  0100               	movlb	0	; () banked
  5236  00202A  11DB               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5237  00202C  B4D8               	btfsc	status,2,c
  5238  00202E  D042               	goto	l836
  5239                           
  5240                           ; BSR set to: 0
  5241  002030  0E01               	movlw	1
  5242  002032  0100               	movlb	0	; () banked
  5243  002034  6FE0               	movwf	___lldiv@counter& (0+255),b
  5244  002036  D008               	goto	l3875
  5245  002038                     l3873:
  5246                           
  5247                           ; BSR set to: 0
  5248  002038  0100               	movlb	0	; () banked
  5249  00203A  90D8               	bcf	status,0,c
  5250  00203C  37D8               	rlcf	___lldiv@divisor& (0+255),f,b
  5251  00203E  37D9               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5252  002040  37DA               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5253  002042  37DB               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5254  002044  0100               	movlb	0	; () banked
  5255  002046  2BE0               	incf	___lldiv@counter& (0+255),f,b
  5256  002048                     l3875:
  5257                           
  5258                           ; BSR set to: 0
  5259  002048  0100               	movlb	0	; () banked
  5260  00204A  AFDB               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5261  00204C  D7F5               	goto	l3873
  5262  00204E                     l3877:
  5263                           
  5264                           ; BSR set to: 0
  5265  00204E  0100               	movlb	0	; () banked
  5266  002050  90D8               	bcf	status,0,c
  5267  002052  37DC               	rlcf	___lldiv@quotient& (0+255),f,b
  5268  002054  37DD               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5269  002056  37DE               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5270  002058  37DF               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5271                           
  5272                           ; BSR set to: 0
  5273  00205A  0100               	movlb	0	; () banked
  5274  00205C  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5275  00205E  0100               	movlb	0	; () banked
  5276  002060  5DD4               	subwf	___lldiv@dividend& (0+255),w,b
  5277  002062  0100               	movlb	0	; () banked
  5278  002064  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5279  002066  0100               	movlb	0	; () banked
  5280  002068  59D5               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5281  00206A  0100               	movlb	0	; () banked
  5282  00206C  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5283  00206E  0100               	movlb	0	; () banked
  5284  002070  59D6               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5285  002072  0100               	movlb	0	; () banked
  5286  002074  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5287  002076  0100               	movlb	0	; () banked
  5288  002078  59D7               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5289  00207A  A0D8               	btfss	status,0,c
  5290  00207C  D012               	goto	l3885
  5291                           
  5292                           ; BSR set to: 0
  5293  00207E  0100               	movlb	0	; () banked
  5294  002080  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5295  002082  0100               	movlb	0	; () banked
  5296  002084  5FD4               	subwf	___lldiv@dividend& (0+255),f,b
  5297  002086  0100               	movlb	0	; () banked
  5298  002088  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5299  00208A  0100               	movlb	0	; () banked
  5300  00208C  5BD5               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5301  00208E  0100               	movlb	0	; () banked
  5302  002090  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5303  002092  0100               	movlb	0	; () banked
  5304  002094  5BD6               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5305  002096  0100               	movlb	0	; () banked
  5306  002098  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5307  00209A  0100               	movlb	0	; () banked
  5308  00209C  5BD7               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5309                           
  5310                           ; BSR set to: 0
  5311  00209E  0100               	movlb	0	; () banked
  5312  0020A0  81DC               	bsf	___lldiv@quotient& (0+255),0,b
  5313  0020A2                     l3885:
  5314                           
  5315                           ; BSR set to: 0
  5316  0020A2  0100               	movlb	0	; () banked
  5317  0020A4  90D8               	bcf	status,0,c
  5318  0020A6  33DB               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5319  0020A8  33DA               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5320  0020AA  33D9               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5321  0020AC  33D8               	rrcf	___lldiv@divisor& (0+255),f,b
  5322                           
  5323                           ; BSR set to: 0
  5324  0020AE  0100               	movlb	0	; () banked
  5325  0020B0  2FE0               	decfsz	___lldiv@counter& (0+255),f,b
  5326  0020B2  D7CD               	goto	l3877
  5327  0020B4                     l836:
  5328                           
  5329                           ; BSR set to: 0
  5330  0020B4  C0DC  F0D4         	movff	___lldiv@quotient,?___lldiv
  5331  0020B8  C0DD  F0D5         	movff	___lldiv@quotient+1,?___lldiv+1
  5332  0020BC  C0DE  F0D6         	movff	___lldiv@quotient+2,?___lldiv+2
  5333  0020C0  C0DF  F0D7         	movff	___lldiv@quotient+3,?___lldiv+3
  5334                           
  5335                           ; BSR set to: 0
  5336  0020C4  0012               	return		;funcret
  5337  0020C6                     __end_of___lldiv:
  5338                           	opt stack 0
  5339                           tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           intcon	equ	0xFF2
  5346                           intcon2	equ	0xFF1
  5347                           intcon3	equ	0xFF0
  5348                           postinc0	equ	0xFEE
  5349                           wreg	equ	0xFE8
  5350                           indf2	equ	0xFDF
  5351                           postinc2	equ	0xFDE
  5352                           postdec2	equ	0xFDD
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _I2C_ColorSens_Init *****************
  5358 ;; Defined at:
  5359 ;;		line 53 in file "I2C.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      void 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;Total ram usage:        0 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    9
  5380 ;; This function calls:
  5381 ;;		_I2C_Master_Start
  5382 ;;		_I2C_Master_Stop
  5383 ;;		_I2C_Master_Write
  5384 ;; This function is called by:
  5385 ;;		_main
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           	psect	text22
  5390  002B12                     __ptext22:
  5391                           	opt stack 0
  5392  002B12                     _I2C_ColorSens_Init:
  5393                           	opt stack 21
  5394                           
  5395                           ;I2C.c: 54: I2C_Master_Start();
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;incstack = 0
  5399  002B12  EC70  F016         	call	_I2C_Master_Start	;wreg free
  5400                           
  5401                           ;I2C.c: 55: I2C_Master_Write(0b01010010);
  5402  002B16  0E00               	movlw	0
  5403  002B18  0100               	movlb	0	; () banked
  5404  002B1A  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5405  002B1C  0E52               	movlw	82
  5406  002B1E  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5407  002B20  EC62  F016         	call	_I2C_Master_Write	;wreg free
  5408                           
  5409                           ;I2C.c: 56: I2C_Master_Write(0b10000000);
  5410  002B24  0E00               	movlw	0
  5411  002B26  0100               	movlb	0	; () banked
  5412  002B28  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5413  002B2A  0E80               	movlw	128
  5414  002B2C  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5415  002B2E  EC62  F016         	call	_I2C_Master_Write	;wreg free
  5416                           
  5417                           ;I2C.c: 57: I2C_Master_Write(0b00000011);
  5418  002B32  0E00               	movlw	0
  5419  002B34  0100               	movlb	0	; () banked
  5420  002B36  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5421  002B38  0E03               	movlw	3
  5422  002B3A  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5423  002B3C  EC62  F016         	call	_I2C_Master_Write	;wreg free
  5424                           
  5425                           ;I2C.c: 58: I2C_Master_Stop();
  5426  002B40  EC6C  F016         	call	_I2C_Master_Stop	;wreg free
  5427  002B44  0012               	return		;funcret
  5428  002B46                     __end_of_I2C_ColorSens_Init:
  5429                           	opt stack 0
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           prodh	equ	0xFF4
  5435                           prodl	equ	0xFF3
  5436                           intcon	equ	0xFF2
  5437                           intcon2	equ	0xFF1
  5438                           intcon3	equ	0xFF0
  5439                           postinc0	equ	0xFEE
  5440                           wreg	equ	0xFE8
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function _I2C_Master_Write *****************
  5449 ;; Defined at:
  5450 ;;		line 47 in file "I2C.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  d               2   17[BANK0 ] unsigned int 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  1    wreg      void 
  5457 ;; Registers used:
  5458 ;;		wreg, status,2, status,0, cstack
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5464 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;Total ram usage:        2 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    8
  5471 ;; This function calls:
  5472 ;;		_I2C_Master_Wait
  5473 ;; This function is called by:
  5474 ;;		_I2C_ColorSens_Init
  5475 ;;		_date_time
  5476 ;;		_read_colorsensor
  5477 ;;		_set_time
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text23
  5482  002CC4                     __ptext23:
  5483                           	opt stack 0
  5484  002CC4                     _I2C_Master_Write:
  5485                           	opt stack 20
  5486                           
  5487                           ;I2C.c: 49: I2C_Master_Wait();
  5488                           
  5489                           ;incstack = 0
  5490  002CC4  EC33  F016         	call	_I2C_Master_Wait	;wreg free
  5491                           
  5492                           ;I2C.c: 50: SSPBUF = d;
  5493  002CC8  C0D5  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5494  002CCC  0012               	return		;funcret
  5495  002CCE                     __end_of_I2C_Master_Write:
  5496                           	opt stack 0
  5497                           tblptru	equ	0xFF8
  5498                           tblptrh	equ	0xFF7
  5499                           tblptrl	equ	0xFF6
  5500                           tablat	equ	0xFF5
  5501                           prodh	equ	0xFF4
  5502                           prodl	equ	0xFF3
  5503                           intcon	equ	0xFF2
  5504                           intcon2	equ	0xFF1
  5505                           intcon3	equ	0xFF0
  5506                           postinc0	equ	0xFEE
  5507                           wreg	equ	0xFE8
  5508                           indf2	equ	0xFDF
  5509                           postinc2	equ	0xFDE
  5510                           postdec2	equ	0xFDD
  5511                           fsr2h	equ	0xFDA
  5512                           fsr2l	equ	0xFD9
  5513                           status	equ	0xFD8
  5514                           
  5515 ;; *************** function _I2C_Master_Stop *****************
  5516 ;; Defined at:
  5517 ;;		line 41 in file "I2C.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;		None
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;		None
  5522 ;; Return value:  Size  Location     Type
  5523 ;;                  1    wreg      void 
  5524 ;; Registers used:
  5525 ;;		wreg, status,2, status,0, cstack
  5526 ;; Tracked objects:
  5527 ;;		On entry : 0/0
  5528 ;;		On exit  : 0/0
  5529 ;;		Unchanged: 0/0
  5530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5535 ;;Total ram usage:        0 bytes
  5536 ;; Hardware stack levels used:    1
  5537 ;; Hardware stack levels required when called:    8
  5538 ;; This function calls:
  5539 ;;		_I2C_Master_Wait
  5540 ;; This function is called by:
  5541 ;;		_I2C_ColorSens_Init
  5542 ;;		_date_time
  5543 ;;		_read_colorsensor
  5544 ;;		_set_time
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           	psect	text24
  5549  002CD8                     __ptext24:
  5550                           	opt stack 0
  5551  002CD8                     _I2C_Master_Stop:
  5552                           	opt stack 20
  5553                           
  5554                           ;I2C.c: 43: I2C_Master_Wait();
  5555                           
  5556                           ;incstack = 0
  5557  002CD8  EC33  F016         	call	_I2C_Master_Wait	;wreg free
  5558                           
  5559                           ;I2C.c: 44: PEN = 1;
  5560  002CDC  84C5               	bsf	4037,2,c	;volatile
  5561  002CDE  0012               	return		;funcret
  5562  002CE0                     __end_of_I2C_Master_Stop:
  5563                           	opt stack 0
  5564                           tblptru	equ	0xFF8
  5565                           tblptrh	equ	0xFF7
  5566                           tblptrl	equ	0xFF6
  5567                           tablat	equ	0xFF5
  5568                           prodh	equ	0xFF4
  5569                           prodl	equ	0xFF3
  5570                           intcon	equ	0xFF2
  5571                           intcon2	equ	0xFF1
  5572                           intcon3	equ	0xFF0
  5573                           postinc0	equ	0xFEE
  5574                           wreg	equ	0xFE8
  5575                           indf2	equ	0xFDF
  5576                           postinc2	equ	0xFDE
  5577                           postdec2	equ	0xFDD
  5578                           fsr2h	equ	0xFDA
  5579                           fsr2l	equ	0xFD9
  5580                           status	equ	0xFD8
  5581                           
  5582 ;; *************** function _I2C_Master_Start *****************
  5583 ;; Defined at:
  5584 ;;		line 29 in file "I2C.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;		None
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;		None
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  1    wreg      void 
  5591 ;; Registers used:
  5592 ;;		wreg, status,2, status,0, cstack
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;Total ram usage:        0 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    8
  5605 ;; This function calls:
  5606 ;;		_I2C_Master_Wait
  5607 ;; This function is called by:
  5608 ;;		_I2C_ColorSens_Init
  5609 ;;		_date_time
  5610 ;;		_read_colorsensor
  5611 ;;		_set_time
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           	psect	text25
  5616  002CE0                     __ptext25:
  5617                           	opt stack 0
  5618  002CE0                     _I2C_Master_Start:
  5619                           	opt stack 20
  5620                           
  5621                           ;I2C.c: 31: I2C_Master_Wait();
  5622                           
  5623                           ;incstack = 0
  5624  002CE0  EC33  F016         	call	_I2C_Master_Wait	;wreg free
  5625                           
  5626                           ;I2C.c: 32: SEN = 1;
  5627  002CE4  80C5               	bsf	4037,0,c	;volatile
  5628  002CE6  0012               	return		;funcret
  5629  002CE8                     __end_of_I2C_Master_Start:
  5630                           	opt stack 0
  5631                           tblptru	equ	0xFF8
  5632                           tblptrh	equ	0xFF7
  5633                           tblptrl	equ	0xFF6
  5634                           tablat	equ	0xFF5
  5635                           prodh	equ	0xFF4
  5636                           prodl	equ	0xFF3
  5637                           intcon	equ	0xFF2
  5638                           intcon2	equ	0xFF1
  5639                           intcon3	equ	0xFF0
  5640                           postinc0	equ	0xFEE
  5641                           wreg	equ	0xFE8
  5642                           indf2	equ	0xFDF
  5643                           postinc2	equ	0xFDE
  5644                           postdec2	equ	0xFDD
  5645                           fsr2h	equ	0xFDA
  5646                           fsr2l	equ	0xFD9
  5647                           status	equ	0xFD8
  5648                           
  5649 ;; *************** function _I2C_Master_Wait *****************
  5650 ;; Defined at:
  5651 ;;		line 24 in file "I2C.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;		None
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;		None
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  1    wreg      void 
  5658 ;; Registers used:
  5659 ;;		wreg, status,2, status,0
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;Total ram usage:        1 bytes
  5670 ;; Hardware stack levels used:    1
  5671 ;; Hardware stack levels required when called:    7
  5672 ;; This function calls:
  5673 ;;		Nothing
  5674 ;; This function is called by:
  5675 ;;		_I2C_Master_Start
  5676 ;;		_I2C_Master_Stop
  5677 ;;		_I2C_Master_Write
  5678 ;;		_I2C_Master_Read
  5679 ;;		_I2C_Master_RepeatedStart
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text26
  5684  002C66                     __ptext26:
  5685                           	opt stack 0
  5686  002C66                     _I2C_Master_Wait:
  5687                           	opt stack 20
  5688  002C66                     l34:
  5689  002C66  B4C7               	btfsc	4039,2,c	;volatile
  5690  002C68  D7FE               	goto	l34
  5691  002C6A  CFC5 F0D4          	movff	4037,??_I2C_Master_Wait	;volatile
  5692  002C6E  0E1F               	movlw	31
  5693  002C70  0100               	movlb	0	; () banked
  5694  002C72  17D4               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5695  002C74  B4D8               	btfsc	status,2,c
  5696  002C76  0012               	return	
  5697  002C78  D7F6               	goto	l34
  5698  002C7A                     __end_of_I2C_Master_Wait:
  5699                           	opt stack 0
  5700                           tblptru	equ	0xFF8
  5701                           tblptrh	equ	0xFF7
  5702                           tblptrl	equ	0xFF6
  5703                           tablat	equ	0xFF5
  5704                           prodh	equ	0xFF4
  5705                           prodl	equ	0xFF3
  5706                           intcon	equ	0xFF2
  5707                           intcon2	equ	0xFF1
  5708                           intcon3	equ	0xFF0
  5709                           postinc0	equ	0xFEE
  5710                           wreg	equ	0xFE8
  5711                           indf2	equ	0xFDF
  5712                           postinc2	equ	0xFDE
  5713                           postdec2	equ	0xFDD
  5714                           fsr2h	equ	0xFDA
  5715                           fsr2l	equ	0xFD9
  5716                           status	equ	0xFD8
  5717                           
  5718 ;; *************** function _isr *****************
  5719 ;; Defined at:
  5720 ;;		line 164 in file "main.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;		None
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;  i               1  114[COMRAM] unsigned char 
  5725 ;; Return value:  Size  Location     Type
  5726 ;;                  1    wreg      void 
  5727 ;; Registers used:
  5728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;Total ram usage:       19 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:    6
  5741 ;; This function calls:
  5742 ;;		_dec_to_hex
  5743 ;;		_read_time
  5744 ;;		_servo_rotate0
  5745 ;;		_servo_rotate1
  5746 ;;		_servo_rotate2
  5747 ;;		i2___wmul
  5748 ;;		i2_lcdInst
  5749 ;;		i2_printf
  5750 ;;		i2_read_colorsensor
  5751 ;; This function is called by:
  5752 ;;		Interrupt level 2
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	intcode
  5757  000008                     __pintcode:
  5758                           	opt stack 0
  5759  000008                     _isr:
  5760                           	opt stack 20
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;incstack = 0
  5764  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5765  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  5766                           tblptru	equ	0xFF8
  5767                           tblptrh	equ	0xFF7
  5768                           tblptrl	equ	0xFF6
  5769                           tablat	equ	0xFF5
  5770                           prodh	equ	0xFF4
  5771                           prodl	equ	0xFF3
  5772                           intcon	equ	0xFF2
  5773                           intcon2	equ	0xFF1
  5774                           intcon3	equ	0xFF0
  5775                           postinc0	equ	0xFEE
  5776                           wreg	equ	0xFE8
  5777                           indf2	equ	0xFDF
  5778                           postinc2	equ	0xFDE
  5779                           postdec2	equ	0xFDD
  5780                           fsr2h	equ	0xFDA
  5781                           fsr2l	equ	0xFD9
  5782                           status	equ	0xFD8
  5783                           
  5784                           	psect	intcode_body
  5785  000012                     __pintcode_body:
  5786                           	opt stack 20
  5787  000012                     int_func:
  5788                           	opt stack 20
  5789  000012  0006               	pop		; remove dummy address from shadow register refresh
  5790  000014  CFFA F0C6          	movff	pclath,??_isr+2
  5791  000018  CFFB F0C7          	movff	pclatu,??_isr+3
  5792  00001C  CFE9 F0C8          	movff	fsr0l,??_isr+4
  5793  000020  CFEA F0C9          	movff	fsr0h,??_isr+5
  5794  000024  CFE1 F0CA          	movff	fsr1l,??_isr+6
  5795  000028  CFE2 F0CB          	movff	fsr1h,??_isr+7
  5796  00002C  CFD9 F0CC          	movff	fsr2l,??_isr+8
  5797  000030  CFDA F0CD          	movff	fsr2h,??_isr+9
  5798  000034  CFF3 F0CE          	movff	prodl,??_isr+10
  5799  000038  CFF4 F0CF          	movff	prodh,??_isr+11
  5800  00003C  CFF6 F0D0          	movff	tblptrl,??_isr+12
  5801  000040  CFF7 F0D1          	movff	tblptrh,??_isr+13
  5802  000044  CFF8 F0D2          	movff	tblptru,??_isr+14
  5803  000048  CFF5 F0D3          	movff	tablat,??_isr+15
  5804                           
  5805                           ;main.c: 165: if (INT1IF) {
  5806  00004C  B0F0               	btfsc	intcon3,0,c	;volatile
  5807  00004E  D0C4               	goto	i2l4525
  5808  000050  D0E1               	goto	i2l269
  5809  000052                     i2l271:
  5810                           
  5811                           ;main.c: 168: bottle_count_disp = -1;
  5812  000052  0100               	movlb	0	; () banked
  5813  000054  69EE               	setf	_bottle_count_disp& (0+255),b
  5814  000056  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;main.c: 169: curr_state = STANDBY;
  5818  000058  0E00               	movlw	0
  5819  00005A  D0AD               	goto	L7
  5820  00005C                     i2l273:
  5821                           
  5822                           ;main.c: 172: LATAbits.LATA2 = 1;
  5823  00005C  8489               	bsf	3977,2,c	;volatile
  5824                           
  5825                           ;main.c: 173: INT0IE = 1;
  5826  00005E  88F2               	bsf	intcon,4,c	;volatile
  5827                           
  5828                           ;main.c: 174: INT2IE = 1;
  5829  000060  88F0               	bsf	intcon3,4,c	;volatile
  5830                           
  5831                           ;main.c: 175: TMR0IE = 1;
  5832  000062  8AF2               	bsf	intcon,5,c	;volatile
  5833                           
  5834                           ;main.c: 176: TMR0ON = 1;
  5835  000064  8ED5               	bsf	4053,7,c	;volatile
  5836                           
  5837                           ;main.c: 177: TMR0 = 0;
  5838  000066  0E00               	movlw	0
  5839  000068  6ED7               	movwf	4055,c	;volatile
  5840  00006A  0E00               	movlw	0
  5841  00006C  6ED6               	movwf	4054,c	;volatile
  5842                           
  5843                           ;main.c: 179: read_time();
  5844  00006E  EC51  F013         	call	_read_time	;wreg free
  5845                           
  5846                           ;main.c: 180: start_time[1] = time[1];
  5847  000072  C09F  F07B         	movff	_time+1,_start_time+1
  5848                           
  5849                           ;main.c: 181: start_time[0] = time[0];
  5850  000076  C09E  F07A         	movff	_time,_start_time
  5851                           
  5852                           ;main.c: 183: bottlequeue_head = bottlequeue_tail = 0;
  5853  00007A  0E00               	movlw	0
  5854  00007C  6E77               	movwf	_bottlequeue_tail+1,c
  5855  00007E  0E00               	movlw	0
  5856  000080  6E76               	movwf	_bottlequeue_tail,c
  5857  000082  C076  F0A5         	movff	_bottlequeue_tail,_bottlequeue_head
  5858  000086  C077  F0A6         	movff	_bottlequeue_tail+1,_bottlequeue_head+1
  5859                           
  5860                           ;main.c: 185: lcdInst(0b00000001);
  5861  00008A  0E01               	movlw	1
  5862  00008C  EC5C  F016         	call	i2_lcdInst
  5863                           
  5864                           ;main.c: 186: bottle_count_disp = -1;
  5865  000090  0100               	movlb	0	; () banked
  5866  000092  69EE               	setf	_bottle_count_disp& (0+255),b
  5867  000094  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5868                           
  5869                           ; BSR set to: 0
  5870                           ;main.c: 187: curr_state = OPERATION;
  5871  000096  0E02               	movlw	2
  5872  000098  D08E               	goto	L7
  5873  00009A                     i2l4481:
  5874                           
  5875                           ;main.c: 190: bottle_count_disp += 1;
  5876  00009A  0100               	movlb	0	; () banked
  5877  00009C  4BEE               	infsnz	_bottle_count_disp& (0+255),f,b
  5878  00009E  2BEF               	incf	(_bottle_count_disp+1)& (0+255),f,b
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;main.c: 191: curr_state = BOTTLECOUNT;
  5882  0000A0  0E05               	movlw	5
  5883  0000A2  0100               	movlb	0	; () banked
  5884  0000A4  6FC3               	movwf	_curr_state& (0+255),b
  5885  0000A6                     i2l4485:
  5886  0000A6  0E1F               	movlw	31
  5887  0000A8  1881               	xorwf	3969,w,c	;volatile
  5888  0000AA  A4D8               	btfss	status,2,c
  5889  0000AC  D0B1               	goto	i2l272
  5890  0000AE  D7FB               	goto	i2l4485
  5891  0000B0                     i2l4487:
  5892                           
  5893                           ;main.c: 195: operation_time = etime - stime;
  5894  0000B0  C07C  F0C4         	movff	_stime,??_isr
  5895  0000B4  C07D  F0C5         	movff	_stime+1,??_isr+1
  5896  0000B8  0100               	movlb	0	; () banked
  5897  0000BA  1FC4               	comf	??_isr& (0+255),f,b
  5898  0000BC  1FC5               	comf	(??_isr+1)& (0+255),f,b
  5899  0000BE  4BC4               	infsnz	??_isr& (0+255),f,b
  5900  0000C0  2BC5               	incf	(??_isr+1)& (0+255),f,b
  5901  0000C2  0100               	movlb	0	; () banked
  5902  0000C4  51B1               	movf	_etime& (0+255),w,b
  5903  0000C6  0100               	movlb	0	; () banked
  5904  0000C8  25C4               	addwf	??_isr& (0+255),w,b
  5905  0000CA  0100               	movlb	0	; () banked
  5906  0000CC  6FB7               	movwf	_operation_time& (0+255),b
  5907  0000CE  0100               	movlb	0	; () banked
  5908  0000D0  51B2               	movf	(_etime+1)& (0+255),w,b
  5909  0000D2  0100               	movlb	0	; () banked
  5910  0000D4  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  5911  0000D6  0100               	movlb	0	; () banked
  5912  0000D8  6FB8               	movwf	(_operation_time+1)& (0+255),b
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;main.c: 196: bottle_count_disp = -1;
  5916  0000DA  0100               	movlb	0	; () banked
  5917  0000DC  69EE               	setf	_bottle_count_disp& (0+255),b
  5918  0000DE  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;main.c: 197: curr_state = BOTTLETIME;
  5922  0000E0  0E06               	movlw	6
  5923  0000E2  D069               	goto	L7
  5924  0000E4                     i2l279:
  5925                           
  5926                           ;main.c: 200: bottle_count_disp = -1;
  5927  0000E4  0100               	movlb	0	; () banked
  5928  0000E6  69EE               	setf	_bottle_count_disp& (0+255),b
  5929  0000E8  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;main.c: 201: curr_state = DATETIME;
  5933  0000EA  0E04               	movlw	4
  5934  0000EC  D064               	goto	L7
  5935  0000EE                     i2l280:
  5936                           
  5937                           ;main.c: 204: LATAbits.LATA2 = 0;
  5938  0000EE  9489               	bcf	3977,2,c	;volatile
  5939                           
  5940                           ;main.c: 205: INT0IE = 0;
  5941  0000F0  98F2               	bcf	intcon,4,c	;volatile
  5942                           
  5943                           ;main.c: 206: INT2IE = 0;
  5944  0000F2  98F0               	bcf	intcon3,4,c	;volatile
  5945                           
  5946                           ;main.c: 207: TMR0IE = 0;
  5947  0000F4  9AF2               	bcf	intcon,5,c	;volatile
  5948                           
  5949                           ;main.c: 208: TMR0ON = 0;
  5950  0000F6  9ED5               	bcf	4053,7,c	;volatile
  5951                           
  5952                           ;main.c: 210: read_time();
  5953  0000F8  EC51  F013         	call	_read_time	;wreg free
  5954                           
  5955                           ;main.c: 211: end_time[1] = time[1];
  5956  0000FC  C09F  F079         	movff	_time+1,_end_time+1
  5957                           
  5958                           ;main.c: 212: end_time[0] = time[0];
  5959  000100  C09E  F078         	movff	_time,_end_time
  5960                           
  5961                           ;main.c: 213: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5962  000104  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  5963  000108  6A64               	clrf	dec_to_hex@num+1,c
  5964  00010A  EC3C  F00B         	call	_dec_to_hex	;wreg free
  5965  00010E  C063  F074         	movff	?_dec_to_hex,_isr$1354
  5966  000112  C064  F075         	movff	?_dec_to_hex+1,_isr$1354+1
  5967                           
  5968                           ;main.c: 213: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5969  000116  C074  F001         	movff	_isr$1354,i2___wmul@multiplier
  5970  00011A  C075  F002         	movff	_isr$1354+1,i2___wmul@multiplier+1
  5971  00011E  0E00               	movlw	0
  5972  000120  6E04               	movwf	i2___wmul@multiplicand+1,c
  5973  000122  0E3C               	movlw	60
  5974  000124  6E03               	movwf	i2___wmul@multiplicand,c
  5975  000126  ECE2  F015         	call	i2___wmul	;wreg free
  5976  00012A  C001  F0C4         	movff	?i2___wmul,??_isr
  5977  00012E  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  5978  000132  C07A  F063         	movff	_start_time,dec_to_hex@num
  5979  000136  6A64               	clrf	dec_to_hex@num+1,c
  5980  000138  EC3C  F00B         	call	_dec_to_hex	;wreg free
  5981  00013C  5063               	movf	?_dec_to_hex,w,c
  5982  00013E  0100               	movlb	0	; () banked
  5983  000140  25C4               	addwf	??_isr& (0+255),w,b
  5984  000142  6E7C               	movwf	_stime,c
  5985  000144  5064               	movf	?_dec_to_hex+1,w,c
  5986  000146  0100               	movlb	0	; () banked
  5987  000148  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  5988  00014A  6E7D               	movwf	_stime+1,c
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;main.c: 214: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5992  00014C  C079  F063         	movff	_end_time+1,dec_to_hex@num
  5993  000150  6A64               	clrf	dec_to_hex@num+1,c
  5994  000152  EC3C  F00B         	call	_dec_to_hex	;wreg free
  5995  000156  C063  F074         	movff	?_dec_to_hex,_isr$1354
  5996  00015A  C064  F075         	movff	?_dec_to_hex+1,_isr$1354+1
  5997                           
  5998                           ;main.c: 214: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5999  00015E  C074  F001         	movff	_isr$1354,i2___wmul@multiplier
  6000  000162  C075  F002         	movff	_isr$1354+1,i2___wmul@multiplier+1
  6001  000166  0E00               	movlw	0
  6002  000168  6E04               	movwf	i2___wmul@multiplicand+1,c
  6003  00016A  0E3C               	movlw	60
  6004  00016C  6E03               	movwf	i2___wmul@multiplicand,c
  6005  00016E  ECE2  F015         	call	i2___wmul	;wreg free
  6006  000172  C001  F0C4         	movff	?i2___wmul,??_isr
  6007  000176  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6008  00017A  C078  F063         	movff	_end_time,dec_to_hex@num
  6009  00017E  6A64               	clrf	dec_to_hex@num+1,c
  6010  000180  EC3C  F00B         	call	_dec_to_hex	;wreg free
  6011  000184  5063               	movf	?_dec_to_hex,w,c
  6012  000186  0100               	movlb	0	; () banked
  6013  000188  25C4               	addwf	??_isr& (0+255),w,b
  6014  00018A  0100               	movlb	0	; () banked
  6015  00018C  6FB1               	movwf	_etime& (0+255),b
  6016  00018E  5064               	movf	?_dec_to_hex+1,w,c
  6017  000190  0100               	movlb	0	; () banked
  6018  000192  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6019  000194  0100               	movlb	0	; () banked
  6020  000196  6FB2               	movwf	(_etime+1)& (0+255),b
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;main.c: 215: lcdInst(0b00000001);
  6024  000198  0E01               	movlw	1
  6025  00019A  EC5C  F016         	call	i2_lcdInst
  6026                           
  6027                           ;main.c: 216: bottle_count_disp = -1;
  6028  00019E  0100               	movlb	0	; () banked
  6029  0001A0  69EE               	setf	_bottle_count_disp& (0+255),b
  6030  0001A2  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;main.c: 217: curr_state = OPERATIONEND;
  6034  0001A4  0E03               	movlw	3
  6035  0001A6  D007               	goto	L7
  6036  0001A8                     i2l281:
  6037                           
  6038                           ;main.c: 220: LATAbits.LATA2 = 0;
  6039  0001A8  9489               	bcf	3977,2,c	;volatile
  6040                           
  6041                           ;main.c: 221: (INTCONbits.GIE = 0);
  6042  0001AA  9EF2               	bcf	intcon,7,c	;volatile
  6043                           
  6044                           ;main.c: 222: TMR0ON = 0;
  6045  0001AC  9ED5               	bcf	4053,7,c	;volatile
  6046                           
  6047                           ;main.c: 223: lcdInst(0b00000001);
  6048  0001AE  0E01               	movlw	1
  6049  0001B0  EC5C  F016         	call	i2_lcdInst
  6050                           
  6051                           ;main.c: 224: curr_state = EMERGENCYSTOP;
  6052  0001B4  0E01               	movlw	1
  6053  0001B6                     L7:
  6054  0001B6  0100               	movlb	0	; () banked
  6055  0001B8  6FC3               	movwf	_curr_state& (0+255),b
  6056                           
  6057                           ;main.c: 225: break;
  6058  0001BA  D02A               	goto	i2l272
  6059  0001BC                     i2l4519:
  6060                           
  6061                           ;main.c: 227: servo_rotate0(1);
  6062  0001BC  0E00               	movlw	0
  6063  0001BE  6E02               	movwf	servo_rotate0@degree+1,c
  6064  0001C0  0E01               	movlw	1
  6065  0001C2  6E01               	movwf	servo_rotate0@degree,c
  6066  0001C4  ECBF  F011         	call	_servo_rotate0	;wreg free
  6067                           
  6068                           ;main.c: 228: break;
  6069  0001C8  D023               	goto	i2l272
  6070  0001CA                     i2l4521:
  6071                           
  6072                           ;main.c: 230: servo_rotate0(2);
  6073  0001CA  0E00               	movlw	0
  6074  0001CC  6E02               	movwf	servo_rotate0@degree+1,c
  6075  0001CE  0E02               	movlw	2
  6076  0001D0  6E01               	movwf	servo_rotate0@degree,c
  6077  0001D2  ECBF  F011         	call	_servo_rotate0	;wreg free
  6078                           
  6079                           ;main.c: 232: }
  6080                           
  6081                           ;main.c: 231: break;
  6082  0001D6  D01C               	goto	i2l272
  6083  0001D8                     i2l4525:
  6084  0001D8  5081               	movf	3969,w,c	;volatile
  6085                           
  6086                           ; Switch size 1, requested type "space"
  6087                           ; Number of cases is 9, Range of values is 15 to 239
  6088                           ; switch strategies available:
  6089                           ; Name         Instructions Cycles
  6090                           ; simple_byte           28    15 (average)
  6091                           ;	Chosen strategy is simple_byte
  6092  0001DA  0A0F               	xorlw	15	; case 15
  6093  0001DC  B4D8               	btfsc	status,2,c
  6094  0001DE  D73E               	goto	i2l273
  6095  0001E0  0A10               	xorlw	16	; case 31
  6096  0001E2  B4D8               	btfsc	status,2,c
  6097  0001E4  D75A               	goto	i2l4481
  6098  0001E6  0A30               	xorlw	48	; case 47
  6099  0001E8  B4D8               	btfsc	status,2,c
  6100  0001EA  D762               	goto	i2l4487
  6101  0001EC  0A10               	xorlw	16	; case 63
  6102  0001EE  B4D8               	btfsc	status,2,c
  6103  0001F0  D779               	goto	i2l279
  6104  0001F2  0A70               	xorlw	112	; case 79
  6105  0001F4  B4D8               	btfsc	status,2,c
  6106  0001F6  D77B               	goto	i2l280
  6107  0001F8  0A30               	xorlw	48	; case 127
  6108  0001FA  B4D8               	btfsc	status,2,c
  6109  0001FC  D7DF               	goto	i2l4519
  6110  0001FE  0AC0               	xorlw	192	; case 191
  6111  000200  B4D8               	btfsc	status,2,c
  6112  000202  D7E3               	goto	i2l4521
  6113  000204  0A70               	xorlw	112	; case 207
  6114  000206  B4D8               	btfsc	status,2,c
  6115  000208  D7CF               	goto	i2l281
  6116  00020A  0A20               	xorlw	32	; case 239
  6117  00020C  B4D8               	btfsc	status,2,c
  6118  00020E  D721               	goto	i2l271
  6119  000210                     i2l272:
  6120                           
  6121                           ;main.c: 233: INT1IF = 0;
  6122  000210  90F0               	bcf	intcon3,0,c	;volatile
  6123                           
  6124                           ;main.c: 234: }
  6125  000212  D247               	goto	i2l316
  6126  000214                     i2l269:
  6127                           
  6128                           ;main.c: 235: else if (INT0IF){
  6129  000214  A2F2               	btfss	intcon,1,c	;volatile
  6130  000216  D10D               	goto	i2l285
  6131                           
  6132                           ;main.c: 236: if(PORTAbits.RA3){
  6133  000218  A680               	btfss	3968,3,c	;volatile
  6134  00021A  D109               	goto	i2l4581
  6135                           
  6136                           ;main.c: 237: read_colorsensor();
  6137  00021C  EC03  F00E         	call	i2_read_colorsensor	;wreg free
  6138                           
  6139                           ;main.c: 238: if (color[0]>10000 && color[1]>10000 && color[2]>10000 && color[3]>10000) 
      +                          bottlequeue[bottlequeue_tail] = 2;
  6140  000220  0100               	movlb	0	; () banked
  6141  000222  BF97               	btfsc	(_color+1)& (0+255),7,b
  6142  000224  D034               	goto	i2l4541
  6143  000226  0E11               	movlw	17
  6144  000228  0100               	movlb	0	; () banked
  6145  00022A  5D96               	subwf	_color& (0+255),w,b
  6146  00022C  0E27               	movlw	39
  6147  00022E  0100               	movlb	0	; () banked
  6148  000230  5997               	subwfb	(_color+1)& (0+255),w,b
  6149  000232  A0D8               	btfss	status,0,c
  6150  000234  D02C               	goto	i2l4541
  6151                           
  6152                           ; BSR set to: 0
  6153  000236  0100               	movlb	0	; () banked
  6154  000238  BF99               	btfsc	(_color+3)& (0+255),7,b
  6155  00023A  D029               	goto	i2l4541
  6156  00023C  0E11               	movlw	17
  6157  00023E  0100               	movlb	0	; () banked
  6158  000240  5D98               	subwf	(_color+2)& (0+255),w,b
  6159  000242  0E27               	movlw	39
  6160  000244  0100               	movlb	0	; () banked
  6161  000246  5999               	subwfb	(_color+3)& (0+255),w,b
  6162  000248  A0D8               	btfss	status,0,c
  6163  00024A  D021               	goto	i2l4541
  6164                           
  6165                           ; BSR set to: 0
  6166  00024C  0100               	movlb	0	; () banked
  6167  00024E  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6168  000250  D01E               	goto	i2l4541
  6169  000252  0E11               	movlw	17
  6170  000254  0100               	movlb	0	; () banked
  6171  000256  5D9A               	subwf	(_color+4)& (0+255),w,b
  6172  000258  0E27               	movlw	39
  6173  00025A  0100               	movlb	0	; () banked
  6174  00025C  599B               	subwfb	(_color+5)& (0+255),w,b
  6175  00025E  A0D8               	btfss	status,0,c
  6176  000260  D016               	goto	i2l4541
  6177                           
  6178                           ; BSR set to: 0
  6179  000262  0100               	movlb	0	; () banked
  6180  000264  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6181  000266  D013               	goto	i2l4541
  6182  000268  0E11               	movlw	17
  6183  00026A  0100               	movlb	0	; () banked
  6184  00026C  5D9C               	subwf	(_color+6)& (0+255),w,b
  6185  00026E  0E27               	movlw	39
  6186  000270  0100               	movlb	0	; () banked
  6187  000272  599D               	subwfb	(_color+7)& (0+255),w,b
  6188  000274  A0D8               	btfss	status,0,c
  6189  000276  D00B               	goto	i2l4541
  6190                           
  6191                           ; BSR set to: 0
  6192  000278  90D8               	bcf	status,0,c
  6193  00027A  3476               	rlcf	_bottlequeue_tail,w,c
  6194  00027C  6ED9               	movwf	fsr2l,c
  6195  00027E  3477               	rlcf	_bottlequeue_tail+1,w,c
  6196  000280  6EDA               	movwf	fsr2h,c
  6197  000282  0E80               	movlw	low _bottlequeue
  6198  000284  26D9               	addwf	fsr2l,f,c
  6199  000286  0E00               	movlw	high _bottlequeue
  6200  000288  22DA               	addwfc	fsr2h,f,c
  6201  00028A  0E02               	movlw	2
  6202  00028C  D0A4               	goto	L10
  6203  00028E                     i2l4541:
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;main.c: 239: else if (color[0]<3000 && color[1]<1100 && color[2]<1100 && color[3]<1200)
      +                           bottlequeue[bottlequeue_tail] = 4;
  6207  00028E  0100               	movlb	0	; () banked
  6208  000290  BF97               	btfsc	(_color+1)& (0+255),7,b
  6209  000292  D008               	goto	i2l4543
  6210  000294  0EB8               	movlw	184
  6211  000296  0100               	movlb	0	; () banked
  6212  000298  5D96               	subwf	_color& (0+255),w,b
  6213  00029A  0E0B               	movlw	11
  6214  00029C  0100               	movlb	0	; () banked
  6215  00029E  5997               	subwfb	(_color+1)& (0+255),w,b
  6216  0002A0  B0D8               	btfsc	status,0,c
  6217  0002A2  D02C               	goto	i2l4551
  6218  0002A4                     i2l4543:
  6219                           
  6220                           ; BSR set to: 0
  6221  0002A4  0100               	movlb	0	; () banked
  6222  0002A6  BF99               	btfsc	(_color+3)& (0+255),7,b
  6223  0002A8  D008               	goto	i2l4545
  6224  0002AA  0E4C               	movlw	76
  6225  0002AC  0100               	movlb	0	; () banked
  6226  0002AE  5D98               	subwf	(_color+2)& (0+255),w,b
  6227  0002B0  0E04               	movlw	4
  6228  0002B2  0100               	movlb	0	; () banked
  6229  0002B4  5999               	subwfb	(_color+3)& (0+255),w,b
  6230  0002B6  B0D8               	btfsc	status,0,c
  6231  0002B8  D021               	goto	i2l4551
  6232  0002BA                     i2l4545:
  6233                           
  6234                           ; BSR set to: 0
  6235  0002BA  0100               	movlb	0	; () banked
  6236  0002BC  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6237  0002BE  D008               	goto	i2l4547
  6238  0002C0  0E4C               	movlw	76
  6239  0002C2  0100               	movlb	0	; () banked
  6240  0002C4  5D9A               	subwf	(_color+4)& (0+255),w,b
  6241  0002C6  0E04               	movlw	4
  6242  0002C8  0100               	movlb	0	; () banked
  6243  0002CA  599B               	subwfb	(_color+5)& (0+255),w,b
  6244  0002CC  B0D8               	btfsc	status,0,c
  6245  0002CE  D016               	goto	i2l4551
  6246  0002D0                     i2l4547:
  6247                           
  6248                           ; BSR set to: 0
  6249  0002D0  0100               	movlb	0	; () banked
  6250  0002D2  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6251  0002D4  D008               	goto	i2l4549
  6252  0002D6  0EB0               	movlw	176
  6253  0002D8  0100               	movlb	0	; () banked
  6254  0002DA  5D9C               	subwf	(_color+6)& (0+255),w,b
  6255  0002DC  0E04               	movlw	4
  6256  0002DE  0100               	movlb	0	; () banked
  6257  0002E0  599D               	subwfb	(_color+7)& (0+255),w,b
  6258  0002E2  B0D8               	btfsc	status,0,c
  6259  0002E4  D00B               	goto	i2l4551
  6260  0002E6                     i2l4549:
  6261                           
  6262                           ; BSR set to: 0
  6263  0002E6  90D8               	bcf	status,0,c
  6264  0002E8  3476               	rlcf	_bottlequeue_tail,w,c
  6265  0002EA  6ED9               	movwf	fsr2l,c
  6266  0002EC  3477               	rlcf	_bottlequeue_tail+1,w,c
  6267  0002EE  6EDA               	movwf	fsr2h,c
  6268  0002F0  0E80               	movlw	low _bottlequeue
  6269  0002F2  26D9               	addwf	fsr2l,f,c
  6270  0002F4  0E00               	movlw	high _bottlequeue
  6271  0002F6  22DA               	addwfc	fsr2h,f,c
  6272  0002F8  0E04               	movlw	4
  6273  0002FA  D06D               	goto	L10
  6274  0002FC                     i2l4551:
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;main.c: 240: else if (color[0]<5200 && color[1]<3200 && color[3]<1400 && color[3]<1300)
      +                           bottlequeue[bottlequeue_tail] = 0;
  6278  0002FC  0100               	movlb	0	; () banked
  6279  0002FE  BF97               	btfsc	(_color+1)& (0+255),7,b
  6280  000300  D008               	goto	i2l4553
  6281  000302  0E50               	movlw	80
  6282  000304  0100               	movlb	0	; () banked
  6283  000306  5D96               	subwf	_color& (0+255),w,b
  6284  000308  0E14               	movlw	20
  6285  00030A  0100               	movlb	0	; () banked
  6286  00030C  5997               	subwfb	(_color+1)& (0+255),w,b
  6287  00030E  B0D8               	btfsc	status,0,c
  6288  000310  D02C               	goto	i2l4561
  6289  000312                     i2l4553:
  6290                           
  6291                           ; BSR set to: 0
  6292  000312  0100               	movlb	0	; () banked
  6293  000314  BF99               	btfsc	(_color+3)& (0+255),7,b
  6294  000316  D008               	goto	i2l4555
  6295  000318  0E80               	movlw	128
  6296  00031A  0100               	movlb	0	; () banked
  6297  00031C  5D98               	subwf	(_color+2)& (0+255),w,b
  6298  00031E  0E0C               	movlw	12
  6299  000320  0100               	movlb	0	; () banked
  6300  000322  5999               	subwfb	(_color+3)& (0+255),w,b
  6301  000324  B0D8               	btfsc	status,0,c
  6302  000326  D021               	goto	i2l4561
  6303  000328                     i2l4555:
  6304                           
  6305                           ; BSR set to: 0
  6306  000328  0100               	movlb	0	; () banked
  6307  00032A  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6308  00032C  D008               	goto	i2l4557
  6309  00032E  0E78               	movlw	120
  6310  000330  0100               	movlb	0	; () banked
  6311  000332  5D9C               	subwf	(_color+6)& (0+255),w,b
  6312  000334  0E05               	movlw	5
  6313  000336  0100               	movlb	0	; () banked
  6314  000338  599D               	subwfb	(_color+7)& (0+255),w,b
  6315  00033A  B0D8               	btfsc	status,0,c
  6316  00033C  D016               	goto	i2l4561
  6317  00033E                     i2l4557:
  6318                           
  6319                           ; BSR set to: 0
  6320  00033E  0100               	movlb	0	; () banked
  6321  000340  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6322  000342  D008               	goto	i2l4559
  6323  000344  0E14               	movlw	20
  6324  000346  0100               	movlb	0	; () banked
  6325  000348  5D9C               	subwf	(_color+6)& (0+255),w,b
  6326  00034A  0E05               	movlw	5
  6327  00034C  0100               	movlb	0	; () banked
  6328  00034E  599D               	subwfb	(_color+7)& (0+255),w,b
  6329  000350  B0D8               	btfsc	status,0,c
  6330  000352  D00B               	goto	i2l4561
  6331  000354                     i2l4559:
  6332                           
  6333                           ; BSR set to: 0
  6334  000354  90D8               	bcf	status,0,c
  6335  000356  3476               	rlcf	_bottlequeue_tail,w,c
  6336  000358  6ED9               	movwf	fsr2l,c
  6337  00035A  3477               	rlcf	_bottlequeue_tail+1,w,c
  6338  00035C  6EDA               	movwf	fsr2h,c
  6339  00035E  0E80               	movlw	low _bottlequeue
  6340  000360  26D9               	addwf	fsr2l,f,c
  6341  000362  0E00               	movlw	high _bottlequeue
  6342  000364  22DA               	addwfc	fsr2h,f,c
  6343  000366  0E00               	movlw	0
  6344  000368  D036               	goto	L10
  6345  00036A                     i2l4561:
  6346                           
  6347                           ; BSR set to: 0
  6348                           ;main.c: 241: else if (color[0]>10000 && color[1]>3600 && color[2]>3900 && color[3]>3400
      +                          ) bottlequeue[bottlequeue_tail] = 6;
  6349  00036A  0100               	movlb	0	; () banked
  6350  00036C  BF97               	btfsc	(_color+1)& (0+255),7,b
  6351  00036E  D036               	goto	i2l4571
  6352  000370  0E11               	movlw	17
  6353  000372  0100               	movlb	0	; () banked
  6354  000374  5D96               	subwf	_color& (0+255),w,b
  6355  000376  0E27               	movlw	39
  6356  000378  0100               	movlb	0	; () banked
  6357  00037A  5997               	subwfb	(_color+1)& (0+255),w,b
  6358  00037C  A0D8               	btfss	status,0,c
  6359  00037E  D02E               	goto	i2l4571
  6360                           
  6361                           ; BSR set to: 0
  6362  000380  0100               	movlb	0	; () banked
  6363  000382  BF99               	btfsc	(_color+3)& (0+255),7,b
  6364  000384  D02B               	goto	i2l4571
  6365  000386  0E11               	movlw	17
  6366  000388  0100               	movlb	0	; () banked
  6367  00038A  5D98               	subwf	(_color+2)& (0+255),w,b
  6368  00038C  0E0E               	movlw	14
  6369  00038E  0100               	movlb	0	; () banked
  6370  000390  5999               	subwfb	(_color+3)& (0+255),w,b
  6371  000392  A0D8               	btfss	status,0,c
  6372  000394  D023               	goto	i2l4571
  6373                           
  6374                           ; BSR set to: 0
  6375  000396  0100               	movlb	0	; () banked
  6376  000398  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6377  00039A  D020               	goto	i2l4571
  6378  00039C  0E3D               	movlw	61
  6379  00039E  0100               	movlb	0	; () banked
  6380  0003A0  5D9A               	subwf	(_color+4)& (0+255),w,b
  6381  0003A2  0E0F               	movlw	15
  6382  0003A4  0100               	movlb	0	; () banked
  6383  0003A6  599B               	subwfb	(_color+5)& (0+255),w,b
  6384  0003A8  A0D8               	btfss	status,0,c
  6385  0003AA  D018               	goto	i2l4571
  6386                           
  6387                           ; BSR set to: 0
  6388  0003AC  0100               	movlb	0	; () banked
  6389  0003AE  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6390  0003B0  D015               	goto	i2l4571
  6391  0003B2  0E49               	movlw	73
  6392  0003B4  0100               	movlb	0	; () banked
  6393  0003B6  5D9C               	subwf	(_color+6)& (0+255),w,b
  6394  0003B8  0E0D               	movlw	13
  6395  0003BA  0100               	movlb	0	; () banked
  6396  0003BC  599D               	subwfb	(_color+7)& (0+255),w,b
  6397  0003BE  A0D8               	btfss	status,0,c
  6398  0003C0  D00D               	goto	i2l4571
  6399                           
  6400                           ; BSR set to: 0
  6401  0003C2  90D8               	bcf	status,0,c
  6402  0003C4  3476               	rlcf	_bottlequeue_tail,w,c
  6403  0003C6  6ED9               	movwf	fsr2l,c
  6404  0003C8  3477               	rlcf	_bottlequeue_tail+1,w,c
  6405  0003CA  6EDA               	movwf	fsr2h,c
  6406  0003CC  0E80               	movlw	low _bottlequeue
  6407  0003CE  26D9               	addwf	fsr2l,f,c
  6408  0003D0  0E00               	movlw	high _bottlequeue
  6409  0003D2  22DA               	addwfc	fsr2h,f,c
  6410  0003D4  0E06               	movlw	6
  6411  0003D6                     L10:
  6412  0003D6  6EDE               	movwf	postinc2,c
  6413  0003D8  0E00               	movlw	0
  6414  0003DA  6EDD               	movwf	postdec2,c
  6415  0003DC                     i2l4571:
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;main.c: 242: _delay((unsigned long)((150)*(10000000/4000.0)));
  6419  0003DC  0E02               	movlw	2
  6420  0003DE  0100               	movlb	0	; () banked
  6421  0003E0  6FC5               	movwf	(??_isr+1)& (0+255),b
  6422  0003E2  0EE7               	movlw	231
  6423  0003E4  0100               	movlb	0	; () banked
  6424  0003E6  6FC4               	movwf	??_isr& (0+255),b
  6425  0003E8  0E00               	movlw	0
  6426  0003EA                     i2u482_47:
  6427  0003EA  2EE8               	decfsz	wreg,f,c
  6428  0003EC  D7FE               	bra	i2u482_47
  6429  0003EE  2FC4               	decfsz	??_isr& (0+255),f,b
  6430  0003F0  D7FC               	bra	i2u482_47
  6431  0003F2  2FC5               	decfsz	(??_isr+1)& (0+255),f,b
  6432  0003F4  D7FA               	bra	i2u482_47
  6433  0003F6  F000               	nop	
  6434                           
  6435                           ;main.c: 243: read_colorsensor();
  6436  0003F8  EC03  F00E         	call	i2_read_colorsensor	;wreg free
  6437                           
  6438                           ;main.c: 244: if (color[0]>1000) bottlequeue[bottlequeue_tail] += 1;
  6439  0003FC  0100               	movlb	0	; () banked
  6440  0003FE  BF97               	btfsc	(_color+1)& (0+255),7,b
  6441  000400  D014               	goto	i2l4579
  6442  000402  0EE9               	movlw	233
  6443  000404  0100               	movlb	0	; () banked
  6444  000406  5D96               	subwf	_color& (0+255),w,b
  6445  000408  0E03               	movlw	3
  6446  00040A  0100               	movlb	0	; () banked
  6447  00040C  5997               	subwfb	(_color+1)& (0+255),w,b
  6448  00040E  A0D8               	btfss	status,0,c
  6449  000410  D00C               	goto	i2l4579
  6450                           
  6451                           ; BSR set to: 0
  6452  000412  90D8               	bcf	status,0,c
  6453  000414  3476               	rlcf	_bottlequeue_tail,w,c
  6454  000416  6ED9               	movwf	fsr2l,c
  6455  000418  3477               	rlcf	_bottlequeue_tail+1,w,c
  6456  00041A  6EDA               	movwf	fsr2h,c
  6457  00041C  0E80               	movlw	low _bottlequeue
  6458  00041E  26D9               	addwf	fsr2l,f,c
  6459  000420  0E00               	movlw	high _bottlequeue
  6460  000422  22DA               	addwfc	fsr2h,f,c
  6461  000424  2ADE               	incf	postinc2,f,c
  6462  000426  0E00               	movlw	0
  6463  000428  22DD               	addwfc	postdec2,f,c
  6464  00042A                     i2l4579:
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;main.c: 245: bottlequeue_tail += 1;
  6468  00042A  4A76               	infsnz	_bottlequeue_tail,f,c
  6469  00042C  2A77               	incf	_bottlequeue_tail+1,f,c
  6470  00042E                     i2l4581:
  6471                           
  6472                           ;main.c: 246: }
  6473                           ;main.c: 247: INT0IF = 0;
  6474  00042E  92F2               	bcf	intcon,1,c	;volatile
  6475                           
  6476                           ;main.c: 248: }
  6477  000430  D138               	goto	i2l316
  6478  000432                     i2l285:
  6479                           
  6480                           ;main.c: 249: else if (INT2IF){
  6481  000432  A2F0               	btfss	intcon3,1,c	;volatile
  6482  000434  D0BD               	goto	i2l296
  6483                           
  6484                           ;main.c: 250: if(PORTAbits.RA4){
  6485  000436  A880               	btfss	3968,4,c	;volatile
  6486  000438  D0B9               	goto	i2l297
  6487                           
  6488                           ;main.c: 251: nodedata = bottlequeue[bottlequeue_head];
  6489  00043A  90D8               	bcf	status,0,c
  6490  00043C  0100               	movlb	0	; () banked
  6491  00043E  35A5               	rlcf	_bottlequeue_head& (0+255),w,b
  6492  000440  6ED9               	movwf	fsr2l,c
  6493  000442  0100               	movlb	0	; () banked
  6494  000444  35A6               	rlcf	(_bottlequeue_head+1)& (0+255),w,b
  6495  000446  6EDA               	movwf	fsr2h,c
  6496  000448  0E80               	movlw	low _bottlequeue
  6497  00044A  26D9               	addwf	fsr2l,f,c
  6498  00044C  0E00               	movlw	high _bottlequeue
  6499  00044E  22DA               	addwfc	fsr2h,f,c
  6500  000450  CFDE F0B3          	movff	postinc2,_nodedata
  6501  000454  CFDD F0B4          	movff	postdec2,_nodedata+1
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;main.c: 252: bottlequeue_head += 1;
  6505  000458  0100               	movlb	0	; () banked
  6506  00045A  4BA5               	infsnz	_bottlequeue_head& (0+255),f,b
  6507  00045C  2BA6               	incf	(_bottlequeue_head+1)& (0+255),f,b
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;main.c: 253: total_bottle_count += 1;
  6511  00045E  0100               	movlb	0	; () banked
  6512  000460  4BB9               	infsnz	_total_bottle_count& (0+255),f,b
  6513  000462  2BBA               	incf	(_total_bottle_count+1)& (0+255),f,b
  6514                           
  6515                           ;main.c: 254: switch (nodedata){
  6516  000464  D080               	goto	i2l4641
  6517  000466                     i2l4591:
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;main.c: 256: servo_rotate0(0);
  6521  000466  0E00               	movlw	0
  6522  000468  6E02               	movwf	servo_rotate0@degree+1,c
  6523  00046A  0E00               	movlw	0
  6524  00046C  6E01               	movwf	servo_rotate0@degree,c
  6525  00046E  ECBF  F011         	call	_servo_rotate0	;wreg free
  6526                           
  6527                           ;main.c: 257: servo_rotate2(0);
  6528  000472  0E00               	movlw	0
  6529  000474  6E10               	movwf	servo_rotate2@degree+1,c
  6530  000476  0E00               	movlw	0
  6531  000478  6E0F               	movwf	servo_rotate2@degree,c
  6532  00047A  EC63  F010         	call	_servo_rotate2	;wreg free
  6533                           
  6534                           ;main.c: 258: yopcaplbl_count += 1;
  6535  00047E  0100               	movlb	0	; () banked
  6536  000480  4BBF               	infsnz	_yopcaplbl_count& (0+255),f,b
  6537  000482  2BC0               	incf	(_yopcaplbl_count+1)& (0+255),f,b
  6538                           
  6539                           ;main.c: 259: break;
  6540  000484  D093               	goto	i2l297
  6541  000486                     i2l4597:
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;main.c: 261: servo_rotate0(0);
  6545  000486  0E00               	movlw	0
  6546  000488  6E02               	movwf	servo_rotate0@degree+1,c
  6547  00048A  0E00               	movlw	0
  6548  00048C  6E01               	movwf	servo_rotate0@degree,c
  6549  00048E  ECBF  F011         	call	_servo_rotate0	;wreg free
  6550                           
  6551                           ;main.c: 262: servo_rotate2(0);
  6552  000492  0E00               	movlw	0
  6553  000494  6E10               	movwf	servo_rotate2@degree+1,c
  6554  000496  0E00               	movlw	0
  6555  000498  6E0F               	movwf	servo_rotate2@degree,c
  6556  00049A  EC63  F010         	call	_servo_rotate2	;wreg free
  6557                           
  6558                           ;main.c: 263: yopcap_count += 1;
  6559  00049E  0100               	movlb	0	; () banked
  6560  0004A0  4BBD               	infsnz	_yopcap_count& (0+255),f,b
  6561  0004A2  2BBE               	incf	(_yopcap_count+1)& (0+255),f,b
  6562                           
  6563                           ;main.c: 264: break;
  6564  0004A4  D083               	goto	i2l297
  6565  0004A6                     i2l4603:
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;main.c: 266: servo_rotate0(0);
  6569  0004A6  0E00               	movlw	0
  6570  0004A8  6E02               	movwf	servo_rotate0@degree+1,c
  6571  0004AA  0E00               	movlw	0
  6572  0004AC  6E01               	movwf	servo_rotate0@degree,c
  6573  0004AE  ECBF  F011         	call	_servo_rotate0	;wreg free
  6574                           
  6575                           ;main.c: 267: servo_rotate2(120);
  6576  0004B2  0E00               	movlw	0
  6577  0004B4  6E10               	movwf	servo_rotate2@degree+1,c
  6578  0004B6  0E78               	movlw	120
  6579  0004B8  6E0F               	movwf	servo_rotate2@degree,c
  6580  0004BA  EC63  F010         	call	_servo_rotate2	;wreg free
  6581                           
  6582                           ;main.c: 268: yoplbl_count += 1;
  6583  0004BE  0100               	movlb	0	; () banked
  6584  0004C0  4BC1               	infsnz	_yoplbl_count& (0+255),f,b
  6585  0004C2  2BC2               	incf	(_yoplbl_count+1)& (0+255),f,b
  6586                           
  6587                           ;main.c: 269: break;
  6588  0004C4  D073               	goto	i2l297
  6589  0004C6                     i2l4609:
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;main.c: 271: servo_rotate0(0);
  6593  0004C6  0E00               	movlw	0
  6594  0004C8  6E02               	movwf	servo_rotate0@degree+1,c
  6595  0004CA  0E00               	movlw	0
  6596  0004CC  6E01               	movwf	servo_rotate0@degree,c
  6597  0004CE  ECBF  F011         	call	_servo_rotate0	;wreg free
  6598                           
  6599                           ;main.c: 272: servo_rotate2(120);
  6600  0004D2  0E00               	movlw	0
  6601  0004D4  6E10               	movwf	servo_rotate2@degree+1,c
  6602  0004D6  0E78               	movlw	120
  6603  0004D8  6E0F               	movwf	servo_rotate2@degree,c
  6604  0004DA  EC63  F010         	call	_servo_rotate2	;wreg free
  6605                           
  6606                           ;main.c: 273: yop_count += 1;
  6607  0004DE  0100               	movlb	0	; () banked
  6608  0004E0  4BBB               	infsnz	_yop_count& (0+255),f,b
  6609  0004E2  2BBC               	incf	(_yop_count+1)& (0+255),f,b
  6610                           
  6611                           ;main.c: 274: break;
  6612  0004E4  D063               	goto	i2l297
  6613  0004E6                     i2l4615:
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;main.c: 276: servo_rotate0(120);
  6617  0004E6  0E00               	movlw	0
  6618  0004E8  6E02               	movwf	servo_rotate0@degree+1,c
  6619  0004EA  0E78               	movlw	120
  6620  0004EC  6E01               	movwf	servo_rotate0@degree,c
  6621  0004EE  ECBF  F011         	call	_servo_rotate0	;wreg free
  6622                           
  6623                           ;main.c: 277: servo_rotate1(0);
  6624  0004F2  0E00               	movlw	0
  6625  0004F4  6E10               	movwf	servo_rotate1@degree+1,c
  6626  0004F6  0E00               	movlw	0
  6627  0004F8  6E0F               	movwf	servo_rotate1@degree,c
  6628  0004FA  ECBD  F010         	call	_servo_rotate1	;wreg free
  6629                           
  6630                           ;main.c: 278: eskacaplbl_count += 1;
  6631  0004FE  0100               	movlb	0	; () banked
  6632  000500  4BAD               	infsnz	_eskacaplbl_count& (0+255),f,b
  6633  000502  2BAE               	incf	(_eskacaplbl_count+1)& (0+255),f,b
  6634                           
  6635                           ;main.c: 279: break;
  6636  000504  D053               	goto	i2l297
  6637  000506                     i2l4621:
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;main.c: 281: servo_rotate0(120);
  6641  000506  0E00               	movlw	0
  6642  000508  6E02               	movwf	servo_rotate0@degree+1,c
  6643  00050A  0E78               	movlw	120
  6644  00050C  6E01               	movwf	servo_rotate0@degree,c
  6645  00050E  ECBF  F011         	call	_servo_rotate0	;wreg free
  6646                           
  6647                           ;main.c: 282: servo_rotate1(0);
  6648  000512  0E00               	movlw	0
  6649  000514  6E10               	movwf	servo_rotate1@degree+1,c
  6650  000516  0E00               	movlw	0
  6651  000518  6E0F               	movwf	servo_rotate1@degree,c
  6652  00051A  ECBD  F010         	call	_servo_rotate1	;wreg free
  6653                           
  6654                           ;main.c: 283: eskacap_count += 1;
  6655  00051E  0100               	movlb	0	; () banked
  6656  000520  4BAB               	infsnz	_eskacap_count& (0+255),f,b
  6657  000522  2BAC               	incf	(_eskacap_count+1)& (0+255),f,b
  6658                           
  6659                           ;main.c: 284: break;
  6660  000524  D043               	goto	i2l297
  6661  000526                     i2l4627:
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;main.c: 286: servo_rotate0(120);
  6665  000526  0E00               	movlw	0
  6666  000528  6E02               	movwf	servo_rotate0@degree+1,c
  6667  00052A  0E78               	movlw	120
  6668  00052C  6E01               	movwf	servo_rotate0@degree,c
  6669  00052E  ECBF  F011         	call	_servo_rotate0	;wreg free
  6670                           
  6671                           ;main.c: 287: servo_rotate1(120);
  6672  000532  0E00               	movlw	0
  6673  000534  6E10               	movwf	servo_rotate1@degree+1,c
  6674  000536  0E78               	movlw	120
  6675  000538  6E0F               	movwf	servo_rotate1@degree,c
  6676  00053A  ECBD  F010         	call	_servo_rotate1	;wreg free
  6677                           
  6678                           ;main.c: 288: eskalbl_count += 1;
  6679  00053E  0100               	movlb	0	; () banked
  6680  000540  4BAF               	infsnz	_eskalbl_count& (0+255),f,b
  6681  000542  2BB0               	incf	(_eskalbl_count+1)& (0+255),f,b
  6682                           
  6683                           ;main.c: 289: break;
  6684  000544  D033               	goto	i2l297
  6685  000546                     i2l4633:
  6686                           
  6687                           ; BSR set to: 0
  6688                           ;main.c: 291: servo_rotate0(120);
  6689  000546  0E00               	movlw	0
  6690  000548  6E02               	movwf	servo_rotate0@degree+1,c
  6691  00054A  0E78               	movlw	120
  6692  00054C  6E01               	movwf	servo_rotate0@degree,c
  6693  00054E  ECBF  F011         	call	_servo_rotate0	;wreg free
  6694                           
  6695                           ;main.c: 292: servo_rotate1(120);
  6696  000552  0E00               	movlw	0
  6697  000554  6E10               	movwf	servo_rotate1@degree+1,c
  6698  000556  0E78               	movlw	120
  6699  000558  6E0F               	movwf	servo_rotate1@degree,c
  6700  00055A  ECBD  F010         	call	_servo_rotate1	;wreg free
  6701                           
  6702                           ;main.c: 293: eska_count += 1;
  6703  00055E  0100               	movlb	0	; () banked
  6704  000560  4BA9               	infsnz	_eska_count& (0+255),f,b
  6705  000562  2BAA               	incf	(_eska_count+1)& (0+255),f,b
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;main.c: 295: }
  6709                           
  6710                           ;main.c: 294: break;
  6711  000564  D023               	goto	i2l297
  6712  000566                     i2l4641:
  6713                           
  6714                           ; BSR set to: 0
  6715  000566  C0B3  F0C4         	movff	_nodedata,??_isr
  6716  00056A  C0B4  F0C5         	movff	_nodedata+1,??_isr+1
  6717                           
  6718                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6719                           ; Switch size 1, requested type "space"
  6720                           ; Number of cases is 1, Range of values is 0 to 0
  6721                           ; switch strategies available:
  6722                           ; Name         Instructions Cycles
  6723                           ; simple_byte            4     3 (average)
  6724                           ;	Chosen strategy is simple_byte
  6725  00056E  0100               	movlb	0	; () banked
  6726  000570  51C5               	movf	(??_isr+1)& (0+255),w,b
  6727  000572  0A00               	xorlw	0	; case 0
  6728  000574  A4D8               	btfss	status,2,c
  6729  000576  D01A               	goto	i2l297
  6730                           
  6731                           ; BSR set to: 0
  6732                           ; Switch size 1, requested type "space"
  6733                           ; Number of cases is 8, Range of values is 0 to 7
  6734                           ; switch strategies available:
  6735                           ; Name         Instructions Cycles
  6736                           ; simple_byte           25    13 (average)
  6737                           ;	Chosen strategy is simple_byte
  6738  000578  0100               	movlb	0	; () banked
  6739  00057A  51C4               	movf	??_isr& (0+255),w,b
  6740  00057C  0A00               	xorlw	0	; case 0
  6741  00057E  B4D8               	btfsc	status,2,c
  6742  000580  D772               	goto	i2l4591
  6743  000582  0A01               	xorlw	1	; case 1
  6744  000584  B4D8               	btfsc	status,2,c
  6745  000586  D77F               	goto	i2l4597
  6746  000588  0A03               	xorlw	3	; case 2
  6747  00058A  B4D8               	btfsc	status,2,c
  6748  00058C  D78C               	goto	i2l4603
  6749  00058E  0A01               	xorlw	1	; case 3
  6750  000590  B4D8               	btfsc	status,2,c
  6751  000592  D799               	goto	i2l4609
  6752  000594  0A07               	xorlw	7	; case 4
  6753  000596  B4D8               	btfsc	status,2,c
  6754  000598  D7A6               	goto	i2l4615
  6755  00059A  0A01               	xorlw	1	; case 5
  6756  00059C  B4D8               	btfsc	status,2,c
  6757  00059E  D7B3               	goto	i2l4621
  6758  0005A0  0A03               	xorlw	3	; case 6
  6759  0005A2  B4D8               	btfsc	status,2,c
  6760  0005A4  D7C0               	goto	i2l4627
  6761  0005A6  0A01               	xorlw	1	; case 7
  6762  0005A8  B4D8               	btfsc	status,2,c
  6763  0005AA  D7CD               	goto	i2l4633
  6764  0005AC                     i2l297:
  6765                           
  6766                           ;main.c: 296: }
  6767                           ;main.c: 297: INT2IF = 0;
  6768  0005AC  92F0               	bcf	intcon3,1,c	;volatile
  6769                           
  6770                           ;main.c: 298: }
  6771  0005AE  D079               	goto	i2l316
  6772  0005B0                     i2l296:
  6773                           
  6774                           ;main.c: 299: else if (TMR0IF){
  6775  0005B0  A4F2               	btfss	intcon,2,c	;volatile
  6776  0005B2  D05D               	goto	i2l4667
  6777                           
  6778                           ;main.c: 300: LATAbits.LATA2 = 0;
  6779  0005B4  9489               	bcf	3977,2,c	;volatile
  6780                           
  6781                           ;main.c: 301: TMR0ON = 0;
  6782  0005B6  9ED5               	bcf	4053,7,c	;volatile
  6783                           
  6784                           ;main.c: 302: read_time();
  6785  0005B8  EC51  F013         	call	_read_time	;wreg free
  6786                           
  6787                           ;main.c: 303: end_time[1] = time[1];
  6788  0005BC  C09F  F079         	movff	_time+1,_end_time+1
  6789                           
  6790                           ;main.c: 304: end_time[0] = time[0];
  6791  0005C0  C09E  F078         	movff	_time,_end_time
  6792                           
  6793                           ;main.c: 305: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6794  0005C4  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  6795  0005C8  6A64               	clrf	dec_to_hex@num+1,c
  6796  0005CA  EC3C  F00B         	call	_dec_to_hex	;wreg free
  6797  0005CE  C063  F074         	movff	?_dec_to_hex,_isr$1354
  6798  0005D2  C064  F075         	movff	?_dec_to_hex+1,_isr$1354+1
  6799                           
  6800                           ;main.c: 305: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6801  0005D6  C074  F001         	movff	_isr$1354,i2___wmul@multiplier
  6802  0005DA  C075  F002         	movff	_isr$1354+1,i2___wmul@multiplier+1
  6803  0005DE  0E00               	movlw	0
  6804  0005E0  6E04               	movwf	i2___wmul@multiplicand+1,c
  6805  0005E2  0E3C               	movlw	60
  6806  0005E4  6E03               	movwf	i2___wmul@multiplicand,c
  6807  0005E6  ECE2  F015         	call	i2___wmul	;wreg free
  6808  0005EA  C001  F0C4         	movff	?i2___wmul,??_isr
  6809  0005EE  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6810  0005F2  C07A  F063         	movff	_start_time,dec_to_hex@num
  6811  0005F6  6A64               	clrf	dec_to_hex@num+1,c
  6812  0005F8  EC3C  F00B         	call	_dec_to_hex	;wreg free
  6813  0005FC  5063               	movf	?_dec_to_hex,w,c
  6814  0005FE  0100               	movlb	0	; () banked
  6815  000600  25C4               	addwf	??_isr& (0+255),w,b
  6816  000602  6E7C               	movwf	_stime,c
  6817  000604  5064               	movf	?_dec_to_hex+1,w,c
  6818  000606  0100               	movlb	0	; () banked
  6819  000608  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6820  00060A  6E7D               	movwf	_stime+1,c
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;main.c: 306: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6824  00060C  C079  F063         	movff	_end_time+1,dec_to_hex@num
  6825  000610  6A64               	clrf	dec_to_hex@num+1,c
  6826  000612  EC3C  F00B         	call	_dec_to_hex	;wreg free
  6827  000616  C063  F074         	movff	?_dec_to_hex,_isr$1354
  6828  00061A  C064  F075         	movff	?_dec_to_hex+1,_isr$1354+1
  6829                           
  6830                           ;main.c: 306: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6831  00061E  C074  F001         	movff	_isr$1354,i2___wmul@multiplier
  6832  000622  C075  F002         	movff	_isr$1354+1,i2___wmul@multiplier+1
  6833  000626  0E00               	movlw	0
  6834  000628  6E04               	movwf	i2___wmul@multiplicand+1,c
  6835  00062A  0E3C               	movlw	60
  6836  00062C  6E03               	movwf	i2___wmul@multiplicand,c
  6837  00062E  ECE2  F015         	call	i2___wmul	;wreg free
  6838  000632  C001  F0C4         	movff	?i2___wmul,??_isr
  6839  000636  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6840  00063A  C078  F063         	movff	_end_time,dec_to_hex@num
  6841  00063E  6A64               	clrf	dec_to_hex@num+1,c
  6842  000640  EC3C  F00B         	call	_dec_to_hex	;wreg free
  6843  000644  5063               	movf	?_dec_to_hex,w,c
  6844  000646  0100               	movlb	0	; () banked
  6845  000648  25C4               	addwf	??_isr& (0+255),w,b
  6846  00064A  0100               	movlb	0	; () banked
  6847  00064C  6FB1               	movwf	_etime& (0+255),b
  6848  00064E  5064               	movf	?_dec_to_hex+1,w,c
  6849  000650  0100               	movlb	0	; () banked
  6850  000652  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6851  000654  0100               	movlb	0	; () banked
  6852  000656  6FB2               	movwf	(_etime+1)& (0+255),b
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;main.c: 307: lcdInst(0b00000001);
  6856  000658  0E01               	movlw	1
  6857  00065A  EC5C  F016         	call	i2_lcdInst
  6858                           
  6859                           ;main.c: 308: curr_state = OPERATIONEND;
  6860  00065E  0E03               	movlw	3
  6861  000660  0100               	movlb	0	; () banked
  6862  000662  6FC3               	movwf	_curr_state& (0+255),b
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;main.c: 309: bottle_count_disp = -1;
  6866  000664  0100               	movlb	0	; () banked
  6867  000666  69EE               	setf	_bottle_count_disp& (0+255),b
  6868  000668  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;main.c: 310: TMR0IF = 0;
  6872  00066A  94F2               	bcf	intcon,2,c	;volatile
  6873                           
  6874                           ;main.c: 311: }
  6875  00066C  D01A               	goto	i2l316
  6876  00066E                     i2l4667:
  6877                           
  6878                           ;main.c: 314: lcdInst(0b10000000);
  6879  00066E  0E80               	movlw	128
  6880  000670  EC5C  F016         	call	i2_lcdInst
  6881                           
  6882                           ;main.c: 315: printf("bad interrupt");
  6883  000674  0EDC               	movlw	low STR_1
  6884  000676  6E0D               	movwf	i2printf@f,c
  6885  000678  0EFF               	movlw	high STR_1
  6886  00067A  6E0E               	movwf	i2printf@f+1,c
  6887  00067C  EC49  F005         	call	i2_printf	;wreg free
  6888                           
  6889                           ;main.c: 316: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  6890  000680  0E00               	movlw	0
  6891  000682  6E73               	movwf	isr@i,c
  6892  000684                     i2l4673:
  6893  000684  0E63               	movlw	99
  6894  000686  6473               	cpfsgt	isr@i,c
  6895  000688  D001               	goto	i2l4677
  6896  00068A  D7F1               	goto	i2l4667
  6897  00068C                     i2l4677:
  6898  00068C  0E21               	movlw	33
  6899  00068E  0100               	movlb	0	; () banked
  6900  000690  6FC4               	movwf	??_isr& (0+255),b
  6901  000692  0E76               	movlw	118
  6902  000694                     i2u483_47:
  6903  000694  2EE8               	decfsz	wreg,f,c
  6904  000696  D7FE               	bra	i2u483_47
  6905  000698  2FC4               	decfsz	??_isr& (0+255),f,b
  6906  00069A  D7FC               	bra	i2u483_47
  6907  00069C  F000               	nop	
  6908  00069E  2A73               	incf	isr@i,f,c
  6909  0006A0  D7F1               	goto	i2l4673
  6910  0006A2                     i2l316:
  6911  0006A2  C0D3  FFF5         	movff	??_isr+15,tablat
  6912  0006A6  C0D2  FFF8         	movff	??_isr+14,tblptru
  6913  0006AA  C0D1  FFF7         	movff	??_isr+13,tblptrh
  6914  0006AE  C0D0  FFF6         	movff	??_isr+12,tblptrl
  6915  0006B2  C0CF  FFF4         	movff	??_isr+11,prodh
  6916  0006B6  C0CE  FFF3         	movff	??_isr+10,prodl
  6917  0006BA  C0CD  FFDA         	movff	??_isr+9,fsr2h
  6918  0006BE  C0CC  FFD9         	movff	??_isr+8,fsr2l
  6919  0006C2  C0CB  FFE2         	movff	??_isr+7,fsr1h
  6920  0006C6  C0CA  FFE1         	movff	??_isr+6,fsr1l
  6921  0006CA  C0C9  FFEA         	movff	??_isr+5,fsr0h
  6922  0006CE  C0C8  FFE9         	movff	??_isr+4,fsr0l
  6923  0006D2  C0C7  FFFB         	movff	??_isr+3,pclatu
  6924  0006D6  C0C6  FFFA         	movff	??_isr+2,pclath
  6925  0006DA  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6926  0006DC  0011               	retfie		f
  6927  0006DE                     __end_of_isr:
  6928                           	opt stack 0
  6929                           pclatu	equ	0xFFB
  6930                           pclath	equ	0xFFA
  6931                           tblptru	equ	0xFF8
  6932                           tblptrh	equ	0xFF7
  6933                           tblptrl	equ	0xFF6
  6934                           tablat	equ	0xFF5
  6935                           prodh	equ	0xFF4
  6936                           prodl	equ	0xFF3
  6937                           intcon	equ	0xFF2
  6938                           intcon2	equ	0xFF1
  6939                           intcon3	equ	0xFF0
  6940                           postinc0	equ	0xFEE
  6941                           fsr0h	equ	0xFEA
  6942                           fsr0l	equ	0xFE9
  6943                           wreg	equ	0xFE8
  6944                           fsr1h	equ	0xFE2
  6945                           fsr1l	equ	0xFE1
  6946                           indf2	equ	0xFDF
  6947                           postinc2	equ	0xFDE
  6948                           postdec2	equ	0xFDD
  6949                           fsr2h	equ	0xFDA
  6950                           fsr2l	equ	0xFD9
  6951                           status	equ	0xFD8
  6952                           
  6953 ;; *************** function i2_read_colorsensor *****************
  6954 ;; Defined at:
  6955 ;;		line 527 in file "main.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;		None
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;  read_colorse    2   11[COMRAM] int 
  6960 ;;  read_colorse    2    9[COMRAM] int 
  6961 ;;  read_colorse    2    7[COMRAM] int 
  6962 ;;  read_colorse    2    5[COMRAM] int 
  6963 ;; Return value:  Size  Location     Type
  6964 ;;                  1    wreg      void 
  6965 ;; Registers used:
  6966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : 0/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6973 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6974 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6975 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;Total ram usage:       10 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; Hardware stack levels required when called:    2
  6979 ;; This function calls:
  6980 ;;		i2_I2C_Master_Read
  6981 ;;		i2_I2C_Master_Start
  6982 ;;		i2_I2C_Master_Stop
  6983 ;;		i2_I2C_Master_Write
  6984 ;; This function is called by:
  6985 ;;		_isr
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           	psect	text28
  6990  001C06                     __ptext28:
  6991                           	opt stack 0
  6992  001C06                     i2_read_colorsensor:
  6993                           	opt stack 23
  6994                           
  6995                           ;main.c: 532: int color_low;
  6996                           ;main.c: 533: int color_high;
  6997                           ;main.c: 534: int color_comb;
  6998                           ;main.c: 535: int i;
  6999                           ;main.c: 538: I2C_Master_Start();
  7000                           
  7001                           ;incstack = 0
  7002  001C06  EC78  F016         	call	i2_I2C_Master_Start	;wreg free
  7003                           
  7004                           ;main.c: 539: I2C_Master_Write(0b01010010);
  7005  001C0A  0E00               	movlw	0
  7006  001C0C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7007  001C0E  0E52               	movlw	82
  7008  001C10  6E02               	movwf	i2I2C_Master_Write@d,c
  7009  001C12  EC67  F016         	call	i2_I2C_Master_Write	;wreg free
  7010                           
  7011                           ;main.c: 540: I2C_Master_Write(0b10110100);
  7012  001C16  0E00               	movlw	0
  7013  001C18  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7014  001C1A  0EB4               	movlw	180
  7015  001C1C  6E02               	movwf	i2I2C_Master_Write@d,c
  7016  001C1E  EC67  F016         	call	i2_I2C_Master_Write	;wreg free
  7017                           
  7018                           ;main.c: 541: I2C_Master_Start();
  7019  001C22  EC78  F016         	call	i2_I2C_Master_Start	;wreg free
  7020                           
  7021                           ;main.c: 542: I2C_Master_Write(0b01010011);
  7022  001C26  0E00               	movlw	0
  7023  001C28  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7024  001C2A  0E53               	movlw	83
  7025  001C2C  6E02               	movwf	i2I2C_Master_Write@d,c
  7026  001C2E  EC67  F016         	call	i2_I2C_Master_Write	;wreg free
  7027                           
  7028                           ;main.c: 543: for(i=0; i<3; i++){
  7029  001C32  0E00               	movlw	0
  7030  001C34  6E0D               	movwf	i2read_colorsensor@i+1,c
  7031  001C36  0E00               	movlw	0
  7032  001C38  6E0C               	movwf	i2read_colorsensor@i,c
  7033  001C3A                     i2l4243:
  7034  001C3A  BE0D               	btfsc	i2read_colorsensor@i+1,7,c
  7035  001C3C  D006               	goto	i2l4247
  7036  001C3E  500D               	movf	i2read_colorsensor@i+1,w,c
  7037  001C40  E12E               	bnz	i2l4257
  7038  001C42  0E03               	movlw	3
  7039  001C44  5C0C               	subwf	i2read_colorsensor@i,w,c
  7040  001C46  B0D8               	btfsc	status,0,c
  7041  001C48  D02A               	goto	i2l4257
  7042  001C4A                     i2l4247:
  7043                           
  7044                           ;main.c: 544: color_low = I2C_Master_Read(1);
  7045  001C4A  0E01               	movlw	1
  7046  001C4C  ECCF  F015         	call	i2_I2C_Master_Read
  7047  001C50  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  7048  001C52  5004               	movf	??i2_read_colorsensor,w,c
  7049  001C54  6E06               	movwf	i2read_colorsensor@color_low,c
  7050  001C56  6A07               	clrf	i2read_colorsensor@color_low+1,c
  7051                           
  7052                           ;main.c: 545: color_high = I2C_Master_Read(1);
  7053  001C58  0E01               	movlw	1
  7054  001C5A  ECCF  F015         	call	i2_I2C_Master_Read
  7055  001C5E  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  7056  001C60  5004               	movf	??i2_read_colorsensor,w,c
  7057  001C62  6E08               	movwf	i2read_colorsensor@color_high,c
  7058  001C64  6A09               	clrf	i2read_colorsensor@color_high+1,c
  7059                           
  7060                           ;main.c: 546: color_comb = (color_high << 8)|(color_low & 0xFF);
  7061  001C66  5006               	movf	i2read_colorsensor@color_low,w,c
  7062  001C68  C008  F004         	movff	i2read_colorsensor@color_high,??i2_read_colorsensor
  7063  001C6C  C009  F005         	movff	i2read_colorsensor@color_high+1,??i2_read_colorsensor+1
  7064  001C70  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  7065  001C74  6A04               	clrf	??i2_read_colorsensor,c
  7066  001C76  1004               	iorwf	??i2_read_colorsensor,w,c
  7067  001C78  6E0A               	movwf	i2read_colorsensor@color_comb,c
  7068  001C7A  5005               	movf	??i2_read_colorsensor+1,w,c
  7069  001C7C  6E0B               	movwf	i2read_colorsensor@color_comb+1,c
  7070                           
  7071                           ;main.c: 547: color[i] = color_comb;
  7072  001C7E  90D8               	bcf	status,0,c
  7073  001C80  340C               	rlcf	i2read_colorsensor@i,w,c
  7074  001C82  6ED9               	movwf	fsr2l,c
  7075  001C84  340D               	rlcf	i2read_colorsensor@i+1,w,c
  7076  001C86  6EDA               	movwf	fsr2h,c
  7077  001C88  0E96               	movlw	low _color
  7078  001C8A  26D9               	addwf	fsr2l,f,c
  7079  001C8C  0E00               	movlw	high _color
  7080  001C8E  22DA               	addwfc	fsr2h,f,c
  7081  001C90  C00A  FFDE         	movff	i2read_colorsensor@color_comb,postinc2
  7082  001C94  C00B  FFDD         	movff	i2read_colorsensor@color_comb+1,postdec2
  7083  001C98  4A0C               	infsnz	i2read_colorsensor@i,f,c
  7084  001C9A  2A0D               	incf	i2read_colorsensor@i+1,f,c
  7085  001C9C  D7CE               	goto	i2l4243
  7086  001C9E                     i2l4257:
  7087                           
  7088                           ;main.c: 548: }
  7089                           ;main.c: 549: color_low = I2C_Master_Read(1);
  7090  001C9E  0E01               	movlw	1
  7091  001CA0  ECCF  F015         	call	i2_I2C_Master_Read
  7092  001CA4  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  7093  001CA6  5004               	movf	??i2_read_colorsensor,w,c
  7094  001CA8  6E06               	movwf	i2read_colorsensor@color_low,c
  7095  001CAA  6A07               	clrf	i2read_colorsensor@color_low+1,c
  7096                           
  7097                           ;main.c: 550: color_high = I2C_Master_Read(0);
  7098  001CAC  0E00               	movlw	0
  7099  001CAE  ECCF  F015         	call	i2_I2C_Master_Read
  7100  001CB2  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  7101  001CB4  5004               	movf	??i2_read_colorsensor,w,c
  7102  001CB6  6E08               	movwf	i2read_colorsensor@color_high,c
  7103  001CB8  6A09               	clrf	i2read_colorsensor@color_high+1,c
  7104                           
  7105                           ;main.c: 551: color_comb = (color_high << 8)|(color_low & 0xFF);
  7106  001CBA  5006               	movf	i2read_colorsensor@color_low,w,c
  7107  001CBC  C008  F004         	movff	i2read_colorsensor@color_high,??i2_read_colorsensor
  7108  001CC0  C009  F005         	movff	i2read_colorsensor@color_high+1,??i2_read_colorsensor+1
  7109  001CC4  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  7110  001CC8  6A04               	clrf	??i2_read_colorsensor,c
  7111  001CCA  1004               	iorwf	??i2_read_colorsensor,w,c
  7112  001CCC  6E0A               	movwf	i2read_colorsensor@color_comb,c
  7113  001CCE  5005               	movf	??i2_read_colorsensor+1,w,c
  7114  001CD0  6E0B               	movwf	i2read_colorsensor@color_comb+1,c
  7115                           
  7116                           ;main.c: 552: color[3] = color_comb;
  7117  001CD2  C00A  F09C         	movff	i2read_colorsensor@color_comb,_color+6
  7118  001CD6  C00B  F09D         	movff	i2read_colorsensor@color_comb+1,_color+7
  7119                           
  7120                           ;main.c: 553: I2C_Master_Stop();
  7121  001CDA  EC74  F016         	call	i2_I2C_Master_Stop	;wreg free
  7122  001CDE  0012               	return	
  7123  001CE0                     __end_ofi2_read_colorsensor:
  7124                           	opt stack 0
  7125                           pclatu	equ	0xFFB
  7126                           pclath	equ	0xFFA
  7127                           tblptru	equ	0xFF8
  7128                           tblptrh	equ	0xFF7
  7129                           tblptrl	equ	0xFF6
  7130                           tablat	equ	0xFF5
  7131                           prodh	equ	0xFF4
  7132                           prodl	equ	0xFF3
  7133                           intcon	equ	0xFF2
  7134                           intcon2	equ	0xFF1
  7135                           intcon3	equ	0xFF0
  7136                           postinc0	equ	0xFEE
  7137                           fsr0h	equ	0xFEA
  7138                           fsr0l	equ	0xFE9
  7139                           wreg	equ	0xFE8
  7140                           fsr1h	equ	0xFE2
  7141                           fsr1l	equ	0xFE1
  7142                           indf2	equ	0xFDF
  7143                           postinc2	equ	0xFDE
  7144                           postdec2	equ	0xFDD
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function i2_printf *****************
  7150 ;; Defined at:
  7151 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7154 ;;		 -> STR_24(15), STR_23(16), STR_22(28), STR_21(25), 
  7155 ;;		 -> STR_20(24), STR_19(23), STR_18(18), STR_17(23), 
  7156 ;;		 -> STR_16(10), STR_15(18), STR_14(18), STR_13(18), 
  7157 ;;		 -> STR_12(18), STR_11(18), STR_10(18), STR_9(18), 
  7158 ;;		 -> STR_8(18), STR_7(17), STR_6(17), STR_5(23), 
  7159 ;;		 -> STR_4(23), STR_3(10), STR_2(17), STR_1(14), 
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;  printf          4    0        struct .
  7162 ;;  printf          3    0        PTR const unsigned char 
  7163 ;;  printf          2   25[COMRAM] int 
  7164 ;;  printf          2   22[COMRAM] unsigned int 
  7165 ;;  printf          2   19[COMRAM] PTR void [1]
  7166 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7167 ;;  printf          2    0        unsigned int 
  7168 ;;  printf          1   27[COMRAM] char 
  7169 ;;  printf          1   24[COMRAM] unsigned char 
  7170 ;;  printf          1   21[COMRAM] char 
  7171 ;;  printf          1   18[COMRAM] unsigned char 
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  2   12[COMRAM] int 
  7174 ;; Registers used:
  7175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7181 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7183 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7184 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;Total ram usage:       16 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    2
  7188 ;; This function calls:
  7189 ;;		i2___lwdiv
  7190 ;;		i2___lwmod
  7191 ;;		i2___wmul
  7192 ;;		i2_isdigit
  7193 ;;		i2_putch
  7194 ;; This function is called by:
  7195 ;;		_isr
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           	psect	text29
  7200  000A92                     __ptext29:
  7201                           	opt stack 0
  7202  000A92                     i2_printf:
  7203                           	opt stack 23
  7204                           
  7205                           ;doprnt.c: 466: va_list ap;
  7206                           ;doprnt.c: 499: signed char c;
  7207                           ;doprnt.c: 501: int width;
  7208                           ;doprnt.c: 506: signed char prec;
  7209                           ;doprnt.c: 508: unsigned char flag;
  7210                           ;doprnt.c: 523: union {
  7211                           ;doprnt.c: 524: unsigned long vd;
  7212                           ;doprnt.c: 525: double integ;
  7213                           ;doprnt.c: 526: } tmpval;
  7214                           ;doprnt.c: 528: unsigned int val;
  7215                           ;doprnt.c: 529: unsigned len;
  7216                           ;doprnt.c: 530: const char * cp;
  7217                           ;doprnt.c: 533: *ap = __va_start();
  7218                           
  7219                           ;incstack = 0
  7220  000A92  0E0F               	movlw	low (?i2_printf+2)
  7221  000A94  6E14               	movwf	i2printf@ap,c
  7222  000A96  0E00               	movlw	high (?i2_printf+2)
  7223  000A98  6E15               	movwf	i2printf@ap+1,c
  7224                           
  7225                           ;doprnt.c: 536: while(c = *f++) {
  7226  000A9A  D174               	goto	i2l4395
  7227  000A9C                     i2l4269:
  7228                           
  7229                           ;doprnt.c: 538: if(c != '%')
  7230  000A9C  0E25               	movlw	37
  7231  000A9E  181C               	xorwf	i2printf@c,w,c
  7232  000AA0  B4D8               	btfsc	status,2,c
  7233  000AA2  D004               	goto	i2l4273
  7234                           
  7235                           ;doprnt.c: 540: {
  7236                           ;doprnt.c: 541: (putch(c) );
  7237  000AA4  501C               	movf	i2printf@c,w,c
  7238  000AA6  EC56  F016         	call	i2_putch
  7239                           
  7240                           ;doprnt.c: 542: continue;
  7241  000AAA  D16C               	goto	i2l4395
  7242  000AAC                     i2l4273:
  7243                           
  7244                           ;doprnt.c: 543: }
  7245                           ;doprnt.c: 546: width = 0;
  7246  000AAC  0E00               	movlw	0
  7247  000AAE  6E1B               	movwf	i2printf@width+1,c
  7248  000AB0  0E00               	movlw	0
  7249  000AB2  6E1A               	movwf	i2printf@width,c
  7250                           
  7251                           ;doprnt.c: 548: flag = 0;
  7252  000AB4  0E00               	movlw	0
  7253  000AB6  6E19               	movwf	i2printf@flag,c
  7254                           
  7255                           ;doprnt.c: 551: switch(*f) {
  7256                           
  7257                           ;doprnt.c: 550: for(;;) {
  7258  000AB8  D003               	goto	i2l4279
  7259  000ABA                     i2l4275:
  7260                           
  7261                           ;doprnt.c: 580: flag |= 0x04;
  7262  000ABA  8419               	bsf	i2printf@flag,2,c
  7263                           
  7264                           ;doprnt.c: 581: f++;
  7265  000ABC  4A0D               	infsnz	i2printf@f,f,c
  7266  000ABE  2A0E               	incf	i2printf@f+1,f,c
  7267  000AC0                     i2l4279:
  7268  000AC0  C00D  FFF6         	movff	i2printf@f,tblptrl
  7269  000AC4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7270  000AC8                     	if	0	;tblptru may be non-zero
  7271  000AC8                     	endif
  7272  000AC8                     	if	0	;tblptru may be non-zero
  7273  000AC8                     	endif
  7274  000AC8  0008               	tblrd		*
  7275  000ACA  50F5               	movf	tablat,w,c
  7276                           
  7277                           ; Switch size 1, requested type "space"
  7278                           ; Number of cases is 1, Range of values is 48 to 48
  7279                           ; switch strategies available:
  7280                           ; Name         Instructions Cycles
  7281                           ; simple_byte            4     3 (average)
  7282                           ;	Chosen strategy is simple_byte
  7283  000ACC  0A30               	xorlw	48	; case 48
  7284  000ACE  B4D8               	btfsc	status,2,c
  7285  000AD0  D7F4               	goto	i2l4275
  7286                           
  7287                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7288                           
  7289                           ;doprnt.c: 586: }
  7290                           
  7291                           ;doprnt.c: 585: break;
  7292  000AD2  C00D  FFF6         	movff	i2printf@f,tblptrl
  7293  000AD6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7294  000ADA                     	if	0	;tblptru may be non-zero
  7295  000ADA                     	endif
  7296  000ADA                     	if	0	;tblptru may be non-zero
  7297  000ADA                     	endif
  7298  000ADA  0008               	tblrd		*
  7299  000ADC  50F5               	movf	tablat,w,c
  7300  000ADE  EC18  F016         	call	i2_isdigit
  7301  000AE2  A0D8               	btfss	status,0,c
  7302  000AE4  D035               	goto	i2l4297
  7303                           
  7304                           ;doprnt.c: 598: width = 0;
  7305  000AE6  0E00               	movlw	0
  7306  000AE8  6E1B               	movwf	i2printf@width+1,c
  7307  000AEA  0E00               	movlw	0
  7308  000AEC  6E1A               	movwf	i2printf@width,c
  7309  000AEE                     i2l4285:
  7310                           
  7311                           ;doprnt.c: 600: width *= 10;
  7312  000AEE  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  7313  000AF2  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7314  000AF6  0E00               	movlw	0
  7315  000AF8  6E04               	movwf	i2___wmul@multiplicand+1,c
  7316  000AFA  0E0A               	movlw	10
  7317  000AFC  6E03               	movwf	i2___wmul@multiplicand,c
  7318  000AFE  ECE2  F015         	call	i2___wmul	;wreg free
  7319  000B02  C001  F01A         	movff	?i2___wmul,i2printf@width
  7320  000B06  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  7321                           
  7322                           ;doprnt.c: 601: width += *f++ - '0';
  7323  000B0A  0ED0               	movlw	208
  7324  000B0C  6E0F               	movwf	??i2_printf& (0+255),c
  7325  000B0E  0EFF               	movlw	255
  7326  000B10  6E10               	movwf	(??i2_printf+1)& (0+255),c
  7327  000B12  C00D  FFF6         	movff	i2printf@f,tblptrl
  7328  000B16  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7329  000B1A                     	if	0	;tblptru may be non-zero
  7330  000B1A                     	endif
  7331  000B1A                     	if	0	;tblptru may be non-zero
  7332  000B1A                     	endif
  7333  000B1A  0008               	tblrd		*
  7334  000B1C  50F5               	movf	tablat,w,c
  7335  000B1E  6E11               	movwf	(??i2_printf+2)& (0+255),c
  7336  000B20  6A12               	clrf	(??i2_printf+3)& (0+255),c
  7337  000B22  500F               	movf	??i2_printf,w,c
  7338  000B24  2611               	addwf	??i2_printf+2,f,c
  7339  000B26  5010               	movf	??i2_printf+1,w,c
  7340  000B28  2212               	addwfc	??i2_printf+3,f,c
  7341  000B2A  5011               	movf	??i2_printf+2,w,c
  7342  000B2C  261A               	addwf	i2printf@width,f,c
  7343  000B2E  5012               	movf	??i2_printf+3,w,c
  7344  000B30  221B               	addwfc	i2printf@width+1,f,c
  7345  000B32  4A0D               	infsnz	i2printf@f,f,c
  7346  000B34  2A0E               	incf	i2printf@f+1,f,c
  7347                           
  7348                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7349  000B36  C00D  FFF6         	movff	i2printf@f,tblptrl
  7350  000B3A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7351  000B3E                     	if	0	;tblptru may be non-zero
  7352  000B3E                     	endif
  7353  000B3E                     	if	0	;tblptru may be non-zero
  7354  000B3E                     	endif
  7355  000B3E  0008               	tblrd		*
  7356  000B40  50F5               	movf	tablat,w,c
  7357  000B42  EC18  F016         	call	i2_isdigit
  7358  000B46  A0D8               	btfss	status,0,c
  7359  000B48  D003               	goto	i2l4297
  7360  000B4A  D7D1               	goto	i2l4285
  7361  000B4C                     i2l4293:
  7362                           
  7363                           ;doprnt.c: 721: flag |= 0x80;
  7364  000B4C  8E19               	bsf	i2printf@flag,7,c
  7365                           
  7366                           ;doprnt.c: 723: break;
  7367  000B4E  D017               	goto	i2l444
  7368  000B50                     i2l4297:
  7369  000B50  C00D  FFF6         	movff	i2printf@f,tblptrl
  7370  000B54  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7371  000B58  4A0D               	infsnz	i2printf@f,f,c
  7372  000B5A  2A0E               	incf	i2printf@f+1,f,c
  7373  000B5C                     	if	0	;tblptru may be non-zero
  7374  000B5C                     	endif
  7375  000B5C                     	if	0	;tblptru may be non-zero
  7376  000B5C                     	endif
  7377  000B5C  0008               	tblrd		*
  7378  000B5E  CFF5 F01C          	movff	tablat,i2printf@c
  7379  000B62  501C               	movf	i2printf@c,w,c
  7380                           
  7381                           ; Switch size 1, requested type "space"
  7382                           ; Number of cases is 4, Range of values is 0 to 120
  7383                           ; switch strategies available:
  7384                           ; Name         Instructions Cycles
  7385                           ; simple_byte           13     7 (average)
  7386                           ;	Chosen strategy is simple_byte
  7387  000B64  0A00               	xorlw	0	; case 0
  7388  000B66  B4D8               	btfsc	status,2,c
  7389  000B68  0012               	return	
  7390  000B6A  0A64               	xorlw	100	; case 100
  7391  000B6C  B4D8               	btfsc	status,2,c
  7392  000B6E  D007               	goto	i2l444
  7393  000B70  0A0D               	xorlw	13	; case 105
  7394  000B72  B4D8               	btfsc	status,2,c
  7395  000B74  D004               	goto	i2l444
  7396  000B76  0A11               	xorlw	17	; case 120
  7397  000B78  B4D8               	btfsc	status,2,c
  7398  000B7A  D7E8               	goto	i2l4293
  7399  000B7C  D103               	goto	i2l4395
  7400  000B7E                     i2l444:
  7401                           
  7402                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7403  000B7E  BE19               	btfsc	i2printf@flag,7,c
  7404  000B80  D015               	goto	i2l4309
  7405                           
  7406                           ;doprnt.c: 1253: {
  7407                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7408  000B82  C014  FFD9         	movff	i2printf@ap,fsr2l
  7409  000B86  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  7410  000B8A  CFDE F017          	movff	postinc2,i2printf@val
  7411  000B8E  CFDD F018          	movff	postdec2,i2printf@val+1
  7412  000B92  0E02               	movlw	2
  7413  000B94  2614               	addwf	i2printf@ap,f,c
  7414  000B96  0E00               	movlw	0
  7415  000B98  2215               	addwfc	i2printf@ap+1,f,c
  7416                           
  7417                           ;doprnt.c: 1261: if((int)val < 0) {
  7418  000B9A  AE18               	btfss	i2printf@val+1,7,c
  7419  000B9C  D044               	goto	i2l4343
  7420                           
  7421                           ;doprnt.c: 1262: flag |= 0x03;
  7422  000B9E  0E03               	movlw	3
  7423  000BA0  1219               	iorwf	i2printf@flag,f,c
  7424                           
  7425                           ;doprnt.c: 1263: val = -val;
  7426  000BA2  6C17               	negf	i2printf@val,c
  7427  000BA4  1E18               	comf	i2printf@val+1,f,c
  7428  000BA6  B0D8               	btfsc	status,0,c
  7429  000BA8  2A18               	incf	i2printf@val+1,f,c
  7430                           
  7431                           ;doprnt.c: 1264: }
  7432                           ;doprnt.c: 1266: }
  7433  000BAA  D03D               	goto	i2l4343
  7434  000BAC                     i2l4309:
  7435                           
  7436                           ;doprnt.c: 1268: else
  7437                           ;doprnt.c: 1273: {
  7438                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7439  000BAC  C014  FFD9         	movff	i2printf@ap,fsr2l
  7440  000BB0  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  7441  000BB4  CFDE F017          	movff	postinc2,i2printf@val
  7442  000BB8  CFDD F018          	movff	postdec2,i2printf@val+1
  7443  000BBC  0E02               	movlw	2
  7444  000BBE  2614               	addwf	i2printf@ap,f,c
  7445  000BC0  0E00               	movlw	0
  7446  000BC2  2215               	addwfc	i2printf@ap+1,f,c
  7447                           
  7448                           ;doprnt.c: 1287: }
  7449                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7450  000BC4  D030               	goto	i2l4343
  7451  000BC6                     i2l4313:
  7452                           
  7453                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7454  000BC6  0E01               	movlw	1
  7455  000BC8  6E1C               	movwf	i2printf@c,c
  7456  000BCA                     i2l4315:
  7457  000BCA  0E05               	movlw	5
  7458  000BCC  181C               	xorwf	i2printf@c,w,c
  7459  000BCE  B4D8               	btfsc	status,2,c
  7460  000BD0  D032               	goto	i2l4345
  7461                           
  7462                           ;doprnt.c: 1306: if(val < dpowers[c])
  7463  000BD2  501C               	movf	i2printf@c,w,c
  7464  000BD4  0D02               	mullw	2
  7465  000BD6  0EDC               	movlw	low _dpowers
  7466  000BD8  24F3               	addwf	prodl,w,c
  7467  000BDA  6EF6               	movwf	tblptrl,c
  7468  000BDC  0EFD               	movlw	high _dpowers
  7469  000BDE  20F4               	addwfc	prodh,w,c
  7470  000BE0  6EF7               	movwf	tblptrh,c
  7471  000BE2                     	if	0	;There are less than 3 active tblptr bytes
  7472  000BE2                     	endif
  7473  000BE2  0009               	tblrd		*+
  7474  000BE4  50F5               	movf	tablat,w,c
  7475  000BE6  5C17               	subwf	i2printf@val,w,c
  7476  000BE8  0009               	tblrd		*+
  7477  000BEA  50F5               	movf	tablat,w,c
  7478  000BEC  5818               	subwfb	i2printf@val+1,w,c
  7479  000BEE  A0D8               	btfss	status,0,c
  7480  000BF0  D022               	goto	i2l4345
  7481                           
  7482                           ;doprnt.c: 1307: break;
  7483  000BF2  2A1C               	incf	i2printf@c,f,c
  7484  000BF4  D7EA               	goto	i2l4315
  7485  000BF6                     i2l4327:
  7486                           
  7487                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7488  000BF6  0E01               	movlw	1
  7489  000BF8  6E1C               	movwf	i2printf@c,c
  7490  000BFA                     i2l4329:
  7491  000BFA  0E04               	movlw	4
  7492  000BFC  181C               	xorwf	i2printf@c,w,c
  7493  000BFE  B4D8               	btfsc	status,2,c
  7494  000C00  D01A               	goto	i2l4345
  7495                           
  7496                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7497  000C02  501C               	movf	i2printf@c,w,c
  7498  000C04  0D02               	mullw	2
  7499  000C06  0EE6               	movlw	low _hexpowers
  7500  000C08  24F3               	addwf	prodl,w,c
  7501  000C0A  6EF6               	movwf	tblptrl,c
  7502  000C0C  0EFD               	movlw	high _hexpowers
  7503  000C0E  20F4               	addwfc	prodh,w,c
  7504  000C10  6EF7               	movwf	tblptrh,c
  7505  000C12                     	if	0	;There are less than 3 active tblptr bytes
  7506  000C12                     	endif
  7507  000C12  0009               	tblrd		*+
  7508  000C14  50F5               	movf	tablat,w,c
  7509  000C16  5C17               	subwf	i2printf@val,w,c
  7510  000C18  0009               	tblrd		*+
  7511  000C1A  50F5               	movf	tablat,w,c
  7512  000C1C  5818               	subwfb	i2printf@val+1,w,c
  7513  000C1E  A0D8               	btfss	status,0,c
  7514  000C20  D00A               	goto	i2l4345
  7515                           
  7516                           ;doprnt.c: 1318: break;
  7517  000C22  2A1C               	incf	i2printf@c,f,c
  7518  000C24  D7EA               	goto	i2l4329
  7519  000C26                     i2l4343:
  7520  000C26  5019               	movf	i2printf@flag,w,c
  7521  000C28  0B80               	andlw	128
  7522                           
  7523                           ; Switch size 1, requested type "space"
  7524                           ; Number of cases is 2, Range of values is 0 to 128
  7525                           ; switch strategies available:
  7526                           ; Name         Instructions Cycles
  7527                           ; simple_byte            7     4 (average)
  7528                           ;	Chosen strategy is simple_byte
  7529  000C2A  0A00               	xorlw	0	; case 0
  7530  000C2C  B4D8               	btfsc	status,2,c
  7531  000C2E  D7CB               	goto	i2l4313
  7532  000C30  0A80               	xorlw	128	; case 128
  7533  000C32  B4D8               	btfsc	status,2,c
  7534  000C34  D7E0               	goto	i2l4327
  7535  000C36                     i2l4345:
  7536                           
  7537                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7538  000C36  501A               	movf	i2printf@width,w,c
  7539  000C38  101B               	iorwf	i2printf@width+1,w,c
  7540  000C3A  B4D8               	btfsc	status,2,c
  7541  000C3C  D009               	goto	i2l4351
  7542  000C3E  C019  F00F         	movff	i2printf@flag,??i2_printf
  7543  000C42  0E03               	movlw	3
  7544  000C44  160F               	andwf	??i2_printf,f,c
  7545  000C46  B4D8               	btfsc	status,2,c
  7546  000C48  D003               	goto	i2l4351
  7547                           
  7548                           ;doprnt.c: 1346: width--;
  7549  000C4A  061A               	decf	i2printf@width,f,c
  7550  000C4C  A0D8               	btfss	status,0,c
  7551  000C4E  061B               	decf	i2printf@width+1,f,c
  7552  000C50                     i2l4351:
  7553                           
  7554                           ;doprnt.c: 1381: if(width > c)
  7555  000C50  0E80               	movlw	128
  7556  000C52  BE1C               	btfsc	i2printf@c,7,c
  7557  000C54  0E7F               	movlw	127
  7558  000C56  6E0F               	movwf	??i2_printf& (0+255),c
  7559  000C58  501A               	movf	i2printf@width,w,c
  7560  000C5A  5C1C               	subwf	i2printf@c,w,c
  7561  000C5C  501B               	movf	i2printf@width+1,w,c
  7562  000C5E  0A80               	xorlw	128
  7563  000C60  580F               	subwfb	??i2_printf& (0+255),w,c
  7564  000C62  B0D8               	btfsc	status,0,c
  7565  000C64  D007               	goto	i2l4355
  7566                           
  7567                           ;doprnt.c: 1382: width -= c;
  7568  000C66  501C               	movf	i2printf@c,w,c
  7569  000C68  5E1A               	subwf	i2printf@width,f,c
  7570  000C6A  0E00               	movlw	0
  7571  000C6C  BE1C               	btfsc	i2printf@c,7,c
  7572  000C6E  0EFF               	movlw	255
  7573  000C70  5A1B               	subwfb	i2printf@width+1,f,c
  7574  000C72  D004               	goto	i2l4357
  7575  000C74                     i2l4355:
  7576                           
  7577                           ;doprnt.c: 1383: else
  7578                           ;doprnt.c: 1384: width = 0;
  7579  000C74  0E00               	movlw	0
  7580  000C76  6E1B               	movwf	i2printf@width+1,c
  7581  000C78  0E00               	movlw	0
  7582  000C7A  6E1A               	movwf	i2printf@width,c
  7583  000C7C                     i2l4357:
  7584                           
  7585                           ;doprnt.c: 1387: if(flag & 0x04) {
  7586  000C7C  A419               	btfss	i2printf@flag,2,c
  7587  000C7E  D014               	goto	i2l4369
  7588                           
  7589                           ;doprnt.c: 1392: if(flag & 0x03)
  7590  000C80  C019  F00F         	movff	i2printf@flag,??i2_printf
  7591  000C84  0E03               	movlw	3
  7592  000C86  160F               	andwf	??i2_printf,f,c
  7593  000C88  B4D8               	btfsc	status,2,c
  7594  000C8A  D003               	goto	i2l4363
  7595                           
  7596                           ;doprnt.c: 1393: (putch('-') );
  7597  000C8C  0E2D               	movlw	45
  7598  000C8E  EC56  F016         	call	i2_putch
  7599  000C92                     i2l4363:
  7600                           
  7601                           ;doprnt.c: 1415: if(width)
  7602  000C92  501A               	movf	i2printf@width,w,c
  7603  000C94  101B               	iorwf	i2printf@width+1,w,c
  7604  000C96  B4D8               	btfsc	status,2,c
  7605  000C98  D01E               	goto	i2l4379
  7606                           
  7607                           ;doprnt.c: 1417: (putch('0') );
  7608                           
  7609                           ;doprnt.c: 1416: do
  7610  000C9A  0E30               	movlw	48
  7611  000C9C  EC56  F016         	call	i2_putch
  7612                           
  7613                           ;doprnt.c: 1418: while(--width);
  7614  000CA0  061A               	decf	i2printf@width,f,c
  7615  000CA2  A0D8               	btfss	status,0,c
  7616  000CA4  061B               	decf	i2printf@width+1,f,c
  7617  000CA6  D7F5               	goto	i2l4363
  7618  000CA8                     i2l4369:
  7619                           
  7620                           ;doprnt.c: 1422: {
  7621                           ;doprnt.c: 1424: if(width
  7622                           ;doprnt.c: 1428: )
  7623  000CA8  501A               	movf	i2printf@width,w,c
  7624  000CAA  101B               	iorwf	i2printf@width+1,w,c
  7625  000CAC  B4D8               	btfsc	status,2,c
  7626  000CAE  D00A               	goto	i2l4375
  7627  000CB0                     i2l4371:
  7628                           
  7629                           ;doprnt.c: 1430: (putch(' ') );
  7630  000CB0  0E20               	movlw	32
  7631  000CB2  EC56  F016         	call	i2_putch
  7632                           
  7633                           ;doprnt.c: 1431: while(--width);
  7634  000CB6  061A               	decf	i2printf@width,f,c
  7635  000CB8  A0D8               	btfss	status,0,c
  7636  000CBA  061B               	decf	i2printf@width+1,f,c
  7637  000CBC  501A               	movf	i2printf@width,w,c
  7638  000CBE  101B               	iorwf	i2printf@width+1,w,c
  7639  000CC0  A4D8               	btfss	status,2,c
  7640  000CC2  D7F6               	goto	i2l4371
  7641  000CC4                     i2l4375:
  7642                           
  7643                           ;doprnt.c: 1438: if(flag & 0x03)
  7644  000CC4  C019  F00F         	movff	i2printf@flag,??i2_printf
  7645  000CC8  0E03               	movlw	3
  7646  000CCA  160F               	andwf	??i2_printf,f,c
  7647  000CCC  B4D8               	btfsc	status,2,c
  7648  000CCE  D003               	goto	i2l4379
  7649                           
  7650                           ;doprnt.c: 1439: (putch('-') );
  7651  000CD0  0E2D               	movlw	45
  7652  000CD2  EC56  F016         	call	i2_putch
  7653  000CD6                     i2l4379:
  7654                           
  7655                           ;doprnt.c: 1469: }
  7656                           ;doprnt.c: 1472: prec = c;
  7657  000CD6  C01C  F016         	movff	i2printf@c,i2printf@prec
  7658                           
  7659                           ;doprnt.c: 1474: while(prec--) {
  7660  000CDA  D050               	goto	i2l4393
  7661  000CDC                     i2l4381:
  7662                           
  7663                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7664  000CDC  5016               	movf	i2printf@prec,w,c
  7665  000CDE  0D02               	mullw	2
  7666  000CE0  0EDC               	movlw	low _dpowers
  7667  000CE2  24F3               	addwf	prodl,w,c
  7668  000CE4  6EF6               	movwf	tblptrl,c
  7669  000CE6  0EFD               	movlw	high _dpowers
  7670  000CE8  20F4               	addwfc	prodh,w,c
  7671  000CEA  6EF7               	movwf	tblptrh,c
  7672  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  7673  000CEC                     	endif
  7674  000CEC  0009               	tblrd		*+
  7675  000CEE  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7676  000CF2  000A               	tblrd		*-
  7677  000CF4  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7678  000CF8  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7679  000CFC  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7680  000D00  EC44  F014         	call	i2___lwdiv	;wreg free
  7681  000D04  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7682  000D08  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7683  000D0C  0E00               	movlw	0
  7684  000D0E  6E0B               	movwf	i2___lwmod@divisor+1,c
  7685  000D10  0E0A               	movlw	10
  7686  000D12  6E0A               	movwf	i2___lwmod@divisor,c
  7687  000D14  ECBC  F014         	call	i2___lwmod	;wreg free
  7688  000D18  5008               	movf	?i2___lwmod,w,c
  7689  000D1A  0F30               	addlw	48
  7690  000D1C  6E1C               	movwf	i2printf@c,c
  7691                           
  7692                           ;doprnt.c: 1491: break;
  7693  000D1E  D02B               	goto	i2l4391
  7694  000D20                     i2l4383:
  7695                           
  7696                           ;doprnt.c: 1499: {
  7697                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7698  000D20  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7699  000D24  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7700  000D28  5016               	movf	i2printf@prec,w,c
  7701  000D2A  0D02               	mullw	2
  7702  000D2C  0EE6               	movlw	low _hexpowers
  7703  000D2E  24F3               	addwf	prodl,w,c
  7704  000D30  6EF6               	movwf	tblptrl,c
  7705  000D32  0EFD               	movlw	high _hexpowers
  7706  000D34  20F4               	addwfc	prodh,w,c
  7707  000D36  6EF7               	movwf	tblptrh,c
  7708  000D38                     	if	0	;There are less than 3 active tblptr bytes
  7709  000D38                     	endif
  7710  000D38  0009               	tblrd		*+
  7711  000D3A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7712  000D3E  000A               	tblrd		*-
  7713  000D40  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7714  000D44  EC44  F014         	call	i2___lwdiv	;wreg free
  7715  000D48  5001               	movf	?i2___lwdiv,w,c
  7716  000D4A  0B0F               	andlw	15
  7717  000D4C  6E13               	movwf	i2printf@idx,c
  7718                           
  7719                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7720  000D4E  5013               	movf	i2printf@idx,w,c
  7721  000D50  0D01               	mullw	1
  7722  000D52  0E79               	movlw	low STR_25
  7723  000D54  24F3               	addwf	prodl,w,c
  7724  000D56  6EF6               	movwf	tblptrl,c
  7725  000D58  0EFF               	movlw	high STR_25
  7726  000D5A  20F4               	addwfc	prodh,w,c
  7727  000D5C  6EF7               	movwf	tblptrh,c
  7728  000D5E                     	if	0	;There are less than 3 active tblptr bytes
  7729  000D5E                     	endif
  7730  000D5E  0008               	tblrd		*
  7731  000D60  CFF5 F01C          	movff	tablat,i2printf@c
  7732                           
  7733                           ;doprnt.c: 1523: }
  7734                           
  7735                           ;doprnt.c: 1508: }
  7736                           ;doprnt.c: 1510: break;
  7737  000D64  D008               	goto	i2l4391
  7738  000D66                     i2l4389:
  7739  000D66  5019               	movf	i2printf@flag,w,c
  7740  000D68  0B80               	andlw	128
  7741                           
  7742                           ; Switch size 1, requested type "space"
  7743                           ; Number of cases is 2, Range of values is 0 to 128
  7744                           ; switch strategies available:
  7745                           ; Name         Instructions Cycles
  7746                           ; simple_byte            7     4 (average)
  7747                           ;	Chosen strategy is simple_byte
  7748  000D6A  0A00               	xorlw	0	; case 0
  7749  000D6C  B4D8               	btfsc	status,2,c
  7750  000D6E  D7B6               	goto	i2l4381
  7751  000D70  0A80               	xorlw	128	; case 128
  7752  000D72  B4D8               	btfsc	status,2,c
  7753  000D74  D7D5               	goto	i2l4383
  7754  000D76                     i2l4391:
  7755                           
  7756                           ;doprnt.c: 1524: (putch(c) );
  7757  000D76  501C               	movf	i2printf@c,w,c
  7758  000D78  EC56  F016         	call	i2_putch
  7759  000D7C                     i2l4393:
  7760  000D7C  0616               	decf	i2printf@prec,f,c
  7761  000D7E  2816               	incf	i2printf@prec,w,c
  7762  000D80  A4D8               	btfss	status,2,c
  7763  000D82  D7F1               	goto	i2l4389
  7764  000D84                     i2l4395:
  7765  000D84  C00D  FFF6         	movff	i2printf@f,tblptrl
  7766  000D88  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7767  000D8C  4A0D               	infsnz	i2printf@f,f,c
  7768  000D8E  2A0E               	incf	i2printf@f+1,f,c
  7769  000D90                     	if	0	;tblptru may be non-zero
  7770  000D90                     	endif
  7771  000D90                     	if	0	;tblptru may be non-zero
  7772  000D90                     	endif
  7773  000D90  0008               	tblrd		*
  7774  000D92  CFF5 F01C          	movff	tablat,i2printf@c
  7775  000D96  501C               	movf	i2printf@c,w,c
  7776  000D98  B4D8               	btfsc	status,2,c
  7777  000D9A  0012               	return	
  7778  000D9C  D67F               	goto	i2l4269
  7779  000D9E                     __end_ofi2_printf:
  7780                           	opt stack 0
  7781                           pclatu	equ	0xFFB
  7782                           pclath	equ	0xFFA
  7783                           tblptru	equ	0xFF8
  7784                           tblptrh	equ	0xFF7
  7785                           tblptrl	equ	0xFF6
  7786                           tablat	equ	0xFF5
  7787                           prodh	equ	0xFF4
  7788                           prodl	equ	0xFF3
  7789                           intcon	equ	0xFF2
  7790                           intcon2	equ	0xFF1
  7791                           intcon3	equ	0xFF0
  7792                           postinc0	equ	0xFEE
  7793                           fsr0h	equ	0xFEA
  7794                           fsr0l	equ	0xFE9
  7795                           wreg	equ	0xFE8
  7796                           fsr1h	equ	0xFE2
  7797                           fsr1l	equ	0xFE1
  7798                           indf2	equ	0xFDF
  7799                           postinc2	equ	0xFDE
  7800                           postdec2	equ	0xFDD
  7801                           fsr2h	equ	0xFDA
  7802                           fsr2l	equ	0xFD9
  7803                           status	equ	0xFD8
  7804                           
  7805 ;; *************** function i2_putch *****************
  7806 ;; Defined at:
  7807 ;;		line 31 in file "lcd.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;  data            1    wreg     unsigned char 
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;  data            1    2[COMRAM] unsigned char 
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  1    wreg      void 
  7814 ;; Registers used:
  7815 ;;		wreg, status,2, status,0, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;Total ram usage:        1 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:    1
  7828 ;; This function calls:
  7829 ;;		i2_lcdNibble
  7830 ;; This function is called by:
  7831 ;;		i2_printf
  7832 ;; This function uses a non-reentrant model
  7833 ;;
  7834                           
  7835                           	psect	text30
  7836  002CAC                     __ptext30:
  7837                           	opt stack 0
  7838  002CAC                     i2_putch:
  7839                           	opt stack 23
  7840                           
  7841                           ;incstack = 0
  7842                           ;i2putch@data stored from wreg
  7843  002CAC  6E03               	movwf	i2putch@data,c
  7844                           
  7845                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7846  002CAE  848C               	bsf	3980,2,c	;volatile
  7847                           
  7848                           ;lcd.c: 33: lcdNibble(data);
  7849  002CB0  5003               	movf	i2putch@data,w,c
  7850  002CB2  EC95  F014         	call	i2_lcdNibble
  7851  002CB6  0012               	return		;funcret
  7852  002CB8                     __end_ofi2_putch:
  7853                           	opt stack 0
  7854                           pclatu	equ	0xFFB
  7855                           pclath	equ	0xFFA
  7856                           tblptru	equ	0xFF8
  7857                           tblptrh	equ	0xFF7
  7858                           tblptrl	equ	0xFF6
  7859                           tablat	equ	0xFF5
  7860                           prodh	equ	0xFF4
  7861                           prodl	equ	0xFF3
  7862                           intcon	equ	0xFF2
  7863                           intcon2	equ	0xFF1
  7864                           intcon3	equ	0xFF0
  7865                           postinc0	equ	0xFEE
  7866                           fsr0h	equ	0xFEA
  7867                           fsr0l	equ	0xFE9
  7868                           wreg	equ	0xFE8
  7869                           fsr1h	equ	0xFE2
  7870                           fsr1l	equ	0xFE1
  7871                           indf2	equ	0xFDF
  7872                           postinc2	equ	0xFDE
  7873                           postdec2	equ	0xFDD
  7874                           fsr2h	equ	0xFDA
  7875                           fsr2l	equ	0xFD9
  7876                           status	equ	0xFD8
  7877                           
  7878 ;; *************** function i2_isdigit *****************
  7879 ;; Defined at:
  7880 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;  c               1    wreg     unsigned char 
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  c               1    2[COMRAM] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;		None               void
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7896 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7897 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;Total ram usage:        3 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; This function calls:
  7901 ;;		Nothing
  7902 ;; This function is called by:
  7903 ;;		i2_printf
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           	psect	text31
  7908  002C30                     __ptext31:
  7909                           	opt stack 0
  7910  002C30                     i2_isdigit:
  7911                           	opt stack 24
  7912                           
  7913                           ;incstack = 0
  7914                           ;i2isdigit@c stored from wreg
  7915  002C30  6E03               	movwf	i2isdigit@c,c
  7916  002C32  0E00               	movlw	0
  7917  002C34  6E02               	movwf	i2_isdigit$822,c
  7918  002C36  0E3A               	movlw	58
  7919  002C38  6003               	cpfslt	i2isdigit@c,c
  7920  002C3A  D005               	goto	i2l3927
  7921  002C3C  0E2F               	movlw	47
  7922  002C3E  6403               	cpfsgt	i2isdigit@c,c
  7923  002C40  D002               	goto	i2l3927
  7924  002C42  0E01               	movlw	1
  7925  002C44  6E02               	movwf	i2_isdigit$822,c
  7926  002C46                     i2l3927:
  7927  002C46  C002  F001         	movff	i2_isdigit$822,??i2_isdigit
  7928  002C4A  3001               	rrcf	??i2_isdigit,w,c
  7929  002C4C  0012               	return	
  7930  002C4E                     __end_ofi2_isdigit:
  7931                           	opt stack 0
  7932                           pclatu	equ	0xFFB
  7933                           pclath	equ	0xFFA
  7934                           tblptru	equ	0xFF8
  7935                           tblptrh	equ	0xFF7
  7936                           tblptrl	equ	0xFF6
  7937                           tablat	equ	0xFF5
  7938                           prodh	equ	0xFF4
  7939                           prodl	equ	0xFF3
  7940                           intcon	equ	0xFF2
  7941                           intcon2	equ	0xFF1
  7942                           intcon3	equ	0xFF0
  7943                           postinc0	equ	0xFEE
  7944                           fsr0h	equ	0xFEA
  7945                           fsr0l	equ	0xFE9
  7946                           wreg	equ	0xFE8
  7947                           fsr1h	equ	0xFE2
  7948                           fsr1l	equ	0xFE1
  7949                           indf2	equ	0xFDF
  7950                           postinc2	equ	0xFDE
  7951                           postdec2	equ	0xFDD
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function i2___lwmod *****************
  7957 ;; Defined at:
  7958 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  dividend        2    7[COMRAM] unsigned int 
  7961 ;;  divisor         2    9[COMRAM] unsigned int 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  2    7[COMRAM] unsigned int 
  7966 ;; Registers used:
  7967 ;;		wreg, status,2, status,0
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;Total ram usage:        5 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; This function calls:
  7980 ;;		Nothing
  7981 ;; This function is called by:
  7982 ;;		i2_printf
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text32
  7987  002978                     __ptext32:
  7988                           	opt stack 0
  7989  002978                     i2___lwmod:
  7990                           	opt stack 24
  7991                           
  7992                           ;incstack = 0
  7993  002978  500A               	movf	i2___lwmod@divisor,w,c
  7994  00297A  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7995  00297C  B4D8               	btfsc	status,2,c
  7996  00297E  D018               	goto	i2l899
  7997  002980  0E01               	movlw	1
  7998  002982  6E0C               	movwf	i2___lwmod@counter,c
  7999  002984  D004               	goto	i2l3959
  8000  002986                     i2l3957:
  8001  002986  90D8               	bcf	status,0,c
  8002  002988  360A               	rlcf	i2___lwmod@divisor,f,c
  8003  00298A  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8004  00298C  2A0C               	incf	i2___lwmod@counter,f,c
  8005  00298E                     i2l3959:
  8006  00298E  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8007  002990  D7FA               	goto	i2l3957
  8008  002992                     i2l3961:
  8009  002992  500A               	movf	i2___lwmod@divisor,w,c
  8010  002994  5C08               	subwf	i2___lwmod@dividend,w,c
  8011  002996  500B               	movf	i2___lwmod@divisor+1,w,c
  8012  002998  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8013  00299A  A0D8               	btfss	status,0,c
  8014  00299C  D004               	goto	i2l3965
  8015  00299E  500A               	movf	i2___lwmod@divisor,w,c
  8016  0029A0  5E08               	subwf	i2___lwmod@dividend,f,c
  8017  0029A2  500B               	movf	i2___lwmod@divisor+1,w,c
  8018  0029A4  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8019  0029A6                     i2l3965:
  8020  0029A6  90D8               	bcf	status,0,c
  8021  0029A8  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8022  0029AA  320A               	rrcf	i2___lwmod@divisor,f,c
  8023  0029AC  2E0C               	decfsz	i2___lwmod@counter,f,c
  8024  0029AE  D7F1               	goto	i2l3961
  8025  0029B0                     i2l899:
  8026  0029B0  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8027  0029B4  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8028  0029B8  0012               	return		;funcret
  8029  0029BA                     __end_ofi2___lwmod:
  8030                           	opt stack 0
  8031                           pclatu	equ	0xFFB
  8032                           pclath	equ	0xFFA
  8033                           tblptru	equ	0xFF8
  8034                           tblptrh	equ	0xFF7
  8035                           tblptrl	equ	0xFF6
  8036                           tablat	equ	0xFF5
  8037                           prodh	equ	0xFF4
  8038                           prodl	equ	0xFF3
  8039                           intcon	equ	0xFF2
  8040                           intcon2	equ	0xFF1
  8041                           intcon3	equ	0xFF0
  8042                           postinc0	equ	0xFEE
  8043                           fsr0h	equ	0xFEA
  8044                           fsr0l	equ	0xFE9
  8045                           wreg	equ	0xFE8
  8046                           fsr1h	equ	0xFE2
  8047                           fsr1l	equ	0xFE1
  8048                           indf2	equ	0xFDF
  8049                           postinc2	equ	0xFDE
  8050                           postdec2	equ	0xFDD
  8051                           fsr2h	equ	0xFDA
  8052                           fsr2l	equ	0xFD9
  8053                           status	equ	0xFD8
  8054                           
  8055 ;; *************** function i2___lwdiv *****************
  8056 ;; Defined at:
  8057 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8058 ;; Parameters:    Size  Location     Type
  8059 ;;  dividend        2    0[COMRAM] unsigned int 
  8060 ;;  divisor         2    2[COMRAM] unsigned int 
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8063 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8064 ;; Return value:  Size  Location     Type
  8065 ;;                  2    0[COMRAM] unsigned int 
  8066 ;; Registers used:
  8067 ;;		wreg, status,2, status,0
  8068 ;; Tracked objects:
  8069 ;;		On entry : 0/0
  8070 ;;		On exit  : 0/0
  8071 ;;		Unchanged: 0/0
  8072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;Total ram usage:        7 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; This function calls:
  8080 ;;		Nothing
  8081 ;; This function is called by:
  8082 ;;		i2_printf
  8083 ;; This function uses a non-reentrant model
  8084 ;;
  8085                           
  8086                           	psect	text33
  8087  002888                     __ptext33:
  8088                           	opt stack 0
  8089  002888                     i2___lwdiv:
  8090                           	opt stack 24
  8091                           
  8092                           ;incstack = 0
  8093  002888  0E00               	movlw	0
  8094  00288A  6E06               	movwf	i2___lwdiv@quotient+1,c
  8095  00288C  0E00               	movlw	0
  8096  00288E  6E05               	movwf	i2___lwdiv@quotient,c
  8097  002890  5003               	movf	i2___lwdiv@divisor,w,c
  8098  002892  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8099  002894  B4D8               	btfsc	status,2,c
  8100  002896  D01C               	goto	i2l889
  8101  002898  0E01               	movlw	1
  8102  00289A  6E07               	movwf	i2___lwdiv@counter,c
  8103  00289C  D004               	goto	i2l3939
  8104  00289E                     i2l3937:
  8105  00289E  90D8               	bcf	status,0,c
  8106  0028A0  3603               	rlcf	i2___lwdiv@divisor,f,c
  8107  0028A2  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8108  0028A4  2A07               	incf	i2___lwdiv@counter,f,c
  8109  0028A6                     i2l3939:
  8110  0028A6  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8111  0028A8  D7FA               	goto	i2l3937
  8112  0028AA                     i2l3941:
  8113  0028AA  90D8               	bcf	status,0,c
  8114  0028AC  3605               	rlcf	i2___lwdiv@quotient,f,c
  8115  0028AE  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8116  0028B0  5003               	movf	i2___lwdiv@divisor,w,c
  8117  0028B2  5C01               	subwf	i2___lwdiv@dividend,w,c
  8118  0028B4  5004               	movf	i2___lwdiv@divisor+1,w,c
  8119  0028B6  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8120  0028B8  A0D8               	btfss	status,0,c
  8121  0028BA  D005               	goto	i2l3949
  8122  0028BC  5003               	movf	i2___lwdiv@divisor,w,c
  8123  0028BE  5E01               	subwf	i2___lwdiv@dividend,f,c
  8124  0028C0  5004               	movf	i2___lwdiv@divisor+1,w,c
  8125  0028C2  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8126  0028C4  8005               	bsf	i2___lwdiv@quotient,0,c
  8127  0028C6                     i2l3949:
  8128  0028C6  90D8               	bcf	status,0,c
  8129  0028C8  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8130  0028CA  3203               	rrcf	i2___lwdiv@divisor,f,c
  8131  0028CC  2E07               	decfsz	i2___lwdiv@counter,f,c
  8132  0028CE  D7ED               	goto	i2l3941
  8133  0028D0                     i2l889:
  8134  0028D0  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8135  0028D4  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8136  0028D8  0012               	return		;funcret
  8137  0028DA                     __end_ofi2___lwdiv:
  8138                           	opt stack 0
  8139                           pclatu	equ	0xFFB
  8140                           pclath	equ	0xFFA
  8141                           tblptru	equ	0xFF8
  8142                           tblptrh	equ	0xFF7
  8143                           tblptrl	equ	0xFF6
  8144                           tablat	equ	0xFF5
  8145                           prodh	equ	0xFF4
  8146                           prodl	equ	0xFF3
  8147                           intcon	equ	0xFF2
  8148                           intcon2	equ	0xFF1
  8149                           intcon3	equ	0xFF0
  8150                           postinc0	equ	0xFEE
  8151                           fsr0h	equ	0xFEA
  8152                           fsr0l	equ	0xFE9
  8153                           wreg	equ	0xFE8
  8154                           fsr1h	equ	0xFE2
  8155                           fsr1l	equ	0xFE1
  8156                           indf2	equ	0xFDF
  8157                           postinc2	equ	0xFDE
  8158                           postdec2	equ	0xFDD
  8159                           fsr2h	equ	0xFDA
  8160                           fsr2l	equ	0xFD9
  8161                           status	equ	0xFD8
  8162                           
  8163 ;; *************** function i2_lcdInst *****************
  8164 ;; Defined at:
  8165 ;;		line 26 in file "lcd.c"
  8166 ;; Parameters:    Size  Location     Type
  8167 ;;  data            1    wreg     unsigned char 
  8168 ;; Auto vars:     Size  Location     Type
  8169 ;;  data            1    2[COMRAM] unsigned char 
  8170 ;; Return value:  Size  Location     Type
  8171 ;;                  1    wreg      void 
  8172 ;; Registers used:
  8173 ;;		wreg, status,2, status,0, cstack
  8174 ;; Tracked objects:
  8175 ;;		On entry : 0/0
  8176 ;;		On exit  : 0/0
  8177 ;;		Unchanged: 0/0
  8178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;Total ram usage:        1 bytes
  8184 ;; Hardware stack levels used:    1
  8185 ;; Hardware stack levels required when called:    1
  8186 ;; This function calls:
  8187 ;;		i2_lcdNibble
  8188 ;; This function is called by:
  8189 ;;		_isr
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193                           	psect	text34
  8194  002CB8                     __ptext34:
  8195                           	opt stack 0
  8196  002CB8                     i2_lcdInst:
  8197                           	opt stack 24
  8198                           
  8199                           ;incstack = 0
  8200                           ;i2lcdInst@data stored from wreg
  8201  002CB8  6E03               	movwf	i2lcdInst@data,c
  8202                           
  8203                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  8204  002CBA  948C               	bcf	3980,2,c	;volatile
  8205                           
  8206                           ;lcd.c: 28: lcdNibble(data);
  8207  002CBC  5003               	movf	i2lcdInst@data,w,c
  8208  002CBE  EC95  F014         	call	i2_lcdNibble
  8209  002CC2  0012               	return		;funcret
  8210  002CC4                     __end_ofi2_lcdInst:
  8211                           	opt stack 0
  8212                           pclatu	equ	0xFFB
  8213                           pclath	equ	0xFFA
  8214                           tblptru	equ	0xFF8
  8215                           tblptrh	equ	0xFF7
  8216                           tblptrl	equ	0xFF6
  8217                           tablat	equ	0xFF5
  8218                           prodh	equ	0xFF4
  8219                           prodl	equ	0xFF3
  8220                           intcon	equ	0xFF2
  8221                           intcon2	equ	0xFF1
  8222                           intcon3	equ	0xFF0
  8223                           postinc0	equ	0xFEE
  8224                           fsr0h	equ	0xFEA
  8225                           fsr0l	equ	0xFE9
  8226                           wreg	equ	0xFE8
  8227                           fsr1h	equ	0xFE2
  8228                           fsr1l	equ	0xFE1
  8229                           indf2	equ	0xFDF
  8230                           postinc2	equ	0xFDE
  8231                           postdec2	equ	0xFDD
  8232                           fsr2h	equ	0xFDA
  8233                           fsr2l	equ	0xFD9
  8234                           status	equ	0xFD8
  8235                           
  8236 ;; *************** function i2_lcdNibble *****************
  8237 ;; Defined at:
  8238 ;;		line 36 in file "lcd.c"
  8239 ;; Parameters:    Size  Location     Type
  8240 ;;  data            1    wreg     unsigned char 
  8241 ;; Auto vars:     Size  Location     Type
  8242 ;;  data            1    1[COMRAM] unsigned char 
  8243 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8244 ;; Return value:  Size  Location     Type
  8245 ;;                  1    wreg      void 
  8246 ;; Registers used:
  8247 ;;		wreg, status,2, status,0
  8248 ;; Tracked objects:
  8249 ;;		On entry : 0/0
  8250 ;;		On exit  : 0/0
  8251 ;;		Unchanged: 0/0
  8252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8254 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8256 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;Total ram usage:        2 bytes
  8258 ;; Hardware stack levels used:    1
  8259 ;; This function calls:
  8260 ;;		Nothing
  8261 ;; This function is called by:
  8262 ;;		i2_lcdInst
  8263 ;;		i2_putch
  8264 ;; This function uses a non-reentrant model
  8265 ;;
  8266                           
  8267                           	psect	text35
  8268  00292A                     __ptext35:
  8269                           	opt stack 0
  8270  00292A                     i2_lcdNibble:
  8271                           	opt stack 23
  8272                           
  8273                           ;incstack = 0
  8274                           ;i2lcdNibble@data stored from wreg
  8275  00292A  6E02               	movwf	i2lcdNibble@data,c
  8276                           
  8277                           ;lcd.c: 38: char temp = data & 0xF0;
  8278  00292C  5002               	movf	i2lcdNibble@data,w,c
  8279  00292E  0BF0               	andlw	240
  8280  002930  6E01               	movwf	i2lcdNibble@temp,c
  8281                           
  8282                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8283  002932  508C               	movf	3980,w,c	;volatile
  8284  002934  0B0F               	andlw	15
  8285  002936  6E8C               	movwf	3980,c	;volatile
  8286                           
  8287                           ;lcd.c: 40: LATD = temp | LATD;
  8288  002938  5001               	movf	i2lcdNibble@temp,w,c
  8289  00293A  108C               	iorwf	3980,w,c	;volatile
  8290  00293C  6E8C               	movwf	3980,c	;volatile
  8291                           
  8292                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  8293  00293E  968C               	bcf	3980,3,c	;volatile
  8294                           
  8295                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8296  002940  0E19               	movlw	25
  8297  002942                     i2u484_47:
  8298  002942  2EE8               	decfsz	wreg,f,c
  8299  002944  D7FE               	bra	i2u484_47
  8300                           
  8301                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  8302  002946  868C               	bsf	3980,3,c	;volatile
  8303                           
  8304                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8305  002948  0E19               	movlw	25
  8306  00294A                     i2u485_47:
  8307  00294A  2EE8               	decfsz	wreg,f,c
  8308  00294C  D7FE               	bra	i2u485_47
  8309                           
  8310                           ;lcd.c: 47: data = data << 4;
  8311  00294E  3802               	swapf	i2lcdNibble@data,w,c
  8312  002950  0BF0               	andlw	240
  8313  002952  6E02               	movwf	i2lcdNibble@data,c
  8314                           
  8315                           ;lcd.c: 49: temp = data & 0xF0;
  8316  002954  5002               	movf	i2lcdNibble@data,w,c
  8317  002956  0BF0               	andlw	240
  8318  002958  6E01               	movwf	i2lcdNibble@temp,c
  8319                           
  8320                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8321  00295A  508C               	movf	3980,w,c	;volatile
  8322  00295C  0B0F               	andlw	15
  8323  00295E  6E8C               	movwf	3980,c	;volatile
  8324                           
  8325                           ;lcd.c: 51: LATD = temp | LATD;
  8326  002960  5001               	movf	i2lcdNibble@temp,w,c
  8327  002962  108C               	iorwf	3980,w,c	;volatile
  8328  002964  6E8C               	movwf	3980,c	;volatile
  8329                           
  8330                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8331  002966  968C               	bcf	3980,3,c	;volatile
  8332                           
  8333                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8334  002968  0E19               	movlw	25
  8335  00296A                     i2u486_47:
  8336  00296A  2EE8               	decfsz	wreg,f,c
  8337  00296C  D7FE               	bra	i2u486_47
  8338                           
  8339                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8340  00296E  868C               	bsf	3980,3,c	;volatile
  8341                           
  8342                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8343  002970  0E19               	movlw	25
  8344  002972                     i2u487_47:
  8345  002972  2EE8               	decfsz	wreg,f,c
  8346  002974  D7FE               	bra	i2u487_47
  8347  002976  0012               	return		;funcret
  8348  002978                     __end_ofi2_lcdNibble:
  8349                           	opt stack 0
  8350                           pclatu	equ	0xFFB
  8351                           pclath	equ	0xFFA
  8352                           tblptru	equ	0xFF8
  8353                           tblptrh	equ	0xFF7
  8354                           tblptrl	equ	0xFF6
  8355                           tablat	equ	0xFF5
  8356                           prodh	equ	0xFF4
  8357                           prodl	equ	0xFF3
  8358                           intcon	equ	0xFF2
  8359                           intcon2	equ	0xFF1
  8360                           intcon3	equ	0xFF0
  8361                           postinc0	equ	0xFEE
  8362                           fsr0h	equ	0xFEA
  8363                           fsr0l	equ	0xFE9
  8364                           wreg	equ	0xFE8
  8365                           fsr1h	equ	0xFE2
  8366                           fsr1l	equ	0xFE1
  8367                           indf2	equ	0xFDF
  8368                           postinc2	equ	0xFDE
  8369                           postdec2	equ	0xFDD
  8370                           fsr2h	equ	0xFDA
  8371                           fsr2l	equ	0xFD9
  8372                           status	equ	0xFD8
  8373                           
  8374 ;; *************** function _servo_rotate2 *****************
  8375 ;; Defined at:
  8376 ;;		line 514 in file "main.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;  degree          2   14[COMRAM] int 
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;  j               2   22[COMRAM] unsigned int 
  8381 ;;  i               2   20[COMRAM] unsigned int 
  8382 ;;  duty            2   18[COMRAM] int 
  8383 ;; Return value:  Size  Location     Type
  8384 ;;                  1    wreg      void 
  8385 ;; Registers used:
  8386 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8392 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;Total ram usage:       10 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:    1
  8399 ;; This function calls:
  8400 ;;		___awdiv
  8401 ;;		i2___wmul
  8402 ;; This function is called by:
  8403 ;;		_isr
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           	psect	text36
  8408  0020C6                     __ptext36:
  8409                           	opt stack 0
  8410  0020C6                     _servo_rotate2:
  8411                           	opt stack 24
  8412                           
  8413                           ;main.c: 515: unsigned int i;
  8414                           ;main.c: 516: unsigned int j;
  8415                           ;main.c: 517: int duty = ((degree+90)*5/90)+10;
  8416                           
  8417                           ;incstack = 0
  8418  0020C6  0E5A               	movlw	90
  8419  0020C8  240F               	addwf	servo_rotate2@degree,w,c
  8420  0020CA  6E01               	movwf	i2___wmul@multiplier,c
  8421  0020CC  0E00               	movlw	0
  8422  0020CE  2010               	addwfc	servo_rotate2@degree+1,w,c
  8423  0020D0  6E02               	movwf	i2___wmul@multiplier+1,c
  8424  0020D2  0E00               	movlw	0
  8425  0020D4  6E04               	movwf	i2___wmul@multiplicand+1,c
  8426  0020D6  0E05               	movlw	5
  8427  0020D8  6E03               	movwf	i2___wmul@multiplicand,c
  8428  0020DA  ECE2  F015         	call	i2___wmul	;wreg free
  8429  0020DE  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8430  0020E2  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8431  0020E6  0E00               	movlw	0
  8432  0020E8  6E0A               	movwf	___awdiv@divisor+1,c
  8433  0020EA  0E5A               	movlw	90
  8434  0020EC  6E09               	movwf	___awdiv@divisor,c
  8435  0020EE  EC97  F012         	call	___awdiv	;wreg free
  8436  0020F2  0E0A               	movlw	10
  8437  0020F4  2407               	addwf	?___awdiv,w,c
  8438  0020F6  6E13               	movwf	servo_rotate2@duty,c
  8439  0020F8  0E00               	movlw	0
  8440  0020FA  2008               	addwfc	?___awdiv+1,w,c
  8441  0020FC  6E14               	movwf	servo_rotate2@duty+1,c
  8442                           
  8443                           ;main.c: 518: for (i=0; i<50; i++) {
  8444  0020FE  0E00               	movlw	0
  8445  002100  6E16               	movwf	servo_rotate2@i+1,c
  8446  002102  0E00               	movlw	0
  8447  002104  6E15               	movwf	servo_rotate2@i,c
  8448  002106                     i2l4191:
  8449  002106  5016               	movf	servo_rotate2@i+1,w,c
  8450  002108  E137               	bnz	i2l407
  8451  00210A  0E32               	movlw	50
  8452  00210C  5C15               	subwf	servo_rotate2@i,w,c
  8453  00210E  B0D8               	btfsc	status,0,c
  8454  002110  0012               	return	
  8455                           
  8456                           ;main.c: 519: LATCbits.LATC2 = 1;
  8457  002112  848B               	bsf	3979,2,c	;volatile
  8458                           
  8459                           ;main.c: 520: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8460  002114  0E00               	movlw	0
  8461  002116  6E18               	movwf	servo_rotate2@j+1,c
  8462  002118  0E00               	movlw	0
  8463  00211A  6E17               	movwf	servo_rotate2@j,c
  8464  00211C  D006               	goto	i2l401
  8465  00211E                     i2l4197:
  8466  00211E  0E53               	movlw	83
  8467  002120                     i2u488_47:
  8468  002120  2EE8               	decfsz	wreg,f,c
  8469  002122  D7FE               	bra	i2u488_47
  8470  002124  F000               	nop	
  8471  002126  4A17               	infsnz	servo_rotate2@j,f,c
  8472  002128  2A18               	incf	servo_rotate2@j+1,f,c
  8473  00212A                     i2l401:
  8474  00212A  5013               	movf	servo_rotate2@duty,w,c
  8475  00212C  5C17               	subwf	servo_rotate2@j,w,c
  8476  00212E  5014               	movf	servo_rotate2@duty+1,w,c
  8477  002130  5818               	subwfb	servo_rotate2@j+1,w,c
  8478  002132  A0D8               	btfss	status,0,c
  8479  002134  D7F4               	goto	i2l4197
  8480                           
  8481                           ;main.c: 521: LATCbits.LATC2 = 0;
  8482  002136  948B               	bcf	3979,2,c	;volatile
  8483                           
  8484                           ;main.c: 522: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8485  002138  0E00               	movlw	0
  8486  00213A  6E18               	movwf	servo_rotate2@j+1,c
  8487  00213C  0E00               	movlw	0
  8488  00213E  6E17               	movwf	servo_rotate2@j,c
  8489  002140  D006               	goto	i2l404
  8490  002142                     i2l4203:
  8491  002142  0E53               	movlw	83
  8492  002144                     i2u489_47:
  8493  002144  2EE8               	decfsz	wreg,f,c
  8494  002146  D7FE               	bra	i2u489_47
  8495  002148  F000               	nop	
  8496  00214A  4A17               	infsnz	servo_rotate2@j,f,c
  8497  00214C  2A18               	incf	servo_rotate2@j+1,f,c
  8498  00214E                     i2l404:
  8499  00214E  C013  F011         	movff	servo_rotate2@duty,??_servo_rotate2
  8500  002152  C014  F012         	movff	servo_rotate2@duty+1,??_servo_rotate2+1
  8501  002156  1E11               	comf	??_servo_rotate2,f,c
  8502  002158  1E12               	comf	??_servo_rotate2+1,f,c
  8503  00215A  4A11               	infsnz	??_servo_rotate2,f,c
  8504  00215C  2A12               	incf	??_servo_rotate2+1,f,c
  8505  00215E  0EC8               	movlw	200
  8506  002160  2611               	addwf	??_servo_rotate2,f,c
  8507  002162  0E00               	movlw	0
  8508  002164  2212               	addwfc	??_servo_rotate2+1,f,c
  8509  002166  5011               	movf	??_servo_rotate2,w,c
  8510  002168  5C17               	subwf	servo_rotate2@j,w,c
  8511  00216A  5012               	movf	??_servo_rotate2+1,w,c
  8512  00216C  5818               	subwfb	servo_rotate2@j+1,w,c
  8513  00216E  A0D8               	btfss	status,0,c
  8514  002170  D7E8               	goto	i2l4203
  8515  002172  4A15               	infsnz	servo_rotate2@i,f,c
  8516  002174  2A16               	incf	servo_rotate2@i+1,f,c
  8517  002176  D7C7               	goto	i2l4191
  8518  002178                     i2l407:
  8519  002178  0012               	return		;funcret
  8520  00217A                     __end_of_servo_rotate2:
  8521                           	opt stack 0
  8522                           pclatu	equ	0xFFB
  8523                           pclath	equ	0xFFA
  8524                           tblptru	equ	0xFF8
  8525                           tblptrh	equ	0xFF7
  8526                           tblptrl	equ	0xFF6
  8527                           tablat	equ	0xFF5
  8528                           prodh	equ	0xFF4
  8529                           prodl	equ	0xFF3
  8530                           intcon	equ	0xFF2
  8531                           intcon2	equ	0xFF1
  8532                           intcon3	equ	0xFF0
  8533                           postinc0	equ	0xFEE
  8534                           fsr0h	equ	0xFEA
  8535                           fsr0l	equ	0xFE9
  8536                           wreg	equ	0xFE8
  8537                           fsr1h	equ	0xFE2
  8538                           fsr1l	equ	0xFE1
  8539                           indf2	equ	0xFDF
  8540                           postinc2	equ	0xFDE
  8541                           postdec2	equ	0xFDD
  8542                           fsr2h	equ	0xFDA
  8543                           fsr2l	equ	0xFD9
  8544                           status	equ	0xFD8
  8545                           
  8546 ;; *************** function _servo_rotate1 *****************
  8547 ;; Defined at:
  8548 ;;		line 501 in file "main.c"
  8549 ;; Parameters:    Size  Location     Type
  8550 ;;  degree          2   14[COMRAM] int 
  8551 ;; Auto vars:     Size  Location     Type
  8552 ;;  j               2   22[COMRAM] unsigned int 
  8553 ;;  i               2   20[COMRAM] unsigned int 
  8554 ;;  duty            2   18[COMRAM] int 
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  1    wreg      void 
  8557 ;; Registers used:
  8558 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8564 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8566 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8567 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;Total ram usage:       10 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:    1
  8571 ;; This function calls:
  8572 ;;		___awdiv
  8573 ;;		i2___wmul
  8574 ;; This function is called by:
  8575 ;;		_isr
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           	psect	text37
  8580  00217A                     __ptext37:
  8581                           	opt stack 0
  8582  00217A                     _servo_rotate1:
  8583                           	opt stack 24
  8584                           
  8585                           ;main.c: 502: unsigned int i;
  8586                           ;main.c: 503: unsigned int j;
  8587                           ;main.c: 504: int duty = ((degree+90)*5/90)+10;
  8588                           
  8589                           ;incstack = 0
  8590  00217A  0E5A               	movlw	90
  8591  00217C  240F               	addwf	servo_rotate1@degree,w,c
  8592  00217E  6E01               	movwf	i2___wmul@multiplier,c
  8593  002180  0E00               	movlw	0
  8594  002182  2010               	addwfc	servo_rotate1@degree+1,w,c
  8595  002184  6E02               	movwf	i2___wmul@multiplier+1,c
  8596  002186  0E00               	movlw	0
  8597  002188  6E04               	movwf	i2___wmul@multiplicand+1,c
  8598  00218A  0E05               	movlw	5
  8599  00218C  6E03               	movwf	i2___wmul@multiplicand,c
  8600  00218E  ECE2  F015         	call	i2___wmul	;wreg free
  8601  002192  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8602  002196  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8603  00219A  0E00               	movlw	0
  8604  00219C  6E0A               	movwf	___awdiv@divisor+1,c
  8605  00219E  0E5A               	movlw	90
  8606  0021A0  6E09               	movwf	___awdiv@divisor,c
  8607  0021A2  EC97  F012         	call	___awdiv	;wreg free
  8608  0021A6  0E0A               	movlw	10
  8609  0021A8  2407               	addwf	?___awdiv,w,c
  8610  0021AA  6E13               	movwf	servo_rotate1@duty,c
  8611  0021AC  0E00               	movlw	0
  8612  0021AE  2008               	addwfc	?___awdiv+1,w,c
  8613  0021B0  6E14               	movwf	servo_rotate1@duty+1,c
  8614                           
  8615                           ;main.c: 505: for (i=0; i<50; i++) {
  8616  0021B2  0E00               	movlw	0
  8617  0021B4  6E16               	movwf	servo_rotate1@i+1,c
  8618  0021B6  0E00               	movlw	0
  8619  0021B8  6E15               	movwf	servo_rotate1@i,c
  8620  0021BA                     i2l4215:
  8621  0021BA  5016               	movf	servo_rotate1@i+1,w,c
  8622  0021BC  E137               	bnz	i2l396
  8623  0021BE  0E32               	movlw	50
  8624  0021C0  5C15               	subwf	servo_rotate1@i,w,c
  8625  0021C2  B0D8               	btfsc	status,0,c
  8626  0021C4  0012               	return	
  8627                           
  8628                           ;main.c: 506: LATCbits.LATC1 = 1;
  8629  0021C6  828B               	bsf	3979,1,c	;volatile
  8630                           
  8631                           ;main.c: 507: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8632  0021C8  0E00               	movlw	0
  8633  0021CA  6E18               	movwf	servo_rotate1@j+1,c
  8634  0021CC  0E00               	movlw	0
  8635  0021CE  6E17               	movwf	servo_rotate1@j,c
  8636  0021D0  D006               	goto	i2l390
  8637  0021D2                     i2l4221:
  8638  0021D2  0E53               	movlw	83
  8639  0021D4                     i2u490_47:
  8640  0021D4  2EE8               	decfsz	wreg,f,c
  8641  0021D6  D7FE               	bra	i2u490_47
  8642  0021D8  F000               	nop	
  8643  0021DA  4A17               	infsnz	servo_rotate1@j,f,c
  8644  0021DC  2A18               	incf	servo_rotate1@j+1,f,c
  8645  0021DE                     i2l390:
  8646  0021DE  5013               	movf	servo_rotate1@duty,w,c
  8647  0021E0  5C17               	subwf	servo_rotate1@j,w,c
  8648  0021E2  5014               	movf	servo_rotate1@duty+1,w,c
  8649  0021E4  5818               	subwfb	servo_rotate1@j+1,w,c
  8650  0021E6  A0D8               	btfss	status,0,c
  8651  0021E8  D7F4               	goto	i2l4221
  8652                           
  8653                           ;main.c: 508: LATCbits.LATC1 = 0;
  8654  0021EA  928B               	bcf	3979,1,c	;volatile
  8655                           
  8656                           ;main.c: 509: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8657  0021EC  0E00               	movlw	0
  8658  0021EE  6E18               	movwf	servo_rotate1@j+1,c
  8659  0021F0  0E00               	movlw	0
  8660  0021F2  6E17               	movwf	servo_rotate1@j,c
  8661  0021F4  D006               	goto	i2l393
  8662  0021F6                     i2l4227:
  8663  0021F6  0E53               	movlw	83
  8664  0021F8                     i2u491_47:
  8665  0021F8  2EE8               	decfsz	wreg,f,c
  8666  0021FA  D7FE               	bra	i2u491_47
  8667  0021FC  F000               	nop	
  8668  0021FE  4A17               	infsnz	servo_rotate1@j,f,c
  8669  002200  2A18               	incf	servo_rotate1@j+1,f,c
  8670  002202                     i2l393:
  8671  002202  C013  F011         	movff	servo_rotate1@duty,??_servo_rotate1
  8672  002206  C014  F012         	movff	servo_rotate1@duty+1,??_servo_rotate1+1
  8673  00220A  1E11               	comf	??_servo_rotate1,f,c
  8674  00220C  1E12               	comf	??_servo_rotate1+1,f,c
  8675  00220E  4A11               	infsnz	??_servo_rotate1,f,c
  8676  002210  2A12               	incf	??_servo_rotate1+1,f,c
  8677  002212  0EC8               	movlw	200
  8678  002214  2611               	addwf	??_servo_rotate1,f,c
  8679  002216  0E00               	movlw	0
  8680  002218  2212               	addwfc	??_servo_rotate1+1,f,c
  8681  00221A  5011               	movf	??_servo_rotate1,w,c
  8682  00221C  5C17               	subwf	servo_rotate1@j,w,c
  8683  00221E  5012               	movf	??_servo_rotate1+1,w,c
  8684  002220  5818               	subwfb	servo_rotate1@j+1,w,c
  8685  002222  A0D8               	btfss	status,0,c
  8686  002224  D7E8               	goto	i2l4227
  8687  002226  4A15               	infsnz	servo_rotate1@i,f,c
  8688  002228  2A16               	incf	servo_rotate1@i+1,f,c
  8689  00222A  D7C7               	goto	i2l4215
  8690  00222C                     i2l396:
  8691  00222C  0012               	return		;funcret
  8692  00222E                     __end_of_servo_rotate1:
  8693                           	opt stack 0
  8694                           pclatu	equ	0xFFB
  8695                           pclath	equ	0xFFA
  8696                           tblptru	equ	0xFF8
  8697                           tblptrh	equ	0xFF7
  8698                           tblptrl	equ	0xFF6
  8699                           tablat	equ	0xFF5
  8700                           prodh	equ	0xFF4
  8701                           prodl	equ	0xFF3
  8702                           intcon	equ	0xFF2
  8703                           intcon2	equ	0xFF1
  8704                           intcon3	equ	0xFF0
  8705                           postinc0	equ	0xFEE
  8706                           fsr0h	equ	0xFEA
  8707                           fsr0l	equ	0xFE9
  8708                           wreg	equ	0xFE8
  8709                           fsr1h	equ	0xFE2
  8710                           fsr1l	equ	0xFE1
  8711                           indf2	equ	0xFDF
  8712                           postinc2	equ	0xFDE
  8713                           postdec2	equ	0xFDD
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function _servo_rotate0 *****************
  8719 ;; Defined at:
  8720 ;;		line 488 in file "main.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;  degree          2    0[COMRAM] int 
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;  j               2    8[COMRAM] unsigned int 
  8725 ;;  i               2    6[COMRAM] unsigned int 
  8726 ;;  duty            2    4[COMRAM] int 
  8727 ;; Return value:  Size  Location     Type
  8728 ;;                  1    wreg      void 
  8729 ;; Registers used:
  8730 ;;		wreg, status,2, status,0
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8736 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8739 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8740 ;;Total ram usage:       10 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; This function calls:
  8743 ;;		Nothing
  8744 ;; This function is called by:
  8745 ;;		_isr
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text38
  8750  00237E                     __ptext38:
  8751                           	opt stack 0
  8752  00237E                     _servo_rotate0:
  8753                           	opt stack 25
  8754                           
  8755                           ;main.c: 489: unsigned int i;
  8756                           ;main.c: 490: unsigned int j;
  8757                           ;main.c: 491: int duty = degree;
  8758                           
  8759                           ;incstack = 0
  8760  00237E  C001  F005         	movff	servo_rotate0@degree,servo_rotate0@duty
  8761  002382  C002  F006         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  8762                           
  8763                           ;main.c: 492: for (i=0; i<50; i++) {
  8764  002386  0E00               	movlw	0
  8765  002388  6E08               	movwf	servo_rotate0@i+1,c
  8766  00238A  0E00               	movlw	0
  8767  00238C  6E07               	movwf	servo_rotate0@i,c
  8768  00238E                     i2l4167:
  8769  00238E  5008               	movf	servo_rotate0@i+1,w,c
  8770  002390  E13D               	bnz	i2l385
  8771  002392  0E32               	movlw	50
  8772  002394  5C07               	subwf	servo_rotate0@i,w,c
  8773  002396  B0D8               	btfsc	status,0,c
  8774  002398  0012               	return	
  8775                           
  8776                           ;main.c: 493: LATCbits.LATC0 = 1;
  8777  00239A  808B               	bsf	3979,0,c	;volatile
  8778                           
  8779                           ;main.c: 494: for(j=0; j<duty; j++) _delay((unsigned long)((1)*(10000000/4000.0)));
  8780  00239C  0E00               	movlw	0
  8781  00239E  6E0A               	movwf	servo_rotate0@j+1,c
  8782  0023A0  0E00               	movlw	0
  8783  0023A2  6E09               	movwf	servo_rotate0@j,c
  8784  0023A4  D009               	goto	i2l379
  8785  0023A6                     i2l4173:
  8786  0023A6  0E04               	movlw	4
  8787  0023A8  6E03               	movwf	??_servo_rotate0& (0+255),c
  8788  0023AA  0E3E               	movlw	62
  8789  0023AC                     i2u492_47:
  8790  0023AC  2EE8               	decfsz	wreg,f,c
  8791  0023AE  D7FE               	bra	i2u492_47
  8792  0023B0  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8793  0023B2  D7FC               	bra	i2u492_47
  8794  0023B4  4A09               	infsnz	servo_rotate0@j,f,c
  8795  0023B6  2A0A               	incf	servo_rotate0@j+1,f,c
  8796  0023B8                     i2l379:
  8797  0023B8  5005               	movf	servo_rotate0@duty,w,c
  8798  0023BA  5C09               	subwf	servo_rotate0@j,w,c
  8799  0023BC  5006               	movf	servo_rotate0@duty+1,w,c
  8800  0023BE  580A               	subwfb	servo_rotate0@j+1,w,c
  8801  0023C0  A0D8               	btfss	status,0,c
  8802  0023C2  D7F1               	goto	i2l4173
  8803                           
  8804                           ;main.c: 495: LATCbits.LATC0 = 0;
  8805  0023C4  908B               	bcf	3979,0,c	;volatile
  8806                           
  8807                           ;main.c: 496: for(j=0; j<(20 - duty); j++) _delay((unsigned long)((1)*(10000000/4000.0))
      +                          );
  8808  0023C6  0E00               	movlw	0
  8809  0023C8  6E0A               	movwf	servo_rotate0@j+1,c
  8810  0023CA  0E00               	movlw	0
  8811  0023CC  6E09               	movwf	servo_rotate0@j,c
  8812  0023CE  D009               	goto	i2l382
  8813  0023D0                     i2l4179:
  8814  0023D0  0E04               	movlw	4
  8815  0023D2  6E03               	movwf	??_servo_rotate0& (0+255),c
  8816  0023D4  0E3E               	movlw	62
  8817  0023D6                     i2u493_47:
  8818  0023D6  2EE8               	decfsz	wreg,f,c
  8819  0023D8  D7FE               	bra	i2u493_47
  8820  0023DA  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8821  0023DC  D7FC               	bra	i2u493_47
  8822  0023DE  4A09               	infsnz	servo_rotate0@j,f,c
  8823  0023E0  2A0A               	incf	servo_rotate0@j+1,f,c
  8824  0023E2                     i2l382:
  8825  0023E2  C005  F003         	movff	servo_rotate0@duty,??_servo_rotate0
  8826  0023E6  C006  F004         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  8827  0023EA  1E03               	comf	??_servo_rotate0,f,c
  8828  0023EC  1E04               	comf	??_servo_rotate0+1,f,c
  8829  0023EE  4A03               	infsnz	??_servo_rotate0,f,c
  8830  0023F0  2A04               	incf	??_servo_rotate0+1,f,c
  8831  0023F2  0E14               	movlw	20
  8832  0023F4  2603               	addwf	??_servo_rotate0,f,c
  8833  0023F6  0E00               	movlw	0
  8834  0023F8  2204               	addwfc	??_servo_rotate0+1,f,c
  8835  0023FA  5003               	movf	??_servo_rotate0,w,c
  8836  0023FC  5C09               	subwf	servo_rotate0@j,w,c
  8837  0023FE  5004               	movf	??_servo_rotate0+1,w,c
  8838  002400  580A               	subwfb	servo_rotate0@j+1,w,c
  8839  002402  A0D8               	btfss	status,0,c
  8840  002404  D7E5               	goto	i2l4179
  8841  002406  4A07               	infsnz	servo_rotate0@i,f,c
  8842  002408  2A08               	incf	servo_rotate0@i+1,f,c
  8843  00240A  D7C1               	goto	i2l4167
  8844  00240C                     i2l385:
  8845  00240C  0012               	return		;funcret
  8846  00240E                     __end_of_servo_rotate0:
  8847                           	opt stack 0
  8848                           pclatu	equ	0xFFB
  8849                           pclath	equ	0xFFA
  8850                           tblptru	equ	0xFF8
  8851                           tblptrh	equ	0xFF7
  8852                           tblptrl	equ	0xFF6
  8853                           tablat	equ	0xFF5
  8854                           prodh	equ	0xFF4
  8855                           prodl	equ	0xFF3
  8856                           intcon	equ	0xFF2
  8857                           intcon2	equ	0xFF1
  8858                           intcon3	equ	0xFF0
  8859                           postinc0	equ	0xFEE
  8860                           fsr0h	equ	0xFEA
  8861                           fsr0l	equ	0xFE9
  8862                           wreg	equ	0xFE8
  8863                           fsr1h	equ	0xFE2
  8864                           fsr1l	equ	0xFE1
  8865                           indf2	equ	0xFDF
  8866                           postinc2	equ	0xFDE
  8867                           postdec2	equ	0xFDD
  8868                           fsr2h	equ	0xFDA
  8869                           fsr2l	equ	0xFD9
  8870                           status	equ	0xFD8
  8871                           
  8872 ;; *************** function _read_time *****************
  8873 ;; Defined at:
  8874 ;;		line 379 in file "main.c"
  8875 ;; Parameters:    Size  Location     Type
  8876 ;;		None
  8877 ;; Auto vars:     Size  Location     Type
  8878 ;;  i               1    3[COMRAM] unsigned char 
  8879 ;; Return value:  Size  Location     Type
  8880 ;;                  1    wreg      void 
  8881 ;; Registers used:
  8882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8883 ;; Tracked objects:
  8884 ;;		On entry : 0/0
  8885 ;;		On exit  : 0/0
  8886 ;;		Unchanged: 0/0
  8887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8892 ;;Total ram usage:        1 bytes
  8893 ;; Hardware stack levels used:    1
  8894 ;; Hardware stack levels required when called:    2
  8895 ;; This function calls:
  8896 ;;		i2_I2C_Master_Read
  8897 ;;		i2_I2C_Master_Start
  8898 ;;		i2_I2C_Master_Stop
  8899 ;;		i2_I2C_Master_Write
  8900 ;; This function is called by:
  8901 ;;		_isr
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           	psect	text39
  8906  0026A2                     __ptext39:
  8907                           	opt stack 0
  8908  0026A2                     _read_time:
  8909                           	opt stack 23
  8910                           
  8911                           ;main.c: 381: I2C_Master_Start();
  8912                           
  8913                           ;incstack = 0
  8914  0026A2  EC78  F016         	call	i2_I2C_Master_Start	;wreg free
  8915                           
  8916                           ;main.c: 382: I2C_Master_Write(0b11010000);
  8917  0026A6  0E00               	movlw	0
  8918  0026A8  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8919  0026AA  0ED0               	movlw	208
  8920  0026AC  6E02               	movwf	i2I2C_Master_Write@d,c
  8921  0026AE  EC67  F016         	call	i2_I2C_Master_Write	;wreg free
  8922                           
  8923                           ;main.c: 383: I2C_Master_Write(0x00);
  8924  0026B2  0E00               	movlw	0
  8925  0026B4  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8926  0026B6  0E00               	movlw	0
  8927  0026B8  6E02               	movwf	i2I2C_Master_Write@d,c
  8928  0026BA  EC67  F016         	call	i2_I2C_Master_Write	;wreg free
  8929                           
  8930                           ;main.c: 384: I2C_Master_Stop();
  8931  0026BE  EC74  F016         	call	i2_I2C_Master_Stop	;wreg free
  8932                           
  8933                           ;main.c: 387: I2C_Master_Start();
  8934  0026C2  EC78  F016         	call	i2_I2C_Master_Start	;wreg free
  8935                           
  8936                           ;main.c: 388: I2C_Master_Write(0b11010001);
  8937  0026C6  0E00               	movlw	0
  8938  0026C8  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8939  0026CA  0ED1               	movlw	209
  8940  0026CC  6E02               	movwf	i2I2C_Master_Write@d,c
  8941  0026CE  EC67  F016         	call	i2_I2C_Master_Write	;wreg free
  8942                           
  8943                           ;main.c: 389: for(unsigned char i=0;i<0x06;i++){
  8944  0026D2  0E00               	movlw	0
  8945  0026D4  6E04               	movwf	read_time@i,c
  8946  0026D6                     i2l4131:
  8947  0026D6  0E05               	movlw	5
  8948  0026D8  6404               	cpfsgt	read_time@i,c
  8949  0026DA  D001               	goto	i2l4135
  8950  0026DC  D00E               	goto	i2l4141
  8951  0026DE                     i2l4135:
  8952                           
  8953                           ;main.c: 390: time[i] = I2C_Master_Read(1);
  8954  0026DE  5004               	movf	read_time@i,w,c
  8955  0026E0  0D01               	mullw	1
  8956  0026E2  0E9E               	movlw	low _time
  8957  0026E4  24F3               	addwf	prodl,w,c
  8958  0026E6  6ED9               	movwf	fsr2l,c
  8959  0026E8  0E00               	movlw	high _time
  8960  0026EA  20F4               	addwfc	prodh,w,c
  8961  0026EC  6EDA               	movwf	fsr2h,c
  8962  0026EE  0E01               	movlw	1
  8963  0026F0  ECCF  F015         	call	i2_I2C_Master_Read
  8964  0026F4  6EDF               	movwf	indf2,c
  8965  0026F6  2A04               	incf	read_time@i,f,c
  8966  0026F8  D7EE               	goto	i2l4131
  8967  0026FA                     i2l4141:
  8968                           
  8969                           ;main.c: 391: }
  8970                           ;main.c: 392: time[6] = I2C_Master_Read(0);
  8971  0026FA  0E00               	movlw	0
  8972  0026FC  ECCF  F015         	call	i2_I2C_Master_Read
  8973  002700  0100               	movlb	0	; () banked
  8974  002702  6FA4               	movwf	(_time+6)& (0+255),b
  8975                           
  8976                           ;main.c: 393: I2C_Master_Stop();
  8977  002704  EC74  F016         	call	i2_I2C_Master_Stop	;wreg free
  8978  002708  0012               	return	
  8979  00270A                     __end_of_read_time:
  8980                           	opt stack 0
  8981                           pclatu	equ	0xFFB
  8982                           pclath	equ	0xFFA
  8983                           tblptru	equ	0xFF8
  8984                           tblptrh	equ	0xFF7
  8985                           tblptrl	equ	0xFF6
  8986                           tablat	equ	0xFF5
  8987                           prodh	equ	0xFF4
  8988                           prodl	equ	0xFF3
  8989                           intcon	equ	0xFF2
  8990                           intcon2	equ	0xFF1
  8991                           intcon3	equ	0xFF0
  8992                           postinc0	equ	0xFEE
  8993                           fsr0h	equ	0xFEA
  8994                           fsr0l	equ	0xFE9
  8995                           wreg	equ	0xFE8
  8996                           fsr1h	equ	0xFE2
  8997                           fsr1l	equ	0xFE1
  8998                           indf2	equ	0xFDF
  8999                           postinc2	equ	0xFDE
  9000                           postdec2	equ	0xFDD
  9001                           fsr2h	equ	0xFDA
  9002                           fsr2l	equ	0xFD9
  9003                           status	equ	0xFD8
  9004                           
  9005 ;; *************** function i2_I2C_Master_Write *****************
  9006 ;; Defined at:
  9007 ;;		line 47 in file "I2C.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;  d               2    1[COMRAM] unsigned int 
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;		None
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  1    wreg      void 
  9014 ;; Registers used:
  9015 ;;		wreg, status,2, status,0, cstack
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9021 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;Total ram usage:        2 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    1
  9028 ;; This function calls:
  9029 ;;		i2_I2C_Master_Wait
  9030 ;; This function is called by:
  9031 ;;		_read_time
  9032 ;;		i2_read_colorsensor
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           	psect	text40
  9037  002CCE                     __ptext40:
  9038                           	opt stack 0
  9039  002CCE                     i2_I2C_Master_Write:
  9040                           	opt stack 23
  9041                           
  9042                           ;I2C.c: 49: I2C_Master_Wait();
  9043                           
  9044                           ;incstack = 0
  9045  002CCE  EC3D  F016         	call	i2_I2C_Master_Wait	;wreg free
  9046                           
  9047                           ;I2C.c: 50: SSPBUF = d;
  9048  002CD2  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  9049  002CD6  0012               	return		;funcret
  9050  002CD8                     __end_ofi2_I2C_Master_Write:
  9051                           	opt stack 0
  9052                           pclatu	equ	0xFFB
  9053                           pclath	equ	0xFFA
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           prodh	equ	0xFF4
  9059                           prodl	equ	0xFF3
  9060                           intcon	equ	0xFF2
  9061                           intcon2	equ	0xFF1
  9062                           intcon3	equ	0xFF0
  9063                           postinc0	equ	0xFEE
  9064                           fsr0h	equ	0xFEA
  9065                           fsr0l	equ	0xFE9
  9066                           wreg	equ	0xFE8
  9067                           fsr1h	equ	0xFE2
  9068                           fsr1l	equ	0xFE1
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           postdec2	equ	0xFDD
  9072                           fsr2h	equ	0xFDA
  9073                           fsr2l	equ	0xFD9
  9074                           status	equ	0xFD8
  9075                           
  9076 ;; *************** function i2_I2C_Master_Stop *****************
  9077 ;; Defined at:
  9078 ;;		line 41 in file "I2C.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;		None
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;		None
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  1    wreg      void 
  9085 ;; Registers used:
  9086 ;;		wreg, status,2, status,0, cstack
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9096 ;;Total ram usage:        0 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; Hardware stack levels required when called:    1
  9099 ;; This function calls:
  9100 ;;		i2_I2C_Master_Wait
  9101 ;; This function is called by:
  9102 ;;		_read_time
  9103 ;;		i2_read_colorsensor
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           	psect	text41
  9108  002CE8                     __ptext41:
  9109                           	opt stack 0
  9110  002CE8                     i2_I2C_Master_Stop:
  9111                           	opt stack 23
  9112                           
  9113                           ;I2C.c: 43: I2C_Master_Wait();
  9114                           
  9115                           ;incstack = 0
  9116  002CE8  EC3D  F016         	call	i2_I2C_Master_Wait	;wreg free
  9117                           
  9118                           ;I2C.c: 44: PEN = 1;
  9119  002CEC  84C5               	bsf	4037,2,c	;volatile
  9120  002CEE  0012               	return		;funcret
  9121  002CF0                     __end_ofi2_I2C_Master_Stop:
  9122                           	opt stack 0
  9123                           pclatu	equ	0xFFB
  9124                           pclath	equ	0xFFA
  9125                           tblptru	equ	0xFF8
  9126                           tblptrh	equ	0xFF7
  9127                           tblptrl	equ	0xFF6
  9128                           tablat	equ	0xFF5
  9129                           prodh	equ	0xFF4
  9130                           prodl	equ	0xFF3
  9131                           intcon	equ	0xFF2
  9132                           intcon2	equ	0xFF1
  9133                           intcon3	equ	0xFF0
  9134                           postinc0	equ	0xFEE
  9135                           fsr0h	equ	0xFEA
  9136                           fsr0l	equ	0xFE9
  9137                           wreg	equ	0xFE8
  9138                           fsr1h	equ	0xFE2
  9139                           fsr1l	equ	0xFE1
  9140                           indf2	equ	0xFDF
  9141                           postinc2	equ	0xFDE
  9142                           postdec2	equ	0xFDD
  9143                           fsr2h	equ	0xFDA
  9144                           fsr2l	equ	0xFD9
  9145                           status	equ	0xFD8
  9146                           
  9147 ;; *************** function i2_I2C_Master_Start *****************
  9148 ;; Defined at:
  9149 ;;		line 29 in file "I2C.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;		None
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;		None
  9154 ;; Return value:  Size  Location     Type
  9155 ;;                  1    wreg      void 
  9156 ;; Registers used:
  9157 ;;		wreg, status,2, status,0, cstack
  9158 ;; Tracked objects:
  9159 ;;		On entry : 0/0
  9160 ;;		On exit  : 0/0
  9161 ;;		Unchanged: 0/0
  9162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9167 ;;Total ram usage:        0 bytes
  9168 ;; Hardware stack levels used:    1
  9169 ;; Hardware stack levels required when called:    1
  9170 ;; This function calls:
  9171 ;;		i2_I2C_Master_Wait
  9172 ;; This function is called by:
  9173 ;;		_read_time
  9174 ;;		i2_read_colorsensor
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178                           	psect	text42
  9179  002CF0                     __ptext42:
  9180                           	opt stack 0
  9181  002CF0                     i2_I2C_Master_Start:
  9182                           	opt stack 23
  9183                           
  9184                           ;I2C.c: 31: I2C_Master_Wait();
  9185                           
  9186                           ;incstack = 0
  9187  002CF0  EC3D  F016         	call	i2_I2C_Master_Wait	;wreg free
  9188                           
  9189                           ;I2C.c: 32: SEN = 1;
  9190  002CF4  80C5               	bsf	4037,0,c	;volatile
  9191  002CF6  0012               	return		;funcret
  9192  002CF8                     __end_ofi2_I2C_Master_Start:
  9193                           	opt stack 0
  9194                           pclatu	equ	0xFFB
  9195                           pclath	equ	0xFFA
  9196                           tblptru	equ	0xFF8
  9197                           tblptrh	equ	0xFF7
  9198                           tblptrl	equ	0xFF6
  9199                           tablat	equ	0xFF5
  9200                           prodh	equ	0xFF4
  9201                           prodl	equ	0xFF3
  9202                           intcon	equ	0xFF2
  9203                           intcon2	equ	0xFF1
  9204                           intcon3	equ	0xFF0
  9205                           postinc0	equ	0xFEE
  9206                           fsr0h	equ	0xFEA
  9207                           fsr0l	equ	0xFE9
  9208                           wreg	equ	0xFE8
  9209                           fsr1h	equ	0xFE2
  9210                           fsr1l	equ	0xFE1
  9211                           indf2	equ	0xFDF
  9212                           postinc2	equ	0xFDE
  9213                           postdec2	equ	0xFDD
  9214                           fsr2h	equ	0xFDA
  9215                           fsr2l	equ	0xFD9
  9216                           status	equ	0xFD8
  9217                           
  9218 ;; *************** function i2_I2C_Master_Read *****************
  9219 ;; Defined at:
  9220 ;;		line 61 in file "I2C.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;  a               1    wreg     unsigned char 
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;  a               1    1[COMRAM] unsigned char 
  9225 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9226 ;; Return value:  Size  Location     Type
  9227 ;;                  1    wreg      unsigned char 
  9228 ;; Registers used:
  9229 ;;		wreg, status,2, status,0, cstack
  9230 ;; Tracked objects:
  9231 ;;		On entry : 0/0
  9232 ;;		On exit  : 0/0
  9233 ;;		Unchanged: 0/0
  9234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;Total ram usage:        2 bytes
  9240 ;; Hardware stack levels used:    1
  9241 ;; Hardware stack levels required when called:    1
  9242 ;; This function calls:
  9243 ;;		i2_I2C_Master_Wait
  9244 ;; This function is called by:
  9245 ;;		_read_time
  9246 ;;		i2_read_colorsensor
  9247 ;; This function uses a non-reentrant model
  9248 ;;
  9249                           
  9250                           	psect	text43
  9251  002B9E                     __ptext43:
  9252                           	opt stack 0
  9253  002B9E                     i2_I2C_Master_Read:
  9254                           	opt stack 23
  9255                           
  9256                           ;incstack = 0
  9257                           ;i2I2C_Master_Read@a stored from wreg
  9258  002B9E  6E02               	movwf	i2I2C_Master_Read@a,c
  9259                           
  9260                           ;I2C.c: 63: unsigned char temp;
  9261                           ;I2C.c: 64: I2C_Master_Wait();
  9262  002BA0  EC3D  F016         	call	i2_I2C_Master_Wait	;wreg free
  9263                           
  9264                           ;I2C.c: 65: RCEN = 1;
  9265  002BA4  86C5               	bsf	4037,3,c	;volatile
  9266                           
  9267                           ;I2C.c: 66: I2C_Master_Wait();
  9268  002BA6  EC3D  F016         	call	i2_I2C_Master_Wait	;wreg free
  9269                           
  9270                           ;I2C.c: 67: temp = SSPBUF;
  9271  002BAA  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9272                           
  9273                           ;I2C.c: 68: I2C_Master_Wait();
  9274  002BAE  EC3D  F016         	call	i2_I2C_Master_Wait	;wreg free
  9275                           
  9276                           ;I2C.c: 69: ACKDT = (a)?0:1;
  9277  002BB2  5002               	movf	i2I2C_Master_Read@a,w,c
  9278  002BB4  A4D8               	btfss	status,2,c
  9279  002BB6  D002               	goto	i2u361_40
  9280  002BB8  8AC5               	bsf	4037,5,c	;volatile
  9281  002BBA  D001               	goto	i2l3909
  9282  002BBC                     i2u361_40:
  9283  002BBC  9AC5               	bcf	4037,5,c	;volatile
  9284  002BBE                     i2l3909:
  9285                           
  9286                           ;I2C.c: 70: ACKEN = 1;
  9287  002BBE  88C5               	bsf	4037,4,c	;volatile
  9288                           
  9289                           ;I2C.c: 71: return temp;
  9290  002BC0  5003               	movf	i2I2C_Master_Read@temp,w,c
  9291  002BC2  0012               	return	
  9292  002BC4                     __end_ofi2_I2C_Master_Read:
  9293                           	opt stack 0
  9294                           pclatu	equ	0xFFB
  9295                           pclath	equ	0xFFA
  9296                           tblptru	equ	0xFF8
  9297                           tblptrh	equ	0xFF7
  9298                           tblptrl	equ	0xFF6
  9299                           tablat	equ	0xFF5
  9300                           prodh	equ	0xFF4
  9301                           prodl	equ	0xFF3
  9302                           intcon	equ	0xFF2
  9303                           intcon2	equ	0xFF1
  9304                           intcon3	equ	0xFF0
  9305                           postinc0	equ	0xFEE
  9306                           fsr0h	equ	0xFEA
  9307                           fsr0l	equ	0xFE9
  9308                           wreg	equ	0xFE8
  9309                           fsr1h	equ	0xFE2
  9310                           fsr1l	equ	0xFE1
  9311                           indf2	equ	0xFDF
  9312                           postinc2	equ	0xFDE
  9313                           postdec2	equ	0xFDD
  9314                           fsr2h	equ	0xFDA
  9315                           fsr2l	equ	0xFD9
  9316                           status	equ	0xFD8
  9317                           
  9318 ;; *************** function i2_I2C_Master_Wait *****************
  9319 ;; Defined at:
  9320 ;;		line 24 in file "I2C.c"
  9321 ;; Parameters:    Size  Location     Type
  9322 ;;		None
  9323 ;; Auto vars:     Size  Location     Type
  9324 ;;		None
  9325 ;; Return value:  Size  Location     Type
  9326 ;;                  1    wreg      void 
  9327 ;; Registers used:
  9328 ;;		wreg, status,2, status,0
  9329 ;; Tracked objects:
  9330 ;;		On entry : 0/0
  9331 ;;		On exit  : 0/0
  9332 ;;		Unchanged: 0/0
  9333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9338 ;;Total ram usage:        1 bytes
  9339 ;; Hardware stack levels used:    1
  9340 ;; This function calls:
  9341 ;;		Nothing
  9342 ;; This function is called by:
  9343 ;;		i2_I2C_Master_Start
  9344 ;;		i2_I2C_Master_Stop
  9345 ;;		i2_I2C_Master_Write
  9346 ;;		i2_I2C_Master_Read
  9347 ;; This function uses a non-reentrant model
  9348 ;;
  9349                           
  9350                           	psect	text44
  9351  002C7A                     __ptext44:
  9352                           	opt stack 0
  9353  002C7A                     i2_I2C_Master_Wait:
  9354                           	opt stack 23
  9355  002C7A                     i2l34:
  9356  002C7A  B4C7               	btfsc	4039,2,c	;volatile
  9357  002C7C  D7FE               	goto	i2l34
  9358  002C7E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  9359  002C82  0E1F               	movlw	31
  9360  002C84  1601               	andwf	??i2_I2C_Master_Wait,f,c
  9361  002C86  B4D8               	btfsc	status,2,c
  9362  002C88  0012               	return	
  9363  002C8A  D7F7               	goto	i2l34
  9364  002C8C                     __end_ofi2_I2C_Master_Wait:
  9365                           	opt stack 0
  9366                           pclatu	equ	0xFFB
  9367                           pclath	equ	0xFFA
  9368                           tblptru	equ	0xFF8
  9369                           tblptrh	equ	0xFF7
  9370                           tblptrl	equ	0xFF6
  9371                           tablat	equ	0xFF5
  9372                           prodh	equ	0xFF4
  9373                           prodl	equ	0xFF3
  9374                           intcon	equ	0xFF2
  9375                           intcon2	equ	0xFF1
  9376                           intcon3	equ	0xFF0
  9377                           postinc0	equ	0xFEE
  9378                           fsr0h	equ	0xFEA
  9379                           fsr0l	equ	0xFE9
  9380                           wreg	equ	0xFE8
  9381                           fsr1h	equ	0xFE2
  9382                           fsr1l	equ	0xFE1
  9383                           indf2	equ	0xFDF
  9384                           postinc2	equ	0xFDE
  9385                           postdec2	equ	0xFDD
  9386                           fsr2h	equ	0xFDA
  9387                           fsr2l	equ	0xFD9
  9388                           status	equ	0xFD8
  9389                           
  9390 ;; *************** function _dec_to_hex *****************
  9391 ;; Defined at:
  9392 ;;		line 340 in file "main.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;  num             2   98[COMRAM] int 
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  quotient        2  112[COMRAM] int 
  9397 ;;  hexnum          2  110[COMRAM] int 
  9398 ;;  i               2  108[COMRAM] int 
  9399 ;;  temp            2  106[COMRAM] int 
  9400 ;; Return value:  Size  Location     Type
  9401 ;;                  2   98[COMRAM] int 
  9402 ;; Registers used:
  9403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9409 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9410 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9412 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9413 ;;Total ram usage:       16 bytes
  9414 ;; Hardware stack levels used:    1
  9415 ;; Hardware stack levels required when called:    5
  9416 ;; This function calls:
  9417 ;;		___awdiv
  9418 ;;		___awtoft
  9419 ;;		___ftadd
  9420 ;;		___ftmul
  9421 ;;		___fttol
  9422 ;;		_pow
  9423 ;; This function is called by:
  9424 ;;		_isr
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           	psect	text45
  9429  001678                     __ptext45:
  9430                           	opt stack 0
  9431  001678                     _dec_to_hex:
  9432                           	opt stack 20
  9433                           
  9434                           ;main.c: 341: int i = 0, quotient = num, temp, hexnum = 0;
  9435                           
  9436                           ;incstack = 0
  9437  001678  0E00               	movlw	0
  9438  00167A  6E6E               	movwf	dec_to_hex@i+1,c
  9439  00167C  0E00               	movlw	0
  9440  00167E  6E6D               	movwf	dec_to_hex@i,c
  9441  001680  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  9442  001684  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  9443  001688  0E00               	movlw	0
  9444  00168A  6E70               	movwf	dec_to_hex@hexnum+1,c
  9445  00168C  0E00               	movlw	0
  9446  00168E  6E6F               	movwf	dec_to_hex@hexnum,c
  9447                           
  9448                           ;main.c: 343: while (quotient != 0) {
  9449  001690  D068               	goto	i2l4161
  9450  001692                     i2l4149:
  9451                           
  9452                           ;main.c: 344: temp = quotient % 16;
  9453  001692  0E0F               	movlw	15
  9454  001694  1471               	andwf	dec_to_hex@quotient,w,c
  9455  001696  6E6B               	movwf	dec_to_hex@temp,c
  9456  001698  6A6C               	clrf	dec_to_hex@temp+1,c
  9457                           
  9458                           ;main.c: 346: hexnum += temp*pow(10,i);
  9459  00169A  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  9460  00169E  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  9461  0016A2  EC1C  F015         	call	___awtoft	;wreg free
  9462  0016A6  C009  F065         	movff	?___awtoft,_dec_to_hex$1258
  9463  0016AA  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1258+1
  9464  0016AE  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1258+2
  9465                           
  9466                           ;main.c: 346: hexnum += temp*pow(10,i);
  9467  0016B2  C065  F055         	movff	_dec_to_hex$1258,pow@y
  9468  0016B6  C066  F056         	movff	_dec_to_hex$1258+1,pow@y+1
  9469  0016BA  C067  F057         	movff	_dec_to_hex$1258+2,pow@y+2
  9470  0016BE  0E00               	movlw	0
  9471  0016C0  6E52               	movwf	pow@x,c
  9472  0016C2  0E20               	movlw	32
  9473  0016C4  6E53               	movwf	pow@x+1,c
  9474  0016C6  0E41               	movlw	65
  9475  0016C8  6E54               	movwf	pow@x+2,c
  9476  0016CA  EC63  F009         	call	_pow	;wreg free
  9477  0016CE  C052  F068         	movff	?_pow,_dec_to_hex$1259
  9478  0016D2  C053  F069         	movff	?_pow+1,_dec_to_hex$1259+1
  9479  0016D6  C054  F06A         	movff	?_pow+2,_dec_to_hex$1259+2
  9480                           
  9481                           ;main.c: 346: hexnum += temp*pow(10,i);
  9482  0016DA  C068  F010         	movff	_dec_to_hex$1259,___ftmul@f2
  9483  0016DE  C069  F011         	movff	_dec_to_hex$1259+1,___ftmul@f2+1
  9484  0016E2  C06A  F012         	movff	_dec_to_hex$1259+2,___ftmul@f2+2
  9485  0016E6  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  9486  0016EA  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  9487  0016EE  EC1C  F015         	call	___awtoft	;wreg free
  9488  0016F2  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9489  0016F6  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9490  0016FA  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9491  0016FE  EC34  F00C         	call	___ftmul	;wreg free
  9492  001702  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  9493  001706  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  9494  00170A  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  9495  00170E  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  9496  001712  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  9497  001716  EC1C  F015         	call	___awtoft	;wreg free
  9498  00171A  C009  F01C         	movff	?___awtoft,___ftadd@f1
  9499  00171E  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  9500  001722  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  9501  001726  ECC3  F007         	call	___ftadd	;wreg free
  9502  00172A  C01C  F028         	movff	?___ftadd,___fttol@f1
  9503  00172E  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  9504  001732  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  9505  001736  ECBA  F00B         	call	___fttol	;wreg free
  9506  00173A  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  9507  00173E  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  9508                           
  9509                           ;main.c: 348: quotient = quotient / 16;
  9510  001742  C071  F007         	movff	dec_to_hex@quotient,___awdiv@dividend
  9511  001746  C072  F008         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  9512  00174A  0E00               	movlw	0
  9513  00174C  6E0A               	movwf	___awdiv@divisor+1,c
  9514  00174E  0E10               	movlw	16
  9515  001750  6E09               	movwf	___awdiv@divisor,c
  9516  001752  EC97  F012         	call	___awdiv	;wreg free
  9517  001756  C007  F071         	movff	?___awdiv,dec_to_hex@quotient
  9518  00175A  C008  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  9519                           
  9520                           ;main.c: 349: i += 1;
  9521  00175E  4A6D               	infsnz	dec_to_hex@i,f,c
  9522  001760  2A6E               	incf	dec_to_hex@i+1,f,c
  9523  001762                     i2l4161:
  9524  001762  5071               	movf	dec_to_hex@quotient,w,c
  9525  001764  1072               	iorwf	dec_to_hex@quotient+1,w,c
  9526  001766  A4D8               	btfss	status,2,c
  9527  001768  D794               	goto	i2l4149
  9528                           
  9529                           ;main.c: 350: }
  9530                           ;main.c: 351: return hexnum;
  9531  00176A  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  9532  00176E  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  9533  001772  0012               	return		;funcret
  9534  001774                     __end_of_dec_to_hex:
  9535                           	opt stack 0
  9536                           pclatu	equ	0xFFB
  9537                           pclath	equ	0xFFA
  9538                           tblptru	equ	0xFF8
  9539                           tblptrh	equ	0xFF7
  9540                           tblptrl	equ	0xFF6
  9541                           tablat	equ	0xFF5
  9542                           prodh	equ	0xFF4
  9543                           prodl	equ	0xFF3
  9544                           intcon	equ	0xFF2
  9545                           intcon2	equ	0xFF1
  9546                           intcon3	equ	0xFF0
  9547                           postinc0	equ	0xFEE
  9548                           fsr0h	equ	0xFEA
  9549                           fsr0l	equ	0xFE9
  9550                           wreg	equ	0xFE8
  9551                           fsr1h	equ	0xFE2
  9552                           fsr1l	equ	0xFE1
  9553                           indf2	equ	0xFDF
  9554                           postinc2	equ	0xFDE
  9555                           postdec2	equ	0xFDD
  9556                           fsr2h	equ	0xFDA
  9557                           fsr2l	equ	0xFD9
  9558                           status	equ	0xFD8
  9559                           
  9560 ;; *************** function _pow *****************
  9561 ;; Defined at:
  9562 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;  x               3   81[COMRAM] int 
  9565 ;;  y               3   84[COMRAM] int 
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;  yi              4   94[COMRAM] unsigned long 
  9568 ;;  sign            1   93[COMRAM] unsigned char 
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  3   81[COMRAM] unsigned char 
  9571 ;; Registers used:
  9572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9578 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;Total ram usage:       17 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    4
  9585 ;; This function calls:
  9586 ;;		___ftge
  9587 ;;		___ftmul
  9588 ;;		___ftneg
  9589 ;;		___fttol
  9590 ;;		___lltoft
  9591 ;;		_exp
  9592 ;;		_log
  9593 ;; This function is called by:
  9594 ;;		_dec_to_hex
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           	psect	text46
  9599  0012C6                     __ptext46:
  9600                           	opt stack 0
  9601  0012C6                     _pow:
  9602                           	opt stack 20
  9603                           
  9604                           ;incstack = 0
  9605  0012C6  0E00               	movlw	0
  9606  0012C8  6E5E               	movwf	pow@sign,c
  9607  0012CA  5052               	movf	pow@x,w,c
  9608  0012CC  1053               	iorwf	pow@x+1,w,c
  9609  0012CE  1054               	iorwf	pow@x+2,w,c
  9610  0012D0  A4D8               	btfss	status,2,c
  9611  0012D2  D01C               	goto	i2l3757
  9612  0012D4  0E00               	movlw	0
  9613  0012D6  6E01               	movwf	___ftge@ff1,c
  9614  0012D8  0E00               	movlw	0
  9615  0012DA  6E02               	movwf	___ftge@ff1+1,c
  9616  0012DC  0E00               	movlw	0
  9617  0012DE  6E03               	movwf	___ftge@ff1+2,c
  9618  0012E0  C055  F004         	movff	pow@y,___ftge@ff2
  9619  0012E4  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  9620  0012E8  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  9621  0012EC  EC4F  F012         	call	___ftge	;wreg free
  9622  0012F0  A0D8               	btfss	status,0,c
  9623  0012F2  D005               	goto	i2l921
  9624  0012F4  0E00               	movlw	0
  9625  0012F6  0100               	movlb	0	; () banked
  9626  0012F8  6FA8               	movwf	(_errno+1)& (0+255),b
  9627  0012FA  0E21               	movlw	33
  9628  0012FC  6FA7               	movwf	_errno& (0+255),b
  9629  0012FE                     i2l921:
  9630  0012FE  0E00               	movlw	0
  9631  001300  6E52               	movwf	?_pow,c
  9632  001302  0E00               	movlw	0
  9633  001304  6E53               	movwf	?_pow+1,c
  9634  001306  0E00               	movlw	0
  9635  001308  6E54               	movwf	?_pow+2,c
  9636  00130A  0012               	return	
  9637  00130C                     i2l3757:
  9638  00130C  5055               	movf	pow@y,w,c
  9639  00130E  1056               	iorwf	pow@y+1,w,c
  9640  001310  1057               	iorwf	pow@y+2,w,c
  9641  001312  A4D8               	btfss	status,2,c
  9642  001314  D007               	goto	i2l3763
  9643  001316  0E00               	movlw	0
  9644  001318  6E52               	movwf	?_pow,c
  9645  00131A  0E80               	movlw	128
  9646  00131C  6E53               	movwf	?_pow+1,c
  9647  00131E  0E3F               	movlw	63
  9648  001320  6E54               	movwf	?_pow+2,c
  9649  001322  0012               	return	
  9650  001324                     i2l3763:
  9651  001324  AE54               	btfss	pow@x+2,7,c
  9652  001326  D041               	goto	i2l3775
  9653  001328  C055  F028         	movff	pow@y,___fttol@f1
  9654  00132C  C056  F029         	movff	pow@y+1,___fttol@f1+1
  9655  001330  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  9656  001334  ECBA  F00B         	call	___fttol	;wreg free
  9657  001338  C028  F05F         	movff	?___fttol,pow@yi
  9658  00133C  C029  F060         	movff	?___fttol+1,pow@yi+1
  9659  001340  C02A  F061         	movff	?___fttol+2,pow@yi+2
  9660  001344  C02B  F062         	movff	?___fttol+3,pow@yi+3
  9661  001348  C05F  F009         	movff	pow@yi,___lltoft@c
  9662  00134C  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  9663  001350  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  9664  001354  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  9665  001358  EC16  F014         	call	___lltoft	;wreg free
  9666  00135C  5055               	movf	pow@y,w,c
  9667  00135E  1809               	xorwf	?___lltoft,w,c
  9668  001360  E107               	bnz	i2u344_40
  9669  001362  5056               	movf	pow@y+1,w,c
  9670  001364  180A               	xorwf	?___lltoft+1,w,c
  9671  001366  E104               	bnz	i2u344_40
  9672  001368  5057               	movf	pow@y+2,w,c
  9673  00136A  180B               	xorwf	?___lltoft+2,w,c
  9674  00136C  B4D8               	btfsc	status,2,c
  9675  00136E  D00C               	goto	i2l3771
  9676  001370                     i2u344_40:
  9677  001370  0E00               	movlw	0
  9678  001372  0100               	movlb	0	; () banked
  9679  001374  6FA8               	movwf	(_errno+1)& (0+255),b
  9680  001376  0E21               	movlw	33
  9681  001378  6FA7               	movwf	_errno& (0+255),b
  9682  00137A  0E00               	movlw	0
  9683  00137C  6E52               	movwf	?_pow,c
  9684  00137E  0E00               	movlw	0
  9685  001380  6E53               	movwf	?_pow+1,c
  9686  001382  0E00               	movlw	0
  9687  001384  6E54               	movwf	?_pow+2,c
  9688                           
  9689                           ; BSR set to: 0
  9690  001386  0012               	return	
  9691  001388                     i2l3771:
  9692  001388  505F               	movf	pow@yi,w,c
  9693  00138A  0B01               	andlw	1
  9694  00138C  6E5E               	movwf	pow@sign,c
  9695  00138E  C052  F001         	movff	pow@x,___ftneg@f1
  9696  001392  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9697  001396  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9698  00139A  ECF5  F015         	call	___ftneg	;wreg free
  9699  00139E  C001  F052         	movff	?___ftneg,pow@x
  9700  0013A2  C002  F053         	movff	?___ftneg+1,pow@x+1
  9701  0013A6  C003  F054         	movff	?___ftneg+2,pow@x+2
  9702  0013AA                     i2l3775:
  9703  0013AA  C052  F034         	movff	pow@x,log@x
  9704  0013AE  C053  F035         	movff	pow@x+1,log@x+1
  9705  0013B2  C054  F036         	movff	pow@x+2,log@x+2
  9706  0013B6  ECAD  F00A         	call	_log	;wreg free
  9707  0013BA  C034  F058         	movff	?_log,_pow$1260
  9708  0013BE  C035  F059         	movff	?_log+1,_pow$1260+1
  9709  0013C2  C036  F05A         	movff	?_log+2,_pow$1260+2
  9710  0013C6  C058  F00D         	movff	_pow$1260,___ftmul@f1
  9711  0013CA  C059  F00E         	movff	_pow$1260+1,___ftmul@f1+1
  9712  0013CE  C05A  F00F         	movff	_pow$1260+2,___ftmul@f1+2
  9713  0013D2  C055  F010         	movff	pow@y,___ftmul@f2
  9714  0013D6  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  9715  0013DA  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  9716  0013DE  EC34  F00C         	call	___ftmul	;wreg free
  9717  0013E2  C00D  F05B         	movff	?___ftmul,_pow$1261
  9718  0013E6  C00E  F05C         	movff	?___ftmul+1,_pow$1261+1
  9719  0013EA  C00F  F05D         	movff	?___ftmul+2,_pow$1261+2
  9720  0013EE  C05B  F049         	movff	_pow$1261,exp@x
  9721  0013F2  C05C  F04A         	movff	_pow$1261+1,exp@x+1
  9722  0013F6  C05D  F04B         	movff	_pow$1261+2,exp@x+2
  9723  0013FA  ECCF  F006         	call	_exp	;wreg free
  9724  0013FE  C049  F052         	movff	?_exp,pow@x
  9725  001402  C04A  F053         	movff	?_exp+1,pow@x+1
  9726  001406  C04B  F054         	movff	?_exp+2,pow@x+2
  9727  00140A  505E               	movf	pow@sign,w,c
  9728  00140C  B4D8               	btfsc	status,2,c
  9729  00140E  D00F               	goto	i2l926
  9730  001410  C052  F001         	movff	pow@x,___ftneg@f1
  9731  001414  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9732  001418  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9733  00141C  ECF5  F015         	call	___ftneg	;wreg free
  9734  001420  C001  F052         	movff	?___ftneg,?_pow
  9735  001424  C002  F053         	movff	?___ftneg+1,?_pow+1
  9736  001428  C003  F054         	movff	?___ftneg+2,?_pow+2
  9737  00142C  0012               	return	
  9738  00142E                     i2l926:
  9739  00142E  C052  F052         	movff	pow@x,?_pow
  9740  001432  C053  F053         	movff	pow@x+1,?_pow+1
  9741  001436  C054  F054         	movff	pow@x+2,?_pow+2
  9742  00143A  0012               	return		;funcret
  9743  00143C                     __end_of_pow:
  9744                           	opt stack 0
  9745                           pclatu	equ	0xFFB
  9746                           pclath	equ	0xFFA
  9747                           tblptru	equ	0xFF8
  9748                           tblptrh	equ	0xFF7
  9749                           tblptrl	equ	0xFF6
  9750                           tablat	equ	0xFF5
  9751                           prodh	equ	0xFF4
  9752                           prodl	equ	0xFF3
  9753                           intcon	equ	0xFF2
  9754                           intcon2	equ	0xFF1
  9755                           intcon3	equ	0xFF0
  9756                           postinc0	equ	0xFEE
  9757                           fsr0h	equ	0xFEA
  9758                           fsr0l	equ	0xFE9
  9759                           wreg	equ	0xFE8
  9760                           fsr1h	equ	0xFE2
  9761                           fsr1l	equ	0xFE1
  9762                           indf2	equ	0xFDF
  9763                           postinc2	equ	0xFDE
  9764                           postdec2	equ	0xFDD
  9765                           fsr2h	equ	0xFDA
  9766                           fsr2l	equ	0xFD9
  9767                           status	equ	0xFD8
  9768                           
  9769 ;; *************** function _log *****************
  9770 ;; Defined at:
  9771 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  9772 ;; Parameters:    Size  Location     Type
  9773 ;;  x               3   51[COMRAM] unsigned char 
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;  exponent        2   54[COMRAM] int 
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  3   51[COMRAM] int 
  9778 ;; Registers used:
  9779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9785 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9788 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9789 ;;Total ram usage:        5 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; Hardware stack levels required when called:    3
  9792 ;; This function calls:
  9793 ;;		___awtoft
  9794 ;;		___ftadd
  9795 ;;		___ftmul
  9796 ;;		_eval_poly
  9797 ;;		_frexp
  9798 ;; This function is called by:
  9799 ;;		_pow
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           	psect	text47
  9804  00155A                     __ptext47:
  9805                           	opt stack 0
  9806  00155A                     _log:
  9807                           	opt stack 20
  9808                           
  9809                           ;incstack = 0
  9810  00155A  AE36               	btfss	log@x+2,7,c
  9811  00155C  D00C               	goto	i2l3503
  9812  00155E  0E00               	movlw	0
  9813  001560  0100               	movlb	0	; () banked
  9814  001562  6FA8               	movwf	(_errno+1)& (0+255),b
  9815  001564  0E21               	movlw	33
  9816  001566  6FA7               	movwf	_errno& (0+255),b
  9817  001568  0E00               	movlw	0
  9818  00156A  6E34               	movwf	?_log,c
  9819  00156C  0E00               	movlw	0
  9820  00156E  6E35               	movwf	?_log+1,c
  9821  001570  0E00               	movlw	0
  9822  001572  6E36               	movwf	?_log+2,c
  9823                           
  9824                           ; BSR set to: 0
  9825  001574  0012               	return	
  9826  001576                     i2l3503:
  9827  001576  5034               	movf	log@x,w,c
  9828  001578  1035               	iorwf	log@x+1,w,c
  9829  00157A  1036               	iorwf	log@x+2,w,c
  9830  00157C  A4D8               	btfss	status,2,c
  9831  00157E  D00C               	goto	i2l3509
  9832  001580  0E00               	movlw	0
  9833  001582  0100               	movlb	0	; () banked
  9834  001584  6FA8               	movwf	(_errno+1)& (0+255),b
  9835  001586  0E22               	movlw	34
  9836  001588  6FA7               	movwf	_errno& (0+255),b
  9837  00158A  0E00               	movlw	0
  9838  00158C  6E34               	movwf	?_log,c
  9839  00158E  0E00               	movlw	0
  9840  001590  6E35               	movwf	?_log+1,c
  9841  001592  0E00               	movlw	0
  9842  001594  6E36               	movwf	?_log+2,c
  9843                           
  9844                           ; BSR set to: 0
  9845  001596  0012               	return	
  9846  001598                     i2l3509:
  9847  001598  0E00               	movlw	0
  9848  00159A  6E10               	movwf	___ftmul@f2,c
  9849  00159C  0E00               	movlw	0
  9850  00159E  6E11               	movwf	___ftmul@f2+1,c
  9851  0015A0  0E40               	movlw	64
  9852  0015A2  6E12               	movwf	___ftmul@f2+2,c
  9853  0015A4  0E37               	movlw	low log@exponent
  9854  0015A6  6E04               	movwf	frexp@eptr,c
  9855  0015A8  0E00               	movlw	high log@exponent
  9856  0015AA  6E05               	movwf	frexp@eptr+1,c
  9857  0015AC  C034  F001         	movff	log@x,frexp@value
  9858  0015B0  C035  F002         	movff	log@x+1,frexp@value+1
  9859  0015B4  C036  F003         	movff	log@x+2,frexp@value+2
  9860  0015B8  EC07  F012         	call	_frexp	;wreg free
  9861  0015BC  C001  F00D         	movff	?_frexp,___ftmul@f1
  9862  0015C0  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  9863  0015C4  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  9864  0015C8  EC34  F00C         	call	___ftmul	;wreg free
  9865  0015CC  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9866  0015D0  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9867  0015D4  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9868  0015D8  0E00               	movlw	0
  9869  0015DA  6E1F               	movwf	___ftadd@f2,c
  9870  0015DC  0E80               	movlw	128
  9871  0015DE  6E20               	movwf	___ftadd@f2+1,c
  9872  0015E0  0EBF               	movlw	191
  9873  0015E2  6E21               	movwf	___ftadd@f2+2,c
  9874  0015E4  ECC3  F007         	call	___ftadd	;wreg free
  9875  0015E8  C01C  F034         	movff	?___ftadd,log@x
  9876  0015EC  C01D  F035         	movff	?___ftadd+1,log@x+1
  9877  0015F0  C01E  F036         	movff	?___ftadd+2,log@x+2
  9878  0015F4  0637               	decf	log@exponent,f,c
  9879  0015F6  A0D8               	btfss	status,0,c
  9880  0015F8  0638               	decf	log@exponent+1,f,c
  9881  0015FA  C034  F028         	movff	log@x,eval_poly@x
  9882  0015FE  C035  F029         	movff	log@x+1,eval_poly@x+1
  9883  001602  C036  F02A         	movff	log@x+2,eval_poly@x+2
  9884  001606  0E13               	movlw	low log@coeff
  9885  001608  6E2B               	movwf	eval_poly@d,c
  9886  00160A  0EFE               	movlw	high log@coeff
  9887  00160C  6E2C               	movwf	eval_poly@d+1,c
  9888  00160E  0E00               	movlw	0
  9889  001610  6E2E               	movwf	eval_poly@n+1,c
  9890  001612  0E08               	movlw	8
  9891  001614  6E2D               	movwf	eval_poly@n,c
  9892  001616  ECD9  F00E         	call	_eval_poly	;wreg free
  9893  00161A  C028  F034         	movff	?_eval_poly,log@x
  9894  00161E  C029  F035         	movff	?_eval_poly+1,log@x+1
  9895  001622  C02A  F036         	movff	?_eval_poly+2,log@x+2
  9896  001626  0E72               	movlw	114
  9897  001628  6E10               	movwf	___ftmul@f2,c
  9898  00162A  0E31               	movlw	49
  9899  00162C  6E11               	movwf	___ftmul@f2+1,c
  9900  00162E  0E3F               	movlw	63
  9901  001630  6E12               	movwf	___ftmul@f2+2,c
  9902  001632  C037  F009         	movff	log@exponent,___awtoft@c
  9903  001636  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  9904  00163A  EC1C  F015         	call	___awtoft	;wreg free
  9905  00163E  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9906  001642  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9907  001646  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9908  00164A  EC34  F00C         	call	___ftmul	;wreg free
  9909  00164E  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9910  001652  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9911  001656  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9912  00165A  C034  F01F         	movff	log@x,___ftadd@f2
  9913  00165E  C035  F020         	movff	log@x+1,___ftadd@f2+1
  9914  001662  C036  F021         	movff	log@x+2,___ftadd@f2+2
  9915  001666  ECC3  F007         	call	___ftadd	;wreg free
  9916  00166A  C01C  F034         	movff	?___ftadd,?_log
  9917  00166E  C01D  F035         	movff	?___ftadd+1,?_log+1
  9918  001672  C01E  F036         	movff	?___ftadd+2,?_log+2
  9919  001676  0012               	return	
  9920  001678                     __end_of_log:
  9921                           	opt stack 0
  9922                           pclatu	equ	0xFFB
  9923                           pclath	equ	0xFFA
  9924                           tblptru	equ	0xFF8
  9925                           tblptrh	equ	0xFF7
  9926                           tblptrl	equ	0xFF6
  9927                           tablat	equ	0xFF5
  9928                           prodh	equ	0xFF4
  9929                           prodl	equ	0xFF3
  9930                           intcon	equ	0xFF2
  9931                           intcon2	equ	0xFF1
  9932                           intcon3	equ	0xFF0
  9933                           postinc0	equ	0xFEE
  9934                           fsr0h	equ	0xFEA
  9935                           fsr0l	equ	0xFE9
  9936                           wreg	equ	0xFE8
  9937                           fsr1h	equ	0xFE2
  9938                           fsr1l	equ	0xFE1
  9939                           indf2	equ	0xFDF
  9940                           postinc2	equ	0xFDE
  9941                           postdec2	equ	0xFDD
  9942                           fsr2h	equ	0xFDA
  9943                           fsr2l	equ	0xFD9
  9944                           status	equ	0xFD8
  9945                           
  9946 ;; *************** function _exp *****************
  9947 ;; Defined at:
  9948 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;  x               3   72[COMRAM] int 
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;  exponent        2   78[COMRAM] int 
  9953 ;;  sign            1   80[COMRAM] unsigned char 
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  3   72[COMRAM] unsigned char 
  9956 ;; Registers used:
  9957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9963 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;Total ram usage:        9 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    3
  9970 ;; This function calls:
  9971 ;;		___awtoft
  9972 ;;		___ftdiv
  9973 ;;		___ftge
  9974 ;;		___ftmul
  9975 ;;		___ftneg
  9976 ;;		___ftsub
  9977 ;;		___fttol
  9978 ;;		_eval_poly
  9979 ;;		_floor
  9980 ;;		_ldexp
  9981 ;; This function is called by:
  9982 ;;		_pow
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           	psect	text48
  9987  000D9E                     __ptext48:
  9988                           	opt stack 0
  9989  000D9E                     _exp:
  9990                           	opt stack 20
  9991                           
  9992                           ;incstack = 0
  9993  000D9E  5049               	movf	exp@x,w,c
  9994  000DA0  104A               	iorwf	exp@x+1,w,c
  9995  000DA2  104B               	iorwf	exp@x+2,w,c
  9996  000DA4  A4D8               	btfss	status,2,c
  9997  000DA6  D007               	goto	i2l3525
  9998  000DA8  0E00               	movlw	0
  9999  000DAA  6E49               	movwf	?_exp,c
 10000  000DAC  0E80               	movlw	128
 10001  000DAE  6E4A               	movwf	?_exp+1,c
 10002  000DB0  0E3F               	movlw	63
 10003  000DB2  6E4B               	movwf	?_exp+2,c
 10004  000DB4  0012               	return	
 10005  000DB6                     i2l3525:
 10006  000DB6  0E72               	movlw	114
 10007  000DB8  6E01               	movwf	___ftge@ff1,c
 10008  000DBA  0E31               	movlw	49
 10009  000DBC  6E02               	movwf	___ftge@ff1+1,c
 10010  000DBE  0E44               	movlw	68
 10011  000DC0  6E03               	movwf	___ftge@ff1+2,c
 10012  000DC2  C049  F004         	movff	exp@x,___ftge@ff2
 10013  000DC6  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
 10014  000DCA  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
 10015  000DCE  EC4F  F012         	call	___ftge	;wreg free
 10016  000DD2  B0D8               	btfsc	status,0,c
 10017  000DD4  D00C               	goto	i2l3531
 10018  000DD6  0E00               	movlw	0
 10019  000DD8  0100               	movlb	0	; () banked
 10020  000DDA  6FA8               	movwf	(_errno+1)& (0+255),b
 10021  000DDC  0E22               	movlw	34
 10022  000DDE  6FA7               	movwf	_errno& (0+255),b
 10023  000DE0  0EFF               	movlw	255
 10024  000DE2  6E49               	movwf	?_exp,c
 10025  000DE4  0E7F               	movlw	127
 10026  000DE6  6E4A               	movwf	?_exp+1,c
 10027  000DE8  0E7F               	movlw	127
 10028  000DEA  6E4B               	movwf	?_exp+2,c
 10029                           
 10030                           ; BSR set to: 0
 10031  000DEC  0012               	return	
 10032  000DEE                     i2l3531:
 10033  000DEE  C049  F001         	movff	exp@x,___ftge@ff1
 10034  000DF2  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
 10035  000DF6  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
 10036  000DFA  0E49               	movlw	73
 10037  000DFC  6E04               	movwf	___ftge@ff2,c
 10038  000DFE  0E3A               	movlw	58
 10039  000E00  6E05               	movwf	___ftge@ff2+1,c
 10040  000E02  0EC4               	movlw	196
 10041  000E04  6E06               	movwf	___ftge@ff2+2,c
 10042  000E06  EC4F  F012         	call	___ftge	;wreg free
 10043  000E0A  B0D8               	btfsc	status,0,c
 10044  000E0C  D00C               	goto	i2l3537
 10045  000E0E  0E00               	movlw	0
 10046  000E10  0100               	movlb	0	; () banked
 10047  000E12  6FA8               	movwf	(_errno+1)& (0+255),b
 10048  000E14  0E22               	movlw	34
 10049  000E16  6FA7               	movwf	_errno& (0+255),b
 10050  000E18  0E00               	movlw	0
 10051  000E1A  6E49               	movwf	?_exp,c
 10052  000E1C  0E00               	movlw	0
 10053  000E1E  6E4A               	movwf	?_exp+1,c
 10054  000E20  0E00               	movlw	0
 10055  000E22  6E4B               	movwf	?_exp+2,c
 10056                           
 10057                           ; BSR set to: 0
 10058  000E24  0012               	return	
 10059  000E26                     i2l3537:
 10060  000E26  AE4B               	btfss	exp@x+2,7,c
 10061  000E28  D002               	goto	i2u308_40
 10062  000E2A  0E01               	movlw	1
 10063  000E2C  D001               	goto	i2u309_40
 10064  000E2E                     i2u308_40:
 10065  000E2E  0E00               	movlw	0
 10066  000E30                     i2u309_40:
 10067  000E30  6E51               	movwf	exp@sign,c
 10068  000E32  5051               	movf	exp@sign,w,c
 10069  000E34  B4D8               	btfsc	status,2,c
 10070  000E36  D00E               	goto	i2l1084
 10071  000E38  C049  F001         	movff	exp@x,___ftneg@f1
 10072  000E3C  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
 10073  000E40  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
 10074  000E44  ECF5  F015         	call	___ftneg	;wreg free
 10075  000E48  C001  F049         	movff	?___ftneg,exp@x
 10076  000E4C  C002  F04A         	movff	?___ftneg+1,exp@x+1
 10077  000E50  C003  F04B         	movff	?___ftneg+2,exp@x+2
 10078  000E54                     i2l1084:
 10079  000E54  C049  F00D         	movff	exp@x,___ftmul@f1
 10080  000E58  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
 10081  000E5C  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
 10082  000E60  0EAA               	movlw	170
 10083  000E62  6E10               	movwf	___ftmul@f2,c
 10084  000E64  0EB8               	movlw	184
 10085  000E66  6E11               	movwf	___ftmul@f2+1,c
 10086  000E68  0E3F               	movlw	63
 10087  000E6A  6E12               	movwf	___ftmul@f2+2,c
 10088  000E6C  EC34  F00C         	call	___ftmul	;wreg free
 10089  000E70  C00D  F049         	movff	?___ftmul,exp@x
 10090  000E74  C00E  F04A         	movff	?___ftmul+1,exp@x+1
 10091  000E78  C00F  F04B         	movff	?___ftmul+2,exp@x+2
 10092  000E7C  C049  F041         	movff	exp@x,floor@x
 10093  000E80  C04A  F042         	movff	exp@x+1,floor@x+1
 10094  000E84  C04B  F043         	movff	exp@x+2,floor@x+2
 10095  000E88  EC94  F00D         	call	_floor	;wreg free
 10096  000E8C  C041  F04C         	movff	?_floor,_exp$1262
 10097  000E90  C042  F04D         	movff	?_floor+1,_exp$1262+1
 10098  000E94  C043  F04E         	movff	?_floor+2,_exp$1262+2
 10099  000E98  C04C  F028         	movff	_exp$1262,___fttol@f1
 10100  000E9C  C04D  F029         	movff	_exp$1262+1,___fttol@f1+1
 10101  000EA0  C04E  F02A         	movff	_exp$1262+2,___fttol@f1+2
 10102  000EA4  ECBA  F00B         	call	___fttol	;wreg free
 10103  000EA8  C028  F04F         	movff	?___fttol,exp@exponent
 10104  000EAC  C029  F050         	movff	?___fttol+1,exp@exponent+1
 10105  000EB0  C049  F028         	movff	exp@x,___ftsub@f1
 10106  000EB4  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
 10107  000EB8  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
 10108  000EBC  C04F  F009         	movff	exp@exponent,___awtoft@c
 10109  000EC0  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
 10110  000EC4  EC1C  F015         	call	___awtoft	;wreg free
 10111  000EC8  C009  F02B         	movff	?___awtoft,___ftsub@f2
 10112  000ECC  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
 10113  000ED0  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
 10114  000ED4  ECDD  F014         	call	___ftsub	;wreg free
 10115  000ED8  C028  F049         	movff	?___ftsub,exp@x
 10116  000EDC  C029  F04A         	movff	?___ftsub+1,exp@x+1
 10117  000EE0  C02A  F04B         	movff	?___ftsub+2,exp@x+2
 10118  000EE4  C049  F028         	movff	exp@x,eval_poly@x
 10119  000EE8  C04A  F029         	movff	exp@x+1,eval_poly@x+1
 10120  000EEC  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
 10121  000EF0  0EF5               	movlw	low exp@coeff
 10122  000EF2  6E2B               	movwf	eval_poly@d,c
 10123  000EF4  0EFD               	movlw	high exp@coeff
 10124  000EF6  6E2C               	movwf	eval_poly@d+1,c
 10125  000EF8  0E00               	movlw	0
 10126  000EFA  6E2E               	movwf	eval_poly@n+1,c
 10127  000EFC  0E09               	movlw	9
 10128  000EFE  6E2D               	movwf	eval_poly@n,c
 10129  000F00  ECD9  F00E         	call	_eval_poly	;wreg free
 10130  000F04  C028  F034         	movff	?_eval_poly,ldexp@value
 10131  000F08  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 10132  000F0C  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 10133  000F10  C04F  F037         	movff	exp@exponent,ldexp@newexp
 10134  000F14  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 10135  000F18  EC42  F00F         	call	_ldexp	;wreg free
 10136  000F1C  C034  F049         	movff	?_ldexp,exp@x
 10137  000F20  C035  F04A         	movff	?_ldexp+1,exp@x+1
 10138  000F24  C036  F04B         	movff	?_ldexp+2,exp@x+2
 10139  000F28  5051               	movf	exp@sign,w,c
 10140  000F2A  B4D8               	btfsc	status,2,c
 10141  000F2C  D025               	goto	i2l1085
 10142  000F2E  2849               	incf	exp@x,w,c
 10143  000F30  E10E               	bnz	i2l3559
 10144  000F32  0E7F               	movlw	127
 10145  000F34  184A               	xorwf	exp@x+1,w,c
 10146  000F36  E10B               	bnz	i2l3559
 10147  000F38  0E7F               	movlw	127
 10148  000F3A  184B               	xorwf	exp@x+2,w,c
 10149  000F3C  A4D8               	btfss	status,2,c
 10150  000F3E  D007               	goto	i2l3559
 10151  000F40  0E00               	movlw	0
 10152  000F42  6E49               	movwf	?_exp,c
 10153  000F44  0E00               	movlw	0
 10154  000F46  6E4A               	movwf	?_exp+1,c
 10155  000F48  0E00               	movlw	0
 10156  000F4A  6E4B               	movwf	?_exp+2,c
 10157  000F4C  0012               	return	
 10158  000F4E                     i2l3559:
 10159  000F4E  0E00               	movlw	0
 10160  000F50  6E09               	movwf	___ftdiv@f1,c
 10161  000F52  0E80               	movlw	128
 10162  000F54  6E0A               	movwf	___ftdiv@f1+1,c
 10163  000F56  0E3F               	movlw	63
 10164  000F58  6E0B               	movwf	___ftdiv@f1+2,c
 10165  000F5A  C049  F00C         	movff	exp@x,___ftdiv@f2
 10166  000F5E  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
 10167  000F62  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
 10168  000F66  EC21  F00D         	call	___ftdiv	;wreg free
 10169  000F6A  C009  F049         	movff	?___ftdiv,?_exp
 10170  000F6E  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
 10171  000F72  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
 10172  000F76  0012               	return	
 10173  000F78                     i2l1085:
 10174  000F78  C049  F049         	movff	exp@x,?_exp
 10175  000F7C  C04A  F04A         	movff	exp@x+1,?_exp+1
 10176  000F80  C04B  F04B         	movff	exp@x+2,?_exp+2
 10177  000F84  0012               	return		;funcret
 10178  000F86                     __end_of_exp:
 10179                           	opt stack 0
 10180                           pclatu	equ	0xFFB
 10181                           pclath	equ	0xFFA
 10182                           tblptru	equ	0xFF8
 10183                           tblptrh	equ	0xFF7
 10184                           tblptrl	equ	0xFF6
 10185                           tablat	equ	0xFF5
 10186                           prodh	equ	0xFF4
 10187                           prodl	equ	0xFF3
 10188                           intcon	equ	0xFF2
 10189                           intcon2	equ	0xFF1
 10190                           intcon3	equ	0xFF0
 10191                           postinc0	equ	0xFEE
 10192                           fsr0h	equ	0xFEA
 10193                           fsr0l	equ	0xFE9
 10194                           wreg	equ	0xFE8
 10195                           fsr1h	equ	0xFE2
 10196                           fsr1l	equ	0xFE1
 10197                           indf2	equ	0xFDF
 10198                           postinc2	equ	0xFDE
 10199                           postdec2	equ	0xFDD
 10200                           fsr2h	equ	0xFDA
 10201                           fsr2l	equ	0xFD9
 10202                           status	equ	0xFD8
 10203                           
 10204 ;; *************** function _ldexp *****************
 10205 ;; Defined at:
 10206 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;  value           3   51[COMRAM] unsigned char 
 10209 ;;  newexp          2   54[COMRAM] int 
 10210 ;; Auto vars:     Size  Location     Type
 10211 ;;		None
 10212 ;; Return value:  Size  Location     Type
 10213 ;;                  3   51[COMRAM] int 
 10214 ;; Registers used:
 10215 ;;		wreg, status,2, status,0
 10216 ;; Tracked objects:
 10217 ;;		On entry : 0/0
 10218 ;;		On exit  : 0/0
 10219 ;;		Unchanged: 0/0
 10220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10221 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10223 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10224 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10225 ;;Total ram usage:        7 bytes
 10226 ;; Hardware stack levels used:    1
 10227 ;; This function calls:
 10228 ;;		Nothing
 10229 ;; This function is called by:
 10230 ;;		_exp
 10231 ;; This function uses a non-reentrant model
 10232 ;;
 10233                           
 10234                           	psect	text49
 10235  001E84                     __ptext49:
 10236                           	opt stack 0
 10237  001E84                     _ldexp:
 10238                           	opt stack 22
 10239                           
 10240                           ;incstack = 0
 10241  001E84  5034               	movf	ldexp@value,w,c
 10242  001E86  1035               	iorwf	ldexp@value+1,w,c
 10243  001E88  1036               	iorwf	ldexp@value+2,w,c
 10244  001E8A  A4D8               	btfss	status,2,c
 10245  001E8C  D007               	goto	i2l3371
 10246  001E8E  0E00               	movlw	0
 10247  001E90  6E34               	movwf	?_ldexp,c
 10248  001E92  0E00               	movlw	0
 10249  001E94  6E35               	movwf	?_ldexp+1,c
 10250  001E96  0E00               	movlw	0
 10251  001E98  6E36               	movwf	?_ldexp+2,c
 10252  001E9A  0012               	return	
 10253  001E9C                     i2l3371:
 10254  001E9C  5036               	movf	ldexp@value+2,w,c
 10255  001E9E  0B7F               	andlw	127
 10256  001EA0  6E39               	movwf	??_ldexp& (0+255),c
 10257  001EA2  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 10258  001EA4  90D8               	bcf	status,0,c
 10259  001EA6  3639               	rlcf	??_ldexp,f,c
 10260  001EA8  363A               	rlcf	??_ldexp+1,f,c
 10261  001EAA  5039               	movf	??_ldexp,w,c
 10262  001EAC  2637               	addwf	ldexp@newexp,f,c
 10263  001EAE  503A               	movf	??_ldexp+1,w,c
 10264  001EB0  2238               	addwfc	ldexp@newexp+1,f,c
 10265  001EB2  AE35               	btfss	ldexp@value+1,7,c
 10266  001EB4  D003               	goto	i2u288_40
 10267  001EB6  6A39               	clrf	??_ldexp& (0+255),c
 10268  001EB8  2A39               	incf	??_ldexp& (0+255),f,c
 10269  001EBA  D001               	goto	i2u288_48
 10270  001EBC                     i2u288_40:
 10271  001EBC  6A39               	clrf	??_ldexp& (0+255),c
 10272  001EBE                     i2u288_48:
 10273  001EBE  5039               	movf	??_ldexp,w,c
 10274  001EC0  2637               	addwf	ldexp@newexp,f,c
 10275  001EC2  0E00               	movlw	0
 10276  001EC4  2238               	addwfc	ldexp@newexp+1,f,c
 10277  001EC6  AE38               	btfss	ldexp@newexp+1,7,c
 10278  001EC8  D00C               	goto	i2l3379
 10279  001ECA  0E00               	movlw	0
 10280  001ECC  0100               	movlb	0	; () banked
 10281  001ECE  6FA8               	movwf	(_errno+1)& (0+255),b
 10282  001ED0  0E22               	movlw	34
 10283  001ED2  6FA7               	movwf	_errno& (0+255),b
 10284  001ED4  0E00               	movlw	0
 10285  001ED6  6E34               	movwf	?_ldexp,c
 10286  001ED8  0E00               	movlw	0
 10287  001EDA  6E35               	movwf	?_ldexp+1,c
 10288  001EDC  0E00               	movlw	0
 10289  001EDE                     L11:
 10290  001EDE  6E36               	movwf	?_ldexp+2,c
 10291                           
 10292                           ; BSR set to: 0
 10293  001EE0  0012               	return	
 10294  001EE2                     i2l3379:
 10295  001EE2  BE38               	btfsc	ldexp@newexp+1,7,c
 10296  001EE4  D016               	goto	i2l3395
 10297  001EE6  0438               	decf	ldexp@newexp+1,w,c
 10298  001EE8  A0D8               	btfss	status,0,c
 10299  001EEA  D013               	goto	i2l3395
 10300  001EEC  0E00               	movlw	0
 10301  001EEE  0100               	movlb	0	; () banked
 10302  001EF0  6FA8               	movwf	(_errno+1)& (0+255),b
 10303  001EF2  0E22               	movlw	34
 10304  001EF4  6FA7               	movwf	_errno& (0+255),b
 10305                           
 10306                           ; BSR set to: 0
 10307  001EF6  AE36               	btfss	ldexp@value+2,7,c
 10308  001EF8  D006               	goto	i2l3391
 10309                           
 10310                           ; BSR set to: 0
 10311  001EFA  0EFF               	movlw	255
 10312  001EFC  6E34               	movwf	?_ldexp,c
 10313  001EFE  0E7F               	movlw	127
 10314  001F00  6E35               	movwf	?_ldexp+1,c
 10315  001F02  0EFF               	movlw	255
 10316  001F04  D7EC               	goto	L11
 10317  001F06                     i2l3391:
 10318                           
 10319                           ; BSR set to: 0
 10320  001F06  0EFF               	movlw	255
 10321  001F08  6E34               	movwf	?_ldexp,c
 10322  001F0A  0E7F               	movlw	127
 10323  001F0C  6E35               	movwf	?_ldexp+1,c
 10324  001F0E  0E7F               	movlw	127
 10325  001F10  D7E6               	goto	L11
 10326  001F12                     i2l3395:
 10327  001F12  3438               	rlcf	ldexp@newexp+1,w,c
 10328  001F14  3038               	rrcf	ldexp@newexp+1,w,c
 10329  001F16  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 10330  001F18  3037               	rrcf	ldexp@newexp,w,c
 10331  001F1A  6E39               	movwf	??_ldexp& (0+255),c
 10332  001F1C  5036               	movf	ldexp@value+2,w,c
 10333  001F1E  1839               	xorwf	??_ldexp,w,c
 10334  001F20  0B80               	andlw	-128
 10335  001F22  1839               	xorwf	??_ldexp,w,c
 10336  001F24  6E36               	movwf	ldexp@value+2,c
 10337  001F26  C037  F039         	movff	ldexp@newexp,??_ldexp
 10338  001F2A  0E01               	movlw	1
 10339  001F2C  1639               	andwf	??_ldexp,f,c
 10340  001F2E  3239               	rrcf	??_ldexp,f,c
 10341  001F30  3239               	rrcf	??_ldexp,f,c
 10342  001F32  5035               	movf	ldexp@value+1,w,c
 10343  001F34  1839               	xorwf	??_ldexp,w,c
 10344  001F36  0B7F               	andlw	-129
 10345  001F38  1839               	xorwf	??_ldexp,w,c
 10346  001F3A  6E35               	movwf	ldexp@value+1,c
 10347  001F3C  C034  F034         	movff	ldexp@value,?_ldexp
 10348  001F40  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 10349  001F44  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 10350  001F48  0012               	return	
 10351  001F4A                     __end_of_ldexp:
 10352                           	opt stack 0
 10353                           pclatu	equ	0xFFB
 10354                           pclath	equ	0xFFA
 10355                           tblptru	equ	0xFF8
 10356                           tblptrh	equ	0xFF7
 10357                           tblptrl	equ	0xFF6
 10358                           tablat	equ	0xFF5
 10359                           prodh	equ	0xFF4
 10360                           prodl	equ	0xFF3
 10361                           intcon	equ	0xFF2
 10362                           intcon2	equ	0xFF1
 10363                           intcon3	equ	0xFF0
 10364                           postinc0	equ	0xFEE
 10365                           fsr0h	equ	0xFEA
 10366                           fsr0l	equ	0xFE9
 10367                           wreg	equ	0xFE8
 10368                           fsr1h	equ	0xFE2
 10369                           fsr1l	equ	0xFE1
 10370                           indf2	equ	0xFDF
 10371                           postinc2	equ	0xFDE
 10372                           postdec2	equ	0xFDD
 10373                           fsr2h	equ	0xFDA
 10374                           fsr2l	equ	0xFD9
 10375                           status	equ	0xFD8
 10376                           
 10377 ;; *************** function _floor *****************
 10378 ;; Defined at:
 10379 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;  x               3   64[COMRAM] int 
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;  i               3   67[COMRAM] int 
 10384 ;;  expon           2   70[COMRAM] int 
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  3   64[COMRAM] int 
 10387 ;; Registers used:
 10388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10394 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10397 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10398 ;;Total ram usage:        8 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    2
 10401 ;; This function calls:
 10402 ;;		___altoft
 10403 ;;		___ftadd
 10404 ;;		___ftge
 10405 ;;		___fttol
 10406 ;;		_frexp
 10407 ;; This function is called by:
 10408 ;;		_exp
 10409 ;; This function uses a non-reentrant model
 10410 ;;
 10411                           
 10412                           	psect	text50
 10413  001B28                     __ptext50:
 10414                           	opt stack 0
 10415  001B28                     _floor:
 10416                           	opt stack 20
 10417                           
 10418                           ;incstack = 0
 10419  001B28  C041  F001         	movff	floor@x,frexp@value
 10420  001B2C  C042  F002         	movff	floor@x+1,frexp@value+1
 10421  001B30  C043  F003         	movff	floor@x+2,frexp@value+2
 10422  001B34  0E47               	movlw	low floor@expon
 10423  001B36  6E04               	movwf	frexp@eptr,c
 10424  001B38  0E00               	movlw	high floor@expon
 10425  001B3A  6E05               	movwf	frexp@eptr+1,c
 10426  001B3C  EC07  F012         	call	_frexp	;wreg free
 10427  001B40  AE48               	btfss	floor@expon+1,7,c
 10428  001B42  D010               	goto	i2l3349
 10429  001B44  AE43               	btfss	floor@x+2,7,c
 10430  001B46  D007               	goto	i2l3345
 10431  001B48  0E00               	movlw	0
 10432  001B4A  6E41               	movwf	?_floor,c
 10433  001B4C  0E80               	movlw	128
 10434  001B4E  6E42               	movwf	?_floor+1,c
 10435  001B50  0EBF               	movlw	191
 10436  001B52  6E43               	movwf	?_floor+2,c
 10437  001B54  0012               	return	
 10438  001B56                     i2l3345:
 10439  001B56  0E00               	movlw	0
 10440  001B58  6E41               	movwf	?_floor,c
 10441  001B5A  0E00               	movlw	0
 10442  001B5C  6E42               	movwf	?_floor+1,c
 10443  001B5E  0E00               	movlw	0
 10444  001B60  6E43               	movwf	?_floor+2,c
 10445  001B62  0012               	return	
 10446  001B64                     i2l3349:
 10447  001B64  5048               	movf	floor@expon+1,w,c
 10448  001B66  E104               	bnz	i2u284_40
 10449  001B68  0E15               	movlw	21
 10450  001B6A  5C47               	subwf	floor@expon,w,c
 10451  001B6C  A0D8               	btfss	status,0,c
 10452  001B6E  D007               	goto	i2l3353
 10453  001B70                     i2u284_40:
 10454  001B70  C041  F041         	movff	floor@x,?_floor
 10455  001B74  C042  F042         	movff	floor@x+1,?_floor+1
 10456  001B78  C043  F043         	movff	floor@x+2,?_floor+2
 10457  001B7C  0012               	return	
 10458  001B7E                     i2l3353:
 10459  001B7E  C041  F028         	movff	floor@x,___fttol@f1
 10460  001B82  C042  F029         	movff	floor@x+1,___fttol@f1+1
 10461  001B86  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 10462  001B8A  ECBA  F00B         	call	___fttol	;wreg free
 10463  001B8E  C028  F037         	movff	?___fttol,___altoft@c
 10464  001B92  C029  F038         	movff	?___fttol+1,___altoft@c+1
 10465  001B96  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 10466  001B9A  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 10467  001B9E  EC15  F013         	call	___altoft	;wreg free
 10468  001BA2  C037  F044         	movff	?___altoft,floor@i
 10469  001BA6  C038  F045         	movff	?___altoft+1,floor@i+1
 10470  001BAA  C039  F046         	movff	?___altoft+2,floor@i+2
 10471  001BAE  C041  F001         	movff	floor@x,___ftge@ff1
 10472  001BB2  C042  F002         	movff	floor@x+1,___ftge@ff1+1
 10473  001BB6  C043  F003         	movff	floor@x+2,___ftge@ff1+2
 10474  001BBA  C044  F004         	movff	floor@i,___ftge@ff2
 10475  001BBE  C045  F005         	movff	floor@i+1,___ftge@ff2+1
 10476  001BC2  C046  F006         	movff	floor@i+2,___ftge@ff2+2
 10477  001BC6  EC4F  F012         	call	___ftge	;wreg free
 10478  001BCA  B0D8               	btfsc	status,0,c
 10479  001BCC  D015               	goto	i2l1095
 10480  001BCE  C044  F01C         	movff	floor@i,___ftadd@f1
 10481  001BD2  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 10482  001BD6  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 10483  001BDA  0E00               	movlw	0
 10484  001BDC  6E1F               	movwf	___ftadd@f2,c
 10485  001BDE  0E80               	movlw	128
 10486  001BE0  6E20               	movwf	___ftadd@f2+1,c
 10487  001BE2  0EBF               	movlw	191
 10488  001BE4  6E21               	movwf	___ftadd@f2+2,c
 10489  001BE6  ECC3  F007         	call	___ftadd	;wreg free
 10490  001BEA  C01C  F041         	movff	?___ftadd,?_floor
 10491  001BEE  C01D  F042         	movff	?___ftadd+1,?_floor+1
 10492  001BF2  C01E  F043         	movff	?___ftadd+2,?_floor+2
 10493  001BF6  0012               	return	
 10494  001BF8                     i2l1095:
 10495  001BF8  C044  F041         	movff	floor@i,?_floor
 10496  001BFC  C045  F042         	movff	floor@i+1,?_floor+1
 10497  001C00  C046  F043         	movff	floor@i+2,?_floor+2
 10498  001C04  0012               	return		;funcret
 10499  001C06                     __end_of_floor:
 10500                           	opt stack 0
 10501                           pclatu	equ	0xFFB
 10502                           pclath	equ	0xFFA
 10503                           tblptru	equ	0xFF8
 10504                           tblptrh	equ	0xFF7
 10505                           tblptrl	equ	0xFF6
 10506                           tablat	equ	0xFF5
 10507                           prodh	equ	0xFF4
 10508                           prodl	equ	0xFF3
 10509                           intcon	equ	0xFF2
 10510                           intcon2	equ	0xFF1
 10511                           intcon3	equ	0xFF0
 10512                           postinc0	equ	0xFEE
 10513                           fsr0h	equ	0xFEA
 10514                           fsr0l	equ	0xFE9
 10515                           wreg	equ	0xFE8
 10516                           fsr1h	equ	0xFE2
 10517                           fsr1l	equ	0xFE1
 10518                           indf2	equ	0xFDF
 10519                           postinc2	equ	0xFDE
 10520                           postdec2	equ	0xFDD
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function _frexp *****************
 10526 ;; Defined at:
 10527 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  value           3    0[COMRAM] int 
 10530 ;;  eptr            2    3[COMRAM] PTR int 
 10531 ;;		 -> log@exponent(2), floor@expon(2), 
 10532 ;; Auto vars:     Size  Location     Type
 10533 ;;		None
 10534 ;; Return value:  Size  Location     Type
 10535 ;;                  3    0[COMRAM] PTR int 
 10536 ;; Registers used:
 10537 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10543 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10547 ;;Total ram usage:        7 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; This function calls:
 10550 ;;		Nothing
 10551 ;; This function is called by:
 10552 ;;		_floor
 10553 ;;		_log
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           	psect	text51
 10558  00240E                     __ptext51:
 10559                           	opt stack 0
 10560  00240E                     _frexp:
 10561                           	opt stack 22
 10562                           
 10563                           ;incstack = 0
 10564  00240E  5001               	movf	frexp@value,w,c
 10565  002410  1002               	iorwf	frexp@value+1,w,c
 10566  002412  1003               	iorwf	frexp@value+2,w,c
 10567  002414  A4D8               	btfss	status,2,c
 10568  002416  D00F               	goto	i2l3225
 10569  002418  C004  FFD9         	movff	frexp@eptr,fsr2l
 10570  00241C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10571  002420  0E00               	movlw	0
 10572  002422  6EDE               	movwf	postinc2,c
 10573  002424  0E00               	movlw	0
 10574  002426  6EDD               	movwf	postdec2,c
 10575  002428  0E00               	movlw	0
 10576  00242A  6E01               	movwf	?_frexp,c
 10577  00242C  0E00               	movlw	0
 10578  00242E  6E02               	movwf	?_frexp+1,c
 10579  002430  0E00               	movlw	0
 10580  002432  6E03               	movwf	?_frexp+2,c
 10581  002434  0012               	return	
 10582  002436                     i2l3225:
 10583  002436  5003               	movf	frexp@value+2,w,c
 10584  002438  0B7F               	andlw	127
 10585  00243A  6E06               	movwf	??_frexp& (0+255),c
 10586  00243C  6A07               	clrf	(??_frexp+1)& (0+255),c
 10587  00243E  90D8               	bcf	status,0,c
 10588  002440  3606               	rlcf	??_frexp,f,c
 10589  002442  3607               	rlcf	??_frexp+1,f,c
 10590  002444  C004  FFD9         	movff	frexp@eptr,fsr2l
 10591  002448  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10592  00244C  C006  FFDE         	movff	??_frexp,postinc2
 10593  002450  C007  FFDD         	movff	??_frexp+1,postdec2
 10594  002454  AE02               	btfss	frexp@value+1,7,c
 10595  002456  D003               	goto	i2u271_40
 10596  002458  6A06               	clrf	??_frexp& (0+255),c
 10597  00245A  2A06               	incf	??_frexp& (0+255),f,c
 10598  00245C  D001               	goto	i2u271_48
 10599  00245E                     i2u271_40:
 10600  00245E  6A06               	clrf	??_frexp& (0+255),c
 10601  002460                     i2u271_48:
 10602  002460  5006               	movf	??_frexp,w,c
 10603  002462  C004  FFD9         	movff	frexp@eptr,fsr2l
 10604  002466  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10605  00246A  12DE               	iorwf	postinc2,f,c
 10606  00246C  0E00               	movlw	0
 10607  00246E  12DD               	iorwf	postdec2,f,c
 10608  002470  C004  FFD9         	movff	frexp@eptr,fsr2l
 10609  002474  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10610  002478  0E82               	movlw	130
 10611  00247A  26DE               	addwf	postinc2,f,c
 10612  00247C  0EFF               	movlw	255
 10613  00247E  22DD               	addwfc	postdec2,f,c
 10614  002480  8003               	bsf	frexp@value+2,0,c
 10615  002482  8203               	bsf	frexp@value+2,1,c
 10616  002484  8403               	bsf	frexp@value+2,2,c
 10617  002486  8603               	bsf	frexp@value+2,3,c
 10618  002488  8803               	bsf	frexp@value+2,4,c
 10619  00248A  8A03               	bsf	frexp@value+2,5,c
 10620  00248C  9C03               	bcf	frexp@value+2,6,c
 10621  00248E  9E02               	bcf	frexp@value+1,7,c
 10622  002490  C001  F001         	movff	frexp@value,?_frexp
 10623  002494  C002  F002         	movff	frexp@value+1,?_frexp+1
 10624  002498  C003  F003         	movff	frexp@value+2,?_frexp+2
 10625  00249C  0012               	return	
 10626  00249E                     __end_of_frexp:
 10627                           	opt stack 0
 10628                           pclatu	equ	0xFFB
 10629                           pclath	equ	0xFFA
 10630                           tblptru	equ	0xFF8
 10631                           tblptrh	equ	0xFF7
 10632                           tblptrl	equ	0xFF6
 10633                           tablat	equ	0xFF5
 10634                           prodh	equ	0xFF4
 10635                           prodl	equ	0xFF3
 10636                           intcon	equ	0xFF2
 10637                           intcon2	equ	0xFF1
 10638                           intcon3	equ	0xFF0
 10639                           postinc0	equ	0xFEE
 10640                           fsr0h	equ	0xFEA
 10641                           fsr0l	equ	0xFE9
 10642                           wreg	equ	0xFE8
 10643                           fsr1h	equ	0xFE2
 10644                           fsr1l	equ	0xFE1
 10645                           indf2	equ	0xFDF
 10646                           postinc2	equ	0xFDE
 10647                           postdec2	equ	0xFDD
 10648                           fsr2h	equ	0xFDA
 10649                           fsr2l	equ	0xFD9
 10650                           status	equ	0xFD8
 10651                           
 10652 ;; *************** function ___fttol *****************
 10653 ;; Defined at:
 10654 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10655 ;; Parameters:    Size  Location     Type
 10656 ;;  f1              3   39[COMRAM] float 
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;  lval            4   49[COMRAM] unsigned long 
 10659 ;;  exp1            1   53[COMRAM] unsigned char 
 10660 ;;  sign1           1   48[COMRAM] unsigned char 
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  4   39[COMRAM] long 
 10663 ;; Registers used:
 10664 ;;		wreg, status,2, status,0
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10672 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10673 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;Total ram usage:       15 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; This function calls:
 10677 ;;		Nothing
 10678 ;; This function is called by:
 10679 ;;		_dec_to_hex
 10680 ;;		_pow
 10681 ;;		_exp
 10682 ;;		_floor
 10683 ;; This function uses a non-reentrant model
 10684 ;;
 10685                           
 10686                           	psect	text52
 10687  001774                     __ptext52:
 10688                           	opt stack 0
 10689  001774                     ___fttol:
 10690                           	opt stack 21
 10691                           
 10692                           ;incstack = 0
 10693  001774  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 10694  001778  6A2D               	clrf	(??___fttol+1)& (0+255),c
 10695  00177A  6A2E               	clrf	(??___fttol+2)& (0+255),c
 10696  00177C  3429               	rlcf	___fttol@f1+1,w,c
 10697  00177E  362C               	rlcf	??___fttol& (0+255),f,c
 10698  001780  E301               	bnc	u262_41
 10699  001782  802D               	bsf	(??___fttol+1)& (0+255),0,c
 10700  001784                     u262_41:
 10701  001784  502C               	movf	??___fttol,w,c
 10702  001786  6E36               	movwf	___fttol@exp1,c
 10703  001788  5036               	movf	___fttol@exp1,w,c
 10704  00178A  A4D8               	btfss	status,2,c
 10705  00178C  D009               	goto	i2l3177
 10706  00178E  0E00               	movlw	0
 10707  001790  6E28               	movwf	?___fttol,c
 10708  001792  0E00               	movlw	0
 10709  001794  6E29               	movwf	?___fttol+1,c
 10710  001796  0E00               	movlw	0
 10711  001798  6E2A               	movwf	?___fttol+2,c
 10712  00179A  0E00               	movlw	0
 10713  00179C  6E2B               	movwf	?___fttol+3,c
 10714  00179E  0012               	return	
 10715  0017A0                     i2l3177:
 10716  0017A0  0E17               	movlw	23
 10717  0017A2  6E2C               	movwf	??___fttol& (0+255),c
 10718  0017A4  C028  F02D         	movff	___fttol@f1,??___fttol+1
 10719  0017A8  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 10720  0017AC  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 10721  0017B0  282C               	incf	??___fttol,w,c
 10722  0017B2  6E30               	movwf	(??___fttol+4)& (0+255),c
 10723  0017B4  D004               	goto	i2u264_40
 10724  0017B6                     i2u264_45:
 10725  0017B6  90D8               	bcf	status,0,c
 10726  0017B8  322F               	rrcf	??___fttol+3,f,c
 10727  0017BA  322E               	rrcf	??___fttol+2,f,c
 10728  0017BC  322D               	rrcf	??___fttol+1,f,c
 10729  0017BE                     i2u264_40:
 10730  0017BE  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 10731  0017C0  D7FA               	goto	i2u264_45
 10732  0017C2  502D               	movf	??___fttol+1,w,c
 10733  0017C4  6E31               	movwf	___fttol@sign1,c
 10734  0017C6  8E29               	bsf	___fttol@f1+1,7,c
 10735  0017C8  0EFF               	movlw	255
 10736  0017CA  1628               	andwf	___fttol@f1,f,c
 10737  0017CC  0EFF               	movlw	255
 10738  0017CE  1629               	andwf	___fttol@f1+1,f,c
 10739  0017D0  0E00               	movlw	0
 10740  0017D2  162A               	andwf	___fttol@f1+2,f,c
 10741  0017D4  5028               	movf	___fttol@f1,w,c
 10742  0017D6  6E32               	movwf	___fttol@lval,c
 10743  0017D8  5029               	movf	___fttol@f1+1,w,c
 10744  0017DA  6E33               	movwf	___fttol@lval+1,c
 10745  0017DC  502A               	movf	___fttol@f1+2,w,c
 10746  0017DE  6E34               	movwf	___fttol@lval+2,c
 10747  0017E0  6A35               	clrf	___fttol@lval+3,c
 10748  0017E2  0E8E               	movlw	142
 10749  0017E4  5E36               	subwf	___fttol@exp1,f,c
 10750  0017E6  AE36               	btfss	___fttol@exp1,7,c
 10751  0017E8  D016               	goto	i2l3199
 10752  0017EA  5036               	movf	___fttol@exp1,w,c
 10753  0017EC  0A80               	xorlw	128
 10754  0017EE  0F8F               	addlw	143
 10755  0017F0  B0D8               	btfsc	status,0,c
 10756  0017F2  D009               	goto	i2l3195
 10757  0017F4  0E00               	movlw	0
 10758  0017F6  6E28               	movwf	?___fttol,c
 10759  0017F8  0E00               	movlw	0
 10760  0017FA  6E29               	movwf	?___fttol+1,c
 10761  0017FC  0E00               	movlw	0
 10762  0017FE  6E2A               	movwf	?___fttol+2,c
 10763  001800  0E00               	movlw	0
 10764  001802  6E2B               	movwf	?___fttol+3,c
 10765  001804  0012               	return	
 10766  001806                     i2l3195:
 10767  001806  90D8               	bcf	status,0,c
 10768  001808  3235               	rrcf	___fttol@lval+3,f,c
 10769  00180A  3234               	rrcf	___fttol@lval+2,f,c
 10770  00180C  3233               	rrcf	___fttol@lval+1,f,c
 10771  00180E  3232               	rrcf	___fttol@lval,f,c
 10772  001810  3E36               	incfsz	___fttol@exp1,f,c
 10773  001812  D7F9               	goto	i2l3195
 10774  001814  D015               	goto	i2l3209
 10775  001816                     i2l3199:
 10776  001816  0E17               	movlw	23
 10777  001818  6436               	cpfsgt	___fttol@exp1,c
 10778  00181A  D00F               	goto	i2l3207
 10779  00181C  0E00               	movlw	0
 10780  00181E  6E28               	movwf	?___fttol,c
 10781  001820  0E00               	movlw	0
 10782  001822  6E29               	movwf	?___fttol+1,c
 10783  001824  0E00               	movlw	0
 10784  001826  6E2A               	movwf	?___fttol+2,c
 10785  001828  0E00               	movlw	0
 10786  00182A  6E2B               	movwf	?___fttol+3,c
 10787  00182C  0012               	return	
 10788  00182E                     i2l3205:
 10789  00182E  90D8               	bcf	status,0,c
 10790  001830  3632               	rlcf	___fttol@lval,f,c
 10791  001832  3633               	rlcf	___fttol@lval+1,f,c
 10792  001834  3634               	rlcf	___fttol@lval+2,f,c
 10793  001836  3635               	rlcf	___fttol@lval+3,f,c
 10794  001838  0636               	decf	___fttol@exp1,f,c
 10795  00183A                     i2l3207:
 10796  00183A  5036               	movf	___fttol@exp1,w,c
 10797  00183C  A4D8               	btfss	status,2,c
 10798  00183E  D7F7               	goto	i2l3205
 10799  001840                     i2l3209:
 10800  001840  5031               	movf	___fttol@sign1,w,c
 10801  001842  B4D8               	btfsc	status,2,c
 10802  001844  D008               	goto	i2l3213
 10803  001846  1E35               	comf	___fttol@lval+3,f,c
 10804  001848  1E34               	comf	___fttol@lval+2,f,c
 10805  00184A  1E33               	comf	___fttol@lval+1,f,c
 10806  00184C  6C32               	negf	___fttol@lval,c
 10807  00184E  0E00               	movlw	0
 10808  001850  2233               	addwfc	___fttol@lval+1,f,c
 10809  001852  2234               	addwfc	___fttol@lval+2,f,c
 10810  001854  2235               	addwfc	___fttol@lval+3,f,c
 10811  001856                     i2l3213:
 10812  001856  C032  F028         	movff	___fttol@lval,?___fttol
 10813  00185A  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 10814  00185E  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 10815  001862  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 10816  001866  0012               	return	
 10817  001868                     __end_of___fttol:
 10818                           	opt stack 0
 10819                           pclatu	equ	0xFFB
 10820                           pclath	equ	0xFFA
 10821                           tblptru	equ	0xFF8
 10822                           tblptrh	equ	0xFF7
 10823                           tblptrl	equ	0xFF6
 10824                           tablat	equ	0xFF5
 10825                           prodh	equ	0xFF4
 10826                           prodl	equ	0xFF3
 10827                           intcon	equ	0xFF2
 10828                           intcon2	equ	0xFF1
 10829                           intcon3	equ	0xFF0
 10830                           postinc0	equ	0xFEE
 10831                           fsr0h	equ	0xFEA
 10832                           fsr0l	equ	0xFE9
 10833                           wreg	equ	0xFE8
 10834                           fsr1h	equ	0xFE2
 10835                           fsr1l	equ	0xFE1
 10836                           indf2	equ	0xFDF
 10837                           postinc2	equ	0xFDE
 10838                           postdec2	equ	0xFDD
 10839                           fsr2h	equ	0xFDA
 10840                           fsr2l	equ	0xFD9
 10841                           status	equ	0xFD8
 10842                           
 10843 ;; *************** function ___ftge *****************
 10844 ;; Defined at:
 10845 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;  ff1             3    0[COMRAM] float 
 10848 ;;  ff2             3    3[COMRAM] float 
 10849 ;; Auto vars:     Size  Location     Type
 10850 ;;		None
 10851 ;; Return value:  Size  Location     Type
 10852 ;;		None               void
 10853 ;; Registers used:
 10854 ;;		wreg, status,2, status,0
 10855 ;; Tracked objects:
 10856 ;;		On entry : 0/0
 10857 ;;		On exit  : 0/0
 10858 ;;		Unchanged: 0/0
 10859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10860 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10862 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10863 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10864 ;;Total ram usage:        9 bytes
 10865 ;; Hardware stack levels used:    1
 10866 ;; This function calls:
 10867 ;;		Nothing
 10868 ;; This function is called by:
 10869 ;;		_pow
 10870 ;;		_exp
 10871 ;;		_floor
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           	psect	text53
 10876  00249E                     __ptext53:
 10877                           	opt stack 0
 10878  00249E                     ___ftge:
 10879                           	opt stack 21
 10880                           
 10881                           ;incstack = 0
 10882  00249E  AE03               	btfss	___ftge@ff1+2,7,c
 10883  0024A0  D016               	goto	i2l3157
 10884  0024A2  C001  F007         	movff	___ftge@ff1,??___ftge
 10885  0024A6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 10886  0024AA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 10887  0024AE  1E07               	comf	??___ftge,f,c
 10888  0024B0  1E08               	comf	??___ftge+1,f,c
 10889  0024B2  1E09               	comf	??___ftge+2,f,c
 10890  0024B4  2A07               	incf	??___ftge,f,c
 10891  0024B6  0E00               	movlw	0
 10892  0024B8  2208               	addwfc	??___ftge+1,f,c
 10893  0024BA  2209               	addwfc	??___ftge+2,f,c
 10894  0024BC  0E00               	movlw	0
 10895  0024BE  2407               	addwf	??___ftge,w,c
 10896  0024C0  6E01               	movwf	___ftge@ff1,c
 10897  0024C2  0E00               	movlw	0
 10898  0024C4  2008               	addwfc	??___ftge+1,w,c
 10899  0024C6  6E02               	movwf	___ftge@ff1+1,c
 10900  0024C8  0E80               	movlw	128
 10901  0024CA  2009               	addwfc	??___ftge+2,w,c
 10902  0024CC  6E03               	movwf	___ftge@ff1+2,c
 10903  0024CE                     i2l3157:
 10904  0024CE  AE06               	btfss	___ftge@ff2+2,7,c
 10905  0024D0  D016               	goto	i2l3161
 10906  0024D2  C004  F007         	movff	___ftge@ff2,??___ftge
 10907  0024D6  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 10908  0024DA  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 10909  0024DE  1E07               	comf	??___ftge,f,c
 10910  0024E0  1E08               	comf	??___ftge+1,f,c
 10911  0024E2  1E09               	comf	??___ftge+2,f,c
 10912  0024E4  2A07               	incf	??___ftge,f,c
 10913  0024E6  0E00               	movlw	0
 10914  0024E8  2208               	addwfc	??___ftge+1,f,c
 10915  0024EA  2209               	addwfc	??___ftge+2,f,c
 10916  0024EC  0E00               	movlw	0
 10917  0024EE  2407               	addwf	??___ftge,w,c
 10918  0024F0  6E04               	movwf	___ftge@ff2,c
 10919  0024F2  0E00               	movlw	0
 10920  0024F4  2008               	addwfc	??___ftge+1,w,c
 10921  0024F6  6E05               	movwf	___ftge@ff2+1,c
 10922  0024F8  0E80               	movlw	128
 10923  0024FA  2009               	addwfc	??___ftge+2,w,c
 10924  0024FC  6E06               	movwf	___ftge@ff2+2,c
 10925  0024FE                     i2l3161:
 10926  0024FE  0E00               	movlw	0
 10927  002500  1A01               	xorwf	___ftge@ff1,f,c
 10928  002502  0E00               	movlw	0
 10929  002504  1A02               	xorwf	___ftge@ff1+1,f,c
 10930  002506  0E80               	movlw	128
 10931  002508  1A03               	xorwf	___ftge@ff1+2,f,c
 10932  00250A  0E00               	movlw	0
 10933  00250C  1A04               	xorwf	___ftge@ff2,f,c
 10934  00250E  0E00               	movlw	0
 10935  002510  1A05               	xorwf	___ftge@ff2+1,f,c
 10936  002512  0E80               	movlw	128
 10937  002514  1A06               	xorwf	___ftge@ff2+2,f,c
 10938  002516  5004               	movf	___ftge@ff2,w,c
 10939  002518  5C01               	subwf	___ftge@ff1,w,c
 10940  00251A  5005               	movf	___ftge@ff2+1,w,c
 10941  00251C  5802               	subwfb	___ftge@ff1+1,w,c
 10942  00251E  5006               	movf	___ftge@ff2+2,w,c
 10943  002520  5803               	subwfb	___ftge@ff1+2,w,c
 10944  002522  B0D8               	btfsc	status,0,c
 10945  002524  D002               	goto	i2l3167
 10946  002526  90D8               	bcf	status,0,c
 10947  002528  0012               	return	
 10948  00252A                     i2l3167:
 10949  00252A  80D8               	bsf	status,0,c
 10950  00252C  0012               	return	
 10951  00252E                     __end_of___ftge:
 10952                           	opt stack 0
 10953                           pclatu	equ	0xFFB
 10954                           pclath	equ	0xFFA
 10955                           tblptru	equ	0xFF8
 10956                           tblptrh	equ	0xFF7
 10957                           tblptrl	equ	0xFF6
 10958                           tablat	equ	0xFF5
 10959                           prodh	equ	0xFF4
 10960                           prodl	equ	0xFF3
 10961                           intcon	equ	0xFF2
 10962                           intcon2	equ	0xFF1
 10963                           intcon3	equ	0xFF0
 10964                           postinc0	equ	0xFEE
 10965                           fsr0h	equ	0xFEA
 10966                           fsr0l	equ	0xFE9
 10967                           wreg	equ	0xFE8
 10968                           fsr1h	equ	0xFE2
 10969                           fsr1l	equ	0xFE1
 10970                           indf2	equ	0xFDF
 10971                           postinc2	equ	0xFDE
 10972                           postdec2	equ	0xFDD
 10973                           fsr2h	equ	0xFDA
 10974                           fsr2l	equ	0xFD9
 10975                           status	equ	0xFD8
 10976                           
 10977 ;; *************** function ___altoft *****************
 10978 ;; Defined at:
 10979 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;  c               4   54[COMRAM] long 
 10982 ;; Auto vars:     Size  Location     Type
 10983 ;;  sign            1   63[COMRAM] unsigned char 
 10984 ;;  exp             1   62[COMRAM] unsigned char 
 10985 ;; Return value:  Size  Location     Type
 10986 ;;                  3   54[COMRAM] float 
 10987 ;; Registers used:
 10988 ;;		wreg, status,2, status,0, cstack
 10989 ;; Tracked objects:
 10990 ;;		On entry : 0/0
 10991 ;;		On exit  : 0/0
 10992 ;;		Unchanged: 0/0
 10993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10997 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10998 ;;Total ram usage:       10 bytes
 10999 ;; Hardware stack levels used:    1
 11000 ;; Hardware stack levels required when called:    1
 11001 ;; This function calls:
 11002 ;;		___ftpack
 11003 ;; This function is called by:
 11004 ;;		_floor
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           	psect	text54
 11009  00262A                     __ptext54:
 11010                           	opt stack 0
 11011  00262A                     ___altoft:
 11012                           	opt stack 20
 11013                           
 11014                           ;incstack = 0
 11015  00262A  0E00               	movlw	0
 11016  00262C  6E40               	movwf	___altoft@sign,c
 11017  00262E  0E8E               	movlw	142
 11018  002630  6E3F               	movwf	___altoft@exp,c
 11019  002632  AE3A               	btfss	___altoft@c+3,7,c
 11020  002634  D011               	goto	i2l3029
 11021  002636  1E3A               	comf	___altoft@c+3,f,c
 11022  002638  1E39               	comf	___altoft@c+2,f,c
 11023  00263A  1E38               	comf	___altoft@c+1,f,c
 11024  00263C  6C37               	negf	___altoft@c,c
 11025  00263E  0E00               	movlw	0
 11026  002640  2238               	addwfc	___altoft@c+1,f,c
 11027  002642  2239               	addwfc	___altoft@c+2,f,c
 11028  002644  223A               	addwfc	___altoft@c+3,f,c
 11029  002646  0E01               	movlw	1
 11030  002648  6E40               	movwf	___altoft@sign,c
 11031  00264A  D006               	goto	i2l3029
 11032  00264C                     i2l3027:
 11033  00264C  90D8               	bcf	status,0,c
 11034  00264E  323A               	rrcf	___altoft@c+3,f,c
 11035  002650  3239               	rrcf	___altoft@c+2,f,c
 11036  002652  3238               	rrcf	___altoft@c+1,f,c
 11037  002654  3237               	rrcf	___altoft@c,f,c
 11038  002656  2A3F               	incf	___altoft@exp,f,c
 11039  002658                     i2l3029:
 11040  002658  0E00               	movlw	0
 11041  00265A  1437               	andwf	___altoft@c,w,c
 11042  00265C  6E3B               	movwf	??___altoft& (0+255),c
 11043  00265E  0E00               	movlw	0
 11044  002660  1438               	andwf	___altoft@c+1,w,c
 11045  002662  6E3C               	movwf	(??___altoft+1)& (0+255),c
 11046  002664  0E00               	movlw	0
 11047  002666  1439               	andwf	___altoft@c+2,w,c
 11048  002668  6E3D               	movwf	(??___altoft+2)& (0+255),c
 11049  00266A  0EFF               	movlw	255
 11050  00266C  143A               	andwf	___altoft@c+3,w,c
 11051  00266E  6E3E               	movwf	(??___altoft+3)& (0+255),c
 11052  002670  503B               	movf	??___altoft,w,c
 11053  002672  103C               	iorwf	??___altoft+1,w,c
 11054  002674  103D               	iorwf	??___altoft+2,w,c
 11055  002676  103E               	iorwf	??___altoft+3,w,c
 11056  002678  A4D8               	btfss	status,2,c
 11057  00267A  D7E8               	goto	i2l3027
 11058  00267C  C037  F001         	movff	___altoft@c,___ftpack@arg
 11059  002680  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 11060  002684  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 11061  002688  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 11062  00268C  C040  F005         	movff	___altoft@sign,___ftpack@sign
 11063  002690  EC17  F011         	call	___ftpack	;wreg free
 11064  002694  C001  F037         	movff	?___ftpack,?___altoft
 11065  002698  C002  F038         	movff	?___ftpack+1,?___altoft+1
 11066  00269C  C003  F039         	movff	?___ftpack+2,?___altoft+2
 11067  0026A0  0012               	return	
 11068  0026A2                     __end_of___altoft:
 11069                           	opt stack 0
 11070                           pclatu	equ	0xFFB
 11071                           pclath	equ	0xFFA
 11072                           tblptru	equ	0xFF8
 11073                           tblptrh	equ	0xFF7
 11074                           tblptrl	equ	0xFF6
 11075                           tablat	equ	0xFF5
 11076                           prodh	equ	0xFF4
 11077                           prodl	equ	0xFF3
 11078                           intcon	equ	0xFF2
 11079                           intcon2	equ	0xFF1
 11080                           intcon3	equ	0xFF0
 11081                           postinc0	equ	0xFEE
 11082                           fsr0h	equ	0xFEA
 11083                           fsr0l	equ	0xFE9
 11084                           wreg	equ	0xFE8
 11085                           fsr1h	equ	0xFE2
 11086                           fsr1l	equ	0xFE1
 11087                           indf2	equ	0xFDF
 11088                           postinc2	equ	0xFDE
 11089                           postdec2	equ	0xFDD
 11090                           fsr2h	equ	0xFDA
 11091                           fsr2l	equ	0xFD9
 11092                           status	equ	0xFD8
 11093                           
 11094 ;; *************** function _eval_poly *****************
 11095 ;; Defined at:
 11096 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;  x               3   39[COMRAM] float 
 11099 ;;  d               2   42[COMRAM] PTR const 
 11100 ;;		 -> log@coeff(27), exp@coeff(30), 
 11101 ;;  n               2   44[COMRAM] int 
 11102 ;; Auto vars:     Size  Location     Type
 11103 ;;  res             3   48[COMRAM] int 
 11104 ;; Return value:  Size  Location     Type
 11105 ;;                  3   39[COMRAM] int 
 11106 ;; Registers used:
 11107 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11108 ;; Tracked objects:
 11109 ;;		On entry : 0/0
 11110 ;;		On exit  : 0/0
 11111 ;;		Unchanged: 0/0
 11112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11113 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11115 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11116 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;Total ram usage:       12 bytes
 11118 ;; Hardware stack levels used:    1
 11119 ;; Hardware stack levels required when called:    2
 11120 ;; This function calls:
 11121 ;;		___ftadd
 11122 ;;		___ftmul
 11123 ;;		i2___wmul
 11124 ;; This function is called by:
 11125 ;;		_exp
 11126 ;;		_log
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           	psect	text55
 11131  001DB2                     __ptext55:
 11132                           	opt stack 0
 11133  001DB2                     _eval_poly:
 11134                           	opt stack 20
 11135                           
 11136                           ;incstack = 0
 11137  001DB2  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11138  001DB6  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11139  001DBA  0E00               	movlw	0
 11140  001DBC  6E04               	movwf	i2___wmul@multiplicand+1,c
 11141  001DBE  0E03               	movlw	3
 11142  001DC0  6E03               	movwf	i2___wmul@multiplicand,c
 11143  001DC2  ECE2  F015         	call	i2___wmul	;wreg free
 11144  001DC6  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11145  001DCA  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11146  001DCE  5001               	movf	?i2___wmul,w,c
 11147  001DD0  262F               	addwf	??_eval_poly,f,c
 11148  001DD2  5002               	movf	?i2___wmul+1,w,c
 11149  001DD4  2230               	addwfc	??_eval_poly+1,f,c
 11150  001DD6  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11151  001DDA  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11152  001DDE                     	if	0	;tblptru may be non-zero
 11153  001DDE                     	endif
 11154  001DDE                     	if	0	;tblptru may be non-zero
 11155  001DDE                     	endif
 11156  001DDE  0009               	tblrd		*+
 11157  001DE0  CFF5 F031          	movff	tablat,eval_poly@res
 11158  001DE4  0009               	tblrd		*+
 11159  001DE6  CFF5 F032          	movff	tablat,eval_poly@res+1
 11160  001DEA  000A               	tblrd		*-
 11161  001DEC  CFF5 F033          	movff	tablat,eval_poly@res+2
 11162  001DF0  D03E               	goto	i2l3363
 11163  001DF2                     i2l3361:
 11164  001DF2  C031  F010         	movff	eval_poly@res,___ftmul@f2
 11165  001DF6  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 11166  001DFA  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 11167  001DFE  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 11168  001E02  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 11169  001E06  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 11170  001E0A  EC34  F00C         	call	___ftmul	;wreg free
 11171  001E0E  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 11172  001E12  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 11173  001E16  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 11174  001E1A  0E00               	movlw	0
 11175  001E1C  6E04               	movwf	i2___wmul@multiplicand+1,c
 11176  001E1E  0E03               	movlw	3
 11177  001E20  6E03               	movwf	i2___wmul@multiplicand,c
 11178  001E22  062D               	decf	eval_poly@n,f,c
 11179  001E24  A0D8               	btfss	status,0,c
 11180  001E26  062E               	decf	eval_poly@n+1,f,c
 11181  001E28  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11182  001E2C  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11183  001E30  ECE2  F015         	call	i2___wmul	;wreg free
 11184  001E34  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11185  001E38  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11186  001E3C  5001               	movf	?i2___wmul,w,c
 11187  001E3E  262F               	addwf	??_eval_poly,f,c
 11188  001E40  5002               	movf	?i2___wmul+1,w,c
 11189  001E42  2230               	addwfc	??_eval_poly+1,f,c
 11190  001E44  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11191  001E48  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11192  001E4C                     	if	0	;tblptru may be non-zero
 11193  001E4C                     	endif
 11194  001E4C                     	if	0	;tblptru may be non-zero
 11195  001E4C                     	endif
 11196  001E4C  0009               	tblrd		*+
 11197  001E4E  CFF5 F01F          	movff	tablat,___ftadd@f2
 11198  001E52  0009               	tblrd		*+
 11199  001E54  CFF5 F020          	movff	tablat,___ftadd@f2+1
 11200  001E58  000A               	tblrd		*-
 11201  001E5A  CFF5 F021          	movff	tablat,___ftadd@f2+2
 11202  001E5E  ECC3  F007         	call	___ftadd	;wreg free
 11203  001E62  C01C  F031         	movff	?___ftadd,eval_poly@res
 11204  001E66  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 11205  001E6A  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 11206  001E6E                     i2l3363:
 11207  001E6E  502D               	movf	eval_poly@n,w,c
 11208  001E70  102E               	iorwf	eval_poly@n+1,w,c
 11209  001E72  A4D8               	btfss	status,2,c
 11210  001E74  D7BE               	goto	i2l3361
 11211  001E76  C031  F028         	movff	eval_poly@res,?_eval_poly
 11212  001E7A  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 11213  001E7E  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 11214  001E82  0012               	return		;funcret
 11215  001E84                     __end_of_eval_poly:
 11216                           	opt stack 0
 11217                           pclatu	equ	0xFFB
 11218                           pclath	equ	0xFFA
 11219                           tblptru	equ	0xFF8
 11220                           tblptrh	equ	0xFF7
 11221                           tblptrl	equ	0xFF6
 11222                           tablat	equ	0xFF5
 11223                           prodh	equ	0xFF4
 11224                           prodl	equ	0xFF3
 11225                           intcon	equ	0xFF2
 11226                           intcon2	equ	0xFF1
 11227                           intcon3	equ	0xFF0
 11228                           postinc0	equ	0xFEE
 11229                           fsr0h	equ	0xFEA
 11230                           fsr0l	equ	0xFE9
 11231                           wreg	equ	0xFE8
 11232                           fsr1h	equ	0xFE2
 11233                           fsr1l	equ	0xFE1
 11234                           indf2	equ	0xFDF
 11235                           postinc2	equ	0xFDE
 11236                           postdec2	equ	0xFDD
 11237                           fsr2h	equ	0xFDA
 11238                           fsr2l	equ	0xFD9
 11239                           status	equ	0xFD8
 11240                           
 11241 ;; *************** function i2___wmul *****************
 11242 ;; Defined at:
 11243 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;  multiplier      2    0[COMRAM] unsigned int 
 11246 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;  __wmul          2    4[COMRAM] unsigned int 
 11249 ;; Return value:  Size  Location     Type
 11250 ;;                  2    0[COMRAM] unsigned int 
 11251 ;; Registers used:
 11252 ;;		wreg, status,2, status,0, prodl, prodh
 11253 ;; Tracked objects:
 11254 ;;		On entry : 0/0
 11255 ;;		On exit  : 0/0
 11256 ;;		Unchanged: 0/0
 11257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;Total ram usage:        6 bytes
 11263 ;; Hardware stack levels used:    1
 11264 ;; This function calls:
 11265 ;;		Nothing
 11266 ;; This function is called by:
 11267 ;;		_isr
 11268 ;;		_servo_rotate1
 11269 ;;		_servo_rotate2
 11270 ;;		_eval_poly
 11271 ;;		i2_printf
 11272 ;; This function uses a non-reentrant model
 11273 ;;
 11274                           
 11275                           	psect	text56
 11276  002BC4                     __ptext56:
 11277                           	opt stack 0
 11278  002BC4                     i2___wmul:
 11279                           	opt stack 24
 11280                           
 11281                           ;incstack = 0
 11282  002BC4  5001               	movf	i2___wmul@multiplier,w,c
 11283  002BC6  0203               	mulwf	i2___wmul@multiplicand,c
 11284  002BC8  CFF3 F005          	movff	prodl,i2___wmul@product
 11285  002BCC  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11286  002BD0  5001               	movf	i2___wmul@multiplier,w,c
 11287  002BD2  0204               	mulwf	i2___wmul@multiplicand+1,c
 11288  002BD4  50F3               	movf	prodl,w,c
 11289  002BD6  2606               	addwf	i2___wmul@product+1,f,c
 11290  002BD8  5002               	movf	i2___wmul@multiplier+1,w,c
 11291  002BDA  0203               	mulwf	i2___wmul@multiplicand,c
 11292  002BDC  50F3               	movf	prodl,w,c
 11293  002BDE  2606               	addwf	i2___wmul@product+1,f,c
 11294  002BE0  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11295  002BE4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11296  002BE8  0012               	return	
 11297  002BEA                     __end_ofi2___wmul:
 11298                           	opt stack 0
 11299                           pclatu	equ	0xFFB
 11300                           pclath	equ	0xFFA
 11301                           tblptru	equ	0xFF8
 11302                           tblptrh	equ	0xFF7
 11303                           tblptrl	equ	0xFF6
 11304                           tablat	equ	0xFF5
 11305                           prodh	equ	0xFF4
 11306                           prodl	equ	0xFF3
 11307                           intcon	equ	0xFF2
 11308                           intcon2	equ	0xFF1
 11309                           intcon3	equ	0xFF0
 11310                           postinc0	equ	0xFEE
 11311                           fsr0h	equ	0xFEA
 11312                           fsr0l	equ	0xFE9
 11313                           wreg	equ	0xFE8
 11314                           fsr1h	equ	0xFE2
 11315                           fsr1l	equ	0xFE1
 11316                           indf2	equ	0xFDF
 11317                           postinc2	equ	0xFDE
 11318                           postdec2	equ	0xFDD
 11319                           fsr2h	equ	0xFDA
 11320                           fsr2l	equ	0xFD9
 11321                           status	equ	0xFD8
 11322                           
 11323 ;; *************** function ___ftmul *****************
 11324 ;; Defined at:
 11325 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11326 ;; Parameters:    Size  Location     Type
 11327 ;;  f1              3   12[COMRAM] float 
 11328 ;;  f2              3   15[COMRAM] float 
 11329 ;; Auto vars:     Size  Location     Type
 11330 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 11331 ;;  sign            1   26[COMRAM] unsigned char 
 11332 ;;  cntr            1   25[COMRAM] unsigned char 
 11333 ;;  exp             1   21[COMRAM] unsigned char 
 11334 ;; Return value:  Size  Location     Type
 11335 ;;                  3   12[COMRAM] float 
 11336 ;; Registers used:
 11337 ;;		wreg, status,2, status,0, cstack
 11338 ;; Tracked objects:
 11339 ;;		On entry : 0/0
 11340 ;;		On exit  : 0/0
 11341 ;;		Unchanged: 0/0
 11342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11343 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11344 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11345 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11346 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11347 ;;Total ram usage:       15 bytes
 11348 ;; Hardware stack levels used:    1
 11349 ;; Hardware stack levels required when called:    1
 11350 ;; This function calls:
 11351 ;;		___ftpack
 11352 ;; This function is called by:
 11353 ;;		_dec_to_hex
 11354 ;;		_pow
 11355 ;;		_exp
 11356 ;;		_log
 11357 ;;		_eval_poly
 11358 ;; This function uses a non-reentrant model
 11359 ;;
 11360                           
 11361                           	psect	text57
 11362  001868                     __ptext57:
 11363                           	opt stack 0
 11364  001868                     ___ftmul:
 11365                           	opt stack 20
 11366                           
 11367                           ;incstack = 0
 11368  001868  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 11369  00186C  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11370  00186E  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11371  001870  340E               	rlcf	___ftmul@f1+1,w,c
 11372  001872  3613               	rlcf	??___ftmul& (0+255),f,c
 11373  001874  E301               	bnc	u253_41
 11374  001876  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11375  001878                     u253_41:
 11376  001878  5013               	movf	??___ftmul,w,c
 11377  00187A  6E16               	movwf	___ftmul@exp,c
 11378  00187C  5016               	movf	___ftmul@exp,w,c
 11379  00187E  A4D8               	btfss	status,2,c
 11380  001880  D007               	goto	i2l3111
 11381  001882  0E00               	movlw	0
 11382  001884  6E0D               	movwf	?___ftmul,c
 11383  001886  0E00               	movlw	0
 11384  001888  6E0E               	movwf	?___ftmul+1,c
 11385  00188A  0E00               	movlw	0
 11386  00188C  6E0F               	movwf	?___ftmul+2,c
 11387  00188E  0012               	return	
 11388  001890                     i2l3111:
 11389  001890  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 11390  001894  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11391  001896  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11392  001898  3411               	rlcf	___ftmul@f2+1,w,c
 11393  00189A  3613               	rlcf	??___ftmul& (0+255),f,c
 11394  00189C  E301               	bnc	u255_41
 11395  00189E  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11396  0018A0                     u255_41:
 11397  0018A0  5013               	movf	??___ftmul,w,c
 11398  0018A2  6E1B               	movwf	___ftmul@sign,c
 11399  0018A4  501B               	movf	___ftmul@sign,w,c
 11400  0018A6  A4D8               	btfss	status,2,c
 11401  0018A8  D007               	goto	i2l3117
 11402  0018AA  0E00               	movlw	0
 11403  0018AC  6E0D               	movwf	?___ftmul,c
 11404  0018AE  0E00               	movlw	0
 11405  0018B0  6E0E               	movwf	?___ftmul+1,c
 11406  0018B2  0E00               	movlw	0
 11407  0018B4  6E0F               	movwf	?___ftmul+2,c
 11408  0018B6  0012               	return	
 11409  0018B8                     i2l3117:
 11410  0018B8  501B               	movf	___ftmul@sign,w,c
 11411  0018BA  0F7B               	addlw	123
 11412  0018BC  2616               	addwf	___ftmul@exp,f,c
 11413  0018BE  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 11414  0018C2  5012               	movf	___ftmul@f2+2,w,c
 11415  0018C4  1A1B               	xorwf	___ftmul@sign,f,c
 11416  0018C6  0E80               	movlw	128
 11417  0018C8  161B               	andwf	___ftmul@sign,f,c
 11418  0018CA  8E0E               	bsf	___ftmul@f1+1,7,c
 11419  0018CC  8E11               	bsf	___ftmul@f2+1,7,c
 11420  0018CE  0EFF               	movlw	255
 11421  0018D0  1610               	andwf	___ftmul@f2,f,c
 11422  0018D2  0EFF               	movlw	255
 11423  0018D4  1611               	andwf	___ftmul@f2+1,f,c
 11424  0018D6  0E00               	movlw	0
 11425  0018D8  1612               	andwf	___ftmul@f2+2,f,c
 11426  0018DA  0E00               	movlw	0
 11427  0018DC  6E17               	movwf	___ftmul@f3_as_product,c
 11428  0018DE  0E00               	movlw	0
 11429  0018E0  6E18               	movwf	___ftmul@f3_as_product+1,c
 11430  0018E2  0E00               	movlw	0
 11431  0018E4  6E19               	movwf	___ftmul@f3_as_product+2,c
 11432  0018E6  0E07               	movlw	7
 11433  0018E8  6E1A               	movwf	___ftmul@cntr,c
 11434  0018EA                     i2l3131:
 11435  0018EA  A00D               	btfss	___ftmul@f1,0,c
 11436  0018EC  D006               	goto	i2l3135
 11437  0018EE  5010               	movf	___ftmul@f2,w,c
 11438  0018F0  2617               	addwf	___ftmul@f3_as_product,f,c
 11439  0018F2  5011               	movf	___ftmul@f2+1,w,c
 11440  0018F4  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11441  0018F6  5012               	movf	___ftmul@f2+2,w,c
 11442  0018F8  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11443  0018FA                     i2l3135:
 11444  0018FA  90D8               	bcf	status,0,c
 11445  0018FC  320F               	rrcf	___ftmul@f1+2,f,c
 11446  0018FE  320E               	rrcf	___ftmul@f1+1,f,c
 11447  001900  320D               	rrcf	___ftmul@f1,f,c
 11448  001902  90D8               	bcf	status,0,c
 11449  001904  3610               	rlcf	___ftmul@f2,f,c
 11450  001906  3611               	rlcf	___ftmul@f2+1,f,c
 11451  001908  3612               	rlcf	___ftmul@f2+2,f,c
 11452  00190A  2E1A               	decfsz	___ftmul@cntr,f,c
 11453  00190C  D7EE               	goto	i2l3131
 11454  00190E  0E09               	movlw	9
 11455  001910  6E1A               	movwf	___ftmul@cntr,c
 11456  001912                     i2l3141:
 11457  001912  A00D               	btfss	___ftmul@f1,0,c
 11458  001914  D006               	goto	i2l3145
 11459  001916  5010               	movf	___ftmul@f2,w,c
 11460  001918  2617               	addwf	___ftmul@f3_as_product,f,c
 11461  00191A  5011               	movf	___ftmul@f2+1,w,c
 11462  00191C  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11463  00191E  5012               	movf	___ftmul@f2+2,w,c
 11464  001920  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11465  001922                     i2l3145:
 11466  001922  90D8               	bcf	status,0,c
 11467  001924  320F               	rrcf	___ftmul@f1+2,f,c
 11468  001926  320E               	rrcf	___ftmul@f1+1,f,c
 11469  001928  320D               	rrcf	___ftmul@f1,f,c
 11470  00192A  90D8               	bcf	status,0,c
 11471  00192C  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 11472  00192E  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 11473  001930  3217               	rrcf	___ftmul@f3_as_product,f,c
 11474  001932  2E1A               	decfsz	___ftmul@cntr,f,c
 11475  001934  D7EE               	goto	i2l3141
 11476  001936  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 11477  00193A  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11478  00193E  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11479  001942  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 11480  001946  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 11481  00194A  EC17  F011         	call	___ftpack	;wreg free
 11482  00194E  C001  F00D         	movff	?___ftpack,?___ftmul
 11483  001952  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 11484  001956  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 11485  00195A  0012               	return	
 11486  00195C                     __end_of___ftmul:
 11487                           	opt stack 0
 11488                           pclatu	equ	0xFFB
 11489                           pclath	equ	0xFFA
 11490                           tblptru	equ	0xFF8
 11491                           tblptrh	equ	0xFF7
 11492                           tblptrl	equ	0xFF6
 11493                           tablat	equ	0xFF5
 11494                           prodh	equ	0xFF4
 11495                           prodl	equ	0xFF3
 11496                           intcon	equ	0xFF2
 11497                           intcon2	equ	0xFF1
 11498                           intcon3	equ	0xFF0
 11499                           postinc0	equ	0xFEE
 11500                           fsr0h	equ	0xFEA
 11501                           fsr0l	equ	0xFE9
 11502                           wreg	equ	0xFE8
 11503                           fsr1h	equ	0xFE2
 11504                           fsr1l	equ	0xFE1
 11505                           indf2	equ	0xFDF
 11506                           postinc2	equ	0xFDE
 11507                           postdec2	equ	0xFDD
 11508                           fsr2h	equ	0xFDA
 11509                           fsr2l	equ	0xFD9
 11510                           status	equ	0xFD8
 11511                           
 11512 ;; *************** function ___ftsub *****************
 11513 ;; Defined at:
 11514 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;  f1              3   39[COMRAM] float 
 11517 ;;  f2              3   42[COMRAM] float 
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;		None
 11520 ;; Return value:  Size  Location     Type
 11521 ;;                  3   39[COMRAM] float 
 11522 ;; Registers used:
 11523 ;;		wreg, status,2, status,0, cstack
 11524 ;; Tracked objects:
 11525 ;;		On entry : 0/0
 11526 ;;		On exit  : 0/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11529 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11533 ;;Total ram usage:        6 bytes
 11534 ;; Hardware stack levels used:    1
 11535 ;; Hardware stack levels required when called:    2
 11536 ;; This function calls:
 11537 ;;		___ftadd
 11538 ;; This function is called by:
 11539 ;;		_exp
 11540 ;; This function uses a non-reentrant model
 11541 ;;
 11542                           
 11543                           	psect	text58
 11544  0029BA                     __ptext58:
 11545                           	opt stack 0
 11546  0029BA                     ___ftsub:
 11547                           	opt stack 20
 11548                           
 11549                           ;incstack = 0
 11550  0029BA  502B               	movf	___ftsub@f2,w,c
 11551  0029BC  102C               	iorwf	___ftsub@f2+1,w,c
 11552  0029BE  102D               	iorwf	___ftsub@f2+2,w,c
 11553  0029C0  B4D8               	btfsc	status,2,c
 11554  0029C2  D006               	goto	i2l3315
 11555  0029C4  0E00               	movlw	0
 11556  0029C6  1A2B               	xorwf	___ftsub@f2,f,c
 11557  0029C8  0E00               	movlw	0
 11558  0029CA  1A2C               	xorwf	___ftsub@f2+1,f,c
 11559  0029CC  0E80               	movlw	128
 11560  0029CE  1A2D               	xorwf	___ftsub@f2+2,f,c
 11561  0029D0                     i2l3315:
 11562  0029D0  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 11563  0029D4  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 11564  0029D8  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 11565  0029DC  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 11566  0029E0  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 11567  0029E4  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 11568  0029E8  ECC3  F007         	call	___ftadd	;wreg free
 11569  0029EC  C01C  F028         	movff	?___ftadd,?___ftsub
 11570  0029F0  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 11571  0029F4  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 11572  0029F8  0012               	return	
 11573  0029FA                     __end_of___ftsub:
 11574                           	opt stack 0
 11575                           pclatu	equ	0xFFB
 11576                           pclath	equ	0xFFA
 11577                           tblptru	equ	0xFF8
 11578                           tblptrh	equ	0xFF7
 11579                           tblptrl	equ	0xFF6
 11580                           tablat	equ	0xFF5
 11581                           prodh	equ	0xFF4
 11582                           prodl	equ	0xFF3
 11583                           intcon	equ	0xFF2
 11584                           intcon2	equ	0xFF1
 11585                           intcon3	equ	0xFF0
 11586                           postinc0	equ	0xFEE
 11587                           fsr0h	equ	0xFEA
 11588                           fsr0l	equ	0xFE9
 11589                           wreg	equ	0xFE8
 11590                           fsr1h	equ	0xFE2
 11591                           fsr1l	equ	0xFE1
 11592                           indf2	equ	0xFDF
 11593                           postinc2	equ	0xFDE
 11594                           postdec2	equ	0xFDD
 11595                           fsr2h	equ	0xFDA
 11596                           fsr2l	equ	0xFD9
 11597                           status	equ	0xFD8
 11598                           
 11599 ;; *************** function ___ftadd *****************
 11600 ;; Defined at:
 11601 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11602 ;; Parameters:    Size  Location     Type
 11603 ;;  f1              3   27[COMRAM] float 
 11604 ;;  f2              3   30[COMRAM] float 
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;  exp1            1   38[COMRAM] unsigned char 
 11607 ;;  exp2            1   37[COMRAM] unsigned char 
 11608 ;;  sign            1   36[COMRAM] unsigned char 
 11609 ;; Return value:  Size  Location     Type
 11610 ;;                  3   27[COMRAM] float 
 11611 ;; Registers used:
 11612 ;;		wreg, status,2, status,0, cstack
 11613 ;; Tracked objects:
 11614 ;;		On entry : 0/0
 11615 ;;		On exit  : 0/0
 11616 ;;		Unchanged: 0/0
 11617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11618 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11619 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11620 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11621 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11622 ;;Total ram usage:       12 bytes
 11623 ;; Hardware stack levels used:    1
 11624 ;; Hardware stack levels required when called:    1
 11625 ;; This function calls:
 11626 ;;		___ftpack
 11627 ;; This function is called by:
 11628 ;;		_dec_to_hex
 11629 ;;		___ftsub
 11630 ;;		_floor
 11631 ;;		_log
 11632 ;;		_eval_poly
 11633 ;; This function uses a non-reentrant model
 11634 ;;
 11635                           
 11636                           	psect	text59
 11637  000F86                     __ptext59:
 11638                           	opt stack 0
 11639  000F86                     ___ftadd:
 11640                           	opt stack 20
 11641                           
 11642                           ;incstack = 0
 11643  000F86  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 11644  000F8A  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11645  000F8C  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11646  000F8E  341D               	rlcf	___ftadd@f1+1,w,c
 11647  000F90  3622               	rlcf	??___ftadd& (0+255),f,c
 11648  000F92  E301               	bnc	u232_41
 11649  000F94  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11650  000F96                     u232_41:
 11651  000F96  5022               	movf	??___ftadd,w,c
 11652  000F98  6E27               	movwf	___ftadd@exp1,c
 11653  000F9A  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 11654  000F9E  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11655  000FA0  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11656  000FA2  3420               	rlcf	___ftadd@f2+1,w,c
 11657  000FA4  3622               	rlcf	??___ftadd& (0+255),f,c
 11658  000FA6  E301               	bnc	u233_41
 11659  000FA8  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11660  000FAA                     u233_41:
 11661  000FAA  5022               	movf	??___ftadd,w,c
 11662  000FAC  6E26               	movwf	___ftadd@exp2,c
 11663  000FAE  5027               	movf	___ftadd@exp1,w,c
 11664  000FB0  B4D8               	btfsc	status,2,c
 11665  000FB2  D00B               	goto	i2l729
 11666  000FB4  5026               	movf	___ftadd@exp2,w,c
 11667  000FB6  5C27               	subwf	___ftadd@exp1,w,c
 11668  000FB8  B0D8               	btfsc	status,0,c
 11669  000FBA  D00E               	goto	i2l3043
 11670  000FBC  5027               	movf	___ftadd@exp1,w,c
 11671  000FBE  0800               	sublw	0
 11672  000FC0  2426               	addwf	___ftadd@exp2,w,c
 11673  000FC2  6E22               	movwf	??___ftadd& (0+255),c
 11674  000FC4  0E18               	movlw	24
 11675  000FC6  6422               	cpfsgt	??___ftadd,c
 11676  000FC8  D007               	goto	i2l3043
 11677  000FCA                     i2l729:
 11678  000FCA  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 11679  000FCE  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 11680  000FD2  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 11681  000FD6  0012               	return	
 11682  000FD8                     i2l3043:
 11683  000FD8  5026               	movf	___ftadd@exp2,w,c
 11684  000FDA  B4D8               	btfsc	status,2,c
 11685  000FDC  D00B               	goto	i2l733
 11686  000FDE  5027               	movf	___ftadd@exp1,w,c
 11687  000FE0  5C26               	subwf	___ftadd@exp2,w,c
 11688  000FE2  B0D8               	btfsc	status,0,c
 11689  000FE4  D00E               	goto	i2l3049
 11690  000FE6  5026               	movf	___ftadd@exp2,w,c
 11691  000FE8  0800               	sublw	0
 11692  000FEA  2427               	addwf	___ftadd@exp1,w,c
 11693  000FEC  6E22               	movwf	??___ftadd& (0+255),c
 11694  000FEE  0E18               	movlw	24
 11695  000FF0  6422               	cpfsgt	??___ftadd,c
 11696  000FF2  D007               	goto	i2l3049
 11697  000FF4                     i2l733:
 11698  000FF4  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 11699  000FF8  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 11700  000FFC  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 11701  001000  0012               	return	
 11702  001002                     i2l3049:
 11703  001002  0E06               	movlw	6
 11704  001004  6E25               	movwf	___ftadd@sign,c
 11705  001006  BE1E               	btfsc	___ftadd@f1+2,7,c
 11706  001008  8E25               	bsf	___ftadd@sign,7,c
 11707  00100A  BE21               	btfsc	___ftadd@f2+2,7,c
 11708  00100C  8C25               	bsf	___ftadd@sign,6,c
 11709  00100E  8E1D               	bsf	___ftadd@f1+1,7,c
 11710  001010  0EFF               	movlw	255
 11711  001012  161C               	andwf	___ftadd@f1,f,c
 11712  001014  0EFF               	movlw	255
 11713  001016  161D               	andwf	___ftadd@f1+1,f,c
 11714  001018  0E00               	movlw	0
 11715  00101A  161E               	andwf	___ftadd@f1+2,f,c
 11716  00101C  8E20               	bsf	___ftadd@f2+1,7,c
 11717  00101E  0EFF               	movlw	255
 11718  001020  161F               	andwf	___ftadd@f2,f,c
 11719  001022  0EFF               	movlw	255
 11720  001024  1620               	andwf	___ftadd@f2+1,f,c
 11721  001026  0E00               	movlw	0
 11722  001028  1621               	andwf	___ftadd@f2+2,f,c
 11723  00102A  5026               	movf	___ftadd@exp2,w,c
 11724  00102C  5C27               	subwf	___ftadd@exp1,w,c
 11725  00102E  B0D8               	btfsc	status,0,c
 11726  001030  D01B               	goto	i2l3075
 11727  001032                     i2l3065:
 11728  001032  90D8               	bcf	status,0,c
 11729  001034  361F               	rlcf	___ftadd@f2,f,c
 11730  001036  3620               	rlcf	___ftadd@f2+1,f,c
 11731  001038  3621               	rlcf	___ftadd@f2+2,f,c
 11732  00103A  0626               	decf	___ftadd@exp2,f,c
 11733  00103C  5027               	movf	___ftadd@exp1,w,c
 11734  00103E  1826               	xorwf	___ftadd@exp2,w,c
 11735  001040  B4D8               	btfsc	status,2,c
 11736  001042  D00D               	goto	i2l3073
 11737  001044  0625               	decf	___ftadd@sign,f,c
 11738  001046  C025  F022         	movff	___ftadd@sign,??___ftadd
 11739  00104A  0E07               	movlw	7
 11740  00104C  1622               	andwf	??___ftadd,f,c
 11741  00104E  B4D8               	btfsc	status,2,c
 11742  001050  D006               	goto	i2l3073
 11743  001052  D7EF               	goto	i2l3065
 11744  001054                     i2l3071:
 11745  001054  90D8               	bcf	status,0,c
 11746  001056  321E               	rrcf	___ftadd@f1+2,f,c
 11747  001058  321D               	rrcf	___ftadd@f1+1,f,c
 11748  00105A  321C               	rrcf	___ftadd@f1,f,c
 11749  00105C  2A27               	incf	___ftadd@exp1,f,c
 11750  00105E                     i2l3073:
 11751  00105E  5026               	movf	___ftadd@exp2,w,c
 11752  001060  1827               	xorwf	___ftadd@exp1,w,c
 11753  001062  B4D8               	btfsc	status,2,c
 11754  001064  D01F               	goto	i2l744
 11755  001066  D7F6               	goto	i2l3071
 11756  001068                     i2l3075:
 11757  001068  5027               	movf	___ftadd@exp1,w,c
 11758  00106A  5C26               	subwf	___ftadd@exp2,w,c
 11759  00106C  B0D8               	btfsc	status,0,c
 11760  00106E  D01A               	goto	i2l744
 11761  001070                     i2l3077:
 11762  001070  90D8               	bcf	status,0,c
 11763  001072  361C               	rlcf	___ftadd@f1,f,c
 11764  001074  361D               	rlcf	___ftadd@f1+1,f,c
 11765  001076  361E               	rlcf	___ftadd@f1+2,f,c
 11766  001078  0627               	decf	___ftadd@exp1,f,c
 11767  00107A  5027               	movf	___ftadd@exp1,w,c
 11768  00107C  1826               	xorwf	___ftadd@exp2,w,c
 11769  00107E  B4D8               	btfsc	status,2,c
 11770  001080  D00D               	goto	i2l3085
 11771  001082  0625               	decf	___ftadd@sign,f,c
 11772  001084  C025  F022         	movff	___ftadd@sign,??___ftadd
 11773  001088  0E07               	movlw	7
 11774  00108A  1622               	andwf	??___ftadd,f,c
 11775  00108C  B4D8               	btfsc	status,2,c
 11776  00108E  D006               	goto	i2l3085
 11777  001090  D7EF               	goto	i2l3077
 11778  001092                     i2l3083:
 11779  001092  90D8               	bcf	status,0,c
 11780  001094  3221               	rrcf	___ftadd@f2+2,f,c
 11781  001096  3220               	rrcf	___ftadd@f2+1,f,c
 11782  001098  321F               	rrcf	___ftadd@f2,f,c
 11783  00109A  2A26               	incf	___ftadd@exp2,f,c
 11784  00109C                     i2l3085:
 11785  00109C  5026               	movf	___ftadd@exp2,w,c
 11786  00109E  1827               	xorwf	___ftadd@exp1,w,c
 11787  0010A0  A4D8               	btfss	status,2,c
 11788  0010A2  D7F7               	goto	i2l3083
 11789  0010A4                     i2l744:
 11790  0010A4  AE25               	btfss	___ftadd@sign,7,c
 11791  0010A6  D00C               	goto	i2l753
 11792  0010A8  0EFF               	movlw	255
 11793  0010AA  1A1C               	xorwf	___ftadd@f1,f,c
 11794  0010AC  0EFF               	movlw	255
 11795  0010AE  1A1D               	xorwf	___ftadd@f1+1,f,c
 11796  0010B0  0EFF               	movlw	255
 11797  0010B2  1A1E               	xorwf	___ftadd@f1+2,f,c
 11798  0010B4  0E01               	movlw	1
 11799  0010B6  261C               	addwf	___ftadd@f1,f,c
 11800  0010B8  0E00               	movlw	0
 11801  0010BA  221D               	addwfc	___ftadd@f1+1,f,c
 11802  0010BC  0E00               	movlw	0
 11803  0010BE  221E               	addwfc	___ftadd@f1+2,f,c
 11804  0010C0                     i2l753:
 11805  0010C0  AC25               	btfss	___ftadd@sign,6,c
 11806  0010C2  D00C               	goto	i2l3091
 11807  0010C4  0EFF               	movlw	255
 11808  0010C6  1A1F               	xorwf	___ftadd@f2,f,c
 11809  0010C8  0EFF               	movlw	255
 11810  0010CA  1A20               	xorwf	___ftadd@f2+1,f,c
 11811  0010CC  0EFF               	movlw	255
 11812  0010CE  1A21               	xorwf	___ftadd@f2+2,f,c
 11813  0010D0  0E01               	movlw	1
 11814  0010D2  261F               	addwf	___ftadd@f2,f,c
 11815  0010D4  0E00               	movlw	0
 11816  0010D6  2220               	addwfc	___ftadd@f2+1,f,c
 11817  0010D8  0E00               	movlw	0
 11818  0010DA  2221               	addwfc	___ftadd@f2+2,f,c
 11819  0010DC                     i2l3091:
 11820  0010DC  0E00               	movlw	0
 11821  0010DE  6E25               	movwf	___ftadd@sign,c
 11822  0010E0  501C               	movf	___ftadd@f1,w,c
 11823  0010E2  261F               	addwf	___ftadd@f2,f,c
 11824  0010E4  501D               	movf	___ftadd@f1+1,w,c
 11825  0010E6  2220               	addwfc	___ftadd@f2+1,f,c
 11826  0010E8  501E               	movf	___ftadd@f1+2,w,c
 11827  0010EA  2221               	addwfc	___ftadd@f2+2,f,c
 11828  0010EC  AE21               	btfss	___ftadd@f2+2,7,c
 11829  0010EE  D00E               	goto	i2l3101
 11830  0010F0  0EFF               	movlw	255
 11831  0010F2  1A1F               	xorwf	___ftadd@f2,f,c
 11832  0010F4  0EFF               	movlw	255
 11833  0010F6  1A20               	xorwf	___ftadd@f2+1,f,c
 11834  0010F8  0EFF               	movlw	255
 11835  0010FA  1A21               	xorwf	___ftadd@f2+2,f,c
 11836  0010FC  0E01               	movlw	1
 11837  0010FE  261F               	addwf	___ftadd@f2,f,c
 11838  001100  0E00               	movlw	0
 11839  001102  2220               	addwfc	___ftadd@f2+1,f,c
 11840  001104  0E00               	movlw	0
 11841  001106  2221               	addwfc	___ftadd@f2+2,f,c
 11842  001108  0E01               	movlw	1
 11843  00110A  6E25               	movwf	___ftadd@sign,c
 11844  00110C                     i2l3101:
 11845  00110C  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 11846  001110  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11847  001114  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11848  001118  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 11849  00111C  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 11850  001120  EC17  F011         	call	___ftpack	;wreg free
 11851  001124  C001  F01C         	movff	?___ftpack,?___ftadd
 11852  001128  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 11853  00112C  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 11854  001130  0012               	return	
 11855  001132                     __end_of___ftadd:
 11856                           	opt stack 0
 11857                           pclatu	equ	0xFFB
 11858                           pclath	equ	0xFFA
 11859                           tblptru	equ	0xFF8
 11860                           tblptrh	equ	0xFF7
 11861                           tblptrl	equ	0xFF6
 11862                           tablat	equ	0xFF5
 11863                           prodh	equ	0xFF4
 11864                           prodl	equ	0xFF3
 11865                           intcon	equ	0xFF2
 11866                           intcon2	equ	0xFF1
 11867                           intcon3	equ	0xFF0
 11868                           postinc0	equ	0xFEE
 11869                           fsr0h	equ	0xFEA
 11870                           fsr0l	equ	0xFE9
 11871                           wreg	equ	0xFE8
 11872                           fsr1h	equ	0xFE2
 11873                           fsr1l	equ	0xFE1
 11874                           indf2	equ	0xFDF
 11875                           postinc2	equ	0xFDE
 11876                           postdec2	equ	0xFDD
 11877                           fsr2h	equ	0xFDA
 11878                           fsr2l	equ	0xFD9
 11879                           status	equ	0xFD8
 11880                           
 11881 ;; *************** function ___ftneg *****************
 11882 ;; Defined at:
 11883 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 11884 ;; Parameters:    Size  Location     Type
 11885 ;;  f1              3    0[COMRAM] float 
 11886 ;; Auto vars:     Size  Location     Type
 11887 ;;		None
 11888 ;; Return value:  Size  Location     Type
 11889 ;;                  3    0[COMRAM] float 
 11890 ;; Registers used:
 11891 ;;		wreg, status,2, status,0
 11892 ;; Tracked objects:
 11893 ;;		On entry : 0/0
 11894 ;;		On exit  : 0/0
 11895 ;;		Unchanged: 0/0
 11896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11897 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11900 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11901 ;;Total ram usage:        3 bytes
 11902 ;; Hardware stack levels used:    1
 11903 ;; This function calls:
 11904 ;;		Nothing
 11905 ;; This function is called by:
 11906 ;;		_pow
 11907 ;;		_exp
 11908 ;; This function uses a non-reentrant model
 11909 ;;
 11910                           
 11911                           	psect	text60
 11912  002BEA                     __ptext60:
 11913                           	opt stack 0
 11914  002BEA                     ___ftneg:
 11915                           	opt stack 22
 11916                           
 11917                           ;incstack = 0
 11918  002BEA  5001               	movf	___ftneg@f1,w,c
 11919  002BEC  1002               	iorwf	___ftneg@f1+1,w,c
 11920  002BEE  1003               	iorwf	___ftneg@f1+2,w,c
 11921  002BF0  B4D8               	btfsc	status,2,c
 11922  002BF2  D006               	goto	i2l786
 11923  002BF4  0E00               	movlw	0
 11924  002BF6  1A01               	xorwf	___ftneg@f1,f,c
 11925  002BF8  0E00               	movlw	0
 11926  002BFA  1A02               	xorwf	___ftneg@f1+1,f,c
 11927  002BFC  0E80               	movlw	128
 11928  002BFE  1A03               	xorwf	___ftneg@f1+2,f,c
 11929  002C00                     i2l786:
 11930  002C00  C001  F001         	movff	___ftneg@f1,?___ftneg
 11931  002C04  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 11932  002C08  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 11933  002C0C  0012               	return		;funcret
 11934  002C0E                     __end_of___ftneg:
 11935                           	opt stack 0
 11936                           pclatu	equ	0xFFB
 11937                           pclath	equ	0xFFA
 11938                           tblptru	equ	0xFF8
 11939                           tblptrh	equ	0xFF7
 11940                           tblptrl	equ	0xFF6
 11941                           tablat	equ	0xFF5
 11942                           prodh	equ	0xFF4
 11943                           prodl	equ	0xFF3
 11944                           intcon	equ	0xFF2
 11945                           intcon2	equ	0xFF1
 11946                           intcon3	equ	0xFF0
 11947                           postinc0	equ	0xFEE
 11948                           fsr0h	equ	0xFEA
 11949                           fsr0l	equ	0xFE9
 11950                           wreg	equ	0xFE8
 11951                           fsr1h	equ	0xFE2
 11952                           fsr1l	equ	0xFE1
 11953                           indf2	equ	0xFDF
 11954                           postinc2	equ	0xFDE
 11955                           postdec2	equ	0xFDD
 11956                           fsr2h	equ	0xFDA
 11957                           fsr2l	equ	0xFD9
 11958                           status	equ	0xFD8
 11959                           
 11960 ;; *************** function ___ftdiv *****************
 11961 ;; Defined at:
 11962 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11963 ;; Parameters:    Size  Location     Type
 11964 ;;  f1              3    8[COMRAM] float 
 11965 ;;  f2              3   11[COMRAM] float 
 11966 ;; Auto vars:     Size  Location     Type
 11967 ;;  f3              3   18[COMRAM] float 
 11968 ;;  sign            1   22[COMRAM] unsigned char 
 11969 ;;  exp             1   21[COMRAM] unsigned char 
 11970 ;;  cntr            1   17[COMRAM] unsigned char 
 11971 ;; Return value:  Size  Location     Type
 11972 ;;                  3    8[COMRAM] float 
 11973 ;; Registers used:
 11974 ;;		wreg, status,2, status,0, cstack
 11975 ;; Tracked objects:
 11976 ;;		On entry : 0/0
 11977 ;;		On exit  : 0/0
 11978 ;;		Unchanged: 0/0
 11979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11980 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11981 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11982 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11983 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11984 ;;Total ram usage:       15 bytes
 11985 ;; Hardware stack levels used:    1
 11986 ;; Hardware stack levels required when called:    1
 11987 ;; This function calls:
 11988 ;;		___ftpack
 11989 ;; This function is called by:
 11990 ;;		_exp
 11991 ;; This function uses a non-reentrant model
 11992 ;;
 11993                           
 11994                           	psect	text61
 11995  001A42                     __ptext61:
 11996                           	opt stack 0
 11997  001A42                     ___ftdiv:
 11998                           	opt stack 21
 11999                           
 12000                           ;incstack = 0
 12001  001A42  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 12002  001A46  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 12003  001A48  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 12004  001A4A  340A               	rlcf	___ftdiv@f1+1,w,c
 12005  001A4C  360F               	rlcf	??___ftdiv& (0+255),f,c
 12006  001A4E  E301               	bnc	u274_41
 12007  001A50  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 12008  001A52                     u274_41:
 12009  001A52  500F               	movf	??___ftdiv,w,c
 12010  001A54  6E16               	movwf	___ftdiv@exp,c
 12011  001A56  5016               	movf	___ftdiv@exp,w,c
 12012  001A58  A4D8               	btfss	status,2,c
 12013  001A5A  D007               	goto	i2l3271
 12014  001A5C  0E00               	movlw	0
 12015  001A5E  6E09               	movwf	?___ftdiv,c
 12016  001A60  0E00               	movlw	0
 12017  001A62  6E0A               	movwf	?___ftdiv+1,c
 12018  001A64  0E00               	movlw	0
 12019  001A66  6E0B               	movwf	?___ftdiv+2,c
 12020  001A68  0012               	return	
 12021  001A6A                     i2l3271:
 12022  001A6A  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 12023  001A6E  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 12024  001A70  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 12025  001A72  340D               	rlcf	___ftdiv@f2+1,w,c
 12026  001A74  360F               	rlcf	??___ftdiv& (0+255),f,c
 12027  001A76  E301               	bnc	u276_41
 12028  001A78  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 12029  001A7A                     u276_41:
 12030  001A7A  500F               	movf	??___ftdiv,w,c
 12031  001A7C  6E17               	movwf	___ftdiv@sign,c
 12032  001A7E  5017               	movf	___ftdiv@sign,w,c
 12033  001A80  A4D8               	btfss	status,2,c
 12034  001A82  D007               	goto	i2l3277
 12035  001A84  0E00               	movlw	0
 12036  001A86  6E09               	movwf	?___ftdiv,c
 12037  001A88  0E00               	movlw	0
 12038  001A8A  6E0A               	movwf	?___ftdiv+1,c
 12039  001A8C  0E00               	movlw	0
 12040  001A8E  6E0B               	movwf	?___ftdiv+2,c
 12041  001A90  0012               	return	
 12042  001A92                     i2l3277:
 12043  001A92  0E00               	movlw	0
 12044  001A94  6E13               	movwf	___ftdiv@f3,c
 12045  001A96  0E00               	movlw	0
 12046  001A98  6E14               	movwf	___ftdiv@f3+1,c
 12047  001A9A  0E00               	movlw	0
 12048  001A9C  6E15               	movwf	___ftdiv@f3+2,c
 12049  001A9E  5017               	movf	___ftdiv@sign,w,c
 12050  001AA0  0F89               	addlw	137
 12051  001AA2  5E16               	subwf	___ftdiv@exp,f,c
 12052  001AA4  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 12053  001AA8  500E               	movf	___ftdiv@f2+2,w,c
 12054  001AAA  1A17               	xorwf	___ftdiv@sign,f,c
 12055  001AAC  0E80               	movlw	128
 12056  001AAE  1617               	andwf	___ftdiv@sign,f,c
 12057  001AB0  8E0A               	bsf	___ftdiv@f1+1,7,c
 12058  001AB2  0EFF               	movlw	255
 12059  001AB4  1609               	andwf	___ftdiv@f1,f,c
 12060  001AB6  0EFF               	movlw	255
 12061  001AB8  160A               	andwf	___ftdiv@f1+1,f,c
 12062  001ABA  0E00               	movlw	0
 12063  001ABC  160B               	andwf	___ftdiv@f1+2,f,c
 12064  001ABE  8E0D               	bsf	___ftdiv@f2+1,7,c
 12065  001AC0  0EFF               	movlw	255
 12066  001AC2  160C               	andwf	___ftdiv@f2,f,c
 12067  001AC4  0EFF               	movlw	255
 12068  001AC6  160D               	andwf	___ftdiv@f2+1,f,c
 12069  001AC8  0E00               	movlw	0
 12070  001ACA  160E               	andwf	___ftdiv@f2+2,f,c
 12071  001ACC  0E18               	movlw	24
 12072  001ACE  6E12               	movwf	___ftdiv@cntr,c
 12073  001AD0                     i2l3297:
 12074  001AD0  90D8               	bcf	status,0,c
 12075  001AD2  3613               	rlcf	___ftdiv@f3,f,c
 12076  001AD4  3614               	rlcf	___ftdiv@f3+1,f,c
 12077  001AD6  3615               	rlcf	___ftdiv@f3+2,f,c
 12078  001AD8  500C               	movf	___ftdiv@f2,w,c
 12079  001ADA  5C09               	subwf	___ftdiv@f1,w,c
 12080  001ADC  500D               	movf	___ftdiv@f2+1,w,c
 12081  001ADE  580A               	subwfb	___ftdiv@f1+1,w,c
 12082  001AE0  500E               	movf	___ftdiv@f2+2,w,c
 12083  001AE2  580B               	subwfb	___ftdiv@f1+2,w,c
 12084  001AE4  A0D8               	btfss	status,0,c
 12085  001AE6  D007               	goto	i2l764
 12086  001AE8  500C               	movf	___ftdiv@f2,w,c
 12087  001AEA  5E09               	subwf	___ftdiv@f1,f,c
 12088  001AEC  500D               	movf	___ftdiv@f2+1,w,c
 12089  001AEE  5A0A               	subwfb	___ftdiv@f1+1,f,c
 12090  001AF0  500E               	movf	___ftdiv@f2+2,w,c
 12091  001AF2  5A0B               	subwfb	___ftdiv@f1+2,f,c
 12092  001AF4  8013               	bsf	___ftdiv@f3,0,c
 12093  001AF6                     i2l764:
 12094  001AF6  90D8               	bcf	status,0,c
 12095  001AF8  3609               	rlcf	___ftdiv@f1,f,c
 12096  001AFA  360A               	rlcf	___ftdiv@f1+1,f,c
 12097  001AFC  360B               	rlcf	___ftdiv@f1+2,f,c
 12098  001AFE  2E12               	decfsz	___ftdiv@cntr,f,c
 12099  001B00  D7E7               	goto	i2l3297
 12100  001B02  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 12101  001B06  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12102  001B0A  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12103  001B0E  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 12104  001B12  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 12105  001B16  EC17  F011         	call	___ftpack	;wreg free
 12106  001B1A  C001  F009         	movff	?___ftpack,?___ftdiv
 12107  001B1E  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 12108  001B22  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 12109  001B26  0012               	return	
 12110  001B28                     __end_of___ftdiv:
 12111                           	opt stack 0
 12112                           pclatu	equ	0xFFB
 12113                           pclath	equ	0xFFA
 12114                           tblptru	equ	0xFF8
 12115                           tblptrh	equ	0xFF7
 12116                           tblptrl	equ	0xFF6
 12117                           tablat	equ	0xFF5
 12118                           prodh	equ	0xFF4
 12119                           prodl	equ	0xFF3
 12120                           intcon	equ	0xFF2
 12121                           intcon2	equ	0xFF1
 12122                           intcon3	equ	0xFF0
 12123                           postinc0	equ	0xFEE
 12124                           fsr0h	equ	0xFEA
 12125                           fsr0l	equ	0xFE9
 12126                           wreg	equ	0xFE8
 12127                           fsr1h	equ	0xFE2
 12128                           fsr1l	equ	0xFE1
 12129                           indf2	equ	0xFDF
 12130                           postinc2	equ	0xFDE
 12131                           postdec2	equ	0xFDD
 12132                           fsr2h	equ	0xFDA
 12133                           fsr2l	equ	0xFD9
 12134                           status	equ	0xFD8
 12135                           
 12136 ;; *************** function ___awtoft *****************
 12137 ;; Defined at:
 12138 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12139 ;; Parameters:    Size  Location     Type
 12140 ;;  c               2    8[COMRAM] int 
 12141 ;; Auto vars:     Size  Location     Type
 12142 ;;  sign            1   11[COMRAM] unsigned char 
 12143 ;; Return value:  Size  Location     Type
 12144 ;;                  3    8[COMRAM] float 
 12145 ;; Registers used:
 12146 ;;		wreg, status,2, status,0, cstack
 12147 ;; Tracked objects:
 12148 ;;		On entry : 0/0
 12149 ;;		On exit  : 0/0
 12150 ;;		Unchanged: 0/0
 12151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12152 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12153 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12155 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12156 ;;Total ram usage:        4 bytes
 12157 ;; Hardware stack levels used:    1
 12158 ;; Hardware stack levels required when called:    1
 12159 ;; This function calls:
 12160 ;;		___ftpack
 12161 ;; This function is called by:
 12162 ;;		_dec_to_hex
 12163 ;;		_exp
 12164 ;;		_log
 12165 ;; This function uses a non-reentrant model
 12166 ;;
 12167                           
 12168                           	psect	text62
 12169  002A38                     __ptext62:
 12170                           	opt stack 0
 12171  002A38                     ___awtoft:
 12172                           	opt stack 21
 12173                           
 12174                           ;incstack = 0
 12175  002A38  0E00               	movlw	0
 12176  002A3A  6E0C               	movwf	___awtoft@sign,c
 12177  002A3C  AE0A               	btfss	___awtoft@c+1,7,c
 12178  002A3E  D006               	goto	i2l3327
 12179  002A40  6C09               	negf	___awtoft@c,c
 12180  002A42  1E0A               	comf	___awtoft@c+1,f,c
 12181  002A44  B0D8               	btfsc	status,0,c
 12182  002A46  2A0A               	incf	___awtoft@c+1,f,c
 12183  002A48  0E01               	movlw	1
 12184  002A4A  6E0C               	movwf	___awtoft@sign,c
 12185  002A4C                     i2l3327:
 12186  002A4C  C009  F001         	movff	___awtoft@c,___ftpack@arg
 12187  002A50  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 12188  002A54  6A03               	clrf	___ftpack@arg+2,c
 12189  002A56  0E8E               	movlw	142
 12190  002A58  6E04               	movwf	___ftpack@exp,c
 12191  002A5A  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 12192  002A5E  EC17  F011         	call	___ftpack	;wreg free
 12193  002A62  C001  F009         	movff	?___ftpack,?___awtoft
 12194  002A66  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 12195  002A6A  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 12196  002A6E  0012               	return	
 12197  002A70                     __end_of___awtoft:
 12198                           	opt stack 0
 12199                           pclatu	equ	0xFFB
 12200                           pclath	equ	0xFFA
 12201                           tblptru	equ	0xFF8
 12202                           tblptrh	equ	0xFF7
 12203                           tblptrl	equ	0xFF6
 12204                           tablat	equ	0xFF5
 12205                           prodh	equ	0xFF4
 12206                           prodl	equ	0xFF3
 12207                           intcon	equ	0xFF2
 12208                           intcon2	equ	0xFF1
 12209                           intcon3	equ	0xFF0
 12210                           postinc0	equ	0xFEE
 12211                           fsr0h	equ	0xFEA
 12212                           fsr0l	equ	0xFE9
 12213                           wreg	equ	0xFE8
 12214                           fsr1h	equ	0xFE2
 12215                           fsr1l	equ	0xFE1
 12216                           indf2	equ	0xFDF
 12217                           postinc2	equ	0xFDE
 12218                           postdec2	equ	0xFDD
 12219                           fsr2h	equ	0xFDA
 12220                           fsr2l	equ	0xFD9
 12221                           status	equ	0xFD8
 12222                           
 12223 ;; *************** function ___lltoft *****************
 12224 ;; Defined at:
 12225 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;  c               4    8[COMRAM] unsigned long 
 12228 ;; Auto vars:     Size  Location     Type
 12229 ;;  exp             1   16[COMRAM] unsigned char 
 12230 ;; Return value:  Size  Location     Type
 12231 ;;                  3    8[COMRAM] float 
 12232 ;; Registers used:
 12233 ;;		wreg, status,2, status,0, cstack
 12234 ;; Tracked objects:
 12235 ;;		On entry : 0/0
 12236 ;;		On exit  : 0/0
 12237 ;;		Unchanged: 0/0
 12238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12239 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12240 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12241 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12242 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12243 ;;Total ram usage:        9 bytes
 12244 ;; Hardware stack levels used:    1
 12245 ;; Hardware stack levels required when called:    1
 12246 ;; This function calls:
 12247 ;;		___ftpack
 12248 ;; This function is called by:
 12249 ;;		_pow
 12250 ;; This function uses a non-reentrant model
 12251 ;;
 12252                           
 12253                           	psect	text63
 12254  00282C                     __ptext63:
 12255                           	opt stack 0
 12256  00282C                     ___lltoft:
 12257                           	opt stack 22
 12258                           
 12259                           ;incstack = 0
 12260  00282C  0E8E               	movlw	142
 12261  00282E  6E11               	movwf	___lltoft@exp,c
 12262  002830  D006               	goto	i2l3453
 12263  002832                     i2l3451:
 12264  002832  90D8               	bcf	status,0,c
 12265  002834  320C               	rrcf	___lltoft@c+3,f,c
 12266  002836  320B               	rrcf	___lltoft@c+2,f,c
 12267  002838  320A               	rrcf	___lltoft@c+1,f,c
 12268  00283A  3209               	rrcf	___lltoft@c,f,c
 12269  00283C  2A11               	incf	___lltoft@exp,f,c
 12270  00283E                     i2l3453:
 12271  00283E  0E00               	movlw	0
 12272  002840  1409               	andwf	___lltoft@c,w,c
 12273  002842  6E0D               	movwf	??___lltoft& (0+255),c
 12274  002844  0E00               	movlw	0
 12275  002846  140A               	andwf	___lltoft@c+1,w,c
 12276  002848  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12277  00284A  0E00               	movlw	0
 12278  00284C  140B               	andwf	___lltoft@c+2,w,c
 12279  00284E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12280  002850  0EFF               	movlw	255
 12281  002852  140C               	andwf	___lltoft@c+3,w,c
 12282  002854  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12283  002856  500D               	movf	??___lltoft,w,c
 12284  002858  100E               	iorwf	??___lltoft+1,w,c
 12285  00285A  100F               	iorwf	??___lltoft+2,w,c
 12286  00285C  1010               	iorwf	??___lltoft+3,w,c
 12287  00285E  A4D8               	btfss	status,2,c
 12288  002860  D7E8               	goto	i2l3451
 12289  002862  C009  F001         	movff	___lltoft@c,___ftpack@arg
 12290  002866  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 12291  00286A  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 12292  00286E  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 12293  002872  0E00               	movlw	0
 12294  002874  6E05               	movwf	___ftpack@sign,c
 12295  002876  EC17  F011         	call	___ftpack	;wreg free
 12296  00287A  C001  F009         	movff	?___ftpack,?___lltoft
 12297  00287E  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 12298  002882  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 12299  002886  0012               	return	
 12300  002888                     __end_of___lltoft:
 12301                           	opt stack 0
 12302                           pclatu	equ	0xFFB
 12303                           pclath	equ	0xFFA
 12304                           tblptru	equ	0xFF8
 12305                           tblptrh	equ	0xFF7
 12306                           tblptrl	equ	0xFF6
 12307                           tablat	equ	0xFF5
 12308                           prodh	equ	0xFF4
 12309                           prodl	equ	0xFF3
 12310                           intcon	equ	0xFF2
 12311                           intcon2	equ	0xFF1
 12312                           intcon3	equ	0xFF0
 12313                           postinc0	equ	0xFEE
 12314                           fsr0h	equ	0xFEA
 12315                           fsr0l	equ	0xFE9
 12316                           wreg	equ	0xFE8
 12317                           fsr1h	equ	0xFE2
 12318                           fsr1l	equ	0xFE1
 12319                           indf2	equ	0xFDF
 12320                           postinc2	equ	0xFDE
 12321                           postdec2	equ	0xFDD
 12322                           fsr2h	equ	0xFDA
 12323                           fsr2l	equ	0xFD9
 12324                           status	equ	0xFD8
 12325                           
 12326 ;; *************** function ___ftpack *****************
 12327 ;; Defined at:
 12328 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;  arg             3    0[COMRAM] unsigned um
 12331 ;;  exp             1    3[COMRAM] unsigned char 
 12332 ;;  sign            1    4[COMRAM] unsigned char 
 12333 ;; Auto vars:     Size  Location     Type
 12334 ;;		None
 12335 ;; Return value:  Size  Location     Type
 12336 ;;                  3    0[COMRAM] float 
 12337 ;; Registers used:
 12338 ;;		wreg, status,2, status,0
 12339 ;; Tracked objects:
 12340 ;;		On entry : 0/0
 12341 ;;		On exit  : 0/0
 12342 ;;		Unchanged: 0/0
 12343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12344 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12346 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12347 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12348 ;;Total ram usage:        8 bytes
 12349 ;; Hardware stack levels used:    1
 12350 ;; This function calls:
 12351 ;;		Nothing
 12352 ;; This function is called by:
 12353 ;;		___altoft
 12354 ;;		___awtoft
 12355 ;;		___ftadd
 12356 ;;		___ftdiv
 12357 ;;		___ftmul
 12358 ;;		___lltoft
 12359 ;; This function uses a non-reentrant model
 12360 ;;
 12361                           
 12362                           	psect	text64
 12363  00222E                     __ptext64:
 12364                           	opt stack 0
 12365  00222E                     ___ftpack:
 12366                           	opt stack 20
 12367                           
 12368                           ;incstack = 0
 12369  00222E  5004               	movf	___ftpack@exp,w,c
 12370  002230  B4D8               	btfsc	status,2,c
 12371  002232  D005               	goto	i2l2987
 12372  002234  5001               	movf	___ftpack@arg,w,c
 12373  002236  1002               	iorwf	___ftpack@arg+1,w,c
 12374  002238  1003               	iorwf	___ftpack@arg+2,w,c
 12375  00223A  A4D8               	btfss	status,2,c
 12376  00223C  D00C               	goto	i2l2993
 12377  00223E                     i2l2987:
 12378  00223E  0E00               	movlw	0
 12379  002240  6E01               	movwf	?___ftpack,c
 12380  002242  0E00               	movlw	0
 12381  002244  6E02               	movwf	?___ftpack+1,c
 12382  002246  0E00               	movlw	0
 12383  002248  6E03               	movwf	?___ftpack+2,c
 12384  00224A  0012               	return	
 12385  00224C                     i2l2991:
 12386  00224C  2A04               	incf	___ftpack@exp,f,c
 12387  00224E  90D8               	bcf	status,0,c
 12388  002250  3203               	rrcf	___ftpack@arg+2,f,c
 12389  002252  3202               	rrcf	___ftpack@arg+1,f,c
 12390  002254  3201               	rrcf	___ftpack@arg,f,c
 12391  002256                     i2l2993:
 12392  002256  0E00               	movlw	0
 12393  002258  1401               	andwf	___ftpack@arg,w,c
 12394  00225A  6E06               	movwf	??___ftpack& (0+255),c
 12395  00225C  0E00               	movlw	0
 12396  00225E  1402               	andwf	___ftpack@arg+1,w,c
 12397  002260  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12398  002262  0EFE               	movlw	254
 12399  002264  1403               	andwf	___ftpack@arg+2,w,c
 12400  002266  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12401  002268  5006               	movf	??___ftpack,w,c
 12402  00226A  1007               	iorwf	??___ftpack+1,w,c
 12403  00226C  1008               	iorwf	??___ftpack+2,w,c
 12404  00226E  B4D8               	btfsc	status,2,c
 12405  002270  D00C               	goto	i2l2999
 12406  002272  D7EC               	goto	i2l2991
 12407  002274                     i2l2995:
 12408  002274  2A04               	incf	___ftpack@exp,f,c
 12409  002276  0E01               	movlw	1
 12410  002278  2601               	addwf	___ftpack@arg,f,c
 12411  00227A  0E00               	movlw	0
 12412  00227C  2202               	addwfc	___ftpack@arg+1,f,c
 12413  00227E  0E00               	movlw	0
 12414  002280  2203               	addwfc	___ftpack@arg+2,f,c
 12415  002282  90D8               	bcf	status,0,c
 12416  002284  3203               	rrcf	___ftpack@arg+2,f,c
 12417  002286  3202               	rrcf	___ftpack@arg+1,f,c
 12418  002288  3201               	rrcf	___ftpack@arg,f,c
 12419  00228A                     i2l2999:
 12420  00228A  0E00               	movlw	0
 12421  00228C  1401               	andwf	___ftpack@arg,w,c
 12422  00228E  6E06               	movwf	??___ftpack& (0+255),c
 12423  002290  0E00               	movlw	0
 12424  002292  1402               	andwf	___ftpack@arg+1,w,c
 12425  002294  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12426  002296  0EFF               	movlw	255
 12427  002298  1403               	andwf	___ftpack@arg+2,w,c
 12428  00229A  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12429  00229C  5006               	movf	??___ftpack,w,c
 12430  00229E  1007               	iorwf	??___ftpack+1,w,c
 12431  0022A0  1008               	iorwf	??___ftpack+2,w,c
 12432  0022A2  B4D8               	btfsc	status,2,c
 12433  0022A4  D006               	goto	i2l3003
 12434  0022A6  D7E6               	goto	i2l2995
 12435  0022A8                     i2l3001:
 12436  0022A8  0604               	decf	___ftpack@exp,f,c
 12437  0022AA  90D8               	bcf	status,0,c
 12438  0022AC  3601               	rlcf	___ftpack@arg,f,c
 12439  0022AE  3602               	rlcf	___ftpack@arg+1,f,c
 12440  0022B0  3603               	rlcf	___ftpack@arg+2,f,c
 12441  0022B2                     i2l3003:
 12442  0022B2  BE02               	btfsc	___ftpack@arg+1,7,c
 12443  0022B4  D003               	goto	i2l706
 12444  0022B6  0E02               	movlw	2
 12445  0022B8  6004               	cpfslt	___ftpack@exp,c
 12446  0022BA  D7F6               	goto	i2l3001
 12447  0022BC                     i2l706:
 12448  0022BC  A004               	btfss	___ftpack@exp,0,c
 12449  0022BE  9E02               	bcf	___ftpack@arg+1,7,c
 12450  0022C0  90D8               	bcf	status,0,c
 12451  0022C2  3204               	rrcf	___ftpack@exp,f,c
 12452  0022C4  5004               	movf	___ftpack@exp,w,c
 12453  0022C6  1203               	iorwf	___ftpack@arg+2,f,c
 12454  0022C8  5005               	movf	___ftpack@sign,w,c
 12455  0022CA  A4D8               	btfss	status,2,c
 12456  0022CC  8E03               	bsf	___ftpack@arg+2,7,c
 12457  0022CE  C001  F001         	movff	___ftpack@arg,?___ftpack
 12458  0022D2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 12459  0022D6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 12460  0022DA  0012               	return	
 12461  0022DC                     __end_of___ftpack:
 12462                           	opt stack 0
 12463                           pclatu	equ	0xFFB
 12464                           pclath	equ	0xFFA
 12465                           tblptru	equ	0xFF8
 12466                           tblptrh	equ	0xFF7
 12467                           tblptrl	equ	0xFF6
 12468                           tablat	equ	0xFF5
 12469                           prodh	equ	0xFF4
 12470                           prodl	equ	0xFF3
 12471                           intcon	equ	0xFF2
 12472                           intcon2	equ	0xFF1
 12473                           intcon3	equ	0xFF0
 12474                           postinc0	equ	0xFEE
 12475                           fsr0h	equ	0xFEA
 12476                           fsr0l	equ	0xFE9
 12477                           wreg	equ	0xFE8
 12478                           fsr1h	equ	0xFE2
 12479                           fsr1l	equ	0xFE1
 12480                           indf2	equ	0xFDF
 12481                           postinc2	equ	0xFDE
 12482                           postdec2	equ	0xFDD
 12483                           fsr2h	equ	0xFDA
 12484                           fsr2l	equ	0xFD9
 12485                           status	equ	0xFD8
 12486                           
 12487 ;; *************** function ___awdiv *****************
 12488 ;; Defined at:
 12489 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12490 ;; Parameters:    Size  Location     Type
 12491 ;;  dividend        2    6[COMRAM] int 
 12492 ;;  divisor         2    8[COMRAM] int 
 12493 ;; Auto vars:     Size  Location     Type
 12494 ;;  quotient        2   12[COMRAM] int 
 12495 ;;  sign            1   11[COMRAM] unsigned char 
 12496 ;;  counter         1   10[COMRAM] unsigned char 
 12497 ;; Return value:  Size  Location     Type
 12498 ;;                  2    6[COMRAM] int 
 12499 ;; Registers used:
 12500 ;;		wreg, status,2, status,0
 12501 ;; Tracked objects:
 12502 ;;		On entry : 0/0
 12503 ;;		On exit  : 0/0
 12504 ;;		Unchanged: 0/0
 12505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12506 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12507 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12509 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12510 ;;Total ram usage:        8 bytes
 12511 ;; Hardware stack levels used:    1
 12512 ;; This function calls:
 12513 ;;		Nothing
 12514 ;; This function is called by:
 12515 ;;		_dec_to_hex
 12516 ;;		_servo_rotate1
 12517 ;;		_servo_rotate2
 12518 ;; This function uses a non-reentrant model
 12519 ;;
 12520                           
 12521                           	psect	text65
 12522  00252E                     __ptext65:
 12523                           	opt stack 0
 12524  00252E                     ___awdiv:
 12525                           	opt stack 24
 12526                           
 12527                           ;incstack = 0
 12528  00252E  0E00               	movlw	0
 12529  002530  6E0C               	movwf	___awdiv@sign,c
 12530  002532  AE0A               	btfss	___awdiv@divisor+1,7,c
 12531  002534  D006               	goto	i2l3795
 12532  002536  6C09               	negf	___awdiv@divisor,c
 12533  002538  1E0A               	comf	___awdiv@divisor+1,f,c
 12534  00253A  B0D8               	btfsc	status,0,c
 12535  00253C  2A0A               	incf	___awdiv@divisor+1,f,c
 12536  00253E  0E01               	movlw	1
 12537  002540  6E0C               	movwf	___awdiv@sign,c
 12538  002542                     i2l3795:
 12539  002542  AE08               	btfss	___awdiv@dividend+1,7,c
 12540  002544  D006               	goto	i2l3801
 12541  002546  6C07               	negf	___awdiv@dividend,c
 12542  002548  1E08               	comf	___awdiv@dividend+1,f,c
 12543  00254A  B0D8               	btfsc	status,0,c
 12544  00254C  2A08               	incf	___awdiv@dividend+1,f,c
 12545  00254E  0E01               	movlw	1
 12546  002550  1A0C               	xorwf	___awdiv@sign,f,c
 12547  002552                     i2l3801:
 12548  002552  0E00               	movlw	0
 12549  002554  6E0E               	movwf	___awdiv@quotient+1,c
 12550  002556  0E00               	movlw	0
 12551  002558  6E0D               	movwf	___awdiv@quotient,c
 12552  00255A  5009               	movf	___awdiv@divisor,w,c
 12553  00255C  100A               	iorwf	___awdiv@divisor+1,w,c
 12554  00255E  B4D8               	btfsc	status,2,c
 12555  002560  D01C               	goto	i2l3823
 12556  002562  0E01               	movlw	1
 12557  002564  6E0B               	movwf	___awdiv@counter,c
 12558  002566  D004               	goto	i2l3809
 12559  002568                     i2l3807:
 12560  002568  90D8               	bcf	status,0,c
 12561  00256A  3609               	rlcf	___awdiv@divisor,f,c
 12562  00256C  360A               	rlcf	___awdiv@divisor+1,f,c
 12563  00256E  2A0B               	incf	___awdiv@counter,f,c
 12564  002570                     i2l3809:
 12565  002570  AE0A               	btfss	___awdiv@divisor+1,7,c
 12566  002572  D7FA               	goto	i2l3807
 12567  002574                     i2l3811:
 12568  002574  90D8               	bcf	status,0,c
 12569  002576  360D               	rlcf	___awdiv@quotient,f,c
 12570  002578  360E               	rlcf	___awdiv@quotient+1,f,c
 12571  00257A  5009               	movf	___awdiv@divisor,w,c
 12572  00257C  5C07               	subwf	___awdiv@dividend,w,c
 12573  00257E  500A               	movf	___awdiv@divisor+1,w,c
 12574  002580  5808               	subwfb	___awdiv@dividend+1,w,c
 12575  002582  A0D8               	btfss	status,0,c
 12576  002584  D005               	goto	i2l3819
 12577  002586  5009               	movf	___awdiv@divisor,w,c
 12578  002588  5E07               	subwf	___awdiv@dividend,f,c
 12579  00258A  500A               	movf	___awdiv@divisor+1,w,c
 12580  00258C  5A08               	subwfb	___awdiv@dividend+1,f,c
 12581  00258E  800D               	bsf	___awdiv@quotient,0,c
 12582  002590                     i2l3819:
 12583  002590  90D8               	bcf	status,0,c
 12584  002592  320A               	rrcf	___awdiv@divisor+1,f,c
 12585  002594  3209               	rrcf	___awdiv@divisor,f,c
 12586  002596  2E0B               	decfsz	___awdiv@counter,f,c
 12587  002598  D7ED               	goto	i2l3811
 12588  00259A                     i2l3823:
 12589  00259A  500C               	movf	___awdiv@sign,w,c
 12590  00259C  B4D8               	btfsc	status,2,c
 12591  00259E  D004               	goto	i2l3827
 12592  0025A0  6C0D               	negf	___awdiv@quotient,c
 12593  0025A2  1E0E               	comf	___awdiv@quotient+1,f,c
 12594  0025A4  B0D8               	btfsc	status,0,c
 12595  0025A6  2A0E               	incf	___awdiv@quotient+1,f,c
 12596  0025A8                     i2l3827:
 12597  0025A8  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 12598  0025AC  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 12599  0025B0  0012               	return	
 12600  0025B2                     __end_of___awdiv:
 12601                           	opt stack 0
 12602                           pclatu	equ	0xFFB
 12603                           pclath	equ	0xFFA
 12604                           tblptru	equ	0xFF8
 12605                           tblptrh	equ	0xFF7
 12606                           tblptrl	equ	0xFF6
 12607                           tablat	equ	0xFF5
 12608                           prodh	equ	0xFF4
 12609                           prodl	equ	0xFF3
 12610                           intcon	equ	0xFF2
 12611                           intcon2	equ	0xFF1
 12612                           intcon3	equ	0xFF0
 12613                           postinc0	equ	0xFEE
 12614                           fsr0h	equ	0xFEA
 12615                           fsr0l	equ	0xFE9
 12616                           wreg	equ	0xFE8
 12617                           fsr1h	equ	0xFE2
 12618                           fsr1l	equ	0xFE1
 12619                           indf2	equ	0xFDF
 12620                           postinc2	equ	0xFDE
 12621                           postdec2	equ	0xFDD
 12622                           fsr2h	equ	0xFDA
 12623                           fsr2l	equ	0xFD9
 12624                           status	equ	0xFD8
 12625                           pclatu	equ	0xFFB
 12626                           pclath	equ	0xFFA
 12627                           tblptru	equ	0xFF8
 12628                           tblptrh	equ	0xFF7
 12629                           tblptrl	equ	0xFF6
 12630                           tablat	equ	0xFF5
 12631                           prodh	equ	0xFF4
 12632                           prodl	equ	0xFF3
 12633                           intcon	equ	0xFF2
 12634                           intcon2	equ	0xFF1
 12635                           intcon3	equ	0xFF0
 12636                           postinc0	equ	0xFEE
 12637                           fsr0h	equ	0xFEA
 12638                           fsr0l	equ	0xFE9
 12639                           wreg	equ	0xFE8
 12640                           fsr1h	equ	0xFE2
 12641                           fsr1l	equ	0xFE1
 12642                           indf2	equ	0xFDF
 12643                           postinc2	equ	0xFDE
 12644                           postdec2	equ	0xFDD
 12645                           fsr2h	equ	0xFDA
 12646                           fsr2l	equ	0xFD9
 12647                           status	equ	0xFD8
 12648                           
 12649                           	psect	rparam
 12650  0000                     pclatu	equ	0xFFB
 12651                           pclath	equ	0xFFA
 12652                           tblptru	equ	0xFF8
 12653                           tblptrh	equ	0xFF7
 12654                           tblptrl	equ	0xFF6
 12655                           tablat	equ	0xFF5
 12656                           prodh	equ	0xFF4
 12657                           prodl	equ	0xFF3
 12658                           intcon	equ	0xFF2
 12659                           intcon2	equ	0xFF1
 12660                           intcon3	equ	0xFF0
 12661                           postinc0	equ	0xFEE
 12662                           fsr0h	equ	0xFEA
 12663                           fsr0l	equ	0xFE9
 12664                           wreg	equ	0xFE8
 12665                           fsr1h	equ	0xFE2
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674                           	psect	temp
 12675  00007E                     btemp:
 12676                           	opt stack 0
 12677  00007E                     	ds	1
 12678  0000                     int$flags	set	btemp
 12679                           pclatu	equ	0xFFB
 12680                           pclath	equ	0xFFA
 12681                           tblptru	equ	0xFF8
 12682                           tblptrh	equ	0xFF7
 12683                           tblptrl	equ	0xFF6
 12684                           tablat	equ	0xFF5
 12685                           prodh	equ	0xFF4
 12686                           prodl	equ	0xFF3
 12687                           intcon	equ	0xFF2
 12688                           intcon2	equ	0xFF1
 12689                           intcon3	equ	0xFF0
 12690                           postinc0	equ	0xFEE
 12691                           fsr0h	equ	0xFEA
 12692                           fsr0l	equ	0xFE9
 12693                           wreg	equ	0xFE8
 12694                           fsr1h	equ	0xFE2
 12695                           fsr1l	equ	0xFE1
 12696                           indf2	equ	0xFDF
 12697                           postinc2	equ	0xFDE
 12698                           postdec2	equ	0xFDD
 12699                           fsr2h	equ	0xFDA
 12700                           fsr2l	equ	0xFD9
 12701                           status	equ	0xFD8


Data Sizes:
    Strings     464
    Constant    99
    Data        2
    BSS         76
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     42     112
    BANK1           256     12      12
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_24(CODE[15]), STR_23(CODE[16]), STR_22(CODE[28]), STR_21(CODE[25]), 
		 -> STR_20(CODE[24]), STR_19(CODE[23]), STR_18(CODE[18]), STR_17(CODE[23]), 
		 -> STR_16(CODE[10]), STR_15(CODE[18]), STR_14(CODE[18]), STR_13(CODE[18]), 
		 -> STR_12(CODE[18]), STR_11(CODE[18]), STR_10(CODE[18]), STR_9(CODE[18]), 
		 -> STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), 
		 -> STR_4(CODE[23]), STR_3(CODE[10]), STR_2(CODE[17]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _servo_rotate2->___awdiv
    _servo_rotate1->___awdiv
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   44366
                                             10 BANK1      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    5752
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    5752
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    6907
                                             40 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    10    10      0    1155
                                             19 BANK0     10    10      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    5752
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    6800
                                             40 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    5752
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    6176
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    5557
                                             28 BANK0     12     4      8
                                              0 BANK1     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1064
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   0     0      0     904
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     904
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   78674
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
                      _servo_rotate1
                      _servo_rotate2
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  10    10      0     429
                                              3 COMRAM    10    10      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            25    23      2    2328
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate2                                       10     8      2    1726
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate1                                       10     8      2    1726
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2     801
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     291
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   70199
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58403
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   19114
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31682
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8491
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     625
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     684
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
       i2___wmul (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
   _servo_rotate1
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   _servo_rotate2
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C       C       7        4.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      70       5       87.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F9      34        0.0%
DATA                 0      0      F9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 28 17:28:16 2017

                ___altoft@exp 003F            i2_I2C_Master_Start 2CF0            i2_I2C_Master_Write 2CCE  
               ___altoft@sign 0040                            l34 2C66                ?_emergencystop 0001  
                ___awdiv@sign 000C           ___wmul@multiplicand 00D6            i2___lwdiv@dividend 0001  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                ___ftadd@exp1 0027                  ___ftadd@exp2 0026                  ___ftadd@sign 0025  
                         l371 2C2E                           l444 07FC                           l836 20B4  
                         l889 2620                           l899 2762                           _GIE 007F97  
                __CFG_CPB$OFF 000000                           _PEN 007E2A                  __CFG_CPD$OFF 000000  
                         _SEN 007E28                           _PSA 007EAB           ?i2_I2C_Master_Start 0001  
         ?i2_I2C_Master_Write 0002                           _exp 0D9E                           _log 155A  
                         _isr 0008                           _pow 12C6                  ___awmod@sign 00D9  
                         prod 000FF3                           wreg 000FE8                  ?_bottle_time 0001  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0012                  ___ftdiv@sign 0017  
                __CFG_WDT$OFF 000000                          l5101 1262                          l3421 2B6C  
                        l5013 1F6C                          l5007 1F4C                          l5107 1282  
                        l5051 1D1C                          l5019 1F8C                          l5027 1FAE  
                        l5061 1D46                          l5029 1FD6                          l5071 1134  
                        l5055 1D26                          l3607 1500                          l5161 19D2  
                        l5083 11A8                          l5171 19F0                          l5163 19D8  
                        l5077 116A                          l5165 19DE                          l5095 1224  
                        l5167 19E4                          l5159 19CC                          l5175 19F6  
                        l5089 11E6                          l3593 1478                          l5169 19EA  
                        l5177 1A24                          l3851 232E                          l3843 2308  
                        l4811 25E2                          l3597 148E                          l3863 2374  
                        l3855 2352                          l3847 231C                          l3839 22F8  
                        l4807 25D0                          l4831 2730                          l4903 088C  
                        l3873 2038                          l3849 2328                          l4809 25DC  
                        l4905 0892                          l4921 08DA                          l3875 2048  
                        l3859 2360                          l4819 2612                          l4835 2754  
                        l4827 271E                          l4931 0934                          l4851 0712  
                        ?_exp 0049                          l3885 20A2                          l3877 204E  
                        l4829 272A                          l4933 093E                          l4861 074C  
                        l4845 06EC                          ?_log 0034                          l4791 2B94  
                        l4951 099A                          l4927 08FC                          l4919 08C8  
                        l4855 071C                          l4945 0974                          l4873 07CA  
                        l4849 0700                          l4947 0980                          l4955 09AE  
                        l4939 0958                          l4891 0856                          l4971 0A74  
                        ?_isr 0001                          l4957 09B4                          l4965 0A4E  
                        l4885 0834                          l4869 07C4                          l4959 0A00  
                        l4967 0A60                          l4969 0A68                          l4889 0850  
                        ?_pow 0052            i2_read_colorsensor 1C06                          STR_1 FFDC  
                        STR_2 FF8A                          STR_3 FFEA                          STR_4 FEA9  
                        STR_5 FEC0                          STR_6 FFAC                          STR_7 FF9B  
                        STR_8 FEE9                          STR_9 FF0D                          _T0CS 007EAD  
                        _LATA 000F89                          _LATB 000F8A                          _LATC 000F8B  
                        _LATD 000F8C                          _LATE 000F8D                          u2920 2B6A  
                        u3715 27FC                          _RCEN 007E2B                          u4807 27BE  
                        u4817 27C6                          i2l34 2C7A                          u4757 1A32  
                        u4767 28E2                          u4777 291E                          u4787 278C  
                        u4797 2794                          _TMR0 000FD6                          _RSEN 007E29  
                        _main 195C                  ___ftpack@arg 0001                          _keys FDCB  
                ___ftpack@exp 0004                          _time 009E                          fsr0h 000FEA  
                        fsr1h 000FE2            i2___lwdiv@quotient 0005                          fsr2h 000FDA  
                        fsr0l 000FE9                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          btemp 007E                          exp@x 0049  
                        log@x 0034                          isr@i 0073          ??i2_I2C_Master_Start 0002  
        ??i2_I2C_Master_Write 0004                          pow@x 0052                          pow@y 0055  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
         ?i2_read_colorsensor 0001                 __CFG_IESO$OFF 000000               __end_ofi2_putch 2CB8  
               __CFG_MCLRE$ON 000000                  ___ftmul@cntr 001A                  ___param_bank 000000  
                ___ftmul@sign 001B                   i2_lcdNibble 292A                 ?_bottle_count 0001  
                ___fttol@exp1 0036                         ??_exp 004C                         ??_log 0037  
                ___fttol@lval 0032                         ??_isr 00C4                         ??_pow 0058  
               _eskacap_count 00AB              ?_I2C_Master_Init 00E1              ?_I2C_Master_Read 0001  
            ?_I2C_Master_Wait 0001              ?_I2C_Master_Stop 0001                         ?_main 0001  
                       _ACKEN 007E2C                         _ACKDT 007E2D               __end_of___awdiv 25B2  
             __end_of___ftadd 1132                         STR_10 FEFB                         STR_11 FF1F  
                       STR_12 FF31                         STR_20 FE63                         STR_13 FF55  
                       STR_21 FE4A                         STR_14 FF43                         STR_22 FE2E  
                       STR_23 FFBD                         STR_15 FF67                         STR_16 FFF4  
                       STR_24 FFCD                         STR_25 FF79                         STR_17 FE92  
                       STR_18 FED7                         STR_19 FE7B               __end_of___awmod 237E  
             __end_of___ftdiv 1B28               __end_of___ftneg 2C0E               __end_of___lldiv 20C6  
             __end_of___ftmul 195C               ___awdiv@divisor 0009               __end_of___ftsub 29FA  
             __end_of___fttol 1868                         _T0PS0 007EA8                         _T0PS1 007EA9  
                       _T0PS2 007EAA               __end_of___lwdiv 262A               __end_of___lwmod 276C  
                       i2l401 212A                         i2l404 214E                         i2l316 06A2  
                       i2l407 2178                         i2l271 0052                         i2l280 00EE  
                       i2l272 0210                         i2l281 01A8                         i2l273 005C  
                       i2l444 0B7E                         i2l285 0432                         i2l269 0214  
                       i2l382 23E2                         i2l390 21DE                         i2l279 00E4  
                       i2l296 05B0                         i2l385 240C                         i2l393 2202  
                       i2l297 05AC                         i2l706 22BC                         i2l379 23B8  
                       i2l396 222C                         i2l733 0FF4                         i2l744 10A4  
                       i2l753 10C0                         i2l729 0FCA                         i2l921 12FE  
                       i2l764 1AF6                         i2l926 142E                         i2l786 2C00  
             ___awdiv@counter 000B                         i2l889 28D0                         i2l899 29B0  
        ??i2_read_colorsensor 0004                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96               ??_servo_rotate0 0003               ??_servo_rotate1 0011  
             ??_servo_rotate2 0011                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000             read_colorsensor@i 00DF                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011               __end_of_lcdInst 2CAC  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                         _nRBPU 007F8F  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD 292A                __CFG_EBTRB$OFF 000000                    i2isdigit@c 0003  
               ___awtoft@sign 000C               __end_of_dpowers FDE6                         _color 0096  
                       _floor 1B28                         _etime 00B1                         _ldexp 1E84  
                       _frexp 240E                         _errno 00A7               __end_of_isdigit 2B9E  
               ___ftpack@sign 0005                         _putch 2C8C                         _stime 007C  
                       pclath 000FFA                         tablat 000FF5                 _eskalbl_count 00AF  
                       pow@yi 005F               __end_of_timeset FDF5              __end_ofi2___wmul 2BEA  
             __end_of_standby 2AA6                         status 000FD8                __CFG_PBADEN$ON 000000  
               i2printf@width 001A                   exp@exponent 004F              __end_ofi2_printf 0D9E  
          __size_ofi2___lwdiv 0052            __size_ofi2___lwmod 0042                   ldexp@newexp 0037  
             __initialization 29FA                   log@exponent 0037            __size_ofi2_lcdInst 000C  
             ??_emergencystop 00EC                ??_bottle_count 00EC                  __end_of_main 1A42  
                __end_of_keys FDDC                    i2printf@ap 0014            __size_ofi2_isdigit 001E  
                      ??_main 010A                 ___fttol@sign1 0031                 __activetblptr 000002  
           ?_I2C_Master_Start 0001             ?_I2C_Master_Write 00D5                servo_rotate0@i 0007  
              servo_rotate0@j 0009                servo_rotate1@i 0015                servo_rotate1@j 0017  
              servo_rotate2@i 0015                servo_rotate2@j 0017            ??_I2C_Master_Start 00D5  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 00D7  
                      ?_floor 0041                        ?_ldexp 0034                        ?_frexp 0001  
            __end_of___altoft 26A2                        _T08BIT 007EAE              ___awdiv@dividend 0007  
             i2lcdNibble@data 0002              __end_of___awtoft 2A70                        ?_putch 0001  
            __end_of___ftpack 22DC               i2lcdNibble@temp 0001              __end_of___lltoft 2888  
                      _INT0IE 007F94                        _INT0IF 007F91                        _INT1IE 007F83  
                      _INT1IF 007F80                        _INT2IE 007F84                        _INT2IF 007F81  
                      i2l3001 22A8                        i2l3003 22B2                        i2l1084 0E54  
                      i2l3101 110C                        i2l1085 0F78                        i2l3111 1890  
                      i2l1095 1BF8                        i2l3043 0FD8                        i2l3131 18EA  
                      i2l3027 264C                        i2l3141 1912                        i2l3117 18B8  
                      i2l3029 2658                        i2l3213 1856                        i2l3205 182E  
                      i2l3071 1054                        i2l3135 18FA                        i2l3207 183A  
                      i2l3073 105E                        i2l3065 1032                        i2l3049 1002  
                      i2l3145 1922                        i2l3161 24FE                        i2l3209 1840  
                      i2l3225 2436                        i2l3091 10DC                        i2l3083 1092  
                      i2l3075 1068                        i2l3315 29D0                        i2l4131 26D6  
                      i2l4203 2142                        i2l3085 109C                        i2l3077 1070  
                      i2l3157 24CE                        i2l4141 26FA                        i2l4221 21D2  
                      i2l3327 2A4C                        i2l3271 1A6A                        i2l3167 252A  
                      i2l3503 1576                        i2l4135 26DE                        i2l4215 21BA  
                      i2l3361 1DF2                        i2l3177 17A0                        i2l3353 1B7E  
                      i2l3345 1B56                        i2l4161 1762                        i2l4313 0BC6  
                      i2l3451 2832                        i2l3363 1E6E                        i2l3195 1806  
                      i2l3371 1E9C                        i2l3531 0DEE                        i2l4227 21F6  
                      i2l4315 0BCA                        i2l4243 1C3A                        i2l3453 283E  
                      i2l3277 1A92                        i2l3349 1B64                        i2l3525 0DB6  
                      i2l3509 1598                        i2l4149 1692                        i2l4173 23A6  
                      i2l4309 0BAC                        i2l3199 1816                        i2l3391 1F06  
                      i2l4167 238E                        i2l4191 2106                        i2l4351 0C50  
                      i2l4327 0BF6                        i2l4343 0C26                        i2l4247 1C4A  
                      i2l3801 2552                        i2l3297 1AD0                        i2l3537 0E26  
                      i2l4329 0BFA                        i2l4345 0C36                        i2l4273 0AAC  
                      i2l4257 1C9E                        i2l4521 01CA                        i2l3811 2574  
                      i2l3395 1F12                        i2l3379 1EE2                        i2l4179 23D0  
                      i2l4371 0CB0                        i2l4363 0C92                        i2l4355 0C74  
                      i2l4275 0ABA                        i2l4603 04A6                        i2l4197 211E  
                      i2l4381 0CDC                        i2l4357 0C7C                        i2l4293 0B4C  
                      i2l4285 0AEE                        i2l4269 0A9C                        i2l4621 0506  
                      i2l4541 028E                        i2l4525 01D8                        i2l3807 2568  
                      i2l3823 259A                        i2l3559 0F4E                        i2l4383 0D20  
                      i2l4391 0D76                        i2l4375 0CC4                        i2l4279 0AC0  
                      i2l4615 04E6                        i2l4543 02A4                        i2l4551 02FC  
                      i2l4519 01BC                        i2l3809 2570                        i2l4393 0D7C  
                      i2l4369 0CA8                        i2l4297 0B50                        i2l4633 0546  
                      i2l4609 04C6                        i2l4641 0566                        i2l4553 0312  
                      i2l4561 036A                        i2l4545 02BA                        i2l4481 009A  
                      i2l3827 25A8                        i2l3819 2590                        i2l3771 1388  
                      i2l3763 1324                        i2l4379 0CD6                        i2l4395 0D84  
                      i2l4627 0526                        i2l4555 0328                        i2l4547 02D0  
                      i2l4571 03DC                        u232_41 0F96                        i2l3757 130C  
                      i2l3909 2BBE                        i2l3941 28AA                        i2l4389 0D66  
                      i2l4557 033E                        i2l4549 02E6                        i2l4581 042E  
                      i2l4485 00A6                        i2l2991 224C                        i2l3775 13AA  
                      i2l3927 2C46                        i2l4591 0466                        i2l4559 0354  
                      i2l4487 00B0                        i2l2993 2256                        i2l3937 289E  
                      i2l3961 2992                        i2l4673 0684                        i2l3795 2542  
                      i2l2995 2274                        i2l2987 223E                        i2l3939 28A6  
                      i2l4667 066E                        i2l4579 042A                        u233_41 0FAA  
                      i2l3949 28C6                        i2l3965 29A6                        i2l3957 2986  
                      i2l4677 068C                        i2l4597 0486                        i2l2999 228A  
                      i2l3959 298E                        u253_41 1878                        u262_41 1784  
                      u255_41 18A0                        u274_41 1A52                        u276_41 1A7A  
                      _TMR0IE 007F95                        _TMR0IF 007F92                     ??i2_putch 0003  
                      _TMR0ON 007EAF                        _SSPADD 000FC8                        _TRISC3 007CA3  
                      _TRISC4 007CA4                        _SSPBUF 000FC9                __CFG_XINST$OFF 000000  
           ?_read_colorsensor 0001                        ___ftge 249E                  _yopcap_count 00BD  
                      ___wmul 2ADC            ??_read_colorsensor 00D7                     ??___awdiv 000B  
                   ??___ftadd 0022                __CFG_STVREN$ON 000000                     ??___awmod 00D8  
                   ??___ftdiv 000F                     ??___ftneg 0004                     ??___lldiv 00DC  
                   ??___ftmul 0013                     ??___ftsub 002E                     ??___fttol 002C  
                   ??___lwdiv 00D8                     ??___lwmod 00DF                 dec_to_hex@num 0063  
                      clear_0 2A18                        clear_1 2A24              ___awdiv@quotient 000D  
             ___awmod@divisor 00D6               ___awmod@counter 00D8                     ??_lcdInst 00D6  
                      _printf 06DE                        floor@i 0044                        floor@x 0041  
       ___ftmul@f3_as_product 0017                     ??_initLCD 00D7                     ??_isdigit 00D4  
           __end_ofi2___lwdiv 28DA                  __mediumconst FDCA             __end_ofi2___lwmod 29BA  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_standby 00EC             __end_ofi2_lcdInst 2CC4                  _yoplbl_count 00C1  
           __end_ofi2_isdigit 2C4E              __end_ofexp@coeff FE13          __size_of_bottle_time 0036  
            __end_oflog@coeff FE2E                    __accesstop 0080       __end_of__initialization 2A2A  
                  ___altoft@c 0037                    ___ftadd@f1 001C                    ___ftadd@f2 001F  
                  ___ftge@ff1 0001                    ___ftge@ff2 0004                  eval_poly@res 0031  
               ___rparam_used 000001                    ___ftdiv@f1 0009                    ___ftdiv@f2 000C  
                  ___ftdiv@f3 0013                    ___ftneg@f1 0001                    ___awtoft@c 0009  
                  ___ftmul@f1 000D                    ___ftmul@f2 0010                    ___ftsub@f1 0028  
                  ___ftsub@f2 002B                    ___fttol@f1 0028            i2___lwmod@dividend 0008  
              __pcstackCOMRAM 0001                  __pidataBANK0 2CF8                    ___lltoft@c 0009  
               __end_of_floor 1C06                 __end_of_ldexp 1F4A                 __end_of_frexp 249E  
               __end_of_putch 2C9C                   i2printf@idx 0013                   i2printf@val 0017  
          __size_of_date_time 00D2           servo_rotate0@degree 0001           servo_rotate1@degree 000F  
         servo_rotate2@degree 000F                     ?i2___wmul 0001            __size_of_lcdNibble 0060  
                 i2putch@data 0003                     ?i2_printf 000D   __size_of_I2C_ColorSens_Init 0034  
                     ??_floor 0044                       ??_ldexp 0039                       ??_frexp 0006  
        __end_of_bottle_count 12C6                    _dec_to_hex 1678                       ??_putch 00D6  
                  __pbssBANK0 0080            __size_of_eval_poly 00D2             servo_rotate0@duty 0005  
           servo_rotate1@duty 0013             servo_rotate2@duty 0013            __size_of_read_time 0068  
                     ?___ftge 0001                  ?i2_lcdNibble 0001                       ?___wmul 00D4  
                   ?___altoft 0037                     ?___awtoft 0009                     ?___ftpack 0001  
                     ?_printf 00E0            __size_of_operation 00C0                     ?___lltoft 0009  
                  ??i2___wmul 0005                    ??i2_printf 000F                       _SSPCON1 000FC6  
                     _SSPCON2 000FC5                       _SSPSTAT 000FC7             __end_of_date_time 1DB2  
                  _eska_count 00A9                       i2_putch 2CAC             _bottle_count_disp 00EE  
 __size_ofi2_I2C_Master_Start 0008             __end_of_lcdNibble 27CC   __size_ofi2_I2C_Master_Write 000A  
               ?_operationend 0001                       __Hparam 0000                       __Lparam 0000  
             __size_of___ftge 0090                       ___awdiv 252E                       ___ftadd 0F86  
                     ___awmod 22DC                       ___ftdiv 1A42                       ___ftneg 2BEA  
                     ___lldiv 200A               __size_of___wmul 0036                       ___ftmul 1868  
                     ___ftsub 29BA                       ___fttol 1774                       ___lwdiv 25B2  
                     ___lwmod 270A                    _curr_state 00C3                    ??___altoft 003B  
                     __pcinit 29FA                    ??___awtoft 000C                    ??___ftpack 0006  
           __end_of_eval_poly 1E84                       __ramtop 1000                       _lcdInst 2C9C  
                  ??___lltoft 000D                       __ptext0 195C                       __ptext1 2A70  
                     __ptext2 2C4E                       __ptext3 1F4A                       __ptext4 143C  
                     __ptext5 28DA                       __ptext6 2C0E                       __ptext7 1CE0  
                     __ptext8 2B46                       __ptext9 2AA6               __size_of_printf 03B4  
              dec_to_hex@temp 006B                       _initLCD 28DA             __end_of_hexpowers FDEE  
               i2_isdigit$822 0002                       _dpowers FDDC                  __size_of_exp 01E8  
                __size_of_log 011E                       _isdigit 2B74                  __size_of_isr 06D6  
 __size_ofi2_read_colorsensor 00DA                  __size_of_pow 0176              ___awmod@dividend 00D4  
           __end_of_read_time 270A      __size_of_I2C_Master_Init 0060      __size_of_I2C_Master_Read 002E  
    __size_of_I2C_Master_Wait 0014                    date_time@i 00EC      __size_of_I2C_Master_Stop 0008  
       __end_of_servo_rotate0 240E         __end_of_servo_rotate1 222E         __end_of_servo_rotate2 217A  
                     _timeset FDEE                       _standby 2A70                   ?_dec_to_hex 0063  
              __pintcode_body 0012          end_of_initialization 2A2A                       exp@sign 0051  
               __Lmediumconst FDCA                       int_func 0012           i2___wmul@multiplier 0001  
           __end_of_operation 200A                _operation_disp 00B5                _operation_time 00B7  
              ??_operationend 00EC     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 00D8                       pow@sign 005E               ___lldiv@counter 00E0  
                     printf@c 0109                       printf@f 00E0              I2C_Master_Init@c 00E1  
            I2C_Master_Read@a 00D5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE         __end_of_emergencystop 2C30                     _PORTAbits 000F80  
       __size_of_bottle_count 0194     __size_of_read_colorsensor 011E     read_colorsensor@color_low 00D9  
           i2_I2C_Master_Read 2B9E             i2_I2C_Master_Wait 2C7A             i2_I2C_Master_Stop 2CE8  
           i2___lwdiv@divisor 0003                     i2___lwdiv 2888                     i2___lwmod 2978  
           i2___lwdiv@counter 0007            ?i2_I2C_Master_Read 0001            ?i2_I2C_Master_Wait 0001  
i2read_colorsensor@color_comb 000A  i2read_colorsensor@color_high 0008            ?i2_I2C_Master_Stop 0001  
                  _start_time 007A                     i2_lcdInst 2CB8                   ___ftdiv@exp 0016  
                 printf@width 0107           ??i2_I2C_Master_Read 0002                     i2_isdigit 2C30  
         ??i2_I2C_Master_Wait 0001           ??i2_I2C_Master_Stop 0002                   ___ftmul@exp 0016  
                _bottle_count 1132                __end_of___ftge 252E                __end_of___wmul 2B12  
         __size_of_dec_to_hex 00FC          __size_ofi2_lcdNibble 004E            _total_bottle_count 00B9  
               i2lcdInst@data 0003                    floor@expon 0047              i2___wmul@product 0005  
              __end_of_printf 0A92                  i2printf@flag 0019     __end_ofi2_I2C_Master_Read 2BC4  
   __end_ofi2_I2C_Master_Wait 2C8C                  i2printf@prec 0016           start_initialization 29FA  
   __end_ofi2_I2C_Master_Stop 2CF0                    eval_poly@d 002B                    eval_poly@n 002D  
                  eval_poly@x 0028             __size_ofi2___wmul 0026                    ldexp@value 0034  
                 __end_of_exp 0F86                   __end_of_log 1678                   __end_of_isr 06DE  
                 __end_of_pow 143C                     i2printf@c 001C                     i2printf@f 000D  
               ??_bottle_time 00EC         i2I2C_Master_Read@temp 0003                    ?i2___lwdiv 0001  
                  ?i2___lwmod 0008             __size_ofi2_printf 030C                    frexp@value 0001  
           ??_I2C_Master_Init 00E5             ??_I2C_Master_Read 00D5             ??_I2C_Master_Wait 00D4  
                  ?i2_lcdInst 0001             ??_I2C_Master_Stop 00D5    read_colorsensor@color_comb 00DD  
  read_colorsensor@color_high 00DB                    ?i2_isdigit 0001                      ??___ftge 0007  
                    ??___wmul 00D8                   __pdataBANK0 00EE              __CFG_LPT1OSC$OFF 000000  
                    ??_printf 00E8             __size_of___altoft 0078                    read_time@i 0004  
           __size_of___awtoft 0038             __size_of___ftpack 00AE             __size_of___lltoft 005C  
  __end_of_I2C_ColorSens_Init 2B46                   __pbssCOMRAM 0076          __end_of_operationend 2C66  
               __pcstackBANK0 00C4                 __pcstackBANK1 0100             i2___lwmod@divisor 000A  
           i2___lwmod@counter 000C                      ?i2_putch 0001           __end_of_bottle_time 2ADC  
            _I2C_Master_Start 2CE0           i2I2C_Master_Write@d 0002              _I2C_Master_Write 2CC4  
            _eskacaplbl_count 00AD                     _date_time 1CE0              ___lwdiv@dividend 00D4  
           __CFG_CCP2MX$PORTC 000000                     __pintcode 0008                 __pmediumconst FDCA  
                   _lcdNibble 276C               _yopcaplbl_count 00BF                      ?___awdiv 0007  
                    ?___ftadd 001C                      ?___awmod 00D4                      ?___ftdiv 0009  
                    ?___ftneg 0001                      ?___lldiv 00D4                      ?___ftmul 000D  
                    ?___ftsub 0028                      ?___fttol 0028                      ?___lwdiv 00D4  
                    ?___lwmod 00DB                      ?_lcdInst 0001              dec_to_hex@hexnum 006F  
                    ?_initLCD 0001                      ?_isdigit 0001              _read_colorsensor 143C  
  __size_ofi2_I2C_Master_Read 0026    __size_ofi2_I2C_Master_Wait 0012                     _eval_poly 1DB2  
  __size_ofi2_I2C_Master_Stop 0008                     _hexpowers FDE6                      ?_standby 0001  
            ___lwdiv@quotient 00D9                __size_of_floor 00DE                __size_of_ldexp 00C6  
              __size_of_frexp 0090                  ??_dec_to_hex 0065                   ??i2___lwdiv 0005  
                 ??i2___lwmod 000C                     _read_time 26A2                __size_of_putch 0010  
  __end_ofi2_I2C_Master_Start 2CF8    __end_ofi2_I2C_Master_Write 2CD8                   ??i2_lcdInst 0003  
              ___wmul@product 00D8                      _LATAbits 000F89                      _LATCbits 000F8B  
                    _LATDbits 000F8C                   ??i2_isdigit 0001                    ?_date_time 0001  
                    i2u308_40 0E2E                      i2u309_40 0E30                      i2u271_40 245E  
                    i2u264_40 17BE                      i2u271_48 2460                      i2u344_40 1370  
                    i2u264_45 17B6                      i2u361_40 2BBC                      i2u284_40 1B70  
                   _operation 1F4A                      i2u288_40 1EBC                      i2u288_48 1EBE  
                    i2u490_47 21D4                      i2u482_47 03EA                      i2u491_47 21F8  
                    i2u483_47 0694                      i2u492_47 23AC                      i2u484_47 2942  
                    i2u493_47 23D6                      i2u485_47 294A                      i2u486_47 296A  
                    i2u487_47 2972                      i2u488_47 2120                      i2u489_47 2144  
            __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001            __end_of_dec_to_hex 1774  
  __end_ofi2_read_colorsensor 1CE0             ___wmul@multiplier 00D4                      i2___wmul 2BC4  
               lcdNibble@data 00D5                    printf@flag 0106                 lcdNibble@temp 00D4  
                  printf@prec 0103                    ?_eval_poly 0028                      i2_printf 0A92  
                 _bottle_time 2AA6           I2C_Master_Read@temp 00D6                     _yop_count 00BB  
                  ?_read_time 0001            dec_to_hex@quotient 0071                   _bottlequeue 0080  
            __size_ofi2_putch 000C                     frexp@eptr 0004                      __Hrparam 0000  
         i2read_colorsensor@i 000C                    ?_operation 0001                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000                   dec_to_hex@i 006D        __size_of_servo_rotate0 0090  
      __size_of_servo_rotate1 00B4        __size_of_servo_rotate2 00B4              __size_of___awdiv 0084  
            __size_of___ftadd 01AC              __size_of___awmod 00A2              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024         i2___wmul@multiplicand 0003              __size_of___lldiv 00BC  
                    ___altoft 262A              __size_of___ftmul 00F4              __size_of___ftsub 0040  
            __size_of___fttol 00F4              __size_of___lwdiv 0078              __size_of___lwmod 0062  
       __size_of_operationend 0018                      ___awtoft 2A38                      ___ftpack 222E  
                    ___lltoft 282C                   _isdigit$822 00D5            i2I2C_Master_Read@a 0002  
            __size_of_lcdInst 0010                      _exp$1262 004C               _I2C_Master_Init 27CC  
             _I2C_Master_Read 2B46              __size_of_initLCD 0050               _I2C_Master_Wait 2C66  
             _I2C_Master_Stop 2CD8                      _isr$1354 0074              __size_of_isdigit 002A  
             ___lwdiv@divisor 00D6               ___lwdiv@counter 00D8                      __ptext10 1132  
                    __ptext11 06DE                      __ptext20 27CC                      __ptext12 2C8C  
                    __ptext21 200A                      __ptext13 2B74                      __ptext30 2CAC  
                    __ptext22 2B12                      __ptext14 2ADC                      __ptext31 2C30  
                    __ptext23 2CC4                      __ptext15 270A                      __ptext40 2CCE  
                    __ptext32 2978                      __ptext24 2CD8                      __ptext16 25B2  
                    __ptext41 2CE8                      __ptext33 2888                      __ptext25 2CE0  
                    __ptext17 2C9C                      __ptext50 1B28                      __ptext42 2CF0  
                    __ptext34 2CB8                      __ptext26 2C66                      __ptext18 276C  
                    __ptext51 240E                      __ptext43 2B9E                      __ptext35 292A  
                    __ptext19 22DC                      __ptext60 2BEA                      __ptext52 1774  
                    __ptext44 2C7A                      __ptext36 20C6                      __ptext28 1C06  
                    __ptext61 1A42                      __ptext53 249E                      __ptext45 1678  
                    __ptext37 217A                      __ptext29 0A92                      __ptext62 2A38  
                    __ptext54 262A                      __ptext46 12C6                      __ptext38 237E  
                    __ptext63 282C                      __ptext55 1DB2                      __ptext47 155A  
                    __ptext39 26A2                      __ptext64 222E                      __ptext56 2BC4  
                    __ptext48 0D9E                      __ptext65 252E                      __ptext57 1868  
                    __ptext49 1E84                      __ptext58 29BA                      __ptext59 0F86  
                    _end_time 0078              __size_of_standby 0036                      _pow$1260 0058  
                    _pow$1261 005B        __size_of_emergencystop 0022                 __size_of_main 00E6  
                    _nodedata 00B3               _dec_to_hex$1258 0065               _dec_to_hex$1259 0068  
                 ??_date_time 00EC                  _operationend 2C4E                 ??i2_lcdNibble 0001  
                 ??_lcdNibble 00D4                      int$flags 007E                     printf@idx 0100  
                   printf@val 0104                      exp@coeff FDF5                      log@coeff FE13  
            _bottlequeue_head 00A5                     putch@data 00D6      __end_of_I2C_Master_Start 2CE8  
            _bottlequeue_tail 0076      __end_of_I2C_Master_Write 2CCE                    _INTCONbits 000FF2  
                 ??_eval_poly 002F                      isdigit@c 00D6                 _servo_rotate0 237E  
               _servo_rotate1 217A                 _servo_rotate2 20C6                   ??_read_time 0004  
                    intlevel2 0000              ___lwmod@dividend 00DB              ___lldiv@dividend 00D4  
          _I2C_ColorSens_Init 2B12      __end_of_read_colorsensor 155A                   ??_operation 00EC  
         ?_I2C_ColorSens_Init 0001                      printf@ap 0101       __end_of_I2C_Master_Init 282C  
     __end_of_I2C_Master_Read 2B74       __end_of_I2C_Master_Wait 2C7A       __end_of_I2C_Master_Stop 2CE0  
                 lcdInst@data 00D6                 _emergencystop 2C0E           __end_ofi2_lcdNibble 2978  
            ___lldiv@quotient 00DC             I2C_Master_Write@d 00D5               ___lwmod@divisor 00DD  
 i2read_colorsensor@color_low 0006               ___lwmod@counter 00DF          ??_I2C_ColorSens_Init 00D7  
              ?_servo_rotate0 0001                ?_servo_rotate1 000F                ?_servo_rotate2 000F  

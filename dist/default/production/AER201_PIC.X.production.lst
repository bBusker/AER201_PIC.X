

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 14 17:01:32 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           ; Version 1.40
    81                           ; Generated 01/12/2016 GMT
    82                           ; 
    83                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F4620 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     
   115                           	psect	idataBANK0
   116  0024B8                     __pidataBANK0:
   117                           	opt stack 0
   118                           
   119                           ;initializer for _bottle_count_disp
   120  0024B8  FFFF               	dw	65535
   121                           
   122                           	psect	mediumconst
   123  00FDEE                     __pmediumconst:
   124                           	opt stack 0
   125  00FDEE  00                 	db	0
   126  00FDEF                     _keys:
   127                           	opt stack 0
   128  00FDEF  31                 	db	49
   129  00FDF0  32                 	db	50
   130  00FDF1  33                 	db	51
   131  00FDF2  41                 	db	65
   132  00FDF3  34                 	db	52
   133  00FDF4  35                 	db	53
   134  00FDF5  36                 	db	54
   135  00FDF6  42                 	db	66
   136  00FDF7  37                 	db	55
   137  00FDF8  38                 	db	56
   138  00FDF9  39                 	db	57
   139  00FDFA  43                 	db	67
   140  00FDFB  2A                 	db	42
   141  00FDFC  30                 	db	48
   142  00FDFD  23                 	db	35
   143  00FDFE  44                 	db	68
   144  00FDFF  00                 	db	0
   145  00FE00                     __end_of_keys:
   146                           	opt stack 0
   147  00FE00                     _dpowers:
   148                           	opt stack 0
   149  00FE00  0001               	dw	1
   150  00FE02  000A               	dw	10
   151  00FE04  0064               	dw	100
   152  00FE06  03E8               	dw	1000
   153  00FE08  2710               	dw	10000
   154  00FE0A                     __end_of_dpowers:
   155                           	opt stack 0
   156  00FE0A                     _hexpowers:
   157                           	opt stack 0
   158  00FE0A  0001               	dw	1
   159  00FE0C  0010               	dw	16
   160  00FE0E  0100               	dw	256
   161  00FE10  1000               	dw	4096
   162  00FE12                     __end_of_hexpowers:
   163                           	opt stack 0
   164  00FE12                     _timeset:
   165                           	opt stack 0
   166  00FE12  50                 	db	80
   167  00FE13  35                 	db	53
   168  00FE14  21                 	db	33
   169  00FE15  08                 	db	8
   170  00FE16  05                 	db	5
   171  00FE17  02                 	db	2
   172  00FE18  17                 	db	23
   173  00FE19                     __end_of_timeset:
   174                           	opt stack 0
   175  00FE19                     exp@coeff:
   176                           	opt stack 0
   177  00FE19  00                 	db	0
   178  00FE1A  80                 	db	128
   179  00FE1B  3F                 	db	63
   180  00FE1C  72                 	db	114
   181  00FE1D  31                 	db	49
   182  00FE1E  3F                 	db	63
   183  00FE1F  FE                 	db	254
   184  00FE20  75                 	db	117
   185  00FE21  3E                 	db	62
   186  00FE22  58                 	db	88
   187  00FE23  63                 	db	99
   188  00FE24  3D                 	db	61
   189  00FE25  95                 	db	149
   190  00FE26  1D                 	db	29
   191  00FE27  3C                 	db	60
   192  00FE28  C5                 	db	197
   193  00FE29  AE                 	db	174
   194  00FE2A  3A                 	db	58
   195  00FE2B  79                 	db	121
   196  00FE2C  21                 	db	33
   197  00FE2D  39                 	db	57
   198  00FE2E  94                 	db	148
   199  00FE2F  80                 	db	128
   200  00FE30  37                 	db	55
   201  00FE31  93                 	db	147
   202  00FE32  A7                 	db	167
   203  00FE33  35                 	db	53
   204  00FE34  56                 	db	86
   205  00FE35  15                 	db	21
   206  00FE36  34                 	db	52
   207  00FE37                     __end_ofexp@coeff:
   208                           	opt stack 0
   209  00FE37                     log@coeff:
   210                           	opt stack 0
   211  00FE37  00                 	db	0
   212  00FE38  00                 	db	0
   213  00FE39  00                 	db	0
   214  00FE3A  00                 	db	0
   215  00FE3B  80                 	db	128
   216  00FE3C  3F                 	db	63
   217  00FE3D  F0                 	db	240
   218  00FE3E  FF                 	db	255
   219  00FE3F  BE                 	db	190
   220  00FE40  E2                 	db	226
   221  00FE41  A9                 	db	169
   222  00FE42  3E                 	db	62
   223  00FE43  83                 	db	131
   224  00FE44  76                 	db	118
   225  00FE45  BE                 	db	190
   226  00FE46  AE                 	db	174
   227  00FE47  2B                 	db	43
   228  00FE48  3E                 	db	62
   229  00FE49  3C                 	db	60
   230  00FE4A  C3                 	db	195
   231  00FE4B  BD                 	db	189
   232  00FE4C  D2                 	db	210
   233  00FE4D  13                 	db	19
   234  00FE4E  3D                 	db	61
   235  00FE4F  78                 	db	120
   236  00FE50  D3                 	db	211
   237  00FE51  BB                 	db	187
   238  00FE52                     __end_oflog@coeff:
   239                           	opt stack 0
   240  0000                     _TMR0	set	4054
   241  0000                     _ADCON0	set	4034
   242  0000                     _ADCON1	set	4033
   243  0000                     _INTCONbits	set	4082
   244  0000                     _LATA	set	3977
   245  0000                     _LATB	set	3978
   246  0000                     _LATC	set	3979
   247  0000                     _LATD	set	3980
   248  0000                     _LATDbits	set	3980
   249  0000                     _LATE	set	3981
   250  0000                     _PORTAbits	set	3968
   251  0000                     _PORTB	set	3969
   252  0000                     _PORTEbits	set	3972
   253  0000                     _SSPADD	set	4040
   254  0000                     _SSPBUF	set	4041
   255  0000                     _SSPCON1	set	4038
   256  0000                     _SSPCON2	set	4037
   257  0000                     _SSPSTAT	set	4039
   258  0000                     _TRISA	set	3986
   259  0000                     _TRISB	set	3987
   260  0000                     _TRISC	set	3988
   261  0000                     _TRISD	set	3989
   262  0000                     _TRISE	set	3990
   263  0000                     _ACKDT	set	32301
   264  0000                     _ACKEN	set	32300
   265  0000                     _INT1IE	set	32643
   266  0000                     _INT1IF	set	32640
   267  0000                     _PEN	set	32298
   268  0000                     _PSA	set	32427
   269  0000                     _RCEN	set	32299
   270  0000                     _RSEN	set	32297
   271  0000                     _SEN	set	32296
   272  0000                     _T08BIT	set	32430
   273  0000                     _T0CS	set	32429
   274  0000                     _T0PS0	set	32424
   275  0000                     _T0PS1	set	32425
   276  0000                     _T0PS2	set	32426
   277  0000                     _TMR0IE	set	32661
   278  0000                     _TMR0IF	set	32658
   279  0000                     _TMR0ON	set	32431
   280  0000                     _TRISC3	set	31907
   281  0000                     _TRISC4	set	31908
   282  0000                     _nRBPU	set	32655
   283  00FE52                     STR_21:
   284  00FE52  52                 	db	82	;'R'
   285  00FE53  75                 	db	117	;'u'
   286  00FE54  6E                 	db	110	;'n'
   287  00FE55  6E                 	db	110	;'n'
   288  00FE56  69                 	db	105	;'i'
   289  00FE57  6E                 	db	110	;'n'
   290  00FE58  67                 	db	103	;'g'
   291  00FE59  7E                 	db	126
   292  00FE5A  7E                 	db	126
   293  00FE5B  7E                 	db	126
   294  00FE5C  20                 	db	32
   295  00FE5D  20                 	db	32
   296  00FE5E  20                 	db	32
   297  00FE5F  20                 	db	32
   298  00FE60  20                 	db	32
   299  00FE61  20                 	db	32
   300  00FE62  20                 	db	32
   301  00FE63  20                 	db	32
   302  00FE64  20                 	db	32
   303  00FE65  20                 	db	32
   304  00FE66  20                 	db	32
   305  00FE67  20                 	db	32
   306  00FE68  20                 	db	32
   307  00FE69  20                 	db	32
   308  00FE6A  00                 	db	0
   309  00FE6B                     STR_20:
   310  00FE6B  52                 	db	82	;'R'
   311  00FE6C  75                 	db	117	;'u'
   312  00FE6D  6E                 	db	110	;'n'
   313  00FE6E  6E                 	db	110	;'n'
   314  00FE6F  69                 	db	105	;'i'
   315  00FE70  6E                 	db	110	;'n'
   316  00FE71  67                 	db	103	;'g'
   317  00FE72  7E                 	db	126
   318  00FE73  7E                 	db	126
   319  00FE74  20                 	db	32
   320  00FE75  20                 	db	32
   321  00FE76  20                 	db	32
   322  00FE77  20                 	db	32
   323  00FE78  20                 	db	32
   324  00FE79  20                 	db	32
   325  00FE7A  20                 	db	32
   326  00FE7B  20                 	db	32
   327  00FE7C  20                 	db	32
   328  00FE7D  20                 	db	32
   329  00FE7E  20                 	db	32
   330  00FE7F  20                 	db	32
   331  00FE80  20                 	db	32
   332  00FE81  20                 	db	32
   333  00FE82  00                 	db	0
   334  00FE83                     STR_19:
   335  00FE83  52                 	db	82	;'R'
   336  00FE84  75                 	db	117	;'u'
   337  00FE85  6E                 	db	110	;'n'
   338  00FE86  6E                 	db	110	;'n'
   339  00FE87  69                 	db	105	;'i'
   340  00FE88  6E                 	db	110	;'n'
   341  00FE89  67                 	db	103	;'g'
   342  00FE8A  7E                 	db	126
   343  00FE8B  20                 	db	32
   344  00FE8C  20                 	db	32
   345  00FE8D  20                 	db	32
   346  00FE8E  20                 	db	32
   347  00FE8F  20                 	db	32
   348  00FE90  20                 	db	32
   349  00FE91  20                 	db	32
   350  00FE92  20                 	db	32
   351  00FE93  20                 	db	32
   352  00FE94  20                 	db	32
   353  00FE95  20                 	db	32
   354  00FE96  20                 	db	32
   355  00FE97  20                 	db	32
   356  00FE98  20                 	db	32
   357  00FE99  00                 	db	0
   358  00FE9A                     STR_17:
   359  00FE9A  54                 	db	84	;'T'
   360  00FE9B  6F                 	db	111	;'o'
   361  00FE9C  74                 	db	116	;'t'
   362  00FE9D  61                 	db	97	;'a'
   363  00FE9E  6C                 	db	108	;'l'
   364  00FE9F  20                 	db	32
   365  00FEA0  4F                 	db	79	;'O'
   366  00FEA1  70                 	db	112	;'p'
   367  00FEA2  65                 	db	101	;'e'
   368  00FEA3  72                 	db	114	;'r'
   369  00FEA4  61                 	db	97	;'a'
   370  00FEA5  74                 	db	116	;'t'
   371  00FEA6  69                 	db	105	;'i'
   372  00FEA7  6F                 	db	111	;'o'
   373  00FEA8  6E                 	db	110	;'n'
   374  00FEA9  20                 	db	32
   375  00FEAA  20                 	db	32
   376  00FEAB  20                 	db	32
   377  00FEAC  20                 	db	32
   378  00FEAD  20                 	db	32
   379  00FEAE  20                 	db	32
   380  00FEAF  20                 	db	32
   381  00FEB0  00                 	db	0
   382  00FEB1                     STR_4:
   383  00FEB1  44                 	db	68	;'D'
   384  00FEB2  61                 	db	97	;'a'
   385  00FEB3  74                 	db	116	;'t'
   386  00FEB4  65                 	db	101	;'e'
   387  00FEB5  3A                 	db	58	;':'
   388  00FEB6  20                 	db	32
   389  00FEB7  25                 	db	37
   390  00FEB8  30                 	db	48	;'0'
   391  00FEB9  32                 	db	50	;'2'
   392  00FEBA  78                 	db	120	;'x'
   393  00FEBB  2F                 	db	47
   394  00FEBC  25                 	db	37
   395  00FEBD  30                 	db	48	;'0'
   396  00FEBE  32                 	db	50	;'2'
   397  00FEBF  78                 	db	120	;'x'
   398  00FEC0  2F                 	db	47
   399  00FEC1  25                 	db	37
   400  00FEC2  30                 	db	48	;'0'
   401  00FEC3  32                 	db	50	;'2'
   402  00FEC4  78                 	db	120	;'x'
   403  00FEC5  20                 	db	32
   404  00FEC6  20                 	db	32
   405  00FEC7  00                 	db	0
   406  00FEC8                     STR_5:
   407  00FEC8  54                 	db	84	;'T'
   408  00FEC9  69                 	db	105	;'i'
   409  00FECA  6D                 	db	109	;'m'
   410  00FECB  65                 	db	101	;'e'
   411  00FECC  3A                 	db	58	;':'
   412  00FECD  20                 	db	32
   413  00FECE  25                 	db	37
   414  00FECF  30                 	db	48	;'0'
   415  00FED0  32                 	db	50	;'2'
   416  00FED1  78                 	db	120	;'x'
   417  00FED2  3A                 	db	58	;':'
   418  00FED3  25                 	db	37
   419  00FED4  30                 	db	48	;'0'
   420  00FED5  32                 	db	50	;'2'
   421  00FED6  78                 	db	120	;'x'
   422  00FED7  3A                 	db	58	;':'
   423  00FED8  25                 	db	37
   424  00FED9  30                 	db	48	;'0'
   425  00FEDA  32                 	db	50	;'2'
   426  00FEDB  78                 	db	120	;'x'
   427  00FEDC  20                 	db	32
   428  00FEDD  20                 	db	32
   429  00FEDE  00                 	db	0
   430  00FEDF                     STR_18:
   431  00FEDF  54                 	db	84	;'T'
   432  00FEE0  69                 	db	105	;'i'
   433  00FEE1  6D                 	db	109	;'m'
   434  00FEE2  65                 	db	101	;'e'
   435  00FEE3  3A                 	db	58	;':'
   436  00FEE4  20                 	db	32
   437  00FEE5  25                 	db	37
   438  00FEE6  64                 	db	100	;'d'
   439  00FEE7  20                 	db	32
   440  00FEE8  73                 	db	115	;'s'
   441  00FEE9  20                 	db	32
   442  00FEEA  20                 	db	32
   443  00FEEB  20                 	db	32
   444  00FEEC  20                 	db	32
   445  00FEED  20                 	db	32
   446  00FEEE  20                 	db	32
   447  00FEEF  20                 	db	32
   448  00FEF0  00                 	db	0
   449  00FEF1                     STR_24:
   450  00FEF1  30                 	db	48	;'0'
   451  00FEF2  31                 	db	49	;'1'
   452  00FEF3  32                 	db	50	;'2'
   453  00FEF4  33                 	db	51	;'3'
   454  00FEF5  34                 	db	52	;'4'
   455  00FEF6  35                 	db	53	;'5'
   456  00FEF7  36                 	db	54	;'6'
   457  00FEF8  37                 	db	55	;'7'
   458  00FEF9  38                 	db	56	;'8'
   459  00FEFA  39                 	db	57	;'9'
   460  00FEFB  61                 	db	97	;'a'
   461  00FEFC  62                 	db	98	;'b'
   462  00FEFD  63                 	db	99	;'c'
   463  00FEFE  64                 	db	100	;'d'
   464  00FEFF  65                 	db	101	;'e'
   465  00FF00  66                 	db	102	;'f'
   466  00FF01  00                 	db	0
   467  00FF02                     STR_2:
   468  00FF02  73                 	db	115	;'s'
   469  00FF03  74                 	db	116	;'t'
   470  00FF04  61                 	db	97	;'a'
   471  00FF05  6E                 	db	110	;'n'
   472  00FF06  64                 	db	100	;'d'
   473  00FF07  62                 	db	98	;'b'
   474  00FF08  79                 	db	121	;'y'
   475  00FF09  20                 	db	32
   476  00FF0A  20                 	db	32
   477  00FF0B  20                 	db	32
   478  00FF0C  20                 	db	32
   479  00FF0D  20                 	db	32
   480  00FF0E  20                 	db	32
   481  00FF0F  20                 	db	32
   482  00FF10  20                 	db	32
   483  00FF11  20                 	db	32
   484  00FF12  00                 	db	0
   485  00FF13                     STR_7:
   486  00FF13  54                 	db	84	;'T'
   487  00FF14  6F                 	db	111	;'o'
   488  00FF15  74                 	db	116	;'t'
   489  00FF16  61                 	db	97	;'a'
   490  00FF17  6C                 	db	108	;'l'
   491  00FF18  3A                 	db	58	;':'
   492  00FF19  20                 	db	32
   493  00FF1A  31                 	db	49	;'1'
   494  00FF1B  30                 	db	48	;'0'
   495  00FF1C  20                 	db	32
   496  00FF1D  20                 	db	32
   497  00FF1E  20                 	db	32
   498  00FF1F  20                 	db	32
   499  00FF20  20                 	db	32
   500  00FF21  20                 	db	32
   501  00FF22  20                 	db	32
   502  00FF23  00                 	db	0
   503  00FF24                     STR_6:
   504  00FF24  42                 	db	66	;'B'
   505  00FF25  6F                 	db	111	;'o'
   506  00FF26  74                 	db	116	;'t'
   507  00FF27  74                 	db	116	;'t'
   508  00FF28  6C                 	db	108	;'l'
   509  00FF29  65                 	db	101	;'e'
   510  00FF2A  20                 	db	32
   511  00FF2B  43                 	db	67	;'C'
   512  00FF2C  6F                 	db	111	;'o'
   513  00FF2D  75                 	db	117	;'u'
   514  00FF2E  6E                 	db	110	;'n'
   515  00FF2F  74                 	db	116	;'t'
   516  00FF30  20                 	db	32
   517  00FF31  20                 	db	32
   518  00FF32  20                 	db	32
   519  00FF33  20                 	db	32
   520  00FF34  00                 	db	0
   521  00FF35                     STR_11:
   522  00FF35  59                 	db	89	;'Y'
   523  00FF36  4F                 	db	79	;'O'
   524  00FF37  50                 	db	80	;'P'
   525  00FF38  2D                 	db	45
   526  00FF39  43                 	db	67	;'C'
   527  00FF3A  41                 	db	65	;'A'
   528  00FF3B  50                 	db	80	;'P'
   529  00FF3C  2D                 	db	45
   530  00FF3D  4C                 	db	76	;'L'
   531  00FF3E  42                 	db	66	;'B'
   532  00FF3F  4C                 	db	76	;'L'
   533  00FF40  3A                 	db	58	;':'
   534  00FF41  20                 	db	32
   535  00FF42  30                 	db	48	;'0'
   536  00FF43  20                 	db	32
   537  00FF44  20                 	db	32
   538  00FF45  00                 	db	0
   539  00FF46                     STR_10:
   540  00FF46  59                 	db	89	;'Y'
   541  00FF47  4F                 	db	79	;'O'
   542  00FF48  50                 	db	80	;'P'
   543  00FF49  2D                 	db	45
   544  00FF4A  43                 	db	67	;'C'
   545  00FF4B  41                 	db	65	;'A'
   546  00FF4C  50                 	db	80	;'P'
   547  00FF4D  2B                 	db	43
   548  00FF4E  4C                 	db	76	;'L'
   549  00FF4F  42                 	db	66	;'B'
   550  00FF50  4C                 	db	76	;'L'
   551  00FF51  3A                 	db	58	;':'
   552  00FF52  20                 	db	32
   553  00FF53  31                 	db	49	;'1'
   554  00FF54  20                 	db	32
   555  00FF55  20                 	db	32
   556  00FF56  00                 	db	0
   557  00FF57                     STR_9:
   558  00FF57  59                 	db	89	;'Y'
   559  00FF58  4F                 	db	79	;'O'
   560  00FF59  50                 	db	80	;'P'
   561  00FF5A  2B                 	db	43
   562  00FF5B  43                 	db	67	;'C'
   563  00FF5C  41                 	db	65	;'A'
   564  00FF5D  50                 	db	80	;'P'
   565  00FF5E  2D                 	db	45
   566  00FF5F  4C                 	db	76	;'L'
   567  00FF60  42                 	db	66	;'B'
   568  00FF61  4C                 	db	76	;'L'
   569  00FF62  3A                 	db	58	;':'
   570  00FF63  20                 	db	32
   571  00FF64  31                 	db	49	;'1'
   572  00FF65  20                 	db	32
   573  00FF66  20                 	db	32
   574  00FF67  00                 	db	0
   575  00FF68                     STR_8:
   576  00FF68  59                 	db	89	;'Y'
   577  00FF69  4F                 	db	79	;'O'
   578  00FF6A  50                 	db	80	;'P'
   579  00FF6B  2B                 	db	43
   580  00FF6C  43                 	db	67	;'C'
   581  00FF6D  41                 	db	65	;'A'
   582  00FF6E  50                 	db	80	;'P'
   583  00FF6F  2B                 	db	43
   584  00FF70  4C                 	db	76	;'L'
   585  00FF71  42                 	db	66	;'B'
   586  00FF72  4C                 	db	76	;'L'
   587  00FF73  3A                 	db	58	;':'
   588  00FF74  20                 	db	32
   589  00FF75  33                 	db	51	;'3'
   590  00FF76  20                 	db	32
   591  00FF77  20                 	db	32
   592  00FF78  00                 	db	0
   593  00FF79                     STR_12:
   594  00FF79  45                 	db	69	;'E'
   595  00FF7A  53                 	db	83	;'S'
   596  00FF7B  4B                 	db	75	;'K'
   597  00FF7C  41                 	db	65	;'A'
   598  00FF7D  2B                 	db	43
   599  00FF7E  43                 	db	67	;'C'
   600  00FF7F  41                 	db	65	;'A'
   601  00FF80  50                 	db	80	;'P'
   602  00FF81  2B                 	db	43
   603  00FF82  4C                 	db	76	;'L'
   604  00FF83  42                 	db	66	;'B'
   605  00FF84  4C                 	db	76	;'L'
   606  00FF85  3A                 	db	58	;':'
   607  00FF86  20                 	db	32
   608  00FF87  31                 	db	49	;'1'
   609  00FF88  20                 	db	32
   610  00FF89  00                 	db	0
   611  00FF8A                     STR_14:
   612  00FF8A  45                 	db	69	;'E'
   613  00FF8B  53                 	db	83	;'S'
   614  00FF8C  4B                 	db	75	;'K'
   615  00FF8D  41                 	db	65	;'A'
   616  00FF8E  2D                 	db	45
   617  00FF8F  43                 	db	67	;'C'
   618  00FF90  41                 	db	65	;'A'
   619  00FF91  50                 	db	80	;'P'
   620  00FF92  2B                 	db	43
   621  00FF93  4C                 	db	76	;'L'
   622  00FF94  42                 	db	66	;'B'
   623  00FF95  4C                 	db	76	;'L'
   624  00FF96  3A                 	db	58	;':'
   625  00FF97  20                 	db	32
   626  00FF98  31                 	db	49	;'1'
   627  00FF99  20                 	db	32
   628  00FF9A  00                 	db	0
   629  00FF9B                     STR_13:
   630  00FF9B  45                 	db	69	;'E'
   631  00FF9C  53                 	db	83	;'S'
   632  00FF9D  4B                 	db	75	;'K'
   633  00FF9E  41                 	db	65	;'A'
   634  00FF9F  2B                 	db	43
   635  00FFA0  43                 	db	67	;'C'
   636  00FFA1  41                 	db	65	;'A'
   637  00FFA2  50                 	db	80	;'P'
   638  00FFA3  2D                 	db	45
   639  00FFA4  4C                 	db	76	;'L'
   640  00FFA5  42                 	db	66	;'B'
   641  00FFA6  4C                 	db	76	;'L'
   642  00FFA7  3A                 	db	58	;':'
   643  00FFA8  20                 	db	32
   644  00FFA9  31                 	db	49	;'1'
   645  00FFAA  20                 	db	32
   646  00FFAB  00                 	db	0
   647  00FFAC                     STR_15:
   648  00FFAC  45                 	db	69	;'E'
   649  00FFAD  53                 	db	83	;'S'
   650  00FFAE  4B                 	db	75	;'K'
   651  00FFAF  41                 	db	65	;'A'
   652  00FFB0  2D                 	db	45
   653  00FFB1  43                 	db	67	;'C'
   654  00FFB2  41                 	db	65	;'A'
   655  00FFB3  50                 	db	80	;'P'
   656  00FFB4  2D                 	db	45
   657  00FFB5  4C                 	db	76	;'L'
   658  00FFB6  42                 	db	66	;'B'
   659  00FFB7  4C                 	db	76	;'L'
   660  00FFB8  3A                 	db	58	;':'
   661  00FFB9  20                 	db	32
   662  00FFBA  32                 	db	50	;'2'
   663  00FFBB  20                 	db	32
   664  00FFBC  00                 	db	0
   665  00FFBD                     STR_22:
   666  00FFBD  4F                 	db	79	;'O'
   667  00FFBE  70                 	db	112	;'p'
   668  00FFBF  65                 	db	101	;'e'
   669  00FFC0  72                 	db	114	;'r'
   670  00FFC1  61                 	db	97	;'a'
   671  00FFC2  74                 	db	116	;'t'
   672  00FFC3  69                 	db	105	;'i'
   673  00FFC4  6F                 	db	111	;'o'
   674  00FFC5  6E                 	db	110	;'n'
   675  00FFC6  20                 	db	32
   676  00FFC7  44                 	db	68	;'D'
   677  00FFC8  6F                 	db	111	;'o'
   678  00FFC9  6E                 	db	110	;'n'
   679  00FFCA  65                 	db	101	;'e'
   680  00FFCB  21                 	db	33
   681  00FFCC  00                 	db	0
   682  00FFCD                     STR_23:
   683  00FFCD  45                 	db	69	;'E'
   684  00FFCE  4D                 	db	77	;'M'
   685  00FFCF  45                 	db	69	;'E'
   686  00FFD0  52                 	db	82	;'R'
   687  00FFD1  47                 	db	71	;'G'
   688  00FFD2  45                 	db	69	;'E'
   689  00FFD3  4E                 	db	78	;'N'
   690  00FFD4  43                 	db	67	;'C'
   691  00FFD5  59                 	db	89	;'Y'
   692  00FFD6  20                 	db	32
   693  00FFD7  53                 	db	83	;'S'
   694  00FFD8  54                 	db	84	;'T'
   695  00FFD9  4F                 	db	79	;'O'
   696  00FFDA  50                 	db	80	;'P'
   697  00FFDB  00                 	db	0
   698  00FFDC                     STR_1:
   699  00FFDC  62                 	db	98	;'b'
   700  00FFDD  61                 	db	97	;'a'
   701  00FFDE  64                 	db	100	;'d'
   702  00FFDF  20                 	db	32
   703  00FFE0  69                 	db	105	;'i'
   704  00FFE1  6E                 	db	110	;'n'
   705  00FFE2  74                 	db	116	;'t'
   706  00FFE3  65                 	db	101	;'e'
   707  00FFE4  72                 	db	114	;'r'
   708  00FFE5  72                 	db	114	;'r'
   709  00FFE6  75                 	db	117	;'u'
   710  00FFE7  70                 	db	112	;'p'
   711  00FFE8  74                 	db	116	;'t'
   712  00FFE9  00                 	db	0
   713  00FFEA                     STR_3:
   714  00FFEA  50                 	db	80	;'P'
   715  00FFEB  4F                 	db	79	;'O'
   716  00FFEC  52                 	db	82	;'R'
   717  00FFED  54                 	db	84	;'T'
   718  00FFEE  42                 	db	66	;'B'
   719  00FFEF  3A                 	db	58	;':'
   720  00FFF0  20                 	db	32
   721  00FFF1  25                 	db	37
   722  00FFF2  64                 	db	100	;'d'
   723  00FFF3  00                 	db	0
   724  00FFF4                     STR_16:
   725  00FFF4  45                 	db	69	;'E'
   726  00FFF5  52                 	db	82	;'R'
   727  00FFF6  52                 	db	82	;'R'
   728  00FFF7  4F                 	db	79	;'O'
   729  00FFF8  52                 	db	82	;'R'
   730  00FFF9  3A                 	db	58	;':'
   731  00FFFA  20                 	db	32
   732  00FFFB  25                 	db	37
   733  00FFFC  64                 	db	100	;'d'
   734  00FFFD  00                 	db	0
   735                           
   736                           ; #config settings
   737  00FFFE  00                 	db	0	; dummy byte at the end
   738  0000                     
   739                           	psect	cinit
   740  0021DE                     __pcinit:
   741                           	opt stack 0
   742  0021DE                     start_initialization:
   743                           	opt stack 0
   744  0021DE                     __initialization:
   745                           	opt stack 0
   746                           
   747                           ; Initialize objects allocated to BANK0 (2 bytes)
   748                           ; load TBLPTR registers with __pidataBANK0
   749  0021DE  0EB8               	movlw	low __pidataBANK0
   750  0021E0  6EF6               	movwf	tblptrl,c
   751  0021E2  0E24               	movlw	high __pidataBANK0
   752  0021E4  6EF7               	movwf	tblptrh,c
   753  0021E6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   754  0021E8  6EF8               	movwf	tblptru,c
   755  0021EA  0009               	tblrd		*+	;fetch initializer
   756  0021EC  CFF5 F0C4          	movff	tablat,__pdataBANK0
   757  0021F0  0009               	tblrd		*+	;fetch initializer
   758  0021F2  CFF5 F0C5          	movff	tablat,__pdataBANK0+1
   759                           
   760                           ; Clear objects allocated to BANK0 (14 bytes)
   761  0021F6  EE00  F0B6         	lfsr	0,__pbssBANK0
   762  0021FA  0E0E               	movlw	14
   763  0021FC                     clear_0:
   764  0021FC  6AEE               	clrf	postinc0,c
   765  0021FE  06E8               	decf	wreg,f,c
   766  002200  E1FD               	bnz	clear_0
   767                           
   768                           ; Clear objects allocated to COMRAM (8 bytes)
   769  002202  EE00  F076         	lfsr	0,__pbssCOMRAM
   770  002206  0E08               	movlw	8
   771  002208                     clear_1:
   772  002208  6AEE               	clrf	postinc0,c
   773  00220A  06E8               	decf	wreg,f,c
   774  00220C  E1FD               	bnz	clear_1
   775  00220E                     end_of_initialization:
   776                           	opt stack 0
   777  00220E                     __end_of__initialization:
   778                           	opt stack 0
   779  00220E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   780  002210  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   781  002212  0E00               	movlw	low (__Lmediumconst shr (0+16))
   782  002214  6EF8               	movwf	tblptru,c
   783  002216  0100               	movlb	0
   784  002218  EF4C  F008         	goto	_main	;jump to C main() function
   785                           tblptru	equ	0xFF8
   786                           tblptrh	equ	0xFF7
   787                           tblptrl	equ	0xFF6
   788                           tablat	equ	0xFF5
   789                           postinc0	equ	0xFEE
   790                           wreg	equ	0xFE8
   791                           
   792                           	psect	bssCOMRAM
   793  000076                     __pbssCOMRAM:
   794                           	opt stack 0
   795  000076                     _end_time:
   796                           	opt stack 0
   797  000076                     	ds	2
   798  000078                     _errno:
   799                           	opt stack 0
   800  000078                     	ds	2
   801  00007A                     _ptr:
   802                           	opt stack 0
   803  00007A                     	ds	2
   804  00007C                     _start_time:
   805                           	opt stack 0
   806  00007C                     	ds	2
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           
   814                           	psect	bssBANK0
   815  0000B6                     __pbssBANK0:
   816                           	opt stack 0
   817  0000B6                     _time:
   818                           	opt stack 0
   819  0000B6                     	ds	7
   820  0000BD                     _etime:
   821                           	opt stack 0
   822  0000BD                     	ds	2
   823  0000BF                     _operation_disp:
   824                           	opt stack 0
   825  0000BF                     	ds	2
   826  0000C1                     _stime:
   827                           	opt stack 0
   828  0000C1                     	ds	2
   829  0000C3                     _curr_state:
   830                           	opt stack 0
   831  0000C3                     	ds	1
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           
   839                           	psect	dataBANK0
   840  0000C4                     __pdataBANK0:
   841                           	opt stack 0
   842  0000C4                     _bottle_count_disp:
   843                           	opt stack 0
   844  0000C4                     	ds	2
   845                           tblptru	equ	0xFF8
   846                           tblptrh	equ	0xFF7
   847                           tblptrl	equ	0xFF6
   848                           tablat	equ	0xFF5
   849                           postinc0	equ	0xFEE
   850                           wreg	equ	0xFE8
   851                           
   852                           	psect	cstackBANK0
   853  000080                     __pcstackBANK0:
   854                           	opt stack 0
   855  000080                     ??_isr:
   856                           
   857                           ; 1 bytes @ 0x0
   858  000080                     	ds	16
   859  000090                     ??_isdigit:
   860  000090                     ??_I2C_Master_Wait:
   861  000090                     ?___wmul:
   862                           	opt stack 0
   863  000090                     ?___awmod:
   864                           	opt stack 0
   865  000090                     ?___lwdiv:
   866                           	opt stack 0
   867  000090                     ?___lldiv:
   868                           	opt stack 0
   869  000090                     lcdNibble@temp:
   870                           	opt stack 0
   871  000090                     ___wmul@multiplier:
   872                           	opt stack 0
   873  000090                     ___awmod@dividend:
   874                           	opt stack 0
   875  000090                     ___lwdiv@dividend:
   876                           	opt stack 0
   877  000090                     ___lldiv@dividend:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x10
   881  000090                     	ds	1
   882  000091                     I2C_Master_Read@a:
   883                           	opt stack 0
   884  000091                     lcdNibble@data:
   885                           	opt stack 0
   886  000091                     _isdigit$777:
   887                           	opt stack 0
   888  000091                     I2C_Master_Write@d:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x11
   892  000091                     	ds	1
   893  000092                     I2C_Master_Read@temp:
   894                           	opt stack 0
   895  000092                     lcdInst@data:
   896                           	opt stack 0
   897  000092                     putch@data:
   898                           	opt stack 0
   899  000092                     isdigit@c:
   900                           	opt stack 0
   901  000092                     ___wmul@multiplicand:
   902                           	opt stack 0
   903  000092                     ___awmod@divisor:
   904                           	opt stack 0
   905  000092                     ___lwdiv@divisor:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x12
   909  000092                     	ds	1
   910  000093                     ??_initLCD:
   911                           
   912                           ; 1 bytes @ 0x13
   913  000093                     	ds	1
   914  000094                     ___awmod@counter:
   915                           	opt stack 0
   916  000094                     ___wmul@product:
   917                           	opt stack 0
   918  000094                     ___lwdiv@quotient:
   919                           	opt stack 0
   920  000094                     ___lldiv@divisor:
   921                           	opt stack 0
   922                           
   923                           ; 4 bytes @ 0x14
   924  000094                     	ds	1
   925  000095                     ___awmod@sign:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x15
   929  000095                     	ds	1
   930  000096                     ___lwdiv@counter:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x16
   934  000096                     	ds	1
   935  000097                     ?___lwmod:
   936                           	opt stack 0
   937  000097                     ___lwmod@dividend:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x17
   941  000097                     	ds	1
   942  000098                     ___lldiv@quotient:
   943                           	opt stack 0
   944                           
   945                           ; 4 bytes @ 0x18
   946  000098                     	ds	1
   947  000099                     ___lwmod@divisor:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x19
   951  000099                     	ds	2
   952  00009B                     ___lwmod@counter:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x1B
   956  00009B                     	ds	1
   957  00009C                     ?_printf:
   958                           	opt stack 0
   959  00009C                     ___lldiv@counter:
   960                           	opt stack 0
   961  00009C                     printf@f:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x1C
   965  00009C                     	ds	1
   966  00009D                     I2C_Master_Init@c:
   967                           	opt stack 0
   968                           
   969                           ; 4 bytes @ 0x1D
   970  00009D                     	ds	4
   971  0000A1                     ??_I2C_Master_Init:
   972                           
   973                           ; 1 bytes @ 0x21
   974  0000A1                     	ds	3
   975  0000A4                     ??_printf:
   976                           
   977                           ; 1 bytes @ 0x24
   978  0000A4                     	ds	4
   979  0000A8                     printf@idx:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x28
   983  0000A8                     	ds	1
   984  0000A9                     printf@ap:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x29
   988  0000A9                     	ds	2
   989  0000AB                     printf@prec:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x2B
   993  0000AB                     	ds	1
   994  0000AC                     printf@val:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x2C
   998  0000AC                     	ds	2
   999  0000AE                     printf@flag:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x2E
  1003  0000AE                     	ds	1
  1004  0000AF                     printf@width:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x2F
  1008  0000AF                     	ds	2
  1009  0000B1                     printf@c:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x31
  1013  0000B1                     	ds	1
  1014  0000B2                     ??_operation:
  1015  0000B2                     date_time@i:
  1016                           	opt stack 0
  1017  0000B2                     bottle_time@time:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x32
  1021  0000B2                     	ds	2
  1022  0000B4                     ??_main:
  1023                           
  1024                           ; 1 bytes @ 0x34
  1025  0000B4                     	ds	2
  1026                           tblptru	equ	0xFF8
  1027                           tblptrh	equ	0xFF7
  1028                           tblptrl	equ	0xFF6
  1029                           tablat	equ	0xFF5
  1030                           postinc0	equ	0xFEE
  1031                           wreg	equ	0xFE8
  1032                           
  1033                           	psect	cstackCOMRAM
  1034  000001                     __pcstackCOMRAM:
  1035                           	opt stack 0
  1036  000001                     ??_test:
  1037  000001                     ??i2_I2C_Master_Wait:
  1038  000001                     ??i2_isdigit:
  1039  000001                     ?___awdiv:
  1040                           	opt stack 0
  1041  000001                     ?i2___wmul:
  1042                           	opt stack 0
  1043  000001                     ?i2___lwdiv:
  1044                           	opt stack 0
  1045  000001                     ?___ftpack:
  1046                           	opt stack 0
  1047  000001                     ?_frexp:
  1048                           	opt stack 0
  1049  000001                     ?___ftneg:
  1050                           	opt stack 0
  1051  000001                     i2lcdNibble@temp:
  1052                           	opt stack 0
  1053  000001                     servo_rotate@degree:
  1054                           	opt stack 0
  1055  000001                     ___awdiv@dividend:
  1056                           	opt stack 0
  1057  000001                     i2___wmul@multiplier:
  1058                           	opt stack 0
  1059  000001                     i2___lwdiv@dividend:
  1060                           	opt stack 0
  1061  000001                     ___ftpack@arg:
  1062                           	opt stack 0
  1063  000001                     ___ftge@ff1:
  1064                           	opt stack 0
  1065  000001                     ___ftneg@f1:
  1066                           	opt stack 0
  1067  000001                     frexp@value:
  1068                           	opt stack 0
  1069                           
  1070                           ; 3 bytes @ 0x0
  1071  000001                     	ds	1
  1072  000002                     i2I2C_Master_Read@a:
  1073                           	opt stack 0
  1074  000002                     i2lcdNibble@data:
  1075                           	opt stack 0
  1076  000002                     i2_isdigit$777:
  1077                           	opt stack 0
  1078  000002                     i2I2C_Master_Write@d:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x1
  1082  000002                     	ds	1
  1083  000003                     ??_servo_rotate:
  1084  000003                     i2I2C_Master_Read@temp:
  1085                           	opt stack 0
  1086  000003                     i2lcdInst@data:
  1087                           	opt stack 0
  1088  000003                     i2putch@data:
  1089                           	opt stack 0
  1090  000003                     i2isdigit@c:
  1091                           	opt stack 0
  1092  000003                     ___awdiv@divisor:
  1093                           	opt stack 0
  1094  000003                     i2___wmul@multiplicand:
  1095                           	opt stack 0
  1096  000003                     i2___lwdiv@divisor:
  1097                           	opt stack 0
  1098                           
  1099                           ; 2 bytes @ 0x2
  1100  000003                     	ds	1
  1101  000004                     read_time@i:
  1102                           	opt stack 0
  1103  000004                     ___ftpack@exp:
  1104                           	opt stack 0
  1105  000004                     frexp@eptr:
  1106                           	opt stack 0
  1107  000004                     ___ftge@ff2:
  1108                           	opt stack 0
  1109                           
  1110                           ; 3 bytes @ 0x3
  1111  000004                     	ds	1
  1112  000005                     ___awdiv@counter:
  1113                           	opt stack 0
  1114  000005                     ___ftpack@sign:
  1115                           	opt stack 0
  1116  000005                     servo_rotate@i:
  1117                           	opt stack 0
  1118  000005                     i2___wmul@product:
  1119                           	opt stack 0
  1120  000005                     i2___lwdiv@quotient:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x4
  1124  000005                     	ds	1
  1125  000006                     ??___ftpack:
  1126  000006                     ??_frexp:
  1127  000006                     ___awdiv@sign:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x5
  1131  000006                     	ds	1
  1132  000007                     ??___ftge:
  1133  000007                     i2___lwdiv@counter:
  1134                           	opt stack 0
  1135  000007                     ___awdiv@quotient:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x6
  1139  000007                     	ds	1
  1140  000008                     ?i2___lwmod:
  1141                           	opt stack 0
  1142  000008                     i2___lwmod@dividend:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x7
  1146  000008                     	ds	1
  1147  000009                     ?___ftdiv:
  1148                           	opt stack 0
  1149  000009                     ?___awtoft:
  1150                           	opt stack 0
  1151  000009                     ?___lltoft:
  1152                           	opt stack 0
  1153  000009                     ___awtoft@c:
  1154                           	opt stack 0
  1155  000009                     ___ftdiv@f1:
  1156                           	opt stack 0
  1157  000009                     ___lltoft@c:
  1158                           	opt stack 0
  1159                           
  1160                           ; 4 bytes @ 0x8
  1161  000009                     	ds	1
  1162  00000A                     i2___lwmod@divisor:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x9
  1166  00000A                     	ds	2
  1167  00000C                     ___awtoft@sign:
  1168                           	opt stack 0
  1169  00000C                     i2___lwmod@counter:
  1170                           	opt stack 0
  1171  00000C                     ___ftdiv@f2:
  1172                           	opt stack 0
  1173                           
  1174                           ; 3 bytes @ 0xB
  1175  00000C                     	ds	1
  1176  00000D                     ??___lltoft:
  1177  00000D                     ?i2_printf:
  1178                           	opt stack 0
  1179  00000D                     ?___ftmul:
  1180                           	opt stack 0
  1181  00000D                     i2printf@f:
  1182                           	opt stack 0
  1183  00000D                     ___ftmul@f1:
  1184                           	opt stack 0
  1185                           
  1186                           ; 3 bytes @ 0xC
  1187  00000D                     	ds	2
  1188  00000F                     ??___ftdiv:
  1189  00000F                     ??i2_printf:
  1190                           
  1191                           ; 1 bytes @ 0xE
  1192  00000F                     	ds	1
  1193  000010                     ___ftmul@f2:
  1194                           	opt stack 0
  1195                           
  1196                           ; 3 bytes @ 0xF
  1197  000010                     	ds	1
  1198  000011                     ___lltoft@exp:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x10
  1202  000011                     	ds	1
  1203  000012                     ___ftdiv@cntr:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x11
  1207  000012                     	ds	1
  1208  000013                     ??___ftmul:
  1209  000013                     i2printf@idx:
  1210                           	opt stack 0
  1211  000013                     ___ftdiv@f3:
  1212                           	opt stack 0
  1213                           
  1214                           ; 3 bytes @ 0x12
  1215  000013                     	ds	1
  1216  000014                     i2printf@ap:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x13
  1220  000014                     	ds	2
  1221  000016                     ___ftdiv@exp:
  1222                           	opt stack 0
  1223  000016                     ___ftmul@exp:
  1224                           	opt stack 0
  1225  000016                     i2printf@prec:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x15
  1229  000016                     	ds	1
  1230  000017                     ___ftdiv@sign:
  1231                           	opt stack 0
  1232  000017                     i2printf@val:
  1233                           	opt stack 0
  1234  000017                     ___ftmul@f3_as_product:
  1235                           	opt stack 0
  1236                           
  1237                           ; 3 bytes @ 0x16
  1238  000017                     	ds	2
  1239  000019                     i2printf@flag:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x18
  1243  000019                     	ds	1
  1244  00001A                     ___ftmul@cntr:
  1245                           	opt stack 0
  1246  00001A                     i2printf@width:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x19
  1250  00001A                     	ds	1
  1251  00001B                     ___ftmul@sign:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x1A
  1255  00001B                     	ds	1
  1256  00001C                     ?___ftadd:
  1257                           	opt stack 0
  1258  00001C                     i2printf@c:
  1259                           	opt stack 0
  1260  00001C                     ___ftadd@f1:
  1261                           	opt stack 0
  1262                           
  1263                           ; 3 bytes @ 0x1B
  1264  00001C                     	ds	3
  1265  00001F                     ___ftadd@f2:
  1266                           	opt stack 0
  1267                           
  1268                           ; 3 bytes @ 0x1E
  1269  00001F                     	ds	3
  1270  000022                     ??___ftadd:
  1271                           
  1272                           ; 1 bytes @ 0x21
  1273  000022                     	ds	3
  1274  000025                     ___ftadd@sign:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x24
  1278  000025                     	ds	1
  1279  000026                     ___ftadd@exp2:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x25
  1283  000026                     	ds	1
  1284  000027                     ___ftadd@exp1:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x26
  1288  000027                     	ds	1
  1289  000028                     ?___ftsub:
  1290                           	opt stack 0
  1291  000028                     ?_eval_poly:
  1292                           	opt stack 0
  1293  000028                     ?___fttol:
  1294                           	opt stack 0
  1295  000028                     ___ftsub@f1:
  1296                           	opt stack 0
  1297  000028                     ___fttol@f1:
  1298                           	opt stack 0
  1299  000028                     eval_poly@x:
  1300                           	opt stack 0
  1301                           
  1302                           ; 3 bytes @ 0x27
  1303  000028                     	ds	3
  1304  00002B                     eval_poly@d:
  1305                           	opt stack 0
  1306  00002B                     ___ftsub@f2:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x2A
  1310  00002B                     	ds	1
  1311  00002C                     ??___fttol:
  1312                           
  1313                           ; 1 bytes @ 0x2B
  1314  00002C                     	ds	1
  1315  00002D                     eval_poly@n:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x2C
  1319  00002D                     	ds	1
  1320  00002E                     
  1321                           ; 1 bytes @ 0x2D
  1322  00002E                     	ds	1
  1323  00002F                     ??_eval_poly:
  1324                           
  1325                           ; 1 bytes @ 0x2E
  1326  00002F                     	ds	2
  1327  000031                     ___fttol@sign1:
  1328                           	opt stack 0
  1329  000031                     eval_poly@res:
  1330                           	opt stack 0
  1331                           
  1332                           ; 3 bytes @ 0x30
  1333  000031                     	ds	1
  1334  000032                     ___fttol@lval:
  1335                           	opt stack 0
  1336                           
  1337                           ; 4 bytes @ 0x31
  1338  000032                     	ds	2
  1339  000034                     ?_log:
  1340                           	opt stack 0
  1341  000034                     ?_ldexp:
  1342                           	opt stack 0
  1343  000034                     ldexp@value:
  1344                           	opt stack 0
  1345  000034                     log@x:
  1346                           	opt stack 0
  1347                           
  1348                           ; 3 bytes @ 0x33
  1349  000034                     	ds	2
  1350  000036                     ___fttol@exp1:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x35
  1354  000036                     	ds	1
  1355  000037                     ?___altoft:
  1356                           	opt stack 0
  1357  000037                     ldexp@newexp:
  1358                           	opt stack 0
  1359  000037                     log@exponent:
  1360                           	opt stack 0
  1361  000037                     ___altoft@c:
  1362                           	opt stack 0
  1363                           
  1364                           ; 4 bytes @ 0x36
  1365  000037                     	ds	2
  1366  000039                     ??_ldexp:
  1367                           
  1368                           ; 1 bytes @ 0x38
  1369  000039                     	ds	2
  1370  00003B                     ??___altoft:
  1371                           
  1372                           ; 1 bytes @ 0x3A
  1373  00003B                     	ds	4
  1374  00003F                     ___altoft@exp:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x3E
  1378  00003F                     	ds	1
  1379  000040                     ___altoft@sign:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x3F
  1383  000040                     	ds	1
  1384  000041                     ?_floor:
  1385                           	opt stack 0
  1386  000041                     floor@x:
  1387                           	opt stack 0
  1388                           
  1389                           ; 3 bytes @ 0x40
  1390  000041                     	ds	3
  1391  000044                     floor@i:
  1392                           	opt stack 0
  1393                           
  1394                           ; 3 bytes @ 0x43
  1395  000044                     	ds	3
  1396  000047                     floor@expon:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x46
  1400  000047                     	ds	2
  1401  000049                     ?_exp:
  1402                           	opt stack 0
  1403  000049                     exp@x:
  1404                           	opt stack 0
  1405                           
  1406                           ; 3 bytes @ 0x48
  1407  000049                     	ds	3
  1408  00004C                     _exp$1216:
  1409                           	opt stack 0
  1410                           
  1411                           ; 3 bytes @ 0x4B
  1412  00004C                     	ds	3
  1413  00004F                     exp@exponent:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x4E
  1417  00004F                     	ds	2
  1418  000051                     exp@sign:
  1419                           	opt stack 0
  1420                           
  1421                           ; 1 bytes @ 0x50
  1422  000051                     	ds	1
  1423  000052                     ?_pow:
  1424                           	opt stack 0
  1425  000052                     pow@x:
  1426                           	opt stack 0
  1427                           
  1428                           ; 3 bytes @ 0x51
  1429  000052                     	ds	3
  1430  000055                     pow@y:
  1431                           	opt stack 0
  1432                           
  1433                           ; 3 bytes @ 0x54
  1434  000055                     	ds	3
  1435  000058                     _pow$1214:
  1436                           	opt stack 0
  1437                           
  1438                           ; 3 bytes @ 0x57
  1439  000058                     	ds	3
  1440  00005B                     _pow$1215:
  1441                           	opt stack 0
  1442                           
  1443                           ; 3 bytes @ 0x5A
  1444  00005B                     	ds	3
  1445  00005E                     pow@sign:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x5D
  1449  00005E                     	ds	1
  1450  00005F                     pow@yi:
  1451                           	opt stack 0
  1452                           
  1453                           ; 4 bytes @ 0x5E
  1454  00005F                     	ds	4
  1455  000063                     ?_dec_to_hex:
  1456                           	opt stack 0
  1457  000063                     dec_to_hex@num:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x62
  1461  000063                     	ds	2
  1462  000065                     _dec_to_hex$1212:
  1463                           	opt stack 0
  1464                           
  1465                           ; 3 bytes @ 0x64
  1466  000065                     	ds	3
  1467  000068                     _dec_to_hex$1213:
  1468                           	opt stack 0
  1469                           
  1470                           ; 3 bytes @ 0x67
  1471  000068                     	ds	3
  1472  00006B                     dec_to_hex@temp:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x6A
  1476  00006B                     	ds	2
  1477  00006D                     dec_to_hex@i:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x6C
  1481  00006D                     	ds	2
  1482  00006F                     dec_to_hex@hexnum:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x6E
  1486  00006F                     	ds	2
  1487  000071                     dec_to_hex@quotient:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x70
  1491  000071                     	ds	2
  1492  000073                     _isr$1300:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x72
  1496  000073                     	ds	2
  1497  000075                     isr@i:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x74
  1501  000075                     	ds	1
  1502                           tblptru	equ	0xFF8
  1503                           tblptrh	equ	0xFF7
  1504                           tblptrl	equ	0xFF6
  1505                           tablat	equ	0xFF5
  1506                           postinc0	equ	0xFEE
  1507                           wreg	equ	0xFE8
  1508                           
  1509 ;;
  1510 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1511 ;;
  1512 ;; *************** function _main *****************
  1513 ;; Defined at:
  1514 ;;		line 58 in file "main.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;		None
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1531 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;Total ram usage:        2 bytes
  1533 ;; Hardware stack levels required when called:   11
  1534 ;; This function calls:
  1535 ;;		_I2C_Master_Init
  1536 ;;		_bottle_count
  1537 ;;		_bottle_time
  1538 ;;		_date_time
  1539 ;;		_emergencystop
  1540 ;;		_initLCD
  1541 ;;		_operation
  1542 ;;		_operationend
  1543 ;;		_standby
  1544 ;; This function is called by:
  1545 ;;		Startup code after reset
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text0
  1550  001098                     __ptext0:
  1551                           	opt stack 0
  1552  001098                     _main:
  1553                           	opt stack 20
  1554                           
  1555                           ;main.c: 62: TRISA = 0xFF;
  1556                           
  1557                           ;incstack = 0
  1558  001098  6892               	setf	3986,c	;volatile
  1559                           
  1560                           ;main.c: 63: TRISB = 0xFF;
  1561  00109A  6893               	setf	3987,c	;volatile
  1562                           
  1563                           ;main.c: 64: TRISC = 0x00;
  1564  00109C  0E00               	movlw	0
  1565  00109E  6E94               	movwf	3988,c	;volatile
  1566                           
  1567                           ;main.c: 65: TRISD = 0x00;
  1568  0010A0  0E00               	movlw	0
  1569  0010A2  6E95               	movwf	3989,c	;volatile
  1570                           
  1571                           ;main.c: 66: TRISE = 0x00;
  1572  0010A4  0E00               	movlw	0
  1573  0010A6  6E96               	movwf	3990,c	;volatile
  1574                           
  1575                           ;main.c: 68: LATA = 0x00;
  1576  0010A8  0E00               	movlw	0
  1577  0010AA  6E89               	movwf	3977,c	;volatile
  1578                           
  1579                           ;main.c: 69: LATB = 0x00;
  1580  0010AC  0E00               	movlw	0
  1581  0010AE  6E8A               	movwf	3978,c	;volatile
  1582                           
  1583                           ;main.c: 70: LATC = 0x00;
  1584  0010B0  0E00               	movlw	0
  1585  0010B2  6E8B               	movwf	3979,c	;volatile
  1586                           
  1587                           ;main.c: 71: LATD = 0x00;
  1588  0010B4  0E00               	movlw	0
  1589  0010B6  6E8C               	movwf	3980,c	;volatile
  1590                           
  1591                           ;main.c: 72: LATE = 0x00;
  1592  0010B8  0E00               	movlw	0
  1593  0010BA  6E8D               	movwf	3981,c	;volatile
  1594                           
  1595                           ;main.c: 74: ADCON0 = 0x00;
  1596  0010BC  0E00               	movlw	0
  1597  0010BE  6EC2               	movwf	4034,c	;volatile
  1598                           
  1599                           ;main.c: 75: ADCON1 = 0xFF;
  1600  0010C0  68C1               	setf	4033,c	;volatile
  1601                           
  1602                           ;main.c: 77: INT1IE = 1;
  1603  0010C2  86F0               	bsf	intcon3,3,c	;volatile
  1604                           
  1605                           ;main.c: 79: nRBPU = 0;
  1606  0010C4  9EF1               	bcf	intcon2,7,c	;volatile
  1607                           
  1608                           ;main.c: 81: initLCD();
  1609  0010C6  EC5F  F010         	call	_initLCD	;wreg free
  1610                           
  1611                           ;main.c: 82: I2C_Master_Init(10000);
  1612  0010CA  0E10               	movlw	16
  1613  0010CC  0100               	movlb	0	; () banked
  1614  0010CE  6F9D               	movwf	I2C_Master_Init@c& (0+255),b
  1615  0010D0  0E27               	movlw	39
  1616  0010D2  6F9E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1617  0010D4  0E00               	movlw	0
  1618  0010D6  6F9F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1619  0010D8  0E00               	movlw	0
  1620  0010DA  6FA0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1621  0010DC  ECD8  F00F         	call	_I2C_Master_Init	;wreg free
  1622                           
  1623                           ;main.c: 84: TMR0 = 0;
  1624  0010E0  0E00               	movlw	0
  1625  0010E2  6ED7               	movwf	4055,c	;volatile
  1626  0010E4  0E00               	movlw	0
  1627  0010E6  6ED6               	movwf	4054,c	;volatile
  1628                           
  1629                           ;main.c: 85: T08BIT = 0;
  1630  0010E8  9CD5               	bcf	4053,6,c	;volatile
  1631                           
  1632                           ;main.c: 86: T0CS = 0;
  1633  0010EA  9AD5               	bcf	4053,5,c	;volatile
  1634                           
  1635                           ;main.c: 87: PSA = 0;
  1636  0010EC  96D5               	bcf	4053,3,c	;volatile
  1637                           
  1638                           ;main.c: 88: T0PS2 = 1;
  1639  0010EE  84D5               	bsf	4053,2,c	;volatile
  1640                           
  1641                           ;main.c: 89: T0PS1 = 1;
  1642  0010F0  82D5               	bsf	4053,1,c	;volatile
  1643                           
  1644                           ;main.c: 90: T0PS0 = 1;
  1645  0010F2  80D5               	bsf	4053,0,c	;volatile
  1646                           
  1647                           ;main.c: 94: (INTCONbits.GIE = 1);
  1648  0010F4  8EF2               	bsf	intcon,7,c	;volatile
  1649                           
  1650                           ;main.c: 96: curr_state = STANDBY;
  1651  0010F6  0E00               	movlw	0
  1652  0010F8  0100               	movlb	0	; () banked
  1653  0010FA  6FC3               	movwf	_curr_state& (0+255),b
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;main.c: 99: switch(curr_state){
  1657                           
  1658                           ;main.c: 98: while(1){
  1659  0010FC  D02A               	goto	l4037
  1660  0010FE                     l4021:
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;main.c: 101: standby();
  1664  0010FE  EC2A  F011         	call	_standby	;wreg free
  1665                           
  1666                           ;main.c: 102: break;
  1667  001102  D03E               	goto	l4039
  1668  001104                     l4023:
  1669                           
  1670                           ;main.c: 104: emergencystop();
  1671  001104  ECEE  F011         	call	_emergencystop	;wreg free
  1672                           
  1673                           ;main.c: 105: break;
  1674  001108  D03B               	goto	l4039
  1675  00110A                     l4025:
  1676                           
  1677                           ;main.c: 107: operation();
  1678  00110A  ECB0  F00D         	call	_operation	;wreg free
  1679                           
  1680                           ;main.c: 108: break;
  1681  00110E  D038               	goto	l4039
  1682  001110                     l4027:
  1683                           
  1684                           ;main.c: 110: operationend();
  1685  001110  ECFB  F011         	call	_operationend	;wreg free
  1686                           
  1687                           ;main.c: 111: break;
  1688  001114  D035               	goto	l4039
  1689  001116                     l4029:
  1690                           
  1691                           ;main.c: 113: date_time();
  1692  001116  EC23  F00B         	call	_date_time	;wreg free
  1693                           
  1694                           ;main.c: 114: break;
  1695  00111A  D032               	goto	l4039
  1696  00111C                     l4031:
  1697                           
  1698                           ;main.c: 116: bottle_count();
  1699  00111C  EC19  F007         	call	_bottle_count	;wreg free
  1700                           
  1701                           ;main.c: 117: break;
  1702  001120  D02F               	goto	l4039
  1703  001122                     l4033:
  1704                           
  1705                           ;main.c: 119: bottle_time(etime - stime);
  1706  001122  C0C1  F0B4         	movff	_stime,??_main
  1707  001126  C0C2  F0B5         	movff	_stime+1,??_main+1
  1708  00112A  0100               	movlb	0	; () banked
  1709  00112C  1FB4               	comf	??_main& (0+255),f,b
  1710  00112E  1FB5               	comf	(??_main+1)& (0+255),f,b
  1711  001130  4BB4               	infsnz	??_main& (0+255),f,b
  1712  001132  2BB5               	incf	(??_main+1)& (0+255),f,b
  1713  001134  0100               	movlb	0	; () banked
  1714  001136  51BD               	movf	_etime& (0+255),w,b
  1715  001138  0100               	movlb	0	; () banked
  1716  00113A  25B4               	addwf	??_main& (0+255),w,b
  1717  00113C  0100               	movlb	0	; () banked
  1718  00113E  6FB2               	movwf	bottle_time@time& (0+255),b
  1719  001140  0100               	movlb	0	; () banked
  1720  001142  51BE               	movf	(_etime+1)& (0+255),w,b
  1721  001144  0100               	movlb	0	; () banked
  1722  001146  21B5               	addwfc	(??_main+1)& (0+255),w,b
  1723  001148  0100               	movlb	0	; () banked
  1724  00114A  6FB3               	movwf	(bottle_time@time+1)& (0+255),b
  1725  00114C  EC45  F011         	call	_bottle_time	;wreg free
  1726                           
  1727                           ;main.c: 121: }
  1728                           
  1729                           ;main.c: 120: break;
  1730  001150  D017               	goto	l4039
  1731  001152                     l4037:
  1732  001152  0100               	movlb	0	; () banked
  1733  001154  51C3               	movf	_curr_state& (0+255),w,b
  1734                           
  1735                           ; Switch size 1, requested type "space"
  1736                           ; Number of cases is 7, Range of values is 0 to 6
  1737                           ; switch strategies available:
  1738                           ; Name         Instructions Cycles
  1739                           ; simple_byte           22    12 (average)
  1740                           ;	Chosen strategy is simple_byte
  1741  001156  0A00               	xorlw	0	; case 0
  1742  001158  B4D8               	btfsc	status,2,c
  1743  00115A  D7D1               	goto	l4021
  1744  00115C  0A01               	xorlw	1	; case 1
  1745  00115E  B4D8               	btfsc	status,2,c
  1746  001160  D7D1               	goto	l4023
  1747  001162  0A03               	xorlw	3	; case 2
  1748  001164  B4D8               	btfsc	status,2,c
  1749  001166  D7D1               	goto	l4025
  1750  001168  0A01               	xorlw	1	; case 3
  1751  00116A  B4D8               	btfsc	status,2,c
  1752  00116C  D7D1               	goto	l4027
  1753  00116E  0A07               	xorlw	7	; case 4
  1754  001170  B4D8               	btfsc	status,2,c
  1755  001172  D7D1               	goto	l4029
  1756  001174  0A01               	xorlw	1	; case 5
  1757  001176  B4D8               	btfsc	status,2,c
  1758  001178  D7D1               	goto	l4031
  1759  00117A  0A03               	xorlw	3	; case 6
  1760  00117C  B4D8               	btfsc	status,2,c
  1761  00117E  D7D1               	goto	l4033
  1762  001180                     l4039:
  1763                           
  1764                           ;main.c: 122: _delay((unsigned long)((200)*(10000000/4000.0)));
  1765  001180  0E03               	movlw	3
  1766  001182  0100               	movlb	0	; () banked
  1767  001184  6FB5               	movwf	(??_main+1)& (0+255),b
  1768  001186  0E8A               	movlw	138
  1769  001188  0100               	movlb	0	; () banked
  1770  00118A  6FB4               	movwf	??_main& (0+255),b
  1771  00118C  0E55               	movlw	85
  1772  00118E                     u3807:
  1773  00118E  2EE8               	decfsz	wreg,f,c
  1774  001190  D7FE               	bra	u3807
  1775  001192  2FB4               	decfsz	??_main& (0+255),f,b
  1776  001194  D7FC               	bra	u3807
  1777  001196  2FB5               	decfsz	(??_main+1)& (0+255),f,b
  1778  001198  D7FA               	bra	u3807
  1779  00119A  D000               	nop2	
  1780  00119C  D7DA               	goto	l4037
  1781  00119E                     __end_of_main:
  1782                           	opt stack 0
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           intcon	equ	0xFF2
  1788                           intcon2	equ	0xFF1
  1789                           intcon3	equ	0xFF0
  1790                           postinc0	equ	0xFEE
  1791                           wreg	equ	0xFE8
  1792                           status	equ	0xFD8
  1793                           
  1794 ;; *************** function _standby *****************
  1795 ;; Defined at:
  1796 ;;		line 207 in file "main.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;		None
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;		None
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      void 
  1803 ;; Registers used:
  1804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;Total ram usage:        0 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; Hardware stack levels required when called:   10
  1817 ;; This function calls:
  1818 ;;		_lcdInst
  1819 ;;		_printf
  1820 ;; This function is called by:
  1821 ;;		_main
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text1
  1826  002254                     __ptext1:
  1827                           	opt stack 0
  1828  002254                     _standby:
  1829                           	opt stack 20
  1830                           
  1831                           ;main.c: 208: lcdInst(0b10000000);
  1832                           
  1833                           ;incstack = 0
  1834  002254  0E80               	movlw	128
  1835  002256  EC2E  F012         	call	_lcdInst
  1836                           
  1837                           ;main.c: 209: printf("standby         ");
  1838  00225A  0E02               	movlw	low STR_2
  1839  00225C  0100               	movlb	0	; () banked
  1840  00225E  6F9C               	movwf	printf@f& (0+255),b
  1841  002260  0EFF               	movlw	high STR_2
  1842  002262  0100               	movlb	0	; () banked
  1843  002264  6F9D               	movwf	(printf@f+1)& (0+255),b
  1844  002266  EC09  F000         	call	_printf	;wreg free
  1845                           
  1846                           ;main.c: 210: lcdInst(0b11000000);
  1847  00226A  0EC0               	movlw	192
  1848  00226C  EC2E  F012         	call	_lcdInst
  1849                           
  1850                           ;main.c: 211: printf("PORTB: %d", PORTB);
  1851  002270  0EEA               	movlw	low STR_3
  1852  002272  0100               	movlb	0	; () banked
  1853  002274  6F9C               	movwf	printf@f& (0+255),b
  1854  002276  0EFF               	movlw	high STR_3
  1855  002278  0100               	movlb	0	; () banked
  1856  00227A  6F9D               	movwf	(printf@f+1)& (0+255),b
  1857  00227C  CF81 F09E          	movff	3969,?_printf+2	;volatile
  1858  002280  0100               	movlb	0	; () banked
  1859  002282  6B9F               	clrf	(?_printf+3)& (0+255),b
  1860  002284  EC09  F000         	call	_printf	;wreg free
  1861  002288  0012               	return	
  1862  00228A                     __end_of_standby:
  1863                           	opt stack 0
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           intcon	equ	0xFF2
  1869                           intcon2	equ	0xFF1
  1870                           intcon3	equ	0xFF0
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           status	equ	0xFD8
  1874                           
  1875 ;; *************** function _operationend *****************
  1876 ;; Defined at:
  1877 ;;		line 353 in file "main.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      void 
  1884 ;; Registers used:
  1885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1895 ;;Total ram usage:        0 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:   10
  1898 ;; This function calls:
  1899 ;;		_lcdInst
  1900 ;;		_printf
  1901 ;; This function is called by:
  1902 ;;		_main
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text2
  1907  0023F6                     __ptext2:
  1908                           	opt stack 0
  1909  0023F6                     _operationend:
  1910                           	opt stack 20
  1911                           
  1912                           ;main.c: 354: lcdInst(0b10000000);
  1913                           
  1914                           ;incstack = 0
  1915  0023F6  0E80               	movlw	128
  1916  0023F8  EC2E  F012         	call	_lcdInst
  1917                           
  1918                           ;main.c: 355: printf("Operation Done!");
  1919  0023FC  0EBD               	movlw	low STR_22
  1920  0023FE  0100               	movlb	0	; () banked
  1921  002400  6F9C               	movwf	printf@f& (0+255),b
  1922  002402  0EFF               	movlw	high STR_22
  1923  002404  0100               	movlb	0	; () banked
  1924  002406  6F9D               	movwf	(printf@f+1)& (0+255),b
  1925  002408  EC09  F000         	call	_printf	;wreg free
  1926  00240C  0012               	return	
  1927  00240E                     __end_of_operationend:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           intcon	equ	0xFF2
  1934                           intcon2	equ	0xFF1
  1935                           intcon3	equ	0xFF0
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           status	equ	0xFD8
  1939                           
  1940 ;; *************** function _operation *****************
  1941 ;; Defined at:
  1942 ;;		line 332 in file "main.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;		None
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;		None
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;Total ram usage:        2 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:   10
  1963 ;; This function calls:
  1964 ;;		_lcdInst
  1965 ;;		_printf
  1966 ;; This function is called by:
  1967 ;;		_main
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text3
  1972  001B60                     __ptext3:
  1973                           	opt stack 0
  1974  001B60                     _operation:
  1975                           	opt stack 20
  1976                           
  1977                           ;main.c: 333: switch(operation_disp){
  1978                           
  1979                           ;incstack = 0
  1980  001B60  D033               	goto	l3691
  1981  001B62                     l3671:
  1982                           
  1983                           ;main.c: 335: lcdInst(0b10000000);
  1984  001B62  0E80               	movlw	128
  1985  001B64  EC2E  F012         	call	_lcdInst
  1986                           
  1987                           ;main.c: 336: printf("Running~              ");
  1988  001B68  0E83               	movlw	low STR_19
  1989  001B6A  0100               	movlb	0	; () banked
  1990  001B6C  6F9C               	movwf	printf@f& (0+255),b
  1991  001B6E  0EFE               	movlw	high STR_19
  1992  001B70  0100               	movlb	0	; () banked
  1993  001B72  6F9D               	movwf	(printf@f+1)& (0+255),b
  1994  001B74  EC09  F000         	call	_printf	;wreg free
  1995                           
  1996                           ;main.c: 337: operation_disp = 1;
  1997  001B78  0E00               	movlw	0
  1998  001B7A  0100               	movlb	0	; () banked
  1999  001B7C  6FC0               	movwf	(_operation_disp+1)& (0+255),b
  2000  001B7E  0E01               	movlw	1
  2001  001B80  6FBF               	movwf	_operation_disp& (0+255),b
  2002                           
  2003                           ;main.c: 338: break;
  2004  001B82  0012               	return	
  2005  001B84                     l3677:
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;main.c: 340: lcdInst(0b10000000);
  2009  001B84  0E80               	movlw	128
  2010  001B86  EC2E  F012         	call	_lcdInst
  2011                           
  2012                           ;main.c: 341: printf("Running~~              ");
  2013  001B8A  0E6B               	movlw	low STR_20
  2014  001B8C  0100               	movlb	0	; () banked
  2015  001B8E  6F9C               	movwf	printf@f& (0+255),b
  2016  001B90  0EFE               	movlw	high STR_20
  2017  001B92  0100               	movlb	0	; () banked
  2018  001B94  6F9D               	movwf	(printf@f+1)& (0+255),b
  2019  001B96  EC09  F000         	call	_printf	;wreg free
  2020                           
  2021                           ;main.c: 342: operation_disp = 2;
  2022  001B9A  0E00               	movlw	0
  2023  001B9C  0100               	movlb	0	; () banked
  2024  001B9E  6FC0               	movwf	(_operation_disp+1)& (0+255),b
  2025  001BA0  0E02               	movlw	2
  2026  001BA2  6FBF               	movwf	_operation_disp& (0+255),b
  2027                           
  2028                           ;main.c: 343: break;
  2029  001BA4  0012               	return	
  2030  001BA6                     l3683:
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;main.c: 345: lcdInst(0b10000000);
  2034  001BA6  0E80               	movlw	128
  2035  001BA8  EC2E  F012         	call	_lcdInst
  2036                           
  2037                           ;main.c: 346: printf("Running~~~              ");
  2038  001BAC  0E52               	movlw	low STR_21
  2039  001BAE  0100               	movlb	0	; () banked
  2040  001BB0  6F9C               	movwf	printf@f& (0+255),b
  2041  001BB2  0EFE               	movlw	high STR_21
  2042  001BB4  0100               	movlb	0	; () banked
  2043  001BB6  6F9D               	movwf	(printf@f+1)& (0+255),b
  2044  001BB8  EC09  F000         	call	_printf	;wreg free
  2045                           
  2046                           ;main.c: 347: operation_disp = 0;
  2047  001BBC  0E00               	movlw	0
  2048  001BBE  0100               	movlb	0	; () banked
  2049  001BC0  6FC0               	movwf	(_operation_disp+1)& (0+255),b
  2050  001BC2  0E00               	movlw	0
  2051  001BC4  6FBF               	movwf	_operation_disp& (0+255),b
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;main.c: 349: }
  2055                           
  2056                           ;main.c: 348: break;
  2057  001BC6  0012               	return	
  2058  001BC8                     l3691:
  2059  001BC8  C0BF  F0B2         	movff	_operation_disp,??_operation
  2060  001BCC  C0C0  F0B3         	movff	_operation_disp+1,??_operation+1
  2061                           
  2062                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2063                           ; Switch size 1, requested type "space"
  2064                           ; Number of cases is 1, Range of values is 0 to 0
  2065                           ; switch strategies available:
  2066                           ; Name         Instructions Cycles
  2067                           ; simple_byte            4     3 (average)
  2068                           ;	Chosen strategy is simple_byte
  2069  001BD0  0100               	movlb	0	; () banked
  2070  001BD2  51B3               	movf	(??_operation+1)& (0+255),w,b
  2071  001BD4  0A00               	xorlw	0	; case 0
  2072  001BD6  A4D8               	btfss	status,2,c
  2073  001BD8  0012               	return	
  2074                           
  2075                           ; BSR set to: 0
  2076                           ; Switch size 1, requested type "space"
  2077                           ; Number of cases is 3, Range of values is 0 to 2
  2078                           ; switch strategies available:
  2079                           ; Name         Instructions Cycles
  2080                           ; simple_byte           10     6 (average)
  2081                           ;	Chosen strategy is simple_byte
  2082  001BDA  0100               	movlb	0	; () banked
  2083  001BDC  51B2               	movf	??_operation& (0+255),w,b
  2084  001BDE  0A00               	xorlw	0	; case 0
  2085  001BE0  B4D8               	btfsc	status,2,c
  2086  001BE2  D7BF               	goto	l3671
  2087  001BE4  0A01               	xorlw	1	; case 1
  2088  001BE6  B4D8               	btfsc	status,2,c
  2089  001BE8  D7CD               	goto	l3677
  2090  001BEA  0A03               	xorlw	3	; case 2
  2091  001BEC  A4D8               	btfss	status,2,c
  2092  001BEE  0012               	return	
  2093  001BF0  D7DA               	goto	l3683
  2094  001BF2                     __end_of_operation:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           tblptrh	equ	0xFF7
  2098                           tblptrl	equ	0xFF6
  2099                           tablat	equ	0xFF5
  2100                           intcon	equ	0xFF2
  2101                           intcon2	equ	0xFF1
  2102                           intcon3	equ	0xFF0
  2103                           postinc0	equ	0xFEE
  2104                           wreg	equ	0xFE8
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _initLCD *****************
  2108 ;; Defined at:
  2109 ;;		line 14 in file "lcd.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;		None
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      void 
  2116 ;; Registers used:
  2117 ;;		wreg, status,2, status,0, cstack
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;Total ram usage:        1 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    9
  2130 ;; This function calls:
  2131 ;;		_lcdInst
  2132 ;; This function is called by:
  2133 ;;		_main
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text4
  2138  0020BE                     __ptext4:
  2139                           	opt stack 0
  2140  0020BE                     _initLCD:
  2141                           	opt stack 21
  2142                           
  2143                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;incstack = 0
  2147  0020BE  0E31               	movlw	49
  2148  0020C0  0100               	movlb	0	; () banked
  2149  0020C2  6F93               	movwf	??_initLCD& (0+255),b
  2150  0020C4  0EB2               	movlw	178
  2151  0020C6                     u3817:
  2152  0020C6  2EE8               	decfsz	wreg,f,c
  2153  0020C8  D7FE               	bra	u3817
  2154  0020CA  2F93               	decfsz	??_initLCD& (0+255),f,b
  2155  0020CC  D7FC               	bra	u3817
  2156  0020CE  F000               	nop	
  2157                           
  2158                           ;lcd.c: 16: lcdInst(0b00110011);
  2159  0020D0  0E33               	movlw	51
  2160  0020D2  EC2E  F012         	call	_lcdInst
  2161                           
  2162                           ;lcd.c: 17: lcdInst(0b00110011);
  2163  0020D6  0E33               	movlw	51
  2164  0020D8  EC2E  F012         	call	_lcdInst
  2165                           
  2166                           ;lcd.c: 18: lcdInst(0b00110010);
  2167  0020DC  0E32               	movlw	50
  2168  0020DE  EC2E  F012         	call	_lcdInst
  2169                           
  2170                           ;lcd.c: 19: lcdInst(0b00101000);
  2171  0020E2  0E28               	movlw	40
  2172  0020E4  EC2E  F012         	call	_lcdInst
  2173                           
  2174                           ;lcd.c: 20: lcdInst(0b00001111);
  2175  0020E8  0E0F               	movlw	15
  2176  0020EA  EC2E  F012         	call	_lcdInst
  2177                           
  2178                           ;lcd.c: 21: lcdInst(0b00000110);
  2179  0020EE  0E06               	movlw	6
  2180  0020F0  EC2E  F012         	call	_lcdInst
  2181                           
  2182                           ;lcd.c: 22: lcdInst(0b00000001);
  2183  0020F4  0E01               	movlw	1
  2184  0020F6  EC2E  F012         	call	_lcdInst
  2185                           
  2186                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2187  0020FA  0E31               	movlw	49
  2188  0020FC  0100               	movlb	0	; () banked
  2189  0020FE  6F93               	movwf	??_initLCD& (0+255),b
  2190  002100  0EB2               	movlw	178
  2191  002102                     u3827:
  2192  002102  2EE8               	decfsz	wreg,f,c
  2193  002104  D7FE               	bra	u3827
  2194  002106  2F93               	decfsz	??_initLCD& (0+255),f,b
  2195  002108  D7FC               	bra	u3827
  2196  00210A  F000               	nop	
  2197  00210C  0012               	return		;funcret
  2198  00210E                     __end_of_initLCD:
  2199                           	opt stack 0
  2200                           tblptru	equ	0xFF8
  2201                           tblptrh	equ	0xFF7
  2202                           tblptrl	equ	0xFF6
  2203                           tablat	equ	0xFF5
  2204                           intcon	equ	0xFF2
  2205                           intcon2	equ	0xFF1
  2206                           intcon3	equ	0xFF0
  2207                           postinc0	equ	0xFEE
  2208                           wreg	equ	0xFE8
  2209                           status	equ	0xFD8
  2210                           
  2211 ;; *************** function _emergencystop *****************
  2212 ;; Defined at:
  2213 ;;		line 359 in file "main.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;		None
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;		None
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      void 
  2220 ;; Registers used:
  2221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;Total ram usage:        0 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; Hardware stack levels required when called:   10
  2234 ;; This function calls:
  2235 ;;		_lcdInst
  2236 ;;		_printf
  2237 ;; This function is called by:
  2238 ;;		_main
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text5
  2243  0023DC                     __ptext5:
  2244                           	opt stack 0
  2245  0023DC                     _emergencystop:
  2246                           	opt stack 20
  2247                           
  2248                           ;main.c: 360: lcdInst(0b10000000);
  2249                           
  2250                           ;incstack = 0
  2251  0023DC  0E80               	movlw	128
  2252  0023DE  EC2E  F012         	call	_lcdInst
  2253                           
  2254                           ;main.c: 361: printf("EMERGENCY STOP");
  2255  0023E2  0ECD               	movlw	low STR_23
  2256  0023E4  0100               	movlb	0	; () banked
  2257  0023E6  6F9C               	movwf	printf@f& (0+255),b
  2258  0023E8  0EFF               	movlw	high STR_23
  2259  0023EA  0100               	movlb	0	; () banked
  2260  0023EC  6F9D               	movwf	(printf@f+1)& (0+255),b
  2261  0023EE  EC09  F000         	call	_printf	;wreg free
  2262                           
  2263                           ;main.c: 362: (INTCONbits.GIE = 0);
  2264  0023F2  9EF2               	bcf	intcon,7,c	;volatile
  2265  0023F4                     l299:
  2266  0023F4  D7FF               	goto	l299
  2267  0023F6                     __end_of_emergencystop:
  2268                           	opt stack 0
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           intcon	equ	0xFF2
  2274                           intcon2	equ	0xFF1
  2275                           intcon3	equ	0xFF0
  2276                           postinc0	equ	0xFEE
  2277                           wreg	equ	0xFE8
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function _date_time *****************
  2281 ;; Defined at:
  2282 ;;		line 239 in file "main.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  i               1   50[BANK0 ] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  1    wreg      void 
  2289 ;; Registers used:
  2290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;Total ram usage:        1 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:   10
  2303 ;; This function calls:
  2304 ;;		_I2C_Master_Read
  2305 ;;		_I2C_Master_Start
  2306 ;;		_I2C_Master_Stop
  2307 ;;		_I2C_Master_Write
  2308 ;;		_lcdInst
  2309 ;;		_printf
  2310 ;; This function is called by:
  2311 ;;		_main
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           	psect	text6
  2316  001646                     __ptext6:
  2317                           	opt stack 0
  2318  001646                     _date_time:
  2319                           	opt stack 20
  2320                           
  2321                           ;main.c: 241: I2C_Master_Start();
  2322                           
  2323                           ;incstack = 0
  2324  001646  EC50  F012         	call	_I2C_Master_Start	;wreg free
  2325                           
  2326                           ;main.c: 242: I2C_Master_Write(0b11010000);
  2327  00164A  0E00               	movlw	0
  2328  00164C  0100               	movlb	0	; () banked
  2329  00164E  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2330  001650  0ED0               	movlw	208
  2331  001652  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2332  001654  EC42  F012         	call	_I2C_Master_Write	;wreg free
  2333                           
  2334                           ;main.c: 243: I2C_Master_Write(0x00);
  2335  001658  0E00               	movlw	0
  2336  00165A  0100               	movlb	0	; () banked
  2337  00165C  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2338  00165E  0E00               	movlw	0
  2339  001660  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2340  001662  EC42  F012         	call	_I2C_Master_Write	;wreg free
  2341                           
  2342                           ;main.c: 244: I2C_Master_Stop();
  2343  001666  EC4C  F012         	call	_I2C_Master_Stop	;wreg free
  2344                           
  2345                           ;main.c: 247: I2C_Master_Start();
  2346  00166A  EC50  F012         	call	_I2C_Master_Start	;wreg free
  2347                           
  2348                           ;main.c: 248: I2C_Master_Write(0b11010001);
  2349  00166E  0E00               	movlw	0
  2350  001670  0100               	movlb	0	; () banked
  2351  001672  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2352  001674  0ED1               	movlw	209
  2353  001676  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2354  001678  EC42  F012         	call	_I2C_Master_Write	;wreg free
  2355                           
  2356                           ;main.c: 249: for(unsigned char i=0;i<0x06;i++){
  2357  00167C  0E00               	movlw	0
  2358  00167E  0100               	movlb	0	; () banked
  2359  001680  6FB2               	movwf	date_time@i& (0+255),b
  2360  001682                     l3707:
  2361                           
  2362                           ; BSR set to: 0
  2363  001682  0E05               	movlw	5
  2364  001684  0100               	movlb	0	; () banked
  2365  001686  65B2               	cpfsgt	date_time@i& (0+255),b
  2366  001688  D001               	goto	l3711
  2367  00168A  D010               	goto	l3717
  2368  00168C                     l3711:
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;main.c: 250: time[i] = I2C_Master_Read(1);
  2372  00168C  0100               	movlb	0	; () banked
  2373  00168E  51B2               	movf	date_time@i& (0+255),w,b
  2374  001690  0D01               	mullw	1
  2375  001692  0EB6               	movlw	low _time
  2376  001694  24F3               	addwf	prodl,w,c
  2377  001696  6ED9               	movwf	fsr2l,c
  2378  001698  0E00               	movlw	high _time
  2379  00169A  20F4               	addwfc	prodh,w,c
  2380  00169C  6EDA               	movwf	fsr2h,c
  2381  00169E  0E01               	movlw	1
  2382  0016A0  EC7B  F011         	call	_I2C_Master_Read
  2383  0016A4  6EDF               	movwf	indf2,c
  2384  0016A6  0100               	movlb	0	; () banked
  2385  0016A8  2BB2               	incf	date_time@i& (0+255),f,b
  2386  0016AA  D7EB               	goto	l3707
  2387  0016AC                     l3717:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;main.c: 251: }
  2391                           ;main.c: 252: time[6] = I2C_Master_Read(0);
  2392  0016AC  0E00               	movlw	0
  2393  0016AE  EC7B  F011         	call	_I2C_Master_Read
  2394  0016B2  0100               	movlb	0	; () banked
  2395  0016B4  6FBC               	movwf	(_time+6)& (0+255),b
  2396                           
  2397                           ;main.c: 253: I2C_Master_Stop();
  2398  0016B6  EC4C  F012         	call	_I2C_Master_Stop	;wreg free
  2399                           
  2400                           ;main.c: 256: lcdInst(0b10000000);
  2401  0016BA  0E80               	movlw	128
  2402  0016BC  EC2E  F012         	call	_lcdInst
  2403                           
  2404                           ;main.c: 257: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2405  0016C0  0EB1               	movlw	low STR_4
  2406  0016C2  0100               	movlb	0	; () banked
  2407  0016C4  6F9C               	movwf	printf@f& (0+255),b
  2408  0016C6  0EFE               	movlw	high STR_4
  2409  0016C8  0100               	movlb	0	; () banked
  2410  0016CA  6F9D               	movwf	(printf@f+1)& (0+255),b
  2411  0016CC  C0BB  F09E         	movff	_time+5,?_printf+2
  2412  0016D0  0100               	movlb	0	; () banked
  2413  0016D2  6B9F               	clrf	(?_printf+3)& (0+255),b
  2414  0016D4  C0BA  F0A0         	movff	_time+4,?_printf+4
  2415  0016D8  0100               	movlb	0	; () banked
  2416  0016DA  6BA1               	clrf	(?_printf+5)& (0+255),b
  2417  0016DC  C0BC  F0A2         	movff	_time+6,?_printf+6
  2418  0016E0  0100               	movlb	0	; () banked
  2419  0016E2  6BA3               	clrf	(?_printf+7)& (0+255),b
  2420  0016E4  EC09  F000         	call	_printf	;wreg free
  2421                           
  2422                           ;main.c: 258: lcdInst(0b11000000);
  2423  0016E8  0EC0               	movlw	192
  2424  0016EA  EC2E  F012         	call	_lcdInst
  2425                           
  2426                           ;main.c: 259: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2427  0016EE  0EC8               	movlw	low STR_5
  2428  0016F0  0100               	movlb	0	; () banked
  2429  0016F2  6F9C               	movwf	printf@f& (0+255),b
  2430  0016F4  0EFE               	movlw	high STR_5
  2431  0016F6  0100               	movlb	0	; () banked
  2432  0016F8  6F9D               	movwf	(printf@f+1)& (0+255),b
  2433  0016FA  C0B8  F09E         	movff	_time+2,?_printf+2
  2434  0016FE  0100               	movlb	0	; () banked
  2435  001700  6B9F               	clrf	(?_printf+3)& (0+255),b
  2436  001702  C0B7  F0A0         	movff	_time+1,?_printf+4
  2437  001706  0100               	movlb	0	; () banked
  2438  001708  6BA1               	clrf	(?_printf+5)& (0+255),b
  2439  00170A  C0B6  F0A2         	movff	_time,?_printf+6
  2440  00170E  0100               	movlb	0	; () banked
  2441  001710  6BA3               	clrf	(?_printf+7)& (0+255),b
  2442  001712  EC09  F000         	call	_printf	;wreg free
  2443  001716  0012               	return	
  2444  001718                     __end_of_date_time:
  2445                           	opt stack 0
  2446                           tblptru	equ	0xFF8
  2447                           tblptrh	equ	0xFF7
  2448                           tblptrl	equ	0xFF6
  2449                           tablat	equ	0xFF5
  2450                           prodh	equ	0xFF4
  2451                           prodl	equ	0xFF3
  2452                           intcon	equ	0xFF2
  2453                           intcon2	equ	0xFF1
  2454                           intcon3	equ	0xFF0
  2455                           postinc0	equ	0xFEE
  2456                           wreg	equ	0xFE8
  2457                           indf2	equ	0xFDF
  2458                           fsr2h	equ	0xFDA
  2459                           fsr2l	equ	0xFD9
  2460                           status	equ	0xFD8
  2461                           
  2462 ;; *************** function _I2C_Master_Write *****************
  2463 ;; Defined at:
  2464 ;;		line 47 in file "I2C.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  d               2   17[BANK0 ] unsigned int 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;		None
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, status,2, status,0, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2478 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2482 ;;Total ram usage:        2 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:    8
  2485 ;; This function calls:
  2486 ;;		_I2C_Master_Wait
  2487 ;; This function is called by:
  2488 ;;		_date_time
  2489 ;;		_set_time
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text7
  2494  002484                     __ptext7:
  2495                           	opt stack 0
  2496  002484                     _I2C_Master_Write:
  2497                           	opt stack 21
  2498                           
  2499                           ;I2C.c: 49: I2C_Master_Wait();
  2500                           
  2501                           ;incstack = 0
  2502  002484  EC13  F012         	call	_I2C_Master_Wait	;wreg free
  2503                           
  2504                           ;I2C.c: 50: SSPBUF = d;
  2505  002488  C091  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2506  00248C  0012               	return		;funcret
  2507  00248E                     __end_of_I2C_Master_Write:
  2508                           	opt stack 0
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           prodh	equ	0xFF4
  2514                           prodl	equ	0xFF3
  2515                           intcon	equ	0xFF2
  2516                           intcon2	equ	0xFF1
  2517                           intcon3	equ	0xFF0
  2518                           postinc0	equ	0xFEE
  2519                           wreg	equ	0xFE8
  2520                           indf2	equ	0xFDF
  2521                           fsr2h	equ	0xFDA
  2522                           fsr2l	equ	0xFD9
  2523                           status	equ	0xFD8
  2524                           
  2525 ;; *************** function _I2C_Master_Stop *****************
  2526 ;; Defined at:
  2527 ;;		line 41 in file "I2C.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;		None
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;		None
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  1    wreg      void 
  2534 ;; Registers used:
  2535 ;;		wreg, status,2, status,0, cstack
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;Total ram usage:        0 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    8
  2548 ;; This function calls:
  2549 ;;		_I2C_Master_Wait
  2550 ;; This function is called by:
  2551 ;;		_date_time
  2552 ;;		_set_time
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           	psect	text8
  2557  002498                     __ptext8:
  2558                           	opt stack 0
  2559  002498                     _I2C_Master_Stop:
  2560                           	opt stack 21
  2561                           
  2562                           ;I2C.c: 43: I2C_Master_Wait();
  2563                           
  2564                           ;incstack = 0
  2565  002498  EC13  F012         	call	_I2C_Master_Wait	;wreg free
  2566                           
  2567                           ;I2C.c: 44: PEN = 1;
  2568  00249C  84C5               	bsf	4037,2,c	;volatile
  2569  00249E  0012               	return		;funcret
  2570  0024A0                     __end_of_I2C_Master_Stop:
  2571                           	opt stack 0
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           prodh	equ	0xFF4
  2577                           prodl	equ	0xFF3
  2578                           intcon	equ	0xFF2
  2579                           intcon2	equ	0xFF1
  2580                           intcon3	equ	0xFF0
  2581                           postinc0	equ	0xFEE
  2582                           wreg	equ	0xFE8
  2583                           indf2	equ	0xFDF
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function _I2C_Master_Start *****************
  2589 ;; Defined at:
  2590 ;;		line 29 in file "I2C.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;		None
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;		None
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0, cstack
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;Total ram usage:        0 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    8
  2611 ;; This function calls:
  2612 ;;		_I2C_Master_Wait
  2613 ;; This function is called by:
  2614 ;;		_date_time
  2615 ;;		_set_time
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text9
  2620  0024A0                     __ptext9:
  2621                           	opt stack 0
  2622  0024A0                     _I2C_Master_Start:
  2623                           	opt stack 21
  2624                           
  2625                           ;I2C.c: 31: I2C_Master_Wait();
  2626                           
  2627                           ;incstack = 0
  2628  0024A0  EC13  F012         	call	_I2C_Master_Wait	;wreg free
  2629                           
  2630                           ;I2C.c: 32: SEN = 1;
  2631  0024A4  80C5               	bsf	4037,0,c	;volatile
  2632  0024A6  0012               	return		;funcret
  2633  0024A8                     __end_of_I2C_Master_Start:
  2634                           	opt stack 0
  2635                           tblptru	equ	0xFF8
  2636                           tblptrh	equ	0xFF7
  2637                           tblptrl	equ	0xFF6
  2638                           tablat	equ	0xFF5
  2639                           prodh	equ	0xFF4
  2640                           prodl	equ	0xFF3
  2641                           intcon	equ	0xFF2
  2642                           intcon2	equ	0xFF1
  2643                           intcon3	equ	0xFF0
  2644                           postinc0	equ	0xFEE
  2645                           wreg	equ	0xFE8
  2646                           indf2	equ	0xFDF
  2647                           fsr2h	equ	0xFDA
  2648                           fsr2l	equ	0xFD9
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _I2C_Master_Read *****************
  2652 ;; Defined at:
  2653 ;;		line 53 in file "I2C.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  a               1    wreg     unsigned char 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  a               1   17[BANK0 ] unsigned char 
  2658 ;;  temp            1   18[BANK0 ] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      unsigned char 
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;Total ram usage:        2 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    8
  2675 ;; This function calls:
  2676 ;;		_I2C_Master_Wait
  2677 ;; This function is called by:
  2678 ;;		_date_time
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text10
  2683  0022F6                     __ptext10:
  2684                           	opt stack 0
  2685  0022F6                     _I2C_Master_Read:
  2686                           	opt stack 21
  2687                           
  2688                           ;incstack = 0
  2689                           ;I2C_Master_Read@a stored from wreg
  2690  0022F6  0100               	movlb	0	; () banked
  2691  0022F8  6F91               	movwf	I2C_Master_Read@a& (0+255),b
  2692                           
  2693                           ;I2C.c: 55: unsigned char temp;
  2694                           ;I2C.c: 56: I2C_Master_Wait();
  2695  0022FA  EC13  F012         	call	_I2C_Master_Wait	;wreg free
  2696                           
  2697                           ;I2C.c: 57: RCEN = 1;
  2698  0022FE  86C5               	bsf	4037,3,c	;volatile
  2699                           
  2700                           ;I2C.c: 58: I2C_Master_Wait();
  2701  002300  EC13  F012         	call	_I2C_Master_Wait	;wreg free
  2702                           
  2703                           ;I2C.c: 59: temp = SSPBUF;
  2704  002304  CFC9 F092          	movff	4041,I2C_Master_Read@temp	;volatile
  2705                           
  2706                           ;I2C.c: 60: I2C_Master_Wait();
  2707  002308  EC13  F012         	call	_I2C_Master_Wait	;wreg free
  2708                           
  2709                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2710  00230C  0100               	movlb	0	; () banked
  2711  00230E  5191               	movf	I2C_Master_Read@a& (0+255),w,b
  2712  002310  0100               	movlb	0	; () banked
  2713  002312  A4D8               	btfss	status,2,c
  2714  002314  D002               	goto	u2820
  2715  002316  8AC5               	bsf	4037,5,c	;volatile
  2716  002318  D001               	goto	l3267
  2717  00231A                     u2820:
  2718  00231A  9AC5               	bcf	4037,5,c	;volatile
  2719  00231C                     l3267:
  2720                           
  2721                           ;I2C.c: 62: ACKEN = 1;
  2722  00231C  88C5               	bsf	4037,4,c	;volatile
  2723                           
  2724                           ;I2C.c: 63: return temp;
  2725  00231E  0100               	movlb	0	; () banked
  2726  002320  5192               	movf	I2C_Master_Read@temp& (0+255),w,b
  2727  002322  0012               	return	
  2728  002324                     __end_of_I2C_Master_Read:
  2729                           	opt stack 0
  2730                           tblptru	equ	0xFF8
  2731                           tblptrh	equ	0xFF7
  2732                           tblptrl	equ	0xFF6
  2733                           tablat	equ	0xFF5
  2734                           prodh	equ	0xFF4
  2735                           prodl	equ	0xFF3
  2736                           intcon	equ	0xFF2
  2737                           intcon2	equ	0xFF1
  2738                           intcon3	equ	0xFF0
  2739                           postinc0	equ	0xFEE
  2740                           wreg	equ	0xFE8
  2741                           indf2	equ	0xFDF
  2742                           fsr2h	equ	0xFDA
  2743                           fsr2l	equ	0xFD9
  2744                           status	equ	0xFD8
  2745                           
  2746 ;; *************** function _I2C_Master_Wait *****************
  2747 ;; Defined at:
  2748 ;;		line 24 in file "I2C.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;		None
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;		None
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, status,0
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;Total ram usage:        1 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    7
  2769 ;; This function calls:
  2770 ;;		Nothing
  2771 ;; This function is called by:
  2772 ;;		_I2C_Master_Start
  2773 ;;		_I2C_Master_Stop
  2774 ;;		_I2C_Master_Write
  2775 ;;		_I2C_Master_Read
  2776 ;;		_I2C_Master_RepeatedStart
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           	psect	text11
  2781  002426                     __ptext11:
  2782                           	opt stack 0
  2783  002426                     _I2C_Master_Wait:
  2784                           	opt stack 21
  2785  002426                     l34:
  2786  002426  B4C7               	btfsc	4039,2,c	;volatile
  2787  002428  D7FE               	goto	l34
  2788  00242A  CFC5 F090          	movff	4037,??_I2C_Master_Wait	;volatile
  2789  00242E  0E1F               	movlw	31
  2790  002430  0100               	movlb	0	; () banked
  2791  002432  1790               	andwf	??_I2C_Master_Wait& (0+255),f,b
  2792  002434  B4D8               	btfsc	status,2,c
  2793  002436  0012               	return	
  2794  002438  D7F6               	goto	l34
  2795  00243A                     __end_of_I2C_Master_Wait:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           prodh	equ	0xFF4
  2802                           prodl	equ	0xFF3
  2803                           intcon	equ	0xFF2
  2804                           intcon2	equ	0xFF1
  2805                           intcon3	equ	0xFF0
  2806                           postinc0	equ	0xFEE
  2807                           wreg	equ	0xFE8
  2808                           indf2	equ	0xFDF
  2809                           fsr2h	equ	0xFDA
  2810                           fsr2l	equ	0xFD9
  2811                           status	equ	0xFD8
  2812                           
  2813 ;; *************** function _bottle_time *****************
  2814 ;; Defined at:
  2815 ;;		line 324 in file "main.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;  time            2   50[BANK0 ] int 
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;		None
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      void 
  2822 ;; Registers used:
  2823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2829 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;Total ram usage:        2 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:   10
  2836 ;; This function calls:
  2837 ;;		_lcdInst
  2838 ;;		_printf
  2839 ;; This function is called by:
  2840 ;;		_main
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text12
  2845  00228A                     __ptext12:
  2846                           	opt stack 0
  2847  00228A                     _bottle_time:
  2848                           	opt stack 20
  2849                           
  2850                           ;main.c: 325: lcdInst(0b10000000);
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;incstack = 0
  2854  00228A  0E80               	movlw	128
  2855  00228C  EC2E  F012         	call	_lcdInst
  2856                           
  2857                           ;main.c: 326: printf("Total Operation       ");
  2858  002290  0E9A               	movlw	low STR_17
  2859  002292  0100               	movlb	0	; () banked
  2860  002294  6F9C               	movwf	printf@f& (0+255),b
  2861  002296  0EFE               	movlw	high STR_17
  2862  002298  0100               	movlb	0	; () banked
  2863  00229A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2864  00229C  EC09  F000         	call	_printf	;wreg free
  2865                           
  2866                           ;main.c: 327: lcdInst(0b11000000);
  2867  0022A0  0EC0               	movlw	192
  2868  0022A2  EC2E  F012         	call	_lcdInst
  2869                           
  2870                           ;main.c: 328: printf("Time: %d s       ", time);
  2871  0022A6  0EDF               	movlw	low STR_18
  2872  0022A8  0100               	movlb	0	; () banked
  2873  0022AA  6F9C               	movwf	printf@f& (0+255),b
  2874  0022AC  0EFE               	movlw	high STR_18
  2875  0022AE  0100               	movlb	0	; () banked
  2876  0022B0  6F9D               	movwf	(printf@f+1)& (0+255),b
  2877  0022B2  C0B2  F09E         	movff	bottle_time@time,?_printf+2
  2878  0022B6  C0B3  F09F         	movff	bottle_time@time+1,?_printf+3
  2879  0022BA  EC09  F000         	call	_printf	;wreg free
  2880  0022BE  0012               	return	
  2881  0022C0                     __end_of_bottle_time:
  2882                           	opt stack 0
  2883                           tblptru	equ	0xFF8
  2884                           tblptrh	equ	0xFF7
  2885                           tblptrl	equ	0xFF6
  2886                           tablat	equ	0xFF5
  2887                           prodh	equ	0xFF4
  2888                           prodl	equ	0xFF3
  2889                           intcon	equ	0xFF2
  2890                           intcon2	equ	0xFF1
  2891                           intcon3	equ	0xFF0
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           indf2	equ	0xFDF
  2895                           fsr2h	equ	0xFDA
  2896                           fsr2l	equ	0xFD9
  2897                           status	equ	0xFD8
  2898                           
  2899 ;; *************** function _bottle_count *****************
  2900 ;; Defined at:
  2901 ;;		line 282 in file "main.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;		None
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;		None
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;Total ram usage:        0 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:   10
  2922 ;; This function calls:
  2923 ;;		___awmod
  2924 ;;		_lcdInst
  2925 ;;		_printf
  2926 ;; This function is called by:
  2927 ;;		_main
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text13
  2932  000E32                     __ptext13:
  2933                           	opt stack 0
  2934  000E32                     _bottle_count:
  2935                           	opt stack 20
  2936                           
  2937                           ;main.c: 283: switch(bottle_count_disp % 5){
  2938                           
  2939                           ;incstack = 0
  2940  000E32  D083               	goto	l3763
  2941  000E34                     l3727:
  2942                           
  2943                           ;main.c: 285: lcdInst(0b10000000);
  2944  000E34  0E80               	movlw	128
  2945  000E36  EC2E  F012         	call	_lcdInst
  2946                           
  2947                           ;main.c: 286: printf("Bottle Count    ");
  2948  000E3A  0E24               	movlw	low STR_6
  2949  000E3C  0100               	movlb	0	; () banked
  2950  000E3E  6F9C               	movwf	printf@f& (0+255),b
  2951  000E40  0EFF               	movlw	high STR_6
  2952  000E42  0100               	movlb	0	; () banked
  2953  000E44  6F9D               	movwf	(printf@f+1)& (0+255),b
  2954  000E46  EC09  F000         	call	_printf	;wreg free
  2955                           
  2956                           ;main.c: 287: lcdInst(0b11000000);
  2957  000E4A  0EC0               	movlw	192
  2958  000E4C  EC2E  F012         	call	_lcdInst
  2959                           
  2960                           ;main.c: 288: printf("Total: 10       ");
  2961  000E50  0E13               	movlw	low STR_7
  2962  000E52  0100               	movlb	0	; () banked
  2963  000E54  6F9C               	movwf	printf@f& (0+255),b
  2964  000E56  0EFF               	movlw	high STR_7
  2965  000E58  0100               	movlb	0	; () banked
  2966  000E5A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2967  000E5C  EC09  F000         	call	_printf	;wreg free
  2968                           
  2969                           ;main.c: 289: break;
  2970  000E60  0012               	return	
  2971  000E62                     l3733:
  2972                           
  2973                           ;main.c: 291: lcdInst(0b10000000);
  2974  000E62  0E80               	movlw	128
  2975  000E64  EC2E  F012         	call	_lcdInst
  2976                           
  2977                           ;main.c: 292: printf("YOP+CAP+LBL: 3  ");
  2978  000E68  0E68               	movlw	low STR_8
  2979  000E6A  0100               	movlb	0	; () banked
  2980  000E6C  6F9C               	movwf	printf@f& (0+255),b
  2981  000E6E  0EFF               	movlw	high STR_8
  2982  000E70  0100               	movlb	0	; () banked
  2983  000E72  6F9D               	movwf	(printf@f+1)& (0+255),b
  2984  000E74  EC09  F000         	call	_printf	;wreg free
  2985                           
  2986                           ;main.c: 293: lcdInst(0b11000000);
  2987  000E78  0EC0               	movlw	192
  2988  000E7A  EC2E  F012         	call	_lcdInst
  2989                           
  2990                           ;main.c: 294: printf("YOP+CAP-LBL: 1  ");
  2991  000E7E  0E57               	movlw	low STR_9
  2992  000E80  0100               	movlb	0	; () banked
  2993  000E82  6F9C               	movwf	printf@f& (0+255),b
  2994  000E84  0EFF               	movlw	high STR_9
  2995  000E86  0100               	movlb	0	; () banked
  2996  000E88  6F9D               	movwf	(printf@f+1)& (0+255),b
  2997  000E8A  EC09  F000         	call	_printf	;wreg free
  2998                           
  2999                           ;main.c: 295: break;
  3000  000E8E  0012               	return	
  3001  000E90                     l3739:
  3002                           
  3003                           ;main.c: 297: lcdInst(0b10000000);
  3004  000E90  0E80               	movlw	128
  3005  000E92  EC2E  F012         	call	_lcdInst
  3006                           
  3007                           ;main.c: 298: printf("YOP-CAP+LBL: 1  ");
  3008  000E96  0E46               	movlw	low STR_10
  3009  000E98  0100               	movlb	0	; () banked
  3010  000E9A  6F9C               	movwf	printf@f& (0+255),b
  3011  000E9C  0EFF               	movlw	high STR_10
  3012  000E9E  0100               	movlb	0	; () banked
  3013  000EA0  6F9D               	movwf	(printf@f+1)& (0+255),b
  3014  000EA2  EC09  F000         	call	_printf	;wreg free
  3015                           
  3016                           ;main.c: 299: lcdInst(0b11000000);
  3017  000EA6  0EC0               	movlw	192
  3018  000EA8  EC2E  F012         	call	_lcdInst
  3019                           
  3020                           ;main.c: 300: printf("YOP-CAP-LBL: 0  ");
  3021  000EAC  0E35               	movlw	low STR_11
  3022  000EAE  0100               	movlb	0	; () banked
  3023  000EB0  6F9C               	movwf	printf@f& (0+255),b
  3024  000EB2  0EFF               	movlw	high STR_11
  3025  000EB4  0100               	movlb	0	; () banked
  3026  000EB6  6F9D               	movwf	(printf@f+1)& (0+255),b
  3027  000EB8  EC09  F000         	call	_printf	;wreg free
  3028                           
  3029                           ;main.c: 301: break;
  3030  000EBC  0012               	return	
  3031  000EBE                     l3745:
  3032                           
  3033                           ;main.c: 303: lcdInst(0b10000000);
  3034  000EBE  0E80               	movlw	128
  3035  000EC0  EC2E  F012         	call	_lcdInst
  3036                           
  3037                           ;main.c: 304: printf("ESKA+CAP+LBL: 1 ");
  3038  000EC4  0E79               	movlw	low STR_12
  3039  000EC6  0100               	movlb	0	; () banked
  3040  000EC8  6F9C               	movwf	printf@f& (0+255),b
  3041  000ECA  0EFF               	movlw	high STR_12
  3042  000ECC  0100               	movlb	0	; () banked
  3043  000ECE  6F9D               	movwf	(printf@f+1)& (0+255),b
  3044  000ED0  EC09  F000         	call	_printf	;wreg free
  3045                           
  3046                           ;main.c: 305: lcdInst(0b11000000);
  3047  000ED4  0EC0               	movlw	192
  3048  000ED6  EC2E  F012         	call	_lcdInst
  3049                           
  3050                           ;main.c: 306: printf("ESKA+CAP-LBL: 1 ");
  3051  000EDA  0E9B               	movlw	low STR_13
  3052  000EDC  0100               	movlb	0	; () banked
  3053  000EDE  6F9C               	movwf	printf@f& (0+255),b
  3054  000EE0  0EFF               	movlw	high STR_13
  3055  000EE2  0100               	movlb	0	; () banked
  3056  000EE4  6F9D               	movwf	(printf@f+1)& (0+255),b
  3057  000EE6  EC09  F000         	call	_printf	;wreg free
  3058                           
  3059                           ;main.c: 307: break;
  3060  000EEA  0012               	return	
  3061  000EEC                     l3751:
  3062                           
  3063                           ;main.c: 309: lcdInst(0b10000000);
  3064  000EEC  0E80               	movlw	128
  3065  000EEE  EC2E  F012         	call	_lcdInst
  3066                           
  3067                           ;main.c: 310: printf("ESKA-CAP+LBL: 1 ");
  3068  000EF2  0E8A               	movlw	low STR_14
  3069  000EF4  0100               	movlb	0	; () banked
  3070  000EF6  6F9C               	movwf	printf@f& (0+255),b
  3071  000EF8  0EFF               	movlw	high STR_14
  3072  000EFA  0100               	movlb	0	; () banked
  3073  000EFC  6F9D               	movwf	(printf@f+1)& (0+255),b
  3074  000EFE  EC09  F000         	call	_printf	;wreg free
  3075                           
  3076                           ;main.c: 311: lcdInst(0b11000000);
  3077  000F02  0EC0               	movlw	192
  3078  000F04  EC2E  F012         	call	_lcdInst
  3079                           
  3080                           ;main.c: 312: printf("ESKA-CAP-LBL: 2 ");
  3081  000F08  0EAC               	movlw	low STR_15
  3082  000F0A  0100               	movlb	0	; () banked
  3083  000F0C  6F9C               	movwf	printf@f& (0+255),b
  3084  000F0E  0EFF               	movlw	high STR_15
  3085  000F10  0100               	movlb	0	; () banked
  3086  000F12  6F9D               	movwf	(printf@f+1)& (0+255),b
  3087  000F14  EC09  F000         	call	_printf	;wreg free
  3088                           
  3089                           ;main.c: 313: break;
  3090  000F18  0012               	return	
  3091  000F1A                     l3757:
  3092                           
  3093                           ;main.c: 316: lcdInst(0b10000000);
  3094  000F1A  0E80               	movlw	128
  3095  000F1C  EC2E  F012         	call	_lcdInst
  3096                           
  3097                           ;main.c: 317: printf("ERROR: %d", bottle_count_disp);
  3098  000F20  0EF4               	movlw	low STR_16
  3099  000F22  0100               	movlb	0	; () banked
  3100  000F24  6F9C               	movwf	printf@f& (0+255),b
  3101  000F26  0EFF               	movlw	high STR_16
  3102  000F28  0100               	movlb	0	; () banked
  3103  000F2A  6F9D               	movwf	(printf@f+1)& (0+255),b
  3104  000F2C  C0C4  F09E         	movff	_bottle_count_disp,?_printf+2
  3105  000F30  C0C5  F09F         	movff	_bottle_count_disp+1,?_printf+3
  3106  000F34  EC09  F000         	call	_printf	;wreg free
  3107  000F38  D7F0               	goto	l3757
  3108  000F3A                     l3763:
  3109  000F3A  C0C4  F090         	movff	_bottle_count_disp,___awmod@dividend
  3110  000F3E  C0C5  F091         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3111  000F42  0E00               	movlw	0
  3112  000F44  0100               	movlb	0	; () banked
  3113  000F46  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3114  000F48  0E05               	movlw	5
  3115  000F4A  6F92               	movwf	___awmod@divisor& (0+255),b
  3116  000F4C  EC5F  F00D         	call	___awmod	;wreg free
  3117                           
  3118                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3119                           ; Switch size 1, requested type "space"
  3120                           ; Number of cases is 1, Range of values is 0 to 0
  3121                           ; switch strategies available:
  3122                           ; Name         Instructions Cycles
  3123                           ; simple_byte            4     3 (average)
  3124                           ;	Chosen strategy is simple_byte
  3125  000F50  0100               	movlb	0	; () banked
  3126  000F52  5191               	movf	(?___awmod+1)& (0+255),w,b
  3127  000F54  0A00               	xorlw	0	; case 0
  3128  000F56  A4D8               	btfss	status,2,c
  3129  000F58  D7E0               	goto	l3757
  3130                           
  3131                           ; BSR set to: 0
  3132                           ; Switch size 1, requested type "space"
  3133                           ; Number of cases is 5, Range of values is 0 to 4
  3134                           ; switch strategies available:
  3135                           ; Name         Instructions Cycles
  3136                           ; simple_byte           16     9 (average)
  3137                           ;	Chosen strategy is simple_byte
  3138  000F5A  0100               	movlb	0	; () banked
  3139  000F5C  5190               	movf	?___awmod& (0+255),w,b
  3140  000F5E  0A00               	xorlw	0	; case 0
  3141  000F60  B4D8               	btfsc	status,2,c
  3142  000F62  D768               	goto	l3727
  3143  000F64  0A01               	xorlw	1	; case 1
  3144  000F66  B4D8               	btfsc	status,2,c
  3145  000F68  D77C               	goto	l3733
  3146  000F6A  0A03               	xorlw	3	; case 2
  3147  000F6C  B4D8               	btfsc	status,2,c
  3148  000F6E  D790               	goto	l3739
  3149  000F70  0A01               	xorlw	1	; case 3
  3150  000F72  B4D8               	btfsc	status,2,c
  3151  000F74  D7A4               	goto	l3745
  3152  000F76  0A07               	xorlw	7	; case 4
  3153  000F78  B4D8               	btfsc	status,2,c
  3154  000F7A  D7B8               	goto	l3751
  3155  000F7C  D7CE               	goto	l3757
  3156  000F7E                     __end_of_bottle_count:
  3157                           	opt stack 0
  3158                           tblptru	equ	0xFF8
  3159                           tblptrh	equ	0xFF7
  3160                           tblptrl	equ	0xFF6
  3161                           tablat	equ	0xFF5
  3162                           prodh	equ	0xFF4
  3163                           prodl	equ	0xFF3
  3164                           intcon	equ	0xFF2
  3165                           intcon2	equ	0xFF1
  3166                           intcon3	equ	0xFF0
  3167                           postinc0	equ	0xFEE
  3168                           wreg	equ	0xFE8
  3169                           indf2	equ	0xFDF
  3170                           fsr2h	equ	0xFDA
  3171                           fsr2l	equ	0xFD9
  3172                           status	equ	0xFD8
  3173                           
  3174 ;; *************** function _printf *****************
  3175 ;; Defined at:
  3176 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3179 ;;		 -> STR_23(15), STR_22(16), STR_21(25), STR_20(24), 
  3180 ;;		 -> STR_19(23), STR_18(18), STR_17(23), STR_16(10), 
  3181 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  3182 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  3183 ;;		 -> STR_7(17), STR_6(17), STR_5(23), STR_4(23), 
  3184 ;;		 -> STR_3(10), STR_2(17), STR_1(14), 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  idx             1   40[BANK0 ] unsigned char 
  3187 ;;  tmpval          4    0        struct .
  3188 ;;  cp              3    0        PTR const unsigned char 
  3189 ;;  width           2   47[BANK0 ] int 
  3190 ;;  val             2   44[BANK0 ] unsigned int 
  3191 ;;  ap              2   41[BANK0 ] PTR void [1]
  3192 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3193 ;;  len             2    0        unsigned int 
  3194 ;;  c               1   49[BANK0 ] char 
  3195 ;;  flag            1   46[BANK0 ] unsigned char 
  3196 ;;  prec            1   43[BANK0 ] char 
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  2   28[BANK0 ] int 
  3199 ;; Registers used:
  3200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3206 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;Total ram usage:       22 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    9
  3213 ;; This function calls:
  3214 ;;		___lwdiv
  3215 ;;		___lwmod
  3216 ;;		___wmul
  3217 ;;		_isdigit
  3218 ;;		_putch
  3219 ;; This function is called by:
  3220 ;;		_standby
  3221 ;;		_date_time
  3222 ;;		_bottle_count
  3223 ;;		_bottle_time
  3224 ;;		_operation
  3225 ;;		_operationend
  3226 ;;		_emergencystop
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text14
  3231  000012                     __ptext14:
  3232                           	opt stack 0
  3233  000012                     _printf:
  3234                           	opt stack 20
  3235                           
  3236                           ;doprnt.c: 466: va_list ap;
  3237                           ;doprnt.c: 499: signed char c;
  3238                           ;doprnt.c: 501: int width;
  3239                           ;doprnt.c: 506: signed char prec;
  3240                           ;doprnt.c: 508: unsigned char flag;
  3241                           ;doprnt.c: 523: union {
  3242                           ;doprnt.c: 524: unsigned long vd;
  3243                           ;doprnt.c: 525: double integ;
  3244                           ;doprnt.c: 526: } tmpval;
  3245                           ;doprnt.c: 528: unsigned int val;
  3246                           ;doprnt.c: 529: unsigned len;
  3247                           ;doprnt.c: 530: const char * cp;
  3248                           ;doprnt.c: 533: *ap = __va_start();
  3249                           
  3250                           ;incstack = 0
  3251  000012  0E9E               	movlw	low (?_printf+2)
  3252  000014  0100               	movlb	0	; () banked
  3253  000016  6FA9               	movwf	printf@ap& (0+255),b
  3254  000018  0E00               	movlw	high (?_printf+2)
  3255  00001A  0100               	movlb	0	; () banked
  3256  00001C  6FAA               	movwf	(printf@ap+1)& (0+255),b
  3257                           
  3258                           ;doprnt.c: 536: while(c = *f++) {
  3259  00001E  D1C4               	goto	l3405
  3260  000020                     l3279:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;doprnt.c: 538: if(c != '%')
  3264  000020  0E25               	movlw	37
  3265  000022  0100               	movlb	0	; () banked
  3266  000024  19B1               	xorwf	printf@c& (0+255),w,b
  3267  000026  B4D8               	btfsc	status,2,c
  3268  000028  D005               	goto	l3283
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;doprnt.c: 540: {
  3272                           ;doprnt.c: 541: (putch(c) );
  3273  00002A  0100               	movlb	0	; () banked
  3274  00002C  51B1               	movf	printf@c& (0+255),w,b
  3275  00002E  EC26  F012         	call	_putch
  3276                           
  3277                           ;doprnt.c: 542: continue;
  3278  000032  D1BA               	goto	l3405
  3279  000034                     l3283:
  3280                           
  3281                           ;doprnt.c: 543: }
  3282                           ;doprnt.c: 546: width = 0;
  3283  000034  0E00               	movlw	0
  3284  000036  0100               	movlb	0	; () banked
  3285  000038  6FB0               	movwf	(printf@width+1)& (0+255),b
  3286  00003A  0E00               	movlw	0
  3287  00003C  6FAF               	movwf	printf@width& (0+255),b
  3288                           
  3289                           ;doprnt.c: 548: flag = 0;
  3290  00003E  0E00               	movlw	0
  3291  000040  0100               	movlb	0	; () banked
  3292  000042  6FAE               	movwf	printf@flag& (0+255),b
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;doprnt.c: 551: switch(*f) {
  3296                           
  3297                           ;doprnt.c: 550: for(;;) {
  3298  000044  D005               	goto	l3289
  3299  000046                     l3285:
  3300                           
  3301                           ;doprnt.c: 580: flag |= 0x04;
  3302  000046  0100               	movlb	0	; () banked
  3303  000048  85AE               	bsf	printf@flag& (0+255),2,b
  3304                           
  3305                           ;doprnt.c: 581: f++;
  3306  00004A  0100               	movlb	0	; () banked
  3307  00004C  4B9C               	infsnz	printf@f& (0+255),f,b
  3308  00004E  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3309  000050                     l3289:
  3310  000050  C09C  FFF6         	movff	printf@f,tblptrl
  3311  000054  C09D  FFF7         	movff	printf@f+1,tblptrh
  3312  000058                     	if	0	;tblptru may be non-zero
  3313  000058                     	endif
  3314  000058                     	if	0	;tblptru may be non-zero
  3315  000058                     	endif
  3316  000058  0008               	tblrd		*
  3317  00005A  50F5               	movf	tablat,w,c
  3318                           
  3319                           ; Switch size 1, requested type "space"
  3320                           ; Number of cases is 1, Range of values is 48 to 48
  3321                           ; switch strategies available:
  3322                           ; Name         Instructions Cycles
  3323                           ; simple_byte            4     3 (average)
  3324                           ;	Chosen strategy is simple_byte
  3325  00005C  0A30               	xorlw	48	; case 48
  3326  00005E  B4D8               	btfsc	status,2,c
  3327  000060  D7F2               	goto	l3285
  3328                           
  3329                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3330                           
  3331                           ;doprnt.c: 586: }
  3332                           
  3333                           ;doprnt.c: 585: break;
  3334  000062  C09C  FFF6         	movff	printf@f,tblptrl
  3335  000066  C09D  FFF7         	movff	printf@f+1,tblptrh
  3336  00006A                     	if	0	;tblptru may be non-zero
  3337  00006A                     	endif
  3338  00006A                     	if	0	;tblptru may be non-zero
  3339  00006A                     	endif
  3340  00006A  0008               	tblrd		*
  3341  00006C  50F5               	movf	tablat,w,c
  3342  00006E  EC92  F011         	call	_isdigit
  3343  000072  A0D8               	btfss	status,0,c
  3344  000074  D044               	goto	l3307
  3345                           
  3346                           ;doprnt.c: 598: width = 0;
  3347  000076  0E00               	movlw	0
  3348  000078  0100               	movlb	0	; () banked
  3349  00007A  6FB0               	movwf	(printf@width+1)& (0+255),b
  3350  00007C  0E00               	movlw	0
  3351  00007E  6FAF               	movwf	printf@width& (0+255),b
  3352  000080                     l3295:
  3353                           
  3354                           ;doprnt.c: 600: width *= 10;
  3355  000080  C0AF  F090         	movff	printf@width,___wmul@multiplier
  3356  000084  C0B0  F091         	movff	printf@width+1,___wmul@multiplier+1
  3357  000088  0E00               	movlw	0
  3358  00008A  0100               	movlb	0	; () banked
  3359  00008C  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3360  00008E  0E0A               	movlw	10
  3361  000090  6F92               	movwf	___wmul@multiplicand& (0+255),b
  3362  000092  EC60  F011         	call	___wmul	;wreg free
  3363  000096  C090  F0AF         	movff	?___wmul,printf@width
  3364  00009A  C091  F0B0         	movff	?___wmul+1,printf@width+1
  3365                           
  3366                           ;doprnt.c: 601: width += *f++ - '0';
  3367  00009E  0ED0               	movlw	208
  3368  0000A0  0100               	movlb	0	; () banked
  3369  0000A2  6FA4               	movwf	??_printf& (0+255),b
  3370  0000A4  0EFF               	movlw	255
  3371  0000A6  0100               	movlb	0	; () banked
  3372  0000A8  6FA5               	movwf	(??_printf+1)& (0+255),b
  3373  0000AA  C09C  FFF6         	movff	printf@f,tblptrl
  3374  0000AE  C09D  FFF7         	movff	printf@f+1,tblptrh
  3375  0000B2                     	if	0	;tblptru may be non-zero
  3376  0000B2                     	endif
  3377  0000B2                     	if	0	;tblptru may be non-zero
  3378  0000B2                     	endif
  3379  0000B2  0008               	tblrd		*
  3380  0000B4  50F5               	movf	tablat,w,c
  3381  0000B6  0100               	movlb	0	; () banked
  3382  0000B8  6FA6               	movwf	(??_printf+2)& (0+255),b
  3383  0000BA  6BA7               	clrf	(??_printf+3)& (0+255),b
  3384  0000BC  0100               	movlb	0	; () banked
  3385  0000BE  51A4               	movf	??_printf& (0+255),w,b
  3386  0000C0  0100               	movlb	0	; () banked
  3387  0000C2  27A6               	addwf	(??_printf+2)& (0+255),f,b
  3388  0000C4  0100               	movlb	0	; () banked
  3389  0000C6  51A5               	movf	(??_printf+1)& (0+255),w,b
  3390  0000C8  0100               	movlb	0	; () banked
  3391  0000CA  23A7               	addwfc	(??_printf+3)& (0+255),f,b
  3392  0000CC  0100               	movlb	0	; () banked
  3393  0000CE  51A6               	movf	(??_printf+2)& (0+255),w,b
  3394  0000D0  0100               	movlb	0	; () banked
  3395  0000D2  27AF               	addwf	printf@width& (0+255),f,b
  3396  0000D4  0100               	movlb	0	; () banked
  3397  0000D6  51A7               	movf	(??_printf+3)& (0+255),w,b
  3398  0000D8  0100               	movlb	0	; () banked
  3399  0000DA  23B0               	addwfc	(printf@width+1)& (0+255),f,b
  3400                           
  3401                           ; BSR set to: 0
  3402  0000DC  0100               	movlb	0	; () banked
  3403  0000DE  4B9C               	infsnz	printf@f& (0+255),f,b
  3404  0000E0  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3408  0000E2  C09C  FFF6         	movff	printf@f,tblptrl
  3409  0000E6  C09D  FFF7         	movff	printf@f+1,tblptrh
  3410  0000EA                     	if	0	;tblptru may be non-zero
  3411  0000EA                     	endif
  3412  0000EA                     	if	0	;tblptru may be non-zero
  3413  0000EA                     	endif
  3414  0000EA  0008               	tblrd		*
  3415  0000EC  50F5               	movf	tablat,w,c
  3416  0000EE  EC92  F011         	call	_isdigit
  3417  0000F2  A0D8               	btfss	status,0,c
  3418  0000F4  D004               	goto	l3307
  3419  0000F6  D7C4               	goto	l3295
  3420  0000F8                     l3303:
  3421                           
  3422                           ;doprnt.c: 721: flag |= 0x80;
  3423  0000F8  0100               	movlb	0	; () banked
  3424  0000FA  8FAE               	bsf	printf@flag& (0+255),7,b
  3425                           
  3426                           ;doprnt.c: 723: break;
  3427  0000FC  D019               	goto	l348
  3428  0000FE                     l3307:
  3429  0000FE  C09C  FFF6         	movff	printf@f,tblptrl
  3430  000102  C09D  FFF7         	movff	printf@f+1,tblptrh
  3431  000106  0100               	movlb	0	; () banked
  3432  000108  4B9C               	infsnz	printf@f& (0+255),f,b
  3433  00010A  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3434  00010C                     	if	0	;tblptru may be non-zero
  3435  00010C                     	endif
  3436  00010C                     	if	0	;tblptru may be non-zero
  3437  00010C                     	endif
  3438  00010C  0008               	tblrd		*
  3439  00010E  CFF5 F0B1          	movff	tablat,printf@c
  3440  000112  0100               	movlb	0	; () banked
  3441  000114  51B1               	movf	printf@c& (0+255),w,b
  3442                           
  3443                           ; Switch size 1, requested type "space"
  3444                           ; Number of cases is 4, Range of values is 0 to 120
  3445                           ; switch strategies available:
  3446                           ; Name         Instructions Cycles
  3447                           ; simple_byte           13     7 (average)
  3448                           ;	Chosen strategy is simple_byte
  3449  000116  0A00               	xorlw	0	; case 0
  3450  000118  B4D8               	btfsc	status,2,c
  3451  00011A  0012               	return	
  3452  00011C  0A64               	xorlw	100	; case 100
  3453  00011E  B4D8               	btfsc	status,2,c
  3454  000120  D007               	goto	l348
  3455  000122  0A0D               	xorlw	13	; case 105
  3456  000124  B4D8               	btfsc	status,2,c
  3457  000126  D004               	goto	l348
  3458  000128  0A11               	xorlw	17	; case 120
  3459  00012A  B4D8               	btfsc	status,2,c
  3460  00012C  D7E5               	goto	l3303
  3461  00012E  D13C               	goto	l3405
  3462  000130                     l348:
  3463                           
  3464                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3465  000130  0100               	movlb	0	; () banked
  3466  000132  BFAE               	btfsc	printf@flag& (0+255),7,b
  3467  000134  D019               	goto	l3319
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;doprnt.c: 1253: {
  3471                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3472  000136  C0A9  FFD9         	movff	printf@ap,fsr2l
  3473  00013A  C0AA  FFDA         	movff	printf@ap+1,fsr2h
  3474  00013E  CFDE F0AC          	movff	postinc2,printf@val
  3475  000142  CFDD F0AD          	movff	postdec2,printf@val+1
  3476                           
  3477                           ; BSR set to: 0
  3478  000146  0E02               	movlw	2
  3479  000148  0100               	movlb	0	; () banked
  3480  00014A  27A9               	addwf	printf@ap& (0+255),f,b
  3481  00014C  0E00               	movlw	0
  3482  00014E  23AA               	addwfc	(printf@ap+1)& (0+255),f,b
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;doprnt.c: 1261: if((int)val < 0) {
  3486  000150  0100               	movlb	0	; () banked
  3487  000152  AFAD               	btfss	(printf@val+1)& (0+255),7,b
  3488  000154  D053               	goto	l3353
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;doprnt.c: 1262: flag |= 0x03;
  3492  000156  0E03               	movlw	3
  3493  000158  0100               	movlb	0	; () banked
  3494  00015A  13AE               	iorwf	printf@flag& (0+255),f,b
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;doprnt.c: 1263: val = -val;
  3498  00015C  0100               	movlb	0	; () banked
  3499  00015E  6DAC               	negf	printf@val& (0+255),b
  3500  000160  1FAD               	comf	(printf@val+1)& (0+255),f,b
  3501  000162  B0D8               	btfsc	status,0,c
  3502  000164  2BAD               	incf	(printf@val+1)& (0+255),f,b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;doprnt.c: 1264: }
  3506                           ;doprnt.c: 1266: }
  3507  000166  D04A               	goto	l3353
  3508  000168                     l3319:
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;doprnt.c: 1268: else
  3512                           ;doprnt.c: 1273: {
  3513                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3514  000168  C0A9  FFD9         	movff	printf@ap,fsr2l
  3515  00016C  C0AA  FFDA         	movff	printf@ap+1,fsr2h
  3516  000170  CFDE F0AC          	movff	postinc2,printf@val
  3517  000174  CFDD F0AD          	movff	postdec2,printf@val+1
  3518                           
  3519                           ; BSR set to: 0
  3520  000178  0E02               	movlw	2
  3521  00017A  0100               	movlb	0	; () banked
  3522  00017C  27A9               	addwf	printf@ap& (0+255),f,b
  3523  00017E  0E00               	movlw	0
  3524  000180  23AA               	addwfc	(printf@ap+1)& (0+255),f,b
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;doprnt.c: 1287: }
  3528                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3529  000182  D03C               	goto	l3353
  3530  000184                     l3323:
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3534  000184  0E01               	movlw	1
  3535  000186  0100               	movlb	0	; () banked
  3536  000188  6FB1               	movwf	printf@c& (0+255),b
  3537  00018A                     l3325:
  3538                           
  3539                           ; BSR set to: 0
  3540  00018A  0E05               	movlw	5
  3541  00018C  0100               	movlb	0	; () banked
  3542  00018E  19B1               	xorwf	printf@c& (0+255),w,b
  3543  000190  B4D8               	btfsc	status,2,c
  3544  000192  D03D               	goto	l3355
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;doprnt.c: 1306: if(val < dpowers[c])
  3548                           
  3549                           ; BSR set to: 0
  3550                           
  3551                           ; BSR set to: 0
  3552  000194  0100               	movlb	0	; () banked
  3553  000196  51B1               	movf	printf@c& (0+255),w,b
  3554  000198  0D02               	mullw	2
  3555  00019A  0E00               	movlw	low _dpowers
  3556  00019C  24F3               	addwf	prodl,w,c
  3557  00019E  6EF6               	movwf	tblptrl,c
  3558  0001A0  0EFE               	movlw	high _dpowers
  3559  0001A2  20F4               	addwfc	prodh,w,c
  3560  0001A4  6EF7               	movwf	tblptrh,c
  3561  0001A6                     	if	0	;There are less than 3 active tblptr bytes
  3562  0001A6                     	endif
  3563  0001A6  0009               	tblrd		*+
  3564  0001A8  50F5               	movf	tablat,w,c
  3565  0001AA  0100               	movlb	0	; () banked
  3566  0001AC  5DAC               	subwf	printf@val& (0+255),w,b
  3567  0001AE  0009               	tblrd		*+
  3568  0001B0  50F5               	movf	tablat,w,c
  3569  0001B2  0100               	movlb	0	; () banked
  3570  0001B4  59AD               	subwfb	(printf@val+1)& (0+255),w,b
  3571  0001B6  A0D8               	btfss	status,0,c
  3572  0001B8  D02A               	goto	l3355
  3573                           
  3574                           ; BSR set to: 0
  3575                           
  3576                           ; BSR set to: 0
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;doprnt.c: 1307: break;
  3580  0001BA  0100               	movlb	0	; () banked
  3581  0001BC  2BB1               	incf	printf@c& (0+255),f,b
  3582  0001BE  D7E5               	goto	l3325
  3583  0001C0                     l3337:
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3587  0001C0  0E01               	movlw	1
  3588  0001C2  0100               	movlb	0	; () banked
  3589  0001C4  6FB1               	movwf	printf@c& (0+255),b
  3590  0001C6                     l3339:
  3591                           
  3592                           ; BSR set to: 0
  3593  0001C6  0E04               	movlw	4
  3594  0001C8  0100               	movlb	0	; () banked
  3595  0001CA  19B1               	xorwf	printf@c& (0+255),w,b
  3596  0001CC  B4D8               	btfsc	status,2,c
  3597  0001CE  D01F               	goto	l3355
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3601                           
  3602                           ; BSR set to: 0
  3603                           
  3604                           ; BSR set to: 0
  3605  0001D0  0100               	movlb	0	; () banked
  3606  0001D2  51B1               	movf	printf@c& (0+255),w,b
  3607  0001D4  0D02               	mullw	2
  3608  0001D6  0E0A               	movlw	low _hexpowers
  3609  0001D8  24F3               	addwf	prodl,w,c
  3610  0001DA  6EF6               	movwf	tblptrl,c
  3611  0001DC  0EFE               	movlw	high _hexpowers
  3612  0001DE  20F4               	addwfc	prodh,w,c
  3613  0001E0  6EF7               	movwf	tblptrh,c
  3614  0001E2                     	if	0	;There are less than 3 active tblptr bytes
  3615  0001E2                     	endif
  3616  0001E2  0009               	tblrd		*+
  3617  0001E4  50F5               	movf	tablat,w,c
  3618  0001E6  0100               	movlb	0	; () banked
  3619  0001E8  5DAC               	subwf	printf@val& (0+255),w,b
  3620  0001EA  0009               	tblrd		*+
  3621  0001EC  50F5               	movf	tablat,w,c
  3622  0001EE  0100               	movlb	0	; () banked
  3623  0001F0  59AD               	subwfb	(printf@val+1)& (0+255),w,b
  3624  0001F2  A0D8               	btfss	status,0,c
  3625  0001F4  D00C               	goto	l3355
  3626                           
  3627                           ; BSR set to: 0
  3628                           
  3629                           ; BSR set to: 0
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;doprnt.c: 1318: break;
  3633  0001F6  0100               	movlb	0	; () banked
  3634  0001F8  2BB1               	incf	printf@c& (0+255),f,b
  3635  0001FA  D7E5               	goto	l3339
  3636  0001FC                     l3353:
  3637                           
  3638                           ; BSR set to: 0
  3639  0001FC  0100               	movlb	0	; () banked
  3640  0001FE  51AE               	movf	printf@flag& (0+255),w,b
  3641  000200  0B80               	andlw	128
  3642                           
  3643                           ; Switch size 1, requested type "space"
  3644                           ; Number of cases is 2, Range of values is 0 to 128
  3645                           ; switch strategies available:
  3646                           ; Name         Instructions Cycles
  3647                           ; simple_byte            7     4 (average)
  3648                           ;	Chosen strategy is simple_byte
  3649  000202  0A00               	xorlw	0	; case 0
  3650  000204  B4D8               	btfsc	status,2,c
  3651  000206  D7BE               	goto	l3323
  3652  000208  0A80               	xorlw	128	; case 128
  3653  00020A  B4D8               	btfsc	status,2,c
  3654  00020C  D7D9               	goto	l3337
  3655  00020E                     l3355:
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3659  00020E  0100               	movlb	0	; () banked
  3660  000210  51AF               	movf	printf@width& (0+255),w,b
  3661  000212  0100               	movlb	0	; () banked
  3662  000214  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3663  000216  B4D8               	btfsc	status,2,c
  3664  000218  D00B               	goto	l3361
  3665                           
  3666                           ; BSR set to: 0
  3667  00021A  C0AE  F0A4         	movff	printf@flag,??_printf
  3668  00021E  0E03               	movlw	3
  3669  000220  0100               	movlb	0	; () banked
  3670  000222  17A4               	andwf	??_printf& (0+255),f,b
  3671  000224  B4D8               	btfsc	status,2,c
  3672  000226  D004               	goto	l3361
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;doprnt.c: 1346: width--;
  3676  000228  0100               	movlb	0	; () banked
  3677  00022A  07AF               	decf	printf@width& (0+255),f,b
  3678  00022C  A0D8               	btfss	status,0,c
  3679  00022E  07B0               	decf	(printf@width+1)& (0+255),f,b
  3680  000230                     l3361:
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;doprnt.c: 1381: if(width > c)
  3684  000230  0E80               	movlw	128
  3685  000232  0100               	movlb	0	; () banked
  3686  000234  BFB1               	btfsc	printf@c& (0+255),7,b
  3687  000236  0E7F               	movlw	127
  3688  000238  0100               	movlb	0	; () banked
  3689  00023A  6FA4               	movwf	??_printf& (0+255),b
  3690  00023C  0100               	movlb	0	; () banked
  3691  00023E  51AF               	movf	printf@width& (0+255),w,b
  3692  000240  0100               	movlb	0	; () banked
  3693  000242  5DB1               	subwf	printf@c& (0+255),w,b
  3694  000244  0100               	movlb	0	; () banked
  3695  000246  51B0               	movf	(printf@width+1)& (0+255),w,b
  3696  000248  0A80               	xorlw	128
  3697  00024A  0100               	movlb	0	; () banked
  3698  00024C  59A4               	subwfb	??_printf& (0+255),w,b
  3699  00024E  B0D8               	btfsc	status,0,c
  3700  000250  D00B               	goto	l3365
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;doprnt.c: 1382: width -= c;
  3704  000252  0100               	movlb	0	; () banked
  3705  000254  51B1               	movf	printf@c& (0+255),w,b
  3706  000256  0100               	movlb	0	; () banked
  3707  000258  5FAF               	subwf	printf@width& (0+255),f,b
  3708  00025A  0E00               	movlw	0
  3709  00025C  0100               	movlb	0	; () banked
  3710  00025E  BFB1               	btfsc	printf@c& (0+255),7,b
  3711  000260  0EFF               	movlw	255
  3712  000262  0100               	movlb	0	; () banked
  3713  000264  5BB0               	subwfb	(printf@width+1)& (0+255),f,b
  3714  000266  D005               	goto	l3367
  3715  000268                     l3365:
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;doprnt.c: 1383: else
  3719                           ;doprnt.c: 1384: width = 0;
  3720  000268  0E00               	movlw	0
  3721  00026A  0100               	movlb	0	; () banked
  3722  00026C  6FB0               	movwf	(printf@width+1)& (0+255),b
  3723  00026E  0E00               	movlw	0
  3724  000270  6FAF               	movwf	printf@width& (0+255),b
  3725  000272                     l3367:
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;doprnt.c: 1387: if(flag & 0x04) {
  3729  000272  0100               	movlb	0	; () banked
  3730  000274  A5AE               	btfss	printf@flag& (0+255),2,b
  3731  000276  D018               	goto	l3379
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;doprnt.c: 1392: if(flag & 0x03)
  3735  000278  C0AE  F0A4         	movff	printf@flag,??_printf
  3736  00027C  0E03               	movlw	3
  3737  00027E  0100               	movlb	0	; () banked
  3738  000280  17A4               	andwf	??_printf& (0+255),f,b
  3739  000282  B4D8               	btfsc	status,2,c
  3740  000284  D003               	goto	l3373
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;doprnt.c: 1393: (putch('-') );
  3744  000286  0E2D               	movlw	45
  3745  000288  EC26  F012         	call	_putch
  3746  00028C                     l3373:
  3747                           
  3748                           ;doprnt.c: 1415: if(width)
  3749  00028C  0100               	movlb	0	; () banked
  3750  00028E  51AF               	movf	printf@width& (0+255),w,b
  3751  000290  0100               	movlb	0	; () banked
  3752  000292  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3753  000294  B4D8               	btfsc	status,2,c
  3754  000296  D025               	goto	l3389
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;doprnt.c: 1417: (putch('0') );
  3758                           
  3759                           ; BSR set to: 0
  3760                           
  3761                           ;doprnt.c: 1416: do
  3762  000298  0E30               	movlw	48
  3763  00029A  EC26  F012         	call	_putch
  3764                           
  3765                           ;doprnt.c: 1418: while(--width);
  3766  00029E  0100               	movlb	0	; () banked
  3767  0002A0  07AF               	decf	printf@width& (0+255),f,b
  3768  0002A2  A0D8               	btfss	status,0,c
  3769  0002A4  07B0               	decf	(printf@width+1)& (0+255),f,b
  3770  0002A6  D7F2               	goto	l3373
  3771  0002A8                     l3379:
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;doprnt.c: 1422: {
  3775                           ;doprnt.c: 1424: if(width
  3776                           ;doprnt.c: 1428: )
  3777  0002A8  0100               	movlb	0	; () banked
  3778  0002AA  51AF               	movf	printf@width& (0+255),w,b
  3779  0002AC  0100               	movlb	0	; () banked
  3780  0002AE  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3781  0002B0  B4D8               	btfsc	status,2,c
  3782  0002B2  D00D               	goto	l3385
  3783  0002B4                     l3381:
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;doprnt.c: 1430: (putch(' ') );
  3787  0002B4  0E20               	movlw	32
  3788  0002B6  EC26  F012         	call	_putch
  3789                           
  3790                           ;doprnt.c: 1431: while(--width);
  3791  0002BA  0100               	movlb	0	; () banked
  3792  0002BC  07AF               	decf	printf@width& (0+255),f,b
  3793  0002BE  A0D8               	btfss	status,0,c
  3794  0002C0  07B0               	decf	(printf@width+1)& (0+255),f,b
  3795  0002C2  0100               	movlb	0	; () banked
  3796  0002C4  51AF               	movf	printf@width& (0+255),w,b
  3797  0002C6  0100               	movlb	0	; () banked
  3798  0002C8  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3799  0002CA  A4D8               	btfss	status,2,c
  3800  0002CC  D7F3               	goto	l3381
  3801  0002CE                     l3385:
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;doprnt.c: 1438: if(flag & 0x03)
  3805  0002CE  C0AE  F0A4         	movff	printf@flag,??_printf
  3806  0002D2  0E03               	movlw	3
  3807  0002D4  0100               	movlb	0	; () banked
  3808  0002D6  17A4               	andwf	??_printf& (0+255),f,b
  3809  0002D8  B4D8               	btfsc	status,2,c
  3810  0002DA  D003               	goto	l3389
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;doprnt.c: 1439: (putch('-') );
  3814  0002DC  0E2D               	movlw	45
  3815  0002DE  EC26  F012         	call	_putch
  3816  0002E2                     l3389:
  3817                           
  3818                           ;doprnt.c: 1469: }
  3819                           ;doprnt.c: 1472: prec = c;
  3820  0002E2  C0B1  F0AB         	movff	printf@c,printf@prec
  3821                           
  3822                           ;doprnt.c: 1474: while(prec--) {
  3823  0002E6  D05A               	goto	l3403
  3824  0002E8                     l3391:
  3825                           
  3826                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3827  0002E8  0100               	movlb	0	; () banked
  3828  0002EA  51AB               	movf	printf@prec& (0+255),w,b
  3829  0002EC  0D02               	mullw	2
  3830  0002EE  0E00               	movlw	low _dpowers
  3831  0002F0  24F3               	addwf	prodl,w,c
  3832  0002F2  6EF6               	movwf	tblptrl,c
  3833  0002F4  0EFE               	movlw	high _dpowers
  3834  0002F6  20F4               	addwfc	prodh,w,c
  3835  0002F8  6EF7               	movwf	tblptrh,c
  3836  0002FA                     	if	0	;There are less than 3 active tblptr bytes
  3837  0002FA                     	endif
  3838  0002FA  0009               	tblrd		*+
  3839  0002FC  CFF5 F092          	movff	tablat,___lwdiv@divisor
  3840  000300  000A               	tblrd		*-
  3841  000302  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  3842  000306  C0AC  F090         	movff	printf@val,___lwdiv@dividend
  3843  00030A  C0AD  F091         	movff	printf@val+1,___lwdiv@dividend+1
  3844  00030E  ECCB  F00E         	call	___lwdiv	;wreg free
  3845  000312  C090  F097         	movff	?___lwdiv,___lwmod@dividend
  3846  000316  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
  3847  00031A  0E00               	movlw	0
  3848  00031C  0100               	movlb	0	; () banked
  3849  00031E  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3850  000320  0E0A               	movlw	10
  3851  000322  6F99               	movwf	___lwmod@divisor& (0+255),b
  3852  000324  EC77  F00F         	call	___lwmod	;wreg free
  3853  000328  0100               	movlb	0	; () banked
  3854  00032A  5197               	movf	?___lwmod& (0+255),w,b
  3855  00032C  0F30               	addlw	48
  3856  00032E  0100               	movlb	0	; () banked
  3857  000330  6FB1               	movwf	printf@c& (0+255),b
  3858                           
  3859                           ;doprnt.c: 1491: break;
  3860  000332  D030               	goto	l3401
  3861  000334                     l3393:
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;doprnt.c: 1499: {
  3865                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3866  000334  C0AC  F090         	movff	printf@val,___lwdiv@dividend
  3867  000338  C0AD  F091         	movff	printf@val+1,___lwdiv@dividend+1
  3868  00033C  0100               	movlb	0	; () banked
  3869  00033E  51AB               	movf	printf@prec& (0+255),w,b
  3870  000340  0D02               	mullw	2
  3871  000342  0E0A               	movlw	low _hexpowers
  3872  000344  24F3               	addwf	prodl,w,c
  3873  000346  6EF6               	movwf	tblptrl,c
  3874  000348  0EFE               	movlw	high _hexpowers
  3875  00034A  20F4               	addwfc	prodh,w,c
  3876  00034C  6EF7               	movwf	tblptrh,c
  3877  00034E                     	if	0	;There are less than 3 active tblptr bytes
  3878  00034E                     	endif
  3879  00034E  0009               	tblrd		*+
  3880  000350  CFF5 F092          	movff	tablat,___lwdiv@divisor
  3881  000354  000A               	tblrd		*-
  3882  000356  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  3883  00035A  ECCB  F00E         	call	___lwdiv	;wreg free
  3884  00035E  0100               	movlb	0	; () banked
  3885  000360  5190               	movf	?___lwdiv& (0+255),w,b
  3886  000362  0B0F               	andlw	15
  3887  000364  0100               	movlb	0	; () banked
  3888  000366  6FA8               	movwf	printf@idx& (0+255),b
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3892  000368  0100               	movlb	0	; () banked
  3893  00036A  51A8               	movf	printf@idx& (0+255),w,b
  3894  00036C  0D01               	mullw	1
  3895  00036E  0EF1               	movlw	low STR_24
  3896  000370  24F3               	addwf	prodl,w,c
  3897  000372  6EF6               	movwf	tblptrl,c
  3898  000374  0EFE               	movlw	high STR_24
  3899  000376  20F4               	addwfc	prodh,w,c
  3900  000378  6EF7               	movwf	tblptrh,c
  3901  00037A                     	if	0	;There are less than 3 active tblptr bytes
  3902  00037A                     	endif
  3903  00037A  0008               	tblrd		*
  3904  00037C  CFF5 F0B1          	movff	tablat,printf@c
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;doprnt.c: 1523: }
  3908                           
  3909                           ;doprnt.c: 1508: }
  3910                           ;doprnt.c: 1510: break;
  3911  000380  D009               	goto	l3401
  3912  000382                     l3399:
  3913  000382  0100               	movlb	0	; () banked
  3914  000384  51AE               	movf	printf@flag& (0+255),w,b
  3915  000386  0B80               	andlw	128
  3916                           
  3917                           ; Switch size 1, requested type "space"
  3918                           ; Number of cases is 2, Range of values is 0 to 128
  3919                           ; switch strategies available:
  3920                           ; Name         Instructions Cycles
  3921                           ; simple_byte            7     4 (average)
  3922                           ;	Chosen strategy is simple_byte
  3923  000388  0A00               	xorlw	0	; case 0
  3924  00038A  B4D8               	btfsc	status,2,c
  3925  00038C  D7AD               	goto	l3391
  3926  00038E  0A80               	xorlw	128	; case 128
  3927  000390  B4D8               	btfsc	status,2,c
  3928  000392  D7D0               	goto	l3393
  3929  000394                     l3401:
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;doprnt.c: 1524: (putch(c) );
  3933  000394  0100               	movlb	0	; () banked
  3934  000396  51B1               	movf	printf@c& (0+255),w,b
  3935  000398  EC26  F012         	call	_putch
  3936  00039C                     l3403:
  3937  00039C  0100               	movlb	0	; () banked
  3938  00039E  07AB               	decf	printf@prec& (0+255),f,b
  3939  0003A0  0100               	movlb	0	; () banked
  3940  0003A2  29AB               	incf	printf@prec& (0+255),w,b
  3941  0003A4  A4D8               	btfss	status,2,c
  3942  0003A6  D7ED               	goto	l3399
  3943  0003A8                     l3405:
  3944  0003A8  C09C  FFF6         	movff	printf@f,tblptrl
  3945  0003AC  C09D  FFF7         	movff	printf@f+1,tblptrh
  3946  0003B0  0100               	movlb	0	; () banked
  3947  0003B2  4B9C               	infsnz	printf@f& (0+255),f,b
  3948  0003B4  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3949  0003B6                     	if	0	;tblptru may be non-zero
  3950  0003B6                     	endif
  3951  0003B6                     	if	0	;tblptru may be non-zero
  3952  0003B6                     	endif
  3953  0003B6  0008               	tblrd		*
  3954  0003B8  CFF5 F0B1          	movff	tablat,printf@c
  3955  0003BC  0100               	movlb	0	; () banked
  3956  0003BE  51B1               	movf	printf@c& (0+255),w,b
  3957  0003C0  B4D8               	btfsc	status,2,c
  3958  0003C2  0012               	return	
  3959  0003C4  D62D               	goto	l3279
  3960  0003C6                     __end_of_printf:
  3961                           	opt stack 0
  3962                           tblptru	equ	0xFF8
  3963                           tblptrh	equ	0xFF7
  3964                           tblptrl	equ	0xFF6
  3965                           tablat	equ	0xFF5
  3966                           prodh	equ	0xFF4
  3967                           prodl	equ	0xFF3
  3968                           intcon	equ	0xFF2
  3969                           intcon2	equ	0xFF1
  3970                           intcon3	equ	0xFF0
  3971                           postinc0	equ	0xFEE
  3972                           wreg	equ	0xFE8
  3973                           indf2	equ	0xFDF
  3974                           postinc2	equ	0xFDE
  3975                           postdec2	equ	0xFDD
  3976                           fsr2h	equ	0xFDA
  3977                           fsr2l	equ	0xFD9
  3978                           status	equ	0xFD8
  3979                           
  3980 ;; *************** function _putch *****************
  3981 ;; Defined at:
  3982 ;;		line 31 in file "lcd.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;  data            1    wreg     unsigned char 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  data            1   18[BANK0 ] unsigned char 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  1    wreg      void 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0, cstack
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;Total ram usage:        1 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; Hardware stack levels required when called:    8
  4003 ;; This function calls:
  4004 ;;		_lcdNibble
  4005 ;; This function is called by:
  4006 ;;		_printf
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           	psect	text15
  4011  00244C                     __ptext15:
  4012                           	opt stack 0
  4013  00244C                     _putch:
  4014                           	opt stack 20
  4015                           
  4016                           ;incstack = 0
  4017                           ;putch@data stored from wreg
  4018  00244C  0100               	movlb	0	; () banked
  4019  00244E  6F92               	movwf	putch@data& (0+255),b
  4020                           
  4021                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4022  002450  848C               	bsf	3980,2,c	;volatile
  4023                           
  4024                           ;lcd.c: 33: lcdNibble(data);
  4025  002452  0100               	movlb	0	; () banked
  4026  002454  5192               	movf	putch@data& (0+255),w,b
  4027  002456  ECA8  F00F         	call	_lcdNibble
  4028  00245A  0012               	return		;funcret
  4029  00245C                     __end_of_putch:
  4030                           	opt stack 0
  4031                           tblptru	equ	0xFF8
  4032                           tblptrh	equ	0xFF7
  4033                           tblptrl	equ	0xFF6
  4034                           tablat	equ	0xFF5
  4035                           prodh	equ	0xFF4
  4036                           prodl	equ	0xFF3
  4037                           intcon	equ	0xFF2
  4038                           intcon2	equ	0xFF1
  4039                           intcon3	equ	0xFF0
  4040                           postinc0	equ	0xFEE
  4041                           wreg	equ	0xFE8
  4042                           indf2	equ	0xFDF
  4043                           postinc2	equ	0xFDE
  4044                           postdec2	equ	0xFDD
  4045                           fsr2h	equ	0xFDA
  4046                           fsr2l	equ	0xFD9
  4047                           status	equ	0xFD8
  4048                           
  4049 ;; *************** function _isdigit *****************
  4050 ;; Defined at:
  4051 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  c               1    wreg     unsigned char 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  c               1   18[BANK0 ] unsigned char 
  4056 ;; Return value:  Size  Location     Type
  4057 ;;		None               void
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;Total ram usage:        3 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:    7
  4072 ;; This function calls:
  4073 ;;		Nothing
  4074 ;; This function is called by:
  4075 ;;		_printf
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text16
  4080  002324                     __ptext16:
  4081                           	opt stack 0
  4082  002324                     _isdigit:
  4083                           	opt stack 21
  4084                           
  4085                           ;incstack = 0
  4086                           ;isdigit@c stored from wreg
  4087  002324  0100               	movlb	0	; () banked
  4088  002326  6F92               	movwf	isdigit@c& (0+255),b
  4089  002328  0E00               	movlw	0
  4090  00232A  0100               	movlb	0	; () banked
  4091  00232C  6F91               	movwf	_isdigit$777& (0+255),b
  4092                           
  4093                           ; BSR set to: 0
  4094  00232E  0E3A               	movlw	58
  4095  002330  0100               	movlb	0	; () banked
  4096  002332  6192               	cpfslt	isdigit@c& (0+255),b
  4097  002334  D007               	goto	l3101
  4098                           
  4099                           ; BSR set to: 0
  4100  002336  0E2F               	movlw	47
  4101  002338  0100               	movlb	0	; () banked
  4102  00233A  6592               	cpfsgt	isdigit@c& (0+255),b
  4103  00233C  D003               	goto	l3101
  4104                           
  4105                           ; BSR set to: 0
  4106  00233E  0E01               	movlw	1
  4107  002340  0100               	movlb	0	; () banked
  4108  002342  6F91               	movwf	_isdigit$777& (0+255),b
  4109  002344                     l3101:
  4110                           
  4111                           ; BSR set to: 0
  4112  002344  C091  F090         	movff	_isdigit$777,??_isdigit
  4113  002348  0100               	movlb	0	; () banked
  4114  00234A  3190               	rrcf	??_isdigit& (0+255),w,b
  4115  00234C  0012               	return	
  4116  00234E                     __end_of_isdigit:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           prodh	equ	0xFF4
  4123                           prodl	equ	0xFF3
  4124                           intcon	equ	0xFF2
  4125                           intcon2	equ	0xFF1
  4126                           intcon3	equ	0xFF0
  4127                           postinc0	equ	0xFEE
  4128                           wreg	equ	0xFE8
  4129                           indf2	equ	0xFDF
  4130                           postinc2	equ	0xFDE
  4131                           postdec2	equ	0xFDD
  4132                           fsr2h	equ	0xFDA
  4133                           fsr2l	equ	0xFD9
  4134                           status	equ	0xFD8
  4135                           
  4136 ;; *************** function ___wmul *****************
  4137 ;; Defined at:
  4138 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4141 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  product         2   20[BANK0 ] unsigned int 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  2   16[BANK0 ] unsigned int 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0, prodl, prodh
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4153 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;Total ram usage:        6 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    7
  4160 ;; This function calls:
  4161 ;;		Nothing
  4162 ;; This function is called by:
  4163 ;;		_printf
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text17
  4168  0022C0                     __ptext17:
  4169                           	opt stack 0
  4170  0022C0                     ___wmul:
  4171                           	opt stack 21
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;incstack = 0
  4175  0022C0  0100               	movlb	0	; () banked
  4176  0022C2  5190               	movf	___wmul@multiplier& (0+255),w,b
  4177  0022C4  0100               	movlb	0	; () banked
  4178  0022C6  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4179  0022C8  CFF3 F094          	movff	prodl,___wmul@product
  4180  0022CC  CFF4 F095          	movff	prodh,___wmul@product+1
  4181  0022D0  0100               	movlb	0	; () banked
  4182  0022D2  5190               	movf	___wmul@multiplier& (0+255),w,b
  4183  0022D4  0100               	movlb	0	; () banked
  4184  0022D6  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4185  0022D8  50F3               	movf	prodl,w,c
  4186  0022DA  0100               	movlb	0	; () banked
  4187  0022DC  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4188  0022DE  0100               	movlb	0	; () banked
  4189  0022E0  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4190  0022E2  0100               	movlb	0	; () banked
  4191  0022E4  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4192  0022E6  50F3               	movf	prodl,w,c
  4193  0022E8  0100               	movlb	0	; () banked
  4194  0022EA  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4195                           
  4196                           ; BSR set to: 0
  4197  0022EC  C094  F090         	movff	___wmul@product,?___wmul
  4198  0022F0  C095  F091         	movff	___wmul@product+1,?___wmul+1
  4199  0022F4  0012               	return	
  4200  0022F6                     __end_of___wmul:
  4201                           	opt stack 0
  4202                           tblptru	equ	0xFF8
  4203                           tblptrh	equ	0xFF7
  4204                           tblptrl	equ	0xFF6
  4205                           tablat	equ	0xFF5
  4206                           prodh	equ	0xFF4
  4207                           prodl	equ	0xFF3
  4208                           intcon	equ	0xFF2
  4209                           intcon2	equ	0xFF1
  4210                           intcon3	equ	0xFF0
  4211                           postinc0	equ	0xFEE
  4212                           wreg	equ	0xFE8
  4213                           indf2	equ	0xFDF
  4214                           postinc2	equ	0xFDE
  4215                           postdec2	equ	0xFDD
  4216                           fsr2h	equ	0xFDA
  4217                           fsr2l	equ	0xFD9
  4218                           status	equ	0xFD8
  4219                           
  4220 ;; *************** function ___lwmod *****************
  4221 ;; Defined at:
  4222 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  dividend        2   23[BANK0 ] unsigned int 
  4225 ;;  divisor         2   25[BANK0 ] unsigned int 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  counter         1   27[BANK0 ] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  2   23[BANK0 ] unsigned int 
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4237 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;Total ram usage:        5 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    7
  4244 ;; This function calls:
  4245 ;;		Nothing
  4246 ;; This function is called by:
  4247 ;;		_printf
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text18
  4252  001EEE                     __ptext18:
  4253                           	opt stack 0
  4254  001EEE                     ___lwmod:
  4255                           	opt stack 21
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;incstack = 0
  4259  001EEE  0100               	movlb	0	; () banked
  4260  001EF0  5199               	movf	___lwmod@divisor& (0+255),w,b
  4261  001EF2  0100               	movlb	0	; () banked
  4262  001EF4  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4263  001EF6  B4D8               	btfsc	status,2,c
  4264  001EF8  D026               	goto	l803
  4265                           
  4266                           ; BSR set to: 0
  4267  001EFA  0E01               	movlw	1
  4268  001EFC  0100               	movlb	0	; () banked
  4269  001EFE  6F9B               	movwf	___lwmod@counter& (0+255),b
  4270  001F00  D006               	goto	l3149
  4271  001F02                     l3147:
  4272                           
  4273                           ; BSR set to: 0
  4274  001F02  0100               	movlb	0	; () banked
  4275  001F04  90D8               	bcf	status,0,c
  4276  001F06  3799               	rlcf	___lwmod@divisor& (0+255),f,b
  4277  001F08  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4278  001F0A  0100               	movlb	0	; () banked
  4279  001F0C  2B9B               	incf	___lwmod@counter& (0+255),f,b
  4280  001F0E                     l3149:
  4281                           
  4282                           ; BSR set to: 0
  4283  001F0E  0100               	movlb	0	; () banked
  4284  001F10  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4285  001F12  D7F7               	goto	l3147
  4286  001F14                     l3151:
  4287                           
  4288                           ; BSR set to: 0
  4289  001F14  0100               	movlb	0	; () banked
  4290  001F16  5199               	movf	___lwmod@divisor& (0+255),w,b
  4291  001F18  0100               	movlb	0	; () banked
  4292  001F1A  5D97               	subwf	___lwmod@dividend& (0+255),w,b
  4293  001F1C  0100               	movlb	0	; () banked
  4294  001F1E  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4295  001F20  0100               	movlb	0	; () banked
  4296  001F22  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4297  001F24  A0D8               	btfss	status,0,c
  4298  001F26  D008               	goto	l3155
  4299                           
  4300                           ; BSR set to: 0
  4301  001F28  0100               	movlb	0	; () banked
  4302  001F2A  5199               	movf	___lwmod@divisor& (0+255),w,b
  4303  001F2C  0100               	movlb	0	; () banked
  4304  001F2E  5F97               	subwf	___lwmod@dividend& (0+255),f,b
  4305  001F30  0100               	movlb	0	; () banked
  4306  001F32  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4307  001F34  0100               	movlb	0	; () banked
  4308  001F36  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4309  001F38                     l3155:
  4310                           
  4311                           ; BSR set to: 0
  4312  001F38  0100               	movlb	0	; () banked
  4313  001F3A  90D8               	bcf	status,0,c
  4314  001F3C  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4315  001F3E  3399               	rrcf	___lwmod@divisor& (0+255),f,b
  4316                           
  4317                           ; BSR set to: 0
  4318  001F40  0100               	movlb	0	; () banked
  4319  001F42  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  4320  001F44  D7E7               	goto	l3151
  4321  001F46                     l803:
  4322                           
  4323                           ; BSR set to: 0
  4324  001F46  C097  F097         	movff	___lwmod@dividend,?___lwmod
  4325  001F4A  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
  4326                           
  4327                           ; BSR set to: 0
  4328  001F4E  0012               	return		;funcret
  4329  001F50                     __end_of___lwmod:
  4330                           	opt stack 0
  4331                           tblptru	equ	0xFF8
  4332                           tblptrh	equ	0xFF7
  4333                           tblptrl	equ	0xFF6
  4334                           tablat	equ	0xFF5
  4335                           prodh	equ	0xFF4
  4336                           prodl	equ	0xFF3
  4337                           intcon	equ	0xFF2
  4338                           intcon2	equ	0xFF1
  4339                           intcon3	equ	0xFF0
  4340                           postinc0	equ	0xFEE
  4341                           wreg	equ	0xFE8
  4342                           indf2	equ	0xFDF
  4343                           postinc2	equ	0xFDE
  4344                           postdec2	equ	0xFDD
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349 ;; *************** function ___lwdiv *****************
  4350 ;; Defined at:
  4351 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;  dividend        2   16[BANK0 ] unsigned int 
  4354 ;;  divisor         2   18[BANK0 ] unsigned int 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  quotient        2   20[BANK0 ] unsigned int 
  4357 ;;  counter         1   22[BANK0 ] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  2   16[BANK0 ] unsigned int 
  4360 ;; Registers used:
  4361 ;;		wreg, status,2, status,0
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4367 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4368 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;Total ram usage:        7 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    7
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_printf
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text19
  4382  001D96                     __ptext19:
  4383                           	opt stack 0
  4384  001D96                     ___lwdiv:
  4385                           	opt stack 21
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;incstack = 0
  4389  001D96  0E00               	movlw	0
  4390  001D98  0100               	movlb	0	; () banked
  4391  001D9A  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4392  001D9C  0E00               	movlw	0
  4393  001D9E  6F94               	movwf	___lwdiv@quotient& (0+255),b
  4394                           
  4395                           ; BSR set to: 0
  4396  001DA0  0100               	movlb	0	; () banked
  4397  001DA2  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4398  001DA4  0100               	movlb	0	; () banked
  4399  001DA6  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4400  001DA8  B4D8               	btfsc	status,2,c
  4401  001DAA  D02C               	goto	l793
  4402                           
  4403                           ; BSR set to: 0
  4404  001DAC  0E01               	movlw	1
  4405  001DAE  0100               	movlb	0	; () banked
  4406  001DB0  6F96               	movwf	___lwdiv@counter& (0+255),b
  4407  001DB2  D006               	goto	l3129
  4408  001DB4                     l3127:
  4409                           
  4410                           ; BSR set to: 0
  4411  001DB4  0100               	movlb	0	; () banked
  4412  001DB6  90D8               	bcf	status,0,c
  4413  001DB8  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
  4414  001DBA  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4415  001DBC  0100               	movlb	0	; () banked
  4416  001DBE  2B96               	incf	___lwdiv@counter& (0+255),f,b
  4417  001DC0                     l3129:
  4418                           
  4419                           ; BSR set to: 0
  4420  001DC0  0100               	movlb	0	; () banked
  4421  001DC2  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4422  001DC4  D7F7               	goto	l3127
  4423  001DC6                     l3131:
  4424                           
  4425                           ; BSR set to: 0
  4426  001DC6  0100               	movlb	0	; () banked
  4427  001DC8  90D8               	bcf	status,0,c
  4428  001DCA  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  4429  001DCC  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4430                           
  4431                           ; BSR set to: 0
  4432  001DCE  0100               	movlb	0	; () banked
  4433  001DD0  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4434  001DD2  0100               	movlb	0	; () banked
  4435  001DD4  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
  4436  001DD6  0100               	movlb	0	; () banked
  4437  001DD8  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4438  001DDA  0100               	movlb	0	; () banked
  4439  001DDC  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4440  001DDE  A0D8               	btfss	status,0,c
  4441  001DE0  D00A               	goto	l3139
  4442                           
  4443                           ; BSR set to: 0
  4444  001DE2  0100               	movlb	0	; () banked
  4445  001DE4  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4446  001DE6  0100               	movlb	0	; () banked
  4447  001DE8  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
  4448  001DEA  0100               	movlb	0	; () banked
  4449  001DEC  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4450  001DEE  0100               	movlb	0	; () banked
  4451  001DF0  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4452                           
  4453                           ; BSR set to: 0
  4454  001DF2  0100               	movlb	0	; () banked
  4455  001DF4  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  4456  001DF6                     l3139:
  4457                           
  4458                           ; BSR set to: 0
  4459  001DF6  0100               	movlb	0	; () banked
  4460  001DF8  90D8               	bcf	status,0,c
  4461  001DFA  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4462  001DFC  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
  4463                           
  4464                           ; BSR set to: 0
  4465  001DFE  0100               	movlb	0	; () banked
  4466  001E00  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  4467  001E02  D7E1               	goto	l3131
  4468  001E04                     l793:
  4469                           
  4470                           ; BSR set to: 0
  4471  001E04  C094  F090         	movff	___lwdiv@quotient,?___lwdiv
  4472  001E08  C095  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4473                           
  4474                           ; BSR set to: 0
  4475  001E0C  0012               	return		;funcret
  4476  001E0E                     __end_of___lwdiv:
  4477                           	opt stack 0
  4478                           tblptru	equ	0xFF8
  4479                           tblptrh	equ	0xFF7
  4480                           tblptrl	equ	0xFF6
  4481                           tablat	equ	0xFF5
  4482                           prodh	equ	0xFF4
  4483                           prodl	equ	0xFF3
  4484                           intcon	equ	0xFF2
  4485                           intcon2	equ	0xFF1
  4486                           intcon3	equ	0xFF0
  4487                           postinc0	equ	0xFEE
  4488                           wreg	equ	0xFE8
  4489                           indf2	equ	0xFDF
  4490                           postinc2	equ	0xFDE
  4491                           postdec2	equ	0xFDD
  4492                           fsr2h	equ	0xFDA
  4493                           fsr2l	equ	0xFD9
  4494                           status	equ	0xFD8
  4495                           
  4496 ;; *************** function _lcdInst *****************
  4497 ;; Defined at:
  4498 ;;		line 26 in file "lcd.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  data            1    wreg     unsigned char 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;  data            1   18[BANK0 ] unsigned char 
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      void 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0, cstack
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;Total ram usage:        1 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:    8
  4519 ;; This function calls:
  4520 ;;		_lcdNibble
  4521 ;; This function is called by:
  4522 ;;		_initLCD
  4523 ;;		_standby
  4524 ;;		_date_time
  4525 ;;		_bottle_count
  4526 ;;		_bottle_time
  4527 ;;		_operation
  4528 ;;		_operationend
  4529 ;;		_emergencystop
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           	psect	text20
  4534  00245C                     __ptext20:
  4535                           	opt stack 0
  4536  00245C                     _lcdInst:
  4537                           	opt stack 21
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;incstack = 0
  4541                           ;lcdInst@data stored from wreg
  4542  00245C  0100               	movlb	0	; () banked
  4543  00245E  6F92               	movwf	lcdInst@data& (0+255),b
  4544                           
  4545                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4546  002460  948C               	bcf	3980,2,c	;volatile
  4547                           
  4548                           ;lcd.c: 28: lcdNibble(data);
  4549  002462  0100               	movlb	0	; () banked
  4550  002464  5192               	movf	lcdInst@data& (0+255),w,b
  4551  002466  ECA8  F00F         	call	_lcdNibble
  4552  00246A  0012               	return		;funcret
  4553  00246C                     __end_of_lcdInst:
  4554                           	opt stack 0
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           prodh	equ	0xFF4
  4560                           prodl	equ	0xFF3
  4561                           intcon	equ	0xFF2
  4562                           intcon2	equ	0xFF1
  4563                           intcon3	equ	0xFF0
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           indf2	equ	0xFDF
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           fsr2h	equ	0xFDA
  4570                           fsr2l	equ	0xFD9
  4571                           status	equ	0xFD8
  4572                           
  4573 ;; *************** function _lcdNibble *****************
  4574 ;; Defined at:
  4575 ;;		line 36 in file "lcd.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;  data            1    wreg     unsigned char 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  data            1   17[BANK0 ] unsigned char 
  4580 ;;  temp            1   16[BANK0 ] unsigned char 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  1    wreg      void 
  4583 ;; Registers used:
  4584 ;;		wreg, status,2, status,0
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;Total ram usage:        2 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    7
  4597 ;; This function calls:
  4598 ;;		Nothing
  4599 ;; This function is called by:
  4600 ;;		_lcdInst
  4601 ;;		_putch
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text21
  4606  001F50                     __ptext21:
  4607                           	opt stack 0
  4608  001F50                     _lcdNibble:
  4609                           	opt stack 20
  4610                           
  4611                           ;incstack = 0
  4612                           ;lcdNibble@data stored from wreg
  4613  001F50  0100               	movlb	0	; () banked
  4614  001F52  6F91               	movwf	lcdNibble@data& (0+255),b
  4615                           
  4616                           ;lcd.c: 38: char temp = data & 0xF0;
  4617  001F54  0100               	movlb	0	; () banked
  4618  001F56  5191               	movf	lcdNibble@data& (0+255),w,b
  4619  001F58  0BF0               	andlw	240
  4620  001F5A  0100               	movlb	0	; () banked
  4621  001F5C  6F90               	movwf	lcdNibble@temp& (0+255),b
  4622                           
  4623                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4624  001F5E  508C               	movf	3980,w,c	;volatile
  4625  001F60  0B0F               	andlw	15
  4626  001F62  6E8C               	movwf	3980,c	;volatile
  4627                           
  4628                           ;lcd.c: 40: LATD = temp | LATD;
  4629  001F64  0100               	movlb	0	; () banked
  4630  001F66  5190               	movf	lcdNibble@temp& (0+255),w,b
  4631  001F68  108C               	iorwf	3980,w,c	;volatile
  4632  001F6A  6E8C               	movwf	3980,c	;volatile
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4636  001F6C  968C               	bcf	3980,3,c	;volatile
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4640  001F6E  0E19               	movlw	25
  4641  001F70                     u3837:
  4642  001F70  2EE8               	decfsz	wreg,f,c
  4643  001F72  D7FE               	bra	u3837
  4644                           
  4645                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4646  001F74  868C               	bsf	3980,3,c	;volatile
  4647                           
  4648                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4649  001F76  0E19               	movlw	25
  4650  001F78                     u3847:
  4651  001F78  2EE8               	decfsz	wreg,f,c
  4652  001F7A  D7FE               	bra	u3847
  4653                           
  4654                           ;lcd.c: 47: data = data << 4;
  4655  001F7C  0100               	movlb	0	; () banked
  4656  001F7E  3991               	swapf	lcdNibble@data& (0+255),w,b
  4657  001F80  0BF0               	andlw	240
  4658  001F82  0100               	movlb	0	; () banked
  4659  001F84  6F91               	movwf	lcdNibble@data& (0+255),b
  4660                           
  4661                           ;lcd.c: 49: temp = data & 0xF0;
  4662  001F86  0100               	movlb	0	; () banked
  4663  001F88  5191               	movf	lcdNibble@data& (0+255),w,b
  4664  001F8A  0BF0               	andlw	240
  4665  001F8C  0100               	movlb	0	; () banked
  4666  001F8E  6F90               	movwf	lcdNibble@temp& (0+255),b
  4667                           
  4668                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4669  001F90  508C               	movf	3980,w,c	;volatile
  4670  001F92  0B0F               	andlw	15
  4671  001F94  6E8C               	movwf	3980,c	;volatile
  4672                           
  4673                           ;lcd.c: 51: LATD = temp | LATD;
  4674  001F96  0100               	movlb	0	; () banked
  4675  001F98  5190               	movf	lcdNibble@temp& (0+255),w,b
  4676  001F9A  108C               	iorwf	3980,w,c	;volatile
  4677  001F9C  6E8C               	movwf	3980,c	;volatile
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4681  001F9E  968C               	bcf	3980,3,c	;volatile
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4685  001FA0  0E19               	movlw	25
  4686  001FA2                     u3857:
  4687  001FA2  2EE8               	decfsz	wreg,f,c
  4688  001FA4  D7FE               	bra	u3857
  4689                           
  4690                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4691  001FA6  868C               	bsf	3980,3,c	;volatile
  4692                           
  4693                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4694  001FA8  0E19               	movlw	25
  4695  001FAA                     u3867:
  4696  001FAA  2EE8               	decfsz	wreg,f,c
  4697  001FAC  D7FE               	bra	u3867
  4698  001FAE  0012               	return		;funcret
  4699  001FB0                     __end_of_lcdNibble:
  4700                           	opt stack 0
  4701                           tblptru	equ	0xFF8
  4702                           tblptrh	equ	0xFF7
  4703                           tblptrl	equ	0xFF6
  4704                           tablat	equ	0xFF5
  4705                           prodh	equ	0xFF4
  4706                           prodl	equ	0xFF3
  4707                           intcon	equ	0xFF2
  4708                           intcon2	equ	0xFF1
  4709                           intcon3	equ	0xFF0
  4710                           postinc0	equ	0xFEE
  4711                           wreg	equ	0xFE8
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           fsr2h	equ	0xFDA
  4716                           fsr2l	equ	0xFD9
  4717                           status	equ	0xFD8
  4718                           
  4719 ;; *************** function ___awmod *****************
  4720 ;; Defined at:
  4721 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  dividend        2   16[BANK0 ] int 
  4724 ;;  divisor         2   18[BANK0 ] int 
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;  sign            1   21[BANK0 ] unsigned char 
  4727 ;;  counter         1   20[BANK0 ] unsigned char 
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  2   16[BANK0 ] int 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4737 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;Total ram usage:        6 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    7
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		_bottle_count
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text22
  4752  001ABE                     __ptext22:
  4753                           	opt stack 0
  4754  001ABE                     ___awmod:
  4755                           	opt stack 22
  4756                           
  4757                           ;incstack = 0
  4758  001ABE  0E00               	movlw	0
  4759  001AC0  0100               	movlb	0	; () banked
  4760  001AC2  6F95               	movwf	___awmod@sign& (0+255),b
  4761                           
  4762                           ; BSR set to: 0
  4763  001AC4  0100               	movlb	0	; () banked
  4764  001AC6  AF91               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4765  001AC8  D008               	goto	l3499
  4766                           
  4767                           ; BSR set to: 0
  4768  001ACA  0100               	movlb	0	; () banked
  4769  001ACC  6D90               	negf	___awmod@dividend& (0+255),b
  4770  001ACE  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  4771  001AD0  B0D8               	btfsc	status,0,c
  4772  001AD2  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  4773                           
  4774                           ; BSR set to: 0
  4775  001AD4  0E01               	movlw	1
  4776  001AD6  0100               	movlb	0	; () banked
  4777  001AD8  6F95               	movwf	___awmod@sign& (0+255),b
  4778  001ADA                     l3499:
  4779                           
  4780                           ; BSR set to: 0
  4781  001ADA  0100               	movlb	0	; () banked
  4782  001ADC  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4783  001ADE  D005               	goto	l3503
  4784                           
  4785                           ; BSR set to: 0
  4786  001AE0  0100               	movlb	0	; () banked
  4787  001AE2  6D92               	negf	___awmod@divisor& (0+255),b
  4788  001AE4  1F93               	comf	(___awmod@divisor+1)& (0+255),f,b
  4789  001AE6  B0D8               	btfsc	status,0,c
  4790  001AE8  2B93               	incf	(___awmod@divisor+1)& (0+255),f,b
  4791  001AEA                     l3503:
  4792                           
  4793                           ; BSR set to: 0
  4794  001AEA  0100               	movlb	0	; () banked
  4795  001AEC  5192               	movf	___awmod@divisor& (0+255),w,b
  4796  001AEE  0100               	movlb	0	; () banked
  4797  001AF0  1193               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4798  001AF2  B4D8               	btfsc	status,2,c
  4799  001AF4  D026               	goto	l3519
  4800                           
  4801                           ; BSR set to: 0
  4802  001AF6  0E01               	movlw	1
  4803  001AF8  0100               	movlb	0	; () banked
  4804  001AFA  6F94               	movwf	___awmod@counter& (0+255),b
  4805  001AFC  D006               	goto	l3509
  4806  001AFE                     l3507:
  4807                           
  4808                           ; BSR set to: 0
  4809  001AFE  0100               	movlb	0	; () banked
  4810  001B00  90D8               	bcf	status,0,c
  4811  001B02  3792               	rlcf	___awmod@divisor& (0+255),f,b
  4812  001B04  3793               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4813  001B06  0100               	movlb	0	; () banked
  4814  001B08  2B94               	incf	___awmod@counter& (0+255),f,b
  4815  001B0A                     l3509:
  4816                           
  4817                           ; BSR set to: 0
  4818  001B0A  0100               	movlb	0	; () banked
  4819  001B0C  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4820  001B0E  D7F7               	goto	l3507
  4821  001B10                     l3511:
  4822                           
  4823                           ; BSR set to: 0
  4824  001B10  0100               	movlb	0	; () banked
  4825  001B12  5192               	movf	___awmod@divisor& (0+255),w,b
  4826  001B14  0100               	movlb	0	; () banked
  4827  001B16  5D90               	subwf	___awmod@dividend& (0+255),w,b
  4828  001B18  0100               	movlb	0	; () banked
  4829  001B1A  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  4830  001B1C  0100               	movlb	0	; () banked
  4831  001B1E  5991               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4832  001B20  A0D8               	btfss	status,0,c
  4833  001B22  D008               	goto	l3515
  4834                           
  4835                           ; BSR set to: 0
  4836  001B24  0100               	movlb	0	; () banked
  4837  001B26  5192               	movf	___awmod@divisor& (0+255),w,b
  4838  001B28  0100               	movlb	0	; () banked
  4839  001B2A  5F90               	subwf	___awmod@dividend& (0+255),f,b
  4840  001B2C  0100               	movlb	0	; () banked
  4841  001B2E  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  4842  001B30  0100               	movlb	0	; () banked
  4843  001B32  5B91               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4844  001B34                     l3515:
  4845                           
  4846                           ; BSR set to: 0
  4847  001B34  0100               	movlb	0	; () banked
  4848  001B36  90D8               	bcf	status,0,c
  4849  001B38  3393               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4850  001B3A  3392               	rrcf	___awmod@divisor& (0+255),f,b
  4851                           
  4852                           ; BSR set to: 0
  4853  001B3C  0100               	movlb	0	; () banked
  4854  001B3E  2F94               	decfsz	___awmod@counter& (0+255),f,b
  4855  001B40  D7E7               	goto	l3511
  4856  001B42                     l3519:
  4857                           
  4858                           ; BSR set to: 0
  4859  001B42  0100               	movlb	0	; () banked
  4860  001B44  5195               	movf	___awmod@sign& (0+255),w,b
  4861  001B46  0100               	movlb	0	; () banked
  4862  001B48  B4D8               	btfsc	status,2,c
  4863  001B4A  D005               	goto	l3523
  4864                           
  4865                           ; BSR set to: 0
  4866  001B4C  0100               	movlb	0	; () banked
  4867  001B4E  6D90               	negf	___awmod@dividend& (0+255),b
  4868  001B50  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  4869  001B52  B0D8               	btfsc	status,0,c
  4870  001B54  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  4871  001B56                     l3523:
  4872                           
  4873                           ; BSR set to: 0
  4874  001B56  C090  F090         	movff	___awmod@dividend,?___awmod
  4875  001B5A  C091  F091         	movff	___awmod@dividend+1,?___awmod+1
  4876  001B5E  0012               	return	
  4877  001B60                     __end_of___awmod:
  4878                           	opt stack 0
  4879                           tblptru	equ	0xFF8
  4880                           tblptrh	equ	0xFF7
  4881                           tblptrl	equ	0xFF6
  4882                           tablat	equ	0xFF5
  4883                           prodh	equ	0xFF4
  4884                           prodl	equ	0xFF3
  4885                           intcon	equ	0xFF2
  4886                           intcon2	equ	0xFF1
  4887                           intcon3	equ	0xFF0
  4888                           postinc0	equ	0xFEE
  4889                           wreg	equ	0xFE8
  4890                           indf2	equ	0xFDF
  4891                           postinc2	equ	0xFDE
  4892                           postdec2	equ	0xFDD
  4893                           fsr2h	equ	0xFDA
  4894                           fsr2l	equ	0xFD9
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function _I2C_Master_Init *****************
  4898 ;; Defined at:
  4899 ;;		line 13 in file "I2C.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  c               4   29[BANK0 ] const unsigned long 
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;		None
  4904 ;; Return value:  Size  Location     Type
  4905 ;;                  1    wreg      void 
  4906 ;; Registers used:
  4907 ;;		wreg, status,2, status,0, cstack
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4913 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;Total ram usage:        8 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    8
  4920 ;; This function calls:
  4921 ;;		___lldiv
  4922 ;; This function is called by:
  4923 ;;		_main
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text23
  4928  001FB0                     __ptext23:
  4929                           	opt stack 0
  4930  001FB0                     _I2C_Master_Init:
  4931                           	opt stack 22
  4932                           
  4933                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;incstack = 0
  4937  001FB0  0E00               	movlw	0
  4938  001FB2  6EC7               	movwf	4039,c	;volatile
  4939                           
  4940                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  4941  001FB4  0E28               	movlw	40
  4942  001FB6  6EC6               	movwf	4038,c	;volatile
  4943                           
  4944                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  4945  001FB8  0E00               	movlw	0
  4946  001FBA  6EC5               	movwf	4037,c	;volatile
  4947                           
  4948                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  4949  001FBC  0E80               	movlw	128
  4950  001FBE  0100               	movlb	0	; () banked
  4951  001FC0  6F90               	movwf	___lldiv@dividend& (0+255),b
  4952  001FC2  0E96               	movlw	150
  4953  001FC4  6F91               	movwf	(___lldiv@dividend+1)& (0+255),b
  4954  001FC6  0E98               	movlw	152
  4955  001FC8  6F92               	movwf	(___lldiv@dividend+2)& (0+255),b
  4956  001FCA  0E00               	movlw	0
  4957  001FCC  6F93               	movwf	(___lldiv@dividend+3)& (0+255),b
  4958  001FCE  C09D  F0A1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4959  001FD2  C09E  F0A2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4960  001FD6  C09F  F0A3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4961  001FDA  C0A0  F0A4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4962  001FDE  0E02               	movlw	2
  4963  001FE0                     u3385:
  4964  001FE0  90D8               	bcf	status,0,c
  4965  001FE2  0100               	movlb	0	; () banked
  4966  001FE4  37A1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4967  001FE6  37A2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4968  001FE8  37A3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4969  001FEA  37A4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4970  001FEC  2EE8               	decfsz	wreg,f,c
  4971  001FEE  D7F8               	goto	u3385
  4972  001FF0  C0A1  F094         	movff	??_I2C_Master_Init,___lldiv@divisor
  4973  001FF4  C0A2  F095         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4974  001FF8  C0A3  F096         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4975  001FFC  C0A4  F097         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4976  002000  EC56  F00C         	call	___lldiv	;wreg free
  4977  002004  0100               	movlb	0	; () banked
  4978  002006  0590               	decf	?___lldiv& (0+255),w,b
  4979  002008  6EC8               	movwf	4040,c	;volatile
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;I2C.c: 20: TRISC3 = 1;
  4983  00200A  8694               	bsf	3988,3,c	;volatile
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;I2C.c: 21: TRISC4 = 1;
  4987  00200C  8894               	bsf	3988,4,c	;volatile
  4988                           
  4989                           ; BSR set to: 0
  4990  00200E  0012               	return		;funcret
  4991  002010                     __end_of_I2C_Master_Init:
  4992                           	opt stack 0
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           prodh	equ	0xFF4
  4998                           prodl	equ	0xFF3
  4999                           intcon	equ	0xFF2
  5000                           intcon2	equ	0xFF1
  5001                           intcon3	equ	0xFF0
  5002                           postinc0	equ	0xFEE
  5003                           wreg	equ	0xFE8
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           postdec2	equ	0xFDD
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           
  5011 ;; *************** function ___lldiv *****************
  5012 ;; Defined at:
  5013 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;  dividend        4   16[BANK0 ] unsigned long 
  5016 ;;  divisor         4   20[BANK0 ] unsigned long 
  5017 ;; Auto vars:     Size  Location     Type
  5018 ;;  quotient        4   24[BANK0 ] unsigned long 
  5019 ;;  counter         1   28[BANK0 ] unsigned char 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  4   16[BANK0 ] unsigned long 
  5022 ;; Registers used:
  5023 ;;		wreg, status,2, status,0
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5029 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5030 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;Total ram usage:       13 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    7
  5036 ;; This function calls:
  5037 ;;		Nothing
  5038 ;; This function is called by:
  5039 ;;		_I2C_Master_Init
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           	psect	text24
  5044  0018AC                     __ptext24:
  5045                           	opt stack 0
  5046  0018AC                     ___lldiv:
  5047                           	opt stack 22
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;incstack = 0
  5051  0018AC  0E00               	movlw	0
  5052  0018AE  0100               	movlb	0	; () banked
  5053  0018B0  6F98               	movwf	___lldiv@quotient& (0+255),b
  5054  0018B2  0E00               	movlw	0
  5055  0018B4  6F99               	movwf	(___lldiv@quotient+1)& (0+255),b
  5056  0018B6  0E00               	movlw	0
  5057  0018B8  6F9A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5058  0018BA  0E00               	movlw	0
  5059  0018BC  6F9B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5060                           
  5061                           ; BSR set to: 0
  5062  0018BE  0100               	movlb	0	; () banked
  5063  0018C0  5194               	movf	___lldiv@divisor& (0+255),w,b
  5064  0018C2  0100               	movlb	0	; () banked
  5065  0018C4  1195               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5066  0018C6  0100               	movlb	0	; () banked
  5067  0018C8  1196               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5068  0018CA  0100               	movlb	0	; () banked
  5069  0018CC  1197               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5070  0018CE  B4D8               	btfsc	status,2,c
  5071  0018D0  D042               	goto	l740
  5072                           
  5073                           ; BSR set to: 0
  5074  0018D2  0E01               	movlw	1
  5075  0018D4  0100               	movlb	0	; () banked
  5076  0018D6  6F9C               	movwf	___lldiv@counter& (0+255),b
  5077  0018D8  D008               	goto	l3535
  5078  0018DA                     l3533:
  5079                           
  5080                           ; BSR set to: 0
  5081  0018DA  0100               	movlb	0	; () banked
  5082  0018DC  90D8               	bcf	status,0,c
  5083  0018DE  3794               	rlcf	___lldiv@divisor& (0+255),f,b
  5084  0018E0  3795               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5085  0018E2  3796               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5086  0018E4  3797               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5087  0018E6  0100               	movlb	0	; () banked
  5088  0018E8  2B9C               	incf	___lldiv@counter& (0+255),f,b
  5089  0018EA                     l3535:
  5090                           
  5091                           ; BSR set to: 0
  5092  0018EA  0100               	movlb	0	; () banked
  5093  0018EC  AF97               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5094  0018EE  D7F5               	goto	l3533
  5095  0018F0                     l3537:
  5096                           
  5097                           ; BSR set to: 0
  5098  0018F0  0100               	movlb	0	; () banked
  5099  0018F2  90D8               	bcf	status,0,c
  5100  0018F4  3798               	rlcf	___lldiv@quotient& (0+255),f,b
  5101  0018F6  3799               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5102  0018F8  379A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5103  0018FA  379B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5104                           
  5105                           ; BSR set to: 0
  5106  0018FC  0100               	movlb	0	; () banked
  5107  0018FE  5194               	movf	___lldiv@divisor& (0+255),w,b
  5108  001900  0100               	movlb	0	; () banked
  5109  001902  5D90               	subwf	___lldiv@dividend& (0+255),w,b
  5110  001904  0100               	movlb	0	; () banked
  5111  001906  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5112  001908  0100               	movlb	0	; () banked
  5113  00190A  5991               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5114  00190C  0100               	movlb	0	; () banked
  5115  00190E  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5116  001910  0100               	movlb	0	; () banked
  5117  001912  5992               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5118  001914  0100               	movlb	0	; () banked
  5119  001916  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5120  001918  0100               	movlb	0	; () banked
  5121  00191A  5993               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5122  00191C  A0D8               	btfss	status,0,c
  5123  00191E  D012               	goto	l3545
  5124                           
  5125                           ; BSR set to: 0
  5126  001920  0100               	movlb	0	; () banked
  5127  001922  5194               	movf	___lldiv@divisor& (0+255),w,b
  5128  001924  0100               	movlb	0	; () banked
  5129  001926  5F90               	subwf	___lldiv@dividend& (0+255),f,b
  5130  001928  0100               	movlb	0	; () banked
  5131  00192A  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5132  00192C  0100               	movlb	0	; () banked
  5133  00192E  5B91               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5134  001930  0100               	movlb	0	; () banked
  5135  001932  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5136  001934  0100               	movlb	0	; () banked
  5137  001936  5B92               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5138  001938  0100               	movlb	0	; () banked
  5139  00193A  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5140  00193C  0100               	movlb	0	; () banked
  5141  00193E  5B93               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5142                           
  5143                           ; BSR set to: 0
  5144  001940  0100               	movlb	0	; () banked
  5145  001942  8198               	bsf	___lldiv@quotient& (0+255),0,b
  5146  001944                     l3545:
  5147                           
  5148                           ; BSR set to: 0
  5149  001944  0100               	movlb	0	; () banked
  5150  001946  90D8               	bcf	status,0,c
  5151  001948  3397               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5152  00194A  3396               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5153  00194C  3395               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5154  00194E  3394               	rrcf	___lldiv@divisor& (0+255),f,b
  5155                           
  5156                           ; BSR set to: 0
  5157  001950  0100               	movlb	0	; () banked
  5158  001952  2F9C               	decfsz	___lldiv@counter& (0+255),f,b
  5159  001954  D7CD               	goto	l3537
  5160  001956                     l740:
  5161                           
  5162                           ; BSR set to: 0
  5163  001956  C098  F090         	movff	___lldiv@quotient,?___lldiv
  5164  00195A  C099  F091         	movff	___lldiv@quotient+1,?___lldiv+1
  5165  00195E  C09A  F092         	movff	___lldiv@quotient+2,?___lldiv+2
  5166  001962  C09B  F093         	movff	___lldiv@quotient+3,?___lldiv+3
  5167                           
  5168                           ; BSR set to: 0
  5169  001966  0012               	return		;funcret
  5170  001968                     __end_of___lldiv:
  5171                           	opt stack 0
  5172                           tblptru	equ	0xFF8
  5173                           tblptrh	equ	0xFF7
  5174                           tblptrl	equ	0xFF6
  5175                           tablat	equ	0xFF5
  5176                           prodh	equ	0xFF4
  5177                           prodl	equ	0xFF3
  5178                           intcon	equ	0xFF2
  5179                           intcon2	equ	0xFF1
  5180                           intcon3	equ	0xFF0
  5181                           postinc0	equ	0xFEE
  5182                           wreg	equ	0xFE8
  5183                           indf2	equ	0xFDF
  5184                           postinc2	equ	0xFDE
  5185                           postdec2	equ	0xFDD
  5186                           fsr2h	equ	0xFDA
  5187                           fsr2l	equ	0xFD9
  5188                           status	equ	0xFD8
  5189                           
  5190 ;; *************** function _isr *****************
  5191 ;; Defined at:
  5192 ;;		line 128 in file "main.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;		None
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  i               1  116[COMRAM] unsigned char 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      void 
  5199 ;; Registers used:
  5200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;Total ram usage:       19 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    6
  5213 ;; This function calls:
  5214 ;;		_dec_to_hex
  5215 ;;		_read_time
  5216 ;;		_servo_rotate
  5217 ;;		_test
  5218 ;;		i2___wmul
  5219 ;;		i2_lcdInst
  5220 ;;		i2_printf
  5221 ;; This function is called by:
  5222 ;;		Interrupt level 2
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	intcode
  5227  000008                     __pintcode:
  5228                           	opt stack 0
  5229  000008                     _isr:
  5230                           	opt stack 20
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;incstack = 0
  5234  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5235  00000A  ED69  F003         	call	int_func,f	;refresh shadow registers
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodh	equ	0xFF4
  5241                           prodl	equ	0xFF3
  5242                           intcon	equ	0xFF2
  5243                           intcon2	equ	0xFF1
  5244                           intcon3	equ	0xFF0
  5245                           postinc0	equ	0xFEE
  5246                           wreg	equ	0xFE8
  5247                           indf2	equ	0xFDF
  5248                           postinc2	equ	0xFDE
  5249                           postdec2	equ	0xFDD
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254                           	psect	intcode_body
  5255  0006D2                     __pintcode_body:
  5256                           	opt stack 20
  5257  0006D2                     int_func:
  5258                           	opt stack 20
  5259  0006D2  0006               	pop		; remove dummy address from shadow register refresh
  5260  0006D4  CFFA F082          	movff	pclath,??_isr+2
  5261  0006D8  CFFB F083          	movff	pclatu,??_isr+3
  5262  0006DC  CFE9 F084          	movff	fsr0l,??_isr+4
  5263  0006E0  CFEA F085          	movff	fsr0h,??_isr+5
  5264  0006E4  CFE1 F086          	movff	fsr1l,??_isr+6
  5265  0006E8  CFE2 F087          	movff	fsr1h,??_isr+7
  5266  0006EC  CFD9 F088          	movff	fsr2l,??_isr+8
  5267  0006F0  CFDA F089          	movff	fsr2h,??_isr+9
  5268  0006F4  CFF3 F08A          	movff	prodl,??_isr+10
  5269  0006F8  CFF4 F08B          	movff	prodh,??_isr+11
  5270  0006FC  CFF6 F08C          	movff	tblptrl,??_isr+12
  5271  000700  CFF7 F08D          	movff	tblptrh,??_isr+13
  5272  000704  CFF8 F08E          	movff	tblptru,??_isr+14
  5273  000708  CFF5 F08F          	movff	tablat,??_isr+15
  5274                           
  5275                           ;main.c: 129: if (INT1IF) {
  5276  00070C  B0F0               	btfsc	intcon3,0,c	;volatile
  5277  00070E  D0A3               	goto	i2l4105
  5278  000710  D0C3               	goto	i2l220
  5279  000712                     i2l4045:
  5280                           
  5281                           ;main.c: 132: curr_state = STANDBY;
  5282  000712  0E00               	movlw	0
  5283  000714  0100               	movlb	0	; () banked
  5284  000716  6FC3               	movwf	_curr_state& (0+255),b
  5285                           
  5286                           ;main.c: 133: bottle_count_disp = 0;
  5287  000718  0E00               	movlw	0
  5288  00071A  0100               	movlb	0	; () banked
  5289  00071C  6FC5               	movwf	(_bottle_count_disp+1)& (0+255),b
  5290  00071E  0E00               	movlw	0
  5291  000720  6FC4               	movwf	_bottle_count_disp& (0+255),b
  5292                           
  5293                           ;main.c: 134: break;
  5294  000722  D0B8               	goto	i2l223
  5295  000724                     i2l224:
  5296                           
  5297                           ;main.c: 136: TMR0IE = 1;
  5298  000724  8AF2               	bsf	intcon,5,c	;volatile
  5299                           
  5300                           ;main.c: 137: TMR0ON = 1;
  5301  000726  8ED5               	bsf	4053,7,c	;volatile
  5302                           
  5303                           ;main.c: 138: TMR0 = 0;
  5304  000728  0E00               	movlw	0
  5305  00072A  6ED7               	movwf	4055,c	;volatile
  5306  00072C  0E00               	movlw	0
  5307  00072E  6ED6               	movwf	4054,c	;volatile
  5308                           
  5309                           ;main.c: 139: read_time();
  5310  000730  EC43  F00F         	call	_read_time	;wreg free
  5311                           
  5312                           ;main.c: 140: start_time[1] = time[1];
  5313  000734  C0B7  F07D         	movff	_time+1,_start_time+1
  5314                           
  5315                           ;main.c: 141: start_time[0] = time[0];
  5316  000738  C0B6  F07C         	movff	_time,_start_time
  5317                           
  5318                           ;main.c: 142: lcdInst(0b00000001);
  5319  00073C  0E01               	movlw	1
  5320  00073E  EC3C  F012         	call	i2_lcdInst
  5321                           
  5322                           ;main.c: 143: curr_state = OPERATION;
  5323  000742  0E02               	movlw	2
  5324  000744  D069               	goto	L3
  5325  000746                     i2l4059:
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;main.c: 144: bottle_count_disp = -1;
  5329  000746  0100               	movlb	0	; () banked
  5330  000748  69C4               	setf	_bottle_count_disp& (0+255),b
  5331  00074A  69C5               	setf	(_bottle_count_disp+1)& (0+255),b
  5332                           
  5333                           ;main.c: 145: break;
  5334  00074C  D0A3               	goto	i2l223
  5335  00074E                     i2l4061:
  5336                           
  5337                           ;main.c: 147: curr_state = BOTTLECOUNT;
  5338  00074E  0E05               	movlw	5
  5339  000750  0100               	movlb	0	; () banked
  5340  000752  6FC3               	movwf	_curr_state& (0+255),b
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;main.c: 148: bottle_count_disp += 1;
  5344  000754  0100               	movlb	0	; () banked
  5345  000756  4BC4               	infsnz	_bottle_count_disp& (0+255),f,b
  5346  000758  2BC5               	incf	(_bottle_count_disp+1)& (0+255),f,b
  5347  00075A                     i2l4065:
  5348  00075A  0E1F               	movlw	31
  5349  00075C  1881               	xorwf	3969,w,c	;volatile
  5350  00075E  A4D8               	btfss	status,2,c
  5351  000760  D099               	goto	i2l223
  5352  000762  D7FB               	goto	i2l4065
  5353  000764                     i2l4067:
  5354                           
  5355                           ;main.c: 152: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5356  000764  C07D  F063         	movff	_start_time+1,dec_to_hex@num
  5357  000768  6A64               	clrf	dec_to_hex@num+1,c
  5358  00076A  ECCF  F008         	call	_dec_to_hex	;wreg free
  5359  00076E  C063  F073         	movff	?_dec_to_hex,_isr$1300
  5360  000772  C064  F074         	movff	?_dec_to_hex+1,_isr$1300+1
  5361                           
  5362                           ;main.c: 152: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5363  000776  C073  F001         	movff	_isr$1300,i2___wmul@multiplier
  5364  00077A  C074  F002         	movff	_isr$1300+1,i2___wmul@multiplier+1
  5365  00077E  0E00               	movlw	0
  5366  000780  6E04               	movwf	i2___wmul@multiplicand+1,c
  5367  000782  0E3C               	movlw	60
  5368  000784  6E03               	movwf	i2___wmul@multiplicand,c
  5369  000786  ECBA  F011         	call	i2___wmul	;wreg free
  5370  00078A  C001  F080         	movff	?i2___wmul,??_isr
  5371  00078E  C002  F081         	movff	?i2___wmul+1,??_isr+1
  5372  000792  C07C  F063         	movff	_start_time,dec_to_hex@num
  5373  000796  6A64               	clrf	dec_to_hex@num+1,c
  5374  000798  ECCF  F008         	call	_dec_to_hex	;wreg free
  5375  00079C  5063               	movf	?_dec_to_hex,w,c
  5376  00079E  0100               	movlb	0	; () banked
  5377  0007A0  2580               	addwf	??_isr& (0+255),w,b
  5378  0007A2  0100               	movlb	0	; () banked
  5379  0007A4  6FC1               	movwf	_stime& (0+255),b
  5380  0007A6  5064               	movf	?_dec_to_hex+1,w,c
  5381  0007A8  0100               	movlb	0	; () banked
  5382  0007AA  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5383  0007AC  0100               	movlb	0	; () banked
  5384  0007AE  6FC2               	movwf	(_stime+1)& (0+255),b
  5385                           
  5386                           ;main.c: 153: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5387  0007B0  C077  F063         	movff	_end_time+1,dec_to_hex@num
  5388  0007B4  6A64               	clrf	dec_to_hex@num+1,c
  5389  0007B6  ECCF  F008         	call	_dec_to_hex	;wreg free
  5390  0007BA  C063  F073         	movff	?_dec_to_hex,_isr$1300
  5391  0007BE  C064  F074         	movff	?_dec_to_hex+1,_isr$1300+1
  5392                           
  5393                           ;main.c: 153: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5394  0007C2  C073  F001         	movff	_isr$1300,i2___wmul@multiplier
  5395  0007C6  C074  F002         	movff	_isr$1300+1,i2___wmul@multiplier+1
  5396  0007CA  0E00               	movlw	0
  5397  0007CC  6E04               	movwf	i2___wmul@multiplicand+1,c
  5398  0007CE  0E3C               	movlw	60
  5399  0007D0  6E03               	movwf	i2___wmul@multiplicand,c
  5400  0007D2  ECBA  F011         	call	i2___wmul	;wreg free
  5401  0007D6  C001  F080         	movff	?i2___wmul,??_isr
  5402  0007DA  C002  F081         	movff	?i2___wmul+1,??_isr+1
  5403  0007DE  C076  F063         	movff	_end_time,dec_to_hex@num
  5404  0007E2  6A64               	clrf	dec_to_hex@num+1,c
  5405  0007E4  ECCF  F008         	call	_dec_to_hex	;wreg free
  5406  0007E8  5063               	movf	?_dec_to_hex,w,c
  5407  0007EA  0100               	movlb	0	; () banked
  5408  0007EC  2580               	addwf	??_isr& (0+255),w,b
  5409  0007EE  0100               	movlb	0	; () banked
  5410  0007F0  6FBD               	movwf	_etime& (0+255),b
  5411  0007F2  5064               	movf	?_dec_to_hex+1,w,c
  5412  0007F4  0100               	movlb	0	; () banked
  5413  0007F6  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5414  0007F8  0100               	movlb	0	; () banked
  5415  0007FA  6FBE               	movwf	(_etime+1)& (0+255),b
  5416                           
  5417                           ; BSR set to: 0
  5418                           ;main.c: 154: curr_state = BOTTLETIME;
  5419  0007FC  0E06               	movlw	6
  5420  0007FE  D00C               	goto	L3
  5421  000800                     i2l4073:
  5422                           
  5423                           ;main.c: 158: curr_state = DATETIME;
  5424  000800  0E04               	movlw	4
  5425  000802  D00A               	goto	L3
  5426  000804                     i2l4077:
  5427                           
  5428                           ;main.c: 162: read_time();
  5429  000804  EC43  F00F         	call	_read_time	;wreg free
  5430                           
  5431                           ;main.c: 163: end_time[1] = time[1];
  5432  000808  C0B7  F077         	movff	_time+1,_end_time+1
  5433                           
  5434                           ;main.c: 164: end_time[0] = time[0];
  5435  00080C  C0B6  F076         	movff	_time,_end_time
  5436                           
  5437                           ;main.c: 165: lcdInst(0b00000001);
  5438  000810  0E01               	movlw	1
  5439  000812  EC3C  F012         	call	i2_lcdInst
  5440                           
  5441                           ;main.c: 166: curr_state = OPERATIONEND;
  5442  000816  0E03               	movlw	3
  5443  000818                     L3:
  5444  000818  0100               	movlb	0	; () banked
  5445  00081A  6FC3               	movwf	_curr_state& (0+255),b
  5446  00081C  D794               	goto	i2l4059
  5447  00081E                     i2l4089:
  5448                           
  5449                           ;main.c: 170: lcdInst(0b00000001);
  5450  00081E  0E01               	movlw	1
  5451  000820  EC3C  F012         	call	i2_lcdInst
  5452                           
  5453                           ;main.c: 171: curr_state = EMERGENCYSTOP;
  5454  000824  0E01               	movlw	1
  5455  000826  0100               	movlb	0	; () banked
  5456  000828  6FC3               	movwf	_curr_state& (0+255),b
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;main.c: 172: bottle_count_disp = -1;
  5460  00082A  0100               	movlb	0	; () banked
  5461  00082C  69C4               	setf	_bottle_count_disp& (0+255),b
  5462  00082E  69C5               	setf	(_bottle_count_disp+1)& (0+255),b
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;main.c: 173: TMR0ON = 0;
  5466  000830  9ED5               	bcf	4053,7,c	;volatile
  5467                           
  5468                           ;main.c: 174: break;
  5469  000832  D030               	goto	i2l223
  5470  000834                     i2l4097:
  5471                           
  5472                           ;main.c: 176: servo_rotate(90);
  5473  000834  0E00               	movlw	0
  5474  000836  6E02               	movwf	servo_rotate@degree+1,c
  5475  000838  0E5A               	movlw	90
  5476  00083A  6E01               	movwf	servo_rotate@degree,c
  5477  00083C  EC0B  F00D         	call	_servo_rotate	;wreg free
  5478                           
  5479                           ;main.c: 177: break;
  5480  000840  D029               	goto	i2l223
  5481  000842                     i2l4099:
  5482                           
  5483                           ;main.c: 179: servo_rotate(-90);
  5484  000842  0EFF               	movlw	255
  5485  000844  6E02               	movwf	servo_rotate@degree+1,c
  5486  000846  0EA6               	movlw	166
  5487  000848  6E01               	movwf	servo_rotate@degree,c
  5488  00084A  EC0B  F00D         	call	_servo_rotate	;wreg free
  5489                           
  5490                           ;main.c: 180: break;
  5491  00084E  D022               	goto	i2l223
  5492  000850                     i2l4101:
  5493                           
  5494                           ;main.c: 182: test();
  5495  000850  EC07  F012         	call	_test	;wreg free
  5496                           
  5497                           ;main.c: 184: }
  5498                           
  5499                           ;main.c: 183: break;
  5500  000854  D01F               	goto	i2l223
  5501  000856                     i2l4105:
  5502  000856  5081               	movf	3969,w,c	;volatile
  5503                           
  5504                           ; Switch size 1, requested type "space"
  5505                           ; Number of cases is 10, Range of values is 15 to 239
  5506                           ; switch strategies available:
  5507                           ; Name         Instructions Cycles
  5508                           ; simple_byte           31    16 (average)
  5509                           ;	Chosen strategy is simple_byte
  5510  000858  0A0F               	xorlw	15	; case 15
  5511  00085A  B4D8               	btfsc	status,2,c
  5512  00085C  D763               	goto	i2l224
  5513  00085E  0A10               	xorlw	16	; case 31
  5514  000860  B4D8               	btfsc	status,2,c
  5515  000862  D775               	goto	i2l4061
  5516  000864  0A30               	xorlw	48	; case 47
  5517  000866  B4D8               	btfsc	status,2,c
  5518  000868  D77D               	goto	i2l4067
  5519  00086A  0A10               	xorlw	16	; case 63
  5520  00086C  B4D8               	btfsc	status,2,c
  5521  00086E  D7C8               	goto	i2l4073
  5522  000870  0A70               	xorlw	112	; case 79
  5523  000872  B4D8               	btfsc	status,2,c
  5524  000874  D7C7               	goto	i2l4077
  5525  000876  0A30               	xorlw	48	; case 127
  5526  000878  B4D8               	btfsc	status,2,c
  5527  00087A  D7DC               	goto	i2l4097
  5528  00087C  0AD0               	xorlw	208	; case 175
  5529  00087E  B4D8               	btfsc	status,2,c
  5530  000880  D7E7               	goto	i2l4101
  5531  000882  0A10               	xorlw	16	; case 191
  5532  000884  B4D8               	btfsc	status,2,c
  5533  000886  D7DD               	goto	i2l4099
  5534  000888  0A70               	xorlw	112	; case 207
  5535  00088A  B4D8               	btfsc	status,2,c
  5536  00088C  D7C8               	goto	i2l4089
  5537  00088E  0A20               	xorlw	32	; case 239
  5538  000890  B4D8               	btfsc	status,2,c
  5539  000892  D73F               	goto	i2l4045
  5540  000894                     i2l223:
  5541                           
  5542                           ;main.c: 185: INT1IF = 0;
  5543  000894  90F0               	bcf	intcon3,0,c	;volatile
  5544                           
  5545                           ;main.c: 186: }
  5546  000896  D02E               	goto	i2l244
  5547  000898                     i2l220:
  5548                           
  5549                           ;main.c: 187: else if (TMR0IF) {
  5550  000898  A4F2               	btfss	intcon,2,c	;volatile
  5551  00089A  D012               	goto	i2l4123
  5552                           
  5553                           ;main.c: 188: TMR0ON = 0;
  5554  00089C  9ED5               	bcf	4053,7,c	;volatile
  5555                           
  5556                           ;main.c: 189: read_time();
  5557  00089E  EC43  F00F         	call	_read_time	;wreg free
  5558                           
  5559                           ;main.c: 190: end_time[1] = time[1];
  5560  0008A2  C0B7  F077         	movff	_time+1,_end_time+1
  5561                           
  5562                           ;main.c: 191: end_time[0] = time[0];
  5563  0008A6  C0B6  F076         	movff	_time,_end_time
  5564                           
  5565                           ;main.c: 192: lcdInst(0b00000001);
  5566  0008AA  0E01               	movlw	1
  5567  0008AC  EC3C  F012         	call	i2_lcdInst
  5568                           
  5569                           ;main.c: 193: curr_state = OPERATIONEND;
  5570  0008B0  0E03               	movlw	3
  5571  0008B2  0100               	movlb	0	; () banked
  5572  0008B4  6FC3               	movwf	_curr_state& (0+255),b
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;main.c: 194: bottle_count_disp = -1;
  5576  0008B6  0100               	movlb	0	; () banked
  5577  0008B8  69C4               	setf	_bottle_count_disp& (0+255),b
  5578  0008BA  69C5               	setf	(_bottle_count_disp+1)& (0+255),b
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;main.c: 195: TMR0IF = 0;
  5582  0008BC  94F2               	bcf	intcon,2,c	;volatile
  5583                           
  5584                           ;main.c: 196: }
  5585  0008BE  D01A               	goto	i2l244
  5586  0008C0                     i2l4123:
  5587                           
  5588                           ;main.c: 199: lcdInst(0b10000000);
  5589  0008C0  0E80               	movlw	128
  5590  0008C2  EC3C  F012         	call	i2_lcdInst
  5591                           
  5592                           ;main.c: 200: printf("bad interrupt");
  5593  0008C6  0EDC               	movlw	low STR_1
  5594  0008C8  6E0D               	movwf	i2printf@f,c
  5595  0008CA  0EFF               	movlw	high STR_1
  5596  0008CC  6E0E               	movwf	i2printf@f+1,c
  5597  0008CE  ECE3  F001         	call	i2_printf	;wreg free
  5598                           
  5599                           ;main.c: 201: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  5600  0008D2  0E00               	movlw	0
  5601  0008D4  6E75               	movwf	isr@i,c
  5602  0008D6                     i2l4129:
  5603  0008D6  0E63               	movlw	99
  5604  0008D8  6475               	cpfsgt	isr@i,c
  5605  0008DA  D001               	goto	i2l4133
  5606  0008DC  D7F1               	goto	i2l4123
  5607  0008DE                     i2l4133:
  5608  0008DE  0E21               	movlw	33
  5609  0008E0  0100               	movlb	0	; () banked
  5610  0008E2  6F80               	movwf	??_isr& (0+255),b
  5611  0008E4  0E76               	movlw	118
  5612  0008E6                     i2u387_47:
  5613  0008E6  2EE8               	decfsz	wreg,f,c
  5614  0008E8  D7FE               	bra	i2u387_47
  5615  0008EA  2F80               	decfsz	??_isr& (0+255),f,b
  5616  0008EC  D7FC               	bra	i2u387_47
  5617  0008EE  F000               	nop	
  5618  0008F0  2A75               	incf	isr@i,f,c
  5619  0008F2  D7F1               	goto	i2l4129
  5620  0008F4                     i2l244:
  5621  0008F4  C08F  FFF5         	movff	??_isr+15,tablat
  5622  0008F8  C08E  FFF8         	movff	??_isr+14,tblptru
  5623  0008FC  C08D  FFF7         	movff	??_isr+13,tblptrh
  5624  000900  C08C  FFF6         	movff	??_isr+12,tblptrl
  5625  000904  C08B  FFF4         	movff	??_isr+11,prodh
  5626  000908  C08A  FFF3         	movff	??_isr+10,prodl
  5627  00090C  C089  FFDA         	movff	??_isr+9,fsr2h
  5628  000910  C088  FFD9         	movff	??_isr+8,fsr2l
  5629  000914  C087  FFE2         	movff	??_isr+7,fsr1h
  5630  000918  C086  FFE1         	movff	??_isr+6,fsr1l
  5631  00091C  C085  FFEA         	movff	??_isr+5,fsr0h
  5632  000920  C084  FFE9         	movff	??_isr+4,fsr0l
  5633  000924  C083  FFFB         	movff	??_isr+3,pclatu
  5634  000928  C082  FFFA         	movff	??_isr+2,pclath
  5635  00092C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5636  00092E  0011               	retfie		f
  5637  000930                     __end_of_isr:
  5638                           	opt stack 0
  5639                           pclatu	equ	0xFFB
  5640                           pclath	equ	0xFFA
  5641                           tblptru	equ	0xFF8
  5642                           tblptrh	equ	0xFF7
  5643                           tblptrl	equ	0xFF6
  5644                           tablat	equ	0xFF5
  5645                           prodh	equ	0xFF4
  5646                           prodl	equ	0xFF3
  5647                           intcon	equ	0xFF2
  5648                           intcon2	equ	0xFF1
  5649                           intcon3	equ	0xFF0
  5650                           postinc0	equ	0xFEE
  5651                           fsr0h	equ	0xFEA
  5652                           fsr0l	equ	0xFE9
  5653                           wreg	equ	0xFE8
  5654                           fsr1h	equ	0xFE2
  5655                           fsr1l	equ	0xFE1
  5656                           indf2	equ	0xFDF
  5657                           postinc2	equ	0xFDE
  5658                           postdec2	equ	0xFDD
  5659                           fsr2h	equ	0xFDA
  5660                           fsr2l	equ	0xFD9
  5661                           status	equ	0xFD8
  5662                           
  5663 ;; *************** function i2_printf *****************
  5664 ;; Defined at:
  5665 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;  f               2   12[COMRAM] PTR const unsigned char 
  5668 ;;		 -> STR_23(15), STR_22(16), STR_21(25), STR_20(24), 
  5669 ;;		 -> STR_19(23), STR_18(18), STR_17(23), STR_16(10), 
  5670 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  5671 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  5672 ;;		 -> STR_7(17), STR_6(17), STR_5(23), STR_4(23), 
  5673 ;;		 -> STR_3(10), STR_2(17), STR_1(14), 
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;  printf          4    0        struct .
  5676 ;;  printf          3    0        PTR const unsigned char 
  5677 ;;  printf          2   25[COMRAM] int 
  5678 ;;  printf          2   22[COMRAM] unsigned int 
  5679 ;;  printf          2   19[COMRAM] PTR void [1]
  5680 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5681 ;;  printf          2    0        unsigned int 
  5682 ;;  printf          1   27[COMRAM] char 
  5683 ;;  printf          1   24[COMRAM] unsigned char 
  5684 ;;  printf          1   21[COMRAM] char 
  5685 ;;  printf          1   18[COMRAM] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  2   12[COMRAM] int 
  5688 ;; Registers used:
  5689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;Total ram usage:       16 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    2
  5702 ;; This function calls:
  5703 ;;		i2___lwdiv
  5704 ;;		i2___lwmod
  5705 ;;		i2___wmul
  5706 ;;		i2_isdigit
  5707 ;;		i2_putch
  5708 ;; This function is called by:
  5709 ;;		_isr
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           	psect	text26
  5714  0003C6                     __ptext26:
  5715                           	opt stack 0
  5716  0003C6                     i2_printf:
  5717                           	opt stack 23
  5718                           
  5719                           ;doprnt.c: 466: va_list ap;
  5720                           ;doprnt.c: 499: signed char c;
  5721                           ;doprnt.c: 501: int width;
  5722                           ;doprnt.c: 506: signed char prec;
  5723                           ;doprnt.c: 508: unsigned char flag;
  5724                           ;doprnt.c: 523: union {
  5725                           ;doprnt.c: 524: unsigned long vd;
  5726                           ;doprnt.c: 525: double integ;
  5727                           ;doprnt.c: 526: } tmpval;
  5728                           ;doprnt.c: 528: unsigned int val;
  5729                           ;doprnt.c: 529: unsigned len;
  5730                           ;doprnt.c: 530: const char * cp;
  5731                           ;doprnt.c: 533: *ap = __va_start();
  5732                           
  5733                           ;incstack = 0
  5734  0003C6  0E0F               	movlw	low (?i2_printf+2)
  5735  0003C8  6E14               	movwf	i2printf@ap,c
  5736  0003CA  0E00               	movlw	high (?i2_printf+2)
  5737  0003CC  6E15               	movwf	i2printf@ap+1,c
  5738                           
  5739                           ;doprnt.c: 536: while(c = *f++) {
  5740  0003CE  D174               	goto	i2l3987
  5741  0003D0                     i2l3861:
  5742                           
  5743                           ;doprnt.c: 538: if(c != '%')
  5744  0003D0  0E25               	movlw	37
  5745  0003D2  181C               	xorwf	i2printf@c,w,c
  5746  0003D4  B4D8               	btfsc	status,2,c
  5747  0003D6  D004               	goto	i2l3865
  5748                           
  5749                           ;doprnt.c: 540: {
  5750                           ;doprnt.c: 541: (putch(c) );
  5751  0003D8  501C               	movf	i2printf@c,w,c
  5752  0003DA  EC36  F012         	call	i2_putch
  5753                           
  5754                           ;doprnt.c: 542: continue;
  5755  0003DE  D16C               	goto	i2l3987
  5756  0003E0                     i2l3865:
  5757                           
  5758                           ;doprnt.c: 543: }
  5759                           ;doprnt.c: 546: width = 0;
  5760  0003E0  0E00               	movlw	0
  5761  0003E2  6E1B               	movwf	i2printf@width+1,c
  5762  0003E4  0E00               	movlw	0
  5763  0003E6  6E1A               	movwf	i2printf@width,c
  5764                           
  5765                           ;doprnt.c: 548: flag = 0;
  5766  0003E8  0E00               	movlw	0
  5767  0003EA  6E19               	movwf	i2printf@flag,c
  5768                           
  5769                           ;doprnt.c: 551: switch(*f) {
  5770                           
  5771                           ;doprnt.c: 550: for(;;) {
  5772  0003EC  D003               	goto	i2l3871
  5773  0003EE                     i2l3867:
  5774                           
  5775                           ;doprnt.c: 580: flag |= 0x04;
  5776  0003EE  8419               	bsf	i2printf@flag,2,c
  5777                           
  5778                           ;doprnt.c: 581: f++;
  5779  0003F0  4A0D               	infsnz	i2printf@f,f,c
  5780  0003F2  2A0E               	incf	i2printf@f+1,f,c
  5781  0003F4                     i2l3871:
  5782  0003F4  C00D  FFF6         	movff	i2printf@f,tblptrl
  5783  0003F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5784  0003FC                     	if	0	;tblptru may be non-zero
  5785  0003FC                     	endif
  5786  0003FC                     	if	0	;tblptru may be non-zero
  5787  0003FC                     	endif
  5788  0003FC  0008               	tblrd		*
  5789  0003FE  50F5               	movf	tablat,w,c
  5790                           
  5791                           ; Switch size 1, requested type "space"
  5792                           ; Number of cases is 1, Range of values is 48 to 48
  5793                           ; switch strategies available:
  5794                           ; Name         Instructions Cycles
  5795                           ; simple_byte            4     3 (average)
  5796                           ;	Chosen strategy is simple_byte
  5797  000400  0A30               	xorlw	48	; case 48
  5798  000402  B4D8               	btfsc	status,2,c
  5799  000404  D7F4               	goto	i2l3867
  5800                           
  5801                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5802                           
  5803                           ;doprnt.c: 586: }
  5804                           
  5805                           ;doprnt.c: 585: break;
  5806  000406  C00D  FFF6         	movff	i2printf@f,tblptrl
  5807  00040A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5808  00040E                     	if	0	;tblptru may be non-zero
  5809  00040E                     	endif
  5810  00040E                     	if	0	;tblptru may be non-zero
  5811  00040E                     	endif
  5812  00040E  0008               	tblrd		*
  5813  000410  50F5               	movf	tablat,w,c
  5814  000412  ECDF  F011         	call	i2_isdigit
  5815  000416  A0D8               	btfss	status,0,c
  5816  000418  D035               	goto	i2l3889
  5817                           
  5818                           ;doprnt.c: 598: width = 0;
  5819  00041A  0E00               	movlw	0
  5820  00041C  6E1B               	movwf	i2printf@width+1,c
  5821  00041E  0E00               	movlw	0
  5822  000420  6E1A               	movwf	i2printf@width,c
  5823  000422                     i2l3877:
  5824                           
  5825                           ;doprnt.c: 600: width *= 10;
  5826  000422  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  5827  000426  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  5828  00042A  0E00               	movlw	0
  5829  00042C  6E04               	movwf	i2___wmul@multiplicand+1,c
  5830  00042E  0E0A               	movlw	10
  5831  000430  6E03               	movwf	i2___wmul@multiplicand,c
  5832  000432  ECBA  F011         	call	i2___wmul	;wreg free
  5833  000436  C001  F01A         	movff	?i2___wmul,i2printf@width
  5834  00043A  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  5835                           
  5836                           ;doprnt.c: 601: width += *f++ - '0';
  5837  00043E  0ED0               	movlw	208
  5838  000440  6E0F               	movwf	??i2_printf& (0+255),c
  5839  000442  0EFF               	movlw	255
  5840  000444  6E10               	movwf	(??i2_printf+1)& (0+255),c
  5841  000446  C00D  FFF6         	movff	i2printf@f,tblptrl
  5842  00044A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5843  00044E                     	if	0	;tblptru may be non-zero
  5844  00044E                     	endif
  5845  00044E                     	if	0	;tblptru may be non-zero
  5846  00044E                     	endif
  5847  00044E  0008               	tblrd		*
  5848  000450  50F5               	movf	tablat,w,c
  5849  000452  6E11               	movwf	(??i2_printf+2)& (0+255),c
  5850  000454  6A12               	clrf	(??i2_printf+3)& (0+255),c
  5851  000456  500F               	movf	??i2_printf,w,c
  5852  000458  2611               	addwf	??i2_printf+2,f,c
  5853  00045A  5010               	movf	??i2_printf+1,w,c
  5854  00045C  2212               	addwfc	??i2_printf+3,f,c
  5855  00045E  5011               	movf	??i2_printf+2,w,c
  5856  000460  261A               	addwf	i2printf@width,f,c
  5857  000462  5012               	movf	??i2_printf+3,w,c
  5858  000464  221B               	addwfc	i2printf@width+1,f,c
  5859  000466  4A0D               	infsnz	i2printf@f,f,c
  5860  000468  2A0E               	incf	i2printf@f+1,f,c
  5861                           
  5862                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5863  00046A  C00D  FFF6         	movff	i2printf@f,tblptrl
  5864  00046E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5865  000472                     	if	0	;tblptru may be non-zero
  5866  000472                     	endif
  5867  000472                     	if	0	;tblptru may be non-zero
  5868  000472                     	endif
  5869  000472  0008               	tblrd		*
  5870  000474  50F5               	movf	tablat,w,c
  5871  000476  ECDF  F011         	call	i2_isdigit
  5872  00047A  A0D8               	btfss	status,0,c
  5873  00047C  D003               	goto	i2l3889
  5874  00047E  D7D1               	goto	i2l3877
  5875  000480                     i2l3885:
  5876                           
  5877                           ;doprnt.c: 721: flag |= 0x80;
  5878  000480  8E19               	bsf	i2printf@flag,7,c
  5879                           
  5880                           ;doprnt.c: 723: break;
  5881  000482  D017               	goto	i2l348
  5882  000484                     i2l3889:
  5883  000484  C00D  FFF6         	movff	i2printf@f,tblptrl
  5884  000488  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5885  00048C  4A0D               	infsnz	i2printf@f,f,c
  5886  00048E  2A0E               	incf	i2printf@f+1,f,c
  5887  000490                     	if	0	;tblptru may be non-zero
  5888  000490                     	endif
  5889  000490                     	if	0	;tblptru may be non-zero
  5890  000490                     	endif
  5891  000490  0008               	tblrd		*
  5892  000492  CFF5 F01C          	movff	tablat,i2printf@c
  5893  000496  501C               	movf	i2printf@c,w,c
  5894                           
  5895                           ; Switch size 1, requested type "space"
  5896                           ; Number of cases is 4, Range of values is 0 to 120
  5897                           ; switch strategies available:
  5898                           ; Name         Instructions Cycles
  5899                           ; simple_byte           13     7 (average)
  5900                           ;	Chosen strategy is simple_byte
  5901  000498  0A00               	xorlw	0	; case 0
  5902  00049A  B4D8               	btfsc	status,2,c
  5903  00049C  0012               	return	
  5904  00049E  0A64               	xorlw	100	; case 100
  5905  0004A0  B4D8               	btfsc	status,2,c
  5906  0004A2  D007               	goto	i2l348
  5907  0004A4  0A0D               	xorlw	13	; case 105
  5908  0004A6  B4D8               	btfsc	status,2,c
  5909  0004A8  D004               	goto	i2l348
  5910  0004AA  0A11               	xorlw	17	; case 120
  5911  0004AC  B4D8               	btfsc	status,2,c
  5912  0004AE  D7E8               	goto	i2l3885
  5913  0004B0  D103               	goto	i2l3987
  5914  0004B2                     i2l348:
  5915                           
  5916                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5917  0004B2  BE19               	btfsc	i2printf@flag,7,c
  5918  0004B4  D015               	goto	i2l3901
  5919                           
  5920                           ;doprnt.c: 1253: {
  5921                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5922  0004B6  C014  FFD9         	movff	i2printf@ap,fsr2l
  5923  0004BA  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  5924  0004BE  CFDE F017          	movff	postinc2,i2printf@val
  5925  0004C2  CFDD F018          	movff	postdec2,i2printf@val+1
  5926  0004C6  0E02               	movlw	2
  5927  0004C8  2614               	addwf	i2printf@ap,f,c
  5928  0004CA  0E00               	movlw	0
  5929  0004CC  2215               	addwfc	i2printf@ap+1,f,c
  5930                           
  5931                           ;doprnt.c: 1261: if((int)val < 0) {
  5932  0004CE  AE18               	btfss	i2printf@val+1,7,c
  5933  0004D0  D044               	goto	i2l3935
  5934                           
  5935                           ;doprnt.c: 1262: flag |= 0x03;
  5936  0004D2  0E03               	movlw	3
  5937  0004D4  1219               	iorwf	i2printf@flag,f,c
  5938                           
  5939                           ;doprnt.c: 1263: val = -val;
  5940  0004D6  6C17               	negf	i2printf@val,c
  5941  0004D8  1E18               	comf	i2printf@val+1,f,c
  5942  0004DA  B0D8               	btfsc	status,0,c
  5943  0004DC  2A18               	incf	i2printf@val+1,f,c
  5944                           
  5945                           ;doprnt.c: 1264: }
  5946                           ;doprnt.c: 1266: }
  5947  0004DE  D03D               	goto	i2l3935
  5948  0004E0                     i2l3901:
  5949                           
  5950                           ;doprnt.c: 1268: else
  5951                           ;doprnt.c: 1273: {
  5952                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5953  0004E0  C014  FFD9         	movff	i2printf@ap,fsr2l
  5954  0004E4  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  5955  0004E8  CFDE F017          	movff	postinc2,i2printf@val
  5956  0004EC  CFDD F018          	movff	postdec2,i2printf@val+1
  5957  0004F0  0E02               	movlw	2
  5958  0004F2  2614               	addwf	i2printf@ap,f,c
  5959  0004F4  0E00               	movlw	0
  5960  0004F6  2215               	addwfc	i2printf@ap+1,f,c
  5961                           
  5962                           ;doprnt.c: 1287: }
  5963                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5964  0004F8  D030               	goto	i2l3935
  5965  0004FA                     i2l3905:
  5966                           
  5967                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5968  0004FA  0E01               	movlw	1
  5969  0004FC  6E1C               	movwf	i2printf@c,c
  5970  0004FE                     i2l3907:
  5971  0004FE  0E05               	movlw	5
  5972  000500  181C               	xorwf	i2printf@c,w,c
  5973  000502  B4D8               	btfsc	status,2,c
  5974  000504  D032               	goto	i2l3937
  5975                           
  5976                           ;doprnt.c: 1306: if(val < dpowers[c])
  5977  000506  501C               	movf	i2printf@c,w,c
  5978  000508  0D02               	mullw	2
  5979  00050A  0E00               	movlw	low _dpowers
  5980  00050C  24F3               	addwf	prodl,w,c
  5981  00050E  6EF6               	movwf	tblptrl,c
  5982  000510  0EFE               	movlw	high _dpowers
  5983  000512  20F4               	addwfc	prodh,w,c
  5984  000514  6EF7               	movwf	tblptrh,c
  5985  000516                     	if	0	;There are less than 3 active tblptr bytes
  5986  000516                     	endif
  5987  000516  0009               	tblrd		*+
  5988  000518  50F5               	movf	tablat,w,c
  5989  00051A  5C17               	subwf	i2printf@val,w,c
  5990  00051C  0009               	tblrd		*+
  5991  00051E  50F5               	movf	tablat,w,c
  5992  000520  5818               	subwfb	i2printf@val+1,w,c
  5993  000522  A0D8               	btfss	status,0,c
  5994  000524  D022               	goto	i2l3937
  5995                           
  5996                           ;doprnt.c: 1307: break;
  5997  000526  2A1C               	incf	i2printf@c,f,c
  5998  000528  D7EA               	goto	i2l3907
  5999  00052A                     i2l3919:
  6000                           
  6001                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6002  00052A  0E01               	movlw	1
  6003  00052C  6E1C               	movwf	i2printf@c,c
  6004  00052E                     i2l3921:
  6005  00052E  0E04               	movlw	4
  6006  000530  181C               	xorwf	i2printf@c,w,c
  6007  000532  B4D8               	btfsc	status,2,c
  6008  000534  D01A               	goto	i2l3937
  6009                           
  6010                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6011  000536  501C               	movf	i2printf@c,w,c
  6012  000538  0D02               	mullw	2
  6013  00053A  0E0A               	movlw	low _hexpowers
  6014  00053C  24F3               	addwf	prodl,w,c
  6015  00053E  6EF6               	movwf	tblptrl,c
  6016  000540  0EFE               	movlw	high _hexpowers
  6017  000542  20F4               	addwfc	prodh,w,c
  6018  000544  6EF7               	movwf	tblptrh,c
  6019  000546                     	if	0	;There are less than 3 active tblptr bytes
  6020  000546                     	endif
  6021  000546  0009               	tblrd		*+
  6022  000548  50F5               	movf	tablat,w,c
  6023  00054A  5C17               	subwf	i2printf@val,w,c
  6024  00054C  0009               	tblrd		*+
  6025  00054E  50F5               	movf	tablat,w,c
  6026  000550  5818               	subwfb	i2printf@val+1,w,c
  6027  000552  A0D8               	btfss	status,0,c
  6028  000554  D00A               	goto	i2l3937
  6029                           
  6030                           ;doprnt.c: 1318: break;
  6031  000556  2A1C               	incf	i2printf@c,f,c
  6032  000558  D7EA               	goto	i2l3921
  6033  00055A                     i2l3935:
  6034  00055A  5019               	movf	i2printf@flag,w,c
  6035  00055C  0B80               	andlw	128
  6036                           
  6037                           ; Switch size 1, requested type "space"
  6038                           ; Number of cases is 2, Range of values is 0 to 128
  6039                           ; switch strategies available:
  6040                           ; Name         Instructions Cycles
  6041                           ; simple_byte            7     4 (average)
  6042                           ;	Chosen strategy is simple_byte
  6043  00055E  0A00               	xorlw	0	; case 0
  6044  000560  B4D8               	btfsc	status,2,c
  6045  000562  D7CB               	goto	i2l3905
  6046  000564  0A80               	xorlw	128	; case 128
  6047  000566  B4D8               	btfsc	status,2,c
  6048  000568  D7E0               	goto	i2l3919
  6049  00056A                     i2l3937:
  6050                           
  6051                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6052  00056A  501A               	movf	i2printf@width,w,c
  6053  00056C  101B               	iorwf	i2printf@width+1,w,c
  6054  00056E  B4D8               	btfsc	status,2,c
  6055  000570  D009               	goto	i2l3943
  6056  000572  C019  F00F         	movff	i2printf@flag,??i2_printf
  6057  000576  0E03               	movlw	3
  6058  000578  160F               	andwf	??i2_printf,f,c
  6059  00057A  B4D8               	btfsc	status,2,c
  6060  00057C  D003               	goto	i2l3943
  6061                           
  6062                           ;doprnt.c: 1346: width--;
  6063  00057E  061A               	decf	i2printf@width,f,c
  6064  000580  A0D8               	btfss	status,0,c
  6065  000582  061B               	decf	i2printf@width+1,f,c
  6066  000584                     i2l3943:
  6067                           
  6068                           ;doprnt.c: 1381: if(width > c)
  6069  000584  0E80               	movlw	128
  6070  000586  BE1C               	btfsc	i2printf@c,7,c
  6071  000588  0E7F               	movlw	127
  6072  00058A  6E0F               	movwf	??i2_printf& (0+255),c
  6073  00058C  501A               	movf	i2printf@width,w,c
  6074  00058E  5C1C               	subwf	i2printf@c,w,c
  6075  000590  501B               	movf	i2printf@width+1,w,c
  6076  000592  0A80               	xorlw	128
  6077  000594  580F               	subwfb	??i2_printf& (0+255),w,c
  6078  000596  B0D8               	btfsc	status,0,c
  6079  000598  D007               	goto	i2l3947
  6080                           
  6081                           ;doprnt.c: 1382: width -= c;
  6082  00059A  501C               	movf	i2printf@c,w,c
  6083  00059C  5E1A               	subwf	i2printf@width,f,c
  6084  00059E  0E00               	movlw	0
  6085  0005A0  BE1C               	btfsc	i2printf@c,7,c
  6086  0005A2  0EFF               	movlw	255
  6087  0005A4  5A1B               	subwfb	i2printf@width+1,f,c
  6088  0005A6  D004               	goto	i2l3949
  6089  0005A8                     i2l3947:
  6090                           
  6091                           ;doprnt.c: 1383: else
  6092                           ;doprnt.c: 1384: width = 0;
  6093  0005A8  0E00               	movlw	0
  6094  0005AA  6E1B               	movwf	i2printf@width+1,c
  6095  0005AC  0E00               	movlw	0
  6096  0005AE  6E1A               	movwf	i2printf@width,c
  6097  0005B0                     i2l3949:
  6098                           
  6099                           ;doprnt.c: 1387: if(flag & 0x04) {
  6100  0005B0  A419               	btfss	i2printf@flag,2,c
  6101  0005B2  D014               	goto	i2l3961
  6102                           
  6103                           ;doprnt.c: 1392: if(flag & 0x03)
  6104  0005B4  C019  F00F         	movff	i2printf@flag,??i2_printf
  6105  0005B8  0E03               	movlw	3
  6106  0005BA  160F               	andwf	??i2_printf,f,c
  6107  0005BC  B4D8               	btfsc	status,2,c
  6108  0005BE  D003               	goto	i2l3955
  6109                           
  6110                           ;doprnt.c: 1393: (putch('-') );
  6111  0005C0  0E2D               	movlw	45
  6112  0005C2  EC36  F012         	call	i2_putch
  6113  0005C6                     i2l3955:
  6114                           
  6115                           ;doprnt.c: 1415: if(width)
  6116  0005C6  501A               	movf	i2printf@width,w,c
  6117  0005C8  101B               	iorwf	i2printf@width+1,w,c
  6118  0005CA  B4D8               	btfsc	status,2,c
  6119  0005CC  D01E               	goto	i2l3971
  6120                           
  6121                           ;doprnt.c: 1417: (putch('0') );
  6122                           
  6123                           ;doprnt.c: 1416: do
  6124  0005CE  0E30               	movlw	48
  6125  0005D0  EC36  F012         	call	i2_putch
  6126                           
  6127                           ;doprnt.c: 1418: while(--width);
  6128  0005D4  061A               	decf	i2printf@width,f,c
  6129  0005D6  A0D8               	btfss	status,0,c
  6130  0005D8  061B               	decf	i2printf@width+1,f,c
  6131  0005DA  D7F5               	goto	i2l3955
  6132  0005DC                     i2l3961:
  6133                           
  6134                           ;doprnt.c: 1422: {
  6135                           ;doprnt.c: 1424: if(width
  6136                           ;doprnt.c: 1428: )
  6137  0005DC  501A               	movf	i2printf@width,w,c
  6138  0005DE  101B               	iorwf	i2printf@width+1,w,c
  6139  0005E0  B4D8               	btfsc	status,2,c
  6140  0005E2  D00A               	goto	i2l3967
  6141  0005E4                     i2l3963:
  6142                           
  6143                           ;doprnt.c: 1430: (putch(' ') );
  6144  0005E4  0E20               	movlw	32
  6145  0005E6  EC36  F012         	call	i2_putch
  6146                           
  6147                           ;doprnt.c: 1431: while(--width);
  6148  0005EA  061A               	decf	i2printf@width,f,c
  6149  0005EC  A0D8               	btfss	status,0,c
  6150  0005EE  061B               	decf	i2printf@width+1,f,c
  6151  0005F0  501A               	movf	i2printf@width,w,c
  6152  0005F2  101B               	iorwf	i2printf@width+1,w,c
  6153  0005F4  A4D8               	btfss	status,2,c
  6154  0005F6  D7F6               	goto	i2l3963
  6155  0005F8                     i2l3967:
  6156                           
  6157                           ;doprnt.c: 1438: if(flag & 0x03)
  6158  0005F8  C019  F00F         	movff	i2printf@flag,??i2_printf
  6159  0005FC  0E03               	movlw	3
  6160  0005FE  160F               	andwf	??i2_printf,f,c
  6161  000600  B4D8               	btfsc	status,2,c
  6162  000602  D003               	goto	i2l3971
  6163                           
  6164                           ;doprnt.c: 1439: (putch('-') );
  6165  000604  0E2D               	movlw	45
  6166  000606  EC36  F012         	call	i2_putch
  6167  00060A                     i2l3971:
  6168                           
  6169                           ;doprnt.c: 1469: }
  6170                           ;doprnt.c: 1472: prec = c;
  6171  00060A  C01C  F016         	movff	i2printf@c,i2printf@prec
  6172                           
  6173                           ;doprnt.c: 1474: while(prec--) {
  6174  00060E  D050               	goto	i2l3985
  6175  000610                     i2l3973:
  6176                           
  6177                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6178  000610  5016               	movf	i2printf@prec,w,c
  6179  000612  0D02               	mullw	2
  6180  000614  0E00               	movlw	low _dpowers
  6181  000616  24F3               	addwf	prodl,w,c
  6182  000618  6EF6               	movwf	tblptrl,c
  6183  00061A  0EFE               	movlw	high _dpowers
  6184  00061C  20F4               	addwfc	prodh,w,c
  6185  00061E  6EF7               	movwf	tblptrh,c
  6186  000620                     	if	0	;There are less than 3 active tblptr bytes
  6187  000620                     	endif
  6188  000620  0009               	tblrd		*+
  6189  000622  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6190  000626  000A               	tblrd		*-
  6191  000628  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6192  00062C  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6193  000630  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6194  000634  EC36  F010         	call	i2___lwdiv	;wreg free
  6195  000638  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  6196  00063C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  6197  000640  0E00               	movlw	0
  6198  000642  6E0B               	movwf	i2___lwmod@divisor+1,c
  6199  000644  0E0A               	movlw	10
  6200  000646  6E0A               	movwf	i2___lwmod@divisor,c
  6201  000648  ECAE  F010         	call	i2___lwmod	;wreg free
  6202  00064C  5008               	movf	?i2___lwmod,w,c
  6203  00064E  0F30               	addlw	48
  6204  000650  6E1C               	movwf	i2printf@c,c
  6205                           
  6206                           ;doprnt.c: 1491: break;
  6207  000652  D02B               	goto	i2l3983
  6208  000654                     i2l3975:
  6209                           
  6210                           ;doprnt.c: 1499: {
  6211                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6212  000654  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6213  000658  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6214  00065C  5016               	movf	i2printf@prec,w,c
  6215  00065E  0D02               	mullw	2
  6216  000660  0E0A               	movlw	low _hexpowers
  6217  000662  24F3               	addwf	prodl,w,c
  6218  000664  6EF6               	movwf	tblptrl,c
  6219  000666  0EFE               	movlw	high _hexpowers
  6220  000668  20F4               	addwfc	prodh,w,c
  6221  00066A  6EF7               	movwf	tblptrh,c
  6222  00066C                     	if	0	;There are less than 3 active tblptr bytes
  6223  00066C                     	endif
  6224  00066C  0009               	tblrd		*+
  6225  00066E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6226  000672  000A               	tblrd		*-
  6227  000674  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6228  000678  EC36  F010         	call	i2___lwdiv	;wreg free
  6229  00067C  5001               	movf	?i2___lwdiv,w,c
  6230  00067E  0B0F               	andlw	15
  6231  000680  6E13               	movwf	i2printf@idx,c
  6232                           
  6233                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6234  000682  5013               	movf	i2printf@idx,w,c
  6235  000684  0D01               	mullw	1
  6236  000686  0EF1               	movlw	low STR_24
  6237  000688  24F3               	addwf	prodl,w,c
  6238  00068A  6EF6               	movwf	tblptrl,c
  6239  00068C  0EFE               	movlw	high STR_24
  6240  00068E  20F4               	addwfc	prodh,w,c
  6241  000690  6EF7               	movwf	tblptrh,c
  6242  000692                     	if	0	;There are less than 3 active tblptr bytes
  6243  000692                     	endif
  6244  000692  0008               	tblrd		*
  6245  000694  CFF5 F01C          	movff	tablat,i2printf@c
  6246                           
  6247                           ;doprnt.c: 1523: }
  6248                           
  6249                           ;doprnt.c: 1508: }
  6250                           ;doprnt.c: 1510: break;
  6251  000698  D008               	goto	i2l3983
  6252  00069A                     i2l3981:
  6253  00069A  5019               	movf	i2printf@flag,w,c
  6254  00069C  0B80               	andlw	128
  6255                           
  6256                           ; Switch size 1, requested type "space"
  6257                           ; Number of cases is 2, Range of values is 0 to 128
  6258                           ; switch strategies available:
  6259                           ; Name         Instructions Cycles
  6260                           ; simple_byte            7     4 (average)
  6261                           ;	Chosen strategy is simple_byte
  6262  00069E  0A00               	xorlw	0	; case 0
  6263  0006A0  B4D8               	btfsc	status,2,c
  6264  0006A2  D7B6               	goto	i2l3973
  6265  0006A4  0A80               	xorlw	128	; case 128
  6266  0006A6  B4D8               	btfsc	status,2,c
  6267  0006A8  D7D5               	goto	i2l3975
  6268  0006AA                     i2l3983:
  6269                           
  6270                           ;doprnt.c: 1524: (putch(c) );
  6271  0006AA  501C               	movf	i2printf@c,w,c
  6272  0006AC  EC36  F012         	call	i2_putch
  6273  0006B0                     i2l3985:
  6274  0006B0  0616               	decf	i2printf@prec,f,c
  6275  0006B2  2816               	incf	i2printf@prec,w,c
  6276  0006B4  A4D8               	btfss	status,2,c
  6277  0006B6  D7F1               	goto	i2l3981
  6278  0006B8                     i2l3987:
  6279  0006B8  C00D  FFF6         	movff	i2printf@f,tblptrl
  6280  0006BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6281  0006C0  4A0D               	infsnz	i2printf@f,f,c
  6282  0006C2  2A0E               	incf	i2printf@f+1,f,c
  6283  0006C4                     	if	0	;tblptru may be non-zero
  6284  0006C4                     	endif
  6285  0006C4                     	if	0	;tblptru may be non-zero
  6286  0006C4                     	endif
  6287  0006C4  0008               	tblrd		*
  6288  0006C6  CFF5 F01C          	movff	tablat,i2printf@c
  6289  0006CA  501C               	movf	i2printf@c,w,c
  6290  0006CC  B4D8               	btfsc	status,2,c
  6291  0006CE  0012               	return	
  6292  0006D0  D67F               	goto	i2l3861
  6293  0006D2                     __end_ofi2_printf:
  6294                           	opt stack 0
  6295                           pclatu	equ	0xFFB
  6296                           pclath	equ	0xFFA
  6297                           tblptru	equ	0xFF8
  6298                           tblptrh	equ	0xFF7
  6299                           tblptrl	equ	0xFF6
  6300                           tablat	equ	0xFF5
  6301                           prodh	equ	0xFF4
  6302                           prodl	equ	0xFF3
  6303                           intcon	equ	0xFF2
  6304                           intcon2	equ	0xFF1
  6305                           intcon3	equ	0xFF0
  6306                           postinc0	equ	0xFEE
  6307                           fsr0h	equ	0xFEA
  6308                           fsr0l	equ	0xFE9
  6309                           wreg	equ	0xFE8
  6310                           fsr1h	equ	0xFE2
  6311                           fsr1l	equ	0xFE1
  6312                           indf2	equ	0xFDF
  6313                           postinc2	equ	0xFDE
  6314                           postdec2	equ	0xFDD
  6315                           fsr2h	equ	0xFDA
  6316                           fsr2l	equ	0xFD9
  6317                           status	equ	0xFD8
  6318                           
  6319 ;; *************** function i2_putch *****************
  6320 ;; Defined at:
  6321 ;;		line 31 in file "lcd.c"
  6322 ;; Parameters:    Size  Location     Type
  6323 ;;  data            1    wreg     unsigned char 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;  data            1    2[COMRAM] unsigned char 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      void 
  6328 ;; Registers used:
  6329 ;;		wreg, status,2, status,0, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;Total ram usage:        1 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    1
  6342 ;; This function calls:
  6343 ;;		i2_lcdNibble
  6344 ;; This function is called by:
  6345 ;;		i2_printf
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           	psect	text27
  6350  00246C                     __ptext27:
  6351                           	opt stack 0
  6352  00246C                     i2_putch:
  6353                           	opt stack 23
  6354                           
  6355                           ;incstack = 0
  6356                           ;i2putch@data stored from wreg
  6357  00246C  6E03               	movwf	i2putch@data,c
  6358                           
  6359                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  6360  00246E  848C               	bsf	3980,2,c	;volatile
  6361                           
  6362                           ;lcd.c: 33: lcdNibble(data);
  6363  002470  5003               	movf	i2putch@data,w,c
  6364  002472  EC87  F010         	call	i2_lcdNibble
  6365  002476  0012               	return		;funcret
  6366  002478                     __end_ofi2_putch:
  6367                           	opt stack 0
  6368                           pclatu	equ	0xFFB
  6369                           pclath	equ	0xFFA
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           intcon2	equ	0xFF1
  6378                           intcon3	equ	0xFF0
  6379                           postinc0	equ	0xFEE
  6380                           fsr0h	equ	0xFEA
  6381                           fsr0l	equ	0xFE9
  6382                           wreg	equ	0xFE8
  6383                           fsr1h	equ	0xFE2
  6384                           fsr1l	equ	0xFE1
  6385                           indf2	equ	0xFDF
  6386                           postinc2	equ	0xFDE
  6387                           postdec2	equ	0xFDD
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8
  6391                           
  6392 ;; *************** function i2_isdigit *****************
  6393 ;; Defined at:
  6394 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;  c               1    wreg     unsigned char 
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;  c               1    2[COMRAM] unsigned char 
  6399 ;; Return value:  Size  Location     Type
  6400 ;;		None               void
  6401 ;; Registers used:
  6402 ;;		wreg, status,2, status,0
  6403 ;; Tracked objects:
  6404 ;;		On entry : 0/0
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: 0/0
  6407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;Total ram usage:        3 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; This function calls:
  6415 ;;		Nothing
  6416 ;; This function is called by:
  6417 ;;		i2_printf
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text28
  6422  0023BE                     __ptext28:
  6423                           	opt stack 0
  6424  0023BE                     i2_isdigit:
  6425                           	opt stack 24
  6426                           
  6427                           ;incstack = 0
  6428                           ;i2isdigit@c stored from wreg
  6429  0023BE  6E03               	movwf	i2isdigit@c,c
  6430  0023C0  0E00               	movlw	0
  6431  0023C2  6E02               	movwf	i2_isdigit$777,c
  6432  0023C4  0E3A               	movlw	58
  6433  0023C6  6003               	cpfslt	i2isdigit@c,c
  6434  0023C8  D005               	goto	i2l3587
  6435  0023CA  0E2F               	movlw	47
  6436  0023CC  6403               	cpfsgt	i2isdigit@c,c
  6437  0023CE  D002               	goto	i2l3587
  6438  0023D0  0E01               	movlw	1
  6439  0023D2  6E02               	movwf	i2_isdigit$777,c
  6440  0023D4                     i2l3587:
  6441  0023D4  C002  F001         	movff	i2_isdigit$777,??i2_isdigit
  6442  0023D8  3001               	rrcf	??i2_isdigit,w,c
  6443  0023DA  0012               	return	
  6444  0023DC                     __end_ofi2_isdigit:
  6445                           	opt stack 0
  6446                           pclatu	equ	0xFFB
  6447                           pclath	equ	0xFFA
  6448                           tblptru	equ	0xFF8
  6449                           tblptrh	equ	0xFF7
  6450                           tblptrl	equ	0xFF6
  6451                           tablat	equ	0xFF5
  6452                           prodh	equ	0xFF4
  6453                           prodl	equ	0xFF3
  6454                           intcon	equ	0xFF2
  6455                           intcon2	equ	0xFF1
  6456                           intcon3	equ	0xFF0
  6457                           postinc0	equ	0xFEE
  6458                           fsr0h	equ	0xFEA
  6459                           fsr0l	equ	0xFE9
  6460                           wreg	equ	0xFE8
  6461                           fsr1h	equ	0xFE2
  6462                           fsr1l	equ	0xFE1
  6463                           indf2	equ	0xFDF
  6464                           postinc2	equ	0xFDE
  6465                           postdec2	equ	0xFDD
  6466                           fsr2h	equ	0xFDA
  6467                           fsr2l	equ	0xFD9
  6468                           status	equ	0xFD8
  6469                           
  6470 ;; *************** function i2___lwmod *****************
  6471 ;; Defined at:
  6472 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;  dividend        2    7[COMRAM] unsigned int 
  6475 ;;  divisor         2    9[COMRAM] unsigned int 
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;  __lwmod         1   11[COMRAM] unsigned char 
  6478 ;; Return value:  Size  Location     Type
  6479 ;;                  2    7[COMRAM] unsigned int 
  6480 ;; Registers used:
  6481 ;;		wreg, status,2, status,0
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;Total ram usage:        5 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; This function calls:
  6494 ;;		Nothing
  6495 ;; This function is called by:
  6496 ;;		i2_printf
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text29
  6501  00215C                     __ptext29:
  6502                           	opt stack 0
  6503  00215C                     i2___lwmod:
  6504                           	opt stack 24
  6505                           
  6506                           ;incstack = 0
  6507  00215C  500A               	movf	i2___lwmod@divisor,w,c
  6508  00215E  100B               	iorwf	i2___lwmod@divisor+1,w,c
  6509  002160  B4D8               	btfsc	status,2,c
  6510  002162  D018               	goto	i2l803
  6511  002164  0E01               	movlw	1
  6512  002166  6E0C               	movwf	i2___lwmod@counter,c
  6513  002168  D004               	goto	i2l3619
  6514  00216A                     i2l3617:
  6515  00216A  90D8               	bcf	status,0,c
  6516  00216C  360A               	rlcf	i2___lwmod@divisor,f,c
  6517  00216E  360B               	rlcf	i2___lwmod@divisor+1,f,c
  6518  002170  2A0C               	incf	i2___lwmod@counter,f,c
  6519  002172                     i2l3619:
  6520  002172  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  6521  002174  D7FA               	goto	i2l3617
  6522  002176                     i2l3621:
  6523  002176  500A               	movf	i2___lwmod@divisor,w,c
  6524  002178  5C08               	subwf	i2___lwmod@dividend,w,c
  6525  00217A  500B               	movf	i2___lwmod@divisor+1,w,c
  6526  00217C  5809               	subwfb	i2___lwmod@dividend+1,w,c
  6527  00217E  A0D8               	btfss	status,0,c
  6528  002180  D004               	goto	i2l3625
  6529  002182  500A               	movf	i2___lwmod@divisor,w,c
  6530  002184  5E08               	subwf	i2___lwmod@dividend,f,c
  6531  002186  500B               	movf	i2___lwmod@divisor+1,w,c
  6532  002188  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  6533  00218A                     i2l3625:
  6534  00218A  90D8               	bcf	status,0,c
  6535  00218C  320B               	rrcf	i2___lwmod@divisor+1,f,c
  6536  00218E  320A               	rrcf	i2___lwmod@divisor,f,c
  6537  002190  2E0C               	decfsz	i2___lwmod@counter,f,c
  6538  002192  D7F1               	goto	i2l3621
  6539  002194                     i2l803:
  6540  002194  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  6541  002198  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  6542  00219C  0012               	return		;funcret
  6543  00219E                     __end_ofi2___lwmod:
  6544                           	opt stack 0
  6545                           pclatu	equ	0xFFB
  6546                           pclath	equ	0xFFA
  6547                           tblptru	equ	0xFF8
  6548                           tblptrh	equ	0xFF7
  6549                           tblptrl	equ	0xFF6
  6550                           tablat	equ	0xFF5
  6551                           prodh	equ	0xFF4
  6552                           prodl	equ	0xFF3
  6553                           intcon	equ	0xFF2
  6554                           intcon2	equ	0xFF1
  6555                           intcon3	equ	0xFF0
  6556                           postinc0	equ	0xFEE
  6557                           fsr0h	equ	0xFEA
  6558                           fsr0l	equ	0xFE9
  6559                           wreg	equ	0xFE8
  6560                           fsr1h	equ	0xFE2
  6561                           fsr1l	equ	0xFE1
  6562                           indf2	equ	0xFDF
  6563                           postinc2	equ	0xFDE
  6564                           postdec2	equ	0xFDD
  6565                           fsr2h	equ	0xFDA
  6566                           fsr2l	equ	0xFD9
  6567                           status	equ	0xFD8
  6568                           
  6569 ;; *************** function i2___lwdiv *****************
  6570 ;; Defined at:
  6571 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  dividend        2    0[COMRAM] unsigned int 
  6574 ;;  divisor         2    2[COMRAM] unsigned int 
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  6577 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  6578 ;; Return value:  Size  Location     Type
  6579 ;;                  2    0[COMRAM] unsigned int 
  6580 ;; Registers used:
  6581 ;;		wreg, status,2, status,0
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6590 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6591 ;;Total ram usage:        7 bytes
  6592 ;; Hardware stack levels used:    1
  6593 ;; This function calls:
  6594 ;;		Nothing
  6595 ;; This function is called by:
  6596 ;;		i2_printf
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           	psect	text30
  6601  00206C                     __ptext30:
  6602                           	opt stack 0
  6603  00206C                     i2___lwdiv:
  6604                           	opt stack 24
  6605                           
  6606                           ;incstack = 0
  6607  00206C  0E00               	movlw	0
  6608  00206E  6E06               	movwf	i2___lwdiv@quotient+1,c
  6609  002070  0E00               	movlw	0
  6610  002072  6E05               	movwf	i2___lwdiv@quotient,c
  6611  002074  5003               	movf	i2___lwdiv@divisor,w,c
  6612  002076  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  6613  002078  B4D8               	btfsc	status,2,c
  6614  00207A  D01C               	goto	i2l793
  6615  00207C  0E01               	movlw	1
  6616  00207E  6E07               	movwf	i2___lwdiv@counter,c
  6617  002080  D004               	goto	i2l3599
  6618  002082                     i2l3597:
  6619  002082  90D8               	bcf	status,0,c
  6620  002084  3603               	rlcf	i2___lwdiv@divisor,f,c
  6621  002086  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  6622  002088  2A07               	incf	i2___lwdiv@counter,f,c
  6623  00208A                     i2l3599:
  6624  00208A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  6625  00208C  D7FA               	goto	i2l3597
  6626  00208E                     i2l3601:
  6627  00208E  90D8               	bcf	status,0,c
  6628  002090  3605               	rlcf	i2___lwdiv@quotient,f,c
  6629  002092  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  6630  002094  5003               	movf	i2___lwdiv@divisor,w,c
  6631  002096  5C01               	subwf	i2___lwdiv@dividend,w,c
  6632  002098  5004               	movf	i2___lwdiv@divisor+1,w,c
  6633  00209A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  6634  00209C  A0D8               	btfss	status,0,c
  6635  00209E  D005               	goto	i2l3609
  6636  0020A0  5003               	movf	i2___lwdiv@divisor,w,c
  6637  0020A2  5E01               	subwf	i2___lwdiv@dividend,f,c
  6638  0020A4  5004               	movf	i2___lwdiv@divisor+1,w,c
  6639  0020A6  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  6640  0020A8  8005               	bsf	i2___lwdiv@quotient,0,c
  6641  0020AA                     i2l3609:
  6642  0020AA  90D8               	bcf	status,0,c
  6643  0020AC  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  6644  0020AE  3203               	rrcf	i2___lwdiv@divisor,f,c
  6645  0020B0  2E07               	decfsz	i2___lwdiv@counter,f,c
  6646  0020B2  D7ED               	goto	i2l3601
  6647  0020B4                     i2l793:
  6648  0020B4  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  6649  0020B8  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  6650  0020BC  0012               	return		;funcret
  6651  0020BE                     __end_ofi2___lwdiv:
  6652                           	opt stack 0
  6653                           pclatu	equ	0xFFB
  6654                           pclath	equ	0xFFA
  6655                           tblptru	equ	0xFF8
  6656                           tblptrh	equ	0xFF7
  6657                           tblptrl	equ	0xFF6
  6658                           tablat	equ	0xFF5
  6659                           prodh	equ	0xFF4
  6660                           prodl	equ	0xFF3
  6661                           intcon	equ	0xFF2
  6662                           intcon2	equ	0xFF1
  6663                           intcon3	equ	0xFF0
  6664                           postinc0	equ	0xFEE
  6665                           fsr0h	equ	0xFEA
  6666                           fsr0l	equ	0xFE9
  6667                           wreg	equ	0xFE8
  6668                           fsr1h	equ	0xFE2
  6669                           fsr1l	equ	0xFE1
  6670                           indf2	equ	0xFDF
  6671                           postinc2	equ	0xFDE
  6672                           postdec2	equ	0xFDD
  6673                           fsr2h	equ	0xFDA
  6674                           fsr2l	equ	0xFD9
  6675                           status	equ	0xFD8
  6676                           
  6677 ;; *************** function i2_lcdInst *****************
  6678 ;; Defined at:
  6679 ;;		line 26 in file "lcd.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;  data            1    wreg     unsigned char 
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;  data            1    2[COMRAM] unsigned char 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  1    wreg      void 
  6686 ;; Registers used:
  6687 ;;		wreg, status,2, status,0, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;Total ram usage:        1 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:    1
  6700 ;; This function calls:
  6701 ;;		i2_lcdNibble
  6702 ;; This function is called by:
  6703 ;;		_isr
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	text31
  6708  002478                     __ptext31:
  6709                           	opt stack 0
  6710  002478                     i2_lcdInst:
  6711                           	opt stack 24
  6712                           
  6713                           ;incstack = 0
  6714                           ;i2lcdInst@data stored from wreg
  6715  002478  6E03               	movwf	i2lcdInst@data,c
  6716                           
  6717                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  6718  00247A  948C               	bcf	3980,2,c	;volatile
  6719                           
  6720                           ;lcd.c: 28: lcdNibble(data);
  6721  00247C  5003               	movf	i2lcdInst@data,w,c
  6722  00247E  EC87  F010         	call	i2_lcdNibble
  6723  002482  0012               	return		;funcret
  6724  002484                     __end_ofi2_lcdInst:
  6725                           	opt stack 0
  6726                           pclatu	equ	0xFFB
  6727                           pclath	equ	0xFFA
  6728                           tblptru	equ	0xFF8
  6729                           tblptrh	equ	0xFF7
  6730                           tblptrl	equ	0xFF6
  6731                           tablat	equ	0xFF5
  6732                           prodh	equ	0xFF4
  6733                           prodl	equ	0xFF3
  6734                           intcon	equ	0xFF2
  6735                           intcon2	equ	0xFF1
  6736                           intcon3	equ	0xFF0
  6737                           postinc0	equ	0xFEE
  6738                           fsr0h	equ	0xFEA
  6739                           fsr0l	equ	0xFE9
  6740                           wreg	equ	0xFE8
  6741                           fsr1h	equ	0xFE2
  6742                           fsr1l	equ	0xFE1
  6743                           indf2	equ	0xFDF
  6744                           postinc2	equ	0xFDE
  6745                           postdec2	equ	0xFDD
  6746                           fsr2h	equ	0xFDA
  6747                           fsr2l	equ	0xFD9
  6748                           status	equ	0xFD8
  6749                           
  6750 ;; *************** function i2_lcdNibble *****************
  6751 ;; Defined at:
  6752 ;;		line 36 in file "lcd.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;  data            1    wreg     unsigned char 
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  data            1    1[COMRAM] unsigned char 
  6757 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  1    wreg      void 
  6760 ;; Registers used:
  6761 ;;		wreg, status,2, status,0
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;Total ram usage:        2 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; This function calls:
  6774 ;;		Nothing
  6775 ;; This function is called by:
  6776 ;;		i2_lcdInst
  6777 ;;		i2_putch
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           	psect	text32
  6782  00210E                     __ptext32:
  6783                           	opt stack 0
  6784  00210E                     i2_lcdNibble:
  6785                           	opt stack 23
  6786                           
  6787                           ;incstack = 0
  6788                           ;i2lcdNibble@data stored from wreg
  6789  00210E  6E02               	movwf	i2lcdNibble@data,c
  6790                           
  6791                           ;lcd.c: 38: char temp = data & 0xF0;
  6792  002110  5002               	movf	i2lcdNibble@data,w,c
  6793  002112  0BF0               	andlw	240
  6794  002114  6E01               	movwf	i2lcdNibble@temp,c
  6795                           
  6796                           ;lcd.c: 39: LATD = LATD & 0x0F;
  6797  002116  508C               	movf	3980,w,c	;volatile
  6798  002118  0B0F               	andlw	15
  6799  00211A  6E8C               	movwf	3980,c	;volatile
  6800                           
  6801                           ;lcd.c: 40: LATD = temp | LATD;
  6802  00211C  5001               	movf	i2lcdNibble@temp,w,c
  6803  00211E  108C               	iorwf	3980,w,c	;volatile
  6804  002120  6E8C               	movwf	3980,c	;volatile
  6805                           
  6806                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  6807  002122  968C               	bcf	3980,3,c	;volatile
  6808                           
  6809                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6810  002124  0E19               	movlw	25
  6811  002126                     i2u388_47:
  6812  002126  2EE8               	decfsz	wreg,f,c
  6813  002128  D7FE               	bra	i2u388_47
  6814                           
  6815                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  6816  00212A  868C               	bsf	3980,3,c	;volatile
  6817                           
  6818                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6819  00212C  0E19               	movlw	25
  6820  00212E                     i2u389_47:
  6821  00212E  2EE8               	decfsz	wreg,f,c
  6822  002130  D7FE               	bra	i2u389_47
  6823                           
  6824                           ;lcd.c: 47: data = data << 4;
  6825  002132  3802               	swapf	i2lcdNibble@data,w,c
  6826  002134  0BF0               	andlw	240
  6827  002136  6E02               	movwf	i2lcdNibble@data,c
  6828                           
  6829                           ;lcd.c: 49: temp = data & 0xF0;
  6830  002138  5002               	movf	i2lcdNibble@data,w,c
  6831  00213A  0BF0               	andlw	240
  6832  00213C  6E01               	movwf	i2lcdNibble@temp,c
  6833                           
  6834                           ;lcd.c: 50: LATD = LATD & 0x0F;
  6835  00213E  508C               	movf	3980,w,c	;volatile
  6836  002140  0B0F               	andlw	15
  6837  002142  6E8C               	movwf	3980,c	;volatile
  6838                           
  6839                           ;lcd.c: 51: LATD = temp | LATD;
  6840  002144  5001               	movf	i2lcdNibble@temp,w,c
  6841  002146  108C               	iorwf	3980,w,c	;volatile
  6842  002148  6E8C               	movwf	3980,c	;volatile
  6843                           
  6844                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  6845  00214A  968C               	bcf	3980,3,c	;volatile
  6846                           
  6847                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6848  00214C  0E19               	movlw	25
  6849  00214E                     i2u390_47:
  6850  00214E  2EE8               	decfsz	wreg,f,c
  6851  002150  D7FE               	bra	i2u390_47
  6852                           
  6853                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  6854  002152  868C               	bsf	3980,3,c	;volatile
  6855                           
  6856                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6857  002154  0E19               	movlw	25
  6858  002156                     i2u391_47:
  6859  002156  2EE8               	decfsz	wreg,f,c
  6860  002158  D7FE               	bra	i2u391_47
  6861  00215A  0012               	return		;funcret
  6862  00215C                     __end_ofi2_lcdNibble:
  6863                           	opt stack 0
  6864                           pclatu	equ	0xFFB
  6865                           pclath	equ	0xFFA
  6866                           tblptru	equ	0xFF8
  6867                           tblptrh	equ	0xFF7
  6868                           tblptrl	equ	0xFF6
  6869                           tablat	equ	0xFF5
  6870                           prodh	equ	0xFF4
  6871                           prodl	equ	0xFF3
  6872                           intcon	equ	0xFF2
  6873                           intcon2	equ	0xFF1
  6874                           intcon3	equ	0xFF0
  6875                           postinc0	equ	0xFEE
  6876                           fsr0h	equ	0xFEA
  6877                           fsr0l	equ	0xFE9
  6878                           wreg	equ	0xFE8
  6879                           fsr1h	equ	0xFE2
  6880                           fsr1l	equ	0xFE1
  6881                           indf2	equ	0xFDF
  6882                           postinc2	equ	0xFDE
  6883                           postdec2	equ	0xFDD
  6884                           fsr2h	equ	0xFDA
  6885                           fsr2l	equ	0xFD9
  6886                           status	equ	0xFD8
  6887                           
  6888 ;; *************** function _test *****************
  6889 ;; Defined at:
  6890 ;;		line 390 in file "main.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;		None
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;		None
  6895 ;; Return value:  Size  Location     Type
  6896 ;;                  1    wreg      void 
  6897 ;; Registers used:
  6898 ;;		wreg, status,2, status,0
  6899 ;; Tracked objects:
  6900 ;;		On entry : 0/0
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6906 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6907 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6908 ;;Total ram usage:        1 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; This function calls:
  6911 ;;		Nothing
  6912 ;; This function is called by:
  6913 ;;		_isr
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           	psect	text33
  6918  00240E                     __ptext33:
  6919                           	opt stack 0
  6920  00240E                     _test:
  6921                           	opt stack 25
  6922                           
  6923                           ;main.c: 391: PORTAbits.RA0 = !PORTAbits.RA0;
  6924                           
  6925                           ;incstack = 0
  6926  00240E  B080               	btfsc	3968,0,c	;volatile
  6927  002410  D003               	goto	i2u348_40
  6928  002412  6A01               	clrf	??_test& (0+255),c
  6929  002414  2A01               	incf	??_test& (0+255),f,c
  6930  002416  D001               	goto	i2u349_48
  6931  002418                     i2u348_40:
  6932  002418  6A01               	clrf	??_test& (0+255),c
  6933  00241A                     i2u349_48:
  6934  00241A  5080               	movf	3968,w,c	;volatile
  6935  00241C  1801               	xorwf	??_test,w,c
  6936  00241E  0BFE               	andlw	-2
  6937  002420  1801               	xorwf	??_test,w,c
  6938  002422  6E80               	movwf	3968,c	;volatile
  6939  002424  0012               	return	
  6940  002426                     __end_of_test:
  6941                           	opt stack 0
  6942                           pclatu	equ	0xFFB
  6943                           pclath	equ	0xFFA
  6944                           tblptru	equ	0xFF8
  6945                           tblptrh	equ	0xFF7
  6946                           tblptrl	equ	0xFF6
  6947                           tablat	equ	0xFF5
  6948                           prodh	equ	0xFF4
  6949                           prodl	equ	0xFF3
  6950                           intcon	equ	0xFF2
  6951                           intcon2	equ	0xFF1
  6952                           intcon3	equ	0xFF0
  6953                           postinc0	equ	0xFEE
  6954                           fsr0h	equ	0xFEA
  6955                           fsr0l	equ	0xFE9
  6956                           wreg	equ	0xFE8
  6957                           fsr1h	equ	0xFE2
  6958                           fsr1l	equ	0xFE1
  6959                           indf2	equ	0xFDF
  6960                           postinc2	equ	0xFDE
  6961                           postdec2	equ	0xFDD
  6962                           fsr2h	equ	0xFDA
  6963                           fsr2l	equ	0xFD9
  6964                           status	equ	0xFD8
  6965                           
  6966 ;; *************** function _servo_rotate *****************
  6967 ;; Defined at:
  6968 ;;		line 367 in file "main.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;  degree          2    0[COMRAM] int 
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  i               2    4[COMRAM] unsigned int 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  1    wreg      void 
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;Total ram usage:        6 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; This function calls:
  6989 ;;		Nothing
  6990 ;; This function is called by:
  6991 ;;		_isr
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text34
  6996  001A16                     __ptext34:
  6997                           	opt stack 0
  6998  001A16                     _servo_rotate:
  6999                           	opt stack 25
  7000                           
  7001                           ;main.c: 368: unsigned int i;
  7002                           ;main.c: 369: switch(degree){
  7003                           
  7004                           ;incstack = 0
  7005  001A16  D03C               	goto	i2l3841
  7006  001A18                     i2l3815:
  7007                           
  7008                           ;main.c: 371: for (i=0; i<50; i++) {
  7009  001A18  0E00               	movlw	0
  7010  001A1A  6E06               	movwf	servo_rotate@i+1,c
  7011  001A1C  0E00               	movlw	0
  7012  001A1E  6E05               	movwf	servo_rotate@i,c
  7013  001A20                     i2l3817:
  7014  001A20  5006               	movf	servo_rotate@i+1,w,c
  7015  001A22  E14C               	bnz	i2l313
  7016  001A24  0E32               	movlw	50
  7017  001A26  5C05               	subwf	servo_rotate@i,w,c
  7018  001A28  B0D8               	btfsc	status,0,c
  7019  001A2A  0012               	return	
  7020                           
  7021                           ;main.c: 372: PORTEbits.RE1 = 1;
  7022  001A2C  8284               	bsf	3972,1,c	;volatile
  7023                           
  7024                           ;main.c: 373: _delay((unsigned long)((800)*(10000000/4000000.0)));
  7025  001A2E  0E03               	movlw	3
  7026  001A30  6E03               	movwf	??_servo_rotate& (0+255),c
  7027  001A32  0E98               	movlw	152
  7028  001A34                     i2u392_47:
  7029  001A34  2EE8               	decfsz	wreg,f,c
  7030  001A36  D7FE               	bra	i2u392_47
  7031  001A38  2E03               	decfsz	??_servo_rotate& (0+255),f,c
  7032  001A3A  D7FC               	bra	i2u392_47
  7033                           
  7034                           ;main.c: 374: PORTEbits.RE1 = 0;
  7035  001A3C  9284               	bcf	3972,1,c	;volatile
  7036                           
  7037                           ;main.c: 375: _delay((unsigned long)((19200)*(10000000/4000000.0)));
  7038  001A3E  0E3F               	movlw	63
  7039  001A40  6E03               	movwf	??_servo_rotate& (0+255),c
  7040  001A42  0E55               	movlw	85
  7041  001A44                     i2u393_47:
  7042  001A44  2EE8               	decfsz	wreg,f,c
  7043  001A46  D7FE               	bra	i2u393_47
  7044  001A48  2E03               	decfsz	??_servo_rotate& (0+255),f,c
  7045  001A4A  D7FC               	bra	i2u393_47
  7046  001A4C  F000               	nop	
  7047  001A4E  4A05               	infsnz	servo_rotate@i,f,c
  7048  001A50  2A06               	incf	servo_rotate@i+1,f,c
  7049  001A52  D7E6               	goto	i2l3817
  7050  001A54                     i2l3827:
  7051                           
  7052                           ;main.c: 379: for (i=0; i<50; i++) {
  7053  001A54  0E00               	movlw	0
  7054  001A56  6E06               	movwf	servo_rotate@i+1,c
  7055  001A58  0E00               	movlw	0
  7056  001A5A  6E05               	movwf	servo_rotate@i,c
  7057  001A5C                     i2l3829:
  7058  001A5C  5006               	movf	servo_rotate@i+1,w,c
  7059  001A5E  E12E               	bnz	i2l313
  7060  001A60  0E32               	movlw	50
  7061  001A62  5C05               	subwf	servo_rotate@i,w,c
  7062  001A64  B0D8               	btfsc	status,0,c
  7063  001A66  0012               	return	
  7064                           
  7065                           ;main.c: 380: PORTEbits.RE1 = 1;
  7066  001A68  8284               	bsf	3972,1,c	;volatile
  7067                           
  7068                           ;main.c: 381: _delay((unsigned long)((1500)*(10000000/4000000.0)));
  7069  001A6A  0E05               	movlw	5
  7070  001A6C  6E03               	movwf	??_servo_rotate& (0+255),c
  7071  001A6E  0EDE               	movlw	222
  7072  001A70                     i2u394_47:
  7073  001A70  2EE8               	decfsz	wreg,f,c
  7074  001A72  D7FE               	bra	i2u394_47
  7075  001A74  2E03               	decfsz	??_servo_rotate& (0+255),f,c
  7076  001A76  D7FC               	bra	i2u394_47
  7077                           
  7078                           ;main.c: 382: PORTEbits.RE1 = 0;
  7079  001A78  9284               	bcf	3972,1,c	;volatile
  7080                           
  7081                           ;main.c: 383: _delay((unsigned long)((18500)*(10000000/4000000.0)));
  7082  001A7A  0E3D               	movlw	61
  7083  001A7C  6E03               	movwf	??_servo_rotate& (0+255),c
  7084  001A7E  0E0F               	movlw	15
  7085  001A80                     i2u395_47:
  7086  001A80  2EE8               	decfsz	wreg,f,c
  7087  001A82  D7FE               	bra	i2u395_47
  7088  001A84  2E03               	decfsz	??_servo_rotate& (0+255),f,c
  7089  001A86  D7FC               	bra	i2u395_47
  7090  001A88  F000               	nop	
  7091  001A8A  4A05               	infsnz	servo_rotate@i,f,c
  7092  001A8C  2A06               	incf	servo_rotate@i+1,f,c
  7093  001A8E  D7E6               	goto	i2l3829
  7094  001A90                     i2l3841:
  7095  001A90  C001  F003         	movff	servo_rotate@degree,??_servo_rotate
  7096  001A94  C002  F004         	movff	servo_rotate@degree+1,??_servo_rotate+1
  7097                           
  7098                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7099                           ; Switch size 1, requested type "space"
  7100                           ; Number of cases is 2, Range of values is 0 to 255
  7101                           ; switch strategies available:
  7102                           ; Name         Instructions Cycles
  7103                           ; simple_byte            7     4 (average)
  7104                           ;	Chosen strategy is simple_byte
  7105  001A98  5004               	movf	??_servo_rotate+1,w,c
  7106  001A9A  0A00               	xorlw	0	; case 0
  7107  001A9C  B4D8               	btfsc	status,2,c
  7108  001A9E  D004               	goto	i2l4237
  7109  001AA0  0AFF               	xorlw	255	; case 255
  7110  001AA2  A4D8               	btfss	status,2,c
  7111  001AA4  0012               	return	
  7112  001AA6  D005               	goto	i2l4239
  7113  001AA8                     i2l4237:
  7114                           
  7115                           ; Switch size 1, requested type "space"
  7116                           ; Number of cases is 1, Range of values is 90 to 90
  7117                           ; switch strategies available:
  7118                           ; Name         Instructions Cycles
  7119                           ; simple_byte            4     3 (average)
  7120                           ;	Chosen strategy is simple_byte
  7121  001AA8  5003               	movf	??_servo_rotate,w,c
  7122  001AAA  0A5A               	xorlw	90	; case 90
  7123  001AAC  A4D8               	btfss	status,2,c
  7124  001AAE  0012               	return	
  7125  001AB0  D7B3               	goto	i2l3815
  7126  001AB2                     i2l4239:
  7127                           
  7128                           ; Switch size 1, requested type "space"
  7129                           ; Number of cases is 1, Range of values is 166 to 166
  7130                           ; switch strategies available:
  7131                           ; Name         Instructions Cycles
  7132                           ; simple_byte            4     3 (average)
  7133                           ;	Chosen strategy is simple_byte
  7134  001AB2  5003               	movf	??_servo_rotate,w,c
  7135  001AB4  0AA6               	xorlw	166	; case 166
  7136  001AB6  A4D8               	btfss	status,2,c
  7137  001AB8  0012               	return	
  7138  001ABA  D7CC               	goto	i2l3827
  7139  001ABC                     i2l313:
  7140  001ABC  0012               	return		;funcret
  7141  001ABE                     __end_of_servo_rotate:
  7142                           	opt stack 0
  7143                           pclatu	equ	0xFFB
  7144                           pclath	equ	0xFFA
  7145                           tblptru	equ	0xFF8
  7146                           tblptrh	equ	0xFF7
  7147                           tblptrl	equ	0xFF6
  7148                           tablat	equ	0xFF5
  7149                           prodh	equ	0xFF4
  7150                           prodl	equ	0xFF3
  7151                           intcon	equ	0xFF2
  7152                           intcon2	equ	0xFF1
  7153                           intcon3	equ	0xFF0
  7154                           postinc0	equ	0xFEE
  7155                           fsr0h	equ	0xFEA
  7156                           fsr0l	equ	0xFE9
  7157                           wreg	equ	0xFE8
  7158                           fsr1h	equ	0xFE2
  7159                           fsr1l	equ	0xFE1
  7160                           indf2	equ	0xFDF
  7161                           postinc2	equ	0xFDE
  7162                           postdec2	equ	0xFDD
  7163                           fsr2h	equ	0xFDA
  7164                           fsr2l	equ	0xFD9
  7165                           status	equ	0xFD8
  7166                           
  7167 ;; *************** function _read_time *****************
  7168 ;; Defined at:
  7169 ;;		line 264 in file "main.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;		None
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  i               1    3[COMRAM] unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  1    wreg      void 
  7176 ;; Registers used:
  7177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7184 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;Total ram usage:        1 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:    2
  7190 ;; This function calls:
  7191 ;;		i2_I2C_Master_Read
  7192 ;;		i2_I2C_Master_Start
  7193 ;;		i2_I2C_Master_Stop
  7194 ;;		i2_I2C_Master_Write
  7195 ;; This function is called by:
  7196 ;;		_isr
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           	psect	text35
  7201  001E86                     __ptext35:
  7202                           	opt stack 0
  7203  001E86                     _read_time:
  7204                           	opt stack 23
  7205                           
  7206                           ;main.c: 266: I2C_Master_Start();
  7207                           
  7208                           ;incstack = 0
  7209  001E86  EC58  F012         	call	i2_I2C_Master_Start	;wreg free
  7210                           
  7211                           ;main.c: 267: I2C_Master_Write(0b11010000);
  7212  001E8A  0E00               	movlw	0
  7213  001E8C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7214  001E8E  0ED0               	movlw	208
  7215  001E90  6E02               	movwf	i2I2C_Master_Write@d,c
  7216  001E92  EC47  F012         	call	i2_I2C_Master_Write	;wreg free
  7217                           
  7218                           ;main.c: 268: I2C_Master_Write(0x00);
  7219  001E96  0E00               	movlw	0
  7220  001E98  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7221  001E9A  0E00               	movlw	0
  7222  001E9C  6E02               	movwf	i2I2C_Master_Write@d,c
  7223  001E9E  EC47  F012         	call	i2_I2C_Master_Write	;wreg free
  7224                           
  7225                           ;main.c: 269: I2C_Master_Stop();
  7226  001EA2  EC54  F012         	call	i2_I2C_Master_Stop	;wreg free
  7227                           
  7228                           ;main.c: 272: I2C_Master_Start();
  7229  001EA6  EC58  F012         	call	i2_I2C_Master_Start	;wreg free
  7230                           
  7231                           ;main.c: 273: I2C_Master_Write(0b11010001);
  7232  001EAA  0E00               	movlw	0
  7233  001EAC  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7234  001EAE  0ED1               	movlw	209
  7235  001EB0  6E02               	movwf	i2I2C_Master_Write@d,c
  7236  001EB2  EC47  F012         	call	i2_I2C_Master_Write	;wreg free
  7237                           
  7238                           ;main.c: 274: for(unsigned char i=0;i<0x06;i++){
  7239  001EB6  0E00               	movlw	0
  7240  001EB8  6E04               	movwf	read_time@i,c
  7241  001EBA                     i2l3781:
  7242  001EBA  0E05               	movlw	5
  7243  001EBC  6404               	cpfsgt	read_time@i,c
  7244  001EBE  D001               	goto	i2l3785
  7245  001EC0  D00E               	goto	i2l3791
  7246  001EC2                     i2l3785:
  7247                           
  7248                           ;main.c: 275: time[i] = I2C_Master_Read(1);
  7249  001EC2  5004               	movf	read_time@i,w,c
  7250  001EC4  0D01               	mullw	1
  7251  001EC6  0EB6               	movlw	low _time
  7252  001EC8  24F3               	addwf	prodl,w,c
  7253  001ECA  6ED9               	movwf	fsr2l,c
  7254  001ECC  0E00               	movlw	high _time
  7255  001ECE  20F4               	addwfc	prodh,w,c
  7256  001ED0  6EDA               	movwf	fsr2h,c
  7257  001ED2  0E01               	movlw	1
  7258  001ED4  ECA7  F011         	call	i2_I2C_Master_Read
  7259  001ED8  6EDF               	movwf	indf2,c
  7260  001EDA  2A04               	incf	read_time@i,f,c
  7261  001EDC  D7EE               	goto	i2l3781
  7262  001EDE                     i2l3791:
  7263                           
  7264                           ;main.c: 276: }
  7265                           ;main.c: 277: time[6] = I2C_Master_Read(0);
  7266  001EDE  0E00               	movlw	0
  7267  001EE0  ECA7  F011         	call	i2_I2C_Master_Read
  7268  001EE4  0100               	movlb	0	; () banked
  7269  001EE6  6FBC               	movwf	(_time+6)& (0+255),b
  7270                           
  7271                           ;main.c: 278: I2C_Master_Stop();
  7272  001EE8  EC54  F012         	call	i2_I2C_Master_Stop	;wreg free
  7273  001EEC  0012               	return	
  7274  001EEE                     __end_of_read_time:
  7275                           	opt stack 0
  7276                           pclatu	equ	0xFFB
  7277                           pclath	equ	0xFFA
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           intcon	equ	0xFF2
  7285                           intcon2	equ	0xFF1
  7286                           intcon3	equ	0xFF0
  7287                           postinc0	equ	0xFEE
  7288                           fsr0h	equ	0xFEA
  7289                           fsr0l	equ	0xFE9
  7290                           wreg	equ	0xFE8
  7291                           fsr1h	equ	0xFE2
  7292                           fsr1l	equ	0xFE1
  7293                           indf2	equ	0xFDF
  7294                           postinc2	equ	0xFDE
  7295                           postdec2	equ	0xFDD
  7296                           fsr2h	equ	0xFDA
  7297                           fsr2l	equ	0xFD9
  7298                           status	equ	0xFD8
  7299                           
  7300 ;; *************** function i2_I2C_Master_Write *****************
  7301 ;; Defined at:
  7302 ;;		line 47 in file "I2C.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  d               2    1[COMRAM] unsigned int 
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;		None
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, status,2, status,0, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;Total ram usage:        2 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    1
  7323 ;; This function calls:
  7324 ;;		i2_I2C_Master_Wait
  7325 ;; This function is called by:
  7326 ;;		_read_time
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           	psect	text36
  7331  00248E                     __ptext36:
  7332                           	opt stack 0
  7333  00248E                     i2_I2C_Master_Write:
  7334                           	opt stack 23
  7335                           
  7336                           ;I2C.c: 49: I2C_Master_Wait();
  7337                           
  7338                           ;incstack = 0
  7339  00248E  EC1D  F012         	call	i2_I2C_Master_Wait	;wreg free
  7340                           
  7341                           ;I2C.c: 50: SSPBUF = d;
  7342  002492  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  7343  002496  0012               	return		;funcret
  7344  002498                     __end_ofi2_I2C_Master_Write:
  7345                           	opt stack 0
  7346                           pclatu	equ	0xFFB
  7347                           pclath	equ	0xFFA
  7348                           tblptru	equ	0xFF8
  7349                           tblptrh	equ	0xFF7
  7350                           tblptrl	equ	0xFF6
  7351                           tablat	equ	0xFF5
  7352                           prodh	equ	0xFF4
  7353                           prodl	equ	0xFF3
  7354                           intcon	equ	0xFF2
  7355                           intcon2	equ	0xFF1
  7356                           intcon3	equ	0xFF0
  7357                           postinc0	equ	0xFEE
  7358                           fsr0h	equ	0xFEA
  7359                           fsr0l	equ	0xFE9
  7360                           wreg	equ	0xFE8
  7361                           fsr1h	equ	0xFE2
  7362                           fsr1l	equ	0xFE1
  7363                           indf2	equ	0xFDF
  7364                           postinc2	equ	0xFDE
  7365                           postdec2	equ	0xFDD
  7366                           fsr2h	equ	0xFDA
  7367                           fsr2l	equ	0xFD9
  7368                           status	equ	0xFD8
  7369                           
  7370 ;; *************** function i2_I2C_Master_Stop *****************
  7371 ;; Defined at:
  7372 ;;		line 41 in file "I2C.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;		None
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;		None
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, status,2, status,0, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;Total ram usage:        0 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    1
  7393 ;; This function calls:
  7394 ;;		i2_I2C_Master_Wait
  7395 ;; This function is called by:
  7396 ;;		_read_time
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           	psect	text37
  7401  0024A8                     __ptext37:
  7402                           	opt stack 0
  7403  0024A8                     i2_I2C_Master_Stop:
  7404                           	opt stack 23
  7405                           
  7406                           ;I2C.c: 43: I2C_Master_Wait();
  7407                           
  7408                           ;incstack = 0
  7409  0024A8  EC1D  F012         	call	i2_I2C_Master_Wait	;wreg free
  7410                           
  7411                           ;I2C.c: 44: PEN = 1;
  7412  0024AC  84C5               	bsf	4037,2,c	;volatile
  7413  0024AE  0012               	return		;funcret
  7414  0024B0                     __end_ofi2_I2C_Master_Stop:
  7415                           	opt stack 0
  7416                           pclatu	equ	0xFFB
  7417                           pclath	equ	0xFFA
  7418                           tblptru	equ	0xFF8
  7419                           tblptrh	equ	0xFF7
  7420                           tblptrl	equ	0xFF6
  7421                           tablat	equ	0xFF5
  7422                           prodh	equ	0xFF4
  7423                           prodl	equ	0xFF3
  7424                           intcon	equ	0xFF2
  7425                           intcon2	equ	0xFF1
  7426                           intcon3	equ	0xFF0
  7427                           postinc0	equ	0xFEE
  7428                           fsr0h	equ	0xFEA
  7429                           fsr0l	equ	0xFE9
  7430                           wreg	equ	0xFE8
  7431                           fsr1h	equ	0xFE2
  7432                           fsr1l	equ	0xFE1
  7433                           indf2	equ	0xFDF
  7434                           postinc2	equ	0xFDE
  7435                           postdec2	equ	0xFDD
  7436                           fsr2h	equ	0xFDA
  7437                           fsr2l	equ	0xFD9
  7438                           status	equ	0xFD8
  7439                           
  7440 ;; *************** function i2_I2C_Master_Start *****************
  7441 ;; Defined at:
  7442 ;;		line 29 in file "I2C.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;		None
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;		None
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  1    wreg      void 
  7449 ;; Registers used:
  7450 ;;		wreg, status,2, status,0, cstack
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;Total ram usage:        0 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:    1
  7463 ;; This function calls:
  7464 ;;		i2_I2C_Master_Wait
  7465 ;; This function is called by:
  7466 ;;		_read_time
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           	psect	text38
  7471  0024B0                     __ptext38:
  7472                           	opt stack 0
  7473  0024B0                     i2_I2C_Master_Start:
  7474                           	opt stack 23
  7475                           
  7476                           ;I2C.c: 31: I2C_Master_Wait();
  7477                           
  7478                           ;incstack = 0
  7479  0024B0  EC1D  F012         	call	i2_I2C_Master_Wait	;wreg free
  7480                           
  7481                           ;I2C.c: 32: SEN = 1;
  7482  0024B4  80C5               	bsf	4037,0,c	;volatile
  7483  0024B6  0012               	return		;funcret
  7484  0024B8                     __end_ofi2_I2C_Master_Start:
  7485                           	opt stack 0
  7486                           pclatu	equ	0xFFB
  7487                           pclath	equ	0xFFA
  7488                           tblptru	equ	0xFF8
  7489                           tblptrh	equ	0xFF7
  7490                           tblptrl	equ	0xFF6
  7491                           tablat	equ	0xFF5
  7492                           prodh	equ	0xFF4
  7493                           prodl	equ	0xFF3
  7494                           intcon	equ	0xFF2
  7495                           intcon2	equ	0xFF1
  7496                           intcon3	equ	0xFF0
  7497                           postinc0	equ	0xFEE
  7498                           fsr0h	equ	0xFEA
  7499                           fsr0l	equ	0xFE9
  7500                           wreg	equ	0xFE8
  7501                           fsr1h	equ	0xFE2
  7502                           fsr1l	equ	0xFE1
  7503                           indf2	equ	0xFDF
  7504                           postinc2	equ	0xFDE
  7505                           postdec2	equ	0xFDD
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function i2_I2C_Master_Read *****************
  7511 ;; Defined at:
  7512 ;;		line 53 in file "I2C.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  a               1    wreg     unsigned char 
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;  a               1    1[COMRAM] unsigned char 
  7517 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  7518 ;; Return value:  Size  Location     Type
  7519 ;;                  1    wreg      unsigned char 
  7520 ;; Registers used:
  7521 ;;		wreg, status,2, status,0, cstack
  7522 ;; Tracked objects:
  7523 ;;		On entry : 0/0
  7524 ;;		On exit  : 0/0
  7525 ;;		Unchanged: 0/0
  7526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7530 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7531 ;;Total ram usage:        2 bytes
  7532 ;; Hardware stack levels used:    1
  7533 ;; Hardware stack levels required when called:    1
  7534 ;; This function calls:
  7535 ;;		i2_I2C_Master_Wait
  7536 ;; This function is called by:
  7537 ;;		_read_time
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           	psect	text39
  7542  00234E                     __ptext39:
  7543                           	opt stack 0
  7544  00234E                     i2_I2C_Master_Read:
  7545                           	opt stack 23
  7546                           
  7547                           ;incstack = 0
  7548                           ;i2I2C_Master_Read@a stored from wreg
  7549  00234E  6E02               	movwf	i2I2C_Master_Read@a,c
  7550                           
  7551                           ;I2C.c: 55: unsigned char temp;
  7552                           ;I2C.c: 56: I2C_Master_Wait();
  7553  002350  EC1D  F012         	call	i2_I2C_Master_Wait	;wreg free
  7554                           
  7555                           ;I2C.c: 57: RCEN = 1;
  7556  002354  86C5               	bsf	4037,3,c	;volatile
  7557                           
  7558                           ;I2C.c: 58: I2C_Master_Wait();
  7559  002356  EC1D  F012         	call	i2_I2C_Master_Wait	;wreg free
  7560                           
  7561                           ;I2C.c: 59: temp = SSPBUF;
  7562  00235A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  7563                           
  7564                           ;I2C.c: 60: I2C_Master_Wait();
  7565  00235E  EC1D  F012         	call	i2_I2C_Master_Wait	;wreg free
  7566                           
  7567                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7568  002362  5002               	movf	i2I2C_Master_Read@a,w,c
  7569  002364  A4D8               	btfss	status,2,c
  7570  002366  D002               	goto	i2u328_40
  7571  002368  8AC5               	bsf	4037,5,c	;volatile
  7572  00236A  D001               	goto	i2l3569
  7573  00236C                     i2u328_40:
  7574  00236C  9AC5               	bcf	4037,5,c	;volatile
  7575  00236E                     i2l3569:
  7576                           
  7577                           ;I2C.c: 62: ACKEN = 1;
  7578  00236E  88C5               	bsf	4037,4,c	;volatile
  7579                           
  7580                           ;I2C.c: 63: return temp;
  7581  002370  5003               	movf	i2I2C_Master_Read@temp,w,c
  7582  002372  0012               	return	
  7583  002374                     __end_ofi2_I2C_Master_Read:
  7584                           	opt stack 0
  7585                           pclatu	equ	0xFFB
  7586                           pclath	equ	0xFFA
  7587                           tblptru	equ	0xFF8
  7588                           tblptrh	equ	0xFF7
  7589                           tblptrl	equ	0xFF6
  7590                           tablat	equ	0xFF5
  7591                           prodh	equ	0xFF4
  7592                           prodl	equ	0xFF3
  7593                           intcon	equ	0xFF2
  7594                           intcon2	equ	0xFF1
  7595                           intcon3	equ	0xFF0
  7596                           postinc0	equ	0xFEE
  7597                           fsr0h	equ	0xFEA
  7598                           fsr0l	equ	0xFE9
  7599                           wreg	equ	0xFE8
  7600                           fsr1h	equ	0xFE2
  7601                           fsr1l	equ	0xFE1
  7602                           indf2	equ	0xFDF
  7603                           postinc2	equ	0xFDE
  7604                           postdec2	equ	0xFDD
  7605                           fsr2h	equ	0xFDA
  7606                           fsr2l	equ	0xFD9
  7607                           status	equ	0xFD8
  7608                           
  7609 ;; *************** function i2_I2C_Master_Wait *****************
  7610 ;; Defined at:
  7611 ;;		line 24 in file "I2C.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;		None
  7614 ;; Auto vars:     Size  Location     Type
  7615 ;;		None
  7616 ;; Return value:  Size  Location     Type
  7617 ;;                  1    wreg      void 
  7618 ;; Registers used:
  7619 ;;		wreg, status,2, status,0
  7620 ;; Tracked objects:
  7621 ;;		On entry : 0/0
  7622 ;;		On exit  : 0/0
  7623 ;;		Unchanged: 0/0
  7624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;Total ram usage:        1 bytes
  7630 ;; Hardware stack levels used:    1
  7631 ;; This function calls:
  7632 ;;		Nothing
  7633 ;; This function is called by:
  7634 ;;		i2_I2C_Master_Start
  7635 ;;		i2_I2C_Master_Stop
  7636 ;;		i2_I2C_Master_Write
  7637 ;;		i2_I2C_Master_Read
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           	psect	text40
  7642  00243A                     __ptext40:
  7643                           	opt stack 0
  7644  00243A                     i2_I2C_Master_Wait:
  7645                           	opt stack 23
  7646  00243A                     i2l34:
  7647  00243A  B4C7               	btfsc	4039,2,c	;volatile
  7648  00243C  D7FE               	goto	i2l34
  7649  00243E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  7650  002442  0E1F               	movlw	31
  7651  002444  1601               	andwf	??i2_I2C_Master_Wait,f,c
  7652  002446  B4D8               	btfsc	status,2,c
  7653  002448  0012               	return	
  7654  00244A  D7F7               	goto	i2l34
  7655  00244C                     __end_ofi2_I2C_Master_Wait:
  7656                           	opt stack 0
  7657                           pclatu	equ	0xFFB
  7658                           pclath	equ	0xFFA
  7659                           tblptru	equ	0xFF8
  7660                           tblptrh	equ	0xFF7
  7661                           tblptrl	equ	0xFF6
  7662                           tablat	equ	0xFF5
  7663                           prodh	equ	0xFF4
  7664                           prodl	equ	0xFF3
  7665                           intcon	equ	0xFF2
  7666                           intcon2	equ	0xFF1
  7667                           intcon3	equ	0xFF0
  7668                           postinc0	equ	0xFEE
  7669                           fsr0h	equ	0xFEA
  7670                           fsr0l	equ	0xFE9
  7671                           wreg	equ	0xFE8
  7672                           fsr1h	equ	0xFE2
  7673                           fsr1l	equ	0xFE1
  7674                           indf2	equ	0xFDF
  7675                           postinc2	equ	0xFDE
  7676                           postdec2	equ	0xFDD
  7677                           fsr2h	equ	0xFDA
  7678                           fsr2l	equ	0xFD9
  7679                           status	equ	0xFD8
  7680                           
  7681 ;; *************** function _dec_to_hex *****************
  7682 ;; Defined at:
  7683 ;;		line 225 in file "main.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;  num             2   98[COMRAM] int 
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;  quotient        2  112[COMRAM] int 
  7688 ;;  hexnum          2  110[COMRAM] int 
  7689 ;;  i               2  108[COMRAM] int 
  7690 ;;  temp            2  106[COMRAM] int 
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  2   98[COMRAM] int 
  7693 ;; Registers used:
  7694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7700 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7703 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7704 ;;Total ram usage:       16 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    5
  7707 ;; This function calls:
  7708 ;;		___awdiv
  7709 ;;		___awtoft
  7710 ;;		___ftadd
  7711 ;;		___ftmul
  7712 ;;		___fttol
  7713 ;;		_pow
  7714 ;; This function is called by:
  7715 ;;		_isr
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           	psect	text41
  7720  00119E                     __ptext41:
  7721                           	opt stack 0
  7722  00119E                     _dec_to_hex:
  7723                           	opt stack 20
  7724                           
  7725                           ;main.c: 226: int i = 0, quotient = num, temp, hexnum = 0;
  7726                           
  7727                           ;incstack = 0
  7728  00119E  0E00               	movlw	0
  7729  0011A0  6E6E               	movwf	dec_to_hex@i+1,c
  7730  0011A2  0E00               	movlw	0
  7731  0011A4  6E6D               	movwf	dec_to_hex@i,c
  7732  0011A6  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  7733  0011AA  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  7734  0011AE  0E00               	movlw	0
  7735  0011B0  6E70               	movwf	dec_to_hex@hexnum+1,c
  7736  0011B2  0E00               	movlw	0
  7737  0011B4  6E6F               	movwf	dec_to_hex@hexnum,c
  7738                           
  7739                           ;main.c: 228: while (quotient != 0) {
  7740  0011B6  D068               	goto	i2l3811
  7741  0011B8                     i2l3799:
  7742                           
  7743                           ;main.c: 229: temp = quotient % 16;
  7744  0011B8  0E0F               	movlw	15
  7745  0011BA  1471               	andwf	dec_to_hex@quotient,w,c
  7746  0011BC  6E6B               	movwf	dec_to_hex@temp,c
  7747  0011BE  6A6C               	clrf	dec_to_hex@temp+1,c
  7748                           
  7749                           ;main.c: 231: hexnum += temp*pow(10,i);
  7750  0011C0  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  7751  0011C4  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  7752  0011C8  EC0E  F011         	call	___awtoft	;wreg free
  7753  0011CC  C009  F065         	movff	?___awtoft,_dec_to_hex$1212
  7754  0011D0  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1212+1
  7755  0011D4  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1212+2
  7756                           
  7757                           ;main.c: 231: hexnum += temp*pow(10,i);
  7758  0011D8  C065  F055         	movff	_dec_to_hex$1212,pow@y
  7759  0011DC  C066  F056         	movff	_dec_to_hex$1212+1,pow@y+1
  7760  0011E0  C067  F057         	movff	_dec_to_hex$1212+2,pow@y+2
  7761  0011E4  0E00               	movlw	0
  7762  0011E6  6E52               	movwf	pow@x,c
  7763  0011E8  0E20               	movlw	32
  7764  0011EA  6E53               	movwf	pow@x+1,c
  7765  0011EC  0E41               	movlw	65
  7766  0011EE  6E54               	movwf	pow@x+2,c
  7767  0011F0  EC60  F006         	call	_pow	;wreg free
  7768  0011F4  C052  F068         	movff	?_pow,_dec_to_hex$1213
  7769  0011F8  C053  F069         	movff	?_pow+1,_dec_to_hex$1213+1
  7770  0011FC  C054  F06A         	movff	?_pow+2,_dec_to_hex$1213+2
  7771                           
  7772                           ;main.c: 231: hexnum += temp*pow(10,i);
  7773  001200  C068  F010         	movff	_dec_to_hex$1213,___ftmul@f2
  7774  001204  C069  F011         	movff	_dec_to_hex$1213+1,___ftmul@f2+1
  7775  001208  C06A  F012         	movff	_dec_to_hex$1213+2,___ftmul@f2+2
  7776  00120C  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  7777  001210  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  7778  001214  EC0E  F011         	call	___awtoft	;wreg free
  7779  001218  C009  F00D         	movff	?___awtoft,___ftmul@f1
  7780  00121C  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  7781  001220  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  7782  001224  ECC7  F009         	call	___ftmul	;wreg free
  7783  001228  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  7784  00122C  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  7785  001230  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  7786  001234  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  7787  001238  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  7788  00123C  EC0E  F011         	call	___awtoft	;wreg free
  7789  001240  C009  F01C         	movff	?___awtoft,___ftadd@f1
  7790  001244  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  7791  001248  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  7792  00124C  EC8A  F005         	call	___ftadd	;wreg free
  7793  001250  C01C  F028         	movff	?___ftadd,___fttol@f1
  7794  001254  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  7795  001258  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  7796  00125C  EC4D  F009         	call	___fttol	;wreg free
  7797  001260  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  7798  001264  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  7799                           
  7800                           ;main.c: 233: quotient = quotient / 16;
  7801  001268  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
  7802  00126C  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  7803  001270  0E00               	movlw	0
  7804  001272  6E04               	movwf	___awdiv@divisor+1,c
  7805  001274  0E10               	movlw	16
  7806  001276  6E03               	movwf	___awdiv@divisor,c
  7807  001278  EC89  F00E         	call	___awdiv	;wreg free
  7808  00127C  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
  7809  001280  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  7810                           
  7811                           ;main.c: 234: i += 1;
  7812  001284  4A6D               	infsnz	dec_to_hex@i,f,c
  7813  001286  2A6E               	incf	dec_to_hex@i+1,f,c
  7814  001288                     i2l3811:
  7815  001288  5071               	movf	dec_to_hex@quotient,w,c
  7816  00128A  1072               	iorwf	dec_to_hex@quotient+1,w,c
  7817  00128C  A4D8               	btfss	status,2,c
  7818  00128E  D794               	goto	i2l3799
  7819                           
  7820                           ;main.c: 235: }
  7821                           ;main.c: 236: return hexnum;
  7822  001290  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  7823  001294  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  7824  001298  0012               	return		;funcret
  7825  00129A                     __end_of_dec_to_hex:
  7826                           	opt stack 0
  7827                           pclatu	equ	0xFFB
  7828                           pclath	equ	0xFFA
  7829                           tblptru	equ	0xFF8
  7830                           tblptrh	equ	0xFF7
  7831                           tblptrl	equ	0xFF6
  7832                           tablat	equ	0xFF5
  7833                           prodh	equ	0xFF4
  7834                           prodl	equ	0xFF3
  7835                           intcon	equ	0xFF2
  7836                           intcon2	equ	0xFF1
  7837                           intcon3	equ	0xFF0
  7838                           postinc0	equ	0xFEE
  7839                           fsr0h	equ	0xFEA
  7840                           fsr0l	equ	0xFE9
  7841                           wreg	equ	0xFE8
  7842                           fsr1h	equ	0xFE2
  7843                           fsr1l	equ	0xFE1
  7844                           indf2	equ	0xFDF
  7845                           postinc2	equ	0xFDE
  7846                           postdec2	equ	0xFDD
  7847                           fsr2h	equ	0xFDA
  7848                           fsr2l	equ	0xFD9
  7849                           status	equ	0xFD8
  7850                           
  7851 ;; *************** function _pow *****************
  7852 ;; Defined at:
  7853 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;  x               3   81[COMRAM] int 
  7856 ;;  y               3   84[COMRAM] int 
  7857 ;; Auto vars:     Size  Location     Type
  7858 ;;  yi              4   94[COMRAM] unsigned long 
  7859 ;;  sign            1   93[COMRAM] unsigned char 
  7860 ;; Return value:  Size  Location     Type
  7861 ;;                  3   81[COMRAM] unsigned char 
  7862 ;; Registers used:
  7863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7869 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;Total ram usage:       17 bytes
  7874 ;; Hardware stack levels used:    1
  7875 ;; Hardware stack levels required when called:    4
  7876 ;; This function calls:
  7877 ;;		___ftge
  7878 ;;		___ftmul
  7879 ;;		___ftneg
  7880 ;;		___fttol
  7881 ;;		___lltoft
  7882 ;;		_exp
  7883 ;;		_log
  7884 ;; This function is called by:
  7885 ;;		_dec_to_hex
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           	psect	text42
  7890  000CC0                     __ptext42:
  7891                           	opt stack 0
  7892  000CC0                     _pow:
  7893                           	opt stack 20
  7894                           
  7895                           ;incstack = 0
  7896  000CC0  0E00               	movlw	0
  7897  000CC2  6E5E               	movwf	pow@sign,c
  7898  000CC4  5052               	movf	pow@x,w,c
  7899  000CC6  1053               	iorwf	pow@x+1,w,c
  7900  000CC8  1054               	iorwf	pow@x+2,w,c
  7901  000CCA  A4D8               	btfss	status,2,c
  7902  000CCC  D01B               	goto	i2l3417
  7903  000CCE  0E00               	movlw	0
  7904  000CD0  6E01               	movwf	___ftge@ff1,c
  7905  000CD2  0E00               	movlw	0
  7906  000CD4  6E02               	movwf	___ftge@ff1+1,c
  7907  000CD6  0E00               	movlw	0
  7908  000CD8  6E03               	movwf	___ftge@ff1+2,c
  7909  000CDA  C055  F004         	movff	pow@y,___ftge@ff2
  7910  000CDE  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  7911  000CE2  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  7912  000CE6  EC41  F00E         	call	___ftge	;wreg free
  7913  000CEA  A0D8               	btfss	status,0,c
  7914  000CEC  D004               	goto	i2l825
  7915  000CEE  0E00               	movlw	0
  7916  000CF0  6E79               	movwf	_errno+1,c
  7917  000CF2  0E21               	movlw	33
  7918  000CF4  6E78               	movwf	_errno,c
  7919  000CF6                     i2l825:
  7920  000CF6  0E00               	movlw	0
  7921  000CF8  6E52               	movwf	?_pow,c
  7922  000CFA  0E00               	movlw	0
  7923  000CFC  6E53               	movwf	?_pow+1,c
  7924  000CFE  0E00               	movlw	0
  7925  000D00  6E54               	movwf	?_pow+2,c
  7926  000D02  0012               	return	
  7927  000D04                     i2l3417:
  7928  000D04  5055               	movf	pow@y,w,c
  7929  000D06  1056               	iorwf	pow@y+1,w,c
  7930  000D08  1057               	iorwf	pow@y+2,w,c
  7931  000D0A  A4D8               	btfss	status,2,c
  7932  000D0C  D007               	goto	i2l3423
  7933  000D0E  0E00               	movlw	0
  7934  000D10  6E52               	movwf	?_pow,c
  7935  000D12  0E80               	movlw	128
  7936  000D14  6E53               	movwf	?_pow+1,c
  7937  000D16  0E3F               	movlw	63
  7938  000D18  6E54               	movwf	?_pow+2,c
  7939  000D1A  0012               	return	
  7940  000D1C                     i2l3423:
  7941  000D1C  AE54               	btfss	pow@x+2,7,c
  7942  000D1E  D040               	goto	i2l3435
  7943  000D20  C055  F028         	movff	pow@y,___fttol@f1
  7944  000D24  C056  F029         	movff	pow@y+1,___fttol@f1+1
  7945  000D28  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  7946  000D2C  EC4D  F009         	call	___fttol	;wreg free
  7947  000D30  C028  F05F         	movff	?___fttol,pow@yi
  7948  000D34  C029  F060         	movff	?___fttol+1,pow@yi+1
  7949  000D38  C02A  F061         	movff	?___fttol+2,pow@yi+2
  7950  000D3C  C02B  F062         	movff	?___fttol+3,pow@yi+3
  7951  000D40  C05F  F009         	movff	pow@yi,___lltoft@c
  7952  000D44  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  7953  000D48  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  7954  000D4C  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  7955  000D50  EC08  F010         	call	___lltoft	;wreg free
  7956  000D54  5055               	movf	pow@y,w,c
  7957  000D56  1809               	xorwf	?___lltoft,w,c
  7958  000D58  E107               	bnz	i2u311_40
  7959  000D5A  5056               	movf	pow@y+1,w,c
  7960  000D5C  180A               	xorwf	?___lltoft+1,w,c
  7961  000D5E  E104               	bnz	i2u311_40
  7962  000D60  5057               	movf	pow@y+2,w,c
  7963  000D62  180B               	xorwf	?___lltoft+2,w,c
  7964  000D64  B4D8               	btfsc	status,2,c
  7965  000D66  D00B               	goto	i2l3431
  7966  000D68                     i2u311_40:
  7967  000D68  0E00               	movlw	0
  7968  000D6A  6E79               	movwf	_errno+1,c
  7969  000D6C  0E21               	movlw	33
  7970  000D6E  6E78               	movwf	_errno,c
  7971  000D70  0E00               	movlw	0
  7972  000D72  6E52               	movwf	?_pow,c
  7973  000D74  0E00               	movlw	0
  7974  000D76  6E53               	movwf	?_pow+1,c
  7975  000D78  0E00               	movlw	0
  7976  000D7A  6E54               	movwf	?_pow+2,c
  7977  000D7C  0012               	return	
  7978  000D7E                     i2l3431:
  7979  000D7E  505F               	movf	pow@yi,w,c
  7980  000D80  0B01               	andlw	1
  7981  000D82  6E5E               	movwf	pow@sign,c
  7982  000D84  C052  F001         	movff	pow@x,___ftneg@f1
  7983  000D88  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  7984  000D8C  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  7985  000D90  ECCD  F011         	call	___ftneg	;wreg free
  7986  000D94  C001  F052         	movff	?___ftneg,pow@x
  7987  000D98  C002  F053         	movff	?___ftneg+1,pow@x+1
  7988  000D9C  C003  F054         	movff	?___ftneg+2,pow@x+2
  7989  000DA0                     i2l3435:
  7990  000DA0  C052  F034         	movff	pow@x,log@x
  7991  000DA4  C053  F035         	movff	pow@x+1,log@x+1
  7992  000DA8  C054  F036         	movff	pow@x+2,log@x+2
  7993  000DAC  ECBF  F007         	call	_log	;wreg free
  7994  000DB0  C034  F058         	movff	?_log,_pow$1214
  7995  000DB4  C035  F059         	movff	?_log+1,_pow$1214+1
  7996  000DB8  C036  F05A         	movff	?_log+2,_pow$1214+2
  7997  000DBC  C058  F00D         	movff	_pow$1214,___ftmul@f1
  7998  000DC0  C059  F00E         	movff	_pow$1214+1,___ftmul@f1+1
  7999  000DC4  C05A  F00F         	movff	_pow$1214+2,___ftmul@f1+2
  8000  000DC8  C055  F010         	movff	pow@y,___ftmul@f2
  8001  000DCC  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  8002  000DD0  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  8003  000DD4  ECC7  F009         	call	___ftmul	;wreg free
  8004  000DD8  C00D  F05B         	movff	?___ftmul,_pow$1215
  8005  000DDC  C00E  F05C         	movff	?___ftmul+1,_pow$1215+1
  8006  000DE0  C00F  F05D         	movff	?___ftmul+2,_pow$1215+2
  8007  000DE4  C05B  F049         	movff	_pow$1215,exp@x
  8008  000DE8  C05C  F04A         	movff	_pow$1215+1,exp@x+1
  8009  000DEC  C05D  F04B         	movff	_pow$1215+2,exp@x+2
  8010  000DF0  EC98  F004         	call	_exp	;wreg free
  8011  000DF4  C049  F052         	movff	?_exp,pow@x
  8012  000DF8  C04A  F053         	movff	?_exp+1,pow@x+1
  8013  000DFC  C04B  F054         	movff	?_exp+2,pow@x+2
  8014  000E00  505E               	movf	pow@sign,w,c
  8015  000E02  B4D8               	btfsc	status,2,c
  8016  000E04  D00F               	goto	i2l830
  8017  000E06  C052  F001         	movff	pow@x,___ftneg@f1
  8018  000E0A  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  8019  000E0E  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  8020  000E12  ECCD  F011         	call	___ftneg	;wreg free
  8021  000E16  C001  F052         	movff	?___ftneg,?_pow
  8022  000E1A  C002  F053         	movff	?___ftneg+1,?_pow+1
  8023  000E1E  C003  F054         	movff	?___ftneg+2,?_pow+2
  8024  000E22  0012               	return	
  8025  000E24                     i2l830:
  8026  000E24  C052  F052         	movff	pow@x,?_pow
  8027  000E28  C053  F053         	movff	pow@x+1,?_pow+1
  8028  000E2C  C054  F054         	movff	pow@x+2,?_pow+2
  8029  000E30  0012               	return		;funcret
  8030  000E32                     __end_of_pow:
  8031                           	opt stack 0
  8032                           pclatu	equ	0xFFB
  8033                           pclath	equ	0xFFA
  8034                           tblptru	equ	0xFF8
  8035                           tblptrh	equ	0xFF7
  8036                           tblptrl	equ	0xFF6
  8037                           tablat	equ	0xFF5
  8038                           prodh	equ	0xFF4
  8039                           prodl	equ	0xFF3
  8040                           intcon	equ	0xFF2
  8041                           intcon2	equ	0xFF1
  8042                           intcon3	equ	0xFF0
  8043                           postinc0	equ	0xFEE
  8044                           fsr0h	equ	0xFEA
  8045                           fsr0l	equ	0xFE9
  8046                           wreg	equ	0xFE8
  8047                           fsr1h	equ	0xFE2
  8048                           fsr1l	equ	0xFE1
  8049                           indf2	equ	0xFDF
  8050                           postinc2	equ	0xFDE
  8051                           postdec2	equ	0xFDD
  8052                           fsr2h	equ	0xFDA
  8053                           fsr2l	equ	0xFD9
  8054                           status	equ	0xFD8
  8055                           
  8056 ;; *************** function _log *****************
  8057 ;; Defined at:
  8058 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  x               3   51[COMRAM] unsigned char 
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;  exponent        2   54[COMRAM] int 
  8063 ;; Return value:  Size  Location     Type
  8064 ;;                  3   51[COMRAM] int 
  8065 ;; Registers used:
  8066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8067 ;; Tracked objects:
  8068 ;;		On entry : 0/0
  8069 ;;		On exit  : 0/0
  8070 ;;		Unchanged: 0/0
  8071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8072 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;Total ram usage:        5 bytes
  8077 ;; Hardware stack levels used:    1
  8078 ;; Hardware stack levels required when called:    3
  8079 ;; This function calls:
  8080 ;;		___awtoft
  8081 ;;		___ftadd
  8082 ;;		___ftmul
  8083 ;;		_eval_poly
  8084 ;;		_frexp
  8085 ;; This function is called by:
  8086 ;;		_pow
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           	psect	text43
  8091  000F7E                     __ptext43:
  8092                           	opt stack 0
  8093  000F7E                     _log:
  8094                           	opt stack 20
  8095                           
  8096                           ;incstack = 0
  8097  000F7E  AE36               	btfss	log@x+2,7,c
  8098  000F80  D00B               	goto	i2l3165
  8099  000F82  0E00               	movlw	0
  8100  000F84  6E79               	movwf	_errno+1,c
  8101  000F86  0E21               	movlw	33
  8102  000F88  6E78               	movwf	_errno,c
  8103  000F8A  0E00               	movlw	0
  8104  000F8C  6E34               	movwf	?_log,c
  8105  000F8E  0E00               	movlw	0
  8106  000F90  6E35               	movwf	?_log+1,c
  8107  000F92  0E00               	movlw	0
  8108  000F94  6E36               	movwf	?_log+2,c
  8109  000F96  0012               	return	
  8110  000F98                     i2l3165:
  8111  000F98  5034               	movf	log@x,w,c
  8112  000F9A  1035               	iorwf	log@x+1,w,c
  8113  000F9C  1036               	iorwf	log@x+2,w,c
  8114  000F9E  A4D8               	btfss	status,2,c
  8115  000FA0  D00B               	goto	i2l3171
  8116  000FA2  0E00               	movlw	0
  8117  000FA4  6E79               	movwf	_errno+1,c
  8118  000FA6  0E22               	movlw	34
  8119  000FA8  6E78               	movwf	_errno,c
  8120  000FAA  0E00               	movlw	0
  8121  000FAC  6E34               	movwf	?_log,c
  8122  000FAE  0E00               	movlw	0
  8123  000FB0  6E35               	movwf	?_log+1,c
  8124  000FB2  0E00               	movlw	0
  8125  000FB4  6E36               	movwf	?_log+2,c
  8126  000FB6  0012               	return	
  8127  000FB8                     i2l3171:
  8128  000FB8  0E00               	movlw	0
  8129  000FBA  6E10               	movwf	___ftmul@f2,c
  8130  000FBC  0E00               	movlw	0
  8131  000FBE  6E11               	movwf	___ftmul@f2+1,c
  8132  000FC0  0E40               	movlw	64
  8133  000FC2  6E12               	movwf	___ftmul@f2+2,c
  8134  000FC4  0E37               	movlw	low log@exponent
  8135  000FC6  6E04               	movwf	frexp@eptr,c
  8136  000FC8  0E00               	movlw	high log@exponent
  8137  000FCA  6E05               	movwf	frexp@eptr+1,c
  8138  000FCC  C034  F001         	movff	log@x,frexp@value
  8139  000FD0  C035  F002         	movff	log@x+1,frexp@value+1
  8140  000FD4  C036  F003         	movff	log@x+2,frexp@value+2
  8141  000FD8  ECF9  F00D         	call	_frexp	;wreg free
  8142  000FDC  C001  F00D         	movff	?_frexp,___ftmul@f1
  8143  000FE0  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  8144  000FE4  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  8145  000FE8  ECC7  F009         	call	___ftmul	;wreg free
  8146  000FEC  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  8147  000FF0  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  8148  000FF4  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  8149  000FF8  0E00               	movlw	0
  8150  000FFA  6E1F               	movwf	___ftadd@f2,c
  8151  000FFC  0E80               	movlw	128
  8152  000FFE  6E20               	movwf	___ftadd@f2+1,c
  8153  001000  0EBF               	movlw	191
  8154  001002  6E21               	movwf	___ftadd@f2+2,c
  8155  001004  EC8A  F005         	call	___ftadd	;wreg free
  8156  001008  C01C  F034         	movff	?___ftadd,log@x
  8157  00100C  C01D  F035         	movff	?___ftadd+1,log@x+1
  8158  001010  C01E  F036         	movff	?___ftadd+2,log@x+2
  8159  001014  0637               	decf	log@exponent,f,c
  8160  001016  A0D8               	btfss	status,0,c
  8161  001018  0638               	decf	log@exponent+1,f,c
  8162  00101A  C034  F028         	movff	log@x,eval_poly@x
  8163  00101E  C035  F029         	movff	log@x+1,eval_poly@x+1
  8164  001022  C036  F02A         	movff	log@x+2,eval_poly@x+2
  8165  001026  0E37               	movlw	low log@coeff
  8166  001028  6E2B               	movwf	eval_poly@d,c
  8167  00102A  0EFE               	movlw	high log@coeff
  8168  00102C  6E2C               	movwf	eval_poly@d+1,c
  8169  00102E  0E00               	movlw	0
  8170  001030  6E2E               	movwf	eval_poly@n+1,c
  8171  001032  0E08               	movlw	8
  8172  001034  6E2D               	movwf	eval_poly@n,c
  8173  001036  EC8C  F00B         	call	_eval_poly	;wreg free
  8174  00103A  C028  F034         	movff	?_eval_poly,log@x
  8175  00103E  C029  F035         	movff	?_eval_poly+1,log@x+1
  8176  001042  C02A  F036         	movff	?_eval_poly+2,log@x+2
  8177  001046  0E72               	movlw	114
  8178  001048  6E10               	movwf	___ftmul@f2,c
  8179  00104A  0E31               	movlw	49
  8180  00104C  6E11               	movwf	___ftmul@f2+1,c
  8181  00104E  0E3F               	movlw	63
  8182  001050  6E12               	movwf	___ftmul@f2+2,c
  8183  001052  C037  F009         	movff	log@exponent,___awtoft@c
  8184  001056  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  8185  00105A  EC0E  F011         	call	___awtoft	;wreg free
  8186  00105E  C009  F00D         	movff	?___awtoft,___ftmul@f1
  8187  001062  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  8188  001066  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  8189  00106A  ECC7  F009         	call	___ftmul	;wreg free
  8190  00106E  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  8191  001072  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  8192  001076  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  8193  00107A  C034  F01F         	movff	log@x,___ftadd@f2
  8194  00107E  C035  F020         	movff	log@x+1,___ftadd@f2+1
  8195  001082  C036  F021         	movff	log@x+2,___ftadd@f2+2
  8196  001086  EC8A  F005         	call	___ftadd	;wreg free
  8197  00108A  C01C  F034         	movff	?___ftadd,?_log
  8198  00108E  C01D  F035         	movff	?___ftadd+1,?_log+1
  8199  001092  C01E  F036         	movff	?___ftadd+2,?_log+2
  8200  001096  0012               	return	
  8201  001098                     __end_of_log:
  8202                           	opt stack 0
  8203                           pclatu	equ	0xFFB
  8204                           pclath	equ	0xFFA
  8205                           tblptru	equ	0xFF8
  8206                           tblptrh	equ	0xFF7
  8207                           tblptrl	equ	0xFF6
  8208                           tablat	equ	0xFF5
  8209                           prodh	equ	0xFF4
  8210                           prodl	equ	0xFF3
  8211                           intcon	equ	0xFF2
  8212                           intcon2	equ	0xFF1
  8213                           intcon3	equ	0xFF0
  8214                           postinc0	equ	0xFEE
  8215                           fsr0h	equ	0xFEA
  8216                           fsr0l	equ	0xFE9
  8217                           wreg	equ	0xFE8
  8218                           fsr1h	equ	0xFE2
  8219                           fsr1l	equ	0xFE1
  8220                           indf2	equ	0xFDF
  8221                           postinc2	equ	0xFDE
  8222                           postdec2	equ	0xFDD
  8223                           fsr2h	equ	0xFDA
  8224                           fsr2l	equ	0xFD9
  8225                           status	equ	0xFD8
  8226                           
  8227 ;; *************** function _exp *****************
  8228 ;; Defined at:
  8229 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  8230 ;; Parameters:    Size  Location     Type
  8231 ;;  x               3   72[COMRAM] int 
  8232 ;; Auto vars:     Size  Location     Type
  8233 ;;  exponent        2   78[COMRAM] int 
  8234 ;;  sign            1   80[COMRAM] unsigned char 
  8235 ;; Return value:  Size  Location     Type
  8236 ;;                  3   72[COMRAM] unsigned char 
  8237 ;; Registers used:
  8238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8244 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8247 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;Total ram usage:        9 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:    3
  8251 ;; This function calls:
  8252 ;;		___awtoft
  8253 ;;		___ftdiv
  8254 ;;		___ftge
  8255 ;;		___ftmul
  8256 ;;		___ftneg
  8257 ;;		___ftsub
  8258 ;;		___fttol
  8259 ;;		_eval_poly
  8260 ;;		_floor
  8261 ;;		_ldexp
  8262 ;; This function is called by:
  8263 ;;		_pow
  8264 ;; This function uses a non-reentrant model
  8265 ;;
  8266                           
  8267                           	psect	text44
  8268  000930                     __ptext44:
  8269                           	opt stack 0
  8270  000930                     _exp:
  8271                           	opt stack 20
  8272                           
  8273                           ;incstack = 0
  8274  000930  5049               	movf	exp@x,w,c
  8275  000932  104A               	iorwf	exp@x+1,w,c
  8276  000934  104B               	iorwf	exp@x+2,w,c
  8277  000936  A4D8               	btfss	status,2,c
  8278  000938  D007               	goto	i2l3187
  8279  00093A  0E00               	movlw	0
  8280  00093C  6E49               	movwf	?_exp,c
  8281  00093E  0E80               	movlw	128
  8282  000940  6E4A               	movwf	?_exp+1,c
  8283  000942  0E3F               	movlw	63
  8284  000944  6E4B               	movwf	?_exp+2,c
  8285  000946  0012               	return	
  8286  000948                     i2l3187:
  8287  000948  0E72               	movlw	114
  8288  00094A  6E01               	movwf	___ftge@ff1,c
  8289  00094C  0E31               	movlw	49
  8290  00094E  6E02               	movwf	___ftge@ff1+1,c
  8291  000950  0E44               	movlw	68
  8292  000952  6E03               	movwf	___ftge@ff1+2,c
  8293  000954  C049  F004         	movff	exp@x,___ftge@ff2
  8294  000958  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  8295  00095C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  8296  000960  EC41  F00E         	call	___ftge	;wreg free
  8297  000964  B0D8               	btfsc	status,0,c
  8298  000966  D00B               	goto	i2l3193
  8299  000968  0E00               	movlw	0
  8300  00096A  6E79               	movwf	_errno+1,c
  8301  00096C  0E22               	movlw	34
  8302  00096E  6E78               	movwf	_errno,c
  8303  000970  0EFF               	movlw	255
  8304  000972  6E49               	movwf	?_exp,c
  8305  000974  0E7F               	movlw	127
  8306  000976  6E4A               	movwf	?_exp+1,c
  8307  000978  0E7F               	movlw	127
  8308  00097A  6E4B               	movwf	?_exp+2,c
  8309  00097C  0012               	return	
  8310  00097E                     i2l3193:
  8311  00097E  C049  F001         	movff	exp@x,___ftge@ff1
  8312  000982  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  8313  000986  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  8314  00098A  0E49               	movlw	73
  8315  00098C  6E04               	movwf	___ftge@ff2,c
  8316  00098E  0E3A               	movlw	58
  8317  000990  6E05               	movwf	___ftge@ff2+1,c
  8318  000992  0EC4               	movlw	196
  8319  000994  6E06               	movwf	___ftge@ff2+2,c
  8320  000996  EC41  F00E         	call	___ftge	;wreg free
  8321  00099A  B0D8               	btfsc	status,0,c
  8322  00099C  D00B               	goto	i2l3199
  8323  00099E  0E00               	movlw	0
  8324  0009A0  6E79               	movwf	_errno+1,c
  8325  0009A2  0E22               	movlw	34
  8326  0009A4  6E78               	movwf	_errno,c
  8327  0009A6  0E00               	movlw	0
  8328  0009A8  6E49               	movwf	?_exp,c
  8329  0009AA  0E00               	movlw	0
  8330  0009AC  6E4A               	movwf	?_exp+1,c
  8331  0009AE  0E00               	movlw	0
  8332  0009B0  6E4B               	movwf	?_exp+2,c
  8333  0009B2  0012               	return	
  8334  0009B4                     i2l3199:
  8335  0009B4  AE4B               	btfss	exp@x+2,7,c
  8336  0009B6  D002               	goto	i2u275_40
  8337  0009B8  0E01               	movlw	1
  8338  0009BA  D001               	goto	i2u276_40
  8339  0009BC                     i2u275_40:
  8340  0009BC  0E00               	movlw	0
  8341  0009BE                     i2u276_40:
  8342  0009BE  6E51               	movwf	exp@sign,c
  8343  0009C0  5051               	movf	exp@sign,w,c
  8344  0009C2  B4D8               	btfsc	status,2,c
  8345  0009C4  D00E               	goto	i2l988
  8346  0009C6  C049  F001         	movff	exp@x,___ftneg@f1
  8347  0009CA  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  8348  0009CE  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  8349  0009D2  ECCD  F011         	call	___ftneg	;wreg free
  8350  0009D6  C001  F049         	movff	?___ftneg,exp@x
  8351  0009DA  C002  F04A         	movff	?___ftneg+1,exp@x+1
  8352  0009DE  C003  F04B         	movff	?___ftneg+2,exp@x+2
  8353  0009E2                     i2l988:
  8354  0009E2  C049  F00D         	movff	exp@x,___ftmul@f1
  8355  0009E6  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  8356  0009EA  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  8357  0009EE  0EAA               	movlw	170
  8358  0009F0  6E10               	movwf	___ftmul@f2,c
  8359  0009F2  0EB8               	movlw	184
  8360  0009F4  6E11               	movwf	___ftmul@f2+1,c
  8361  0009F6  0E3F               	movlw	63
  8362  0009F8  6E12               	movwf	___ftmul@f2+2,c
  8363  0009FA  ECC7  F009         	call	___ftmul	;wreg free
  8364  0009FE  C00D  F049         	movff	?___ftmul,exp@x
  8365  000A02  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  8366  000A06  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  8367  000A0A  C049  F041         	movff	exp@x,floor@x
  8368  000A0E  C04A  F042         	movff	exp@x+1,floor@x+1
  8369  000A12  C04B  F043         	movff	exp@x+2,floor@x+2
  8370  000A16  ECB4  F00A         	call	_floor	;wreg free
  8371  000A1A  C041  F04C         	movff	?_floor,_exp$1216
  8372  000A1E  C042  F04D         	movff	?_floor+1,_exp$1216+1
  8373  000A22  C043  F04E         	movff	?_floor+2,_exp$1216+2
  8374  000A26  C04C  F028         	movff	_exp$1216,___fttol@f1
  8375  000A2A  C04D  F029         	movff	_exp$1216+1,___fttol@f1+1
  8376  000A2E  C04E  F02A         	movff	_exp$1216+2,___fttol@f1+2
  8377  000A32  EC4D  F009         	call	___fttol	;wreg free
  8378  000A36  C028  F04F         	movff	?___fttol,exp@exponent
  8379  000A3A  C029  F050         	movff	?___fttol+1,exp@exponent+1
  8380  000A3E  C049  F028         	movff	exp@x,___ftsub@f1
  8381  000A42  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  8382  000A46  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  8383  000A4A  C04F  F009         	movff	exp@exponent,___awtoft@c
  8384  000A4E  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  8385  000A52  EC0E  F011         	call	___awtoft	;wreg free
  8386  000A56  C009  F02B         	movff	?___awtoft,___ftsub@f2
  8387  000A5A  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  8388  000A5E  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  8389  000A62  ECCF  F010         	call	___ftsub	;wreg free
  8390  000A66  C028  F049         	movff	?___ftsub,exp@x
  8391  000A6A  C029  F04A         	movff	?___ftsub+1,exp@x+1
  8392  000A6E  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  8393  000A72  C049  F028         	movff	exp@x,eval_poly@x
  8394  000A76  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  8395  000A7A  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  8396  000A7E  0E19               	movlw	low exp@coeff
  8397  000A80  6E2B               	movwf	eval_poly@d,c
  8398  000A82  0EFE               	movlw	high exp@coeff
  8399  000A84  6E2C               	movwf	eval_poly@d+1,c
  8400  000A86  0E00               	movlw	0
  8401  000A88  6E2E               	movwf	eval_poly@n+1,c
  8402  000A8A  0E09               	movlw	9
  8403  000A8C  6E2D               	movwf	eval_poly@n,c
  8404  000A8E  EC8C  F00B         	call	_eval_poly	;wreg free
  8405  000A92  C028  F034         	movff	?_eval_poly,ldexp@value
  8406  000A96  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  8407  000A9A  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  8408  000A9E  C04F  F037         	movff	exp@exponent,ldexp@newexp
  8409  000AA2  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  8410  000AA6  ECF5  F00B         	call	_ldexp	;wreg free
  8411  000AAA  C034  F049         	movff	?_ldexp,exp@x
  8412  000AAE  C035  F04A         	movff	?_ldexp+1,exp@x+1
  8413  000AB2  C036  F04B         	movff	?_ldexp+2,exp@x+2
  8414  000AB6  5051               	movf	exp@sign,w,c
  8415  000AB8  B4D8               	btfsc	status,2,c
  8416  000ABA  D025               	goto	i2l989
  8417  000ABC  2849               	incf	exp@x,w,c
  8418  000ABE  E10E               	bnz	i2l3221
  8419  000AC0  0E7F               	movlw	127
  8420  000AC2  184A               	xorwf	exp@x+1,w,c
  8421  000AC4  E10B               	bnz	i2l3221
  8422  000AC6  0E7F               	movlw	127
  8423  000AC8  184B               	xorwf	exp@x+2,w,c
  8424  000ACA  A4D8               	btfss	status,2,c
  8425  000ACC  D007               	goto	i2l3221
  8426  000ACE  0E00               	movlw	0
  8427  000AD0  6E49               	movwf	?_exp,c
  8428  000AD2  0E00               	movlw	0
  8429  000AD4  6E4A               	movwf	?_exp+1,c
  8430  000AD6  0E00               	movlw	0
  8431  000AD8  6E4B               	movwf	?_exp+2,c
  8432  000ADA  0012               	return	
  8433  000ADC                     i2l3221:
  8434  000ADC  0E00               	movlw	0
  8435  000ADE  6E09               	movwf	___ftdiv@f1,c
  8436  000AE0  0E80               	movlw	128
  8437  000AE2  6E0A               	movwf	___ftdiv@f1+1,c
  8438  000AE4  0E3F               	movlw	63
  8439  000AE6  6E0B               	movwf	___ftdiv@f1+2,c
  8440  000AE8  C049  F00C         	movff	exp@x,___ftdiv@f2
  8441  000AEC  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  8442  000AF0  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  8443  000AF4  EC41  F00A         	call	___ftdiv	;wreg free
  8444  000AF8  C009  F049         	movff	?___ftdiv,?_exp
  8445  000AFC  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  8446  000B00  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  8447  000B04  0012               	return	
  8448  000B06                     i2l989:
  8449  000B06  C049  F049         	movff	exp@x,?_exp
  8450  000B0A  C04A  F04A         	movff	exp@x+1,?_exp+1
  8451  000B0E  C04B  F04B         	movff	exp@x+2,?_exp+2
  8452  000B12  0012               	return		;funcret
  8453  000B14                     __end_of_exp:
  8454                           	opt stack 0
  8455                           pclatu	equ	0xFFB
  8456                           pclath	equ	0xFFA
  8457                           tblptru	equ	0xFF8
  8458                           tblptrh	equ	0xFF7
  8459                           tblptrl	equ	0xFF6
  8460                           tablat	equ	0xFF5
  8461                           prodh	equ	0xFF4
  8462                           prodl	equ	0xFF3
  8463                           intcon	equ	0xFF2
  8464                           intcon2	equ	0xFF1
  8465                           intcon3	equ	0xFF0
  8466                           postinc0	equ	0xFEE
  8467                           fsr0h	equ	0xFEA
  8468                           fsr0l	equ	0xFE9
  8469                           wreg	equ	0xFE8
  8470                           fsr1h	equ	0xFE2
  8471                           fsr1l	equ	0xFE1
  8472                           indf2	equ	0xFDF
  8473                           postinc2	equ	0xFDE
  8474                           postdec2	equ	0xFDD
  8475                           fsr2h	equ	0xFDA
  8476                           fsr2l	equ	0xFD9
  8477                           status	equ	0xFD8
  8478                           
  8479 ;; *************** function _ldexp *****************
  8480 ;; Defined at:
  8481 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;  value           3   51[COMRAM] unsigned char 
  8484 ;;  newexp          2   54[COMRAM] int 
  8485 ;; Auto vars:     Size  Location     Type
  8486 ;;		None
  8487 ;; Return value:  Size  Location     Type
  8488 ;;                  3   51[COMRAM] int 
  8489 ;; Registers used:
  8490 ;;		wreg, status,2, status,0
  8491 ;; Tracked objects:
  8492 ;;		On entry : 0/0
  8493 ;;		On exit  : 0/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8496 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;Total ram usage:        7 bytes
  8501 ;; Hardware stack levels used:    1
  8502 ;; This function calls:
  8503 ;;		Nothing
  8504 ;; This function is called by:
  8505 ;;		_exp
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           	psect	text45
  8510  0017EA                     __ptext45:
  8511                           	opt stack 0
  8512  0017EA                     _ldexp:
  8513                           	opt stack 22
  8514                           
  8515                           ;incstack = 0
  8516  0017EA  5034               	movf	ldexp@value,w,c
  8517  0017EC  1035               	iorwf	ldexp@value+1,w,c
  8518  0017EE  1036               	iorwf	ldexp@value+2,w,c
  8519  0017F0  A4D8               	btfss	status,2,c
  8520  0017F2  D007               	goto	i2l3055
  8521  0017F4  0E00               	movlw	0
  8522  0017F6  6E34               	movwf	?_ldexp,c
  8523  0017F8  0E00               	movlw	0
  8524  0017FA  6E35               	movwf	?_ldexp+1,c
  8525  0017FC  0E00               	movlw	0
  8526  0017FE  6E36               	movwf	?_ldexp+2,c
  8527  001800  0012               	return	
  8528  001802                     i2l3055:
  8529  001802  5036               	movf	ldexp@value+2,w,c
  8530  001804  0B7F               	andlw	127
  8531  001806  6E39               	movwf	??_ldexp& (0+255),c
  8532  001808  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  8533  00180A  90D8               	bcf	status,0,c
  8534  00180C  3639               	rlcf	??_ldexp,f,c
  8535  00180E  363A               	rlcf	??_ldexp+1,f,c
  8536  001810  5039               	movf	??_ldexp,w,c
  8537  001812  2637               	addwf	ldexp@newexp,f,c
  8538  001814  503A               	movf	??_ldexp+1,w,c
  8539  001816  2238               	addwfc	ldexp@newexp+1,f,c
  8540  001818  AE35               	btfss	ldexp@value+1,7,c
  8541  00181A  D003               	goto	i2u255_40
  8542  00181C  6A39               	clrf	??_ldexp& (0+255),c
  8543  00181E  2A39               	incf	??_ldexp& (0+255),f,c
  8544  001820  D001               	goto	i2u255_48
  8545  001822                     i2u255_40:
  8546  001822  6A39               	clrf	??_ldexp& (0+255),c
  8547  001824                     i2u255_48:
  8548  001824  5039               	movf	??_ldexp,w,c
  8549  001826  2637               	addwf	ldexp@newexp,f,c
  8550  001828  0E00               	movlw	0
  8551  00182A  2238               	addwfc	ldexp@newexp+1,f,c
  8552  00182C  AE38               	btfss	ldexp@newexp+1,7,c
  8553  00182E  D00B               	goto	i2l3063
  8554  001830  0E00               	movlw	0
  8555  001832  6E79               	movwf	_errno+1,c
  8556  001834  0E22               	movlw	34
  8557  001836  6E78               	movwf	_errno,c
  8558  001838  0E00               	movlw	0
  8559  00183A  6E34               	movwf	?_ldexp,c
  8560  00183C  0E00               	movlw	0
  8561  00183E  6E35               	movwf	?_ldexp+1,c
  8562  001840  0E00               	movlw	0
  8563  001842                     L4:
  8564  001842  6E36               	movwf	?_ldexp+2,c
  8565  001844  0012               	return	
  8566  001846                     i2l3063:
  8567  001846  BE38               	btfsc	ldexp@newexp+1,7,c
  8568  001848  D015               	goto	i2l3079
  8569  00184A  0438               	decf	ldexp@newexp+1,w,c
  8570  00184C  A0D8               	btfss	status,0,c
  8571  00184E  D012               	goto	i2l3079
  8572  001850  0E00               	movlw	0
  8573  001852  6E79               	movwf	_errno+1,c
  8574  001854  0E22               	movlw	34
  8575  001856  6E78               	movwf	_errno,c
  8576  001858  AE36               	btfss	ldexp@value+2,7,c
  8577  00185A  D006               	goto	i2l3075
  8578  00185C  0EFF               	movlw	255
  8579  00185E  6E34               	movwf	?_ldexp,c
  8580  001860  0E7F               	movlw	127
  8581  001862  6E35               	movwf	?_ldexp+1,c
  8582  001864  0EFF               	movlw	255
  8583  001866  D7ED               	goto	L4
  8584  001868                     i2l3075:
  8585  001868  0EFF               	movlw	255
  8586  00186A  6E34               	movwf	?_ldexp,c
  8587  00186C  0E7F               	movlw	127
  8588  00186E  6E35               	movwf	?_ldexp+1,c
  8589  001870  0E7F               	movlw	127
  8590  001872  D7E7               	goto	L4
  8591  001874                     i2l3079:
  8592  001874  3438               	rlcf	ldexp@newexp+1,w,c
  8593  001876  3038               	rrcf	ldexp@newexp+1,w,c
  8594  001878  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  8595  00187A  3037               	rrcf	ldexp@newexp,w,c
  8596  00187C  6E39               	movwf	??_ldexp& (0+255),c
  8597  00187E  5036               	movf	ldexp@value+2,w,c
  8598  001880  1839               	xorwf	??_ldexp,w,c
  8599  001882  0B80               	andlw	-128
  8600  001884  1839               	xorwf	??_ldexp,w,c
  8601  001886  6E36               	movwf	ldexp@value+2,c
  8602  001888  C037  F039         	movff	ldexp@newexp,??_ldexp
  8603  00188C  0E01               	movlw	1
  8604  00188E  1639               	andwf	??_ldexp,f,c
  8605  001890  3239               	rrcf	??_ldexp,f,c
  8606  001892  3239               	rrcf	??_ldexp,f,c
  8607  001894  5035               	movf	ldexp@value+1,w,c
  8608  001896  1839               	xorwf	??_ldexp,w,c
  8609  001898  0B7F               	andlw	-129
  8610  00189A  1839               	xorwf	??_ldexp,w,c
  8611  00189C  6E35               	movwf	ldexp@value+1,c
  8612  00189E  C034  F034         	movff	ldexp@value,?_ldexp
  8613  0018A2  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  8614  0018A6  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  8615  0018AA  0012               	return	
  8616  0018AC                     __end_of_ldexp:
  8617                           	opt stack 0
  8618                           pclatu	equ	0xFFB
  8619                           pclath	equ	0xFFA
  8620                           tblptru	equ	0xFF8
  8621                           tblptrh	equ	0xFF7
  8622                           tblptrl	equ	0xFF6
  8623                           tablat	equ	0xFF5
  8624                           prodh	equ	0xFF4
  8625                           prodl	equ	0xFF3
  8626                           intcon	equ	0xFF2
  8627                           intcon2	equ	0xFF1
  8628                           intcon3	equ	0xFF0
  8629                           postinc0	equ	0xFEE
  8630                           fsr0h	equ	0xFEA
  8631                           fsr0l	equ	0xFE9
  8632                           wreg	equ	0xFE8
  8633                           fsr1h	equ	0xFE2
  8634                           fsr1l	equ	0xFE1
  8635                           indf2	equ	0xFDF
  8636                           postinc2	equ	0xFDE
  8637                           postdec2	equ	0xFDD
  8638                           fsr2h	equ	0xFDA
  8639                           fsr2l	equ	0xFD9
  8640                           status	equ	0xFD8
  8641                           
  8642 ;; *************** function _floor *****************
  8643 ;; Defined at:
  8644 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  8645 ;; Parameters:    Size  Location     Type
  8646 ;;  x               3   64[COMRAM] int 
  8647 ;; Auto vars:     Size  Location     Type
  8648 ;;  i               3   67[COMRAM] int 
  8649 ;;  expon           2   70[COMRAM] int 
  8650 ;; Return value:  Size  Location     Type
  8651 ;;                  3   64[COMRAM] int 
  8652 ;; Registers used:
  8653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8654 ;; Tracked objects:
  8655 ;;		On entry : 0/0
  8656 ;;		On exit  : 0/0
  8657 ;;		Unchanged: 0/0
  8658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8659 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8660 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8662 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8663 ;;Total ram usage:        8 bytes
  8664 ;; Hardware stack levels used:    1
  8665 ;; Hardware stack levels required when called:    2
  8666 ;; This function calls:
  8667 ;;		___altoft
  8668 ;;		___ftadd
  8669 ;;		___ftge
  8670 ;;		___fttol
  8671 ;;		_frexp
  8672 ;; This function is called by:
  8673 ;;		_exp
  8674 ;; This function uses a non-reentrant model
  8675 ;;
  8676                           
  8677                           	psect	text46
  8678  001568                     __ptext46:
  8679                           	opt stack 0
  8680  001568                     _floor:
  8681                           	opt stack 20
  8682                           
  8683                           ;incstack = 0
  8684  001568  C041  F001         	movff	floor@x,frexp@value
  8685  00156C  C042  F002         	movff	floor@x+1,frexp@value+1
  8686  001570  C043  F003         	movff	floor@x+2,frexp@value+2
  8687  001574  0E47               	movlw	low floor@expon
  8688  001576  6E04               	movwf	frexp@eptr,c
  8689  001578  0E00               	movlw	high floor@expon
  8690  00157A  6E05               	movwf	frexp@eptr+1,c
  8691  00157C  ECF9  F00D         	call	_frexp	;wreg free
  8692  001580  AE48               	btfss	floor@expon+1,7,c
  8693  001582  D010               	goto	i2l3033
  8694  001584  AE43               	btfss	floor@x+2,7,c
  8695  001586  D007               	goto	i2l3029
  8696  001588  0E00               	movlw	0
  8697  00158A  6E41               	movwf	?_floor,c
  8698  00158C  0E80               	movlw	128
  8699  00158E  6E42               	movwf	?_floor+1,c
  8700  001590  0EBF               	movlw	191
  8701  001592  6E43               	movwf	?_floor+2,c
  8702  001594  0012               	return	
  8703  001596                     i2l3029:
  8704  001596  0E00               	movlw	0
  8705  001598  6E41               	movwf	?_floor,c
  8706  00159A  0E00               	movlw	0
  8707  00159C  6E42               	movwf	?_floor+1,c
  8708  00159E  0E00               	movlw	0
  8709  0015A0  6E43               	movwf	?_floor+2,c
  8710  0015A2  0012               	return	
  8711  0015A4                     i2l3033:
  8712  0015A4  5048               	movf	floor@expon+1,w,c
  8713  0015A6  E104               	bnz	i2u251_40
  8714  0015A8  0E15               	movlw	21
  8715  0015AA  5C47               	subwf	floor@expon,w,c
  8716  0015AC  A0D8               	btfss	status,0,c
  8717  0015AE  D007               	goto	i2l3037
  8718  0015B0                     i2u251_40:
  8719  0015B0  C041  F041         	movff	floor@x,?_floor
  8720  0015B4  C042  F042         	movff	floor@x+1,?_floor+1
  8721  0015B8  C043  F043         	movff	floor@x+2,?_floor+2
  8722  0015BC  0012               	return	
  8723  0015BE                     i2l3037:
  8724  0015BE  C041  F028         	movff	floor@x,___fttol@f1
  8725  0015C2  C042  F029         	movff	floor@x+1,___fttol@f1+1
  8726  0015C6  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  8727  0015CA  EC4D  F009         	call	___fttol	;wreg free
  8728  0015CE  C028  F037         	movff	?___fttol,___altoft@c
  8729  0015D2  C029  F038         	movff	?___fttol+1,___altoft@c+1
  8730  0015D6  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  8731  0015DA  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  8732  0015DE  EC07  F00F         	call	___altoft	;wreg free
  8733  0015E2  C037  F044         	movff	?___altoft,floor@i
  8734  0015E6  C038  F045         	movff	?___altoft+1,floor@i+1
  8735  0015EA  C039  F046         	movff	?___altoft+2,floor@i+2
  8736  0015EE  C041  F001         	movff	floor@x,___ftge@ff1
  8737  0015F2  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  8738  0015F6  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  8739  0015FA  C044  F004         	movff	floor@i,___ftge@ff2
  8740  0015FE  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  8741  001602  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  8742  001606  EC41  F00E         	call	___ftge	;wreg free
  8743  00160A  B0D8               	btfsc	status,0,c
  8744  00160C  D015               	goto	i2l999
  8745  00160E  C044  F01C         	movff	floor@i,___ftadd@f1
  8746  001612  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  8747  001616  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  8748  00161A  0E00               	movlw	0
  8749  00161C  6E1F               	movwf	___ftadd@f2,c
  8750  00161E  0E80               	movlw	128
  8751  001620  6E20               	movwf	___ftadd@f2+1,c
  8752  001622  0EBF               	movlw	191
  8753  001624  6E21               	movwf	___ftadd@f2+2,c
  8754  001626  EC8A  F005         	call	___ftadd	;wreg free
  8755  00162A  C01C  F041         	movff	?___ftadd,?_floor
  8756  00162E  C01D  F042         	movff	?___ftadd+1,?_floor+1
  8757  001632  C01E  F043         	movff	?___ftadd+2,?_floor+2
  8758  001636  0012               	return	
  8759  001638                     i2l999:
  8760  001638  C044  F041         	movff	floor@i,?_floor
  8761  00163C  C045  F042         	movff	floor@i+1,?_floor+1
  8762  001640  C046  F043         	movff	floor@i+2,?_floor+2
  8763  001644  0012               	return		;funcret
  8764  001646                     __end_of_floor:
  8765                           	opt stack 0
  8766                           pclatu	equ	0xFFB
  8767                           pclath	equ	0xFFA
  8768                           tblptru	equ	0xFF8
  8769                           tblptrh	equ	0xFF7
  8770                           tblptrl	equ	0xFF6
  8771                           tablat	equ	0xFF5
  8772                           prodh	equ	0xFF4
  8773                           prodl	equ	0xFF3
  8774                           intcon	equ	0xFF2
  8775                           intcon2	equ	0xFF1
  8776                           intcon3	equ	0xFF0
  8777                           postinc0	equ	0xFEE
  8778                           fsr0h	equ	0xFEA
  8779                           fsr0l	equ	0xFE9
  8780                           wreg	equ	0xFE8
  8781                           fsr1h	equ	0xFE2
  8782                           fsr1l	equ	0xFE1
  8783                           indf2	equ	0xFDF
  8784                           postinc2	equ	0xFDE
  8785                           postdec2	equ	0xFDD
  8786                           fsr2h	equ	0xFDA
  8787                           fsr2l	equ	0xFD9
  8788                           status	equ	0xFD8
  8789                           
  8790 ;; *************** function _frexp *****************
  8791 ;; Defined at:
  8792 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  8793 ;; Parameters:    Size  Location     Type
  8794 ;;  value           3    0[COMRAM] int 
  8795 ;;  eptr            2    3[COMRAM] PTR int 
  8796 ;;		 -> log@exponent(2), floor@expon(2), 
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;		None
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  3    0[COMRAM] PTR int 
  8801 ;; Registers used:
  8802 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8808 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8810 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;Total ram usage:        7 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; This function calls:
  8815 ;;		Nothing
  8816 ;; This function is called by:
  8817 ;;		_floor
  8818 ;;		_log
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text47
  8823  001BF2                     __ptext47:
  8824                           	opt stack 0
  8825  001BF2                     _frexp:
  8826                           	opt stack 22
  8827                           
  8828                           ;incstack = 0
  8829  001BF2  5001               	movf	frexp@value,w,c
  8830  001BF4  1002               	iorwf	frexp@value+1,w,c
  8831  001BF6  1003               	iorwf	frexp@value+2,w,c
  8832  001BF8  A4D8               	btfss	status,2,c
  8833  001BFA  D00F               	goto	i2l2913
  8834  001BFC  C004  FFD9         	movff	frexp@eptr,fsr2l
  8835  001C00  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8836  001C04  0E00               	movlw	0
  8837  001C06  6EDE               	movwf	postinc2,c
  8838  001C08  0E00               	movlw	0
  8839  001C0A  6EDD               	movwf	postdec2,c
  8840  001C0C  0E00               	movlw	0
  8841  001C0E  6E01               	movwf	?_frexp,c
  8842  001C10  0E00               	movlw	0
  8843  001C12  6E02               	movwf	?_frexp+1,c
  8844  001C14  0E00               	movlw	0
  8845  001C16  6E03               	movwf	?_frexp+2,c
  8846  001C18  0012               	return	
  8847  001C1A                     i2l2913:
  8848  001C1A  5003               	movf	frexp@value+2,w,c
  8849  001C1C  0B7F               	andlw	127
  8850  001C1E  6E06               	movwf	??_frexp& (0+255),c
  8851  001C20  6A07               	clrf	(??_frexp+1)& (0+255),c
  8852  001C22  90D8               	bcf	status,0,c
  8853  001C24  3606               	rlcf	??_frexp,f,c
  8854  001C26  3607               	rlcf	??_frexp+1,f,c
  8855  001C28  C004  FFD9         	movff	frexp@eptr,fsr2l
  8856  001C2C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8857  001C30  C006  FFDE         	movff	??_frexp,postinc2
  8858  001C34  C007  FFDD         	movff	??_frexp+1,postdec2
  8859  001C38  AE02               	btfss	frexp@value+1,7,c
  8860  001C3A  D003               	goto	i2u240_40
  8861  001C3C  6A06               	clrf	??_frexp& (0+255),c
  8862  001C3E  2A06               	incf	??_frexp& (0+255),f,c
  8863  001C40  D001               	goto	i2u240_48
  8864  001C42                     i2u240_40:
  8865  001C42  6A06               	clrf	??_frexp& (0+255),c
  8866  001C44                     i2u240_48:
  8867  001C44  5006               	movf	??_frexp,w,c
  8868  001C46  C004  FFD9         	movff	frexp@eptr,fsr2l
  8869  001C4A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8870  001C4E  12DE               	iorwf	postinc2,f,c
  8871  001C50  0E00               	movlw	0
  8872  001C52  12DD               	iorwf	postdec2,f,c
  8873  001C54  C004  FFD9         	movff	frexp@eptr,fsr2l
  8874  001C58  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8875  001C5C  0E82               	movlw	130
  8876  001C5E  26DE               	addwf	postinc2,f,c
  8877  001C60  0EFF               	movlw	255
  8878  001C62  22DD               	addwfc	postdec2,f,c
  8879  001C64  8003               	bsf	frexp@value+2,0,c
  8880  001C66  8203               	bsf	frexp@value+2,1,c
  8881  001C68  8403               	bsf	frexp@value+2,2,c
  8882  001C6A  8603               	bsf	frexp@value+2,3,c
  8883  001C6C  8803               	bsf	frexp@value+2,4,c
  8884  001C6E  8A03               	bsf	frexp@value+2,5,c
  8885  001C70  9C03               	bcf	frexp@value+2,6,c
  8886  001C72  9E02               	bcf	frexp@value+1,7,c
  8887  001C74  C001  F001         	movff	frexp@value,?_frexp
  8888  001C78  C002  F002         	movff	frexp@value+1,?_frexp+1
  8889  001C7C  C003  F003         	movff	frexp@value+2,?_frexp+2
  8890  001C80  0012               	return	
  8891  001C82                     __end_of_frexp:
  8892                           	opt stack 0
  8893                           pclatu	equ	0xFFB
  8894                           pclath	equ	0xFFA
  8895                           tblptru	equ	0xFF8
  8896                           tblptrh	equ	0xFF7
  8897                           tblptrl	equ	0xFF6
  8898                           tablat	equ	0xFF5
  8899                           prodh	equ	0xFF4
  8900                           prodl	equ	0xFF3
  8901                           intcon	equ	0xFF2
  8902                           intcon2	equ	0xFF1
  8903                           intcon3	equ	0xFF0
  8904                           postinc0	equ	0xFEE
  8905                           fsr0h	equ	0xFEA
  8906                           fsr0l	equ	0xFE9
  8907                           wreg	equ	0xFE8
  8908                           fsr1h	equ	0xFE2
  8909                           fsr1l	equ	0xFE1
  8910                           indf2	equ	0xFDF
  8911                           postinc2	equ	0xFDE
  8912                           postdec2	equ	0xFDD
  8913                           fsr2h	equ	0xFDA
  8914                           fsr2l	equ	0xFD9
  8915                           status	equ	0xFD8
  8916                           
  8917 ;; *************** function ___fttol *****************
  8918 ;; Defined at:
  8919 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;  f1              3   39[COMRAM] float 
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;  lval            4   49[COMRAM] unsigned long 
  8924 ;;  exp1            1   53[COMRAM] unsigned char 
  8925 ;;  sign1           1   48[COMRAM] unsigned char 
  8926 ;; Return value:  Size  Location     Type
  8927 ;;                  4   39[COMRAM] long 
  8928 ;; Registers used:
  8929 ;;		wreg, status,2, status,0
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/0
  8932 ;;		On exit  : 0/0
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8936 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;Total ram usage:       15 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; This function calls:
  8942 ;;		Nothing
  8943 ;; This function is called by:
  8944 ;;		_dec_to_hex
  8945 ;;		_pow
  8946 ;;		_exp
  8947 ;;		_floor
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           	psect	text48
  8952  00129A                     __ptext48:
  8953                           	opt stack 0
  8954  00129A                     ___fttol:
  8955                           	opt stack 21
  8956                           
  8957                           ;incstack = 0
  8958  00129A  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  8959  00129E  6A2D               	clrf	(??___fttol+1)& (0+255),c
  8960  0012A0  6A2E               	clrf	(??___fttol+2)& (0+255),c
  8961  0012A2  3429               	rlcf	___fttol@f1+1,w,c
  8962  0012A4  362C               	rlcf	??___fttol& (0+255),f,c
  8963  0012A6  E301               	bnc	u231_41
  8964  0012A8  802D               	bsf	(??___fttol+1)& (0+255),0,c
  8965  0012AA                     u231_41:
  8966  0012AA  502C               	movf	??___fttol,w,c
  8967  0012AC  6E36               	movwf	___fttol@exp1,c
  8968  0012AE  5036               	movf	___fttol@exp1,w,c
  8969  0012B0  A4D8               	btfss	status,2,c
  8970  0012B2  D009               	goto	i2l2865
  8971  0012B4  0E00               	movlw	0
  8972  0012B6  6E28               	movwf	?___fttol,c
  8973  0012B8  0E00               	movlw	0
  8974  0012BA  6E29               	movwf	?___fttol+1,c
  8975  0012BC  0E00               	movlw	0
  8976  0012BE  6E2A               	movwf	?___fttol+2,c
  8977  0012C0  0E00               	movlw	0
  8978  0012C2  6E2B               	movwf	?___fttol+3,c
  8979  0012C4  0012               	return	
  8980  0012C6                     i2l2865:
  8981  0012C6  0E17               	movlw	23
  8982  0012C8  6E2C               	movwf	??___fttol& (0+255),c
  8983  0012CA  C028  F02D         	movff	___fttol@f1,??___fttol+1
  8984  0012CE  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  8985  0012D2  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  8986  0012D6  282C               	incf	??___fttol,w,c
  8987  0012D8  6E30               	movwf	(??___fttol+4)& (0+255),c
  8988  0012DA  D004               	goto	i2u233_40
  8989  0012DC                     i2u233_45:
  8990  0012DC  90D8               	bcf	status,0,c
  8991  0012DE  322F               	rrcf	??___fttol+3,f,c
  8992  0012E0  322E               	rrcf	??___fttol+2,f,c
  8993  0012E2  322D               	rrcf	??___fttol+1,f,c
  8994  0012E4                     i2u233_40:
  8995  0012E4  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  8996  0012E6  D7FA               	goto	i2u233_45
  8997  0012E8  502D               	movf	??___fttol+1,w,c
  8998  0012EA  6E31               	movwf	___fttol@sign1,c
  8999  0012EC  8E29               	bsf	___fttol@f1+1,7,c
  9000  0012EE  0EFF               	movlw	255
  9001  0012F0  1628               	andwf	___fttol@f1,f,c
  9002  0012F2  0EFF               	movlw	255
  9003  0012F4  1629               	andwf	___fttol@f1+1,f,c
  9004  0012F6  0E00               	movlw	0
  9005  0012F8  162A               	andwf	___fttol@f1+2,f,c
  9006  0012FA  5028               	movf	___fttol@f1,w,c
  9007  0012FC  6E32               	movwf	___fttol@lval,c
  9008  0012FE  5029               	movf	___fttol@f1+1,w,c
  9009  001300  6E33               	movwf	___fttol@lval+1,c
  9010  001302  502A               	movf	___fttol@f1+2,w,c
  9011  001304  6E34               	movwf	___fttol@lval+2,c
  9012  001306  6A35               	clrf	___fttol@lval+3,c
  9013  001308  0E8E               	movlw	142
  9014  00130A  5E36               	subwf	___fttol@exp1,f,c
  9015  00130C  AE36               	btfss	___fttol@exp1,7,c
  9016  00130E  D016               	goto	i2l2887
  9017  001310  5036               	movf	___fttol@exp1,w,c
  9018  001312  0A80               	xorlw	128
  9019  001314  0F8F               	addlw	143
  9020  001316  B0D8               	btfsc	status,0,c
  9021  001318  D009               	goto	i2l2883
  9022  00131A  0E00               	movlw	0
  9023  00131C  6E28               	movwf	?___fttol,c
  9024  00131E  0E00               	movlw	0
  9025  001320  6E29               	movwf	?___fttol+1,c
  9026  001322  0E00               	movlw	0
  9027  001324  6E2A               	movwf	?___fttol+2,c
  9028  001326  0E00               	movlw	0
  9029  001328  6E2B               	movwf	?___fttol+3,c
  9030  00132A  0012               	return	
  9031  00132C                     i2l2883:
  9032  00132C  90D8               	bcf	status,0,c
  9033  00132E  3235               	rrcf	___fttol@lval+3,f,c
  9034  001330  3234               	rrcf	___fttol@lval+2,f,c
  9035  001332  3233               	rrcf	___fttol@lval+1,f,c
  9036  001334  3232               	rrcf	___fttol@lval,f,c
  9037  001336  3E36               	incfsz	___fttol@exp1,f,c
  9038  001338  D7F9               	goto	i2l2883
  9039  00133A  D015               	goto	i2l2897
  9040  00133C                     i2l2887:
  9041  00133C  0E17               	movlw	23
  9042  00133E  6436               	cpfsgt	___fttol@exp1,c
  9043  001340  D00F               	goto	i2l2895
  9044  001342  0E00               	movlw	0
  9045  001344  6E28               	movwf	?___fttol,c
  9046  001346  0E00               	movlw	0
  9047  001348  6E29               	movwf	?___fttol+1,c
  9048  00134A  0E00               	movlw	0
  9049  00134C  6E2A               	movwf	?___fttol+2,c
  9050  00134E  0E00               	movlw	0
  9051  001350  6E2B               	movwf	?___fttol+3,c
  9052  001352  0012               	return	
  9053  001354                     i2l2893:
  9054  001354  90D8               	bcf	status,0,c
  9055  001356  3632               	rlcf	___fttol@lval,f,c
  9056  001358  3633               	rlcf	___fttol@lval+1,f,c
  9057  00135A  3634               	rlcf	___fttol@lval+2,f,c
  9058  00135C  3635               	rlcf	___fttol@lval+3,f,c
  9059  00135E  0636               	decf	___fttol@exp1,f,c
  9060  001360                     i2l2895:
  9061  001360  5036               	movf	___fttol@exp1,w,c
  9062  001362  A4D8               	btfss	status,2,c
  9063  001364  D7F7               	goto	i2l2893
  9064  001366                     i2l2897:
  9065  001366  5031               	movf	___fttol@sign1,w,c
  9066  001368  B4D8               	btfsc	status,2,c
  9067  00136A  D008               	goto	i2l2901
  9068  00136C  1E35               	comf	___fttol@lval+3,f,c
  9069  00136E  1E34               	comf	___fttol@lval+2,f,c
  9070  001370  1E33               	comf	___fttol@lval+1,f,c
  9071  001372  6C32               	negf	___fttol@lval,c
  9072  001374  0E00               	movlw	0
  9073  001376  2233               	addwfc	___fttol@lval+1,f,c
  9074  001378  2234               	addwfc	___fttol@lval+2,f,c
  9075  00137A  2235               	addwfc	___fttol@lval+3,f,c
  9076  00137C                     i2l2901:
  9077  00137C  C032  F028         	movff	___fttol@lval,?___fttol
  9078  001380  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  9079  001384  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  9080  001388  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  9081  00138C  0012               	return	
  9082  00138E                     __end_of___fttol:
  9083                           	opt stack 0
  9084                           pclatu	equ	0xFFB
  9085                           pclath	equ	0xFFA
  9086                           tblptru	equ	0xFF8
  9087                           tblptrh	equ	0xFF7
  9088                           tblptrl	equ	0xFF6
  9089                           tablat	equ	0xFF5
  9090                           prodh	equ	0xFF4
  9091                           prodl	equ	0xFF3
  9092                           intcon	equ	0xFF2
  9093                           intcon2	equ	0xFF1
  9094                           intcon3	equ	0xFF0
  9095                           postinc0	equ	0xFEE
  9096                           fsr0h	equ	0xFEA
  9097                           fsr0l	equ	0xFE9
  9098                           wreg	equ	0xFE8
  9099                           fsr1h	equ	0xFE2
  9100                           fsr1l	equ	0xFE1
  9101                           indf2	equ	0xFDF
  9102                           postinc2	equ	0xFDE
  9103                           postdec2	equ	0xFDD
  9104                           fsr2h	equ	0xFDA
  9105                           fsr2l	equ	0xFD9
  9106                           status	equ	0xFD8
  9107                           
  9108 ;; *************** function ___ftge *****************
  9109 ;; Defined at:
  9110 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;  ff1             3    0[COMRAM] float 
  9113 ;;  ff2             3    3[COMRAM] float 
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;		None
  9116 ;; Return value:  Size  Location     Type
  9117 ;;		None               void
  9118 ;; Registers used:
  9119 ;;		wreg, status,2, status,0
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9125 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;Total ram usage:        9 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; This function calls:
  9132 ;;		Nothing
  9133 ;; This function is called by:
  9134 ;;		_pow
  9135 ;;		_exp
  9136 ;;		_floor
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           	psect	text49
  9141  001C82                     __ptext49:
  9142                           	opt stack 0
  9143  001C82                     ___ftge:
  9144                           	opt stack 21
  9145                           
  9146                           ;incstack = 0
  9147  001C82  AE03               	btfss	___ftge@ff1+2,7,c
  9148  001C84  D016               	goto	i2l2845
  9149  001C86  C001  F007         	movff	___ftge@ff1,??___ftge
  9150  001C8A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9151  001C8E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9152  001C92  1E07               	comf	??___ftge,f,c
  9153  001C94  1E08               	comf	??___ftge+1,f,c
  9154  001C96  1E09               	comf	??___ftge+2,f,c
  9155  001C98  2A07               	incf	??___ftge,f,c
  9156  001C9A  0E00               	movlw	0
  9157  001C9C  2208               	addwfc	??___ftge+1,f,c
  9158  001C9E  2209               	addwfc	??___ftge+2,f,c
  9159  001CA0  0E00               	movlw	0
  9160  001CA2  2407               	addwf	??___ftge,w,c
  9161  001CA4  6E01               	movwf	___ftge@ff1,c
  9162  001CA6  0E00               	movlw	0
  9163  001CA8  2008               	addwfc	??___ftge+1,w,c
  9164  001CAA  6E02               	movwf	___ftge@ff1+1,c
  9165  001CAC  0E80               	movlw	128
  9166  001CAE  2009               	addwfc	??___ftge+2,w,c
  9167  001CB0  6E03               	movwf	___ftge@ff1+2,c
  9168  001CB2                     i2l2845:
  9169  001CB2  AE06               	btfss	___ftge@ff2+2,7,c
  9170  001CB4  D016               	goto	i2l2849
  9171  001CB6  C004  F007         	movff	___ftge@ff2,??___ftge
  9172  001CBA  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9173  001CBE  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9174  001CC2  1E07               	comf	??___ftge,f,c
  9175  001CC4  1E08               	comf	??___ftge+1,f,c
  9176  001CC6  1E09               	comf	??___ftge+2,f,c
  9177  001CC8  2A07               	incf	??___ftge,f,c
  9178  001CCA  0E00               	movlw	0
  9179  001CCC  2208               	addwfc	??___ftge+1,f,c
  9180  001CCE  2209               	addwfc	??___ftge+2,f,c
  9181  001CD0  0E00               	movlw	0
  9182  001CD2  2407               	addwf	??___ftge,w,c
  9183  001CD4  6E04               	movwf	___ftge@ff2,c
  9184  001CD6  0E00               	movlw	0
  9185  001CD8  2008               	addwfc	??___ftge+1,w,c
  9186  001CDA  6E05               	movwf	___ftge@ff2+1,c
  9187  001CDC  0E80               	movlw	128
  9188  001CDE  2009               	addwfc	??___ftge+2,w,c
  9189  001CE0  6E06               	movwf	___ftge@ff2+2,c
  9190  001CE2                     i2l2849:
  9191  001CE2  0E00               	movlw	0
  9192  001CE4  1A01               	xorwf	___ftge@ff1,f,c
  9193  001CE6  0E00               	movlw	0
  9194  001CE8  1A02               	xorwf	___ftge@ff1+1,f,c
  9195  001CEA  0E80               	movlw	128
  9196  001CEC  1A03               	xorwf	___ftge@ff1+2,f,c
  9197  001CEE  0E00               	movlw	0
  9198  001CF0  1A04               	xorwf	___ftge@ff2,f,c
  9199  001CF2  0E00               	movlw	0
  9200  001CF4  1A05               	xorwf	___ftge@ff2+1,f,c
  9201  001CF6  0E80               	movlw	128
  9202  001CF8  1A06               	xorwf	___ftge@ff2+2,f,c
  9203  001CFA  5004               	movf	___ftge@ff2,w,c
  9204  001CFC  5C01               	subwf	___ftge@ff1,w,c
  9205  001CFE  5005               	movf	___ftge@ff2+1,w,c
  9206  001D00  5802               	subwfb	___ftge@ff1+1,w,c
  9207  001D02  5006               	movf	___ftge@ff2+2,w,c
  9208  001D04  5803               	subwfb	___ftge@ff1+2,w,c
  9209  001D06  B0D8               	btfsc	status,0,c
  9210  001D08  D002               	goto	i2l2855
  9211  001D0A  90D8               	bcf	status,0,c
  9212  001D0C  0012               	return	
  9213  001D0E                     i2l2855:
  9214  001D0E  80D8               	bsf	status,0,c
  9215  001D10  0012               	return	
  9216  001D12                     __end_of___ftge:
  9217                           	opt stack 0
  9218                           pclatu	equ	0xFFB
  9219                           pclath	equ	0xFFA
  9220                           tblptru	equ	0xFF8
  9221                           tblptrh	equ	0xFF7
  9222                           tblptrl	equ	0xFF6
  9223                           tablat	equ	0xFF5
  9224                           prodh	equ	0xFF4
  9225                           prodl	equ	0xFF3
  9226                           intcon	equ	0xFF2
  9227                           intcon2	equ	0xFF1
  9228                           intcon3	equ	0xFF0
  9229                           postinc0	equ	0xFEE
  9230                           fsr0h	equ	0xFEA
  9231                           fsr0l	equ	0xFE9
  9232                           wreg	equ	0xFE8
  9233                           fsr1h	equ	0xFE2
  9234                           fsr1l	equ	0xFE1
  9235                           indf2	equ	0xFDF
  9236                           postinc2	equ	0xFDE
  9237                           postdec2	equ	0xFDD
  9238                           fsr2h	equ	0xFDA
  9239                           fsr2l	equ	0xFD9
  9240                           status	equ	0xFD8
  9241                           
  9242 ;; *************** function ___altoft *****************
  9243 ;; Defined at:
  9244 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  9245 ;; Parameters:    Size  Location     Type
  9246 ;;  c               4   54[COMRAM] long 
  9247 ;; Auto vars:     Size  Location     Type
  9248 ;;  sign            1   63[COMRAM] unsigned char 
  9249 ;;  exp             1   62[COMRAM] unsigned char 
  9250 ;; Return value:  Size  Location     Type
  9251 ;;                  3   54[COMRAM] float 
  9252 ;; Registers used:
  9253 ;;		wreg, status,2, status,0, cstack
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9260 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9261 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9262 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9263 ;;Total ram usage:       10 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    1
  9266 ;; This function calls:
  9267 ;;		___ftpack
  9268 ;; This function is called by:
  9269 ;;		_floor
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273                           	psect	text50
  9274  001E0E                     __ptext50:
  9275                           	opt stack 0
  9276  001E0E                     ___altoft:
  9277                           	opt stack 20
  9278                           
  9279                           ;incstack = 0
  9280  001E0E  0E00               	movlw	0
  9281  001E10  6E40               	movwf	___altoft@sign,c
  9282  001E12  0E8E               	movlw	142
  9283  001E14  6E3F               	movwf	___altoft@exp,c
  9284  001E16  AE3A               	btfss	___altoft@c+3,7,c
  9285  001E18  D011               	goto	i2l2717
  9286  001E1A  1E3A               	comf	___altoft@c+3,f,c
  9287  001E1C  1E39               	comf	___altoft@c+2,f,c
  9288  001E1E  1E38               	comf	___altoft@c+1,f,c
  9289  001E20  6C37               	negf	___altoft@c,c
  9290  001E22  0E00               	movlw	0
  9291  001E24  2238               	addwfc	___altoft@c+1,f,c
  9292  001E26  2239               	addwfc	___altoft@c+2,f,c
  9293  001E28  223A               	addwfc	___altoft@c+3,f,c
  9294  001E2A  0E01               	movlw	1
  9295  001E2C  6E40               	movwf	___altoft@sign,c
  9296  001E2E  D006               	goto	i2l2717
  9297  001E30                     i2l2715:
  9298  001E30  90D8               	bcf	status,0,c
  9299  001E32  323A               	rrcf	___altoft@c+3,f,c
  9300  001E34  3239               	rrcf	___altoft@c+2,f,c
  9301  001E36  3238               	rrcf	___altoft@c+1,f,c
  9302  001E38  3237               	rrcf	___altoft@c,f,c
  9303  001E3A  2A3F               	incf	___altoft@exp,f,c
  9304  001E3C                     i2l2717:
  9305  001E3C  0E00               	movlw	0
  9306  001E3E  1437               	andwf	___altoft@c,w,c
  9307  001E40  6E3B               	movwf	??___altoft& (0+255),c
  9308  001E42  0E00               	movlw	0
  9309  001E44  1438               	andwf	___altoft@c+1,w,c
  9310  001E46  6E3C               	movwf	(??___altoft+1)& (0+255),c
  9311  001E48  0E00               	movlw	0
  9312  001E4A  1439               	andwf	___altoft@c+2,w,c
  9313  001E4C  6E3D               	movwf	(??___altoft+2)& (0+255),c
  9314  001E4E  0EFF               	movlw	255
  9315  001E50  143A               	andwf	___altoft@c+3,w,c
  9316  001E52  6E3E               	movwf	(??___altoft+3)& (0+255),c
  9317  001E54  503B               	movf	??___altoft,w,c
  9318  001E56  103C               	iorwf	??___altoft+1,w,c
  9319  001E58  103D               	iorwf	??___altoft+2,w,c
  9320  001E5A  103E               	iorwf	??___altoft+3,w,c
  9321  001E5C  A4D8               	btfss	status,2,c
  9322  001E5E  D7E8               	goto	i2l2715
  9323  001E60  C037  F001         	movff	___altoft@c,___ftpack@arg
  9324  001E64  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  9325  001E68  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  9326  001E6C  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  9327  001E70  C040  F005         	movff	___altoft@sign,___ftpack@sign
  9328  001E74  ECB4  F00C         	call	___ftpack	;wreg free
  9329  001E78  C001  F037         	movff	?___ftpack,?___altoft
  9330  001E7C  C002  F038         	movff	?___ftpack+1,?___altoft+1
  9331  001E80  C003  F039         	movff	?___ftpack+2,?___altoft+2
  9332  001E84  0012               	return	
  9333  001E86                     __end_of___altoft:
  9334                           	opt stack 0
  9335                           pclatu	equ	0xFFB
  9336                           pclath	equ	0xFFA
  9337                           tblptru	equ	0xFF8
  9338                           tblptrh	equ	0xFF7
  9339                           tblptrl	equ	0xFF6
  9340                           tablat	equ	0xFF5
  9341                           prodh	equ	0xFF4
  9342                           prodl	equ	0xFF3
  9343                           intcon	equ	0xFF2
  9344                           intcon2	equ	0xFF1
  9345                           intcon3	equ	0xFF0
  9346                           postinc0	equ	0xFEE
  9347                           fsr0h	equ	0xFEA
  9348                           fsr0l	equ	0xFE9
  9349                           wreg	equ	0xFE8
  9350                           fsr1h	equ	0xFE2
  9351                           fsr1l	equ	0xFE1
  9352                           indf2	equ	0xFDF
  9353                           postinc2	equ	0xFDE
  9354                           postdec2	equ	0xFDD
  9355                           fsr2h	equ	0xFDA
  9356                           fsr2l	equ	0xFD9
  9357                           status	equ	0xFD8
  9358                           
  9359 ;; *************** function _eval_poly *****************
  9360 ;; Defined at:
  9361 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;  x               3   39[COMRAM] float 
  9364 ;;  d               2   42[COMRAM] PTR const 
  9365 ;;		 -> log@coeff(27), exp@coeff(30), 
  9366 ;;  n               2   44[COMRAM] int 
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;  res             3   48[COMRAM] int 
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  3   39[COMRAM] int 
  9371 ;; Registers used:
  9372 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9378 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;Total ram usage:       12 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    2
  9385 ;; This function calls:
  9386 ;;		___ftadd
  9387 ;;		___ftmul
  9388 ;;		i2___wmul
  9389 ;; This function is called by:
  9390 ;;		_exp
  9391 ;;		_log
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           	psect	text51
  9396  001718                     __ptext51:
  9397                           	opt stack 0
  9398  001718                     _eval_poly:
  9399                           	opt stack 20
  9400                           
  9401                           ;incstack = 0
  9402  001718  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
  9403  00171C  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
  9404  001720  0E00               	movlw	0
  9405  001722  6E04               	movwf	i2___wmul@multiplicand+1,c
  9406  001724  0E03               	movlw	3
  9407  001726  6E03               	movwf	i2___wmul@multiplicand,c
  9408  001728  ECBA  F011         	call	i2___wmul	;wreg free
  9409  00172C  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  9410  001730  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  9411  001734  5001               	movf	?i2___wmul,w,c
  9412  001736  262F               	addwf	??_eval_poly,f,c
  9413  001738  5002               	movf	?i2___wmul+1,w,c
  9414  00173A  2230               	addwfc	??_eval_poly+1,f,c
  9415  00173C  C02F  FFF6         	movff	??_eval_poly,tblptrl
  9416  001740  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  9417  001744                     	if	0	;tblptru may be non-zero
  9418  001744                     	endif
  9419  001744                     	if	0	;tblptru may be non-zero
  9420  001744                     	endif
  9421  001744  0009               	tblrd		*+
  9422  001746  CFF5 F031          	movff	tablat,eval_poly@res
  9423  00174A  0009               	tblrd		*+
  9424  00174C  CFF5 F032          	movff	tablat,eval_poly@res+1
  9425  001750  000A               	tblrd		*-
  9426  001752  CFF5 F033          	movff	tablat,eval_poly@res+2
  9427  001756  D03E               	goto	i2l3047
  9428  001758                     i2l3045:
  9429  001758  C031  F010         	movff	eval_poly@res,___ftmul@f2
  9430  00175C  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  9431  001760  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  9432  001764  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  9433  001768  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  9434  00176C  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  9435  001770  ECC7  F009         	call	___ftmul	;wreg free
  9436  001774  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9437  001778  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9438  00177C  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9439  001780  0E00               	movlw	0
  9440  001782  6E04               	movwf	i2___wmul@multiplicand+1,c
  9441  001784  0E03               	movlw	3
  9442  001786  6E03               	movwf	i2___wmul@multiplicand,c
  9443  001788  062D               	decf	eval_poly@n,f,c
  9444  00178A  A0D8               	btfss	status,0,c
  9445  00178C  062E               	decf	eval_poly@n+1,f,c
  9446  00178E  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
  9447  001792  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
  9448  001796  ECBA  F011         	call	i2___wmul	;wreg free
  9449  00179A  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  9450  00179E  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  9451  0017A2  5001               	movf	?i2___wmul,w,c
  9452  0017A4  262F               	addwf	??_eval_poly,f,c
  9453  0017A6  5002               	movf	?i2___wmul+1,w,c
  9454  0017A8  2230               	addwfc	??_eval_poly+1,f,c
  9455  0017AA  C02F  FFF6         	movff	??_eval_poly,tblptrl
  9456  0017AE  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  9457  0017B2                     	if	0	;tblptru may be non-zero
  9458  0017B2                     	endif
  9459  0017B2                     	if	0	;tblptru may be non-zero
  9460  0017B2                     	endif
  9461  0017B2  0009               	tblrd		*+
  9462  0017B4  CFF5 F01F          	movff	tablat,___ftadd@f2
  9463  0017B8  0009               	tblrd		*+
  9464  0017BA  CFF5 F020          	movff	tablat,___ftadd@f2+1
  9465  0017BE  000A               	tblrd		*-
  9466  0017C0  CFF5 F021          	movff	tablat,___ftadd@f2+2
  9467  0017C4  EC8A  F005         	call	___ftadd	;wreg free
  9468  0017C8  C01C  F031         	movff	?___ftadd,eval_poly@res
  9469  0017CC  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  9470  0017D0  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  9471  0017D4                     i2l3047:
  9472  0017D4  502D               	movf	eval_poly@n,w,c
  9473  0017D6  102E               	iorwf	eval_poly@n+1,w,c
  9474  0017D8  A4D8               	btfss	status,2,c
  9475  0017DA  D7BE               	goto	i2l3045
  9476  0017DC  C031  F028         	movff	eval_poly@res,?_eval_poly
  9477  0017E0  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  9478  0017E4  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  9479  0017E8  0012               	return		;funcret
  9480  0017EA                     __end_of_eval_poly:
  9481                           	opt stack 0
  9482                           pclatu	equ	0xFFB
  9483                           pclath	equ	0xFFA
  9484                           tblptru	equ	0xFF8
  9485                           tblptrh	equ	0xFF7
  9486                           tblptrl	equ	0xFF6
  9487                           tablat	equ	0xFF5
  9488                           prodh	equ	0xFF4
  9489                           prodl	equ	0xFF3
  9490                           intcon	equ	0xFF2
  9491                           intcon2	equ	0xFF1
  9492                           intcon3	equ	0xFF0
  9493                           postinc0	equ	0xFEE
  9494                           fsr0h	equ	0xFEA
  9495                           fsr0l	equ	0xFE9
  9496                           wreg	equ	0xFE8
  9497                           fsr1h	equ	0xFE2
  9498                           fsr1l	equ	0xFE1
  9499                           indf2	equ	0xFDF
  9500                           postinc2	equ	0xFDE
  9501                           postdec2	equ	0xFDD
  9502                           fsr2h	equ	0xFDA
  9503                           fsr2l	equ	0xFD9
  9504                           status	equ	0xFD8
  9505                           
  9506 ;; *************** function i2___wmul *****************
  9507 ;; Defined at:
  9508 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9509 ;; Parameters:    Size  Location     Type
  9510 ;;  multiplier      2    0[COMRAM] unsigned int 
  9511 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9512 ;; Auto vars:     Size  Location     Type
  9513 ;;  __wmul          2    4[COMRAM] unsigned int 
  9514 ;; Return value:  Size  Location     Type
  9515 ;;                  2    0[COMRAM] unsigned int 
  9516 ;; Registers used:
  9517 ;;		wreg, status,2, status,0, prodl, prodh
  9518 ;; Tracked objects:
  9519 ;;		On entry : 0/0
  9520 ;;		On exit  : 0/0
  9521 ;;		Unchanged: 0/0
  9522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9523 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9526 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9527 ;;Total ram usage:        6 bytes
  9528 ;; Hardware stack levels used:    1
  9529 ;; This function calls:
  9530 ;;		Nothing
  9531 ;; This function is called by:
  9532 ;;		_isr
  9533 ;;		_eval_poly
  9534 ;;		i2_printf
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           	psect	text52
  9539  002374                     __ptext52:
  9540                           	opt stack 0
  9541  002374                     i2___wmul:
  9542                           	opt stack 24
  9543                           
  9544                           ;incstack = 0
  9545  002374  5001               	movf	i2___wmul@multiplier,w,c
  9546  002376  0203               	mulwf	i2___wmul@multiplicand,c
  9547  002378  CFF3 F005          	movff	prodl,i2___wmul@product
  9548  00237C  CFF4 F006          	movff	prodh,i2___wmul@product+1
  9549  002380  5001               	movf	i2___wmul@multiplier,w,c
  9550  002382  0204               	mulwf	i2___wmul@multiplicand+1,c
  9551  002384  50F3               	movf	prodl,w,c
  9552  002386  2606               	addwf	i2___wmul@product+1,f,c
  9553  002388  5002               	movf	i2___wmul@multiplier+1,w,c
  9554  00238A  0203               	mulwf	i2___wmul@multiplicand,c
  9555  00238C  50F3               	movf	prodl,w,c
  9556  00238E  2606               	addwf	i2___wmul@product+1,f,c
  9557  002390  C005  F001         	movff	i2___wmul@product,?i2___wmul
  9558  002394  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  9559  002398  0012               	return	
  9560  00239A                     __end_ofi2___wmul:
  9561                           	opt stack 0
  9562                           pclatu	equ	0xFFB
  9563                           pclath	equ	0xFFA
  9564                           tblptru	equ	0xFF8
  9565                           tblptrh	equ	0xFF7
  9566                           tblptrl	equ	0xFF6
  9567                           tablat	equ	0xFF5
  9568                           prodh	equ	0xFF4
  9569                           prodl	equ	0xFF3
  9570                           intcon	equ	0xFF2
  9571                           intcon2	equ	0xFF1
  9572                           intcon3	equ	0xFF0
  9573                           postinc0	equ	0xFEE
  9574                           fsr0h	equ	0xFEA
  9575                           fsr0l	equ	0xFE9
  9576                           wreg	equ	0xFE8
  9577                           fsr1h	equ	0xFE2
  9578                           fsr1l	equ	0xFE1
  9579                           indf2	equ	0xFDF
  9580                           postinc2	equ	0xFDE
  9581                           postdec2	equ	0xFDD
  9582                           fsr2h	equ	0xFDA
  9583                           fsr2l	equ	0xFD9
  9584                           status	equ	0xFD8
  9585                           
  9586 ;; *************** function ___ftmul *****************
  9587 ;; Defined at:
  9588 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  9589 ;; Parameters:    Size  Location     Type
  9590 ;;  f1              3   12[COMRAM] float 
  9591 ;;  f2              3   15[COMRAM] float 
  9592 ;; Auto vars:     Size  Location     Type
  9593 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  9594 ;;  sign            1   26[COMRAM] unsigned char 
  9595 ;;  cntr            1   25[COMRAM] unsigned char 
  9596 ;;  exp             1   21[COMRAM] unsigned char 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  3   12[COMRAM] float 
  9599 ;; Registers used:
  9600 ;;		wreg, status,2, status,0, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9606 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9609 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;Total ram usage:       15 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    1
  9613 ;; This function calls:
  9614 ;;		___ftpack
  9615 ;; This function is called by:
  9616 ;;		_dec_to_hex
  9617 ;;		_pow
  9618 ;;		_exp
  9619 ;;		_log
  9620 ;;		_eval_poly
  9621 ;; This function uses a non-reentrant model
  9622 ;;
  9623                           
  9624                           	psect	text53
  9625  00138E                     __ptext53:
  9626                           	opt stack 0
  9627  00138E                     ___ftmul:
  9628                           	opt stack 20
  9629                           
  9630                           ;incstack = 0
  9631  00138E  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  9632  001392  6A14               	clrf	(??___ftmul+1)& (0+255),c
  9633  001394  6A15               	clrf	(??___ftmul+2)& (0+255),c
  9634  001396  340E               	rlcf	___ftmul@f1+1,w,c
  9635  001398  3613               	rlcf	??___ftmul& (0+255),f,c
  9636  00139A  E301               	bnc	u222_41
  9637  00139C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  9638  00139E                     u222_41:
  9639  00139E  5013               	movf	??___ftmul,w,c
  9640  0013A0  6E16               	movwf	___ftmul@exp,c
  9641  0013A2  5016               	movf	___ftmul@exp,w,c
  9642  0013A4  A4D8               	btfss	status,2,c
  9643  0013A6  D007               	goto	i2l2799
  9644  0013A8  0E00               	movlw	0
  9645  0013AA  6E0D               	movwf	?___ftmul,c
  9646  0013AC  0E00               	movlw	0
  9647  0013AE  6E0E               	movwf	?___ftmul+1,c
  9648  0013B0  0E00               	movlw	0
  9649  0013B2  6E0F               	movwf	?___ftmul+2,c
  9650  0013B4  0012               	return	
  9651  0013B6                     i2l2799:
  9652  0013B6  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  9653  0013BA  6A14               	clrf	(??___ftmul+1)& (0+255),c
  9654  0013BC  6A15               	clrf	(??___ftmul+2)& (0+255),c
  9655  0013BE  3411               	rlcf	___ftmul@f2+1,w,c
  9656  0013C0  3613               	rlcf	??___ftmul& (0+255),f,c
  9657  0013C2  E301               	bnc	u224_41
  9658  0013C4  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  9659  0013C6                     u224_41:
  9660  0013C6  5013               	movf	??___ftmul,w,c
  9661  0013C8  6E1B               	movwf	___ftmul@sign,c
  9662  0013CA  501B               	movf	___ftmul@sign,w,c
  9663  0013CC  A4D8               	btfss	status,2,c
  9664  0013CE  D007               	goto	i2l2805
  9665  0013D0  0E00               	movlw	0
  9666  0013D2  6E0D               	movwf	?___ftmul,c
  9667  0013D4  0E00               	movlw	0
  9668  0013D6  6E0E               	movwf	?___ftmul+1,c
  9669  0013D8  0E00               	movlw	0
  9670  0013DA  6E0F               	movwf	?___ftmul+2,c
  9671  0013DC  0012               	return	
  9672  0013DE                     i2l2805:
  9673  0013DE  501B               	movf	___ftmul@sign,w,c
  9674  0013E0  0F7B               	addlw	123
  9675  0013E2  2616               	addwf	___ftmul@exp,f,c
  9676  0013E4  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  9677  0013E8  5012               	movf	___ftmul@f2+2,w,c
  9678  0013EA  1A1B               	xorwf	___ftmul@sign,f,c
  9679  0013EC  0E80               	movlw	128
  9680  0013EE  161B               	andwf	___ftmul@sign,f,c
  9681  0013F0  8E0E               	bsf	___ftmul@f1+1,7,c
  9682  0013F2  8E11               	bsf	___ftmul@f2+1,7,c
  9683  0013F4  0EFF               	movlw	255
  9684  0013F6  1610               	andwf	___ftmul@f2,f,c
  9685  0013F8  0EFF               	movlw	255
  9686  0013FA  1611               	andwf	___ftmul@f2+1,f,c
  9687  0013FC  0E00               	movlw	0
  9688  0013FE  1612               	andwf	___ftmul@f2+2,f,c
  9689  001400  0E00               	movlw	0
  9690  001402  6E17               	movwf	___ftmul@f3_as_product,c
  9691  001404  0E00               	movlw	0
  9692  001406  6E18               	movwf	___ftmul@f3_as_product+1,c
  9693  001408  0E00               	movlw	0
  9694  00140A  6E19               	movwf	___ftmul@f3_as_product+2,c
  9695  00140C  0E07               	movlw	7
  9696  00140E  6E1A               	movwf	___ftmul@cntr,c
  9697  001410                     i2l2819:
  9698  001410  A00D               	btfss	___ftmul@f1,0,c
  9699  001412  D006               	goto	i2l2823
  9700  001414  5010               	movf	___ftmul@f2,w,c
  9701  001416  2617               	addwf	___ftmul@f3_as_product,f,c
  9702  001418  5011               	movf	___ftmul@f2+1,w,c
  9703  00141A  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  9704  00141C  5012               	movf	___ftmul@f2+2,w,c
  9705  00141E  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  9706  001420                     i2l2823:
  9707  001420  90D8               	bcf	status,0,c
  9708  001422  320F               	rrcf	___ftmul@f1+2,f,c
  9709  001424  320E               	rrcf	___ftmul@f1+1,f,c
  9710  001426  320D               	rrcf	___ftmul@f1,f,c
  9711  001428  90D8               	bcf	status,0,c
  9712  00142A  3610               	rlcf	___ftmul@f2,f,c
  9713  00142C  3611               	rlcf	___ftmul@f2+1,f,c
  9714  00142E  3612               	rlcf	___ftmul@f2+2,f,c
  9715  001430  2E1A               	decfsz	___ftmul@cntr,f,c
  9716  001432  D7EE               	goto	i2l2819
  9717  001434  0E09               	movlw	9
  9718  001436  6E1A               	movwf	___ftmul@cntr,c
  9719  001438                     i2l2829:
  9720  001438  A00D               	btfss	___ftmul@f1,0,c
  9721  00143A  D006               	goto	i2l2833
  9722  00143C  5010               	movf	___ftmul@f2,w,c
  9723  00143E  2617               	addwf	___ftmul@f3_as_product,f,c
  9724  001440  5011               	movf	___ftmul@f2+1,w,c
  9725  001442  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  9726  001444  5012               	movf	___ftmul@f2+2,w,c
  9727  001446  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  9728  001448                     i2l2833:
  9729  001448  90D8               	bcf	status,0,c
  9730  00144A  320F               	rrcf	___ftmul@f1+2,f,c
  9731  00144C  320E               	rrcf	___ftmul@f1+1,f,c
  9732  00144E  320D               	rrcf	___ftmul@f1,f,c
  9733  001450  90D8               	bcf	status,0,c
  9734  001452  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  9735  001454  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  9736  001456  3217               	rrcf	___ftmul@f3_as_product,f,c
  9737  001458  2E1A               	decfsz	___ftmul@cntr,f,c
  9738  00145A  D7EE               	goto	i2l2829
  9739  00145C  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9740  001460  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9741  001464  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9742  001468  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  9743  00146C  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  9744  001470  ECB4  F00C         	call	___ftpack	;wreg free
  9745  001474  C001  F00D         	movff	?___ftpack,?___ftmul
  9746  001478  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  9747  00147C  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  9748  001480  0012               	return	
  9749  001482                     __end_of___ftmul:
  9750                           	opt stack 0
  9751                           pclatu	equ	0xFFB
  9752                           pclath	equ	0xFFA
  9753                           tblptru	equ	0xFF8
  9754                           tblptrh	equ	0xFF7
  9755                           tblptrl	equ	0xFF6
  9756                           tablat	equ	0xFF5
  9757                           prodh	equ	0xFF4
  9758                           prodl	equ	0xFF3
  9759                           intcon	equ	0xFF2
  9760                           intcon2	equ	0xFF1
  9761                           intcon3	equ	0xFF0
  9762                           postinc0	equ	0xFEE
  9763                           fsr0h	equ	0xFEA
  9764                           fsr0l	equ	0xFE9
  9765                           wreg	equ	0xFE8
  9766                           fsr1h	equ	0xFE2
  9767                           fsr1l	equ	0xFE1
  9768                           indf2	equ	0xFDF
  9769                           postinc2	equ	0xFDE
  9770                           postdec2	equ	0xFDD
  9771                           fsr2h	equ	0xFDA
  9772                           fsr2l	equ	0xFD9
  9773                           status	equ	0xFD8
  9774                           
  9775 ;; *************** function ___ftsub *****************
  9776 ;; Defined at:
  9777 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;  f1              3   39[COMRAM] float 
  9780 ;;  f2              3   42[COMRAM] float 
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;		None
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  3   39[COMRAM] float 
  9785 ;; Registers used:
  9786 ;;		wreg, status,2, status,0, cstack
  9787 ;; Tracked objects:
  9788 ;;		On entry : 0/0
  9789 ;;		On exit  : 0/0
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9792 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9795 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;Total ram usage:        6 bytes
  9797 ;; Hardware stack levels used:    1
  9798 ;; Hardware stack levels required when called:    2
  9799 ;; This function calls:
  9800 ;;		___ftadd
  9801 ;; This function is called by:
  9802 ;;		_exp
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           	psect	text54
  9807  00219E                     __ptext54:
  9808                           	opt stack 0
  9809  00219E                     ___ftsub:
  9810                           	opt stack 20
  9811                           
  9812                           ;incstack = 0
  9813  00219E  502B               	movf	___ftsub@f2,w,c
  9814  0021A0  102C               	iorwf	___ftsub@f2+1,w,c
  9815  0021A2  102D               	iorwf	___ftsub@f2+2,w,c
  9816  0021A4  B4D8               	btfsc	status,2,c
  9817  0021A6  D006               	goto	i2l2999
  9818  0021A8  0E00               	movlw	0
  9819  0021AA  1A2B               	xorwf	___ftsub@f2,f,c
  9820  0021AC  0E00               	movlw	0
  9821  0021AE  1A2C               	xorwf	___ftsub@f2+1,f,c
  9822  0021B0  0E80               	movlw	128
  9823  0021B2  1A2D               	xorwf	___ftsub@f2+2,f,c
  9824  0021B4                     i2l2999:
  9825  0021B4  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  9826  0021B8  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  9827  0021BC  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  9828  0021C0  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  9829  0021C4  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  9830  0021C8  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  9831  0021CC  EC8A  F005         	call	___ftadd	;wreg free
  9832  0021D0  C01C  F028         	movff	?___ftadd,?___ftsub
  9833  0021D4  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  9834  0021D8  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  9835  0021DC  0012               	return	
  9836  0021DE                     __end_of___ftsub:
  9837                           	opt stack 0
  9838                           pclatu	equ	0xFFB
  9839                           pclath	equ	0xFFA
  9840                           tblptru	equ	0xFF8
  9841                           tblptrh	equ	0xFF7
  9842                           tblptrl	equ	0xFF6
  9843                           tablat	equ	0xFF5
  9844                           prodh	equ	0xFF4
  9845                           prodl	equ	0xFF3
  9846                           intcon	equ	0xFF2
  9847                           intcon2	equ	0xFF1
  9848                           intcon3	equ	0xFF0
  9849                           postinc0	equ	0xFEE
  9850                           fsr0h	equ	0xFEA
  9851                           fsr0l	equ	0xFE9
  9852                           wreg	equ	0xFE8
  9853                           fsr1h	equ	0xFE2
  9854                           fsr1l	equ	0xFE1
  9855                           indf2	equ	0xFDF
  9856                           postinc2	equ	0xFDE
  9857                           postdec2	equ	0xFDD
  9858                           fsr2h	equ	0xFDA
  9859                           fsr2l	equ	0xFD9
  9860                           status	equ	0xFD8
  9861                           
  9862 ;; *************** function ___ftadd *****************
  9863 ;; Defined at:
  9864 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;  f1              3   27[COMRAM] float 
  9867 ;;  f2              3   30[COMRAM] float 
  9868 ;; Auto vars:     Size  Location     Type
  9869 ;;  exp1            1   38[COMRAM] unsigned char 
  9870 ;;  exp2            1   37[COMRAM] unsigned char 
  9871 ;;  sign            1   36[COMRAM] unsigned char 
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  3   27[COMRAM] float 
  9874 ;; Registers used:
  9875 ;;		wreg, status,2, status,0, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9881 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9882 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;Total ram usage:       12 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    1
  9888 ;; This function calls:
  9889 ;;		___ftpack
  9890 ;; This function is called by:
  9891 ;;		_dec_to_hex
  9892 ;;		___ftsub
  9893 ;;		_floor
  9894 ;;		_log
  9895 ;;		_eval_poly
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text55
  9900  000B14                     __ptext55:
  9901                           	opt stack 0
  9902  000B14                     ___ftadd:
  9903                           	opt stack 20
  9904                           
  9905                           ;incstack = 0
  9906  000B14  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  9907  000B18  6A23               	clrf	(??___ftadd+1)& (0+255),c
  9908  000B1A  6A24               	clrf	(??___ftadd+2)& (0+255),c
  9909  000B1C  341D               	rlcf	___ftadd@f1+1,w,c
  9910  000B1E  3622               	rlcf	??___ftadd& (0+255),f,c
  9911  000B20  E301               	bnc	u201_41
  9912  000B22  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  9913  000B24                     u201_41:
  9914  000B24  5022               	movf	??___ftadd,w,c
  9915  000B26  6E27               	movwf	___ftadd@exp1,c
  9916  000B28  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  9917  000B2C  6A23               	clrf	(??___ftadd+1)& (0+255),c
  9918  000B2E  6A24               	clrf	(??___ftadd+2)& (0+255),c
  9919  000B30  3420               	rlcf	___ftadd@f2+1,w,c
  9920  000B32  3622               	rlcf	??___ftadd& (0+255),f,c
  9921  000B34  E301               	bnc	u202_41
  9922  000B36  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  9923  000B38                     u202_41:
  9924  000B38  5022               	movf	??___ftadd,w,c
  9925  000B3A  6E26               	movwf	___ftadd@exp2,c
  9926  000B3C  5027               	movf	___ftadd@exp1,w,c
  9927  000B3E  B4D8               	btfsc	status,2,c
  9928  000B40  D00B               	goto	i2l633
  9929  000B42  5026               	movf	___ftadd@exp2,w,c
  9930  000B44  5C27               	subwf	___ftadd@exp1,w,c
  9931  000B46  B0D8               	btfsc	status,0,c
  9932  000B48  D00E               	goto	i2l2731
  9933  000B4A  5027               	movf	___ftadd@exp1,w,c
  9934  000B4C  0800               	sublw	0
  9935  000B4E  2426               	addwf	___ftadd@exp2,w,c
  9936  000B50  6E22               	movwf	??___ftadd& (0+255),c
  9937  000B52  0E18               	movlw	24
  9938  000B54  6422               	cpfsgt	??___ftadd,c
  9939  000B56  D007               	goto	i2l2731
  9940  000B58                     i2l633:
  9941  000B58  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  9942  000B5C  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  9943  000B60  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  9944  000B64  0012               	return	
  9945  000B66                     i2l2731:
  9946  000B66  5026               	movf	___ftadd@exp2,w,c
  9947  000B68  B4D8               	btfsc	status,2,c
  9948  000B6A  D00B               	goto	i2l637
  9949  000B6C  5027               	movf	___ftadd@exp1,w,c
  9950  000B6E  5C26               	subwf	___ftadd@exp2,w,c
  9951  000B70  B0D8               	btfsc	status,0,c
  9952  000B72  D00E               	goto	i2l2737
  9953  000B74  5026               	movf	___ftadd@exp2,w,c
  9954  000B76  0800               	sublw	0
  9955  000B78  2427               	addwf	___ftadd@exp1,w,c
  9956  000B7A  6E22               	movwf	??___ftadd& (0+255),c
  9957  000B7C  0E18               	movlw	24
  9958  000B7E  6422               	cpfsgt	??___ftadd,c
  9959  000B80  D007               	goto	i2l2737
  9960  000B82                     i2l637:
  9961  000B82  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  9962  000B86  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  9963  000B8A  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  9964  000B8E  0012               	return	
  9965  000B90                     i2l2737:
  9966  000B90  0E06               	movlw	6
  9967  000B92  6E25               	movwf	___ftadd@sign,c
  9968  000B94  BE1E               	btfsc	___ftadd@f1+2,7,c
  9969  000B96  8E25               	bsf	___ftadd@sign,7,c
  9970  000B98  BE21               	btfsc	___ftadd@f2+2,7,c
  9971  000B9A  8C25               	bsf	___ftadd@sign,6,c
  9972  000B9C  8E1D               	bsf	___ftadd@f1+1,7,c
  9973  000B9E  0EFF               	movlw	255
  9974  000BA0  161C               	andwf	___ftadd@f1,f,c
  9975  000BA2  0EFF               	movlw	255
  9976  000BA4  161D               	andwf	___ftadd@f1+1,f,c
  9977  000BA6  0E00               	movlw	0
  9978  000BA8  161E               	andwf	___ftadd@f1+2,f,c
  9979  000BAA  8E20               	bsf	___ftadd@f2+1,7,c
  9980  000BAC  0EFF               	movlw	255
  9981  000BAE  161F               	andwf	___ftadd@f2,f,c
  9982  000BB0  0EFF               	movlw	255
  9983  000BB2  1620               	andwf	___ftadd@f2+1,f,c
  9984  000BB4  0E00               	movlw	0
  9985  000BB6  1621               	andwf	___ftadd@f2+2,f,c
  9986  000BB8  5026               	movf	___ftadd@exp2,w,c
  9987  000BBA  5C27               	subwf	___ftadd@exp1,w,c
  9988  000BBC  B0D8               	btfsc	status,0,c
  9989  000BBE  D01B               	goto	i2l2763
  9990  000BC0                     i2l2753:
  9991  000BC0  90D8               	bcf	status,0,c
  9992  000BC2  361F               	rlcf	___ftadd@f2,f,c
  9993  000BC4  3620               	rlcf	___ftadd@f2+1,f,c
  9994  000BC6  3621               	rlcf	___ftadd@f2+2,f,c
  9995  000BC8  0626               	decf	___ftadd@exp2,f,c
  9996  000BCA  5027               	movf	___ftadd@exp1,w,c
  9997  000BCC  1826               	xorwf	___ftadd@exp2,w,c
  9998  000BCE  B4D8               	btfsc	status,2,c
  9999  000BD0  D00D               	goto	i2l2761
 10000  000BD2  0625               	decf	___ftadd@sign,f,c
 10001  000BD4  C025  F022         	movff	___ftadd@sign,??___ftadd
 10002  000BD8  0E07               	movlw	7
 10003  000BDA  1622               	andwf	??___ftadd,f,c
 10004  000BDC  B4D8               	btfsc	status,2,c
 10005  000BDE  D006               	goto	i2l2761
 10006  000BE0  D7EF               	goto	i2l2753
 10007  000BE2                     i2l2759:
 10008  000BE2  90D8               	bcf	status,0,c
 10009  000BE4  321E               	rrcf	___ftadd@f1+2,f,c
 10010  000BE6  321D               	rrcf	___ftadd@f1+1,f,c
 10011  000BE8  321C               	rrcf	___ftadd@f1,f,c
 10012  000BEA  2A27               	incf	___ftadd@exp1,f,c
 10013  000BEC                     i2l2761:
 10014  000BEC  5026               	movf	___ftadd@exp2,w,c
 10015  000BEE  1827               	xorwf	___ftadd@exp1,w,c
 10016  000BF0  B4D8               	btfsc	status,2,c
 10017  000BF2  D01F               	goto	i2l648
 10018  000BF4  D7F6               	goto	i2l2759
 10019  000BF6                     i2l2763:
 10020  000BF6  5027               	movf	___ftadd@exp1,w,c
 10021  000BF8  5C26               	subwf	___ftadd@exp2,w,c
 10022  000BFA  B0D8               	btfsc	status,0,c
 10023  000BFC  D01A               	goto	i2l648
 10024  000BFE                     i2l2765:
 10025  000BFE  90D8               	bcf	status,0,c
 10026  000C00  361C               	rlcf	___ftadd@f1,f,c
 10027  000C02  361D               	rlcf	___ftadd@f1+1,f,c
 10028  000C04  361E               	rlcf	___ftadd@f1+2,f,c
 10029  000C06  0627               	decf	___ftadd@exp1,f,c
 10030  000C08  5027               	movf	___ftadd@exp1,w,c
 10031  000C0A  1826               	xorwf	___ftadd@exp2,w,c
 10032  000C0C  B4D8               	btfsc	status,2,c
 10033  000C0E  D00D               	goto	i2l2773
 10034  000C10  0625               	decf	___ftadd@sign,f,c
 10035  000C12  C025  F022         	movff	___ftadd@sign,??___ftadd
 10036  000C16  0E07               	movlw	7
 10037  000C18  1622               	andwf	??___ftadd,f,c
 10038  000C1A  B4D8               	btfsc	status,2,c
 10039  000C1C  D006               	goto	i2l2773
 10040  000C1E  D7EF               	goto	i2l2765
 10041  000C20                     i2l2771:
 10042  000C20  90D8               	bcf	status,0,c
 10043  000C22  3221               	rrcf	___ftadd@f2+2,f,c
 10044  000C24  3220               	rrcf	___ftadd@f2+1,f,c
 10045  000C26  321F               	rrcf	___ftadd@f2,f,c
 10046  000C28  2A26               	incf	___ftadd@exp2,f,c
 10047  000C2A                     i2l2773:
 10048  000C2A  5026               	movf	___ftadd@exp2,w,c
 10049  000C2C  1827               	xorwf	___ftadd@exp1,w,c
 10050  000C2E  A4D8               	btfss	status,2,c
 10051  000C30  D7F7               	goto	i2l2771
 10052  000C32                     i2l648:
 10053  000C32  AE25               	btfss	___ftadd@sign,7,c
 10054  000C34  D00C               	goto	i2l657
 10055  000C36  0EFF               	movlw	255
 10056  000C38  1A1C               	xorwf	___ftadd@f1,f,c
 10057  000C3A  0EFF               	movlw	255
 10058  000C3C  1A1D               	xorwf	___ftadd@f1+1,f,c
 10059  000C3E  0EFF               	movlw	255
 10060  000C40  1A1E               	xorwf	___ftadd@f1+2,f,c
 10061  000C42  0E01               	movlw	1
 10062  000C44  261C               	addwf	___ftadd@f1,f,c
 10063  000C46  0E00               	movlw	0
 10064  000C48  221D               	addwfc	___ftadd@f1+1,f,c
 10065  000C4A  0E00               	movlw	0
 10066  000C4C  221E               	addwfc	___ftadd@f1+2,f,c
 10067  000C4E                     i2l657:
 10068  000C4E  AC25               	btfss	___ftadd@sign,6,c
 10069  000C50  D00C               	goto	i2l2779
 10070  000C52  0EFF               	movlw	255
 10071  000C54  1A1F               	xorwf	___ftadd@f2,f,c
 10072  000C56  0EFF               	movlw	255
 10073  000C58  1A20               	xorwf	___ftadd@f2+1,f,c
 10074  000C5A  0EFF               	movlw	255
 10075  000C5C  1A21               	xorwf	___ftadd@f2+2,f,c
 10076  000C5E  0E01               	movlw	1
 10077  000C60  261F               	addwf	___ftadd@f2,f,c
 10078  000C62  0E00               	movlw	0
 10079  000C64  2220               	addwfc	___ftadd@f2+1,f,c
 10080  000C66  0E00               	movlw	0
 10081  000C68  2221               	addwfc	___ftadd@f2+2,f,c
 10082  000C6A                     i2l2779:
 10083  000C6A  0E00               	movlw	0
 10084  000C6C  6E25               	movwf	___ftadd@sign,c
 10085  000C6E  501C               	movf	___ftadd@f1,w,c
 10086  000C70  261F               	addwf	___ftadd@f2,f,c
 10087  000C72  501D               	movf	___ftadd@f1+1,w,c
 10088  000C74  2220               	addwfc	___ftadd@f2+1,f,c
 10089  000C76  501E               	movf	___ftadd@f1+2,w,c
 10090  000C78  2221               	addwfc	___ftadd@f2+2,f,c
 10091  000C7A  AE21               	btfss	___ftadd@f2+2,7,c
 10092  000C7C  D00E               	goto	i2l2789
 10093  000C7E  0EFF               	movlw	255
 10094  000C80  1A1F               	xorwf	___ftadd@f2,f,c
 10095  000C82  0EFF               	movlw	255
 10096  000C84  1A20               	xorwf	___ftadd@f2+1,f,c
 10097  000C86  0EFF               	movlw	255
 10098  000C88  1A21               	xorwf	___ftadd@f2+2,f,c
 10099  000C8A  0E01               	movlw	1
 10100  000C8C  261F               	addwf	___ftadd@f2,f,c
 10101  000C8E  0E00               	movlw	0
 10102  000C90  2220               	addwfc	___ftadd@f2+1,f,c
 10103  000C92  0E00               	movlw	0
 10104  000C94  2221               	addwfc	___ftadd@f2+2,f,c
 10105  000C96  0E01               	movlw	1
 10106  000C98  6E25               	movwf	___ftadd@sign,c
 10107  000C9A                     i2l2789:
 10108  000C9A  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 10109  000C9E  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 10110  000CA2  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 10111  000CA6  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 10112  000CAA  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 10113  000CAE  ECB4  F00C         	call	___ftpack	;wreg free
 10114  000CB2  C001  F01C         	movff	?___ftpack,?___ftadd
 10115  000CB6  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 10116  000CBA  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 10117  000CBE  0012               	return	
 10118  000CC0                     __end_of___ftadd:
 10119                           	opt stack 0
 10120                           pclatu	equ	0xFFB
 10121                           pclath	equ	0xFFA
 10122                           tblptru	equ	0xFF8
 10123                           tblptrh	equ	0xFF7
 10124                           tblptrl	equ	0xFF6
 10125                           tablat	equ	0xFF5
 10126                           prodh	equ	0xFF4
 10127                           prodl	equ	0xFF3
 10128                           intcon	equ	0xFF2
 10129                           intcon2	equ	0xFF1
 10130                           intcon3	equ	0xFF0
 10131                           postinc0	equ	0xFEE
 10132                           fsr0h	equ	0xFEA
 10133                           fsr0l	equ	0xFE9
 10134                           wreg	equ	0xFE8
 10135                           fsr1h	equ	0xFE2
 10136                           fsr1l	equ	0xFE1
 10137                           indf2	equ	0xFDF
 10138                           postinc2	equ	0xFDE
 10139                           postdec2	equ	0xFDD
 10140                           fsr2h	equ	0xFDA
 10141                           fsr2l	equ	0xFD9
 10142                           status	equ	0xFD8
 10143                           
 10144 ;; *************** function ___ftneg *****************
 10145 ;; Defined at:
 10146 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;  f1              3    0[COMRAM] float 
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;		None
 10151 ;; Return value:  Size  Location     Type
 10152 ;;                  3    0[COMRAM] float 
 10153 ;; Registers used:
 10154 ;;		wreg, status,2, status,0
 10155 ;; Tracked objects:
 10156 ;;		On entry : 0/0
 10157 ;;		On exit  : 0/0
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10160 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10164 ;;Total ram usage:        3 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; This function calls:
 10167 ;;		Nothing
 10168 ;; This function is called by:
 10169 ;;		_pow
 10170 ;;		_exp
 10171 ;; This function uses a non-reentrant model
 10172 ;;
 10173                           
 10174                           	psect	text56
 10175  00239A                     __ptext56:
 10176                           	opt stack 0
 10177  00239A                     ___ftneg:
 10178                           	opt stack 22
 10179                           
 10180                           ;incstack = 0
 10181  00239A  5001               	movf	___ftneg@f1,w,c
 10182  00239C  1002               	iorwf	___ftneg@f1+1,w,c
 10183  00239E  1003               	iorwf	___ftneg@f1+2,w,c
 10184  0023A0  B4D8               	btfsc	status,2,c
 10185  0023A2  D006               	goto	i2l690
 10186  0023A4  0E00               	movlw	0
 10187  0023A6  1A01               	xorwf	___ftneg@f1,f,c
 10188  0023A8  0E00               	movlw	0
 10189  0023AA  1A02               	xorwf	___ftneg@f1+1,f,c
 10190  0023AC  0E80               	movlw	128
 10191  0023AE  1A03               	xorwf	___ftneg@f1+2,f,c
 10192  0023B0                     i2l690:
 10193  0023B0  C001  F001         	movff	___ftneg@f1,?___ftneg
 10194  0023B4  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 10195  0023B8  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 10196  0023BC  0012               	return		;funcret
 10197  0023BE                     __end_of___ftneg:
 10198                           	opt stack 0
 10199                           pclatu	equ	0xFFB
 10200                           pclath	equ	0xFFA
 10201                           tblptru	equ	0xFF8
 10202                           tblptrh	equ	0xFF7
 10203                           tblptrl	equ	0xFF6
 10204                           tablat	equ	0xFF5
 10205                           prodh	equ	0xFF4
 10206                           prodl	equ	0xFF3
 10207                           intcon	equ	0xFF2
 10208                           intcon2	equ	0xFF1
 10209                           intcon3	equ	0xFF0
 10210                           postinc0	equ	0xFEE
 10211                           fsr0h	equ	0xFEA
 10212                           fsr0l	equ	0xFE9
 10213                           wreg	equ	0xFE8
 10214                           fsr1h	equ	0xFE2
 10215                           fsr1l	equ	0xFE1
 10216                           indf2	equ	0xFDF
 10217                           postinc2	equ	0xFDE
 10218                           postdec2	equ	0xFDD
 10219                           fsr2h	equ	0xFDA
 10220                           fsr2l	equ	0xFD9
 10221                           status	equ	0xFD8
 10222                           
 10223 ;; *************** function ___ftdiv *****************
 10224 ;; Defined at:
 10225 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;  f1              3    8[COMRAM] float 
 10228 ;;  f2              3   11[COMRAM] float 
 10229 ;; Auto vars:     Size  Location     Type
 10230 ;;  f3              3   18[COMRAM] float 
 10231 ;;  sign            1   22[COMRAM] unsigned char 
 10232 ;;  exp             1   21[COMRAM] unsigned char 
 10233 ;;  cntr            1   17[COMRAM] unsigned char 
 10234 ;; Return value:  Size  Location     Type
 10235 ;;                  3    8[COMRAM] float 
 10236 ;; Registers used:
 10237 ;;		wreg, status,2, status,0, cstack
 10238 ;; Tracked objects:
 10239 ;;		On entry : 0/0
 10240 ;;		On exit  : 0/0
 10241 ;;		Unchanged: 0/0
 10242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10243 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10244 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10245 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10246 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10247 ;;Total ram usage:       15 bytes
 10248 ;; Hardware stack levels used:    1
 10249 ;; Hardware stack levels required when called:    1
 10250 ;; This function calls:
 10251 ;;		___ftpack
 10252 ;; This function is called by:
 10253 ;;		_exp
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           	psect	text57
 10258  001482                     __ptext57:
 10259                           	opt stack 0
 10260  001482                     ___ftdiv:
 10261                           	opt stack 21
 10262                           
 10263                           ;incstack = 0
 10264  001482  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 10265  001486  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 10266  001488  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 10267  00148A  340A               	rlcf	___ftdiv@f1+1,w,c
 10268  00148C  360F               	rlcf	??___ftdiv& (0+255),f,c
 10269  00148E  E301               	bnc	u241_41
 10270  001490  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 10271  001492                     u241_41:
 10272  001492  500F               	movf	??___ftdiv,w,c
 10273  001494  6E16               	movwf	___ftdiv@exp,c
 10274  001496  5016               	movf	___ftdiv@exp,w,c
 10275  001498  A4D8               	btfss	status,2,c
 10276  00149A  D007               	goto	i2l2955
 10277  00149C  0E00               	movlw	0
 10278  00149E  6E09               	movwf	?___ftdiv,c
 10279  0014A0  0E00               	movlw	0
 10280  0014A2  6E0A               	movwf	?___ftdiv+1,c
 10281  0014A4  0E00               	movlw	0
 10282  0014A6  6E0B               	movwf	?___ftdiv+2,c
 10283  0014A8  0012               	return	
 10284  0014AA                     i2l2955:
 10285  0014AA  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 10286  0014AE  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 10287  0014B0  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 10288  0014B2  340D               	rlcf	___ftdiv@f2+1,w,c
 10289  0014B4  360F               	rlcf	??___ftdiv& (0+255),f,c
 10290  0014B6  E301               	bnc	u243_41
 10291  0014B8  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 10292  0014BA                     u243_41:
 10293  0014BA  500F               	movf	??___ftdiv,w,c
 10294  0014BC  6E17               	movwf	___ftdiv@sign,c
 10295  0014BE  5017               	movf	___ftdiv@sign,w,c
 10296  0014C0  A4D8               	btfss	status,2,c
 10297  0014C2  D007               	goto	i2l2961
 10298  0014C4  0E00               	movlw	0
 10299  0014C6  6E09               	movwf	?___ftdiv,c
 10300  0014C8  0E00               	movlw	0
 10301  0014CA  6E0A               	movwf	?___ftdiv+1,c
 10302  0014CC  0E00               	movlw	0
 10303  0014CE  6E0B               	movwf	?___ftdiv+2,c
 10304  0014D0  0012               	return	
 10305  0014D2                     i2l2961:
 10306  0014D2  0E00               	movlw	0
 10307  0014D4  6E13               	movwf	___ftdiv@f3,c
 10308  0014D6  0E00               	movlw	0
 10309  0014D8  6E14               	movwf	___ftdiv@f3+1,c
 10310  0014DA  0E00               	movlw	0
 10311  0014DC  6E15               	movwf	___ftdiv@f3+2,c
 10312  0014DE  5017               	movf	___ftdiv@sign,w,c
 10313  0014E0  0F89               	addlw	137
 10314  0014E2  5E16               	subwf	___ftdiv@exp,f,c
 10315  0014E4  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 10316  0014E8  500E               	movf	___ftdiv@f2+2,w,c
 10317  0014EA  1A17               	xorwf	___ftdiv@sign,f,c
 10318  0014EC  0E80               	movlw	128
 10319  0014EE  1617               	andwf	___ftdiv@sign,f,c
 10320  0014F0  8E0A               	bsf	___ftdiv@f1+1,7,c
 10321  0014F2  0EFF               	movlw	255
 10322  0014F4  1609               	andwf	___ftdiv@f1,f,c
 10323  0014F6  0EFF               	movlw	255
 10324  0014F8  160A               	andwf	___ftdiv@f1+1,f,c
 10325  0014FA  0E00               	movlw	0
 10326  0014FC  160B               	andwf	___ftdiv@f1+2,f,c
 10327  0014FE  8E0D               	bsf	___ftdiv@f2+1,7,c
 10328  001500  0EFF               	movlw	255
 10329  001502  160C               	andwf	___ftdiv@f2,f,c
 10330  001504  0EFF               	movlw	255
 10331  001506  160D               	andwf	___ftdiv@f2+1,f,c
 10332  001508  0E00               	movlw	0
 10333  00150A  160E               	andwf	___ftdiv@f2+2,f,c
 10334  00150C  0E18               	movlw	24
 10335  00150E  6E12               	movwf	___ftdiv@cntr,c
 10336  001510                     i2l2981:
 10337  001510  90D8               	bcf	status,0,c
 10338  001512  3613               	rlcf	___ftdiv@f3,f,c
 10339  001514  3614               	rlcf	___ftdiv@f3+1,f,c
 10340  001516  3615               	rlcf	___ftdiv@f3+2,f,c
 10341  001518  500C               	movf	___ftdiv@f2,w,c
 10342  00151A  5C09               	subwf	___ftdiv@f1,w,c
 10343  00151C  500D               	movf	___ftdiv@f2+1,w,c
 10344  00151E  580A               	subwfb	___ftdiv@f1+1,w,c
 10345  001520  500E               	movf	___ftdiv@f2+2,w,c
 10346  001522  580B               	subwfb	___ftdiv@f1+2,w,c
 10347  001524  A0D8               	btfss	status,0,c
 10348  001526  D007               	goto	i2l668
 10349  001528  500C               	movf	___ftdiv@f2,w,c
 10350  00152A  5E09               	subwf	___ftdiv@f1,f,c
 10351  00152C  500D               	movf	___ftdiv@f2+1,w,c
 10352  00152E  5A0A               	subwfb	___ftdiv@f1+1,f,c
 10353  001530  500E               	movf	___ftdiv@f2+2,w,c
 10354  001532  5A0B               	subwfb	___ftdiv@f1+2,f,c
 10355  001534  8013               	bsf	___ftdiv@f3,0,c
 10356  001536                     i2l668:
 10357  001536  90D8               	bcf	status,0,c
 10358  001538  3609               	rlcf	___ftdiv@f1,f,c
 10359  00153A  360A               	rlcf	___ftdiv@f1+1,f,c
 10360  00153C  360B               	rlcf	___ftdiv@f1+2,f,c
 10361  00153E  2E12               	decfsz	___ftdiv@cntr,f,c
 10362  001540  D7E7               	goto	i2l2981
 10363  001542  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 10364  001546  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10365  00154A  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10366  00154E  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 10367  001552  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 10368  001556  ECB4  F00C         	call	___ftpack	;wreg free
 10369  00155A  C001  F009         	movff	?___ftpack,?___ftdiv
 10370  00155E  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 10371  001562  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 10372  001566  0012               	return	
 10373  001568                     __end_of___ftdiv:
 10374                           	opt stack 0
 10375                           pclatu	equ	0xFFB
 10376                           pclath	equ	0xFFA
 10377                           tblptru	equ	0xFF8
 10378                           tblptrh	equ	0xFF7
 10379                           tblptrl	equ	0xFF6
 10380                           tablat	equ	0xFF5
 10381                           prodh	equ	0xFF4
 10382                           prodl	equ	0xFF3
 10383                           intcon	equ	0xFF2
 10384                           intcon2	equ	0xFF1
 10385                           intcon3	equ	0xFF0
 10386                           postinc0	equ	0xFEE
 10387                           fsr0h	equ	0xFEA
 10388                           fsr0l	equ	0xFE9
 10389                           wreg	equ	0xFE8
 10390                           fsr1h	equ	0xFE2
 10391                           fsr1l	equ	0xFE1
 10392                           indf2	equ	0xFDF
 10393                           postinc2	equ	0xFDE
 10394                           postdec2	equ	0xFDD
 10395                           fsr2h	equ	0xFDA
 10396                           fsr2l	equ	0xFD9
 10397                           status	equ	0xFD8
 10398                           
 10399 ;; *************** function ___awtoft *****************
 10400 ;; Defined at:
 10401 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10402 ;; Parameters:    Size  Location     Type
 10403 ;;  c               2    8[COMRAM] int 
 10404 ;; Auto vars:     Size  Location     Type
 10405 ;;  sign            1   11[COMRAM] unsigned char 
 10406 ;; Return value:  Size  Location     Type
 10407 ;;                  3    8[COMRAM] float 
 10408 ;; Registers used:
 10409 ;;		wreg, status,2, status,0, cstack
 10410 ;; Tracked objects:
 10411 ;;		On entry : 0/0
 10412 ;;		On exit  : 0/0
 10413 ;;		Unchanged: 0/0
 10414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10415 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10418 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10419 ;;Total ram usage:        4 bytes
 10420 ;; Hardware stack levels used:    1
 10421 ;; Hardware stack levels required when called:    1
 10422 ;; This function calls:
 10423 ;;		___ftpack
 10424 ;; This function is called by:
 10425 ;;		_dec_to_hex
 10426 ;;		_exp
 10427 ;;		_log
 10428 ;; This function uses a non-reentrant model
 10429 ;;
 10430                           
 10431                           	psect	text58
 10432  00221C                     __ptext58:
 10433                           	opt stack 0
 10434  00221C                     ___awtoft:
 10435                           	opt stack 21
 10436                           
 10437                           ;incstack = 0
 10438  00221C  0E00               	movlw	0
 10439  00221E  6E0C               	movwf	___awtoft@sign,c
 10440  002220  AE0A               	btfss	___awtoft@c+1,7,c
 10441  002222  D006               	goto	i2l3011
 10442  002224  6C09               	negf	___awtoft@c,c
 10443  002226  1E0A               	comf	___awtoft@c+1,f,c
 10444  002228  B0D8               	btfsc	status,0,c
 10445  00222A  2A0A               	incf	___awtoft@c+1,f,c
 10446  00222C  0E01               	movlw	1
 10447  00222E  6E0C               	movwf	___awtoft@sign,c
 10448  002230                     i2l3011:
 10449  002230  C009  F001         	movff	___awtoft@c,___ftpack@arg
 10450  002234  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 10451  002238  6A03               	clrf	___ftpack@arg+2,c
 10452  00223A  0E8E               	movlw	142
 10453  00223C  6E04               	movwf	___ftpack@exp,c
 10454  00223E  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 10455  002242  ECB4  F00C         	call	___ftpack	;wreg free
 10456  002246  C001  F009         	movff	?___ftpack,?___awtoft
 10457  00224A  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 10458  00224E  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 10459  002252  0012               	return	
 10460  002254                     __end_of___awtoft:
 10461                           	opt stack 0
 10462                           pclatu	equ	0xFFB
 10463                           pclath	equ	0xFFA
 10464                           tblptru	equ	0xFF8
 10465                           tblptrh	equ	0xFF7
 10466                           tblptrl	equ	0xFF6
 10467                           tablat	equ	0xFF5
 10468                           prodh	equ	0xFF4
 10469                           prodl	equ	0xFF3
 10470                           intcon	equ	0xFF2
 10471                           intcon2	equ	0xFF1
 10472                           intcon3	equ	0xFF0
 10473                           postinc0	equ	0xFEE
 10474                           fsr0h	equ	0xFEA
 10475                           fsr0l	equ	0xFE9
 10476                           wreg	equ	0xFE8
 10477                           fsr1h	equ	0xFE2
 10478                           fsr1l	equ	0xFE1
 10479                           indf2	equ	0xFDF
 10480                           postinc2	equ	0xFDE
 10481                           postdec2	equ	0xFDD
 10482                           fsr2h	equ	0xFDA
 10483                           fsr2l	equ	0xFD9
 10484                           status	equ	0xFD8
 10485                           
 10486 ;; *************** function ___lltoft *****************
 10487 ;; Defined at:
 10488 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;  c               4    8[COMRAM] unsigned long 
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;  exp             1   16[COMRAM] unsigned char 
 10493 ;; Return value:  Size  Location     Type
 10494 ;;                  3    8[COMRAM] float 
 10495 ;; Registers used:
 10496 ;;		wreg, status,2, status,0, cstack
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10503 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10504 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;Total ram usage:        9 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    1
 10509 ;; This function calls:
 10510 ;;		___ftpack
 10511 ;; This function is called by:
 10512 ;;		_pow
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           	psect	text59
 10517  002010                     __ptext59:
 10518                           	opt stack 0
 10519  002010                     ___lltoft:
 10520                           	opt stack 22
 10521                           
 10522                           ;incstack = 0
 10523  002010  0E8E               	movlw	142
 10524  002012  6E11               	movwf	___lltoft@exp,c
 10525  002014  D006               	goto	i2l3115
 10526  002016                     i2l3113:
 10527  002016  90D8               	bcf	status,0,c
 10528  002018  320C               	rrcf	___lltoft@c+3,f,c
 10529  00201A  320B               	rrcf	___lltoft@c+2,f,c
 10530  00201C  320A               	rrcf	___lltoft@c+1,f,c
 10531  00201E  3209               	rrcf	___lltoft@c,f,c
 10532  002020  2A11               	incf	___lltoft@exp,f,c
 10533  002022                     i2l3115:
 10534  002022  0E00               	movlw	0
 10535  002024  1409               	andwf	___lltoft@c,w,c
 10536  002026  6E0D               	movwf	??___lltoft& (0+255),c
 10537  002028  0E00               	movlw	0
 10538  00202A  140A               	andwf	___lltoft@c+1,w,c
 10539  00202C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 10540  00202E  0E00               	movlw	0
 10541  002030  140B               	andwf	___lltoft@c+2,w,c
 10542  002032  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 10543  002034  0EFF               	movlw	255
 10544  002036  140C               	andwf	___lltoft@c+3,w,c
 10545  002038  6E10               	movwf	(??___lltoft+3)& (0+255),c
 10546  00203A  500D               	movf	??___lltoft,w,c
 10547  00203C  100E               	iorwf	??___lltoft+1,w,c
 10548  00203E  100F               	iorwf	??___lltoft+2,w,c
 10549  002040  1010               	iorwf	??___lltoft+3,w,c
 10550  002042  A4D8               	btfss	status,2,c
 10551  002044  D7E8               	goto	i2l3113
 10552  002046  C009  F001         	movff	___lltoft@c,___ftpack@arg
 10553  00204A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 10554  00204E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 10555  002052  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 10556  002056  0E00               	movlw	0
 10557  002058  6E05               	movwf	___ftpack@sign,c
 10558  00205A  ECB4  F00C         	call	___ftpack	;wreg free
 10559  00205E  C001  F009         	movff	?___ftpack,?___lltoft
 10560  002062  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 10561  002066  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 10562  00206A  0012               	return	
 10563  00206C                     __end_of___lltoft:
 10564                           	opt stack 0
 10565                           pclatu	equ	0xFFB
 10566                           pclath	equ	0xFFA
 10567                           tblptru	equ	0xFF8
 10568                           tblptrh	equ	0xFF7
 10569                           tblptrl	equ	0xFF6
 10570                           tablat	equ	0xFF5
 10571                           prodh	equ	0xFF4
 10572                           prodl	equ	0xFF3
 10573                           intcon	equ	0xFF2
 10574                           intcon2	equ	0xFF1
 10575                           intcon3	equ	0xFF0
 10576                           postinc0	equ	0xFEE
 10577                           fsr0h	equ	0xFEA
 10578                           fsr0l	equ	0xFE9
 10579                           wreg	equ	0xFE8
 10580                           fsr1h	equ	0xFE2
 10581                           fsr1l	equ	0xFE1
 10582                           indf2	equ	0xFDF
 10583                           postinc2	equ	0xFDE
 10584                           postdec2	equ	0xFDD
 10585                           fsr2h	equ	0xFDA
 10586                           fsr2l	equ	0xFD9
 10587                           status	equ	0xFD8
 10588                           
 10589 ;; *************** function ___ftpack *****************
 10590 ;; Defined at:
 10591 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;  arg             3    0[COMRAM] unsigned um
 10594 ;;  exp             1    3[COMRAM] unsigned char 
 10595 ;;  sign            1    4[COMRAM] unsigned char 
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;		None
 10598 ;; Return value:  Size  Location     Type
 10599 ;;                  3    0[COMRAM] float 
 10600 ;; Registers used:
 10601 ;;		wreg, status,2, status,0
 10602 ;; Tracked objects:
 10603 ;;		On entry : 0/0
 10604 ;;		On exit  : 0/0
 10605 ;;		Unchanged: 0/0
 10606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10607 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10609 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10610 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10611 ;;Total ram usage:        8 bytes
 10612 ;; Hardware stack levels used:    1
 10613 ;; This function calls:
 10614 ;;		Nothing
 10615 ;; This function is called by:
 10616 ;;		___altoft
 10617 ;;		___awtoft
 10618 ;;		___ftadd
 10619 ;;		___ftdiv
 10620 ;;		___ftmul
 10621 ;;		___lltoft
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           	psect	text60
 10626  001968                     __ptext60:
 10627                           	opt stack 0
 10628  001968                     ___ftpack:
 10629                           	opt stack 20
 10630                           
 10631                           ;incstack = 0
 10632  001968  5004               	movf	___ftpack@exp,w,c
 10633  00196A  B4D8               	btfsc	status,2,c
 10634  00196C  D005               	goto	i2l2675
 10635  00196E  5001               	movf	___ftpack@arg,w,c
 10636  001970  1002               	iorwf	___ftpack@arg+1,w,c
 10637  001972  1003               	iorwf	___ftpack@arg+2,w,c
 10638  001974  A4D8               	btfss	status,2,c
 10639  001976  D00C               	goto	i2l2681
 10640  001978                     i2l2675:
 10641  001978  0E00               	movlw	0
 10642  00197A  6E01               	movwf	?___ftpack,c
 10643  00197C  0E00               	movlw	0
 10644  00197E  6E02               	movwf	?___ftpack+1,c
 10645  001980  0E00               	movlw	0
 10646  001982  6E03               	movwf	?___ftpack+2,c
 10647  001984  0012               	return	
 10648  001986                     i2l2679:
 10649  001986  2A04               	incf	___ftpack@exp,f,c
 10650  001988  90D8               	bcf	status,0,c
 10651  00198A  3203               	rrcf	___ftpack@arg+2,f,c
 10652  00198C  3202               	rrcf	___ftpack@arg+1,f,c
 10653  00198E  3201               	rrcf	___ftpack@arg,f,c
 10654  001990                     i2l2681:
 10655  001990  0E00               	movlw	0
 10656  001992  1401               	andwf	___ftpack@arg,w,c
 10657  001994  6E06               	movwf	??___ftpack& (0+255),c
 10658  001996  0E00               	movlw	0
 10659  001998  1402               	andwf	___ftpack@arg+1,w,c
 10660  00199A  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10661  00199C  0EFE               	movlw	254
 10662  00199E  1403               	andwf	___ftpack@arg+2,w,c
 10663  0019A0  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10664  0019A2  5006               	movf	??___ftpack,w,c
 10665  0019A4  1007               	iorwf	??___ftpack+1,w,c
 10666  0019A6  1008               	iorwf	??___ftpack+2,w,c
 10667  0019A8  B4D8               	btfsc	status,2,c
 10668  0019AA  D00C               	goto	i2l2687
 10669  0019AC  D7EC               	goto	i2l2679
 10670  0019AE                     i2l2683:
 10671  0019AE  2A04               	incf	___ftpack@exp,f,c
 10672  0019B0  0E01               	movlw	1
 10673  0019B2  2601               	addwf	___ftpack@arg,f,c
 10674  0019B4  0E00               	movlw	0
 10675  0019B6  2202               	addwfc	___ftpack@arg+1,f,c
 10676  0019B8  0E00               	movlw	0
 10677  0019BA  2203               	addwfc	___ftpack@arg+2,f,c
 10678  0019BC  90D8               	bcf	status,0,c
 10679  0019BE  3203               	rrcf	___ftpack@arg+2,f,c
 10680  0019C0  3202               	rrcf	___ftpack@arg+1,f,c
 10681  0019C2  3201               	rrcf	___ftpack@arg,f,c
 10682  0019C4                     i2l2687:
 10683  0019C4  0E00               	movlw	0
 10684  0019C6  1401               	andwf	___ftpack@arg,w,c
 10685  0019C8  6E06               	movwf	??___ftpack& (0+255),c
 10686  0019CA  0E00               	movlw	0
 10687  0019CC  1402               	andwf	___ftpack@arg+1,w,c
 10688  0019CE  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10689  0019D0  0EFF               	movlw	255
 10690  0019D2  1403               	andwf	___ftpack@arg+2,w,c
 10691  0019D4  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10692  0019D6  5006               	movf	??___ftpack,w,c
 10693  0019D8  1007               	iorwf	??___ftpack+1,w,c
 10694  0019DA  1008               	iorwf	??___ftpack+2,w,c
 10695  0019DC  B4D8               	btfsc	status,2,c
 10696  0019DE  D006               	goto	i2l2691
 10697  0019E0  D7E6               	goto	i2l2683
 10698  0019E2                     i2l2689:
 10699  0019E2  0604               	decf	___ftpack@exp,f,c
 10700  0019E4  90D8               	bcf	status,0,c
 10701  0019E6  3601               	rlcf	___ftpack@arg,f,c
 10702  0019E8  3602               	rlcf	___ftpack@arg+1,f,c
 10703  0019EA  3603               	rlcf	___ftpack@arg+2,f,c
 10704  0019EC                     i2l2691:
 10705  0019EC  BE02               	btfsc	___ftpack@arg+1,7,c
 10706  0019EE  D003               	goto	i2l610
 10707  0019F0  0E02               	movlw	2
 10708  0019F2  6004               	cpfslt	___ftpack@exp,c
 10709  0019F4  D7F6               	goto	i2l2689
 10710  0019F6                     i2l610:
 10711  0019F6  A004               	btfss	___ftpack@exp,0,c
 10712  0019F8  9E02               	bcf	___ftpack@arg+1,7,c
 10713  0019FA  90D8               	bcf	status,0,c
 10714  0019FC  3204               	rrcf	___ftpack@exp,f,c
 10715  0019FE  5004               	movf	___ftpack@exp,w,c
 10716  001A00  1203               	iorwf	___ftpack@arg+2,f,c
 10717  001A02  5005               	movf	___ftpack@sign,w,c
 10718  001A04  A4D8               	btfss	status,2,c
 10719  001A06  8E03               	bsf	___ftpack@arg+2,7,c
 10720  001A08  C001  F001         	movff	___ftpack@arg,?___ftpack
 10721  001A0C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10722  001A10  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10723  001A14  0012               	return	
 10724  001A16                     __end_of___ftpack:
 10725                           	opt stack 0
 10726                           pclatu	equ	0xFFB
 10727                           pclath	equ	0xFFA
 10728                           tblptru	equ	0xFF8
 10729                           tblptrh	equ	0xFF7
 10730                           tblptrl	equ	0xFF6
 10731                           tablat	equ	0xFF5
 10732                           prodh	equ	0xFF4
 10733                           prodl	equ	0xFF3
 10734                           intcon	equ	0xFF2
 10735                           intcon2	equ	0xFF1
 10736                           intcon3	equ	0xFF0
 10737                           postinc0	equ	0xFEE
 10738                           fsr0h	equ	0xFEA
 10739                           fsr0l	equ	0xFE9
 10740                           wreg	equ	0xFE8
 10741                           fsr1h	equ	0xFE2
 10742                           fsr1l	equ	0xFE1
 10743                           indf2	equ	0xFDF
 10744                           postinc2	equ	0xFDE
 10745                           postdec2	equ	0xFDD
 10746                           fsr2h	equ	0xFDA
 10747                           fsr2l	equ	0xFD9
 10748                           status	equ	0xFD8
 10749                           
 10750 ;; *************** function ___awdiv *****************
 10751 ;; Defined at:
 10752 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10753 ;; Parameters:    Size  Location     Type
 10754 ;;  dividend        2    0[COMRAM] int 
 10755 ;;  divisor         2    2[COMRAM] int 
 10756 ;; Auto vars:     Size  Location     Type
 10757 ;;  quotient        2    6[COMRAM] int 
 10758 ;;  sign            1    5[COMRAM] unsigned char 
 10759 ;;  counter         1    4[COMRAM] unsigned char 
 10760 ;; Return value:  Size  Location     Type
 10761 ;;                  2    0[COMRAM] int 
 10762 ;; Registers used:
 10763 ;;		wreg, status,2, status,0
 10764 ;; Tracked objects:
 10765 ;;		On entry : 0/0
 10766 ;;		On exit  : 0/0
 10767 ;;		Unchanged: 0/0
 10768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10769 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10770 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10772 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;Total ram usage:        8 bytes
 10774 ;; Hardware stack levels used:    1
 10775 ;; This function calls:
 10776 ;;		Nothing
 10777 ;; This function is called by:
 10778 ;;		_dec_to_hex
 10779 ;; This function uses a non-reentrant model
 10780 ;;
 10781                           
 10782                           	psect	text61
 10783  001D12                     __ptext61:
 10784                           	opt stack 0
 10785  001D12                     ___awdiv:
 10786                           	opt stack 24
 10787                           
 10788                           ;incstack = 0
 10789  001D12  0E00               	movlw	0
 10790  001D14  6E06               	movwf	___awdiv@sign,c
 10791  001D16  AE04               	btfss	___awdiv@divisor+1,7,c
 10792  001D18  D006               	goto	i2l3455
 10793  001D1A  6C03               	negf	___awdiv@divisor,c
 10794  001D1C  1E04               	comf	___awdiv@divisor+1,f,c
 10795  001D1E  B0D8               	btfsc	status,0,c
 10796  001D20  2A04               	incf	___awdiv@divisor+1,f,c
 10797  001D22  0E01               	movlw	1
 10798  001D24  6E06               	movwf	___awdiv@sign,c
 10799  001D26                     i2l3455:
 10800  001D26  AE02               	btfss	___awdiv@dividend+1,7,c
 10801  001D28  D006               	goto	i2l3461
 10802  001D2A  6C01               	negf	___awdiv@dividend,c
 10803  001D2C  1E02               	comf	___awdiv@dividend+1,f,c
 10804  001D2E  B0D8               	btfsc	status,0,c
 10805  001D30  2A02               	incf	___awdiv@dividend+1,f,c
 10806  001D32  0E01               	movlw	1
 10807  001D34  1A06               	xorwf	___awdiv@sign,f,c
 10808  001D36                     i2l3461:
 10809  001D36  0E00               	movlw	0
 10810  001D38  6E08               	movwf	___awdiv@quotient+1,c
 10811  001D3A  0E00               	movlw	0
 10812  001D3C  6E07               	movwf	___awdiv@quotient,c
 10813  001D3E  5003               	movf	___awdiv@divisor,w,c
 10814  001D40  1004               	iorwf	___awdiv@divisor+1,w,c
 10815  001D42  B4D8               	btfsc	status,2,c
 10816  001D44  D01C               	goto	i2l3483
 10817  001D46  0E01               	movlw	1
 10818  001D48  6E05               	movwf	___awdiv@counter,c
 10819  001D4A  D004               	goto	i2l3469
 10820  001D4C                     i2l3467:
 10821  001D4C  90D8               	bcf	status,0,c
 10822  001D4E  3603               	rlcf	___awdiv@divisor,f,c
 10823  001D50  3604               	rlcf	___awdiv@divisor+1,f,c
 10824  001D52  2A05               	incf	___awdiv@counter,f,c
 10825  001D54                     i2l3469:
 10826  001D54  AE04               	btfss	___awdiv@divisor+1,7,c
 10827  001D56  D7FA               	goto	i2l3467
 10828  001D58                     i2l3471:
 10829  001D58  90D8               	bcf	status,0,c
 10830  001D5A  3607               	rlcf	___awdiv@quotient,f,c
 10831  001D5C  3608               	rlcf	___awdiv@quotient+1,f,c
 10832  001D5E  5003               	movf	___awdiv@divisor,w,c
 10833  001D60  5C01               	subwf	___awdiv@dividend,w,c
 10834  001D62  5004               	movf	___awdiv@divisor+1,w,c
 10835  001D64  5802               	subwfb	___awdiv@dividend+1,w,c
 10836  001D66  A0D8               	btfss	status,0,c
 10837  001D68  D005               	goto	i2l3479
 10838  001D6A  5003               	movf	___awdiv@divisor,w,c
 10839  001D6C  5E01               	subwf	___awdiv@dividend,f,c
 10840  001D6E  5004               	movf	___awdiv@divisor+1,w,c
 10841  001D70  5A02               	subwfb	___awdiv@dividend+1,f,c
 10842  001D72  8007               	bsf	___awdiv@quotient,0,c
 10843  001D74                     i2l3479:
 10844  001D74  90D8               	bcf	status,0,c
 10845  001D76  3204               	rrcf	___awdiv@divisor+1,f,c
 10846  001D78  3203               	rrcf	___awdiv@divisor,f,c
 10847  001D7A  2E05               	decfsz	___awdiv@counter,f,c
 10848  001D7C  D7ED               	goto	i2l3471
 10849  001D7E                     i2l3483:
 10850  001D7E  5006               	movf	___awdiv@sign,w,c
 10851  001D80  B4D8               	btfsc	status,2,c
 10852  001D82  D004               	goto	i2l3487
 10853  001D84  6C07               	negf	___awdiv@quotient,c
 10854  001D86  1E08               	comf	___awdiv@quotient+1,f,c
 10855  001D88  B0D8               	btfsc	status,0,c
 10856  001D8A  2A08               	incf	___awdiv@quotient+1,f,c
 10857  001D8C                     i2l3487:
 10858  001D8C  C007  F001         	movff	___awdiv@quotient,?___awdiv
 10859  001D90  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 10860  001D94  0012               	return	
 10861  001D96                     __end_of___awdiv:
 10862                           	opt stack 0
 10863                           pclatu	equ	0xFFB
 10864                           pclath	equ	0xFFA
 10865                           tblptru	equ	0xFF8
 10866                           tblptrh	equ	0xFF7
 10867                           tblptrl	equ	0xFF6
 10868                           tablat	equ	0xFF5
 10869                           prodh	equ	0xFF4
 10870                           prodl	equ	0xFF3
 10871                           intcon	equ	0xFF2
 10872                           intcon2	equ	0xFF1
 10873                           intcon3	equ	0xFF0
 10874                           postinc0	equ	0xFEE
 10875                           fsr0h	equ	0xFEA
 10876                           fsr0l	equ	0xFE9
 10877                           wreg	equ	0xFE8
 10878                           fsr1h	equ	0xFE2
 10879                           fsr1l	equ	0xFE1
 10880                           indf2	equ	0xFDF
 10881                           postinc2	equ	0xFDE
 10882                           postdec2	equ	0xFDD
 10883                           fsr2h	equ	0xFDA
 10884                           fsr2l	equ	0xFD9
 10885                           status	equ	0xFD8
 10886                           pclatu	equ	0xFFB
 10887                           pclath	equ	0xFFA
 10888                           tblptru	equ	0xFF8
 10889                           tblptrh	equ	0xFF7
 10890                           tblptrl	equ	0xFF6
 10891                           tablat	equ	0xFF5
 10892                           prodh	equ	0xFF4
 10893                           prodl	equ	0xFF3
 10894                           intcon	equ	0xFF2
 10895                           intcon2	equ	0xFF1
 10896                           intcon3	equ	0xFF0
 10897                           postinc0	equ	0xFEE
 10898                           fsr0h	equ	0xFEA
 10899                           fsr0l	equ	0xFE9
 10900                           wreg	equ	0xFE8
 10901                           fsr1h	equ	0xFE2
 10902                           fsr1l	equ	0xFE1
 10903                           indf2	equ	0xFDF
 10904                           postinc2	equ	0xFDE
 10905                           postdec2	equ	0xFDD
 10906                           fsr2h	equ	0xFDA
 10907                           fsr2l	equ	0xFD9
 10908                           status	equ	0xFD8
 10909                           
 10910                           	psect	rparam
 10911  0000                     pclatu	equ	0xFFB
 10912                           pclath	equ	0xFFA
 10913                           tblptru	equ	0xFF8
 10914                           tblptrh	equ	0xFF7
 10915                           tblptrl	equ	0xFF6
 10916                           tablat	equ	0xFF5
 10917                           prodh	equ	0xFF4
 10918                           prodl	equ	0xFF3
 10919                           intcon	equ	0xFF2
 10920                           intcon2	equ	0xFF1
 10921                           intcon3	equ	0xFF0
 10922                           postinc0	equ	0xFEE
 10923                           fsr0h	equ	0xFEA
 10924                           fsr0l	equ	0xFE9
 10925                           wreg	equ	0xFE8
 10926                           fsr1h	equ	0xFE2
 10927                           fsr1l	equ	0xFE1
 10928                           indf2	equ	0xFDF
 10929                           postinc2	equ	0xFDE
 10930                           postdec2	equ	0xFDD
 10931                           fsr2h	equ	0xFDA
 10932                           fsr2l	equ	0xFD9
 10933                           status	equ	0xFD8
 10934                           
 10935                           	psect	temp
 10936  00007E                     btemp:
 10937                           	opt stack 0
 10938  00007E                     	ds	1
 10939  0000                     int$flags	set	btemp
 10940                           pclatu	equ	0xFFB
 10941                           pclath	equ	0xFFA
 10942                           tblptru	equ	0xFF8
 10943                           tblptrh	equ	0xFF7
 10944                           tblptrl	equ	0xFF6
 10945                           tablat	equ	0xFF5
 10946                           prodh	equ	0xFF4
 10947                           prodl	equ	0xFF3
 10948                           intcon	equ	0xFF2
 10949                           intcon2	equ	0xFF1
 10950                           intcon3	equ	0xFF0
 10951                           postinc0	equ	0xFEE
 10952                           fsr0h	equ	0xFEA
 10953                           fsr0l	equ	0xFE9
 10954                           wreg	equ	0xFE8
 10955                           fsr1h	equ	0xFE2
 10956                           fsr1l	equ	0xFE1
 10957                           indf2	equ	0xFDF
 10958                           postinc2	equ	0xFDE
 10959                           postdec2	equ	0xFDD
 10960                           fsr2h	equ	0xFDA
 10961                           fsr2l	equ	0xFD9
 10962                           status	equ	0xFD8


Data Sizes:
    Strings     428
    Constant    99
    Data        2
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     54      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_23(CODE[15]), STR_22(CODE[16]), STR_21(CODE[25]), STR_20(CODE[24]), 
		 -> STR_19(CODE[23]), STR_18(CODE[18]), STR_17(CODE[23]), STR_16(CODE[10]), 
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), STR_4(CODE[23]), 
		 -> STR_3(CODE[10]), STR_2(CODE[17]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack

Critical Paths under _main in BANK0

    _main->_bottle_time
    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   30207
                                             52 BANK0      2     2      0
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    4079
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    4079
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    4079
                                             50 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    4079
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    4712
                                             50 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     520
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          2     0      2    4165
                                             50 BANK0      2     0      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    4503
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    3944
                                             28 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     593
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 21    21      0   72536
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                       _servo_rotate
                               _test
                           i2___wmul
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            25    23      2    2120
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _test                                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate                                         6     4      2     242
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     213
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69271
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   57987
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   18906
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31474
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8283
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate
   _test
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     36      46       5       54.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3      34        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 14 17:01:32 2017

               ___altoft@exp 003F           i2_I2C_Master_Start 24B0           i2_I2C_Master_Write 248E  
              ___altoft@sign 0040                           l34 2426               ?_emergencystop 0001  
               ___awdiv@sign 0006          ___wmul@multiplicand 0092           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
               ___ftadd@exp1 0027                 ___ftadd@exp2 0026                 ___ftadd@sign 0025  
                        l348 0130                          l803 1F46                          l299 23F4  
                        l740 1956                          l793 1E04                 __CFG_CPB$OFF 000000  
                        _PEN 007E2A                 __CFG_CPD$OFF 000000                          _SEN 007E28  
                        _PSA 007EAB          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        _exp 0930                          _log 0F7E                          _isr 0008  
                        _pow 0CC0                          _ptr 007A                 ___awmod@sign 0095  
                        prod 000FF3                          wreg 000FE8                 ?_bottle_time 00B2  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0012                 ___ftdiv@sign 0017  
               __CFG_WDT$OFF 000000                         l3101 2344                         l3131 1DC6  
                       l4021 10FE                         l3127 1DB4                         l3151 1F14  
                       l3303 00F8                         l4031 111C                         l4023 1104  
                       l3129 1DC0                         l3401 0394                         l4033 1122  
                       l4025 110A                         l3139 1DF6                         l3155 1F38  
                       l3147 1F02                         l3403 039C                         l3323 0184  
                       l3307 00FE                         l4027 1110                         l3149 1F0E  
                       l3325 018A                         l3405 03A8                         l4029 1116  
                       l4037 1152                         l3511 1B10                         l3503 1AEA  
                       l3319 0168                         l4039 1180                         l3361 0230  
                       l3337 01C0                         l3353 01FC                         l3523 1B56  
                       l3515 1B34                         l3507 1AFE                         l3339 01C6  
                       l3355 020E                         l3283 0034                         l3267 231C  
                       l3533 18DA                         l3509 1B0A                         l3381 02B4  
                       l3373 028C                         l3365 0268                         l3285 0046  
                       l3535 18EA                         l3519 1B42                         l3391 02E8  
                       l3367 0272                         l3295 0080                         l3279 0020  
                       l3711 168C                         l3545 1944                         l3537 18F0  
                       l3393 0334                         l3385 02CE                         l3289 0050  
                       l3379 02A8                         l3707 1682                         l3389 02E2  
                       l3733 0E62                         l3717 16AC                         l3399 0382  
                       l3751 0EEC                         l3727 0E34                         l3671 1B62  
                       l3745 0EBE                         l3499 1ADA                         l3739 0E90  
                       l3763 0F3A                         l3683 1BA6                         l3691 1BC8  
                       l3757 0F1A                         l3677 1B84                         ?_exp 0049  
                       ?_log 0034                         ?_isr 0001                         ?_pow 0052  
                       STR_1 FFDC                         STR_2 FF02                         STR_3 FFEA  
                       STR_4 FEB1                         STR_5 FEC8                         STR_6 FF24  
                       STR_7 FF13                         STR_8 FF68                         STR_9 FF57  
                       _T0CS 007EAD                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u2820 231A                         u3385 1FE0                         u3807 118E  
                       u3817 20C6                         u3827 2102                         _RCEN 007E2B  
                       u3837 1F70                         u3847 1F78                         u3857 1FA2  
                       i2l34 243A                         u3867 1FAA                         _TMR0 000FD6  
                       _RSEN 007E29                         _main 1098                 ___ftpack@arg 0001  
                       _keys FDEF                 ___ftpack@exp 0004                         _time 00B6  
                       _test 240E                         fsr0h 000FEA                         fsr1h 000FE2  
         i2___lwdiv@quotient 0005                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 007E                         exp@x 0049                         log@x 0034  
                       isr@i 0075         ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004  
                       pow@x 0052                         pow@y 0055                         prodh 000FF4  
                       prodl 000FF3                         start 000E                __CFG_IESO$OFF 000000  
            __end_ofi2_putch 2478                __CFG_MCLRE$ON 000000                 ___ftmul@cntr 001A  
               ___param_bank 000000                 ___ftmul@sign 001B                  i2_lcdNibble 210E  
              ?_bottle_count 0001                 ___fttol@exp1 0036                        ??_exp 004C  
                      ??_log 0037                 ___fttol@lval 0032                        ??_isr 0080  
                      ??_pow 0058             ?_I2C_Master_Init 009D             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                servo_rotate@i 0005  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
            __end_of___awdiv 1D96              __end_of___ftadd 0CC0                        STR_10 FF46  
                      STR_11 FF35                        STR_12 FF79                        STR_20 FE6B  
                      STR_13 FF9B                        STR_21 FE52                        STR_22 FFBD  
                      STR_14 FF8A                        STR_23 FFCD                        STR_15 FFAC  
                      STR_16 FFF4                        STR_24 FEF1                        STR_17 FE9A  
                      STR_18 FEDF                        STR_19 FE83              __end_of___awmod 1B60  
                      ?_test 0001              __end_of___ftdiv 1568              __end_of___ftneg 23BE  
            __end_of___lldiv 1968              __end_of___ftmul 1482              ___awdiv@divisor 0003  
            __end_of___ftsub 21DE              __end_of___fttol 138E                        _T0PS0 007EA8  
                      _T0PS1 007EA9                        _T0PS2 007EAA              __end_of___lwdiv 1E0E  
            __end_of___lwmod 1F50                        i2l220 0898                        i2l223 0894  
                      i2l224 0724                        i2l313 1ABC                        i2l244 08F4  
                      i2l610 19F6                        i2l348 04B2                        i2l633 0B58  
                      i2l803 2194                        i2l637 0B82                        i2l830 0E24  
                      i2l648 0C32                        i2l657 0C4E                        i2l825 0CF6  
                      i2l690 23B0                        i2l668 1536                        i2l793 20B4  
            ___awdiv@counter 0005                        i2l988 09E2                        i2l989 0B06  
                      i2l999 1638                        _PORTB 000F81                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
               ___lltoft@exp 0011              __end_of_lcdInst 246C               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 210E  
             __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003                ___awtoft@sign 000C  
            __end_of_dpowers FE0A                        _floor 1568                        _etime 00BD  
                      _ldexp 17EA                        _frexp 1BF2                        _errno 0078  
            __end_of_isdigit 234E                ___ftpack@sign 0005                        _putch 244C  
                      _stime 00C1                        pclath 000FFA                        tablat 000FF5  
                      pow@yi 005F              __end_of_timeset FE19             __end_ofi2___wmul 239A  
            __end_of_standby 228A                        status 000FD8               __CFG_PBADEN$ON 000000  
              i2printf@width 001A                  exp@exponent 004F             __end_ofi2_printf 06D2  
         __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042                  ldexp@newexp 0037  
            __initialization 21DE                  log@exponent 0037           __size_ofi2_lcdInst 000C  
            ??_emergencystop 00B2               ??_bottle_count 00B2                 __end_of_main 119E  
               __end_of_keys FE00                 __end_of_test 2426                   i2printf@ap 0014  
         __size_ofi2_isdigit 001E                       ??_main 00B4                ___fttol@sign1 0031  
                     ??_test 0001                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0091           ??_I2C_Master_Start 0091                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0093                       ?_floor 0041  
                     ?_ldexp 0034                       ?_frexp 0001             __end_of___altoft 1E86  
                     _T08BIT 007EAE             ___awdiv@dividend 0001              i2lcdNibble@data 0002  
           __end_of___awtoft 2254                       ?_putch 0001             __end_of___ftpack 1A16  
            i2lcdNibble@temp 0001             __end_of___lltoft 206C                       _INT1IE 007F83  
                     _INT1IF 007F80                       u201_41 0B24                       u202_41 0B38  
                     i2l3011 2230                       i2l3113 2016                       i2l3033 15A4  
                     i2l3115 2022                       i2l3045 1758                       i2l3037 15BE  
                     i2l3029 1596                       i2l3221 0ADC                       i2l4101 0850  
                     i2l3047 17D4                       i2l3063 1846                       i2l3055 1802  
                     i2l4105 0856                       i2l3075 1868                       i2l3171 0FB8  
                     i2l4123 08C0                       i2l3165 0F98                       i2l4133 08DE  
                     i2l4061 074E                       i2l4045 0712                       i2l3079 1874  
                     i2l3431 0D7E                       i2l3423 0D1C                       i2l3193 097E  
                     i2l3417 0D04                       i2l3601 208E                       i2l4129 08D6  
                     i2l4073 0800                       i2l4065 075A                       i2l2731 0B66  
                     i2l2715 1E30                       i2l3187 0948                       i2l3435 0DA0  
                     i2l4067 0764                       i2l4059 0746                       i2l3461 1D36  
                     i2l2805 13DE                       u222_41 139E                       i2l2717 1E3C  
                     i2l2901 137C                       i2l4237 1AA8                       i2l3621 2176  
                     i2l4077 0804                       i2l3471 1D58                       i2l3455 1D26  
                     i2l2823 1420                       i2l3199 09B4                       i2l4239 1AB2  
                     i2l2681 1990                       i2l2761 0BEC                       i2l2753 0BC0  
                     i2l2737 0B90                       i2l2833 1448                       i2l2913 1C1A  
                     i2l3609 20AA                       i2l3625 218A                       i2l3617 216A  
                     i2l4097 0834                       i2l4089 081E                       i2l3467 1D4C  
                     i2l3483 1D7E                       i2l2691 19EC                       i2l2683 19AE  
                     i2l2675 1978                       i2l2771 0C20                       i2l2763 0BF6  
                     i2l2819 1410                       i2l3811 1288                       i2l3619 2172  
                     i2l4099 0842                       i2l3469 1D54                       i2l2773 0C2A  
                     i2l2765 0BFE                       i2l2829 1438                       i2l2845 1CB2  
                     u231_41 12AA                       i2l3901 04E0                       i2l3487 1D8C  
                     i2l3479 1D74                       i2l2687 19C4                       i2l2679 1986  
                     i2l2759 0BE2                       i2l2855 1D0E                       i2l3815 1A18  
                     i2l2689 19E2                       i2l2961 14D2                       i2l2849 1CE2  
                     i2l2865 12C6                       i2l3569 236E                       i2l3817 1A20  
                     i2l3841 1A90                       i2l3921 052E                       i2l3905 04FA  
                     i2l2955 14AA                       i2l2779 0C6A                       i2l2883 132C  
                     i2l3827 1A54                       i2l3587 23D4                       i2l3907 04FE  
                     i2l2981 1510                       i2l2789 0C9A                       u224_41 13C6  
                     i2l2893 1354                       i2l3781 1EBA                       i2l3829 1A5C  
                     i2l3597 2082                       i2l3861 03D0                       i2l2799 13B6  
                     i2l2895 1360                       i2l2887 133C                       i2l3791 1EDE  
                     i2l3599 208A                       i2l3943 0584                       i2l3919 052A  
                     i2l3935 055A                       i2l3871 03F4                       i2l2897 1366  
                     i2l3785 1EC2                       i2l3961 05DC                       i2l3937 056A  
                     i2l3865 03E0                       i2l3963 05E4                       i2l3971 060A  
                     i2l3955 05C6                       i2l3947 05A8                       i2l3867 03EE  
                     u241_41 1492                       i2l3973 0610                       i2l3981 069A  
                     i2l3949 05B0                       i2l3885 0480                       i2l3877 0422  
                     i2l2999 21B4                       i2l3799 11B8                       i2l3975 0654  
                     i2l3983 06AA                       i2l3967 05F8                       i2l3985 06B0  
                     i2l3889 0484                       i2l3987 06B8                       u243_41 14BA  
                     _TMR0IE 007F95                       _TMR0IF 007F92                    ??i2_putch 0003  
                     _TMR0ON 007EAF                       _SSPADD 000FC8                       _TRISC3 007CA3  
                     _TRISC4 007CA4                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
                     ___ftge 1C82                       ___wmul 22C0                    ??___awdiv 0005  
                  ??___ftadd 0022               __CFG_STVREN$ON 000000                    ??___awmod 0094  
                  ??___ftdiv 000F                    ??___ftneg 0004                    ??___lldiv 0098  
                  ??___ftmul 0013                    ??___ftsub 002E                    ??___fttol 002C  
                  ??___lwdiv 0094                    ??___lwmod 009B                dec_to_hex@num 0063  
                     clear_0 21FC                       clear_1 2208             ___awdiv@quotient 0007  
            ___awmod@divisor 0092              ___awmod@counter 0094                    ??_lcdInst 0092  
                     _printf 0012                       floor@i 0044                       floor@x 0041  
      ___ftmul@f3_as_product 0017                    ??_initLCD 0093                    ??_isdigit 0090  
          __end_ofi2___lwdiv 20BE                 __mediumconst FDEE            __end_ofi2___lwmod 219E  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_standby 00B2            __end_ofi2_lcdInst 2484            __end_ofi2_isdigit 23DC  
           __end_ofexp@coeff FE37         __size_of_bottle_time 0036             __end_oflog@coeff FE52  
                 __accesstop 0080      __end_of__initialization 220E                   ___altoft@c 0037  
                 ___ftadd@f1 001C                   ___ftadd@f2 001F                   ___ftge@ff1 0001  
                 ___ftge@ff2 0004                 eval_poly@res 0031                ___rparam_used 000001  
                 ___ftdiv@f1 0009                   ___ftdiv@f2 000C                   ___ftdiv@f3 0013  
                 ___ftneg@f1 0001                   ___awtoft@c 0009                   ___ftmul@f1 000D  
                 ___ftmul@f2 0010                   ___ftsub@f1 0028                   ___ftsub@f2 002B  
                 ___fttol@f1 0028           i2___lwmod@dividend 0008               __pcstackCOMRAM 0001  
               __pidataBANK0 24B8                   ___lltoft@c 0009                __end_of_floor 1646  
              __end_of_ldexp 18AC                __end_of_frexp 1C82                __end_of_putch 245C  
                i2printf@idx 0013                  i2printf@val 0017           __size_of_date_time 00D2  
                  ?i2___wmul 0001           __size_of_lcdNibble 0060                  i2putch@data 0003  
                  ?i2_printf 000D                      ??_floor 0044                      ??_ldexp 0039  
                    ??_frexp 0006         __end_of_bottle_count 0F7E                   _dec_to_hex 119E  
                    ??_putch 0092                   __pbssBANK0 00B6           __size_of_eval_poly 00D2  
         __size_of_read_time 0068                      ?___ftge 0001                 ?i2_lcdNibble 0001  
                    ?___wmul 0090                    ?___altoft 0037                    ?___awtoft 0009  
                  ?___ftpack 0001                      ?_printf 009C           __size_of_operation 0092  
                  ?___lltoft 0009                   ??i2___wmul 0005                   ??i2_printf 000F  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
          __end_of_date_time 1718                      i2_putch 246C            _bottle_count_disp 00C4  
__size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 1FB0  __size_ofi2_I2C_Master_Write 000A  
              ?_operationend 0001                      __Hparam 0000                      __Lparam 0000  
            __size_of___ftge 0090                      ___awdiv 1D12                      ___ftadd 0B14  
                    ___awmod 1ABE                      ___ftdiv 1482                      ___ftneg 239A  
                    ___lldiv 18AC              __size_of___wmul 0036                      ___ftmul 138E  
                    ___ftsub 219E                      ___fttol 129A                      ___lwdiv 1D96  
                    ___lwmod 1EEE                   _curr_state 00C3                   ??___altoft 003B  
                    __pcinit 21DE                   ??___awtoft 000C                   ??___ftpack 0006  
          __end_of_eval_poly 17EA                      __ramtop 1000                      _lcdInst 245C  
                 ??___lltoft 000D                      __ptext0 1098                      __ptext1 2254  
                    __ptext2 23F6                      __ptext3 1B60                      __ptext4 20BE  
                    __ptext5 23DC                      __ptext6 1646                      __ptext7 2484  
                    __ptext8 2498                      __ptext9 24A0              __size_of_printf 03B4  
             dec_to_hex@temp 006B                      _initLCD 20BE            __end_of_hexpowers FE12  
              i2_isdigit$777 0002                      _dpowers FE00                 __size_of_exp 01E4  
               __size_of_log 011A                      _isdigit 2324                 __size_of_isr 0928  
               __size_of_pow 0172             ___awmod@dividend 0090            __end_of_read_time 1EEE  
   __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E     __size_of_I2C_Master_Wait 0014  
                 date_time@i 00B2     __size_of_I2C_Master_Stop 0008                      _timeset FE12  
                    _standby 2254                  ?_dec_to_hex 0063               __pintcode_body 06D2  
       end_of_initialization 220E                      exp@sign 0051                __Lmediumconst FDEE  
                    int_func 06D2          i2___wmul@multiplier 0001            __end_of_operation 1BF2  
             _operation_disp 00BF               ??_operationend 00B2    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0094                      pow@sign 005E  
            ___lldiv@counter 009C                      printf@c 00B1                      printf@f 009C  
           I2C_Master_Init@c 009D             I2C_Master_Read@a 0091                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE        __end_of_emergencystop 23F6  
              ?_servo_rotate 0001                    _PORTAbits 000F80                    _PORTEbits 000F84  
      __size_of_bottle_count 014C            i2_I2C_Master_Read 234E            i2_I2C_Master_Wait 243A  
          i2_I2C_Master_Stop 24A8            i2___lwdiv@divisor 0003                    i2___lwdiv 206C  
                  i2___lwmod 215C            i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001  
         ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001                   _start_time 007C  
                  i2_lcdInst 2478                  ___ftdiv@exp 0016                  printf@width 00AF  
        ??i2_I2C_Master_Read 0002                    i2_isdigit 23BE          ??i2_I2C_Master_Wait 0001  
        ??i2_I2C_Master_Stop 0002                  ___ftmul@exp 0016                 _bottle_count 0E32  
             __end_of___ftge 1D12               __end_of___wmul 22F6          __size_of_dec_to_hex 00FC  
             ??_servo_rotate 0003         __size_ofi2_lcdNibble 004E                i2lcdInst@data 0003  
                 floor@expon 0047             i2___wmul@product 0005               __end_of_printf 03C6  
               i2printf@flag 0019    __end_ofi2_I2C_Master_Read 2374    __end_ofi2_I2C_Master_Wait 244C  
               i2printf@prec 0016          start_initialization 21DE    __end_ofi2_I2C_Master_Stop 24B0  
                 eval_poly@d 002B                   eval_poly@n 002D                   eval_poly@x 0028  
          __size_ofi2___wmul 0026                   ldexp@value 0034                  __end_of_exp 0B14  
                __end_of_log 1098                  __end_of_isr 0930                  __end_of_pow 0E32  
                  i2printf@c 001C                    i2printf@f 000D                ??_bottle_time 00B4  
      i2I2C_Master_Read@temp 0003                   ?i2___lwdiv 0001                   ?i2___lwmod 0008  
          __size_ofi2_printf 030C                   frexp@value 0001            ??_I2C_Master_Init 00A1  
          ??_I2C_Master_Read 0091            ??_I2C_Master_Wait 0090                   ?i2_lcdInst 0001  
          ??_I2C_Master_Stop 0091                   ?i2_isdigit 0001                     ??___ftge 0007  
                   ??___wmul 0094                  __pdataBANK0 00C4             __CFG_LPT1OSC$OFF 000000  
                   ??_printf 00A4            __size_of___altoft 0078                   read_time@i 0004  
          __size_of___awtoft 0038            __size_of___ftpack 00AE            __size_of___lltoft 005C  
                __pbssCOMRAM 0076         __end_of_operationend 240E                __pcstackBANK0 0080  
          i2___lwmod@divisor 000A            i2___lwmod@counter 000C                     ?i2_putch 0001  
        __end_of_bottle_time 22C0             _I2C_Master_Start 24A0          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 2484                    _date_time 1646             ___lwdiv@dividend 0090  
          __CFG_CCP2MX$PORTC 000000                    __pintcode 0008                __pmediumconst FDEE  
                  _lcdNibble 1F50                     ?___awdiv 0001                     ?___ftadd 001C  
                   ?___awmod 0090                     ?___ftdiv 0009                     ?___ftneg 0001  
                   ?___lldiv 0090                     ?___ftmul 000D                     ?___ftsub 0028  
                   ?___fttol 0028                     ?___lwdiv 0090                     ?___lwmod 0097  
         servo_rotate@degree 0001                     ?_lcdInst 0001             dec_to_hex@hexnum 006F  
                   ?_initLCD 0001                     ?_isdigit 0001   __size_ofi2_I2C_Master_Read 0026  
 __size_ofi2_I2C_Master_Wait 0012                    _eval_poly 1718   __size_ofi2_I2C_Master_Stop 0008  
                  _hexpowers FE0A                     ?_standby 0001             ___lwdiv@quotient 0094  
             __size_of_floor 00DE               __size_of_ldexp 00C2               __size_of_frexp 0090  
               ??_dec_to_hex 0065                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
                  _read_time 1E86               __size_of_putch 0010   __end_ofi2_I2C_Master_Start 24B8  
 __end_ofi2_I2C_Master_Write 2498                  ??i2_lcdInst 0003         __end_of_servo_rotate 1ABE  
             ___wmul@product 0094                     _LATDbits 000F8C                  ??i2_isdigit 0001  
                 ?_date_time 0001                     i2u311_40 0D68                     i2u240_40 1C42  
                   i2u233_40 12E4                     i2u240_48 1C44                     i2u233_45 12DC  
                   i2u251_40 15B0                     i2u255_40 1822                     i2u255_48 1824  
                   i2u328_40 236C                     i2u275_40 09BC                     i2u276_40 09BE  
                   i2u348_40 2418                     i2u349_48 241A                     i2u390_47 214E  
                   i2u391_47 2156                    _operation 1B60                     i2u392_47 1A34  
                   i2u393_47 1A44                     i2u394_47 1A70                     i2u395_47 1A80  
                   i2u387_47 08E6                     i2u388_47 2126                     i2u389_47 212E  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001           __end_of_dec_to_hex 129A  
          ___wmul@multiplier 0090                     i2___wmul 2374                lcdNibble@data 0091  
                 printf@flag 00AE                lcdNibble@temp 0090                   printf@prec 00AB  
                 ?_eval_poly 0028                     i2_printf 03C6                  _bottle_time 228A  
        I2C_Master_Read@temp 0092                   ?_read_time 0001           dec_to_hex@quotient 0071  
           __size_ofi2_putch 000C                    frexp@eptr 0004                     __Hrparam 0000  
                 ?_operation 0001                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
                dec_to_hex@i 006D              bottle_time@time 00B2             __size_of___awdiv 0084  
           __size_of___ftadd 01AC             __size_of___awmod 00A2             __size_of___ftdiv 00E6  
           __size_of___ftneg 0024        i2___wmul@multiplicand 0003             __size_of___lldiv 00BC  
                   ___altoft 1E0E             __size_of___ftmul 00F4             __size_of___ftsub 0040  
           __size_of___fttol 00F4             __size_of___lwdiv 0078             __size_of___lwmod 0062  
      __size_of_operationend 0018                     ___awtoft 221C                     ___ftpack 1968  
                   ___lltoft 2010                  _isdigit$777 0091           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 0010                     _exp$1216 004C              _I2C_Master_Init 1FB0  
            _I2C_Master_Read 22F6             __size_of_initLCD 0050              _I2C_Master_Wait 2426  
                   _isr$1300 0073              _I2C_Master_Stop 2498             __size_of_isdigit 002A  
            ___lwdiv@divisor 0092              ___lwdiv@counter 0096                     __ptext10 22F6  
                   __ptext11 2426                     __ptext20 245C                     __ptext12 228A  
                   __ptext21 1F50                     __ptext13 0E32                     __ptext30 206C  
                   __ptext22 1ABE                     __ptext14 0012                     __ptext31 2478  
                   __ptext23 1FB0                     __ptext15 244C                     __ptext40 243A  
                   __ptext32 210E                     __ptext24 18AC                     __ptext16 2324  
                   __ptext41 119E                     __ptext33 240E                     __ptext17 22C0  
                   __ptext50 1E0E                     __ptext42 0CC0                     __ptext34 1A16  
                   __ptext26 03C6                     __ptext18 1EEE                     __ptext51 1718  
                   __ptext43 0F7E                     __ptext35 1E86                     __ptext27 246C  
                   __ptext19 1D96                     __ptext60 1968                     __ptext52 2374  
                   __ptext44 0930                     __ptext36 248E                     __ptext28 23BE  
                   __ptext61 1D12                     __ptext53 138E                     __ptext45 17EA  
                   __ptext37 24A8                     __ptext29 215C                     __ptext54 219E  
                   __ptext46 1568                     __ptext38 24B0                     __ptext55 0B14  
                   __ptext47 1BF2                     __ptext39 234E                     __ptext56 239A  
                   __ptext48 129A                     __ptext57 1482                     __ptext49 1C82  
                   __ptext58 221C                     __ptext59 2010                     _end_time 0076  
           __size_of_standby 0036                     _pow$1214 0058                     _pow$1215 005B  
     __size_of_emergencystop 001A                __size_of_main 0106                __size_of_test 0018  
            _dec_to_hex$1212 0065              _dec_to_hex$1213 0068                  ??_date_time 00B2  
               _operationend 23F6                ??i2_lcdNibble 0001                  ??_lcdNibble 0090  
                   int$flags 007E                    printf@idx 00A8                    printf@val 00AC  
                   exp@coeff FE19                     log@coeff FE37                    putch@data 0092  
   __end_of_I2C_Master_Start 24A8     __end_of_I2C_Master_Write 248E                   _INTCONbits 000FF2  
                ??_eval_poly 002F                     isdigit@c 0092        __size_of_servo_rotate 00A8  
                ??_read_time 0004                     intlevel2 0000             ___lwmod@dividend 0097  
           ___lldiv@dividend 0090                  ??_operation 00B2                     printf@ap 00A9  
    __end_of_I2C_Master_Init 2010      __end_of_I2C_Master_Read 2324      __end_of_I2C_Master_Wait 243A  
    __end_of_I2C_Master_Stop 24A0                  lcdInst@data 0092                _emergencystop 23DC  
               _servo_rotate 1A16          __end_ofi2_lcdNibble 215C             ___lldiv@quotient 0098  
          I2C_Master_Write@d 0091              ___lwmod@divisor 0099              ___lwmod@counter 009B  

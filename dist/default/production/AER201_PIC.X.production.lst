

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 14 02:54:13 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.40
    86                           ; Generated 01/12/2016 GMT
    87                           ; 
    88                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	idataBANK0
   121  002E0C                     __pidataBANK0:
   122                           	opt stack 0
   123                           
   124                           ;initializer for _bottle_count_disp
   125  002E0C  FFFF               	dw	65535
   126                           
   127                           	psect	mediumconst
   128  00FDB6                     __pmediumconst:
   129                           	opt stack 0
   130  00FDB6  00                 	db	0
   131  00FDB7                     _keys:
   132                           	opt stack 0
   133  00FDB7  31                 	db	49
   134  00FDB8  32                 	db	50
   135  00FDB9  33                 	db	51
   136  00FDBA  41                 	db	65
   137  00FDBB  34                 	db	52
   138  00FDBC  35                 	db	53
   139  00FDBD  36                 	db	54
   140  00FDBE  42                 	db	66
   141  00FDBF  37                 	db	55
   142  00FDC0  38                 	db	56
   143  00FDC1  39                 	db	57
   144  00FDC2  43                 	db	67
   145  00FDC3  2A                 	db	42
   146  00FDC4  30                 	db	48
   147  00FDC5  23                 	db	35
   148  00FDC6  44                 	db	68
   149  00FDC7  00                 	db	0
   150  00FDC8                     __end_of_keys:
   151                           	opt stack 0
   152  00FDC8                     _dpowers:
   153                           	opt stack 0
   154  00FDC8  0001               	dw	1
   155  00FDCA  000A               	dw	10
   156  00FDCC  0064               	dw	100
   157  00FDCE  03E8               	dw	1000
   158  00FDD0  2710               	dw	10000
   159  00FDD2                     __end_of_dpowers:
   160                           	opt stack 0
   161  00FDD2                     _hexpowers:
   162                           	opt stack 0
   163  00FDD2  0001               	dw	1
   164  00FDD4  0010               	dw	16
   165  00FDD6  0100               	dw	256
   166  00FDD8  1000               	dw	4096
   167  00FDDA                     __end_of_hexpowers:
   168                           	opt stack 0
   169  00FDDA                     _timeset:
   170                           	opt stack 0
   171  00FDDA  50                 	db	80
   172  00FDDB  35                 	db	53
   173  00FDDC  21                 	db	33
   174  00FDDD  08                 	db	8
   175  00FDDE  05                 	db	5
   176  00FDDF  02                 	db	2
   177  00FDE0  17                 	db	23
   178  00FDE1                     __end_of_timeset:
   179                           	opt stack 0
   180  00FDE1                     exp@coeff:
   181                           	opt stack 0
   182  00FDE1  00                 	db	0
   183  00FDE2  80                 	db	128
   184  00FDE3  3F                 	db	63
   185  00FDE4  72                 	db	114
   186  00FDE5  31                 	db	49
   187  00FDE6  3F                 	db	63
   188  00FDE7  FE                 	db	254
   189  00FDE8  75                 	db	117
   190  00FDE9  3E                 	db	62
   191  00FDEA  58                 	db	88
   192  00FDEB  63                 	db	99
   193  00FDEC  3D                 	db	61
   194  00FDED  95                 	db	149
   195  00FDEE  1D                 	db	29
   196  00FDEF  3C                 	db	60
   197  00FDF0  C5                 	db	197
   198  00FDF1  AE                 	db	174
   199  00FDF2  3A                 	db	58
   200  00FDF3  79                 	db	121
   201  00FDF4  21                 	db	33
   202  00FDF5  39                 	db	57
   203  00FDF6  94                 	db	148
   204  00FDF7  80                 	db	128
   205  00FDF8  37                 	db	55
   206  00FDF9  93                 	db	147
   207  00FDFA  A7                 	db	167
   208  00FDFB  35                 	db	53
   209  00FDFC  56                 	db	86
   210  00FDFD  15                 	db	21
   211  00FDFE  34                 	db	52
   212  00FDFF                     __end_ofexp@coeff:
   213                           	opt stack 0
   214  00FDFF                     log@coeff:
   215                           	opt stack 0
   216  00FDFF  00                 	db	0
   217  00FE00  00                 	db	0
   218  00FE01  00                 	db	0
   219  00FE02  00                 	db	0
   220  00FE03  80                 	db	128
   221  00FE04  3F                 	db	63
   222  00FE05  F0                 	db	240
   223  00FE06  FF                 	db	255
   224  00FE07  BE                 	db	190
   225  00FE08  E2                 	db	226
   226  00FE09  A9                 	db	169
   227  00FE0A  3E                 	db	62
   228  00FE0B  83                 	db	131
   229  00FE0C  76                 	db	118
   230  00FE0D  BE                 	db	190
   231  00FE0E  AE                 	db	174
   232  00FE0F  2B                 	db	43
   233  00FE10  3E                 	db	62
   234  00FE11  3C                 	db	60
   235  00FE12  C3                 	db	195
   236  00FE13  BD                 	db	189
   237  00FE14  D2                 	db	210
   238  00FE15  13                 	db	19
   239  00FE16  3D                 	db	61
   240  00FE17  78                 	db	120
   241  00FE18  D3                 	db	211
   242  00FE19  BB                 	db	187
   243  00FE1A                     __end_oflog@coeff:
   244                           	opt stack 0
   245  0000                     _TMR0	set	4054
   246  0000                     _ADCON0	set	4034
   247  0000                     _ADCON1	set	4033
   248  0000                     _INTCONbits	set	4082
   249  0000                     _LATA	set	3977
   250  0000                     _LATAbits	set	3977
   251  0000                     _LATB	set	3978
   252  0000                     _LATC	set	3979
   253  0000                     _LATCbits	set	3979
   254  0000                     _LATD	set	3980
   255  0000                     _LATDbits	set	3980
   256  0000                     _LATE	set	3981
   257  0000                     _PORTAbits	set	3968
   258  0000                     _PORTB	set	3969
   259  0000                     _SSPADD	set	4040
   260  0000                     _SSPBUF	set	4041
   261  0000                     _SSPCON1	set	4038
   262  0000                     _SSPCON2	set	4037
   263  0000                     _SSPSTAT	set	4039
   264  0000                     _TRISA	set	3986
   265  0000                     _TRISB	set	3987
   266  0000                     _TRISC	set	3988
   267  0000                     _TRISD	set	3989
   268  0000                     _TRISE	set	3990
   269  0000                     _ACKDT	set	32301
   270  0000                     _ACKEN	set	32300
   271  0000                     _GIE	set	32663
   272  0000                     _INT0IE	set	32660
   273  0000                     _INT0IF	set	32657
   274  0000                     _INT1IE	set	32643
   275  0000                     _INT1IF	set	32640
   276  0000                     _INT2IE	set	32644
   277  0000                     _INT2IF	set	32641
   278  0000                     _PEN	set	32298
   279  0000                     _PSA	set	32427
   280  0000                     _RCEN	set	32299
   281  0000                     _RSEN	set	32297
   282  0000                     _SEN	set	32296
   283  0000                     _T08BIT	set	32430
   284  0000                     _T0CS	set	32429
   285  0000                     _T0PS0	set	32424
   286  0000                     _T0PS1	set	32425
   287  0000                     _T0PS2	set	32426
   288  0000                     _TMR0IE	set	32661
   289  0000                     _TMR0IF	set	32658
   290  0000                     _TMR0ON	set	32431
   291  0000                     _TRISC3	set	31907
   292  0000                     _TRISC4	set	31908
   293  0000                     _nRBPU	set	32655
   294  00FE1A                     STR_22:
   295  00FE1A  52                 	db	82	;'R'
   296  00FE1B  25                 	db	37
   297  00FE1C  64                 	db	100	;'d'
   298  00FE1D  20                 	db	32
   299  00FE1E  47                 	db	71	;'G'
   300  00FE1F  25                 	db	37
   301  00FE20  64                 	db	100	;'d'
   302  00FE21  20                 	db	32
   303  00FE22  42                 	db	66	;'B'
   304  00FE23  25                 	db	37
   305  00FE24  64                 	db	100	;'d'
   306  00FE25  20                 	db	32
   307  00FE26  20                 	db	32
   308  00FE27  20                 	db	32
   309  00FE28  20                 	db	32
   310  00FE29  20                 	db	32
   311  00FE2A  20                 	db	32
   312  00FE2B  20                 	db	32
   313  00FE2C  20                 	db	32
   314  00FE2D  20                 	db	32
   315  00FE2E  20                 	db	32
   316  00FE2F  20                 	db	32
   317  00FE30  20                 	db	32
   318  00FE31  20                 	db	32
   319  00FE32  20                 	db	32
   320  00FE33  20                 	db	32
   321  00FE34  20                 	db	32
   322  00FE35  00                 	db	0
   323  00FE36                     STR_21:
   324  00FE36  52                 	db	82	;'R'
   325  00FE37  75                 	db	117	;'u'
   326  00FE38  6E                 	db	110	;'n'
   327  00FE39  6E                 	db	110	;'n'
   328  00FE3A  69                 	db	105	;'i'
   329  00FE3B  6E                 	db	110	;'n'
   330  00FE3C  67                 	db	103	;'g'
   331  00FE3D  7E                 	db	126
   332  00FE3E  7E                 	db	126
   333  00FE3F  7E                 	db	126
   334  00FE40  20                 	db	32
   335  00FE41  20                 	db	32
   336  00FE42  20                 	db	32
   337  00FE43  20                 	db	32
   338  00FE44  20                 	db	32
   339  00FE45  20                 	db	32
   340  00FE46  20                 	db	32
   341  00FE47  20                 	db	32
   342  00FE48  20                 	db	32
   343  00FE49  20                 	db	32
   344  00FE4A  20                 	db	32
   345  00FE4B  20                 	db	32
   346  00FE4C  20                 	db	32
   347  00FE4D  20                 	db	32
   348  00FE4E  00                 	db	0
   349  00FE4F                     STR_2:
   350  00FE4F  47                 	db	71	;'G'
   351  00FE50  25                 	db	37
   352  00FE51  75                 	db	117	;'u'
   353  00FE52  20                 	db	32
   354  00FE53  42                 	db	66	;'B'
   355  00FE54  25                 	db	37
   356  00FE55  75                 	db	117	;'u'
   357  00FE56  20                 	db	32
   358  00FE57  20                 	db	32
   359  00FE58  20                 	db	32
   360  00FE59  20                 	db	32
   361  00FE5A  20                 	db	32
   362  00FE5B  20                 	db	32
   363  00FE5C  20                 	db	32
   364  00FE5D  20                 	db	32
   365  00FE5E  20                 	db	32
   366  00FE5F  20                 	db	32
   367  00FE60  20                 	db	32
   368  00FE61  20                 	db	32
   369  00FE62  20                 	db	32
   370  00FE63  20                 	db	32
   371  00FE64  20                 	db	32
   372  00FE65  20                 	db	32
   373  00FE66  00                 	db	0
   374  00FE67                     STR_1:
   375  00FE67  43                 	db	67	;'C'
   376  00FE68  25                 	db	37
   377  00FE69  75                 	db	117	;'u'
   378  00FE6A  20                 	db	32
   379  00FE6B  52                 	db	82	;'R'
   380  00FE6C  25                 	db	37
   381  00FE6D  75                 	db	117	;'u'
   382  00FE6E  20                 	db	32
   383  00FE6F  20                 	db	32
   384  00FE70  20                 	db	32
   385  00FE71  20                 	db	32
   386  00FE72  20                 	db	32
   387  00FE73  20                 	db	32
   388  00FE74  20                 	db	32
   389  00FE75  20                 	db	32
   390  00FE76  20                 	db	32
   391  00FE77  20                 	db	32
   392  00FE78  20                 	db	32
   393  00FE79  20                 	db	32
   394  00FE7A  20                 	db	32
   395  00FE7B  20                 	db	32
   396  00FE7C  20                 	db	32
   397  00FE7D  20                 	db	32
   398  00FE7E  00                 	db	0
   399  00FE7F                     STR_20:
   400  00FE7F  52                 	db	82	;'R'
   401  00FE80  75                 	db	117	;'u'
   402  00FE81  6E                 	db	110	;'n'
   403  00FE82  6E                 	db	110	;'n'
   404  00FE83  69                 	db	105	;'i'
   405  00FE84  6E                 	db	110	;'n'
   406  00FE85  67                 	db	103	;'g'
   407  00FE86  7E                 	db	126
   408  00FE87  7E                 	db	126
   409  00FE88  20                 	db	32
   410  00FE89  20                 	db	32
   411  00FE8A  20                 	db	32
   412  00FE8B  20                 	db	32
   413  00FE8C  20                 	db	32
   414  00FE8D  20                 	db	32
   415  00FE8E  20                 	db	32
   416  00FE8F  20                 	db	32
   417  00FE90  20                 	db	32
   418  00FE91  20                 	db	32
   419  00FE92  20                 	db	32
   420  00FE93  20                 	db	32
   421  00FE94  20                 	db	32
   422  00FE95  20                 	db	32
   423  00FE96  00                 	db	0
   424  00FE97                     STR_19:
   425  00FE97  52                 	db	82	;'R'
   426  00FE98  75                 	db	117	;'u'
   427  00FE99  6E                 	db	110	;'n'
   428  00FE9A  6E                 	db	110	;'n'
   429  00FE9B  69                 	db	105	;'i'
   430  00FE9C  6E                 	db	110	;'n'
   431  00FE9D  67                 	db	103	;'g'
   432  00FE9E  7E                 	db	126
   433  00FE9F  20                 	db	32
   434  00FEA0  20                 	db	32
   435  00FEA1  20                 	db	32
   436  00FEA2  20                 	db	32
   437  00FEA3  20                 	db	32
   438  00FEA4  20                 	db	32
   439  00FEA5  20                 	db	32
   440  00FEA6  20                 	db	32
   441  00FEA7  20                 	db	32
   442  00FEA8  20                 	db	32
   443  00FEA9  20                 	db	32
   444  00FEAA  20                 	db	32
   445  00FEAB  20                 	db	32
   446  00FEAC  20                 	db	32
   447  00FEAD  00                 	db	0
   448  00FEAE                     STR_17:
   449  00FEAE  54                 	db	84	;'T'
   450  00FEAF  6F                 	db	111	;'o'
   451  00FEB0  74                 	db	116	;'t'
   452  00FEB1  61                 	db	97	;'a'
   453  00FEB2  6C                 	db	108	;'l'
   454  00FEB3  20                 	db	32
   455  00FEB4  4F                 	db	79	;'O'
   456  00FEB5  70                 	db	112	;'p'
   457  00FEB6  65                 	db	101	;'e'
   458  00FEB7  72                 	db	114	;'r'
   459  00FEB8  61                 	db	97	;'a'
   460  00FEB9  74                 	db	116	;'t'
   461  00FEBA  69                 	db	105	;'i'
   462  00FEBB  6F                 	db	111	;'o'
   463  00FEBC  6E                 	db	110	;'n'
   464  00FEBD  20                 	db	32
   465  00FEBE  20                 	db	32
   466  00FEBF  20                 	db	32
   467  00FEC0  20                 	db	32
   468  00FEC1  20                 	db	32
   469  00FEC2  20                 	db	32
   470  00FEC3  20                 	db	32
   471  00FEC4  00                 	db	0
   472  00FEC5                     STR_4:
   473  00FEC5  44                 	db	68	;'D'
   474  00FEC6  61                 	db	97	;'a'
   475  00FEC7  74                 	db	116	;'t'
   476  00FEC8  65                 	db	101	;'e'
   477  00FEC9  3A                 	db	58	;':'
   478  00FECA  20                 	db	32
   479  00FECB  25                 	db	37
   480  00FECC  30                 	db	48	;'0'
   481  00FECD  32                 	db	50	;'2'
   482  00FECE  78                 	db	120	;'x'
   483  00FECF  2F                 	db	47
   484  00FED0  25                 	db	37
   485  00FED1  30                 	db	48	;'0'
   486  00FED2  32                 	db	50	;'2'
   487  00FED3  78                 	db	120	;'x'
   488  00FED4  2F                 	db	47
   489  00FED5  25                 	db	37
   490  00FED6  30                 	db	48	;'0'
   491  00FED7  32                 	db	50	;'2'
   492  00FED8  78                 	db	120	;'x'
   493  00FED9  20                 	db	32
   494  00FEDA  20                 	db	32
   495  00FEDB  00                 	db	0
   496  00FEDC                     STR_5:
   497  00FEDC  54                 	db	84	;'T'
   498  00FEDD  69                 	db	105	;'i'
   499  00FEDE  6D                 	db	109	;'m'
   500  00FEDF  65                 	db	101	;'e'
   501  00FEE0  3A                 	db	58	;':'
   502  00FEE1  20                 	db	32
   503  00FEE2  25                 	db	37
   504  00FEE3  30                 	db	48	;'0'
   505  00FEE4  32                 	db	50	;'2'
   506  00FEE5  78                 	db	120	;'x'
   507  00FEE6  3A                 	db	58	;':'
   508  00FEE7  25                 	db	37
   509  00FEE8  30                 	db	48	;'0'
   510  00FEE9  32                 	db	50	;'2'
   511  00FEEA  78                 	db	120	;'x'
   512  00FEEB  3A                 	db	58	;':'
   513  00FEEC  25                 	db	37
   514  00FEED  30                 	db	48	;'0'
   515  00FEEE  32                 	db	50	;'2'
   516  00FEEF  78                 	db	120	;'x'
   517  00FEF0  20                 	db	32
   518  00FEF1  20                 	db	32
   519  00FEF2  00                 	db	0
   520  00FEF3                     STR_18:
   521  00FEF3  54                 	db	84	;'T'
   522  00FEF4  69                 	db	105	;'i'
   523  00FEF5  6D                 	db	109	;'m'
   524  00FEF6  65                 	db	101	;'e'
   525  00FEF7  3A                 	db	58	;':'
   526  00FEF8  20                 	db	32
   527  00FEF9  25                 	db	37
   528  00FEFA  64                 	db	100	;'d'
   529  00FEFB  20                 	db	32
   530  00FEFC  73                 	db	115	;'s'
   531  00FEFD  20                 	db	32
   532  00FEFE  20                 	db	32
   533  00FEFF  20                 	db	32
   534  00FF00  20                 	db	32
   535  00FF01  20                 	db	32
   536  00FF02  20                 	db	32
   537  00FF03  20                 	db	32
   538  00FF04  00                 	db	0
   539  00FF05                     STR_8:
   540  00FF05  59                 	db	89	;'Y'
   541  00FF06  4F                 	db	79	;'O'
   542  00FF07  50                 	db	80	;'P'
   543  00FF08  2B                 	db	43
   544  00FF09  43                 	db	67	;'C'
   545  00FF0A  41                 	db	65	;'A'
   546  00FF0B  50                 	db	80	;'P'
   547  00FF0C  2B                 	db	43
   548  00FF0D  4C                 	db	76	;'L'
   549  00FF0E  42                 	db	66	;'B'
   550  00FF0F  4C                 	db	76	;'L'
   551  00FF10  3A                 	db	58	;':'
   552  00FF11  20                 	db	32
   553  00FF12  25                 	db	37
   554  00FF13  64                 	db	100	;'d'
   555  00FF14  20                 	db	32
   556  00FF15  20                 	db	32
   557  00FF16  00                 	db	0
   558  00FF17                     STR_10:
   559  00FF17  59                 	db	89	;'Y'
   560  00FF18  4F                 	db	79	;'O'
   561  00FF19  50                 	db	80	;'P'
   562  00FF1A  2D                 	db	45
   563  00FF1B  43                 	db	67	;'C'
   564  00FF1C  41                 	db	65	;'A'
   565  00FF1D  50                 	db	80	;'P'
   566  00FF1E  2B                 	db	43
   567  00FF1F  4C                 	db	76	;'L'
   568  00FF20  42                 	db	66	;'B'
   569  00FF21  4C                 	db	76	;'L'
   570  00FF22  3A                 	db	58	;':'
   571  00FF23  20                 	db	32
   572  00FF24  25                 	db	37
   573  00FF25  64                 	db	100	;'d'
   574  00FF26  20                 	db	32
   575  00FF27  20                 	db	32
   576  00FF28  00                 	db	0
   577  00FF29                     STR_9:
   578  00FF29  59                 	db	89	;'Y'
   579  00FF2A  4F                 	db	79	;'O'
   580  00FF2B  50                 	db	80	;'P'
   581  00FF2C  2B                 	db	43
   582  00FF2D  43                 	db	67	;'C'
   583  00FF2E  41                 	db	65	;'A'
   584  00FF2F  50                 	db	80	;'P'
   585  00FF30  2D                 	db	45
   586  00FF31  4C                 	db	76	;'L'
   587  00FF32  42                 	db	66	;'B'
   588  00FF33  4C                 	db	76	;'L'
   589  00FF34  3A                 	db	58	;':'
   590  00FF35  20                 	db	32
   591  00FF36  25                 	db	37
   592  00FF37  64                 	db	100	;'d'
   593  00FF38  20                 	db	32
   594  00FF39  20                 	db	32
   595  00FF3A  00                 	db	0
   596  00FF3B                     STR_11:
   597  00FF3B  59                 	db	89	;'Y'
   598  00FF3C  4F                 	db	79	;'O'
   599  00FF3D  50                 	db	80	;'P'
   600  00FF3E  2D                 	db	45
   601  00FF3F  43                 	db	67	;'C'
   602  00FF40  41                 	db	65	;'A'
   603  00FF41  50                 	db	80	;'P'
   604  00FF42  2D                 	db	45
   605  00FF43  4C                 	db	76	;'L'
   606  00FF44  42                 	db	66	;'B'
   607  00FF45  4C                 	db	76	;'L'
   608  00FF46  3A                 	db	58	;':'
   609  00FF47  20                 	db	32
   610  00FF48  25                 	db	37
   611  00FF49  64                 	db	100	;'d'
   612  00FF4A  20                 	db	32
   613  00FF4B  20                 	db	32
   614  00FF4C  00                 	db	0
   615  00FF4D                     STR_12:
   616  00FF4D  45                 	db	69	;'E'
   617  00FF4E  53                 	db	83	;'S'
   618  00FF4F  4B                 	db	75	;'K'
   619  00FF50  41                 	db	65	;'A'
   620  00FF51  2B                 	db	43
   621  00FF52  43                 	db	67	;'C'
   622  00FF53  41                 	db	65	;'A'
   623  00FF54  50                 	db	80	;'P'
   624  00FF55  2B                 	db	43
   625  00FF56  4C                 	db	76	;'L'
   626  00FF57  42                 	db	66	;'B'
   627  00FF58  4C                 	db	76	;'L'
   628  00FF59  3A                 	db	58	;':'
   629  00FF5A  20                 	db	32
   630  00FF5B  25                 	db	37
   631  00FF5C  64                 	db	100	;'d'
   632  00FF5D  20                 	db	32
   633  00FF5E  00                 	db	0
   634  00FF5F                     STR_14:
   635  00FF5F  45                 	db	69	;'E'
   636  00FF60  53                 	db	83	;'S'
   637  00FF61  4B                 	db	75	;'K'
   638  00FF62  41                 	db	65	;'A'
   639  00FF63  2D                 	db	45
   640  00FF64  43                 	db	67	;'C'
   641  00FF65  41                 	db	65	;'A'
   642  00FF66  50                 	db	80	;'P'
   643  00FF67  2B                 	db	43
   644  00FF68  4C                 	db	76	;'L'
   645  00FF69  42                 	db	66	;'B'
   646  00FF6A  4C                 	db	76	;'L'
   647  00FF6B  3A                 	db	58	;':'
   648  00FF6C  20                 	db	32
   649  00FF6D  25                 	db	37
   650  00FF6E  64                 	db	100	;'d'
   651  00FF6F  20                 	db	32
   652  00FF70  00                 	db	0
   653  00FF71                     STR_13:
   654  00FF71  45                 	db	69	;'E'
   655  00FF72  53                 	db	83	;'S'
   656  00FF73  4B                 	db	75	;'K'
   657  00FF74  41                 	db	65	;'A'
   658  00FF75  2B                 	db	43
   659  00FF76  43                 	db	67	;'C'
   660  00FF77  41                 	db	65	;'A'
   661  00FF78  50                 	db	80	;'P'
   662  00FF79  2D                 	db	45
   663  00FF7A  4C                 	db	76	;'L'
   664  00FF7B  42                 	db	66	;'B'
   665  00FF7C  4C                 	db	76	;'L'
   666  00FF7D  3A                 	db	58	;':'
   667  00FF7E  20                 	db	32
   668  00FF7F  25                 	db	37
   669  00FF80  64                 	db	100	;'d'
   670  00FF81  20                 	db	32
   671  00FF82  00                 	db	0
   672  00FF83                     STR_15:
   673  00FF83  45                 	db	69	;'E'
   674  00FF84  53                 	db	83	;'S'
   675  00FF85  4B                 	db	75	;'K'
   676  00FF86  41                 	db	65	;'A'
   677  00FF87  2D                 	db	45
   678  00FF88  43                 	db	67	;'C'
   679  00FF89  41                 	db	65	;'A'
   680  00FF8A  50                 	db	80	;'P'
   681  00FF8B  2D                 	db	45
   682  00FF8C  4C                 	db	76	;'L'
   683  00FF8D  42                 	db	66	;'B'
   684  00FF8E  4C                 	db	76	;'L'
   685  00FF8F  3A                 	db	58	;':'
   686  00FF90  20                 	db	32
   687  00FF91  25                 	db	37
   688  00FF92  64                 	db	100	;'d'
   689  00FF93  20                 	db	32
   690  00FF94  00                 	db	0
   691  00FF95                     STR_25:
   692  00FF95  30                 	db	48	;'0'
   693  00FF96  31                 	db	49	;'1'
   694  00FF97  32                 	db	50	;'2'
   695  00FF98  33                 	db	51	;'3'
   696  00FF99  34                 	db	52	;'4'
   697  00FF9A  35                 	db	53	;'5'
   698  00FF9B  36                 	db	54	;'6'
   699  00FF9C  37                 	db	55	;'7'
   700  00FF9D  38                 	db	56	;'8'
   701  00FF9E  39                 	db	57	;'9'
   702  00FF9F  61                 	db	97	;'a'
   703  00FFA0  62                 	db	98	;'b'
   704  00FFA1  63                 	db	99	;'c'
   705  00FFA2  64                 	db	100	;'d'
   706  00FFA3  65                 	db	101	;'e'
   707  00FFA4  66                 	db	102	;'f'
   708  00FFA5  00                 	db	0
   709  00FFA6                     STR_7:
   710  00FFA6  54                 	db	84	;'T'
   711  00FFA7  6F                 	db	111	;'o'
   712  00FFA8  74                 	db	116	;'t'
   713  00FFA9  61                 	db	97	;'a'
   714  00FFAA  6C                 	db	108	;'l'
   715  00FFAB  3A                 	db	58	;':'
   716  00FFAC  20                 	db	32
   717  00FFAD  25                 	db	37
   718  00FFAE  64                 	db	100	;'d'
   719  00FFAF  20                 	db	32
   720  00FFB0  20                 	db	32
   721  00FFB1  20                 	db	32
   722  00FFB2  20                 	db	32
   723  00FFB3  20                 	db	32
   724  00FFB4  20                 	db	32
   725  00FFB5  20                 	db	32
   726  00FFB6  00                 	db	0
   727  00FFB7                     STR_6:
   728  00FFB7  42                 	db	66	;'B'
   729  00FFB8  6F                 	db	111	;'o'
   730  00FFB9  74                 	db	116	;'t'
   731  00FFBA  74                 	db	116	;'t'
   732  00FFBB  6C                 	db	108	;'l'
   733  00FFBC  65                 	db	101	;'e'
   734  00FFBD  20                 	db	32
   735  00FFBE  43                 	db	67	;'C'
   736  00FFBF  6F                 	db	111	;'o'
   737  00FFC0  75                 	db	117	;'u'
   738  00FFC1  6E                 	db	110	;'n'
   739  00FFC2  74                 	db	116	;'t'
   740  00FFC3  20                 	db	32
   741  00FFC4  20                 	db	32
   742  00FFC5  20                 	db	32
   743  00FFC6  20                 	db	32
   744  00FFC7  00                 	db	0
   745  00FFC8                     STR_23:
   746  00FFC8  4F                 	db	79	;'O'
   747  00FFC9  70                 	db	112	;'p'
   748  00FFCA  65                 	db	101	;'e'
   749  00FFCB  72                 	db	114	;'r'
   750  00FFCC  61                 	db	97	;'a'
   751  00FFCD  74                 	db	116	;'t'
   752  00FFCE  69                 	db	105	;'i'
   753  00FFCF  6F                 	db	111	;'o'
   754  00FFD0  6E                 	db	110	;'n'
   755  00FFD1  20                 	db	32
   756  00FFD2  44                 	db	68	;'D'
   757  00FFD3  6F                 	db	111	;'o'
   758  00FFD4  6E                 	db	110	;'n'
   759  00FFD5  65                 	db	101	;'e'
   760  00FFD6  21                 	db	33
   761  00FFD7  00                 	db	0
   762  00FFD8                     STR_24:
   763  00FFD8  45                 	db	69	;'E'
   764  00FFD9  4D                 	db	77	;'M'
   765  00FFDA  45                 	db	69	;'E'
   766  00FFDB  52                 	db	82	;'R'
   767  00FFDC  47                 	db	71	;'G'
   768  00FFDD  45                 	db	69	;'E'
   769  00FFDE  4E                 	db	78	;'N'
   770  00FFDF  43                 	db	67	;'C'
   771  00FFE0  59                 	db	89	;'Y'
   772  00FFE1  20                 	db	32
   773  00FFE2  53                 	db	83	;'S'
   774  00FFE3  54                 	db	84	;'T'
   775  00FFE4  4F                 	db	79	;'O'
   776  00FFE5  50                 	db	80	;'P'
   777  00FFE6  00                 	db	0
   778  00FFE7                     STR_3:
   779  00FFE7  62                 	db	98	;'b'
   780  00FFE8  61                 	db	97	;'a'
   781  00FFE9  64                 	db	100	;'d'
   782  00FFEA  20                 	db	32
   783  00FFEB  69                 	db	105	;'i'
   784  00FFEC  6E                 	db	110	;'n'
   785  00FFED  74                 	db	116	;'t'
   786  00FFEE  65                 	db	101	;'e'
   787  00FFEF  72                 	db	114	;'r'
   788  00FFF0  72                 	db	114	;'r'
   789  00FFF1  75                 	db	117	;'u'
   790  00FFF2  70                 	db	112	;'p'
   791  00FFF3  74                 	db	116	;'t'
   792  00FFF4  00                 	db	0
   793  00FFF5                     STR_16:
   794  00FFF5  45                 	db	69	;'E'
   795  00FFF6  52                 	db	82	;'R'
   796  00FFF7  52                 	db	82	;'R'
   797  00FFF8  4F                 	db	79	;'O'
   798  00FFF9  52                 	db	82	;'R'
   799  00FFFA  3A                 	db	58	;':'
   800  00FFFB  20                 	db	32
   801  00FFFC  25                 	db	37
   802  00FFFD  64                 	db	100	;'d'
   803  00FFFE  00                 	db	0
   804                           
   805                           ; #config settings
   806  00FFFF  00                 	db	0	; dummy byte at the end
   807  0000                     
   808                           	psect	cinit
   809  002B70                     __pcinit:
   810                           	opt stack 0
   811  002B70                     start_initialization:
   812                           	opt stack 0
   813  002B70                     __initialization:
   814                           	opt stack 0
   815                           
   816                           ; Initialize objects allocated to BANK0 (2 bytes)
   817                           ; load TBLPTR registers with __pidataBANK0
   818  002B70  0E0C               	movlw	low __pidataBANK0
   819  002B72  6EF6               	movwf	tblptrl,c
   820  002B74  0E2E               	movlw	high __pidataBANK0
   821  002B76  6EF7               	movwf	tblptrh,c
   822  002B78  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   823  002B7A  6EF8               	movwf	tblptru,c
   824  002B7C  0009               	tblrd		*+	;fetch initializer
   825  002B7E  CFF5 F0EE          	movff	tablat,__pdataBANK0
   826  002B82  0009               	tblrd		*+	;fetch initializer
   827  002B84  CFF5 F0EF          	movff	tablat,__pdataBANK0+1
   828                           
   829                           ; Clear objects allocated to BANK0 (68 bytes)
   830  002B88  EE00  F080         	lfsr	0,__pbssBANK0
   831  002B8C  0E44               	movlw	68
   832  002B8E                     clear_0:
   833  002B8E  6AEE               	clrf	postinc0,c
   834  002B90  06E8               	decf	wreg,f,c
   835  002B92  E1FD               	bnz	clear_0
   836                           
   837                           ; Clear objects allocated to COMRAM (8 bytes)
   838  002B94  EE00  F076         	lfsr	0,__pbssCOMRAM
   839  002B98  0E08               	movlw	8
   840  002B9A                     clear_1:
   841  002B9A  6AEE               	clrf	postinc0,c
   842  002B9C  06E8               	decf	wreg,f,c
   843  002B9E  E1FD               	bnz	clear_1
   844  002BA0                     end_of_initialization:
   845                           	opt stack 0
   846  002BA0                     __end_of__initialization:
   847                           	opt stack 0
   848  002BA0  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   849  002BA2  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   850  002BA4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   851  002BA6  6EF8               	movwf	tblptru,c
   852  002BA8  0100               	movlb	0
   853  002BAA  EF75  F00D         	goto	_main	;jump to C main() function
   854                           tblptru	equ	0xFF8
   855                           tblptrh	equ	0xFF7
   856                           tblptrl	equ	0xFF6
   857                           tablat	equ	0xFF5
   858                           postinc0	equ	0xFEE
   859                           wreg	equ	0xFE8
   860                           
   861                           	psect	bssCOMRAM
   862  000076                     __pbssCOMRAM:
   863                           	opt stack 0
   864  000076                     _bottlequeue_tail:
   865                           	opt stack 0
   866  000076                     	ds	2
   867  000078                     _end_time:
   868                           	opt stack 0
   869  000078                     	ds	2
   870  00007A                     _start_time:
   871                           	opt stack 0
   872  00007A                     	ds	2
   873  00007C                     _stime:
   874                           	opt stack 0
   875  00007C                     	ds	2
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           
   883                           	psect	bssBANK0
   884  000080                     __pbssBANK0:
   885                           	opt stack 0
   886  000080                     _bottlequeue:
   887                           	opt stack 0
   888  000080                     	ds	22
   889  000096                     _color:
   890                           	opt stack 0
   891  000096                     	ds	8
   892  00009E                     _time:
   893                           	opt stack 0
   894  00009E                     	ds	7
   895  0000A5                     _bottlequeue_head:
   896                           	opt stack 0
   897  0000A5                     	ds	2
   898  0000A7                     _errno:
   899                           	opt stack 0
   900  0000A7                     	ds	2
   901  0000A9                     _eska_count:
   902                           	opt stack 0
   903  0000A9                     	ds	2
   904  0000AB                     _eskacap_count:
   905                           	opt stack 0
   906  0000AB                     	ds	2
   907  0000AD                     _eskacaplbl_count:
   908                           	opt stack 0
   909  0000AD                     	ds	2
   910  0000AF                     _eskalbl_count:
   911                           	opt stack 0
   912  0000AF                     	ds	2
   913  0000B1                     _etime:
   914                           	opt stack 0
   915  0000B1                     	ds	2
   916  0000B3                     _nodedata:
   917                           	opt stack 0
   918  0000B3                     	ds	2
   919  0000B5                     _operation_disp:
   920                           	opt stack 0
   921  0000B5                     	ds	2
   922  0000B7                     _operation_time:
   923                           	opt stack 0
   924  0000B7                     	ds	2
   925  0000B9                     _total_bottle_count:
   926                           	opt stack 0
   927  0000B9                     	ds	2
   928  0000BB                     _yop_count:
   929                           	opt stack 0
   930  0000BB                     	ds	2
   931  0000BD                     _yopcap_count:
   932                           	opt stack 0
   933  0000BD                     	ds	2
   934  0000BF                     _yopcaplbl_count:
   935                           	opt stack 0
   936  0000BF                     	ds	2
   937  0000C1                     _yoplbl_count:
   938                           	opt stack 0
   939  0000C1                     	ds	2
   940  0000C3                     _curr_state:
   941                           	opt stack 0
   942  0000C3                     	ds	1
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           
   950                           	psect	dataBANK0
   951  0000EE                     __pdataBANK0:
   952                           	opt stack 0
   953  0000EE                     _bottle_count_disp:
   954                           	opt stack 0
   955  0000EE                     	ds	2
   956                           tblptru	equ	0xFF8
   957                           tblptrh	equ	0xFF7
   958                           tblptrl	equ	0xFF6
   959                           tablat	equ	0xFF5
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           
   963                           	psect	cstackBANK1
   964  000100                     __pcstackBANK1:
   965                           	opt stack 0
   966  000100                     printf@idx:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x0
   970  000100                     	ds	1
   971  000101                     printf@ap:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x1
   975  000101                     	ds	2
   976  000103                     printf@prec:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x3
   980  000103                     	ds	1
   981  000104                     printf@val:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x4
   985  000104                     	ds	2
   986  000106                     printf@flag:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x6
   990  000106                     	ds	1
   991  000107                     printf@width:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x7
   995  000107                     	ds	2
   996  000109                     printf@c:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x9
  1000  000109                     	ds	1
  1001  00010A                     ??_main:
  1002                           
  1003                           ; 1 bytes @ 0xA
  1004  00010A                     	ds	2
  1005                           tblptru	equ	0xFF8
  1006                           tblptrh	equ	0xFF7
  1007                           tblptrl	equ	0xFF6
  1008                           tablat	equ	0xFF5
  1009                           postinc0	equ	0xFEE
  1010                           wreg	equ	0xFE8
  1011                           
  1012                           	psect	cstackBANK0
  1013  0000C4                     __pcstackBANK0:
  1014                           	opt stack 0
  1015  0000C4                     ??_isr:
  1016                           
  1017                           ; 1 bytes @ 0x0
  1018  0000C4                     	ds	16
  1019  0000D4                     ??_isdigit:
  1020  0000D4                     ??_I2C_Master_Wait:
  1021  0000D4                     ?___wmul:
  1022                           	opt stack 0
  1023  0000D4                     ?___awmod:
  1024                           	opt stack 0
  1025  0000D4                     ?___lwdiv:
  1026                           	opt stack 0
  1027  0000D4                     ?___lldiv:
  1028                           	opt stack 0
  1029  0000D4                     lcdNibble@temp:
  1030                           	opt stack 0
  1031  0000D4                     ___wmul@multiplier:
  1032                           	opt stack 0
  1033  0000D4                     ___awmod@dividend:
  1034                           	opt stack 0
  1035  0000D4                     ___lwdiv@dividend:
  1036                           	opt stack 0
  1037  0000D4                     ___lldiv@dividend:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x10
  1041  0000D4                     	ds	1
  1042  0000D5                     I2C_Master_Read@a:
  1043                           	opt stack 0
  1044  0000D5                     lcdNibble@data:
  1045                           	opt stack 0
  1046  0000D5                     _isdigit$821:
  1047                           	opt stack 0
  1048  0000D5                     I2C_Master_Write@d:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x11
  1052  0000D5                     	ds	1
  1053  0000D6                     I2C_Master_Read@temp:
  1054                           	opt stack 0
  1055  0000D6                     lcdInst@data:
  1056                           	opt stack 0
  1057  0000D6                     putch@data:
  1058                           	opt stack 0
  1059  0000D6                     isdigit@c:
  1060                           	opt stack 0
  1061  0000D6                     ___wmul@multiplicand:
  1062                           	opt stack 0
  1063  0000D6                     ___awmod@divisor:
  1064                           	opt stack 0
  1065  0000D6                     ___lwdiv@divisor:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x12
  1069  0000D6                     	ds	1
  1070  0000D7                     ??_read_colorsensor:
  1071  0000D7                     ??_initLCD:
  1072                           
  1073                           ; 1 bytes @ 0x13
  1074  0000D7                     	ds	1
  1075  0000D8                     ___awmod@counter:
  1076                           	opt stack 0
  1077  0000D8                     ___lwdiv@counter:
  1078                           	opt stack 0
  1079  0000D8                     ___wmul@product:
  1080                           	opt stack 0
  1081  0000D8                     ___lldiv@divisor:
  1082                           	opt stack 0
  1083                           
  1084                           ; 4 bytes @ 0x14
  1085  0000D8                     	ds	1
  1086  0000D9                     ___awmod@sign:
  1087                           	opt stack 0
  1088  0000D9                     ___lwdiv@quotient:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x15
  1092  0000D9                     	ds	2
  1093  0000DB                     ?___lwmod:
  1094                           	opt stack 0
  1095  0000DB                     ___lwmod@dividend:
  1096                           	opt stack 0
  1097  0000DB                     read_colorsensor@color_low:
  1098                           	opt stack 0
  1099                           
  1100                           ; 4 bytes @ 0x17
  1101  0000DB                     	ds	1
  1102  0000DC                     ___lldiv@quotient:
  1103                           	opt stack 0
  1104                           
  1105                           ; 4 bytes @ 0x18
  1106  0000DC                     	ds	1
  1107  0000DD                     ___lwmod@divisor:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x19
  1111  0000DD                     	ds	2
  1112  0000DF                     ___lwmod@counter:
  1113                           	opt stack 0
  1114  0000DF                     read_colorsensor@color_high:
  1115                           	opt stack 0
  1116                           
  1117                           ; 4 bytes @ 0x1B
  1118  0000DF                     	ds	1
  1119  0000E0                     ?_printf:
  1120                           	opt stack 0
  1121  0000E0                     ___lldiv@counter:
  1122                           	opt stack 0
  1123  0000E0                     printf@f:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x1C
  1127  0000E0                     	ds	1
  1128  0000E1                     I2C_Master_Init@c:
  1129                           	opt stack 0
  1130                           
  1131                           ; 4 bytes @ 0x1D
  1132  0000E1                     	ds	2
  1133  0000E3                     read_colorsensor@i:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x1F
  1137  0000E3                     	ds	2
  1138  0000E5                     ??_I2C_Master_Init:
  1139                           
  1140                           ; 1 bytes @ 0x21
  1141  0000E5                     	ds	3
  1142  0000E8                     ??_printf:
  1143                           
  1144                           ; 1 bytes @ 0x24
  1145  0000E8                     	ds	4
  1146  0000EC                     ??_operation:
  1147  0000EC                     date_time@i:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x28
  1151  0000EC                     	ds	2
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           postinc0	equ	0xFEE
  1157                           wreg	equ	0xFE8
  1158                           
  1159                           	psect	cstackCOMRAM
  1160  000001                     __pcstackCOMRAM:
  1161                           	opt stack 0
  1162  000001                     ??i2_I2C_Master_Wait:
  1163  000001                     ??i2_isdigit:
  1164  000001                     ?i2___wmul:
  1165                           	opt stack 0
  1166  000001                     ?i2___lwdiv:
  1167                           	opt stack 0
  1168  000001                     ?___ftpack:
  1169                           	opt stack 0
  1170  000001                     ?_frexp:
  1171                           	opt stack 0
  1172  000001                     ?___ftneg:
  1173                           	opt stack 0
  1174  000001                     i2lcdNibble@temp:
  1175                           	opt stack 0
  1176  000001                     servo_rotate0@degree:
  1177                           	opt stack 0
  1178  000001                     i2___wmul@multiplier:
  1179                           	opt stack 0
  1180  000001                     i2___lwdiv@dividend:
  1181                           	opt stack 0
  1182  000001                     ___ftpack@arg:
  1183                           	opt stack 0
  1184  000001                     ___ftge@ff1:
  1185                           	opt stack 0
  1186  000001                     ___ftneg@f1:
  1187                           	opt stack 0
  1188  000001                     frexp@value:
  1189                           	opt stack 0
  1190                           
  1191                           ; 3 bytes @ 0x0
  1192  000001                     	ds	1
  1193  000002                     i2I2C_Master_Read@a:
  1194                           	opt stack 0
  1195  000002                     i2lcdNibble@data:
  1196                           	opt stack 0
  1197  000002                     i2_isdigit$821:
  1198                           	opt stack 0
  1199  000002                     i2I2C_Master_Write@d:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x1
  1203  000002                     	ds	1
  1204  000003                     ??_servo_rotate0:
  1205  000003                     i2I2C_Master_Read@temp:
  1206                           	opt stack 0
  1207  000003                     i2lcdInst@data:
  1208                           	opt stack 0
  1209  000003                     i2putch@data:
  1210                           	opt stack 0
  1211  000003                     i2isdigit@c:
  1212                           	opt stack 0
  1213  000003                     i2___wmul@multiplicand:
  1214                           	opt stack 0
  1215  000003                     i2___lwdiv@divisor:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x2
  1219  000003                     	ds	1
  1220  000004                     ??i2_read_colorsensor:
  1221  000004                     read_time@i:
  1222                           	opt stack 0
  1223  000004                     ___ftpack@exp:
  1224                           	opt stack 0
  1225  000004                     frexp@eptr:
  1226                           	opt stack 0
  1227  000004                     ___ftge@ff2:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x3
  1231  000004                     	ds	1
  1232  000005                     ___ftpack@sign:
  1233                           	opt stack 0
  1234  000005                     servo_rotate0@duty:
  1235                           	opt stack 0
  1236  000005                     i2___wmul@product:
  1237                           	opt stack 0
  1238  000005                     i2___lwdiv@quotient:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x4
  1242  000005                     	ds	1
  1243  000006                     ??___ftpack:
  1244  000006                     ??_frexp:
  1245                           
  1246                           ; 1 bytes @ 0x5
  1247  000006                     	ds	1
  1248  000007                     ??___ftge:
  1249  000007                     ?___awdiv:
  1250                           	opt stack 0
  1251  000007                     i2___lwdiv@counter:
  1252                           	opt stack 0
  1253  000007                     servo_rotate0@i:
  1254                           	opt stack 0
  1255  000007                     ___awdiv@dividend:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x6
  1259  000007                     	ds	1
  1260  000008                     ?i2___lwmod:
  1261                           	opt stack 0
  1262  000008                     i2___lwmod@dividend:
  1263                           	opt stack 0
  1264  000008                     i2read_colorsensor@color_low:
  1265                           	opt stack 0
  1266                           
  1267                           ; 4 bytes @ 0x7
  1268  000008                     	ds	1
  1269  000009                     ?___ftdiv:
  1270                           	opt stack 0
  1271  000009                     ?___awtoft:
  1272                           	opt stack 0
  1273  000009                     ?___lltoft:
  1274                           	opt stack 0
  1275  000009                     servo_rotate0@j:
  1276                           	opt stack 0
  1277  000009                     ___awdiv@divisor:
  1278                           	opt stack 0
  1279  000009                     ___awtoft@c:
  1280                           	opt stack 0
  1281  000009                     ___ftdiv@f1:
  1282                           	opt stack 0
  1283  000009                     ___lltoft@c:
  1284                           	opt stack 0
  1285                           
  1286                           ; 4 bytes @ 0x8
  1287  000009                     	ds	1
  1288  00000A                     i2___lwmod@divisor:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x9
  1292  00000A                     	ds	1
  1293  00000B                     ___awdiv@counter:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0xA
  1297  00000B                     	ds	1
  1298  00000C                     ___awdiv@sign:
  1299                           	opt stack 0
  1300  00000C                     ___awtoft@sign:
  1301                           	opt stack 0
  1302  00000C                     i2___lwmod@counter:
  1303                           	opt stack 0
  1304  00000C                     ___ftdiv@f2:
  1305                           	opt stack 0
  1306  00000C                     i2read_colorsensor@color_high:
  1307                           	opt stack 0
  1308                           
  1309                           ; 4 bytes @ 0xB
  1310  00000C                     	ds	1
  1311  00000D                     ??___lltoft:
  1312  00000D                     ?i2_printf:
  1313                           	opt stack 0
  1314  00000D                     ?___ftmul:
  1315                           	opt stack 0
  1316  00000D                     ___awdiv@quotient:
  1317                           	opt stack 0
  1318  00000D                     i2printf@f:
  1319                           	opt stack 0
  1320  00000D                     ___ftmul@f1:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0xC
  1324  00000D                     	ds	2
  1325  00000F                     ??___ftdiv:
  1326  00000F                     servo_rotate1@degree:
  1327                           	opt stack 0
  1328  00000F                     servo_rotate2@degree:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0xE
  1332  00000F                     	ds	1
  1333  000010                     i2read_colorsensor@i:
  1334                           	opt stack 0
  1335  000010                     ___ftmul@f2:
  1336                           	opt stack 0
  1337                           
  1338                           ; 3 bytes @ 0xF
  1339  000010                     	ds	1
  1340  000011                     ??_servo_rotate2:
  1341  000011                     ??_servo_rotate1:
  1342  000011                     ___lltoft@exp:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x10
  1346  000011                     	ds	1
  1347  000012                     ___ftdiv@cntr:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x11
  1351  000012                     	ds	1
  1352  000013                     ??___ftmul:
  1353  000013                     ??i2_printf:
  1354  000013                     servo_rotate1@duty:
  1355                           	opt stack 0
  1356  000013                     servo_rotate2@duty:
  1357                           	opt stack 0
  1358  000013                     ___ftdiv@f3:
  1359                           	opt stack 0
  1360                           
  1361                           ; 3 bytes @ 0x12
  1362  000013                     	ds	2
  1363  000015                     servo_rotate1@i:
  1364                           	opt stack 0
  1365  000015                     servo_rotate2@i:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0x14
  1369  000015                     	ds	1
  1370  000016                     ___ftdiv@exp:
  1371                           	opt stack 0
  1372  000016                     ___ftmul@exp:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x15
  1376  000016                     	ds	1
  1377  000017                     ___ftdiv@sign:
  1378                           	opt stack 0
  1379  000017                     i2printf@idx:
  1380                           	opt stack 0
  1381  000017                     servo_rotate1@j:
  1382                           	opt stack 0
  1383  000017                     servo_rotate2@j:
  1384                           	opt stack 0
  1385  000017                     ___ftmul@f3_as_product:
  1386                           	opt stack 0
  1387                           
  1388                           ; 3 bytes @ 0x16
  1389  000017                     	ds	1
  1390  000018                     i2printf@ap:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x17
  1394  000018                     	ds	2
  1395  00001A                     ___ftmul@cntr:
  1396                           	opt stack 0
  1397  00001A                     i2printf@prec:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x19
  1401  00001A                     	ds	1
  1402  00001B                     ___ftmul@sign:
  1403                           	opt stack 0
  1404  00001B                     i2printf@val:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x1A
  1408  00001B                     	ds	1
  1409  00001C                     ?___ftadd:
  1410                           	opt stack 0
  1411  00001C                     ___ftadd@f1:
  1412                           	opt stack 0
  1413                           
  1414                           ; 3 bytes @ 0x1B
  1415  00001C                     	ds	1
  1416  00001D                     i2printf@flag:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x1C
  1420  00001D                     	ds	1
  1421  00001E                     i2printf@width:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x1D
  1425  00001E                     	ds	1
  1426  00001F                     ___ftadd@f2:
  1427                           	opt stack 0
  1428                           
  1429                           ; 3 bytes @ 0x1E
  1430  00001F                     	ds	1
  1431  000020                     i2printf@c:
  1432                           	opt stack 0
  1433                           
  1434                           ; 1 bytes @ 0x1F
  1435  000020                     	ds	2
  1436  000022                     ??___ftadd:
  1437                           
  1438                           ; 1 bytes @ 0x21
  1439  000022                     	ds	3
  1440  000025                     ___ftadd@sign:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x24
  1444  000025                     	ds	1
  1445  000026                     ___ftadd@exp2:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x25
  1449  000026                     	ds	1
  1450  000027                     ___ftadd@exp1:
  1451                           	opt stack 0
  1452                           
  1453                           ; 1 bytes @ 0x26
  1454  000027                     	ds	1
  1455  000028                     ?___ftsub:
  1456                           	opt stack 0
  1457  000028                     ?_eval_poly:
  1458                           	opt stack 0
  1459  000028                     ?___fttol:
  1460                           	opt stack 0
  1461  000028                     ___ftsub@f1:
  1462                           	opt stack 0
  1463  000028                     ___fttol@f1:
  1464                           	opt stack 0
  1465  000028                     eval_poly@x:
  1466                           	opt stack 0
  1467                           
  1468                           ; 3 bytes @ 0x27
  1469  000028                     	ds	3
  1470  00002B                     eval_poly@d:
  1471                           	opt stack 0
  1472  00002B                     ___ftsub@f2:
  1473                           	opt stack 0
  1474                           
  1475                           ; 3 bytes @ 0x2A
  1476  00002B                     	ds	1
  1477  00002C                     ??___fttol:
  1478                           
  1479                           ; 1 bytes @ 0x2B
  1480  00002C                     	ds	1
  1481  00002D                     eval_poly@n:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x2C
  1485  00002D                     	ds	1
  1486  00002E                     
  1487                           ; 1 bytes @ 0x2D
  1488  00002E                     	ds	1
  1489  00002F                     ??_eval_poly:
  1490                           
  1491                           ; 1 bytes @ 0x2E
  1492  00002F                     	ds	2
  1493  000031                     ___fttol@sign1:
  1494                           	opt stack 0
  1495  000031                     eval_poly@res:
  1496                           	opt stack 0
  1497                           
  1498                           ; 3 bytes @ 0x30
  1499  000031                     	ds	1
  1500  000032                     ___fttol@lval:
  1501                           	opt stack 0
  1502                           
  1503                           ; 4 bytes @ 0x31
  1504  000032                     	ds	2
  1505  000034                     ?_log:
  1506                           	opt stack 0
  1507  000034                     ?_ldexp:
  1508                           	opt stack 0
  1509  000034                     ldexp@value:
  1510                           	opt stack 0
  1511  000034                     log@x:
  1512                           	opt stack 0
  1513                           
  1514                           ; 3 bytes @ 0x33
  1515  000034                     	ds	2
  1516  000036                     ___fttol@exp1:
  1517                           	opt stack 0
  1518                           
  1519                           ; 1 bytes @ 0x35
  1520  000036                     	ds	1
  1521  000037                     ?___altoft:
  1522                           	opt stack 0
  1523  000037                     ldexp@newexp:
  1524                           	opt stack 0
  1525  000037                     log@exponent:
  1526                           	opt stack 0
  1527  000037                     ___altoft@c:
  1528                           	opt stack 0
  1529                           
  1530                           ; 4 bytes @ 0x36
  1531  000037                     	ds	2
  1532  000039                     ??_ldexp:
  1533                           
  1534                           ; 1 bytes @ 0x38
  1535  000039                     	ds	2
  1536  00003B                     ??___altoft:
  1537                           
  1538                           ; 1 bytes @ 0x3A
  1539  00003B                     	ds	4
  1540  00003F                     ___altoft@exp:
  1541                           	opt stack 0
  1542                           
  1543                           ; 1 bytes @ 0x3E
  1544  00003F                     	ds	1
  1545  000040                     ___altoft@sign:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x3F
  1549  000040                     	ds	1
  1550  000041                     ?_floor:
  1551                           	opt stack 0
  1552  000041                     floor@x:
  1553                           	opt stack 0
  1554                           
  1555                           ; 3 bytes @ 0x40
  1556  000041                     	ds	3
  1557  000044                     floor@i:
  1558                           	opt stack 0
  1559                           
  1560                           ; 3 bytes @ 0x43
  1561  000044                     	ds	3
  1562  000047                     floor@expon:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x46
  1566  000047                     	ds	2
  1567  000049                     ?_exp:
  1568                           	opt stack 0
  1569  000049                     exp@x:
  1570                           	opt stack 0
  1571                           
  1572                           ; 3 bytes @ 0x48
  1573  000049                     	ds	3
  1574  00004C                     _exp$1261:
  1575                           	opt stack 0
  1576                           
  1577                           ; 3 bytes @ 0x4B
  1578  00004C                     	ds	3
  1579  00004F                     exp@exponent:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x4E
  1583  00004F                     	ds	2
  1584  000051                     exp@sign:
  1585                           	opt stack 0
  1586                           
  1587                           ; 1 bytes @ 0x50
  1588  000051                     	ds	1
  1589  000052                     ?_pow:
  1590                           	opt stack 0
  1591  000052                     pow@x:
  1592                           	opt stack 0
  1593                           
  1594                           ; 3 bytes @ 0x51
  1595  000052                     	ds	3
  1596  000055                     pow@y:
  1597                           	opt stack 0
  1598                           
  1599                           ; 3 bytes @ 0x54
  1600  000055                     	ds	3
  1601  000058                     _pow$1259:
  1602                           	opt stack 0
  1603                           
  1604                           ; 3 bytes @ 0x57
  1605  000058                     	ds	3
  1606  00005B                     _pow$1260:
  1607                           	opt stack 0
  1608                           
  1609                           ; 3 bytes @ 0x5A
  1610  00005B                     	ds	3
  1611  00005E                     pow@sign:
  1612                           	opt stack 0
  1613                           
  1614                           ; 1 bytes @ 0x5D
  1615  00005E                     	ds	1
  1616  00005F                     pow@yi:
  1617                           	opt stack 0
  1618                           
  1619                           ; 4 bytes @ 0x5E
  1620  00005F                     	ds	4
  1621  000063                     ?_dec_to_hex:
  1622                           	opt stack 0
  1623  000063                     dec_to_hex@num:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x62
  1627  000063                     	ds	2
  1628  000065                     _dec_to_hex$1257:
  1629                           	opt stack 0
  1630                           
  1631                           ; 3 bytes @ 0x64
  1632  000065                     	ds	3
  1633  000068                     _dec_to_hex$1258:
  1634                           	opt stack 0
  1635                           
  1636                           ; 3 bytes @ 0x67
  1637  000068                     	ds	3
  1638  00006B                     dec_to_hex@temp:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x6A
  1642  00006B                     	ds	2
  1643  00006D                     dec_to_hex@i:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x6C
  1647  00006D                     	ds	2
  1648  00006F                     dec_to_hex@hexnum:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x6E
  1652  00006F                     	ds	2
  1653  000071                     dec_to_hex@quotient:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x70
  1657  000071                     	ds	2
  1658  000073                     isr@i:
  1659                           	opt stack 0
  1660                           
  1661                           ; 1 bytes @ 0x72
  1662  000073                     	ds	1
  1663  000074                     _isr$1352:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x73
  1667  000074                     	ds	2
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           
  1675 ;;
  1676 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1677 ;;
  1678 ;; *************** function _main *****************
  1679 ;; Defined at:
  1680 ;;		line 87 in file "main.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;		None
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1697 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;Total ram usage:        2 bytes
  1699 ;; Hardware stack levels required when called:   11
  1700 ;; This function calls:
  1701 ;;		_I2C_ColorSens_Init
  1702 ;;		_I2C_Master_Init
  1703 ;;		_bottle_count
  1704 ;;		_bottle_time
  1705 ;;		_date_time
  1706 ;;		_emergencystop
  1707 ;;		_initLCD
  1708 ;;		_operation
  1709 ;;		_operationend
  1710 ;;		_standby
  1711 ;; This function is called by:
  1712 ;;		Startup code after reset
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           	psect	text0
  1717  001AEA                     __ptext0:
  1718                           	opt stack 0
  1719  001AEA                     _main:
  1720                           	opt stack 20
  1721                           
  1722                           ;main.c: 94: TRISA = 0b11111011;
  1723                           
  1724                           ;incstack = 0
  1725  001AEA  0EFB               	movlw	251
  1726  001AEC  6E92               	movwf	3986,c	;volatile
  1727                           
  1728                           ;main.c: 95: TRISB = 0xFF;
  1729  001AEE  6893               	setf	3987,c	;volatile
  1730                           
  1731                           ;main.c: 96: TRISC = 0x00;
  1732  001AF0  0E00               	movlw	0
  1733  001AF2  6E94               	movwf	3988,c	;volatile
  1734                           
  1735                           ;main.c: 97: TRISD = 0x00;
  1736  001AF4  0E00               	movlw	0
  1737  001AF6  6E95               	movwf	3989,c	;volatile
  1738                           
  1739                           ;main.c: 98: TRISE = 0x00;
  1740  001AF8  0E00               	movlw	0
  1741  001AFA  6E96               	movwf	3990,c	;volatile
  1742                           
  1743                           ;main.c: 100: LATA = 0x00;
  1744  001AFC  0E00               	movlw	0
  1745  001AFE  6E89               	movwf	3977,c	;volatile
  1746                           
  1747                           ;main.c: 101: LATB = 0x00;
  1748  001B00  0E00               	movlw	0
  1749  001B02  6E8A               	movwf	3978,c	;volatile
  1750                           
  1751                           ;main.c: 102: LATC = 0x00;
  1752  001B04  0E00               	movlw	0
  1753  001B06  6E8B               	movwf	3979,c	;volatile
  1754                           
  1755                           ;main.c: 103: LATD = 0x00;
  1756  001B08  0E00               	movlw	0
  1757  001B0A  6E8C               	movwf	3980,c	;volatile
  1758                           
  1759                           ;main.c: 104: LATE = 0x00;
  1760  001B0C  0E00               	movlw	0
  1761  001B0E  6E8D               	movwf	3981,c	;volatile
  1762                           
  1763                           ;main.c: 106: ADCON0 = 0x00;
  1764  001B10  0E00               	movlw	0
  1765  001B12  6EC2               	movwf	4034,c	;volatile
  1766                           
  1767                           ;main.c: 107: ADCON1 = 0xFF;
  1768  001B14  68C1               	setf	4033,c	;volatile
  1769                           
  1770                           ;main.c: 110: GIE = 1;
  1771  001B16  8EF2               	bsf	intcon,7,c	;volatile
  1772                           
  1773                           ;main.c: 111: INT1IE = 1;
  1774  001B18  86F0               	bsf	intcon3,3,c	;volatile
  1775                           
  1776                           ;main.c: 112: INT0IE = 0;
  1777  001B1A  98F2               	bcf	intcon,4,c	;volatile
  1778                           
  1779                           ;main.c: 113: INT2IE = 0;
  1780  001B1C  98F0               	bcf	intcon3,4,c	;volatile
  1781                           
  1782                           ;main.c: 115: nRBPU = 0;
  1783  001B1E  9EF1               	bcf	intcon2,7,c	;volatile
  1784                           
  1785                           ;main.c: 117: initLCD();
  1786  001B20  EC28  F015         	call	_initLCD	;wreg free
  1787                           
  1788                           ;main.c: 118: I2C_Master_Init(10000);
  1789  001B24  0E10               	movlw	16
  1790  001B26  0100               	movlb	0	; () banked
  1791  001B28  6FE1               	movwf	I2C_Master_Init@c& (0+255),b
  1792  001B2A  0E27               	movlw	39
  1793  001B2C  6FE2               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1794  001B2E  0E00               	movlw	0
  1795  001B30  6FE3               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1796  001B32  0E00               	movlw	0
  1797  001B34  6FE4               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1798  001B36  ECA1  F014         	call	_I2C_Master_Init	;wreg free
  1799                           
  1800                           ;main.c: 119: I2C_ColorSens_Init();
  1801  001B3A  ECFF  F00F         	call	_I2C_ColorSens_Init	;wreg free
  1802                           
  1803                           ;main.c: 122: TMR0 = 0;
  1804  001B3E  0E00               	movlw	0
  1805  001B40  6ED7               	movwf	4055,c	;volatile
  1806  001B42  0E00               	movlw	0
  1807  001B44  6ED6               	movwf	4054,c	;volatile
  1808                           
  1809                           ;main.c: 123: T08BIT = 0;
  1810  001B46  9CD5               	bcf	4053,6,c	;volatile
  1811                           
  1812                           ;main.c: 124: T0CS = 0;
  1813  001B48  9AD5               	bcf	4053,5,c	;volatile
  1814                           
  1815                           ;main.c: 125: PSA = 0;
  1816  001B4A  96D5               	bcf	4053,3,c	;volatile
  1817                           
  1818                           ;main.c: 126: T0PS2 = 1;
  1819  001B4C  84D5               	bsf	4053,2,c	;volatile
  1820                           
  1821                           ;main.c: 127: T0PS1 = 1;
  1822  001B4E  82D5               	bsf	4053,1,c	;volatile
  1823                           
  1824                           ;main.c: 128: T0PS0 = 1;
  1825  001B50  80D5               	bsf	4053,0,c	;volatile
  1826                           
  1827                           ;main.c: 132: curr_state = STANDBY;
  1828  001B52  0E00               	movlw	0
  1829  001B54  0100               	movlb	0	; () banked
  1830  001B56  6FC3               	movwf	_curr_state& (0+255),b
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;main.c: 135: switch(curr_state){
  1834                           
  1835                           ;main.c: 134: while(1){
  1836  001B58  D015               	goto	l5209
  1837  001B5A                     l5193:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 137: standby();
  1841  001B5A  ECF2  F016         	call	_standby	;wreg free
  1842                           
  1843                           ;main.c: 138: break;
  1844  001B5E  D029               	goto	l5211
  1845  001B60                     l5195:
  1846                           
  1847                           ;main.c: 140: emergencystop();
  1848  001B60  EC8D  F016         	call	_emergencystop	;wreg free
  1849                           
  1850                           ;main.c: 141: break;
  1851  001B64  D026               	goto	l5211
  1852  001B66                     l5197:
  1853                           
  1854                           ;main.c: 143: operation();
  1855  001B66  EC60  F010         	call	_operation	;wreg free
  1856                           
  1857                           ;main.c: 144: break;
  1858  001B6A  D023               	goto	l5211
  1859  001B6C                     l5199:
  1860                           
  1861                           ;main.c: 146: operationend();
  1862  001B6C  ECAD  F016         	call	_operationend	;wreg free
  1863                           
  1864                           ;main.c: 147: break;
  1865  001B70  D020               	goto	l5211
  1866  001B72                     l5201:
  1867                           
  1868                           ;main.c: 149: date_time();
  1869  001B72  ECCA  F00E         	call	_date_time	;wreg free
  1870                           
  1871                           ;main.c: 150: break;
  1872  001B76  D01D               	goto	l5211
  1873  001B78                     l5203:
  1874                           
  1875                           ;main.c: 152: bottle_count();
  1876  001B78  ECE2  F008         	call	_bottle_count	;wreg free
  1877                           
  1878                           ;main.c: 153: break;
  1879  001B7C  D01A               	goto	l5211
  1880  001B7E                     l5205:
  1881                           
  1882                           ;main.c: 155: bottle_time();
  1883  001B7E  ECF3  F015         	call	_bottle_time	;wreg free
  1884                           
  1885                           ;main.c: 157: }
  1886                           
  1887                           ;main.c: 156: break;
  1888  001B82  D017               	goto	l5211
  1889  001B84                     l5209:
  1890  001B84  0100               	movlb	0	; () banked
  1891  001B86  51C3               	movf	_curr_state& (0+255),w,b
  1892                           
  1893                           ; Switch size 1, requested type "space"
  1894                           ; Number of cases is 7, Range of values is 0 to 6
  1895                           ; switch strategies available:
  1896                           ; Name         Instructions Cycles
  1897                           ; simple_byte           22    12 (average)
  1898                           ;	Chosen strategy is simple_byte
  1899  001B88  0A00               	xorlw	0	; case 0
  1900  001B8A  B4D8               	btfsc	status,2,c
  1901  001B8C  D7E6               	goto	l5193
  1902  001B8E  0A01               	xorlw	1	; case 1
  1903  001B90  B4D8               	btfsc	status,2,c
  1904  001B92  D7E6               	goto	l5195
  1905  001B94  0A03               	xorlw	3	; case 2
  1906  001B96  B4D8               	btfsc	status,2,c
  1907  001B98  D7E6               	goto	l5197
  1908  001B9A  0A01               	xorlw	1	; case 3
  1909  001B9C  B4D8               	btfsc	status,2,c
  1910  001B9E  D7E6               	goto	l5199
  1911  001BA0  0A07               	xorlw	7	; case 4
  1912  001BA2  B4D8               	btfsc	status,2,c
  1913  001BA4  D7E6               	goto	l5201
  1914  001BA6  0A01               	xorlw	1	; case 5
  1915  001BA8  B4D8               	btfsc	status,2,c
  1916  001BAA  D7E6               	goto	l5203
  1917  001BAC  0A03               	xorlw	3	; case 6
  1918  001BAE  B4D8               	btfsc	status,2,c
  1919  001BB0  D7E6               	goto	l5205
  1920  001BB2                     l5211:
  1921                           
  1922                           ;main.c: 158: _delay((unsigned long)((200)*(10000000/4000.0)));
  1923  001BB2  0E03               	movlw	3
  1924  001BB4  0101               	movlb	1	; () banked
  1925  001BB6  6F0B               	movwf	(??_main+1)& (0+255),b
  1926  001BB8  0E8A               	movlw	138
  1927  001BBA  0101               	movlb	1	; () banked
  1928  001BBC  6F0A               	movwf	??_main& (0+255),b
  1929  001BBE  0E55               	movlw	85
  1930  001BC0                     u4837:
  1931  001BC0  2EE8               	decfsz	wreg,f,c
  1932  001BC2  D7FE               	bra	u4837
  1933  001BC4  2F0A               	decfsz	??_main& (0+255),f,b
  1934  001BC6  D7FC               	bra	u4837
  1935  001BC8  2F0B               	decfsz	(??_main+1)& (0+255),f,b
  1936  001BCA  D7FA               	bra	u4837
  1937  001BCC  D000               	nop2	
  1938  001BCE  D7DA               	goto	l5209
  1939  001BD0                     __end_of_main:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           intcon	equ	0xFF2
  1946                           intcon2	equ	0xFF1
  1947                           intcon3	equ	0xFF0
  1948                           postinc0	equ	0xFEE
  1949                           wreg	equ	0xFE8
  1950                           status	equ	0xFD8
  1951                           
  1952 ;; *************** function _standby *****************
  1953 ;; Defined at:
  1954 ;;		line 329 in file "main.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;		None
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;		None
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg, status,2, status,0, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;Total ram usage:        0 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:    9
  1975 ;; This function calls:
  1976 ;;		_lcdInst
  1977 ;; This function is called by:
  1978 ;;		_main
  1979 ;; This function uses a non-reentrant model
  1980 ;;
  1981                           
  1982                           	psect	text1
  1983  002DE4                     __ptext1:
  1984                           	opt stack 0
  1985  002DE4                     _standby:
  1986                           	opt stack 21
  1987                           
  1988                           ;main.c: 330: lcdInst(0b10000000);
  1989                           
  1990                           ;incstack = 0
  1991  002DE4  0E80               	movlw	128
  1992  002DE6  ECD4  F016         	call	_lcdInst
  1993  002DEA  0012               	return	
  1994  002DEC                     __end_of_standby:
  1995                           	opt stack 0
  1996                           tblptru	equ	0xFF8
  1997                           tblptrh	equ	0xFF7
  1998                           tblptrl	equ	0xFF6
  1999                           tablat	equ	0xFF5
  2000                           intcon	equ	0xFF2
  2001                           intcon2	equ	0xFF1
  2002                           intcon3	equ	0xFF0
  2003                           postinc0	equ	0xFEE
  2004                           wreg	equ	0xFE8
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _operationend *****************
  2008 ;; Defined at:
  2009 ;;		line 479 in file "main.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;Total ram usage:        0 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:   10
  2030 ;; This function calls:
  2031 ;;		_lcdInst
  2032 ;;		_printf
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text2
  2039  002D5A                     __ptext2:
  2040                           	opt stack 0
  2041  002D5A                     _operationend:
  2042                           	opt stack 20
  2043                           
  2044                           ;main.c: 480: lcdInst(0b10000000);
  2045                           
  2046                           ;incstack = 0
  2047  002D5A  0E80               	movlw	128
  2048  002D5C  ECD4  F016         	call	_lcdInst
  2049                           
  2050                           ;main.c: 481: printf("Operation Done!");
  2051  002D60  0EC8               	movlw	low STR_23
  2052  002D62  0100               	movlb	0	; () banked
  2053  002D64  6FE0               	movwf	printf@f& (0+255),b
  2054  002D66  0EFF               	movlw	high STR_23
  2055  002D68  0100               	movlb	0	; () banked
  2056  002D6A  6FE1               	movwf	(printf@f+1)& (0+255),b
  2057  002D6C  EC97  F003         	call	_printf	;wreg free
  2058  002D70  0012               	return	
  2059  002D72                     __end_of_operationend:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           intcon	equ	0xFF2
  2066                           intcon2	equ	0xFF1
  2067                           intcon3	equ	0xFF0
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _operation *****************
  2073 ;; Defined at:
  2074 ;;		line 454 in file "main.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;Total ram usage:        2 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:   10
  2095 ;; This function calls:
  2096 ;;		_lcdInst
  2097 ;;		_printf
  2098 ;;		_read_colorsensor
  2099 ;; This function is called by:
  2100 ;;		_main
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text3
  2105  0020C0                     __ptext3:
  2106                           	opt stack 0
  2107  0020C0                     _operation:
  2108                           	opt stack 20
  2109                           
  2110                           ;main.c: 455: switch(operation_disp){
  2111                           
  2112                           ;incstack = 0
  2113  0020C0  D031               	goto	l5061
  2114  0020C2                     l5041:
  2115                           
  2116                           ;main.c: 457: lcdInst(0b10000000);
  2117  0020C2  0E80               	movlw	128
  2118  0020C4  ECD4  F016         	call	_lcdInst
  2119                           
  2120                           ;main.c: 458: printf("Running~              ");
  2121  0020C8  0E97               	movlw	low STR_19
  2122  0020CA  0100               	movlb	0	; () banked
  2123  0020CC  6FE0               	movwf	printf@f& (0+255),b
  2124  0020CE  0EFE               	movlw	high STR_19
  2125  0020D0  0100               	movlb	0	; () banked
  2126  0020D2  6FE1               	movwf	(printf@f+1)& (0+255),b
  2127  0020D4  EC97  F003         	call	_printf	;wreg free
  2128                           
  2129                           ;main.c: 459: operation_disp = 1;
  2130  0020D8  0E00               	movlw	0
  2131  0020DA  0100               	movlb	0	; () banked
  2132  0020DC  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2133  0020DE  0E01               	movlw	1
  2134  0020E0  D01F               	goto	L2
  2135  0020E2                     l5047:
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;main.c: 462: lcdInst(0b10000000);
  2139  0020E2  0E80               	movlw	128
  2140  0020E4  ECD4  F016         	call	_lcdInst
  2141                           
  2142                           ;main.c: 463: printf("Running~~              ");
  2143  0020E8  0E7F               	movlw	low STR_20
  2144  0020EA  0100               	movlb	0	; () banked
  2145  0020EC  6FE0               	movwf	printf@f& (0+255),b
  2146  0020EE  0EFE               	movlw	high STR_20
  2147  0020F0  0100               	movlb	0	; () banked
  2148  0020F2  6FE1               	movwf	(printf@f+1)& (0+255),b
  2149  0020F4  EC97  F003         	call	_printf	;wreg free
  2150                           
  2151                           ;main.c: 464: operation_disp = 2;
  2152  0020F8  0E00               	movlw	0
  2153  0020FA  0100               	movlb	0	; () banked
  2154  0020FC  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2155  0020FE  0E02               	movlw	2
  2156  002100  D00F               	goto	L2
  2157  002102                     l5053:
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;main.c: 467: lcdInst(0b10000000);
  2161  002102  0E80               	movlw	128
  2162  002104  ECD4  F016         	call	_lcdInst
  2163                           
  2164                           ;main.c: 468: printf("Running~~~              ");
  2165  002108  0E36               	movlw	low STR_21
  2166  00210A  0100               	movlb	0	; () banked
  2167  00210C  6FE0               	movwf	printf@f& (0+255),b
  2168  00210E  0EFE               	movlw	high STR_21
  2169  002110  0100               	movlb	0	; () banked
  2170  002112  6FE1               	movwf	(printf@f+1)& (0+255),b
  2171  002114  EC97  F003         	call	_printf	;wreg free
  2172                           
  2173                           ;main.c: 469: operation_disp = 0;
  2174  002118  0E00               	movlw	0
  2175  00211A  0100               	movlb	0	; () banked
  2176  00211C  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2177  00211E  0E00               	movlw	0
  2178  002120                     L2:
  2179  002120  6FB5               	movwf	_operation_disp& (0+255),b
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;main.c: 471: }
  2183                           
  2184                           ;main.c: 470: break;
  2185  002122  D014               	goto	l5063
  2186  002124                     l5061:
  2187  002124  C0B5  F0EC         	movff	_operation_disp,??_operation
  2188  002128  C0B6  F0ED         	movff	_operation_disp+1,??_operation+1
  2189                           
  2190                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2191                           ; Switch size 1, requested type "space"
  2192                           ; Number of cases is 1, Range of values is 0 to 0
  2193                           ; switch strategies available:
  2194                           ; Name         Instructions Cycles
  2195                           ; simple_byte            4     3 (average)
  2196                           ;	Chosen strategy is simple_byte
  2197  00212C  0100               	movlb	0	; () banked
  2198  00212E  51ED               	movf	(??_operation+1)& (0+255),w,b
  2199  002130  0A00               	xorlw	0	; case 0
  2200  002132  A4D8               	btfss	status,2,c
  2201  002134  D00B               	goto	l5063
  2202                           
  2203                           ; BSR set to: 0
  2204                           ; Switch size 1, requested type "space"
  2205                           ; Number of cases is 3, Range of values is 0 to 2
  2206                           ; switch strategies available:
  2207                           ; Name         Instructions Cycles
  2208                           ; simple_byte           10     6 (average)
  2209                           ;	Chosen strategy is simple_byte
  2210  002136  0100               	movlb	0	; () banked
  2211  002138  51EC               	movf	??_operation& (0+255),w,b
  2212  00213A  0A00               	xorlw	0	; case 0
  2213  00213C  B4D8               	btfsc	status,2,c
  2214  00213E  D7C1               	goto	l5041
  2215  002140  0A01               	xorlw	1	; case 1
  2216  002142  B4D8               	btfsc	status,2,c
  2217  002144  D7CE               	goto	l5047
  2218  002146  0A03               	xorlw	3	; case 2
  2219  002148  B4D8               	btfsc	status,2,c
  2220  00214A  D7DB               	goto	l5053
  2221  00214C                     l5063:
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;main.c: 473: lcdInst(0b11000000);
  2225  00214C  0EC0               	movlw	192
  2226  00214E  ECD4  F016         	call	_lcdInst
  2227                           
  2228                           ;main.c: 474: read_colorsensor();
  2229  002152  EC67  F00A         	call	_read_colorsensor	;wreg free
  2230                           
  2231                           ;main.c: 475: printf("R%d G%d B%d                ", color[1], color[2], color[3]);
  2232  002156  0E1A               	movlw	low STR_22
  2233  002158  0100               	movlb	0	; () banked
  2234  00215A  6FE0               	movwf	printf@f& (0+255),b
  2235  00215C  0EFE               	movlw	high STR_22
  2236  00215E  0100               	movlb	0	; () banked
  2237  002160  6FE1               	movwf	(printf@f+1)& (0+255),b
  2238  002162  C098  F0E2         	movff	_color+2,?_printf+2
  2239  002166  C099  F0E3         	movff	_color+3,?_printf+3
  2240  00216A  C09A  F0E4         	movff	_color+4,?_printf+4
  2241  00216E  C09B  F0E5         	movff	_color+5,?_printf+5
  2242  002172  C09C  F0E6         	movff	_color+6,?_printf+6
  2243  002176  C09D  F0E7         	movff	_color+7,?_printf+7
  2244  00217A  EC97  F003         	call	_printf	;wreg free
  2245  00217E  0012               	return	
  2246  002180                     __end_of_operation:
  2247                           	opt stack 0
  2248                           tblptru	equ	0xFF8
  2249                           tblptrh	equ	0xFF7
  2250                           tblptrl	equ	0xFF6
  2251                           tablat	equ	0xFF5
  2252                           intcon	equ	0xFF2
  2253                           intcon2	equ	0xFF1
  2254                           intcon3	equ	0xFF0
  2255                           postinc0	equ	0xFEE
  2256                           wreg	equ	0xFE8
  2257                           status	equ	0xFD8
  2258                           
  2259 ;; *************** function _read_colorsensor *****************
  2260 ;; Defined at:
  2261 ;;		line 534 in file "main.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  color_high      4   27[BANK0 ] unsigned char [4]
  2266 ;;  color_low       4   23[BANK0 ] unsigned char [4]
  2267 ;;  i               2   31[BANK0 ] int 
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2278 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2279 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2280 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2281 ;;Total ram usage:       14 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    9
  2284 ;; This function calls:
  2285 ;;		_I2C_Master_Read
  2286 ;;		_I2C_Master_Start
  2287 ;;		_I2C_Master_Stop
  2288 ;;		_I2C_Master_Write
  2289 ;; This function is called by:
  2290 ;;		_operation
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text4
  2295  0014CE                     __ptext4:
  2296                           	opt stack 0
  2297  0014CE                     _read_colorsensor:
  2298                           	opt stack 20
  2299                           
  2300                           ;main.c: 539: unsigned char color_low[4];
  2301                           ;main.c: 540: unsigned char color_high[4];
  2302                           ;main.c: 541: int i;
  2303                           ;main.c: 544: I2C_Master_Start();
  2304                           
  2305                           ;incstack = 0
  2306  0014CE  ECFA  F016         	call	_I2C_Master_Start	;wreg free
  2307                           
  2308                           ;main.c: 545: I2C_Master_Write(0b01010010);
  2309  0014D2  0E00               	movlw	0
  2310  0014D4  0100               	movlb	0	; () banked
  2311  0014D6  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2312  0014D8  0E52               	movlw	82
  2313  0014DA  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2314  0014DC  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  2315                           
  2316                           ;main.c: 546: I2C_Master_Write(0b10110100);
  2317  0014E0  0E00               	movlw	0
  2318  0014E2  0100               	movlb	0	; () banked
  2319  0014E4  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2320  0014E6  0EB4               	movlw	180
  2321  0014E8  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2322  0014EA  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  2323                           
  2324                           ;main.c: 547: I2C_Master_Start();
  2325  0014EE  ECFA  F016         	call	_I2C_Master_Start	;wreg free
  2326                           
  2327                           ;main.c: 548: I2C_Master_Write(0b01010011);
  2328  0014F2  0E00               	movlw	0
  2329  0014F4  0100               	movlb	0	; () banked
  2330  0014F6  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2331  0014F8  0E53               	movlw	83
  2332  0014FA  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2333  0014FC  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  2334                           
  2335                           ;main.c: 549: for(i=0; i<3; i++){
  2336  001500  0E00               	movlw	0
  2337  001502  0100               	movlb	0	; () banked
  2338  001504  6FE4               	movwf	(read_colorsensor@i+1)& (0+255),b
  2339  001506  0E00               	movlw	0
  2340  001508  6FE3               	movwf	read_colorsensor@i& (0+255),b
  2341  00150A                     l3613:
  2342                           
  2343                           ; BSR set to: 0
  2344  00150A  0100               	movlb	0	; () banked
  2345  00150C  BFE4               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2346  00150E  D008               	goto	l3617
  2347  001510  0100               	movlb	0	; () banked
  2348  001512  51E4               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2349  001514  E121               	bnz	l3623
  2350  001516  0E03               	movlw	3
  2351  001518  0100               	movlb	0	; () banked
  2352  00151A  5DE3               	subwf	read_colorsensor@i& (0+255),w,b
  2353  00151C  B0D8               	btfsc	status,0,c
  2354  00151E  D01C               	goto	l3623
  2355  001520                     l3617:
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;main.c: 550: color_low[i] = I2C_Master_Read(1);
  2359  001520  0EDB               	movlw	low read_colorsensor@color_low
  2360  001522  0100               	movlb	0	; () banked
  2361  001524  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2362  001526  6ED9               	movwf	fsr2l,c
  2363  001528  0E00               	movlw	high read_colorsensor@color_low
  2364  00152A  0100               	movlb	0	; () banked
  2365  00152C  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2366  00152E  6EDA               	movwf	fsr2h,c
  2367  001530  0E01               	movlw	1
  2368  001532  EC29  F016         	call	_I2C_Master_Read
  2369  001536  6EDF               	movwf	indf2,c
  2370                           
  2371                           ;main.c: 551: color_high[i] = I2C_Master_Read(1);
  2372  001538  0EDF               	movlw	low read_colorsensor@color_high
  2373  00153A  0100               	movlb	0	; () banked
  2374  00153C  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2375  00153E  6ED9               	movwf	fsr2l,c
  2376  001540  0E00               	movlw	high read_colorsensor@color_high
  2377  001542  0100               	movlb	0	; () banked
  2378  001544  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2379  001546  6EDA               	movwf	fsr2h,c
  2380  001548  0E01               	movlw	1
  2381  00154A  EC29  F016         	call	_I2C_Master_Read
  2382  00154E  6EDF               	movwf	indf2,c
  2383  001550  0100               	movlb	0	; () banked
  2384  001552  4BE3               	infsnz	read_colorsensor@i& (0+255),f,b
  2385  001554  2BE4               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2386  001556  D7D9               	goto	l3613
  2387  001558                     l3623:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;main.c: 552: }
  2391                           ;main.c: 553: color_low[3] = I2C_Master_Read(1);
  2392  001558  0E01               	movlw	1
  2393  00155A  EC29  F016         	call	_I2C_Master_Read
  2394  00155E  0100               	movlb	0	; () banked
  2395  001560  6FDE               	movwf	(read_colorsensor@color_low+3)& (0+255),b
  2396                           
  2397                           ;main.c: 554: color_high[3] = I2C_Master_Read(0);
  2398  001562  0E00               	movlw	0
  2399  001564  EC29  F016         	call	_I2C_Master_Read
  2400  001568  0100               	movlb	0	; () banked
  2401  00156A  6FE2               	movwf	(read_colorsensor@color_high+3)& (0+255),b
  2402                           
  2403                           ;main.c: 555: I2C_Master_Stop();
  2404  00156C  ECF6  F016         	call	_I2C_Master_Stop	;wreg free
  2405                           
  2406                           ;main.c: 557: for(i=0; i<4; i++){
  2407  001570  0E00               	movlw	0
  2408  001572  0100               	movlb	0	; () banked
  2409  001574  6FE4               	movwf	(read_colorsensor@i+1)& (0+255),b
  2410  001576  0E00               	movlw	0
  2411  001578  6FE3               	movwf	read_colorsensor@i& (0+255),b
  2412  00157A                     l3627:
  2413                           
  2414                           ; BSR set to: 0
  2415  00157A  0100               	movlb	0	; () banked
  2416  00157C  BFE4               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2417  00157E  D008               	goto	l3631
  2418  001580  0100               	movlb	0	; () banked
  2419  001582  51E4               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2420  001584  E139               	bnz	l415
  2421  001586  0E04               	movlw	4
  2422  001588  0100               	movlb	0	; () banked
  2423  00158A  5DE3               	subwf	read_colorsensor@i& (0+255),w,b
  2424  00158C  B0D8               	btfsc	status,0,c
  2425  00158E  0012               	return	
  2426  001590                     l3631:
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;main.c: 558: color[i] = (color_high[i] << 8)|(color_low[i]);
  2430  001590  0EDF               	movlw	low read_colorsensor@color_high
  2431  001592  0100               	movlb	0	; () banked
  2432  001594  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2433  001596  6ED9               	movwf	fsr2l,c
  2434  001598  0E00               	movlw	high read_colorsensor@color_high
  2435  00159A  0100               	movlb	0	; () banked
  2436  00159C  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2437  00159E  6EDA               	movwf	fsr2h,c
  2438  0015A0  50DF               	movf	indf2,w,c
  2439  0015A2  0100               	movlb	0	; () banked
  2440  0015A4  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2441  0015A6  0100               	movlb	0	; () banked
  2442  0015A8  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2443  0015AA  0100               	movlb	0	; () banked
  2444  0015AC  6FD9               	movwf	(??_read_colorsensor+2)& (0+255),b
  2445  0015AE  6BD8               	clrf	(??_read_colorsensor+1)& (0+255),b
  2446  0015B0  0EDB               	movlw	low read_colorsensor@color_low
  2447  0015B2  0100               	movlb	0	; () banked
  2448  0015B4  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2449  0015B6  6ED9               	movwf	fsr2l,c
  2450  0015B8  0E00               	movlw	high read_colorsensor@color_low
  2451  0015BA  0100               	movlb	0	; () banked
  2452  0015BC  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2453  0015BE  6EDA               	movwf	fsr2h,c
  2454  0015C0  50DF               	movf	indf2,w,c
  2455  0015C2  0100               	movlb	0	; () banked
  2456  0015C4  6FDA               	movwf	(??_read_colorsensor+3)& (0+255),b
  2457  0015C6  0100               	movlb	0	; () banked
  2458  0015C8  51DA               	movf	(??_read_colorsensor+3)& (0+255),w,b
  2459  0015CA  0100               	movlb	0	; () banked
  2460  0015CC  13D8               	iorwf	(??_read_colorsensor+1)& (0+255),f,b
  2461  0015CE  0E00               	movlw	0
  2462  0015D0  13D9               	iorwf	(??_read_colorsensor+2)& (0+255),f,b
  2463  0015D2  90D8               	bcf	status,0,c
  2464  0015D4  0100               	movlb	0	; () banked
  2465  0015D6  35E3               	rlcf	read_colorsensor@i& (0+255),w,b
  2466  0015D8  6ED9               	movwf	fsr2l,c
  2467  0015DA  0100               	movlb	0	; () banked
  2468  0015DC  35E4               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2469  0015DE  6EDA               	movwf	fsr2h,c
  2470  0015E0  0E96               	movlw	low _color
  2471  0015E2  26D9               	addwf	fsr2l,f,c
  2472  0015E4  0E00               	movlw	high _color
  2473  0015E6  22DA               	addwfc	fsr2h,f,c
  2474  0015E8  C0D8  FFDE         	movff	??_read_colorsensor+1,postinc2
  2475  0015EC  C0D9  FFDD         	movff	??_read_colorsensor+2,postdec2
  2476                           
  2477                           ; BSR set to: 0
  2478  0015F0  0100               	movlb	0	; () banked
  2479  0015F2  4BE3               	infsnz	read_colorsensor@i& (0+255),f,b
  2480  0015F4  2BE4               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2481  0015F6  D7C1               	goto	l3627
  2482  0015F8                     l415:
  2483                           
  2484                           ; BSR set to: 0
  2485  0015F8  0012               	return		;funcret
  2486  0015FA                     __end_of_read_colorsensor:
  2487                           	opt stack 0
  2488                           tblptru	equ	0xFF8
  2489                           tblptrh	equ	0xFF7
  2490                           tblptrl	equ	0xFF6
  2491                           tablat	equ	0xFF5
  2492                           intcon	equ	0xFF2
  2493                           intcon2	equ	0xFF1
  2494                           intcon3	equ	0xFF0
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           indf2	equ	0xFDF
  2498                           postinc2	equ	0xFDE
  2499                           postdec2	equ	0xFDD
  2500                           fsr2h	equ	0xFDA
  2501                           fsr2l	equ	0xFD9
  2502                           status	equ	0xFD8
  2503                           
  2504 ;; *************** function _initLCD *****************
  2505 ;; Defined at:
  2506 ;;		line 14 in file "lcd.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;		None
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;		None
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;Total ram usage:        1 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    9
  2527 ;; This function calls:
  2528 ;;		_lcdInst
  2529 ;; This function is called by:
  2530 ;;		_main
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text5
  2535  002A50                     __ptext5:
  2536                           	opt stack 0
  2537  002A50                     _initLCD:
  2538                           	opt stack 21
  2539                           
  2540                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;incstack = 0
  2544  002A50  0E31               	movlw	49
  2545  002A52  0100               	movlb	0	; () banked
  2546  002A54  6FD7               	movwf	??_initLCD& (0+255),b
  2547  002A56  0EB2               	movlw	178
  2548  002A58                     u4847:
  2549  002A58  2EE8               	decfsz	wreg,f,c
  2550  002A5A  D7FE               	bra	u4847
  2551  002A5C  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2552  002A5E  D7FC               	bra	u4847
  2553  002A60  F000               	nop	
  2554                           
  2555                           ;lcd.c: 16: lcdInst(0b00110011);
  2556  002A62  0E33               	movlw	51
  2557  002A64  ECD4  F016         	call	_lcdInst
  2558                           
  2559                           ;lcd.c: 17: lcdInst(0b00110011);
  2560  002A68  0E33               	movlw	51
  2561  002A6A  ECD4  F016         	call	_lcdInst
  2562                           
  2563                           ;lcd.c: 18: lcdInst(0b00110010);
  2564  002A6E  0E32               	movlw	50
  2565  002A70  ECD4  F016         	call	_lcdInst
  2566                           
  2567                           ;lcd.c: 19: lcdInst(0b00101000);
  2568  002A74  0E28               	movlw	40
  2569  002A76  ECD4  F016         	call	_lcdInst
  2570                           
  2571                           ;lcd.c: 20: lcdInst(0b00001111);
  2572  002A7A  0E0F               	movlw	15
  2573  002A7C  ECD4  F016         	call	_lcdInst
  2574                           
  2575                           ;lcd.c: 21: lcdInst(0b00000110);
  2576  002A80  0E06               	movlw	6
  2577  002A82  ECD4  F016         	call	_lcdInst
  2578                           
  2579                           ;lcd.c: 22: lcdInst(0b00000001);
  2580  002A86  0E01               	movlw	1
  2581  002A88  ECD4  F016         	call	_lcdInst
  2582                           
  2583                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2584  002A8C  0E31               	movlw	49
  2585  002A8E  0100               	movlb	0	; () banked
  2586  002A90  6FD7               	movwf	??_initLCD& (0+255),b
  2587  002A92  0EB2               	movlw	178
  2588  002A94                     u4857:
  2589  002A94  2EE8               	decfsz	wreg,f,c
  2590  002A96  D7FE               	bra	u4857
  2591  002A98  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2592  002A9A  D7FC               	bra	u4857
  2593  002A9C  F000               	nop	
  2594  002A9E  0012               	return		;funcret
  2595  002AA0                     __end_of_initLCD:
  2596                           	opt stack 0
  2597                           tblptru	equ	0xFF8
  2598                           tblptrh	equ	0xFF7
  2599                           tblptrl	equ	0xFF6
  2600                           tablat	equ	0xFF5
  2601                           intcon	equ	0xFF2
  2602                           intcon2	equ	0xFF1
  2603                           intcon3	equ	0xFF0
  2604                           postinc0	equ	0xFEE
  2605                           wreg	equ	0xFE8
  2606                           indf2	equ	0xFDF
  2607                           postinc2	equ	0xFDE
  2608                           postdec2	equ	0xFDD
  2609                           fsr2h	equ	0xFDA
  2610                           fsr2l	equ	0xFD9
  2611                           status	equ	0xFD8
  2612                           
  2613 ;; *************** function _emergencystop *****************
  2614 ;; Defined at:
  2615 ;;		line 485 in file "main.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;Total ram usage:        0 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:   10
  2636 ;; This function calls:
  2637 ;;		_lcdInst
  2638 ;;		_printf
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text6
  2645  002D1A                     __ptext6:
  2646                           	opt stack 0
  2647  002D1A                     _emergencystop:
  2648                           	opt stack 20
  2649                           
  2650                           ;main.c: 486: (INTCONbits.GIE = 0);
  2651                           
  2652                           ;incstack = 0
  2653  002D1A  9EF2               	bcf	intcon,7,c	;volatile
  2654                           
  2655                           ;main.c: 487: PORTAbits.RA2 = 0;
  2656  002D1C  9480               	bcf	3968,2,c	;volatile
  2657                           
  2658                           ;main.c: 488: lcdInst(0b00000001);
  2659  002D1E  0E01               	movlw	1
  2660  002D20  ECD4  F016         	call	_lcdInst
  2661                           
  2662                           ;main.c: 489: lcdInst(0b10000000);
  2663  002D24  0E80               	movlw	128
  2664  002D26  ECD4  F016         	call	_lcdInst
  2665                           
  2666                           ;main.c: 490: printf("EMERGENCY STOP");
  2667  002D2A  0ED8               	movlw	low STR_24
  2668  002D2C  0100               	movlb	0	; () banked
  2669  002D2E  6FE0               	movwf	printf@f& (0+255),b
  2670  002D30  0EFF               	movlw	high STR_24
  2671  002D32  0100               	movlb	0	; () banked
  2672  002D34  6FE1               	movwf	(printf@f+1)& (0+255),b
  2673  002D36  EC97  F003         	call	_printf	;wreg free
  2674  002D3A                     l372:
  2675  002D3A  D7FF               	goto	l372
  2676  002D3C                     __end_of_emergencystop:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           intcon	equ	0xFF2
  2683                           intcon2	equ	0xFF1
  2684                           intcon3	equ	0xFF0
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           indf2	equ	0xFDF
  2688                           postinc2	equ	0xFDE
  2689                           postdec2	equ	0xFDD
  2690                           fsr2h	equ	0xFDA
  2691                           fsr2l	equ	0xFD9
  2692                           status	equ	0xFD8
  2693                           
  2694 ;; *************** function _date_time *****************
  2695 ;; Defined at:
  2696 ;;		line 361 in file "main.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;		None
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;  i               1   40[BANK0 ] unsigned char 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;Total ram usage:        1 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:   10
  2717 ;; This function calls:
  2718 ;;		_I2C_Master_Read
  2719 ;;		_I2C_Master_Start
  2720 ;;		_I2C_Master_Stop
  2721 ;;		_I2C_Master_Write
  2722 ;;		_lcdInst
  2723 ;;		_printf
  2724 ;; This function is called by:
  2725 ;;		_main
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text7
  2730  001D94                     __ptext7:
  2731                           	opt stack 0
  2732  001D94                     _date_time:
  2733                           	opt stack 20
  2734                           
  2735                           ;main.c: 363: I2C_Master_Start();
  2736                           
  2737                           ;incstack = 0
  2738  001D94  ECFA  F016         	call	_I2C_Master_Start	;wreg free
  2739                           
  2740                           ;main.c: 364: I2C_Master_Write(0b11010000);
  2741  001D98  0E00               	movlw	0
  2742  001D9A  0100               	movlb	0	; () banked
  2743  001D9C  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2744  001D9E  0ED0               	movlw	208
  2745  001DA0  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2746  001DA2  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  2747                           
  2748                           ;main.c: 365: I2C_Master_Write(0x00);
  2749  001DA6  0E00               	movlw	0
  2750  001DA8  0100               	movlb	0	; () banked
  2751  001DAA  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2752  001DAC  0E00               	movlw	0
  2753  001DAE  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2754  001DB0  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  2755                           
  2756                           ;main.c: 366: I2C_Master_Stop();
  2757  001DB4  ECF6  F016         	call	_I2C_Master_Stop	;wreg free
  2758                           
  2759                           ;main.c: 369: I2C_Master_Start();
  2760  001DB8  ECFA  F016         	call	_I2C_Master_Start	;wreg free
  2761                           
  2762                           ;main.c: 370: I2C_Master_Write(0b11010001);
  2763  001DBC  0E00               	movlw	0
  2764  001DBE  0100               	movlb	0	; () banked
  2765  001DC0  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2766  001DC2  0ED1               	movlw	209
  2767  001DC4  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2768  001DC6  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  2769                           
  2770                           ;main.c: 371: for(unsigned char i=0;i<0x06;i++){
  2771  001DCA  0E00               	movlw	0
  2772  001DCC  0100               	movlb	0	; () banked
  2773  001DCE  6FEC               	movwf	date_time@i& (0+255),b
  2774  001DD0                     l5085:
  2775                           
  2776                           ; BSR set to: 0
  2777  001DD0  0E05               	movlw	5
  2778  001DD2  0100               	movlb	0	; () banked
  2779  001DD4  65EC               	cpfsgt	date_time@i& (0+255),b
  2780  001DD6  D001               	goto	l5089
  2781  001DD8  D010               	goto	l5095
  2782  001DDA                     l5089:
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 372: time[i] = I2C_Master_Read(1);
  2786  001DDA  0100               	movlb	0	; () banked
  2787  001DDC  51EC               	movf	date_time@i& (0+255),w,b
  2788  001DDE  0D01               	mullw	1
  2789  001DE0  0E9E               	movlw	low _time
  2790  001DE2  24F3               	addwf	prodl,w,c
  2791  001DE4  6ED9               	movwf	fsr2l,c
  2792  001DE6  0E00               	movlw	high _time
  2793  001DE8  20F4               	addwfc	prodh,w,c
  2794  001DEA  6EDA               	movwf	fsr2h,c
  2795  001DEC  0E01               	movlw	1
  2796  001DEE  EC29  F016         	call	_I2C_Master_Read
  2797  001DF2  6EDF               	movwf	indf2,c
  2798  001DF4  0100               	movlb	0	; () banked
  2799  001DF6  2BEC               	incf	date_time@i& (0+255),f,b
  2800  001DF8  D7EB               	goto	l5085
  2801  001DFA                     l5095:
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;main.c: 373: }
  2805                           ;main.c: 374: time[6] = I2C_Master_Read(0);
  2806  001DFA  0E00               	movlw	0
  2807  001DFC  EC29  F016         	call	_I2C_Master_Read
  2808  001E00  0100               	movlb	0	; () banked
  2809  001E02  6FA4               	movwf	(_time+6)& (0+255),b
  2810                           
  2811                           ;main.c: 375: I2C_Master_Stop();
  2812  001E04  ECF6  F016         	call	_I2C_Master_Stop	;wreg free
  2813                           
  2814                           ;main.c: 378: lcdInst(0b10000000);
  2815  001E08  0E80               	movlw	128
  2816  001E0A  ECD4  F016         	call	_lcdInst
  2817                           
  2818                           ;main.c: 379: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2819  001E0E  0EC5               	movlw	low STR_4
  2820  001E10  0100               	movlb	0	; () banked
  2821  001E12  6FE0               	movwf	printf@f& (0+255),b
  2822  001E14  0EFE               	movlw	high STR_4
  2823  001E16  0100               	movlb	0	; () banked
  2824  001E18  6FE1               	movwf	(printf@f+1)& (0+255),b
  2825  001E1A  C0A3  F0E2         	movff	_time+5,?_printf+2
  2826  001E1E  0100               	movlb	0	; () banked
  2827  001E20  6BE3               	clrf	(?_printf+3)& (0+255),b
  2828  001E22  C0A2  F0E4         	movff	_time+4,?_printf+4
  2829  001E26  0100               	movlb	0	; () banked
  2830  001E28  6BE5               	clrf	(?_printf+5)& (0+255),b
  2831  001E2A  C0A4  F0E6         	movff	_time+6,?_printf+6
  2832  001E2E  0100               	movlb	0	; () banked
  2833  001E30  6BE7               	clrf	(?_printf+7)& (0+255),b
  2834  001E32  EC97  F003         	call	_printf	;wreg free
  2835                           
  2836                           ;main.c: 380: lcdInst(0b11000000);
  2837  001E36  0EC0               	movlw	192
  2838  001E38  ECD4  F016         	call	_lcdInst
  2839                           
  2840                           ;main.c: 381: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2841  001E3C  0EDC               	movlw	low STR_5
  2842  001E3E  0100               	movlb	0	; () banked
  2843  001E40  6FE0               	movwf	printf@f& (0+255),b
  2844  001E42  0EFE               	movlw	high STR_5
  2845  001E44  0100               	movlb	0	; () banked
  2846  001E46  6FE1               	movwf	(printf@f+1)& (0+255),b
  2847  001E48  C0A0  F0E2         	movff	_time+2,?_printf+2
  2848  001E4C  0100               	movlb	0	; () banked
  2849  001E4E  6BE3               	clrf	(?_printf+3)& (0+255),b
  2850  001E50  C09F  F0E4         	movff	_time+1,?_printf+4
  2851  001E54  0100               	movlb	0	; () banked
  2852  001E56  6BE5               	clrf	(?_printf+5)& (0+255),b
  2853  001E58  C09E  F0E6         	movff	_time,?_printf+6
  2854  001E5C  0100               	movlb	0	; () banked
  2855  001E5E  6BE7               	clrf	(?_printf+7)& (0+255),b
  2856  001E60  EC97  F003         	call	_printf	;wreg free
  2857  001E64  0012               	return	
  2858  001E66                     __end_of_date_time:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           prodh	equ	0xFF4
  2865                           prodl	equ	0xFF3
  2866                           intcon	equ	0xFF2
  2867                           intcon2	equ	0xFF1
  2868                           intcon3	equ	0xFF0
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           indf2	equ	0xFDF
  2872                           postinc2	equ	0xFDE
  2873                           postdec2	equ	0xFDD
  2874                           fsr2h	equ	0xFDA
  2875                           fsr2l	equ	0xFD9
  2876                           status	equ	0xFD8
  2877                           
  2878 ;; *************** function _I2C_Master_Read *****************
  2879 ;; Defined at:
  2880 ;;		line 76 in file "I2C.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;  a               1    wreg     unsigned char 
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  a               1   17[BANK0 ] unsigned char 
  2885 ;;  temp            1   18[BANK0 ] unsigned char 
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      unsigned char 
  2888 ;; Registers used:
  2889 ;;		wreg, status,2, status,0, cstack
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;Total ram usage:        2 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:    8
  2902 ;; This function calls:
  2903 ;;		_I2C_Master_Wait
  2904 ;; This function is called by:
  2905 ;;		_date_time
  2906 ;;		_read_colorsensor
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text8
  2911  002C52                     __ptext8:
  2912                           	opt stack 0
  2913  002C52                     _I2C_Master_Read:
  2914                           	opt stack 20
  2915                           
  2916                           ;incstack = 0
  2917                           ;I2C_Master_Read@a stored from wreg
  2918  002C52  0100               	movlb	0	; () banked
  2919  002C54  6FD5               	movwf	I2C_Master_Read@a& (0+255),b
  2920                           
  2921                           ;I2C.c: 78: unsigned char temp;
  2922                           ;I2C.c: 79: I2C_Master_Wait();
  2923  002C56  ECB9  F016         	call	_I2C_Master_Wait	;wreg free
  2924                           
  2925                           ;I2C.c: 80: RCEN = 1;
  2926  002C5A  86C5               	bsf	4037,3,c	;volatile
  2927                           
  2928                           ;I2C.c: 81: I2C_Master_Wait();
  2929  002C5C  ECB9  F016         	call	_I2C_Master_Wait	;wreg free
  2930                           
  2931                           ;I2C.c: 82: temp = SSPBUF;
  2932  002C60  CFC9 F0D6          	movff	4041,I2C_Master_Read@temp	;volatile
  2933                           
  2934                           ;I2C.c: 83: I2C_Master_Wait();
  2935  002C64  ECB9  F016         	call	_I2C_Master_Wait	;wreg free
  2936                           
  2937                           ;I2C.c: 84: ACKDT = (a)?0:1;
  2938  002C68  0100               	movlb	0	; () banked
  2939  002C6A  51D5               	movf	I2C_Master_Read@a& (0+255),w,b
  2940  002C6C  0100               	movlb	0	; () banked
  2941  002C6E  A4D8               	btfss	status,2,c
  2942  002C70  D002               	goto	u2960
  2943  002C72  8AC5               	bsf	4037,5,c	;volatile
  2944  002C74  D001               	goto	l3441
  2945  002C76                     u2960:
  2946  002C76  9AC5               	bcf	4037,5,c	;volatile
  2947  002C78                     l3441:
  2948                           
  2949                           ;I2C.c: 85: ACKEN = 1;
  2950  002C78  88C5               	bsf	4037,4,c	;volatile
  2951                           
  2952                           ;I2C.c: 86: return temp;
  2953  002C7A  0100               	movlb	0	; () banked
  2954  002C7C  51D6               	movf	I2C_Master_Read@temp& (0+255),w,b
  2955  002C7E  0012               	return	
  2956  002C80                     __end_of_I2C_Master_Read:
  2957                           	opt stack 0
  2958                           tblptru	equ	0xFF8
  2959                           tblptrh	equ	0xFF7
  2960                           tblptrl	equ	0xFF6
  2961                           tablat	equ	0xFF5
  2962                           prodh	equ	0xFF4
  2963                           prodl	equ	0xFF3
  2964                           intcon	equ	0xFF2
  2965                           intcon2	equ	0xFF1
  2966                           intcon3	equ	0xFF0
  2967                           postinc0	equ	0xFEE
  2968                           wreg	equ	0xFE8
  2969                           indf2	equ	0xFDF
  2970                           postinc2	equ	0xFDE
  2971                           postdec2	equ	0xFDD
  2972                           fsr2h	equ	0xFDA
  2973                           fsr2l	equ	0xFD9
  2974                           status	equ	0xFD8
  2975                           
  2976 ;; *************** function _bottle_time *****************
  2977 ;; Defined at:
  2978 ;;		line 446 in file "main.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;Total ram usage:        0 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:   10
  2999 ;; This function calls:
  3000 ;;		_lcdInst
  3001 ;;		_printf
  3002 ;; This function is called by:
  3003 ;;		_main
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text9
  3008  002BE6                     __ptext9:
  3009                           	opt stack 0
  3010  002BE6                     _bottle_time:
  3011                           	opt stack 20
  3012                           
  3013                           ;main.c: 447: lcdInst(0b10000000);
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;incstack = 0
  3017  002BE6  0E80               	movlw	128
  3018  002BE8  ECD4  F016         	call	_lcdInst
  3019                           
  3020                           ;main.c: 448: printf("Total Operation       ");
  3021  002BEC  0EAE               	movlw	low STR_17
  3022  002BEE  0100               	movlb	0	; () banked
  3023  002BF0  6FE0               	movwf	printf@f& (0+255),b
  3024  002BF2  0EFE               	movlw	high STR_17
  3025  002BF4  0100               	movlb	0	; () banked
  3026  002BF6  6FE1               	movwf	(printf@f+1)& (0+255),b
  3027  002BF8  EC97  F003         	call	_printf	;wreg free
  3028                           
  3029                           ;main.c: 449: lcdInst(0b11000000);
  3030  002BFC  0EC0               	movlw	192
  3031  002BFE  ECD4  F016         	call	_lcdInst
  3032                           
  3033                           ;main.c: 450: printf("Time: %d s       ", operation_time);
  3034  002C02  0EF3               	movlw	low STR_18
  3035  002C04  0100               	movlb	0	; () banked
  3036  002C06  6FE0               	movwf	printf@f& (0+255),b
  3037  002C08  0EFE               	movlw	high STR_18
  3038  002C0A  0100               	movlb	0	; () banked
  3039  002C0C  6FE1               	movwf	(printf@f+1)& (0+255),b
  3040  002C0E  C0B7  F0E2         	movff	_operation_time,?_printf+2
  3041  002C12  C0B8  F0E3         	movff	_operation_time+1,?_printf+3
  3042  002C16  EC97  F003         	call	_printf	;wreg free
  3043  002C1A  0012               	return	
  3044  002C1C                     __end_of_bottle_time:
  3045                           	opt stack 0
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           intcon	equ	0xFF2
  3053                           intcon2	equ	0xFF1
  3054                           intcon3	equ	0xFF0
  3055                           postinc0	equ	0xFEE
  3056                           wreg	equ	0xFE8
  3057                           indf2	equ	0xFDF
  3058                           postinc2	equ	0xFDE
  3059                           postdec2	equ	0xFDD
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function _bottle_count *****************
  3065 ;; Defined at:
  3066 ;;		line 404 in file "main.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      void 
  3073 ;; Registers used:
  3074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;Total ram usage:        0 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:   10
  3087 ;; This function calls:
  3088 ;;		___awmod
  3089 ;;		_lcdInst
  3090 ;;		_printf
  3091 ;; This function is called by:
  3092 ;;		_main
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text10
  3097  0011C4                     __ptext10:
  3098                           	opt stack 0
  3099  0011C4                     _bottle_count:
  3100                           	opt stack 20
  3101                           
  3102                           ;main.c: 405: switch(bottle_count_disp % 5){
  3103                           
  3104                           ;incstack = 0
  3105  0011C4  D0A7               	goto	l5141
  3106  0011C6                     l5105:
  3107                           
  3108                           ;main.c: 407: lcdInst(0b10000000);
  3109  0011C6  0E80               	movlw	128
  3110  0011C8  ECD4  F016         	call	_lcdInst
  3111                           
  3112                           ;main.c: 408: printf("Bottle Count    ");
  3113  0011CC  0EB7               	movlw	low STR_6
  3114  0011CE  0100               	movlb	0	; () banked
  3115  0011D0  6FE0               	movwf	printf@f& (0+255),b
  3116  0011D2  0EFF               	movlw	high STR_6
  3117  0011D4  0100               	movlb	0	; () banked
  3118  0011D6  6FE1               	movwf	(printf@f+1)& (0+255),b
  3119  0011D8  EC97  F003         	call	_printf	;wreg free
  3120                           
  3121                           ;main.c: 409: lcdInst(0b11000000);
  3122  0011DC  0EC0               	movlw	192
  3123  0011DE  ECD4  F016         	call	_lcdInst
  3124                           
  3125                           ;main.c: 410: printf("Total: %d       ", total_bottle_count);
  3126  0011E2  0EA6               	movlw	low STR_7
  3127  0011E4  0100               	movlb	0	; () banked
  3128  0011E6  6FE0               	movwf	printf@f& (0+255),b
  3129  0011E8  0EFF               	movlw	high STR_7
  3130  0011EA  0100               	movlb	0	; () banked
  3131  0011EC  6FE1               	movwf	(printf@f+1)& (0+255),b
  3132  0011EE  C0B9  F0E2         	movff	_total_bottle_count,?_printf+2
  3133  0011F2  C0BA  F0E3         	movff	_total_bottle_count+1,?_printf+3
  3134  0011F6  EC97  F003         	call	_printf	;wreg free
  3135                           
  3136                           ;main.c: 411: break;
  3137  0011FA  0012               	return	
  3138  0011FC                     l5111:
  3139                           
  3140                           ;main.c: 413: lcdInst(0b10000000);
  3141  0011FC  0E80               	movlw	128
  3142  0011FE  ECD4  F016         	call	_lcdInst
  3143                           
  3144                           ;main.c: 414: printf("YOP+CAP+LBL: %d  ", yopcaplbl_count);
  3145  001202  0E05               	movlw	low STR_8
  3146  001204  0100               	movlb	0	; () banked
  3147  001206  6FE0               	movwf	printf@f& (0+255),b
  3148  001208  0EFF               	movlw	high STR_8
  3149  00120A  0100               	movlb	0	; () banked
  3150  00120C  6FE1               	movwf	(printf@f+1)& (0+255),b
  3151  00120E  C0BF  F0E2         	movff	_yopcaplbl_count,?_printf+2
  3152  001212  C0C0  F0E3         	movff	_yopcaplbl_count+1,?_printf+3
  3153  001216  EC97  F003         	call	_printf	;wreg free
  3154                           
  3155                           ;main.c: 415: lcdInst(0b11000000);
  3156  00121A  0EC0               	movlw	192
  3157  00121C  ECD4  F016         	call	_lcdInst
  3158                           
  3159                           ;main.c: 416: printf("YOP+CAP-LBL: %d  ", yopcap_count);
  3160  001220  0E29               	movlw	low STR_9
  3161  001222  0100               	movlb	0	; () banked
  3162  001224  6FE0               	movwf	printf@f& (0+255),b
  3163  001226  0EFF               	movlw	high STR_9
  3164  001228  0100               	movlb	0	; () banked
  3165  00122A  6FE1               	movwf	(printf@f+1)& (0+255),b
  3166  00122C  C0BD  F0E2         	movff	_yopcap_count,?_printf+2
  3167  001230  C0BE  F0E3         	movff	_yopcap_count+1,?_printf+3
  3168  001234  EC97  F003         	call	_printf	;wreg free
  3169                           
  3170                           ;main.c: 417: break;
  3171  001238  0012               	return	
  3172  00123A                     l5117:
  3173                           
  3174                           ;main.c: 419: lcdInst(0b10000000);
  3175  00123A  0E80               	movlw	128
  3176  00123C  ECD4  F016         	call	_lcdInst
  3177                           
  3178                           ;main.c: 420: printf("YOP-CAP+LBL: %d  ", yoplbl_count);
  3179  001240  0E17               	movlw	low STR_10
  3180  001242  0100               	movlb	0	; () banked
  3181  001244  6FE0               	movwf	printf@f& (0+255),b
  3182  001246  0EFF               	movlw	high STR_10
  3183  001248  0100               	movlb	0	; () banked
  3184  00124A  6FE1               	movwf	(printf@f+1)& (0+255),b
  3185  00124C  C0C1  F0E2         	movff	_yoplbl_count,?_printf+2
  3186  001250  C0C2  F0E3         	movff	_yoplbl_count+1,?_printf+3
  3187  001254  EC97  F003         	call	_printf	;wreg free
  3188                           
  3189                           ;main.c: 421: lcdInst(0b11000000);
  3190  001258  0EC0               	movlw	192
  3191  00125A  ECD4  F016         	call	_lcdInst
  3192                           
  3193                           ;main.c: 422: printf("YOP-CAP-LBL: %d  ", yop_count);
  3194  00125E  0E3B               	movlw	low STR_11
  3195  001260  0100               	movlb	0	; () banked
  3196  001262  6FE0               	movwf	printf@f& (0+255),b
  3197  001264  0EFF               	movlw	high STR_11
  3198  001266  0100               	movlb	0	; () banked
  3199  001268  6FE1               	movwf	(printf@f+1)& (0+255),b
  3200  00126A  C0BB  F0E2         	movff	_yop_count,?_printf+2
  3201  00126E  C0BC  F0E3         	movff	_yop_count+1,?_printf+3
  3202  001272  EC97  F003         	call	_printf	;wreg free
  3203                           
  3204                           ;main.c: 423: break;
  3205  001276  0012               	return	
  3206  001278                     l5123:
  3207                           
  3208                           ;main.c: 425: lcdInst(0b10000000);
  3209  001278  0E80               	movlw	128
  3210  00127A  ECD4  F016         	call	_lcdInst
  3211                           
  3212                           ;main.c: 426: printf("ESKA+CAP+LBL: %d ", eskacaplbl_count);
  3213  00127E  0E4D               	movlw	low STR_12
  3214  001280  0100               	movlb	0	; () banked
  3215  001282  6FE0               	movwf	printf@f& (0+255),b
  3216  001284  0EFF               	movlw	high STR_12
  3217  001286  0100               	movlb	0	; () banked
  3218  001288  6FE1               	movwf	(printf@f+1)& (0+255),b
  3219  00128A  C0AD  F0E2         	movff	_eskacaplbl_count,?_printf+2
  3220  00128E  C0AE  F0E3         	movff	_eskacaplbl_count+1,?_printf+3
  3221  001292  EC97  F003         	call	_printf	;wreg free
  3222                           
  3223                           ;main.c: 427: lcdInst(0b11000000);
  3224  001296  0EC0               	movlw	192
  3225  001298  ECD4  F016         	call	_lcdInst
  3226                           
  3227                           ;main.c: 428: printf("ESKA+CAP-LBL: %d ", eskacap_count);
  3228  00129C  0E71               	movlw	low STR_13
  3229  00129E  0100               	movlb	0	; () banked
  3230  0012A0  6FE0               	movwf	printf@f& (0+255),b
  3231  0012A2  0EFF               	movlw	high STR_13
  3232  0012A4  0100               	movlb	0	; () banked
  3233  0012A6  6FE1               	movwf	(printf@f+1)& (0+255),b
  3234  0012A8  C0AB  F0E2         	movff	_eskacap_count,?_printf+2
  3235  0012AC  C0AC  F0E3         	movff	_eskacap_count+1,?_printf+3
  3236  0012B0  EC97  F003         	call	_printf	;wreg free
  3237                           
  3238                           ;main.c: 429: break;
  3239  0012B4  0012               	return	
  3240  0012B6                     l5129:
  3241                           
  3242                           ;main.c: 431: lcdInst(0b10000000);
  3243  0012B6  0E80               	movlw	128
  3244  0012B8  ECD4  F016         	call	_lcdInst
  3245                           
  3246                           ;main.c: 432: printf("ESKA-CAP+LBL: %d ", eskalbl_count);
  3247  0012BC  0E5F               	movlw	low STR_14
  3248  0012BE  0100               	movlb	0	; () banked
  3249  0012C0  6FE0               	movwf	printf@f& (0+255),b
  3250  0012C2  0EFF               	movlw	high STR_14
  3251  0012C4  0100               	movlb	0	; () banked
  3252  0012C6  6FE1               	movwf	(printf@f+1)& (0+255),b
  3253  0012C8  C0AF  F0E2         	movff	_eskalbl_count,?_printf+2
  3254  0012CC  C0B0  F0E3         	movff	_eskalbl_count+1,?_printf+3
  3255  0012D0  EC97  F003         	call	_printf	;wreg free
  3256                           
  3257                           ;main.c: 433: lcdInst(0b11000000);
  3258  0012D4  0EC0               	movlw	192
  3259  0012D6  ECD4  F016         	call	_lcdInst
  3260                           
  3261                           ;main.c: 434: printf("ESKA-CAP-LBL: %d ", eska_count);
  3262  0012DA  0E83               	movlw	low STR_15
  3263  0012DC  0100               	movlb	0	; () banked
  3264  0012DE  6FE0               	movwf	printf@f& (0+255),b
  3265  0012E0  0EFF               	movlw	high STR_15
  3266  0012E2  0100               	movlb	0	; () banked
  3267  0012E4  6FE1               	movwf	(printf@f+1)& (0+255),b
  3268  0012E6  C0A9  F0E2         	movff	_eska_count,?_printf+2
  3269  0012EA  C0AA  F0E3         	movff	_eska_count+1,?_printf+3
  3270  0012EE  EC97  F003         	call	_printf	;wreg free
  3271                           
  3272                           ;main.c: 435: break;
  3273  0012F2  0012               	return	
  3274  0012F4                     l5135:
  3275                           
  3276                           ;main.c: 438: lcdInst(0b10000000);
  3277  0012F4  0E80               	movlw	128
  3278  0012F6  ECD4  F016         	call	_lcdInst
  3279                           
  3280                           ;main.c: 439: printf("ERROR: %d", bottle_count_disp);
  3281  0012FA  0EF5               	movlw	low STR_16
  3282  0012FC  0100               	movlb	0	; () banked
  3283  0012FE  6FE0               	movwf	printf@f& (0+255),b
  3284  001300  0EFF               	movlw	high STR_16
  3285  001302  0100               	movlb	0	; () banked
  3286  001304  6FE1               	movwf	(printf@f+1)& (0+255),b
  3287  001306  C0EE  F0E2         	movff	_bottle_count_disp,?_printf+2
  3288  00130A  C0EF  F0E3         	movff	_bottle_count_disp+1,?_printf+3
  3289  00130E  EC97  F003         	call	_printf	;wreg free
  3290  001312  D7F0               	goto	l5135
  3291  001314                     l5141:
  3292  001314  C0EE  F0D4         	movff	_bottle_count_disp,___awmod@dividend
  3293  001318  C0EF  F0D5         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3294  00131C  0E00               	movlw	0
  3295  00131E  0100               	movlb	0	; () banked
  3296  001320  6FD7               	movwf	(___awmod@divisor+1)& (0+255),b
  3297  001322  0E05               	movlw	5
  3298  001324  6FD6               	movwf	___awmod@divisor& (0+255),b
  3299  001326  EC29  F012         	call	___awmod	;wreg free
  3300                           
  3301                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3302                           ; Switch size 1, requested type "space"
  3303                           ; Number of cases is 1, Range of values is 0 to 0
  3304                           ; switch strategies available:
  3305                           ; Name         Instructions Cycles
  3306                           ; simple_byte            4     3 (average)
  3307                           ;	Chosen strategy is simple_byte
  3308  00132A  0100               	movlb	0	; () banked
  3309  00132C  51D5               	movf	(?___awmod+1)& (0+255),w,b
  3310  00132E  0A00               	xorlw	0	; case 0
  3311  001330  A4D8               	btfss	status,2,c
  3312  001332  D7E0               	goto	l5135
  3313                           
  3314                           ; BSR set to: 0
  3315                           ; Switch size 1, requested type "space"
  3316                           ; Number of cases is 5, Range of values is 0 to 4
  3317                           ; switch strategies available:
  3318                           ; Name         Instructions Cycles
  3319                           ; simple_byte           16     9 (average)
  3320                           ;	Chosen strategy is simple_byte
  3321  001334  0100               	movlb	0	; () banked
  3322  001336  51D4               	movf	?___awmod& (0+255),w,b
  3323  001338  0A00               	xorlw	0	; case 0
  3324  00133A  B4D8               	btfsc	status,2,c
  3325  00133C  D744               	goto	l5105
  3326  00133E  0A01               	xorlw	1	; case 1
  3327  001340  B4D8               	btfsc	status,2,c
  3328  001342  D75C               	goto	l5111
  3329  001344  0A03               	xorlw	3	; case 2
  3330  001346  B4D8               	btfsc	status,2,c
  3331  001348  D778               	goto	l5117
  3332  00134A  0A01               	xorlw	1	; case 3
  3333  00134C  B4D8               	btfsc	status,2,c
  3334  00134E  D794               	goto	l5123
  3335  001350  0A07               	xorlw	7	; case 4
  3336  001352  B4D8               	btfsc	status,2,c
  3337  001354  D7B0               	goto	l5129
  3338  001356  D7CE               	goto	l5135
  3339  001358                     __end_of_bottle_count:
  3340                           	opt stack 0
  3341                           tblptru	equ	0xFF8
  3342                           tblptrh	equ	0xFF7
  3343                           tblptrl	equ	0xFF6
  3344                           tablat	equ	0xFF5
  3345                           prodh	equ	0xFF4
  3346                           prodl	equ	0xFF3
  3347                           intcon	equ	0xFF2
  3348                           intcon2	equ	0xFF1
  3349                           intcon3	equ	0xFF0
  3350                           postinc0	equ	0xFEE
  3351                           wreg	equ	0xFE8
  3352                           indf2	equ	0xFDF
  3353                           postinc2	equ	0xFDE
  3354                           postdec2	equ	0xFDD
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _printf *****************
  3360 ;; Defined at:
  3361 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3364 ;;		 -> STR_24(15), STR_23(16), STR_22(28), STR_21(25), 
  3365 ;;		 -> STR_20(24), STR_19(23), STR_18(18), STR_17(23), 
  3366 ;;		 -> STR_16(10), STR_15(18), STR_14(18), STR_13(18), 
  3367 ;;		 -> STR_12(18), STR_11(18), STR_10(18), STR_9(18), 
  3368 ;;		 -> STR_8(18), STR_7(17), STR_6(17), STR_5(23), 
  3369 ;;		 -> STR_4(23), STR_3(14), STR_2(24), STR_1(24), 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  idx             1    0[BANK1 ] unsigned char 
  3372 ;;  tmpval          4    0        struct .
  3373 ;;  cp              3    0        PTR const unsigned char 
  3374 ;;  width           2    7[BANK1 ] int 
  3375 ;;  val             2    4[BANK1 ] unsigned int 
  3376 ;;  ap              2    1[BANK1 ] PTR void [1]
  3377 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3378 ;;  len             2    0        unsigned int 
  3379 ;;  c               1    9[BANK1 ] char 
  3380 ;;  flag            1    6[BANK1 ] unsigned char 
  3381 ;;  prec            1    3[BANK1 ] char 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  2   28[BANK0 ] int 
  3384 ;; Registers used:
  3385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3391 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Totals:         0      12      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;Total ram usage:       22 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    9
  3398 ;; This function calls:
  3399 ;;		___lwdiv
  3400 ;;		___lwmod
  3401 ;;		___wmul
  3402 ;;		_isdigit
  3403 ;;		_putch
  3404 ;; This function is called by:
  3405 ;;		_date_time
  3406 ;;		_bottle_count
  3407 ;;		_bottle_time
  3408 ;;		_operation
  3409 ;;		_operationend
  3410 ;;		_emergencystop
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           	psect	text11
  3415  00072E                     __ptext11:
  3416                           	opt stack 0
  3417  00072E                     _printf:
  3418                           	opt stack 20
  3419                           
  3420                           ;doprnt.c: 466: va_list ap;
  3421                           ;doprnt.c: 499: signed char c;
  3422                           ;doprnt.c: 501: int width;
  3423                           ;doprnt.c: 506: signed char prec;
  3424                           ;doprnt.c: 508: unsigned char flag;
  3425                           ;doprnt.c: 523: union {
  3426                           ;doprnt.c: 524: unsigned long vd;
  3427                           ;doprnt.c: 525: double integ;
  3428                           ;doprnt.c: 526: } tmpval;
  3429                           ;doprnt.c: 528: unsigned int val;
  3430                           ;doprnt.c: 529: unsigned len;
  3431                           ;doprnt.c: 530: const char * cp;
  3432                           ;doprnt.c: 533: *ap = __va_start();
  3433                           
  3434                           ;incstack = 0
  3435  00072E  0EE2               	movlw	low (?_printf+2)
  3436  000730  0101               	movlb	1	; () banked
  3437  000732  6F01               	movwf	printf@ap& (0+255),b
  3438  000734  0E00               	movlw	high (?_printf+2)
  3439  000736  0101               	movlb	1	; () banked
  3440  000738  6F02               	movwf	(printf@ap+1)& (0+255),b
  3441                           
  3442                           ;doprnt.c: 536: while(c = *f++) {
  3443  00073A  D1D5               	goto	l5009
  3444  00073C                     l4879:
  3445                           
  3446                           ; BSR set to: 1
  3447                           ;doprnt.c: 538: if(c != '%')
  3448  00073C  0E25               	movlw	37
  3449  00073E  0101               	movlb	1	; () banked
  3450  000740  1909               	xorwf	printf@c& (0+255),w,b
  3451  000742  B4D8               	btfsc	status,2,c
  3452  000744  D005               	goto	l4883
  3453                           
  3454                           ; BSR set to: 1
  3455                           ;doprnt.c: 540: {
  3456                           ;doprnt.c: 541: (putch(c) );
  3457  000746  0101               	movlb	1	; () banked
  3458  000748  5109               	movf	printf@c& (0+255),w,b
  3459  00074A  ECCC  F016         	call	_putch
  3460                           
  3461                           ;doprnt.c: 542: continue;
  3462  00074E  D1CB               	goto	l5009
  3463  000750                     l4883:
  3464                           
  3465                           ;doprnt.c: 543: }
  3466                           ;doprnt.c: 546: width = 0;
  3467  000750  0E00               	movlw	0
  3468  000752  0101               	movlb	1	; () banked
  3469  000754  6F08               	movwf	(printf@width+1)& (0+255),b
  3470  000756  0E00               	movlw	0
  3471  000758  6F07               	movwf	printf@width& (0+255),b
  3472                           
  3473                           ;doprnt.c: 548: flag = 0;
  3474  00075A  0E00               	movlw	0
  3475  00075C  0101               	movlb	1	; () banked
  3476  00075E  6F06               	movwf	printf@flag& (0+255),b
  3477                           
  3478                           ; BSR set to: 1
  3479                           ;doprnt.c: 551: switch(*f) {
  3480                           
  3481                           ;doprnt.c: 550: for(;;) {
  3482  000760  D005               	goto	l4889
  3483  000762                     l4885:
  3484                           
  3485                           ;doprnt.c: 580: flag |= 0x04;
  3486  000762  0101               	movlb	1	; () banked
  3487  000764  8506               	bsf	printf@flag& (0+255),2,b
  3488                           
  3489                           ;doprnt.c: 581: f++;
  3490  000766  0100               	movlb	0	; () banked
  3491  000768  4BE0               	infsnz	printf@f& (0+255),f,b
  3492  00076A  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3493  00076C                     l4889:
  3494  00076C  C0E0  FFF6         	movff	printf@f,tblptrl
  3495  000770  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3496  000774                     	if	0	;tblptru may be non-zero
  3497  000774                     	endif
  3498  000774                     	if	0	;tblptru may be non-zero
  3499  000774                     	endif
  3500  000774  0008               	tblrd		*
  3501  000776  50F5               	movf	tablat,w,c
  3502                           
  3503                           ; Switch size 1, requested type "space"
  3504                           ; Number of cases is 1, Range of values is 48 to 48
  3505                           ; switch strategies available:
  3506                           ; Name         Instructions Cycles
  3507                           ; simple_byte            4     3 (average)
  3508                           ;	Chosen strategy is simple_byte
  3509  000778  0A30               	xorlw	48	; case 48
  3510  00077A  B4D8               	btfsc	status,2,c
  3511  00077C  D7F2               	goto	l4885
  3512                           
  3513                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3514                           
  3515                           ;doprnt.c: 586: }
  3516                           
  3517                           ;doprnt.c: 585: break;
  3518  00077E  C0E0  FFF6         	movff	printf@f,tblptrl
  3519  000782  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3520  000786                     	if	0	;tblptru may be non-zero
  3521  000786                     	endif
  3522  000786                     	if	0	;tblptru may be non-zero
  3523  000786                     	endif
  3524  000786  0008               	tblrd		*
  3525  000788  50F5               	movf	tablat,w,c
  3526  00078A  EC40  F016         	call	_isdigit
  3527  00078E  A0D8               	btfss	status,0,c
  3528  000790  D048               	goto	l4909
  3529                           
  3530                           ;doprnt.c: 598: width = 0;
  3531  000792  0E00               	movlw	0
  3532  000794  0101               	movlb	1	; () banked
  3533  000796  6F08               	movwf	(printf@width+1)& (0+255),b
  3534  000798  0E00               	movlw	0
  3535  00079A  6F07               	movwf	printf@width& (0+255),b
  3536  00079C                     l4895:
  3537                           
  3538                           ;doprnt.c: 600: width *= 10;
  3539  00079C  C107  F0D4         	movff	printf@width,___wmul@multiplier
  3540  0007A0  C108  F0D5         	movff	printf@width+1,___wmul@multiplier+1
  3541  0007A4  0E00               	movlw	0
  3542  0007A6  0100               	movlb	0	; () banked
  3543  0007A8  6FD7               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3544  0007AA  0E0A               	movlw	10
  3545  0007AC  6FD6               	movwf	___wmul@multiplicand& (0+255),b
  3546  0007AE  EC0E  F016         	call	___wmul	;wreg free
  3547  0007B2  C0D4  F107         	movff	?___wmul,printf@width
  3548  0007B6  C0D5  F108         	movff	?___wmul+1,printf@width+1
  3549                           
  3550                           ;doprnt.c: 601: width += *f++ - '0';
  3551  0007BA  0ED0               	movlw	208
  3552  0007BC  0100               	movlb	0	; () banked
  3553  0007BE  6FE8               	movwf	??_printf& (0+255),b
  3554  0007C0  0EFF               	movlw	255
  3555  0007C2  0100               	movlb	0	; () banked
  3556  0007C4  6FE9               	movwf	(??_printf+1)& (0+255),b
  3557  0007C6  C0E0  FFF6         	movff	printf@f,tblptrl
  3558  0007CA  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3559  0007CE                     	if	0	;tblptru may be non-zero
  3560  0007CE                     	endif
  3561  0007CE                     	if	0	;tblptru may be non-zero
  3562  0007CE                     	endif
  3563  0007CE  0008               	tblrd		*
  3564  0007D0  50F5               	movf	tablat,w,c
  3565  0007D2  0100               	movlb	0	; () banked
  3566  0007D4  6FEA               	movwf	(??_printf+2)& (0+255),b
  3567  0007D6  6BEB               	clrf	(??_printf+3)& (0+255),b
  3568  0007D8  0100               	movlb	0	; () banked
  3569  0007DA  51E8               	movf	??_printf& (0+255),w,b
  3570  0007DC  0100               	movlb	0	; () banked
  3571  0007DE  27EA               	addwf	(??_printf+2)& (0+255),f,b
  3572  0007E0  0100               	movlb	0	; () banked
  3573  0007E2  51E9               	movf	(??_printf+1)& (0+255),w,b
  3574  0007E4  0100               	movlb	0	; () banked
  3575  0007E6  23EB               	addwfc	(??_printf+3)& (0+255),f,b
  3576  0007E8  0100               	movlb	0	; () banked
  3577  0007EA  51EA               	movf	(??_printf+2)& (0+255),w,b
  3578  0007EC  0101               	movlb	1	; () banked
  3579  0007EE  2707               	addwf	printf@width& (0+255),f,b
  3580  0007F0  0100               	movlb	0	; () banked
  3581  0007F2  51EB               	movf	(??_printf+3)& (0+255),w,b
  3582  0007F4  0101               	movlb	1	; () banked
  3583  0007F6  2308               	addwfc	(printf@width+1)& (0+255),f,b
  3584                           
  3585                           ; BSR set to: 1
  3586  0007F8  0100               	movlb	0	; () banked
  3587  0007FA  4BE0               	infsnz	printf@f& (0+255),f,b
  3588  0007FC  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3592  0007FE  C0E0  FFF6         	movff	printf@f,tblptrl
  3593  000802  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3594  000806                     	if	0	;tblptru may be non-zero
  3595  000806                     	endif
  3596  000806                     	if	0	;tblptru may be non-zero
  3597  000806                     	endif
  3598  000806  0008               	tblrd		*
  3599  000808  50F5               	movf	tablat,w,c
  3600  00080A  EC40  F016         	call	_isdigit
  3601  00080E  A0D8               	btfss	status,0,c
  3602  000810  D008               	goto	l4909
  3603  000812  D7C4               	goto	l4895
  3604  000814                     l4903:
  3605                           
  3606                           ;doprnt.c: 721: flag |= 0x80;
  3607  000814  0101               	movlb	1	; () banked
  3608  000816  8F06               	bsf	printf@flag& (0+255),7,b
  3609                           
  3610                           ;doprnt.c: 723: break;
  3611  000818  D020               	goto	l4911
  3612  00081A                     l4905:
  3613                           
  3614                           ; BSR set to: 1
  3615                           ;doprnt.c: 818: flag |= 0xC0;
  3616  00081A  0EC0               	movlw	192
  3617  00081C  0101               	movlb	1	; () banked
  3618  00081E  1306               	iorwf	printf@flag& (0+255),f,b
  3619                           
  3620                           ; BSR set to: 1
  3621                           ;doprnt.c: 822: }
  3622                           
  3623                           ;doprnt.c: 819: break;
  3624  000820  D01C               	goto	l4911
  3625  000822                     l4909:
  3626  000822  C0E0  FFF6         	movff	printf@f,tblptrl
  3627  000826  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3628  00082A  0100               	movlb	0	; () banked
  3629  00082C  4BE0               	infsnz	printf@f& (0+255),f,b
  3630  00082E  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3631  000830                     	if	0	;tblptru may be non-zero
  3632  000830                     	endif
  3633  000830                     	if	0	;tblptru may be non-zero
  3634  000830                     	endif
  3635  000830  0008               	tblrd		*
  3636  000832  CFF5 F109          	movff	tablat,printf@c
  3637  000836  0101               	movlb	1	; () banked
  3638  000838  5109               	movf	printf@c& (0+255),w,b
  3639                           
  3640                           ; Switch size 1, requested type "space"
  3641                           ; Number of cases is 5, Range of values is 0 to 120
  3642                           ; switch strategies available:
  3643                           ; Name         Instructions Cycles
  3644                           ; simple_byte           16     9 (average)
  3645                           ;	Chosen strategy is simple_byte
  3646  00083A  0A00               	xorlw	0	; case 0
  3647  00083C  B4D8               	btfsc	status,2,c
  3648  00083E  0012               	return	
  3649  000840  0A64               	xorlw	100	; case 100
  3650  000842  B4D8               	btfsc	status,2,c
  3651  000844  D00A               	goto	l4911
  3652  000846  0A0D               	xorlw	13	; case 105
  3653  000848  B4D8               	btfsc	status,2,c
  3654  00084A  D007               	goto	l4911
  3655  00084C  0A1C               	xorlw	28	; case 117
  3656  00084E  B4D8               	btfsc	status,2,c
  3657  000850  D7E4               	goto	l4905
  3658  000852  0A0D               	xorlw	13	; case 120
  3659  000854  B4D8               	btfsc	status,2,c
  3660  000856  D7DE               	goto	l4903
  3661  000858  D146               	goto	l5009
  3662  00085A                     l4911:
  3663                           
  3664                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  3665  00085A  C106  F0E8         	movff	printf@flag,??_printf
  3666  00085E  0EC0               	movlw	192
  3667  000860  0100               	movlb	0	; () banked
  3668  000862  17E8               	andwf	??_printf& (0+255),f,b
  3669  000864  A4D8               	btfss	status,2,c
  3670  000866  D019               	goto	l4923
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;doprnt.c: 1253: {
  3674                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3675  000868  C101  FFD9         	movff	printf@ap,fsr2l
  3676  00086C  C102  FFDA         	movff	printf@ap+1,fsr2h
  3677  000870  CFDE F104          	movff	postinc2,printf@val
  3678  000874  CFDD F105          	movff	postdec2,printf@val+1
  3679                           
  3680                           ; BSR set to: 0
  3681  000878  0E02               	movlw	2
  3682  00087A  0101               	movlb	1	; () banked
  3683  00087C  2701               	addwf	printf@ap& (0+255),f,b
  3684  00087E  0E00               	movlw	0
  3685  000880  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3686                           
  3687                           ; BSR set to: 1
  3688                           ;doprnt.c: 1261: if((int)val < 0) {
  3689  000882  0101               	movlb	1	; () banked
  3690  000884  AF05               	btfss	(printf@val+1)& (0+255),7,b
  3691  000886  D053               	goto	l4957
  3692                           
  3693                           ; BSR set to: 1
  3694                           ;doprnt.c: 1262: flag |= 0x03;
  3695  000888  0E03               	movlw	3
  3696  00088A  0101               	movlb	1	; () banked
  3697  00088C  1306               	iorwf	printf@flag& (0+255),f,b
  3698                           
  3699                           ; BSR set to: 1
  3700                           ;doprnt.c: 1263: val = -val;
  3701  00088E  0101               	movlb	1	; () banked
  3702  000890  6D04               	negf	printf@val& (0+255),b
  3703  000892  1F05               	comf	(printf@val+1)& (0+255),f,b
  3704  000894  B0D8               	btfsc	status,0,c
  3705  000896  2B05               	incf	(printf@val+1)& (0+255),f,b
  3706                           
  3707                           ; BSR set to: 1
  3708                           ;doprnt.c: 1264: }
  3709                           ;doprnt.c: 1266: }
  3710  000898  D04A               	goto	l4957
  3711  00089A                     l4923:
  3712                           
  3713                           ;doprnt.c: 1268: else
  3714                           ;doprnt.c: 1273: {
  3715                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3716  00089A  C101  FFD9         	movff	printf@ap,fsr2l
  3717  00089E  C102  FFDA         	movff	printf@ap+1,fsr2h
  3718  0008A2  CFDE F104          	movff	postinc2,printf@val
  3719  0008A6  CFDD F105          	movff	postdec2,printf@val+1
  3720  0008AA  0E02               	movlw	2
  3721  0008AC  0101               	movlb	1	; () banked
  3722  0008AE  2701               	addwf	printf@ap& (0+255),f,b
  3723  0008B0  0E00               	movlw	0
  3724  0008B2  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3725                           
  3726                           ; BSR set to: 1
  3727                           ;doprnt.c: 1287: }
  3728                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3729  0008B4  D03C               	goto	l4957
  3730  0008B6                     l4927:
  3731                           
  3732                           ; BSR set to: 1
  3733                           ;doprnt.c: 1302: case 0xC0:
  3734                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3735  0008B6  0E01               	movlw	1
  3736  0008B8  0101               	movlb	1	; () banked
  3737  0008BA  6F09               	movwf	printf@c& (0+255),b
  3738  0008BC                     l4929:
  3739                           
  3740                           ; BSR set to: 1
  3741  0008BC  0E05               	movlw	5
  3742  0008BE  0101               	movlb	1	; () banked
  3743  0008C0  1909               	xorwf	printf@c& (0+255),w,b
  3744  0008C2  B4D8               	btfsc	status,2,c
  3745  0008C4  D040               	goto	l4959
  3746                           
  3747                           ; BSR set to: 1
  3748                           ;doprnt.c: 1306: if(val < dpowers[c])
  3749                           
  3750                           ; BSR set to: 1
  3751                           
  3752                           ; BSR set to: 1
  3753  0008C6  0101               	movlb	1	; () banked
  3754  0008C8  5109               	movf	printf@c& (0+255),w,b
  3755  0008CA  0D02               	mullw	2
  3756  0008CC  0EC8               	movlw	low _dpowers
  3757  0008CE  24F3               	addwf	prodl,w,c
  3758  0008D0  6EF6               	movwf	tblptrl,c
  3759  0008D2  0EFD               	movlw	high _dpowers
  3760  0008D4  20F4               	addwfc	prodh,w,c
  3761  0008D6  6EF7               	movwf	tblptrh,c
  3762  0008D8                     	if	0	;There are less than 3 active tblptr bytes
  3763  0008D8                     	endif
  3764  0008D8  0009               	tblrd		*+
  3765  0008DA  50F5               	movf	tablat,w,c
  3766  0008DC  0101               	movlb	1	; () banked
  3767  0008DE  5D04               	subwf	printf@val& (0+255),w,b
  3768  0008E0  0009               	tblrd		*+
  3769  0008E2  50F5               	movf	tablat,w,c
  3770  0008E4  0101               	movlb	1	; () banked
  3771  0008E6  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3772  0008E8  A0D8               	btfss	status,0,c
  3773  0008EA  D02D               	goto	l4959
  3774                           
  3775                           ; BSR set to: 1
  3776                           
  3777                           ; BSR set to: 1
  3778                           
  3779                           ; BSR set to: 1
  3780                           ;doprnt.c: 1307: break;
  3781  0008EC  0101               	movlb	1	; () banked
  3782  0008EE  2B09               	incf	printf@c& (0+255),f,b
  3783  0008F0  D7E5               	goto	l4929
  3784  0008F2                     l4941:
  3785                           
  3786                           ; BSR set to: 1
  3787                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3788  0008F2  0E01               	movlw	1
  3789  0008F4  0101               	movlb	1	; () banked
  3790  0008F6  6F09               	movwf	printf@c& (0+255),b
  3791  0008F8                     l4943:
  3792                           
  3793                           ; BSR set to: 1
  3794  0008F8  0E04               	movlw	4
  3795  0008FA  0101               	movlb	1	; () banked
  3796  0008FC  1909               	xorwf	printf@c& (0+255),w,b
  3797  0008FE  B4D8               	btfsc	status,2,c
  3798  000900  D022               	goto	l4959
  3799                           
  3800                           ; BSR set to: 1
  3801                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3802                           
  3803                           ; BSR set to: 1
  3804                           
  3805                           ; BSR set to: 1
  3806  000902  0101               	movlb	1	; () banked
  3807  000904  5109               	movf	printf@c& (0+255),w,b
  3808  000906  0D02               	mullw	2
  3809  000908  0ED2               	movlw	low _hexpowers
  3810  00090A  24F3               	addwf	prodl,w,c
  3811  00090C  6EF6               	movwf	tblptrl,c
  3812  00090E  0EFD               	movlw	high _hexpowers
  3813  000910  20F4               	addwfc	prodh,w,c
  3814  000912  6EF7               	movwf	tblptrh,c
  3815  000914                     	if	0	;There are less than 3 active tblptr bytes
  3816  000914                     	endif
  3817  000914  0009               	tblrd		*+
  3818  000916  50F5               	movf	tablat,w,c
  3819  000918  0101               	movlb	1	; () banked
  3820  00091A  5D04               	subwf	printf@val& (0+255),w,b
  3821  00091C  0009               	tblrd		*+
  3822  00091E  50F5               	movf	tablat,w,c
  3823  000920  0101               	movlb	1	; () banked
  3824  000922  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3825  000924  A0D8               	btfss	status,0,c
  3826  000926  D00F               	goto	l4959
  3827                           
  3828                           ; BSR set to: 1
  3829                           
  3830                           ; BSR set to: 1
  3831                           
  3832                           ; BSR set to: 1
  3833                           ;doprnt.c: 1318: break;
  3834  000928  0101               	movlb	1	; () banked
  3835  00092A  2B09               	incf	printf@c& (0+255),f,b
  3836  00092C  D7E5               	goto	l4943
  3837  00092E                     l4957:
  3838                           
  3839                           ; BSR set to: 1
  3840  00092E  0101               	movlb	1	; () banked
  3841  000930  5106               	movf	printf@flag& (0+255),w,b
  3842  000932  0BC0               	andlw	192
  3843                           
  3844                           ; Switch size 1, requested type "space"
  3845                           ; Number of cases is 3, Range of values is 0 to 192
  3846                           ; switch strategies available:
  3847                           ; Name         Instructions Cycles
  3848                           ; simple_byte           10     6 (average)
  3849                           ;	Chosen strategy is simple_byte
  3850  000934  0A00               	xorlw	0	; case 0
  3851  000936  B4D8               	btfsc	status,2,c
  3852  000938  D7BE               	goto	l4927
  3853  00093A  0A80               	xorlw	128	; case 128
  3854  00093C  B4D8               	btfsc	status,2,c
  3855  00093E  D7D9               	goto	l4941
  3856  000940  0A40               	xorlw	64	; case 192
  3857  000942  B4D8               	btfsc	status,2,c
  3858  000944  D7B8               	goto	l4927
  3859  000946                     l4959:
  3860                           
  3861                           ; BSR set to: 1
  3862                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3863  000946  0101               	movlb	1	; () banked
  3864  000948  5107               	movf	printf@width& (0+255),w,b
  3865  00094A  0101               	movlb	1	; () banked
  3866  00094C  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3867  00094E  B4D8               	btfsc	status,2,c
  3868  000950  D00B               	goto	l4965
  3869                           
  3870                           ; BSR set to: 1
  3871  000952  C106  F0E8         	movff	printf@flag,??_printf
  3872  000956  0E03               	movlw	3
  3873  000958  0100               	movlb	0	; () banked
  3874  00095A  17E8               	andwf	??_printf& (0+255),f,b
  3875  00095C  B4D8               	btfsc	status,2,c
  3876  00095E  D004               	goto	l4965
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;doprnt.c: 1346: width--;
  3880  000960  0101               	movlb	1	; () banked
  3881  000962  0707               	decf	printf@width& (0+255),f,b
  3882  000964  A0D8               	btfss	status,0,c
  3883  000966  0708               	decf	(printf@width+1)& (0+255),f,b
  3884  000968                     l4965:
  3885                           
  3886                           ;doprnt.c: 1381: if(width > c)
  3887  000968  0E80               	movlw	128
  3888  00096A  0101               	movlb	1	; () banked
  3889  00096C  BF09               	btfsc	printf@c& (0+255),7,b
  3890  00096E  0E7F               	movlw	127
  3891  000970  0100               	movlb	0	; () banked
  3892  000972  6FE8               	movwf	??_printf& (0+255),b
  3893  000974  0101               	movlb	1	; () banked
  3894  000976  5107               	movf	printf@width& (0+255),w,b
  3895  000978  0101               	movlb	1	; () banked
  3896  00097A  5D09               	subwf	printf@c& (0+255),w,b
  3897  00097C  0101               	movlb	1	; () banked
  3898  00097E  5108               	movf	(printf@width+1)& (0+255),w,b
  3899  000980  0A80               	xorlw	128
  3900  000982  0100               	movlb	0	; () banked
  3901  000984  59E8               	subwfb	??_printf& (0+255),w,b
  3902  000986  B0D8               	btfsc	status,0,c
  3903  000988  D00B               	goto	l4969
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;doprnt.c: 1382: width -= c;
  3907  00098A  0101               	movlb	1	; () banked
  3908  00098C  5109               	movf	printf@c& (0+255),w,b
  3909  00098E  0101               	movlb	1	; () banked
  3910  000990  5F07               	subwf	printf@width& (0+255),f,b
  3911  000992  0E00               	movlw	0
  3912  000994  0101               	movlb	1	; () banked
  3913  000996  BF09               	btfsc	printf@c& (0+255),7,b
  3914  000998  0EFF               	movlw	255
  3915  00099A  0101               	movlb	1	; () banked
  3916  00099C  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  3917  00099E  D005               	goto	l4971
  3918  0009A0                     l4969:
  3919                           
  3920                           ;doprnt.c: 1383: else
  3921                           ;doprnt.c: 1384: width = 0;
  3922  0009A0  0E00               	movlw	0
  3923  0009A2  0101               	movlb	1	; () banked
  3924  0009A4  6F08               	movwf	(printf@width+1)& (0+255),b
  3925  0009A6  0E00               	movlw	0
  3926  0009A8  6F07               	movwf	printf@width& (0+255),b
  3927  0009AA                     l4971:
  3928                           
  3929                           ; BSR set to: 1
  3930                           ;doprnt.c: 1387: if(flag & 0x04) {
  3931  0009AA  0101               	movlb	1	; () banked
  3932  0009AC  A506               	btfss	printf@flag& (0+255),2,b
  3933  0009AE  D018               	goto	l4983
  3934                           
  3935                           ; BSR set to: 1
  3936                           ;doprnt.c: 1392: if(flag & 0x03)
  3937  0009B0  C106  F0E8         	movff	printf@flag,??_printf
  3938  0009B4  0E03               	movlw	3
  3939  0009B6  0100               	movlb	0	; () banked
  3940  0009B8  17E8               	andwf	??_printf& (0+255),f,b
  3941  0009BA  B4D8               	btfsc	status,2,c
  3942  0009BC  D003               	goto	l4977
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;doprnt.c: 1393: (putch('-') );
  3946  0009BE  0E2D               	movlw	45
  3947  0009C0  ECCC  F016         	call	_putch
  3948  0009C4                     l4977:
  3949                           
  3950                           ;doprnt.c: 1415: if(width)
  3951  0009C4  0101               	movlb	1	; () banked
  3952  0009C6  5107               	movf	printf@width& (0+255),w,b
  3953  0009C8  0101               	movlb	1	; () banked
  3954  0009CA  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3955  0009CC  B4D8               	btfsc	status,2,c
  3956  0009CE  D025               	goto	l4993
  3957                           
  3958                           ; BSR set to: 1
  3959                           ;doprnt.c: 1417: (putch('0') );
  3960                           
  3961                           ; BSR set to: 1
  3962                           
  3963                           ;doprnt.c: 1416: do
  3964  0009D0  0E30               	movlw	48
  3965  0009D2  ECCC  F016         	call	_putch
  3966                           
  3967                           ;doprnt.c: 1418: while(--width);
  3968  0009D6  0101               	movlb	1	; () banked
  3969  0009D8  0707               	decf	printf@width& (0+255),f,b
  3970  0009DA  A0D8               	btfss	status,0,c
  3971  0009DC  0708               	decf	(printf@width+1)& (0+255),f,b
  3972  0009DE  D7F2               	goto	l4977
  3973  0009E0                     l4983:
  3974                           
  3975                           ; BSR set to: 1
  3976                           ;doprnt.c: 1422: {
  3977                           ;doprnt.c: 1424: if(width
  3978                           ;doprnt.c: 1428: )
  3979  0009E0  0101               	movlb	1	; () banked
  3980  0009E2  5107               	movf	printf@width& (0+255),w,b
  3981  0009E4  0101               	movlb	1	; () banked
  3982  0009E6  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3983  0009E8  B4D8               	btfsc	status,2,c
  3984  0009EA  D00D               	goto	l4989
  3985  0009EC                     l4985:
  3986                           
  3987                           ; BSR set to: 1
  3988                           ;doprnt.c: 1430: (putch(' ') );
  3989  0009EC  0E20               	movlw	32
  3990  0009EE  ECCC  F016         	call	_putch
  3991                           
  3992                           ;doprnt.c: 1431: while(--width);
  3993  0009F2  0101               	movlb	1	; () banked
  3994  0009F4  0707               	decf	printf@width& (0+255),f,b
  3995  0009F6  A0D8               	btfss	status,0,c
  3996  0009F8  0708               	decf	(printf@width+1)& (0+255),f,b
  3997  0009FA  0101               	movlb	1	; () banked
  3998  0009FC  5107               	movf	printf@width& (0+255),w,b
  3999  0009FE  0101               	movlb	1	; () banked
  4000  000A00  1108               	iorwf	(printf@width+1)& (0+255),w,b
  4001  000A02  A4D8               	btfss	status,2,c
  4002  000A04  D7F3               	goto	l4985
  4003  000A06                     l4989:
  4004                           
  4005                           ; BSR set to: 1
  4006                           ;doprnt.c: 1438: if(flag & 0x03)
  4007  000A06  C106  F0E8         	movff	printf@flag,??_printf
  4008  000A0A  0E03               	movlw	3
  4009  000A0C  0100               	movlb	0	; () banked
  4010  000A0E  17E8               	andwf	??_printf& (0+255),f,b
  4011  000A10  B4D8               	btfsc	status,2,c
  4012  000A12  D003               	goto	l4993
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;doprnt.c: 1439: (putch('-') );
  4016  000A14  0E2D               	movlw	45
  4017  000A16  ECCC  F016         	call	_putch
  4018  000A1A                     l4993:
  4019                           
  4020                           ;doprnt.c: 1469: }
  4021                           ;doprnt.c: 1472: prec = c;
  4022  000A1A  C109  F103         	movff	printf@c,printf@prec
  4023                           
  4024                           ;doprnt.c: 1474: while(prec--) {
  4025  000A1E  D05D               	goto	l5007
  4026  000A20                     l4995:
  4027                           
  4028                           ;doprnt.c: 1486: case 0xC0:
  4029                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4030  000A20  0101               	movlb	1	; () banked
  4031  000A22  5103               	movf	printf@prec& (0+255),w,b
  4032  000A24  0D02               	mullw	2
  4033  000A26  0EC8               	movlw	low _dpowers
  4034  000A28  24F3               	addwf	prodl,w,c
  4035  000A2A  6EF6               	movwf	tblptrl,c
  4036  000A2C  0EFD               	movlw	high _dpowers
  4037  000A2E  20F4               	addwfc	prodh,w,c
  4038  000A30  6EF7               	movwf	tblptrh,c
  4039  000A32                     	if	0	;There are less than 3 active tblptr bytes
  4040  000A32                     	endif
  4041  000A32  0009               	tblrd		*+
  4042  000A34  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4043  000A38  000A               	tblrd		*-
  4044  000A3A  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4045  000A3E  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4046  000A42  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4047  000A46  EC94  F013         	call	___lwdiv	;wreg free
  4048  000A4A  C0D4  F0DB         	movff	?___lwdiv,___lwmod@dividend
  4049  000A4E  C0D5  F0DC         	movff	?___lwdiv+1,___lwmod@dividend+1
  4050  000A52  0E00               	movlw	0
  4051  000A54  0100               	movlb	0	; () banked
  4052  000A56  6FDE               	movwf	(___lwmod@divisor+1)& (0+255),b
  4053  000A58  0E0A               	movlw	10
  4054  000A5A  6FDD               	movwf	___lwmod@divisor& (0+255),b
  4055  000A5C  EC40  F014         	call	___lwmod	;wreg free
  4056  000A60  0100               	movlb	0	; () banked
  4057  000A62  51DB               	movf	?___lwmod& (0+255),w,b
  4058  000A64  0F30               	addlw	48
  4059  000A66  0101               	movlb	1	; () banked
  4060  000A68  6F09               	movwf	printf@c& (0+255),b
  4061                           
  4062                           ;doprnt.c: 1491: break;
  4063  000A6A  D033               	goto	l5005
  4064  000A6C                     l4997:
  4065                           
  4066                           ; BSR set to: 1
  4067                           ;doprnt.c: 1499: {
  4068                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4069  000A6C  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4070  000A70  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4071  000A74  0101               	movlb	1	; () banked
  4072  000A76  5103               	movf	printf@prec& (0+255),w,b
  4073  000A78  0D02               	mullw	2
  4074  000A7A  0ED2               	movlw	low _hexpowers
  4075  000A7C  24F3               	addwf	prodl,w,c
  4076  000A7E  6EF6               	movwf	tblptrl,c
  4077  000A80  0EFD               	movlw	high _hexpowers
  4078  000A82  20F4               	addwfc	prodh,w,c
  4079  000A84  6EF7               	movwf	tblptrh,c
  4080  000A86                     	if	0	;There are less than 3 active tblptr bytes
  4081  000A86                     	endif
  4082  000A86  0009               	tblrd		*+
  4083  000A88  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4084  000A8C  000A               	tblrd		*-
  4085  000A8E  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4086  000A92  EC94  F013         	call	___lwdiv	;wreg free
  4087  000A96  0100               	movlb	0	; () banked
  4088  000A98  51D4               	movf	?___lwdiv& (0+255),w,b
  4089  000A9A  0B0F               	andlw	15
  4090  000A9C  0101               	movlb	1	; () banked
  4091  000A9E  6F00               	movwf	printf@idx& (0+255),b
  4092                           
  4093                           ; BSR set to: 1
  4094                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4095  000AA0  0101               	movlb	1	; () banked
  4096  000AA2  5100               	movf	printf@idx& (0+255),w,b
  4097  000AA4  0D01               	mullw	1
  4098  000AA6  0E95               	movlw	low STR_25
  4099  000AA8  24F3               	addwf	prodl,w,c
  4100  000AAA  6EF6               	movwf	tblptrl,c
  4101  000AAC  0EFF               	movlw	high STR_25
  4102  000AAE  20F4               	addwfc	prodh,w,c
  4103  000AB0  6EF7               	movwf	tblptrh,c
  4104  000AB2                     	if	0	;There are less than 3 active tblptr bytes
  4105  000AB2                     	endif
  4106  000AB2  0008               	tblrd		*
  4107  000AB4  CFF5 F109          	movff	tablat,printf@c
  4108                           
  4109                           ; BSR set to: 1
  4110                           ;doprnt.c: 1523: }
  4111                           
  4112                           ;doprnt.c: 1508: }
  4113                           ;doprnt.c: 1510: break;
  4114  000AB8  D00C               	goto	l5005
  4115  000ABA                     l5003:
  4116  000ABA  0101               	movlb	1	; () banked
  4117  000ABC  5106               	movf	printf@flag& (0+255),w,b
  4118  000ABE  0BC0               	andlw	192
  4119                           
  4120                           ; Switch size 1, requested type "space"
  4121                           ; Number of cases is 3, Range of values is 0 to 192
  4122                           ; switch strategies available:
  4123                           ; Name         Instructions Cycles
  4124                           ; simple_byte           10     6 (average)
  4125                           ;	Chosen strategy is simple_byte
  4126  000AC0  0A00               	xorlw	0	; case 0
  4127  000AC2  B4D8               	btfsc	status,2,c
  4128  000AC4  D7AD               	goto	l4995
  4129  000AC6  0A80               	xorlw	128	; case 128
  4130  000AC8  B4D8               	btfsc	status,2,c
  4131  000ACA  D7D0               	goto	l4997
  4132  000ACC  0A40               	xorlw	64	; case 192
  4133  000ACE  B4D8               	btfsc	status,2,c
  4134  000AD0  D7A7               	goto	l4995
  4135  000AD2                     l5005:
  4136                           
  4137                           ; BSR set to: 1
  4138                           ;doprnt.c: 1524: (putch(c) );
  4139  000AD2  0101               	movlb	1	; () banked
  4140  000AD4  5109               	movf	printf@c& (0+255),w,b
  4141  000AD6  ECCC  F016         	call	_putch
  4142  000ADA                     l5007:
  4143  000ADA  0101               	movlb	1	; () banked
  4144  000ADC  0703               	decf	printf@prec& (0+255),f,b
  4145  000ADE  0101               	movlb	1	; () banked
  4146  000AE0  2903               	incf	printf@prec& (0+255),w,b
  4147  000AE2  A4D8               	btfss	status,2,c
  4148  000AE4  D7EA               	goto	l5003
  4149  000AE6                     l5009:
  4150  000AE6  C0E0  FFF6         	movff	printf@f,tblptrl
  4151  000AEA  C0E1  FFF7         	movff	printf@f+1,tblptrh
  4152  000AEE  0100               	movlb	0	; () banked
  4153  000AF0  4BE0               	infsnz	printf@f& (0+255),f,b
  4154  000AF2  2BE1               	incf	(printf@f+1)& (0+255),f,b
  4155  000AF4                     	if	0	;tblptru may be non-zero
  4156  000AF4                     	endif
  4157  000AF4                     	if	0	;tblptru may be non-zero
  4158  000AF4                     	endif
  4159  000AF4  0008               	tblrd		*
  4160  000AF6  CFF5 F109          	movff	tablat,printf@c
  4161  000AFA  0101               	movlb	1	; () banked
  4162  000AFC  5109               	movf	printf@c& (0+255),w,b
  4163  000AFE  B4D8               	btfsc	status,2,c
  4164  000B00  0012               	return	
  4165  000B02  D61C               	goto	l4879
  4166  000B04                     __end_of_printf:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           prodh	equ	0xFF4
  4173                           prodl	equ	0xFF3
  4174                           intcon	equ	0xFF2
  4175                           intcon2	equ	0xFF1
  4176                           intcon3	equ	0xFF0
  4177                           postinc0	equ	0xFEE
  4178                           wreg	equ	0xFE8
  4179                           indf2	equ	0xFDF
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186 ;; *************** function _putch *****************
  4187 ;; Defined at:
  4188 ;;		line 31 in file "lcd.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  data            1    wreg     unsigned char 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  data            1   18[BANK0 ] unsigned char 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      void 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2, status,0, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;Total ram usage:        1 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    8
  4209 ;; This function calls:
  4210 ;;		_lcdNibble
  4211 ;; This function is called by:
  4212 ;;		_printf
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text12
  4217  002D98                     __ptext12:
  4218                           	opt stack 0
  4219  002D98                     _putch:
  4220                           	opt stack 20
  4221                           
  4222                           ;incstack = 0
  4223                           ;putch@data stored from wreg
  4224  002D98  0100               	movlb	0	; () banked
  4225  002D9A  6FD6               	movwf	putch@data& (0+255),b
  4226                           
  4227                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4228  002D9C  848C               	bsf	3980,2,c	;volatile
  4229                           
  4230                           ;lcd.c: 33: lcdNibble(data);
  4231  002D9E  0100               	movlb	0	; () banked
  4232  002DA0  51D6               	movf	putch@data& (0+255),w,b
  4233  002DA2  EC71  F014         	call	_lcdNibble
  4234  002DA6  0012               	return		;funcret
  4235  002DA8                     __end_of_putch:
  4236                           	opt stack 0
  4237                           tblptru	equ	0xFF8
  4238                           tblptrh	equ	0xFF7
  4239                           tblptrl	equ	0xFF6
  4240                           tablat	equ	0xFF5
  4241                           prodh	equ	0xFF4
  4242                           prodl	equ	0xFF3
  4243                           intcon	equ	0xFF2
  4244                           intcon2	equ	0xFF1
  4245                           intcon3	equ	0xFF0
  4246                           postinc0	equ	0xFEE
  4247                           wreg	equ	0xFE8
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _isdigit *****************
  4256 ;; Defined at:
  4257 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  c               1    wreg     unsigned char 
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;  c               1   18[BANK0 ] unsigned char 
  4262 ;; Return value:  Size  Location     Type
  4263 ;;		None               void
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, status,0
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;Total ram usage:        3 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    7
  4278 ;; This function calls:
  4279 ;;		Nothing
  4280 ;; This function is called by:
  4281 ;;		_printf
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text13
  4286  002C80                     __ptext13:
  4287                           	opt stack 0
  4288  002C80                     _isdigit:
  4289                           	opt stack 21
  4290                           
  4291                           ;incstack = 0
  4292                           ;isdigit@c stored from wreg
  4293  002C80  0100               	movlb	0	; () banked
  4294  002C82  6FD6               	movwf	isdigit@c& (0+255),b
  4295  002C84  0E00               	movlw	0
  4296  002C86  0100               	movlb	0	; () banked
  4297  002C88  6FD5               	movwf	_isdigit$821& (0+255),b
  4298                           
  4299                           ; BSR set to: 0
  4300  002C8A  0E3A               	movlw	58
  4301  002C8C  0100               	movlb	0	; () banked
  4302  002C8E  61D6               	cpfslt	isdigit@c& (0+255),b
  4303  002C90  D007               	goto	l4825
  4304                           
  4305                           ; BSR set to: 0
  4306  002C92  0E2F               	movlw	47
  4307  002C94  0100               	movlb	0	; () banked
  4308  002C96  65D6               	cpfsgt	isdigit@c& (0+255),b
  4309  002C98  D003               	goto	l4825
  4310                           
  4311                           ; BSR set to: 0
  4312  002C9A  0E01               	movlw	1
  4313  002C9C  0100               	movlb	0	; () banked
  4314  002C9E  6FD5               	movwf	_isdigit$821& (0+255),b
  4315  002CA0                     l4825:
  4316                           
  4317                           ; BSR set to: 0
  4318  002CA0  C0D5  F0D4         	movff	_isdigit$821,??_isdigit
  4319  002CA4  0100               	movlb	0	; () banked
  4320  002CA6  31D4               	rrcf	??_isdigit& (0+255),w,b
  4321  002CA8  0012               	return	
  4322  002CAA                     __end_of_isdigit:
  4323                           	opt stack 0
  4324                           tblptru	equ	0xFF8
  4325                           tblptrh	equ	0xFF7
  4326                           tblptrl	equ	0xFF6
  4327                           tablat	equ	0xFF5
  4328                           prodh	equ	0xFF4
  4329                           prodl	equ	0xFF3
  4330                           intcon	equ	0xFF2
  4331                           intcon2	equ	0xFF1
  4332                           intcon3	equ	0xFF0
  4333                           postinc0	equ	0xFEE
  4334                           wreg	equ	0xFE8
  4335                           indf2	equ	0xFDF
  4336                           postinc2	equ	0xFDE
  4337                           postdec2	equ	0xFDD
  4338                           fsr2h	equ	0xFDA
  4339                           fsr2l	equ	0xFD9
  4340                           status	equ	0xFD8
  4341                           
  4342 ;; *************** function ___wmul *****************
  4343 ;; Defined at:
  4344 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4347 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;  product         2   20[BANK0 ] unsigned int 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  2   16[BANK0 ] unsigned int 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0, prodl, prodh
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4359 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;Total ram usage:        6 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    7
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_printf
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text14
  4374  002C1C                     __ptext14:
  4375                           	opt stack 0
  4376  002C1C                     ___wmul:
  4377                           	opt stack 21
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;incstack = 0
  4381  002C1C  0100               	movlb	0	; () banked
  4382  002C1E  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4383  002C20  0100               	movlb	0	; () banked
  4384  002C22  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4385  002C24  CFF3 F0D8          	movff	prodl,___wmul@product
  4386  002C28  CFF4 F0D9          	movff	prodh,___wmul@product+1
  4387  002C2C  0100               	movlb	0	; () banked
  4388  002C2E  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4389  002C30  0100               	movlb	0	; () banked
  4390  002C32  03D7               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4391  002C34  50F3               	movf	prodl,w,c
  4392  002C36  0100               	movlb	0	; () banked
  4393  002C38  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4394  002C3A  0100               	movlb	0	; () banked
  4395  002C3C  51D5               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4396  002C3E  0100               	movlb	0	; () banked
  4397  002C40  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4398  002C42  50F3               	movf	prodl,w,c
  4399  002C44  0100               	movlb	0	; () banked
  4400  002C46  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4401                           
  4402                           ; BSR set to: 0
  4403  002C48  C0D8  F0D4         	movff	___wmul@product,?___wmul
  4404  002C4C  C0D9  F0D5         	movff	___wmul@product+1,?___wmul+1
  4405  002C50  0012               	return	
  4406  002C52                     __end_of___wmul:
  4407                           	opt stack 0
  4408                           tblptru	equ	0xFF8
  4409                           tblptrh	equ	0xFF7
  4410                           tblptrl	equ	0xFF6
  4411                           tablat	equ	0xFF5
  4412                           prodh	equ	0xFF4
  4413                           prodl	equ	0xFF3
  4414                           intcon	equ	0xFF2
  4415                           intcon2	equ	0xFF1
  4416                           intcon3	equ	0xFF0
  4417                           postinc0	equ	0xFEE
  4418                           wreg	equ	0xFE8
  4419                           indf2	equ	0xFDF
  4420                           postinc2	equ	0xFDE
  4421                           postdec2	equ	0xFDD
  4422                           fsr2h	equ	0xFDA
  4423                           fsr2l	equ	0xFD9
  4424                           status	equ	0xFD8
  4425                           
  4426 ;; *************** function ___lwmod *****************
  4427 ;; Defined at:
  4428 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  dividend        2   23[BANK0 ] unsigned int 
  4431 ;;  divisor         2   25[BANK0 ] unsigned int 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  counter         1   27[BANK0 ] unsigned char 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  2   23[BANK0 ] unsigned int 
  4436 ;; Registers used:
  4437 ;;		wreg, status,2, status,0
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4443 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;Total ram usage:        5 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    7
  4450 ;; This function calls:
  4451 ;;		Nothing
  4452 ;; This function is called by:
  4453 ;;		_printf
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text15
  4458  002880                     __ptext15:
  4459                           	opt stack 0
  4460  002880                     ___lwmod:
  4461                           	opt stack 21
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;incstack = 0
  4465  002880  0100               	movlb	0	; () banked
  4466  002882  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4467  002884  0100               	movlb	0	; () banked
  4468  002886  11DE               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4469  002888  B4D8               	btfsc	status,2,c
  4470  00288A  D026               	goto	l905
  4471                           
  4472                           ; BSR set to: 0
  4473  00288C  0E01               	movlw	1
  4474  00288E  0100               	movlb	0	; () banked
  4475  002890  6FDF               	movwf	___lwmod@counter& (0+255),b
  4476  002892  D006               	goto	l4863
  4477  002894                     l4861:
  4478                           
  4479                           ; BSR set to: 0
  4480  002894  0100               	movlb	0	; () banked
  4481  002896  90D8               	bcf	status,0,c
  4482  002898  37DD               	rlcf	___lwmod@divisor& (0+255),f,b
  4483  00289A  37DE               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4484  00289C  0100               	movlb	0	; () banked
  4485  00289E  2BDF               	incf	___lwmod@counter& (0+255),f,b
  4486  0028A0                     l4863:
  4487                           
  4488                           ; BSR set to: 0
  4489  0028A0  0100               	movlb	0	; () banked
  4490  0028A2  AFDE               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4491  0028A4  D7F7               	goto	l4861
  4492  0028A6                     l4865:
  4493                           
  4494                           ; BSR set to: 0
  4495  0028A6  0100               	movlb	0	; () banked
  4496  0028A8  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4497  0028AA  0100               	movlb	0	; () banked
  4498  0028AC  5DDB               	subwf	___lwmod@dividend& (0+255),w,b
  4499  0028AE  0100               	movlb	0	; () banked
  4500  0028B0  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4501  0028B2  0100               	movlb	0	; () banked
  4502  0028B4  59DC               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4503  0028B6  A0D8               	btfss	status,0,c
  4504  0028B8  D008               	goto	l4869
  4505                           
  4506                           ; BSR set to: 0
  4507  0028BA  0100               	movlb	0	; () banked
  4508  0028BC  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4509  0028BE  0100               	movlb	0	; () banked
  4510  0028C0  5FDB               	subwf	___lwmod@dividend& (0+255),f,b
  4511  0028C2  0100               	movlb	0	; () banked
  4512  0028C4  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4513  0028C6  0100               	movlb	0	; () banked
  4514  0028C8  5BDC               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4515  0028CA                     l4869:
  4516                           
  4517                           ; BSR set to: 0
  4518  0028CA  0100               	movlb	0	; () banked
  4519  0028CC  90D8               	bcf	status,0,c
  4520  0028CE  33DE               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4521  0028D0  33DD               	rrcf	___lwmod@divisor& (0+255),f,b
  4522                           
  4523                           ; BSR set to: 0
  4524  0028D2  0100               	movlb	0	; () banked
  4525  0028D4  2FDF               	decfsz	___lwmod@counter& (0+255),f,b
  4526  0028D6  D7E7               	goto	l4865
  4527  0028D8                     l905:
  4528                           
  4529                           ; BSR set to: 0
  4530  0028D8  C0DB  F0DB         	movff	___lwmod@dividend,?___lwmod
  4531  0028DC  C0DC  F0DC         	movff	___lwmod@dividend+1,?___lwmod+1
  4532                           
  4533                           ; BSR set to: 0
  4534  0028E0  0012               	return		;funcret
  4535  0028E2                     __end_of___lwmod:
  4536                           	opt stack 0
  4537                           tblptru	equ	0xFF8
  4538                           tblptrh	equ	0xFF7
  4539                           tblptrl	equ	0xFF6
  4540                           tablat	equ	0xFF5
  4541                           prodh	equ	0xFF4
  4542                           prodl	equ	0xFF3
  4543                           intcon	equ	0xFF2
  4544                           intcon2	equ	0xFF1
  4545                           intcon3	equ	0xFF0
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           indf2	equ	0xFDF
  4549                           postinc2	equ	0xFDE
  4550                           postdec2	equ	0xFDD
  4551                           fsr2h	equ	0xFDA
  4552                           fsr2l	equ	0xFD9
  4553                           status	equ	0xFD8
  4554                           
  4555 ;; *************** function ___lwdiv *****************
  4556 ;; Defined at:
  4557 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  dividend        2   16[BANK0 ] unsigned int 
  4560 ;;  divisor         2   18[BANK0 ] unsigned int 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  quotient        2   21[BANK0 ] unsigned int 
  4563 ;;  counter         1   20[BANK0 ] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  2   16[BANK0 ] unsigned int 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4573 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;Total ram usage:        7 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    7
  4580 ;; This function calls:
  4581 ;;		Nothing
  4582 ;; This function is called by:
  4583 ;;		_printf
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text16
  4588  002728                     __ptext16:
  4589                           	opt stack 0
  4590  002728                     ___lwdiv:
  4591                           	opt stack 21
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;incstack = 0
  4595  002728  0E00               	movlw	0
  4596  00272A  0100               	movlb	0	; () banked
  4597  00272C  6FDA               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4598  00272E  0E00               	movlw	0
  4599  002730  6FD9               	movwf	___lwdiv@quotient& (0+255),b
  4600                           
  4601                           ; BSR set to: 0
  4602  002732  0100               	movlb	0	; () banked
  4603  002734  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4604  002736  0100               	movlb	0	; () banked
  4605  002738  11D7               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4606  00273A  B4D8               	btfsc	status,2,c
  4607  00273C  D02C               	goto	l895
  4608                           
  4609                           ; BSR set to: 0
  4610  00273E  0E01               	movlw	1
  4611  002740  0100               	movlb	0	; () banked
  4612  002742  6FD8               	movwf	___lwdiv@counter& (0+255),b
  4613  002744  D006               	goto	l4843
  4614  002746                     l4841:
  4615                           
  4616                           ; BSR set to: 0
  4617  002746  0100               	movlb	0	; () banked
  4618  002748  90D8               	bcf	status,0,c
  4619  00274A  37D6               	rlcf	___lwdiv@divisor& (0+255),f,b
  4620  00274C  37D7               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4621  00274E  0100               	movlb	0	; () banked
  4622  002750  2BD8               	incf	___lwdiv@counter& (0+255),f,b
  4623  002752                     l4843:
  4624                           
  4625                           ; BSR set to: 0
  4626  002752  0100               	movlb	0	; () banked
  4627  002754  AFD7               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4628  002756  D7F7               	goto	l4841
  4629  002758                     l4845:
  4630                           
  4631                           ; BSR set to: 0
  4632  002758  0100               	movlb	0	; () banked
  4633  00275A  90D8               	bcf	status,0,c
  4634  00275C  37D9               	rlcf	___lwdiv@quotient& (0+255),f,b
  4635  00275E  37DA               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4636                           
  4637                           ; BSR set to: 0
  4638  002760  0100               	movlb	0	; () banked
  4639  002762  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4640  002764  0100               	movlb	0	; () banked
  4641  002766  5DD4               	subwf	___lwdiv@dividend& (0+255),w,b
  4642  002768  0100               	movlb	0	; () banked
  4643  00276A  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4644  00276C  0100               	movlb	0	; () banked
  4645  00276E  59D5               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4646  002770  A0D8               	btfss	status,0,c
  4647  002772  D00A               	goto	l4853
  4648                           
  4649                           ; BSR set to: 0
  4650  002774  0100               	movlb	0	; () banked
  4651  002776  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4652  002778  0100               	movlb	0	; () banked
  4653  00277A  5FD4               	subwf	___lwdiv@dividend& (0+255),f,b
  4654  00277C  0100               	movlb	0	; () banked
  4655  00277E  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4656  002780  0100               	movlb	0	; () banked
  4657  002782  5BD5               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4658                           
  4659                           ; BSR set to: 0
  4660  002784  0100               	movlb	0	; () banked
  4661  002786  81D9               	bsf	___lwdiv@quotient& (0+255),0,b
  4662  002788                     l4853:
  4663                           
  4664                           ; BSR set to: 0
  4665  002788  0100               	movlb	0	; () banked
  4666  00278A  90D8               	bcf	status,0,c
  4667  00278C  33D7               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4668  00278E  33D6               	rrcf	___lwdiv@divisor& (0+255),f,b
  4669                           
  4670                           ; BSR set to: 0
  4671  002790  0100               	movlb	0	; () banked
  4672  002792  2FD8               	decfsz	___lwdiv@counter& (0+255),f,b
  4673  002794  D7E1               	goto	l4845
  4674  002796                     l895:
  4675                           
  4676                           ; BSR set to: 0
  4677  002796  C0D9  F0D4         	movff	___lwdiv@quotient,?___lwdiv
  4678  00279A  C0DA  F0D5         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4679                           
  4680                           ; BSR set to: 0
  4681  00279E  0012               	return		;funcret
  4682  0027A0                     __end_of___lwdiv:
  4683                           	opt stack 0
  4684                           tblptru	equ	0xFF8
  4685                           tblptrh	equ	0xFF7
  4686                           tblptrl	equ	0xFF6
  4687                           tablat	equ	0xFF5
  4688                           prodh	equ	0xFF4
  4689                           prodl	equ	0xFF3
  4690                           intcon	equ	0xFF2
  4691                           intcon2	equ	0xFF1
  4692                           intcon3	equ	0xFF0
  4693                           postinc0	equ	0xFEE
  4694                           wreg	equ	0xFE8
  4695                           indf2	equ	0xFDF
  4696                           postinc2	equ	0xFDE
  4697                           postdec2	equ	0xFDD
  4698                           fsr2h	equ	0xFDA
  4699                           fsr2l	equ	0xFD9
  4700                           status	equ	0xFD8
  4701                           
  4702 ;; *************** function _lcdInst *****************
  4703 ;; Defined at:
  4704 ;;		line 26 in file "lcd.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;  data            1    wreg     unsigned char 
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  data            1   18[BANK0 ] unsigned char 
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  1    wreg      void 
  4711 ;; Registers used:
  4712 ;;		wreg, status,2, status,0, cstack
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;Total ram usage:        1 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    8
  4725 ;; This function calls:
  4726 ;;		_lcdNibble
  4727 ;; This function is called by:
  4728 ;;		_initLCD
  4729 ;;		_standby
  4730 ;;		_date_time
  4731 ;;		_bottle_count
  4732 ;;		_bottle_time
  4733 ;;		_operation
  4734 ;;		_operationend
  4735 ;;		_emergencystop
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text17
  4740  002DA8                     __ptext17:
  4741                           	opt stack 0
  4742  002DA8                     _lcdInst:
  4743                           	opt stack 21
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;incstack = 0
  4747                           ;lcdInst@data stored from wreg
  4748  002DA8  0100               	movlb	0	; () banked
  4749  002DAA  6FD6               	movwf	lcdInst@data& (0+255),b
  4750                           
  4751                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4752  002DAC  948C               	bcf	3980,2,c	;volatile
  4753                           
  4754                           ;lcd.c: 28: lcdNibble(data);
  4755  002DAE  0100               	movlb	0	; () banked
  4756  002DB0  51D6               	movf	lcdInst@data& (0+255),w,b
  4757  002DB2  EC71  F014         	call	_lcdNibble
  4758  002DB6  0012               	return		;funcret
  4759  002DB8                     __end_of_lcdInst:
  4760                           	opt stack 0
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           intcon2	equ	0xFF1
  4769                           intcon3	equ	0xFF0
  4770                           postinc0	equ	0xFEE
  4771                           wreg	equ	0xFE8
  4772                           indf2	equ	0xFDF
  4773                           postinc2	equ	0xFDE
  4774                           postdec2	equ	0xFDD
  4775                           fsr2h	equ	0xFDA
  4776                           fsr2l	equ	0xFD9
  4777                           status	equ	0xFD8
  4778                           
  4779 ;; *************** function _lcdNibble *****************
  4780 ;; Defined at:
  4781 ;;		line 36 in file "lcd.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  data            1    wreg     unsigned char 
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  data            1   17[BANK0 ] unsigned char 
  4786 ;;  temp            1   16[BANK0 ] unsigned char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  1    wreg      void 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;Total ram usage:        2 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    7
  4803 ;; This function calls:
  4804 ;;		Nothing
  4805 ;; This function is called by:
  4806 ;;		_lcdInst
  4807 ;;		_putch
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           	psect	text18
  4812  0028E2                     __ptext18:
  4813                           	opt stack 0
  4814  0028E2                     _lcdNibble:
  4815                           	opt stack 21
  4816                           
  4817                           ;incstack = 0
  4818                           ;lcdNibble@data stored from wreg
  4819  0028E2  0100               	movlb	0	; () banked
  4820  0028E4  6FD5               	movwf	lcdNibble@data& (0+255),b
  4821                           
  4822                           ;lcd.c: 38: char temp = data & 0xF0;
  4823  0028E6  0100               	movlb	0	; () banked
  4824  0028E8  51D5               	movf	lcdNibble@data& (0+255),w,b
  4825  0028EA  0BF0               	andlw	240
  4826  0028EC  0100               	movlb	0	; () banked
  4827  0028EE  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4828                           
  4829                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4830  0028F0  508C               	movf	3980,w,c	;volatile
  4831  0028F2  0B0F               	andlw	15
  4832  0028F4  6E8C               	movwf	3980,c	;volatile
  4833                           
  4834                           ;lcd.c: 40: LATD = temp | LATD;
  4835  0028F6  0100               	movlb	0	; () banked
  4836  0028F8  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4837  0028FA  108C               	iorwf	3980,w,c	;volatile
  4838  0028FC  6E8C               	movwf	3980,c	;volatile
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4842  0028FE  968C               	bcf	3980,3,c	;volatile
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4846  002900  0E19               	movlw	25
  4847  002902                     u4867:
  4848  002902  2EE8               	decfsz	wreg,f,c
  4849  002904  D7FE               	bra	u4867
  4850                           
  4851                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4852  002906  868C               	bsf	3980,3,c	;volatile
  4853                           
  4854                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4855  002908  0E19               	movlw	25
  4856  00290A                     u4877:
  4857  00290A  2EE8               	decfsz	wreg,f,c
  4858  00290C  D7FE               	bra	u4877
  4859                           
  4860                           ;lcd.c: 47: data = data << 4;
  4861  00290E  0100               	movlb	0	; () banked
  4862  002910  39D5               	swapf	lcdNibble@data& (0+255),w,b
  4863  002912  0BF0               	andlw	240
  4864  002914  0100               	movlb	0	; () banked
  4865  002916  6FD5               	movwf	lcdNibble@data& (0+255),b
  4866                           
  4867                           ;lcd.c: 49: temp = data & 0xF0;
  4868  002918  0100               	movlb	0	; () banked
  4869  00291A  51D5               	movf	lcdNibble@data& (0+255),w,b
  4870  00291C  0BF0               	andlw	240
  4871  00291E  0100               	movlb	0	; () banked
  4872  002920  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4873                           
  4874                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4875  002922  508C               	movf	3980,w,c	;volatile
  4876  002924  0B0F               	andlw	15
  4877  002926  6E8C               	movwf	3980,c	;volatile
  4878                           
  4879                           ;lcd.c: 51: LATD = temp | LATD;
  4880  002928  0100               	movlb	0	; () banked
  4881  00292A  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4882  00292C  108C               	iorwf	3980,w,c	;volatile
  4883  00292E  6E8C               	movwf	3980,c	;volatile
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4887  002930  968C               	bcf	3980,3,c	;volatile
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4891  002932  0E19               	movlw	25
  4892  002934                     u4887:
  4893  002934  2EE8               	decfsz	wreg,f,c
  4894  002936  D7FE               	bra	u4887
  4895                           
  4896                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4897  002938  868C               	bsf	3980,3,c	;volatile
  4898                           
  4899                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4900  00293A  0E19               	movlw	25
  4901  00293C                     u4897:
  4902  00293C  2EE8               	decfsz	wreg,f,c
  4903  00293E  D7FE               	bra	u4897
  4904  002940  0012               	return		;funcret
  4905  002942                     __end_of_lcdNibble:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           intcon2	equ	0xFF1
  4915                           intcon3	equ	0xFF0
  4916                           postinc0	equ	0xFEE
  4917                           wreg	equ	0xFE8
  4918                           indf2	equ	0xFDF
  4919                           postinc2	equ	0xFDE
  4920                           postdec2	equ	0xFDD
  4921                           fsr2h	equ	0xFDA
  4922                           fsr2l	equ	0xFD9
  4923                           status	equ	0xFD8
  4924                           
  4925 ;; *************** function ___awmod *****************
  4926 ;; Defined at:
  4927 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  dividend        2   16[BANK0 ] int 
  4930 ;;  divisor         2   18[BANK0 ] int 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  sign            1   21[BANK0 ] unsigned char 
  4933 ;;  counter         1   20[BANK0 ] unsigned char 
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  2   16[BANK0 ] int 
  4936 ;; Registers used:
  4937 ;;		wreg, status,2, status,0
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4943 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;Total ram usage:        6 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    7
  4950 ;; This function calls:
  4951 ;;		Nothing
  4952 ;; This function is called by:
  4953 ;;		_bottle_count
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           	psect	text19
  4958  002452                     __ptext19:
  4959                           	opt stack 0
  4960  002452                     ___awmod:
  4961                           	opt stack 22
  4962                           
  4963                           ;incstack = 0
  4964  002452  0E00               	movlw	0
  4965  002454  0100               	movlb	0	; () banked
  4966  002456  6FD9               	movwf	___awmod@sign& (0+255),b
  4967                           
  4968                           ; BSR set to: 0
  4969  002458  0100               	movlb	0	; () banked
  4970  00245A  AFD5               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4971  00245C  D008               	goto	l3863
  4972                           
  4973                           ; BSR set to: 0
  4974  00245E  0100               	movlb	0	; () banked
  4975  002460  6DD4               	negf	___awmod@dividend& (0+255),b
  4976  002462  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  4977  002464  B0D8               	btfsc	status,0,c
  4978  002466  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  4979                           
  4980                           ; BSR set to: 0
  4981  002468  0E01               	movlw	1
  4982  00246A  0100               	movlb	0	; () banked
  4983  00246C  6FD9               	movwf	___awmod@sign& (0+255),b
  4984  00246E                     l3863:
  4985                           
  4986                           ; BSR set to: 0
  4987  00246E  0100               	movlb	0	; () banked
  4988  002470  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4989  002472  D005               	goto	l3867
  4990                           
  4991                           ; BSR set to: 0
  4992  002474  0100               	movlb	0	; () banked
  4993  002476  6DD6               	negf	___awmod@divisor& (0+255),b
  4994  002478  1FD7               	comf	(___awmod@divisor+1)& (0+255),f,b
  4995  00247A  B0D8               	btfsc	status,0,c
  4996  00247C  2BD7               	incf	(___awmod@divisor+1)& (0+255),f,b
  4997  00247E                     l3867:
  4998                           
  4999                           ; BSR set to: 0
  5000  00247E  0100               	movlb	0	; () banked
  5001  002480  51D6               	movf	___awmod@divisor& (0+255),w,b
  5002  002482  0100               	movlb	0	; () banked
  5003  002484  11D7               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5004  002486  B4D8               	btfsc	status,2,c
  5005  002488  D026               	goto	l3883
  5006                           
  5007                           ; BSR set to: 0
  5008  00248A  0E01               	movlw	1
  5009  00248C  0100               	movlb	0	; () banked
  5010  00248E  6FD8               	movwf	___awmod@counter& (0+255),b
  5011  002490  D006               	goto	l3873
  5012  002492                     l3871:
  5013                           
  5014                           ; BSR set to: 0
  5015  002492  0100               	movlb	0	; () banked
  5016  002494  90D8               	bcf	status,0,c
  5017  002496  37D6               	rlcf	___awmod@divisor& (0+255),f,b
  5018  002498  37D7               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5019  00249A  0100               	movlb	0	; () banked
  5020  00249C  2BD8               	incf	___awmod@counter& (0+255),f,b
  5021  00249E                     l3873:
  5022                           
  5023                           ; BSR set to: 0
  5024  00249E  0100               	movlb	0	; () banked
  5025  0024A0  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5026  0024A2  D7F7               	goto	l3871
  5027  0024A4                     l3875:
  5028                           
  5029                           ; BSR set to: 0
  5030  0024A4  0100               	movlb	0	; () banked
  5031  0024A6  51D6               	movf	___awmod@divisor& (0+255),w,b
  5032  0024A8  0100               	movlb	0	; () banked
  5033  0024AA  5DD4               	subwf	___awmod@dividend& (0+255),w,b
  5034  0024AC  0100               	movlb	0	; () banked
  5035  0024AE  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  5036  0024B0  0100               	movlb	0	; () banked
  5037  0024B2  59D5               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5038  0024B4  A0D8               	btfss	status,0,c
  5039  0024B6  D008               	goto	l3879
  5040                           
  5041                           ; BSR set to: 0
  5042  0024B8  0100               	movlb	0	; () banked
  5043  0024BA  51D6               	movf	___awmod@divisor& (0+255),w,b
  5044  0024BC  0100               	movlb	0	; () banked
  5045  0024BE  5FD4               	subwf	___awmod@dividend& (0+255),f,b
  5046  0024C0  0100               	movlb	0	; () banked
  5047  0024C2  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  5048  0024C4  0100               	movlb	0	; () banked
  5049  0024C6  5BD5               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5050  0024C8                     l3879:
  5051                           
  5052                           ; BSR set to: 0
  5053  0024C8  0100               	movlb	0	; () banked
  5054  0024CA  90D8               	bcf	status,0,c
  5055  0024CC  33D7               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5056  0024CE  33D6               	rrcf	___awmod@divisor& (0+255),f,b
  5057                           
  5058                           ; BSR set to: 0
  5059  0024D0  0100               	movlb	0	; () banked
  5060  0024D2  2FD8               	decfsz	___awmod@counter& (0+255),f,b
  5061  0024D4  D7E7               	goto	l3875
  5062  0024D6                     l3883:
  5063                           
  5064                           ; BSR set to: 0
  5065  0024D6  0100               	movlb	0	; () banked
  5066  0024D8  51D9               	movf	___awmod@sign& (0+255),w,b
  5067  0024DA  0100               	movlb	0	; () banked
  5068  0024DC  B4D8               	btfsc	status,2,c
  5069  0024DE  D005               	goto	l3887
  5070                           
  5071                           ; BSR set to: 0
  5072  0024E0  0100               	movlb	0	; () banked
  5073  0024E2  6DD4               	negf	___awmod@dividend& (0+255),b
  5074  0024E4  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  5075  0024E6  B0D8               	btfsc	status,0,c
  5076  0024E8  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  5077  0024EA                     l3887:
  5078                           
  5079                           ; BSR set to: 0
  5080  0024EA  C0D4  F0D4         	movff	___awmod@dividend,?___awmod
  5081  0024EE  C0D5  F0D5         	movff	___awmod@dividend+1,?___awmod+1
  5082  0024F2  0012               	return	
  5083  0024F4                     __end_of___awmod:
  5084                           	opt stack 0
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           prodh	equ	0xFF4
  5090                           prodl	equ	0xFF3
  5091                           intcon	equ	0xFF2
  5092                           intcon2	equ	0xFF1
  5093                           intcon3	equ	0xFF0
  5094                           postinc0	equ	0xFEE
  5095                           wreg	equ	0xFE8
  5096                           indf2	equ	0xFDF
  5097                           postinc2	equ	0xFDE
  5098                           postdec2	equ	0xFDD
  5099                           fsr2h	equ	0xFDA
  5100                           fsr2l	equ	0xFD9
  5101                           status	equ	0xFD8
  5102                           
  5103 ;; *************** function _I2C_Master_Init *****************
  5104 ;; Defined at:
  5105 ;;		line 14 in file "I2C.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;  c               4   29[BANK0 ] const unsigned long 
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;		None
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  1    wreg      void 
  5112 ;; Registers used:
  5113 ;;		wreg, status,2, status,0, cstack
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5119 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;Total ram usage:        8 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    8
  5126 ;; This function calls:
  5127 ;;		___lldiv
  5128 ;; This function is called by:
  5129 ;;		_main
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text20
  5134  002942                     __ptext20:
  5135                           	opt stack 0
  5136  002942                     _I2C_Master_Init:
  5137                           	opt stack 22
  5138                           
  5139                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;incstack = 0
  5143  002942  0E00               	movlw	0
  5144  002944  6EC7               	movwf	4039,c	;volatile
  5145                           
  5146                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  5147  002946  0E28               	movlw	40
  5148  002948  6EC6               	movwf	4038,c	;volatile
  5149                           
  5150                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  5151  00294A  0E00               	movlw	0
  5152  00294C  6EC5               	movwf	4037,c	;volatile
  5153                           
  5154                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
  5155  00294E  0E80               	movlw	128
  5156  002950  0100               	movlb	0	; () banked
  5157  002952  6FD4               	movwf	___lldiv@dividend& (0+255),b
  5158  002954  0E96               	movlw	150
  5159  002956  6FD5               	movwf	(___lldiv@dividend+1)& (0+255),b
  5160  002958  0E98               	movlw	152
  5161  00295A  6FD6               	movwf	(___lldiv@dividend+2)& (0+255),b
  5162  00295C  0E00               	movlw	0
  5163  00295E  6FD7               	movwf	(___lldiv@dividend+3)& (0+255),b
  5164  002960  C0E1  F0E5         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5165  002964  C0E2  F0E6         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5166  002968  C0E3  F0E7         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5167  00296C  C0E4  F0E8         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5168  002970  0E02               	movlw	2
  5169  002972                     u3775:
  5170  002972  90D8               	bcf	status,0,c
  5171  002974  0100               	movlb	0	; () banked
  5172  002976  37E5               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5173  002978  37E6               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5174  00297A  37E7               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5175  00297C  37E8               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5176  00297E  2EE8               	decfsz	wreg,f,c
  5177  002980  D7F8               	goto	u3775
  5178  002982  C0E5  F0D8         	movff	??_I2C_Master_Init,___lldiv@divisor
  5179  002986  C0E6  F0D9         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5180  00298A  C0E7  F0DA         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5181  00298E  C0E8  F0DB         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5182  002992  ECC0  F010         	call	___lldiv	;wreg free
  5183  002996  0100               	movlb	0	; () banked
  5184  002998  05D4               	decf	?___lldiv& (0+255),w,b
  5185  00299A  6EC8               	movwf	4040,c	;volatile
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;I2C.c: 21: TRISC3 = 1;
  5189  00299C  8694               	bsf	3988,3,c	;volatile
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;I2C.c: 22: TRISC4 = 1;
  5193  00299E  8894               	bsf	3988,4,c	;volatile
  5194                           
  5195                           ; BSR set to: 0
  5196  0029A0  0012               	return		;funcret
  5197  0029A2                     __end_of_I2C_Master_Init:
  5198                           	opt stack 0
  5199                           tblptru	equ	0xFF8
  5200                           tblptrh	equ	0xFF7
  5201                           tblptrl	equ	0xFF6
  5202                           tablat	equ	0xFF5
  5203                           prodh	equ	0xFF4
  5204                           prodl	equ	0xFF3
  5205                           intcon	equ	0xFF2
  5206                           intcon2	equ	0xFF1
  5207                           intcon3	equ	0xFF0
  5208                           postinc0	equ	0xFEE
  5209                           wreg	equ	0xFE8
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           postdec2	equ	0xFDD
  5213                           fsr2h	equ	0xFDA
  5214                           fsr2l	equ	0xFD9
  5215                           status	equ	0xFD8
  5216                           
  5217 ;; *************** function ___lldiv *****************
  5218 ;; Defined at:
  5219 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;  dividend        4   16[BANK0 ] unsigned long 
  5222 ;;  divisor         4   20[BANK0 ] unsigned long 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  quotient        4   24[BANK0 ] unsigned long 
  5225 ;;  counter         1   28[BANK0 ] unsigned char 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  4   16[BANK0 ] unsigned long 
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5235 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5236 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;Total ram usage:       13 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    7
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_I2C_Master_Init
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text21
  5250  002180                     __ptext21:
  5251                           	opt stack 0
  5252  002180                     ___lldiv:
  5253                           	opt stack 22
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;incstack = 0
  5257  002180  0E00               	movlw	0
  5258  002182  0100               	movlb	0	; () banked
  5259  002184  6FDC               	movwf	___lldiv@quotient& (0+255),b
  5260  002186  0E00               	movlw	0
  5261  002188  6FDD               	movwf	(___lldiv@quotient+1)& (0+255),b
  5262  00218A  0E00               	movlw	0
  5263  00218C  6FDE               	movwf	(___lldiv@quotient+2)& (0+255),b
  5264  00218E  0E00               	movlw	0
  5265  002190  6FDF               	movwf	(___lldiv@quotient+3)& (0+255),b
  5266                           
  5267                           ; BSR set to: 0
  5268  002192  0100               	movlb	0	; () banked
  5269  002194  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5270  002196  0100               	movlb	0	; () banked
  5271  002198  11D9               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5272  00219A  0100               	movlb	0	; () banked
  5273  00219C  11DA               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5274  00219E  0100               	movlb	0	; () banked
  5275  0021A0  11DB               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5276  0021A2  B4D8               	btfsc	status,2,c
  5277  0021A4  D042               	goto	l842
  5278                           
  5279                           ; BSR set to: 0
  5280  0021A6  0E01               	movlw	1
  5281  0021A8  0100               	movlb	0	; () banked
  5282  0021AA  6FE0               	movwf	___lldiv@counter& (0+255),b
  5283  0021AC  D008               	goto	l3899
  5284  0021AE                     l3897:
  5285                           
  5286                           ; BSR set to: 0
  5287  0021AE  0100               	movlb	0	; () banked
  5288  0021B0  90D8               	bcf	status,0,c
  5289  0021B2  37D8               	rlcf	___lldiv@divisor& (0+255),f,b
  5290  0021B4  37D9               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5291  0021B6  37DA               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5292  0021B8  37DB               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5293  0021BA  0100               	movlb	0	; () banked
  5294  0021BC  2BE0               	incf	___lldiv@counter& (0+255),f,b
  5295  0021BE                     l3899:
  5296                           
  5297                           ; BSR set to: 0
  5298  0021BE  0100               	movlb	0	; () banked
  5299  0021C0  AFDB               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5300  0021C2  D7F5               	goto	l3897
  5301  0021C4                     l3901:
  5302                           
  5303                           ; BSR set to: 0
  5304  0021C4  0100               	movlb	0	; () banked
  5305  0021C6  90D8               	bcf	status,0,c
  5306  0021C8  37DC               	rlcf	___lldiv@quotient& (0+255),f,b
  5307  0021CA  37DD               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5308  0021CC  37DE               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5309  0021CE  37DF               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5310                           
  5311                           ; BSR set to: 0
  5312  0021D0  0100               	movlb	0	; () banked
  5313  0021D2  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5314  0021D4  0100               	movlb	0	; () banked
  5315  0021D6  5DD4               	subwf	___lldiv@dividend& (0+255),w,b
  5316  0021D8  0100               	movlb	0	; () banked
  5317  0021DA  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5318  0021DC  0100               	movlb	0	; () banked
  5319  0021DE  59D5               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5320  0021E0  0100               	movlb	0	; () banked
  5321  0021E2  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5322  0021E4  0100               	movlb	0	; () banked
  5323  0021E6  59D6               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5324  0021E8  0100               	movlb	0	; () banked
  5325  0021EA  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5326  0021EC  0100               	movlb	0	; () banked
  5327  0021EE  59D7               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5328  0021F0  A0D8               	btfss	status,0,c
  5329  0021F2  D012               	goto	l3909
  5330                           
  5331                           ; BSR set to: 0
  5332  0021F4  0100               	movlb	0	; () banked
  5333  0021F6  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5334  0021F8  0100               	movlb	0	; () banked
  5335  0021FA  5FD4               	subwf	___lldiv@dividend& (0+255),f,b
  5336  0021FC  0100               	movlb	0	; () banked
  5337  0021FE  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5338  002200  0100               	movlb	0	; () banked
  5339  002202  5BD5               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5340  002204  0100               	movlb	0	; () banked
  5341  002206  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5342  002208  0100               	movlb	0	; () banked
  5343  00220A  5BD6               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5344  00220C  0100               	movlb	0	; () banked
  5345  00220E  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5346  002210  0100               	movlb	0	; () banked
  5347  002212  5BD7               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5348                           
  5349                           ; BSR set to: 0
  5350  002214  0100               	movlb	0	; () banked
  5351  002216  81DC               	bsf	___lldiv@quotient& (0+255),0,b
  5352  002218                     l3909:
  5353                           
  5354                           ; BSR set to: 0
  5355  002218  0100               	movlb	0	; () banked
  5356  00221A  90D8               	bcf	status,0,c
  5357  00221C  33DB               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5358  00221E  33DA               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5359  002220  33D9               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5360  002222  33D8               	rrcf	___lldiv@divisor& (0+255),f,b
  5361                           
  5362                           ; BSR set to: 0
  5363  002224  0100               	movlb	0	; () banked
  5364  002226  2FE0               	decfsz	___lldiv@counter& (0+255),f,b
  5365  002228  D7CD               	goto	l3901
  5366  00222A                     l842:
  5367                           
  5368                           ; BSR set to: 0
  5369  00222A  C0DC  F0D4         	movff	___lldiv@quotient,?___lldiv
  5370  00222E  C0DD  F0D5         	movff	___lldiv@quotient+1,?___lldiv+1
  5371  002232  C0DE  F0D6         	movff	___lldiv@quotient+2,?___lldiv+2
  5372  002236  C0DF  F0D7         	movff	___lldiv@quotient+3,?___lldiv+3
  5373                           
  5374                           ; BSR set to: 0
  5375  00223A  0012               	return		;funcret
  5376  00223C                     __end_of___lldiv:
  5377                           	opt stack 0
  5378                           tblptru	equ	0xFF8
  5379                           tblptrh	equ	0xFF7
  5380                           tblptrl	equ	0xFF6
  5381                           tablat	equ	0xFF5
  5382                           prodh	equ	0xFF4
  5383                           prodl	equ	0xFF3
  5384                           intcon	equ	0xFF2
  5385                           intcon2	equ	0xFF1
  5386                           intcon3	equ	0xFF0
  5387                           postinc0	equ	0xFEE
  5388                           wreg	equ	0xFE8
  5389                           indf2	equ	0xFDF
  5390                           postinc2	equ	0xFDE
  5391                           postdec2	equ	0xFDD
  5392                           fsr2h	equ	0xFDA
  5393                           fsr2l	equ	0xFD9
  5394                           status	equ	0xFD8
  5395                           
  5396 ;; *************** function _I2C_ColorSens_Init *****************
  5397 ;; Defined at:
  5398 ;;		line 54 in file "I2C.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;		None
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;		None
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  1    wreg      void 
  5405 ;; Registers used:
  5406 ;;		wreg, status,2, status,0, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;Total ram usage:        0 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    9
  5419 ;; This function calls:
  5420 ;;		_I2C_Master_Start
  5421 ;;		_I2C_Master_Stop
  5422 ;;		_I2C_Master_Write
  5423 ;; This function is called by:
  5424 ;;		_main
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           	psect	text22
  5429  001FFE                     __ptext22:
  5430                           	opt stack 0
  5431  001FFE                     _I2C_ColorSens_Init:
  5432                           	opt stack 21
  5433                           
  5434                           ;I2C.c: 55: I2C_Master_Start();
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;incstack = 0
  5438  001FFE  ECFA  F016         	call	_I2C_Master_Start	;wreg free
  5439                           
  5440                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  5441  002002  0E00               	movlw	0
  5442  002004  0100               	movlb	0	; () banked
  5443  002006  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5444  002008  0E52               	movlw	82
  5445  00200A  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5446  00200C  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5447                           
  5448                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  5449  002010  0E00               	movlw	0
  5450  002012  0100               	movlb	0	; () banked
  5451  002014  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5452  002016  0E80               	movlw	128
  5453  002018  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5454  00201A  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5455                           
  5456                           ;I2C.c: 58: I2C_Master_Write(0b00010011);
  5457  00201E  0E00               	movlw	0
  5458  002020  0100               	movlb	0	; () banked
  5459  002022  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5460  002024  0E13               	movlw	19
  5461  002026  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5462  002028  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5463                           
  5464                           ;I2C.c: 59: I2C_Master_Stop();
  5465  00202C  ECF6  F016         	call	_I2C_Master_Stop	;wreg free
  5466                           
  5467                           ;I2C.c: 60: I2C_Master_Start();
  5468  002030  ECFA  F016         	call	_I2C_Master_Start	;wreg free
  5469                           
  5470                           ;I2C.c: 61: I2C_Master_Write(0b01010010);
  5471  002034  0E00               	movlw	0
  5472  002036  0100               	movlb	0	; () banked
  5473  002038  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5474  00203A  0E52               	movlw	82
  5475  00203C  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5476  00203E  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5477                           
  5478                           ;I2C.c: 62: I2C_Master_Write(0b10001111);
  5479  002042  0E00               	movlw	0
  5480  002044  0100               	movlb	0	; () banked
  5481  002046  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5482  002048  0E8F               	movlw	143
  5483  00204A  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5484  00204C  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5485                           
  5486                           ;I2C.c: 63: I2C_Master_Write(0b00000010);
  5487  002050  0E00               	movlw	0
  5488  002052  0100               	movlb	0	; () banked
  5489  002054  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5490  002056  0E02               	movlw	2
  5491  002058  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5492  00205A  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5493                           
  5494                           ;I2C.c: 64: I2C_Master_Stop();
  5495  00205E  ECF6  F016         	call	_I2C_Master_Stop	;wreg free
  5496                           
  5497                           ;I2C.c: 65: I2C_Master_Start();
  5498  002062  ECFA  F016         	call	_I2C_Master_Start	;wreg free
  5499                           
  5500                           ;I2C.c: 66: I2C_Master_Write(0b01010010);
  5501  002066  0E00               	movlw	0
  5502  002068  0100               	movlb	0	; () banked
  5503  00206A  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5504  00206C  0E52               	movlw	82
  5505  00206E  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5506  002070  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5507                           
  5508                           ;I2C.c: 67: I2C_Master_Write(0b10100100);
  5509  002074  0E00               	movlw	0
  5510  002076  0100               	movlb	0	; () banked
  5511  002078  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5512  00207A  0EA4               	movlw	164
  5513  00207C  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5514  00207E  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5515                           
  5516                           ;I2C.c: 68: I2C_Master_Write(3000 & 0xFF);
  5517  002082  0E00               	movlw	0
  5518  002084  0100               	movlb	0	; () banked
  5519  002086  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5520  002088  0EB8               	movlw	184
  5521  00208A  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5522  00208C  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5523                           
  5524                           ;I2C.c: 69: I2C_Master_Write(3000 >> 8);
  5525  002090  0E00               	movlw	0
  5526  002092  0100               	movlb	0	; () banked
  5527  002094  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5528  002096  0E0B               	movlw	11
  5529  002098  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5530  00209A  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5531                           
  5532                           ;I2C.c: 70: I2C_Master_Write(2000 & 0xFF);
  5533  00209E  0E00               	movlw	0
  5534  0020A0  0100               	movlb	0	; () banked
  5535  0020A2  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5536  0020A4  0ED0               	movlw	208
  5537  0020A6  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5538  0020A8  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5539                           
  5540                           ;I2C.c: 71: I2C_Master_Write(2000 >> 8);
  5541  0020AC  0E00               	movlw	0
  5542  0020AE  0100               	movlb	0	; () banked
  5543  0020B0  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5544  0020B2  0E07               	movlw	7
  5545  0020B4  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5546  0020B6  ECE8  F016         	call	_I2C_Master_Write	;wreg free
  5547                           
  5548                           ;I2C.c: 72: I2C_Master_Stop();
  5549  0020BA  ECF6  F016         	call	_I2C_Master_Stop	;wreg free
  5550  0020BE  0012               	return		;funcret
  5551  0020C0                     __end_of_I2C_ColorSens_Init:
  5552                           	opt stack 0
  5553                           tblptru	equ	0xFF8
  5554                           tblptrh	equ	0xFF7
  5555                           tblptrl	equ	0xFF6
  5556                           tablat	equ	0xFF5
  5557                           prodh	equ	0xFF4
  5558                           prodl	equ	0xFF3
  5559                           intcon	equ	0xFF2
  5560                           intcon2	equ	0xFF1
  5561                           intcon3	equ	0xFF0
  5562                           postinc0	equ	0xFEE
  5563                           wreg	equ	0xFE8
  5564                           indf2	equ	0xFDF
  5565                           postinc2	equ	0xFDE
  5566                           postdec2	equ	0xFDD
  5567                           fsr2h	equ	0xFDA
  5568                           fsr2l	equ	0xFD9
  5569                           status	equ	0xFD8
  5570                           
  5571 ;; *************** function _I2C_Master_Write *****************
  5572 ;; Defined at:
  5573 ;;		line 48 in file "I2C.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  d               2   17[BANK0 ] unsigned int 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		wreg, status,2, status,0, cstack
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5587 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;Total ram usage:        2 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    8
  5594 ;; This function calls:
  5595 ;;		_I2C_Master_Wait
  5596 ;; This function is called by:
  5597 ;;		_I2C_ColorSens_Init
  5598 ;;		_date_time
  5599 ;;		_read_colorsensor
  5600 ;;		_set_time
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text23
  5605  002DD0                     __ptext23:
  5606                           	opt stack 0
  5607  002DD0                     _I2C_Master_Write:
  5608                           	opt stack 20
  5609                           
  5610                           ;I2C.c: 50: I2C_Master_Wait();
  5611                           
  5612                           ;incstack = 0
  5613  002DD0  ECB9  F016         	call	_I2C_Master_Wait	;wreg free
  5614                           
  5615                           ;I2C.c: 51: SSPBUF = d;
  5616  002DD4  C0D5  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5617  002DD8  0012               	return		;funcret
  5618  002DDA                     __end_of_I2C_Master_Write:
  5619                           	opt stack 0
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           intcon	equ	0xFF2
  5627                           intcon2	equ	0xFF1
  5628                           intcon3	equ	0xFF0
  5629                           postinc0	equ	0xFEE
  5630                           wreg	equ	0xFE8
  5631                           indf2	equ	0xFDF
  5632                           postinc2	equ	0xFDE
  5633                           postdec2	equ	0xFDD
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _I2C_Master_Stop *****************
  5639 ;; Defined at:
  5640 ;;		line 42 in file "I2C.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  1    wreg      void 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;Total ram usage:        0 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    8
  5661 ;; This function calls:
  5662 ;;		_I2C_Master_Wait
  5663 ;; This function is called by:
  5664 ;;		_I2C_ColorSens_Init
  5665 ;;		_date_time
  5666 ;;		_read_colorsensor
  5667 ;;		_set_time
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           	psect	text24
  5672  002DEC                     __ptext24:
  5673                           	opt stack 0
  5674  002DEC                     _I2C_Master_Stop:
  5675                           	opt stack 20
  5676                           
  5677                           ;I2C.c: 44: I2C_Master_Wait();
  5678                           
  5679                           ;incstack = 0
  5680  002DEC  ECB9  F016         	call	_I2C_Master_Wait	;wreg free
  5681                           
  5682                           ;I2C.c: 45: PEN = 1;
  5683  002DF0  84C5               	bsf	4037,2,c	;volatile
  5684  002DF2  0012               	return		;funcret
  5685  002DF4                     __end_of_I2C_Master_Stop:
  5686                           	opt stack 0
  5687                           tblptru	equ	0xFF8
  5688                           tblptrh	equ	0xFF7
  5689                           tblptrl	equ	0xFF6
  5690                           tablat	equ	0xFF5
  5691                           prodh	equ	0xFF4
  5692                           prodl	equ	0xFF3
  5693                           intcon	equ	0xFF2
  5694                           intcon2	equ	0xFF1
  5695                           intcon3	equ	0xFF0
  5696                           postinc0	equ	0xFEE
  5697                           wreg	equ	0xFE8
  5698                           indf2	equ	0xFDF
  5699                           postinc2	equ	0xFDE
  5700                           postdec2	equ	0xFDD
  5701                           fsr2h	equ	0xFDA
  5702                           fsr2l	equ	0xFD9
  5703                           status	equ	0xFD8
  5704                           
  5705 ;; *************** function _I2C_Master_Start *****************
  5706 ;; Defined at:
  5707 ;;		line 30 in file "I2C.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;		None
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;		None
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  1    wreg      void 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;Total ram usage:        0 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    8
  5728 ;; This function calls:
  5729 ;;		_I2C_Master_Wait
  5730 ;; This function is called by:
  5731 ;;		_I2C_ColorSens_Init
  5732 ;;		_date_time
  5733 ;;		_read_colorsensor
  5734 ;;		_set_time
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           	psect	text25
  5739  002DF4                     __ptext25:
  5740                           	opt stack 0
  5741  002DF4                     _I2C_Master_Start:
  5742                           	opt stack 20
  5743                           
  5744                           ;I2C.c: 32: I2C_Master_Wait();
  5745                           
  5746                           ;incstack = 0
  5747  002DF4  ECB9  F016         	call	_I2C_Master_Wait	;wreg free
  5748                           
  5749                           ;I2C.c: 33: SEN = 1;
  5750  002DF8  80C5               	bsf	4037,0,c	;volatile
  5751  002DFA  0012               	return		;funcret
  5752  002DFC                     __end_of_I2C_Master_Start:
  5753                           	opt stack 0
  5754                           tblptru	equ	0xFF8
  5755                           tblptrh	equ	0xFF7
  5756                           tblptrl	equ	0xFF6
  5757                           tablat	equ	0xFF5
  5758                           prodh	equ	0xFF4
  5759                           prodl	equ	0xFF3
  5760                           intcon	equ	0xFF2
  5761                           intcon2	equ	0xFF1
  5762                           intcon3	equ	0xFF0
  5763                           postinc0	equ	0xFEE
  5764                           wreg	equ	0xFE8
  5765                           indf2	equ	0xFDF
  5766                           postinc2	equ	0xFDE
  5767                           postdec2	equ	0xFDD
  5768                           fsr2h	equ	0xFDA
  5769                           fsr2l	equ	0xFD9
  5770                           status	equ	0xFD8
  5771                           
  5772 ;; *************** function _I2C_Master_Wait *****************
  5773 ;; Defined at:
  5774 ;;		line 25 in file "I2C.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;		None
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;		None
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  1    wreg      void 
  5781 ;; Registers used:
  5782 ;;		wreg, status,2, status,0
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;Total ram usage:        1 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    7
  5795 ;; This function calls:
  5796 ;;		Nothing
  5797 ;; This function is called by:
  5798 ;;		_I2C_Master_Start
  5799 ;;		_I2C_Master_Stop
  5800 ;;		_I2C_Master_Write
  5801 ;;		_I2C_Master_Read
  5802 ;;		_I2C_Master_RepeatedStart
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text26
  5807  002D72                     __ptext26:
  5808                           	opt stack 0
  5809  002D72                     _I2C_Master_Wait:
  5810                           	opt stack 20
  5811  002D72                     l34:
  5812  002D72  B4C7               	btfsc	4039,2,c	;volatile
  5813  002D74  D7FE               	goto	l34
  5814  002D76  CFC5 F0D4          	movff	4037,??_I2C_Master_Wait	;volatile
  5815  002D7A  0E1F               	movlw	31
  5816  002D7C  0100               	movlb	0	; () banked
  5817  002D7E  17D4               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5818  002D80  B4D8               	btfsc	status,2,c
  5819  002D82  0012               	return	
  5820  002D84  D7F6               	goto	l34
  5821  002D86                     __end_of_I2C_Master_Wait:
  5822                           	opt stack 0
  5823                           tblptru	equ	0xFF8
  5824                           tblptrh	equ	0xFF7
  5825                           tblptrl	equ	0xFF6
  5826                           tablat	equ	0xFF5
  5827                           prodh	equ	0xFF4
  5828                           prodl	equ	0xFF3
  5829                           intcon	equ	0xFF2
  5830                           intcon2	equ	0xFF1
  5831                           intcon3	equ	0xFF0
  5832                           postinc0	equ	0xFEE
  5833                           wreg	equ	0xFE8
  5834                           indf2	equ	0xFDF
  5835                           postinc2	equ	0xFDE
  5836                           postdec2	equ	0xFDD
  5837                           fsr2h	equ	0xFDA
  5838                           fsr2l	equ	0xFD9
  5839                           status	equ	0xFD8
  5840                           
  5841 ;; *************** function _isr *****************
  5842 ;; Defined at:
  5843 ;;		line 164 in file "main.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;		None
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  i               1  114[COMRAM] unsigned char 
  5848 ;; Return value:  Size  Location     Type
  5849 ;;                  1    wreg      void 
  5850 ;; Registers used:
  5851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5852 ;; Tracked objects:
  5853 ;;		On entry : 0/0
  5854 ;;		On exit  : 0/0
  5855 ;;		Unchanged: 0/0
  5856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;Total ram usage:       19 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    6
  5864 ;; This function calls:
  5865 ;;		_dec_to_hex
  5866 ;;		_read_time
  5867 ;;		_servo_rotate0
  5868 ;;		_servo_rotate1
  5869 ;;		_servo_rotate2
  5870 ;;		i2___wmul
  5871 ;;		i2_lcdInst
  5872 ;;		i2_printf
  5873 ;;		i2_read_colorsensor
  5874 ;; This function is called by:
  5875 ;;		Interrupt level 2
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           	psect	intcode
  5880  000008                     __pintcode:
  5881                           	opt stack 0
  5882  000008                     _isr:
  5883                           	opt stack 20
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;incstack = 0
  5887  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5888  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  5889                           tblptru	equ	0xFF8
  5890                           tblptrh	equ	0xFF7
  5891                           tblptrl	equ	0xFF6
  5892                           tablat	equ	0xFF5
  5893                           prodh	equ	0xFF4
  5894                           prodl	equ	0xFF3
  5895                           intcon	equ	0xFF2
  5896                           intcon2	equ	0xFF1
  5897                           intcon3	equ	0xFF0
  5898                           postinc0	equ	0xFEE
  5899                           wreg	equ	0xFE8
  5900                           indf2	equ	0xFDF
  5901                           postinc2	equ	0xFDE
  5902                           postdec2	equ	0xFDD
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907                           	psect	intcode_body
  5908  000012                     __pintcode_body:
  5909                           	opt stack 20
  5910  000012                     int_func:
  5911                           	opt stack 20
  5912  000012  0006               	pop		; remove dummy address from shadow register refresh
  5913  000014  CFFA F0C6          	movff	pclath,??_isr+2
  5914  000018  CFFB F0C7          	movff	pclatu,??_isr+3
  5915  00001C  CFE9 F0C8          	movff	fsr0l,??_isr+4
  5916  000020  CFEA F0C9          	movff	fsr0h,??_isr+5
  5917  000024  CFE1 F0CA          	movff	fsr1l,??_isr+6
  5918  000028  CFE2 F0CB          	movff	fsr1h,??_isr+7
  5919  00002C  CFD9 F0CC          	movff	fsr2l,??_isr+8
  5920  000030  CFDA F0CD          	movff	fsr2h,??_isr+9
  5921  000034  CFF3 F0CE          	movff	prodl,??_isr+10
  5922  000038  CFF4 F0CF          	movff	prodh,??_isr+11
  5923  00003C  CFF6 F0D0          	movff	tblptrl,??_isr+12
  5924  000040  CFF7 F0D1          	movff	tblptrh,??_isr+13
  5925  000044  CFF8 F0D2          	movff	tblptru,??_isr+14
  5926  000048  CFF5 F0D3          	movff	tablat,??_isr+15
  5927                           
  5928                           ;main.c: 165: if (INT1IF) {
  5929  00004C  B0F0               	btfsc	intcon3,0,c	;volatile
  5930  00004E  D0E9               	goto	i2l4559
  5931  000050  D109               	goto	i2l269
  5932  000052                     i2l271:
  5933                           
  5934                           ;main.c: 168: bottle_count_disp = -1;
  5935  000052  0100               	movlb	0	; () banked
  5936  000054  69EE               	setf	_bottle_count_disp& (0+255),b
  5937  000056  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;main.c: 169: curr_state = STANDBY;
  5941  000058  0E00               	movlw	0
  5942  00005A  D0D2               	goto	L7
  5943  00005C                     i2l273:
  5944                           
  5945                           ;main.c: 172: LATAbits.LATA2 = 1;
  5946  00005C  8489               	bsf	3977,2,c	;volatile
  5947                           
  5948                           ;main.c: 173: INT0IE = 1;
  5949  00005E  88F2               	bsf	intcon,4,c	;volatile
  5950                           
  5951                           ;main.c: 174: INT2IE = 1;
  5952  000060  88F0               	bsf	intcon3,4,c	;volatile
  5953                           
  5954                           ;main.c: 175: TMR0IE = 1;
  5955  000062  8AF2               	bsf	intcon,5,c	;volatile
  5956                           
  5957                           ;main.c: 176: TMR0ON = 1;
  5958  000064  8ED5               	bsf	4053,7,c	;volatile
  5959                           
  5960                           ;main.c: 177: TMR0 = 0;
  5961  000066  0E00               	movlw	0
  5962  000068  6ED7               	movwf	4055,c	;volatile
  5963  00006A  0E00               	movlw	0
  5964  00006C  6ED6               	movwf	4054,c	;volatile
  5965                           
  5966                           ;main.c: 179: read_time();
  5967  00006E  EC0C  F014         	call	_read_time	;wreg free
  5968                           
  5969                           ;main.c: 180: start_time[1] = time[1];
  5970  000072  C09F  F07B         	movff	_time+1,_start_time+1
  5971                           
  5972                           ;main.c: 181: start_time[0] = time[0];
  5973  000076  C09E  F07A         	movff	_time,_start_time
  5974                           
  5975                           ;main.c: 183: bottlequeue_head = bottlequeue_tail = 0;
  5976  00007A  0E00               	movlw	0
  5977  00007C  6E77               	movwf	_bottlequeue_tail+1,c
  5978  00007E  0E00               	movlw	0
  5979  000080  6E76               	movwf	_bottlequeue_tail,c
  5980  000082  C076  F0A5         	movff	_bottlequeue_tail,_bottlequeue_head
  5981  000086  C077  F0A6         	movff	_bottlequeue_tail+1,_bottlequeue_head+1
  5982                           
  5983                           ;main.c: 185: lcdInst(0b00000001);
  5984  00008A  0E01               	movlw	1
  5985  00008C  ECE2  F016         	call	i2_lcdInst
  5986                           
  5987                           ;main.c: 186: bottle_count_disp = -1;
  5988  000090  0100               	movlb	0	; () banked
  5989  000092  69EE               	setf	_bottle_count_disp& (0+255),b
  5990  000094  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;main.c: 187: curr_state = OPERATION;
  5994  000096  0E02               	movlw	2
  5995  000098  D0B3               	goto	L7
  5996  00009A                     i2l4505:
  5997                           
  5998                           ;main.c: 190: bottle_count_disp += 1;
  5999  00009A  0100               	movlb	0	; () banked
  6000  00009C  4BEE               	infsnz	_bottle_count_disp& (0+255),f,b
  6001  00009E  2BEF               	incf	(_bottle_count_disp+1)& (0+255),f,b
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;main.c: 191: curr_state = BOTTLECOUNT;
  6005  0000A0  0E05               	movlw	5
  6006  0000A2  0100               	movlb	0	; () banked
  6007  0000A4  6FC3               	movwf	_curr_state& (0+255),b
  6008  0000A6                     i2l4509:
  6009  0000A6  0E1F               	movlw	31
  6010  0000A8  1881               	xorwf	3969,w,c	;volatile
  6011  0000AA  A4D8               	btfss	status,2,c
  6012  0000AC  D0D9               	goto	i2l272
  6013  0000AE  D7FB               	goto	i2l4509
  6014  0000B0                     i2l4511:
  6015                           
  6016                           ;main.c: 195: operation_time = etime - stime;
  6017  0000B0  C07C  F0C4         	movff	_stime,??_isr
  6018  0000B4  C07D  F0C5         	movff	_stime+1,??_isr+1
  6019  0000B8  0100               	movlb	0	; () banked
  6020  0000BA  1FC4               	comf	??_isr& (0+255),f,b
  6021  0000BC  1FC5               	comf	(??_isr+1)& (0+255),f,b
  6022  0000BE  4BC4               	infsnz	??_isr& (0+255),f,b
  6023  0000C0  2BC5               	incf	(??_isr+1)& (0+255),f,b
  6024  0000C2  0100               	movlb	0	; () banked
  6025  0000C4  51B1               	movf	_etime& (0+255),w,b
  6026  0000C6  0100               	movlb	0	; () banked
  6027  0000C8  25C4               	addwf	??_isr& (0+255),w,b
  6028  0000CA  0100               	movlb	0	; () banked
  6029  0000CC  6FB7               	movwf	_operation_time& (0+255),b
  6030  0000CE  0100               	movlb	0	; () banked
  6031  0000D0  51B2               	movf	(_etime+1)& (0+255),w,b
  6032  0000D2  0100               	movlb	0	; () banked
  6033  0000D4  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6034  0000D6  0100               	movlb	0	; () banked
  6035  0000D8  6FB8               	movwf	(_operation_time+1)& (0+255),b
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;main.c: 196: bottle_count_disp = -1;
  6039  0000DA  0100               	movlb	0	; () banked
  6040  0000DC  69EE               	setf	_bottle_count_disp& (0+255),b
  6041  0000DE  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;main.c: 197: curr_state = BOTTLETIME;
  6045  0000E0  0E06               	movlw	6
  6046  0000E2  D08E               	goto	L7
  6047  0000E4                     i2l279:
  6048                           
  6049                           ;main.c: 200: bottle_count_disp = -1;
  6050  0000E4  0100               	movlb	0	; () banked
  6051  0000E6  69EE               	setf	_bottle_count_disp& (0+255),b
  6052  0000E8  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;main.c: 201: curr_state = DATETIME;
  6056  0000EA  0E04               	movlw	4
  6057  0000EC  D089               	goto	L7
  6058  0000EE                     i2l280:
  6059                           
  6060                           ;main.c: 204: LATAbits.LATA2 = 0;
  6061  0000EE  9489               	bcf	3977,2,c	;volatile
  6062                           
  6063                           ;main.c: 205: INT0IE = 0;
  6064  0000F0  98F2               	bcf	intcon,4,c	;volatile
  6065                           
  6066                           ;main.c: 206: INT2IE = 0;
  6067  0000F2  98F0               	bcf	intcon3,4,c	;volatile
  6068                           
  6069                           ;main.c: 207: TMR0IE = 0;
  6070  0000F4  9AF2               	bcf	intcon,5,c	;volatile
  6071                           
  6072                           ;main.c: 208: TMR0ON = 0;
  6073  0000F6  9ED5               	bcf	4053,7,c	;volatile
  6074                           
  6075                           ;main.c: 210: read_time();
  6076  0000F8  EC0C  F014         	call	_read_time	;wreg free
  6077                           
  6078                           ;main.c: 211: end_time[1] = time[1];
  6079  0000FC  C09F  F079         	movff	_time+1,_end_time+1
  6080                           
  6081                           ;main.c: 212: end_time[0] = time[0];
  6082  000100  C09E  F078         	movff	_time,_end_time
  6083                           
  6084                           ;main.c: 213: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6085  000104  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  6086  000108  6A64               	clrf	dec_to_hex@num+1,c
  6087  00010A  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6088  00010E  C063  F074         	movff	?_dec_to_hex,_isr$1352
  6089  000112  C064  F075         	movff	?_dec_to_hex+1,_isr$1352+1
  6090                           
  6091                           ;main.c: 213: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6092  000116  C074  F001         	movff	_isr$1352,i2___wmul@multiplier
  6093  00011A  C075  F002         	movff	_isr$1352+1,i2___wmul@multiplier+1
  6094  00011E  0E00               	movlw	0
  6095  000120  6E04               	movwf	i2___wmul@multiplicand+1,c
  6096  000122  0E3C               	movlw	60
  6097  000124  6E03               	movwf	i2___wmul@multiplicand,c
  6098  000126  EC68  F016         	call	i2___wmul	;wreg free
  6099  00012A  C001  F0C4         	movff	?i2___wmul,??_isr
  6100  00012E  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6101  000132  C07A  F063         	movff	_start_time,dec_to_hex@num
  6102  000136  6A64               	clrf	dec_to_hex@num+1,c
  6103  000138  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6104  00013C  5063               	movf	?_dec_to_hex,w,c
  6105  00013E  0100               	movlb	0	; () banked
  6106  000140  25C4               	addwf	??_isr& (0+255),w,b
  6107  000142  6E7C               	movwf	_stime,c
  6108  000144  5064               	movf	?_dec_to_hex+1,w,c
  6109  000146  0100               	movlb	0	; () banked
  6110  000148  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6111  00014A  6E7D               	movwf	_stime+1,c
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;main.c: 214: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6115  00014C  C079  F063         	movff	_end_time+1,dec_to_hex@num
  6116  000150  6A64               	clrf	dec_to_hex@num+1,c
  6117  000152  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6118  000156  C063  F074         	movff	?_dec_to_hex,_isr$1352
  6119  00015A  C064  F075         	movff	?_dec_to_hex+1,_isr$1352+1
  6120                           
  6121                           ;main.c: 214: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6122  00015E  C074  F001         	movff	_isr$1352,i2___wmul@multiplier
  6123  000162  C075  F002         	movff	_isr$1352+1,i2___wmul@multiplier+1
  6124  000166  0E00               	movlw	0
  6125  000168  6E04               	movwf	i2___wmul@multiplicand+1,c
  6126  00016A  0E3C               	movlw	60
  6127  00016C  6E03               	movwf	i2___wmul@multiplicand,c
  6128  00016E  EC68  F016         	call	i2___wmul	;wreg free
  6129  000172  C001  F0C4         	movff	?i2___wmul,??_isr
  6130  000176  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6131  00017A  C078  F063         	movff	_end_time,dec_to_hex@num
  6132  00017E  6A64               	clrf	dec_to_hex@num+1,c
  6133  000180  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6134  000184  5063               	movf	?_dec_to_hex,w,c
  6135  000186  0100               	movlb	0	; () banked
  6136  000188  25C4               	addwf	??_isr& (0+255),w,b
  6137  00018A  0100               	movlb	0	; () banked
  6138  00018C  6FB1               	movwf	_etime& (0+255),b
  6139  00018E  5064               	movf	?_dec_to_hex+1,w,c
  6140  000190  0100               	movlb	0	; () banked
  6141  000192  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6142  000194  0100               	movlb	0	; () banked
  6143  000196  6FB2               	movwf	(_etime+1)& (0+255),b
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;main.c: 215: lcdInst(0b00000001);
  6147  000198  0E01               	movlw	1
  6148  00019A  ECE2  F016         	call	i2_lcdInst
  6149                           
  6150                           ;main.c: 216: bottle_count_disp = -1;
  6151  00019E  0100               	movlb	0	; () banked
  6152  0001A0  69EE               	setf	_bottle_count_disp& (0+255),b
  6153  0001A2  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;main.c: 217: curr_state = OPERATIONEND;
  6157  0001A4  0E03               	movlw	3
  6158  0001A6  D02C               	goto	L7
  6159  0001A8                     i2l4539:
  6160                           
  6161                           ;main.c: 220: read_colorsensor();
  6162  0001A8  ECFE  F00C         	call	i2_read_colorsensor	;wreg free
  6163                           
  6164                           ;main.c: 221: lcdInst(0b10000000);
  6165  0001AC  0E80               	movlw	128
  6166  0001AE  ECE2  F016         	call	i2_lcdInst
  6167                           
  6168                           ;main.c: 222: printf("C%u R%u                ", color[0], color[1]);
  6169  0001B2  0E67               	movlw	low STR_1
  6170  0001B4  6E0D               	movwf	i2printf@f,c
  6171  0001B6  0EFE               	movlw	high STR_1
  6172  0001B8  6E0E               	movwf	i2printf@f+1,c
  6173  0001BA  C096  F00F         	movff	_color,?i2_printf+2
  6174  0001BE  C097  F010         	movff	_color+1,?i2_printf+3
  6175  0001C2  C098  F011         	movff	_color+2,?i2_printf+4
  6176  0001C6  C099  F012         	movff	_color+3,?i2_printf+5
  6177  0001CA  EC82  F005         	call	i2_printf	;wreg free
  6178                           
  6179                           ;main.c: 223: lcdInst(0b11000000);
  6180  0001CE  0EC0               	movlw	192
  6181  0001D0  ECE2  F016         	call	i2_lcdInst
  6182                           
  6183                           ;main.c: 224: printf("G%u B%u                ", color[2], color[3]);
  6184  0001D4  0E4F               	movlw	low STR_2
  6185  0001D6  6E0D               	movwf	i2printf@f,c
  6186  0001D8  0EFE               	movlw	high STR_2
  6187  0001DA  6E0E               	movwf	i2printf@f+1,c
  6188  0001DC  C09A  F00F         	movff	_color+4,?i2_printf+2
  6189  0001E0  C09B  F010         	movff	_color+5,?i2_printf+3
  6190  0001E4  C09C  F011         	movff	_color+6,?i2_printf+4
  6191  0001E8  C09D  F012         	movff	_color+7,?i2_printf+5
  6192  0001EC  EC82  F005         	call	i2_printf	;wreg free
  6193                           
  6194                           ;main.c: 225: break;
  6195  0001F0  D037               	goto	i2l272
  6196  0001F2                     i2l282:
  6197                           
  6198                           ;main.c: 227: LATAbits.LATA2 = 0;
  6199  0001F2  9489               	bcf	3977,2,c	;volatile
  6200                           
  6201                           ;main.c: 228: (INTCONbits.GIE = 0);
  6202  0001F4  9EF2               	bcf	intcon,7,c	;volatile
  6203                           
  6204                           ;main.c: 229: TMR0ON = 0;
  6205  0001F6  9ED5               	bcf	4053,7,c	;volatile
  6206                           
  6207                           ;main.c: 230: lcdInst(0b00000001);
  6208  0001F8  0E01               	movlw	1
  6209  0001FA  ECE2  F016         	call	i2_lcdInst
  6210                           
  6211                           ;main.c: 231: curr_state = EMERGENCYSTOP;
  6212  0001FE  0E01               	movlw	1
  6213  000200                     L7:
  6214  000200  0100               	movlb	0	; () banked
  6215  000202  6FC3               	movwf	_curr_state& (0+255),b
  6216                           
  6217                           ;main.c: 232: break;
  6218  000204  D02D               	goto	i2l272
  6219  000206                     i2l4553:
  6220                           
  6221                           ;main.c: 234: servo_rotate0(1);
  6222  000206  0E00               	movlw	0
  6223  000208  6E02               	movwf	servo_rotate0@degree+1,c
  6224  00020A  0E01               	movlw	1
  6225  00020C  6E01               	movwf	servo_rotate0@degree,c
  6226  00020E  EC7A  F012         	call	_servo_rotate0	;wreg free
  6227                           
  6228                           ;main.c: 235: break;
  6229  000212  D026               	goto	i2l272
  6230  000214                     i2l4555:
  6231                           
  6232                           ;main.c: 237: servo_rotate0(2);
  6233  000214  0E00               	movlw	0
  6234  000216  6E02               	movwf	servo_rotate0@degree+1,c
  6235  000218  0E02               	movlw	2
  6236  00021A  6E01               	movwf	servo_rotate0@degree,c
  6237  00021C  EC7A  F012         	call	_servo_rotate0	;wreg free
  6238                           
  6239                           ;main.c: 239: }
  6240                           
  6241                           ;main.c: 238: break;
  6242  000220  D01F               	goto	i2l272
  6243  000222                     i2l4559:
  6244  000222  5081               	movf	3969,w,c	;volatile
  6245                           
  6246                           ; Switch size 1, requested type "space"
  6247                           ; Number of cases is 10, Range of values is 15 to 239
  6248                           ; switch strategies available:
  6249                           ; Name         Instructions Cycles
  6250                           ; simple_byte           31    16 (average)
  6251                           ;	Chosen strategy is simple_byte
  6252  000224  0A0F               	xorlw	15	; case 15
  6253  000226  B4D8               	btfsc	status,2,c
  6254  000228  D719               	goto	i2l273
  6255  00022A  0A10               	xorlw	16	; case 31
  6256  00022C  B4D8               	btfsc	status,2,c
  6257  00022E  D735               	goto	i2l4505
  6258  000230  0A30               	xorlw	48	; case 47
  6259  000232  B4D8               	btfsc	status,2,c
  6260  000234  D73D               	goto	i2l4511
  6261  000236  0A10               	xorlw	16	; case 63
  6262  000238  B4D8               	btfsc	status,2,c
  6263  00023A  D754               	goto	i2l279
  6264  00023C  0A70               	xorlw	112	; case 79
  6265  00023E  B4D8               	btfsc	status,2,c
  6266  000240  D756               	goto	i2l280
  6267  000242  0A10               	xorlw	16	; case 95
  6268  000244  B4D8               	btfsc	status,2,c
  6269  000246  D7B0               	goto	i2l4539
  6270  000248  0A20               	xorlw	32	; case 127
  6271  00024A  B4D8               	btfsc	status,2,c
  6272  00024C  D7DC               	goto	i2l4553
  6273  00024E  0AC0               	xorlw	192	; case 191
  6274  000250  B4D8               	btfsc	status,2,c
  6275  000252  D7E0               	goto	i2l4555
  6276  000254  0A70               	xorlw	112	; case 207
  6277  000256  B4D8               	btfsc	status,2,c
  6278  000258  D7CC               	goto	i2l282
  6279  00025A  0A20               	xorlw	32	; case 239
  6280  00025C  B4D8               	btfsc	status,2,c
  6281  00025E  D6F9               	goto	i2l271
  6282  000260                     i2l272:
  6283                           
  6284                           ;main.c: 240: INT1IF = 0;
  6285  000260  90F0               	bcf	intcon3,0,c	;volatile
  6286                           
  6287                           ;main.c: 241: }
  6288  000262  D247               	goto	i2l317
  6289  000264                     i2l269:
  6290                           
  6291                           ;main.c: 242: else if (INT0IF){
  6292  000264  A2F2               	btfss	intcon,1,c	;volatile
  6293  000266  D10D               	goto	i2l286
  6294                           
  6295                           ;main.c: 243: if(PORTAbits.RA3){
  6296  000268  A680               	btfss	3968,3,c	;volatile
  6297  00026A  D109               	goto	i2l4615
  6298                           
  6299                           ;main.c: 244: read_colorsensor();
  6300  00026C  ECFE  F00C         	call	i2_read_colorsensor	;wreg free
  6301                           
  6302                           ;main.c: 245: if (color[0]>10000 && color[1]>10000 && color[2]>10000 && color[3]>10000) 
      +                          bottlequeue[bottlequeue_tail] = 2;
  6303  000270  0100               	movlb	0	; () banked
  6304  000272  BF97               	btfsc	(_color+1)& (0+255),7,b
  6305  000274  D034               	goto	i2l4575
  6306  000276  0E11               	movlw	17
  6307  000278  0100               	movlb	0	; () banked
  6308  00027A  5D96               	subwf	_color& (0+255),w,b
  6309  00027C  0E27               	movlw	39
  6310  00027E  0100               	movlb	0	; () banked
  6311  000280  5997               	subwfb	(_color+1)& (0+255),w,b
  6312  000282  A0D8               	btfss	status,0,c
  6313  000284  D02C               	goto	i2l4575
  6314                           
  6315                           ; BSR set to: 0
  6316  000286  0100               	movlb	0	; () banked
  6317  000288  BF99               	btfsc	(_color+3)& (0+255),7,b
  6318  00028A  D029               	goto	i2l4575
  6319  00028C  0E11               	movlw	17
  6320  00028E  0100               	movlb	0	; () banked
  6321  000290  5D98               	subwf	(_color+2)& (0+255),w,b
  6322  000292  0E27               	movlw	39
  6323  000294  0100               	movlb	0	; () banked
  6324  000296  5999               	subwfb	(_color+3)& (0+255),w,b
  6325  000298  A0D8               	btfss	status,0,c
  6326  00029A  D021               	goto	i2l4575
  6327                           
  6328                           ; BSR set to: 0
  6329  00029C  0100               	movlb	0	; () banked
  6330  00029E  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6331  0002A0  D01E               	goto	i2l4575
  6332  0002A2  0E11               	movlw	17
  6333  0002A4  0100               	movlb	0	; () banked
  6334  0002A6  5D9A               	subwf	(_color+4)& (0+255),w,b
  6335  0002A8  0E27               	movlw	39
  6336  0002AA  0100               	movlb	0	; () banked
  6337  0002AC  599B               	subwfb	(_color+5)& (0+255),w,b
  6338  0002AE  A0D8               	btfss	status,0,c
  6339  0002B0  D016               	goto	i2l4575
  6340                           
  6341                           ; BSR set to: 0
  6342  0002B2  0100               	movlb	0	; () banked
  6343  0002B4  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6344  0002B6  D013               	goto	i2l4575
  6345  0002B8  0E11               	movlw	17
  6346  0002BA  0100               	movlb	0	; () banked
  6347  0002BC  5D9C               	subwf	(_color+6)& (0+255),w,b
  6348  0002BE  0E27               	movlw	39
  6349  0002C0  0100               	movlb	0	; () banked
  6350  0002C2  599D               	subwfb	(_color+7)& (0+255),w,b
  6351  0002C4  A0D8               	btfss	status,0,c
  6352  0002C6  D00B               	goto	i2l4575
  6353                           
  6354                           ; BSR set to: 0
  6355  0002C8  90D8               	bcf	status,0,c
  6356  0002CA  3476               	rlcf	_bottlequeue_tail,w,c
  6357  0002CC  6ED9               	movwf	fsr2l,c
  6358  0002CE  3477               	rlcf	_bottlequeue_tail+1,w,c
  6359  0002D0  6EDA               	movwf	fsr2h,c
  6360  0002D2  0E80               	movlw	low _bottlequeue
  6361  0002D4  26D9               	addwf	fsr2l,f,c
  6362  0002D6  0E00               	movlw	high _bottlequeue
  6363  0002D8  22DA               	addwfc	fsr2h,f,c
  6364  0002DA  0E02               	movlw	2
  6365  0002DC  D0A4               	goto	L10
  6366  0002DE                     i2l4575:
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;main.c: 246: else if (color[0]<3000 && color[1]<1100 && color[2]<1100 && color[3]<1200)
      +                           bottlequeue[bottlequeue_tail] = 4;
  6370  0002DE  0100               	movlb	0	; () banked
  6371  0002E0  BF97               	btfsc	(_color+1)& (0+255),7,b
  6372  0002E2  D008               	goto	i2l4577
  6373  0002E4  0EB8               	movlw	184
  6374  0002E6  0100               	movlb	0	; () banked
  6375  0002E8  5D96               	subwf	_color& (0+255),w,b
  6376  0002EA  0E0B               	movlw	11
  6377  0002EC  0100               	movlb	0	; () banked
  6378  0002EE  5997               	subwfb	(_color+1)& (0+255),w,b
  6379  0002F0  B0D8               	btfsc	status,0,c
  6380  0002F2  D02C               	goto	i2l4585
  6381  0002F4                     i2l4577:
  6382                           
  6383                           ; BSR set to: 0
  6384  0002F4  0100               	movlb	0	; () banked
  6385  0002F6  BF99               	btfsc	(_color+3)& (0+255),7,b
  6386  0002F8  D008               	goto	i2l4579
  6387  0002FA  0E4C               	movlw	76
  6388  0002FC  0100               	movlb	0	; () banked
  6389  0002FE  5D98               	subwf	(_color+2)& (0+255),w,b
  6390  000300  0E04               	movlw	4
  6391  000302  0100               	movlb	0	; () banked
  6392  000304  5999               	subwfb	(_color+3)& (0+255),w,b
  6393  000306  B0D8               	btfsc	status,0,c
  6394  000308  D021               	goto	i2l4585
  6395  00030A                     i2l4579:
  6396                           
  6397                           ; BSR set to: 0
  6398  00030A  0100               	movlb	0	; () banked
  6399  00030C  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6400  00030E  D008               	goto	i2l4581
  6401  000310  0E4C               	movlw	76
  6402  000312  0100               	movlb	0	; () banked
  6403  000314  5D9A               	subwf	(_color+4)& (0+255),w,b
  6404  000316  0E04               	movlw	4
  6405  000318  0100               	movlb	0	; () banked
  6406  00031A  599B               	subwfb	(_color+5)& (0+255),w,b
  6407  00031C  B0D8               	btfsc	status,0,c
  6408  00031E  D016               	goto	i2l4585
  6409  000320                     i2l4581:
  6410                           
  6411                           ; BSR set to: 0
  6412  000320  0100               	movlb	0	; () banked
  6413  000322  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6414  000324  D008               	goto	i2l4583
  6415  000326  0EB0               	movlw	176
  6416  000328  0100               	movlb	0	; () banked
  6417  00032A  5D9C               	subwf	(_color+6)& (0+255),w,b
  6418  00032C  0E04               	movlw	4
  6419  00032E  0100               	movlb	0	; () banked
  6420  000330  599D               	subwfb	(_color+7)& (0+255),w,b
  6421  000332  B0D8               	btfsc	status,0,c
  6422  000334  D00B               	goto	i2l4585
  6423  000336                     i2l4583:
  6424                           
  6425                           ; BSR set to: 0
  6426  000336  90D8               	bcf	status,0,c
  6427  000338  3476               	rlcf	_bottlequeue_tail,w,c
  6428  00033A  6ED9               	movwf	fsr2l,c
  6429  00033C  3477               	rlcf	_bottlequeue_tail+1,w,c
  6430  00033E  6EDA               	movwf	fsr2h,c
  6431  000340  0E80               	movlw	low _bottlequeue
  6432  000342  26D9               	addwf	fsr2l,f,c
  6433  000344  0E00               	movlw	high _bottlequeue
  6434  000346  22DA               	addwfc	fsr2h,f,c
  6435  000348  0E04               	movlw	4
  6436  00034A  D06D               	goto	L10
  6437  00034C                     i2l4585:
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;main.c: 247: else if (color[0]<5200 && color[1]<3200 && color[3]<1400 && color[3]<1300)
      +                           bottlequeue[bottlequeue_tail] = 0;
  6441  00034C  0100               	movlb	0	; () banked
  6442  00034E  BF97               	btfsc	(_color+1)& (0+255),7,b
  6443  000350  D008               	goto	i2l4587
  6444  000352  0E50               	movlw	80
  6445  000354  0100               	movlb	0	; () banked
  6446  000356  5D96               	subwf	_color& (0+255),w,b
  6447  000358  0E14               	movlw	20
  6448  00035A  0100               	movlb	0	; () banked
  6449  00035C  5997               	subwfb	(_color+1)& (0+255),w,b
  6450  00035E  B0D8               	btfsc	status,0,c
  6451  000360  D02C               	goto	i2l4595
  6452  000362                     i2l4587:
  6453                           
  6454                           ; BSR set to: 0
  6455  000362  0100               	movlb	0	; () banked
  6456  000364  BF99               	btfsc	(_color+3)& (0+255),7,b
  6457  000366  D008               	goto	i2l4589
  6458  000368  0E80               	movlw	128
  6459  00036A  0100               	movlb	0	; () banked
  6460  00036C  5D98               	subwf	(_color+2)& (0+255),w,b
  6461  00036E  0E0C               	movlw	12
  6462  000370  0100               	movlb	0	; () banked
  6463  000372  5999               	subwfb	(_color+3)& (0+255),w,b
  6464  000374  B0D8               	btfsc	status,0,c
  6465  000376  D021               	goto	i2l4595
  6466  000378                     i2l4589:
  6467                           
  6468                           ; BSR set to: 0
  6469  000378  0100               	movlb	0	; () banked
  6470  00037A  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6471  00037C  D008               	goto	i2l4591
  6472  00037E  0E78               	movlw	120
  6473  000380  0100               	movlb	0	; () banked
  6474  000382  5D9C               	subwf	(_color+6)& (0+255),w,b
  6475  000384  0E05               	movlw	5
  6476  000386  0100               	movlb	0	; () banked
  6477  000388  599D               	subwfb	(_color+7)& (0+255),w,b
  6478  00038A  B0D8               	btfsc	status,0,c
  6479  00038C  D016               	goto	i2l4595
  6480  00038E                     i2l4591:
  6481                           
  6482                           ; BSR set to: 0
  6483  00038E  0100               	movlb	0	; () banked
  6484  000390  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6485  000392  D008               	goto	i2l4593
  6486  000394  0E14               	movlw	20
  6487  000396  0100               	movlb	0	; () banked
  6488  000398  5D9C               	subwf	(_color+6)& (0+255),w,b
  6489  00039A  0E05               	movlw	5
  6490  00039C  0100               	movlb	0	; () banked
  6491  00039E  599D               	subwfb	(_color+7)& (0+255),w,b
  6492  0003A0  B0D8               	btfsc	status,0,c
  6493  0003A2  D00B               	goto	i2l4595
  6494  0003A4                     i2l4593:
  6495                           
  6496                           ; BSR set to: 0
  6497  0003A4  90D8               	bcf	status,0,c
  6498  0003A6  3476               	rlcf	_bottlequeue_tail,w,c
  6499  0003A8  6ED9               	movwf	fsr2l,c
  6500  0003AA  3477               	rlcf	_bottlequeue_tail+1,w,c
  6501  0003AC  6EDA               	movwf	fsr2h,c
  6502  0003AE  0E80               	movlw	low _bottlequeue
  6503  0003B0  26D9               	addwf	fsr2l,f,c
  6504  0003B2  0E00               	movlw	high _bottlequeue
  6505  0003B4  22DA               	addwfc	fsr2h,f,c
  6506  0003B6  0E00               	movlw	0
  6507  0003B8  D036               	goto	L10
  6508  0003BA                     i2l4595:
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;main.c: 248: else if (color[0]>10000 && color[1]>3600 && color[2]>3900 && color[3]>3400
      +                          ) bottlequeue[bottlequeue_tail] = 6;
  6512  0003BA  0100               	movlb	0	; () banked
  6513  0003BC  BF97               	btfsc	(_color+1)& (0+255),7,b
  6514  0003BE  D036               	goto	i2l4605
  6515  0003C0  0E11               	movlw	17
  6516  0003C2  0100               	movlb	0	; () banked
  6517  0003C4  5D96               	subwf	_color& (0+255),w,b
  6518  0003C6  0E27               	movlw	39
  6519  0003C8  0100               	movlb	0	; () banked
  6520  0003CA  5997               	subwfb	(_color+1)& (0+255),w,b
  6521  0003CC  A0D8               	btfss	status,0,c
  6522  0003CE  D02E               	goto	i2l4605
  6523                           
  6524                           ; BSR set to: 0
  6525  0003D0  0100               	movlb	0	; () banked
  6526  0003D2  BF99               	btfsc	(_color+3)& (0+255),7,b
  6527  0003D4  D02B               	goto	i2l4605
  6528  0003D6  0E11               	movlw	17
  6529  0003D8  0100               	movlb	0	; () banked
  6530  0003DA  5D98               	subwf	(_color+2)& (0+255),w,b
  6531  0003DC  0E0E               	movlw	14
  6532  0003DE  0100               	movlb	0	; () banked
  6533  0003E0  5999               	subwfb	(_color+3)& (0+255),w,b
  6534  0003E2  A0D8               	btfss	status,0,c
  6535  0003E4  D023               	goto	i2l4605
  6536                           
  6537                           ; BSR set to: 0
  6538  0003E6  0100               	movlb	0	; () banked
  6539  0003E8  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6540  0003EA  D020               	goto	i2l4605
  6541  0003EC  0E3D               	movlw	61
  6542  0003EE  0100               	movlb	0	; () banked
  6543  0003F0  5D9A               	subwf	(_color+4)& (0+255),w,b
  6544  0003F2  0E0F               	movlw	15
  6545  0003F4  0100               	movlb	0	; () banked
  6546  0003F6  599B               	subwfb	(_color+5)& (0+255),w,b
  6547  0003F8  A0D8               	btfss	status,0,c
  6548  0003FA  D018               	goto	i2l4605
  6549                           
  6550                           ; BSR set to: 0
  6551  0003FC  0100               	movlb	0	; () banked
  6552  0003FE  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6553  000400  D015               	goto	i2l4605
  6554  000402  0E49               	movlw	73
  6555  000404  0100               	movlb	0	; () banked
  6556  000406  5D9C               	subwf	(_color+6)& (0+255),w,b
  6557  000408  0E0D               	movlw	13
  6558  00040A  0100               	movlb	0	; () banked
  6559  00040C  599D               	subwfb	(_color+7)& (0+255),w,b
  6560  00040E  A0D8               	btfss	status,0,c
  6561  000410  D00D               	goto	i2l4605
  6562                           
  6563                           ; BSR set to: 0
  6564  000412  90D8               	bcf	status,0,c
  6565  000414  3476               	rlcf	_bottlequeue_tail,w,c
  6566  000416  6ED9               	movwf	fsr2l,c
  6567  000418  3477               	rlcf	_bottlequeue_tail+1,w,c
  6568  00041A  6EDA               	movwf	fsr2h,c
  6569  00041C  0E80               	movlw	low _bottlequeue
  6570  00041E  26D9               	addwf	fsr2l,f,c
  6571  000420  0E00               	movlw	high _bottlequeue
  6572  000422  22DA               	addwfc	fsr2h,f,c
  6573  000424  0E06               	movlw	6
  6574  000426                     L10:
  6575  000426  6EDE               	movwf	postinc2,c
  6576  000428  0E00               	movlw	0
  6577  00042A  6EDD               	movwf	postdec2,c
  6578  00042C                     i2l4605:
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;main.c: 249: _delay((unsigned long)((150)*(10000000/4000.0)));
  6582  00042C  0E02               	movlw	2
  6583  00042E  0100               	movlb	0	; () banked
  6584  000430  6FC5               	movwf	(??_isr+1)& (0+255),b
  6585  000432  0EE7               	movlw	231
  6586  000434  0100               	movlb	0	; () banked
  6587  000436  6FC4               	movwf	??_isr& (0+255),b
  6588  000438  0E00               	movlw	0
  6589  00043A                     i2u490_47:
  6590  00043A  2EE8               	decfsz	wreg,f,c
  6591  00043C  D7FE               	bra	i2u490_47
  6592  00043E  2FC4               	decfsz	??_isr& (0+255),f,b
  6593  000440  D7FC               	bra	i2u490_47
  6594  000442  2FC5               	decfsz	(??_isr+1)& (0+255),f,b
  6595  000444  D7FA               	bra	i2u490_47
  6596  000446  F000               	nop	
  6597                           
  6598                           ;main.c: 250: read_colorsensor();
  6599  000448  ECFE  F00C         	call	i2_read_colorsensor	;wreg free
  6600                           
  6601                           ;main.c: 251: if (color[0]>1000) bottlequeue[bottlequeue_tail] += 1;
  6602  00044C  0100               	movlb	0	; () banked
  6603  00044E  BF97               	btfsc	(_color+1)& (0+255),7,b
  6604  000450  D014               	goto	i2l4613
  6605  000452  0EE9               	movlw	233
  6606  000454  0100               	movlb	0	; () banked
  6607  000456  5D96               	subwf	_color& (0+255),w,b
  6608  000458  0E03               	movlw	3
  6609  00045A  0100               	movlb	0	; () banked
  6610  00045C  5997               	subwfb	(_color+1)& (0+255),w,b
  6611  00045E  A0D8               	btfss	status,0,c
  6612  000460  D00C               	goto	i2l4613
  6613                           
  6614                           ; BSR set to: 0
  6615  000462  90D8               	bcf	status,0,c
  6616  000464  3476               	rlcf	_bottlequeue_tail,w,c
  6617  000466  6ED9               	movwf	fsr2l,c
  6618  000468  3477               	rlcf	_bottlequeue_tail+1,w,c
  6619  00046A  6EDA               	movwf	fsr2h,c
  6620  00046C  0E80               	movlw	low _bottlequeue
  6621  00046E  26D9               	addwf	fsr2l,f,c
  6622  000470  0E00               	movlw	high _bottlequeue
  6623  000472  22DA               	addwfc	fsr2h,f,c
  6624  000474  2ADE               	incf	postinc2,f,c
  6625  000476  0E00               	movlw	0
  6626  000478  22DD               	addwfc	postdec2,f,c
  6627  00047A                     i2l4613:
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;main.c: 252: bottlequeue_tail += 1;
  6631  00047A  4A76               	infsnz	_bottlequeue_tail,f,c
  6632  00047C  2A77               	incf	_bottlequeue_tail+1,f,c
  6633  00047E                     i2l4615:
  6634                           
  6635                           ;main.c: 253: }
  6636                           ;main.c: 254: INT0IF = 0;
  6637  00047E  92F2               	bcf	intcon,1,c	;volatile
  6638                           
  6639                           ;main.c: 255: }
  6640  000480  D138               	goto	i2l317
  6641  000482                     i2l286:
  6642                           
  6643                           ;main.c: 256: else if (INT2IF){
  6644  000482  A2F0               	btfss	intcon3,1,c	;volatile
  6645  000484  D0BD               	goto	i2l297
  6646                           
  6647                           ;main.c: 257: if(PORTAbits.RA4){
  6648  000486  A880               	btfss	3968,4,c	;volatile
  6649  000488  D0B9               	goto	i2l298
  6650                           
  6651                           ;main.c: 258: nodedata = bottlequeue[bottlequeue_head];
  6652  00048A  90D8               	bcf	status,0,c
  6653  00048C  0100               	movlb	0	; () banked
  6654  00048E  35A5               	rlcf	_bottlequeue_head& (0+255),w,b
  6655  000490  6ED9               	movwf	fsr2l,c
  6656  000492  0100               	movlb	0	; () banked
  6657  000494  35A6               	rlcf	(_bottlequeue_head+1)& (0+255),w,b
  6658  000496  6EDA               	movwf	fsr2h,c
  6659  000498  0E80               	movlw	low _bottlequeue
  6660  00049A  26D9               	addwf	fsr2l,f,c
  6661  00049C  0E00               	movlw	high _bottlequeue
  6662  00049E  22DA               	addwfc	fsr2h,f,c
  6663  0004A0  CFDE F0B3          	movff	postinc2,_nodedata
  6664  0004A4  CFDD F0B4          	movff	postdec2,_nodedata+1
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;main.c: 259: bottlequeue_head += 1;
  6668  0004A8  0100               	movlb	0	; () banked
  6669  0004AA  4BA5               	infsnz	_bottlequeue_head& (0+255),f,b
  6670  0004AC  2BA6               	incf	(_bottlequeue_head+1)& (0+255),f,b
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;main.c: 260: total_bottle_count += 1;
  6674  0004AE  0100               	movlb	0	; () banked
  6675  0004B0  4BB9               	infsnz	_total_bottle_count& (0+255),f,b
  6676  0004B2  2BBA               	incf	(_total_bottle_count+1)& (0+255),f,b
  6677                           
  6678                           ;main.c: 261: switch (nodedata){
  6679  0004B4  D080               	goto	i2l4675
  6680  0004B6                     i2l4625:
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;main.c: 263: servo_rotate0(0);
  6684  0004B6  0E00               	movlw	0
  6685  0004B8  6E02               	movwf	servo_rotate0@degree+1,c
  6686  0004BA  0E00               	movlw	0
  6687  0004BC  6E01               	movwf	servo_rotate0@degree,c
  6688  0004BE  EC7A  F012         	call	_servo_rotate0	;wreg free
  6689                           
  6690                           ;main.c: 264: servo_rotate2(0);
  6691  0004C2  0E00               	movlw	0
  6692  0004C4  6E10               	movwf	servo_rotate2@degree+1,c
  6693  0004C6  0E00               	movlw	0
  6694  0004C8  6E0F               	movwf	servo_rotate2@degree,c
  6695  0004CA  EC1E  F011         	call	_servo_rotate2	;wreg free
  6696                           
  6697                           ;main.c: 265: yopcaplbl_count += 1;
  6698  0004CE  0100               	movlb	0	; () banked
  6699  0004D0  4BBF               	infsnz	_yopcaplbl_count& (0+255),f,b
  6700  0004D2  2BC0               	incf	(_yopcaplbl_count+1)& (0+255),f,b
  6701                           
  6702                           ;main.c: 266: break;
  6703  0004D4  D093               	goto	i2l298
  6704  0004D6                     i2l4631:
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;main.c: 268: servo_rotate0(0);
  6708  0004D6  0E00               	movlw	0
  6709  0004D8  6E02               	movwf	servo_rotate0@degree+1,c
  6710  0004DA  0E00               	movlw	0
  6711  0004DC  6E01               	movwf	servo_rotate0@degree,c
  6712  0004DE  EC7A  F012         	call	_servo_rotate0	;wreg free
  6713                           
  6714                           ;main.c: 269: servo_rotate2(0);
  6715  0004E2  0E00               	movlw	0
  6716  0004E4  6E10               	movwf	servo_rotate2@degree+1,c
  6717  0004E6  0E00               	movlw	0
  6718  0004E8  6E0F               	movwf	servo_rotate2@degree,c
  6719  0004EA  EC1E  F011         	call	_servo_rotate2	;wreg free
  6720                           
  6721                           ;main.c: 270: yopcap_count += 1;
  6722  0004EE  0100               	movlb	0	; () banked
  6723  0004F0  4BBD               	infsnz	_yopcap_count& (0+255),f,b
  6724  0004F2  2BBE               	incf	(_yopcap_count+1)& (0+255),f,b
  6725                           
  6726                           ;main.c: 271: break;
  6727  0004F4  D083               	goto	i2l298
  6728  0004F6                     i2l4637:
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;main.c: 273: servo_rotate0(0);
  6732  0004F6  0E00               	movlw	0
  6733  0004F8  6E02               	movwf	servo_rotate0@degree+1,c
  6734  0004FA  0E00               	movlw	0
  6735  0004FC  6E01               	movwf	servo_rotate0@degree,c
  6736  0004FE  EC7A  F012         	call	_servo_rotate0	;wreg free
  6737                           
  6738                           ;main.c: 274: servo_rotate2(120);
  6739  000502  0E00               	movlw	0
  6740  000504  6E10               	movwf	servo_rotate2@degree+1,c
  6741  000506  0E78               	movlw	120
  6742  000508  6E0F               	movwf	servo_rotate2@degree,c
  6743  00050A  EC1E  F011         	call	_servo_rotate2	;wreg free
  6744                           
  6745                           ;main.c: 275: yoplbl_count += 1;
  6746  00050E  0100               	movlb	0	; () banked
  6747  000510  4BC1               	infsnz	_yoplbl_count& (0+255),f,b
  6748  000512  2BC2               	incf	(_yoplbl_count+1)& (0+255),f,b
  6749                           
  6750                           ;main.c: 276: break;
  6751  000514  D073               	goto	i2l298
  6752  000516                     i2l4643:
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;main.c: 278: servo_rotate0(0);
  6756  000516  0E00               	movlw	0
  6757  000518  6E02               	movwf	servo_rotate0@degree+1,c
  6758  00051A  0E00               	movlw	0
  6759  00051C  6E01               	movwf	servo_rotate0@degree,c
  6760  00051E  EC7A  F012         	call	_servo_rotate0	;wreg free
  6761                           
  6762                           ;main.c: 279: servo_rotate2(120);
  6763  000522  0E00               	movlw	0
  6764  000524  6E10               	movwf	servo_rotate2@degree+1,c
  6765  000526  0E78               	movlw	120
  6766  000528  6E0F               	movwf	servo_rotate2@degree,c
  6767  00052A  EC1E  F011         	call	_servo_rotate2	;wreg free
  6768                           
  6769                           ;main.c: 280: yop_count += 1;
  6770  00052E  0100               	movlb	0	; () banked
  6771  000530  4BBB               	infsnz	_yop_count& (0+255),f,b
  6772  000532  2BBC               	incf	(_yop_count+1)& (0+255),f,b
  6773                           
  6774                           ;main.c: 281: break;
  6775  000534  D063               	goto	i2l298
  6776  000536                     i2l4649:
  6777                           
  6778                           ; BSR set to: 0
  6779                           ;main.c: 283: servo_rotate0(120);
  6780  000536  0E00               	movlw	0
  6781  000538  6E02               	movwf	servo_rotate0@degree+1,c
  6782  00053A  0E78               	movlw	120
  6783  00053C  6E01               	movwf	servo_rotate0@degree,c
  6784  00053E  EC7A  F012         	call	_servo_rotate0	;wreg free
  6785                           
  6786                           ;main.c: 284: servo_rotate1(0);
  6787  000542  0E00               	movlw	0
  6788  000544  6E10               	movwf	servo_rotate1@degree+1,c
  6789  000546  0E00               	movlw	0
  6790  000548  6E0F               	movwf	servo_rotate1@degree,c
  6791  00054A  EC78  F011         	call	_servo_rotate1	;wreg free
  6792                           
  6793                           ;main.c: 285: eskacaplbl_count += 1;
  6794  00054E  0100               	movlb	0	; () banked
  6795  000550  4BAD               	infsnz	_eskacaplbl_count& (0+255),f,b
  6796  000552  2BAE               	incf	(_eskacaplbl_count+1)& (0+255),f,b
  6797                           
  6798                           ;main.c: 286: break;
  6799  000554  D053               	goto	i2l298
  6800  000556                     i2l4655:
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;main.c: 288: servo_rotate0(120);
  6804  000556  0E00               	movlw	0
  6805  000558  6E02               	movwf	servo_rotate0@degree+1,c
  6806  00055A  0E78               	movlw	120
  6807  00055C  6E01               	movwf	servo_rotate0@degree,c
  6808  00055E  EC7A  F012         	call	_servo_rotate0	;wreg free
  6809                           
  6810                           ;main.c: 289: servo_rotate1(0);
  6811  000562  0E00               	movlw	0
  6812  000564  6E10               	movwf	servo_rotate1@degree+1,c
  6813  000566  0E00               	movlw	0
  6814  000568  6E0F               	movwf	servo_rotate1@degree,c
  6815  00056A  EC78  F011         	call	_servo_rotate1	;wreg free
  6816                           
  6817                           ;main.c: 290: eskacap_count += 1;
  6818  00056E  0100               	movlb	0	; () banked
  6819  000570  4BAB               	infsnz	_eskacap_count& (0+255),f,b
  6820  000572  2BAC               	incf	(_eskacap_count+1)& (0+255),f,b
  6821                           
  6822                           ;main.c: 291: break;
  6823  000574  D043               	goto	i2l298
  6824  000576                     i2l4661:
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;main.c: 293: servo_rotate0(120);
  6828  000576  0E00               	movlw	0
  6829  000578  6E02               	movwf	servo_rotate0@degree+1,c
  6830  00057A  0E78               	movlw	120
  6831  00057C  6E01               	movwf	servo_rotate0@degree,c
  6832  00057E  EC7A  F012         	call	_servo_rotate0	;wreg free
  6833                           
  6834                           ;main.c: 294: servo_rotate1(120);
  6835  000582  0E00               	movlw	0
  6836  000584  6E10               	movwf	servo_rotate1@degree+1,c
  6837  000586  0E78               	movlw	120
  6838  000588  6E0F               	movwf	servo_rotate1@degree,c
  6839  00058A  EC78  F011         	call	_servo_rotate1	;wreg free
  6840                           
  6841                           ;main.c: 295: eskalbl_count += 1;
  6842  00058E  0100               	movlb	0	; () banked
  6843  000590  4BAF               	infsnz	_eskalbl_count& (0+255),f,b
  6844  000592  2BB0               	incf	(_eskalbl_count+1)& (0+255),f,b
  6845                           
  6846                           ;main.c: 296: break;
  6847  000594  D033               	goto	i2l298
  6848  000596                     i2l4667:
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;main.c: 298: servo_rotate0(120);
  6852  000596  0E00               	movlw	0
  6853  000598  6E02               	movwf	servo_rotate0@degree+1,c
  6854  00059A  0E78               	movlw	120
  6855  00059C  6E01               	movwf	servo_rotate0@degree,c
  6856  00059E  EC7A  F012         	call	_servo_rotate0	;wreg free
  6857                           
  6858                           ;main.c: 299: servo_rotate1(120);
  6859  0005A2  0E00               	movlw	0
  6860  0005A4  6E10               	movwf	servo_rotate1@degree+1,c
  6861  0005A6  0E78               	movlw	120
  6862  0005A8  6E0F               	movwf	servo_rotate1@degree,c
  6863  0005AA  EC78  F011         	call	_servo_rotate1	;wreg free
  6864                           
  6865                           ;main.c: 300: eska_count += 1;
  6866  0005AE  0100               	movlb	0	; () banked
  6867  0005B0  4BA9               	infsnz	_eska_count& (0+255),f,b
  6868  0005B2  2BAA               	incf	(_eska_count+1)& (0+255),f,b
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;main.c: 302: }
  6872                           
  6873                           ;main.c: 301: break;
  6874  0005B4  D023               	goto	i2l298
  6875  0005B6                     i2l4675:
  6876                           
  6877                           ; BSR set to: 0
  6878  0005B6  C0B3  F0C4         	movff	_nodedata,??_isr
  6879  0005BA  C0B4  F0C5         	movff	_nodedata+1,??_isr+1
  6880                           
  6881                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6882                           ; Switch size 1, requested type "space"
  6883                           ; Number of cases is 1, Range of values is 0 to 0
  6884                           ; switch strategies available:
  6885                           ; Name         Instructions Cycles
  6886                           ; simple_byte            4     3 (average)
  6887                           ;	Chosen strategy is simple_byte
  6888  0005BE  0100               	movlb	0	; () banked
  6889  0005C0  51C5               	movf	(??_isr+1)& (0+255),w,b
  6890  0005C2  0A00               	xorlw	0	; case 0
  6891  0005C4  A4D8               	btfss	status,2,c
  6892  0005C6  D01A               	goto	i2l298
  6893                           
  6894                           ; BSR set to: 0
  6895                           ; Switch size 1, requested type "space"
  6896                           ; Number of cases is 8, Range of values is 0 to 7
  6897                           ; switch strategies available:
  6898                           ; Name         Instructions Cycles
  6899                           ; simple_byte           25    13 (average)
  6900                           ;	Chosen strategy is simple_byte
  6901  0005C8  0100               	movlb	0	; () banked
  6902  0005CA  51C4               	movf	??_isr& (0+255),w,b
  6903  0005CC  0A00               	xorlw	0	; case 0
  6904  0005CE  B4D8               	btfsc	status,2,c
  6905  0005D0  D772               	goto	i2l4625
  6906  0005D2  0A01               	xorlw	1	; case 1
  6907  0005D4  B4D8               	btfsc	status,2,c
  6908  0005D6  D77F               	goto	i2l4631
  6909  0005D8  0A03               	xorlw	3	; case 2
  6910  0005DA  B4D8               	btfsc	status,2,c
  6911  0005DC  D78C               	goto	i2l4637
  6912  0005DE  0A01               	xorlw	1	; case 3
  6913  0005E0  B4D8               	btfsc	status,2,c
  6914  0005E2  D799               	goto	i2l4643
  6915  0005E4  0A07               	xorlw	7	; case 4
  6916  0005E6  B4D8               	btfsc	status,2,c
  6917  0005E8  D7A6               	goto	i2l4649
  6918  0005EA  0A01               	xorlw	1	; case 5
  6919  0005EC  B4D8               	btfsc	status,2,c
  6920  0005EE  D7B3               	goto	i2l4655
  6921  0005F0  0A03               	xorlw	3	; case 6
  6922  0005F2  B4D8               	btfsc	status,2,c
  6923  0005F4  D7C0               	goto	i2l4661
  6924  0005F6  0A01               	xorlw	1	; case 7
  6925  0005F8  B4D8               	btfsc	status,2,c
  6926  0005FA  D7CD               	goto	i2l4667
  6927  0005FC                     i2l298:
  6928                           
  6929                           ;main.c: 303: }
  6930                           ;main.c: 304: INT2IF = 0;
  6931  0005FC  92F0               	bcf	intcon3,1,c	;volatile
  6932                           
  6933                           ;main.c: 305: }
  6934  0005FE  D079               	goto	i2l317
  6935  000600                     i2l297:
  6936                           
  6937                           ;main.c: 306: else if (TMR0IF){
  6938  000600  A4F2               	btfss	intcon,2,c	;volatile
  6939  000602  D05D               	goto	i2l4701
  6940                           
  6941                           ;main.c: 307: LATAbits.LATA2 = 0;
  6942  000604  9489               	bcf	3977,2,c	;volatile
  6943                           
  6944                           ;main.c: 308: TMR0ON = 0;
  6945  000606  9ED5               	bcf	4053,7,c	;volatile
  6946                           
  6947                           ;main.c: 309: read_time();
  6948  000608  EC0C  F014         	call	_read_time	;wreg free
  6949                           
  6950                           ;main.c: 310: end_time[1] = time[1];
  6951  00060C  C09F  F079         	movff	_time+1,_end_time+1
  6952                           
  6953                           ;main.c: 311: end_time[0] = time[0];
  6954  000610  C09E  F078         	movff	_time,_end_time
  6955                           
  6956                           ;main.c: 312: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6957  000614  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  6958  000618  6A64               	clrf	dec_to_hex@num+1,c
  6959  00061A  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6960  00061E  C063  F074         	movff	?_dec_to_hex,_isr$1352
  6961  000622  C064  F075         	movff	?_dec_to_hex+1,_isr$1352+1
  6962                           
  6963                           ;main.c: 312: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6964  000626  C074  F001         	movff	_isr$1352,i2___wmul@multiplier
  6965  00062A  C075  F002         	movff	_isr$1352+1,i2___wmul@multiplier+1
  6966  00062E  0E00               	movlw	0
  6967  000630  6E04               	movwf	i2___wmul@multiplicand+1,c
  6968  000632  0E3C               	movlw	60
  6969  000634  6E03               	movwf	i2___wmul@multiplicand,c
  6970  000636  EC68  F016         	call	i2___wmul	;wreg free
  6971  00063A  C001  F0C4         	movff	?i2___wmul,??_isr
  6972  00063E  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6973  000642  C07A  F063         	movff	_start_time,dec_to_hex@num
  6974  000646  6A64               	clrf	dec_to_hex@num+1,c
  6975  000648  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6976  00064C  5063               	movf	?_dec_to_hex,w,c
  6977  00064E  0100               	movlb	0	; () banked
  6978  000650  25C4               	addwf	??_isr& (0+255),w,b
  6979  000652  6E7C               	movwf	_stime,c
  6980  000654  5064               	movf	?_dec_to_hex+1,w,c
  6981  000656  0100               	movlb	0	; () banked
  6982  000658  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6983  00065A  6E7D               	movwf	_stime+1,c
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;main.c: 313: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6987  00065C  C079  F063         	movff	_end_time+1,dec_to_hex@num
  6988  000660  6A64               	clrf	dec_to_hex@num+1,c
  6989  000662  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6990  000666  C063  F074         	movff	?_dec_to_hex,_isr$1352
  6991  00066A  C064  F075         	movff	?_dec_to_hex+1,_isr$1352+1
  6992                           
  6993                           ;main.c: 313: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6994  00066E  C074  F001         	movff	_isr$1352,i2___wmul@multiplier
  6995  000672  C075  F002         	movff	_isr$1352+1,i2___wmul@multiplier+1
  6996  000676  0E00               	movlw	0
  6997  000678  6E04               	movwf	i2___wmul@multiplicand+1,c
  6998  00067A  0E3C               	movlw	60
  6999  00067C  6E03               	movwf	i2___wmul@multiplicand,c
  7000  00067E  EC68  F016         	call	i2___wmul	;wreg free
  7001  000682  C001  F0C4         	movff	?i2___wmul,??_isr
  7002  000686  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  7003  00068A  C078  F063         	movff	_end_time,dec_to_hex@num
  7004  00068E  6A64               	clrf	dec_to_hex@num+1,c
  7005  000690  EC8C  F00B         	call	_dec_to_hex	;wreg free
  7006  000694  5063               	movf	?_dec_to_hex,w,c
  7007  000696  0100               	movlb	0	; () banked
  7008  000698  25C4               	addwf	??_isr& (0+255),w,b
  7009  00069A  0100               	movlb	0	; () banked
  7010  00069C  6FB1               	movwf	_etime& (0+255),b
  7011  00069E  5064               	movf	?_dec_to_hex+1,w,c
  7012  0006A0  0100               	movlb	0	; () banked
  7013  0006A2  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  7014  0006A4  0100               	movlb	0	; () banked
  7015  0006A6  6FB2               	movwf	(_etime+1)& (0+255),b
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;main.c: 314: lcdInst(0b00000001);
  7019  0006A8  0E01               	movlw	1
  7020  0006AA  ECE2  F016         	call	i2_lcdInst
  7021                           
  7022                           ;main.c: 315: curr_state = OPERATIONEND;
  7023  0006AE  0E03               	movlw	3
  7024  0006B0  0100               	movlb	0	; () banked
  7025  0006B2  6FC3               	movwf	_curr_state& (0+255),b
  7026                           
  7027                           ; BSR set to: 0
  7028                           ;main.c: 316: bottle_count_disp = -1;
  7029  0006B4  0100               	movlb	0	; () banked
  7030  0006B6  69EE               	setf	_bottle_count_disp& (0+255),b
  7031  0006B8  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;main.c: 317: TMR0IF = 0;
  7035  0006BA  94F2               	bcf	intcon,2,c	;volatile
  7036                           
  7037                           ;main.c: 318: }
  7038  0006BC  D01A               	goto	i2l317
  7039  0006BE                     i2l4701:
  7040                           
  7041                           ;main.c: 321: lcdInst(0b10000000);
  7042  0006BE  0E80               	movlw	128
  7043  0006C0  ECE2  F016         	call	i2_lcdInst
  7044                           
  7045                           ;main.c: 322: printf("bad interrupt");
  7046  0006C4  0EE7               	movlw	low STR_3
  7047  0006C6  6E0D               	movwf	i2printf@f,c
  7048  0006C8  0EFF               	movlw	high STR_3
  7049  0006CA  6E0E               	movwf	i2printf@f+1,c
  7050  0006CC  EC82  F005         	call	i2_printf	;wreg free
  7051                           
  7052                           ;main.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  7053  0006D0  0E00               	movlw	0
  7054  0006D2  6E73               	movwf	isr@i,c
  7055  0006D4                     i2l4707:
  7056  0006D4  0E63               	movlw	99
  7057  0006D6  6473               	cpfsgt	isr@i,c
  7058  0006D8  D001               	goto	i2l4711
  7059  0006DA  D7F1               	goto	i2l4701
  7060  0006DC                     i2l4711:
  7061  0006DC  0E21               	movlw	33
  7062  0006DE  0100               	movlb	0	; () banked
  7063  0006E0  6FC4               	movwf	??_isr& (0+255),b
  7064  0006E2  0E76               	movlw	118
  7065  0006E4                     i2u491_47:
  7066  0006E4  2EE8               	decfsz	wreg,f,c
  7067  0006E6  D7FE               	bra	i2u491_47
  7068  0006E8  2FC4               	decfsz	??_isr& (0+255),f,b
  7069  0006EA  D7FC               	bra	i2u491_47
  7070  0006EC  F000               	nop	
  7071  0006EE  2A73               	incf	isr@i,f,c
  7072  0006F0  D7F1               	goto	i2l4707
  7073  0006F2                     i2l317:
  7074  0006F2  C0D3  FFF5         	movff	??_isr+15,tablat
  7075  0006F6  C0D2  FFF8         	movff	??_isr+14,tblptru
  7076  0006FA  C0D1  FFF7         	movff	??_isr+13,tblptrh
  7077  0006FE  C0D0  FFF6         	movff	??_isr+12,tblptrl
  7078  000702  C0CF  FFF4         	movff	??_isr+11,prodh
  7079  000706  C0CE  FFF3         	movff	??_isr+10,prodl
  7080  00070A  C0CD  FFDA         	movff	??_isr+9,fsr2h
  7081  00070E  C0CC  FFD9         	movff	??_isr+8,fsr2l
  7082  000712  C0CB  FFE2         	movff	??_isr+7,fsr1h
  7083  000716  C0CA  FFE1         	movff	??_isr+6,fsr1l
  7084  00071A  C0C9  FFEA         	movff	??_isr+5,fsr0h
  7085  00071E  C0C8  FFE9         	movff	??_isr+4,fsr0l
  7086  000722  C0C7  FFFB         	movff	??_isr+3,pclatu
  7087  000726  C0C6  FFFA         	movff	??_isr+2,pclath
  7088  00072A  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7089  00072C  0011               	retfie		f
  7090  00072E                     __end_of_isr:
  7091                           	opt stack 0
  7092                           pclatu	equ	0xFFB
  7093                           pclath	equ	0xFFA
  7094                           tblptru	equ	0xFF8
  7095                           tblptrh	equ	0xFF7
  7096                           tblptrl	equ	0xFF6
  7097                           tablat	equ	0xFF5
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           intcon	equ	0xFF2
  7101                           intcon2	equ	0xFF1
  7102                           intcon3	equ	0xFF0
  7103                           postinc0	equ	0xFEE
  7104                           fsr0h	equ	0xFEA
  7105                           fsr0l	equ	0xFE9
  7106                           wreg	equ	0xFE8
  7107                           fsr1h	equ	0xFE2
  7108                           fsr1l	equ	0xFE1
  7109                           indf2	equ	0xFDF
  7110                           postinc2	equ	0xFDE
  7111                           postdec2	equ	0xFDD
  7112                           fsr2h	equ	0xFDA
  7113                           fsr2l	equ	0xFD9
  7114                           status	equ	0xFD8
  7115                           
  7116 ;; *************** function i2_read_colorsensor *****************
  7117 ;; Defined at:
  7118 ;;		line 534 in file "main.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  read_colorse    4   11[COMRAM] unsigned char [4]
  7123 ;;  read_colorse    4    7[COMRAM] unsigned char [4]
  7124 ;;  read_colorse    2   15[COMRAM] int 
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  1    wreg      void 
  7127 ;; Registers used:
  7128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;Total ram usage:       14 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    2
  7141 ;; This function calls:
  7142 ;;		i2_I2C_Master_Read
  7143 ;;		i2_I2C_Master_Start
  7144 ;;		i2_I2C_Master_Stop
  7145 ;;		i2_I2C_Master_Write
  7146 ;; This function is called by:
  7147 ;;		_isr
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text28
  7152  0019FC                     __ptext28:
  7153                           	opt stack 0
  7154  0019FC                     i2_read_colorsensor:
  7155                           	opt stack 23
  7156                           
  7157                           ;main.c: 539: unsigned char color_low[4];
  7158                           ;main.c: 540: unsigned char color_high[4];
  7159                           ;main.c: 541: int i;
  7160                           ;main.c: 544: I2C_Master_Start();
  7161                           
  7162                           ;incstack = 0
  7163  0019FC  EC02  F017         	call	i2_I2C_Master_Start	;wreg free
  7164                           
  7165                           ;main.c: 545: I2C_Master_Write(0b01010010);
  7166  001A00  0E00               	movlw	0
  7167  001A02  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7168  001A04  0E52               	movlw	82
  7169  001A06  6E02               	movwf	i2I2C_Master_Write@d,c
  7170  001A08  ECED  F016         	call	i2_I2C_Master_Write	;wreg free
  7171                           
  7172                           ;main.c: 546: I2C_Master_Write(0b10110100);
  7173  001A0C  0E00               	movlw	0
  7174  001A0E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7175  001A10  0EB4               	movlw	180
  7176  001A12  6E02               	movwf	i2I2C_Master_Write@d,c
  7177  001A14  ECED  F016         	call	i2_I2C_Master_Write	;wreg free
  7178                           
  7179                           ;main.c: 547: I2C_Master_Start();
  7180  001A18  EC02  F017         	call	i2_I2C_Master_Start	;wreg free
  7181                           
  7182                           ;main.c: 548: I2C_Master_Write(0b01010011);
  7183  001A1C  0E00               	movlw	0
  7184  001A1E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7185  001A20  0E53               	movlw	83
  7186  001A22  6E02               	movwf	i2I2C_Master_Write@d,c
  7187  001A24  ECED  F016         	call	i2_I2C_Master_Write	;wreg free
  7188                           
  7189                           ;main.c: 549: for(i=0; i<3; i++){
  7190  001A28  0E00               	movlw	0
  7191  001A2A  6E11               	movwf	i2read_colorsensor@i+1,c
  7192  001A2C  0E00               	movlw	0
  7193  001A2E  6E10               	movwf	i2read_colorsensor@i,c
  7194  001A30                     i2l4263:
  7195  001A30  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  7196  001A32  D006               	goto	i2l4267
  7197  001A34  5011               	movf	i2read_colorsensor@i+1,w,c
  7198  001A36  E11B               	bnz	i2l4273
  7199  001A38  0E03               	movlw	3
  7200  001A3A  5C10               	subwf	i2read_colorsensor@i,w,c
  7201  001A3C  B0D8               	btfsc	status,0,c
  7202  001A3E  D017               	goto	i2l4273
  7203  001A40                     i2l4267:
  7204                           
  7205                           ;main.c: 550: color_low[i] = I2C_Master_Read(1);
  7206  001A40  0E08               	movlw	low i2read_colorsensor@color_low
  7207  001A42  2410               	addwf	i2read_colorsensor@i,w,c
  7208  001A44  6ED9               	movwf	fsr2l,c
  7209  001A46  0E00               	movlw	high i2read_colorsensor@color_low
  7210  001A48  2011               	addwfc	i2read_colorsensor@i+1,w,c
  7211  001A4A  6EDA               	movwf	fsr2h,c
  7212  001A4C  0E01               	movlw	1
  7213  001A4E  EC55  F016         	call	i2_I2C_Master_Read
  7214  001A52  6EDF               	movwf	indf2,c
  7215                           
  7216                           ;main.c: 551: color_high[i] = I2C_Master_Read(1);
  7217  001A54  0E0C               	movlw	low i2read_colorsensor@color_high
  7218  001A56  2410               	addwf	i2read_colorsensor@i,w,c
  7219  001A58  6ED9               	movwf	fsr2l,c
  7220  001A5A  0E00               	movlw	high i2read_colorsensor@color_high
  7221  001A5C  2011               	addwfc	i2read_colorsensor@i+1,w,c
  7222  001A5E  6EDA               	movwf	fsr2h,c
  7223  001A60  0E01               	movlw	1
  7224  001A62  EC55  F016         	call	i2_I2C_Master_Read
  7225  001A66  6EDF               	movwf	indf2,c
  7226  001A68  4A10               	infsnz	i2read_colorsensor@i,f,c
  7227  001A6A  2A11               	incf	i2read_colorsensor@i+1,f,c
  7228  001A6C  D7E1               	goto	i2l4263
  7229  001A6E                     i2l4273:
  7230                           
  7231                           ;main.c: 552: }
  7232                           ;main.c: 553: color_low[3] = I2C_Master_Read(1);
  7233  001A6E  0E01               	movlw	1
  7234  001A70  EC55  F016         	call	i2_I2C_Master_Read
  7235  001A74  6E0B               	movwf	i2read_colorsensor@color_low+3,c
  7236                           
  7237                           ;main.c: 554: color_high[3] = I2C_Master_Read(0);
  7238  001A76  0E00               	movlw	0
  7239  001A78  EC55  F016         	call	i2_I2C_Master_Read
  7240  001A7C  6E0F               	movwf	i2read_colorsensor@color_high+3,c
  7241                           
  7242                           ;main.c: 555: I2C_Master_Stop();
  7243  001A7E  ECFE  F016         	call	i2_I2C_Master_Stop	;wreg free
  7244                           
  7245                           ;main.c: 557: for(i=0; i<4; i++){
  7246  001A82  0E00               	movlw	0
  7247  001A84  6E11               	movwf	i2read_colorsensor@i+1,c
  7248  001A86  0E00               	movlw	0
  7249  001A88  6E10               	movwf	i2read_colorsensor@i,c
  7250  001A8A                     i2l4277:
  7251  001A8A  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  7252  001A8C  D006               	goto	i2l4281
  7253  001A8E  5011               	movf	i2read_colorsensor@i+1,w,c
  7254  001A90  E12B               	bnz	i2l415
  7255  001A92  0E04               	movlw	4
  7256  001A94  5C10               	subwf	i2read_colorsensor@i,w,c
  7257  001A96  B0D8               	btfsc	status,0,c
  7258  001A98  0012               	return	
  7259  001A9A                     i2l4281:
  7260                           
  7261                           ;main.c: 558: color[i] = (color_high[i] << 8)|(color_low[i]);
  7262  001A9A  0E0C               	movlw	low i2read_colorsensor@color_high
  7263  001A9C  2410               	addwf	i2read_colorsensor@i,w,c
  7264  001A9E  6ED9               	movwf	fsr2l,c
  7265  001AA0  0E00               	movlw	high i2read_colorsensor@color_high
  7266  001AA2  2011               	addwfc	i2read_colorsensor@i+1,w,c
  7267  001AA4  6EDA               	movwf	fsr2h,c
  7268  001AA6  50DF               	movf	indf2,w,c
  7269  001AA8  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  7270  001AAA  5004               	movf	??i2_read_colorsensor,w,c
  7271  001AAC  6E06               	movwf	(??i2_read_colorsensor+2)& (0+255),c
  7272  001AAE  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  7273  001AB0  0E08               	movlw	low i2read_colorsensor@color_low
  7274  001AB2  2410               	addwf	i2read_colorsensor@i,w,c
  7275  001AB4  6ED9               	movwf	fsr2l,c
  7276  001AB6  0E00               	movlw	high i2read_colorsensor@color_low
  7277  001AB8  2011               	addwfc	i2read_colorsensor@i+1,w,c
  7278  001ABA  6EDA               	movwf	fsr2h,c
  7279  001ABC  50DF               	movf	indf2,w,c
  7280  001ABE  6E07               	movwf	(??i2_read_colorsensor+3)& (0+255),c
  7281  001AC0  5007               	movf	??i2_read_colorsensor+3,w,c
  7282  001AC2  1205               	iorwf	??i2_read_colorsensor+1,f,c
  7283  001AC4  0E00               	movlw	0
  7284  001AC6  1206               	iorwf	??i2_read_colorsensor+2,f,c
  7285  001AC8  90D8               	bcf	status,0,c
  7286  001ACA  3410               	rlcf	i2read_colorsensor@i,w,c
  7287  001ACC  6ED9               	movwf	fsr2l,c
  7288  001ACE  3411               	rlcf	i2read_colorsensor@i+1,w,c
  7289  001AD0  6EDA               	movwf	fsr2h,c
  7290  001AD2  0E96               	movlw	low _color
  7291  001AD4  26D9               	addwf	fsr2l,f,c
  7292  001AD6  0E00               	movlw	high _color
  7293  001AD8  22DA               	addwfc	fsr2h,f,c
  7294  001ADA  C005  FFDE         	movff	??i2_read_colorsensor+1,postinc2
  7295  001ADE  C006  FFDD         	movff	??i2_read_colorsensor+2,postdec2
  7296  001AE2  4A10               	infsnz	i2read_colorsensor@i,f,c
  7297  001AE4  2A11               	incf	i2read_colorsensor@i+1,f,c
  7298  001AE6  D7D1               	goto	i2l4277
  7299  001AE8                     i2l415:
  7300  001AE8  0012               	return		;funcret
  7301  001AEA                     __end_ofi2_read_colorsensor:
  7302                           	opt stack 0
  7303                           pclatu	equ	0xFFB
  7304                           pclath	equ	0xFFA
  7305                           tblptru	equ	0xFF8
  7306                           tblptrh	equ	0xFF7
  7307                           tblptrl	equ	0xFF6
  7308                           tablat	equ	0xFF5
  7309                           prodh	equ	0xFF4
  7310                           prodl	equ	0xFF3
  7311                           intcon	equ	0xFF2
  7312                           intcon2	equ	0xFF1
  7313                           intcon3	equ	0xFF0
  7314                           postinc0	equ	0xFEE
  7315                           fsr0h	equ	0xFEA
  7316                           fsr0l	equ	0xFE9
  7317                           wreg	equ	0xFE8
  7318                           fsr1h	equ	0xFE2
  7319                           fsr1l	equ	0xFE1
  7320                           indf2	equ	0xFDF
  7321                           postinc2	equ	0xFDE
  7322                           postdec2	equ	0xFDD
  7323                           fsr2h	equ	0xFDA
  7324                           fsr2l	equ	0xFD9
  7325                           status	equ	0xFD8
  7326                           
  7327 ;; *************** function i2_printf *****************
  7328 ;; Defined at:
  7329 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7332 ;;		 -> STR_24(15), STR_23(16), STR_22(28), STR_21(25), 
  7333 ;;		 -> STR_20(24), STR_19(23), STR_18(18), STR_17(23), 
  7334 ;;		 -> STR_16(10), STR_15(18), STR_14(18), STR_13(18), 
  7335 ;;		 -> STR_12(18), STR_11(18), STR_10(18), STR_9(18), 
  7336 ;;		 -> STR_8(18), STR_7(17), STR_6(17), STR_5(23), 
  7337 ;;		 -> STR_4(23), STR_3(14), STR_2(24), STR_1(24), 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  printf          4    0        struct .
  7340 ;;  printf          3    0        PTR const unsigned char 
  7341 ;;  printf          2   29[COMRAM] int 
  7342 ;;  printf          2   26[COMRAM] unsigned int 
  7343 ;;  printf          2   23[COMRAM] PTR void [1]
  7344 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7345 ;;  printf          2    0        unsigned int 
  7346 ;;  printf          1   31[COMRAM] char 
  7347 ;;  printf          1   28[COMRAM] unsigned char 
  7348 ;;  printf          1   25[COMRAM] char 
  7349 ;;  printf          1   22[COMRAM] unsigned char 
  7350 ;; Return value:  Size  Location     Type
  7351 ;;                  2   12[COMRAM] int 
  7352 ;; Registers used:
  7353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7359 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7362 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7363 ;;Total ram usage:       20 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:    2
  7366 ;; This function calls:
  7367 ;;		i2___lwdiv
  7368 ;;		i2___lwmod
  7369 ;;		i2___wmul
  7370 ;;		i2_isdigit
  7371 ;;		i2_putch
  7372 ;; This function is called by:
  7373 ;;		_isr
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           	psect	text29
  7378  000B04                     __ptext29:
  7379                           	opt stack 0
  7380  000B04                     i2_printf:
  7381                           	opt stack 23
  7382                           
  7383                           ;doprnt.c: 466: va_list ap;
  7384                           ;doprnt.c: 499: signed char c;
  7385                           ;doprnt.c: 501: int width;
  7386                           ;doprnt.c: 506: signed char prec;
  7387                           ;doprnt.c: 508: unsigned char flag;
  7388                           ;doprnt.c: 523: union {
  7389                           ;doprnt.c: 524: unsigned long vd;
  7390                           ;doprnt.c: 525: double integ;
  7391                           ;doprnt.c: 526: } tmpval;
  7392                           ;doprnt.c: 528: unsigned int val;
  7393                           ;doprnt.c: 529: unsigned len;
  7394                           ;doprnt.c: 530: const char * cp;
  7395                           ;doprnt.c: 533: *ap = __va_start();
  7396                           
  7397                           ;incstack = 0
  7398  000B04  0E0F               	movlw	low (?i2_printf+2)
  7399  000B06  6E18               	movwf	i2printf@ap,c
  7400  000B08  0E00               	movlw	high (?i2_printf+2)
  7401  000B0A  6E19               	movwf	i2printf@ap+1,c
  7402                           
  7403                           ;doprnt.c: 536: while(c = *f++) {
  7404  000B0C  D184               	goto	i2l4419
  7405  000B0E                     i2l4289:
  7406                           
  7407                           ;doprnt.c: 538: if(c != '%')
  7408  000B0E  0E25               	movlw	37
  7409  000B10  1820               	xorwf	i2printf@c,w,c
  7410  000B12  B4D8               	btfsc	status,2,c
  7411  000B14  D004               	goto	i2l4293
  7412                           
  7413                           ;doprnt.c: 540: {
  7414                           ;doprnt.c: 541: (putch(c) );
  7415  000B16  5020               	movf	i2printf@c,w,c
  7416  000B18  ECDC  F016         	call	i2_putch
  7417                           
  7418                           ;doprnt.c: 542: continue;
  7419  000B1C  D17C               	goto	i2l4419
  7420  000B1E                     i2l4293:
  7421                           
  7422                           ;doprnt.c: 543: }
  7423                           ;doprnt.c: 546: width = 0;
  7424  000B1E  0E00               	movlw	0
  7425  000B20  6E1F               	movwf	i2printf@width+1,c
  7426  000B22  0E00               	movlw	0
  7427  000B24  6E1E               	movwf	i2printf@width,c
  7428                           
  7429                           ;doprnt.c: 548: flag = 0;
  7430  000B26  0E00               	movlw	0
  7431  000B28  6E1D               	movwf	i2printf@flag,c
  7432                           
  7433                           ;doprnt.c: 551: switch(*f) {
  7434                           
  7435                           ;doprnt.c: 550: for(;;) {
  7436  000B2A  D003               	goto	i2l4299
  7437  000B2C                     i2l4295:
  7438                           
  7439                           ;doprnt.c: 580: flag |= 0x04;
  7440  000B2C  841D               	bsf	i2printf@flag,2,c
  7441                           
  7442                           ;doprnt.c: 581: f++;
  7443  000B2E  4A0D               	infsnz	i2printf@f,f,c
  7444  000B30  2A0E               	incf	i2printf@f+1,f,c
  7445  000B32                     i2l4299:
  7446  000B32  C00D  FFF6         	movff	i2printf@f,tblptrl
  7447  000B36  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7448  000B3A                     	if	0	;tblptru may be non-zero
  7449  000B3A                     	endif
  7450  000B3A                     	if	0	;tblptru may be non-zero
  7451  000B3A                     	endif
  7452  000B3A  0008               	tblrd		*
  7453  000B3C  50F5               	movf	tablat,w,c
  7454                           
  7455                           ; Switch size 1, requested type "space"
  7456                           ; Number of cases is 1, Range of values is 48 to 48
  7457                           ; switch strategies available:
  7458                           ; Name         Instructions Cycles
  7459                           ; simple_byte            4     3 (average)
  7460                           ;	Chosen strategy is simple_byte
  7461  000B3E  0A30               	xorlw	48	; case 48
  7462  000B40  B4D8               	btfsc	status,2,c
  7463  000B42  D7F4               	goto	i2l4295
  7464                           
  7465                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7466                           
  7467                           ;doprnt.c: 586: }
  7468                           
  7469                           ;doprnt.c: 585: break;
  7470  000B44  C00D  FFF6         	movff	i2printf@f,tblptrl
  7471  000B48  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7472  000B4C                     	if	0	;tblptru may be non-zero
  7473  000B4C                     	endif
  7474  000B4C                     	if	0	;tblptru may be non-zero
  7475  000B4C                     	endif
  7476  000B4C  0008               	tblrd		*
  7477  000B4E  50F5               	movf	tablat,w,c
  7478  000B50  EC9E  F016         	call	i2_isdigit
  7479  000B54  A0D8               	btfss	status,0,c
  7480  000B56  D038               	goto	i2l4319
  7481                           
  7482                           ;doprnt.c: 598: width = 0;
  7483  000B58  0E00               	movlw	0
  7484  000B5A  6E1F               	movwf	i2printf@width+1,c
  7485  000B5C  0E00               	movlw	0
  7486  000B5E  6E1E               	movwf	i2printf@width,c
  7487  000B60                     i2l4305:
  7488                           
  7489                           ;doprnt.c: 600: width *= 10;
  7490  000B60  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  7491  000B64  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7492  000B68  0E00               	movlw	0
  7493  000B6A  6E04               	movwf	i2___wmul@multiplicand+1,c
  7494  000B6C  0E0A               	movlw	10
  7495  000B6E  6E03               	movwf	i2___wmul@multiplicand,c
  7496  000B70  EC68  F016         	call	i2___wmul	;wreg free
  7497  000B74  C001  F01E         	movff	?i2___wmul,i2printf@width
  7498  000B78  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  7499                           
  7500                           ;doprnt.c: 601: width += *f++ - '0';
  7501  000B7C  0ED0               	movlw	208
  7502  000B7E  6E13               	movwf	??i2_printf& (0+255),c
  7503  000B80  0EFF               	movlw	255
  7504  000B82  6E14               	movwf	(??i2_printf+1)& (0+255),c
  7505  000B84  C00D  FFF6         	movff	i2printf@f,tblptrl
  7506  000B88  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7507  000B8C                     	if	0	;tblptru may be non-zero
  7508  000B8C                     	endif
  7509  000B8C                     	if	0	;tblptru may be non-zero
  7510  000B8C                     	endif
  7511  000B8C  0008               	tblrd		*
  7512  000B8E  50F5               	movf	tablat,w,c
  7513  000B90  6E15               	movwf	(??i2_printf+2)& (0+255),c
  7514  000B92  6A16               	clrf	(??i2_printf+3)& (0+255),c
  7515  000B94  5013               	movf	??i2_printf,w,c
  7516  000B96  2615               	addwf	??i2_printf+2,f,c
  7517  000B98  5014               	movf	??i2_printf+1,w,c
  7518  000B9A  2216               	addwfc	??i2_printf+3,f,c
  7519  000B9C  5015               	movf	??i2_printf+2,w,c
  7520  000B9E  261E               	addwf	i2printf@width,f,c
  7521  000BA0  5016               	movf	??i2_printf+3,w,c
  7522  000BA2  221F               	addwfc	i2printf@width+1,f,c
  7523  000BA4  4A0D               	infsnz	i2printf@f,f,c
  7524  000BA6  2A0E               	incf	i2printf@f+1,f,c
  7525                           
  7526                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7527  000BA8  C00D  FFF6         	movff	i2printf@f,tblptrl
  7528  000BAC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7529  000BB0                     	if	0	;tblptru may be non-zero
  7530  000BB0                     	endif
  7531  000BB0                     	if	0	;tblptru may be non-zero
  7532  000BB0                     	endif
  7533  000BB0  0008               	tblrd		*
  7534  000BB2  50F5               	movf	tablat,w,c
  7535  000BB4  EC9E  F016         	call	i2_isdigit
  7536  000BB8  A0D8               	btfss	status,0,c
  7537  000BBA  D006               	goto	i2l4319
  7538  000BBC  D7D1               	goto	i2l4305
  7539  000BBE                     i2l4313:
  7540                           
  7541                           ;doprnt.c: 721: flag |= 0x80;
  7542  000BBE  8E1D               	bsf	i2printf@flag,7,c
  7543                           
  7544                           ;doprnt.c: 723: break;
  7545  000BC0  D01D               	goto	i2l4321
  7546  000BC2                     i2l4315:
  7547                           
  7548                           ;doprnt.c: 818: flag |= 0xC0;
  7549  000BC2  0EC0               	movlw	192
  7550  000BC4  121D               	iorwf	i2printf@flag,f,c
  7551                           
  7552                           ;doprnt.c: 822: }
  7553                           
  7554                           ;doprnt.c: 819: break;
  7555  000BC6  D01A               	goto	i2l4321
  7556  000BC8                     i2l4319:
  7557  000BC8  C00D  FFF6         	movff	i2printf@f,tblptrl
  7558  000BCC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7559  000BD0  4A0D               	infsnz	i2printf@f,f,c
  7560  000BD2  2A0E               	incf	i2printf@f+1,f,c
  7561  000BD4                     	if	0	;tblptru may be non-zero
  7562  000BD4                     	endif
  7563  000BD4                     	if	0	;tblptru may be non-zero
  7564  000BD4                     	endif
  7565  000BD4  0008               	tblrd		*
  7566  000BD6  CFF5 F020          	movff	tablat,i2printf@c
  7567  000BDA  5020               	movf	i2printf@c,w,c
  7568                           
  7569                           ; Switch size 1, requested type "space"
  7570                           ; Number of cases is 5, Range of values is 0 to 120
  7571                           ; switch strategies available:
  7572                           ; Name         Instructions Cycles
  7573                           ; simple_byte           16     9 (average)
  7574                           ;	Chosen strategy is simple_byte
  7575  000BDC  0A00               	xorlw	0	; case 0
  7576  000BDE  B4D8               	btfsc	status,2,c
  7577  000BE0  0012               	return	
  7578  000BE2  0A64               	xorlw	100	; case 100
  7579  000BE4  B4D8               	btfsc	status,2,c
  7580  000BE6  D00A               	goto	i2l4321
  7581  000BE8  0A0D               	xorlw	13	; case 105
  7582  000BEA  B4D8               	btfsc	status,2,c
  7583  000BEC  D007               	goto	i2l4321
  7584  000BEE  0A1C               	xorlw	28	; case 117
  7585  000BF0  B4D8               	btfsc	status,2,c
  7586  000BF2  D7E7               	goto	i2l4315
  7587  000BF4  0A0D               	xorlw	13	; case 120
  7588  000BF6  B4D8               	btfsc	status,2,c
  7589  000BF8  D7E2               	goto	i2l4313
  7590  000BFA  D10D               	goto	i2l4419
  7591  000BFC                     i2l4321:
  7592                           
  7593                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7594  000BFC  C01D  F013         	movff	i2printf@flag,??i2_printf
  7595  000C00  0EC0               	movlw	192
  7596  000C02  1613               	andwf	??i2_printf,f,c
  7597  000C04  A4D8               	btfss	status,2,c
  7598  000C06  D015               	goto	i2l4333
  7599                           
  7600                           ;doprnt.c: 1253: {
  7601                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7602  000C08  C018  FFD9         	movff	i2printf@ap,fsr2l
  7603  000C0C  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7604  000C10  CFDE F01B          	movff	postinc2,i2printf@val
  7605  000C14  CFDD F01C          	movff	postdec2,i2printf@val+1
  7606  000C18  0E02               	movlw	2
  7607  000C1A  2618               	addwf	i2printf@ap,f,c
  7608  000C1C  0E00               	movlw	0
  7609  000C1E  2219               	addwfc	i2printf@ap+1,f,c
  7610                           
  7611                           ;doprnt.c: 1261: if((int)val < 0) {
  7612  000C20  AE1C               	btfss	i2printf@val+1,7,c
  7613  000C22  D044               	goto	i2l4367
  7614                           
  7615                           ;doprnt.c: 1262: flag |= 0x03;
  7616  000C24  0E03               	movlw	3
  7617  000C26  121D               	iorwf	i2printf@flag,f,c
  7618                           
  7619                           ;doprnt.c: 1263: val = -val;
  7620  000C28  6C1B               	negf	i2printf@val,c
  7621  000C2A  1E1C               	comf	i2printf@val+1,f,c
  7622  000C2C  B0D8               	btfsc	status,0,c
  7623  000C2E  2A1C               	incf	i2printf@val+1,f,c
  7624                           
  7625                           ;doprnt.c: 1264: }
  7626                           ;doprnt.c: 1266: }
  7627  000C30  D03D               	goto	i2l4367
  7628  000C32                     i2l4333:
  7629                           
  7630                           ;doprnt.c: 1268: else
  7631                           ;doprnt.c: 1273: {
  7632                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7633  000C32  C018  FFD9         	movff	i2printf@ap,fsr2l
  7634  000C36  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7635  000C3A  CFDE F01B          	movff	postinc2,i2printf@val
  7636  000C3E  CFDD F01C          	movff	postdec2,i2printf@val+1
  7637  000C42  0E02               	movlw	2
  7638  000C44  2618               	addwf	i2printf@ap,f,c
  7639  000C46  0E00               	movlw	0
  7640  000C48  2219               	addwfc	i2printf@ap+1,f,c
  7641                           
  7642                           ;doprnt.c: 1287: }
  7643                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7644  000C4A  D030               	goto	i2l4367
  7645  000C4C                     i2l4337:
  7646                           
  7647                           ;doprnt.c: 1302: case 0xC0:
  7648                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7649  000C4C  0E01               	movlw	1
  7650  000C4E  6E20               	movwf	i2printf@c,c
  7651  000C50                     i2l4339:
  7652  000C50  0E05               	movlw	5
  7653  000C52  1820               	xorwf	i2printf@c,w,c
  7654  000C54  B4D8               	btfsc	status,2,c
  7655  000C56  D035               	goto	i2l4369
  7656                           
  7657                           ;doprnt.c: 1306: if(val < dpowers[c])
  7658  000C58  5020               	movf	i2printf@c,w,c
  7659  000C5A  0D02               	mullw	2
  7660  000C5C  0EC8               	movlw	low _dpowers
  7661  000C5E  24F3               	addwf	prodl,w,c
  7662  000C60  6EF6               	movwf	tblptrl,c
  7663  000C62  0EFD               	movlw	high _dpowers
  7664  000C64  20F4               	addwfc	prodh,w,c
  7665  000C66  6EF7               	movwf	tblptrh,c
  7666  000C68                     	if	0	;There are less than 3 active tblptr bytes
  7667  000C68                     	endif
  7668  000C68  0009               	tblrd		*+
  7669  000C6A  50F5               	movf	tablat,w,c
  7670  000C6C  5C1B               	subwf	i2printf@val,w,c
  7671  000C6E  0009               	tblrd		*+
  7672  000C70  50F5               	movf	tablat,w,c
  7673  000C72  581C               	subwfb	i2printf@val+1,w,c
  7674  000C74  A0D8               	btfss	status,0,c
  7675  000C76  D025               	goto	i2l4369
  7676                           
  7677                           ;doprnt.c: 1307: break;
  7678  000C78  2A20               	incf	i2printf@c,f,c
  7679  000C7A  D7EA               	goto	i2l4339
  7680  000C7C                     i2l4351:
  7681                           
  7682                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7683  000C7C  0E01               	movlw	1
  7684  000C7E  6E20               	movwf	i2printf@c,c
  7685  000C80                     i2l4353:
  7686  000C80  0E04               	movlw	4
  7687  000C82  1820               	xorwf	i2printf@c,w,c
  7688  000C84  B4D8               	btfsc	status,2,c
  7689  000C86  D01D               	goto	i2l4369
  7690                           
  7691                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7692  000C88  5020               	movf	i2printf@c,w,c
  7693  000C8A  0D02               	mullw	2
  7694  000C8C  0ED2               	movlw	low _hexpowers
  7695  000C8E  24F3               	addwf	prodl,w,c
  7696  000C90  6EF6               	movwf	tblptrl,c
  7697  000C92  0EFD               	movlw	high _hexpowers
  7698  000C94  20F4               	addwfc	prodh,w,c
  7699  000C96  6EF7               	movwf	tblptrh,c
  7700  000C98                     	if	0	;There are less than 3 active tblptr bytes
  7701  000C98                     	endif
  7702  000C98  0009               	tblrd		*+
  7703  000C9A  50F5               	movf	tablat,w,c
  7704  000C9C  5C1B               	subwf	i2printf@val,w,c
  7705  000C9E  0009               	tblrd		*+
  7706  000CA0  50F5               	movf	tablat,w,c
  7707  000CA2  581C               	subwfb	i2printf@val+1,w,c
  7708  000CA4  A0D8               	btfss	status,0,c
  7709  000CA6  D00D               	goto	i2l4369
  7710                           
  7711                           ;doprnt.c: 1318: break;
  7712  000CA8  2A20               	incf	i2printf@c,f,c
  7713  000CAA  D7EA               	goto	i2l4353
  7714  000CAC                     i2l4367:
  7715  000CAC  501D               	movf	i2printf@flag,w,c
  7716  000CAE  0BC0               	andlw	192
  7717                           
  7718                           ; Switch size 1, requested type "space"
  7719                           ; Number of cases is 3, Range of values is 0 to 192
  7720                           ; switch strategies available:
  7721                           ; Name         Instructions Cycles
  7722                           ; simple_byte           10     6 (average)
  7723                           ;	Chosen strategy is simple_byte
  7724  000CB0  0A00               	xorlw	0	; case 0
  7725  000CB2  B4D8               	btfsc	status,2,c
  7726  000CB4  D7CB               	goto	i2l4337
  7727  000CB6  0A80               	xorlw	128	; case 128
  7728  000CB8  B4D8               	btfsc	status,2,c
  7729  000CBA  D7E0               	goto	i2l4351
  7730  000CBC  0A40               	xorlw	64	; case 192
  7731  000CBE  B4D8               	btfsc	status,2,c
  7732  000CC0  D7C5               	goto	i2l4337
  7733  000CC2                     i2l4369:
  7734                           
  7735                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7736  000CC2  501E               	movf	i2printf@width,w,c
  7737  000CC4  101F               	iorwf	i2printf@width+1,w,c
  7738  000CC6  B4D8               	btfsc	status,2,c
  7739  000CC8  D009               	goto	i2l4375
  7740  000CCA  C01D  F013         	movff	i2printf@flag,??i2_printf
  7741  000CCE  0E03               	movlw	3
  7742  000CD0  1613               	andwf	??i2_printf,f,c
  7743  000CD2  B4D8               	btfsc	status,2,c
  7744  000CD4  D003               	goto	i2l4375
  7745                           
  7746                           ;doprnt.c: 1346: width--;
  7747  000CD6  061E               	decf	i2printf@width,f,c
  7748  000CD8  A0D8               	btfss	status,0,c
  7749  000CDA  061F               	decf	i2printf@width+1,f,c
  7750  000CDC                     i2l4375:
  7751                           
  7752                           ;doprnt.c: 1381: if(width > c)
  7753  000CDC  0E80               	movlw	128
  7754  000CDE  BE20               	btfsc	i2printf@c,7,c
  7755  000CE0  0E7F               	movlw	127
  7756  000CE2  6E13               	movwf	??i2_printf& (0+255),c
  7757  000CE4  501E               	movf	i2printf@width,w,c
  7758  000CE6  5C20               	subwf	i2printf@c,w,c
  7759  000CE8  501F               	movf	i2printf@width+1,w,c
  7760  000CEA  0A80               	xorlw	128
  7761  000CEC  5813               	subwfb	??i2_printf& (0+255),w,c
  7762  000CEE  B0D8               	btfsc	status,0,c
  7763  000CF0  D007               	goto	i2l4379
  7764                           
  7765                           ;doprnt.c: 1382: width -= c;
  7766  000CF2  5020               	movf	i2printf@c,w,c
  7767  000CF4  5E1E               	subwf	i2printf@width,f,c
  7768  000CF6  0E00               	movlw	0
  7769  000CF8  BE20               	btfsc	i2printf@c,7,c
  7770  000CFA  0EFF               	movlw	255
  7771  000CFC  5A1F               	subwfb	i2printf@width+1,f,c
  7772  000CFE  D004               	goto	i2l4381
  7773  000D00                     i2l4379:
  7774                           
  7775                           ;doprnt.c: 1383: else
  7776                           ;doprnt.c: 1384: width = 0;
  7777  000D00  0E00               	movlw	0
  7778  000D02  6E1F               	movwf	i2printf@width+1,c
  7779  000D04  0E00               	movlw	0
  7780  000D06  6E1E               	movwf	i2printf@width,c
  7781  000D08                     i2l4381:
  7782                           
  7783                           ;doprnt.c: 1387: if(flag & 0x04) {
  7784  000D08  A41D               	btfss	i2printf@flag,2,c
  7785  000D0A  D014               	goto	i2l4393
  7786                           
  7787                           ;doprnt.c: 1392: if(flag & 0x03)
  7788  000D0C  C01D  F013         	movff	i2printf@flag,??i2_printf
  7789  000D10  0E03               	movlw	3
  7790  000D12  1613               	andwf	??i2_printf,f,c
  7791  000D14  B4D8               	btfsc	status,2,c
  7792  000D16  D003               	goto	i2l4387
  7793                           
  7794                           ;doprnt.c: 1393: (putch('-') );
  7795  000D18  0E2D               	movlw	45
  7796  000D1A  ECDC  F016         	call	i2_putch
  7797  000D1E                     i2l4387:
  7798                           
  7799                           ;doprnt.c: 1415: if(width)
  7800  000D1E  501E               	movf	i2printf@width,w,c
  7801  000D20  101F               	iorwf	i2printf@width+1,w,c
  7802  000D22  B4D8               	btfsc	status,2,c
  7803  000D24  D01E               	goto	i2l4403
  7804                           
  7805                           ;doprnt.c: 1417: (putch('0') );
  7806                           
  7807                           ;doprnt.c: 1416: do
  7808  000D26  0E30               	movlw	48
  7809  000D28  ECDC  F016         	call	i2_putch
  7810                           
  7811                           ;doprnt.c: 1418: while(--width);
  7812  000D2C  061E               	decf	i2printf@width,f,c
  7813  000D2E  A0D8               	btfss	status,0,c
  7814  000D30  061F               	decf	i2printf@width+1,f,c
  7815  000D32  D7F5               	goto	i2l4387
  7816  000D34                     i2l4393:
  7817                           
  7818                           ;doprnt.c: 1422: {
  7819                           ;doprnt.c: 1424: if(width
  7820                           ;doprnt.c: 1428: )
  7821  000D34  501E               	movf	i2printf@width,w,c
  7822  000D36  101F               	iorwf	i2printf@width+1,w,c
  7823  000D38  B4D8               	btfsc	status,2,c
  7824  000D3A  D00A               	goto	i2l4399
  7825  000D3C                     i2l4395:
  7826                           
  7827                           ;doprnt.c: 1430: (putch(' ') );
  7828  000D3C  0E20               	movlw	32
  7829  000D3E  ECDC  F016         	call	i2_putch
  7830                           
  7831                           ;doprnt.c: 1431: while(--width);
  7832  000D42  061E               	decf	i2printf@width,f,c
  7833  000D44  A0D8               	btfss	status,0,c
  7834  000D46  061F               	decf	i2printf@width+1,f,c
  7835  000D48  501E               	movf	i2printf@width,w,c
  7836  000D4A  101F               	iorwf	i2printf@width+1,w,c
  7837  000D4C  A4D8               	btfss	status,2,c
  7838  000D4E  D7F6               	goto	i2l4395
  7839  000D50                     i2l4399:
  7840                           
  7841                           ;doprnt.c: 1438: if(flag & 0x03)
  7842  000D50  C01D  F013         	movff	i2printf@flag,??i2_printf
  7843  000D54  0E03               	movlw	3
  7844  000D56  1613               	andwf	??i2_printf,f,c
  7845  000D58  B4D8               	btfsc	status,2,c
  7846  000D5A  D003               	goto	i2l4403
  7847                           
  7848                           ;doprnt.c: 1439: (putch('-') );
  7849  000D5C  0E2D               	movlw	45
  7850  000D5E  ECDC  F016         	call	i2_putch
  7851  000D62                     i2l4403:
  7852                           
  7853                           ;doprnt.c: 1469: }
  7854                           ;doprnt.c: 1472: prec = c;
  7855  000D62  C020  F01A         	movff	i2printf@c,i2printf@prec
  7856                           
  7857                           ;doprnt.c: 1474: while(prec--) {
  7858  000D66  D053               	goto	i2l4417
  7859  000D68                     i2l4405:
  7860                           
  7861                           ;doprnt.c: 1486: case 0xC0:
  7862                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7863  000D68  501A               	movf	i2printf@prec,w,c
  7864  000D6A  0D02               	mullw	2
  7865  000D6C  0EC8               	movlw	low _dpowers
  7866  000D6E  24F3               	addwf	prodl,w,c
  7867  000D70  6EF6               	movwf	tblptrl,c
  7868  000D72  0EFD               	movlw	high _dpowers
  7869  000D74  20F4               	addwfc	prodh,w,c
  7870  000D76  6EF7               	movwf	tblptrh,c
  7871  000D78                     	if	0	;There are less than 3 active tblptr bytes
  7872  000D78                     	endif
  7873  000D78  0009               	tblrd		*+
  7874  000D7A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7875  000D7E  000A               	tblrd		*-
  7876  000D80  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7877  000D84  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7878  000D88  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7879  000D8C  ECFF  F014         	call	i2___lwdiv	;wreg free
  7880  000D90  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7881  000D94  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7882  000D98  0E00               	movlw	0
  7883  000D9A  6E0B               	movwf	i2___lwmod@divisor+1,c
  7884  000D9C  0E0A               	movlw	10
  7885  000D9E  6E0A               	movwf	i2___lwmod@divisor,c
  7886  000DA0  EC77  F015         	call	i2___lwmod	;wreg free
  7887  000DA4  5008               	movf	?i2___lwmod,w,c
  7888  000DA6  0F30               	addlw	48
  7889  000DA8  6E20               	movwf	i2printf@c,c
  7890                           
  7891                           ;doprnt.c: 1491: break;
  7892  000DAA  D02E               	goto	i2l4415
  7893  000DAC                     i2l4407:
  7894                           
  7895                           ;doprnt.c: 1499: {
  7896                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7897  000DAC  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7898  000DB0  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7899  000DB4  501A               	movf	i2printf@prec,w,c
  7900  000DB6  0D02               	mullw	2
  7901  000DB8  0ED2               	movlw	low _hexpowers
  7902  000DBA  24F3               	addwf	prodl,w,c
  7903  000DBC  6EF6               	movwf	tblptrl,c
  7904  000DBE  0EFD               	movlw	high _hexpowers
  7905  000DC0  20F4               	addwfc	prodh,w,c
  7906  000DC2  6EF7               	movwf	tblptrh,c
  7907  000DC4                     	if	0	;There are less than 3 active tblptr bytes
  7908  000DC4                     	endif
  7909  000DC4  0009               	tblrd		*+
  7910  000DC6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7911  000DCA  000A               	tblrd		*-
  7912  000DCC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7913  000DD0  ECFF  F014         	call	i2___lwdiv	;wreg free
  7914  000DD4  5001               	movf	?i2___lwdiv,w,c
  7915  000DD6  0B0F               	andlw	15
  7916  000DD8  6E17               	movwf	i2printf@idx,c
  7917                           
  7918                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7919  000DDA  5017               	movf	i2printf@idx,w,c
  7920  000DDC  0D01               	mullw	1
  7921  000DDE  0E95               	movlw	low STR_25
  7922  000DE0  24F3               	addwf	prodl,w,c
  7923  000DE2  6EF6               	movwf	tblptrl,c
  7924  000DE4  0EFF               	movlw	high STR_25
  7925  000DE6  20F4               	addwfc	prodh,w,c
  7926  000DE8  6EF7               	movwf	tblptrh,c
  7927  000DEA                     	if	0	;There are less than 3 active tblptr bytes
  7928  000DEA                     	endif
  7929  000DEA  0008               	tblrd		*
  7930  000DEC  CFF5 F020          	movff	tablat,i2printf@c
  7931                           
  7932                           ;doprnt.c: 1523: }
  7933                           
  7934                           ;doprnt.c: 1508: }
  7935                           ;doprnt.c: 1510: break;
  7936  000DF0  D00B               	goto	i2l4415
  7937  000DF2                     i2l4413:
  7938  000DF2  501D               	movf	i2printf@flag,w,c
  7939  000DF4  0BC0               	andlw	192
  7940                           
  7941                           ; Switch size 1, requested type "space"
  7942                           ; Number of cases is 3, Range of values is 0 to 192
  7943                           ; switch strategies available:
  7944                           ; Name         Instructions Cycles
  7945                           ; simple_byte           10     6 (average)
  7946                           ;	Chosen strategy is simple_byte
  7947  000DF6  0A00               	xorlw	0	; case 0
  7948  000DF8  B4D8               	btfsc	status,2,c
  7949  000DFA  D7B6               	goto	i2l4405
  7950  000DFC  0A80               	xorlw	128	; case 128
  7951  000DFE  B4D8               	btfsc	status,2,c
  7952  000E00  D7D5               	goto	i2l4407
  7953  000E02  0A40               	xorlw	64	; case 192
  7954  000E04  B4D8               	btfsc	status,2,c
  7955  000E06  D7B0               	goto	i2l4405
  7956  000E08                     i2l4415:
  7957                           
  7958                           ;doprnt.c: 1524: (putch(c) );
  7959  000E08  5020               	movf	i2printf@c,w,c
  7960  000E0A  ECDC  F016         	call	i2_putch
  7961  000E0E                     i2l4417:
  7962  000E0E  061A               	decf	i2printf@prec,f,c
  7963  000E10  281A               	incf	i2printf@prec,w,c
  7964  000E12  A4D8               	btfss	status,2,c
  7965  000E14  D7EE               	goto	i2l4413
  7966  000E16                     i2l4419:
  7967  000E16  C00D  FFF6         	movff	i2printf@f,tblptrl
  7968  000E1A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7969  000E1E  4A0D               	infsnz	i2printf@f,f,c
  7970  000E20  2A0E               	incf	i2printf@f+1,f,c
  7971  000E22                     	if	0	;tblptru may be non-zero
  7972  000E22                     	endif
  7973  000E22                     	if	0	;tblptru may be non-zero
  7974  000E22                     	endif
  7975  000E22  0008               	tblrd		*
  7976  000E24  CFF5 F020          	movff	tablat,i2printf@c
  7977  000E28  5020               	movf	i2printf@c,w,c
  7978  000E2A  B4D8               	btfsc	status,2,c
  7979  000E2C  0012               	return	
  7980  000E2E  D66F               	goto	i2l4289
  7981  000E30                     __end_ofi2_printf:
  7982                           	opt stack 0
  7983                           pclatu	equ	0xFFB
  7984                           pclath	equ	0xFFA
  7985                           tblptru	equ	0xFF8
  7986                           tblptrh	equ	0xFF7
  7987                           tblptrl	equ	0xFF6
  7988                           tablat	equ	0xFF5
  7989                           prodh	equ	0xFF4
  7990                           prodl	equ	0xFF3
  7991                           intcon	equ	0xFF2
  7992                           intcon2	equ	0xFF1
  7993                           intcon3	equ	0xFF0
  7994                           postinc0	equ	0xFEE
  7995                           fsr0h	equ	0xFEA
  7996                           fsr0l	equ	0xFE9
  7997                           wreg	equ	0xFE8
  7998                           fsr1h	equ	0xFE2
  7999                           fsr1l	equ	0xFE1
  8000                           indf2	equ	0xFDF
  8001                           postinc2	equ	0xFDE
  8002                           postdec2	equ	0xFDD
  8003                           fsr2h	equ	0xFDA
  8004                           fsr2l	equ	0xFD9
  8005                           status	equ	0xFD8
  8006                           
  8007 ;; *************** function i2_putch *****************
  8008 ;; Defined at:
  8009 ;;		line 31 in file "lcd.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  data            1    wreg     unsigned char 
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;  data            1    2[COMRAM] unsigned char 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, status,2, status,0, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8027 ;;Total ram usage:        1 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    1
  8030 ;; This function calls:
  8031 ;;		i2_lcdNibble
  8032 ;; This function is called by:
  8033 ;;		i2_printf
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           	psect	text30
  8038  002DB8                     __ptext30:
  8039                           	opt stack 0
  8040  002DB8                     i2_putch:
  8041                           	opt stack 23
  8042                           
  8043                           ;incstack = 0
  8044                           ;i2putch@data stored from wreg
  8045  002DB8  6E03               	movwf	i2putch@data,c
  8046                           
  8047                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  8048  002DBA  848C               	bsf	3980,2,c	;volatile
  8049                           
  8050                           ;lcd.c: 33: lcdNibble(data);
  8051  002DBC  5003               	movf	i2putch@data,w,c
  8052  002DBE  EC50  F015         	call	i2_lcdNibble
  8053  002DC2  0012               	return		;funcret
  8054  002DC4                     __end_ofi2_putch:
  8055                           	opt stack 0
  8056                           pclatu	equ	0xFFB
  8057                           pclath	equ	0xFFA
  8058                           tblptru	equ	0xFF8
  8059                           tblptrh	equ	0xFF7
  8060                           tblptrl	equ	0xFF6
  8061                           tablat	equ	0xFF5
  8062                           prodh	equ	0xFF4
  8063                           prodl	equ	0xFF3
  8064                           intcon	equ	0xFF2
  8065                           intcon2	equ	0xFF1
  8066                           intcon3	equ	0xFF0
  8067                           postinc0	equ	0xFEE
  8068                           fsr0h	equ	0xFEA
  8069                           fsr0l	equ	0xFE9
  8070                           wreg	equ	0xFE8
  8071                           fsr1h	equ	0xFE2
  8072                           fsr1l	equ	0xFE1
  8073                           indf2	equ	0xFDF
  8074                           postinc2	equ	0xFDE
  8075                           postdec2	equ	0xFDD
  8076                           fsr2h	equ	0xFDA
  8077                           fsr2l	equ	0xFD9
  8078                           status	equ	0xFD8
  8079                           
  8080 ;; *************** function i2_isdigit *****************
  8081 ;; Defined at:
  8082 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;  c               1    wreg     unsigned char 
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;  c               1    2[COMRAM] unsigned char 
  8087 ;; Return value:  Size  Location     Type
  8088 ;;		None               void
  8089 ;; Registers used:
  8090 ;;		wreg, status,2, status,0
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;Total ram usage:        3 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		i2_printf
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text31
  8110  002D3C                     __ptext31:
  8111                           	opt stack 0
  8112  002D3C                     i2_isdigit:
  8113                           	opt stack 24
  8114                           
  8115                           ;incstack = 0
  8116                           ;i2isdigit@c stored from wreg
  8117  002D3C  6E03               	movwf	i2isdigit@c,c
  8118  002D3E  0E00               	movlw	0
  8119  002D40  6E02               	movwf	i2_isdigit$821,c
  8120  002D42  0E3A               	movlw	58
  8121  002D44  6003               	cpfslt	i2isdigit@c,c
  8122  002D46  D005               	goto	i2l3951
  8123  002D48  0E2F               	movlw	47
  8124  002D4A  6403               	cpfsgt	i2isdigit@c,c
  8125  002D4C  D002               	goto	i2l3951
  8126  002D4E  0E01               	movlw	1
  8127  002D50  6E02               	movwf	i2_isdigit$821,c
  8128  002D52                     i2l3951:
  8129  002D52  C002  F001         	movff	i2_isdigit$821,??i2_isdigit
  8130  002D56  3001               	rrcf	??i2_isdigit,w,c
  8131  002D58  0012               	return	
  8132  002D5A                     __end_ofi2_isdigit:
  8133                           	opt stack 0
  8134                           pclatu	equ	0xFFB
  8135                           pclath	equ	0xFFA
  8136                           tblptru	equ	0xFF8
  8137                           tblptrh	equ	0xFF7
  8138                           tblptrl	equ	0xFF6
  8139                           tablat	equ	0xFF5
  8140                           prodh	equ	0xFF4
  8141                           prodl	equ	0xFF3
  8142                           intcon	equ	0xFF2
  8143                           intcon2	equ	0xFF1
  8144                           intcon3	equ	0xFF0
  8145                           postinc0	equ	0xFEE
  8146                           fsr0h	equ	0xFEA
  8147                           fsr0l	equ	0xFE9
  8148                           wreg	equ	0xFE8
  8149                           fsr1h	equ	0xFE2
  8150                           fsr1l	equ	0xFE1
  8151                           indf2	equ	0xFDF
  8152                           postinc2	equ	0xFDE
  8153                           postdec2	equ	0xFDD
  8154                           fsr2h	equ	0xFDA
  8155                           fsr2l	equ	0xFD9
  8156                           status	equ	0xFD8
  8157                           
  8158 ;; *************** function i2___lwmod *****************
  8159 ;; Defined at:
  8160 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;  dividend        2    7[COMRAM] unsigned int 
  8163 ;;  divisor         2    9[COMRAM] unsigned int 
  8164 ;; Auto vars:     Size  Location     Type
  8165 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8166 ;; Return value:  Size  Location     Type
  8167 ;;                  2    7[COMRAM] unsigned int 
  8168 ;; Registers used:
  8169 ;;		wreg, status,2, status,0
  8170 ;; Tracked objects:
  8171 ;;		On entry : 0/0
  8172 ;;		On exit  : 0/0
  8173 ;;		Unchanged: 0/0
  8174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8175 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8179 ;;Total ram usage:        5 bytes
  8180 ;; Hardware stack levels used:    1
  8181 ;; This function calls:
  8182 ;;		Nothing
  8183 ;; This function is called by:
  8184 ;;		i2_printf
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           	psect	text32
  8189  002AEE                     __ptext32:
  8190                           	opt stack 0
  8191  002AEE                     i2___lwmod:
  8192                           	opt stack 24
  8193                           
  8194                           ;incstack = 0
  8195  002AEE  500A               	movf	i2___lwmod@divisor,w,c
  8196  002AF0  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8197  002AF2  B4D8               	btfsc	status,2,c
  8198  002AF4  D018               	goto	i2l905
  8199  002AF6  0E01               	movlw	1
  8200  002AF8  6E0C               	movwf	i2___lwmod@counter,c
  8201  002AFA  D004               	goto	i2l3983
  8202  002AFC                     i2l3981:
  8203  002AFC  90D8               	bcf	status,0,c
  8204  002AFE  360A               	rlcf	i2___lwmod@divisor,f,c
  8205  002B00  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8206  002B02  2A0C               	incf	i2___lwmod@counter,f,c
  8207  002B04                     i2l3983:
  8208  002B04  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8209  002B06  D7FA               	goto	i2l3981
  8210  002B08                     i2l3985:
  8211  002B08  500A               	movf	i2___lwmod@divisor,w,c
  8212  002B0A  5C08               	subwf	i2___lwmod@dividend,w,c
  8213  002B0C  500B               	movf	i2___lwmod@divisor+1,w,c
  8214  002B0E  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8215  002B10  A0D8               	btfss	status,0,c
  8216  002B12  D004               	goto	i2l3989
  8217  002B14  500A               	movf	i2___lwmod@divisor,w,c
  8218  002B16  5E08               	subwf	i2___lwmod@dividend,f,c
  8219  002B18  500B               	movf	i2___lwmod@divisor+1,w,c
  8220  002B1A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8221  002B1C                     i2l3989:
  8222  002B1C  90D8               	bcf	status,0,c
  8223  002B1E  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8224  002B20  320A               	rrcf	i2___lwmod@divisor,f,c
  8225  002B22  2E0C               	decfsz	i2___lwmod@counter,f,c
  8226  002B24  D7F1               	goto	i2l3985
  8227  002B26                     i2l905:
  8228  002B26  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8229  002B2A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8230  002B2E  0012               	return		;funcret
  8231  002B30                     __end_ofi2___lwmod:
  8232                           	opt stack 0
  8233                           pclatu	equ	0xFFB
  8234                           pclath	equ	0xFFA
  8235                           tblptru	equ	0xFF8
  8236                           tblptrh	equ	0xFF7
  8237                           tblptrl	equ	0xFF6
  8238                           tablat	equ	0xFF5
  8239                           prodh	equ	0xFF4
  8240                           prodl	equ	0xFF3
  8241                           intcon	equ	0xFF2
  8242                           intcon2	equ	0xFF1
  8243                           intcon3	equ	0xFF0
  8244                           postinc0	equ	0xFEE
  8245                           fsr0h	equ	0xFEA
  8246                           fsr0l	equ	0xFE9
  8247                           wreg	equ	0xFE8
  8248                           fsr1h	equ	0xFE2
  8249                           fsr1l	equ	0xFE1
  8250                           indf2	equ	0xFDF
  8251                           postinc2	equ	0xFDE
  8252                           postdec2	equ	0xFDD
  8253                           fsr2h	equ	0xFDA
  8254                           fsr2l	equ	0xFD9
  8255                           status	equ	0xFD8
  8256                           
  8257 ;; *************** function i2___lwdiv *****************
  8258 ;; Defined at:
  8259 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  dividend        2    0[COMRAM] unsigned int 
  8262 ;;  divisor         2    2[COMRAM] unsigned int 
  8263 ;; Auto vars:     Size  Location     Type
  8264 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8265 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8266 ;; Return value:  Size  Location     Type
  8267 ;;                  2    0[COMRAM] unsigned int 
  8268 ;; Registers used:
  8269 ;;		wreg, status,2, status,0
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8276 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;Total ram usage:        7 bytes
  8280 ;; Hardware stack levels used:    1
  8281 ;; This function calls:
  8282 ;;		Nothing
  8283 ;; This function is called by:
  8284 ;;		i2_printf
  8285 ;; This function uses a non-reentrant model
  8286 ;;
  8287                           
  8288                           	psect	text33
  8289  0029FE                     __ptext33:
  8290                           	opt stack 0
  8291  0029FE                     i2___lwdiv:
  8292                           	opt stack 24
  8293                           
  8294                           ;incstack = 0
  8295  0029FE  0E00               	movlw	0
  8296  002A00  6E06               	movwf	i2___lwdiv@quotient+1,c
  8297  002A02  0E00               	movlw	0
  8298  002A04  6E05               	movwf	i2___lwdiv@quotient,c
  8299  002A06  5003               	movf	i2___lwdiv@divisor,w,c
  8300  002A08  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8301  002A0A  B4D8               	btfsc	status,2,c
  8302  002A0C  D01C               	goto	i2l895
  8303  002A0E  0E01               	movlw	1
  8304  002A10  6E07               	movwf	i2___lwdiv@counter,c
  8305  002A12  D004               	goto	i2l3963
  8306  002A14                     i2l3961:
  8307  002A14  90D8               	bcf	status,0,c
  8308  002A16  3603               	rlcf	i2___lwdiv@divisor,f,c
  8309  002A18  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8310  002A1A  2A07               	incf	i2___lwdiv@counter,f,c
  8311  002A1C                     i2l3963:
  8312  002A1C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8313  002A1E  D7FA               	goto	i2l3961
  8314  002A20                     i2l3965:
  8315  002A20  90D8               	bcf	status,0,c
  8316  002A22  3605               	rlcf	i2___lwdiv@quotient,f,c
  8317  002A24  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8318  002A26  5003               	movf	i2___lwdiv@divisor,w,c
  8319  002A28  5C01               	subwf	i2___lwdiv@dividend,w,c
  8320  002A2A  5004               	movf	i2___lwdiv@divisor+1,w,c
  8321  002A2C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8322  002A2E  A0D8               	btfss	status,0,c
  8323  002A30  D005               	goto	i2l3973
  8324  002A32  5003               	movf	i2___lwdiv@divisor,w,c
  8325  002A34  5E01               	subwf	i2___lwdiv@dividend,f,c
  8326  002A36  5004               	movf	i2___lwdiv@divisor+1,w,c
  8327  002A38  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8328  002A3A  8005               	bsf	i2___lwdiv@quotient,0,c
  8329  002A3C                     i2l3973:
  8330  002A3C  90D8               	bcf	status,0,c
  8331  002A3E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8332  002A40  3203               	rrcf	i2___lwdiv@divisor,f,c
  8333  002A42  2E07               	decfsz	i2___lwdiv@counter,f,c
  8334  002A44  D7ED               	goto	i2l3965
  8335  002A46                     i2l895:
  8336  002A46  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8337  002A4A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8338  002A4E  0012               	return		;funcret
  8339  002A50                     __end_ofi2___lwdiv:
  8340                           	opt stack 0
  8341                           pclatu	equ	0xFFB
  8342                           pclath	equ	0xFFA
  8343                           tblptru	equ	0xFF8
  8344                           tblptrh	equ	0xFF7
  8345                           tblptrl	equ	0xFF6
  8346                           tablat	equ	0xFF5
  8347                           prodh	equ	0xFF4
  8348                           prodl	equ	0xFF3
  8349                           intcon	equ	0xFF2
  8350                           intcon2	equ	0xFF1
  8351                           intcon3	equ	0xFF0
  8352                           postinc0	equ	0xFEE
  8353                           fsr0h	equ	0xFEA
  8354                           fsr0l	equ	0xFE9
  8355                           wreg	equ	0xFE8
  8356                           fsr1h	equ	0xFE2
  8357                           fsr1l	equ	0xFE1
  8358                           indf2	equ	0xFDF
  8359                           postinc2	equ	0xFDE
  8360                           postdec2	equ	0xFDD
  8361                           fsr2h	equ	0xFDA
  8362                           fsr2l	equ	0xFD9
  8363                           status	equ	0xFD8
  8364                           
  8365 ;; *************** function i2_lcdInst *****************
  8366 ;; Defined at:
  8367 ;;		line 26 in file "lcd.c"
  8368 ;; Parameters:    Size  Location     Type
  8369 ;;  data            1    wreg     unsigned char 
  8370 ;; Auto vars:     Size  Location     Type
  8371 ;;  data            1    2[COMRAM] unsigned char 
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  1    wreg      void 
  8374 ;; Registers used:
  8375 ;;		wreg, status,2, status,0, cstack
  8376 ;; Tracked objects:
  8377 ;;		On entry : 0/0
  8378 ;;		On exit  : 0/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8385 ;;Total ram usage:        1 bytes
  8386 ;; Hardware stack levels used:    1
  8387 ;; Hardware stack levels required when called:    1
  8388 ;; This function calls:
  8389 ;;		i2_lcdNibble
  8390 ;; This function is called by:
  8391 ;;		_isr
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           	psect	text34
  8396  002DC4                     __ptext34:
  8397                           	opt stack 0
  8398  002DC4                     i2_lcdInst:
  8399                           	opt stack 24
  8400                           
  8401                           ;incstack = 0
  8402                           ;i2lcdInst@data stored from wreg
  8403  002DC4  6E03               	movwf	i2lcdInst@data,c
  8404                           
  8405                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  8406  002DC6  948C               	bcf	3980,2,c	;volatile
  8407                           
  8408                           ;lcd.c: 28: lcdNibble(data);
  8409  002DC8  5003               	movf	i2lcdInst@data,w,c
  8410  002DCA  EC50  F015         	call	i2_lcdNibble
  8411  002DCE  0012               	return		;funcret
  8412  002DD0                     __end_ofi2_lcdInst:
  8413                           	opt stack 0
  8414                           pclatu	equ	0xFFB
  8415                           pclath	equ	0xFFA
  8416                           tblptru	equ	0xFF8
  8417                           tblptrh	equ	0xFF7
  8418                           tblptrl	equ	0xFF6
  8419                           tablat	equ	0xFF5
  8420                           prodh	equ	0xFF4
  8421                           prodl	equ	0xFF3
  8422                           intcon	equ	0xFF2
  8423                           intcon2	equ	0xFF1
  8424                           intcon3	equ	0xFF0
  8425                           postinc0	equ	0xFEE
  8426                           fsr0h	equ	0xFEA
  8427                           fsr0l	equ	0xFE9
  8428                           wreg	equ	0xFE8
  8429                           fsr1h	equ	0xFE2
  8430                           fsr1l	equ	0xFE1
  8431                           indf2	equ	0xFDF
  8432                           postinc2	equ	0xFDE
  8433                           postdec2	equ	0xFDD
  8434                           fsr2h	equ	0xFDA
  8435                           fsr2l	equ	0xFD9
  8436                           status	equ	0xFD8
  8437                           
  8438 ;; *************** function i2_lcdNibble *****************
  8439 ;; Defined at:
  8440 ;;		line 36 in file "lcd.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  data            1    wreg     unsigned char 
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;  data            1    1[COMRAM] unsigned char 
  8445 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8446 ;; Return value:  Size  Location     Type
  8447 ;;                  1    wreg      void 
  8448 ;; Registers used:
  8449 ;;		wreg, status,2, status,0
  8450 ;; Tracked objects:
  8451 ;;		On entry : 0/0
  8452 ;;		On exit  : 0/0
  8453 ;;		Unchanged: 0/0
  8454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8456 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;Total ram usage:        2 bytes
  8460 ;; Hardware stack levels used:    1
  8461 ;; This function calls:
  8462 ;;		Nothing
  8463 ;; This function is called by:
  8464 ;;		i2_lcdInst
  8465 ;;		i2_putch
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           	psect	text35
  8470  002AA0                     __ptext35:
  8471                           	opt stack 0
  8472  002AA0                     i2_lcdNibble:
  8473                           	opt stack 23
  8474                           
  8475                           ;incstack = 0
  8476                           ;i2lcdNibble@data stored from wreg
  8477  002AA0  6E02               	movwf	i2lcdNibble@data,c
  8478                           
  8479                           ;lcd.c: 38: char temp = data & 0xF0;
  8480  002AA2  5002               	movf	i2lcdNibble@data,w,c
  8481  002AA4  0BF0               	andlw	240
  8482  002AA6  6E01               	movwf	i2lcdNibble@temp,c
  8483                           
  8484                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8485  002AA8  508C               	movf	3980,w,c	;volatile
  8486  002AAA  0B0F               	andlw	15
  8487  002AAC  6E8C               	movwf	3980,c	;volatile
  8488                           
  8489                           ;lcd.c: 40: LATD = temp | LATD;
  8490  002AAE  5001               	movf	i2lcdNibble@temp,w,c
  8491  002AB0  108C               	iorwf	3980,w,c	;volatile
  8492  002AB2  6E8C               	movwf	3980,c	;volatile
  8493                           
  8494                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  8495  002AB4  968C               	bcf	3980,3,c	;volatile
  8496                           
  8497                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8498  002AB6  0E19               	movlw	25
  8499  002AB8                     i2u492_47:
  8500  002AB8  2EE8               	decfsz	wreg,f,c
  8501  002ABA  D7FE               	bra	i2u492_47
  8502                           
  8503                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  8504  002ABC  868C               	bsf	3980,3,c	;volatile
  8505                           
  8506                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8507  002ABE  0E19               	movlw	25
  8508  002AC0                     i2u493_47:
  8509  002AC0  2EE8               	decfsz	wreg,f,c
  8510  002AC2  D7FE               	bra	i2u493_47
  8511                           
  8512                           ;lcd.c: 47: data = data << 4;
  8513  002AC4  3802               	swapf	i2lcdNibble@data,w,c
  8514  002AC6  0BF0               	andlw	240
  8515  002AC8  6E02               	movwf	i2lcdNibble@data,c
  8516                           
  8517                           ;lcd.c: 49: temp = data & 0xF0;
  8518  002ACA  5002               	movf	i2lcdNibble@data,w,c
  8519  002ACC  0BF0               	andlw	240
  8520  002ACE  6E01               	movwf	i2lcdNibble@temp,c
  8521                           
  8522                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8523  002AD0  508C               	movf	3980,w,c	;volatile
  8524  002AD2  0B0F               	andlw	15
  8525  002AD4  6E8C               	movwf	3980,c	;volatile
  8526                           
  8527                           ;lcd.c: 51: LATD = temp | LATD;
  8528  002AD6  5001               	movf	i2lcdNibble@temp,w,c
  8529  002AD8  108C               	iorwf	3980,w,c	;volatile
  8530  002ADA  6E8C               	movwf	3980,c	;volatile
  8531                           
  8532                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8533  002ADC  968C               	bcf	3980,3,c	;volatile
  8534                           
  8535                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8536  002ADE  0E19               	movlw	25
  8537  002AE0                     i2u494_47:
  8538  002AE0  2EE8               	decfsz	wreg,f,c
  8539  002AE2  D7FE               	bra	i2u494_47
  8540                           
  8541                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8542  002AE4  868C               	bsf	3980,3,c	;volatile
  8543                           
  8544                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8545  002AE6  0E19               	movlw	25
  8546  002AE8                     i2u495_47:
  8547  002AE8  2EE8               	decfsz	wreg,f,c
  8548  002AEA  D7FE               	bra	i2u495_47
  8549  002AEC  0012               	return		;funcret
  8550  002AEE                     __end_ofi2_lcdNibble:
  8551                           	opt stack 0
  8552                           pclatu	equ	0xFFB
  8553                           pclath	equ	0xFFA
  8554                           tblptru	equ	0xFF8
  8555                           tblptrh	equ	0xFF7
  8556                           tblptrl	equ	0xFF6
  8557                           tablat	equ	0xFF5
  8558                           prodh	equ	0xFF4
  8559                           prodl	equ	0xFF3
  8560                           intcon	equ	0xFF2
  8561                           intcon2	equ	0xFF1
  8562                           intcon3	equ	0xFF0
  8563                           postinc0	equ	0xFEE
  8564                           fsr0h	equ	0xFEA
  8565                           fsr0l	equ	0xFE9
  8566                           wreg	equ	0xFE8
  8567                           fsr1h	equ	0xFE2
  8568                           fsr1l	equ	0xFE1
  8569                           indf2	equ	0xFDF
  8570                           postinc2	equ	0xFDE
  8571                           postdec2	equ	0xFDD
  8572                           fsr2h	equ	0xFDA
  8573                           fsr2l	equ	0xFD9
  8574                           status	equ	0xFD8
  8575                           
  8576 ;; *************** function _servo_rotate2 *****************
  8577 ;; Defined at:
  8578 ;;		line 521 in file "main.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;  degree          2   14[COMRAM] int 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  j               2   22[COMRAM] unsigned int 
  8583 ;;  i               2   20[COMRAM] unsigned int 
  8584 ;;  duty            2   18[COMRAM] int 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  1    wreg      void 
  8587 ;; Registers used:
  8588 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8589 ;; Tracked objects:
  8590 ;;		On entry : 0/0
  8591 ;;		On exit  : 0/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8594 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;Total ram usage:       10 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    1
  8601 ;; This function calls:
  8602 ;;		___awdiv
  8603 ;;		i2___wmul
  8604 ;; This function is called by:
  8605 ;;		_isr
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text36
  8610  00223C                     __ptext36:
  8611                           	opt stack 0
  8612  00223C                     _servo_rotate2:
  8613                           	opt stack 24
  8614                           
  8615                           ;main.c: 522: unsigned int i;
  8616                           ;main.c: 523: unsigned int j;
  8617                           ;main.c: 524: int duty = ((degree+90)*5/90)+10;
  8618                           
  8619                           ;incstack = 0
  8620  00223C  0E5A               	movlw	90
  8621  00223E  240F               	addwf	servo_rotate2@degree,w,c
  8622  002240  6E01               	movwf	i2___wmul@multiplier,c
  8623  002242  0E00               	movlw	0
  8624  002244  2010               	addwfc	servo_rotate2@degree+1,w,c
  8625  002246  6E02               	movwf	i2___wmul@multiplier+1,c
  8626  002248  0E00               	movlw	0
  8627  00224A  6E04               	movwf	i2___wmul@multiplicand+1,c
  8628  00224C  0E05               	movlw	5
  8629  00224E  6E03               	movwf	i2___wmul@multiplicand,c
  8630  002250  EC68  F016         	call	i2___wmul	;wreg free
  8631  002254  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8632  002258  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8633  00225C  0E00               	movlw	0
  8634  00225E  6E0A               	movwf	___awdiv@divisor+1,c
  8635  002260  0E5A               	movlw	90
  8636  002262  6E09               	movwf	___awdiv@divisor,c
  8637  002264  EC52  F013         	call	___awdiv	;wreg free
  8638  002268  0E0A               	movlw	10
  8639  00226A  2407               	addwf	?___awdiv,w,c
  8640  00226C  6E13               	movwf	servo_rotate2@duty,c
  8641  00226E  0E00               	movlw	0
  8642  002270  2008               	addwfc	?___awdiv+1,w,c
  8643  002272  6E14               	movwf	servo_rotate2@duty+1,c
  8644                           
  8645                           ;main.c: 525: for (i=0; i<50; i++) {
  8646  002274  0E00               	movlw	0
  8647  002276  6E16               	movwf	servo_rotate2@i+1,c
  8648  002278  0E00               	movlw	0
  8649  00227A  6E15               	movwf	servo_rotate2@i,c
  8650  00227C                     i2l4211:
  8651  00227C  5016               	movf	servo_rotate2@i+1,w,c
  8652  00227E  E137               	bnz	i2l408
  8653  002280  0E32               	movlw	50
  8654  002282  5C15               	subwf	servo_rotate2@i,w,c
  8655  002284  B0D8               	btfsc	status,0,c
  8656  002286  0012               	return	
  8657                           
  8658                           ;main.c: 526: LATCbits.LATC2 = 1;
  8659  002288  848B               	bsf	3979,2,c	;volatile
  8660                           
  8661                           ;main.c: 527: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8662  00228A  0E00               	movlw	0
  8663  00228C  6E18               	movwf	servo_rotate2@j+1,c
  8664  00228E  0E00               	movlw	0
  8665  002290  6E17               	movwf	servo_rotate2@j,c
  8666  002292  D006               	goto	i2l402
  8667  002294                     i2l4217:
  8668  002294  0E53               	movlw	83
  8669  002296                     i2u496_47:
  8670  002296  2EE8               	decfsz	wreg,f,c
  8671  002298  D7FE               	bra	i2u496_47
  8672  00229A  F000               	nop	
  8673  00229C  4A17               	infsnz	servo_rotate2@j,f,c
  8674  00229E  2A18               	incf	servo_rotate2@j+1,f,c
  8675  0022A0                     i2l402:
  8676  0022A0  5013               	movf	servo_rotate2@duty,w,c
  8677  0022A2  5C17               	subwf	servo_rotate2@j,w,c
  8678  0022A4  5014               	movf	servo_rotate2@duty+1,w,c
  8679  0022A6  5818               	subwfb	servo_rotate2@j+1,w,c
  8680  0022A8  A0D8               	btfss	status,0,c
  8681  0022AA  D7F4               	goto	i2l4217
  8682                           
  8683                           ;main.c: 528: LATCbits.LATC2 = 0;
  8684  0022AC  948B               	bcf	3979,2,c	;volatile
  8685                           
  8686                           ;main.c: 529: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8687  0022AE  0E00               	movlw	0
  8688  0022B0  6E18               	movwf	servo_rotate2@j+1,c
  8689  0022B2  0E00               	movlw	0
  8690  0022B4  6E17               	movwf	servo_rotate2@j,c
  8691  0022B6  D006               	goto	i2l405
  8692  0022B8                     i2l4223:
  8693  0022B8  0E53               	movlw	83
  8694  0022BA                     i2u497_47:
  8695  0022BA  2EE8               	decfsz	wreg,f,c
  8696  0022BC  D7FE               	bra	i2u497_47
  8697  0022BE  F000               	nop	
  8698  0022C0  4A17               	infsnz	servo_rotate2@j,f,c
  8699  0022C2  2A18               	incf	servo_rotate2@j+1,f,c
  8700  0022C4                     i2l405:
  8701  0022C4  C013  F011         	movff	servo_rotate2@duty,??_servo_rotate2
  8702  0022C8  C014  F012         	movff	servo_rotate2@duty+1,??_servo_rotate2+1
  8703  0022CC  1E11               	comf	??_servo_rotate2,f,c
  8704  0022CE  1E12               	comf	??_servo_rotate2+1,f,c
  8705  0022D0  4A11               	infsnz	??_servo_rotate2,f,c
  8706  0022D2  2A12               	incf	??_servo_rotate2+1,f,c
  8707  0022D4  0EC8               	movlw	200
  8708  0022D6  2611               	addwf	??_servo_rotate2,f,c
  8709  0022D8  0E00               	movlw	0
  8710  0022DA  2212               	addwfc	??_servo_rotate2+1,f,c
  8711  0022DC  5011               	movf	??_servo_rotate2,w,c
  8712  0022DE  5C17               	subwf	servo_rotate2@j,w,c
  8713  0022E0  5012               	movf	??_servo_rotate2+1,w,c
  8714  0022E2  5818               	subwfb	servo_rotate2@j+1,w,c
  8715  0022E4  A0D8               	btfss	status,0,c
  8716  0022E6  D7E8               	goto	i2l4223
  8717  0022E8  4A15               	infsnz	servo_rotate2@i,f,c
  8718  0022EA  2A16               	incf	servo_rotate2@i+1,f,c
  8719  0022EC  D7C7               	goto	i2l4211
  8720  0022EE                     i2l408:
  8721  0022EE  0012               	return		;funcret
  8722  0022F0                     __end_of_servo_rotate2:
  8723                           	opt stack 0
  8724                           pclatu	equ	0xFFB
  8725                           pclath	equ	0xFFA
  8726                           tblptru	equ	0xFF8
  8727                           tblptrh	equ	0xFF7
  8728                           tblptrl	equ	0xFF6
  8729                           tablat	equ	0xFF5
  8730                           prodh	equ	0xFF4
  8731                           prodl	equ	0xFF3
  8732                           intcon	equ	0xFF2
  8733                           intcon2	equ	0xFF1
  8734                           intcon3	equ	0xFF0
  8735                           postinc0	equ	0xFEE
  8736                           fsr0h	equ	0xFEA
  8737                           fsr0l	equ	0xFE9
  8738                           wreg	equ	0xFE8
  8739                           fsr1h	equ	0xFE2
  8740                           fsr1l	equ	0xFE1
  8741                           indf2	equ	0xFDF
  8742                           postinc2	equ	0xFDE
  8743                           postdec2	equ	0xFDD
  8744                           fsr2h	equ	0xFDA
  8745                           fsr2l	equ	0xFD9
  8746                           status	equ	0xFD8
  8747                           
  8748 ;; *************** function _servo_rotate1 *****************
  8749 ;; Defined at:
  8750 ;;		line 508 in file "main.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;  degree          2   14[COMRAM] int 
  8753 ;; Auto vars:     Size  Location     Type
  8754 ;;  j               2   22[COMRAM] unsigned int 
  8755 ;;  i               2   20[COMRAM] unsigned int 
  8756 ;;  duty            2   18[COMRAM] int 
  8757 ;; Return value:  Size  Location     Type
  8758 ;;                  1    wreg      void 
  8759 ;; Registers used:
  8760 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8761 ;; Tracked objects:
  8762 ;;		On entry : 0/0
  8763 ;;		On exit  : 0/0
  8764 ;;		Unchanged: 0/0
  8765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;Total ram usage:       10 bytes
  8771 ;; Hardware stack levels used:    1
  8772 ;; Hardware stack levels required when called:    1
  8773 ;; This function calls:
  8774 ;;		___awdiv
  8775 ;;		i2___wmul
  8776 ;; This function is called by:
  8777 ;;		_isr
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           	psect	text37
  8782  0022F0                     __ptext37:
  8783                           	opt stack 0
  8784  0022F0                     _servo_rotate1:
  8785                           	opt stack 24
  8786                           
  8787                           ;main.c: 509: unsigned int i;
  8788                           ;main.c: 510: unsigned int j;
  8789                           ;main.c: 511: int duty = ((degree+90)*5/90)+10;
  8790                           
  8791                           ;incstack = 0
  8792  0022F0  0E5A               	movlw	90
  8793  0022F2  240F               	addwf	servo_rotate1@degree,w,c
  8794  0022F4  6E01               	movwf	i2___wmul@multiplier,c
  8795  0022F6  0E00               	movlw	0
  8796  0022F8  2010               	addwfc	servo_rotate1@degree+1,w,c
  8797  0022FA  6E02               	movwf	i2___wmul@multiplier+1,c
  8798  0022FC  0E00               	movlw	0
  8799  0022FE  6E04               	movwf	i2___wmul@multiplicand+1,c
  8800  002300  0E05               	movlw	5
  8801  002302  6E03               	movwf	i2___wmul@multiplicand,c
  8802  002304  EC68  F016         	call	i2___wmul	;wreg free
  8803  002308  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8804  00230C  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8805  002310  0E00               	movlw	0
  8806  002312  6E0A               	movwf	___awdiv@divisor+1,c
  8807  002314  0E5A               	movlw	90
  8808  002316  6E09               	movwf	___awdiv@divisor,c
  8809  002318  EC52  F013         	call	___awdiv	;wreg free
  8810  00231C  0E0A               	movlw	10
  8811  00231E  2407               	addwf	?___awdiv,w,c
  8812  002320  6E13               	movwf	servo_rotate1@duty,c
  8813  002322  0E00               	movlw	0
  8814  002324  2008               	addwfc	?___awdiv+1,w,c
  8815  002326  6E14               	movwf	servo_rotate1@duty+1,c
  8816                           
  8817                           ;main.c: 512: for (i=0; i<50; i++) {
  8818  002328  0E00               	movlw	0
  8819  00232A  6E16               	movwf	servo_rotate1@i+1,c
  8820  00232C  0E00               	movlw	0
  8821  00232E  6E15               	movwf	servo_rotate1@i,c
  8822  002330                     i2l4235:
  8823  002330  5016               	movf	servo_rotate1@i+1,w,c
  8824  002332  E137               	bnz	i2l397
  8825  002334  0E32               	movlw	50
  8826  002336  5C15               	subwf	servo_rotate1@i,w,c
  8827  002338  B0D8               	btfsc	status,0,c
  8828  00233A  0012               	return	
  8829                           
  8830                           ;main.c: 513: LATCbits.LATC1 = 1;
  8831  00233C  828B               	bsf	3979,1,c	;volatile
  8832                           
  8833                           ;main.c: 514: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8834  00233E  0E00               	movlw	0
  8835  002340  6E18               	movwf	servo_rotate1@j+1,c
  8836  002342  0E00               	movlw	0
  8837  002344  6E17               	movwf	servo_rotate1@j,c
  8838  002346  D006               	goto	i2l391
  8839  002348                     i2l4241:
  8840  002348  0E53               	movlw	83
  8841  00234A                     i2u498_47:
  8842  00234A  2EE8               	decfsz	wreg,f,c
  8843  00234C  D7FE               	bra	i2u498_47
  8844  00234E  F000               	nop	
  8845  002350  4A17               	infsnz	servo_rotate1@j,f,c
  8846  002352  2A18               	incf	servo_rotate1@j+1,f,c
  8847  002354                     i2l391:
  8848  002354  5013               	movf	servo_rotate1@duty,w,c
  8849  002356  5C17               	subwf	servo_rotate1@j,w,c
  8850  002358  5014               	movf	servo_rotate1@duty+1,w,c
  8851  00235A  5818               	subwfb	servo_rotate1@j+1,w,c
  8852  00235C  A0D8               	btfss	status,0,c
  8853  00235E  D7F4               	goto	i2l4241
  8854                           
  8855                           ;main.c: 515: LATCbits.LATC1 = 0;
  8856  002360  928B               	bcf	3979,1,c	;volatile
  8857                           
  8858                           ;main.c: 516: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8859  002362  0E00               	movlw	0
  8860  002364  6E18               	movwf	servo_rotate1@j+1,c
  8861  002366  0E00               	movlw	0
  8862  002368  6E17               	movwf	servo_rotate1@j,c
  8863  00236A  D006               	goto	i2l394
  8864  00236C                     i2l4247:
  8865  00236C  0E53               	movlw	83
  8866  00236E                     i2u499_47:
  8867  00236E  2EE8               	decfsz	wreg,f,c
  8868  002370  D7FE               	bra	i2u499_47
  8869  002372  F000               	nop	
  8870  002374  4A17               	infsnz	servo_rotate1@j,f,c
  8871  002376  2A18               	incf	servo_rotate1@j+1,f,c
  8872  002378                     i2l394:
  8873  002378  C013  F011         	movff	servo_rotate1@duty,??_servo_rotate1
  8874  00237C  C014  F012         	movff	servo_rotate1@duty+1,??_servo_rotate1+1
  8875  002380  1E11               	comf	??_servo_rotate1,f,c
  8876  002382  1E12               	comf	??_servo_rotate1+1,f,c
  8877  002384  4A11               	infsnz	??_servo_rotate1,f,c
  8878  002386  2A12               	incf	??_servo_rotate1+1,f,c
  8879  002388  0EC8               	movlw	200
  8880  00238A  2611               	addwf	??_servo_rotate1,f,c
  8881  00238C  0E00               	movlw	0
  8882  00238E  2212               	addwfc	??_servo_rotate1+1,f,c
  8883  002390  5011               	movf	??_servo_rotate1,w,c
  8884  002392  5C17               	subwf	servo_rotate1@j,w,c
  8885  002394  5012               	movf	??_servo_rotate1+1,w,c
  8886  002396  5818               	subwfb	servo_rotate1@j+1,w,c
  8887  002398  A0D8               	btfss	status,0,c
  8888  00239A  D7E8               	goto	i2l4247
  8889  00239C  4A15               	infsnz	servo_rotate1@i,f,c
  8890  00239E  2A16               	incf	servo_rotate1@i+1,f,c
  8891  0023A0  D7C7               	goto	i2l4235
  8892  0023A2                     i2l397:
  8893  0023A2  0012               	return		;funcret
  8894  0023A4                     __end_of_servo_rotate1:
  8895                           	opt stack 0
  8896                           pclatu	equ	0xFFB
  8897                           pclath	equ	0xFFA
  8898                           tblptru	equ	0xFF8
  8899                           tblptrh	equ	0xFF7
  8900                           tblptrl	equ	0xFF6
  8901                           tablat	equ	0xFF5
  8902                           prodh	equ	0xFF4
  8903                           prodl	equ	0xFF3
  8904                           intcon	equ	0xFF2
  8905                           intcon2	equ	0xFF1
  8906                           intcon3	equ	0xFF0
  8907                           postinc0	equ	0xFEE
  8908                           fsr0h	equ	0xFEA
  8909                           fsr0l	equ	0xFE9
  8910                           wreg	equ	0xFE8
  8911                           fsr1h	equ	0xFE2
  8912                           fsr1l	equ	0xFE1
  8913                           indf2	equ	0xFDF
  8914                           postinc2	equ	0xFDE
  8915                           postdec2	equ	0xFDD
  8916                           fsr2h	equ	0xFDA
  8917                           fsr2l	equ	0xFD9
  8918                           status	equ	0xFD8
  8919                           
  8920 ;; *************** function _servo_rotate0 *****************
  8921 ;; Defined at:
  8922 ;;		line 495 in file "main.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;  degree          2    0[COMRAM] int 
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;  j               2    8[COMRAM] unsigned int 
  8927 ;;  i               2    6[COMRAM] unsigned int 
  8928 ;;  duty            2    4[COMRAM] int 
  8929 ;; Return value:  Size  Location     Type
  8930 ;;                  1    wreg      void 
  8931 ;; Registers used:
  8932 ;;		wreg, status,2, status,0
  8933 ;; Tracked objects:
  8934 ;;		On entry : 0/0
  8935 ;;		On exit  : 0/0
  8936 ;;		Unchanged: 0/0
  8937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8938 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8941 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8942 ;;Total ram usage:       10 bytes
  8943 ;; Hardware stack levels used:    1
  8944 ;; This function calls:
  8945 ;;		Nothing
  8946 ;; This function is called by:
  8947 ;;		_isr
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           	psect	text38
  8952  0024F4                     __ptext38:
  8953                           	opt stack 0
  8954  0024F4                     _servo_rotate0:
  8955                           	opt stack 25
  8956                           
  8957                           ;main.c: 496: unsigned int i;
  8958                           ;main.c: 497: unsigned int j;
  8959                           ;main.c: 498: int duty = degree;
  8960                           
  8961                           ;incstack = 0
  8962  0024F4  C001  F005         	movff	servo_rotate0@degree,servo_rotate0@duty
  8963  0024F8  C002  F006         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  8964                           
  8965                           ;main.c: 499: for (i=0; i<50; i++) {
  8966  0024FC  0E00               	movlw	0
  8967  0024FE  6E08               	movwf	servo_rotate0@i+1,c
  8968  002500  0E00               	movlw	0
  8969  002502  6E07               	movwf	servo_rotate0@i,c
  8970  002504                     i2l4187:
  8971  002504  5008               	movf	servo_rotate0@i+1,w,c
  8972  002506  E13D               	bnz	i2l386
  8973  002508  0E32               	movlw	50
  8974  00250A  5C07               	subwf	servo_rotate0@i,w,c
  8975  00250C  B0D8               	btfsc	status,0,c
  8976  00250E  0012               	return	
  8977                           
  8978                           ;main.c: 500: LATCbits.LATC0 = 1;
  8979  002510  808B               	bsf	3979,0,c	;volatile
  8980                           
  8981                           ;main.c: 501: for(j=0; j<duty; j++) _delay((unsigned long)((1)*(10000000/4000.0)));
  8982  002512  0E00               	movlw	0
  8983  002514  6E0A               	movwf	servo_rotate0@j+1,c
  8984  002516  0E00               	movlw	0
  8985  002518  6E09               	movwf	servo_rotate0@j,c
  8986  00251A  D009               	goto	i2l380
  8987  00251C                     i2l4193:
  8988  00251C  0E04               	movlw	4
  8989  00251E  6E03               	movwf	??_servo_rotate0& (0+255),c
  8990  002520  0E3E               	movlw	62
  8991  002522                     i2u500_47:
  8992  002522  2EE8               	decfsz	wreg,f,c
  8993  002524  D7FE               	bra	i2u500_47
  8994  002526  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8995  002528  D7FC               	bra	i2u500_47
  8996  00252A  4A09               	infsnz	servo_rotate0@j,f,c
  8997  00252C  2A0A               	incf	servo_rotate0@j+1,f,c
  8998  00252E                     i2l380:
  8999  00252E  5005               	movf	servo_rotate0@duty,w,c
  9000  002530  5C09               	subwf	servo_rotate0@j,w,c
  9001  002532  5006               	movf	servo_rotate0@duty+1,w,c
  9002  002534  580A               	subwfb	servo_rotate0@j+1,w,c
  9003  002536  A0D8               	btfss	status,0,c
  9004  002538  D7F1               	goto	i2l4193
  9005                           
  9006                           ;main.c: 502: LATCbits.LATC0 = 0;
  9007  00253A  908B               	bcf	3979,0,c	;volatile
  9008                           
  9009                           ;main.c: 503: for(j=0; j<(20 - duty); j++) _delay((unsigned long)((1)*(10000000/4000.0))
      +                          );
  9010  00253C  0E00               	movlw	0
  9011  00253E  6E0A               	movwf	servo_rotate0@j+1,c
  9012  002540  0E00               	movlw	0
  9013  002542  6E09               	movwf	servo_rotate0@j,c
  9014  002544  D009               	goto	i2l383
  9015  002546                     i2l4199:
  9016  002546  0E04               	movlw	4
  9017  002548  6E03               	movwf	??_servo_rotate0& (0+255),c
  9018  00254A  0E3E               	movlw	62
  9019  00254C                     i2u501_47:
  9020  00254C  2EE8               	decfsz	wreg,f,c
  9021  00254E  D7FE               	bra	i2u501_47
  9022  002550  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  9023  002552  D7FC               	bra	i2u501_47
  9024  002554  4A09               	infsnz	servo_rotate0@j,f,c
  9025  002556  2A0A               	incf	servo_rotate0@j+1,f,c
  9026  002558                     i2l383:
  9027  002558  C005  F003         	movff	servo_rotate0@duty,??_servo_rotate0
  9028  00255C  C006  F004         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  9029  002560  1E03               	comf	??_servo_rotate0,f,c
  9030  002562  1E04               	comf	??_servo_rotate0+1,f,c
  9031  002564  4A03               	infsnz	??_servo_rotate0,f,c
  9032  002566  2A04               	incf	??_servo_rotate0+1,f,c
  9033  002568  0E14               	movlw	20
  9034  00256A  2603               	addwf	??_servo_rotate0,f,c
  9035  00256C  0E00               	movlw	0
  9036  00256E  2204               	addwfc	??_servo_rotate0+1,f,c
  9037  002570  5003               	movf	??_servo_rotate0,w,c
  9038  002572  5C09               	subwf	servo_rotate0@j,w,c
  9039  002574  5004               	movf	??_servo_rotate0+1,w,c
  9040  002576  580A               	subwfb	servo_rotate0@j+1,w,c
  9041  002578  A0D8               	btfss	status,0,c
  9042  00257A  D7E5               	goto	i2l4199
  9043  00257C  4A07               	infsnz	servo_rotate0@i,f,c
  9044  00257E  2A08               	incf	servo_rotate0@i+1,f,c
  9045  002580  D7C1               	goto	i2l4187
  9046  002582                     i2l386:
  9047  002582  0012               	return		;funcret
  9048  002584                     __end_of_servo_rotate0:
  9049                           	opt stack 0
  9050                           pclatu	equ	0xFFB
  9051                           pclath	equ	0xFFA
  9052                           tblptru	equ	0xFF8
  9053                           tblptrh	equ	0xFF7
  9054                           tblptrl	equ	0xFF6
  9055                           tablat	equ	0xFF5
  9056                           prodh	equ	0xFF4
  9057                           prodl	equ	0xFF3
  9058                           intcon	equ	0xFF2
  9059                           intcon2	equ	0xFF1
  9060                           intcon3	equ	0xFF0
  9061                           postinc0	equ	0xFEE
  9062                           fsr0h	equ	0xFEA
  9063                           fsr0l	equ	0xFE9
  9064                           wreg	equ	0xFE8
  9065                           fsr1h	equ	0xFE2
  9066                           fsr1l	equ	0xFE1
  9067                           indf2	equ	0xFDF
  9068                           postinc2	equ	0xFDE
  9069                           postdec2	equ	0xFDD
  9070                           fsr2h	equ	0xFDA
  9071                           fsr2l	equ	0xFD9
  9072                           status	equ	0xFD8
  9073                           
  9074 ;; *************** function _read_time *****************
  9075 ;; Defined at:
  9076 ;;		line 386 in file "main.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;		None
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;  i               1    3[COMRAM] unsigned char 
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  1    wreg      void 
  9083 ;; Registers used:
  9084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;Total ram usage:        1 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:    2
  9097 ;; This function calls:
  9098 ;;		i2_I2C_Master_Read
  9099 ;;		i2_I2C_Master_Start
  9100 ;;		i2_I2C_Master_Stop
  9101 ;;		i2_I2C_Master_Write
  9102 ;; This function is called by:
  9103 ;;		_isr
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           	psect	text39
  9108  002818                     __ptext39:
  9109                           	opt stack 0
  9110  002818                     _read_time:
  9111                           	opt stack 23
  9112                           
  9113                           ;main.c: 388: I2C_Master_Start();
  9114                           
  9115                           ;incstack = 0
  9116  002818  EC02  F017         	call	i2_I2C_Master_Start	;wreg free
  9117                           
  9118                           ;main.c: 389: I2C_Master_Write(0b11010000);
  9119  00281C  0E00               	movlw	0
  9120  00281E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9121  002820  0ED0               	movlw	208
  9122  002822  6E02               	movwf	i2I2C_Master_Write@d,c
  9123  002824  ECED  F016         	call	i2_I2C_Master_Write	;wreg free
  9124                           
  9125                           ;main.c: 390: I2C_Master_Write(0x00);
  9126  002828  0E00               	movlw	0
  9127  00282A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9128  00282C  0E00               	movlw	0
  9129  00282E  6E02               	movwf	i2I2C_Master_Write@d,c
  9130  002830  ECED  F016         	call	i2_I2C_Master_Write	;wreg free
  9131                           
  9132                           ;main.c: 391: I2C_Master_Stop();
  9133  002834  ECFE  F016         	call	i2_I2C_Master_Stop	;wreg free
  9134                           
  9135                           ;main.c: 394: I2C_Master_Start();
  9136  002838  EC02  F017         	call	i2_I2C_Master_Start	;wreg free
  9137                           
  9138                           ;main.c: 395: I2C_Master_Write(0b11010001);
  9139  00283C  0E00               	movlw	0
  9140  00283E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9141  002840  0ED1               	movlw	209
  9142  002842  6E02               	movwf	i2I2C_Master_Write@d,c
  9143  002844  ECED  F016         	call	i2_I2C_Master_Write	;wreg free
  9144                           
  9145                           ;main.c: 396: for(unsigned char i=0;i<0x06;i++){
  9146  002848  0E00               	movlw	0
  9147  00284A  6E04               	movwf	read_time@i,c
  9148  00284C                     i2l4151:
  9149  00284C  0E05               	movlw	5
  9150  00284E  6404               	cpfsgt	read_time@i,c
  9151  002850  D001               	goto	i2l4155
  9152  002852  D00E               	goto	i2l4161
  9153  002854                     i2l4155:
  9154                           
  9155                           ;main.c: 397: time[i] = I2C_Master_Read(1);
  9156  002854  5004               	movf	read_time@i,w,c
  9157  002856  0D01               	mullw	1
  9158  002858  0E9E               	movlw	low _time
  9159  00285A  24F3               	addwf	prodl,w,c
  9160  00285C  6ED9               	movwf	fsr2l,c
  9161  00285E  0E00               	movlw	high _time
  9162  002860  20F4               	addwfc	prodh,w,c
  9163  002862  6EDA               	movwf	fsr2h,c
  9164  002864  0E01               	movlw	1
  9165  002866  EC55  F016         	call	i2_I2C_Master_Read
  9166  00286A  6EDF               	movwf	indf2,c
  9167  00286C  2A04               	incf	read_time@i,f,c
  9168  00286E  D7EE               	goto	i2l4151
  9169  002870                     i2l4161:
  9170                           
  9171                           ;main.c: 398: }
  9172                           ;main.c: 399: time[6] = I2C_Master_Read(0);
  9173  002870  0E00               	movlw	0
  9174  002872  EC55  F016         	call	i2_I2C_Master_Read
  9175  002876  0100               	movlb	0	; () banked
  9176  002878  6FA4               	movwf	(_time+6)& (0+255),b
  9177                           
  9178                           ;main.c: 400: I2C_Master_Stop();
  9179  00287A  ECFE  F016         	call	i2_I2C_Master_Stop	;wreg free
  9180  00287E  0012               	return	
  9181  002880                     __end_of_read_time:
  9182                           	opt stack 0
  9183                           pclatu	equ	0xFFB
  9184                           pclath	equ	0xFFA
  9185                           tblptru	equ	0xFF8
  9186                           tblptrh	equ	0xFF7
  9187                           tblptrl	equ	0xFF6
  9188                           tablat	equ	0xFF5
  9189                           prodh	equ	0xFF4
  9190                           prodl	equ	0xFF3
  9191                           intcon	equ	0xFF2
  9192                           intcon2	equ	0xFF1
  9193                           intcon3	equ	0xFF0
  9194                           postinc0	equ	0xFEE
  9195                           fsr0h	equ	0xFEA
  9196                           fsr0l	equ	0xFE9
  9197                           wreg	equ	0xFE8
  9198                           fsr1h	equ	0xFE2
  9199                           fsr1l	equ	0xFE1
  9200                           indf2	equ	0xFDF
  9201                           postinc2	equ	0xFDE
  9202                           postdec2	equ	0xFDD
  9203                           fsr2h	equ	0xFDA
  9204                           fsr2l	equ	0xFD9
  9205                           status	equ	0xFD8
  9206                           
  9207 ;; *************** function i2_I2C_Master_Write *****************
  9208 ;; Defined at:
  9209 ;;		line 48 in file "I2C.c"
  9210 ;; Parameters:    Size  Location     Type
  9211 ;;  d               2    1[COMRAM] unsigned int 
  9212 ;; Auto vars:     Size  Location     Type
  9213 ;;		None
  9214 ;; Return value:  Size  Location     Type
  9215 ;;                  1    wreg      void 
  9216 ;; Registers used:
  9217 ;;		wreg, status,2, status,0, cstack
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;Total ram usage:        2 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:    1
  9230 ;; This function calls:
  9231 ;;		i2_I2C_Master_Wait
  9232 ;; This function is called by:
  9233 ;;		_read_time
  9234 ;;		i2_read_colorsensor
  9235 ;; This function uses a non-reentrant model
  9236 ;;
  9237                           
  9238                           	psect	text40
  9239  002DDA                     __ptext40:
  9240                           	opt stack 0
  9241  002DDA                     i2_I2C_Master_Write:
  9242                           	opt stack 23
  9243                           
  9244                           ;I2C.c: 50: I2C_Master_Wait();
  9245                           
  9246                           ;incstack = 0
  9247  002DDA  ECC3  F016         	call	i2_I2C_Master_Wait	;wreg free
  9248                           
  9249                           ;I2C.c: 51: SSPBUF = d;
  9250  002DDE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  9251  002DE2  0012               	return		;funcret
  9252  002DE4                     __end_ofi2_I2C_Master_Write:
  9253                           	opt stack 0
  9254                           pclatu	equ	0xFFB
  9255                           pclath	equ	0xFFA
  9256                           tblptru	equ	0xFF8
  9257                           tblptrh	equ	0xFF7
  9258                           tblptrl	equ	0xFF6
  9259                           tablat	equ	0xFF5
  9260                           prodh	equ	0xFF4
  9261                           prodl	equ	0xFF3
  9262                           intcon	equ	0xFF2
  9263                           intcon2	equ	0xFF1
  9264                           intcon3	equ	0xFF0
  9265                           postinc0	equ	0xFEE
  9266                           fsr0h	equ	0xFEA
  9267                           fsr0l	equ	0xFE9
  9268                           wreg	equ	0xFE8
  9269                           fsr1h	equ	0xFE2
  9270                           fsr1l	equ	0xFE1
  9271                           indf2	equ	0xFDF
  9272                           postinc2	equ	0xFDE
  9273                           postdec2	equ	0xFDD
  9274                           fsr2h	equ	0xFDA
  9275                           fsr2l	equ	0xFD9
  9276                           status	equ	0xFD8
  9277                           
  9278 ;; *************** function i2_I2C_Master_Stop *****************
  9279 ;; Defined at:
  9280 ;;		line 42 in file "I2C.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;		None
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;		None
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  1    wreg      void 
  9287 ;; Registers used:
  9288 ;;		wreg, status,2, status,0, cstack
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;Total ram usage:        0 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    1
  9301 ;; This function calls:
  9302 ;;		i2_I2C_Master_Wait
  9303 ;; This function is called by:
  9304 ;;		_read_time
  9305 ;;		i2_read_colorsensor
  9306 ;; This function uses a non-reentrant model
  9307 ;;
  9308                           
  9309                           	psect	text41
  9310  002DFC                     __ptext41:
  9311                           	opt stack 0
  9312  002DFC                     i2_I2C_Master_Stop:
  9313                           	opt stack 23
  9314                           
  9315                           ;I2C.c: 44: I2C_Master_Wait();
  9316                           
  9317                           ;incstack = 0
  9318  002DFC  ECC3  F016         	call	i2_I2C_Master_Wait	;wreg free
  9319                           
  9320                           ;I2C.c: 45: PEN = 1;
  9321  002E00  84C5               	bsf	4037,2,c	;volatile
  9322  002E02  0012               	return		;funcret
  9323  002E04                     __end_ofi2_I2C_Master_Stop:
  9324                           	opt stack 0
  9325                           pclatu	equ	0xFFB
  9326                           pclath	equ	0xFFA
  9327                           tblptru	equ	0xFF8
  9328                           tblptrh	equ	0xFF7
  9329                           tblptrl	equ	0xFF6
  9330                           tablat	equ	0xFF5
  9331                           prodh	equ	0xFF4
  9332                           prodl	equ	0xFF3
  9333                           intcon	equ	0xFF2
  9334                           intcon2	equ	0xFF1
  9335                           intcon3	equ	0xFF0
  9336                           postinc0	equ	0xFEE
  9337                           fsr0h	equ	0xFEA
  9338                           fsr0l	equ	0xFE9
  9339                           wreg	equ	0xFE8
  9340                           fsr1h	equ	0xFE2
  9341                           fsr1l	equ	0xFE1
  9342                           indf2	equ	0xFDF
  9343                           postinc2	equ	0xFDE
  9344                           postdec2	equ	0xFDD
  9345                           fsr2h	equ	0xFDA
  9346                           fsr2l	equ	0xFD9
  9347                           status	equ	0xFD8
  9348                           
  9349 ;; *************** function i2_I2C_Master_Start *****************
  9350 ;; Defined at:
  9351 ;;		line 30 in file "I2C.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;		None
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;		None
  9356 ;; Return value:  Size  Location     Type
  9357 ;;                  1    wreg      void 
  9358 ;; Registers used:
  9359 ;;		wreg, status,2, status,0, cstack
  9360 ;; Tracked objects:
  9361 ;;		On entry : 0/0
  9362 ;;		On exit  : 0/0
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9369 ;;Total ram usage:        0 bytes
  9370 ;; Hardware stack levels used:    1
  9371 ;; Hardware stack levels required when called:    1
  9372 ;; This function calls:
  9373 ;;		i2_I2C_Master_Wait
  9374 ;; This function is called by:
  9375 ;;		_read_time
  9376 ;;		i2_read_colorsensor
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           	psect	text42
  9381  002E04                     __ptext42:
  9382                           	opt stack 0
  9383  002E04                     i2_I2C_Master_Start:
  9384                           	opt stack 23
  9385                           
  9386                           ;I2C.c: 32: I2C_Master_Wait();
  9387                           
  9388                           ;incstack = 0
  9389  002E04  ECC3  F016         	call	i2_I2C_Master_Wait	;wreg free
  9390                           
  9391                           ;I2C.c: 33: SEN = 1;
  9392  002E08  80C5               	bsf	4037,0,c	;volatile
  9393  002E0A  0012               	return		;funcret
  9394  002E0C                     __end_ofi2_I2C_Master_Start:
  9395                           	opt stack 0
  9396                           pclatu	equ	0xFFB
  9397                           pclath	equ	0xFFA
  9398                           tblptru	equ	0xFF8
  9399                           tblptrh	equ	0xFF7
  9400                           tblptrl	equ	0xFF6
  9401                           tablat	equ	0xFF5
  9402                           prodh	equ	0xFF4
  9403                           prodl	equ	0xFF3
  9404                           intcon	equ	0xFF2
  9405                           intcon2	equ	0xFF1
  9406                           intcon3	equ	0xFF0
  9407                           postinc0	equ	0xFEE
  9408                           fsr0h	equ	0xFEA
  9409                           fsr0l	equ	0xFE9
  9410                           wreg	equ	0xFE8
  9411                           fsr1h	equ	0xFE2
  9412                           fsr1l	equ	0xFE1
  9413                           indf2	equ	0xFDF
  9414                           postinc2	equ	0xFDE
  9415                           postdec2	equ	0xFDD
  9416                           fsr2h	equ	0xFDA
  9417                           fsr2l	equ	0xFD9
  9418                           status	equ	0xFD8
  9419                           
  9420 ;; *************** function i2_I2C_Master_Read *****************
  9421 ;; Defined at:
  9422 ;;		line 76 in file "I2C.c"
  9423 ;; Parameters:    Size  Location     Type
  9424 ;;  a               1    wreg     unsigned char 
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;  a               1    1[COMRAM] unsigned char 
  9427 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9428 ;; Return value:  Size  Location     Type
  9429 ;;                  1    wreg      unsigned char 
  9430 ;; Registers used:
  9431 ;;		wreg, status,2, status,0, cstack
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9441 ;;Total ram usage:        2 bytes
  9442 ;; Hardware stack levels used:    1
  9443 ;; Hardware stack levels required when called:    1
  9444 ;; This function calls:
  9445 ;;		i2_I2C_Master_Wait
  9446 ;; This function is called by:
  9447 ;;		_read_time
  9448 ;;		i2_read_colorsensor
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           	psect	text43
  9453  002CAA                     __ptext43:
  9454                           	opt stack 0
  9455  002CAA                     i2_I2C_Master_Read:
  9456                           	opt stack 23
  9457                           
  9458                           ;incstack = 0
  9459                           ;i2I2C_Master_Read@a stored from wreg
  9460  002CAA  6E02               	movwf	i2I2C_Master_Read@a,c
  9461                           
  9462                           ;I2C.c: 78: unsigned char temp;
  9463                           ;I2C.c: 79: I2C_Master_Wait();
  9464  002CAC  ECC3  F016         	call	i2_I2C_Master_Wait	;wreg free
  9465                           
  9466                           ;I2C.c: 80: RCEN = 1;
  9467  002CB0  86C5               	bsf	4037,3,c	;volatile
  9468                           
  9469                           ;I2C.c: 81: I2C_Master_Wait();
  9470  002CB2  ECC3  F016         	call	i2_I2C_Master_Wait	;wreg free
  9471                           
  9472                           ;I2C.c: 82: temp = SSPBUF;
  9473  002CB6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9474                           
  9475                           ;I2C.c: 83: I2C_Master_Wait();
  9476  002CBA  ECC3  F016         	call	i2_I2C_Master_Wait	;wreg free
  9477                           
  9478                           ;I2C.c: 84: ACKDT = (a)?0:1;
  9479  002CBE  5002               	movf	i2I2C_Master_Read@a,w,c
  9480  002CC0  A4D8               	btfss	status,2,c
  9481  002CC2  D002               	goto	i2u367_40
  9482  002CC4  8AC5               	bsf	4037,5,c	;volatile
  9483  002CC6  D001               	goto	i2l3933
  9484  002CC8                     i2u367_40:
  9485  002CC8  9AC5               	bcf	4037,5,c	;volatile
  9486  002CCA                     i2l3933:
  9487                           
  9488                           ;I2C.c: 85: ACKEN = 1;
  9489  002CCA  88C5               	bsf	4037,4,c	;volatile
  9490                           
  9491                           ;I2C.c: 86: return temp;
  9492  002CCC  5003               	movf	i2I2C_Master_Read@temp,w,c
  9493  002CCE  0012               	return	
  9494  002CD0                     __end_ofi2_I2C_Master_Read:
  9495                           	opt stack 0
  9496                           pclatu	equ	0xFFB
  9497                           pclath	equ	0xFFA
  9498                           tblptru	equ	0xFF8
  9499                           tblptrh	equ	0xFF7
  9500                           tblptrl	equ	0xFF6
  9501                           tablat	equ	0xFF5
  9502                           prodh	equ	0xFF4
  9503                           prodl	equ	0xFF3
  9504                           intcon	equ	0xFF2
  9505                           intcon2	equ	0xFF1
  9506                           intcon3	equ	0xFF0
  9507                           postinc0	equ	0xFEE
  9508                           fsr0h	equ	0xFEA
  9509                           fsr0l	equ	0xFE9
  9510                           wreg	equ	0xFE8
  9511                           fsr1h	equ	0xFE2
  9512                           fsr1l	equ	0xFE1
  9513                           indf2	equ	0xFDF
  9514                           postinc2	equ	0xFDE
  9515                           postdec2	equ	0xFDD
  9516                           fsr2h	equ	0xFDA
  9517                           fsr2l	equ	0xFD9
  9518                           status	equ	0xFD8
  9519                           
  9520 ;; *************** function i2_I2C_Master_Wait *****************
  9521 ;; Defined at:
  9522 ;;		line 25 in file "I2C.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;		None
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;		None
  9527 ;; Return value:  Size  Location     Type
  9528 ;;                  1    wreg      void 
  9529 ;; Registers used:
  9530 ;;		wreg, status,2, status,0
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9539 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9540 ;;Total ram usage:        1 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; This function calls:
  9543 ;;		Nothing
  9544 ;; This function is called by:
  9545 ;;		i2_I2C_Master_Start
  9546 ;;		i2_I2C_Master_Stop
  9547 ;;		i2_I2C_Master_Write
  9548 ;;		i2_I2C_Master_Read
  9549 ;; This function uses a non-reentrant model
  9550 ;;
  9551                           
  9552                           	psect	text44
  9553  002D86                     __ptext44:
  9554                           	opt stack 0
  9555  002D86                     i2_I2C_Master_Wait:
  9556                           	opt stack 23
  9557  002D86                     i2l34:
  9558  002D86  B4C7               	btfsc	4039,2,c	;volatile
  9559  002D88  D7FE               	goto	i2l34
  9560  002D8A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  9561  002D8E  0E1F               	movlw	31
  9562  002D90  1601               	andwf	??i2_I2C_Master_Wait,f,c
  9563  002D92  B4D8               	btfsc	status,2,c
  9564  002D94  0012               	return	
  9565  002D96  D7F7               	goto	i2l34
  9566  002D98                     __end_ofi2_I2C_Master_Wait:
  9567                           	opt stack 0
  9568                           pclatu	equ	0xFFB
  9569                           pclath	equ	0xFFA
  9570                           tblptru	equ	0xFF8
  9571                           tblptrh	equ	0xFF7
  9572                           tblptrl	equ	0xFF6
  9573                           tablat	equ	0xFF5
  9574                           prodh	equ	0xFF4
  9575                           prodl	equ	0xFF3
  9576                           intcon	equ	0xFF2
  9577                           intcon2	equ	0xFF1
  9578                           intcon3	equ	0xFF0
  9579                           postinc0	equ	0xFEE
  9580                           fsr0h	equ	0xFEA
  9581                           fsr0l	equ	0xFE9
  9582                           wreg	equ	0xFE8
  9583                           fsr1h	equ	0xFE2
  9584                           fsr1l	equ	0xFE1
  9585                           indf2	equ	0xFDF
  9586                           postinc2	equ	0xFDE
  9587                           postdec2	equ	0xFDD
  9588                           fsr2h	equ	0xFDA
  9589                           fsr2l	equ	0xFD9
  9590                           status	equ	0xFD8
  9591                           
  9592 ;; *************** function _dec_to_hex *****************
  9593 ;; Defined at:
  9594 ;;		line 347 in file "main.c"
  9595 ;; Parameters:    Size  Location     Type
  9596 ;;  num             2   98[COMRAM] int 
  9597 ;; Auto vars:     Size  Location     Type
  9598 ;;  quotient        2  112[COMRAM] int 
  9599 ;;  hexnum          2  110[COMRAM] int 
  9600 ;;  i               2  108[COMRAM] int 
  9601 ;;  temp            2  106[COMRAM] int 
  9602 ;; Return value:  Size  Location     Type
  9603 ;;                  2   98[COMRAM] int 
  9604 ;; Registers used:
  9605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9606 ;; Tracked objects:
  9607 ;;		On entry : 0/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9611 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9614 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9615 ;;Total ram usage:       16 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; Hardware stack levels required when called:    5
  9618 ;; This function calls:
  9619 ;;		___awdiv
  9620 ;;		___awtoft
  9621 ;;		___ftadd
  9622 ;;		___ftmul
  9623 ;;		___fttol
  9624 ;;		_pow
  9625 ;; This function is called by:
  9626 ;;		_isr
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           	psect	text45
  9631  001718                     __ptext45:
  9632                           	opt stack 0
  9633  001718                     _dec_to_hex:
  9634                           	opt stack 20
  9635                           
  9636                           ;main.c: 348: int i = 0, quotient = num, temp, hexnum = 0;
  9637                           
  9638                           ;incstack = 0
  9639  001718  0E00               	movlw	0
  9640  00171A  6E6E               	movwf	dec_to_hex@i+1,c
  9641  00171C  0E00               	movlw	0
  9642  00171E  6E6D               	movwf	dec_to_hex@i,c
  9643  001720  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  9644  001724  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  9645  001728  0E00               	movlw	0
  9646  00172A  6E70               	movwf	dec_to_hex@hexnum+1,c
  9647  00172C  0E00               	movlw	0
  9648  00172E  6E6F               	movwf	dec_to_hex@hexnum,c
  9649                           
  9650                           ;main.c: 350: while (quotient != 0) {
  9651  001730  D068               	goto	i2l4181
  9652  001732                     i2l4169:
  9653                           
  9654                           ;main.c: 351: temp = quotient % 16;
  9655  001732  0E0F               	movlw	15
  9656  001734  1471               	andwf	dec_to_hex@quotient,w,c
  9657  001736  6E6B               	movwf	dec_to_hex@temp,c
  9658  001738  6A6C               	clrf	dec_to_hex@temp+1,c
  9659                           
  9660                           ;main.c: 353: hexnum += temp*pow(10,i);
  9661  00173A  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  9662  00173E  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  9663  001742  ECD7  F015         	call	___awtoft	;wreg free
  9664  001746  C009  F065         	movff	?___awtoft,_dec_to_hex$1257
  9665  00174A  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1257+1
  9666  00174E  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1257+2
  9667                           
  9668                           ;main.c: 353: hexnum += temp*pow(10,i);
  9669  001752  C065  F055         	movff	_dec_to_hex$1257,pow@y
  9670  001756  C066  F056         	movff	_dec_to_hex$1257+1,pow@y+1
  9671  00175A  C067  F057         	movff	_dec_to_hex$1257+2,pow@y+2
  9672  00175E  0E00               	movlw	0
  9673  001760  6E52               	movwf	pow@x,c
  9674  001762  0E20               	movlw	32
  9675  001764  6E53               	movwf	pow@x+1,c
  9676  001766  0E41               	movlw	65
  9677  001768  6E54               	movwf	pow@x+2,c
  9678  00176A  ECAC  F009         	call	_pow	;wreg free
  9679  00176E  C052  F068         	movff	?_pow,_dec_to_hex$1258
  9680  001772  C053  F069         	movff	?_pow+1,_dec_to_hex$1258+1
  9681  001776  C054  F06A         	movff	?_pow+2,_dec_to_hex$1258+2
  9682                           
  9683                           ;main.c: 353: hexnum += temp*pow(10,i);
  9684  00177A  C068  F010         	movff	_dec_to_hex$1258,___ftmul@f2
  9685  00177E  C069  F011         	movff	_dec_to_hex$1258+1,___ftmul@f2+1
  9686  001782  C06A  F012         	movff	_dec_to_hex$1258+2,___ftmul@f2+2
  9687  001786  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  9688  00178A  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  9689  00178E  ECD7  F015         	call	___awtoft	;wreg free
  9690  001792  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9691  001796  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9692  00179A  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9693  00179E  EC84  F00C         	call	___ftmul	;wreg free
  9694  0017A2  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  9695  0017A6  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  9696  0017AA  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  9697  0017AE  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  9698  0017B2  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  9699  0017B6  ECD7  F015         	call	___awtoft	;wreg free
  9700  0017BA  C009  F01C         	movff	?___awtoft,___ftadd@f1
  9701  0017BE  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  9702  0017C2  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  9703  0017C6  EC0C  F008         	call	___ftadd	;wreg free
  9704  0017CA  C01C  F028         	movff	?___ftadd,___fttol@f1
  9705  0017CE  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  9706  0017D2  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  9707  0017D6  EC0A  F00C         	call	___fttol	;wreg free
  9708  0017DA  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  9709  0017DE  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  9710                           
  9711                           ;main.c: 355: quotient = quotient / 16;
  9712  0017E2  C071  F007         	movff	dec_to_hex@quotient,___awdiv@dividend
  9713  0017E6  C072  F008         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  9714  0017EA  0E00               	movlw	0
  9715  0017EC  6E0A               	movwf	___awdiv@divisor+1,c
  9716  0017EE  0E10               	movlw	16
  9717  0017F0  6E09               	movwf	___awdiv@divisor,c
  9718  0017F2  EC52  F013         	call	___awdiv	;wreg free
  9719  0017F6  C007  F071         	movff	?___awdiv,dec_to_hex@quotient
  9720  0017FA  C008  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  9721                           
  9722                           ;main.c: 356: i += 1;
  9723  0017FE  4A6D               	infsnz	dec_to_hex@i,f,c
  9724  001800  2A6E               	incf	dec_to_hex@i+1,f,c
  9725  001802                     i2l4181:
  9726  001802  5071               	movf	dec_to_hex@quotient,w,c
  9727  001804  1072               	iorwf	dec_to_hex@quotient+1,w,c
  9728  001806  A4D8               	btfss	status,2,c
  9729  001808  D794               	goto	i2l4169
  9730                           
  9731                           ;main.c: 357: }
  9732                           ;main.c: 358: return hexnum;
  9733  00180A  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  9734  00180E  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  9735  001812  0012               	return		;funcret
  9736  001814                     __end_of_dec_to_hex:
  9737                           	opt stack 0
  9738                           pclatu	equ	0xFFB
  9739                           pclath	equ	0xFFA
  9740                           tblptru	equ	0xFF8
  9741                           tblptrh	equ	0xFF7
  9742                           tblptrl	equ	0xFF6
  9743                           tablat	equ	0xFF5
  9744                           prodh	equ	0xFF4
  9745                           prodl	equ	0xFF3
  9746                           intcon	equ	0xFF2
  9747                           intcon2	equ	0xFF1
  9748                           intcon3	equ	0xFF0
  9749                           postinc0	equ	0xFEE
  9750                           fsr0h	equ	0xFEA
  9751                           fsr0l	equ	0xFE9
  9752                           wreg	equ	0xFE8
  9753                           fsr1h	equ	0xFE2
  9754                           fsr1l	equ	0xFE1
  9755                           indf2	equ	0xFDF
  9756                           postinc2	equ	0xFDE
  9757                           postdec2	equ	0xFDD
  9758                           fsr2h	equ	0xFDA
  9759                           fsr2l	equ	0xFD9
  9760                           status	equ	0xFD8
  9761                           
  9762 ;; *************** function _pow *****************
  9763 ;; Defined at:
  9764 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  9765 ;; Parameters:    Size  Location     Type
  9766 ;;  x               3   81[COMRAM] int 
  9767 ;;  y               3   84[COMRAM] int 
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;  yi              4   94[COMRAM] unsigned long 
  9770 ;;  sign            1   93[COMRAM] unsigned char 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  3   81[COMRAM] unsigned char 
  9773 ;; Registers used:
  9774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9780 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;Total ram usage:       17 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    4
  9787 ;; This function calls:
  9788 ;;		___ftge
  9789 ;;		___ftmul
  9790 ;;		___ftneg
  9791 ;;		___fttol
  9792 ;;		___lltoft
  9793 ;;		_exp
  9794 ;;		_log
  9795 ;; This function is called by:
  9796 ;;		_dec_to_hex
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           	psect	text46
  9801  001358                     __ptext46:
  9802                           	opt stack 0
  9803  001358                     _pow:
  9804                           	opt stack 20
  9805                           
  9806                           ;incstack = 0
  9807  001358  0E00               	movlw	0
  9808  00135A  6E5E               	movwf	pow@sign,c
  9809  00135C  5052               	movf	pow@x,w,c
  9810  00135E  1053               	iorwf	pow@x+1,w,c
  9811  001360  1054               	iorwf	pow@x+2,w,c
  9812  001362  A4D8               	btfss	status,2,c
  9813  001364  D01C               	goto	i2l3781
  9814  001366  0E00               	movlw	0
  9815  001368  6E01               	movwf	___ftge@ff1,c
  9816  00136A  0E00               	movlw	0
  9817  00136C  6E02               	movwf	___ftge@ff1+1,c
  9818  00136E  0E00               	movlw	0
  9819  001370  6E03               	movwf	___ftge@ff1+2,c
  9820  001372  C055  F004         	movff	pow@y,___ftge@ff2
  9821  001376  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  9822  00137A  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  9823  00137E  EC0A  F013         	call	___ftge	;wreg free
  9824  001382  A0D8               	btfss	status,0,c
  9825  001384  D005               	goto	i2l927
  9826  001386  0E00               	movlw	0
  9827  001388  0100               	movlb	0	; () banked
  9828  00138A  6FA8               	movwf	(_errno+1)& (0+255),b
  9829  00138C  0E21               	movlw	33
  9830  00138E  6FA7               	movwf	_errno& (0+255),b
  9831  001390                     i2l927:
  9832  001390  0E00               	movlw	0
  9833  001392  6E52               	movwf	?_pow,c
  9834  001394  0E00               	movlw	0
  9835  001396  6E53               	movwf	?_pow+1,c
  9836  001398  0E00               	movlw	0
  9837  00139A  6E54               	movwf	?_pow+2,c
  9838  00139C  0012               	return	
  9839  00139E                     i2l3781:
  9840  00139E  5055               	movf	pow@y,w,c
  9841  0013A0  1056               	iorwf	pow@y+1,w,c
  9842  0013A2  1057               	iorwf	pow@y+2,w,c
  9843  0013A4  A4D8               	btfss	status,2,c
  9844  0013A6  D007               	goto	i2l3787
  9845  0013A8  0E00               	movlw	0
  9846  0013AA  6E52               	movwf	?_pow,c
  9847  0013AC  0E80               	movlw	128
  9848  0013AE  6E53               	movwf	?_pow+1,c
  9849  0013B0  0E3F               	movlw	63
  9850  0013B2  6E54               	movwf	?_pow+2,c
  9851  0013B4  0012               	return	
  9852  0013B6                     i2l3787:
  9853  0013B6  AE54               	btfss	pow@x+2,7,c
  9854  0013B8  D041               	goto	i2l3799
  9855  0013BA  C055  F028         	movff	pow@y,___fttol@f1
  9856  0013BE  C056  F029         	movff	pow@y+1,___fttol@f1+1
  9857  0013C2  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  9858  0013C6  EC0A  F00C         	call	___fttol	;wreg free
  9859  0013CA  C028  F05F         	movff	?___fttol,pow@yi
  9860  0013CE  C029  F060         	movff	?___fttol+1,pow@yi+1
  9861  0013D2  C02A  F061         	movff	?___fttol+2,pow@yi+2
  9862  0013D6  C02B  F062         	movff	?___fttol+3,pow@yi+3
  9863  0013DA  C05F  F009         	movff	pow@yi,___lltoft@c
  9864  0013DE  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  9865  0013E2  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  9866  0013E6  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  9867  0013EA  ECD1  F014         	call	___lltoft	;wreg free
  9868  0013EE  5055               	movf	pow@y,w,c
  9869  0013F0  1809               	xorwf	?___lltoft,w,c
  9870  0013F2  E107               	bnz	i2u350_40
  9871  0013F4  5056               	movf	pow@y+1,w,c
  9872  0013F6  180A               	xorwf	?___lltoft+1,w,c
  9873  0013F8  E104               	bnz	i2u350_40
  9874  0013FA  5057               	movf	pow@y+2,w,c
  9875  0013FC  180B               	xorwf	?___lltoft+2,w,c
  9876  0013FE  B4D8               	btfsc	status,2,c
  9877  001400  D00C               	goto	i2l3795
  9878  001402                     i2u350_40:
  9879  001402  0E00               	movlw	0
  9880  001404  0100               	movlb	0	; () banked
  9881  001406  6FA8               	movwf	(_errno+1)& (0+255),b
  9882  001408  0E21               	movlw	33
  9883  00140A  6FA7               	movwf	_errno& (0+255),b
  9884  00140C  0E00               	movlw	0
  9885  00140E  6E52               	movwf	?_pow,c
  9886  001410  0E00               	movlw	0
  9887  001412  6E53               	movwf	?_pow+1,c
  9888  001414  0E00               	movlw	0
  9889  001416  6E54               	movwf	?_pow+2,c
  9890                           
  9891                           ; BSR set to: 0
  9892  001418  0012               	return	
  9893  00141A                     i2l3795:
  9894  00141A  505F               	movf	pow@yi,w,c
  9895  00141C  0B01               	andlw	1
  9896  00141E  6E5E               	movwf	pow@sign,c
  9897  001420  C052  F001         	movff	pow@x,___ftneg@f1
  9898  001424  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9899  001428  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9900  00142C  EC7B  F016         	call	___ftneg	;wreg free
  9901  001430  C001  F052         	movff	?___ftneg,pow@x
  9902  001434  C002  F053         	movff	?___ftneg+1,pow@x+1
  9903  001438  C003  F054         	movff	?___ftneg+2,pow@x+2
  9904  00143C                     i2l3799:
  9905  00143C  C052  F034         	movff	pow@x,log@x
  9906  001440  C053  F035         	movff	pow@x+1,log@x+1
  9907  001444  C054  F036         	movff	pow@x+2,log@x+2
  9908  001448  ECFD  F00A         	call	_log	;wreg free
  9909  00144C  C034  F058         	movff	?_log,_pow$1259
  9910  001450  C035  F059         	movff	?_log+1,_pow$1259+1
  9911  001454  C036  F05A         	movff	?_log+2,_pow$1259+2
  9912  001458  C058  F00D         	movff	_pow$1259,___ftmul@f1
  9913  00145C  C059  F00E         	movff	_pow$1259+1,___ftmul@f1+1
  9914  001460  C05A  F00F         	movff	_pow$1259+2,___ftmul@f1+2
  9915  001464  C055  F010         	movff	pow@y,___ftmul@f2
  9916  001468  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  9917  00146C  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  9918  001470  EC84  F00C         	call	___ftmul	;wreg free
  9919  001474  C00D  F05B         	movff	?___ftmul,_pow$1260
  9920  001478  C00E  F05C         	movff	?___ftmul+1,_pow$1260+1
  9921  00147C  C00F  F05D         	movff	?___ftmul+2,_pow$1260+2
  9922  001480  C05B  F049         	movff	_pow$1260,exp@x
  9923  001484  C05C  F04A         	movff	_pow$1260+1,exp@x+1
  9924  001488  C05D  F04B         	movff	_pow$1260+2,exp@x+2
  9925  00148C  EC18  F007         	call	_exp	;wreg free
  9926  001490  C049  F052         	movff	?_exp,pow@x
  9927  001494  C04A  F053         	movff	?_exp+1,pow@x+1
  9928  001498  C04B  F054         	movff	?_exp+2,pow@x+2
  9929  00149C  505E               	movf	pow@sign,w,c
  9930  00149E  B4D8               	btfsc	status,2,c
  9931  0014A0  D00F               	goto	i2l932
  9932  0014A2  C052  F001         	movff	pow@x,___ftneg@f1
  9933  0014A6  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9934  0014AA  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9935  0014AE  EC7B  F016         	call	___ftneg	;wreg free
  9936  0014B2  C001  F052         	movff	?___ftneg,?_pow
  9937  0014B6  C002  F053         	movff	?___ftneg+1,?_pow+1
  9938  0014BA  C003  F054         	movff	?___ftneg+2,?_pow+2
  9939  0014BE  0012               	return	
  9940  0014C0                     i2l932:
  9941  0014C0  C052  F052         	movff	pow@x,?_pow
  9942  0014C4  C053  F053         	movff	pow@x+1,?_pow+1
  9943  0014C8  C054  F054         	movff	pow@x+2,?_pow+2
  9944  0014CC  0012               	return		;funcret
  9945  0014CE                     __end_of_pow:
  9946                           	opt stack 0
  9947                           pclatu	equ	0xFFB
  9948                           pclath	equ	0xFFA
  9949                           tblptru	equ	0xFF8
  9950                           tblptrh	equ	0xFF7
  9951                           tblptrl	equ	0xFF6
  9952                           tablat	equ	0xFF5
  9953                           prodh	equ	0xFF4
  9954                           prodl	equ	0xFF3
  9955                           intcon	equ	0xFF2
  9956                           intcon2	equ	0xFF1
  9957                           intcon3	equ	0xFF0
  9958                           postinc0	equ	0xFEE
  9959                           fsr0h	equ	0xFEA
  9960                           fsr0l	equ	0xFE9
  9961                           wreg	equ	0xFE8
  9962                           fsr1h	equ	0xFE2
  9963                           fsr1l	equ	0xFE1
  9964                           indf2	equ	0xFDF
  9965                           postinc2	equ	0xFDE
  9966                           postdec2	equ	0xFDD
  9967                           fsr2h	equ	0xFDA
  9968                           fsr2l	equ	0xFD9
  9969                           status	equ	0xFD8
  9970                           
  9971 ;; *************** function _log *****************
  9972 ;; Defined at:
  9973 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;  x               3   51[COMRAM] unsigned char 
  9976 ;; Auto vars:     Size  Location     Type
  9977 ;;  exponent        2   54[COMRAM] int 
  9978 ;; Return value:  Size  Location     Type
  9979 ;;                  3   51[COMRAM] int 
  9980 ;; Registers used:
  9981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9982 ;; Tracked objects:
  9983 ;;		On entry : 0/0
  9984 ;;		On exit  : 0/0
  9985 ;;		Unchanged: 0/0
  9986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9987 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9990 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9991 ;;Total ram usage:        5 bytes
  9992 ;; Hardware stack levels used:    1
  9993 ;; Hardware stack levels required when called:    3
  9994 ;; This function calls:
  9995 ;;		___awtoft
  9996 ;;		___ftadd
  9997 ;;		___ftmul
  9998 ;;		_eval_poly
  9999 ;;		_frexp
 10000 ;; This function is called by:
 10001 ;;		_pow
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           	psect	text47
 10006  0015FA                     __ptext47:
 10007                           	opt stack 0
 10008  0015FA                     _log:
 10009                           	opt stack 20
 10010                           
 10011                           ;incstack = 0
 10012  0015FA  AE36               	btfss	log@x+2,7,c
 10013  0015FC  D00C               	goto	i2l3523
 10014  0015FE  0E00               	movlw	0
 10015  001600  0100               	movlb	0	; () banked
 10016  001602  6FA8               	movwf	(_errno+1)& (0+255),b
 10017  001604  0E21               	movlw	33
 10018  001606  6FA7               	movwf	_errno& (0+255),b
 10019  001608  0E00               	movlw	0
 10020  00160A  6E34               	movwf	?_log,c
 10021  00160C  0E00               	movlw	0
 10022  00160E  6E35               	movwf	?_log+1,c
 10023  001610  0E00               	movlw	0
 10024  001612  6E36               	movwf	?_log+2,c
 10025                           
 10026                           ; BSR set to: 0
 10027  001614  0012               	return	
 10028  001616                     i2l3523:
 10029  001616  5034               	movf	log@x,w,c
 10030  001618  1035               	iorwf	log@x+1,w,c
 10031  00161A  1036               	iorwf	log@x+2,w,c
 10032  00161C  A4D8               	btfss	status,2,c
 10033  00161E  D00C               	goto	i2l3529
 10034  001620  0E00               	movlw	0
 10035  001622  0100               	movlb	0	; () banked
 10036  001624  6FA8               	movwf	(_errno+1)& (0+255),b
 10037  001626  0E22               	movlw	34
 10038  001628  6FA7               	movwf	_errno& (0+255),b
 10039  00162A  0E00               	movlw	0
 10040  00162C  6E34               	movwf	?_log,c
 10041  00162E  0E00               	movlw	0
 10042  001630  6E35               	movwf	?_log+1,c
 10043  001632  0E00               	movlw	0
 10044  001634  6E36               	movwf	?_log+2,c
 10045                           
 10046                           ; BSR set to: 0
 10047  001636  0012               	return	
 10048  001638                     i2l3529:
 10049  001638  0E00               	movlw	0
 10050  00163A  6E10               	movwf	___ftmul@f2,c
 10051  00163C  0E00               	movlw	0
 10052  00163E  6E11               	movwf	___ftmul@f2+1,c
 10053  001640  0E40               	movlw	64
 10054  001642  6E12               	movwf	___ftmul@f2+2,c
 10055  001644  0E37               	movlw	low log@exponent
 10056  001646  6E04               	movwf	frexp@eptr,c
 10057  001648  0E00               	movlw	high log@exponent
 10058  00164A  6E05               	movwf	frexp@eptr+1,c
 10059  00164C  C034  F001         	movff	log@x,frexp@value
 10060  001650  C035  F002         	movff	log@x+1,frexp@value+1
 10061  001654  C036  F003         	movff	log@x+2,frexp@value+2
 10062  001658  ECC2  F012         	call	_frexp	;wreg free
 10063  00165C  C001  F00D         	movff	?_frexp,___ftmul@f1
 10064  001660  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
 10065  001664  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
 10066  001668  EC84  F00C         	call	___ftmul	;wreg free
 10067  00166C  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10068  001670  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10069  001674  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10070  001678  0E00               	movlw	0
 10071  00167A  6E1F               	movwf	___ftadd@f2,c
 10072  00167C  0E80               	movlw	128
 10073  00167E  6E20               	movwf	___ftadd@f2+1,c
 10074  001680  0EBF               	movlw	191
 10075  001682  6E21               	movwf	___ftadd@f2+2,c
 10076  001684  EC0C  F008         	call	___ftadd	;wreg free
 10077  001688  C01C  F034         	movff	?___ftadd,log@x
 10078  00168C  C01D  F035         	movff	?___ftadd+1,log@x+1
 10079  001690  C01E  F036         	movff	?___ftadd+2,log@x+2
 10080  001694  0637               	decf	log@exponent,f,c
 10081  001696  A0D8               	btfss	status,0,c
 10082  001698  0638               	decf	log@exponent+1,f,c
 10083  00169A  C034  F028         	movff	log@x,eval_poly@x
 10084  00169E  C035  F029         	movff	log@x+1,eval_poly@x+1
 10085  0016A2  C036  F02A         	movff	log@x+2,eval_poly@x+2
 10086  0016A6  0EFF               	movlw	low log@coeff
 10087  0016A8  6E2B               	movwf	eval_poly@d,c
 10088  0016AA  0EFD               	movlw	high log@coeff
 10089  0016AC  6E2C               	movwf	eval_poly@d+1,c
 10090  0016AE  0E00               	movlw	0
 10091  0016B0  6E2E               	movwf	eval_poly@n+1,c
 10092  0016B2  0E08               	movlw	8
 10093  0016B4  6E2D               	movwf	eval_poly@n,c
 10094  0016B6  EC33  F00F         	call	_eval_poly	;wreg free
 10095  0016BA  C028  F034         	movff	?_eval_poly,log@x
 10096  0016BE  C029  F035         	movff	?_eval_poly+1,log@x+1
 10097  0016C2  C02A  F036         	movff	?_eval_poly+2,log@x+2
 10098  0016C6  0E72               	movlw	114
 10099  0016C8  6E10               	movwf	___ftmul@f2,c
 10100  0016CA  0E31               	movlw	49
 10101  0016CC  6E11               	movwf	___ftmul@f2+1,c
 10102  0016CE  0E3F               	movlw	63
 10103  0016D0  6E12               	movwf	___ftmul@f2+2,c
 10104  0016D2  C037  F009         	movff	log@exponent,___awtoft@c
 10105  0016D6  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
 10106  0016DA  ECD7  F015         	call	___awtoft	;wreg free
 10107  0016DE  C009  F00D         	movff	?___awtoft,___ftmul@f1
 10108  0016E2  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
 10109  0016E6  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
 10110  0016EA  EC84  F00C         	call	___ftmul	;wreg free
 10111  0016EE  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10112  0016F2  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10113  0016F6  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10114  0016FA  C034  F01F         	movff	log@x,___ftadd@f2
 10115  0016FE  C035  F020         	movff	log@x+1,___ftadd@f2+1
 10116  001702  C036  F021         	movff	log@x+2,___ftadd@f2+2
 10117  001706  EC0C  F008         	call	___ftadd	;wreg free
 10118  00170A  C01C  F034         	movff	?___ftadd,?_log
 10119  00170E  C01D  F035         	movff	?___ftadd+1,?_log+1
 10120  001712  C01E  F036         	movff	?___ftadd+2,?_log+2
 10121  001716  0012               	return	
 10122  001718                     __end_of_log:
 10123                           	opt stack 0
 10124                           pclatu	equ	0xFFB
 10125                           pclath	equ	0xFFA
 10126                           tblptru	equ	0xFF8
 10127                           tblptrh	equ	0xFF7
 10128                           tblptrl	equ	0xFF6
 10129                           tablat	equ	0xFF5
 10130                           prodh	equ	0xFF4
 10131                           prodl	equ	0xFF3
 10132                           intcon	equ	0xFF2
 10133                           intcon2	equ	0xFF1
 10134                           intcon3	equ	0xFF0
 10135                           postinc0	equ	0xFEE
 10136                           fsr0h	equ	0xFEA
 10137                           fsr0l	equ	0xFE9
 10138                           wreg	equ	0xFE8
 10139                           fsr1h	equ	0xFE2
 10140                           fsr1l	equ	0xFE1
 10141                           indf2	equ	0xFDF
 10142                           postinc2	equ	0xFDE
 10143                           postdec2	equ	0xFDD
 10144                           fsr2h	equ	0xFDA
 10145                           fsr2l	equ	0xFD9
 10146                           status	equ	0xFD8
 10147                           
 10148 ;; *************** function _exp *****************
 10149 ;; Defined at:
 10150 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;  x               3   72[COMRAM] int 
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;  exponent        2   78[COMRAM] int 
 10155 ;;  sign            1   80[COMRAM] unsigned char 
 10156 ;; Return value:  Size  Location     Type
 10157 ;;                  3   72[COMRAM] unsigned char 
 10158 ;; Registers used:
 10159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10160 ;; Tracked objects:
 10161 ;;		On entry : 0/0
 10162 ;;		On exit  : 0/0
 10163 ;;		Unchanged: 0/0
 10164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10165 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10166 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10168 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10169 ;;Total ram usage:        9 bytes
 10170 ;; Hardware stack levels used:    1
 10171 ;; Hardware stack levels required when called:    3
 10172 ;; This function calls:
 10173 ;;		___awtoft
 10174 ;;		___ftdiv
 10175 ;;		___ftge
 10176 ;;		___ftmul
 10177 ;;		___ftneg
 10178 ;;		___ftsub
 10179 ;;		___fttol
 10180 ;;		_eval_poly
 10181 ;;		_floor
 10182 ;;		_ldexp
 10183 ;; This function is called by:
 10184 ;;		_pow
 10185 ;; This function uses a non-reentrant model
 10186 ;;
 10187                           
 10188                           	psect	text48
 10189  000E30                     __ptext48:
 10190                           	opt stack 0
 10191  000E30                     _exp:
 10192                           	opt stack 20
 10193                           
 10194                           ;incstack = 0
 10195  000E30  5049               	movf	exp@x,w,c
 10196  000E32  104A               	iorwf	exp@x+1,w,c
 10197  000E34  104B               	iorwf	exp@x+2,w,c
 10198  000E36  A4D8               	btfss	status,2,c
 10199  000E38  D007               	goto	i2l3545
 10200  000E3A  0E00               	movlw	0
 10201  000E3C  6E49               	movwf	?_exp,c
 10202  000E3E  0E80               	movlw	128
 10203  000E40  6E4A               	movwf	?_exp+1,c
 10204  000E42  0E3F               	movlw	63
 10205  000E44  6E4B               	movwf	?_exp+2,c
 10206  000E46  0012               	return	
 10207  000E48                     i2l3545:
 10208  000E48  0E72               	movlw	114
 10209  000E4A  6E01               	movwf	___ftge@ff1,c
 10210  000E4C  0E31               	movlw	49
 10211  000E4E  6E02               	movwf	___ftge@ff1+1,c
 10212  000E50  0E44               	movlw	68
 10213  000E52  6E03               	movwf	___ftge@ff1+2,c
 10214  000E54  C049  F004         	movff	exp@x,___ftge@ff2
 10215  000E58  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
 10216  000E5C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
 10217  000E60  EC0A  F013         	call	___ftge	;wreg free
 10218  000E64  B0D8               	btfsc	status,0,c
 10219  000E66  D00C               	goto	i2l3551
 10220  000E68  0E00               	movlw	0
 10221  000E6A  0100               	movlb	0	; () banked
 10222  000E6C  6FA8               	movwf	(_errno+1)& (0+255),b
 10223  000E6E  0E22               	movlw	34
 10224  000E70  6FA7               	movwf	_errno& (0+255),b
 10225  000E72  0EFF               	movlw	255
 10226  000E74  6E49               	movwf	?_exp,c
 10227  000E76  0E7F               	movlw	127
 10228  000E78  6E4A               	movwf	?_exp+1,c
 10229  000E7A  0E7F               	movlw	127
 10230  000E7C  6E4B               	movwf	?_exp+2,c
 10231                           
 10232                           ; BSR set to: 0
 10233  000E7E  0012               	return	
 10234  000E80                     i2l3551:
 10235  000E80  C049  F001         	movff	exp@x,___ftge@ff1
 10236  000E84  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
 10237  000E88  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
 10238  000E8C  0E49               	movlw	73
 10239  000E8E  6E04               	movwf	___ftge@ff2,c
 10240  000E90  0E3A               	movlw	58
 10241  000E92  6E05               	movwf	___ftge@ff2+1,c
 10242  000E94  0EC4               	movlw	196
 10243  000E96  6E06               	movwf	___ftge@ff2+2,c
 10244  000E98  EC0A  F013         	call	___ftge	;wreg free
 10245  000E9C  B0D8               	btfsc	status,0,c
 10246  000E9E  D00C               	goto	i2l3557
 10247  000EA0  0E00               	movlw	0
 10248  000EA2  0100               	movlb	0	; () banked
 10249  000EA4  6FA8               	movwf	(_errno+1)& (0+255),b
 10250  000EA6  0E22               	movlw	34
 10251  000EA8  6FA7               	movwf	_errno& (0+255),b
 10252  000EAA  0E00               	movlw	0
 10253  000EAC  6E49               	movwf	?_exp,c
 10254  000EAE  0E00               	movlw	0
 10255  000EB0  6E4A               	movwf	?_exp+1,c
 10256  000EB2  0E00               	movlw	0
 10257  000EB4  6E4B               	movwf	?_exp+2,c
 10258                           
 10259                           ; BSR set to: 0
 10260  000EB6  0012               	return	
 10261  000EB8                     i2l3557:
 10262  000EB8  AE4B               	btfss	exp@x+2,7,c
 10263  000EBA  D002               	goto	i2u312_40
 10264  000EBC  0E01               	movlw	1
 10265  000EBE  D001               	goto	i2u313_40
 10266  000EC0                     i2u312_40:
 10267  000EC0  0E00               	movlw	0
 10268  000EC2                     i2u313_40:
 10269  000EC2  6E51               	movwf	exp@sign,c
 10270  000EC4  5051               	movf	exp@sign,w,c
 10271  000EC6  B4D8               	btfsc	status,2,c
 10272  000EC8  D00E               	goto	i2l1090
 10273  000ECA  C049  F001         	movff	exp@x,___ftneg@f1
 10274  000ECE  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
 10275  000ED2  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
 10276  000ED6  EC7B  F016         	call	___ftneg	;wreg free
 10277  000EDA  C001  F049         	movff	?___ftneg,exp@x
 10278  000EDE  C002  F04A         	movff	?___ftneg+1,exp@x+1
 10279  000EE2  C003  F04B         	movff	?___ftneg+2,exp@x+2
 10280  000EE6                     i2l1090:
 10281  000EE6  C049  F00D         	movff	exp@x,___ftmul@f1
 10282  000EEA  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
 10283  000EEE  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
 10284  000EF2  0EAA               	movlw	170
 10285  000EF4  6E10               	movwf	___ftmul@f2,c
 10286  000EF6  0EB8               	movlw	184
 10287  000EF8  6E11               	movwf	___ftmul@f2+1,c
 10288  000EFA  0E3F               	movlw	63
 10289  000EFC  6E12               	movwf	___ftmul@f2+2,c
 10290  000EFE  EC84  F00C         	call	___ftmul	;wreg free
 10291  000F02  C00D  F049         	movff	?___ftmul,exp@x
 10292  000F06  C00E  F04A         	movff	?___ftmul+1,exp@x+1
 10293  000F0A  C00F  F04B         	movff	?___ftmul+2,exp@x+2
 10294  000F0E  C049  F041         	movff	exp@x,floor@x
 10295  000F12  C04A  F042         	movff	exp@x+1,floor@x+1
 10296  000F16  C04B  F043         	movff	exp@x+2,floor@x+2
 10297  000F1A  EC5B  F00E         	call	_floor	;wreg free
 10298  000F1E  C041  F04C         	movff	?_floor,_exp$1261
 10299  000F22  C042  F04D         	movff	?_floor+1,_exp$1261+1
 10300  000F26  C043  F04E         	movff	?_floor+2,_exp$1261+2
 10301  000F2A  C04C  F028         	movff	_exp$1261,___fttol@f1
 10302  000F2E  C04D  F029         	movff	_exp$1261+1,___fttol@f1+1
 10303  000F32  C04E  F02A         	movff	_exp$1261+2,___fttol@f1+2
 10304  000F36  EC0A  F00C         	call	___fttol	;wreg free
 10305  000F3A  C028  F04F         	movff	?___fttol,exp@exponent
 10306  000F3E  C029  F050         	movff	?___fttol+1,exp@exponent+1
 10307  000F42  C049  F028         	movff	exp@x,___ftsub@f1
 10308  000F46  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
 10309  000F4A  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
 10310  000F4E  C04F  F009         	movff	exp@exponent,___awtoft@c
 10311  000F52  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
 10312  000F56  ECD7  F015         	call	___awtoft	;wreg free
 10313  000F5A  C009  F02B         	movff	?___awtoft,___ftsub@f2
 10314  000F5E  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
 10315  000F62  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
 10316  000F66  EC98  F015         	call	___ftsub	;wreg free
 10317  000F6A  C028  F049         	movff	?___ftsub,exp@x
 10318  000F6E  C029  F04A         	movff	?___ftsub+1,exp@x+1
 10319  000F72  C02A  F04B         	movff	?___ftsub+2,exp@x+2
 10320  000F76  C049  F028         	movff	exp@x,eval_poly@x
 10321  000F7A  C04A  F029         	movff	exp@x+1,eval_poly@x+1
 10322  000F7E  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
 10323  000F82  0EE1               	movlw	low exp@coeff
 10324  000F84  6E2B               	movwf	eval_poly@d,c
 10325  000F86  0EFD               	movlw	high exp@coeff
 10326  000F88  6E2C               	movwf	eval_poly@d+1,c
 10327  000F8A  0E00               	movlw	0
 10328  000F8C  6E2E               	movwf	eval_poly@n+1,c
 10329  000F8E  0E09               	movlw	9
 10330  000F90  6E2D               	movwf	eval_poly@n,c
 10331  000F92  EC33  F00F         	call	_eval_poly	;wreg free
 10332  000F96  C028  F034         	movff	?_eval_poly,ldexp@value
 10333  000F9A  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 10334  000F9E  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 10335  000FA2  C04F  F037         	movff	exp@exponent,ldexp@newexp
 10336  000FA6  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 10337  000FAA  EC9C  F00F         	call	_ldexp	;wreg free
 10338  000FAE  C034  F049         	movff	?_ldexp,exp@x
 10339  000FB2  C035  F04A         	movff	?_ldexp+1,exp@x+1
 10340  000FB6  C036  F04B         	movff	?_ldexp+2,exp@x+2
 10341  000FBA  5051               	movf	exp@sign,w,c
 10342  000FBC  B4D8               	btfsc	status,2,c
 10343  000FBE  D025               	goto	i2l1091
 10344  000FC0  2849               	incf	exp@x,w,c
 10345  000FC2  E10E               	bnz	i2l3579
 10346  000FC4  0E7F               	movlw	127
 10347  000FC6  184A               	xorwf	exp@x+1,w,c
 10348  000FC8  E10B               	bnz	i2l3579
 10349  000FCA  0E7F               	movlw	127
 10350  000FCC  184B               	xorwf	exp@x+2,w,c
 10351  000FCE  A4D8               	btfss	status,2,c
 10352  000FD0  D007               	goto	i2l3579
 10353  000FD2  0E00               	movlw	0
 10354  000FD4  6E49               	movwf	?_exp,c
 10355  000FD6  0E00               	movlw	0
 10356  000FD8  6E4A               	movwf	?_exp+1,c
 10357  000FDA  0E00               	movlw	0
 10358  000FDC  6E4B               	movwf	?_exp+2,c
 10359  000FDE  0012               	return	
 10360  000FE0                     i2l3579:
 10361  000FE0  0E00               	movlw	0
 10362  000FE2  6E09               	movwf	___ftdiv@f1,c
 10363  000FE4  0E80               	movlw	128
 10364  000FE6  6E0A               	movwf	___ftdiv@f1+1,c
 10365  000FE8  0E3F               	movlw	63
 10366  000FEA  6E0B               	movwf	___ftdiv@f1+2,c
 10367  000FEC  C049  F00C         	movff	exp@x,___ftdiv@f2
 10368  000FF0  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
 10369  000FF4  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
 10370  000FF8  ECE8  F00D         	call	___ftdiv	;wreg free
 10371  000FFC  C009  F049         	movff	?___ftdiv,?_exp
 10372  001000  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
 10373  001004  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
 10374  001008  0012               	return	
 10375  00100A                     i2l1091:
 10376  00100A  C049  F049         	movff	exp@x,?_exp
 10377  00100E  C04A  F04A         	movff	exp@x+1,?_exp+1
 10378  001012  C04B  F04B         	movff	exp@x+2,?_exp+2
 10379  001016  0012               	return		;funcret
 10380  001018                     __end_of_exp:
 10381                           	opt stack 0
 10382                           pclatu	equ	0xFFB
 10383                           pclath	equ	0xFFA
 10384                           tblptru	equ	0xFF8
 10385                           tblptrh	equ	0xFF7
 10386                           tblptrl	equ	0xFF6
 10387                           tablat	equ	0xFF5
 10388                           prodh	equ	0xFF4
 10389                           prodl	equ	0xFF3
 10390                           intcon	equ	0xFF2
 10391                           intcon2	equ	0xFF1
 10392                           intcon3	equ	0xFF0
 10393                           postinc0	equ	0xFEE
 10394                           fsr0h	equ	0xFEA
 10395                           fsr0l	equ	0xFE9
 10396                           wreg	equ	0xFE8
 10397                           fsr1h	equ	0xFE2
 10398                           fsr1l	equ	0xFE1
 10399                           indf2	equ	0xFDF
 10400                           postinc2	equ	0xFDE
 10401                           postdec2	equ	0xFDD
 10402                           fsr2h	equ	0xFDA
 10403                           fsr2l	equ	0xFD9
 10404                           status	equ	0xFD8
 10405                           
 10406 ;; *************** function _ldexp *****************
 10407 ;; Defined at:
 10408 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;  value           3   51[COMRAM] unsigned char 
 10411 ;;  newexp          2   54[COMRAM] int 
 10412 ;; Auto vars:     Size  Location     Type
 10413 ;;		None
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  3   51[COMRAM] int 
 10416 ;; Registers used:
 10417 ;;		wreg, status,2, status,0
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10423 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10425 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10426 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;Total ram usage:        7 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; This function calls:
 10430 ;;		Nothing
 10431 ;; This function is called by:
 10432 ;;		_exp
 10433 ;; This function uses a non-reentrant model
 10434 ;;
 10435                           
 10436                           	psect	text49
 10437  001F38                     __ptext49:
 10438                           	opt stack 0
 10439  001F38                     _ldexp:
 10440                           	opt stack 22
 10441                           
 10442                           ;incstack = 0
 10443  001F38  5034               	movf	ldexp@value,w,c
 10444  001F3A  1035               	iorwf	ldexp@value+1,w,c
 10445  001F3C  1036               	iorwf	ldexp@value+2,w,c
 10446  001F3E  A4D8               	btfss	status,2,c
 10447  001F40  D007               	goto	i2l3391
 10448  001F42  0E00               	movlw	0
 10449  001F44  6E34               	movwf	?_ldexp,c
 10450  001F46  0E00               	movlw	0
 10451  001F48  6E35               	movwf	?_ldexp+1,c
 10452  001F4A  0E00               	movlw	0
 10453  001F4C  6E36               	movwf	?_ldexp+2,c
 10454  001F4E  0012               	return	
 10455  001F50                     i2l3391:
 10456  001F50  5036               	movf	ldexp@value+2,w,c
 10457  001F52  0B7F               	andlw	127
 10458  001F54  6E39               	movwf	??_ldexp& (0+255),c
 10459  001F56  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 10460  001F58  90D8               	bcf	status,0,c
 10461  001F5A  3639               	rlcf	??_ldexp,f,c
 10462  001F5C  363A               	rlcf	??_ldexp+1,f,c
 10463  001F5E  5039               	movf	??_ldexp,w,c
 10464  001F60  2637               	addwf	ldexp@newexp,f,c
 10465  001F62  503A               	movf	??_ldexp+1,w,c
 10466  001F64  2238               	addwfc	ldexp@newexp+1,f,c
 10467  001F66  AE35               	btfss	ldexp@value+1,7,c
 10468  001F68  D003               	goto	i2u292_40
 10469  001F6A  6A39               	clrf	??_ldexp& (0+255),c
 10470  001F6C  2A39               	incf	??_ldexp& (0+255),f,c
 10471  001F6E  D001               	goto	i2u292_48
 10472  001F70                     i2u292_40:
 10473  001F70  6A39               	clrf	??_ldexp& (0+255),c
 10474  001F72                     i2u292_48:
 10475  001F72  5039               	movf	??_ldexp,w,c
 10476  001F74  2637               	addwf	ldexp@newexp,f,c
 10477  001F76  0E00               	movlw	0
 10478  001F78  2238               	addwfc	ldexp@newexp+1,f,c
 10479  001F7A  AE38               	btfss	ldexp@newexp+1,7,c
 10480  001F7C  D00C               	goto	i2l3399
 10481  001F7E  0E00               	movlw	0
 10482  001F80  0100               	movlb	0	; () banked
 10483  001F82  6FA8               	movwf	(_errno+1)& (0+255),b
 10484  001F84  0E22               	movlw	34
 10485  001F86  6FA7               	movwf	_errno& (0+255),b
 10486  001F88  0E00               	movlw	0
 10487  001F8A  6E34               	movwf	?_ldexp,c
 10488  001F8C  0E00               	movlw	0
 10489  001F8E  6E35               	movwf	?_ldexp+1,c
 10490  001F90  0E00               	movlw	0
 10491  001F92                     L11:
 10492  001F92  6E36               	movwf	?_ldexp+2,c
 10493                           
 10494                           ; BSR set to: 0
 10495  001F94  0012               	return	
 10496  001F96                     i2l3399:
 10497  001F96  BE38               	btfsc	ldexp@newexp+1,7,c
 10498  001F98  D016               	goto	i2l3415
 10499  001F9A  0438               	decf	ldexp@newexp+1,w,c
 10500  001F9C  A0D8               	btfss	status,0,c
 10501  001F9E  D013               	goto	i2l3415
 10502  001FA0  0E00               	movlw	0
 10503  001FA2  0100               	movlb	0	; () banked
 10504  001FA4  6FA8               	movwf	(_errno+1)& (0+255),b
 10505  001FA6  0E22               	movlw	34
 10506  001FA8  6FA7               	movwf	_errno& (0+255),b
 10507                           
 10508                           ; BSR set to: 0
 10509  001FAA  AE36               	btfss	ldexp@value+2,7,c
 10510  001FAC  D006               	goto	i2l3411
 10511                           
 10512                           ; BSR set to: 0
 10513  001FAE  0EFF               	movlw	255
 10514  001FB0  6E34               	movwf	?_ldexp,c
 10515  001FB2  0E7F               	movlw	127
 10516  001FB4  6E35               	movwf	?_ldexp+1,c
 10517  001FB6  0EFF               	movlw	255
 10518  001FB8  D7EC               	goto	L11
 10519  001FBA                     i2l3411:
 10520                           
 10521                           ; BSR set to: 0
 10522  001FBA  0EFF               	movlw	255
 10523  001FBC  6E34               	movwf	?_ldexp,c
 10524  001FBE  0E7F               	movlw	127
 10525  001FC0  6E35               	movwf	?_ldexp+1,c
 10526  001FC2  0E7F               	movlw	127
 10527  001FC4  D7E6               	goto	L11
 10528  001FC6                     i2l3415:
 10529  001FC6  3438               	rlcf	ldexp@newexp+1,w,c
 10530  001FC8  3038               	rrcf	ldexp@newexp+1,w,c
 10531  001FCA  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 10532  001FCC  3037               	rrcf	ldexp@newexp,w,c
 10533  001FCE  6E39               	movwf	??_ldexp& (0+255),c
 10534  001FD0  5036               	movf	ldexp@value+2,w,c
 10535  001FD2  1839               	xorwf	??_ldexp,w,c
 10536  001FD4  0B80               	andlw	-128
 10537  001FD6  1839               	xorwf	??_ldexp,w,c
 10538  001FD8  6E36               	movwf	ldexp@value+2,c
 10539  001FDA  C037  F039         	movff	ldexp@newexp,??_ldexp
 10540  001FDE  0E01               	movlw	1
 10541  001FE0  1639               	andwf	??_ldexp,f,c
 10542  001FE2  3239               	rrcf	??_ldexp,f,c
 10543  001FE4  3239               	rrcf	??_ldexp,f,c
 10544  001FE6  5035               	movf	ldexp@value+1,w,c
 10545  001FE8  1839               	xorwf	??_ldexp,w,c
 10546  001FEA  0B7F               	andlw	-129
 10547  001FEC  1839               	xorwf	??_ldexp,w,c
 10548  001FEE  6E35               	movwf	ldexp@value+1,c
 10549  001FF0  C034  F034         	movff	ldexp@value,?_ldexp
 10550  001FF4  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 10551  001FF8  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 10552  001FFC  0012               	return	
 10553  001FFE                     __end_of_ldexp:
 10554                           	opt stack 0
 10555                           pclatu	equ	0xFFB
 10556                           pclath	equ	0xFFA
 10557                           tblptru	equ	0xFF8
 10558                           tblptrh	equ	0xFF7
 10559                           tblptrl	equ	0xFF6
 10560                           tablat	equ	0xFF5
 10561                           prodh	equ	0xFF4
 10562                           prodl	equ	0xFF3
 10563                           intcon	equ	0xFF2
 10564                           intcon2	equ	0xFF1
 10565                           intcon3	equ	0xFF0
 10566                           postinc0	equ	0xFEE
 10567                           fsr0h	equ	0xFEA
 10568                           fsr0l	equ	0xFE9
 10569                           wreg	equ	0xFE8
 10570                           fsr1h	equ	0xFE2
 10571                           fsr1l	equ	0xFE1
 10572                           indf2	equ	0xFDF
 10573                           postinc2	equ	0xFDE
 10574                           postdec2	equ	0xFDD
 10575                           fsr2h	equ	0xFDA
 10576                           fsr2l	equ	0xFD9
 10577                           status	equ	0xFD8
 10578                           
 10579 ;; *************** function _floor *****************
 10580 ;; Defined at:
 10581 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;  x               3   64[COMRAM] int 
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;  i               3   67[COMRAM] int 
 10586 ;;  expon           2   70[COMRAM] int 
 10587 ;; Return value:  Size  Location     Type
 10588 ;;                  3   64[COMRAM] int 
 10589 ;; Registers used:
 10590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10591 ;; Tracked objects:
 10592 ;;		On entry : 0/0
 10593 ;;		On exit  : 0/0
 10594 ;;		Unchanged: 0/0
 10595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10596 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10597 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10599 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10600 ;;Total ram usage:        8 bytes
 10601 ;; Hardware stack levels used:    1
 10602 ;; Hardware stack levels required when called:    2
 10603 ;; This function calls:
 10604 ;;		___altoft
 10605 ;;		___ftadd
 10606 ;;		___ftge
 10607 ;;		___fttol
 10608 ;;		_frexp
 10609 ;; This function is called by:
 10610 ;;		_exp
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           	psect	text50
 10615  001CB6                     __ptext50:
 10616                           	opt stack 0
 10617  001CB6                     _floor:
 10618                           	opt stack 20
 10619                           
 10620                           ;incstack = 0
 10621  001CB6  C041  F001         	movff	floor@x,frexp@value
 10622  001CBA  C042  F002         	movff	floor@x+1,frexp@value+1
 10623  001CBE  C043  F003         	movff	floor@x+2,frexp@value+2
 10624  001CC2  0E47               	movlw	low floor@expon
 10625  001CC4  6E04               	movwf	frexp@eptr,c
 10626  001CC6  0E00               	movlw	high floor@expon
 10627  001CC8  6E05               	movwf	frexp@eptr+1,c
 10628  001CCA  ECC2  F012         	call	_frexp	;wreg free
 10629  001CCE  AE48               	btfss	floor@expon+1,7,c
 10630  001CD0  D010               	goto	i2l3369
 10631  001CD2  AE43               	btfss	floor@x+2,7,c
 10632  001CD4  D007               	goto	i2l3365
 10633  001CD6  0E00               	movlw	0
 10634  001CD8  6E41               	movwf	?_floor,c
 10635  001CDA  0E80               	movlw	128
 10636  001CDC  6E42               	movwf	?_floor+1,c
 10637  001CDE  0EBF               	movlw	191
 10638  001CE0  6E43               	movwf	?_floor+2,c
 10639  001CE2  0012               	return	
 10640  001CE4                     i2l3365:
 10641  001CE4  0E00               	movlw	0
 10642  001CE6  6E41               	movwf	?_floor,c
 10643  001CE8  0E00               	movlw	0
 10644  001CEA  6E42               	movwf	?_floor+1,c
 10645  001CEC  0E00               	movlw	0
 10646  001CEE  6E43               	movwf	?_floor+2,c
 10647  001CF0  0012               	return	
 10648  001CF2                     i2l3369:
 10649  001CF2  5048               	movf	floor@expon+1,w,c
 10650  001CF4  E104               	bnz	i2u288_40
 10651  001CF6  0E15               	movlw	21
 10652  001CF8  5C47               	subwf	floor@expon,w,c
 10653  001CFA  A0D8               	btfss	status,0,c
 10654  001CFC  D007               	goto	i2l3373
 10655  001CFE                     i2u288_40:
 10656  001CFE  C041  F041         	movff	floor@x,?_floor
 10657  001D02  C042  F042         	movff	floor@x+1,?_floor+1
 10658  001D06  C043  F043         	movff	floor@x+2,?_floor+2
 10659  001D0A  0012               	return	
 10660  001D0C                     i2l3373:
 10661  001D0C  C041  F028         	movff	floor@x,___fttol@f1
 10662  001D10  C042  F029         	movff	floor@x+1,___fttol@f1+1
 10663  001D14  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 10664  001D18  EC0A  F00C         	call	___fttol	;wreg free
 10665  001D1C  C028  F037         	movff	?___fttol,___altoft@c
 10666  001D20  C029  F038         	movff	?___fttol+1,___altoft@c+1
 10667  001D24  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 10668  001D28  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 10669  001D2C  ECD0  F013         	call	___altoft	;wreg free
 10670  001D30  C037  F044         	movff	?___altoft,floor@i
 10671  001D34  C038  F045         	movff	?___altoft+1,floor@i+1
 10672  001D38  C039  F046         	movff	?___altoft+2,floor@i+2
 10673  001D3C  C041  F001         	movff	floor@x,___ftge@ff1
 10674  001D40  C042  F002         	movff	floor@x+1,___ftge@ff1+1
 10675  001D44  C043  F003         	movff	floor@x+2,___ftge@ff1+2
 10676  001D48  C044  F004         	movff	floor@i,___ftge@ff2
 10677  001D4C  C045  F005         	movff	floor@i+1,___ftge@ff2+1
 10678  001D50  C046  F006         	movff	floor@i+2,___ftge@ff2+2
 10679  001D54  EC0A  F013         	call	___ftge	;wreg free
 10680  001D58  B0D8               	btfsc	status,0,c
 10681  001D5A  D015               	goto	i2l1101
 10682  001D5C  C044  F01C         	movff	floor@i,___ftadd@f1
 10683  001D60  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 10684  001D64  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 10685  001D68  0E00               	movlw	0
 10686  001D6A  6E1F               	movwf	___ftadd@f2,c
 10687  001D6C  0E80               	movlw	128
 10688  001D6E  6E20               	movwf	___ftadd@f2+1,c
 10689  001D70  0EBF               	movlw	191
 10690  001D72  6E21               	movwf	___ftadd@f2+2,c
 10691  001D74  EC0C  F008         	call	___ftadd	;wreg free
 10692  001D78  C01C  F041         	movff	?___ftadd,?_floor
 10693  001D7C  C01D  F042         	movff	?___ftadd+1,?_floor+1
 10694  001D80  C01E  F043         	movff	?___ftadd+2,?_floor+2
 10695  001D84  0012               	return	
 10696  001D86                     i2l1101:
 10697  001D86  C044  F041         	movff	floor@i,?_floor
 10698  001D8A  C045  F042         	movff	floor@i+1,?_floor+1
 10699  001D8E  C046  F043         	movff	floor@i+2,?_floor+2
 10700  001D92  0012               	return		;funcret
 10701  001D94                     __end_of_floor:
 10702                           	opt stack 0
 10703                           pclatu	equ	0xFFB
 10704                           pclath	equ	0xFFA
 10705                           tblptru	equ	0xFF8
 10706                           tblptrh	equ	0xFF7
 10707                           tblptrl	equ	0xFF6
 10708                           tablat	equ	0xFF5
 10709                           prodh	equ	0xFF4
 10710                           prodl	equ	0xFF3
 10711                           intcon	equ	0xFF2
 10712                           intcon2	equ	0xFF1
 10713                           intcon3	equ	0xFF0
 10714                           postinc0	equ	0xFEE
 10715                           fsr0h	equ	0xFEA
 10716                           fsr0l	equ	0xFE9
 10717                           wreg	equ	0xFE8
 10718                           fsr1h	equ	0xFE2
 10719                           fsr1l	equ	0xFE1
 10720                           indf2	equ	0xFDF
 10721                           postinc2	equ	0xFDE
 10722                           postdec2	equ	0xFDD
 10723                           fsr2h	equ	0xFDA
 10724                           fsr2l	equ	0xFD9
 10725                           status	equ	0xFD8
 10726                           
 10727 ;; *************** function _frexp *****************
 10728 ;; Defined at:
 10729 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10730 ;; Parameters:    Size  Location     Type
 10731 ;;  value           3    0[COMRAM] int 
 10732 ;;  eptr            2    3[COMRAM] PTR int 
 10733 ;;		 -> log@exponent(2), floor@expon(2), 
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;		None
 10736 ;; Return value:  Size  Location     Type
 10737 ;;                  3    0[COMRAM] PTR int 
 10738 ;; Registers used:
 10739 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10740 ;; Tracked objects:
 10741 ;;		On entry : 0/0
 10742 ;;		On exit  : 0/0
 10743 ;;		Unchanged: 0/0
 10744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10745 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10747 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10748 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10749 ;;Total ram usage:        7 bytes
 10750 ;; Hardware stack levels used:    1
 10751 ;; This function calls:
 10752 ;;		Nothing
 10753 ;; This function is called by:
 10754 ;;		_floor
 10755 ;;		_log
 10756 ;; This function uses a non-reentrant model
 10757 ;;
 10758                           
 10759                           	psect	text51
 10760  002584                     __ptext51:
 10761                           	opt stack 0
 10762  002584                     _frexp:
 10763                           	opt stack 22
 10764                           
 10765                           ;incstack = 0
 10766  002584  5001               	movf	frexp@value,w,c
 10767  002586  1002               	iorwf	frexp@value+1,w,c
 10768  002588  1003               	iorwf	frexp@value+2,w,c
 10769  00258A  A4D8               	btfss	status,2,c
 10770  00258C  D00F               	goto	i2l3245
 10771  00258E  C004  FFD9         	movff	frexp@eptr,fsr2l
 10772  002592  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10773  002596  0E00               	movlw	0
 10774  002598  6EDE               	movwf	postinc2,c
 10775  00259A  0E00               	movlw	0
 10776  00259C  6EDD               	movwf	postdec2,c
 10777  00259E  0E00               	movlw	0
 10778  0025A0  6E01               	movwf	?_frexp,c
 10779  0025A2  0E00               	movlw	0
 10780  0025A4  6E02               	movwf	?_frexp+1,c
 10781  0025A6  0E00               	movlw	0
 10782  0025A8  6E03               	movwf	?_frexp+2,c
 10783  0025AA  0012               	return	
 10784  0025AC                     i2l3245:
 10785  0025AC  5003               	movf	frexp@value+2,w,c
 10786  0025AE  0B7F               	andlw	127
 10787  0025B0  6E06               	movwf	??_frexp& (0+255),c
 10788  0025B2  6A07               	clrf	(??_frexp+1)& (0+255),c
 10789  0025B4  90D8               	bcf	status,0,c
 10790  0025B6  3606               	rlcf	??_frexp,f,c
 10791  0025B8  3607               	rlcf	??_frexp+1,f,c
 10792  0025BA  C004  FFD9         	movff	frexp@eptr,fsr2l
 10793  0025BE  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10794  0025C2  C006  FFDE         	movff	??_frexp,postinc2
 10795  0025C6  C007  FFDD         	movff	??_frexp+1,postdec2
 10796  0025CA  AE02               	btfss	frexp@value+1,7,c
 10797  0025CC  D003               	goto	i2u275_40
 10798  0025CE  6A06               	clrf	??_frexp& (0+255),c
 10799  0025D0  2A06               	incf	??_frexp& (0+255),f,c
 10800  0025D2  D001               	goto	i2u275_48
 10801  0025D4                     i2u275_40:
 10802  0025D4  6A06               	clrf	??_frexp& (0+255),c
 10803  0025D6                     i2u275_48:
 10804  0025D6  5006               	movf	??_frexp,w,c
 10805  0025D8  C004  FFD9         	movff	frexp@eptr,fsr2l
 10806  0025DC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10807  0025E0  12DE               	iorwf	postinc2,f,c
 10808  0025E2  0E00               	movlw	0
 10809  0025E4  12DD               	iorwf	postdec2,f,c
 10810  0025E6  C004  FFD9         	movff	frexp@eptr,fsr2l
 10811  0025EA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10812  0025EE  0E82               	movlw	130
 10813  0025F0  26DE               	addwf	postinc2,f,c
 10814  0025F2  0EFF               	movlw	255
 10815  0025F4  22DD               	addwfc	postdec2,f,c
 10816  0025F6  8003               	bsf	frexp@value+2,0,c
 10817  0025F8  8203               	bsf	frexp@value+2,1,c
 10818  0025FA  8403               	bsf	frexp@value+2,2,c
 10819  0025FC  8603               	bsf	frexp@value+2,3,c
 10820  0025FE  8803               	bsf	frexp@value+2,4,c
 10821  002600  8A03               	bsf	frexp@value+2,5,c
 10822  002602  9C03               	bcf	frexp@value+2,6,c
 10823  002604  9E02               	bcf	frexp@value+1,7,c
 10824  002606  C001  F001         	movff	frexp@value,?_frexp
 10825  00260A  C002  F002         	movff	frexp@value+1,?_frexp+1
 10826  00260E  C003  F003         	movff	frexp@value+2,?_frexp+2
 10827  002612  0012               	return	
 10828  002614                     __end_of_frexp:
 10829                           	opt stack 0
 10830                           pclatu	equ	0xFFB
 10831                           pclath	equ	0xFFA
 10832                           tblptru	equ	0xFF8
 10833                           tblptrh	equ	0xFF7
 10834                           tblptrl	equ	0xFF6
 10835                           tablat	equ	0xFF5
 10836                           prodh	equ	0xFF4
 10837                           prodl	equ	0xFF3
 10838                           intcon	equ	0xFF2
 10839                           intcon2	equ	0xFF1
 10840                           intcon3	equ	0xFF0
 10841                           postinc0	equ	0xFEE
 10842                           fsr0h	equ	0xFEA
 10843                           fsr0l	equ	0xFE9
 10844                           wreg	equ	0xFE8
 10845                           fsr1h	equ	0xFE2
 10846                           fsr1l	equ	0xFE1
 10847                           indf2	equ	0xFDF
 10848                           postinc2	equ	0xFDE
 10849                           postdec2	equ	0xFDD
 10850                           fsr2h	equ	0xFDA
 10851                           fsr2l	equ	0xFD9
 10852                           status	equ	0xFD8
 10853                           
 10854 ;; *************** function ___fttol *****************
 10855 ;; Defined at:
 10856 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;  f1              3   39[COMRAM] float 
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;  lval            4   49[COMRAM] unsigned long 
 10861 ;;  exp1            1   53[COMRAM] unsigned char 
 10862 ;;  sign1           1   48[COMRAM] unsigned char 
 10863 ;; Return value:  Size  Location     Type
 10864 ;;                  4   39[COMRAM] long 
 10865 ;; Registers used:
 10866 ;;		wreg, status,2, status,0
 10867 ;; Tracked objects:
 10868 ;;		On entry : 0/0
 10869 ;;		On exit  : 0/0
 10870 ;;		Unchanged: 0/0
 10871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10872 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10873 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10874 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10875 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10876 ;;Total ram usage:       15 bytes
 10877 ;; Hardware stack levels used:    1
 10878 ;; This function calls:
 10879 ;;		Nothing
 10880 ;; This function is called by:
 10881 ;;		_dec_to_hex
 10882 ;;		_pow
 10883 ;;		_exp
 10884 ;;		_floor
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           	psect	text52
 10889  001814                     __ptext52:
 10890                           	opt stack 0
 10891  001814                     ___fttol:
 10892                           	opt stack 21
 10893                           
 10894                           ;incstack = 0
 10895  001814  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 10896  001818  6A2D               	clrf	(??___fttol+1)& (0+255),c
 10897  00181A  6A2E               	clrf	(??___fttol+2)& (0+255),c
 10898  00181C  3429               	rlcf	___fttol@f1+1,w,c
 10899  00181E  362C               	rlcf	??___fttol& (0+255),f,c
 10900  001820  E301               	bnc	u266_41
 10901  001822  802D               	bsf	(??___fttol+1)& (0+255),0,c
 10902  001824                     u266_41:
 10903  001824  502C               	movf	??___fttol,w,c
 10904  001826  6E36               	movwf	___fttol@exp1,c
 10905  001828  5036               	movf	___fttol@exp1,w,c
 10906  00182A  A4D8               	btfss	status,2,c
 10907  00182C  D009               	goto	i2l3197
 10908  00182E  0E00               	movlw	0
 10909  001830  6E28               	movwf	?___fttol,c
 10910  001832  0E00               	movlw	0
 10911  001834  6E29               	movwf	?___fttol+1,c
 10912  001836  0E00               	movlw	0
 10913  001838  6E2A               	movwf	?___fttol+2,c
 10914  00183A  0E00               	movlw	0
 10915  00183C  6E2B               	movwf	?___fttol+3,c
 10916  00183E  0012               	return	
 10917  001840                     i2l3197:
 10918  001840  0E17               	movlw	23
 10919  001842  6E2C               	movwf	??___fttol& (0+255),c
 10920  001844  C028  F02D         	movff	___fttol@f1,??___fttol+1
 10921  001848  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 10922  00184C  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 10923  001850  282C               	incf	??___fttol,w,c
 10924  001852  6E30               	movwf	(??___fttol+4)& (0+255),c
 10925  001854  D004               	goto	i2u268_40
 10926  001856                     i2u268_45:
 10927  001856  90D8               	bcf	status,0,c
 10928  001858  322F               	rrcf	??___fttol+3,f,c
 10929  00185A  322E               	rrcf	??___fttol+2,f,c
 10930  00185C  322D               	rrcf	??___fttol+1,f,c
 10931  00185E                     i2u268_40:
 10932  00185E  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 10933  001860  D7FA               	goto	i2u268_45
 10934  001862  502D               	movf	??___fttol+1,w,c
 10935  001864  6E31               	movwf	___fttol@sign1,c
 10936  001866  8E29               	bsf	___fttol@f1+1,7,c
 10937  001868  0EFF               	movlw	255
 10938  00186A  1628               	andwf	___fttol@f1,f,c
 10939  00186C  0EFF               	movlw	255
 10940  00186E  1629               	andwf	___fttol@f1+1,f,c
 10941  001870  0E00               	movlw	0
 10942  001872  162A               	andwf	___fttol@f1+2,f,c
 10943  001874  5028               	movf	___fttol@f1,w,c
 10944  001876  6E32               	movwf	___fttol@lval,c
 10945  001878  5029               	movf	___fttol@f1+1,w,c
 10946  00187A  6E33               	movwf	___fttol@lval+1,c
 10947  00187C  502A               	movf	___fttol@f1+2,w,c
 10948  00187E  6E34               	movwf	___fttol@lval+2,c
 10949  001880  6A35               	clrf	___fttol@lval+3,c
 10950  001882  0E8E               	movlw	142
 10951  001884  5E36               	subwf	___fttol@exp1,f,c
 10952  001886  AE36               	btfss	___fttol@exp1,7,c
 10953  001888  D016               	goto	i2l3219
 10954  00188A  5036               	movf	___fttol@exp1,w,c
 10955  00188C  0A80               	xorlw	128
 10956  00188E  0F8F               	addlw	143
 10957  001890  B0D8               	btfsc	status,0,c
 10958  001892  D009               	goto	i2l3215
 10959  001894  0E00               	movlw	0
 10960  001896  6E28               	movwf	?___fttol,c
 10961  001898  0E00               	movlw	0
 10962  00189A  6E29               	movwf	?___fttol+1,c
 10963  00189C  0E00               	movlw	0
 10964  00189E  6E2A               	movwf	?___fttol+2,c
 10965  0018A0  0E00               	movlw	0
 10966  0018A2  6E2B               	movwf	?___fttol+3,c
 10967  0018A4  0012               	return	
 10968  0018A6                     i2l3215:
 10969  0018A6  90D8               	bcf	status,0,c
 10970  0018A8  3235               	rrcf	___fttol@lval+3,f,c
 10971  0018AA  3234               	rrcf	___fttol@lval+2,f,c
 10972  0018AC  3233               	rrcf	___fttol@lval+1,f,c
 10973  0018AE  3232               	rrcf	___fttol@lval,f,c
 10974  0018B0  3E36               	incfsz	___fttol@exp1,f,c
 10975  0018B2  D7F9               	goto	i2l3215
 10976  0018B4  D015               	goto	i2l3229
 10977  0018B6                     i2l3219:
 10978  0018B6  0E17               	movlw	23
 10979  0018B8  6436               	cpfsgt	___fttol@exp1,c
 10980  0018BA  D00F               	goto	i2l3227
 10981  0018BC  0E00               	movlw	0
 10982  0018BE  6E28               	movwf	?___fttol,c
 10983  0018C0  0E00               	movlw	0
 10984  0018C2  6E29               	movwf	?___fttol+1,c
 10985  0018C4  0E00               	movlw	0
 10986  0018C6  6E2A               	movwf	?___fttol+2,c
 10987  0018C8  0E00               	movlw	0
 10988  0018CA  6E2B               	movwf	?___fttol+3,c
 10989  0018CC  0012               	return	
 10990  0018CE                     i2l3225:
 10991  0018CE  90D8               	bcf	status,0,c
 10992  0018D0  3632               	rlcf	___fttol@lval,f,c
 10993  0018D2  3633               	rlcf	___fttol@lval+1,f,c
 10994  0018D4  3634               	rlcf	___fttol@lval+2,f,c
 10995  0018D6  3635               	rlcf	___fttol@lval+3,f,c
 10996  0018D8  0636               	decf	___fttol@exp1,f,c
 10997  0018DA                     i2l3227:
 10998  0018DA  5036               	movf	___fttol@exp1,w,c
 10999  0018DC  A4D8               	btfss	status,2,c
 11000  0018DE  D7F7               	goto	i2l3225
 11001  0018E0                     i2l3229:
 11002  0018E0  5031               	movf	___fttol@sign1,w,c
 11003  0018E2  B4D8               	btfsc	status,2,c
 11004  0018E4  D008               	goto	i2l3233
 11005  0018E6  1E35               	comf	___fttol@lval+3,f,c
 11006  0018E8  1E34               	comf	___fttol@lval+2,f,c
 11007  0018EA  1E33               	comf	___fttol@lval+1,f,c
 11008  0018EC  6C32               	negf	___fttol@lval,c
 11009  0018EE  0E00               	movlw	0
 11010  0018F0  2233               	addwfc	___fttol@lval+1,f,c
 11011  0018F2  2234               	addwfc	___fttol@lval+2,f,c
 11012  0018F4  2235               	addwfc	___fttol@lval+3,f,c
 11013  0018F6                     i2l3233:
 11014  0018F6  C032  F028         	movff	___fttol@lval,?___fttol
 11015  0018FA  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 11016  0018FE  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 11017  001902  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 11018  001906  0012               	return	
 11019  001908                     __end_of___fttol:
 11020                           	opt stack 0
 11021                           pclatu	equ	0xFFB
 11022                           pclath	equ	0xFFA
 11023                           tblptru	equ	0xFF8
 11024                           tblptrh	equ	0xFF7
 11025                           tblptrl	equ	0xFF6
 11026                           tablat	equ	0xFF5
 11027                           prodh	equ	0xFF4
 11028                           prodl	equ	0xFF3
 11029                           intcon	equ	0xFF2
 11030                           intcon2	equ	0xFF1
 11031                           intcon3	equ	0xFF0
 11032                           postinc0	equ	0xFEE
 11033                           fsr0h	equ	0xFEA
 11034                           fsr0l	equ	0xFE9
 11035                           wreg	equ	0xFE8
 11036                           fsr1h	equ	0xFE2
 11037                           fsr1l	equ	0xFE1
 11038                           indf2	equ	0xFDF
 11039                           postinc2	equ	0xFDE
 11040                           postdec2	equ	0xFDD
 11041                           fsr2h	equ	0xFDA
 11042                           fsr2l	equ	0xFD9
 11043                           status	equ	0xFD8
 11044                           
 11045 ;; *************** function ___ftge *****************
 11046 ;; Defined at:
 11047 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 11048 ;; Parameters:    Size  Location     Type
 11049 ;;  ff1             3    0[COMRAM] float 
 11050 ;;  ff2             3    3[COMRAM] float 
 11051 ;; Auto vars:     Size  Location     Type
 11052 ;;		None
 11053 ;; Return value:  Size  Location     Type
 11054 ;;		None               void
 11055 ;; Registers used:
 11056 ;;		wreg, status,2, status,0
 11057 ;; Tracked objects:
 11058 ;;		On entry : 0/0
 11059 ;;		On exit  : 0/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11062 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11065 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11066 ;;Total ram usage:        9 bytes
 11067 ;; Hardware stack levels used:    1
 11068 ;; This function calls:
 11069 ;;		Nothing
 11070 ;; This function is called by:
 11071 ;;		_pow
 11072 ;;		_exp
 11073 ;;		_floor
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           	psect	text53
 11078  002614                     __ptext53:
 11079                           	opt stack 0
 11080  002614                     ___ftge:
 11081                           	opt stack 21
 11082                           
 11083                           ;incstack = 0
 11084  002614  AE03               	btfss	___ftge@ff1+2,7,c
 11085  002616  D016               	goto	i2l3177
 11086  002618  C001  F007         	movff	___ftge@ff1,??___ftge
 11087  00261C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 11088  002620  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 11089  002624  1E07               	comf	??___ftge,f,c
 11090  002626  1E08               	comf	??___ftge+1,f,c
 11091  002628  1E09               	comf	??___ftge+2,f,c
 11092  00262A  2A07               	incf	??___ftge,f,c
 11093  00262C  0E00               	movlw	0
 11094  00262E  2208               	addwfc	??___ftge+1,f,c
 11095  002630  2209               	addwfc	??___ftge+2,f,c
 11096  002632  0E00               	movlw	0
 11097  002634  2407               	addwf	??___ftge,w,c
 11098  002636  6E01               	movwf	___ftge@ff1,c
 11099  002638  0E00               	movlw	0
 11100  00263A  2008               	addwfc	??___ftge+1,w,c
 11101  00263C  6E02               	movwf	___ftge@ff1+1,c
 11102  00263E  0E80               	movlw	128
 11103  002640  2009               	addwfc	??___ftge+2,w,c
 11104  002642  6E03               	movwf	___ftge@ff1+2,c
 11105  002644                     i2l3177:
 11106  002644  AE06               	btfss	___ftge@ff2+2,7,c
 11107  002646  D016               	goto	i2l3181
 11108  002648  C004  F007         	movff	___ftge@ff2,??___ftge
 11109  00264C  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 11110  002650  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 11111  002654  1E07               	comf	??___ftge,f,c
 11112  002656  1E08               	comf	??___ftge+1,f,c
 11113  002658  1E09               	comf	??___ftge+2,f,c
 11114  00265A  2A07               	incf	??___ftge,f,c
 11115  00265C  0E00               	movlw	0
 11116  00265E  2208               	addwfc	??___ftge+1,f,c
 11117  002660  2209               	addwfc	??___ftge+2,f,c
 11118  002662  0E00               	movlw	0
 11119  002664  2407               	addwf	??___ftge,w,c
 11120  002666  6E04               	movwf	___ftge@ff2,c
 11121  002668  0E00               	movlw	0
 11122  00266A  2008               	addwfc	??___ftge+1,w,c
 11123  00266C  6E05               	movwf	___ftge@ff2+1,c
 11124  00266E  0E80               	movlw	128
 11125  002670  2009               	addwfc	??___ftge+2,w,c
 11126  002672  6E06               	movwf	___ftge@ff2+2,c
 11127  002674                     i2l3181:
 11128  002674  0E00               	movlw	0
 11129  002676  1A01               	xorwf	___ftge@ff1,f,c
 11130  002678  0E00               	movlw	0
 11131  00267A  1A02               	xorwf	___ftge@ff1+1,f,c
 11132  00267C  0E80               	movlw	128
 11133  00267E  1A03               	xorwf	___ftge@ff1+2,f,c
 11134  002680  0E00               	movlw	0
 11135  002682  1A04               	xorwf	___ftge@ff2,f,c
 11136  002684  0E00               	movlw	0
 11137  002686  1A05               	xorwf	___ftge@ff2+1,f,c
 11138  002688  0E80               	movlw	128
 11139  00268A  1A06               	xorwf	___ftge@ff2+2,f,c
 11140  00268C  5004               	movf	___ftge@ff2,w,c
 11141  00268E  5C01               	subwf	___ftge@ff1,w,c
 11142  002690  5005               	movf	___ftge@ff2+1,w,c
 11143  002692  5802               	subwfb	___ftge@ff1+1,w,c
 11144  002694  5006               	movf	___ftge@ff2+2,w,c
 11145  002696  5803               	subwfb	___ftge@ff1+2,w,c
 11146  002698  B0D8               	btfsc	status,0,c
 11147  00269A  D002               	goto	i2l3187
 11148  00269C  90D8               	bcf	status,0,c
 11149  00269E  0012               	return	
 11150  0026A0                     i2l3187:
 11151  0026A0  80D8               	bsf	status,0,c
 11152  0026A2  0012               	return	
 11153  0026A4                     __end_of___ftge:
 11154                           	opt stack 0
 11155                           pclatu	equ	0xFFB
 11156                           pclath	equ	0xFFA
 11157                           tblptru	equ	0xFF8
 11158                           tblptrh	equ	0xFF7
 11159                           tblptrl	equ	0xFF6
 11160                           tablat	equ	0xFF5
 11161                           prodh	equ	0xFF4
 11162                           prodl	equ	0xFF3
 11163                           intcon	equ	0xFF2
 11164                           intcon2	equ	0xFF1
 11165                           intcon3	equ	0xFF0
 11166                           postinc0	equ	0xFEE
 11167                           fsr0h	equ	0xFEA
 11168                           fsr0l	equ	0xFE9
 11169                           wreg	equ	0xFE8
 11170                           fsr1h	equ	0xFE2
 11171                           fsr1l	equ	0xFE1
 11172                           indf2	equ	0xFDF
 11173                           postinc2	equ	0xFDE
 11174                           postdec2	equ	0xFDD
 11175                           fsr2h	equ	0xFDA
 11176                           fsr2l	equ	0xFD9
 11177                           status	equ	0xFD8
 11178                           
 11179 ;; *************** function ___altoft *****************
 11180 ;; Defined at:
 11181 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11182 ;; Parameters:    Size  Location     Type
 11183 ;;  c               4   54[COMRAM] long 
 11184 ;; Auto vars:     Size  Location     Type
 11185 ;;  sign            1   63[COMRAM] unsigned char 
 11186 ;;  exp             1   62[COMRAM] unsigned char 
 11187 ;; Return value:  Size  Location     Type
 11188 ;;                  3   54[COMRAM] float 
 11189 ;; Registers used:
 11190 ;;		wreg, status,2, status,0, cstack
 11191 ;; Tracked objects:
 11192 ;;		On entry : 0/0
 11193 ;;		On exit  : 0/0
 11194 ;;		Unchanged: 0/0
 11195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11196 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11197 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11198 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11199 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11200 ;;Total ram usage:       10 bytes
 11201 ;; Hardware stack levels used:    1
 11202 ;; Hardware stack levels required when called:    1
 11203 ;; This function calls:
 11204 ;;		___ftpack
 11205 ;; This function is called by:
 11206 ;;		_floor
 11207 ;; This function uses a non-reentrant model
 11208 ;;
 11209                           
 11210                           	psect	text54
 11211  0027A0                     __ptext54:
 11212                           	opt stack 0
 11213  0027A0                     ___altoft:
 11214                           	opt stack 20
 11215                           
 11216                           ;incstack = 0
 11217  0027A0  0E00               	movlw	0
 11218  0027A2  6E40               	movwf	___altoft@sign,c
 11219  0027A4  0E8E               	movlw	142
 11220  0027A6  6E3F               	movwf	___altoft@exp,c
 11221  0027A8  AE3A               	btfss	___altoft@c+3,7,c
 11222  0027AA  D011               	goto	i2l3049
 11223  0027AC  1E3A               	comf	___altoft@c+3,f,c
 11224  0027AE  1E39               	comf	___altoft@c+2,f,c
 11225  0027B0  1E38               	comf	___altoft@c+1,f,c
 11226  0027B2  6C37               	negf	___altoft@c,c
 11227  0027B4  0E00               	movlw	0
 11228  0027B6  2238               	addwfc	___altoft@c+1,f,c
 11229  0027B8  2239               	addwfc	___altoft@c+2,f,c
 11230  0027BA  223A               	addwfc	___altoft@c+3,f,c
 11231  0027BC  0E01               	movlw	1
 11232  0027BE  6E40               	movwf	___altoft@sign,c
 11233  0027C0  D006               	goto	i2l3049
 11234  0027C2                     i2l3047:
 11235  0027C2  90D8               	bcf	status,0,c
 11236  0027C4  323A               	rrcf	___altoft@c+3,f,c
 11237  0027C6  3239               	rrcf	___altoft@c+2,f,c
 11238  0027C8  3238               	rrcf	___altoft@c+1,f,c
 11239  0027CA  3237               	rrcf	___altoft@c,f,c
 11240  0027CC  2A3F               	incf	___altoft@exp,f,c
 11241  0027CE                     i2l3049:
 11242  0027CE  0E00               	movlw	0
 11243  0027D0  1437               	andwf	___altoft@c,w,c
 11244  0027D2  6E3B               	movwf	??___altoft& (0+255),c
 11245  0027D4  0E00               	movlw	0
 11246  0027D6  1438               	andwf	___altoft@c+1,w,c
 11247  0027D8  6E3C               	movwf	(??___altoft+1)& (0+255),c
 11248  0027DA  0E00               	movlw	0
 11249  0027DC  1439               	andwf	___altoft@c+2,w,c
 11250  0027DE  6E3D               	movwf	(??___altoft+2)& (0+255),c
 11251  0027E0  0EFF               	movlw	255
 11252  0027E2  143A               	andwf	___altoft@c+3,w,c
 11253  0027E4  6E3E               	movwf	(??___altoft+3)& (0+255),c
 11254  0027E6  503B               	movf	??___altoft,w,c
 11255  0027E8  103C               	iorwf	??___altoft+1,w,c
 11256  0027EA  103D               	iorwf	??___altoft+2,w,c
 11257  0027EC  103E               	iorwf	??___altoft+3,w,c
 11258  0027EE  A4D8               	btfss	status,2,c
 11259  0027F0  D7E8               	goto	i2l3047
 11260  0027F2  C037  F001         	movff	___altoft@c,___ftpack@arg
 11261  0027F6  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 11262  0027FA  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 11263  0027FE  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 11264  002802  C040  F005         	movff	___altoft@sign,___ftpack@sign
 11265  002806  ECD2  F011         	call	___ftpack	;wreg free
 11266  00280A  C001  F037         	movff	?___ftpack,?___altoft
 11267  00280E  C002  F038         	movff	?___ftpack+1,?___altoft+1
 11268  002812  C003  F039         	movff	?___ftpack+2,?___altoft+2
 11269  002816  0012               	return	
 11270  002818                     __end_of___altoft:
 11271                           	opt stack 0
 11272                           pclatu	equ	0xFFB
 11273                           pclath	equ	0xFFA
 11274                           tblptru	equ	0xFF8
 11275                           tblptrh	equ	0xFF7
 11276                           tblptrl	equ	0xFF6
 11277                           tablat	equ	0xFF5
 11278                           prodh	equ	0xFF4
 11279                           prodl	equ	0xFF3
 11280                           intcon	equ	0xFF2
 11281                           intcon2	equ	0xFF1
 11282                           intcon3	equ	0xFF0
 11283                           postinc0	equ	0xFEE
 11284                           fsr0h	equ	0xFEA
 11285                           fsr0l	equ	0xFE9
 11286                           wreg	equ	0xFE8
 11287                           fsr1h	equ	0xFE2
 11288                           fsr1l	equ	0xFE1
 11289                           indf2	equ	0xFDF
 11290                           postinc2	equ	0xFDE
 11291                           postdec2	equ	0xFDD
 11292                           fsr2h	equ	0xFDA
 11293                           fsr2l	equ	0xFD9
 11294                           status	equ	0xFD8
 11295                           
 11296 ;; *************** function _eval_poly *****************
 11297 ;; Defined at:
 11298 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 11299 ;; Parameters:    Size  Location     Type
 11300 ;;  x               3   39[COMRAM] float 
 11301 ;;  d               2   42[COMRAM] PTR const 
 11302 ;;		 -> log@coeff(27), exp@coeff(30), 
 11303 ;;  n               2   44[COMRAM] int 
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;  res             3   48[COMRAM] int 
 11306 ;; Return value:  Size  Location     Type
 11307 ;;                  3   39[COMRAM] int 
 11308 ;; Registers used:
 11309 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11310 ;; Tracked objects:
 11311 ;;		On entry : 0/0
 11312 ;;		On exit  : 0/0
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11315 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11316 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11317 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;Total ram usage:       12 bytes
 11320 ;; Hardware stack levels used:    1
 11321 ;; Hardware stack levels required when called:    2
 11322 ;; This function calls:
 11323 ;;		___ftadd
 11324 ;;		___ftmul
 11325 ;;		i2___wmul
 11326 ;; This function is called by:
 11327 ;;		_exp
 11328 ;;		_log
 11329 ;; This function uses a non-reentrant model
 11330 ;;
 11331                           
 11332                           	psect	text55
 11333  001E66                     __ptext55:
 11334                           	opt stack 0
 11335  001E66                     _eval_poly:
 11336                           	opt stack 20
 11337                           
 11338                           ;incstack = 0
 11339  001E66  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11340  001E6A  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11341  001E6E  0E00               	movlw	0
 11342  001E70  6E04               	movwf	i2___wmul@multiplicand+1,c
 11343  001E72  0E03               	movlw	3
 11344  001E74  6E03               	movwf	i2___wmul@multiplicand,c
 11345  001E76  EC68  F016         	call	i2___wmul	;wreg free
 11346  001E7A  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11347  001E7E  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11348  001E82  5001               	movf	?i2___wmul,w,c
 11349  001E84  262F               	addwf	??_eval_poly,f,c
 11350  001E86  5002               	movf	?i2___wmul+1,w,c
 11351  001E88  2230               	addwfc	??_eval_poly+1,f,c
 11352  001E8A  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11353  001E8E  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11354  001E92                     	if	0	;tblptru may be non-zero
 11355  001E92                     	endif
 11356  001E92                     	if	0	;tblptru may be non-zero
 11357  001E92                     	endif
 11358  001E92  0009               	tblrd		*+
 11359  001E94  CFF5 F031          	movff	tablat,eval_poly@res
 11360  001E98  0009               	tblrd		*+
 11361  001E9A  CFF5 F032          	movff	tablat,eval_poly@res+1
 11362  001E9E  000A               	tblrd		*-
 11363  001EA0  CFF5 F033          	movff	tablat,eval_poly@res+2
 11364  001EA4  D03E               	goto	i2l3383
 11365  001EA6                     i2l3381:
 11366  001EA6  C031  F010         	movff	eval_poly@res,___ftmul@f2
 11367  001EAA  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 11368  001EAE  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 11369  001EB2  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 11370  001EB6  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 11371  001EBA  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 11372  001EBE  EC84  F00C         	call	___ftmul	;wreg free
 11373  001EC2  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 11374  001EC6  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 11375  001ECA  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 11376  001ECE  0E00               	movlw	0
 11377  001ED0  6E04               	movwf	i2___wmul@multiplicand+1,c
 11378  001ED2  0E03               	movlw	3
 11379  001ED4  6E03               	movwf	i2___wmul@multiplicand,c
 11380  001ED6  062D               	decf	eval_poly@n,f,c
 11381  001ED8  A0D8               	btfss	status,0,c
 11382  001EDA  062E               	decf	eval_poly@n+1,f,c
 11383  001EDC  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11384  001EE0  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11385  001EE4  EC68  F016         	call	i2___wmul	;wreg free
 11386  001EE8  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11387  001EEC  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11388  001EF0  5001               	movf	?i2___wmul,w,c
 11389  001EF2  262F               	addwf	??_eval_poly,f,c
 11390  001EF4  5002               	movf	?i2___wmul+1,w,c
 11391  001EF6  2230               	addwfc	??_eval_poly+1,f,c
 11392  001EF8  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11393  001EFC  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11394  001F00                     	if	0	;tblptru may be non-zero
 11395  001F00                     	endif
 11396  001F00                     	if	0	;tblptru may be non-zero
 11397  001F00                     	endif
 11398  001F00  0009               	tblrd		*+
 11399  001F02  CFF5 F01F          	movff	tablat,___ftadd@f2
 11400  001F06  0009               	tblrd		*+
 11401  001F08  CFF5 F020          	movff	tablat,___ftadd@f2+1
 11402  001F0C  000A               	tblrd		*-
 11403  001F0E  CFF5 F021          	movff	tablat,___ftadd@f2+2
 11404  001F12  EC0C  F008         	call	___ftadd	;wreg free
 11405  001F16  C01C  F031         	movff	?___ftadd,eval_poly@res
 11406  001F1A  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 11407  001F1E  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 11408  001F22                     i2l3383:
 11409  001F22  502D               	movf	eval_poly@n,w,c
 11410  001F24  102E               	iorwf	eval_poly@n+1,w,c
 11411  001F26  A4D8               	btfss	status,2,c
 11412  001F28  D7BE               	goto	i2l3381
 11413  001F2A  C031  F028         	movff	eval_poly@res,?_eval_poly
 11414  001F2E  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 11415  001F32  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 11416  001F36  0012               	return		;funcret
 11417  001F38                     __end_of_eval_poly:
 11418                           	opt stack 0
 11419                           pclatu	equ	0xFFB
 11420                           pclath	equ	0xFFA
 11421                           tblptru	equ	0xFF8
 11422                           tblptrh	equ	0xFF7
 11423                           tblptrl	equ	0xFF6
 11424                           tablat	equ	0xFF5
 11425                           prodh	equ	0xFF4
 11426                           prodl	equ	0xFF3
 11427                           intcon	equ	0xFF2
 11428                           intcon2	equ	0xFF1
 11429                           intcon3	equ	0xFF0
 11430                           postinc0	equ	0xFEE
 11431                           fsr0h	equ	0xFEA
 11432                           fsr0l	equ	0xFE9
 11433                           wreg	equ	0xFE8
 11434                           fsr1h	equ	0xFE2
 11435                           fsr1l	equ	0xFE1
 11436                           indf2	equ	0xFDF
 11437                           postinc2	equ	0xFDE
 11438                           postdec2	equ	0xFDD
 11439                           fsr2h	equ	0xFDA
 11440                           fsr2l	equ	0xFD9
 11441                           status	equ	0xFD8
 11442                           
 11443 ;; *************** function i2___wmul *****************
 11444 ;; Defined at:
 11445 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11446 ;; Parameters:    Size  Location     Type
 11447 ;;  multiplier      2    0[COMRAM] unsigned int 
 11448 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11449 ;; Auto vars:     Size  Location     Type
 11450 ;;  __wmul          2    4[COMRAM] unsigned int 
 11451 ;; Return value:  Size  Location     Type
 11452 ;;                  2    0[COMRAM] unsigned int 
 11453 ;; Registers used:
 11454 ;;		wreg, status,2, status,0, prodl, prodh
 11455 ;; Tracked objects:
 11456 ;;		On entry : 0/0
 11457 ;;		On exit  : 0/0
 11458 ;;		Unchanged: 0/0
 11459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11460 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11461 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11463 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11464 ;;Total ram usage:        6 bytes
 11465 ;; Hardware stack levels used:    1
 11466 ;; This function calls:
 11467 ;;		Nothing
 11468 ;; This function is called by:
 11469 ;;		_isr
 11470 ;;		_servo_rotate1
 11471 ;;		_servo_rotate2
 11472 ;;		_eval_poly
 11473 ;;		i2_printf
 11474 ;; This function uses a non-reentrant model
 11475 ;;
 11476                           
 11477                           	psect	text56
 11478  002CD0                     __ptext56:
 11479                           	opt stack 0
 11480  002CD0                     i2___wmul:
 11481                           	opt stack 24
 11482                           
 11483                           ;incstack = 0
 11484  002CD0  5001               	movf	i2___wmul@multiplier,w,c
 11485  002CD2  0203               	mulwf	i2___wmul@multiplicand,c
 11486  002CD4  CFF3 F005          	movff	prodl,i2___wmul@product
 11487  002CD8  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11488  002CDC  5001               	movf	i2___wmul@multiplier,w,c
 11489  002CDE  0204               	mulwf	i2___wmul@multiplicand+1,c
 11490  002CE0  50F3               	movf	prodl,w,c
 11491  002CE2  2606               	addwf	i2___wmul@product+1,f,c
 11492  002CE4  5002               	movf	i2___wmul@multiplier+1,w,c
 11493  002CE6  0203               	mulwf	i2___wmul@multiplicand,c
 11494  002CE8  50F3               	movf	prodl,w,c
 11495  002CEA  2606               	addwf	i2___wmul@product+1,f,c
 11496  002CEC  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11497  002CF0  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11498  002CF4  0012               	return	
 11499  002CF6                     __end_ofi2___wmul:
 11500                           	opt stack 0
 11501                           pclatu	equ	0xFFB
 11502                           pclath	equ	0xFFA
 11503                           tblptru	equ	0xFF8
 11504                           tblptrh	equ	0xFF7
 11505                           tblptrl	equ	0xFF6
 11506                           tablat	equ	0xFF5
 11507                           prodh	equ	0xFF4
 11508                           prodl	equ	0xFF3
 11509                           intcon	equ	0xFF2
 11510                           intcon2	equ	0xFF1
 11511                           intcon3	equ	0xFF0
 11512                           postinc0	equ	0xFEE
 11513                           fsr0h	equ	0xFEA
 11514                           fsr0l	equ	0xFE9
 11515                           wreg	equ	0xFE8
 11516                           fsr1h	equ	0xFE2
 11517                           fsr1l	equ	0xFE1
 11518                           indf2	equ	0xFDF
 11519                           postinc2	equ	0xFDE
 11520                           postdec2	equ	0xFDD
 11521                           fsr2h	equ	0xFDA
 11522                           fsr2l	equ	0xFD9
 11523                           status	equ	0xFD8
 11524                           
 11525 ;; *************** function ___ftmul *****************
 11526 ;; Defined at:
 11527 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11528 ;; Parameters:    Size  Location     Type
 11529 ;;  f1              3   12[COMRAM] float 
 11530 ;;  f2              3   15[COMRAM] float 
 11531 ;; Auto vars:     Size  Location     Type
 11532 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 11533 ;;  sign            1   26[COMRAM] unsigned char 
 11534 ;;  cntr            1   25[COMRAM] unsigned char 
 11535 ;;  exp             1   21[COMRAM] unsigned char 
 11536 ;; Return value:  Size  Location     Type
 11537 ;;                  3   12[COMRAM] float 
 11538 ;; Registers used:
 11539 ;;		wreg, status,2, status,0, cstack
 11540 ;; Tracked objects:
 11541 ;;		On entry : 0/0
 11542 ;;		On exit  : 0/0
 11543 ;;		Unchanged: 0/0
 11544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11545 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11546 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11547 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11548 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11549 ;;Total ram usage:       15 bytes
 11550 ;; Hardware stack levels used:    1
 11551 ;; Hardware stack levels required when called:    1
 11552 ;; This function calls:
 11553 ;;		___ftpack
 11554 ;; This function is called by:
 11555 ;;		_dec_to_hex
 11556 ;;		_pow
 11557 ;;		_exp
 11558 ;;		_log
 11559 ;;		_eval_poly
 11560 ;; This function uses a non-reentrant model
 11561 ;;
 11562                           
 11563                           	psect	text57
 11564  001908                     __ptext57:
 11565                           	opt stack 0
 11566  001908                     ___ftmul:
 11567                           	opt stack 20
 11568                           
 11569                           ;incstack = 0
 11570  001908  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 11571  00190C  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11572  00190E  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11573  001910  340E               	rlcf	___ftmul@f1+1,w,c
 11574  001912  3613               	rlcf	??___ftmul& (0+255),f,c
 11575  001914  E301               	bnc	u257_41
 11576  001916  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11577  001918                     u257_41:
 11578  001918  5013               	movf	??___ftmul,w,c
 11579  00191A  6E16               	movwf	___ftmul@exp,c
 11580  00191C  5016               	movf	___ftmul@exp,w,c
 11581  00191E  A4D8               	btfss	status,2,c
 11582  001920  D007               	goto	i2l3131
 11583  001922  0E00               	movlw	0
 11584  001924  6E0D               	movwf	?___ftmul,c
 11585  001926  0E00               	movlw	0
 11586  001928  6E0E               	movwf	?___ftmul+1,c
 11587  00192A  0E00               	movlw	0
 11588  00192C  6E0F               	movwf	?___ftmul+2,c
 11589  00192E  0012               	return	
 11590  001930                     i2l3131:
 11591  001930  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 11592  001934  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11593  001936  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11594  001938  3411               	rlcf	___ftmul@f2+1,w,c
 11595  00193A  3613               	rlcf	??___ftmul& (0+255),f,c
 11596  00193C  E301               	bnc	u259_41
 11597  00193E  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11598  001940                     u259_41:
 11599  001940  5013               	movf	??___ftmul,w,c
 11600  001942  6E1B               	movwf	___ftmul@sign,c
 11601  001944  501B               	movf	___ftmul@sign,w,c
 11602  001946  A4D8               	btfss	status,2,c
 11603  001948  D007               	goto	i2l3137
 11604  00194A  0E00               	movlw	0
 11605  00194C  6E0D               	movwf	?___ftmul,c
 11606  00194E  0E00               	movlw	0
 11607  001950  6E0E               	movwf	?___ftmul+1,c
 11608  001952  0E00               	movlw	0
 11609  001954  6E0F               	movwf	?___ftmul+2,c
 11610  001956  0012               	return	
 11611  001958                     i2l3137:
 11612  001958  501B               	movf	___ftmul@sign,w,c
 11613  00195A  0F7B               	addlw	123
 11614  00195C  2616               	addwf	___ftmul@exp,f,c
 11615  00195E  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 11616  001962  5012               	movf	___ftmul@f2+2,w,c
 11617  001964  1A1B               	xorwf	___ftmul@sign,f,c
 11618  001966  0E80               	movlw	128
 11619  001968  161B               	andwf	___ftmul@sign,f,c
 11620  00196A  8E0E               	bsf	___ftmul@f1+1,7,c
 11621  00196C  8E11               	bsf	___ftmul@f2+1,7,c
 11622  00196E  0EFF               	movlw	255
 11623  001970  1610               	andwf	___ftmul@f2,f,c
 11624  001972  0EFF               	movlw	255
 11625  001974  1611               	andwf	___ftmul@f2+1,f,c
 11626  001976  0E00               	movlw	0
 11627  001978  1612               	andwf	___ftmul@f2+2,f,c
 11628  00197A  0E00               	movlw	0
 11629  00197C  6E17               	movwf	___ftmul@f3_as_product,c
 11630  00197E  0E00               	movlw	0
 11631  001980  6E18               	movwf	___ftmul@f3_as_product+1,c
 11632  001982  0E00               	movlw	0
 11633  001984  6E19               	movwf	___ftmul@f3_as_product+2,c
 11634  001986  0E07               	movlw	7
 11635  001988  6E1A               	movwf	___ftmul@cntr,c
 11636  00198A                     i2l3151:
 11637  00198A  A00D               	btfss	___ftmul@f1,0,c
 11638  00198C  D006               	goto	i2l3155
 11639  00198E  5010               	movf	___ftmul@f2,w,c
 11640  001990  2617               	addwf	___ftmul@f3_as_product,f,c
 11641  001992  5011               	movf	___ftmul@f2+1,w,c
 11642  001994  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11643  001996  5012               	movf	___ftmul@f2+2,w,c
 11644  001998  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11645  00199A                     i2l3155:
 11646  00199A  90D8               	bcf	status,0,c
 11647  00199C  320F               	rrcf	___ftmul@f1+2,f,c
 11648  00199E  320E               	rrcf	___ftmul@f1+1,f,c
 11649  0019A0  320D               	rrcf	___ftmul@f1,f,c
 11650  0019A2  90D8               	bcf	status,0,c
 11651  0019A4  3610               	rlcf	___ftmul@f2,f,c
 11652  0019A6  3611               	rlcf	___ftmul@f2+1,f,c
 11653  0019A8  3612               	rlcf	___ftmul@f2+2,f,c
 11654  0019AA  2E1A               	decfsz	___ftmul@cntr,f,c
 11655  0019AC  D7EE               	goto	i2l3151
 11656  0019AE  0E09               	movlw	9
 11657  0019B0  6E1A               	movwf	___ftmul@cntr,c
 11658  0019B2                     i2l3161:
 11659  0019B2  A00D               	btfss	___ftmul@f1,0,c
 11660  0019B4  D006               	goto	i2l3165
 11661  0019B6  5010               	movf	___ftmul@f2,w,c
 11662  0019B8  2617               	addwf	___ftmul@f3_as_product,f,c
 11663  0019BA  5011               	movf	___ftmul@f2+1,w,c
 11664  0019BC  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11665  0019BE  5012               	movf	___ftmul@f2+2,w,c
 11666  0019C0  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11667  0019C2                     i2l3165:
 11668  0019C2  90D8               	bcf	status,0,c
 11669  0019C4  320F               	rrcf	___ftmul@f1+2,f,c
 11670  0019C6  320E               	rrcf	___ftmul@f1+1,f,c
 11671  0019C8  320D               	rrcf	___ftmul@f1,f,c
 11672  0019CA  90D8               	bcf	status,0,c
 11673  0019CC  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 11674  0019CE  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 11675  0019D0  3217               	rrcf	___ftmul@f3_as_product,f,c
 11676  0019D2  2E1A               	decfsz	___ftmul@cntr,f,c
 11677  0019D4  D7EE               	goto	i2l3161
 11678  0019D6  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 11679  0019DA  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11680  0019DE  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11681  0019E2  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 11682  0019E6  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 11683  0019EA  ECD2  F011         	call	___ftpack	;wreg free
 11684  0019EE  C001  F00D         	movff	?___ftpack,?___ftmul
 11685  0019F2  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 11686  0019F6  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 11687  0019FA  0012               	return	
 11688  0019FC                     __end_of___ftmul:
 11689                           	opt stack 0
 11690                           pclatu	equ	0xFFB
 11691                           pclath	equ	0xFFA
 11692                           tblptru	equ	0xFF8
 11693                           tblptrh	equ	0xFF7
 11694                           tblptrl	equ	0xFF6
 11695                           tablat	equ	0xFF5
 11696                           prodh	equ	0xFF4
 11697                           prodl	equ	0xFF3
 11698                           intcon	equ	0xFF2
 11699                           intcon2	equ	0xFF1
 11700                           intcon3	equ	0xFF0
 11701                           postinc0	equ	0xFEE
 11702                           fsr0h	equ	0xFEA
 11703                           fsr0l	equ	0xFE9
 11704                           wreg	equ	0xFE8
 11705                           fsr1h	equ	0xFE2
 11706                           fsr1l	equ	0xFE1
 11707                           indf2	equ	0xFDF
 11708                           postinc2	equ	0xFDE
 11709                           postdec2	equ	0xFDD
 11710                           fsr2h	equ	0xFDA
 11711                           fsr2l	equ	0xFD9
 11712                           status	equ	0xFD8
 11713                           
 11714 ;; *************** function ___ftsub *****************
 11715 ;; Defined at:
 11716 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 11717 ;; Parameters:    Size  Location     Type
 11718 ;;  f1              3   39[COMRAM] float 
 11719 ;;  f2              3   42[COMRAM] float 
 11720 ;; Auto vars:     Size  Location     Type
 11721 ;;		None
 11722 ;; Return value:  Size  Location     Type
 11723 ;;                  3   39[COMRAM] float 
 11724 ;; Registers used:
 11725 ;;		wreg, status,2, status,0, cstack
 11726 ;; Tracked objects:
 11727 ;;		On entry : 0/0
 11728 ;;		On exit  : 0/0
 11729 ;;		Unchanged: 0/0
 11730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11731 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11734 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11735 ;;Total ram usage:        6 bytes
 11736 ;; Hardware stack levels used:    1
 11737 ;; Hardware stack levels required when called:    2
 11738 ;; This function calls:
 11739 ;;		___ftadd
 11740 ;; This function is called by:
 11741 ;;		_exp
 11742 ;; This function uses a non-reentrant model
 11743 ;;
 11744                           
 11745                           	psect	text58
 11746  002B30                     __ptext58:
 11747                           	opt stack 0
 11748  002B30                     ___ftsub:
 11749                           	opt stack 20
 11750                           
 11751                           ;incstack = 0
 11752  002B30  502B               	movf	___ftsub@f2,w,c
 11753  002B32  102C               	iorwf	___ftsub@f2+1,w,c
 11754  002B34  102D               	iorwf	___ftsub@f2+2,w,c
 11755  002B36  B4D8               	btfsc	status,2,c
 11756  002B38  D006               	goto	i2l3335
 11757  002B3A  0E00               	movlw	0
 11758  002B3C  1A2B               	xorwf	___ftsub@f2,f,c
 11759  002B3E  0E00               	movlw	0
 11760  002B40  1A2C               	xorwf	___ftsub@f2+1,f,c
 11761  002B42  0E80               	movlw	128
 11762  002B44  1A2D               	xorwf	___ftsub@f2+2,f,c
 11763  002B46                     i2l3335:
 11764  002B46  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 11765  002B4A  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 11766  002B4E  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 11767  002B52  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 11768  002B56  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 11769  002B5A  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 11770  002B5E  EC0C  F008         	call	___ftadd	;wreg free
 11771  002B62  C01C  F028         	movff	?___ftadd,?___ftsub
 11772  002B66  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 11773  002B6A  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 11774  002B6E  0012               	return	
 11775  002B70                     __end_of___ftsub:
 11776                           	opt stack 0
 11777                           pclatu	equ	0xFFB
 11778                           pclath	equ	0xFFA
 11779                           tblptru	equ	0xFF8
 11780                           tblptrh	equ	0xFF7
 11781                           tblptrl	equ	0xFF6
 11782                           tablat	equ	0xFF5
 11783                           prodh	equ	0xFF4
 11784                           prodl	equ	0xFF3
 11785                           intcon	equ	0xFF2
 11786                           intcon2	equ	0xFF1
 11787                           intcon3	equ	0xFF0
 11788                           postinc0	equ	0xFEE
 11789                           fsr0h	equ	0xFEA
 11790                           fsr0l	equ	0xFE9
 11791                           wreg	equ	0xFE8
 11792                           fsr1h	equ	0xFE2
 11793                           fsr1l	equ	0xFE1
 11794                           indf2	equ	0xFDF
 11795                           postinc2	equ	0xFDE
 11796                           postdec2	equ	0xFDD
 11797                           fsr2h	equ	0xFDA
 11798                           fsr2l	equ	0xFD9
 11799                           status	equ	0xFD8
 11800                           
 11801 ;; *************** function ___ftadd *****************
 11802 ;; Defined at:
 11803 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11804 ;; Parameters:    Size  Location     Type
 11805 ;;  f1              3   27[COMRAM] float 
 11806 ;;  f2              3   30[COMRAM] float 
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;  exp1            1   38[COMRAM] unsigned char 
 11809 ;;  exp2            1   37[COMRAM] unsigned char 
 11810 ;;  sign            1   36[COMRAM] unsigned char 
 11811 ;; Return value:  Size  Location     Type
 11812 ;;                  3   27[COMRAM] float 
 11813 ;; Registers used:
 11814 ;;		wreg, status,2, status,0, cstack
 11815 ;; Tracked objects:
 11816 ;;		On entry : 0/0
 11817 ;;		On exit  : 0/0
 11818 ;;		Unchanged: 0/0
 11819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11820 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11821 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11822 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11823 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;Total ram usage:       12 bytes
 11825 ;; Hardware stack levels used:    1
 11826 ;; Hardware stack levels required when called:    1
 11827 ;; This function calls:
 11828 ;;		___ftpack
 11829 ;; This function is called by:
 11830 ;;		_dec_to_hex
 11831 ;;		___ftsub
 11832 ;;		_floor
 11833 ;;		_log
 11834 ;;		_eval_poly
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           	psect	text59
 11839  001018                     __ptext59:
 11840                           	opt stack 0
 11841  001018                     ___ftadd:
 11842                           	opt stack 20
 11843                           
 11844                           ;incstack = 0
 11845  001018  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 11846  00101C  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11847  00101E  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11848  001020  341D               	rlcf	___ftadd@f1+1,w,c
 11849  001022  3622               	rlcf	??___ftadd& (0+255),f,c
 11850  001024  E301               	bnc	u236_41
 11851  001026  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11852  001028                     u236_41:
 11853  001028  5022               	movf	??___ftadd,w,c
 11854  00102A  6E27               	movwf	___ftadd@exp1,c
 11855  00102C  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 11856  001030  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11857  001032  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11858  001034  3420               	rlcf	___ftadd@f2+1,w,c
 11859  001036  3622               	rlcf	??___ftadd& (0+255),f,c
 11860  001038  E301               	bnc	u237_41
 11861  00103A  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11862  00103C                     u237_41:
 11863  00103C  5022               	movf	??___ftadd,w,c
 11864  00103E  6E26               	movwf	___ftadd@exp2,c
 11865  001040  5027               	movf	___ftadd@exp1,w,c
 11866  001042  B4D8               	btfsc	status,2,c
 11867  001044  D00B               	goto	i2l735
 11868  001046  5026               	movf	___ftadd@exp2,w,c
 11869  001048  5C27               	subwf	___ftadd@exp1,w,c
 11870  00104A  B0D8               	btfsc	status,0,c
 11871  00104C  D00E               	goto	i2l3063
 11872  00104E  5027               	movf	___ftadd@exp1,w,c
 11873  001050  0800               	sublw	0
 11874  001052  2426               	addwf	___ftadd@exp2,w,c
 11875  001054  6E22               	movwf	??___ftadd& (0+255),c
 11876  001056  0E18               	movlw	24
 11877  001058  6422               	cpfsgt	??___ftadd,c
 11878  00105A  D007               	goto	i2l3063
 11879  00105C                     i2l735:
 11880  00105C  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 11881  001060  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 11882  001064  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 11883  001068  0012               	return	
 11884  00106A                     i2l3063:
 11885  00106A  5026               	movf	___ftadd@exp2,w,c
 11886  00106C  B4D8               	btfsc	status,2,c
 11887  00106E  D00B               	goto	i2l739
 11888  001070  5027               	movf	___ftadd@exp1,w,c
 11889  001072  5C26               	subwf	___ftadd@exp2,w,c
 11890  001074  B0D8               	btfsc	status,0,c
 11891  001076  D00E               	goto	i2l3069
 11892  001078  5026               	movf	___ftadd@exp2,w,c
 11893  00107A  0800               	sublw	0
 11894  00107C  2427               	addwf	___ftadd@exp1,w,c
 11895  00107E  6E22               	movwf	??___ftadd& (0+255),c
 11896  001080  0E18               	movlw	24
 11897  001082  6422               	cpfsgt	??___ftadd,c
 11898  001084  D007               	goto	i2l3069
 11899  001086                     i2l739:
 11900  001086  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 11901  00108A  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 11902  00108E  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 11903  001092  0012               	return	
 11904  001094                     i2l3069:
 11905  001094  0E06               	movlw	6
 11906  001096  6E25               	movwf	___ftadd@sign,c
 11907  001098  BE1E               	btfsc	___ftadd@f1+2,7,c
 11908  00109A  8E25               	bsf	___ftadd@sign,7,c
 11909  00109C  BE21               	btfsc	___ftadd@f2+2,7,c
 11910  00109E  8C25               	bsf	___ftadd@sign,6,c
 11911  0010A0  8E1D               	bsf	___ftadd@f1+1,7,c
 11912  0010A2  0EFF               	movlw	255
 11913  0010A4  161C               	andwf	___ftadd@f1,f,c
 11914  0010A6  0EFF               	movlw	255
 11915  0010A8  161D               	andwf	___ftadd@f1+1,f,c
 11916  0010AA  0E00               	movlw	0
 11917  0010AC  161E               	andwf	___ftadd@f1+2,f,c
 11918  0010AE  8E20               	bsf	___ftadd@f2+1,7,c
 11919  0010B0  0EFF               	movlw	255
 11920  0010B2  161F               	andwf	___ftadd@f2,f,c
 11921  0010B4  0EFF               	movlw	255
 11922  0010B6  1620               	andwf	___ftadd@f2+1,f,c
 11923  0010B8  0E00               	movlw	0
 11924  0010BA  1621               	andwf	___ftadd@f2+2,f,c
 11925  0010BC  5026               	movf	___ftadd@exp2,w,c
 11926  0010BE  5C27               	subwf	___ftadd@exp1,w,c
 11927  0010C0  B0D8               	btfsc	status,0,c
 11928  0010C2  D01B               	goto	i2l3095
 11929  0010C4                     i2l3085:
 11930  0010C4  90D8               	bcf	status,0,c
 11931  0010C6  361F               	rlcf	___ftadd@f2,f,c
 11932  0010C8  3620               	rlcf	___ftadd@f2+1,f,c
 11933  0010CA  3621               	rlcf	___ftadd@f2+2,f,c
 11934  0010CC  0626               	decf	___ftadd@exp2,f,c
 11935  0010CE  5027               	movf	___ftadd@exp1,w,c
 11936  0010D0  1826               	xorwf	___ftadd@exp2,w,c
 11937  0010D2  B4D8               	btfsc	status,2,c
 11938  0010D4  D00D               	goto	i2l3093
 11939  0010D6  0625               	decf	___ftadd@sign,f,c
 11940  0010D8  C025  F022         	movff	___ftadd@sign,??___ftadd
 11941  0010DC  0E07               	movlw	7
 11942  0010DE  1622               	andwf	??___ftadd,f,c
 11943  0010E0  B4D8               	btfsc	status,2,c
 11944  0010E2  D006               	goto	i2l3093
 11945  0010E4  D7EF               	goto	i2l3085
 11946  0010E6                     i2l3091:
 11947  0010E6  90D8               	bcf	status,0,c
 11948  0010E8  321E               	rrcf	___ftadd@f1+2,f,c
 11949  0010EA  321D               	rrcf	___ftadd@f1+1,f,c
 11950  0010EC  321C               	rrcf	___ftadd@f1,f,c
 11951  0010EE  2A27               	incf	___ftadd@exp1,f,c
 11952  0010F0                     i2l3093:
 11953  0010F0  5026               	movf	___ftadd@exp2,w,c
 11954  0010F2  1827               	xorwf	___ftadd@exp1,w,c
 11955  0010F4  B4D8               	btfsc	status,2,c
 11956  0010F6  D01F               	goto	i2l750
 11957  0010F8  D7F6               	goto	i2l3091
 11958  0010FA                     i2l3095:
 11959  0010FA  5027               	movf	___ftadd@exp1,w,c
 11960  0010FC  5C26               	subwf	___ftadd@exp2,w,c
 11961  0010FE  B0D8               	btfsc	status,0,c
 11962  001100  D01A               	goto	i2l750
 11963  001102                     i2l3097:
 11964  001102  90D8               	bcf	status,0,c
 11965  001104  361C               	rlcf	___ftadd@f1,f,c
 11966  001106  361D               	rlcf	___ftadd@f1+1,f,c
 11967  001108  361E               	rlcf	___ftadd@f1+2,f,c
 11968  00110A  0627               	decf	___ftadd@exp1,f,c
 11969  00110C  5027               	movf	___ftadd@exp1,w,c
 11970  00110E  1826               	xorwf	___ftadd@exp2,w,c
 11971  001110  B4D8               	btfsc	status,2,c
 11972  001112  D00D               	goto	i2l3105
 11973  001114  0625               	decf	___ftadd@sign,f,c
 11974  001116  C025  F022         	movff	___ftadd@sign,??___ftadd
 11975  00111A  0E07               	movlw	7
 11976  00111C  1622               	andwf	??___ftadd,f,c
 11977  00111E  B4D8               	btfsc	status,2,c
 11978  001120  D006               	goto	i2l3105
 11979  001122  D7EF               	goto	i2l3097
 11980  001124                     i2l3103:
 11981  001124  90D8               	bcf	status,0,c
 11982  001126  3221               	rrcf	___ftadd@f2+2,f,c
 11983  001128  3220               	rrcf	___ftadd@f2+1,f,c
 11984  00112A  321F               	rrcf	___ftadd@f2,f,c
 11985  00112C  2A26               	incf	___ftadd@exp2,f,c
 11986  00112E                     i2l3105:
 11987  00112E  5026               	movf	___ftadd@exp2,w,c
 11988  001130  1827               	xorwf	___ftadd@exp1,w,c
 11989  001132  A4D8               	btfss	status,2,c
 11990  001134  D7F7               	goto	i2l3103
 11991  001136                     i2l750:
 11992  001136  AE25               	btfss	___ftadd@sign,7,c
 11993  001138  D00C               	goto	i2l759
 11994  00113A  0EFF               	movlw	255
 11995  00113C  1A1C               	xorwf	___ftadd@f1,f,c
 11996  00113E  0EFF               	movlw	255
 11997  001140  1A1D               	xorwf	___ftadd@f1+1,f,c
 11998  001142  0EFF               	movlw	255
 11999  001144  1A1E               	xorwf	___ftadd@f1+2,f,c
 12000  001146  0E01               	movlw	1
 12001  001148  261C               	addwf	___ftadd@f1,f,c
 12002  00114A  0E00               	movlw	0
 12003  00114C  221D               	addwfc	___ftadd@f1+1,f,c
 12004  00114E  0E00               	movlw	0
 12005  001150  221E               	addwfc	___ftadd@f1+2,f,c
 12006  001152                     i2l759:
 12007  001152  AC25               	btfss	___ftadd@sign,6,c
 12008  001154  D00C               	goto	i2l3111
 12009  001156  0EFF               	movlw	255
 12010  001158  1A1F               	xorwf	___ftadd@f2,f,c
 12011  00115A  0EFF               	movlw	255
 12012  00115C  1A20               	xorwf	___ftadd@f2+1,f,c
 12013  00115E  0EFF               	movlw	255
 12014  001160  1A21               	xorwf	___ftadd@f2+2,f,c
 12015  001162  0E01               	movlw	1
 12016  001164  261F               	addwf	___ftadd@f2,f,c
 12017  001166  0E00               	movlw	0
 12018  001168  2220               	addwfc	___ftadd@f2+1,f,c
 12019  00116A  0E00               	movlw	0
 12020  00116C  2221               	addwfc	___ftadd@f2+2,f,c
 12021  00116E                     i2l3111:
 12022  00116E  0E00               	movlw	0
 12023  001170  6E25               	movwf	___ftadd@sign,c
 12024  001172  501C               	movf	___ftadd@f1,w,c
 12025  001174  261F               	addwf	___ftadd@f2,f,c
 12026  001176  501D               	movf	___ftadd@f1+1,w,c
 12027  001178  2220               	addwfc	___ftadd@f2+1,f,c
 12028  00117A  501E               	movf	___ftadd@f1+2,w,c
 12029  00117C  2221               	addwfc	___ftadd@f2+2,f,c
 12030  00117E  AE21               	btfss	___ftadd@f2+2,7,c
 12031  001180  D00E               	goto	i2l3121
 12032  001182  0EFF               	movlw	255
 12033  001184  1A1F               	xorwf	___ftadd@f2,f,c
 12034  001186  0EFF               	movlw	255
 12035  001188  1A20               	xorwf	___ftadd@f2+1,f,c
 12036  00118A  0EFF               	movlw	255
 12037  00118C  1A21               	xorwf	___ftadd@f2+2,f,c
 12038  00118E  0E01               	movlw	1
 12039  001190  261F               	addwf	___ftadd@f2,f,c
 12040  001192  0E00               	movlw	0
 12041  001194  2220               	addwfc	___ftadd@f2+1,f,c
 12042  001196  0E00               	movlw	0
 12043  001198  2221               	addwfc	___ftadd@f2+2,f,c
 12044  00119A  0E01               	movlw	1
 12045  00119C  6E25               	movwf	___ftadd@sign,c
 12046  00119E                     i2l3121:
 12047  00119E  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 12048  0011A2  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 12049  0011A6  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 12050  0011AA  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 12051  0011AE  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 12052  0011B2  ECD2  F011         	call	___ftpack	;wreg free
 12053  0011B6  C001  F01C         	movff	?___ftpack,?___ftadd
 12054  0011BA  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 12055  0011BE  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 12056  0011C2  0012               	return	
 12057  0011C4                     __end_of___ftadd:
 12058                           	opt stack 0
 12059                           pclatu	equ	0xFFB
 12060                           pclath	equ	0xFFA
 12061                           tblptru	equ	0xFF8
 12062                           tblptrh	equ	0xFF7
 12063                           tblptrl	equ	0xFF6
 12064                           tablat	equ	0xFF5
 12065                           prodh	equ	0xFF4
 12066                           prodl	equ	0xFF3
 12067                           intcon	equ	0xFF2
 12068                           intcon2	equ	0xFF1
 12069                           intcon3	equ	0xFF0
 12070                           postinc0	equ	0xFEE
 12071                           fsr0h	equ	0xFEA
 12072                           fsr0l	equ	0xFE9
 12073                           wreg	equ	0xFE8
 12074                           fsr1h	equ	0xFE2
 12075                           fsr1l	equ	0xFE1
 12076                           indf2	equ	0xFDF
 12077                           postinc2	equ	0xFDE
 12078                           postdec2	equ	0xFDD
 12079                           fsr2h	equ	0xFDA
 12080                           fsr2l	equ	0xFD9
 12081                           status	equ	0xFD8
 12082                           
 12083 ;; *************** function ___ftneg *****************
 12084 ;; Defined at:
 12085 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;  f1              3    0[COMRAM] float 
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;		None
 12090 ;; Return value:  Size  Location     Type
 12091 ;;                  3    0[COMRAM] float 
 12092 ;; Registers used:
 12093 ;;		wreg, status,2, status,0
 12094 ;; Tracked objects:
 12095 ;;		On entry : 0/0
 12096 ;;		On exit  : 0/0
 12097 ;;		Unchanged: 0/0
 12098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12099 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12102 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12103 ;;Total ram usage:        3 bytes
 12104 ;; Hardware stack levels used:    1
 12105 ;; This function calls:
 12106 ;;		Nothing
 12107 ;; This function is called by:
 12108 ;;		_pow
 12109 ;;		_exp
 12110 ;; This function uses a non-reentrant model
 12111 ;;
 12112                           
 12113                           	psect	text60
 12114  002CF6                     __ptext60:
 12115                           	opt stack 0
 12116  002CF6                     ___ftneg:
 12117                           	opt stack 22
 12118                           
 12119                           ;incstack = 0
 12120  002CF6  5001               	movf	___ftneg@f1,w,c
 12121  002CF8  1002               	iorwf	___ftneg@f1+1,w,c
 12122  002CFA  1003               	iorwf	___ftneg@f1+2,w,c
 12123  002CFC  B4D8               	btfsc	status,2,c
 12124  002CFE  D006               	goto	i2l792
 12125  002D00  0E00               	movlw	0
 12126  002D02  1A01               	xorwf	___ftneg@f1,f,c
 12127  002D04  0E00               	movlw	0
 12128  002D06  1A02               	xorwf	___ftneg@f1+1,f,c
 12129  002D08  0E80               	movlw	128
 12130  002D0A  1A03               	xorwf	___ftneg@f1+2,f,c
 12131  002D0C                     i2l792:
 12132  002D0C  C001  F001         	movff	___ftneg@f1,?___ftneg
 12133  002D10  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 12134  002D14  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 12135  002D18  0012               	return		;funcret
 12136  002D1A                     __end_of___ftneg:
 12137                           	opt stack 0
 12138                           pclatu	equ	0xFFB
 12139                           pclath	equ	0xFFA
 12140                           tblptru	equ	0xFF8
 12141                           tblptrh	equ	0xFF7
 12142                           tblptrl	equ	0xFF6
 12143                           tablat	equ	0xFF5
 12144                           prodh	equ	0xFF4
 12145                           prodl	equ	0xFF3
 12146                           intcon	equ	0xFF2
 12147                           intcon2	equ	0xFF1
 12148                           intcon3	equ	0xFF0
 12149                           postinc0	equ	0xFEE
 12150                           fsr0h	equ	0xFEA
 12151                           fsr0l	equ	0xFE9
 12152                           wreg	equ	0xFE8
 12153                           fsr1h	equ	0xFE2
 12154                           fsr1l	equ	0xFE1
 12155                           indf2	equ	0xFDF
 12156                           postinc2	equ	0xFDE
 12157                           postdec2	equ	0xFDD
 12158                           fsr2h	equ	0xFDA
 12159                           fsr2l	equ	0xFD9
 12160                           status	equ	0xFD8
 12161                           
 12162 ;; *************** function ___ftdiv *****************
 12163 ;; Defined at:
 12164 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 12165 ;; Parameters:    Size  Location     Type
 12166 ;;  f1              3    8[COMRAM] float 
 12167 ;;  f2              3   11[COMRAM] float 
 12168 ;; Auto vars:     Size  Location     Type
 12169 ;;  f3              3   18[COMRAM] float 
 12170 ;;  sign            1   22[COMRAM] unsigned char 
 12171 ;;  exp             1   21[COMRAM] unsigned char 
 12172 ;;  cntr            1   17[COMRAM] unsigned char 
 12173 ;; Return value:  Size  Location     Type
 12174 ;;                  3    8[COMRAM] float 
 12175 ;; Registers used:
 12176 ;;		wreg, status,2, status,0, cstack
 12177 ;; Tracked objects:
 12178 ;;		On entry : 0/0
 12179 ;;		On exit  : 0/0
 12180 ;;		Unchanged: 0/0
 12181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12182 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12183 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12184 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12185 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12186 ;;Total ram usage:       15 bytes
 12187 ;; Hardware stack levels used:    1
 12188 ;; Hardware stack levels required when called:    1
 12189 ;; This function calls:
 12190 ;;		___ftpack
 12191 ;; This function is called by:
 12192 ;;		_exp
 12193 ;; This function uses a non-reentrant model
 12194 ;;
 12195                           
 12196                           	psect	text61
 12197  001BD0                     __ptext61:
 12198                           	opt stack 0
 12199  001BD0                     ___ftdiv:
 12200                           	opt stack 21
 12201                           
 12202                           ;incstack = 0
 12203  001BD0  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 12204  001BD4  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 12205  001BD6  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 12206  001BD8  340A               	rlcf	___ftdiv@f1+1,w,c
 12207  001BDA  360F               	rlcf	??___ftdiv& (0+255),f,c
 12208  001BDC  E301               	bnc	u278_41
 12209  001BDE  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 12210  001BE0                     u278_41:
 12211  001BE0  500F               	movf	??___ftdiv,w,c
 12212  001BE2  6E16               	movwf	___ftdiv@exp,c
 12213  001BE4  5016               	movf	___ftdiv@exp,w,c
 12214  001BE6  A4D8               	btfss	status,2,c
 12215  001BE8  D007               	goto	i2l3291
 12216  001BEA  0E00               	movlw	0
 12217  001BEC  6E09               	movwf	?___ftdiv,c
 12218  001BEE  0E00               	movlw	0
 12219  001BF0  6E0A               	movwf	?___ftdiv+1,c
 12220  001BF2  0E00               	movlw	0
 12221  001BF4  6E0B               	movwf	?___ftdiv+2,c
 12222  001BF6  0012               	return	
 12223  001BF8                     i2l3291:
 12224  001BF8  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 12225  001BFC  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 12226  001BFE  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 12227  001C00  340D               	rlcf	___ftdiv@f2+1,w,c
 12228  001C02  360F               	rlcf	??___ftdiv& (0+255),f,c
 12229  001C04  E301               	bnc	u280_41
 12230  001C06  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 12231  001C08                     u280_41:
 12232  001C08  500F               	movf	??___ftdiv,w,c
 12233  001C0A  6E17               	movwf	___ftdiv@sign,c
 12234  001C0C  5017               	movf	___ftdiv@sign,w,c
 12235  001C0E  A4D8               	btfss	status,2,c
 12236  001C10  D007               	goto	i2l3297
 12237  001C12  0E00               	movlw	0
 12238  001C14  6E09               	movwf	?___ftdiv,c
 12239  001C16  0E00               	movlw	0
 12240  001C18  6E0A               	movwf	?___ftdiv+1,c
 12241  001C1A  0E00               	movlw	0
 12242  001C1C  6E0B               	movwf	?___ftdiv+2,c
 12243  001C1E  0012               	return	
 12244  001C20                     i2l3297:
 12245  001C20  0E00               	movlw	0
 12246  001C22  6E13               	movwf	___ftdiv@f3,c
 12247  001C24  0E00               	movlw	0
 12248  001C26  6E14               	movwf	___ftdiv@f3+1,c
 12249  001C28  0E00               	movlw	0
 12250  001C2A  6E15               	movwf	___ftdiv@f3+2,c
 12251  001C2C  5017               	movf	___ftdiv@sign,w,c
 12252  001C2E  0F89               	addlw	137
 12253  001C30  5E16               	subwf	___ftdiv@exp,f,c
 12254  001C32  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 12255  001C36  500E               	movf	___ftdiv@f2+2,w,c
 12256  001C38  1A17               	xorwf	___ftdiv@sign,f,c
 12257  001C3A  0E80               	movlw	128
 12258  001C3C  1617               	andwf	___ftdiv@sign,f,c
 12259  001C3E  8E0A               	bsf	___ftdiv@f1+1,7,c
 12260  001C40  0EFF               	movlw	255
 12261  001C42  1609               	andwf	___ftdiv@f1,f,c
 12262  001C44  0EFF               	movlw	255
 12263  001C46  160A               	andwf	___ftdiv@f1+1,f,c
 12264  001C48  0E00               	movlw	0
 12265  001C4A  160B               	andwf	___ftdiv@f1+2,f,c
 12266  001C4C  8E0D               	bsf	___ftdiv@f2+1,7,c
 12267  001C4E  0EFF               	movlw	255
 12268  001C50  160C               	andwf	___ftdiv@f2,f,c
 12269  001C52  0EFF               	movlw	255
 12270  001C54  160D               	andwf	___ftdiv@f2+1,f,c
 12271  001C56  0E00               	movlw	0
 12272  001C58  160E               	andwf	___ftdiv@f2+2,f,c
 12273  001C5A  0E18               	movlw	24
 12274  001C5C  6E12               	movwf	___ftdiv@cntr,c
 12275  001C5E                     i2l3317:
 12276  001C5E  90D8               	bcf	status,0,c
 12277  001C60  3613               	rlcf	___ftdiv@f3,f,c
 12278  001C62  3614               	rlcf	___ftdiv@f3+1,f,c
 12279  001C64  3615               	rlcf	___ftdiv@f3+2,f,c
 12280  001C66  500C               	movf	___ftdiv@f2,w,c
 12281  001C68  5C09               	subwf	___ftdiv@f1,w,c
 12282  001C6A  500D               	movf	___ftdiv@f2+1,w,c
 12283  001C6C  580A               	subwfb	___ftdiv@f1+1,w,c
 12284  001C6E  500E               	movf	___ftdiv@f2+2,w,c
 12285  001C70  580B               	subwfb	___ftdiv@f1+2,w,c
 12286  001C72  A0D8               	btfss	status,0,c
 12287  001C74  D007               	goto	i2l770
 12288  001C76  500C               	movf	___ftdiv@f2,w,c
 12289  001C78  5E09               	subwf	___ftdiv@f1,f,c
 12290  001C7A  500D               	movf	___ftdiv@f2+1,w,c
 12291  001C7C  5A0A               	subwfb	___ftdiv@f1+1,f,c
 12292  001C7E  500E               	movf	___ftdiv@f2+2,w,c
 12293  001C80  5A0B               	subwfb	___ftdiv@f1+2,f,c
 12294  001C82  8013               	bsf	___ftdiv@f3,0,c
 12295  001C84                     i2l770:
 12296  001C84  90D8               	bcf	status,0,c
 12297  001C86  3609               	rlcf	___ftdiv@f1,f,c
 12298  001C88  360A               	rlcf	___ftdiv@f1+1,f,c
 12299  001C8A  360B               	rlcf	___ftdiv@f1+2,f,c
 12300  001C8C  2E12               	decfsz	___ftdiv@cntr,f,c
 12301  001C8E  D7E7               	goto	i2l3317
 12302  001C90  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 12303  001C94  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12304  001C98  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12305  001C9C  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 12306  001CA0  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 12307  001CA4  ECD2  F011         	call	___ftpack	;wreg free
 12308  001CA8  C001  F009         	movff	?___ftpack,?___ftdiv
 12309  001CAC  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 12310  001CB0  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 12311  001CB4  0012               	return	
 12312  001CB6                     __end_of___ftdiv:
 12313                           	opt stack 0
 12314                           pclatu	equ	0xFFB
 12315                           pclath	equ	0xFFA
 12316                           tblptru	equ	0xFF8
 12317                           tblptrh	equ	0xFF7
 12318                           tblptrl	equ	0xFF6
 12319                           tablat	equ	0xFF5
 12320                           prodh	equ	0xFF4
 12321                           prodl	equ	0xFF3
 12322                           intcon	equ	0xFF2
 12323                           intcon2	equ	0xFF1
 12324                           intcon3	equ	0xFF0
 12325                           postinc0	equ	0xFEE
 12326                           fsr0h	equ	0xFEA
 12327                           fsr0l	equ	0xFE9
 12328                           wreg	equ	0xFE8
 12329                           fsr1h	equ	0xFE2
 12330                           fsr1l	equ	0xFE1
 12331                           indf2	equ	0xFDF
 12332                           postinc2	equ	0xFDE
 12333                           postdec2	equ	0xFDD
 12334                           fsr2h	equ	0xFDA
 12335                           fsr2l	equ	0xFD9
 12336                           status	equ	0xFD8
 12337                           
 12338 ;; *************** function ___awtoft *****************
 12339 ;; Defined at:
 12340 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12341 ;; Parameters:    Size  Location     Type
 12342 ;;  c               2    8[COMRAM] int 
 12343 ;; Auto vars:     Size  Location     Type
 12344 ;;  sign            1   11[COMRAM] unsigned char 
 12345 ;; Return value:  Size  Location     Type
 12346 ;;                  3    8[COMRAM] float 
 12347 ;; Registers used:
 12348 ;;		wreg, status,2, status,0, cstack
 12349 ;; Tracked objects:
 12350 ;;		On entry : 0/0
 12351 ;;		On exit  : 0/0
 12352 ;;		Unchanged: 0/0
 12353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12354 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12357 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12358 ;;Total ram usage:        4 bytes
 12359 ;; Hardware stack levels used:    1
 12360 ;; Hardware stack levels required when called:    1
 12361 ;; This function calls:
 12362 ;;		___ftpack
 12363 ;; This function is called by:
 12364 ;;		_dec_to_hex
 12365 ;;		_exp
 12366 ;;		_log
 12367 ;; This function uses a non-reentrant model
 12368 ;;
 12369                           
 12370                           	psect	text62
 12371  002BAE                     __ptext62:
 12372                           	opt stack 0
 12373  002BAE                     ___awtoft:
 12374                           	opt stack 21
 12375                           
 12376                           ;incstack = 0
 12377  002BAE  0E00               	movlw	0
 12378  002BB0  6E0C               	movwf	___awtoft@sign,c
 12379  002BB2  AE0A               	btfss	___awtoft@c+1,7,c
 12380  002BB4  D006               	goto	i2l3347
 12381  002BB6  6C09               	negf	___awtoft@c,c
 12382  002BB8  1E0A               	comf	___awtoft@c+1,f,c
 12383  002BBA  B0D8               	btfsc	status,0,c
 12384  002BBC  2A0A               	incf	___awtoft@c+1,f,c
 12385  002BBE  0E01               	movlw	1
 12386  002BC0  6E0C               	movwf	___awtoft@sign,c
 12387  002BC2                     i2l3347:
 12388  002BC2  C009  F001         	movff	___awtoft@c,___ftpack@arg
 12389  002BC6  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 12390  002BCA  6A03               	clrf	___ftpack@arg+2,c
 12391  002BCC  0E8E               	movlw	142
 12392  002BCE  6E04               	movwf	___ftpack@exp,c
 12393  002BD0  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 12394  002BD4  ECD2  F011         	call	___ftpack	;wreg free
 12395  002BD8  C001  F009         	movff	?___ftpack,?___awtoft
 12396  002BDC  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 12397  002BE0  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 12398  002BE4  0012               	return	
 12399  002BE6                     __end_of___awtoft:
 12400                           	opt stack 0
 12401                           pclatu	equ	0xFFB
 12402                           pclath	equ	0xFFA
 12403                           tblptru	equ	0xFF8
 12404                           tblptrh	equ	0xFF7
 12405                           tblptrl	equ	0xFF6
 12406                           tablat	equ	0xFF5
 12407                           prodh	equ	0xFF4
 12408                           prodl	equ	0xFF3
 12409                           intcon	equ	0xFF2
 12410                           intcon2	equ	0xFF1
 12411                           intcon3	equ	0xFF0
 12412                           postinc0	equ	0xFEE
 12413                           fsr0h	equ	0xFEA
 12414                           fsr0l	equ	0xFE9
 12415                           wreg	equ	0xFE8
 12416                           fsr1h	equ	0xFE2
 12417                           fsr1l	equ	0xFE1
 12418                           indf2	equ	0xFDF
 12419                           postinc2	equ	0xFDE
 12420                           postdec2	equ	0xFDD
 12421                           fsr2h	equ	0xFDA
 12422                           fsr2l	equ	0xFD9
 12423                           status	equ	0xFD8
 12424                           
 12425 ;; *************** function ___lltoft *****************
 12426 ;; Defined at:
 12427 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 12428 ;; Parameters:    Size  Location     Type
 12429 ;;  c               4    8[COMRAM] unsigned long 
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;  exp             1   16[COMRAM] unsigned char 
 12432 ;; Return value:  Size  Location     Type
 12433 ;;                  3    8[COMRAM] float 
 12434 ;; Registers used:
 12435 ;;		wreg, status,2, status,0, cstack
 12436 ;; Tracked objects:
 12437 ;;		On entry : 0/0
 12438 ;;		On exit  : 0/0
 12439 ;;		Unchanged: 0/0
 12440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12441 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12443 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12444 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12445 ;;Total ram usage:        9 bytes
 12446 ;; Hardware stack levels used:    1
 12447 ;; Hardware stack levels required when called:    1
 12448 ;; This function calls:
 12449 ;;		___ftpack
 12450 ;; This function is called by:
 12451 ;;		_pow
 12452 ;; This function uses a non-reentrant model
 12453 ;;
 12454                           
 12455                           	psect	text63
 12456  0029A2                     __ptext63:
 12457                           	opt stack 0
 12458  0029A2                     ___lltoft:
 12459                           	opt stack 22
 12460                           
 12461                           ;incstack = 0
 12462  0029A2  0E8E               	movlw	142
 12463  0029A4  6E11               	movwf	___lltoft@exp,c
 12464  0029A6  D006               	goto	i2l3473
 12465  0029A8                     i2l3471:
 12466  0029A8  90D8               	bcf	status,0,c
 12467  0029AA  320C               	rrcf	___lltoft@c+3,f,c
 12468  0029AC  320B               	rrcf	___lltoft@c+2,f,c
 12469  0029AE  320A               	rrcf	___lltoft@c+1,f,c
 12470  0029B0  3209               	rrcf	___lltoft@c,f,c
 12471  0029B2  2A11               	incf	___lltoft@exp,f,c
 12472  0029B4                     i2l3473:
 12473  0029B4  0E00               	movlw	0
 12474  0029B6  1409               	andwf	___lltoft@c,w,c
 12475  0029B8  6E0D               	movwf	??___lltoft& (0+255),c
 12476  0029BA  0E00               	movlw	0
 12477  0029BC  140A               	andwf	___lltoft@c+1,w,c
 12478  0029BE  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12479  0029C0  0E00               	movlw	0
 12480  0029C2  140B               	andwf	___lltoft@c+2,w,c
 12481  0029C4  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12482  0029C6  0EFF               	movlw	255
 12483  0029C8  140C               	andwf	___lltoft@c+3,w,c
 12484  0029CA  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12485  0029CC  500D               	movf	??___lltoft,w,c
 12486  0029CE  100E               	iorwf	??___lltoft+1,w,c
 12487  0029D0  100F               	iorwf	??___lltoft+2,w,c
 12488  0029D2  1010               	iorwf	??___lltoft+3,w,c
 12489  0029D4  A4D8               	btfss	status,2,c
 12490  0029D6  D7E8               	goto	i2l3471
 12491  0029D8  C009  F001         	movff	___lltoft@c,___ftpack@arg
 12492  0029DC  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 12493  0029E0  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 12494  0029E4  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 12495  0029E8  0E00               	movlw	0
 12496  0029EA  6E05               	movwf	___ftpack@sign,c
 12497  0029EC  ECD2  F011         	call	___ftpack	;wreg free
 12498  0029F0  C001  F009         	movff	?___ftpack,?___lltoft
 12499  0029F4  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 12500  0029F8  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 12501  0029FC  0012               	return	
 12502  0029FE                     __end_of___lltoft:
 12503                           	opt stack 0
 12504                           pclatu	equ	0xFFB
 12505                           pclath	equ	0xFFA
 12506                           tblptru	equ	0xFF8
 12507                           tblptrh	equ	0xFF7
 12508                           tblptrl	equ	0xFF6
 12509                           tablat	equ	0xFF5
 12510                           prodh	equ	0xFF4
 12511                           prodl	equ	0xFF3
 12512                           intcon	equ	0xFF2
 12513                           intcon2	equ	0xFF1
 12514                           intcon3	equ	0xFF0
 12515                           postinc0	equ	0xFEE
 12516                           fsr0h	equ	0xFEA
 12517                           fsr0l	equ	0xFE9
 12518                           wreg	equ	0xFE8
 12519                           fsr1h	equ	0xFE2
 12520                           fsr1l	equ	0xFE1
 12521                           indf2	equ	0xFDF
 12522                           postinc2	equ	0xFDE
 12523                           postdec2	equ	0xFDD
 12524                           fsr2h	equ	0xFDA
 12525                           fsr2l	equ	0xFD9
 12526                           status	equ	0xFD8
 12527                           
 12528 ;; *************** function ___ftpack *****************
 12529 ;; Defined at:
 12530 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12531 ;; Parameters:    Size  Location     Type
 12532 ;;  arg             3    0[COMRAM] unsigned um
 12533 ;;  exp             1    3[COMRAM] unsigned char 
 12534 ;;  sign            1    4[COMRAM] unsigned char 
 12535 ;; Auto vars:     Size  Location     Type
 12536 ;;		None
 12537 ;; Return value:  Size  Location     Type
 12538 ;;                  3    0[COMRAM] float 
 12539 ;; Registers used:
 12540 ;;		wreg, status,2, status,0
 12541 ;; Tracked objects:
 12542 ;;		On entry : 0/0
 12543 ;;		On exit  : 0/0
 12544 ;;		Unchanged: 0/0
 12545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12546 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12549 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12550 ;;Total ram usage:        8 bytes
 12551 ;; Hardware stack levels used:    1
 12552 ;; This function calls:
 12553 ;;		Nothing
 12554 ;; This function is called by:
 12555 ;;		___altoft
 12556 ;;		___awtoft
 12557 ;;		___ftadd
 12558 ;;		___ftdiv
 12559 ;;		___ftmul
 12560 ;;		___lltoft
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           	psect	text64
 12565  0023A4                     __ptext64:
 12566                           	opt stack 0
 12567  0023A4                     ___ftpack:
 12568                           	opt stack 20
 12569                           
 12570                           ;incstack = 0
 12571  0023A4  5004               	movf	___ftpack@exp,w,c
 12572  0023A6  B4D8               	btfsc	status,2,c
 12573  0023A8  D005               	goto	i2l3007
 12574  0023AA  5001               	movf	___ftpack@arg,w,c
 12575  0023AC  1002               	iorwf	___ftpack@arg+1,w,c
 12576  0023AE  1003               	iorwf	___ftpack@arg+2,w,c
 12577  0023B0  A4D8               	btfss	status,2,c
 12578  0023B2  D00C               	goto	i2l3013
 12579  0023B4                     i2l3007:
 12580  0023B4  0E00               	movlw	0
 12581  0023B6  6E01               	movwf	?___ftpack,c
 12582  0023B8  0E00               	movlw	0
 12583  0023BA  6E02               	movwf	?___ftpack+1,c
 12584  0023BC  0E00               	movlw	0
 12585  0023BE  6E03               	movwf	?___ftpack+2,c
 12586  0023C0  0012               	return	
 12587  0023C2                     i2l3011:
 12588  0023C2  2A04               	incf	___ftpack@exp,f,c
 12589  0023C4  90D8               	bcf	status,0,c
 12590  0023C6  3203               	rrcf	___ftpack@arg+2,f,c
 12591  0023C8  3202               	rrcf	___ftpack@arg+1,f,c
 12592  0023CA  3201               	rrcf	___ftpack@arg,f,c
 12593  0023CC                     i2l3013:
 12594  0023CC  0E00               	movlw	0
 12595  0023CE  1401               	andwf	___ftpack@arg,w,c
 12596  0023D0  6E06               	movwf	??___ftpack& (0+255),c
 12597  0023D2  0E00               	movlw	0
 12598  0023D4  1402               	andwf	___ftpack@arg+1,w,c
 12599  0023D6  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12600  0023D8  0EFE               	movlw	254
 12601  0023DA  1403               	andwf	___ftpack@arg+2,w,c
 12602  0023DC  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12603  0023DE  5006               	movf	??___ftpack,w,c
 12604  0023E0  1007               	iorwf	??___ftpack+1,w,c
 12605  0023E2  1008               	iorwf	??___ftpack+2,w,c
 12606  0023E4  B4D8               	btfsc	status,2,c
 12607  0023E6  D00C               	goto	i2l3019
 12608  0023E8  D7EC               	goto	i2l3011
 12609  0023EA                     i2l3015:
 12610  0023EA  2A04               	incf	___ftpack@exp,f,c
 12611  0023EC  0E01               	movlw	1
 12612  0023EE  2601               	addwf	___ftpack@arg,f,c
 12613  0023F0  0E00               	movlw	0
 12614  0023F2  2202               	addwfc	___ftpack@arg+1,f,c
 12615  0023F4  0E00               	movlw	0
 12616  0023F6  2203               	addwfc	___ftpack@arg+2,f,c
 12617  0023F8  90D8               	bcf	status,0,c
 12618  0023FA  3203               	rrcf	___ftpack@arg+2,f,c
 12619  0023FC  3202               	rrcf	___ftpack@arg+1,f,c
 12620  0023FE  3201               	rrcf	___ftpack@arg,f,c
 12621  002400                     i2l3019:
 12622  002400  0E00               	movlw	0
 12623  002402  1401               	andwf	___ftpack@arg,w,c
 12624  002404  6E06               	movwf	??___ftpack& (0+255),c
 12625  002406  0E00               	movlw	0
 12626  002408  1402               	andwf	___ftpack@arg+1,w,c
 12627  00240A  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12628  00240C  0EFF               	movlw	255
 12629  00240E  1403               	andwf	___ftpack@arg+2,w,c
 12630  002410  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12631  002412  5006               	movf	??___ftpack,w,c
 12632  002414  1007               	iorwf	??___ftpack+1,w,c
 12633  002416  1008               	iorwf	??___ftpack+2,w,c
 12634  002418  B4D8               	btfsc	status,2,c
 12635  00241A  D006               	goto	i2l3023
 12636  00241C  D7E6               	goto	i2l3015
 12637  00241E                     i2l3021:
 12638  00241E  0604               	decf	___ftpack@exp,f,c
 12639  002420  90D8               	bcf	status,0,c
 12640  002422  3601               	rlcf	___ftpack@arg,f,c
 12641  002424  3602               	rlcf	___ftpack@arg+1,f,c
 12642  002426  3603               	rlcf	___ftpack@arg+2,f,c
 12643  002428                     i2l3023:
 12644  002428  BE02               	btfsc	___ftpack@arg+1,7,c
 12645  00242A  D003               	goto	i2l712
 12646  00242C  0E02               	movlw	2
 12647  00242E  6004               	cpfslt	___ftpack@exp,c
 12648  002430  D7F6               	goto	i2l3021
 12649  002432                     i2l712:
 12650  002432  A004               	btfss	___ftpack@exp,0,c
 12651  002434  9E02               	bcf	___ftpack@arg+1,7,c
 12652  002436  90D8               	bcf	status,0,c
 12653  002438  3204               	rrcf	___ftpack@exp,f,c
 12654  00243A  5004               	movf	___ftpack@exp,w,c
 12655  00243C  1203               	iorwf	___ftpack@arg+2,f,c
 12656  00243E  5005               	movf	___ftpack@sign,w,c
 12657  002440  A4D8               	btfss	status,2,c
 12658  002442  8E03               	bsf	___ftpack@arg+2,7,c
 12659  002444  C001  F001         	movff	___ftpack@arg,?___ftpack
 12660  002448  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 12661  00244C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 12662  002450  0012               	return	
 12663  002452                     __end_of___ftpack:
 12664                           	opt stack 0
 12665                           pclatu	equ	0xFFB
 12666                           pclath	equ	0xFFA
 12667                           tblptru	equ	0xFF8
 12668                           tblptrh	equ	0xFF7
 12669                           tblptrl	equ	0xFF6
 12670                           tablat	equ	0xFF5
 12671                           prodh	equ	0xFF4
 12672                           prodl	equ	0xFF3
 12673                           intcon	equ	0xFF2
 12674                           intcon2	equ	0xFF1
 12675                           intcon3	equ	0xFF0
 12676                           postinc0	equ	0xFEE
 12677                           fsr0h	equ	0xFEA
 12678                           fsr0l	equ	0xFE9
 12679                           wreg	equ	0xFE8
 12680                           fsr1h	equ	0xFE2
 12681                           fsr1l	equ	0xFE1
 12682                           indf2	equ	0xFDF
 12683                           postinc2	equ	0xFDE
 12684                           postdec2	equ	0xFDD
 12685                           fsr2h	equ	0xFDA
 12686                           fsr2l	equ	0xFD9
 12687                           status	equ	0xFD8
 12688                           
 12689 ;; *************** function ___awdiv *****************
 12690 ;; Defined at:
 12691 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12692 ;; Parameters:    Size  Location     Type
 12693 ;;  dividend        2    6[COMRAM] int 
 12694 ;;  divisor         2    8[COMRAM] int 
 12695 ;; Auto vars:     Size  Location     Type
 12696 ;;  quotient        2   12[COMRAM] int 
 12697 ;;  sign            1   11[COMRAM] unsigned char 
 12698 ;;  counter         1   10[COMRAM] unsigned char 
 12699 ;; Return value:  Size  Location     Type
 12700 ;;                  2    6[COMRAM] int 
 12701 ;; Registers used:
 12702 ;;		wreg, status,2, status,0
 12703 ;; Tracked objects:
 12704 ;;		On entry : 0/0
 12705 ;;		On exit  : 0/0
 12706 ;;		Unchanged: 0/0
 12707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12708 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12709 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12711 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12712 ;;Total ram usage:        8 bytes
 12713 ;; Hardware stack levels used:    1
 12714 ;; This function calls:
 12715 ;;		Nothing
 12716 ;; This function is called by:
 12717 ;;		_dec_to_hex
 12718 ;;		_servo_rotate1
 12719 ;;		_servo_rotate2
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           	psect	text65
 12724  0026A4                     __ptext65:
 12725                           	opt stack 0
 12726  0026A4                     ___awdiv:
 12727                           	opt stack 24
 12728                           
 12729                           ;incstack = 0
 12730  0026A4  0E00               	movlw	0
 12731  0026A6  6E0C               	movwf	___awdiv@sign,c
 12732  0026A8  AE0A               	btfss	___awdiv@divisor+1,7,c
 12733  0026AA  D006               	goto	i2l3819
 12734  0026AC  6C09               	negf	___awdiv@divisor,c
 12735  0026AE  1E0A               	comf	___awdiv@divisor+1,f,c
 12736  0026B0  B0D8               	btfsc	status,0,c
 12737  0026B2  2A0A               	incf	___awdiv@divisor+1,f,c
 12738  0026B4  0E01               	movlw	1
 12739  0026B6  6E0C               	movwf	___awdiv@sign,c
 12740  0026B8                     i2l3819:
 12741  0026B8  AE08               	btfss	___awdiv@dividend+1,7,c
 12742  0026BA  D006               	goto	i2l3825
 12743  0026BC  6C07               	negf	___awdiv@dividend,c
 12744  0026BE  1E08               	comf	___awdiv@dividend+1,f,c
 12745  0026C0  B0D8               	btfsc	status,0,c
 12746  0026C2  2A08               	incf	___awdiv@dividend+1,f,c
 12747  0026C4  0E01               	movlw	1
 12748  0026C6  1A0C               	xorwf	___awdiv@sign,f,c
 12749  0026C8                     i2l3825:
 12750  0026C8  0E00               	movlw	0
 12751  0026CA  6E0E               	movwf	___awdiv@quotient+1,c
 12752  0026CC  0E00               	movlw	0
 12753  0026CE  6E0D               	movwf	___awdiv@quotient,c
 12754  0026D0  5009               	movf	___awdiv@divisor,w,c
 12755  0026D2  100A               	iorwf	___awdiv@divisor+1,w,c
 12756  0026D4  B4D8               	btfsc	status,2,c
 12757  0026D6  D01C               	goto	i2l3847
 12758  0026D8  0E01               	movlw	1
 12759  0026DA  6E0B               	movwf	___awdiv@counter,c
 12760  0026DC  D004               	goto	i2l3833
 12761  0026DE                     i2l3831:
 12762  0026DE  90D8               	bcf	status,0,c
 12763  0026E0  3609               	rlcf	___awdiv@divisor,f,c
 12764  0026E2  360A               	rlcf	___awdiv@divisor+1,f,c
 12765  0026E4  2A0B               	incf	___awdiv@counter,f,c
 12766  0026E6                     i2l3833:
 12767  0026E6  AE0A               	btfss	___awdiv@divisor+1,7,c
 12768  0026E8  D7FA               	goto	i2l3831
 12769  0026EA                     i2l3835:
 12770  0026EA  90D8               	bcf	status,0,c
 12771  0026EC  360D               	rlcf	___awdiv@quotient,f,c
 12772  0026EE  360E               	rlcf	___awdiv@quotient+1,f,c
 12773  0026F0  5009               	movf	___awdiv@divisor,w,c
 12774  0026F2  5C07               	subwf	___awdiv@dividend,w,c
 12775  0026F4  500A               	movf	___awdiv@divisor+1,w,c
 12776  0026F6  5808               	subwfb	___awdiv@dividend+1,w,c
 12777  0026F8  A0D8               	btfss	status,0,c
 12778  0026FA  D005               	goto	i2l3843
 12779  0026FC  5009               	movf	___awdiv@divisor,w,c
 12780  0026FE  5E07               	subwf	___awdiv@dividend,f,c
 12781  002700  500A               	movf	___awdiv@divisor+1,w,c
 12782  002702  5A08               	subwfb	___awdiv@dividend+1,f,c
 12783  002704  800D               	bsf	___awdiv@quotient,0,c
 12784  002706                     i2l3843:
 12785  002706  90D8               	bcf	status,0,c
 12786  002708  320A               	rrcf	___awdiv@divisor+1,f,c
 12787  00270A  3209               	rrcf	___awdiv@divisor,f,c
 12788  00270C  2E0B               	decfsz	___awdiv@counter,f,c
 12789  00270E  D7ED               	goto	i2l3835
 12790  002710                     i2l3847:
 12791  002710  500C               	movf	___awdiv@sign,w,c
 12792  002712  B4D8               	btfsc	status,2,c
 12793  002714  D004               	goto	i2l3851
 12794  002716  6C0D               	negf	___awdiv@quotient,c
 12795  002718  1E0E               	comf	___awdiv@quotient+1,f,c
 12796  00271A  B0D8               	btfsc	status,0,c
 12797  00271C  2A0E               	incf	___awdiv@quotient+1,f,c
 12798  00271E                     i2l3851:
 12799  00271E  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 12800  002722  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 12801  002726  0012               	return	
 12802  002728                     __end_of___awdiv:
 12803                           	opt stack 0
 12804                           pclatu	equ	0xFFB
 12805                           pclath	equ	0xFFA
 12806                           tblptru	equ	0xFF8
 12807                           tblptrh	equ	0xFF7
 12808                           tblptrl	equ	0xFF6
 12809                           tablat	equ	0xFF5
 12810                           prodh	equ	0xFF4
 12811                           prodl	equ	0xFF3
 12812                           intcon	equ	0xFF2
 12813                           intcon2	equ	0xFF1
 12814                           intcon3	equ	0xFF0
 12815                           postinc0	equ	0xFEE
 12816                           fsr0h	equ	0xFEA
 12817                           fsr0l	equ	0xFE9
 12818                           wreg	equ	0xFE8
 12819                           fsr1h	equ	0xFE2
 12820                           fsr1l	equ	0xFE1
 12821                           indf2	equ	0xFDF
 12822                           postinc2	equ	0xFDE
 12823                           postdec2	equ	0xFDD
 12824                           fsr2h	equ	0xFDA
 12825                           fsr2l	equ	0xFD9
 12826                           status	equ	0xFD8
 12827                           pclatu	equ	0xFFB
 12828                           pclath	equ	0xFFA
 12829                           tblptru	equ	0xFF8
 12830                           tblptrh	equ	0xFF7
 12831                           tblptrl	equ	0xFF6
 12832                           tablat	equ	0xFF5
 12833                           prodh	equ	0xFF4
 12834                           prodl	equ	0xFF3
 12835                           intcon	equ	0xFF2
 12836                           intcon2	equ	0xFF1
 12837                           intcon3	equ	0xFF0
 12838                           postinc0	equ	0xFEE
 12839                           fsr0h	equ	0xFEA
 12840                           fsr0l	equ	0xFE9
 12841                           wreg	equ	0xFE8
 12842                           fsr1h	equ	0xFE2
 12843                           fsr1l	equ	0xFE1
 12844                           indf2	equ	0xFDF
 12845                           postinc2	equ	0xFDE
 12846                           postdec2	equ	0xFDD
 12847                           fsr2h	equ	0xFDA
 12848                           fsr2l	equ	0xFD9
 12849                           status	equ	0xFD8
 12850                           
 12851                           	psect	rparam
 12852  0000                     pclatu	equ	0xFFB
 12853                           pclath	equ	0xFFA
 12854                           tblptru	equ	0xFF8
 12855                           tblptrh	equ	0xFF7
 12856                           tblptrl	equ	0xFF6
 12857                           tablat	equ	0xFF5
 12858                           prodh	equ	0xFF4
 12859                           prodl	equ	0xFF3
 12860                           intcon	equ	0xFF2
 12861                           intcon2	equ	0xFF1
 12862                           intcon3	equ	0xFF0
 12863                           postinc0	equ	0xFEE
 12864                           fsr0h	equ	0xFEA
 12865                           fsr0l	equ	0xFE9
 12866                           wreg	equ	0xFE8
 12867                           fsr1h	equ	0xFE2
 12868                           fsr1l	equ	0xFE1
 12869                           indf2	equ	0xFDF
 12870                           postinc2	equ	0xFDE
 12871                           postdec2	equ	0xFDD
 12872                           fsr2h	equ	0xFDA
 12873                           fsr2l	equ	0xFD9
 12874                           status	equ	0xFD8
 12875                           
 12876                           	psect	temp
 12877  00007E                     btemp:
 12878                           	opt stack 0
 12879  00007E                     	ds	1
 12880  0000                     int$flags	set	btemp
 12881                           pclatu	equ	0xFFB
 12882                           pclath	equ	0xFFA
 12883                           tblptru	equ	0xFF8
 12884                           tblptrh	equ	0xFF7
 12885                           tblptrl	equ	0xFF6
 12886                           tablat	equ	0xFF5
 12887                           prodh	equ	0xFF4
 12888                           prodl	equ	0xFF3
 12889                           intcon	equ	0xFF2
 12890                           intcon2	equ	0xFF1
 12891                           intcon3	equ	0xFF0
 12892                           postinc0	equ	0xFEE
 12893                           fsr0h	equ	0xFEA
 12894                           fsr0l	equ	0xFE9
 12895                           wreg	equ	0xFE8
 12896                           fsr1h	equ	0xFE2
 12897                           fsr1l	equ	0xFE1
 12898                           indf2	equ	0xFDF
 12899                           postinc2	equ	0xFDE
 12900                           postdec2	equ	0xFDD
 12901                           fsr2h	equ	0xFDA
 12902                           fsr2l	equ	0xFD9
 12903                           status	equ	0xFD8


Data Sizes:
    Strings     485
    Constant    99
    Data        2
    BSS         76
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     42     112
    BANK1           256     12      12
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_24(CODE[15]), STR_23(CODE[16]), STR_22(CODE[28]), STR_21(CODE[25]), 
		 -> STR_20(CODE[24]), STR_19(CODE[23]), STR_18(CODE[18]), STR_17(CODE[23]), 
		 -> STR_16(CODE[10]), STR_15(CODE[18]), STR_14(CODE[18]), STR_13(CODE[18]), 
		 -> STR_12(CODE[18]), STR_11(CODE[18]), STR_10(CODE[18]), STR_9(CODE[18]), 
		 -> STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), 
		 -> STR_4(CODE[23]), STR_3(CODE[14]), STR_2(CODE[24]), STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _servo_rotate2->___awdiv
    _servo_rotate1->___awdiv
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_lcdInst
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _operationend->_printf
    _operation->_printf
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   40283
                                             10 BANK1      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    5685
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    7564
                                             40 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    14    14      0    1879
                                             19 BANK0     14    14      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    5685
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    7309
                                             40 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    5685
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    6109
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    5490
                                             28 BANK0     12     4      8
                                              0 BANK1     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1064
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   0     0      0    1480
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1480
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   78855
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
                      _servo_rotate1
                      _servo_rotate2
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  14    14      0     557
                                              3 COMRAM    14    14      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    2381
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate2                                       10     8      2    1726
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate1                                       10     8      2    1726
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2     801
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     291
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   70199
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58403
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   19114
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31682
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8491
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     625
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     684
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
       i2___wmul (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
   _servo_rotate1
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   _servo_rotate2
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C       C       7        4.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      70       5       87.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F9      34        0.0%
DATA                 0      0      F9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 14 02:54:13 2017

                ___altoft@exp 003F            i2_I2C_Master_Start 2E04            i2_I2C_Master_Write 2DDA  
               ___altoft@sign 0040                            l34 2D72                ?_emergencystop 0001  
                ___awdiv@sign 000C           ___wmul@multiplicand 00D6            i2___lwdiv@dividend 0001  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                ___ftadd@exp1 0027                  ___ftadd@exp2 0026                  ___ftadd@sign 0025  
                         l415 15F8                           l372 2D3A                           l905 28D8  
                         l842 222A                           l895 2796                           _GIE 007F97  
                __CFG_CPB$OFF 000000                           _PEN 007E2A                  __CFG_CPD$OFF 000000  
                         _SEN 007E28                           _PSA 007EAB           ?i2_I2C_Master_Start 0001  
         ?i2_I2C_Master_Write 0002                           _exp 0E30                           _log 15FA  
                         _isr 0008                           _pow 1358                  ___awmod@sign 00D9  
                         prod 000FF3                           wreg 000FE8                  ?_bottle_time 0001  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0012                  ___ftdiv@sign 0017  
                __CFG_WDT$OFF 000000                          l5003 0ABA                          l5005 0AD2  
                        l5007 0ADA                          l5111 11FC                          l5009 0AE6  
                        l5105 11C6                          l3441 2C78                          l5041 20C2  
                        l5201 1B72                          l5123 1278                          l5203 1B78  
                        l5211 1BB2                          l5117 123A                          l5141 1314  
                        l3613 150A                          l5053 2102                          l5061 2124  
                        l5205 1B7E                          l5135 12F4                          l3631 1590  
                        l3623 1558                          l5047 20E2                          l5063 214C  
                        l5129 12B6                          l3617 1520                          l5209 1B84  
                        l3627 157A                          l3901 21C4                          l5085 1DD0  
                        l5095 1DFA                          l5089 1DDA                          l5193 1B5A  
                        l5195 1B60                          l3909 2218                          l5197 1B66  
                        l3871 2492                          l3863 246E                          l4903 0814  
                        l4911 085A                          l5199 1B6C                          l3873 249E  
                        l4841 2746                          l4825 2CA0                          l4905 081A  
                        l3875 24A4                          l3883 24D6                          l3867 247E  
                        l4843 2752                          l4923 089A                          ?_exp 0049  
                        l4853 2788                          l4845 2758                          l4861 2894  
                        l4941 08F2                          l4909 0822                          ?_log 0034  
                        l3887 24EA                          l3879 24C8                          l4863 28A0  
                        l4943 08F8                          l4927 08B6                          l3897 21AE  
                        l4865 28A6                          l4929 08BC                          l3899 21BE  
                        l4971 09AA                          l4883 0750                          ?_isr 0001  
                        l4869 28CA                          l4965 0968                          l4957 092E  
                        l4885 0762                          l4983 09E0                          l4959 0946  
                        l4895 079C                          l4879 073C                          l4985 09EC  
                        l4993 0A1A                          l4977 09C4                          l4969 09A0  
                        l4889 076C                          l4995 0A20                          l4997 0A6C  
                        l4989 0A06                          ?_pow 0052            i2_read_colorsensor 19FC  
                        STR_1 FE67                          STR_2 FE4F                          STR_3 FFE7  
                        STR_4 FEC5                          STR_5 FEDC                          STR_6 FFB7  
                        STR_7 FFA6                          STR_8 FF05                          STR_9 FF29  
                        _T0CS 007EAD                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          _LATD 000F8C                          _LATE 000F8D  
                        u2960 2C76                          _RCEN 007E2B                          u3775 2972  
                        i2l34 2D86                          u4837 1BC0                          u4847 2A58  
                        u4857 2A94                          u4867 2902                          u4877 290A  
                        u4887 2934                          u4897 293C                          _TMR0 000FD6  
                        _RSEN 007E29                          _main 1AEA                  ___ftpack@arg 0001  
                        _keys FDB7                  ___ftpack@exp 0004                          _time 009E  
                        fsr0h 000FEA                          fsr1h 000FE2            i2___lwdiv@quotient 0005  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 007E  
                        exp@x 0049                          log@x 0034                          isr@i 0073  
        ??i2_I2C_Master_Start 0002          ??i2_I2C_Master_Write 0004                          pow@x 0052  
                        pow@y 0055                          prodh 000FF4                          prodl 000FF3  
                        start 000E           ?i2_read_colorsensor 0001                 __CFG_IESO$OFF 000000  
             __end_ofi2_putch 2DC4                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 001A  
                ___param_bank 000000                  ___ftmul@sign 001B                   i2_lcdNibble 2AA0  
               ?_bottle_count 0001                  ___fttol@exp1 0036                         ??_exp 004C  
                       ??_log 0037                  ___fttol@lval 0032                         ??_isr 00C4  
                       ??_pow 0058                 _eskacap_count 00AB              ?_I2C_Master_Init 00E1  
            ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001              ?_I2C_Master_Stop 0001  
                       ?_main 0001                         _ACKEN 007E2C                         _ACKDT 007E2D  
             __end_of___awdiv 2728               __end_of___ftadd 11C4                         STR_10 FF17  
                       STR_11 FF3B                         STR_12 FF4D                         STR_20 FE7F  
                       STR_13 FF71                         STR_21 FE36                         STR_14 FF5F  
                       STR_22 FE1A                         STR_23 FFC8                         STR_15 FF83  
                       STR_16 FFF5                         STR_24 FFD8                         STR_25 FF95  
                       STR_17 FEAE                         STR_18 FEF3                         STR_19 FE97  
             __end_of___awmod 24F4               __end_of___ftdiv 1CB6               __end_of___ftneg 2D1A  
             __end_of___lldiv 223C               __end_of___ftmul 19FC               ___awdiv@divisor 0009  
             __end_of___ftsub 2B70               __end_of___fttol 1908                         _T0PS0 007EA8  
                       _T0PS1 007EA9                         _T0PS2 007EAA               __end_of___lwdiv 27A0  
             __end_of___lwmod 28E2                         i2l402 22A0                         i2l405 22C4  
                       i2l317 06F2                         i2l415 1AE8                         i2l271 0052  
                       i2l408 22EE                         i2l280 00EE                         i2l272 0260  
                       i2l273 005C                         i2l282 01F2                         i2l380 252E  
                       i2l269 0264                         i2l286 0482                         i2l383 2558  
                       i2l391 2354                         i2l279 00E4                         i2l712 2432  
                       i2l297 0600                         i2l386 2582                         i2l394 2378  
                       i2l298 05FC                         i2l397 23A2                         i2l750 1136  
                       i2l735 105C                         i2l905 2B26                         i2l770 1C84  
                       i2l739 1086                         i2l932 14C0                         i2l759 1152  
                       i2l927 1390                         i2l792 2D0C               ___awdiv@counter 000B  
                       i2l895 2A46          ??i2_read_colorsensor 0004                         _PORTB 000F81  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96               ??_servo_rotate0 0003  
             ??_servo_rotate1 0011               ??_servo_rotate2 0011                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000             read_colorsensor@i 00E3  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011  
             __end_of_lcdInst 2DB8                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _nRBPU 007F8F                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD 2AA0                __CFG_EBTRB$OFF 000000  
                  i2isdigit@c 0003                 ___awtoft@sign 000C               __end_of_dpowers FDD2  
                       _color 0096                         _floor 1CB6                         _etime 00B1  
                       _ldexp 1F38                         _frexp 2584                         _errno 00A7  
             __end_of_isdigit 2CAA                 ___ftpack@sign 0005                         _putch 2D98  
                       _stime 007C                         pclath 000FFA                         tablat 000FF5  
               _eskalbl_count 00AF                         pow@yi 005F               __end_of_timeset FDE1  
            __end_ofi2___wmul 2CF6               __end_of_standby 2DEC                         status 000FD8  
              __CFG_PBADEN$ON 000000                 i2printf@width 001E                   exp@exponent 004F  
            __end_ofi2_printf 0E30            __size_ofi2___lwdiv 0052            __size_ofi2___lwmod 0042  
                 ldexp@newexp 0037               __initialization 2B70                   log@exponent 0037  
          __size_ofi2_lcdInst 000C               ??_emergencystop 00EC                ??_bottle_count 00EC  
                __end_of_main 1BD0                  __end_of_keys FDC8                    i2printf@ap 0018  
          __size_ofi2_isdigit 001E                        ??_main 010A                 ___fttol@sign1 0031  
               __activetblptr 000002             ?_I2C_Master_Start 0001             ?_I2C_Master_Write 00D5  
              servo_rotate0@i 0007                servo_rotate0@j 0009                servo_rotate1@i 0015  
              servo_rotate1@j 0017                servo_rotate2@i 0015                servo_rotate2@j 0017  
          ??_I2C_Master_Start 00D5                        _ADCON0 000FC2                        _ADCON1 000FC1  
          ??_I2C_Master_Write 00D7                        ?_floor 0041                        ?_ldexp 0034  
                      ?_frexp 0001              __end_of___altoft 2818                        _T08BIT 007EAE  
            ___awdiv@dividend 0007               i2lcdNibble@data 0002              __end_of___awtoft 2BE6  
                      ?_putch 0001              __end_of___ftpack 2452               i2lcdNibble@temp 0001  
            __end_of___lltoft 29FE                        _INT0IE 007F94                        _INT0IF 007F91  
                      _INT1IE 007F83                        _INT1IF 007F80                        _INT2IE 007F84  
                      _INT2IF 007F81                        i2l1101 1D86                        i2l1090 0EE6  
                      i2l3011 23C2                        i2l1091 100A                        i2l3021 241E  
                      i2l3013 23CC                        i2l3023 2428                        i2l3015 23EA  
                      i2l3007 23B4                        i2l3111 116E                        i2l3103 1124  
                      i2l3121 119E                        i2l3105 112E                        i2l3019 2400  
                      i2l3131 1930                        i2l3063 106A                        i2l3151 198A  
                      i2l3047 27C2                        i2l3215 18A6                        i2l3161 19B2  
                      i2l3137 1958                        i2l3049 27CE                        i2l3233 18F6  
                      i2l3225 18CE                        i2l3091 10E6                        i2l3155 199A  
                      i2l3227 18DA                        i2l3219 18B6                        i2l3411 1FBA  
                      i2l4211 227C                        i2l3317 1C5E                        i2l3093 10F0  
                      i2l3085 10C4                        i2l3069 1094                        i2l3165 19C2  
                      i2l3181 2674                        i2l3229 18E0                        i2l3245 25AC  
                      i2l3095 10FA                        i2l3335 2B46                        i2l3415 1FC6  
                      i2l4151 284C                        i2l4223 22B8                        i2l3097 1102  
                      i2l3177 2644                        i2l4161 2870                        i2l4241 2348  
                      i2l4217 2294                        i2l4313 0BBE                        i2l4321 0BFC  
                      i2l4305 0B60                        i2l3347 2BC2                        i2l3291 1BF8  
                      i2l3187 26A0                        i2l3523 1616                        i2l4155 2854  
                      i2l4235 2330                        i2l4403 0D62                        i2l4315 0BC2  
                      i2l3381 1EA6                        i2l3197 1840                        i2l3373 1D0C  
                      i2l3365 1CE4                        i2l4181 1802                        i2l4405 0D68  
                      i2l4413 0DF2                        i2l4333 0C32                        i2l3471 29A8  
                      i2l3383 1F22                        i2l3391 1F50                        i2l3551 0E80  
                      i2l4247 236C                        i2l4407 0DAC                        i2l4415 0E08  
                      i2l4351 0C7C                        i2l4319 0BC8                        i2l4263 1A30  
                      i2l4511 00B0                        i2l3473 29B4                        i2l3297 1C20  
                      i2l3369 1CF2                        i2l3545 0E48                        i2l3529 1638  
                      i2l4169 1732                        i2l4193 251C                        i2l4417 0E0E  
                      i2l4353 0C80                        i2l4337 0C4C                        i2l4281 1A9A  
                      i2l4273 1A6E                        i2l4505 009A                        i2l4187 2504  
                      i2l4339 0C50                        i2l4419 0E16                        i2l4267 1A40  
                      i2l3557 0EB8                        i2l4381 0D08                        i2l4293 0B1E  
                      i2l4277 1A8A                        i2l4701 06BE                        i2l4613 047A  
                      i2l4605 042C                        i2l4509 00A6                        i2l3831 26DE  
                      i2l3399 1F96                        i2l4199 2546                        i2l4375 0CDC  
                      i2l4367 0CAC                        i2l4295 0B2C                        i2l4711 06DC  
                      i2l4631 04D6                        i2l4615 047E                        i2l3833 26E6  
                      i2l3825 26C8                        i2l4393 0D34                        i2l4369 0CC2  
                      i2l4289 0B0E                        i2l4625 04B6                        i2l4553 0206  
                      i2l3851 271E                        i2l3843 2706                        i2l3835 26EA  
                      i2l3819 26B8                        i2l3579 0FE0                        i2l4395 0D3C  
                      i2l4387 0D1E                        i2l4379 0D00                        i2l4299 0B32  
                      i2l4707 06D4                        i2l4643 0516                        i2l4555 0214  
                      i2l4539 01A8                        i2l3781 139E                        i2l3933 2CCA  
                      i2l4661 0576                        i2l4637 04F6                        i2l4581 0320  
                      i2l3847 2710                        i2l3951 2D52                        i2l4399 0D50  
                      i2l4655 0556                        i2l4591 038E                        i2l4583 0336  
                      i2l4575 02DE                        i2l4559 0222                        i2l3961 2A14  
                      i2l4649 0536                        i2l4593 03A4                        i2l4577 02F4  
                      i2l4585 034C                        i2l3795 141A                        i2l3787 13B6  
                      i2l3963 2A1C                        i2l4667 0596                        i2l4675 05B6  
                      i2l4587 0362                        i2l4595 03BA                        i2l4579 030A  
                      i2l3973 2A3C                        i2l3965 2A20                        i2l3981 2AFC  
                      i2l4589 0378                        i2l3799 143C                        i2l3983 2B04  
                      i2l3985 2B08                        i2l3989 2B1C                        u236_41 1028  
                      u237_41 103C                        u280_41 1C08                        u257_41 1918  
                      u266_41 1824                        u259_41 1940                        u278_41 1BE0  
                      _TMR0IE 007F95                        _TMR0IF 007F92                     ??i2_putch 0003  
                      _TMR0ON 007EAF                        _SSPADD 000FC8                        _TRISC3 007CA3  
                      _TRISC4 007CA4                        _SSPBUF 000FC9                __CFG_XINST$OFF 000000  
           ?_read_colorsensor 0001                        ___ftge 2614                  _yopcap_count 00BD  
                      ___wmul 2C1C            ??_read_colorsensor 00D7                     ??___awdiv 000B  
                   ??___ftadd 0022                __CFG_STVREN$ON 000000                     ??___awmod 00D8  
                   ??___ftdiv 000F                     ??___ftneg 0004                     ??___lldiv 00DC  
                   ??___ftmul 0013                     ??___ftsub 002E                     ??___fttol 002C  
                   ??___lwdiv 00D8                     ??___lwmod 00DF                 dec_to_hex@num 0063  
                      clear_0 2B8E                        clear_1 2B9A              ___awdiv@quotient 000D  
             ___awmod@divisor 00D6               ___awmod@counter 00D8                     ??_lcdInst 00D6  
                      _printf 072E                        floor@i 0044                        floor@x 0041  
       ___ftmul@f3_as_product 0017                     ??_initLCD 00D7                     ??_isdigit 00D4  
           __end_ofi2___lwdiv 2A50                  __mediumconst FDB6             __end_ofi2___lwmod 2B30  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_standby 00D7             __end_ofi2_lcdInst 2DD0                  _yoplbl_count 00C1  
           __end_ofi2_isdigit 2D5A              __end_ofexp@coeff FDFF          __size_of_bottle_time 0036  
            __end_oflog@coeff FE1A                    __accesstop 0080       __end_of__initialization 2BA0  
                  ___altoft@c 0037                    ___ftadd@f1 001C                    ___ftadd@f2 001F  
                  ___ftge@ff1 0001                    ___ftge@ff2 0004                  eval_poly@res 0031  
               ___rparam_used 000001                    ___ftdiv@f1 0009                    ___ftdiv@f2 000C  
                  ___ftdiv@f3 0013                    ___ftneg@f1 0001                    ___awtoft@c 0009  
                  ___ftmul@f1 000D                    ___ftmul@f2 0010                    ___ftsub@f1 0028  
                  ___ftsub@f2 002B                    ___fttol@f1 0028            i2___lwmod@dividend 0008  
              __pcstackCOMRAM 0001                  __pidataBANK0 2E0C                    ___lltoft@c 0009  
               __end_of_floor 1D94                 __end_of_ldexp 1FFE                 __end_of_frexp 2614  
               __end_of_putch 2DA8                   i2printf@idx 0017                   i2printf@val 001B  
          __size_of_date_time 00D2           servo_rotate0@degree 0001           servo_rotate1@degree 000F  
         servo_rotate2@degree 000F                     ?i2___wmul 0001            __size_of_lcdNibble 0060  
                 i2putch@data 0003                     ?i2_printf 000D   __size_of_I2C_ColorSens_Init 00C2  
                     ??_floor 0044                       ??_ldexp 0039                       ??_frexp 0006  
        __end_of_bottle_count 1358                    _dec_to_hex 1718                       ??_putch 00D6  
                  __pbssBANK0 0080            __size_of_eval_poly 00D2             servo_rotate0@duty 0005  
           servo_rotate1@duty 0013             servo_rotate2@duty 0013            __size_of_read_time 0068  
                     ?___ftge 0001                  ?i2_lcdNibble 0001                       ?___wmul 00D4  
                   ?___altoft 0037                     ?___awtoft 0009                     ?___ftpack 0001  
                     ?_printf 00E0            __size_of_operation 00C0                     ?___lltoft 0009  
                  ??i2___wmul 0005                    ??i2_printf 0013                       _SSPCON1 000FC6  
                     _SSPCON2 000FC5                       _SSPSTAT 000FC7             __end_of_date_time 1E66  
                  _eska_count 00A9                       i2_putch 2DB8             _bottle_count_disp 00EE  
 __size_ofi2_I2C_Master_Start 0008             __end_of_lcdNibble 2942   __size_ofi2_I2C_Master_Write 000A  
               ?_operationend 0001                       __Hparam 0000                       __Lparam 0000  
             __size_of___ftge 0090                       ___awdiv 26A4                       ___ftadd 1018  
                     ___awmod 2452                       ___ftdiv 1BD0                       ___ftneg 2CF6  
                     ___lldiv 2180               __size_of___wmul 0036                       ___ftmul 1908  
                     ___ftsub 2B30                       ___fttol 1814                       ___lwdiv 2728  
                     ___lwmod 2880                    _curr_state 00C3                    ??___altoft 003B  
                     __pcinit 2B70                    ??___awtoft 000C                    ??___ftpack 0006  
           __end_of_eval_poly 1F38                       __ramtop 1000                       _lcdInst 2DA8  
                  ??___lltoft 000D                       __ptext0 1AEA                       __ptext1 2DE4  
                     __ptext2 2D5A                       __ptext3 20C0                       __ptext4 14CE  
                     __ptext5 2A50                       __ptext6 2D1A                       __ptext7 1D94  
                     __ptext8 2C52                       __ptext9 2BE6               __size_of_printf 03D6  
              dec_to_hex@temp 006B                       _initLCD 2A50             __end_of_hexpowers FDDA  
               i2_isdigit$821 0002                       _dpowers FDC8                  __size_of_exp 01E8  
                __size_of_log 011E                       _isdigit 2C80                  __size_of_isr 0726  
 __size_ofi2_read_colorsensor 00EE                  __size_of_pow 0176              ___awmod@dividend 00D4  
           __end_of_read_time 2880      __size_of_I2C_Master_Init 0060      __size_of_I2C_Master_Read 002E  
    __size_of_I2C_Master_Wait 0014                    date_time@i 00EC      __size_of_I2C_Master_Stop 0008  
       __end_of_servo_rotate0 2584         __end_of_servo_rotate1 23A4         __end_of_servo_rotate2 22F0  
                     _timeset FDDA                       _standby 2DE4                   ?_dec_to_hex 0063  
              __pintcode_body 0012          end_of_initialization 2BA0                       exp@sign 0051  
               __Lmediumconst FDB6                       int_func 0012           i2___wmul@multiplier 0001  
           __end_of_operation 2180                _operation_disp 00B5                _operation_time 00B7  
              ??_operationend 00EC     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 00D8                       pow@sign 005E               ___lldiv@counter 00E0  
                     printf@c 0109                       printf@f 00E0              I2C_Master_Init@c 00E1  
            I2C_Master_Read@a 00D5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE         __end_of_emergencystop 2D3C                     _PORTAbits 000F80  
       __size_of_bottle_count 0194     __size_of_read_colorsensor 012C     read_colorsensor@color_low 00DB  
           i2_I2C_Master_Read 2CAA             i2_I2C_Master_Wait 2D86             i2_I2C_Master_Stop 2DFC  
           i2___lwdiv@divisor 0003                     i2___lwdiv 29FE                     i2___lwmod 2AEE  
           i2___lwdiv@counter 0007            ?i2_I2C_Master_Read 0001            ?i2_I2C_Master_Wait 0001  
i2read_colorsensor@color_high 000C            ?i2_I2C_Master_Stop 0001                    _start_time 007A  
                   i2_lcdInst 2DC4                   ___ftdiv@exp 0016                   printf@width 0107  
         ??i2_I2C_Master_Read 0002                     i2_isdigit 2D3C           ??i2_I2C_Master_Wait 0001  
         ??i2_I2C_Master_Stop 0002                   ___ftmul@exp 0016                  _bottle_count 11C4  
              __end_of___ftge 26A4                __end_of___wmul 2C52           __size_of_dec_to_hex 00FC  
        __size_ofi2_lcdNibble 004E            _total_bottle_count 00B9                 i2lcdInst@data 0003  
                  floor@expon 0047              i2___wmul@product 0005                __end_of_printf 0B04  
                i2printf@flag 001D     __end_ofi2_I2C_Master_Read 2CD0     __end_ofi2_I2C_Master_Wait 2D98  
                i2printf@prec 001A           start_initialization 2B70     __end_ofi2_I2C_Master_Stop 2E04  
                  eval_poly@d 002B                    eval_poly@n 002D                    eval_poly@x 0028  
           __size_ofi2___wmul 0026                    ldexp@value 0034                   __end_of_exp 1018  
                 __end_of_log 1718                   __end_of_isr 072E                   __end_of_pow 14CE  
                   i2printf@c 0020                     i2printf@f 000D                 ??_bottle_time 00EC  
       i2I2C_Master_Read@temp 0003                    ?i2___lwdiv 0001                    ?i2___lwmod 0008  
           __size_ofi2_printf 032C                    frexp@value 0001             ??_I2C_Master_Init 00E5  
           ??_I2C_Master_Read 00D5             ??_I2C_Master_Wait 00D4                    ?i2_lcdInst 0001  
           ??_I2C_Master_Stop 00D5    read_colorsensor@color_high 00DF                    ?i2_isdigit 0001  
                    ??___ftge 0007                      ??___wmul 00D8                   __pdataBANK0 00EE  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 00E8             __size_of___altoft 0078  
                  read_time@i 0004             __size_of___awtoft 0038             __size_of___ftpack 00AE  
           __size_of___lltoft 005C    __end_of_I2C_ColorSens_Init 20C0                   __pbssCOMRAM 0076  
        __end_of_operationend 2D72                 __pcstackBANK0 00C4                 __pcstackBANK1 0100  
           i2___lwmod@divisor 000A             i2___lwmod@counter 000C                      ?i2_putch 0001  
         __end_of_bottle_time 2C1C              _I2C_Master_Start 2DF4           i2I2C_Master_Write@d 0002  
            _I2C_Master_Write 2DD0              _eskacaplbl_count 00AD                     _date_time 1D94  
            ___lwdiv@dividend 00D4             __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  
               __pmediumconst FDB6                     _lcdNibble 28E2               _yopcaplbl_count 00BF  
                    ?___awdiv 0007                      ?___ftadd 001C                      ?___awmod 00D4  
                    ?___ftdiv 0009                      ?___ftneg 0001                      ?___lldiv 00D4  
                    ?___ftmul 000D                      ?___ftsub 0028                      ?___fttol 0028  
                    ?___lwdiv 00D4                      ?___lwmod 00DB                      ?_lcdInst 0001  
            dec_to_hex@hexnum 006F                      ?_initLCD 0001                      ?_isdigit 0001  
            _read_colorsensor 14CE    __size_ofi2_I2C_Master_Read 0026    __size_ofi2_I2C_Master_Wait 0012  
                   _eval_poly 1E66    __size_ofi2_I2C_Master_Stop 0008                     _hexpowers FDD2  
                    ?_standby 0001              ___lwdiv@quotient 00D9                __size_of_floor 00DE  
              __size_of_ldexp 00C6                __size_of_frexp 0090                  ??_dec_to_hex 0065  
                 ??i2___lwdiv 0005                   ??i2___lwmod 000C                     _read_time 2818  
              __size_of_putch 0010    __end_ofi2_I2C_Master_Start 2E0C    __end_ofi2_I2C_Master_Write 2DE4  
                 ??i2_lcdInst 0003                ___wmul@product 00D8                      _LATAbits 000F89  
                    _LATCbits 000F8B                      _LATDbits 000F8C                   ??i2_isdigit 0001  
                  ?_date_time 0001                      i2u312_40 0EC0                      i2u313_40 0EC2  
                    i2u500_47 2522                      i2u501_47 254C                      i2u350_40 1402  
                    i2u275_40 25D4                      i2u268_40 185E                      i2u275_48 25D6  
                    i2u292_40 1F70                      i2u268_45 1856                      i2u292_48 1F72  
                    i2u367_40 2CC8                     _operation 20C0                      i2u288_40 1CFE  
                    i2u490_47 043A                      i2u491_47 06E4                      i2u492_47 2AB8  
                    i2u493_47 2AC0                      i2u494_47 2AE0                      i2u495_47 2AE8  
                    i2u496_47 2296                      i2u497_47 22BA                      i2u498_47 234A  
                    i2u499_47 236E              __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001  
          __end_of_dec_to_hex 1814    __end_ofi2_read_colorsensor 1AEA             ___wmul@multiplier 00D4  
                    i2___wmul 2CD0                 lcdNibble@data 00D5                    printf@flag 0106  
               lcdNibble@temp 00D4                    printf@prec 0103                    ?_eval_poly 0028  
                    i2_printf 0B04                   _bottle_time 2BE6           I2C_Master_Read@temp 00D6  
                   _yop_count 00BB                    ?_read_time 0001            dec_to_hex@quotient 0071  
                 _bottlequeue 0080              __size_ofi2_putch 000C                     frexp@eptr 0004  
                    __Hrparam 0000           i2read_colorsensor@i 0010                    ?_operation 0001  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000                   dec_to_hex@i 006D  
      __size_of_servo_rotate0 0090        __size_of_servo_rotate1 00B4        __size_of_servo_rotate2 00B4  
            __size_of___awdiv 0084              __size_of___ftadd 01AC              __size_of___awmod 00A2  
            __size_of___ftdiv 00E6              __size_of___ftneg 0024         i2___wmul@multiplicand 0003  
            __size_of___lldiv 00BC                      ___altoft 27A0              __size_of___ftmul 00F4  
            __size_of___ftsub 0040              __size_of___fttol 00F4              __size_of___lwdiv 0078  
            __size_of___lwmod 0062         __size_of_operationend 0018                      ___awtoft 2BAE  
                    ___ftpack 23A4                      ___lltoft 29A2                   _isdigit$821 00D5  
          i2I2C_Master_Read@a 0002              __size_of_lcdInst 0010                      _exp$1261 004C  
             _I2C_Master_Init 2942               _I2C_Master_Read 2C52              __size_of_initLCD 0050  
             _I2C_Master_Wait 2D72               _I2C_Master_Stop 2DEC                      _isr$1352 0074  
            __size_of_isdigit 002A               ___lwdiv@divisor 00D6               ___lwdiv@counter 00D8  
                    __ptext10 11C4                      __ptext11 072E                      __ptext20 2942  
                    __ptext12 2D98                      __ptext21 2180                      __ptext13 2C80  
                    __ptext30 2DB8                      __ptext22 1FFE                      __ptext14 2C1C  
                    __ptext31 2D3C                      __ptext23 2DD0                      __ptext15 2880  
                    __ptext40 2DDA                      __ptext32 2AEE                      __ptext24 2DEC  
                    __ptext16 2728                      __ptext41 2DFC                      __ptext33 29FE  
                    __ptext25 2DF4                      __ptext17 2DA8                      __ptext50 1CB6  
                    __ptext42 2E04                      __ptext34 2DC4                      __ptext26 2D72  
                    __ptext18 28E2                      __ptext51 2584                      __ptext43 2CAA  
                    __ptext35 2AA0                      __ptext19 2452                      __ptext60 2CF6  
                    __ptext52 1814                      __ptext44 2D86                      __ptext36 223C  
                    __ptext28 19FC                      __ptext61 1BD0                      __ptext53 2614  
                    __ptext45 1718                      __ptext37 22F0                      __ptext29 0B04  
                    __ptext62 2BAE                      __ptext54 27A0                      __ptext46 1358  
                    __ptext38 24F4                      __ptext63 29A2                      __ptext55 1E66  
                    __ptext47 15FA                      __ptext39 2818                      __ptext64 23A4  
                    __ptext56 2CD0                      __ptext48 0E30                      __ptext65 26A4  
                    __ptext57 1908                      __ptext49 1F38                      __ptext58 2B30  
                    __ptext59 1018                      _end_time 0078              __size_of_standby 0008  
                    _pow$1260 005B                      _pow$1259 0058        __size_of_emergencystop 0022  
               __size_of_main 00E6                      _nodedata 00B3               _dec_to_hex$1257 0065  
             _dec_to_hex$1258 0068                   ??_date_time 00EC                  _operationend 2D5A  
               ??i2_lcdNibble 0001                   ??_lcdNibble 00D4                      int$flags 007E  
                   printf@idx 0100                     printf@val 0104                      exp@coeff FDE1  
                    log@coeff FDFF              _bottlequeue_head 00A5                     putch@data 00D6  
    __end_of_I2C_Master_Start 2DFC              _bottlequeue_tail 0076      __end_of_I2C_Master_Write 2DDA  
                  _INTCONbits 000FF2                   ??_eval_poly 002F                      isdigit@c 00D6  
               _servo_rotate0 24F4                 _servo_rotate1 22F0                 _servo_rotate2 223C  
                 ??_read_time 0004                      intlevel2 0000              ___lwmod@dividend 00DB  
            ___lldiv@dividend 00D4            _I2C_ColorSens_Init 1FFE      __end_of_read_colorsensor 15FA  
                 ??_operation 00EC           ?_I2C_ColorSens_Init 0001                      printf@ap 0101  
     __end_of_I2C_Master_Init 29A2       __end_of_I2C_Master_Read 2C80       __end_of_I2C_Master_Wait 2D86  
     __end_of_I2C_Master_Stop 2DF4                   lcdInst@data 00D6                 _emergencystop 2D1A  
         __end_ofi2_lcdNibble 2AEE              ___lldiv@quotient 00DC             I2C_Master_Write@d 00D5  
             ___lwmod@divisor 00DD   i2read_colorsensor@color_low 0008               ___lwmod@counter 00DF  
        ??_I2C_ColorSens_Init 00D7                ?_servo_rotate0 0001                ?_servo_rotate1 000F  
              ?_servo_rotate2 000F  

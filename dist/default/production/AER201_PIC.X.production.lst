

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Feb 26 16:15:33 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           ; Version 1.40
    81                           ; Generated 01/12/2016 GMT
    82                           ; 
    83                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F4620 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     
   115                           	psect	idataBANK0
   116  00256A                     __pidataBANK0:
   117                           	opt stack 0
   118                           
   119                           ;initializer for _bottle_count_disp
   120  00256A  FFFF               	dw	65535
   121                           
   122                           	psect	mediumconst
   123  00FDDE                     __pmediumconst:
   124                           	opt stack 0
   125  00FDDE  00                 	db	0
   126  00FDDF                     _keys:
   127                           	opt stack 0
   128  00FDDF  31                 	db	49
   129  00FDE0  32                 	db	50
   130  00FDE1  33                 	db	51
   131  00FDE2  41                 	db	65
   132  00FDE3  34                 	db	52
   133  00FDE4  35                 	db	53
   134  00FDE5  36                 	db	54
   135  00FDE6  42                 	db	66
   136  00FDE7  37                 	db	55
   137  00FDE8  38                 	db	56
   138  00FDE9  39                 	db	57
   139  00FDEA  43                 	db	67
   140  00FDEB  2A                 	db	42
   141  00FDEC  30                 	db	48
   142  00FDED  23                 	db	35
   143  00FDEE  44                 	db	68
   144  00FDEF  00                 	db	0
   145  00FDF0                     __end_of_keys:
   146                           	opt stack 0
   147  00FDF0                     _dpowers:
   148                           	opt stack 0
   149  00FDF0  0001               	dw	1
   150  00FDF2  000A               	dw	10
   151  00FDF4  0064               	dw	100
   152  00FDF6  03E8               	dw	1000
   153  00FDF8  2710               	dw	10000
   154  00FDFA                     __end_of_dpowers:
   155                           	opt stack 0
   156  00FDFA                     _hexpowers:
   157                           	opt stack 0
   158  00FDFA  0001               	dw	1
   159  00FDFC  0010               	dw	16
   160  00FDFE  0100               	dw	256
   161  00FE00  1000               	dw	4096
   162  00FE02                     __end_of_hexpowers:
   163                           	opt stack 0
   164  00FE02                     _timeset:
   165                           	opt stack 0
   166  00FE02  50                 	db	80
   167  00FE03  35                 	db	53
   168  00FE04  21                 	db	33
   169  00FE05  08                 	db	8
   170  00FE06  05                 	db	5
   171  00FE07  02                 	db	2
   172  00FE08  17                 	db	23
   173  00FE09                     __end_of_timeset:
   174                           	opt stack 0
   175  00FE09                     exp@coeff:
   176                           	opt stack 0
   177  00FE09  00                 	db	0
   178  00FE0A  80                 	db	128
   179  00FE0B  3F                 	db	63
   180  00FE0C  72                 	db	114
   181  00FE0D  31                 	db	49
   182  00FE0E  3F                 	db	63
   183  00FE0F  FE                 	db	254
   184  00FE10  75                 	db	117
   185  00FE11  3E                 	db	62
   186  00FE12  58                 	db	88
   187  00FE13  63                 	db	99
   188  00FE14  3D                 	db	61
   189  00FE15  95                 	db	149
   190  00FE16  1D                 	db	29
   191  00FE17  3C                 	db	60
   192  00FE18  C5                 	db	197
   193  00FE19  AE                 	db	174
   194  00FE1A  3A                 	db	58
   195  00FE1B  79                 	db	121
   196  00FE1C  21                 	db	33
   197  00FE1D  39                 	db	57
   198  00FE1E  94                 	db	148
   199  00FE1F  80                 	db	128
   200  00FE20  37                 	db	55
   201  00FE21  93                 	db	147
   202  00FE22  A7                 	db	167
   203  00FE23  35                 	db	53
   204  00FE24  56                 	db	86
   205  00FE25  15                 	db	21
   206  00FE26  34                 	db	52
   207  00FE27                     __end_ofexp@coeff:
   208                           	opt stack 0
   209  00FE27                     log@coeff:
   210                           	opt stack 0
   211  00FE27  00                 	db	0
   212  00FE28  00                 	db	0
   213  00FE29  00                 	db	0
   214  00FE2A  00                 	db	0
   215  00FE2B  80                 	db	128
   216  00FE2C  3F                 	db	63
   217  00FE2D  F0                 	db	240
   218  00FE2E  FF                 	db	255
   219  00FE2F  BE                 	db	190
   220  00FE30  E2                 	db	226
   221  00FE31  A9                 	db	169
   222  00FE32  3E                 	db	62
   223  00FE33  83                 	db	131
   224  00FE34  76                 	db	118
   225  00FE35  BE                 	db	190
   226  00FE36  AE                 	db	174
   227  00FE37  2B                 	db	43
   228  00FE38  3E                 	db	62
   229  00FE39  3C                 	db	60
   230  00FE3A  C3                 	db	195
   231  00FE3B  BD                 	db	189
   232  00FE3C  D2                 	db	210
   233  00FE3D  13                 	db	19
   234  00FE3E  3D                 	db	61
   235  00FE3F  78                 	db	120
   236  00FE40  D3                 	db	211
   237  00FE41  BB                 	db	187
   238  00FE42                     __end_oflog@coeff:
   239                           	opt stack 0
   240  0000                     _TMR0	set	4054
   241  0000                     _ADCON0	set	4034
   242  0000                     _ADCON1	set	4033
   243  0000                     _INTCONbits	set	4082
   244  0000                     _LATA	set	3977
   245  0000                     _LATB	set	3978
   246  0000                     _LATC	set	3979
   247  0000                     _LATD	set	3980
   248  0000                     _LATDbits	set	3980
   249  0000                     _LATE	set	3981
   250  0000                     _PORTAbits	set	3968
   251  0000                     _PORTB	set	3969
   252  0000                     _PORTEbits	set	3972
   253  0000                     _SSPADD	set	4040
   254  0000                     _SSPBUF	set	4041
   255  0000                     _SSPCON1	set	4038
   256  0000                     _SSPCON2	set	4037
   257  0000                     _SSPSTAT	set	4039
   258  0000                     _TRISA	set	3986
   259  0000                     _TRISB	set	3987
   260  0000                     _TRISC	set	3988
   261  0000                     _TRISD	set	3989
   262  0000                     _TRISE	set	3990
   263  0000                     _ACKDT	set	32301
   264  0000                     _ACKEN	set	32300
   265  0000                     _INT1IE	set	32643
   266  0000                     _INT1IF	set	32640
   267  0000                     _PEN	set	32298
   268  0000                     _PSA	set	32427
   269  0000                     _RCEN	set	32299
   270  0000                     _RSEN	set	32297
   271  0000                     _SEN	set	32296
   272  0000                     _T08BIT	set	32430
   273  0000                     _T0CS	set	32429
   274  0000                     _T0PS0	set	32424
   275  0000                     _T0PS1	set	32425
   276  0000                     _T0PS2	set	32426
   277  0000                     _TMR0IE	set	32661
   278  0000                     _TMR0IF	set	32658
   279  0000                     _TMR0ON	set	32431
   280  0000                     _TRISC3	set	31907
   281  0000                     _TRISC4	set	31908
   282  0000                     _nRBPU	set	32655
   283  00FE42                     STR_21:
   284  00FE42  52                 	db	82	;'R'
   285  00FE43  75                 	db	117	;'u'
   286  00FE44  6E                 	db	110	;'n'
   287  00FE45  6E                 	db	110	;'n'
   288  00FE46  69                 	db	105	;'i'
   289  00FE47  6E                 	db	110	;'n'
   290  00FE48  67                 	db	103	;'g'
   291  00FE49  7E                 	db	126
   292  00FE4A  7E                 	db	126
   293  00FE4B  7E                 	db	126
   294  00FE4C  20                 	db	32
   295  00FE4D  20                 	db	32
   296  00FE4E  20                 	db	32
   297  00FE4F  20                 	db	32
   298  00FE50  20                 	db	32
   299  00FE51  20                 	db	32
   300  00FE52  20                 	db	32
   301  00FE53  20                 	db	32
   302  00FE54  20                 	db	32
   303  00FE55  20                 	db	32
   304  00FE56  20                 	db	32
   305  00FE57  20                 	db	32
   306  00FE58  20                 	db	32
   307  00FE59  20                 	db	32
   308  00FE5A  00                 	db	0
   309  00FE5B                     STR_20:
   310  00FE5B  52                 	db	82	;'R'
   311  00FE5C  75                 	db	117	;'u'
   312  00FE5D  6E                 	db	110	;'n'
   313  00FE5E  6E                 	db	110	;'n'
   314  00FE5F  69                 	db	105	;'i'
   315  00FE60  6E                 	db	110	;'n'
   316  00FE61  67                 	db	103	;'g'
   317  00FE62  7E                 	db	126
   318  00FE63  7E                 	db	126
   319  00FE64  20                 	db	32
   320  00FE65  20                 	db	32
   321  00FE66  20                 	db	32
   322  00FE67  20                 	db	32
   323  00FE68  20                 	db	32
   324  00FE69  20                 	db	32
   325  00FE6A  20                 	db	32
   326  00FE6B  20                 	db	32
   327  00FE6C  20                 	db	32
   328  00FE6D  20                 	db	32
   329  00FE6E  20                 	db	32
   330  00FE6F  20                 	db	32
   331  00FE70  20                 	db	32
   332  00FE71  20                 	db	32
   333  00FE72  00                 	db	0
   334  00FE73                     STR_19:
   335  00FE73  52                 	db	82	;'R'
   336  00FE74  75                 	db	117	;'u'
   337  00FE75  6E                 	db	110	;'n'
   338  00FE76  6E                 	db	110	;'n'
   339  00FE77  69                 	db	105	;'i'
   340  00FE78  6E                 	db	110	;'n'
   341  00FE79  67                 	db	103	;'g'
   342  00FE7A  7E                 	db	126
   343  00FE7B  20                 	db	32
   344  00FE7C  20                 	db	32
   345  00FE7D  20                 	db	32
   346  00FE7E  20                 	db	32
   347  00FE7F  20                 	db	32
   348  00FE80  20                 	db	32
   349  00FE81  20                 	db	32
   350  00FE82  20                 	db	32
   351  00FE83  20                 	db	32
   352  00FE84  20                 	db	32
   353  00FE85  20                 	db	32
   354  00FE86  20                 	db	32
   355  00FE87  20                 	db	32
   356  00FE88  20                 	db	32
   357  00FE89  00                 	db	0
   358  00FE8A                     STR_17:
   359  00FE8A  54                 	db	84	;'T'
   360  00FE8B  6F                 	db	111	;'o'
   361  00FE8C  74                 	db	116	;'t'
   362  00FE8D  61                 	db	97	;'a'
   363  00FE8E  6C                 	db	108	;'l'
   364  00FE8F  20                 	db	32
   365  00FE90  4F                 	db	79	;'O'
   366  00FE91  70                 	db	112	;'p'
   367  00FE92  65                 	db	101	;'e'
   368  00FE93  72                 	db	114	;'r'
   369  00FE94  61                 	db	97	;'a'
   370  00FE95  74                 	db	116	;'t'
   371  00FE96  69                 	db	105	;'i'
   372  00FE97  6F                 	db	111	;'o'
   373  00FE98  6E                 	db	110	;'n'
   374  00FE99  20                 	db	32
   375  00FE9A  20                 	db	32
   376  00FE9B  20                 	db	32
   377  00FE9C  20                 	db	32
   378  00FE9D  20                 	db	32
   379  00FE9E  20                 	db	32
   380  00FE9F  20                 	db	32
   381  00FEA0  00                 	db	0
   382  00FEA1                     STR_4:
   383  00FEA1  44                 	db	68	;'D'
   384  00FEA2  61                 	db	97	;'a'
   385  00FEA3  74                 	db	116	;'t'
   386  00FEA4  65                 	db	101	;'e'
   387  00FEA5  3A                 	db	58	;':'
   388  00FEA6  20                 	db	32
   389  00FEA7  25                 	db	37
   390  00FEA8  30                 	db	48	;'0'
   391  00FEA9  32                 	db	50	;'2'
   392  00FEAA  78                 	db	120	;'x'
   393  00FEAB  2F                 	db	47
   394  00FEAC  25                 	db	37
   395  00FEAD  30                 	db	48	;'0'
   396  00FEAE  32                 	db	50	;'2'
   397  00FEAF  78                 	db	120	;'x'
   398  00FEB0  2F                 	db	47
   399  00FEB1  25                 	db	37
   400  00FEB2  30                 	db	48	;'0'
   401  00FEB3  32                 	db	50	;'2'
   402  00FEB4  78                 	db	120	;'x'
   403  00FEB5  20                 	db	32
   404  00FEB6  20                 	db	32
   405  00FEB7  00                 	db	0
   406  00FEB8                     STR_5:
   407  00FEB8  54                 	db	84	;'T'
   408  00FEB9  69                 	db	105	;'i'
   409  00FEBA  6D                 	db	109	;'m'
   410  00FEBB  65                 	db	101	;'e'
   411  00FEBC  3A                 	db	58	;':'
   412  00FEBD  20                 	db	32
   413  00FEBE  25                 	db	37
   414  00FEBF  30                 	db	48	;'0'
   415  00FEC0  32                 	db	50	;'2'
   416  00FEC1  78                 	db	120	;'x'
   417  00FEC2  3A                 	db	58	;':'
   418  00FEC3  25                 	db	37
   419  00FEC4  30                 	db	48	;'0'
   420  00FEC5  32                 	db	50	;'2'
   421  00FEC6  78                 	db	120	;'x'
   422  00FEC7  3A                 	db	58	;':'
   423  00FEC8  25                 	db	37
   424  00FEC9  30                 	db	48	;'0'
   425  00FECA  32                 	db	50	;'2'
   426  00FECB  78                 	db	120	;'x'
   427  00FECC  20                 	db	32
   428  00FECD  20                 	db	32
   429  00FECE  00                 	db	0
   430  00FECF                     STR_18:
   431  00FECF  54                 	db	84	;'T'
   432  00FED0  69                 	db	105	;'i'
   433  00FED1  6D                 	db	109	;'m'
   434  00FED2  65                 	db	101	;'e'
   435  00FED3  3A                 	db	58	;':'
   436  00FED4  20                 	db	32
   437  00FED5  25                 	db	37
   438  00FED6  64                 	db	100	;'d'
   439  00FED7  20                 	db	32
   440  00FED8  73                 	db	115	;'s'
   441  00FED9  20                 	db	32
   442  00FEDA  20                 	db	32
   443  00FEDB  20                 	db	32
   444  00FEDC  20                 	db	32
   445  00FEDD  20                 	db	32
   446  00FEDE  20                 	db	32
   447  00FEDF  20                 	db	32
   448  00FEE0  00                 	db	0
   449  00FEE1                     STR_26:
   450  00FEE1  30                 	db	48	;'0'
   451  00FEE2  31                 	db	49	;'1'
   452  00FEE3  32                 	db	50	;'2'
   453  00FEE4  33                 	db	51	;'3'
   454  00FEE5  34                 	db	52	;'4'
   455  00FEE6  35                 	db	53	;'5'
   456  00FEE7  36                 	db	54	;'6'
   457  00FEE8  37                 	db	55	;'7'
   458  00FEE9  38                 	db	56	;'8'
   459  00FEEA  39                 	db	57	;'9'
   460  00FEEB  61                 	db	97	;'a'
   461  00FEEC  62                 	db	98	;'b'
   462  00FEED  63                 	db	99	;'c'
   463  00FEEE  64                 	db	100	;'d'
   464  00FEEF  65                 	db	101	;'e'
   465  00FEF0  66                 	db	102	;'f'
   466  00FEF1  00                 	db	0
   467  00FEF2                     STR_2:
   468  00FEF2  73                 	db	115	;'s'
   469  00FEF3  74                 	db	116	;'t'
   470  00FEF4  61                 	db	97	;'a'
   471  00FEF5  6E                 	db	110	;'n'
   472  00FEF6  64                 	db	100	;'d'
   473  00FEF7  62                 	db	98	;'b'
   474  00FEF8  79                 	db	121	;'y'
   475  00FEF9  20                 	db	32
   476  00FEFA  20                 	db	32
   477  00FEFB  20                 	db	32
   478  00FEFC  20                 	db	32
   479  00FEFD  20                 	db	32
   480  00FEFE  20                 	db	32
   481  00FEFF  20                 	db	32
   482  00FF00  20                 	db	32
   483  00FF01  20                 	db	32
   484  00FF02  00                 	db	0
   485  00FF03                     STR_7:
   486  00FF03  54                 	db	84	;'T'
   487  00FF04  6F                 	db	111	;'o'
   488  00FF05  74                 	db	116	;'t'
   489  00FF06  61                 	db	97	;'a'
   490  00FF07  6C                 	db	108	;'l'
   491  00FF08  3A                 	db	58	;':'
   492  00FF09  20                 	db	32
   493  00FF0A  31                 	db	49	;'1'
   494  00FF0B  30                 	db	48	;'0'
   495  00FF0C  20                 	db	32
   496  00FF0D  20                 	db	32
   497  00FF0E  20                 	db	32
   498  00FF0F  20                 	db	32
   499  00FF10  20                 	db	32
   500  00FF11  20                 	db	32
   501  00FF12  20                 	db	32
   502  00FF13  00                 	db	0
   503  00FF14                     STR_6:
   504  00FF14  42                 	db	66	;'B'
   505  00FF15  6F                 	db	111	;'o'
   506  00FF16  74                 	db	116	;'t'
   507  00FF17  74                 	db	116	;'t'
   508  00FF18  6C                 	db	108	;'l'
   509  00FF19  65                 	db	101	;'e'
   510  00FF1A  20                 	db	32
   511  00FF1B  43                 	db	67	;'C'
   512  00FF1C  6F                 	db	111	;'o'
   513  00FF1D  75                 	db	117	;'u'
   514  00FF1E  6E                 	db	110	;'n'
   515  00FF1F  74                 	db	116	;'t'
   516  00FF20  20                 	db	32
   517  00FF21  20                 	db	32
   518  00FF22  20                 	db	32
   519  00FF23  20                 	db	32
   520  00FF24  00                 	db	0
   521  00FF25                     STR_11:
   522  00FF25  59                 	db	89	;'Y'
   523  00FF26  4F                 	db	79	;'O'
   524  00FF27  50                 	db	80	;'P'
   525  00FF28  2D                 	db	45
   526  00FF29  43                 	db	67	;'C'
   527  00FF2A  41                 	db	65	;'A'
   528  00FF2B  50                 	db	80	;'P'
   529  00FF2C  2D                 	db	45
   530  00FF2D  4C                 	db	76	;'L'
   531  00FF2E  42                 	db	66	;'B'
   532  00FF2F  4C                 	db	76	;'L'
   533  00FF30  3A                 	db	58	;':'
   534  00FF31  20                 	db	32
   535  00FF32  30                 	db	48	;'0'
   536  00FF33  20                 	db	32
   537  00FF34  20                 	db	32
   538  00FF35  00                 	db	0
   539  00FF36                     STR_10:
   540  00FF36  59                 	db	89	;'Y'
   541  00FF37  4F                 	db	79	;'O'
   542  00FF38  50                 	db	80	;'P'
   543  00FF39  2D                 	db	45
   544  00FF3A  43                 	db	67	;'C'
   545  00FF3B  41                 	db	65	;'A'
   546  00FF3C  50                 	db	80	;'P'
   547  00FF3D  2B                 	db	43
   548  00FF3E  4C                 	db	76	;'L'
   549  00FF3F  42                 	db	66	;'B'
   550  00FF40  4C                 	db	76	;'L'
   551  00FF41  3A                 	db	58	;':'
   552  00FF42  20                 	db	32
   553  00FF43  31                 	db	49	;'1'
   554  00FF44  20                 	db	32
   555  00FF45  20                 	db	32
   556  00FF46  00                 	db	0
   557  00FF47                     STR_9:
   558  00FF47  59                 	db	89	;'Y'
   559  00FF48  4F                 	db	79	;'O'
   560  00FF49  50                 	db	80	;'P'
   561  00FF4A  2B                 	db	43
   562  00FF4B  43                 	db	67	;'C'
   563  00FF4C  41                 	db	65	;'A'
   564  00FF4D  50                 	db	80	;'P'
   565  00FF4E  2D                 	db	45
   566  00FF4F  4C                 	db	76	;'L'
   567  00FF50  42                 	db	66	;'B'
   568  00FF51  4C                 	db	76	;'L'
   569  00FF52  3A                 	db	58	;':'
   570  00FF53  20                 	db	32
   571  00FF54  31                 	db	49	;'1'
   572  00FF55  20                 	db	32
   573  00FF56  20                 	db	32
   574  00FF57  00                 	db	0
   575  00FF58                     STR_8:
   576  00FF58  59                 	db	89	;'Y'
   577  00FF59  4F                 	db	79	;'O'
   578  00FF5A  50                 	db	80	;'P'
   579  00FF5B  2B                 	db	43
   580  00FF5C  43                 	db	67	;'C'
   581  00FF5D  41                 	db	65	;'A'
   582  00FF5E  50                 	db	80	;'P'
   583  00FF5F  2B                 	db	43
   584  00FF60  4C                 	db	76	;'L'
   585  00FF61  42                 	db	66	;'B'
   586  00FF62  4C                 	db	76	;'L'
   587  00FF63  3A                 	db	58	;':'
   588  00FF64  20                 	db	32
   589  00FF65  33                 	db	51	;'3'
   590  00FF66  20                 	db	32
   591  00FF67  20                 	db	32
   592  00FF68  00                 	db	0
   593  00FF69                     STR_12:
   594  00FF69  45                 	db	69	;'E'
   595  00FF6A  53                 	db	83	;'S'
   596  00FF6B  4B                 	db	75	;'K'
   597  00FF6C  41                 	db	65	;'A'
   598  00FF6D  2B                 	db	43
   599  00FF6E  43                 	db	67	;'C'
   600  00FF6F  41                 	db	65	;'A'
   601  00FF70  50                 	db	80	;'P'
   602  00FF71  2B                 	db	43
   603  00FF72  4C                 	db	76	;'L'
   604  00FF73  42                 	db	66	;'B'
   605  00FF74  4C                 	db	76	;'L'
   606  00FF75  3A                 	db	58	;':'
   607  00FF76  20                 	db	32
   608  00FF77  31                 	db	49	;'1'
   609  00FF78  20                 	db	32
   610  00FF79  00                 	db	0
   611  00FF7A                     STR_14:
   612  00FF7A  45                 	db	69	;'E'
   613  00FF7B  53                 	db	83	;'S'
   614  00FF7C  4B                 	db	75	;'K'
   615  00FF7D  41                 	db	65	;'A'
   616  00FF7E  2D                 	db	45
   617  00FF7F  43                 	db	67	;'C'
   618  00FF80  41                 	db	65	;'A'
   619  00FF81  50                 	db	80	;'P'
   620  00FF82  2B                 	db	43
   621  00FF83  4C                 	db	76	;'L'
   622  00FF84  42                 	db	66	;'B'
   623  00FF85  4C                 	db	76	;'L'
   624  00FF86  3A                 	db	58	;':'
   625  00FF87  20                 	db	32
   626  00FF88  31                 	db	49	;'1'
   627  00FF89  20                 	db	32
   628  00FF8A  00                 	db	0
   629  00FF8B                     STR_13:
   630  00FF8B  45                 	db	69	;'E'
   631  00FF8C  53                 	db	83	;'S'
   632  00FF8D  4B                 	db	75	;'K'
   633  00FF8E  41                 	db	65	;'A'
   634  00FF8F  2B                 	db	43
   635  00FF90  43                 	db	67	;'C'
   636  00FF91  41                 	db	65	;'A'
   637  00FF92  50                 	db	80	;'P'
   638  00FF93  2D                 	db	45
   639  00FF94  4C                 	db	76	;'L'
   640  00FF95  42                 	db	66	;'B'
   641  00FF96  4C                 	db	76	;'L'
   642  00FF97  3A                 	db	58	;':'
   643  00FF98  20                 	db	32
   644  00FF99  31                 	db	49	;'1'
   645  00FF9A  20                 	db	32
   646  00FF9B  00                 	db	0
   647  00FF9C                     STR_15:
   648  00FF9C  45                 	db	69	;'E'
   649  00FF9D  53                 	db	83	;'S'
   650  00FF9E  4B                 	db	75	;'K'
   651  00FF9F  41                 	db	65	;'A'
   652  00FFA0  2D                 	db	45
   653  00FFA1  43                 	db	67	;'C'
   654  00FFA2  41                 	db	65	;'A'
   655  00FFA3  50                 	db	80	;'P'
   656  00FFA4  2D                 	db	45
   657  00FFA5  4C                 	db	76	;'L'
   658  00FFA6  42                 	db	66	;'B'
   659  00FFA7  4C                 	db	76	;'L'
   660  00FFA8  3A                 	db	58	;':'
   661  00FFA9  20                 	db	32
   662  00FFAA  32                 	db	50	;'2'
   663  00FFAB  20                 	db	32
   664  00FFAC  00                 	db	0
   665  00FFAD                     STR_24:
   666  00FFAD  25                 	db	37
   667  00FFAE  78                 	db	120	;'x'
   668  00FFAF  20                 	db	32
   669  00FFB0  20                 	db	32
   670  00FFB1  20                 	db	32
   671  00FFB2  20                 	db	32
   672  00FFB3  20                 	db	32
   673  00FFB4  20                 	db	32
   674  00FFB5  20                 	db	32
   675  00FFB6  20                 	db	32
   676  00FFB7  20                 	db	32
   677  00FFB8  20                 	db	32
   678  00FFB9  20                 	db	32
   679  00FFBA  20                 	db	32
   680  00FFBB  20                 	db	32
   681  00FFBC  00                 	db	0
   682  00FFBD                     STR_22:
   683  00FFBD  4F                 	db	79	;'O'
   684  00FFBE  70                 	db	112	;'p'
   685  00FFBF  65                 	db	101	;'e'
   686  00FFC0  72                 	db	114	;'r'
   687  00FFC1  61                 	db	97	;'a'
   688  00FFC2  74                 	db	116	;'t'
   689  00FFC3  69                 	db	105	;'i'
   690  00FFC4  6F                 	db	111	;'o'
   691  00FFC5  6E                 	db	110	;'n'
   692  00FFC6  20                 	db	32
   693  00FFC7  44                 	db	68	;'D'
   694  00FFC8  6F                 	db	111	;'o'
   695  00FFC9  6E                 	db	110	;'n'
   696  00FFCA  65                 	db	101	;'e'
   697  00FFCB  21                 	db	33
   698  00FFCC  00                 	db	0
   699  00FFCD                     STR_23:
   700  00FFCD  45                 	db	69	;'E'
   701  00FFCE  4D                 	db	77	;'M'
   702  00FFCF  45                 	db	69	;'E'
   703  00FFD0  52                 	db	82	;'R'
   704  00FFD1  47                 	db	71	;'G'
   705  00FFD2  45                 	db	69	;'E'
   706  00FFD3  4E                 	db	78	;'N'
   707  00FFD4  43                 	db	67	;'C'
   708  00FFD5  59                 	db	89	;'Y'
   709  00FFD6  20                 	db	32
   710  00FFD7  53                 	db	83	;'S'
   711  00FFD8  54                 	db	84	;'T'
   712  00FFD9  4F                 	db	79	;'O'
   713  00FFDA  50                 	db	80	;'P'
   714  00FFDB  00                 	db	0
   715  00FFDC                     STR_1:
   716  00FFDC  62                 	db	98	;'b'
   717  00FFDD  61                 	db	97	;'a'
   718  00FFDE  64                 	db	100	;'d'
   719  00FFDF  20                 	db	32
   720  00FFE0  69                 	db	105	;'i'
   721  00FFE1  6E                 	db	110	;'n'
   722  00FFE2  74                 	db	116	;'t'
   723  00FFE3  65                 	db	101	;'e'
   724  00FFE4  72                 	db	114	;'r'
   725  00FFE5  72                 	db	114	;'r'
   726  00FFE6  75                 	db	117	;'u'
   727  00FFE7  70                 	db	112	;'p'
   728  00FFE8  74                 	db	116	;'t'
   729  00FFE9  00                 	db	0
   730  00FFEA                     STR_3:
   731  00FFEA  50                 	db	80	;'P'
   732  00FFEB  4F                 	db	79	;'O'
   733  00FFEC  52                 	db	82	;'R'
   734  00FFED  54                 	db	84	;'T'
   735  00FFEE  42                 	db	66	;'B'
   736  00FFEF  3A                 	db	58	;':'
   737  00FFF0  20                 	db	32
   738  00FFF1  25                 	db	37
   739  00FFF2  64                 	db	100	;'d'
   740  00FFF3  00                 	db	0
   741  00FFF4                     STR_16:
   742  00FFF4  45                 	db	69	;'E'
   743  00FFF5  52                 	db	82	;'R'
   744  00FFF6  52                 	db	82	;'R'
   745  00FFF7  4F                 	db	79	;'O'
   746  00FFF8  52                 	db	82	;'R'
   747  00FFF9  3A                 	db	58	;':'
   748  00FFFA  20                 	db	32
   749  00FFFB  25                 	db	37
   750  00FFFC  64                 	db	100	;'d'
   751  00FFFD  00                 	db	0
   752  0000                     
   753                           ; #config settings
   754  00FFFE  00                 	db	0	; dummy byte at the end
   755  0000                     
   756                           	psect	cinit
   757  0022A8                     __pcinit:
   758                           	opt stack 0
   759  0022A8                     start_initialization:
   760                           	opt stack 0
   761  0022A8                     __initialization:
   762                           	opt stack 0
   763                           
   764                           ; Initialize objects allocated to BANK0 (2 bytes)
   765                           ; load TBLPTR registers with __pidataBANK0
   766  0022A8  0E6A               	movlw	low __pidataBANK0
   767  0022AA  6EF6               	movwf	tblptrl,c
   768  0022AC  0E25               	movlw	high __pidataBANK0
   769  0022AE  6EF7               	movwf	tblptrh,c
   770  0022B0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   771  0022B2  6EF8               	movwf	tblptru,c
   772  0022B4  0009               	tblrd		*+	;fetch initializer
   773  0022B6  CFF5 F0C4          	movff	tablat,__pdataBANK0
   774  0022BA  0009               	tblrd		*+	;fetch initializer
   775  0022BC  CFF5 F0C5          	movff	tablat,__pdataBANK0+1
   776                           
   777                           ; Clear objects allocated to BANK0 (14 bytes)
   778  0022C0  EE00  F0B6         	lfsr	0,__pbssBANK0
   779  0022C4  0E0E               	movlw	14
   780  0022C6                     clear_0:
   781  0022C6  6AEE               	clrf	postinc0,c
   782  0022C8  06E8               	decf	wreg,f,c
   783  0022CA  E1FD               	bnz	clear_0
   784                           
   785                           ; Clear objects allocated to COMRAM (8 bytes)
   786  0022CC  EE00  F076         	lfsr	0,__pbssCOMRAM
   787  0022D0  0E08               	movlw	8
   788  0022D2                     clear_1:
   789  0022D2  6AEE               	clrf	postinc0,c
   790  0022D4  06E8               	decf	wreg,f,c
   791  0022D6  E1FD               	bnz	clear_1
   792  0022D8                     end_of_initialization:
   793                           	opt stack 0
   794  0022D8                     __end_of__initialization:
   795                           	opt stack 0
   796  0022D8  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   797  0022DA  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   798  0022DC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   799  0022DE  6EF8               	movwf	tblptru,c
   800  0022E0  0100               	movlb	0
   801  0022E2  EF4C  F008         	goto	_main	;jump to C main() function
   802                           tblptru	equ	0xFF8
   803                           tblptrh	equ	0xFF7
   804                           tblptrl	equ	0xFF6
   805                           tablat	equ	0xFF5
   806                           postinc0	equ	0xFEE
   807                           wreg	equ	0xFE8
   808                           
   809                           	psect	bssCOMRAM
   810  000076                     __pbssCOMRAM:
   811                           	opt stack 0
   812  000076                     _end_time:
   813                           	opt stack 0
   814  000076                     	ds	2
   815  000078                     _errno:
   816                           	opt stack 0
   817  000078                     	ds	2
   818  00007A                     _ptr:
   819                           	opt stack 0
   820  00007A                     	ds	2
   821  00007C                     _start_time:
   822                           	opt stack 0
   823  00007C                     	ds	2
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           postinc0	equ	0xFEE
   829                           wreg	equ	0xFE8
   830                           
   831                           	psect	bssBANK0
   832  0000B6                     __pbssBANK0:
   833                           	opt stack 0
   834  0000B6                     _time:
   835                           	opt stack 0
   836  0000B6                     	ds	7
   837  0000BD                     _etime:
   838                           	opt stack 0
   839  0000BD                     	ds	2
   840  0000BF                     _operation_disp:
   841                           	opt stack 0
   842  0000BF                     	ds	2
   843  0000C1                     _stime:
   844                           	opt stack 0
   845  0000C1                     	ds	2
   846  0000C3                     _curr_state:
   847                           	opt stack 0
   848  0000C3                     	ds	1
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           postinc0	equ	0xFEE
   854                           wreg	equ	0xFE8
   855                           
   856                           	psect	dataBANK0
   857  0000C4                     __pdataBANK0:
   858                           	opt stack 0
   859  0000C4                     _bottle_count_disp:
   860                           	opt stack 0
   861  0000C4                     	ds	2
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           postinc0	equ	0xFEE
   867                           wreg	equ	0xFE8
   868                           
   869                           	psect	cstackBANK0
   870  000080                     __pcstackBANK0:
   871                           	opt stack 0
   872  000080                     ??_isr:
   873                           
   874                           ; 1 bytes @ 0x0
   875  000080                     	ds	16
   876  000090                     ??_isdigit:
   877  000090                     ??_I2C_Master_Wait:
   878  000090                     ?___wmul:
   879                           	opt stack 0
   880  000090                     ?___awmod:
   881                           	opt stack 0
   882  000090                     ?___lwdiv:
   883                           	opt stack 0
   884  000090                     ?___lldiv:
   885                           	opt stack 0
   886  000090                     lcdNibble@temp:
   887                           	opt stack 0
   888  000090                     ___wmul@multiplier:
   889                           	opt stack 0
   890  000090                     ___awmod@dividend:
   891                           	opt stack 0
   892  000090                     ___lwdiv@dividend:
   893                           	opt stack 0
   894  000090                     ___lldiv@dividend:
   895                           	opt stack 0
   896                           
   897                           ; 4 bytes @ 0x10
   898  000090                     	ds	1
   899  000091                     I2C_Master_Read@a:
   900                           	opt stack 0
   901  000091                     lcdNibble@data:
   902                           	opt stack 0
   903  000091                     _isdigit$782:
   904                           	opt stack 0
   905  000091                     I2C_Master_Write@d:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x11
   909  000091                     	ds	1
   910  000092                     I2C_Master_Read@temp:
   911                           	opt stack 0
   912  000092                     lcdInst@data:
   913                           	opt stack 0
   914  000092                     putch@data:
   915                           	opt stack 0
   916  000092                     isdigit@c:
   917                           	opt stack 0
   918  000092                     ___wmul@multiplicand:
   919                           	opt stack 0
   920  000092                     ___awmod@divisor:
   921                           	opt stack 0
   922  000092                     ___lwdiv@divisor:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x12
   926  000092                     	ds	1
   927  000093                     ??_initLCD:
   928                           
   929                           ; 1 bytes @ 0x13
   930  000093                     	ds	1
   931  000094                     ___awmod@counter:
   932                           	opt stack 0
   933  000094                     ___wmul@product:
   934                           	opt stack 0
   935  000094                     ___lwdiv@quotient:
   936                           	opt stack 0
   937  000094                     ___lldiv@divisor:
   938                           	opt stack 0
   939                           
   940                           ; 4 bytes @ 0x14
   941  000094                     	ds	1
   942  000095                     ___awmod@sign:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x15
   946  000095                     	ds	1
   947  000096                     ___lwdiv@counter:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x16
   951  000096                     	ds	1
   952  000097                     ?___lwmod:
   953                           	opt stack 0
   954  000097                     ___lwmod@dividend:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x17
   958  000097                     	ds	1
   959  000098                     ___lldiv@quotient:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x18
   963  000098                     	ds	1
   964  000099                     ___lwmod@divisor:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x19
   968  000099                     	ds	2
   969  00009B                     ___lwmod@counter:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x1B
   973  00009B                     	ds	1
   974  00009C                     ?_printf:
   975                           	opt stack 0
   976  00009C                     ___lldiv@counter:
   977                           	opt stack 0
   978  00009C                     printf@f:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x1C
   982  00009C                     	ds	1
   983  00009D                     I2C_Master_Init@c:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x1D
   987  00009D                     	ds	4
   988  0000A1                     ??_I2C_Master_Init:
   989                           
   990                           ; 1 bytes @ 0x21
   991  0000A1                     	ds	3
   992  0000A4                     ??_printf:
   993                           
   994                           ; 1 bytes @ 0x24
   995  0000A4                     	ds	4
   996  0000A8                     printf@idx:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x28
  1000  0000A8                     	ds	1
  1001  0000A9                     printf@ap:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x29
  1005  0000A9                     	ds	2
  1006  0000AB                     printf@prec:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x2B
  1010  0000AB                     	ds	1
  1011  0000AC                     printf@val:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x2C
  1015  0000AC                     	ds	2
  1016  0000AE                     printf@flag:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x2E
  1020  0000AE                     	ds	1
  1021  0000AF                     printf@width:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x2F
  1025  0000AF                     	ds	2
  1026  0000B1                     printf@c:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x31
  1030  0000B1                     	ds	1
  1031  0000B2                     ??_operation:
  1032  0000B2                     date_time@i:
  1033                           	opt stack 0
  1034  0000B2                     bottle_time@time:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x32
  1038  0000B2                     	ds	2
  1039  0000B4                     ??_main:
  1040                           
  1041                           ; 1 bytes @ 0x34
  1042  0000B4                     	ds	2
  1043                           tblptru	equ	0xFF8
  1044                           tblptrh	equ	0xFF7
  1045                           tblptrl	equ	0xFF6
  1046                           tablat	equ	0xFF5
  1047                           postinc0	equ	0xFEE
  1048                           wreg	equ	0xFE8
  1049                           
  1050                           	psect	cstackCOMRAM
  1051  000001                     __pcstackCOMRAM:
  1052                           	opt stack 0
  1053  000001                     ??i2_I2C_Master_Wait:
  1054  000001                     ??i2_isdigit:
  1055  000001                     ?___awdiv:
  1056                           	opt stack 0
  1057  000001                     ?i2___wmul:
  1058                           	opt stack 0
  1059  000001                     ?i2___lwdiv:
  1060                           	opt stack 0
  1061  000001                     ?___ftpack:
  1062                           	opt stack 0
  1063  000001                     ?_frexp:
  1064                           	opt stack 0
  1065  000001                     ?___ftneg:
  1066                           	opt stack 0
  1067  000001                     i2lcdNibble@temp:
  1068                           	opt stack 0
  1069  000001                     servo_rotate@degree:
  1070                           	opt stack 0
  1071  000001                     ___awdiv@dividend:
  1072                           	opt stack 0
  1073  000001                     i2___wmul@multiplier:
  1074                           	opt stack 0
  1075  000001                     i2___lwdiv@dividend:
  1076                           	opt stack 0
  1077  000001                     ___ftpack@arg:
  1078                           	opt stack 0
  1079  000001                     ___ftge@ff1:
  1080                           	opt stack 0
  1081  000001                     ___ftneg@f1:
  1082                           	opt stack 0
  1083  000001                     frexp@value:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x0
  1087  000001                     	ds	1
  1088  000002                     i2I2C_Master_Read@a:
  1089                           	opt stack 0
  1090  000002                     i2lcdNibble@data:
  1091                           	opt stack 0
  1092  000002                     i2_isdigit$782:
  1093                           	opt stack 0
  1094  000002                     i2I2C_Master_Write@d:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x1
  1098  000002                     	ds	1
  1099  000003                     ??_servo_rotate:
  1100  000003                     i2I2C_Master_Read@temp:
  1101                           	opt stack 0
  1102  000003                     i2lcdInst@data:
  1103                           	opt stack 0
  1104  000003                     i2putch@data:
  1105                           	opt stack 0
  1106  000003                     i2isdigit@c:
  1107                           	opt stack 0
  1108  000003                     ___awdiv@divisor:
  1109                           	opt stack 0
  1110  000003                     i2___wmul@multiplicand:
  1111                           	opt stack 0
  1112  000003                     i2___lwdiv@divisor:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x2
  1116  000003                     	ds	1
  1117  000004                     read_time@i:
  1118                           	opt stack 0
  1119  000004                     ___ftpack@exp:
  1120                           	opt stack 0
  1121  000004                     frexp@eptr:
  1122                           	opt stack 0
  1123  000004                     ___ftge@ff2:
  1124                           	opt stack 0
  1125                           
  1126                           ; 3 bytes @ 0x3
  1127  000004                     	ds	1
  1128  000005                     ___awdiv@counter:
  1129                           	opt stack 0
  1130  000005                     ___ftpack@sign:
  1131                           	opt stack 0
  1132  000005                     servo_rotate@i:
  1133                           	opt stack 0
  1134  000005                     i2___wmul@product:
  1135                           	opt stack 0
  1136  000005                     i2___lwdiv@quotient:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x4
  1140  000005                     	ds	1
  1141  000006                     ??___ftpack:
  1142  000006                     ??_frexp:
  1143  000006                     ___awdiv@sign:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x5
  1147  000006                     	ds	1
  1148  000007                     ??___ftge:
  1149  000007                     i2___lwdiv@counter:
  1150                           	opt stack 0
  1151  000007                     ___awdiv@quotient:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x6
  1155  000007                     	ds	1
  1156  000008                     ?i2___lwmod:
  1157                           	opt stack 0
  1158  000008                     i2___lwmod@dividend:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x7
  1162  000008                     	ds	1
  1163  000009                     ?___ftdiv:
  1164                           	opt stack 0
  1165  000009                     ?___awtoft:
  1166                           	opt stack 0
  1167  000009                     ?___lltoft:
  1168                           	opt stack 0
  1169  000009                     ___awtoft@c:
  1170                           	opt stack 0
  1171  000009                     ___ftdiv@f1:
  1172                           	opt stack 0
  1173  000009                     ___lltoft@c:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x8
  1177  000009                     	ds	1
  1178  00000A                     i2___lwmod@divisor:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x9
  1182  00000A                     	ds	2
  1183  00000C                     ___awtoft@sign:
  1184                           	opt stack 0
  1185  00000C                     i2___lwmod@counter:
  1186                           	opt stack 0
  1187  00000C                     ___ftdiv@f2:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0xB
  1191  00000C                     	ds	1
  1192  00000D                     ??___lltoft:
  1193  00000D                     ?i2_printf:
  1194                           	opt stack 0
  1195  00000D                     ?___ftmul:
  1196                           	opt stack 0
  1197  00000D                     i2printf@f:
  1198                           	opt stack 0
  1199  00000D                     ___ftmul@f1:
  1200                           	opt stack 0
  1201                           
  1202                           ; 3 bytes @ 0xC
  1203  00000D                     	ds	2
  1204  00000F                     ??___ftdiv:
  1205                           
  1206                           ; 1 bytes @ 0xE
  1207  00000F                     	ds	1
  1208  000010                     ___ftmul@f2:
  1209                           	opt stack 0
  1210                           
  1211                           ; 3 bytes @ 0xF
  1212  000010                     	ds	1
  1213  000011                     ??i2_printf:
  1214  000011                     ___lltoft@exp:
  1215                           	opt stack 0
  1216                           
  1217                           ; 1 bytes @ 0x10
  1218  000011                     	ds	1
  1219  000012                     ___ftdiv@cntr:
  1220                           	opt stack 0
  1221                           
  1222                           ; 1 bytes @ 0x11
  1223  000012                     	ds	1
  1224  000013                     ??___ftmul:
  1225  000013                     ___ftdiv@f3:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0x12
  1229  000013                     	ds	2
  1230  000015                     i2printf@idx:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x14
  1234  000015                     	ds	1
  1235  000016                     ___ftdiv@exp:
  1236                           	opt stack 0
  1237  000016                     ___ftmul@exp:
  1238                           	opt stack 0
  1239  000016                     i2printf@ap:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x15
  1243  000016                     	ds	1
  1244  000017                     ___ftdiv@sign:
  1245                           	opt stack 0
  1246  000017                     ___ftmul@f3_as_product:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x16
  1250  000017                     	ds	1
  1251  000018                     i2printf@prec:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x17
  1255  000018                     	ds	1
  1256  000019                     i2printf@val:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x18
  1260  000019                     	ds	1
  1261  00001A                     ___ftmul@cntr:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x19
  1265  00001A                     	ds	1
  1266  00001B                     ___ftmul@sign:
  1267                           	opt stack 0
  1268  00001B                     i2printf@flag:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x1A
  1272  00001B                     	ds	1
  1273  00001C                     ?___ftadd:
  1274                           	opt stack 0
  1275  00001C                     i2printf@width:
  1276                           	opt stack 0
  1277  00001C                     ___ftadd@f1:
  1278                           	opt stack 0
  1279                           
  1280                           ; 3 bytes @ 0x1B
  1281  00001C                     	ds	2
  1282  00001E                     i2printf@c:
  1283                           	opt stack 0
  1284                           
  1285                           ; 1 bytes @ 0x1D
  1286  00001E                     	ds	1
  1287  00001F                     ??_read_colorsensor:
  1288  00001F                     ___ftadd@f2:
  1289                           	opt stack 0
  1290                           
  1291                           ; 3 bytes @ 0x1E
  1292  00001F                     	ds	2
  1293  000021                     read_colorsensor@c_clear_l:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x20
  1297  000021                     	ds	1
  1298  000022                     ??___ftadd:
  1299                           
  1300                           ; 1 bytes @ 0x21
  1301  000022                     	ds	1
  1302  000023                     read_colorsensor@c_clear_h:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x22
  1306  000023                     	ds	2
  1307  000025                     ___ftadd@sign:
  1308                           	opt stack 0
  1309                           
  1310                           ; 1 bytes @ 0x24
  1311  000025                     	ds	1
  1312  000026                     ___ftadd@exp2:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x25
  1316  000026                     	ds	1
  1317  000027                     ___ftadd@exp1:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x26
  1321  000027                     	ds	1
  1322  000028                     ?___ftsub:
  1323                           	opt stack 0
  1324  000028                     ?_eval_poly:
  1325                           	opt stack 0
  1326  000028                     ?___fttol:
  1327                           	opt stack 0
  1328  000028                     ___ftsub@f1:
  1329                           	opt stack 0
  1330  000028                     ___fttol@f1:
  1331                           	opt stack 0
  1332  000028                     eval_poly@x:
  1333                           	opt stack 0
  1334                           
  1335                           ; 3 bytes @ 0x27
  1336  000028                     	ds	3
  1337  00002B                     eval_poly@d:
  1338                           	opt stack 0
  1339  00002B                     ___ftsub@f2:
  1340                           	opt stack 0
  1341                           
  1342                           ; 3 bytes @ 0x2A
  1343  00002B                     	ds	1
  1344  00002C                     ??___fttol:
  1345                           
  1346                           ; 1 bytes @ 0x2B
  1347  00002C                     	ds	1
  1348  00002D                     eval_poly@n:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0x2C
  1352  00002D                     	ds	1
  1353  00002E                     
  1354                           ; 1 bytes @ 0x2D
  1355  00002E                     	ds	1
  1356  00002F                     ??_eval_poly:
  1357                           
  1358                           ; 1 bytes @ 0x2E
  1359  00002F                     	ds	2
  1360  000031                     ___fttol@sign1:
  1361                           	opt stack 0
  1362  000031                     eval_poly@res:
  1363                           	opt stack 0
  1364                           
  1365                           ; 3 bytes @ 0x30
  1366  000031                     	ds	1
  1367  000032                     ___fttol@lval:
  1368                           	opt stack 0
  1369                           
  1370                           ; 4 bytes @ 0x31
  1371  000032                     	ds	2
  1372  000034                     ?_log:
  1373                           	opt stack 0
  1374  000034                     ?_ldexp:
  1375                           	opt stack 0
  1376  000034                     ldexp@value:
  1377                           	opt stack 0
  1378  000034                     log@x:
  1379                           	opt stack 0
  1380                           
  1381                           ; 3 bytes @ 0x33
  1382  000034                     	ds	2
  1383  000036                     ___fttol@exp1:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x35
  1387  000036                     	ds	1
  1388  000037                     ?___altoft:
  1389                           	opt stack 0
  1390  000037                     ldexp@newexp:
  1391                           	opt stack 0
  1392  000037                     log@exponent:
  1393                           	opt stack 0
  1394  000037                     ___altoft@c:
  1395                           	opt stack 0
  1396                           
  1397                           ; 4 bytes @ 0x36
  1398  000037                     	ds	2
  1399  000039                     ??_ldexp:
  1400                           
  1401                           ; 1 bytes @ 0x38
  1402  000039                     	ds	2
  1403  00003B                     ??___altoft:
  1404                           
  1405                           ; 1 bytes @ 0x3A
  1406  00003B                     	ds	4
  1407  00003F                     ___altoft@exp:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x3E
  1411  00003F                     	ds	1
  1412  000040                     ___altoft@sign:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x3F
  1416  000040                     	ds	1
  1417  000041                     ?_floor:
  1418                           	opt stack 0
  1419  000041                     floor@x:
  1420                           	opt stack 0
  1421                           
  1422                           ; 3 bytes @ 0x40
  1423  000041                     	ds	3
  1424  000044                     floor@i:
  1425                           	opt stack 0
  1426                           
  1427                           ; 3 bytes @ 0x43
  1428  000044                     	ds	3
  1429  000047                     floor@expon:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x46
  1433  000047                     	ds	2
  1434  000049                     ?_exp:
  1435                           	opt stack 0
  1436  000049                     exp@x:
  1437                           	opt stack 0
  1438                           
  1439                           ; 3 bytes @ 0x48
  1440  000049                     	ds	3
  1441  00004C                     _exp$1224:
  1442                           	opt stack 0
  1443                           
  1444                           ; 3 bytes @ 0x4B
  1445  00004C                     	ds	3
  1446  00004F                     exp@exponent:
  1447                           	opt stack 0
  1448                           
  1449                           ; 2 bytes @ 0x4E
  1450  00004F                     	ds	2
  1451  000051                     exp@sign:
  1452                           	opt stack 0
  1453                           
  1454                           ; 1 bytes @ 0x50
  1455  000051                     	ds	1
  1456  000052                     ?_pow:
  1457                           	opt stack 0
  1458  000052                     pow@x:
  1459                           	opt stack 0
  1460                           
  1461                           ; 3 bytes @ 0x51
  1462  000052                     	ds	3
  1463  000055                     pow@y:
  1464                           	opt stack 0
  1465                           
  1466                           ; 3 bytes @ 0x54
  1467  000055                     	ds	3
  1468  000058                     _pow$1222:
  1469                           	opt stack 0
  1470                           
  1471                           ; 3 bytes @ 0x57
  1472  000058                     	ds	3
  1473  00005B                     _pow$1223:
  1474                           	opt stack 0
  1475                           
  1476                           ; 3 bytes @ 0x5A
  1477  00005B                     	ds	3
  1478  00005E                     pow@sign:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x5D
  1482  00005E                     	ds	1
  1483  00005F                     pow@yi:
  1484                           	opt stack 0
  1485                           
  1486                           ; 4 bytes @ 0x5E
  1487  00005F                     	ds	4
  1488  000063                     ?_dec_to_hex:
  1489                           	opt stack 0
  1490  000063                     dec_to_hex@num:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x62
  1494  000063                     	ds	2
  1495  000065                     _dec_to_hex$1220:
  1496                           	opt stack 0
  1497                           
  1498                           ; 3 bytes @ 0x64
  1499  000065                     	ds	3
  1500  000068                     _dec_to_hex$1221:
  1501                           	opt stack 0
  1502                           
  1503                           ; 3 bytes @ 0x67
  1504  000068                     	ds	3
  1505  00006B                     dec_to_hex@temp:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x6A
  1509  00006B                     	ds	2
  1510  00006D                     dec_to_hex@i:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x6C
  1514  00006D                     	ds	2
  1515  00006F                     dec_to_hex@hexnum:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x6E
  1519  00006F                     	ds	2
  1520  000071                     dec_to_hex@quotient:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x70
  1524  000071                     	ds	2
  1525  000073                     _isr$1308:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x72
  1529  000073                     	ds	2
  1530  000075                     isr@i:
  1531                           	opt stack 0
  1532                           
  1533                           ; 1 bytes @ 0x74
  1534  000075                     	ds	1
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           
  1542 ;;
  1543 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1544 ;;
  1545 ;; *************** function _main *****************
  1546 ;; Defined at:
  1547 ;;		line 59 in file "main.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;		None
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;		None
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  1    wreg      void 
  1554 ;; Registers used:
  1555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1563 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1564 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1565 ;;Total ram usage:        2 bytes
  1566 ;; Hardware stack levels required when called:   11
  1567 ;; This function calls:
  1568 ;;		_I2C_Master_Init
  1569 ;;		_bottle_count
  1570 ;;		_bottle_time
  1571 ;;		_date_time
  1572 ;;		_emergencystop
  1573 ;;		_initLCD
  1574 ;;		_operation
  1575 ;;		_operationend
  1576 ;;		_standby
  1577 ;; This function is called by:
  1578 ;;		Startup code after reset
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           	psect	text0
  1583  001098                     __ptext0:
  1584                           	opt stack 0
  1585  001098                     _main:
  1586                           	opt stack 20
  1587                           
  1588                           ;main.c: 66: TRISA = 0xFF;
  1589                           
  1590                           ;incstack = 0
  1591  001098  6892               	setf	3986,c	;volatile
  1592                           
  1593                           ;main.c: 67: TRISB = 0xFF;
  1594  00109A  6893               	setf	3987,c	;volatile
  1595                           
  1596                           ;main.c: 68: TRISC = 0b00011000;
  1597  00109C  0E18               	movlw	24
  1598  00109E  6E94               	movwf	3988,c	;volatile
  1599                           
  1600                           ;main.c: 69: TRISD = 0x00;
  1601  0010A0  0E00               	movlw	0
  1602  0010A2  6E95               	movwf	3989,c	;volatile
  1603                           
  1604                           ;main.c: 70: TRISE = 0x00;
  1605  0010A4  0E00               	movlw	0
  1606  0010A6  6E96               	movwf	3990,c	;volatile
  1607                           
  1608                           ;main.c: 72: LATA = 0x00;
  1609  0010A8  0E00               	movlw	0
  1610  0010AA  6E89               	movwf	3977,c	;volatile
  1611                           
  1612                           ;main.c: 73: LATB = 0x00;
  1613  0010AC  0E00               	movlw	0
  1614  0010AE  6E8A               	movwf	3978,c	;volatile
  1615                           
  1616                           ;main.c: 74: LATC = 0x00;
  1617  0010B0  0E00               	movlw	0
  1618  0010B2  6E8B               	movwf	3979,c	;volatile
  1619                           
  1620                           ;main.c: 75: LATD = 0x00;
  1621  0010B4  0E00               	movlw	0
  1622  0010B6  6E8C               	movwf	3980,c	;volatile
  1623                           
  1624                           ;main.c: 76: LATE = 0x00;
  1625  0010B8  0E00               	movlw	0
  1626  0010BA  6E8D               	movwf	3981,c	;volatile
  1627                           
  1628                           ;main.c: 78: ADCON0 = 0x00;
  1629  0010BC  0E00               	movlw	0
  1630  0010BE  6EC2               	movwf	4034,c	;volatile
  1631                           
  1632                           ;main.c: 79: ADCON1 = 0xFF;
  1633  0010C0  68C1               	setf	4033,c	;volatile
  1634                           
  1635                           ;main.c: 81: INT1IE = 1;
  1636  0010C2  86F0               	bsf	intcon3,3,c	;volatile
  1637                           
  1638                           ;main.c: 83: nRBPU = 0;
  1639  0010C4  9EF1               	bcf	intcon2,7,c	;volatile
  1640                           
  1641                           ;main.c: 85: initLCD();
  1642  0010C6  ECC4  F010         	call	_initLCD	;wreg free
  1643                           
  1644                           ;main.c: 86: I2C_Master_Init(10000);
  1645  0010CA  0E10               	movlw	16
  1646  0010CC  0100               	movlb	0	; () banked
  1647  0010CE  6F9D               	movwf	I2C_Master_Init@c& (0+255),b
  1648  0010D0  0E27               	movlw	39
  1649  0010D2  6F9E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1650  0010D4  0E00               	movlw	0
  1651  0010D6  6F9F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1652  0010D8  0E00               	movlw	0
  1653  0010DA  6FA0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1654  0010DC  EC3D  F010         	call	_I2C_Master_Init	;wreg free
  1655                           
  1656                           ;main.c: 89: TMR0 = 0;
  1657  0010E0  0E00               	movlw	0
  1658  0010E2  6ED7               	movwf	4055,c	;volatile
  1659  0010E4  0E00               	movlw	0
  1660  0010E6  6ED6               	movwf	4054,c	;volatile
  1661                           
  1662                           ;main.c: 90: T08BIT = 0;
  1663  0010E8  9CD5               	bcf	4053,6,c	;volatile
  1664                           
  1665                           ;main.c: 91: T0CS = 0;
  1666  0010EA  9AD5               	bcf	4053,5,c	;volatile
  1667                           
  1668                           ;main.c: 92: PSA = 0;
  1669  0010EC  96D5               	bcf	4053,3,c	;volatile
  1670                           
  1671                           ;main.c: 93: T0PS2 = 1;
  1672  0010EE  84D5               	bsf	4053,2,c	;volatile
  1673                           
  1674                           ;main.c: 94: T0PS1 = 1;
  1675  0010F0  82D5               	bsf	4053,1,c	;volatile
  1676                           
  1677                           ;main.c: 95: T0PS0 = 1;
  1678  0010F2  80D5               	bsf	4053,0,c	;volatile
  1679                           
  1680                           ;main.c: 99: (INTCONbits.GIE = 1);
  1681  0010F4  8EF2               	bsf	intcon,7,c	;volatile
  1682                           
  1683                           ;main.c: 101: curr_state = STANDBY;
  1684  0010F6  0E00               	movlw	0
  1685  0010F8  0100               	movlb	0	; () banked
  1686  0010FA  6FC3               	movwf	_curr_state& (0+255),b
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;main.c: 104: switch(curr_state){
  1690                           
  1691                           ;main.c: 103: while(1){
  1692  0010FC  D02A               	goto	l4055
  1693  0010FE                     l4039:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;main.c: 106: standby();
  1697  0010FE  EC8F  F011         	call	_standby	;wreg free
  1698                           
  1699                           ;main.c: 107: break;
  1700  001102  D03E               	goto	l4057
  1701  001104                     l4041:
  1702                           
  1703                           ;main.c: 109: emergencystop();
  1704  001104  EC53  F012         	call	_emergencystop	;wreg free
  1705                           
  1706                           ;main.c: 110: break;
  1707  001108  D03B               	goto	l4057
  1708  00110A                     l4043:
  1709                           
  1710                           ;main.c: 112: operation();
  1711  00110A  EC15  F00E         	call	_operation	;wreg free
  1712                           
  1713                           ;main.c: 113: break;
  1714  00110E  D038               	goto	l4057
  1715  001110                     l4045:
  1716                           
  1717                           ;main.c: 115: operationend();
  1718  001110  EC60  F012         	call	_operationend	;wreg free
  1719                           
  1720                           ;main.c: 116: break;
  1721  001114  D035               	goto	l4057
  1722  001116                     l4047:
  1723                           
  1724                           ;main.c: 118: date_time();
  1725  001116  EC23  F00B         	call	_date_time	;wreg free
  1726                           
  1727                           ;main.c: 119: break;
  1728  00111A  D032               	goto	l4057
  1729  00111C                     l4049:
  1730                           
  1731                           ;main.c: 121: bottle_count();
  1732  00111C  EC19  F007         	call	_bottle_count	;wreg free
  1733                           
  1734                           ;main.c: 122: break;
  1735  001120  D02F               	goto	l4057
  1736  001122                     l4051:
  1737                           
  1738                           ;main.c: 124: bottle_time(etime - stime);
  1739  001122  C0C1  F0B4         	movff	_stime,??_main
  1740  001126  C0C2  F0B5         	movff	_stime+1,??_main+1
  1741  00112A  0100               	movlb	0	; () banked
  1742  00112C  1FB4               	comf	??_main& (0+255),f,b
  1743  00112E  1FB5               	comf	(??_main+1)& (0+255),f,b
  1744  001130  4BB4               	infsnz	??_main& (0+255),f,b
  1745  001132  2BB5               	incf	(??_main+1)& (0+255),f,b
  1746  001134  0100               	movlb	0	; () banked
  1747  001136  51BD               	movf	_etime& (0+255),w,b
  1748  001138  0100               	movlb	0	; () banked
  1749  00113A  25B4               	addwf	??_main& (0+255),w,b
  1750  00113C  0100               	movlb	0	; () banked
  1751  00113E  6FB2               	movwf	bottle_time@time& (0+255),b
  1752  001140  0100               	movlb	0	; () banked
  1753  001142  51BE               	movf	(_etime+1)& (0+255),w,b
  1754  001144  0100               	movlb	0	; () banked
  1755  001146  21B5               	addwfc	(??_main+1)& (0+255),w,b
  1756  001148  0100               	movlb	0	; () banked
  1757  00114A  6FB3               	movwf	(bottle_time@time+1)& (0+255),b
  1758  00114C  ECAA  F011         	call	_bottle_time	;wreg free
  1759                           
  1760                           ;main.c: 126: }
  1761                           
  1762                           ;main.c: 125: break;
  1763  001150  D017               	goto	l4057
  1764  001152                     l4055:
  1765  001152  0100               	movlb	0	; () banked
  1766  001154  51C3               	movf	_curr_state& (0+255),w,b
  1767                           
  1768                           ; Switch size 1, requested type "space"
  1769                           ; Number of cases is 7, Range of values is 0 to 6
  1770                           ; switch strategies available:
  1771                           ; Name         Instructions Cycles
  1772                           ; simple_byte           22    12 (average)
  1773                           ;	Chosen strategy is simple_byte
  1774  001156  0A00               	xorlw	0	; case 0
  1775  001158  B4D8               	btfsc	status,2,c
  1776  00115A  D7D1               	goto	l4039
  1777  00115C  0A01               	xorlw	1	; case 1
  1778  00115E  B4D8               	btfsc	status,2,c
  1779  001160  D7D1               	goto	l4041
  1780  001162  0A03               	xorlw	3	; case 2
  1781  001164  B4D8               	btfsc	status,2,c
  1782  001166  D7D1               	goto	l4043
  1783  001168  0A01               	xorlw	1	; case 3
  1784  00116A  B4D8               	btfsc	status,2,c
  1785  00116C  D7D1               	goto	l4045
  1786  00116E  0A07               	xorlw	7	; case 4
  1787  001170  B4D8               	btfsc	status,2,c
  1788  001172  D7D1               	goto	l4047
  1789  001174  0A01               	xorlw	1	; case 5
  1790  001176  B4D8               	btfsc	status,2,c
  1791  001178  D7D1               	goto	l4049
  1792  00117A  0A03               	xorlw	3	; case 6
  1793  00117C  B4D8               	btfsc	status,2,c
  1794  00117E  D7D1               	goto	l4051
  1795  001180                     l4057:
  1796                           
  1797                           ;main.c: 127: _delay((unsigned long)((200)*(10000000/4000.0)));
  1798  001180  0E03               	movlw	3
  1799  001182  0100               	movlb	0	; () banked
  1800  001184  6FB5               	movwf	(??_main+1)& (0+255),b
  1801  001186  0E8A               	movlw	138
  1802  001188  0100               	movlb	0	; () banked
  1803  00118A  6FB4               	movwf	??_main& (0+255),b
  1804  00118C  0E55               	movlw	85
  1805  00118E                     u3787:
  1806  00118E  2EE8               	decfsz	wreg,f,c
  1807  001190  D7FE               	bra	u3787
  1808  001192  2FB4               	decfsz	??_main& (0+255),f,b
  1809  001194  D7FC               	bra	u3787
  1810  001196  2FB5               	decfsz	(??_main+1)& (0+255),f,b
  1811  001198  D7FA               	bra	u3787
  1812  00119A  D000               	nop2	
  1813  00119C  D7DA               	goto	l4055
  1814  00119E                     __end_of_main:
  1815                           	opt stack 0
  1816                           tblptru	equ	0xFF8
  1817                           tblptrh	equ	0xFF7
  1818                           tblptrl	equ	0xFF6
  1819                           tablat	equ	0xFF5
  1820                           intcon	equ	0xFF2
  1821                           intcon2	equ	0xFF1
  1822                           intcon3	equ	0xFF0
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           status	equ	0xFD8
  1826                           
  1827 ;; *************** function _standby *****************
  1828 ;; Defined at:
  1829 ;;		line 212 in file "main.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      void 
  1836 ;; Registers used:
  1837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;Total ram usage:        0 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:   10
  1850 ;; This function calls:
  1851 ;;		_lcdInst
  1852 ;;		_printf
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text1
  1859  00231E                     __ptext1:
  1860                           	opt stack 0
  1861  00231E                     _standby:
  1862                           	opt stack 20
  1863                           
  1864                           ;main.c: 213: lcdInst(0b10000000);
  1865                           
  1866                           ;incstack = 0
  1867  00231E  0E80               	movlw	128
  1868  002320  EC87  F012         	call	_lcdInst
  1869                           
  1870                           ;main.c: 214: printf("standby         ");
  1871  002324  0EF2               	movlw	low STR_2
  1872  002326  0100               	movlb	0	; () banked
  1873  002328  6F9C               	movwf	printf@f& (0+255),b
  1874  00232A  0EFE               	movlw	high STR_2
  1875  00232C  0100               	movlb	0	; () banked
  1876  00232E  6F9D               	movwf	(printf@f+1)& (0+255),b
  1877  002330  EC09  F000         	call	_printf	;wreg free
  1878                           
  1879                           ;main.c: 215: lcdInst(0b11000000);
  1880  002334  0EC0               	movlw	192
  1881  002336  EC87  F012         	call	_lcdInst
  1882                           
  1883                           ;main.c: 216: printf("PORTB: %d", PORTB);
  1884  00233A  0EEA               	movlw	low STR_3
  1885  00233C  0100               	movlb	0	; () banked
  1886  00233E  6F9C               	movwf	printf@f& (0+255),b
  1887  002340  0EFF               	movlw	high STR_3
  1888  002342  0100               	movlb	0	; () banked
  1889  002344  6F9D               	movwf	(printf@f+1)& (0+255),b
  1890  002346  CF81 F09E          	movff	3969,?_printf+2	;volatile
  1891  00234A  0100               	movlb	0	; () banked
  1892  00234C  6B9F               	clrf	(?_printf+3)& (0+255),b
  1893  00234E  EC09  F000         	call	_printf	;wreg free
  1894  002352  0012               	return	
  1895  002354                     __end_of_standby:
  1896                           	opt stack 0
  1897                           tblptru	equ	0xFF8
  1898                           tblptrh	equ	0xFF7
  1899                           tblptrl	equ	0xFF6
  1900                           tablat	equ	0xFF5
  1901                           intcon	equ	0xFF2
  1902                           intcon2	equ	0xFF1
  1903                           intcon3	equ	0xFF0
  1904                           postinc0	equ	0xFEE
  1905                           wreg	equ	0xFE8
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function _operationend *****************
  1909 ;; Defined at:
  1910 ;;		line 358 in file "main.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      void 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;Total ram usage:        0 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:   10
  1931 ;; This function calls:
  1932 ;;		_lcdInst
  1933 ;;		_printf
  1934 ;; This function is called by:
  1935 ;;		_main
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text2
  1940  0024C0                     __ptext2:
  1941                           	opt stack 0
  1942  0024C0                     _operationend:
  1943                           	opt stack 20
  1944                           
  1945                           ;main.c: 359: lcdInst(0b10000000);
  1946                           
  1947                           ;incstack = 0
  1948  0024C0  0E80               	movlw	128
  1949  0024C2  EC87  F012         	call	_lcdInst
  1950                           
  1951                           ;main.c: 360: printf("Operation Done!");
  1952  0024C6  0EBD               	movlw	low STR_22
  1953  0024C8  0100               	movlb	0	; () banked
  1954  0024CA  6F9C               	movwf	printf@f& (0+255),b
  1955  0024CC  0EFF               	movlw	high STR_22
  1956  0024CE  0100               	movlb	0	; () banked
  1957  0024D0  6F9D               	movwf	(printf@f+1)& (0+255),b
  1958  0024D2  EC09  F000         	call	_printf	;wreg free
  1959  0024D6  0012               	return	
  1960  0024D8                     __end_of_operationend:
  1961                           	opt stack 0
  1962                           tblptru	equ	0xFF8
  1963                           tblptrh	equ	0xFF7
  1964                           tblptrl	equ	0xFF6
  1965                           tablat	equ	0xFF5
  1966                           intcon	equ	0xFF2
  1967                           intcon2	equ	0xFF1
  1968                           intcon3	equ	0xFF0
  1969                           postinc0	equ	0xFEE
  1970                           wreg	equ	0xFE8
  1971                           status	equ	0xFD8
  1972                           
  1973 ;; *************** function _operation *****************
  1974 ;; Defined at:
  1975 ;;		line 337 in file "main.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;		None
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;Total ram usage:        2 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:   10
  1996 ;; This function calls:
  1997 ;;		_lcdInst
  1998 ;;		_printf
  1999 ;; This function is called by:
  2000 ;;		_main
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	text3
  2005  001C2A                     __ptext3:
  2006                           	opt stack 0
  2007  001C2A                     _operation:
  2008                           	opt stack 20
  2009                           
  2010                           ;main.c: 338: switch(operation_disp){
  2011                           
  2012                           ;incstack = 0
  2013  001C2A  D033               	goto	l3839
  2014  001C2C                     l3819:
  2015                           
  2016                           ;main.c: 340: lcdInst(0b10000000);
  2017  001C2C  0E80               	movlw	128
  2018  001C2E  EC87  F012         	call	_lcdInst
  2019                           
  2020                           ;main.c: 341: printf("Running~              ");
  2021  001C32  0E73               	movlw	low STR_19
  2022  001C34  0100               	movlb	0	; () banked
  2023  001C36  6F9C               	movwf	printf@f& (0+255),b
  2024  001C38  0EFE               	movlw	high STR_19
  2025  001C3A  0100               	movlb	0	; () banked
  2026  001C3C  6F9D               	movwf	(printf@f+1)& (0+255),b
  2027  001C3E  EC09  F000         	call	_printf	;wreg free
  2028                           
  2029                           ;main.c: 342: operation_disp = 1;
  2030  001C42  0E00               	movlw	0
  2031  001C44  0100               	movlb	0	; () banked
  2032  001C46  6FC0               	movwf	(_operation_disp+1)& (0+255),b
  2033  001C48  0E01               	movlw	1
  2034  001C4A  6FBF               	movwf	_operation_disp& (0+255),b
  2035                           
  2036                           ;main.c: 343: break;
  2037  001C4C  0012               	return	
  2038  001C4E                     l3825:
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;main.c: 345: lcdInst(0b10000000);
  2042  001C4E  0E80               	movlw	128
  2043  001C50  EC87  F012         	call	_lcdInst
  2044                           
  2045                           ;main.c: 346: printf("Running~~              ");
  2046  001C54  0E5B               	movlw	low STR_20
  2047  001C56  0100               	movlb	0	; () banked
  2048  001C58  6F9C               	movwf	printf@f& (0+255),b
  2049  001C5A  0EFE               	movlw	high STR_20
  2050  001C5C  0100               	movlb	0	; () banked
  2051  001C5E  6F9D               	movwf	(printf@f+1)& (0+255),b
  2052  001C60  EC09  F000         	call	_printf	;wreg free
  2053                           
  2054                           ;main.c: 347: operation_disp = 2;
  2055  001C64  0E00               	movlw	0
  2056  001C66  0100               	movlb	0	; () banked
  2057  001C68  6FC0               	movwf	(_operation_disp+1)& (0+255),b
  2058  001C6A  0E02               	movlw	2
  2059  001C6C  6FBF               	movwf	_operation_disp& (0+255),b
  2060                           
  2061                           ;main.c: 348: break;
  2062  001C6E  0012               	return	
  2063  001C70                     l3831:
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;main.c: 350: lcdInst(0b10000000);
  2067  001C70  0E80               	movlw	128
  2068  001C72  EC87  F012         	call	_lcdInst
  2069                           
  2070                           ;main.c: 351: printf("Running~~~              ");
  2071  001C76  0E42               	movlw	low STR_21
  2072  001C78  0100               	movlb	0	; () banked
  2073  001C7A  6F9C               	movwf	printf@f& (0+255),b
  2074  001C7C  0EFE               	movlw	high STR_21
  2075  001C7E  0100               	movlb	0	; () banked
  2076  001C80  6F9D               	movwf	(printf@f+1)& (0+255),b
  2077  001C82  EC09  F000         	call	_printf	;wreg free
  2078                           
  2079                           ;main.c: 352: operation_disp = 0;
  2080  001C86  0E00               	movlw	0
  2081  001C88  0100               	movlb	0	; () banked
  2082  001C8A  6FC0               	movwf	(_operation_disp+1)& (0+255),b
  2083  001C8C  0E00               	movlw	0
  2084  001C8E  6FBF               	movwf	_operation_disp& (0+255),b
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;main.c: 354: }
  2088                           
  2089                           ;main.c: 353: break;
  2090  001C90  0012               	return	
  2091  001C92                     l3839:
  2092  001C92  C0BF  F0B2         	movff	_operation_disp,??_operation
  2093  001C96  C0C0  F0B3         	movff	_operation_disp+1,??_operation+1
  2094                           
  2095                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2096                           ; Switch size 1, requested type "space"
  2097                           ; Number of cases is 1, Range of values is 0 to 0
  2098                           ; switch strategies available:
  2099                           ; Name         Instructions Cycles
  2100                           ; simple_byte            4     3 (average)
  2101                           ;	Chosen strategy is simple_byte
  2102  001C9A  0100               	movlb	0	; () banked
  2103  001C9C  51B3               	movf	(??_operation+1)& (0+255),w,b
  2104  001C9E  0A00               	xorlw	0	; case 0
  2105  001CA0  A4D8               	btfss	status,2,c
  2106  001CA2  0012               	return	
  2107                           
  2108                           ; BSR set to: 0
  2109                           ; Switch size 1, requested type "space"
  2110                           ; Number of cases is 3, Range of values is 0 to 2
  2111                           ; switch strategies available:
  2112                           ; Name         Instructions Cycles
  2113                           ; simple_byte           10     6 (average)
  2114                           ;	Chosen strategy is simple_byte
  2115  001CA4  0100               	movlb	0	; () banked
  2116  001CA6  51B2               	movf	??_operation& (0+255),w,b
  2117  001CA8  0A00               	xorlw	0	; case 0
  2118  001CAA  B4D8               	btfsc	status,2,c
  2119  001CAC  D7BF               	goto	l3819
  2120  001CAE  0A01               	xorlw	1	; case 1
  2121  001CB0  B4D8               	btfsc	status,2,c
  2122  001CB2  D7CD               	goto	l3825
  2123  001CB4  0A03               	xorlw	3	; case 2
  2124  001CB6  A4D8               	btfss	status,2,c
  2125  001CB8  0012               	return	
  2126  001CBA  D7DA               	goto	l3831
  2127  001CBC                     __end_of_operation:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           intcon	equ	0xFF2
  2134                           intcon2	equ	0xFF1
  2135                           intcon3	equ	0xFF0
  2136                           postinc0	equ	0xFEE
  2137                           wreg	equ	0xFE8
  2138                           status	equ	0xFD8
  2139                           
  2140 ;; *************** function _initLCD *****************
  2141 ;; Defined at:
  2142 ;;		line 14 in file "lcd.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;		None
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;		None
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, status,0, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2160 ;;Total ram usage:        1 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    9
  2163 ;; This function calls:
  2164 ;;		_lcdInst
  2165 ;; This function is called by:
  2166 ;;		_main
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           	psect	text4
  2171  002188                     __ptext4:
  2172                           	opt stack 0
  2173  002188                     _initLCD:
  2174                           	opt stack 21
  2175                           
  2176                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;incstack = 0
  2180  002188  0E31               	movlw	49
  2181  00218A  0100               	movlb	0	; () banked
  2182  00218C  6F93               	movwf	??_initLCD& (0+255),b
  2183  00218E  0EB2               	movlw	178
  2184  002190                     u3797:
  2185  002190  2EE8               	decfsz	wreg,f,c
  2186  002192  D7FE               	bra	u3797
  2187  002194  2F93               	decfsz	??_initLCD& (0+255),f,b
  2188  002196  D7FC               	bra	u3797
  2189  002198  F000               	nop	
  2190                           
  2191                           ;lcd.c: 16: lcdInst(0b00110011);
  2192  00219A  0E33               	movlw	51
  2193  00219C  EC87  F012         	call	_lcdInst
  2194                           
  2195                           ;lcd.c: 17: lcdInst(0b00110011);
  2196  0021A0  0E33               	movlw	51
  2197  0021A2  EC87  F012         	call	_lcdInst
  2198                           
  2199                           ;lcd.c: 18: lcdInst(0b00110010);
  2200  0021A6  0E32               	movlw	50
  2201  0021A8  EC87  F012         	call	_lcdInst
  2202                           
  2203                           ;lcd.c: 19: lcdInst(0b00101000);
  2204  0021AC  0E28               	movlw	40
  2205  0021AE  EC87  F012         	call	_lcdInst
  2206                           
  2207                           ;lcd.c: 20: lcdInst(0b00001111);
  2208  0021B2  0E0F               	movlw	15
  2209  0021B4  EC87  F012         	call	_lcdInst
  2210                           
  2211                           ;lcd.c: 21: lcdInst(0b00000110);
  2212  0021B8  0E06               	movlw	6
  2213  0021BA  EC87  F012         	call	_lcdInst
  2214                           
  2215                           ;lcd.c: 22: lcdInst(0b00000001);
  2216  0021BE  0E01               	movlw	1
  2217  0021C0  EC87  F012         	call	_lcdInst
  2218                           
  2219                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2220  0021C4  0E31               	movlw	49
  2221  0021C6  0100               	movlb	0	; () banked
  2222  0021C8  6F93               	movwf	??_initLCD& (0+255),b
  2223  0021CA  0EB2               	movlw	178
  2224  0021CC                     u3807:
  2225  0021CC  2EE8               	decfsz	wreg,f,c
  2226  0021CE  D7FE               	bra	u3807
  2227  0021D0  2F93               	decfsz	??_initLCD& (0+255),f,b
  2228  0021D2  D7FC               	bra	u3807
  2229  0021D4  F000               	nop	
  2230  0021D6  0012               	return		;funcret
  2231  0021D8                     __end_of_initLCD:
  2232                           	opt stack 0
  2233                           tblptru	equ	0xFF8
  2234                           tblptrh	equ	0xFF7
  2235                           tblptrl	equ	0xFF6
  2236                           tablat	equ	0xFF5
  2237                           intcon	equ	0xFF2
  2238                           intcon2	equ	0xFF1
  2239                           intcon3	equ	0xFF0
  2240                           postinc0	equ	0xFEE
  2241                           wreg	equ	0xFE8
  2242                           status	equ	0xFD8
  2243                           
  2244 ;; *************** function _emergencystop *****************
  2245 ;; Defined at:
  2246 ;;		line 364 in file "main.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;		None
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;		None
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      void 
  2253 ;; Registers used:
  2254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;Total ram usage:        0 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:   10
  2267 ;; This function calls:
  2268 ;;		_lcdInst
  2269 ;;		_printf
  2270 ;; This function is called by:
  2271 ;;		_main
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text5
  2276  0024A6                     __ptext5:
  2277                           	opt stack 0
  2278  0024A6                     _emergencystop:
  2279                           	opt stack 20
  2280                           
  2281                           ;main.c: 365: lcdInst(0b10000000);
  2282                           
  2283                           ;incstack = 0
  2284  0024A6  0E80               	movlw	128
  2285  0024A8  EC87  F012         	call	_lcdInst
  2286                           
  2287                           ;main.c: 366: printf("EMERGENCY STOP");
  2288  0024AC  0ECD               	movlw	low STR_23
  2289  0024AE  0100               	movlb	0	; () banked
  2290  0024B0  6F9C               	movwf	printf@f& (0+255),b
  2291  0024B2  0EFF               	movlw	high STR_23
  2292  0024B4  0100               	movlb	0	; () banked
  2293  0024B6  6F9D               	movwf	(printf@f+1)& (0+255),b
  2294  0024B8  EC09  F000         	call	_printf	;wreg free
  2295                           
  2296                           ;main.c: 367: (INTCONbits.GIE = 0);
  2297  0024BC  9EF2               	bcf	intcon,7,c	;volatile
  2298  0024BE                     l299:
  2299  0024BE  D7FF               	goto	l299
  2300  0024C0                     __end_of_emergencystop:
  2301                           	opt stack 0
  2302                           tblptru	equ	0xFF8
  2303                           tblptrh	equ	0xFF7
  2304                           tblptrl	equ	0xFF6
  2305                           tablat	equ	0xFF5
  2306                           intcon	equ	0xFF2
  2307                           intcon2	equ	0xFF1
  2308                           intcon3	equ	0xFF0
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _date_time *****************
  2314 ;; Defined at:
  2315 ;;		line 244 in file "main.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;		None
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  i               1   50[BANK0 ] unsigned char 
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  1    wreg      void 
  2322 ;; Registers used:
  2323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;Total ram usage:        1 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:   10
  2336 ;; This function calls:
  2337 ;;		_I2C_Master_Read
  2338 ;;		_I2C_Master_Start
  2339 ;;		_I2C_Master_Stop
  2340 ;;		_I2C_Master_Write
  2341 ;;		_lcdInst
  2342 ;;		_printf
  2343 ;; This function is called by:
  2344 ;;		_main
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text6
  2349  001646                     __ptext6:
  2350                           	opt stack 0
  2351  001646                     _date_time:
  2352                           	opt stack 20
  2353                           
  2354                           ;main.c: 246: I2C_Master_Start();
  2355                           
  2356                           ;incstack = 0
  2357  001646  ECA9  F012         	call	_I2C_Master_Start	;wreg free
  2358                           
  2359                           ;main.c: 247: I2C_Master_Write(0b11010000);
  2360  00164A  0E00               	movlw	0
  2361  00164C  0100               	movlb	0	; () banked
  2362  00164E  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2363  001650  0ED0               	movlw	208
  2364  001652  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2365  001654  EC9B  F012         	call	_I2C_Master_Write	;wreg free
  2366                           
  2367                           ;main.c: 248: I2C_Master_Write(0x00);
  2368  001658  0E00               	movlw	0
  2369  00165A  0100               	movlb	0	; () banked
  2370  00165C  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2371  00165E  0E00               	movlw	0
  2372  001660  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2373  001662  EC9B  F012         	call	_I2C_Master_Write	;wreg free
  2374                           
  2375                           ;main.c: 249: I2C_Master_Stop();
  2376  001666  ECA5  F012         	call	_I2C_Master_Stop	;wreg free
  2377                           
  2378                           ;main.c: 252: I2C_Master_Start();
  2379  00166A  ECA9  F012         	call	_I2C_Master_Start	;wreg free
  2380                           
  2381                           ;main.c: 253: I2C_Master_Write(0b11010001);
  2382  00166E  0E00               	movlw	0
  2383  001670  0100               	movlb	0	; () banked
  2384  001672  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2385  001674  0ED1               	movlw	209
  2386  001676  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2387  001678  EC9B  F012         	call	_I2C_Master_Write	;wreg free
  2388                           
  2389                           ;main.c: 254: for(unsigned char i=0;i<0x06;i++){
  2390  00167C  0E00               	movlw	0
  2391  00167E  0100               	movlb	0	; () banked
  2392  001680  6FB2               	movwf	date_time@i& (0+255),b
  2393  001682                     l3855:
  2394                           
  2395                           ; BSR set to: 0
  2396  001682  0E05               	movlw	5
  2397  001684  0100               	movlb	0	; () banked
  2398  001686  65B2               	cpfsgt	date_time@i& (0+255),b
  2399  001688  D001               	goto	l3859
  2400  00168A  D010               	goto	l3865
  2401  00168C                     l3859:
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;main.c: 255: time[i] = I2C_Master_Read(1);
  2405  00168C  0100               	movlb	0	; () banked
  2406  00168E  51B2               	movf	date_time@i& (0+255),w,b
  2407  001690  0D01               	mullw	1
  2408  001692  0EB6               	movlw	low _time
  2409  001694  24F3               	addwf	prodl,w,c
  2410  001696  6ED9               	movwf	fsr2l,c
  2411  001698  0E00               	movlw	high _time
  2412  00169A  20F4               	addwfc	prodh,w,c
  2413  00169C  6EDA               	movwf	fsr2h,c
  2414  00169E  0E01               	movlw	1
  2415  0016A0  ECE0  F011         	call	_I2C_Master_Read
  2416  0016A4  6EDF               	movwf	indf2,c
  2417  0016A6  0100               	movlb	0	; () banked
  2418  0016A8  2BB2               	incf	date_time@i& (0+255),f,b
  2419  0016AA  D7EB               	goto	l3855
  2420  0016AC                     l3865:
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;main.c: 256: }
  2424                           ;main.c: 257: time[6] = I2C_Master_Read(0);
  2425  0016AC  0E00               	movlw	0
  2426  0016AE  ECE0  F011         	call	_I2C_Master_Read
  2427  0016B2  0100               	movlb	0	; () banked
  2428  0016B4  6FBC               	movwf	(_time+6)& (0+255),b
  2429                           
  2430                           ;main.c: 258: I2C_Master_Stop();
  2431  0016B6  ECA5  F012         	call	_I2C_Master_Stop	;wreg free
  2432                           
  2433                           ;main.c: 261: lcdInst(0b10000000);
  2434  0016BA  0E80               	movlw	128
  2435  0016BC  EC87  F012         	call	_lcdInst
  2436                           
  2437                           ;main.c: 262: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2438  0016C0  0EA1               	movlw	low STR_4
  2439  0016C2  0100               	movlb	0	; () banked
  2440  0016C4  6F9C               	movwf	printf@f& (0+255),b
  2441  0016C6  0EFE               	movlw	high STR_4
  2442  0016C8  0100               	movlb	0	; () banked
  2443  0016CA  6F9D               	movwf	(printf@f+1)& (0+255),b
  2444  0016CC  C0BB  F09E         	movff	_time+5,?_printf+2
  2445  0016D0  0100               	movlb	0	; () banked
  2446  0016D2  6B9F               	clrf	(?_printf+3)& (0+255),b
  2447  0016D4  C0BA  F0A0         	movff	_time+4,?_printf+4
  2448  0016D8  0100               	movlb	0	; () banked
  2449  0016DA  6BA1               	clrf	(?_printf+5)& (0+255),b
  2450  0016DC  C0BC  F0A2         	movff	_time+6,?_printf+6
  2451  0016E0  0100               	movlb	0	; () banked
  2452  0016E2  6BA3               	clrf	(?_printf+7)& (0+255),b
  2453  0016E4  EC09  F000         	call	_printf	;wreg free
  2454                           
  2455                           ;main.c: 263: lcdInst(0b11000000);
  2456  0016E8  0EC0               	movlw	192
  2457  0016EA  EC87  F012         	call	_lcdInst
  2458                           
  2459                           ;main.c: 264: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2460  0016EE  0EB8               	movlw	low STR_5
  2461  0016F0  0100               	movlb	0	; () banked
  2462  0016F2  6F9C               	movwf	printf@f& (0+255),b
  2463  0016F4  0EFE               	movlw	high STR_5
  2464  0016F6  0100               	movlb	0	; () banked
  2465  0016F8  6F9D               	movwf	(printf@f+1)& (0+255),b
  2466  0016FA  C0B8  F09E         	movff	_time+2,?_printf+2
  2467  0016FE  0100               	movlb	0	; () banked
  2468  001700  6B9F               	clrf	(?_printf+3)& (0+255),b
  2469  001702  C0B7  F0A0         	movff	_time+1,?_printf+4
  2470  001706  0100               	movlb	0	; () banked
  2471  001708  6BA1               	clrf	(?_printf+5)& (0+255),b
  2472  00170A  C0B6  F0A2         	movff	_time,?_printf+6
  2473  00170E  0100               	movlb	0	; () banked
  2474  001710  6BA3               	clrf	(?_printf+7)& (0+255),b
  2475  001712  EC09  F000         	call	_printf	;wreg free
  2476  001716  0012               	return	
  2477  001718                     __end_of_date_time:
  2478                           	opt stack 0
  2479                           tblptru	equ	0xFF8
  2480                           tblptrh	equ	0xFF7
  2481                           tblptrl	equ	0xFF6
  2482                           tablat	equ	0xFF5
  2483                           prodh	equ	0xFF4
  2484                           prodl	equ	0xFF3
  2485                           intcon	equ	0xFF2
  2486                           intcon2	equ	0xFF1
  2487                           intcon3	equ	0xFF0
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           indf2	equ	0xFDF
  2491                           fsr2h	equ	0xFDA
  2492                           fsr2l	equ	0xFD9
  2493                           status	equ	0xFD8
  2494                           
  2495 ;; *************** function _I2C_Master_Write *****************
  2496 ;; Defined at:
  2497 ;;		line 47 in file "I2C.c"
  2498 ;; Parameters:    Size  Location     Type
  2499 ;;  d               2   17[BANK0 ] unsigned int 
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;		None
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  1    wreg      void 
  2504 ;; Registers used:
  2505 ;;		wreg, status,2, status,0, cstack
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2511 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;Total ram usage:        2 bytes
  2516 ;; Hardware stack levels used:    1
  2517 ;; Hardware stack levels required when called:    8
  2518 ;; This function calls:
  2519 ;;		_I2C_Master_Wait
  2520 ;; This function is called by:
  2521 ;;		_date_time
  2522 ;;		_set_time
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           	psect	text7
  2527  002536                     __ptext7:
  2528                           	opt stack 0
  2529  002536                     _I2C_Master_Write:
  2530                           	opt stack 21
  2531                           
  2532                           ;I2C.c: 49: I2C_Master_Wait();
  2533                           
  2534                           ;incstack = 0
  2535  002536  EC6C  F012         	call	_I2C_Master_Wait	;wreg free
  2536                           
  2537                           ;I2C.c: 50: SSPBUF = d;
  2538  00253A  C091  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2539  00253E  0012               	return		;funcret
  2540  002540                     __end_of_I2C_Master_Write:
  2541                           	opt stack 0
  2542                           tblptru	equ	0xFF8
  2543                           tblptrh	equ	0xFF7
  2544                           tblptrl	equ	0xFF6
  2545                           tablat	equ	0xFF5
  2546                           prodh	equ	0xFF4
  2547                           prodl	equ	0xFF3
  2548                           intcon	equ	0xFF2
  2549                           intcon2	equ	0xFF1
  2550                           intcon3	equ	0xFF0
  2551                           postinc0	equ	0xFEE
  2552                           wreg	equ	0xFE8
  2553                           indf2	equ	0xFDF
  2554                           fsr2h	equ	0xFDA
  2555                           fsr2l	equ	0xFD9
  2556                           status	equ	0xFD8
  2557                           
  2558 ;; *************** function _I2C_Master_Stop *****************
  2559 ;; Defined at:
  2560 ;;		line 41 in file "I2C.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;		None
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;		None
  2565 ;; Return value:  Size  Location     Type
  2566 ;;                  1    wreg      void 
  2567 ;; Registers used:
  2568 ;;		wreg, status,2, status,0, cstack
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2578 ;;Total ram usage:        0 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; Hardware stack levels required when called:    8
  2581 ;; This function calls:
  2582 ;;		_I2C_Master_Wait
  2583 ;; This function is called by:
  2584 ;;		_date_time
  2585 ;;		_set_time
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	text8
  2590  00254A                     __ptext8:
  2591                           	opt stack 0
  2592  00254A                     _I2C_Master_Stop:
  2593                           	opt stack 21
  2594                           
  2595                           ;I2C.c: 43: I2C_Master_Wait();
  2596                           
  2597                           ;incstack = 0
  2598  00254A  EC6C  F012         	call	_I2C_Master_Wait	;wreg free
  2599                           
  2600                           ;I2C.c: 44: PEN = 1;
  2601  00254E  84C5               	bsf	4037,2,c	;volatile
  2602  002550  0012               	return		;funcret
  2603  002552                     __end_of_I2C_Master_Stop:
  2604                           	opt stack 0
  2605                           tblptru	equ	0xFF8
  2606                           tblptrh	equ	0xFF7
  2607                           tblptrl	equ	0xFF6
  2608                           tablat	equ	0xFF5
  2609                           prodh	equ	0xFF4
  2610                           prodl	equ	0xFF3
  2611                           intcon	equ	0xFF2
  2612                           intcon2	equ	0xFF1
  2613                           intcon3	equ	0xFF0
  2614                           postinc0	equ	0xFEE
  2615                           wreg	equ	0xFE8
  2616                           indf2	equ	0xFDF
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _I2C_Master_Start *****************
  2622 ;; Defined at:
  2623 ;;		line 29 in file "I2C.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;Total ram usage:        0 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    8
  2644 ;; This function calls:
  2645 ;;		_I2C_Master_Wait
  2646 ;; This function is called by:
  2647 ;;		_date_time
  2648 ;;		_set_time
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           	psect	text9
  2653  002552                     __ptext9:
  2654                           	opt stack 0
  2655  002552                     _I2C_Master_Start:
  2656                           	opt stack 21
  2657                           
  2658                           ;I2C.c: 31: I2C_Master_Wait();
  2659                           
  2660                           ;incstack = 0
  2661  002552  EC6C  F012         	call	_I2C_Master_Wait	;wreg free
  2662                           
  2663                           ;I2C.c: 32: SEN = 1;
  2664  002556  80C5               	bsf	4037,0,c	;volatile
  2665  002558  0012               	return		;funcret
  2666  00255A                     __end_of_I2C_Master_Start:
  2667                           	opt stack 0
  2668                           tblptru	equ	0xFF8
  2669                           tblptrh	equ	0xFF7
  2670                           tblptrl	equ	0xFF6
  2671                           tablat	equ	0xFF5
  2672                           prodh	equ	0xFF4
  2673                           prodl	equ	0xFF3
  2674                           intcon	equ	0xFF2
  2675                           intcon2	equ	0xFF1
  2676                           intcon3	equ	0xFF0
  2677                           postinc0	equ	0xFEE
  2678                           wreg	equ	0xFE8
  2679                           indf2	equ	0xFDF
  2680                           fsr2h	equ	0xFDA
  2681                           fsr2l	equ	0xFD9
  2682                           status	equ	0xFD8
  2683                           
  2684 ;; *************** function _I2C_Master_Read *****************
  2685 ;; Defined at:
  2686 ;;		line 53 in file "I2C.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  a               1    wreg     unsigned char 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  a               1   17[BANK0 ] unsigned char 
  2691 ;;  temp            1   18[BANK0 ] unsigned char 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      unsigned char 
  2694 ;; Registers used:
  2695 ;;		wreg, status,2, status,0, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;Total ram usage:        2 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:    8
  2708 ;; This function calls:
  2709 ;;		_I2C_Master_Wait
  2710 ;; This function is called by:
  2711 ;;		_date_time
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text10
  2716  0023C0                     __ptext10:
  2717                           	opt stack 0
  2718  0023C0                     _I2C_Master_Read:
  2719                           	opt stack 21
  2720                           
  2721                           ;incstack = 0
  2722                           ;I2C_Master_Read@a stored from wreg
  2723  0023C0  0100               	movlb	0	; () banked
  2724  0023C2  6F91               	movwf	I2C_Master_Read@a& (0+255),b
  2725                           
  2726                           ;I2C.c: 55: unsigned char temp;
  2727                           ;I2C.c: 56: I2C_Master_Wait();
  2728  0023C4  EC6C  F012         	call	_I2C_Master_Wait	;wreg free
  2729                           
  2730                           ;I2C.c: 57: RCEN = 1;
  2731  0023C8  86C5               	bsf	4037,3,c	;volatile
  2732                           
  2733                           ;I2C.c: 58: I2C_Master_Wait();
  2734  0023CA  EC6C  F012         	call	_I2C_Master_Wait	;wreg free
  2735                           
  2736                           ;I2C.c: 59: temp = SSPBUF;
  2737  0023CE  CFC9 F092          	movff	4041,I2C_Master_Read@temp	;volatile
  2738                           
  2739                           ;I2C.c: 60: I2C_Master_Wait();
  2740  0023D2  EC6C  F012         	call	_I2C_Master_Wait	;wreg free
  2741                           
  2742                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2743  0023D6  0100               	movlb	0	; () banked
  2744  0023D8  5191               	movf	I2C_Master_Read@a& (0+255),w,b
  2745  0023DA  0100               	movlb	0	; () banked
  2746  0023DC  A4D8               	btfss	status,2,c
  2747  0023DE  D002               	goto	u2900
  2748  0023E0  8AC5               	bsf	4037,5,c	;volatile
  2749  0023E2  D001               	goto	l3335
  2750  0023E4                     u2900:
  2751  0023E4  9AC5               	bcf	4037,5,c	;volatile
  2752  0023E6                     l3335:
  2753                           
  2754                           ;I2C.c: 62: ACKEN = 1;
  2755  0023E6  88C5               	bsf	4037,4,c	;volatile
  2756                           
  2757                           ;I2C.c: 63: return temp;
  2758  0023E8  0100               	movlb	0	; () banked
  2759  0023EA  5192               	movf	I2C_Master_Read@temp& (0+255),w,b
  2760  0023EC  0012               	return	
  2761  0023EE                     __end_of_I2C_Master_Read:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           prodh	equ	0xFF4
  2768                           prodl	equ	0xFF3
  2769                           intcon	equ	0xFF2
  2770                           intcon2	equ	0xFF1
  2771                           intcon3	equ	0xFF0
  2772                           postinc0	equ	0xFEE
  2773                           wreg	equ	0xFE8
  2774                           indf2	equ	0xFDF
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _I2C_Master_Wait *****************
  2780 ;; Defined at:
  2781 ;;		line 24 in file "I2C.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      void 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;Total ram usage:        1 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    7
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_I2C_Master_Start
  2806 ;;		_I2C_Master_Stop
  2807 ;;		_I2C_Master_Write
  2808 ;;		_I2C_Master_Read
  2809 ;;		_I2C_Master_RepeatedStart
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text11
  2814  0024D8                     __ptext11:
  2815                           	opt stack 0
  2816  0024D8                     _I2C_Master_Wait:
  2817                           	opt stack 21
  2818  0024D8                     l34:
  2819  0024D8  B4C7               	btfsc	4039,2,c	;volatile
  2820  0024DA  D7FE               	goto	l34
  2821  0024DC  CFC5 F090          	movff	4037,??_I2C_Master_Wait	;volatile
  2822  0024E0  0E1F               	movlw	31
  2823  0024E2  0100               	movlb	0	; () banked
  2824  0024E4  1790               	andwf	??_I2C_Master_Wait& (0+255),f,b
  2825  0024E6  B4D8               	btfsc	status,2,c
  2826  0024E8  0012               	return	
  2827  0024EA  D7F6               	goto	l34
  2828  0024EC                     __end_of_I2C_Master_Wait:
  2829                           	opt stack 0
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           prodh	equ	0xFF4
  2835                           prodl	equ	0xFF3
  2836                           intcon	equ	0xFF2
  2837                           intcon2	equ	0xFF1
  2838                           intcon3	equ	0xFF0
  2839                           postinc0	equ	0xFEE
  2840                           wreg	equ	0xFE8
  2841                           indf2	equ	0xFDF
  2842                           fsr2h	equ	0xFDA
  2843                           fsr2l	equ	0xFD9
  2844                           status	equ	0xFD8
  2845                           
  2846 ;; *************** function _bottle_time *****************
  2847 ;; Defined at:
  2848 ;;		line 329 in file "main.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  time            2   50[BANK0 ] int 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2862 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;Total ram usage:        2 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:   10
  2869 ;; This function calls:
  2870 ;;		_lcdInst
  2871 ;;		_printf
  2872 ;; This function is called by:
  2873 ;;		_main
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text12
  2878  002354                     __ptext12:
  2879                           	opt stack 0
  2880  002354                     _bottle_time:
  2881                           	opt stack 20
  2882                           
  2883                           ;main.c: 330: lcdInst(0b10000000);
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;incstack = 0
  2887  002354  0E80               	movlw	128
  2888  002356  EC87  F012         	call	_lcdInst
  2889                           
  2890                           ;main.c: 331: printf("Total Operation       ");
  2891  00235A  0E8A               	movlw	low STR_17
  2892  00235C  0100               	movlb	0	; () banked
  2893  00235E  6F9C               	movwf	printf@f& (0+255),b
  2894  002360  0EFE               	movlw	high STR_17
  2895  002362  0100               	movlb	0	; () banked
  2896  002364  6F9D               	movwf	(printf@f+1)& (0+255),b
  2897  002366  EC09  F000         	call	_printf	;wreg free
  2898                           
  2899                           ;main.c: 332: lcdInst(0b11000000);
  2900  00236A  0EC0               	movlw	192
  2901  00236C  EC87  F012         	call	_lcdInst
  2902                           
  2903                           ;main.c: 333: printf("Time: %d s       ", time);
  2904  002370  0ECF               	movlw	low STR_18
  2905  002372  0100               	movlb	0	; () banked
  2906  002374  6F9C               	movwf	printf@f& (0+255),b
  2907  002376  0EFE               	movlw	high STR_18
  2908  002378  0100               	movlb	0	; () banked
  2909  00237A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2910  00237C  C0B2  F09E         	movff	bottle_time@time,?_printf+2
  2911  002380  C0B3  F09F         	movff	bottle_time@time+1,?_printf+3
  2912  002384  EC09  F000         	call	_printf	;wreg free
  2913  002388  0012               	return	
  2914  00238A                     __end_of_bottle_time:
  2915                           	opt stack 0
  2916                           tblptru	equ	0xFF8
  2917                           tblptrh	equ	0xFF7
  2918                           tblptrl	equ	0xFF6
  2919                           tablat	equ	0xFF5
  2920                           prodh	equ	0xFF4
  2921                           prodl	equ	0xFF3
  2922                           intcon	equ	0xFF2
  2923                           intcon2	equ	0xFF1
  2924                           intcon3	equ	0xFF0
  2925                           postinc0	equ	0xFEE
  2926                           wreg	equ	0xFE8
  2927                           indf2	equ	0xFDF
  2928                           fsr2h	equ	0xFDA
  2929                           fsr2l	equ	0xFD9
  2930                           status	equ	0xFD8
  2931                           
  2932 ;; *************** function _bottle_count *****************
  2933 ;; Defined at:
  2934 ;;		line 287 in file "main.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;		None
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;		None
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;Total ram usage:        0 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:   10
  2955 ;; This function calls:
  2956 ;;		___awmod
  2957 ;;		_lcdInst
  2958 ;;		_printf
  2959 ;; This function is called by:
  2960 ;;		_main
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text13
  2965  000E32                     __ptext13:
  2966                           	opt stack 0
  2967  000E32                     _bottle_count:
  2968                           	opt stack 20
  2969                           
  2970                           ;main.c: 288: switch(bottle_count_disp % 5){
  2971                           
  2972                           ;incstack = 0
  2973  000E32  D083               	goto	l3911
  2974  000E34                     l3875:
  2975                           
  2976                           ;main.c: 290: lcdInst(0b10000000);
  2977  000E34  0E80               	movlw	128
  2978  000E36  EC87  F012         	call	_lcdInst
  2979                           
  2980                           ;main.c: 291: printf("Bottle Count    ");
  2981  000E3A  0E14               	movlw	low STR_6
  2982  000E3C  0100               	movlb	0	; () banked
  2983  000E3E  6F9C               	movwf	printf@f& (0+255),b
  2984  000E40  0EFF               	movlw	high STR_6
  2985  000E42  0100               	movlb	0	; () banked
  2986  000E44  6F9D               	movwf	(printf@f+1)& (0+255),b
  2987  000E46  EC09  F000         	call	_printf	;wreg free
  2988                           
  2989                           ;main.c: 292: lcdInst(0b11000000);
  2990  000E4A  0EC0               	movlw	192
  2991  000E4C  EC87  F012         	call	_lcdInst
  2992                           
  2993                           ;main.c: 293: printf("Total: 10       ");
  2994  000E50  0E03               	movlw	low STR_7
  2995  000E52  0100               	movlb	0	; () banked
  2996  000E54  6F9C               	movwf	printf@f& (0+255),b
  2997  000E56  0EFF               	movlw	high STR_7
  2998  000E58  0100               	movlb	0	; () banked
  2999  000E5A  6F9D               	movwf	(printf@f+1)& (0+255),b
  3000  000E5C  EC09  F000         	call	_printf	;wreg free
  3001                           
  3002                           ;main.c: 294: break;
  3003  000E60  0012               	return	
  3004  000E62                     l3881:
  3005                           
  3006                           ;main.c: 296: lcdInst(0b10000000);
  3007  000E62  0E80               	movlw	128
  3008  000E64  EC87  F012         	call	_lcdInst
  3009                           
  3010                           ;main.c: 297: printf("YOP+CAP+LBL: 3  ");
  3011  000E68  0E58               	movlw	low STR_8
  3012  000E6A  0100               	movlb	0	; () banked
  3013  000E6C  6F9C               	movwf	printf@f& (0+255),b
  3014  000E6E  0EFF               	movlw	high STR_8
  3015  000E70  0100               	movlb	0	; () banked
  3016  000E72  6F9D               	movwf	(printf@f+1)& (0+255),b
  3017  000E74  EC09  F000         	call	_printf	;wreg free
  3018                           
  3019                           ;main.c: 298: lcdInst(0b11000000);
  3020  000E78  0EC0               	movlw	192
  3021  000E7A  EC87  F012         	call	_lcdInst
  3022                           
  3023                           ;main.c: 299: printf("YOP+CAP-LBL: 1  ");
  3024  000E7E  0E47               	movlw	low STR_9
  3025  000E80  0100               	movlb	0	; () banked
  3026  000E82  6F9C               	movwf	printf@f& (0+255),b
  3027  000E84  0EFF               	movlw	high STR_9
  3028  000E86  0100               	movlb	0	; () banked
  3029  000E88  6F9D               	movwf	(printf@f+1)& (0+255),b
  3030  000E8A  EC09  F000         	call	_printf	;wreg free
  3031                           
  3032                           ;main.c: 300: break;
  3033  000E8E  0012               	return	
  3034  000E90                     l3887:
  3035                           
  3036                           ;main.c: 302: lcdInst(0b10000000);
  3037  000E90  0E80               	movlw	128
  3038  000E92  EC87  F012         	call	_lcdInst
  3039                           
  3040                           ;main.c: 303: printf("YOP-CAP+LBL: 1  ");
  3041  000E96  0E36               	movlw	low STR_10
  3042  000E98  0100               	movlb	0	; () banked
  3043  000E9A  6F9C               	movwf	printf@f& (0+255),b
  3044  000E9C  0EFF               	movlw	high STR_10
  3045  000E9E  0100               	movlb	0	; () banked
  3046  000EA0  6F9D               	movwf	(printf@f+1)& (0+255),b
  3047  000EA2  EC09  F000         	call	_printf	;wreg free
  3048                           
  3049                           ;main.c: 304: lcdInst(0b11000000);
  3050  000EA6  0EC0               	movlw	192
  3051  000EA8  EC87  F012         	call	_lcdInst
  3052                           
  3053                           ;main.c: 305: printf("YOP-CAP-LBL: 0  ");
  3054  000EAC  0E25               	movlw	low STR_11
  3055  000EAE  0100               	movlb	0	; () banked
  3056  000EB0  6F9C               	movwf	printf@f& (0+255),b
  3057  000EB2  0EFF               	movlw	high STR_11
  3058  000EB4  0100               	movlb	0	; () banked
  3059  000EB6  6F9D               	movwf	(printf@f+1)& (0+255),b
  3060  000EB8  EC09  F000         	call	_printf	;wreg free
  3061                           
  3062                           ;main.c: 306: break;
  3063  000EBC  0012               	return	
  3064  000EBE                     l3893:
  3065                           
  3066                           ;main.c: 308: lcdInst(0b10000000);
  3067  000EBE  0E80               	movlw	128
  3068  000EC0  EC87  F012         	call	_lcdInst
  3069                           
  3070                           ;main.c: 309: printf("ESKA+CAP+LBL: 1 ");
  3071  000EC4  0E69               	movlw	low STR_12
  3072  000EC6  0100               	movlb	0	; () banked
  3073  000EC8  6F9C               	movwf	printf@f& (0+255),b
  3074  000ECA  0EFF               	movlw	high STR_12
  3075  000ECC  0100               	movlb	0	; () banked
  3076  000ECE  6F9D               	movwf	(printf@f+1)& (0+255),b
  3077  000ED0  EC09  F000         	call	_printf	;wreg free
  3078                           
  3079                           ;main.c: 310: lcdInst(0b11000000);
  3080  000ED4  0EC0               	movlw	192
  3081  000ED6  EC87  F012         	call	_lcdInst
  3082                           
  3083                           ;main.c: 311: printf("ESKA+CAP-LBL: 1 ");
  3084  000EDA  0E8B               	movlw	low STR_13
  3085  000EDC  0100               	movlb	0	; () banked
  3086  000EDE  6F9C               	movwf	printf@f& (0+255),b
  3087  000EE0  0EFF               	movlw	high STR_13
  3088  000EE2  0100               	movlb	0	; () banked
  3089  000EE4  6F9D               	movwf	(printf@f+1)& (0+255),b
  3090  000EE6  EC09  F000         	call	_printf	;wreg free
  3091                           
  3092                           ;main.c: 312: break;
  3093  000EEA  0012               	return	
  3094  000EEC                     l3899:
  3095                           
  3096                           ;main.c: 314: lcdInst(0b10000000);
  3097  000EEC  0E80               	movlw	128
  3098  000EEE  EC87  F012         	call	_lcdInst
  3099                           
  3100                           ;main.c: 315: printf("ESKA-CAP+LBL: 1 ");
  3101  000EF2  0E7A               	movlw	low STR_14
  3102  000EF4  0100               	movlb	0	; () banked
  3103  000EF6  6F9C               	movwf	printf@f& (0+255),b
  3104  000EF8  0EFF               	movlw	high STR_14
  3105  000EFA  0100               	movlb	0	; () banked
  3106  000EFC  6F9D               	movwf	(printf@f+1)& (0+255),b
  3107  000EFE  EC09  F000         	call	_printf	;wreg free
  3108                           
  3109                           ;main.c: 316: lcdInst(0b11000000);
  3110  000F02  0EC0               	movlw	192
  3111  000F04  EC87  F012         	call	_lcdInst
  3112                           
  3113                           ;main.c: 317: printf("ESKA-CAP-LBL: 2 ");
  3114  000F08  0E9C               	movlw	low STR_15
  3115  000F0A  0100               	movlb	0	; () banked
  3116  000F0C  6F9C               	movwf	printf@f& (0+255),b
  3117  000F0E  0EFF               	movlw	high STR_15
  3118  000F10  0100               	movlb	0	; () banked
  3119  000F12  6F9D               	movwf	(printf@f+1)& (0+255),b
  3120  000F14  EC09  F000         	call	_printf	;wreg free
  3121                           
  3122                           ;main.c: 318: break;
  3123  000F18  0012               	return	
  3124  000F1A                     l3905:
  3125                           
  3126                           ;main.c: 321: lcdInst(0b10000000);
  3127  000F1A  0E80               	movlw	128
  3128  000F1C  EC87  F012         	call	_lcdInst
  3129                           
  3130                           ;main.c: 322: printf("ERROR: %d", bottle_count_disp);
  3131  000F20  0EF4               	movlw	low STR_16
  3132  000F22  0100               	movlb	0	; () banked
  3133  000F24  6F9C               	movwf	printf@f& (0+255),b
  3134  000F26  0EFF               	movlw	high STR_16
  3135  000F28  0100               	movlb	0	; () banked
  3136  000F2A  6F9D               	movwf	(printf@f+1)& (0+255),b
  3137  000F2C  C0C4  F09E         	movff	_bottle_count_disp,?_printf+2
  3138  000F30  C0C5  F09F         	movff	_bottle_count_disp+1,?_printf+3
  3139  000F34  EC09  F000         	call	_printf	;wreg free
  3140  000F38  D7F0               	goto	l3905
  3141  000F3A                     l3911:
  3142  000F3A  C0C4  F090         	movff	_bottle_count_disp,___awmod@dividend
  3143  000F3E  C0C5  F091         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3144  000F42  0E00               	movlw	0
  3145  000F44  0100               	movlb	0	; () banked
  3146  000F46  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3147  000F48  0E05               	movlw	5
  3148  000F4A  6F92               	movwf	___awmod@divisor& (0+255),b
  3149  000F4C  ECC4  F00D         	call	___awmod	;wreg free
  3150                           
  3151                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3152                           ; Switch size 1, requested type "space"
  3153                           ; Number of cases is 1, Range of values is 0 to 0
  3154                           ; switch strategies available:
  3155                           ; Name         Instructions Cycles
  3156                           ; simple_byte            4     3 (average)
  3157                           ;	Chosen strategy is simple_byte
  3158  000F50  0100               	movlb	0	; () banked
  3159  000F52  5191               	movf	(?___awmod+1)& (0+255),w,b
  3160  000F54  0A00               	xorlw	0	; case 0
  3161  000F56  A4D8               	btfss	status,2,c
  3162  000F58  D7E0               	goto	l3905
  3163                           
  3164                           ; BSR set to: 0
  3165                           ; Switch size 1, requested type "space"
  3166                           ; Number of cases is 5, Range of values is 0 to 4
  3167                           ; switch strategies available:
  3168                           ; Name         Instructions Cycles
  3169                           ; simple_byte           16     9 (average)
  3170                           ;	Chosen strategy is simple_byte
  3171  000F5A  0100               	movlb	0	; () banked
  3172  000F5C  5190               	movf	?___awmod& (0+255),w,b
  3173  000F5E  0A00               	xorlw	0	; case 0
  3174  000F60  B4D8               	btfsc	status,2,c
  3175  000F62  D768               	goto	l3875
  3176  000F64  0A01               	xorlw	1	; case 1
  3177  000F66  B4D8               	btfsc	status,2,c
  3178  000F68  D77C               	goto	l3881
  3179  000F6A  0A03               	xorlw	3	; case 2
  3180  000F6C  B4D8               	btfsc	status,2,c
  3181  000F6E  D790               	goto	l3887
  3182  000F70  0A01               	xorlw	1	; case 3
  3183  000F72  B4D8               	btfsc	status,2,c
  3184  000F74  D7A4               	goto	l3893
  3185  000F76  0A07               	xorlw	7	; case 4
  3186  000F78  B4D8               	btfsc	status,2,c
  3187  000F7A  D7B8               	goto	l3899
  3188  000F7C  D7CE               	goto	l3905
  3189  000F7E                     __end_of_bottle_count:
  3190                           	opt stack 0
  3191                           tblptru	equ	0xFF8
  3192                           tblptrh	equ	0xFF7
  3193                           tblptrl	equ	0xFF6
  3194                           tablat	equ	0xFF5
  3195                           prodh	equ	0xFF4
  3196                           prodl	equ	0xFF3
  3197                           intcon	equ	0xFF2
  3198                           intcon2	equ	0xFF1
  3199                           intcon3	equ	0xFF0
  3200                           postinc0	equ	0xFEE
  3201                           wreg	equ	0xFE8
  3202                           indf2	equ	0xFDF
  3203                           fsr2h	equ	0xFDA
  3204                           fsr2l	equ	0xFD9
  3205                           status	equ	0xFD8
  3206                           
  3207 ;; *************** function _printf *****************
  3208 ;; Defined at:
  3209 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3212 ;;		 -> STR_25(16), STR_24(16), STR_23(15), STR_22(16), 
  3213 ;;		 -> STR_21(25), STR_20(24), STR_19(23), STR_18(18), 
  3214 ;;		 -> STR_17(23), STR_16(10), STR_15(17), STR_14(17), 
  3215 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  3216 ;;		 -> STR_9(17), STR_8(17), STR_7(17), STR_6(17), 
  3217 ;;		 -> STR_5(23), STR_4(23), STR_3(10), STR_2(17), 
  3218 ;;		 -> STR_1(14), 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  idx             1   40[BANK0 ] unsigned char 
  3221 ;;  tmpval          4    0        struct .
  3222 ;;  cp              3    0        PTR const unsigned char 
  3223 ;;  width           2   47[BANK0 ] int 
  3224 ;;  val             2   44[BANK0 ] unsigned int 
  3225 ;;  ap              2   41[BANK0 ] PTR void [1]
  3226 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3227 ;;  len             2    0        unsigned int 
  3228 ;;  c               1   49[BANK0 ] char 
  3229 ;;  flag            1   46[BANK0 ] unsigned char 
  3230 ;;  prec            1   43[BANK0 ] char 
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  2   28[BANK0 ] int 
  3233 ;; Registers used:
  3234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3240 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;Total ram usage:       22 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    9
  3247 ;; This function calls:
  3248 ;;		___lwdiv
  3249 ;;		___lwmod
  3250 ;;		___wmul
  3251 ;;		_isdigit
  3252 ;;		_putch
  3253 ;; This function is called by:
  3254 ;;		_standby
  3255 ;;		_date_time
  3256 ;;		_bottle_count
  3257 ;;		_bottle_time
  3258 ;;		_operation
  3259 ;;		_operationend
  3260 ;;		_emergencystop
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text14
  3265  000012                     __ptext14:
  3266                           	opt stack 0
  3267  000012                     _printf:
  3268                           	opt stack 20
  3269                           
  3270                           ;doprnt.c: 466: va_list ap;
  3271                           ;doprnt.c: 499: signed char c;
  3272                           ;doprnt.c: 501: int width;
  3273                           ;doprnt.c: 506: signed char prec;
  3274                           ;doprnt.c: 508: unsigned char flag;
  3275                           ;doprnt.c: 523: union {
  3276                           ;doprnt.c: 524: unsigned long vd;
  3277                           ;doprnt.c: 525: double integ;
  3278                           ;doprnt.c: 526: } tmpval;
  3279                           ;doprnt.c: 528: unsigned int val;
  3280                           ;doprnt.c: 529: unsigned len;
  3281                           ;doprnt.c: 530: const char * cp;
  3282                           ;doprnt.c: 533: *ap = __va_start();
  3283                           
  3284                           ;incstack = 0
  3285  000012  0E9E               	movlw	low (?_printf+2)
  3286  000014  0100               	movlb	0	; () banked
  3287  000016  6FA9               	movwf	printf@ap& (0+255),b
  3288  000018  0E00               	movlw	high (?_printf+2)
  3289  00001A  0100               	movlb	0	; () banked
  3290  00001C  6FAA               	movwf	(printf@ap+1)& (0+255),b
  3291                           
  3292                           ;doprnt.c: 536: while(c = *f++) {
  3293  00001E  D1C4               	goto	l3473
  3294  000020                     l3347:
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;doprnt.c: 538: if(c != '%')
  3298  000020  0E25               	movlw	37
  3299  000022  0100               	movlb	0	; () banked
  3300  000024  19B1               	xorwf	printf@c& (0+255),w,b
  3301  000026  B4D8               	btfsc	status,2,c
  3302  000028  D005               	goto	l3351
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;doprnt.c: 540: {
  3306                           ;doprnt.c: 541: (putch(c) );
  3307  00002A  0100               	movlb	0	; () banked
  3308  00002C  51B1               	movf	printf@c& (0+255),w,b
  3309  00002E  EC7F  F012         	call	_putch
  3310                           
  3311                           ;doprnt.c: 542: continue;
  3312  000032  D1BA               	goto	l3473
  3313  000034                     l3351:
  3314                           
  3315                           ;doprnt.c: 543: }
  3316                           ;doprnt.c: 546: width = 0;
  3317  000034  0E00               	movlw	0
  3318  000036  0100               	movlb	0	; () banked
  3319  000038  6FB0               	movwf	(printf@width+1)& (0+255),b
  3320  00003A  0E00               	movlw	0
  3321  00003C  6FAF               	movwf	printf@width& (0+255),b
  3322                           
  3323                           ;doprnt.c: 548: flag = 0;
  3324  00003E  0E00               	movlw	0
  3325  000040  0100               	movlb	0	; () banked
  3326  000042  6FAE               	movwf	printf@flag& (0+255),b
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;doprnt.c: 551: switch(*f) {
  3330                           
  3331                           ;doprnt.c: 550: for(;;) {
  3332  000044  D005               	goto	l3357
  3333  000046                     l3353:
  3334                           
  3335                           ;doprnt.c: 580: flag |= 0x04;
  3336  000046  0100               	movlb	0	; () banked
  3337  000048  85AE               	bsf	printf@flag& (0+255),2,b
  3338                           
  3339                           ;doprnt.c: 581: f++;
  3340  00004A  0100               	movlb	0	; () banked
  3341  00004C  4B9C               	infsnz	printf@f& (0+255),f,b
  3342  00004E  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3343  000050                     l3357:
  3344  000050  C09C  FFF6         	movff	printf@f,tblptrl
  3345  000054  C09D  FFF7         	movff	printf@f+1,tblptrh
  3346  000058                     	if	0	;tblptru may be non-zero
  3347  000058                     	endif
  3348  000058                     	if	0	;tblptru may be non-zero
  3349  000058                     	endif
  3350  000058  0008               	tblrd		*
  3351  00005A  50F5               	movf	tablat,w,c
  3352                           
  3353                           ; Switch size 1, requested type "space"
  3354                           ; Number of cases is 1, Range of values is 48 to 48
  3355                           ; switch strategies available:
  3356                           ; Name         Instructions Cycles
  3357                           ; simple_byte            4     3 (average)
  3358                           ;	Chosen strategy is simple_byte
  3359  00005C  0A30               	xorlw	48	; case 48
  3360  00005E  B4D8               	btfsc	status,2,c
  3361  000060  D7F2               	goto	l3353
  3362                           
  3363                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3364                           
  3365                           ;doprnt.c: 586: }
  3366                           
  3367                           ;doprnt.c: 585: break;
  3368  000062  C09C  FFF6         	movff	printf@f,tblptrl
  3369  000066  C09D  FFF7         	movff	printf@f+1,tblptrh
  3370  00006A                     	if	0	;tblptru may be non-zero
  3371  00006A                     	endif
  3372  00006A                     	if	0	;tblptru may be non-zero
  3373  00006A                     	endif
  3374  00006A  0008               	tblrd		*
  3375  00006C  50F5               	movf	tablat,w,c
  3376  00006E  ECF7  F011         	call	_isdigit
  3377  000072  A0D8               	btfss	status,0,c
  3378  000074  D044               	goto	l3375
  3379                           
  3380                           ;doprnt.c: 598: width = 0;
  3381  000076  0E00               	movlw	0
  3382  000078  0100               	movlb	0	; () banked
  3383  00007A  6FB0               	movwf	(printf@width+1)& (0+255),b
  3384  00007C  0E00               	movlw	0
  3385  00007E  6FAF               	movwf	printf@width& (0+255),b
  3386  000080                     l3363:
  3387                           
  3388                           ;doprnt.c: 600: width *= 10;
  3389  000080  C0AF  F090         	movff	printf@width,___wmul@multiplier
  3390  000084  C0B0  F091         	movff	printf@width+1,___wmul@multiplier+1
  3391  000088  0E00               	movlw	0
  3392  00008A  0100               	movlb	0	; () banked
  3393  00008C  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3394  00008E  0E0A               	movlw	10
  3395  000090  6F92               	movwf	___wmul@multiplicand& (0+255),b
  3396  000092  ECC5  F011         	call	___wmul	;wreg free
  3397  000096  C090  F0AF         	movff	?___wmul,printf@width
  3398  00009A  C091  F0B0         	movff	?___wmul+1,printf@width+1
  3399                           
  3400                           ;doprnt.c: 601: width += *f++ - '0';
  3401  00009E  0ED0               	movlw	208
  3402  0000A0  0100               	movlb	0	; () banked
  3403  0000A2  6FA4               	movwf	??_printf& (0+255),b
  3404  0000A4  0EFF               	movlw	255
  3405  0000A6  0100               	movlb	0	; () banked
  3406  0000A8  6FA5               	movwf	(??_printf+1)& (0+255),b
  3407  0000AA  C09C  FFF6         	movff	printf@f,tblptrl
  3408  0000AE  C09D  FFF7         	movff	printf@f+1,tblptrh
  3409  0000B2                     	if	0	;tblptru may be non-zero
  3410  0000B2                     	endif
  3411  0000B2                     	if	0	;tblptru may be non-zero
  3412  0000B2                     	endif
  3413  0000B2  0008               	tblrd		*
  3414  0000B4  50F5               	movf	tablat,w,c
  3415  0000B6  0100               	movlb	0	; () banked
  3416  0000B8  6FA6               	movwf	(??_printf+2)& (0+255),b
  3417  0000BA  6BA7               	clrf	(??_printf+3)& (0+255),b
  3418  0000BC  0100               	movlb	0	; () banked
  3419  0000BE  51A4               	movf	??_printf& (0+255),w,b
  3420  0000C0  0100               	movlb	0	; () banked
  3421  0000C2  27A6               	addwf	(??_printf+2)& (0+255),f,b
  3422  0000C4  0100               	movlb	0	; () banked
  3423  0000C6  51A5               	movf	(??_printf+1)& (0+255),w,b
  3424  0000C8  0100               	movlb	0	; () banked
  3425  0000CA  23A7               	addwfc	(??_printf+3)& (0+255),f,b
  3426  0000CC  0100               	movlb	0	; () banked
  3427  0000CE  51A6               	movf	(??_printf+2)& (0+255),w,b
  3428  0000D0  0100               	movlb	0	; () banked
  3429  0000D2  27AF               	addwf	printf@width& (0+255),f,b
  3430  0000D4  0100               	movlb	0	; () banked
  3431  0000D6  51A7               	movf	(??_printf+3)& (0+255),w,b
  3432  0000D8  0100               	movlb	0	; () banked
  3433  0000DA  23B0               	addwfc	(printf@width+1)& (0+255),f,b
  3434                           
  3435                           ; BSR set to: 0
  3436  0000DC  0100               	movlb	0	; () banked
  3437  0000DE  4B9C               	infsnz	printf@f& (0+255),f,b
  3438  0000E0  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3442  0000E2  C09C  FFF6         	movff	printf@f,tblptrl
  3443  0000E6  C09D  FFF7         	movff	printf@f+1,tblptrh
  3444  0000EA                     	if	0	;tblptru may be non-zero
  3445  0000EA                     	endif
  3446  0000EA                     	if	0	;tblptru may be non-zero
  3447  0000EA                     	endif
  3448  0000EA  0008               	tblrd		*
  3449  0000EC  50F5               	movf	tablat,w,c
  3450  0000EE  ECF7  F011         	call	_isdigit
  3451  0000F2  A0D8               	btfss	status,0,c
  3452  0000F4  D004               	goto	l3375
  3453  0000F6  D7C4               	goto	l3363
  3454  0000F8                     l3371:
  3455                           
  3456                           ;doprnt.c: 721: flag |= 0x80;
  3457  0000F8  0100               	movlb	0	; () banked
  3458  0000FA  8FAE               	bsf	printf@flag& (0+255),7,b
  3459                           
  3460                           ;doprnt.c: 723: break;
  3461  0000FC  D019               	goto	l354
  3462  0000FE                     l3375:
  3463  0000FE  C09C  FFF6         	movff	printf@f,tblptrl
  3464  000102  C09D  FFF7         	movff	printf@f+1,tblptrh
  3465  000106  0100               	movlb	0	; () banked
  3466  000108  4B9C               	infsnz	printf@f& (0+255),f,b
  3467  00010A  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3468  00010C                     	if	0	;tblptru may be non-zero
  3469  00010C                     	endif
  3470  00010C                     	if	0	;tblptru may be non-zero
  3471  00010C                     	endif
  3472  00010C  0008               	tblrd		*
  3473  00010E  CFF5 F0B1          	movff	tablat,printf@c
  3474  000112  0100               	movlb	0	; () banked
  3475  000114  51B1               	movf	printf@c& (0+255),w,b
  3476                           
  3477                           ; Switch size 1, requested type "space"
  3478                           ; Number of cases is 4, Range of values is 0 to 120
  3479                           ; switch strategies available:
  3480                           ; Name         Instructions Cycles
  3481                           ; simple_byte           13     7 (average)
  3482                           ;	Chosen strategy is simple_byte
  3483  000116  0A00               	xorlw	0	; case 0
  3484  000118  B4D8               	btfsc	status,2,c
  3485  00011A  0012               	return	
  3486  00011C  0A64               	xorlw	100	; case 100
  3487  00011E  B4D8               	btfsc	status,2,c
  3488  000120  D007               	goto	l354
  3489  000122  0A0D               	xorlw	13	; case 105
  3490  000124  B4D8               	btfsc	status,2,c
  3491  000126  D004               	goto	l354
  3492  000128  0A11               	xorlw	17	; case 120
  3493  00012A  B4D8               	btfsc	status,2,c
  3494  00012C  D7E5               	goto	l3371
  3495  00012E  D13C               	goto	l3473
  3496  000130                     l354:
  3497                           
  3498                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3499  000130  0100               	movlb	0	; () banked
  3500  000132  BFAE               	btfsc	printf@flag& (0+255),7,b
  3501  000134  D019               	goto	l3387
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;doprnt.c: 1253: {
  3505                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3506  000136  C0A9  FFD9         	movff	printf@ap,fsr2l
  3507  00013A  C0AA  FFDA         	movff	printf@ap+1,fsr2h
  3508  00013E  CFDE F0AC          	movff	postinc2,printf@val
  3509  000142  CFDD F0AD          	movff	postdec2,printf@val+1
  3510                           
  3511                           ; BSR set to: 0
  3512  000146  0E02               	movlw	2
  3513  000148  0100               	movlb	0	; () banked
  3514  00014A  27A9               	addwf	printf@ap& (0+255),f,b
  3515  00014C  0E00               	movlw	0
  3516  00014E  23AA               	addwfc	(printf@ap+1)& (0+255),f,b
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;doprnt.c: 1261: if((int)val < 0) {
  3520  000150  0100               	movlb	0	; () banked
  3521  000152  AFAD               	btfss	(printf@val+1)& (0+255),7,b
  3522  000154  D053               	goto	l3421
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;doprnt.c: 1262: flag |= 0x03;
  3526  000156  0E03               	movlw	3
  3527  000158  0100               	movlb	0	; () banked
  3528  00015A  13AE               	iorwf	printf@flag& (0+255),f,b
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;doprnt.c: 1263: val = -val;
  3532  00015C  0100               	movlb	0	; () banked
  3533  00015E  6DAC               	negf	printf@val& (0+255),b
  3534  000160  1FAD               	comf	(printf@val+1)& (0+255),f,b
  3535  000162  B0D8               	btfsc	status,0,c
  3536  000164  2BAD               	incf	(printf@val+1)& (0+255),f,b
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;doprnt.c: 1264: }
  3540                           ;doprnt.c: 1266: }
  3541  000166  D04A               	goto	l3421
  3542  000168                     l3387:
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;doprnt.c: 1268: else
  3546                           ;doprnt.c: 1273: {
  3547                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3548  000168  C0A9  FFD9         	movff	printf@ap,fsr2l
  3549  00016C  C0AA  FFDA         	movff	printf@ap+1,fsr2h
  3550  000170  CFDE F0AC          	movff	postinc2,printf@val
  3551  000174  CFDD F0AD          	movff	postdec2,printf@val+1
  3552                           
  3553                           ; BSR set to: 0
  3554  000178  0E02               	movlw	2
  3555  00017A  0100               	movlb	0	; () banked
  3556  00017C  27A9               	addwf	printf@ap& (0+255),f,b
  3557  00017E  0E00               	movlw	0
  3558  000180  23AA               	addwfc	(printf@ap+1)& (0+255),f,b
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;doprnt.c: 1287: }
  3562                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3563  000182  D03C               	goto	l3421
  3564  000184                     l3391:
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3568  000184  0E01               	movlw	1
  3569  000186  0100               	movlb	0	; () banked
  3570  000188  6FB1               	movwf	printf@c& (0+255),b
  3571  00018A                     l3393:
  3572                           
  3573                           ; BSR set to: 0
  3574  00018A  0E05               	movlw	5
  3575  00018C  0100               	movlb	0	; () banked
  3576  00018E  19B1               	xorwf	printf@c& (0+255),w,b
  3577  000190  B4D8               	btfsc	status,2,c
  3578  000192  D03D               	goto	l3423
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1306: if(val < dpowers[c])
  3582                           
  3583                           ; BSR set to: 0
  3584                           
  3585                           ; BSR set to: 0
  3586  000194  0100               	movlb	0	; () banked
  3587  000196  51B1               	movf	printf@c& (0+255),w,b
  3588  000198  0D02               	mullw	2
  3589  00019A  0EF0               	movlw	low _dpowers
  3590  00019C  24F3               	addwf	prodl,w,c
  3591  00019E  6EF6               	movwf	tblptrl,c
  3592  0001A0  0EFD               	movlw	high _dpowers
  3593  0001A2  20F4               	addwfc	prodh,w,c
  3594  0001A4  6EF7               	movwf	tblptrh,c
  3595  0001A6                     	if	0	;There are less than 3 active tblptr bytes
  3596  0001A6                     	endif
  3597  0001A6  0009               	tblrd		*+
  3598  0001A8  50F5               	movf	tablat,w,c
  3599  0001AA  0100               	movlb	0	; () banked
  3600  0001AC  5DAC               	subwf	printf@val& (0+255),w,b
  3601  0001AE  0009               	tblrd		*+
  3602  0001B0  50F5               	movf	tablat,w,c
  3603  0001B2  0100               	movlb	0	; () banked
  3604  0001B4  59AD               	subwfb	(printf@val+1)& (0+255),w,b
  3605  0001B6  A0D8               	btfss	status,0,c
  3606  0001B8  D02A               	goto	l3423
  3607                           
  3608                           ; BSR set to: 0
  3609                           
  3610                           ; BSR set to: 0
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;doprnt.c: 1307: break;
  3614  0001BA  0100               	movlb	0	; () banked
  3615  0001BC  2BB1               	incf	printf@c& (0+255),f,b
  3616  0001BE  D7E5               	goto	l3393
  3617  0001C0                     l3405:
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3621  0001C0  0E01               	movlw	1
  3622  0001C2  0100               	movlb	0	; () banked
  3623  0001C4  6FB1               	movwf	printf@c& (0+255),b
  3624  0001C6                     l3407:
  3625                           
  3626                           ; BSR set to: 0
  3627  0001C6  0E04               	movlw	4
  3628  0001C8  0100               	movlb	0	; () banked
  3629  0001CA  19B1               	xorwf	printf@c& (0+255),w,b
  3630  0001CC  B4D8               	btfsc	status,2,c
  3631  0001CE  D01F               	goto	l3423
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3635                           
  3636                           ; BSR set to: 0
  3637                           
  3638                           ; BSR set to: 0
  3639  0001D0  0100               	movlb	0	; () banked
  3640  0001D2  51B1               	movf	printf@c& (0+255),w,b
  3641  0001D4  0D02               	mullw	2
  3642  0001D6  0EFA               	movlw	low _hexpowers
  3643  0001D8  24F3               	addwf	prodl,w,c
  3644  0001DA  6EF6               	movwf	tblptrl,c
  3645  0001DC  0EFD               	movlw	high _hexpowers
  3646  0001DE  20F4               	addwfc	prodh,w,c
  3647  0001E0  6EF7               	movwf	tblptrh,c
  3648  0001E2                     	if	0	;There are less than 3 active tblptr bytes
  3649  0001E2                     	endif
  3650  0001E2  0009               	tblrd		*+
  3651  0001E4  50F5               	movf	tablat,w,c
  3652  0001E6  0100               	movlb	0	; () banked
  3653  0001E8  5DAC               	subwf	printf@val& (0+255),w,b
  3654  0001EA  0009               	tblrd		*+
  3655  0001EC  50F5               	movf	tablat,w,c
  3656  0001EE  0100               	movlb	0	; () banked
  3657  0001F0  59AD               	subwfb	(printf@val+1)& (0+255),w,b
  3658  0001F2  A0D8               	btfss	status,0,c
  3659  0001F4  D00C               	goto	l3423
  3660                           
  3661                           ; BSR set to: 0
  3662                           
  3663                           ; BSR set to: 0
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;doprnt.c: 1318: break;
  3667  0001F6  0100               	movlb	0	; () banked
  3668  0001F8  2BB1               	incf	printf@c& (0+255),f,b
  3669  0001FA  D7E5               	goto	l3407
  3670  0001FC                     l3421:
  3671                           
  3672                           ; BSR set to: 0
  3673  0001FC  0100               	movlb	0	; () banked
  3674  0001FE  51AE               	movf	printf@flag& (0+255),w,b
  3675  000200  0B80               	andlw	128
  3676                           
  3677                           ; Switch size 1, requested type "space"
  3678                           ; Number of cases is 2, Range of values is 0 to 128
  3679                           ; switch strategies available:
  3680                           ; Name         Instructions Cycles
  3681                           ; simple_byte            7     4 (average)
  3682                           ;	Chosen strategy is simple_byte
  3683  000202  0A00               	xorlw	0	; case 0
  3684  000204  B4D8               	btfsc	status,2,c
  3685  000206  D7BE               	goto	l3391
  3686  000208  0A80               	xorlw	128	; case 128
  3687  00020A  B4D8               	btfsc	status,2,c
  3688  00020C  D7D9               	goto	l3405
  3689  00020E                     l3423:
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3693  00020E  0100               	movlb	0	; () banked
  3694  000210  51AF               	movf	printf@width& (0+255),w,b
  3695  000212  0100               	movlb	0	; () banked
  3696  000214  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3697  000216  B4D8               	btfsc	status,2,c
  3698  000218  D00B               	goto	l3429
  3699                           
  3700                           ; BSR set to: 0
  3701  00021A  C0AE  F0A4         	movff	printf@flag,??_printf
  3702  00021E  0E03               	movlw	3
  3703  000220  0100               	movlb	0	; () banked
  3704  000222  17A4               	andwf	??_printf& (0+255),f,b
  3705  000224  B4D8               	btfsc	status,2,c
  3706  000226  D004               	goto	l3429
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;doprnt.c: 1346: width--;
  3710  000228  0100               	movlb	0	; () banked
  3711  00022A  07AF               	decf	printf@width& (0+255),f,b
  3712  00022C  A0D8               	btfss	status,0,c
  3713  00022E  07B0               	decf	(printf@width+1)& (0+255),f,b
  3714  000230                     l3429:
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;doprnt.c: 1381: if(width > c)
  3718  000230  0E80               	movlw	128
  3719  000232  0100               	movlb	0	; () banked
  3720  000234  BFB1               	btfsc	printf@c& (0+255),7,b
  3721  000236  0E7F               	movlw	127
  3722  000238  0100               	movlb	0	; () banked
  3723  00023A  6FA4               	movwf	??_printf& (0+255),b
  3724  00023C  0100               	movlb	0	; () banked
  3725  00023E  51AF               	movf	printf@width& (0+255),w,b
  3726  000240  0100               	movlb	0	; () banked
  3727  000242  5DB1               	subwf	printf@c& (0+255),w,b
  3728  000244  0100               	movlb	0	; () banked
  3729  000246  51B0               	movf	(printf@width+1)& (0+255),w,b
  3730  000248  0A80               	xorlw	128
  3731  00024A  0100               	movlb	0	; () banked
  3732  00024C  59A4               	subwfb	??_printf& (0+255),w,b
  3733  00024E  B0D8               	btfsc	status,0,c
  3734  000250  D00B               	goto	l3433
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;doprnt.c: 1382: width -= c;
  3738  000252  0100               	movlb	0	; () banked
  3739  000254  51B1               	movf	printf@c& (0+255),w,b
  3740  000256  0100               	movlb	0	; () banked
  3741  000258  5FAF               	subwf	printf@width& (0+255),f,b
  3742  00025A  0E00               	movlw	0
  3743  00025C  0100               	movlb	0	; () banked
  3744  00025E  BFB1               	btfsc	printf@c& (0+255),7,b
  3745  000260  0EFF               	movlw	255
  3746  000262  0100               	movlb	0	; () banked
  3747  000264  5BB0               	subwfb	(printf@width+1)& (0+255),f,b
  3748  000266  D005               	goto	l3435
  3749  000268                     l3433:
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;doprnt.c: 1383: else
  3753                           ;doprnt.c: 1384: width = 0;
  3754  000268  0E00               	movlw	0
  3755  00026A  0100               	movlb	0	; () banked
  3756  00026C  6FB0               	movwf	(printf@width+1)& (0+255),b
  3757  00026E  0E00               	movlw	0
  3758  000270  6FAF               	movwf	printf@width& (0+255),b
  3759  000272                     l3435:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;doprnt.c: 1387: if(flag & 0x04) {
  3763  000272  0100               	movlb	0	; () banked
  3764  000274  A5AE               	btfss	printf@flag& (0+255),2,b
  3765  000276  D018               	goto	l3447
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;doprnt.c: 1392: if(flag & 0x03)
  3769  000278  C0AE  F0A4         	movff	printf@flag,??_printf
  3770  00027C  0E03               	movlw	3
  3771  00027E  0100               	movlb	0	; () banked
  3772  000280  17A4               	andwf	??_printf& (0+255),f,b
  3773  000282  B4D8               	btfsc	status,2,c
  3774  000284  D003               	goto	l3441
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;doprnt.c: 1393: (putch('-') );
  3778  000286  0E2D               	movlw	45
  3779  000288  EC7F  F012         	call	_putch
  3780  00028C                     l3441:
  3781                           
  3782                           ;doprnt.c: 1415: if(width)
  3783  00028C  0100               	movlb	0	; () banked
  3784  00028E  51AF               	movf	printf@width& (0+255),w,b
  3785  000290  0100               	movlb	0	; () banked
  3786  000292  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3787  000294  B4D8               	btfsc	status,2,c
  3788  000296  D025               	goto	l3457
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;doprnt.c: 1417: (putch('0') );
  3792                           
  3793                           ; BSR set to: 0
  3794                           
  3795                           ;doprnt.c: 1416: do
  3796  000298  0E30               	movlw	48
  3797  00029A  EC7F  F012         	call	_putch
  3798                           
  3799                           ;doprnt.c: 1418: while(--width);
  3800  00029E  0100               	movlb	0	; () banked
  3801  0002A0  07AF               	decf	printf@width& (0+255),f,b
  3802  0002A2  A0D8               	btfss	status,0,c
  3803  0002A4  07B0               	decf	(printf@width+1)& (0+255),f,b
  3804  0002A6  D7F2               	goto	l3441
  3805  0002A8                     l3447:
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;doprnt.c: 1422: {
  3809                           ;doprnt.c: 1424: if(width
  3810                           ;doprnt.c: 1428: )
  3811  0002A8  0100               	movlb	0	; () banked
  3812  0002AA  51AF               	movf	printf@width& (0+255),w,b
  3813  0002AC  0100               	movlb	0	; () banked
  3814  0002AE  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3815  0002B0  B4D8               	btfsc	status,2,c
  3816  0002B2  D00D               	goto	l3453
  3817  0002B4                     l3449:
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;doprnt.c: 1430: (putch(' ') );
  3821  0002B4  0E20               	movlw	32
  3822  0002B6  EC7F  F012         	call	_putch
  3823                           
  3824                           ;doprnt.c: 1431: while(--width);
  3825  0002BA  0100               	movlb	0	; () banked
  3826  0002BC  07AF               	decf	printf@width& (0+255),f,b
  3827  0002BE  A0D8               	btfss	status,0,c
  3828  0002C0  07B0               	decf	(printf@width+1)& (0+255),f,b
  3829  0002C2  0100               	movlb	0	; () banked
  3830  0002C4  51AF               	movf	printf@width& (0+255),w,b
  3831  0002C6  0100               	movlb	0	; () banked
  3832  0002C8  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3833  0002CA  A4D8               	btfss	status,2,c
  3834  0002CC  D7F3               	goto	l3449
  3835  0002CE                     l3453:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;doprnt.c: 1438: if(flag & 0x03)
  3839  0002CE  C0AE  F0A4         	movff	printf@flag,??_printf
  3840  0002D2  0E03               	movlw	3
  3841  0002D4  0100               	movlb	0	; () banked
  3842  0002D6  17A4               	andwf	??_printf& (0+255),f,b
  3843  0002D8  B4D8               	btfsc	status,2,c
  3844  0002DA  D003               	goto	l3457
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;doprnt.c: 1439: (putch('-') );
  3848  0002DC  0E2D               	movlw	45
  3849  0002DE  EC7F  F012         	call	_putch
  3850  0002E2                     l3457:
  3851                           
  3852                           ;doprnt.c: 1469: }
  3853                           ;doprnt.c: 1472: prec = c;
  3854  0002E2  C0B1  F0AB         	movff	printf@c,printf@prec
  3855                           
  3856                           ;doprnt.c: 1474: while(prec--) {
  3857  0002E6  D05A               	goto	l3471
  3858  0002E8                     l3459:
  3859                           
  3860                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3861  0002E8  0100               	movlb	0	; () banked
  3862  0002EA  51AB               	movf	printf@prec& (0+255),w,b
  3863  0002EC  0D02               	mullw	2
  3864  0002EE  0EF0               	movlw	low _dpowers
  3865  0002F0  24F3               	addwf	prodl,w,c
  3866  0002F2  6EF6               	movwf	tblptrl,c
  3867  0002F4  0EFD               	movlw	high _dpowers
  3868  0002F6  20F4               	addwfc	prodh,w,c
  3869  0002F8  6EF7               	movwf	tblptrh,c
  3870  0002FA                     	if	0	;There are less than 3 active tblptr bytes
  3871  0002FA                     	endif
  3872  0002FA  0009               	tblrd		*+
  3873  0002FC  CFF5 F092          	movff	tablat,___lwdiv@divisor
  3874  000300  000A               	tblrd		*-
  3875  000302  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  3876  000306  C0AC  F090         	movff	printf@val,___lwdiv@dividend
  3877  00030A  C0AD  F091         	movff	printf@val+1,___lwdiv@dividend+1
  3878  00030E  EC30  F00F         	call	___lwdiv	;wreg free
  3879  000312  C090  F097         	movff	?___lwdiv,___lwmod@dividend
  3880  000316  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
  3881  00031A  0E00               	movlw	0
  3882  00031C  0100               	movlb	0	; () banked
  3883  00031E  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3884  000320  0E0A               	movlw	10
  3885  000322  6F99               	movwf	___lwmod@divisor& (0+255),b
  3886  000324  ECDC  F00F         	call	___lwmod	;wreg free
  3887  000328  0100               	movlb	0	; () banked
  3888  00032A  5197               	movf	?___lwmod& (0+255),w,b
  3889  00032C  0F30               	addlw	48
  3890  00032E  0100               	movlb	0	; () banked
  3891  000330  6FB1               	movwf	printf@c& (0+255),b
  3892                           
  3893                           ;doprnt.c: 1491: break;
  3894  000332  D030               	goto	l3469
  3895  000334                     l3461:
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;doprnt.c: 1499: {
  3899                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3900  000334  C0AC  F090         	movff	printf@val,___lwdiv@dividend
  3901  000338  C0AD  F091         	movff	printf@val+1,___lwdiv@dividend+1
  3902  00033C  0100               	movlb	0	; () banked
  3903  00033E  51AB               	movf	printf@prec& (0+255),w,b
  3904  000340  0D02               	mullw	2
  3905  000342  0EFA               	movlw	low _hexpowers
  3906  000344  24F3               	addwf	prodl,w,c
  3907  000346  6EF6               	movwf	tblptrl,c
  3908  000348  0EFD               	movlw	high _hexpowers
  3909  00034A  20F4               	addwfc	prodh,w,c
  3910  00034C  6EF7               	movwf	tblptrh,c
  3911  00034E                     	if	0	;There are less than 3 active tblptr bytes
  3912  00034E                     	endif
  3913  00034E  0009               	tblrd		*+
  3914  000350  CFF5 F092          	movff	tablat,___lwdiv@divisor
  3915  000354  000A               	tblrd		*-
  3916  000356  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  3917  00035A  EC30  F00F         	call	___lwdiv	;wreg free
  3918  00035E  0100               	movlb	0	; () banked
  3919  000360  5190               	movf	?___lwdiv& (0+255),w,b
  3920  000362  0B0F               	andlw	15
  3921  000364  0100               	movlb	0	; () banked
  3922  000366  6FA8               	movwf	printf@idx& (0+255),b
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3926  000368  0100               	movlb	0	; () banked
  3927  00036A  51A8               	movf	printf@idx& (0+255),w,b
  3928  00036C  0D01               	mullw	1
  3929  00036E  0EE1               	movlw	low STR_26
  3930  000370  24F3               	addwf	prodl,w,c
  3931  000372  6EF6               	movwf	tblptrl,c
  3932  000374  0EFE               	movlw	high STR_26
  3933  000376  20F4               	addwfc	prodh,w,c
  3934  000378  6EF7               	movwf	tblptrh,c
  3935  00037A                     	if	0	;There are less than 3 active tblptr bytes
  3936  00037A                     	endif
  3937  00037A  0008               	tblrd		*
  3938  00037C  CFF5 F0B1          	movff	tablat,printf@c
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;doprnt.c: 1523: }
  3942                           
  3943                           ;doprnt.c: 1508: }
  3944                           ;doprnt.c: 1510: break;
  3945  000380  D009               	goto	l3469
  3946  000382                     l3467:
  3947  000382  0100               	movlb	0	; () banked
  3948  000384  51AE               	movf	printf@flag& (0+255),w,b
  3949  000386  0B80               	andlw	128
  3950                           
  3951                           ; Switch size 1, requested type "space"
  3952                           ; Number of cases is 2, Range of values is 0 to 128
  3953                           ; switch strategies available:
  3954                           ; Name         Instructions Cycles
  3955                           ; simple_byte            7     4 (average)
  3956                           ;	Chosen strategy is simple_byte
  3957  000388  0A00               	xorlw	0	; case 0
  3958  00038A  B4D8               	btfsc	status,2,c
  3959  00038C  D7AD               	goto	l3459
  3960  00038E  0A80               	xorlw	128	; case 128
  3961  000390  B4D8               	btfsc	status,2,c
  3962  000392  D7D0               	goto	l3461
  3963  000394                     l3469:
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;doprnt.c: 1524: (putch(c) );
  3967  000394  0100               	movlb	0	; () banked
  3968  000396  51B1               	movf	printf@c& (0+255),w,b
  3969  000398  EC7F  F012         	call	_putch
  3970  00039C                     l3471:
  3971  00039C  0100               	movlb	0	; () banked
  3972  00039E  07AB               	decf	printf@prec& (0+255),f,b
  3973  0003A0  0100               	movlb	0	; () banked
  3974  0003A2  29AB               	incf	printf@prec& (0+255),w,b
  3975  0003A4  A4D8               	btfss	status,2,c
  3976  0003A6  D7ED               	goto	l3467
  3977  0003A8                     l3473:
  3978  0003A8  C09C  FFF6         	movff	printf@f,tblptrl
  3979  0003AC  C09D  FFF7         	movff	printf@f+1,tblptrh
  3980  0003B0  0100               	movlb	0	; () banked
  3981  0003B2  4B9C               	infsnz	printf@f& (0+255),f,b
  3982  0003B4  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3983  0003B6                     	if	0	;tblptru may be non-zero
  3984  0003B6                     	endif
  3985  0003B6                     	if	0	;tblptru may be non-zero
  3986  0003B6                     	endif
  3987  0003B6  0008               	tblrd		*
  3988  0003B8  CFF5 F0B1          	movff	tablat,printf@c
  3989  0003BC  0100               	movlb	0	; () banked
  3990  0003BE  51B1               	movf	printf@c& (0+255),w,b
  3991  0003C0  B4D8               	btfsc	status,2,c
  3992  0003C2  0012               	return	
  3993  0003C4  D62D               	goto	l3347
  3994  0003C6                     __end_of_printf:
  3995                           	opt stack 0
  3996                           tblptru	equ	0xFF8
  3997                           tblptrh	equ	0xFF7
  3998                           tblptrl	equ	0xFF6
  3999                           tablat	equ	0xFF5
  4000                           prodh	equ	0xFF4
  4001                           prodl	equ	0xFF3
  4002                           intcon	equ	0xFF2
  4003                           intcon2	equ	0xFF1
  4004                           intcon3	equ	0xFF0
  4005                           postinc0	equ	0xFEE
  4006                           wreg	equ	0xFE8
  4007                           indf2	equ	0xFDF
  4008                           postinc2	equ	0xFDE
  4009                           postdec2	equ	0xFDD
  4010                           fsr2h	equ	0xFDA
  4011                           fsr2l	equ	0xFD9
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function _putch *****************
  4015 ;; Defined at:
  4016 ;;		line 31 in file "lcd.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  data            1    wreg     unsigned char 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  data            1   18[BANK0 ] unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      void 
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4033 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;Total ram usage:        1 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    8
  4037 ;; This function calls:
  4038 ;;		_lcdNibble
  4039 ;; This function is called by:
  4040 ;;		_printf
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text15
  4045  0024FE                     __ptext15:
  4046                           	opt stack 0
  4047  0024FE                     _putch:
  4048                           	opt stack 20
  4049                           
  4050                           ;incstack = 0
  4051                           ;putch@data stored from wreg
  4052  0024FE  0100               	movlb	0	; () banked
  4053  002500  6F92               	movwf	putch@data& (0+255),b
  4054                           
  4055                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4056  002502  848C               	bsf	3980,2,c	;volatile
  4057                           
  4058                           ;lcd.c: 33: lcdNibble(data);
  4059  002504  0100               	movlb	0	; () banked
  4060  002506  5192               	movf	putch@data& (0+255),w,b
  4061  002508  EC0D  F010         	call	_lcdNibble
  4062  00250C  0012               	return		;funcret
  4063  00250E                     __end_of_putch:
  4064                           	opt stack 0
  4065                           tblptru	equ	0xFF8
  4066                           tblptrh	equ	0xFF7
  4067                           tblptrl	equ	0xFF6
  4068                           tablat	equ	0xFF5
  4069                           prodh	equ	0xFF4
  4070                           prodl	equ	0xFF3
  4071                           intcon	equ	0xFF2
  4072                           intcon2	equ	0xFF1
  4073                           intcon3	equ	0xFF0
  4074                           postinc0	equ	0xFEE
  4075                           wreg	equ	0xFE8
  4076                           indf2	equ	0xFDF
  4077                           postinc2	equ	0xFDE
  4078                           postdec2	equ	0xFDD
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083 ;; *************** function _isdigit *****************
  4084 ;; Defined at:
  4085 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  c               1    wreg     unsigned char 
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;  c               1   18[BANK0 ] unsigned char 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;		None               void
  4092 ;; Registers used:
  4093 ;;		wreg, status,2, status,0
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4100 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;Total ram usage:        3 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    7
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_printf
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text16
  4114  0023EE                     __ptext16:
  4115                           	opt stack 0
  4116  0023EE                     _isdigit:
  4117                           	opt stack 21
  4118                           
  4119                           ;incstack = 0
  4120                           ;isdigit@c stored from wreg
  4121  0023EE  0100               	movlb	0	; () banked
  4122  0023F0  6F92               	movwf	isdigit@c& (0+255),b
  4123  0023F2  0E00               	movlw	0
  4124  0023F4  0100               	movlb	0	; () banked
  4125  0023F6  6F91               	movwf	_isdigit$782& (0+255),b
  4126                           
  4127                           ; BSR set to: 0
  4128  0023F8  0E3A               	movlw	58
  4129  0023FA  0100               	movlb	0	; () banked
  4130  0023FC  6192               	cpfslt	isdigit@c& (0+255),b
  4131  0023FE  D007               	goto	l3133
  4132                           
  4133                           ; BSR set to: 0
  4134  002400  0E2F               	movlw	47
  4135  002402  0100               	movlb	0	; () banked
  4136  002404  6592               	cpfsgt	isdigit@c& (0+255),b
  4137  002406  D003               	goto	l3133
  4138                           
  4139                           ; BSR set to: 0
  4140  002408  0E01               	movlw	1
  4141  00240A  0100               	movlb	0	; () banked
  4142  00240C  6F91               	movwf	_isdigit$782& (0+255),b
  4143  00240E                     l3133:
  4144                           
  4145                           ; BSR set to: 0
  4146  00240E  C091  F090         	movff	_isdigit$782,??_isdigit
  4147  002412  0100               	movlb	0	; () banked
  4148  002414  3190               	rrcf	??_isdigit& (0+255),w,b
  4149  002416  0012               	return	
  4150  002418                     __end_of_isdigit:
  4151                           	opt stack 0
  4152                           tblptru	equ	0xFF8
  4153                           tblptrh	equ	0xFF7
  4154                           tblptrl	equ	0xFF6
  4155                           tablat	equ	0xFF5
  4156                           prodh	equ	0xFF4
  4157                           prodl	equ	0xFF3
  4158                           intcon	equ	0xFF2
  4159                           intcon2	equ	0xFF1
  4160                           intcon3	equ	0xFF0
  4161                           postinc0	equ	0xFEE
  4162                           wreg	equ	0xFE8
  4163                           indf2	equ	0xFDF
  4164                           postinc2	equ	0xFDE
  4165                           postdec2	equ	0xFDD
  4166                           fsr2h	equ	0xFDA
  4167                           fsr2l	equ	0xFD9
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function ___wmul *****************
  4171 ;; Defined at:
  4172 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4175 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;  product         2   20[BANK0 ] unsigned int 
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  2   16[BANK0 ] unsigned int 
  4180 ;; Registers used:
  4181 ;;		wreg, status,2, status,0, prodl, prodh
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4187 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;Total ram usage:        6 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    7
  4194 ;; This function calls:
  4195 ;;		Nothing
  4196 ;; This function is called by:
  4197 ;;		_printf
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text17
  4202  00238A                     __ptext17:
  4203                           	opt stack 0
  4204  00238A                     ___wmul:
  4205                           	opt stack 21
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;incstack = 0
  4209  00238A  0100               	movlb	0	; () banked
  4210  00238C  5190               	movf	___wmul@multiplier& (0+255),w,b
  4211  00238E  0100               	movlb	0	; () banked
  4212  002390  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4213  002392  CFF3 F094          	movff	prodl,___wmul@product
  4214  002396  CFF4 F095          	movff	prodh,___wmul@product+1
  4215  00239A  0100               	movlb	0	; () banked
  4216  00239C  5190               	movf	___wmul@multiplier& (0+255),w,b
  4217  00239E  0100               	movlb	0	; () banked
  4218  0023A0  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4219  0023A2  50F3               	movf	prodl,w,c
  4220  0023A4  0100               	movlb	0	; () banked
  4221  0023A6  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4222  0023A8  0100               	movlb	0	; () banked
  4223  0023AA  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4224  0023AC  0100               	movlb	0	; () banked
  4225  0023AE  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4226  0023B0  50F3               	movf	prodl,w,c
  4227  0023B2  0100               	movlb	0	; () banked
  4228  0023B4  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4229                           
  4230                           ; BSR set to: 0
  4231  0023B6  C094  F090         	movff	___wmul@product,?___wmul
  4232  0023BA  C095  F091         	movff	___wmul@product+1,?___wmul+1
  4233  0023BE  0012               	return	
  4234  0023C0                     __end_of___wmul:
  4235                           	opt stack 0
  4236                           tblptru	equ	0xFF8
  4237                           tblptrh	equ	0xFF7
  4238                           tblptrl	equ	0xFF6
  4239                           tablat	equ	0xFF5
  4240                           prodh	equ	0xFF4
  4241                           prodl	equ	0xFF3
  4242                           intcon	equ	0xFF2
  4243                           intcon2	equ	0xFF1
  4244                           intcon3	equ	0xFF0
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           indf2	equ	0xFDF
  4248                           postinc2	equ	0xFDE
  4249                           postdec2	equ	0xFDD
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8
  4253                           
  4254 ;; *************** function ___lwmod *****************
  4255 ;; Defined at:
  4256 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  dividend        2   23[BANK0 ] unsigned int 
  4259 ;;  divisor         2   25[BANK0 ] unsigned int 
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;  counter         1   27[BANK0 ] unsigned char 
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  2   23[BANK0 ] unsigned int 
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, status,0
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4271 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;Total ram usage:        5 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    7
  4278 ;; This function calls:
  4279 ;;		Nothing
  4280 ;; This function is called by:
  4281 ;;		_printf
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text18
  4286  001FB8                     __ptext18:
  4287                           	opt stack 0
  4288  001FB8                     ___lwmod:
  4289                           	opt stack 21
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;incstack = 0
  4293  001FB8  0100               	movlb	0	; () banked
  4294  001FBA  5199               	movf	___lwmod@divisor& (0+255),w,b
  4295  001FBC  0100               	movlb	0	; () banked
  4296  001FBE  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4297  001FC0  B4D8               	btfsc	status,2,c
  4298  001FC2  D026               	goto	l809
  4299                           
  4300                           ; BSR set to: 0
  4301  001FC4  0E01               	movlw	1
  4302  001FC6  0100               	movlb	0	; () banked
  4303  001FC8  6F9B               	movwf	___lwmod@counter& (0+255),b
  4304  001FCA  D006               	goto	l3181
  4305  001FCC                     l3179:
  4306                           
  4307                           ; BSR set to: 0
  4308  001FCC  0100               	movlb	0	; () banked
  4309  001FCE  90D8               	bcf	status,0,c
  4310  001FD0  3799               	rlcf	___lwmod@divisor& (0+255),f,b
  4311  001FD2  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4312  001FD4  0100               	movlb	0	; () banked
  4313  001FD6  2B9B               	incf	___lwmod@counter& (0+255),f,b
  4314  001FD8                     l3181:
  4315                           
  4316                           ; BSR set to: 0
  4317  001FD8  0100               	movlb	0	; () banked
  4318  001FDA  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4319  001FDC  D7F7               	goto	l3179
  4320  001FDE                     l3183:
  4321                           
  4322                           ; BSR set to: 0
  4323  001FDE  0100               	movlb	0	; () banked
  4324  001FE0  5199               	movf	___lwmod@divisor& (0+255),w,b
  4325  001FE2  0100               	movlb	0	; () banked
  4326  001FE4  5D97               	subwf	___lwmod@dividend& (0+255),w,b
  4327  001FE6  0100               	movlb	0	; () banked
  4328  001FE8  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4329  001FEA  0100               	movlb	0	; () banked
  4330  001FEC  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4331  001FEE  A0D8               	btfss	status,0,c
  4332  001FF0  D008               	goto	l3187
  4333                           
  4334                           ; BSR set to: 0
  4335  001FF2  0100               	movlb	0	; () banked
  4336  001FF4  5199               	movf	___lwmod@divisor& (0+255),w,b
  4337  001FF6  0100               	movlb	0	; () banked
  4338  001FF8  5F97               	subwf	___lwmod@dividend& (0+255),f,b
  4339  001FFA  0100               	movlb	0	; () banked
  4340  001FFC  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4341  001FFE  0100               	movlb	0	; () banked
  4342  002000  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4343  002002                     l3187:
  4344                           
  4345                           ; BSR set to: 0
  4346  002002  0100               	movlb	0	; () banked
  4347  002004  90D8               	bcf	status,0,c
  4348  002006  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4349  002008  3399               	rrcf	___lwmod@divisor& (0+255),f,b
  4350                           
  4351                           ; BSR set to: 0
  4352  00200A  0100               	movlb	0	; () banked
  4353  00200C  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  4354  00200E  D7E7               	goto	l3183
  4355  002010                     l809:
  4356                           
  4357                           ; BSR set to: 0
  4358  002010  C097  F097         	movff	___lwmod@dividend,?___lwmod
  4359  002014  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
  4360                           
  4361                           ; BSR set to: 0
  4362  002018  0012               	return		;funcret
  4363  00201A                     __end_of___lwmod:
  4364                           	opt stack 0
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           intcon	equ	0xFF2
  4372                           intcon2	equ	0xFF1
  4373                           intcon3	equ	0xFF0
  4374                           postinc0	equ	0xFEE
  4375                           wreg	equ	0xFE8
  4376                           indf2	equ	0xFDF
  4377                           postinc2	equ	0xFDE
  4378                           postdec2	equ	0xFDD
  4379                           fsr2h	equ	0xFDA
  4380                           fsr2l	equ	0xFD9
  4381                           status	equ	0xFD8
  4382                           
  4383 ;; *************** function ___lwdiv *****************
  4384 ;; Defined at:
  4385 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;  dividend        2   16[BANK0 ] unsigned int 
  4388 ;;  divisor         2   18[BANK0 ] unsigned int 
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;  quotient        2   20[BANK0 ] unsigned int 
  4391 ;;  counter         1   22[BANK0 ] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  2   16[BANK0 ] unsigned int 
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, status,0
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4401 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;Total ram usage:        7 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    7
  4408 ;; This function calls:
  4409 ;;		Nothing
  4410 ;; This function is called by:
  4411 ;;		_printf
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text19
  4416  001E60                     __ptext19:
  4417                           	opt stack 0
  4418  001E60                     ___lwdiv:
  4419                           	opt stack 21
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;incstack = 0
  4423  001E60  0E00               	movlw	0
  4424  001E62  0100               	movlb	0	; () banked
  4425  001E64  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4426  001E66  0E00               	movlw	0
  4427  001E68  6F94               	movwf	___lwdiv@quotient& (0+255),b
  4428                           
  4429                           ; BSR set to: 0
  4430  001E6A  0100               	movlb	0	; () banked
  4431  001E6C  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4432  001E6E  0100               	movlb	0	; () banked
  4433  001E70  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4434  001E72  B4D8               	btfsc	status,2,c
  4435  001E74  D02C               	goto	l799
  4436                           
  4437                           ; BSR set to: 0
  4438  001E76  0E01               	movlw	1
  4439  001E78  0100               	movlb	0	; () banked
  4440  001E7A  6F96               	movwf	___lwdiv@counter& (0+255),b
  4441  001E7C  D006               	goto	l3161
  4442  001E7E                     l3159:
  4443                           
  4444                           ; BSR set to: 0
  4445  001E7E  0100               	movlb	0	; () banked
  4446  001E80  90D8               	bcf	status,0,c
  4447  001E82  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
  4448  001E84  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4449  001E86  0100               	movlb	0	; () banked
  4450  001E88  2B96               	incf	___lwdiv@counter& (0+255),f,b
  4451  001E8A                     l3161:
  4452                           
  4453                           ; BSR set to: 0
  4454  001E8A  0100               	movlb	0	; () banked
  4455  001E8C  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4456  001E8E  D7F7               	goto	l3159
  4457  001E90                     l3163:
  4458                           
  4459                           ; BSR set to: 0
  4460  001E90  0100               	movlb	0	; () banked
  4461  001E92  90D8               	bcf	status,0,c
  4462  001E94  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  4463  001E96  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4464                           
  4465                           ; BSR set to: 0
  4466  001E98  0100               	movlb	0	; () banked
  4467  001E9A  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4468  001E9C  0100               	movlb	0	; () banked
  4469  001E9E  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
  4470  001EA0  0100               	movlb	0	; () banked
  4471  001EA2  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4472  001EA4  0100               	movlb	0	; () banked
  4473  001EA6  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4474  001EA8  A0D8               	btfss	status,0,c
  4475  001EAA  D00A               	goto	l3171
  4476                           
  4477                           ; BSR set to: 0
  4478  001EAC  0100               	movlb	0	; () banked
  4479  001EAE  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4480  001EB0  0100               	movlb	0	; () banked
  4481  001EB2  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
  4482  001EB4  0100               	movlb	0	; () banked
  4483  001EB6  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4484  001EB8  0100               	movlb	0	; () banked
  4485  001EBA  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4486                           
  4487                           ; BSR set to: 0
  4488  001EBC  0100               	movlb	0	; () banked
  4489  001EBE  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  4490  001EC0                     l3171:
  4491                           
  4492                           ; BSR set to: 0
  4493  001EC0  0100               	movlb	0	; () banked
  4494  001EC2  90D8               	bcf	status,0,c
  4495  001EC4  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4496  001EC6  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
  4497                           
  4498                           ; BSR set to: 0
  4499  001EC8  0100               	movlb	0	; () banked
  4500  001ECA  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  4501  001ECC  D7E1               	goto	l3163
  4502  001ECE                     l799:
  4503                           
  4504                           ; BSR set to: 0
  4505  001ECE  C094  F090         	movff	___lwdiv@quotient,?___lwdiv
  4506  001ED2  C095  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4507                           
  4508                           ; BSR set to: 0
  4509  001ED6  0012               	return		;funcret
  4510  001ED8                     __end_of___lwdiv:
  4511                           	opt stack 0
  4512                           tblptru	equ	0xFF8
  4513                           tblptrh	equ	0xFF7
  4514                           tblptrl	equ	0xFF6
  4515                           tablat	equ	0xFF5
  4516                           prodh	equ	0xFF4
  4517                           prodl	equ	0xFF3
  4518                           intcon	equ	0xFF2
  4519                           intcon2	equ	0xFF1
  4520                           intcon3	equ	0xFF0
  4521                           postinc0	equ	0xFEE
  4522                           wreg	equ	0xFE8
  4523                           indf2	equ	0xFDF
  4524                           postinc2	equ	0xFDE
  4525                           postdec2	equ	0xFDD
  4526                           fsr2h	equ	0xFDA
  4527                           fsr2l	equ	0xFD9
  4528                           status	equ	0xFD8
  4529                           
  4530 ;; *************** function _lcdInst *****************
  4531 ;; Defined at:
  4532 ;;		line 26 in file "lcd.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;  data            1    wreg     unsigned char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  data            1   18[BANK0 ] unsigned char 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg, status,2, status,0, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;Total ram usage:        1 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    8
  4553 ;; This function calls:
  4554 ;;		_lcdNibble
  4555 ;; This function is called by:
  4556 ;;		_initLCD
  4557 ;;		_standby
  4558 ;;		_date_time
  4559 ;;		_bottle_count
  4560 ;;		_bottle_time
  4561 ;;		_operation
  4562 ;;		_operationend
  4563 ;;		_emergencystop
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text20
  4568  00250E                     __ptext20:
  4569                           	opt stack 0
  4570  00250E                     _lcdInst:
  4571                           	opt stack 21
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;incstack = 0
  4575                           ;lcdInst@data stored from wreg
  4576  00250E  0100               	movlb	0	; () banked
  4577  002510  6F92               	movwf	lcdInst@data& (0+255),b
  4578                           
  4579                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4580  002512  948C               	bcf	3980,2,c	;volatile
  4581                           
  4582                           ;lcd.c: 28: lcdNibble(data);
  4583  002514  0100               	movlb	0	; () banked
  4584  002516  5192               	movf	lcdInst@data& (0+255),w,b
  4585  002518  EC0D  F010         	call	_lcdNibble
  4586  00251C  0012               	return		;funcret
  4587  00251E                     __end_of_lcdInst:
  4588                           	opt stack 0
  4589                           tblptru	equ	0xFF8
  4590                           tblptrh	equ	0xFF7
  4591                           tblptrl	equ	0xFF6
  4592                           tablat	equ	0xFF5
  4593                           prodh	equ	0xFF4
  4594                           prodl	equ	0xFF3
  4595                           intcon	equ	0xFF2
  4596                           intcon2	equ	0xFF1
  4597                           intcon3	equ	0xFF0
  4598                           postinc0	equ	0xFEE
  4599                           wreg	equ	0xFE8
  4600                           indf2	equ	0xFDF
  4601                           postinc2	equ	0xFDE
  4602                           postdec2	equ	0xFDD
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function _lcdNibble *****************
  4608 ;; Defined at:
  4609 ;;		line 36 in file "lcd.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  data            1    wreg     unsigned char 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  data            1   17[BANK0 ] unsigned char 
  4614 ;;  temp            1   16[BANK0 ] unsigned char 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;Total ram usage:        2 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    7
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		_lcdInst
  4635 ;;		_putch
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text21
  4640  00201A                     __ptext21:
  4641                           	opt stack 0
  4642  00201A                     _lcdNibble:
  4643                           	opt stack 20
  4644                           
  4645                           ;incstack = 0
  4646                           ;lcdNibble@data stored from wreg
  4647  00201A  0100               	movlb	0	; () banked
  4648  00201C  6F91               	movwf	lcdNibble@data& (0+255),b
  4649                           
  4650                           ;lcd.c: 38: char temp = data & 0xF0;
  4651  00201E  0100               	movlb	0	; () banked
  4652  002020  5191               	movf	lcdNibble@data& (0+255),w,b
  4653  002022  0BF0               	andlw	240
  4654  002024  0100               	movlb	0	; () banked
  4655  002026  6F90               	movwf	lcdNibble@temp& (0+255),b
  4656                           
  4657                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4658  002028  508C               	movf	3980,w,c	;volatile
  4659  00202A  0B0F               	andlw	15
  4660  00202C  6E8C               	movwf	3980,c	;volatile
  4661                           
  4662                           ;lcd.c: 40: LATD = temp | LATD;
  4663  00202E  0100               	movlb	0	; () banked
  4664  002030  5190               	movf	lcdNibble@temp& (0+255),w,b
  4665  002032  108C               	iorwf	3980,w,c	;volatile
  4666  002034  6E8C               	movwf	3980,c	;volatile
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4670  002036  968C               	bcf	3980,3,c	;volatile
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4674  002038  0E19               	movlw	25
  4675  00203A                     u3817:
  4676  00203A  2EE8               	decfsz	wreg,f,c
  4677  00203C  D7FE               	bra	u3817
  4678                           
  4679                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4680  00203E  868C               	bsf	3980,3,c	;volatile
  4681                           
  4682                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4683  002040  0E19               	movlw	25
  4684  002042                     u3827:
  4685  002042  2EE8               	decfsz	wreg,f,c
  4686  002044  D7FE               	bra	u3827
  4687                           
  4688                           ;lcd.c: 47: data = data << 4;
  4689  002046  0100               	movlb	0	; () banked
  4690  002048  3991               	swapf	lcdNibble@data& (0+255),w,b
  4691  00204A  0BF0               	andlw	240
  4692  00204C  0100               	movlb	0	; () banked
  4693  00204E  6F91               	movwf	lcdNibble@data& (0+255),b
  4694                           
  4695                           ;lcd.c: 49: temp = data & 0xF0;
  4696  002050  0100               	movlb	0	; () banked
  4697  002052  5191               	movf	lcdNibble@data& (0+255),w,b
  4698  002054  0BF0               	andlw	240
  4699  002056  0100               	movlb	0	; () banked
  4700  002058  6F90               	movwf	lcdNibble@temp& (0+255),b
  4701                           
  4702                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4703  00205A  508C               	movf	3980,w,c	;volatile
  4704  00205C  0B0F               	andlw	15
  4705  00205E  6E8C               	movwf	3980,c	;volatile
  4706                           
  4707                           ;lcd.c: 51: LATD = temp | LATD;
  4708  002060  0100               	movlb	0	; () banked
  4709  002062  5190               	movf	lcdNibble@temp& (0+255),w,b
  4710  002064  108C               	iorwf	3980,w,c	;volatile
  4711  002066  6E8C               	movwf	3980,c	;volatile
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4715  002068  968C               	bcf	3980,3,c	;volatile
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4719  00206A  0E19               	movlw	25
  4720  00206C                     u3837:
  4721  00206C  2EE8               	decfsz	wreg,f,c
  4722  00206E  D7FE               	bra	u3837
  4723                           
  4724                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4725  002070  868C               	bsf	3980,3,c	;volatile
  4726                           
  4727                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4728  002072  0E19               	movlw	25
  4729  002074                     u3847:
  4730  002074  2EE8               	decfsz	wreg,f,c
  4731  002076  D7FE               	bra	u3847
  4732  002078  0012               	return		;funcret
  4733  00207A                     __end_of_lcdNibble:
  4734                           	opt stack 0
  4735                           tblptru	equ	0xFF8
  4736                           tblptrh	equ	0xFF7
  4737                           tblptrl	equ	0xFF6
  4738                           tablat	equ	0xFF5
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           intcon	equ	0xFF2
  4742                           intcon2	equ	0xFF1
  4743                           intcon3	equ	0xFF0
  4744                           postinc0	equ	0xFEE
  4745                           wreg	equ	0xFE8
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function ___awmod *****************
  4754 ;; Defined at:
  4755 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  dividend        2   16[BANK0 ] int 
  4758 ;;  divisor         2   18[BANK0 ] int 
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  sign            1   21[BANK0 ] unsigned char 
  4761 ;;  counter         1   20[BANK0 ] unsigned char 
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  2   16[BANK0 ] int 
  4764 ;; Registers used:
  4765 ;;		wreg, status,2, status,0
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4771 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4774 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;Total ram usage:        6 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    7
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		_bottle_count
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text22
  4786  001B88                     __ptext22:
  4787                           	opt stack 0
  4788  001B88                     ___awmod:
  4789                           	opt stack 22
  4790                           
  4791                           ;incstack = 0
  4792  001B88  0E00               	movlw	0
  4793  001B8A  0100               	movlb	0	; () banked
  4794  001B8C  6F95               	movwf	___awmod@sign& (0+255),b
  4795                           
  4796                           ; BSR set to: 0
  4797  001B8E  0100               	movlb	0	; () banked
  4798  001B90  AF91               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4799  001B92  D008               	goto	l3567
  4800                           
  4801                           ; BSR set to: 0
  4802  001B94  0100               	movlb	0	; () banked
  4803  001B96  6D90               	negf	___awmod@dividend& (0+255),b
  4804  001B98  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  4805  001B9A  B0D8               	btfsc	status,0,c
  4806  001B9C  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  4807                           
  4808                           ; BSR set to: 0
  4809  001B9E  0E01               	movlw	1
  4810  001BA0  0100               	movlb	0	; () banked
  4811  001BA2  6F95               	movwf	___awmod@sign& (0+255),b
  4812  001BA4                     l3567:
  4813                           
  4814                           ; BSR set to: 0
  4815  001BA4  0100               	movlb	0	; () banked
  4816  001BA6  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4817  001BA8  D005               	goto	l3571
  4818                           
  4819                           ; BSR set to: 0
  4820  001BAA  0100               	movlb	0	; () banked
  4821  001BAC  6D92               	negf	___awmod@divisor& (0+255),b
  4822  001BAE  1F93               	comf	(___awmod@divisor+1)& (0+255),f,b
  4823  001BB0  B0D8               	btfsc	status,0,c
  4824  001BB2  2B93               	incf	(___awmod@divisor+1)& (0+255),f,b
  4825  001BB4                     l3571:
  4826                           
  4827                           ; BSR set to: 0
  4828  001BB4  0100               	movlb	0	; () banked
  4829  001BB6  5192               	movf	___awmod@divisor& (0+255),w,b
  4830  001BB8  0100               	movlb	0	; () banked
  4831  001BBA  1193               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4832  001BBC  B4D8               	btfsc	status,2,c
  4833  001BBE  D026               	goto	l3587
  4834                           
  4835                           ; BSR set to: 0
  4836  001BC0  0E01               	movlw	1
  4837  001BC2  0100               	movlb	0	; () banked
  4838  001BC4  6F94               	movwf	___awmod@counter& (0+255),b
  4839  001BC6  D006               	goto	l3577
  4840  001BC8                     l3575:
  4841                           
  4842                           ; BSR set to: 0
  4843  001BC8  0100               	movlb	0	; () banked
  4844  001BCA  90D8               	bcf	status,0,c
  4845  001BCC  3792               	rlcf	___awmod@divisor& (0+255),f,b
  4846  001BCE  3793               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4847  001BD0  0100               	movlb	0	; () banked
  4848  001BD2  2B94               	incf	___awmod@counter& (0+255),f,b
  4849  001BD4                     l3577:
  4850                           
  4851                           ; BSR set to: 0
  4852  001BD4  0100               	movlb	0	; () banked
  4853  001BD6  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4854  001BD8  D7F7               	goto	l3575
  4855  001BDA                     l3579:
  4856                           
  4857                           ; BSR set to: 0
  4858  001BDA  0100               	movlb	0	; () banked
  4859  001BDC  5192               	movf	___awmod@divisor& (0+255),w,b
  4860  001BDE  0100               	movlb	0	; () banked
  4861  001BE0  5D90               	subwf	___awmod@dividend& (0+255),w,b
  4862  001BE2  0100               	movlb	0	; () banked
  4863  001BE4  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  4864  001BE6  0100               	movlb	0	; () banked
  4865  001BE8  5991               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4866  001BEA  A0D8               	btfss	status,0,c
  4867  001BEC  D008               	goto	l3583
  4868                           
  4869                           ; BSR set to: 0
  4870  001BEE  0100               	movlb	0	; () banked
  4871  001BF0  5192               	movf	___awmod@divisor& (0+255),w,b
  4872  001BF2  0100               	movlb	0	; () banked
  4873  001BF4  5F90               	subwf	___awmod@dividend& (0+255),f,b
  4874  001BF6  0100               	movlb	0	; () banked
  4875  001BF8  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  4876  001BFA  0100               	movlb	0	; () banked
  4877  001BFC  5B91               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4878  001BFE                     l3583:
  4879                           
  4880                           ; BSR set to: 0
  4881  001BFE  0100               	movlb	0	; () banked
  4882  001C00  90D8               	bcf	status,0,c
  4883  001C02  3393               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4884  001C04  3392               	rrcf	___awmod@divisor& (0+255),f,b
  4885                           
  4886                           ; BSR set to: 0
  4887  001C06  0100               	movlb	0	; () banked
  4888  001C08  2F94               	decfsz	___awmod@counter& (0+255),f,b
  4889  001C0A  D7E7               	goto	l3579
  4890  001C0C                     l3587:
  4891                           
  4892                           ; BSR set to: 0
  4893  001C0C  0100               	movlb	0	; () banked
  4894  001C0E  5195               	movf	___awmod@sign& (0+255),w,b
  4895  001C10  0100               	movlb	0	; () banked
  4896  001C12  B4D8               	btfsc	status,2,c
  4897  001C14  D005               	goto	l3591
  4898                           
  4899                           ; BSR set to: 0
  4900  001C16  0100               	movlb	0	; () banked
  4901  001C18  6D90               	negf	___awmod@dividend& (0+255),b
  4902  001C1A  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  4903  001C1C  B0D8               	btfsc	status,0,c
  4904  001C1E  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  4905  001C20                     l3591:
  4906                           
  4907                           ; BSR set to: 0
  4908  001C20  C090  F090         	movff	___awmod@dividend,?___awmod
  4909  001C24  C091  F091         	movff	___awmod@dividend+1,?___awmod+1
  4910  001C28  0012               	return	
  4911  001C2A                     __end_of___awmod:
  4912                           	opt stack 0
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           prodh	equ	0xFF4
  4918                           prodl	equ	0xFF3
  4919                           intcon	equ	0xFF2
  4920                           intcon2	equ	0xFF1
  4921                           intcon3	equ	0xFF0
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           indf2	equ	0xFDF
  4925                           postinc2	equ	0xFDE
  4926                           postdec2	equ	0xFDD
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931 ;; *************** function _I2C_Master_Init *****************
  4932 ;; Defined at:
  4933 ;;		line 13 in file "I2C.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  c               4   29[BANK0 ] const unsigned long 
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;		None
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  1    wreg      void 
  4940 ;; Registers used:
  4941 ;;		wreg, status,2, status,0, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4947 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4949 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4950 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4951 ;;Total ram usage:        8 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    8
  4954 ;; This function calls:
  4955 ;;		___lldiv
  4956 ;; This function is called by:
  4957 ;;		_main
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text23
  4962  00207A                     __ptext23:
  4963                           	opt stack 0
  4964  00207A                     _I2C_Master_Init:
  4965                           	opt stack 22
  4966                           
  4967                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;incstack = 0
  4971  00207A  0E00               	movlw	0
  4972  00207C  6EC7               	movwf	4039,c	;volatile
  4973                           
  4974                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  4975  00207E  0E28               	movlw	40
  4976  002080  6EC6               	movwf	4038,c	;volatile
  4977                           
  4978                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  4979  002082  0E00               	movlw	0
  4980  002084  6EC5               	movwf	4037,c	;volatile
  4981                           
  4982                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  4983  002086  0E80               	movlw	128
  4984  002088  0100               	movlb	0	; () banked
  4985  00208A  6F90               	movwf	___lldiv@dividend& (0+255),b
  4986  00208C  0E96               	movlw	150
  4987  00208E  6F91               	movwf	(___lldiv@dividend+1)& (0+255),b
  4988  002090  0E98               	movlw	152
  4989  002092  6F92               	movwf	(___lldiv@dividend+2)& (0+255),b
  4990  002094  0E00               	movlw	0
  4991  002096  6F93               	movwf	(___lldiv@dividend+3)& (0+255),b
  4992  002098  C09D  F0A1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4993  00209C  C09E  F0A2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4994  0020A0  C09F  F0A3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4995  0020A4  C0A0  F0A4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4996  0020A8  0E02               	movlw	2
  4997  0020AA                     u3615:
  4998  0020AA  90D8               	bcf	status,0,c
  4999  0020AC  0100               	movlb	0	; () banked
  5000  0020AE  37A1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5001  0020B0  37A2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5002  0020B2  37A3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5003  0020B4  37A4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5004  0020B6  2EE8               	decfsz	wreg,f,c
  5005  0020B8  D7F8               	goto	u3615
  5006  0020BA  C0A1  F094         	movff	??_I2C_Master_Init,___lldiv@divisor
  5007  0020BE  C0A2  F095         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5008  0020C2  C0A3  F096         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5009  0020C6  C0A4  F097         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5010  0020CA  ECBB  F00C         	call	___lldiv	;wreg free
  5011  0020CE  0100               	movlb	0	; () banked
  5012  0020D0  0590               	decf	?___lldiv& (0+255),w,b
  5013  0020D2  6EC8               	movwf	4040,c	;volatile
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;I2C.c: 20: TRISC3 = 1;
  5017  0020D4  8694               	bsf	3988,3,c	;volatile
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;I2C.c: 21: TRISC4 = 1;
  5021  0020D6  8894               	bsf	3988,4,c	;volatile
  5022                           
  5023                           ; BSR set to: 0
  5024  0020D8  0012               	return		;funcret
  5025  0020DA                     __end_of_I2C_Master_Init:
  5026                           	opt stack 0
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           intcon	equ	0xFF2
  5034                           intcon2	equ	0xFF1
  5035                           intcon3	equ	0xFF0
  5036                           postinc0	equ	0xFEE
  5037                           wreg	equ	0xFE8
  5038                           indf2	equ	0xFDF
  5039                           postinc2	equ	0xFDE
  5040                           postdec2	equ	0xFDD
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045 ;; *************** function ___lldiv *****************
  5046 ;; Defined at:
  5047 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  dividend        4   16[BANK0 ] unsigned long 
  5050 ;;  divisor         4   20[BANK0 ] unsigned long 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  quotient        4   24[BANK0 ] unsigned long 
  5053 ;;  counter         1   28[BANK0 ] unsigned char 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  4   16[BANK0 ] unsigned long 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5063 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;Total ram usage:       13 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; Hardware stack levels required when called:    7
  5070 ;; This function calls:
  5071 ;;		Nothing
  5072 ;; This function is called by:
  5073 ;;		_I2C_Master_Init
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text24
  5078  001976                     __ptext24:
  5079                           	opt stack 0
  5080  001976                     ___lldiv:
  5081                           	opt stack 22
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;incstack = 0
  5085  001976  0E00               	movlw	0
  5086  001978  0100               	movlb	0	; () banked
  5087  00197A  6F98               	movwf	___lldiv@quotient& (0+255),b
  5088  00197C  0E00               	movlw	0
  5089  00197E  6F99               	movwf	(___lldiv@quotient+1)& (0+255),b
  5090  001980  0E00               	movlw	0
  5091  001982  6F9A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5092  001984  0E00               	movlw	0
  5093  001986  6F9B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5094                           
  5095                           ; BSR set to: 0
  5096  001988  0100               	movlb	0	; () banked
  5097  00198A  5194               	movf	___lldiv@divisor& (0+255),w,b
  5098  00198C  0100               	movlb	0	; () banked
  5099  00198E  1195               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5100  001990  0100               	movlb	0	; () banked
  5101  001992  1196               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5102  001994  0100               	movlb	0	; () banked
  5103  001996  1197               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5104  001998  B4D8               	btfsc	status,2,c
  5105  00199A  D042               	goto	l746
  5106                           
  5107                           ; BSR set to: 0
  5108  00199C  0E01               	movlw	1
  5109  00199E  0100               	movlb	0	; () banked
  5110  0019A0  6F9C               	movwf	___lldiv@counter& (0+255),b
  5111  0019A2  D008               	goto	l3603
  5112  0019A4                     l3601:
  5113                           
  5114                           ; BSR set to: 0
  5115  0019A4  0100               	movlb	0	; () banked
  5116  0019A6  90D8               	bcf	status,0,c
  5117  0019A8  3794               	rlcf	___lldiv@divisor& (0+255),f,b
  5118  0019AA  3795               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5119  0019AC  3796               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5120  0019AE  3797               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5121  0019B0  0100               	movlb	0	; () banked
  5122  0019B2  2B9C               	incf	___lldiv@counter& (0+255),f,b
  5123  0019B4                     l3603:
  5124                           
  5125                           ; BSR set to: 0
  5126  0019B4  0100               	movlb	0	; () banked
  5127  0019B6  AF97               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5128  0019B8  D7F5               	goto	l3601
  5129  0019BA                     l3605:
  5130                           
  5131                           ; BSR set to: 0
  5132  0019BA  0100               	movlb	0	; () banked
  5133  0019BC  90D8               	bcf	status,0,c
  5134  0019BE  3798               	rlcf	___lldiv@quotient& (0+255),f,b
  5135  0019C0  3799               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5136  0019C2  379A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5137  0019C4  379B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5138                           
  5139                           ; BSR set to: 0
  5140  0019C6  0100               	movlb	0	; () banked
  5141  0019C8  5194               	movf	___lldiv@divisor& (0+255),w,b
  5142  0019CA  0100               	movlb	0	; () banked
  5143  0019CC  5D90               	subwf	___lldiv@dividend& (0+255),w,b
  5144  0019CE  0100               	movlb	0	; () banked
  5145  0019D0  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5146  0019D2  0100               	movlb	0	; () banked
  5147  0019D4  5991               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5148  0019D6  0100               	movlb	0	; () banked
  5149  0019D8  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5150  0019DA  0100               	movlb	0	; () banked
  5151  0019DC  5992               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5152  0019DE  0100               	movlb	0	; () banked
  5153  0019E0  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5154  0019E2  0100               	movlb	0	; () banked
  5155  0019E4  5993               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5156  0019E6  A0D8               	btfss	status,0,c
  5157  0019E8  D012               	goto	l3613
  5158                           
  5159                           ; BSR set to: 0
  5160  0019EA  0100               	movlb	0	; () banked
  5161  0019EC  5194               	movf	___lldiv@divisor& (0+255),w,b
  5162  0019EE  0100               	movlb	0	; () banked
  5163  0019F0  5F90               	subwf	___lldiv@dividend& (0+255),f,b
  5164  0019F2  0100               	movlb	0	; () banked
  5165  0019F4  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5166  0019F6  0100               	movlb	0	; () banked
  5167  0019F8  5B91               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5168  0019FA  0100               	movlb	0	; () banked
  5169  0019FC  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5170  0019FE  0100               	movlb	0	; () banked
  5171  001A00  5B92               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5172  001A02  0100               	movlb	0	; () banked
  5173  001A04  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5174  001A06  0100               	movlb	0	; () banked
  5175  001A08  5B93               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5176                           
  5177                           ; BSR set to: 0
  5178  001A0A  0100               	movlb	0	; () banked
  5179  001A0C  8198               	bsf	___lldiv@quotient& (0+255),0,b
  5180  001A0E                     l3613:
  5181                           
  5182                           ; BSR set to: 0
  5183  001A0E  0100               	movlb	0	; () banked
  5184  001A10  90D8               	bcf	status,0,c
  5185  001A12  3397               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5186  001A14  3396               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5187  001A16  3395               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5188  001A18  3394               	rrcf	___lldiv@divisor& (0+255),f,b
  5189                           
  5190                           ; BSR set to: 0
  5191  001A1A  0100               	movlb	0	; () banked
  5192  001A1C  2F9C               	decfsz	___lldiv@counter& (0+255),f,b
  5193  001A1E  D7CD               	goto	l3605
  5194  001A20                     l746:
  5195                           
  5196                           ; BSR set to: 0
  5197  001A20  C098  F090         	movff	___lldiv@quotient,?___lldiv
  5198  001A24  C099  F091         	movff	___lldiv@quotient+1,?___lldiv+1
  5199  001A28  C09A  F092         	movff	___lldiv@quotient+2,?___lldiv+2
  5200  001A2C  C09B  F093         	movff	___lldiv@quotient+3,?___lldiv+3
  5201                           
  5202                           ; BSR set to: 0
  5203  001A30  0012               	return		;funcret
  5204  001A32                     __end_of___lldiv:
  5205                           	opt stack 0
  5206                           tblptru	equ	0xFF8
  5207                           tblptrh	equ	0xFF7
  5208                           tblptrl	equ	0xFF6
  5209                           tablat	equ	0xFF5
  5210                           prodh	equ	0xFF4
  5211                           prodl	equ	0xFF3
  5212                           intcon	equ	0xFF2
  5213                           intcon2	equ	0xFF1
  5214                           intcon3	equ	0xFF0
  5215                           postinc0	equ	0xFEE
  5216                           wreg	equ	0xFE8
  5217                           indf2	equ	0xFDF
  5218                           postinc2	equ	0xFDE
  5219                           postdec2	equ	0xFDD
  5220                           fsr2h	equ	0xFDA
  5221                           fsr2l	equ	0xFD9
  5222                           status	equ	0xFD8
  5223                           
  5224 ;; *************** function _isr *****************
  5225 ;; Defined at:
  5226 ;;		line 133 in file "main.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  i               1  116[COMRAM] unsigned char 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      void 
  5233 ;; Registers used:
  5234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5244 ;;Total ram usage:       19 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    6
  5247 ;; This function calls:
  5248 ;;		_dec_to_hex
  5249 ;;		_read_colorsensor
  5250 ;;		_read_time
  5251 ;;		_servo_rotate
  5252 ;;		i2___wmul
  5253 ;;		i2_lcdInst
  5254 ;;		i2_printf
  5255 ;; This function is called by:
  5256 ;;		Interrupt level 2
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           	psect	intcode
  5261  000008                     __pintcode:
  5262                           	opt stack 0
  5263  000008                     _isr:
  5264                           	opt stack 20
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;incstack = 0
  5268  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5269  00000A  ED69  F003         	call	int_func,f	;refresh shadow registers
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           intcon2	equ	0xFF1
  5278                           intcon3	equ	0xFF0
  5279                           postinc0	equ	0xFEE
  5280                           wreg	equ	0xFE8
  5281                           indf2	equ	0xFDF
  5282                           postinc2	equ	0xFDE
  5283                           postdec2	equ	0xFDD
  5284                           fsr2h	equ	0xFDA
  5285                           fsr2l	equ	0xFD9
  5286                           status	equ	0xFD8
  5287                           
  5288                           	psect	intcode_body
  5289  0006D2                     __pintcode_body:
  5290                           	opt stack 20
  5291  0006D2                     int_func:
  5292                           	opt stack 20
  5293  0006D2  0006               	pop		; remove dummy address from shadow register refresh
  5294  0006D4  CFFA F082          	movff	pclath,??_isr+2
  5295  0006D8  CFFB F083          	movff	pclatu,??_isr+3
  5296  0006DC  CFE9 F084          	movff	fsr0l,??_isr+4
  5297  0006E0  CFEA F085          	movff	fsr0h,??_isr+5
  5298  0006E4  CFE1 F086          	movff	fsr1l,??_isr+6
  5299  0006E8  CFE2 F087          	movff	fsr1h,??_isr+7
  5300  0006EC  CFD9 F088          	movff	fsr2l,??_isr+8
  5301  0006F0  CFDA F089          	movff	fsr2h,??_isr+9
  5302  0006F4  CFF3 F08A          	movff	prodl,??_isr+10
  5303  0006F8  CFF4 F08B          	movff	prodh,??_isr+11
  5304  0006FC  CFF6 F08C          	movff	tblptrl,??_isr+12
  5305  000700  CFF7 F08D          	movff	tblptrh,??_isr+13
  5306  000704  CFF8 F08E          	movff	tblptru,??_isr+14
  5307  000708  CFF5 F08F          	movff	tablat,??_isr+15
  5308                           
  5309                           ;main.c: 134: if (INT1IF) {
  5310  00070C  B0F0               	btfsc	intcon3,0,c	;volatile
  5311  00070E  D0A3               	goto	i2l4123
  5312  000710  D0C3               	goto	i2l220
  5313  000712                     i2l4063:
  5314                           
  5315                           ;main.c: 137: curr_state = STANDBY;
  5316  000712  0E00               	movlw	0
  5317  000714  0100               	movlb	0	; () banked
  5318  000716  6FC3               	movwf	_curr_state& (0+255),b
  5319                           
  5320                           ;main.c: 138: bottle_count_disp = 0;
  5321  000718  0E00               	movlw	0
  5322  00071A  0100               	movlb	0	; () banked
  5323  00071C  6FC5               	movwf	(_bottle_count_disp+1)& (0+255),b
  5324  00071E  0E00               	movlw	0
  5325  000720  6FC4               	movwf	_bottle_count_disp& (0+255),b
  5326                           
  5327                           ;main.c: 139: break;
  5328  000722  D0B8               	goto	i2l223
  5329  000724                     i2l224:
  5330                           
  5331                           ;main.c: 141: TMR0IE = 1;
  5332  000724  8AF2               	bsf	intcon,5,c	;volatile
  5333                           
  5334                           ;main.c: 142: TMR0ON = 1;
  5335  000726  8ED5               	bsf	4053,7,c	;volatile
  5336                           
  5337                           ;main.c: 143: TMR0 = 0;
  5338  000728  0E00               	movlw	0
  5339  00072A  6ED7               	movwf	4055,c	;volatile
  5340  00072C  0E00               	movlw	0
  5341  00072E  6ED6               	movwf	4054,c	;volatile
  5342                           
  5343                           ;main.c: 144: read_time();
  5344  000730  ECA8  F00F         	call	_read_time	;wreg free
  5345                           
  5346                           ;main.c: 145: start_time[1] = time[1];
  5347  000734  C0B7  F07D         	movff	_time+1,_start_time+1
  5348                           
  5349                           ;main.c: 146: start_time[0] = time[0];
  5350  000738  C0B6  F07C         	movff	_time,_start_time
  5351                           
  5352                           ;main.c: 147: lcdInst(0b00000001);
  5353  00073C  0E01               	movlw	1
  5354  00073E  EC95  F012         	call	i2_lcdInst
  5355                           
  5356                           ;main.c: 148: curr_state = OPERATION;
  5357  000742  0E02               	movlw	2
  5358  000744  D069               	goto	L3
  5359  000746                     i2l4077:
  5360                           
  5361                           ; BSR set to: 0
  5362                           ;main.c: 149: bottle_count_disp = -1;
  5363  000746  0100               	movlb	0	; () banked
  5364  000748  69C4               	setf	_bottle_count_disp& (0+255),b
  5365  00074A  69C5               	setf	(_bottle_count_disp+1)& (0+255),b
  5366                           
  5367                           ;main.c: 150: break;
  5368  00074C  D0A3               	goto	i2l223
  5369  00074E                     i2l4079:
  5370                           
  5371                           ;main.c: 152: curr_state = BOTTLECOUNT;
  5372  00074E  0E05               	movlw	5
  5373  000750  0100               	movlb	0	; () banked
  5374  000752  6FC3               	movwf	_curr_state& (0+255),b
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;main.c: 153: bottle_count_disp += 1;
  5378  000754  0100               	movlb	0	; () banked
  5379  000756  4BC4               	infsnz	_bottle_count_disp& (0+255),f,b
  5380  000758  2BC5               	incf	(_bottle_count_disp+1)& (0+255),f,b
  5381  00075A                     i2l4083:
  5382  00075A  0E1F               	movlw	31
  5383  00075C  1881               	xorwf	3969,w,c	;volatile
  5384  00075E  A4D8               	btfss	status,2,c
  5385  000760  D099               	goto	i2l223
  5386  000762  D7FB               	goto	i2l4083
  5387  000764                     i2l4085:
  5388                           
  5389                           ;main.c: 157: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5390  000764  C07D  F063         	movff	_start_time+1,dec_to_hex@num
  5391  000768  6A64               	clrf	dec_to_hex@num+1,c
  5392  00076A  ECCF  F008         	call	_dec_to_hex	;wreg free
  5393  00076E  C063  F073         	movff	?_dec_to_hex,_isr$1308
  5394  000772  C064  F074         	movff	?_dec_to_hex+1,_isr$1308+1
  5395                           
  5396                           ;main.c: 157: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5397  000776  C073  F001         	movff	_isr$1308,i2___wmul@multiplier
  5398  00077A  C074  F002         	movff	_isr$1308+1,i2___wmul@multiplier+1
  5399  00077E  0E00               	movlw	0
  5400  000780  6E04               	movwf	i2___wmul@multiplicand+1,c
  5401  000782  0E3C               	movlw	60
  5402  000784  6E03               	movwf	i2___wmul@multiplicand,c
  5403  000786  EC1F  F012         	call	i2___wmul	;wreg free
  5404  00078A  C001  F080         	movff	?i2___wmul,??_isr
  5405  00078E  C002  F081         	movff	?i2___wmul+1,??_isr+1
  5406  000792  C07C  F063         	movff	_start_time,dec_to_hex@num
  5407  000796  6A64               	clrf	dec_to_hex@num+1,c
  5408  000798  ECCF  F008         	call	_dec_to_hex	;wreg free
  5409  00079C  5063               	movf	?_dec_to_hex,w,c
  5410  00079E  0100               	movlb	0	; () banked
  5411  0007A0  2580               	addwf	??_isr& (0+255),w,b
  5412  0007A2  0100               	movlb	0	; () banked
  5413  0007A4  6FC1               	movwf	_stime& (0+255),b
  5414  0007A6  5064               	movf	?_dec_to_hex+1,w,c
  5415  0007A8  0100               	movlb	0	; () banked
  5416  0007AA  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5417  0007AC  0100               	movlb	0	; () banked
  5418  0007AE  6FC2               	movwf	(_stime+1)& (0+255),b
  5419                           
  5420                           ;main.c: 158: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5421  0007B0  C077  F063         	movff	_end_time+1,dec_to_hex@num
  5422  0007B4  6A64               	clrf	dec_to_hex@num+1,c
  5423  0007B6  ECCF  F008         	call	_dec_to_hex	;wreg free
  5424  0007BA  C063  F073         	movff	?_dec_to_hex,_isr$1308
  5425  0007BE  C064  F074         	movff	?_dec_to_hex+1,_isr$1308+1
  5426                           
  5427                           ;main.c: 158: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5428  0007C2  C073  F001         	movff	_isr$1308,i2___wmul@multiplier
  5429  0007C6  C074  F002         	movff	_isr$1308+1,i2___wmul@multiplier+1
  5430  0007CA  0E00               	movlw	0
  5431  0007CC  6E04               	movwf	i2___wmul@multiplicand+1,c
  5432  0007CE  0E3C               	movlw	60
  5433  0007D0  6E03               	movwf	i2___wmul@multiplicand,c
  5434  0007D2  EC1F  F012         	call	i2___wmul	;wreg free
  5435  0007D6  C001  F080         	movff	?i2___wmul,??_isr
  5436  0007DA  C002  F081         	movff	?i2___wmul+1,??_isr+1
  5437  0007DE  C076  F063         	movff	_end_time,dec_to_hex@num
  5438  0007E2  6A64               	clrf	dec_to_hex@num+1,c
  5439  0007E4  ECCF  F008         	call	_dec_to_hex	;wreg free
  5440  0007E8  5063               	movf	?_dec_to_hex,w,c
  5441  0007EA  0100               	movlb	0	; () banked
  5442  0007EC  2580               	addwf	??_isr& (0+255),w,b
  5443  0007EE  0100               	movlb	0	; () banked
  5444  0007F0  6FBD               	movwf	_etime& (0+255),b
  5445  0007F2  5064               	movf	?_dec_to_hex+1,w,c
  5446  0007F4  0100               	movlb	0	; () banked
  5447  0007F6  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5448  0007F8  0100               	movlb	0	; () banked
  5449  0007FA  6FBE               	movwf	(_etime+1)& (0+255),b
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;main.c: 159: curr_state = BOTTLETIME;
  5453  0007FC  0E06               	movlw	6
  5454  0007FE  D00C               	goto	L3
  5455  000800                     i2l4091:
  5456                           
  5457                           ;main.c: 163: curr_state = DATETIME;
  5458  000800  0E04               	movlw	4
  5459  000802  D00A               	goto	L3
  5460  000804                     i2l4095:
  5461                           
  5462                           ;main.c: 167: read_time();
  5463  000804  ECA8  F00F         	call	_read_time	;wreg free
  5464                           
  5465                           ;main.c: 168: end_time[1] = time[1];
  5466  000808  C0B7  F077         	movff	_time+1,_end_time+1
  5467                           
  5468                           ;main.c: 169: end_time[0] = time[0];
  5469  00080C  C0B6  F076         	movff	_time,_end_time
  5470                           
  5471                           ;main.c: 170: lcdInst(0b00000001);
  5472  000810  0E01               	movlw	1
  5473  000812  EC95  F012         	call	i2_lcdInst
  5474                           
  5475                           ;main.c: 171: curr_state = OPERATIONEND;
  5476  000816  0E03               	movlw	3
  5477  000818                     L3:
  5478  000818  0100               	movlb	0	; () banked
  5479  00081A  6FC3               	movwf	_curr_state& (0+255),b
  5480  00081C  D794               	goto	i2l4077
  5481  00081E                     i2l4107:
  5482                           
  5483                           ;main.c: 175: lcdInst(0b00000001);
  5484  00081E  0E01               	movlw	1
  5485  000820  EC95  F012         	call	i2_lcdInst
  5486                           
  5487                           ;main.c: 176: curr_state = EMERGENCYSTOP;
  5488  000824  0E01               	movlw	1
  5489  000826  0100               	movlb	0	; () banked
  5490  000828  6FC3               	movwf	_curr_state& (0+255),b
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;main.c: 177: bottle_count_disp = -1;
  5494  00082A  0100               	movlb	0	; () banked
  5495  00082C  69C4               	setf	_bottle_count_disp& (0+255),b
  5496  00082E  69C5               	setf	(_bottle_count_disp+1)& (0+255),b
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;main.c: 178: TMR0ON = 0;
  5500  000830  9ED5               	bcf	4053,7,c	;volatile
  5501                           
  5502                           ;main.c: 179: break;
  5503  000832  D030               	goto	i2l223
  5504  000834                     i2l4115:
  5505                           
  5506                           ;main.c: 181: servo_rotate(90);
  5507  000834  0E00               	movlw	0
  5508  000836  6E02               	movwf	servo_rotate@degree+1,c
  5509  000838  0E5A               	movlw	90
  5510  00083A  6E01               	movwf	servo_rotate@degree,c
  5511  00083C  EC70  F00D         	call	_servo_rotate	;wreg free
  5512                           
  5513                           ;main.c: 182: break;
  5514  000840  D029               	goto	i2l223
  5515  000842                     i2l4117:
  5516                           
  5517                           ;main.c: 184: servo_rotate(-90);
  5518  000842  0EFF               	movlw	255
  5519  000844  6E02               	movwf	servo_rotate@degree+1,c
  5520  000846  0EA6               	movlw	166
  5521  000848  6E01               	movwf	servo_rotate@degree,c
  5522  00084A  EC70  F00D         	call	_servo_rotate	;wreg free
  5523                           
  5524                           ;main.c: 185: break;
  5525  00084E  D022               	goto	i2l223
  5526  000850                     i2l4119:
  5527                           
  5528                           ;main.c: 187: read_colorsensor();
  5529  000850  ECF5  F00B         	call	_read_colorsensor	;wreg free
  5530                           
  5531                           ;main.c: 189: }
  5532                           
  5533                           ;main.c: 188: break;
  5534  000854  D01F               	goto	i2l223
  5535  000856                     i2l4123:
  5536  000856  5081               	movf	3969,w,c	;volatile
  5537                           
  5538                           ; Switch size 1, requested type "space"
  5539                           ; Number of cases is 10, Range of values is 15 to 239
  5540                           ; switch strategies available:
  5541                           ; Name         Instructions Cycles
  5542                           ; simple_byte           31    16 (average)
  5543                           ;	Chosen strategy is simple_byte
  5544  000858  0A0F               	xorlw	15	; case 15
  5545  00085A  B4D8               	btfsc	status,2,c
  5546  00085C  D763               	goto	i2l224
  5547  00085E  0A10               	xorlw	16	; case 31
  5548  000860  B4D8               	btfsc	status,2,c
  5549  000862  D775               	goto	i2l4079
  5550  000864  0A30               	xorlw	48	; case 47
  5551  000866  B4D8               	btfsc	status,2,c
  5552  000868  D77D               	goto	i2l4085
  5553  00086A  0A10               	xorlw	16	; case 63
  5554  00086C  B4D8               	btfsc	status,2,c
  5555  00086E  D7C8               	goto	i2l4091
  5556  000870  0A70               	xorlw	112	; case 79
  5557  000872  B4D8               	btfsc	status,2,c
  5558  000874  D7C7               	goto	i2l4095
  5559  000876  0A30               	xorlw	48	; case 127
  5560  000878  B4D8               	btfsc	status,2,c
  5561  00087A  D7DC               	goto	i2l4115
  5562  00087C  0AD0               	xorlw	208	; case 175
  5563  00087E  B4D8               	btfsc	status,2,c
  5564  000880  D7E7               	goto	i2l4119
  5565  000882  0A10               	xorlw	16	; case 191
  5566  000884  B4D8               	btfsc	status,2,c
  5567  000886  D7DD               	goto	i2l4117
  5568  000888  0A70               	xorlw	112	; case 207
  5569  00088A  B4D8               	btfsc	status,2,c
  5570  00088C  D7C8               	goto	i2l4107
  5571  00088E  0A20               	xorlw	32	; case 239
  5572  000890  B4D8               	btfsc	status,2,c
  5573  000892  D73F               	goto	i2l4063
  5574  000894                     i2l223:
  5575                           
  5576                           ;main.c: 190: INT1IF = 0;
  5577  000894  90F0               	bcf	intcon3,0,c	;volatile
  5578                           
  5579                           ;main.c: 191: }
  5580  000896  D02E               	goto	i2l244
  5581  000898                     i2l220:
  5582                           
  5583                           ;main.c: 192: else if (TMR0IF) {
  5584  000898  A4F2               	btfss	intcon,2,c	;volatile
  5585  00089A  D012               	goto	i2l4141
  5586                           
  5587                           ;main.c: 193: TMR0ON = 0;
  5588  00089C  9ED5               	bcf	4053,7,c	;volatile
  5589                           
  5590                           ;main.c: 194: read_time();
  5591  00089E  ECA8  F00F         	call	_read_time	;wreg free
  5592                           
  5593                           ;main.c: 195: end_time[1] = time[1];
  5594  0008A2  C0B7  F077         	movff	_time+1,_end_time+1
  5595                           
  5596                           ;main.c: 196: end_time[0] = time[0];
  5597  0008A6  C0B6  F076         	movff	_time,_end_time
  5598                           
  5599                           ;main.c: 197: lcdInst(0b00000001);
  5600  0008AA  0E01               	movlw	1
  5601  0008AC  EC95  F012         	call	i2_lcdInst
  5602                           
  5603                           ;main.c: 198: curr_state = OPERATIONEND;
  5604  0008B0  0E03               	movlw	3
  5605  0008B2  0100               	movlb	0	; () banked
  5606  0008B4  6FC3               	movwf	_curr_state& (0+255),b
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;main.c: 199: bottle_count_disp = -1;
  5610  0008B6  0100               	movlb	0	; () banked
  5611  0008B8  69C4               	setf	_bottle_count_disp& (0+255),b
  5612  0008BA  69C5               	setf	(_bottle_count_disp+1)& (0+255),b
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;main.c: 200: TMR0IF = 0;
  5616  0008BC  94F2               	bcf	intcon,2,c	;volatile
  5617                           
  5618                           ;main.c: 201: }
  5619  0008BE  D01A               	goto	i2l244
  5620  0008C0                     i2l4141:
  5621                           
  5622                           ;main.c: 204: lcdInst(0b10000000);
  5623  0008C0  0E80               	movlw	128
  5624  0008C2  EC95  F012         	call	i2_lcdInst
  5625                           
  5626                           ;main.c: 205: printf("bad interrupt");
  5627  0008C6  0EDC               	movlw	low STR_1
  5628  0008C8  6E0D               	movwf	i2printf@f,c
  5629  0008CA  0EFF               	movlw	high STR_1
  5630  0008CC  6E0E               	movwf	i2printf@f+1,c
  5631  0008CE  ECE3  F001         	call	i2_printf	;wreg free
  5632                           
  5633                           ;main.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  5634  0008D2  0E00               	movlw	0
  5635  0008D4  6E75               	movwf	isr@i,c
  5636  0008D6                     i2l4147:
  5637  0008D6  0E63               	movlw	99
  5638  0008D8  6475               	cpfsgt	isr@i,c
  5639  0008DA  D001               	goto	i2l4151
  5640  0008DC  D7F1               	goto	i2l4141
  5641  0008DE                     i2l4151:
  5642  0008DE  0E21               	movlw	33
  5643  0008E0  0100               	movlb	0	; () banked
  5644  0008E2  6F80               	movwf	??_isr& (0+255),b
  5645  0008E4  0E76               	movlw	118
  5646  0008E6                     i2u385_47:
  5647  0008E6  2EE8               	decfsz	wreg,f,c
  5648  0008E8  D7FE               	bra	i2u385_47
  5649  0008EA  2F80               	decfsz	??_isr& (0+255),f,b
  5650  0008EC  D7FC               	bra	i2u385_47
  5651  0008EE  F000               	nop	
  5652  0008F0  2A75               	incf	isr@i,f,c
  5653  0008F2  D7F1               	goto	i2l4147
  5654  0008F4                     i2l244:
  5655  0008F4  C08F  FFF5         	movff	??_isr+15,tablat
  5656  0008F8  C08E  FFF8         	movff	??_isr+14,tblptru
  5657  0008FC  C08D  FFF7         	movff	??_isr+13,tblptrh
  5658  000900  C08C  FFF6         	movff	??_isr+12,tblptrl
  5659  000904  C08B  FFF4         	movff	??_isr+11,prodh
  5660  000908  C08A  FFF3         	movff	??_isr+10,prodl
  5661  00090C  C089  FFDA         	movff	??_isr+9,fsr2h
  5662  000910  C088  FFD9         	movff	??_isr+8,fsr2l
  5663  000914  C087  FFE2         	movff	??_isr+7,fsr1h
  5664  000918  C086  FFE1         	movff	??_isr+6,fsr1l
  5665  00091C  C085  FFEA         	movff	??_isr+5,fsr0h
  5666  000920  C084  FFE9         	movff	??_isr+4,fsr0l
  5667  000924  C083  FFFB         	movff	??_isr+3,pclatu
  5668  000928  C082  FFFA         	movff	??_isr+2,pclath
  5669  00092C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5670  00092E  0011               	retfie		f
  5671  000930                     __end_of_isr:
  5672                           	opt stack 0
  5673                           pclatu	equ	0xFFB
  5674                           pclath	equ	0xFFA
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           prodh	equ	0xFF4
  5680                           prodl	equ	0xFF3
  5681                           intcon	equ	0xFF2
  5682                           intcon2	equ	0xFF1
  5683                           intcon3	equ	0xFF0
  5684                           postinc0	equ	0xFEE
  5685                           fsr0h	equ	0xFEA
  5686                           fsr0l	equ	0xFE9
  5687                           wreg	equ	0xFE8
  5688                           fsr1h	equ	0xFE2
  5689                           fsr1l	equ	0xFE1
  5690                           indf2	equ	0xFDF
  5691                           postinc2	equ	0xFDE
  5692                           postdec2	equ	0xFDD
  5693                           fsr2h	equ	0xFDA
  5694                           fsr2l	equ	0xFD9
  5695                           status	equ	0xFD8
  5696                           
  5697 ;; *************** function _servo_rotate *****************
  5698 ;; Defined at:
  5699 ;;		line 372 in file "main.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;  degree          2    0[COMRAM] int 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  i               2    4[COMRAM] unsigned int 
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  1    wreg      void 
  5706 ;; Registers used:
  5707 ;;		wreg, status,2, status,0
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5713 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;Total ram usage:        6 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; This function calls:
  5720 ;;		Nothing
  5721 ;; This function is called by:
  5722 ;;		_isr
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726                           	psect	text26
  5727  001AE0                     __ptext26:
  5728                           	opt stack 0
  5729  001AE0                     _servo_rotate:
  5730                           	opt stack 25
  5731                           
  5732                           ;main.c: 373: unsigned int i;
  5733                           ;main.c: 374: switch(degree){
  5734                           
  5735                           ;incstack = 0
  5736  001AE0  D03C               	goto	i2l3989
  5737  001AE2                     i2l3963:
  5738                           
  5739                           ;main.c: 376: for (i=0; i<50; i++) {
  5740  001AE2  0E00               	movlw	0
  5741  001AE4  6E06               	movwf	servo_rotate@i+1,c
  5742  001AE6  0E00               	movlw	0
  5743  001AE8  6E05               	movwf	servo_rotate@i,c
  5744  001AEA                     i2l3965:
  5745  001AEA  5006               	movf	servo_rotate@i+1,w,c
  5746  001AEC  E14C               	bnz	i2l313
  5747  001AEE  0E32               	movlw	50
  5748  001AF0  5C05               	subwf	servo_rotate@i,w,c
  5749  001AF2  B0D8               	btfsc	status,0,c
  5750  001AF4  0012               	return	
  5751                           
  5752                           ;main.c: 377: PORTEbits.RE1 = 1;
  5753  001AF6  8284               	bsf	3972,1,c	;volatile
  5754                           
  5755                           ;main.c: 378: _delay((unsigned long)((800)*(10000000/4000000.0)));
  5756  001AF8  0E03               	movlw	3
  5757  001AFA  6E03               	movwf	??_servo_rotate& (0+255),c
  5758  001AFC  0E98               	movlw	152
  5759  001AFE                     i2u386_47:
  5760  001AFE  2EE8               	decfsz	wreg,f,c
  5761  001B00  D7FE               	bra	i2u386_47
  5762  001B02  2E03               	decfsz	??_servo_rotate& (0+255),f,c
  5763  001B04  D7FC               	bra	i2u386_47
  5764                           
  5765                           ;main.c: 379: PORTEbits.RE1 = 0;
  5766  001B06  9284               	bcf	3972,1,c	;volatile
  5767                           
  5768                           ;main.c: 380: _delay((unsigned long)((19200)*(10000000/4000000.0)));
  5769  001B08  0E3F               	movlw	63
  5770  001B0A  6E03               	movwf	??_servo_rotate& (0+255),c
  5771  001B0C  0E55               	movlw	85
  5772  001B0E                     i2u387_47:
  5773  001B0E  2EE8               	decfsz	wreg,f,c
  5774  001B10  D7FE               	bra	i2u387_47
  5775  001B12  2E03               	decfsz	??_servo_rotate& (0+255),f,c
  5776  001B14  D7FC               	bra	i2u387_47
  5777  001B16  F000               	nop	
  5778  001B18  4A05               	infsnz	servo_rotate@i,f,c
  5779  001B1A  2A06               	incf	servo_rotate@i+1,f,c
  5780  001B1C  D7E6               	goto	i2l3965
  5781  001B1E                     i2l3975:
  5782                           
  5783                           ;main.c: 384: for (i=0; i<50; i++) {
  5784  001B1E  0E00               	movlw	0
  5785  001B20  6E06               	movwf	servo_rotate@i+1,c
  5786  001B22  0E00               	movlw	0
  5787  001B24  6E05               	movwf	servo_rotate@i,c
  5788  001B26                     i2l3977:
  5789  001B26  5006               	movf	servo_rotate@i+1,w,c
  5790  001B28  E12E               	bnz	i2l313
  5791  001B2A  0E32               	movlw	50
  5792  001B2C  5C05               	subwf	servo_rotate@i,w,c
  5793  001B2E  B0D8               	btfsc	status,0,c
  5794  001B30  0012               	return	
  5795                           
  5796                           ;main.c: 385: PORTEbits.RE1 = 1;
  5797  001B32  8284               	bsf	3972,1,c	;volatile
  5798                           
  5799                           ;main.c: 386: _delay((unsigned long)((1500)*(10000000/4000000.0)));
  5800  001B34  0E05               	movlw	5
  5801  001B36  6E03               	movwf	??_servo_rotate& (0+255),c
  5802  001B38  0EDE               	movlw	222
  5803  001B3A                     i2u388_47:
  5804  001B3A  2EE8               	decfsz	wreg,f,c
  5805  001B3C  D7FE               	bra	i2u388_47
  5806  001B3E  2E03               	decfsz	??_servo_rotate& (0+255),f,c
  5807  001B40  D7FC               	bra	i2u388_47
  5808                           
  5809                           ;main.c: 387: PORTEbits.RE1 = 0;
  5810  001B42  9284               	bcf	3972,1,c	;volatile
  5811                           
  5812                           ;main.c: 388: _delay((unsigned long)((18500)*(10000000/4000000.0)));
  5813  001B44  0E3D               	movlw	61
  5814  001B46  6E03               	movwf	??_servo_rotate& (0+255),c
  5815  001B48  0E0F               	movlw	15
  5816  001B4A                     i2u389_47:
  5817  001B4A  2EE8               	decfsz	wreg,f,c
  5818  001B4C  D7FE               	bra	i2u389_47
  5819  001B4E  2E03               	decfsz	??_servo_rotate& (0+255),f,c
  5820  001B50  D7FC               	bra	i2u389_47
  5821  001B52  F000               	nop	
  5822  001B54  4A05               	infsnz	servo_rotate@i,f,c
  5823  001B56  2A06               	incf	servo_rotate@i+1,f,c
  5824  001B58  D7E6               	goto	i2l3977
  5825  001B5A                     i2l3989:
  5826  001B5A  C001  F003         	movff	servo_rotate@degree,??_servo_rotate
  5827  001B5E  C002  F004         	movff	servo_rotate@degree+1,??_servo_rotate+1
  5828                           
  5829                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5830                           ; Switch size 1, requested type "space"
  5831                           ; Number of cases is 2, Range of values is 0 to 255
  5832                           ; switch strategies available:
  5833                           ; Name         Instructions Cycles
  5834                           ; simple_byte            7     4 (average)
  5835                           ;	Chosen strategy is simple_byte
  5836  001B62  5004               	movf	??_servo_rotate+1,w,c
  5837  001B64  0A00               	xorlw	0	; case 0
  5838  001B66  B4D8               	btfsc	status,2,c
  5839  001B68  D004               	goto	i2l4255
  5840  001B6A  0AFF               	xorlw	255	; case 255
  5841  001B6C  A4D8               	btfss	status,2,c
  5842  001B6E  0012               	return	
  5843  001B70  D005               	goto	i2l4257
  5844  001B72                     i2l4255:
  5845                           
  5846                           ; Switch size 1, requested type "space"
  5847                           ; Number of cases is 1, Range of values is 90 to 90
  5848                           ; switch strategies available:
  5849                           ; Name         Instructions Cycles
  5850                           ; simple_byte            4     3 (average)
  5851                           ;	Chosen strategy is simple_byte
  5852  001B72  5003               	movf	??_servo_rotate,w,c
  5853  001B74  0A5A               	xorlw	90	; case 90
  5854  001B76  A4D8               	btfss	status,2,c
  5855  001B78  0012               	return	
  5856  001B7A  D7B3               	goto	i2l3963
  5857  001B7C                     i2l4257:
  5858                           
  5859                           ; Switch size 1, requested type "space"
  5860                           ; Number of cases is 1, Range of values is 166 to 166
  5861                           ; switch strategies available:
  5862                           ; Name         Instructions Cycles
  5863                           ; simple_byte            4     3 (average)
  5864                           ;	Chosen strategy is simple_byte
  5865  001B7C  5003               	movf	??_servo_rotate,w,c
  5866  001B7E  0AA6               	xorlw	166	; case 166
  5867  001B80  A4D8               	btfss	status,2,c
  5868  001B82  0012               	return	
  5869  001B84  D7CC               	goto	i2l3975
  5870  001B86                     i2l313:
  5871  001B86  0012               	return		;funcret
  5872  001B88                     __end_of_servo_rotate:
  5873                           	opt stack 0
  5874                           pclatu	equ	0xFFB
  5875                           pclath	equ	0xFFA
  5876                           tblptru	equ	0xFF8
  5877                           tblptrh	equ	0xFF7
  5878                           tblptrl	equ	0xFF6
  5879                           tablat	equ	0xFF5
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           intcon	equ	0xFF2
  5883                           intcon2	equ	0xFF1
  5884                           intcon3	equ	0xFF0
  5885                           postinc0	equ	0xFEE
  5886                           fsr0h	equ	0xFEA
  5887                           fsr0l	equ	0xFE9
  5888                           wreg	equ	0xFE8
  5889                           fsr1h	equ	0xFE2
  5890                           fsr1l	equ	0xFE1
  5891                           indf2	equ	0xFDF
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function _read_time *****************
  5899 ;; Defined at:
  5900 ;;		line 269 in file "main.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;  i               1    3[COMRAM] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      void 
  5907 ;; Registers used:
  5908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;Total ram usage:        1 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    2
  5921 ;; This function calls:
  5922 ;;		i2_I2C_Master_Read
  5923 ;;		i2_I2C_Master_Start
  5924 ;;		i2_I2C_Master_Stop
  5925 ;;		i2_I2C_Master_Write
  5926 ;; This function is called by:
  5927 ;;		_isr
  5928 ;; This function uses a non-reentrant model
  5929 ;;
  5930                           
  5931                           	psect	text27
  5932  001F50                     __ptext27:
  5933                           	opt stack 0
  5934  001F50                     _read_time:
  5935                           	opt stack 23
  5936                           
  5937                           ;main.c: 271: I2C_Master_Start();
  5938                           
  5939                           ;incstack = 0
  5940  001F50  ECB1  F012         	call	i2_I2C_Master_Start	;wreg free
  5941                           
  5942                           ;main.c: 272: I2C_Master_Write(0b11010000);
  5943  001F54  0E00               	movlw	0
  5944  001F56  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5945  001F58  0ED0               	movlw	208
  5946  001F5A  6E02               	movwf	i2I2C_Master_Write@d,c
  5947  001F5C  ECA0  F012         	call	i2_I2C_Master_Write	;wreg free
  5948                           
  5949                           ;main.c: 273: I2C_Master_Write(0x00);
  5950  001F60  0E00               	movlw	0
  5951  001F62  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5952  001F64  0E00               	movlw	0
  5953  001F66  6E02               	movwf	i2I2C_Master_Write@d,c
  5954  001F68  ECA0  F012         	call	i2_I2C_Master_Write	;wreg free
  5955                           
  5956                           ;main.c: 274: I2C_Master_Stop();
  5957  001F6C  ECAD  F012         	call	i2_I2C_Master_Stop	;wreg free
  5958                           
  5959                           ;main.c: 277: I2C_Master_Start();
  5960  001F70  ECB1  F012         	call	i2_I2C_Master_Start	;wreg free
  5961                           
  5962                           ;main.c: 278: I2C_Master_Write(0b11010001);
  5963  001F74  0E00               	movlw	0
  5964  001F76  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5965  001F78  0ED1               	movlw	209
  5966  001F7A  6E02               	movwf	i2I2C_Master_Write@d,c
  5967  001F7C  ECA0  F012         	call	i2_I2C_Master_Write	;wreg free
  5968                           
  5969                           ;main.c: 279: for(unsigned char i=0;i<0x06;i++){
  5970  001F80  0E00               	movlw	0
  5971  001F82  6E04               	movwf	read_time@i,c
  5972  001F84                     i2l3929:
  5973  001F84  0E05               	movlw	5
  5974  001F86  6404               	cpfsgt	read_time@i,c
  5975  001F88  D001               	goto	i2l3933
  5976  001F8A  D00E               	goto	i2l3939
  5977  001F8C                     i2l3933:
  5978                           
  5979                           ;main.c: 280: time[i] = I2C_Master_Read(1);
  5980  001F8C  5004               	movf	read_time@i,w,c
  5981  001F8E  0D01               	mullw	1
  5982  001F90  0EB6               	movlw	low _time
  5983  001F92  24F3               	addwf	prodl,w,c
  5984  001F94  6ED9               	movwf	fsr2l,c
  5985  001F96  0E00               	movlw	high _time
  5986  001F98  20F4               	addwfc	prodh,w,c
  5987  001F9A  6EDA               	movwf	fsr2h,c
  5988  001F9C  0E01               	movlw	1
  5989  001F9E  EC0C  F012         	call	i2_I2C_Master_Read
  5990  001FA2  6EDF               	movwf	indf2,c
  5991  001FA4  2A04               	incf	read_time@i,f,c
  5992  001FA6  D7EE               	goto	i2l3929
  5993  001FA8                     i2l3939:
  5994                           
  5995                           ;main.c: 281: }
  5996                           ;main.c: 282: time[6] = I2C_Master_Read(0);
  5997  001FA8  0E00               	movlw	0
  5998  001FAA  EC0C  F012         	call	i2_I2C_Master_Read
  5999  001FAE  0100               	movlb	0	; () banked
  6000  001FB0  6FBC               	movwf	(_time+6)& (0+255),b
  6001                           
  6002                           ;main.c: 283: I2C_Master_Stop();
  6003  001FB2  ECAD  F012         	call	i2_I2C_Master_Stop	;wreg free
  6004  001FB6  0012               	return	
  6005  001FB8                     __end_of_read_time:
  6006                           	opt stack 0
  6007                           pclatu	equ	0xFFB
  6008                           pclath	equ	0xFFA
  6009                           tblptru	equ	0xFF8
  6010                           tblptrh	equ	0xFF7
  6011                           tblptrl	equ	0xFF6
  6012                           tablat	equ	0xFF5
  6013                           prodh	equ	0xFF4
  6014                           prodl	equ	0xFF3
  6015                           intcon	equ	0xFF2
  6016                           intcon2	equ	0xFF1
  6017                           intcon3	equ	0xFF0
  6018                           postinc0	equ	0xFEE
  6019                           fsr0h	equ	0xFEA
  6020                           fsr0l	equ	0xFE9
  6021                           wreg	equ	0xFE8
  6022                           fsr1h	equ	0xFE2
  6023                           fsr1l	equ	0xFE1
  6024                           indf2	equ	0xFDF
  6025                           postinc2	equ	0xFDE
  6026                           postdec2	equ	0xFDD
  6027                           fsr2h	equ	0xFDA
  6028                           fsr2l	equ	0xFD9
  6029                           status	equ	0xFD8
  6030                           
  6031 ;; *************** function _read_colorsensor *****************
  6032 ;; Defined at:
  6033 ;;		line 400 in file "main.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;		None
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  c_clear_h       2   34[COMRAM] int 
  6038 ;;  c_clear_l       2   32[COMRAM] int 
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      void 
  6041 ;; Registers used:
  6042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;Total ram usage:        6 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    3
  6055 ;; This function calls:
  6056 ;;		i2_I2C_Master_Read
  6057 ;;		i2_I2C_Master_Start
  6058 ;;		i2_I2C_Master_Stop
  6059 ;;		i2_I2C_Master_Write
  6060 ;;		i2_lcdInst
  6061 ;;		i2_printf
  6062 ;; This function is called by:
  6063 ;;		_isr
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text28
  6068  0017EA                     __ptext28:
  6069                           	opt stack 0
  6070  0017EA                     _read_colorsensor:
  6071                           	opt stack 22
  6072                           
  6073                           ;main.c: 401: int c_clear_l;
  6074                           ;main.c: 402: int c_clear_h;
  6075                           ;main.c: 403: lcdInst(0b00000001);
  6076                           
  6077                           ;incstack = 0
  6078  0017EA  0E01               	movlw	1
  6079  0017EC  EC95  F012         	call	i2_lcdInst
  6080                           
  6081                           ;main.c: 405: I2C_Master_Start();
  6082  0017F0  ECB1  F012         	call	i2_I2C_Master_Start	;wreg free
  6083                           
  6084                           ;main.c: 406: I2C_Master_Write(0b01010010);
  6085  0017F4  0E00               	movlw	0
  6086  0017F6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6087  0017F8  0E52               	movlw	82
  6088  0017FA  6E02               	movwf	i2I2C_Master_Write@d,c
  6089  0017FC  ECA0  F012         	call	i2_I2C_Master_Write	;wreg free
  6090                           
  6091                           ;main.c: 407: I2C_Master_Write(0b10000000);
  6092  001800  0E00               	movlw	0
  6093  001802  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6094  001804  0E80               	movlw	128
  6095  001806  6E02               	movwf	i2I2C_Master_Write@d,c
  6096  001808  ECA0  F012         	call	i2_I2C_Master_Write	;wreg free
  6097                           
  6098                           ;main.c: 408: I2C_Master_Write(0b00000011);
  6099  00180C  0E00               	movlw	0
  6100  00180E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6101  001810  0E03               	movlw	3
  6102  001812  6E02               	movwf	i2I2C_Master_Write@d,c
  6103  001814  ECA0  F012         	call	i2_I2C_Master_Write	;wreg free
  6104                           
  6105                           ;main.c: 409: I2C_Master_Stop();
  6106  001818  ECAD  F012         	call	i2_I2C_Master_Stop	;wreg free
  6107  00181C                     i2l319:
  6108                           
  6109                           ;main.c: 413: I2C_Master_Start();
  6110  00181C  ECB1  F012         	call	i2_I2C_Master_Start	;wreg free
  6111                           
  6112                           ;main.c: 414: I2C_Master_Write(0b01010010);
  6113  001820  0E00               	movlw	0
  6114  001822  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6115  001824  0E52               	movlw	82
  6116  001826  6E02               	movwf	i2I2C_Master_Write@d,c
  6117  001828  ECA0  F012         	call	i2_I2C_Master_Write	;wreg free
  6118                           
  6119                           ;main.c: 415: I2C_Master_Write(0b10110100);
  6120  00182C  0E00               	movlw	0
  6121  00182E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6122  001830  0EB4               	movlw	180
  6123  001832  6E02               	movwf	i2I2C_Master_Write@d,c
  6124  001834  ECA0  F012         	call	i2_I2C_Master_Write	;wreg free
  6125                           
  6126                           ;main.c: 416: I2C_Master_Start();
  6127  001838  ECB1  F012         	call	i2_I2C_Master_Start	;wreg free
  6128                           
  6129                           ;main.c: 417: I2C_Master_Write(0b01010011);
  6130  00183C  0E00               	movlw	0
  6131  00183E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6132  001840  0E53               	movlw	83
  6133  001842  6E02               	movwf	i2I2C_Master_Write@d,c
  6134  001844  ECA0  F012         	call	i2_I2C_Master_Write	;wreg free
  6135                           
  6136                           ;main.c: 418: c_clear_l = I2C_Master_Read(1);
  6137  001848  0E01               	movlw	1
  6138  00184A  EC0C  F012         	call	i2_I2C_Master_Read
  6139  00184E  6E1F               	movwf	??_read_colorsensor& (0+255),c
  6140  001850  501F               	movf	??_read_colorsensor,w,c
  6141  001852  6E21               	movwf	read_colorsensor@c_clear_l,c
  6142  001854  6A22               	clrf	read_colorsensor@c_clear_l+1,c
  6143                           
  6144                           ;main.c: 419: c_clear_h = I2C_Master_Read(0);
  6145  001856  0E00               	movlw	0
  6146  001858  EC0C  F012         	call	i2_I2C_Master_Read
  6147  00185C  6E1F               	movwf	??_read_colorsensor& (0+255),c
  6148  00185E  501F               	movf	??_read_colorsensor,w,c
  6149  001860  6E23               	movwf	read_colorsensor@c_clear_h,c
  6150  001862  6A24               	clrf	read_colorsensor@c_clear_h+1,c
  6151                           
  6152                           ;main.c: 420: I2C_Master_Stop();
  6153  001864  ECAD  F012         	call	i2_I2C_Master_Stop	;wreg free
  6154                           
  6155                           ;main.c: 422: lcdInst(0b10000000);
  6156  001868  0E80               	movlw	128
  6157  00186A  EC95  F012         	call	i2_lcdInst
  6158                           
  6159                           ;main.c: 423: printf("%x             ", c_clear_h);
  6160  00186E  0EAD               	movlw	low STR_24
  6161  001870  6E0D               	movwf	i2printf@f,c
  6162  001872  0EFF               	movlw	high STR_24
  6163  001874  6E0E               	movwf	i2printf@f+1,c
  6164  001876  C023  F00F         	movff	read_colorsensor@c_clear_h,?i2_printf+2
  6165  00187A  C024  F010         	movff	read_colorsensor@c_clear_h+1,?i2_printf+3
  6166  00187E  ECE3  F001         	call	i2_printf	;wreg free
  6167                           
  6168                           ;main.c: 424: lcdInst(0b11000000);
  6169  001882  0EC0               	movlw	192
  6170  001884  EC95  F012         	call	i2_lcdInst
  6171                           
  6172                           ;main.c: 425: printf("%x             ", c_clear_l);
  6173  001888  0EAD               	movlw	low STR_24
  6174  00188A  6E0D               	movwf	i2printf@f,c
  6175  00188C  0EFF               	movlw	high STR_24
  6176  00188E  6E0E               	movwf	i2printf@f+1,c
  6177  001890  C021  F00F         	movff	read_colorsensor@c_clear_l,?i2_printf+2
  6178  001894  C022  F010         	movff	read_colorsensor@c_clear_l+1,?i2_printf+3
  6179  001898  ECE3  F001         	call	i2_printf	;wreg free
  6180                           
  6181                           ;main.c: 426: _delay((unsigned long)((500)*(10000000/4000.0)));
  6182  00189C  0E07               	movlw	7
  6183  00189E  6E20               	movwf	(??_read_colorsensor+1)& (0+255),c
  6184  0018A0  0E58               	movlw	88
  6185  0018A2  6E1F               	movwf	??_read_colorsensor& (0+255),c
  6186  0018A4  0E5A               	movlw	90
  6187  0018A6                     i2u390_47:
  6188  0018A6  2EE8               	decfsz	wreg,f,c
  6189  0018A8  D7FE               	bra	i2u390_47
  6190  0018AA  2E1F               	decfsz	??_read_colorsensor& (0+255),f,c
  6191  0018AC  D7FC               	bra	i2u390_47
  6192  0018AE  2E20               	decfsz	(??_read_colorsensor+1)& (0+255),f,c
  6193  0018B0  D7FA               	bra	i2u390_47
  6194  0018B2  D7B4               	goto	i2l319
  6195  0018B4                     __end_of_read_colorsensor:
  6196                           	opt stack 0
  6197                           pclatu	equ	0xFFB
  6198                           pclath	equ	0xFFA
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           intcon	equ	0xFF2
  6206                           intcon2	equ	0xFF1
  6207                           intcon3	equ	0xFF0
  6208                           postinc0	equ	0xFEE
  6209                           fsr0h	equ	0xFEA
  6210                           fsr0l	equ	0xFE9
  6211                           wreg	equ	0xFE8
  6212                           fsr1h	equ	0xFE2
  6213                           fsr1l	equ	0xFE1
  6214                           indf2	equ	0xFDF
  6215                           postinc2	equ	0xFDE
  6216                           postdec2	equ	0xFDD
  6217                           fsr2h	equ	0xFDA
  6218                           fsr2l	equ	0xFD9
  6219                           status	equ	0xFD8
  6220                           
  6221 ;; *************** function i2_printf *****************
  6222 ;; Defined at:
  6223 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6226 ;;		 -> STR_25(16), STR_24(16), STR_23(15), STR_22(16), 
  6227 ;;		 -> STR_21(25), STR_20(24), STR_19(23), STR_18(18), 
  6228 ;;		 -> STR_17(23), STR_16(10), STR_15(17), STR_14(17), 
  6229 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  6230 ;;		 -> STR_9(17), STR_8(17), STR_7(17), STR_6(17), 
  6231 ;;		 -> STR_5(23), STR_4(23), STR_3(10), STR_2(17), 
  6232 ;;		 -> STR_1(14), 
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;  printf          4    0        struct .
  6235 ;;  printf          3    0        PTR const unsigned char 
  6236 ;;  printf          2   27[COMRAM] int 
  6237 ;;  printf          2   24[COMRAM] unsigned int 
  6238 ;;  printf          2   21[COMRAM] PTR void [1]
  6239 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6240 ;;  printf          2    0        unsigned int 
  6241 ;;  printf          1   29[COMRAM] char 
  6242 ;;  printf          1   26[COMRAM] unsigned char 
  6243 ;;  printf          1   23[COMRAM] char 
  6244 ;;  printf          1   20[COMRAM] unsigned char 
  6245 ;; Return value:  Size  Location     Type
  6246 ;;                  2   12[COMRAM] int 
  6247 ;; Registers used:
  6248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6254 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6256 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6257 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6258 ;;Total ram usage:       18 bytes
  6259 ;; Hardware stack levels used:    1
  6260 ;; Hardware stack levels required when called:    2
  6261 ;; This function calls:
  6262 ;;		i2___lwdiv
  6263 ;;		i2___lwmod
  6264 ;;		i2___wmul
  6265 ;;		i2_isdigit
  6266 ;;		i2_putch
  6267 ;; This function is called by:
  6268 ;;		_isr
  6269 ;;		_read_colorsensor
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           	psect	text29
  6274  0003C6                     __ptext29:
  6275                           	opt stack 0
  6276  0003C6                     i2_printf:
  6277                           	opt stack 23
  6278                           
  6279                           ;doprnt.c: 466: va_list ap;
  6280                           ;doprnt.c: 499: signed char c;
  6281                           ;doprnt.c: 501: int width;
  6282                           ;doprnt.c: 506: signed char prec;
  6283                           ;doprnt.c: 508: unsigned char flag;
  6284                           ;doprnt.c: 523: union {
  6285                           ;doprnt.c: 524: unsigned long vd;
  6286                           ;doprnt.c: 525: double integ;
  6287                           ;doprnt.c: 526: } tmpval;
  6288                           ;doprnt.c: 528: unsigned int val;
  6289                           ;doprnt.c: 529: unsigned len;
  6290                           ;doprnt.c: 530: const char * cp;
  6291                           ;doprnt.c: 533: *ap = __va_start();
  6292                           
  6293                           ;incstack = 0
  6294  0003C6  0E0F               	movlw	low (?i2_printf+2)
  6295  0003C8  6E16               	movwf	i2printf@ap,c
  6296  0003CA  0E00               	movlw	high (?i2_printf+2)
  6297  0003CC  6E17               	movwf	i2printf@ap+1,c
  6298                           
  6299                           ;doprnt.c: 536: while(c = *f++) {
  6300  0003CE  D174               	goto	i2l3775
  6301  0003D0                     i2l3649:
  6302                           
  6303                           ;doprnt.c: 538: if(c != '%')
  6304  0003D0  0E25               	movlw	37
  6305  0003D2  181E               	xorwf	i2printf@c,w,c
  6306  0003D4  B4D8               	btfsc	status,2,c
  6307  0003D6  D004               	goto	i2l3653
  6308                           
  6309                           ;doprnt.c: 540: {
  6310                           ;doprnt.c: 541: (putch(c) );
  6311  0003D8  501E               	movf	i2printf@c,w,c
  6312  0003DA  EC8F  F012         	call	i2_putch
  6313                           
  6314                           ;doprnt.c: 542: continue;
  6315  0003DE  D16C               	goto	i2l3775
  6316  0003E0                     i2l3653:
  6317                           
  6318                           ;doprnt.c: 543: }
  6319                           ;doprnt.c: 546: width = 0;
  6320  0003E0  0E00               	movlw	0
  6321  0003E2  6E1D               	movwf	i2printf@width+1,c
  6322  0003E4  0E00               	movlw	0
  6323  0003E6  6E1C               	movwf	i2printf@width,c
  6324                           
  6325                           ;doprnt.c: 548: flag = 0;
  6326  0003E8  0E00               	movlw	0
  6327  0003EA  6E1B               	movwf	i2printf@flag,c
  6328                           
  6329                           ;doprnt.c: 551: switch(*f) {
  6330                           
  6331                           ;doprnt.c: 550: for(;;) {
  6332  0003EC  D003               	goto	i2l3659
  6333  0003EE                     i2l3655:
  6334                           
  6335                           ;doprnt.c: 580: flag |= 0x04;
  6336  0003EE  841B               	bsf	i2printf@flag,2,c
  6337                           
  6338                           ;doprnt.c: 581: f++;
  6339  0003F0  4A0D               	infsnz	i2printf@f,f,c
  6340  0003F2  2A0E               	incf	i2printf@f+1,f,c
  6341  0003F4                     i2l3659:
  6342  0003F4  C00D  FFF6         	movff	i2printf@f,tblptrl
  6343  0003F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6344  0003FC                     	if	0	;tblptru may be non-zero
  6345  0003FC                     	endif
  6346  0003FC                     	if	0	;tblptru may be non-zero
  6347  0003FC                     	endif
  6348  0003FC  0008               	tblrd		*
  6349  0003FE  50F5               	movf	tablat,w,c
  6350                           
  6351                           ; Switch size 1, requested type "space"
  6352                           ; Number of cases is 1, Range of values is 48 to 48
  6353                           ; switch strategies available:
  6354                           ; Name         Instructions Cycles
  6355                           ; simple_byte            4     3 (average)
  6356                           ;	Chosen strategy is simple_byte
  6357  000400  0A30               	xorlw	48	; case 48
  6358  000402  B4D8               	btfsc	status,2,c
  6359  000404  D7F4               	goto	i2l3655
  6360                           
  6361                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6362                           
  6363                           ;doprnt.c: 586: }
  6364                           
  6365                           ;doprnt.c: 585: break;
  6366  000406  C00D  FFF6         	movff	i2printf@f,tblptrl
  6367  00040A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6368  00040E                     	if	0	;tblptru may be non-zero
  6369  00040E                     	endif
  6370  00040E                     	if	0	;tblptru may be non-zero
  6371  00040E                     	endif
  6372  00040E  0008               	tblrd		*
  6373  000410  50F5               	movf	tablat,w,c
  6374  000412  EC44  F012         	call	i2_isdigit
  6375  000416  A0D8               	btfss	status,0,c
  6376  000418  D035               	goto	i2l3677
  6377                           
  6378                           ;doprnt.c: 598: width = 0;
  6379  00041A  0E00               	movlw	0
  6380  00041C  6E1D               	movwf	i2printf@width+1,c
  6381  00041E  0E00               	movlw	0
  6382  000420  6E1C               	movwf	i2printf@width,c
  6383  000422                     i2l3665:
  6384                           
  6385                           ;doprnt.c: 600: width *= 10;
  6386  000422  C01C  F001         	movff	i2printf@width,i2___wmul@multiplier
  6387  000426  C01D  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  6388  00042A  0E00               	movlw	0
  6389  00042C  6E04               	movwf	i2___wmul@multiplicand+1,c
  6390  00042E  0E0A               	movlw	10
  6391  000430  6E03               	movwf	i2___wmul@multiplicand,c
  6392  000432  EC1F  F012         	call	i2___wmul	;wreg free
  6393  000436  C001  F01C         	movff	?i2___wmul,i2printf@width
  6394  00043A  C002  F01D         	movff	?i2___wmul+1,i2printf@width+1
  6395                           
  6396                           ;doprnt.c: 601: width += *f++ - '0';
  6397  00043E  0ED0               	movlw	208
  6398  000440  6E11               	movwf	??i2_printf& (0+255),c
  6399  000442  0EFF               	movlw	255
  6400  000444  6E12               	movwf	(??i2_printf+1)& (0+255),c
  6401  000446  C00D  FFF6         	movff	i2printf@f,tblptrl
  6402  00044A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6403  00044E                     	if	0	;tblptru may be non-zero
  6404  00044E                     	endif
  6405  00044E                     	if	0	;tblptru may be non-zero
  6406  00044E                     	endif
  6407  00044E  0008               	tblrd		*
  6408  000450  50F5               	movf	tablat,w,c
  6409  000452  6E13               	movwf	(??i2_printf+2)& (0+255),c
  6410  000454  6A14               	clrf	(??i2_printf+3)& (0+255),c
  6411  000456  5011               	movf	??i2_printf,w,c
  6412  000458  2613               	addwf	??i2_printf+2,f,c
  6413  00045A  5012               	movf	??i2_printf+1,w,c
  6414  00045C  2214               	addwfc	??i2_printf+3,f,c
  6415  00045E  5013               	movf	??i2_printf+2,w,c
  6416  000460  261C               	addwf	i2printf@width,f,c
  6417  000462  5014               	movf	??i2_printf+3,w,c
  6418  000464  221D               	addwfc	i2printf@width+1,f,c
  6419  000466  4A0D               	infsnz	i2printf@f,f,c
  6420  000468  2A0E               	incf	i2printf@f+1,f,c
  6421                           
  6422                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6423  00046A  C00D  FFF6         	movff	i2printf@f,tblptrl
  6424  00046E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6425  000472                     	if	0	;tblptru may be non-zero
  6426  000472                     	endif
  6427  000472                     	if	0	;tblptru may be non-zero
  6428  000472                     	endif
  6429  000472  0008               	tblrd		*
  6430  000474  50F5               	movf	tablat,w,c
  6431  000476  EC44  F012         	call	i2_isdigit
  6432  00047A  A0D8               	btfss	status,0,c
  6433  00047C  D003               	goto	i2l3677
  6434  00047E  D7D1               	goto	i2l3665
  6435  000480                     i2l3673:
  6436                           
  6437                           ;doprnt.c: 721: flag |= 0x80;
  6438  000480  8E1B               	bsf	i2printf@flag,7,c
  6439                           
  6440                           ;doprnt.c: 723: break;
  6441  000482  D017               	goto	i2l354
  6442  000484                     i2l3677:
  6443  000484  C00D  FFF6         	movff	i2printf@f,tblptrl
  6444  000488  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6445  00048C  4A0D               	infsnz	i2printf@f,f,c
  6446  00048E  2A0E               	incf	i2printf@f+1,f,c
  6447  000490                     	if	0	;tblptru may be non-zero
  6448  000490                     	endif
  6449  000490                     	if	0	;tblptru may be non-zero
  6450  000490                     	endif
  6451  000490  0008               	tblrd		*
  6452  000492  CFF5 F01E          	movff	tablat,i2printf@c
  6453  000496  501E               	movf	i2printf@c,w,c
  6454                           
  6455                           ; Switch size 1, requested type "space"
  6456                           ; Number of cases is 4, Range of values is 0 to 120
  6457                           ; switch strategies available:
  6458                           ; Name         Instructions Cycles
  6459                           ; simple_byte           13     7 (average)
  6460                           ;	Chosen strategy is simple_byte
  6461  000498  0A00               	xorlw	0	; case 0
  6462  00049A  B4D8               	btfsc	status,2,c
  6463  00049C  0012               	return	
  6464  00049E  0A64               	xorlw	100	; case 100
  6465  0004A0  B4D8               	btfsc	status,2,c
  6466  0004A2  D007               	goto	i2l354
  6467  0004A4  0A0D               	xorlw	13	; case 105
  6468  0004A6  B4D8               	btfsc	status,2,c
  6469  0004A8  D004               	goto	i2l354
  6470  0004AA  0A11               	xorlw	17	; case 120
  6471  0004AC  B4D8               	btfsc	status,2,c
  6472  0004AE  D7E8               	goto	i2l3673
  6473  0004B0  D103               	goto	i2l3775
  6474  0004B2                     i2l354:
  6475                           
  6476                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6477  0004B2  BE1B               	btfsc	i2printf@flag,7,c
  6478  0004B4  D015               	goto	i2l3689
  6479                           
  6480                           ;doprnt.c: 1253: {
  6481                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6482  0004B6  C016  FFD9         	movff	i2printf@ap,fsr2l
  6483  0004BA  C017  FFDA         	movff	i2printf@ap+1,fsr2h
  6484  0004BE  CFDE F019          	movff	postinc2,i2printf@val
  6485  0004C2  CFDD F01A          	movff	postdec2,i2printf@val+1
  6486  0004C6  0E02               	movlw	2
  6487  0004C8  2616               	addwf	i2printf@ap,f,c
  6488  0004CA  0E00               	movlw	0
  6489  0004CC  2217               	addwfc	i2printf@ap+1,f,c
  6490                           
  6491                           ;doprnt.c: 1261: if((int)val < 0) {
  6492  0004CE  AE1A               	btfss	i2printf@val+1,7,c
  6493  0004D0  D044               	goto	i2l3723
  6494                           
  6495                           ;doprnt.c: 1262: flag |= 0x03;
  6496  0004D2  0E03               	movlw	3
  6497  0004D4  121B               	iorwf	i2printf@flag,f,c
  6498                           
  6499                           ;doprnt.c: 1263: val = -val;
  6500  0004D6  6C19               	negf	i2printf@val,c
  6501  0004D8  1E1A               	comf	i2printf@val+1,f,c
  6502  0004DA  B0D8               	btfsc	status,0,c
  6503  0004DC  2A1A               	incf	i2printf@val+1,f,c
  6504                           
  6505                           ;doprnt.c: 1264: }
  6506                           ;doprnt.c: 1266: }
  6507  0004DE  D03D               	goto	i2l3723
  6508  0004E0                     i2l3689:
  6509                           
  6510                           ;doprnt.c: 1268: else
  6511                           ;doprnt.c: 1273: {
  6512                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6513  0004E0  C016  FFD9         	movff	i2printf@ap,fsr2l
  6514  0004E4  C017  FFDA         	movff	i2printf@ap+1,fsr2h
  6515  0004E8  CFDE F019          	movff	postinc2,i2printf@val
  6516  0004EC  CFDD F01A          	movff	postdec2,i2printf@val+1
  6517  0004F0  0E02               	movlw	2
  6518  0004F2  2616               	addwf	i2printf@ap,f,c
  6519  0004F4  0E00               	movlw	0
  6520  0004F6  2217               	addwfc	i2printf@ap+1,f,c
  6521                           
  6522                           ;doprnt.c: 1287: }
  6523                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6524  0004F8  D030               	goto	i2l3723
  6525  0004FA                     i2l3693:
  6526                           
  6527                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6528  0004FA  0E01               	movlw	1
  6529  0004FC  6E1E               	movwf	i2printf@c,c
  6530  0004FE                     i2l3695:
  6531  0004FE  0E05               	movlw	5
  6532  000500  181E               	xorwf	i2printf@c,w,c
  6533  000502  B4D8               	btfsc	status,2,c
  6534  000504  D032               	goto	i2l3725
  6535                           
  6536                           ;doprnt.c: 1306: if(val < dpowers[c])
  6537  000506  501E               	movf	i2printf@c,w,c
  6538  000508  0D02               	mullw	2
  6539  00050A  0EF0               	movlw	low _dpowers
  6540  00050C  24F3               	addwf	prodl,w,c
  6541  00050E  6EF6               	movwf	tblptrl,c
  6542  000510  0EFD               	movlw	high _dpowers
  6543  000512  20F4               	addwfc	prodh,w,c
  6544  000514  6EF7               	movwf	tblptrh,c
  6545  000516                     	if	0	;There are less than 3 active tblptr bytes
  6546  000516                     	endif
  6547  000516  0009               	tblrd		*+
  6548  000518  50F5               	movf	tablat,w,c
  6549  00051A  5C19               	subwf	i2printf@val,w,c
  6550  00051C  0009               	tblrd		*+
  6551  00051E  50F5               	movf	tablat,w,c
  6552  000520  581A               	subwfb	i2printf@val+1,w,c
  6553  000522  A0D8               	btfss	status,0,c
  6554  000524  D022               	goto	i2l3725
  6555                           
  6556                           ;doprnt.c: 1307: break;
  6557  000526  2A1E               	incf	i2printf@c,f,c
  6558  000528  D7EA               	goto	i2l3695
  6559  00052A                     i2l3707:
  6560                           
  6561                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6562  00052A  0E01               	movlw	1
  6563  00052C  6E1E               	movwf	i2printf@c,c
  6564  00052E                     i2l3709:
  6565  00052E  0E04               	movlw	4
  6566  000530  181E               	xorwf	i2printf@c,w,c
  6567  000532  B4D8               	btfsc	status,2,c
  6568  000534  D01A               	goto	i2l3725
  6569                           
  6570                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6571  000536  501E               	movf	i2printf@c,w,c
  6572  000538  0D02               	mullw	2
  6573  00053A  0EFA               	movlw	low _hexpowers
  6574  00053C  24F3               	addwf	prodl,w,c
  6575  00053E  6EF6               	movwf	tblptrl,c
  6576  000540  0EFD               	movlw	high _hexpowers
  6577  000542  20F4               	addwfc	prodh,w,c
  6578  000544  6EF7               	movwf	tblptrh,c
  6579  000546                     	if	0	;There are less than 3 active tblptr bytes
  6580  000546                     	endif
  6581  000546  0009               	tblrd		*+
  6582  000548  50F5               	movf	tablat,w,c
  6583  00054A  5C19               	subwf	i2printf@val,w,c
  6584  00054C  0009               	tblrd		*+
  6585  00054E  50F5               	movf	tablat,w,c
  6586  000550  581A               	subwfb	i2printf@val+1,w,c
  6587  000552  A0D8               	btfss	status,0,c
  6588  000554  D00A               	goto	i2l3725
  6589                           
  6590                           ;doprnt.c: 1318: break;
  6591  000556  2A1E               	incf	i2printf@c,f,c
  6592  000558  D7EA               	goto	i2l3709
  6593  00055A                     i2l3723:
  6594  00055A  501B               	movf	i2printf@flag,w,c
  6595  00055C  0B80               	andlw	128
  6596                           
  6597                           ; Switch size 1, requested type "space"
  6598                           ; Number of cases is 2, Range of values is 0 to 128
  6599                           ; switch strategies available:
  6600                           ; Name         Instructions Cycles
  6601                           ; simple_byte            7     4 (average)
  6602                           ;	Chosen strategy is simple_byte
  6603  00055E  0A00               	xorlw	0	; case 0
  6604  000560  B4D8               	btfsc	status,2,c
  6605  000562  D7CB               	goto	i2l3693
  6606  000564  0A80               	xorlw	128	; case 128
  6607  000566  B4D8               	btfsc	status,2,c
  6608  000568  D7E0               	goto	i2l3707
  6609  00056A                     i2l3725:
  6610                           
  6611                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6612  00056A  501C               	movf	i2printf@width,w,c
  6613  00056C  101D               	iorwf	i2printf@width+1,w,c
  6614  00056E  B4D8               	btfsc	status,2,c
  6615  000570  D009               	goto	i2l3731
  6616  000572  C01B  F011         	movff	i2printf@flag,??i2_printf
  6617  000576  0E03               	movlw	3
  6618  000578  1611               	andwf	??i2_printf,f,c
  6619  00057A  B4D8               	btfsc	status,2,c
  6620  00057C  D003               	goto	i2l3731
  6621                           
  6622                           ;doprnt.c: 1346: width--;
  6623  00057E  061C               	decf	i2printf@width,f,c
  6624  000580  A0D8               	btfss	status,0,c
  6625  000582  061D               	decf	i2printf@width+1,f,c
  6626  000584                     i2l3731:
  6627                           
  6628                           ;doprnt.c: 1381: if(width > c)
  6629  000584  0E80               	movlw	128
  6630  000586  BE1E               	btfsc	i2printf@c,7,c
  6631  000588  0E7F               	movlw	127
  6632  00058A  6E11               	movwf	??i2_printf& (0+255),c
  6633  00058C  501C               	movf	i2printf@width,w,c
  6634  00058E  5C1E               	subwf	i2printf@c,w,c
  6635  000590  501D               	movf	i2printf@width+1,w,c
  6636  000592  0A80               	xorlw	128
  6637  000594  5811               	subwfb	??i2_printf& (0+255),w,c
  6638  000596  B0D8               	btfsc	status,0,c
  6639  000598  D007               	goto	i2l3735
  6640                           
  6641                           ;doprnt.c: 1382: width -= c;
  6642  00059A  501E               	movf	i2printf@c,w,c
  6643  00059C  5E1C               	subwf	i2printf@width,f,c
  6644  00059E  0E00               	movlw	0
  6645  0005A0  BE1E               	btfsc	i2printf@c,7,c
  6646  0005A2  0EFF               	movlw	255
  6647  0005A4  5A1D               	subwfb	i2printf@width+1,f,c
  6648  0005A6  D004               	goto	i2l3737
  6649  0005A8                     i2l3735:
  6650                           
  6651                           ;doprnt.c: 1383: else
  6652                           ;doprnt.c: 1384: width = 0;
  6653  0005A8  0E00               	movlw	0
  6654  0005AA  6E1D               	movwf	i2printf@width+1,c
  6655  0005AC  0E00               	movlw	0
  6656  0005AE  6E1C               	movwf	i2printf@width,c
  6657  0005B0                     i2l3737:
  6658                           
  6659                           ;doprnt.c: 1387: if(flag & 0x04) {
  6660  0005B0  A41B               	btfss	i2printf@flag,2,c
  6661  0005B2  D014               	goto	i2l3749
  6662                           
  6663                           ;doprnt.c: 1392: if(flag & 0x03)
  6664  0005B4  C01B  F011         	movff	i2printf@flag,??i2_printf
  6665  0005B8  0E03               	movlw	3
  6666  0005BA  1611               	andwf	??i2_printf,f,c
  6667  0005BC  B4D8               	btfsc	status,2,c
  6668  0005BE  D003               	goto	i2l3743
  6669                           
  6670                           ;doprnt.c: 1393: (putch('-') );
  6671  0005C0  0E2D               	movlw	45
  6672  0005C2  EC8F  F012         	call	i2_putch
  6673  0005C6                     i2l3743:
  6674                           
  6675                           ;doprnt.c: 1415: if(width)
  6676  0005C6  501C               	movf	i2printf@width,w,c
  6677  0005C8  101D               	iorwf	i2printf@width+1,w,c
  6678  0005CA  B4D8               	btfsc	status,2,c
  6679  0005CC  D01E               	goto	i2l3759
  6680                           
  6681                           ;doprnt.c: 1417: (putch('0') );
  6682                           
  6683                           ;doprnt.c: 1416: do
  6684  0005CE  0E30               	movlw	48
  6685  0005D0  EC8F  F012         	call	i2_putch
  6686                           
  6687                           ;doprnt.c: 1418: while(--width);
  6688  0005D4  061C               	decf	i2printf@width,f,c
  6689  0005D6  A0D8               	btfss	status,0,c
  6690  0005D8  061D               	decf	i2printf@width+1,f,c
  6691  0005DA  D7F5               	goto	i2l3743
  6692  0005DC                     i2l3749:
  6693                           
  6694                           ;doprnt.c: 1422: {
  6695                           ;doprnt.c: 1424: if(width
  6696                           ;doprnt.c: 1428: )
  6697  0005DC  501C               	movf	i2printf@width,w,c
  6698  0005DE  101D               	iorwf	i2printf@width+1,w,c
  6699  0005E0  B4D8               	btfsc	status,2,c
  6700  0005E2  D00A               	goto	i2l3755
  6701  0005E4                     i2l3751:
  6702                           
  6703                           ;doprnt.c: 1430: (putch(' ') );
  6704  0005E4  0E20               	movlw	32
  6705  0005E6  EC8F  F012         	call	i2_putch
  6706                           
  6707                           ;doprnt.c: 1431: while(--width);
  6708  0005EA  061C               	decf	i2printf@width,f,c
  6709  0005EC  A0D8               	btfss	status,0,c
  6710  0005EE  061D               	decf	i2printf@width+1,f,c
  6711  0005F0  501C               	movf	i2printf@width,w,c
  6712  0005F2  101D               	iorwf	i2printf@width+1,w,c
  6713  0005F4  A4D8               	btfss	status,2,c
  6714  0005F6  D7F6               	goto	i2l3751
  6715  0005F8                     i2l3755:
  6716                           
  6717                           ;doprnt.c: 1438: if(flag & 0x03)
  6718  0005F8  C01B  F011         	movff	i2printf@flag,??i2_printf
  6719  0005FC  0E03               	movlw	3
  6720  0005FE  1611               	andwf	??i2_printf,f,c
  6721  000600  B4D8               	btfsc	status,2,c
  6722  000602  D003               	goto	i2l3759
  6723                           
  6724                           ;doprnt.c: 1439: (putch('-') );
  6725  000604  0E2D               	movlw	45
  6726  000606  EC8F  F012         	call	i2_putch
  6727  00060A                     i2l3759:
  6728                           
  6729                           ;doprnt.c: 1469: }
  6730                           ;doprnt.c: 1472: prec = c;
  6731  00060A  C01E  F018         	movff	i2printf@c,i2printf@prec
  6732                           
  6733                           ;doprnt.c: 1474: while(prec--) {
  6734  00060E  D050               	goto	i2l3773
  6735  000610                     i2l3761:
  6736                           
  6737                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6738  000610  5018               	movf	i2printf@prec,w,c
  6739  000612  0D02               	mullw	2
  6740  000614  0EF0               	movlw	low _dpowers
  6741  000616  24F3               	addwf	prodl,w,c
  6742  000618  6EF6               	movwf	tblptrl,c
  6743  00061A  0EFD               	movlw	high _dpowers
  6744  00061C  20F4               	addwfc	prodh,w,c
  6745  00061E  6EF7               	movwf	tblptrh,c
  6746  000620                     	if	0	;There are less than 3 active tblptr bytes
  6747  000620                     	endif
  6748  000620  0009               	tblrd		*+
  6749  000622  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6750  000626  000A               	tblrd		*-
  6751  000628  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6752  00062C  C019  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6753  000630  C01A  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6754  000634  EC9B  F010         	call	i2___lwdiv	;wreg free
  6755  000638  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  6756  00063C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  6757  000640  0E00               	movlw	0
  6758  000642  6E0B               	movwf	i2___lwmod@divisor+1,c
  6759  000644  0E0A               	movlw	10
  6760  000646  6E0A               	movwf	i2___lwmod@divisor,c
  6761  000648  EC13  F011         	call	i2___lwmod	;wreg free
  6762  00064C  5008               	movf	?i2___lwmod,w,c
  6763  00064E  0F30               	addlw	48
  6764  000650  6E1E               	movwf	i2printf@c,c
  6765                           
  6766                           ;doprnt.c: 1491: break;
  6767  000652  D02B               	goto	i2l3771
  6768  000654                     i2l3763:
  6769                           
  6770                           ;doprnt.c: 1499: {
  6771                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6772  000654  C019  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6773  000658  C01A  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6774  00065C  5018               	movf	i2printf@prec,w,c
  6775  00065E  0D02               	mullw	2
  6776  000660  0EFA               	movlw	low _hexpowers
  6777  000662  24F3               	addwf	prodl,w,c
  6778  000664  6EF6               	movwf	tblptrl,c
  6779  000666  0EFD               	movlw	high _hexpowers
  6780  000668  20F4               	addwfc	prodh,w,c
  6781  00066A  6EF7               	movwf	tblptrh,c
  6782  00066C                     	if	0	;There are less than 3 active tblptr bytes
  6783  00066C                     	endif
  6784  00066C  0009               	tblrd		*+
  6785  00066E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6786  000672  000A               	tblrd		*-
  6787  000674  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6788  000678  EC9B  F010         	call	i2___lwdiv	;wreg free
  6789  00067C  5001               	movf	?i2___lwdiv,w,c
  6790  00067E  0B0F               	andlw	15
  6791  000680  6E15               	movwf	i2printf@idx,c
  6792                           
  6793                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6794  000682  5015               	movf	i2printf@idx,w,c
  6795  000684  0D01               	mullw	1
  6796  000686  0EE1               	movlw	low STR_26
  6797  000688  24F3               	addwf	prodl,w,c
  6798  00068A  6EF6               	movwf	tblptrl,c
  6799  00068C  0EFE               	movlw	high STR_26
  6800  00068E  20F4               	addwfc	prodh,w,c
  6801  000690  6EF7               	movwf	tblptrh,c
  6802  000692                     	if	0	;There are less than 3 active tblptr bytes
  6803  000692                     	endif
  6804  000692  0008               	tblrd		*
  6805  000694  CFF5 F01E          	movff	tablat,i2printf@c
  6806                           
  6807                           ;doprnt.c: 1523: }
  6808                           
  6809                           ;doprnt.c: 1508: }
  6810                           ;doprnt.c: 1510: break;
  6811  000698  D008               	goto	i2l3771
  6812  00069A                     i2l3769:
  6813  00069A  501B               	movf	i2printf@flag,w,c
  6814  00069C  0B80               	andlw	128
  6815                           
  6816                           ; Switch size 1, requested type "space"
  6817                           ; Number of cases is 2, Range of values is 0 to 128
  6818                           ; switch strategies available:
  6819                           ; Name         Instructions Cycles
  6820                           ; simple_byte            7     4 (average)
  6821                           ;	Chosen strategy is simple_byte
  6822  00069E  0A00               	xorlw	0	; case 0
  6823  0006A0  B4D8               	btfsc	status,2,c
  6824  0006A2  D7B6               	goto	i2l3761
  6825  0006A4  0A80               	xorlw	128	; case 128
  6826  0006A6  B4D8               	btfsc	status,2,c
  6827  0006A8  D7D5               	goto	i2l3763
  6828  0006AA                     i2l3771:
  6829                           
  6830                           ;doprnt.c: 1524: (putch(c) );
  6831  0006AA  501E               	movf	i2printf@c,w,c
  6832  0006AC  EC8F  F012         	call	i2_putch
  6833  0006B0                     i2l3773:
  6834  0006B0  0618               	decf	i2printf@prec,f,c
  6835  0006B2  2818               	incf	i2printf@prec,w,c
  6836  0006B4  A4D8               	btfss	status,2,c
  6837  0006B6  D7F1               	goto	i2l3769
  6838  0006B8                     i2l3775:
  6839  0006B8  C00D  FFF6         	movff	i2printf@f,tblptrl
  6840  0006BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6841  0006C0  4A0D               	infsnz	i2printf@f,f,c
  6842  0006C2  2A0E               	incf	i2printf@f+1,f,c
  6843  0006C4                     	if	0	;tblptru may be non-zero
  6844  0006C4                     	endif
  6845  0006C4                     	if	0	;tblptru may be non-zero
  6846  0006C4                     	endif
  6847  0006C4  0008               	tblrd		*
  6848  0006C6  CFF5 F01E          	movff	tablat,i2printf@c
  6849  0006CA  501E               	movf	i2printf@c,w,c
  6850  0006CC  B4D8               	btfsc	status,2,c
  6851  0006CE  0012               	return	
  6852  0006D0  D67F               	goto	i2l3649
  6853  0006D2                     __end_ofi2_printf:
  6854                           	opt stack 0
  6855                           pclatu	equ	0xFFB
  6856                           pclath	equ	0xFFA
  6857                           tblptru	equ	0xFF8
  6858                           tblptrh	equ	0xFF7
  6859                           tblptrl	equ	0xFF6
  6860                           tablat	equ	0xFF5
  6861                           prodh	equ	0xFF4
  6862                           prodl	equ	0xFF3
  6863                           intcon	equ	0xFF2
  6864                           intcon2	equ	0xFF1
  6865                           intcon3	equ	0xFF0
  6866                           postinc0	equ	0xFEE
  6867                           fsr0h	equ	0xFEA
  6868                           fsr0l	equ	0xFE9
  6869                           wreg	equ	0xFE8
  6870                           fsr1h	equ	0xFE2
  6871                           fsr1l	equ	0xFE1
  6872                           indf2	equ	0xFDF
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function i2_putch *****************
  6880 ;; Defined at:
  6881 ;;		line 31 in file "lcd.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;  data            1    wreg     unsigned char 
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;  data            1    2[COMRAM] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      void 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;Total ram usage:        1 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    1
  6902 ;; This function calls:
  6903 ;;		i2_lcdNibble
  6904 ;; This function is called by:
  6905 ;;		i2_printf
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           	psect	text30
  6910  00251E                     __ptext30:
  6911                           	opt stack 0
  6912  00251E                     i2_putch:
  6913                           	opt stack 23
  6914                           
  6915                           ;incstack = 0
  6916                           ;i2putch@data stored from wreg
  6917  00251E  6E03               	movwf	i2putch@data,c
  6918                           
  6919                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  6920  002520  848C               	bsf	3980,2,c	;volatile
  6921                           
  6922                           ;lcd.c: 33: lcdNibble(data);
  6923  002522  5003               	movf	i2putch@data,w,c
  6924  002524  ECEC  F010         	call	i2_lcdNibble
  6925  002528  0012               	return		;funcret
  6926  00252A                     __end_ofi2_putch:
  6927                           	opt stack 0
  6928                           pclatu	equ	0xFFB
  6929                           pclath	equ	0xFFA
  6930                           tblptru	equ	0xFF8
  6931                           tblptrh	equ	0xFF7
  6932                           tblptrl	equ	0xFF6
  6933                           tablat	equ	0xFF5
  6934                           prodh	equ	0xFF4
  6935                           prodl	equ	0xFF3
  6936                           intcon	equ	0xFF2
  6937                           intcon2	equ	0xFF1
  6938                           intcon3	equ	0xFF0
  6939                           postinc0	equ	0xFEE
  6940                           fsr0h	equ	0xFEA
  6941                           fsr0l	equ	0xFE9
  6942                           wreg	equ	0xFE8
  6943                           fsr1h	equ	0xFE2
  6944                           fsr1l	equ	0xFE1
  6945                           indf2	equ	0xFDF
  6946                           postinc2	equ	0xFDE
  6947                           postdec2	equ	0xFDD
  6948                           fsr2h	equ	0xFDA
  6949                           fsr2l	equ	0xFD9
  6950                           status	equ	0xFD8
  6951                           
  6952 ;; *************** function i2_isdigit *****************
  6953 ;; Defined at:
  6954 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;  c               1    wreg     unsigned char 
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;  c               1    2[COMRAM] unsigned char 
  6959 ;; Return value:  Size  Location     Type
  6960 ;;		None               void
  6961 ;; Registers used:
  6962 ;;		wreg, status,2, status,0
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6969 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6972 ;;Total ram usage:        3 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; This function calls:
  6975 ;;		Nothing
  6976 ;; This function is called by:
  6977 ;;		i2_printf
  6978 ;; This function uses a non-reentrant model
  6979 ;;
  6980                           
  6981                           	psect	text31
  6982  002488                     __ptext31:
  6983                           	opt stack 0
  6984  002488                     i2_isdigit:
  6985                           	opt stack 24
  6986                           
  6987                           ;incstack = 0
  6988                           ;i2isdigit@c stored from wreg
  6989  002488  6E03               	movwf	i2isdigit@c,c
  6990  00248A  0E00               	movlw	0
  6991  00248C  6E02               	movwf	i2_isdigit$782,c
  6992  00248E  0E3A               	movlw	58
  6993  002490  6003               	cpfslt	i2isdigit@c,c
  6994  002492  D005               	goto	i2l3273
  6995  002494  0E2F               	movlw	47
  6996  002496  6403               	cpfsgt	i2isdigit@c,c
  6997  002498  D002               	goto	i2l3273
  6998  00249A  0E01               	movlw	1
  6999  00249C  6E02               	movwf	i2_isdigit$782,c
  7000  00249E                     i2l3273:
  7001  00249E  C002  F001         	movff	i2_isdigit$782,??i2_isdigit
  7002  0024A2  3001               	rrcf	??i2_isdigit,w,c
  7003  0024A4  0012               	return	
  7004  0024A6                     __end_ofi2_isdigit:
  7005                           	opt stack 0
  7006                           pclatu	equ	0xFFB
  7007                           pclath	equ	0xFFA
  7008                           tblptru	equ	0xFF8
  7009                           tblptrh	equ	0xFF7
  7010                           tblptrl	equ	0xFF6
  7011                           tablat	equ	0xFF5
  7012                           prodh	equ	0xFF4
  7013                           prodl	equ	0xFF3
  7014                           intcon	equ	0xFF2
  7015                           intcon2	equ	0xFF1
  7016                           intcon3	equ	0xFF0
  7017                           postinc0	equ	0xFEE
  7018                           fsr0h	equ	0xFEA
  7019                           fsr0l	equ	0xFE9
  7020                           wreg	equ	0xFE8
  7021                           fsr1h	equ	0xFE2
  7022                           fsr1l	equ	0xFE1
  7023                           indf2	equ	0xFDF
  7024                           postinc2	equ	0xFDE
  7025                           postdec2	equ	0xFDD
  7026                           fsr2h	equ	0xFDA
  7027                           fsr2l	equ	0xFD9
  7028                           status	equ	0xFD8
  7029                           
  7030 ;; *************** function i2___lwmod *****************
  7031 ;; Defined at:
  7032 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;  dividend        2    7[COMRAM] unsigned int 
  7035 ;;  divisor         2    9[COMRAM] unsigned int 
  7036 ;; Auto vars:     Size  Location     Type
  7037 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7038 ;; Return value:  Size  Location     Type
  7039 ;;                  2    7[COMRAM] unsigned int 
  7040 ;; Registers used:
  7041 ;;		wreg, status,2, status,0
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/0
  7044 ;;		On exit  : 0/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;Total ram usage:        5 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; This function calls:
  7054 ;;		Nothing
  7055 ;; This function is called by:
  7056 ;;		i2_printf
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text32
  7061  002226                     __ptext32:
  7062                           	opt stack 0
  7063  002226                     i2___lwmod:
  7064                           	opt stack 24
  7065                           
  7066                           ;incstack = 0
  7067  002226  500A               	movf	i2___lwmod@divisor,w,c
  7068  002228  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7069  00222A  B4D8               	btfsc	status,2,c
  7070  00222C  D018               	goto	i2l809
  7071  00222E  0E01               	movlw	1
  7072  002230  6E0C               	movwf	i2___lwmod@counter,c
  7073  002232  D004               	goto	i2l3305
  7074  002234                     i2l3303:
  7075  002234  90D8               	bcf	status,0,c
  7076  002236  360A               	rlcf	i2___lwmod@divisor,f,c
  7077  002238  360B               	rlcf	i2___lwmod@divisor+1,f,c
  7078  00223A  2A0C               	incf	i2___lwmod@counter,f,c
  7079  00223C                     i2l3305:
  7080  00223C  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  7081  00223E  D7FA               	goto	i2l3303
  7082  002240                     i2l3307:
  7083  002240  500A               	movf	i2___lwmod@divisor,w,c
  7084  002242  5C08               	subwf	i2___lwmod@dividend,w,c
  7085  002244  500B               	movf	i2___lwmod@divisor+1,w,c
  7086  002246  5809               	subwfb	i2___lwmod@dividend+1,w,c
  7087  002248  A0D8               	btfss	status,0,c
  7088  00224A  D004               	goto	i2l3311
  7089  00224C  500A               	movf	i2___lwmod@divisor,w,c
  7090  00224E  5E08               	subwf	i2___lwmod@dividend,f,c
  7091  002250  500B               	movf	i2___lwmod@divisor+1,w,c
  7092  002252  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  7093  002254                     i2l3311:
  7094  002254  90D8               	bcf	status,0,c
  7095  002256  320B               	rrcf	i2___lwmod@divisor+1,f,c
  7096  002258  320A               	rrcf	i2___lwmod@divisor,f,c
  7097  00225A  2E0C               	decfsz	i2___lwmod@counter,f,c
  7098  00225C  D7F1               	goto	i2l3307
  7099  00225E                     i2l809:
  7100  00225E  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  7101  002262  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7102  002266  0012               	return		;funcret
  7103  002268                     __end_ofi2___lwmod:
  7104                           	opt stack 0
  7105                           pclatu	equ	0xFFB
  7106                           pclath	equ	0xFFA
  7107                           tblptru	equ	0xFF8
  7108                           tblptrh	equ	0xFF7
  7109                           tblptrl	equ	0xFF6
  7110                           tablat	equ	0xFF5
  7111                           prodh	equ	0xFF4
  7112                           prodl	equ	0xFF3
  7113                           intcon	equ	0xFF2
  7114                           intcon2	equ	0xFF1
  7115                           intcon3	equ	0xFF0
  7116                           postinc0	equ	0xFEE
  7117                           fsr0h	equ	0xFEA
  7118                           fsr0l	equ	0xFE9
  7119                           wreg	equ	0xFE8
  7120                           fsr1h	equ	0xFE2
  7121                           fsr1l	equ	0xFE1
  7122                           indf2	equ	0xFDF
  7123                           postinc2	equ	0xFDE
  7124                           postdec2	equ	0xFDD
  7125                           fsr2h	equ	0xFDA
  7126                           fsr2l	equ	0xFD9
  7127                           status	equ	0xFD8
  7128                           
  7129 ;; *************** function i2___lwdiv *****************
  7130 ;; Defined at:
  7131 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;  dividend        2    0[COMRAM] unsigned int 
  7134 ;;  divisor         2    2[COMRAM] unsigned int 
  7135 ;; Auto vars:     Size  Location     Type
  7136 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7137 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7138 ;; Return value:  Size  Location     Type
  7139 ;;                  2    0[COMRAM] unsigned int 
  7140 ;; Registers used:
  7141 ;;		wreg, status,2, status,0
  7142 ;; Tracked objects:
  7143 ;;		On entry : 0/0
  7144 ;;		On exit  : 0/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7147 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7148 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7150 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7151 ;;Total ram usage:        7 bytes
  7152 ;; Hardware stack levels used:    1
  7153 ;; This function calls:
  7154 ;;		Nothing
  7155 ;; This function is called by:
  7156 ;;		i2_printf
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           	psect	text33
  7161  002136                     __ptext33:
  7162                           	opt stack 0
  7163  002136                     i2___lwdiv:
  7164                           	opt stack 24
  7165                           
  7166                           ;incstack = 0
  7167  002136  0E00               	movlw	0
  7168  002138  6E06               	movwf	i2___lwdiv@quotient+1,c
  7169  00213A  0E00               	movlw	0
  7170  00213C  6E05               	movwf	i2___lwdiv@quotient,c
  7171  00213E  5003               	movf	i2___lwdiv@divisor,w,c
  7172  002140  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7173  002142  B4D8               	btfsc	status,2,c
  7174  002144  D01C               	goto	i2l799
  7175  002146  0E01               	movlw	1
  7176  002148  6E07               	movwf	i2___lwdiv@counter,c
  7177  00214A  D004               	goto	i2l3285
  7178  00214C                     i2l3283:
  7179  00214C  90D8               	bcf	status,0,c
  7180  00214E  3603               	rlcf	i2___lwdiv@divisor,f,c
  7181  002150  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7182  002152  2A07               	incf	i2___lwdiv@counter,f,c
  7183  002154                     i2l3285:
  7184  002154  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7185  002156  D7FA               	goto	i2l3283
  7186  002158                     i2l3287:
  7187  002158  90D8               	bcf	status,0,c
  7188  00215A  3605               	rlcf	i2___lwdiv@quotient,f,c
  7189  00215C  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7190  00215E  5003               	movf	i2___lwdiv@divisor,w,c
  7191  002160  5C01               	subwf	i2___lwdiv@dividend,w,c
  7192  002162  5004               	movf	i2___lwdiv@divisor+1,w,c
  7193  002164  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7194  002166  A0D8               	btfss	status,0,c
  7195  002168  D005               	goto	i2l3295
  7196  00216A  5003               	movf	i2___lwdiv@divisor,w,c
  7197  00216C  5E01               	subwf	i2___lwdiv@dividend,f,c
  7198  00216E  5004               	movf	i2___lwdiv@divisor+1,w,c
  7199  002170  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  7200  002172  8005               	bsf	i2___lwdiv@quotient,0,c
  7201  002174                     i2l3295:
  7202  002174  90D8               	bcf	status,0,c
  7203  002176  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  7204  002178  3203               	rrcf	i2___lwdiv@divisor,f,c
  7205  00217A  2E07               	decfsz	i2___lwdiv@counter,f,c
  7206  00217C  D7ED               	goto	i2l3287
  7207  00217E                     i2l799:
  7208  00217E  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7209  002182  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7210  002186  0012               	return		;funcret
  7211  002188                     __end_ofi2___lwdiv:
  7212                           	opt stack 0
  7213                           pclatu	equ	0xFFB
  7214                           pclath	equ	0xFFA
  7215                           tblptru	equ	0xFF8
  7216                           tblptrh	equ	0xFF7
  7217                           tblptrl	equ	0xFF6
  7218                           tablat	equ	0xFF5
  7219                           prodh	equ	0xFF4
  7220                           prodl	equ	0xFF3
  7221                           intcon	equ	0xFF2
  7222                           intcon2	equ	0xFF1
  7223                           intcon3	equ	0xFF0
  7224                           postinc0	equ	0xFEE
  7225                           fsr0h	equ	0xFEA
  7226                           fsr0l	equ	0xFE9
  7227                           wreg	equ	0xFE8
  7228                           fsr1h	equ	0xFE2
  7229                           fsr1l	equ	0xFE1
  7230                           indf2	equ	0xFDF
  7231                           postinc2	equ	0xFDE
  7232                           postdec2	equ	0xFDD
  7233                           fsr2h	equ	0xFDA
  7234                           fsr2l	equ	0xFD9
  7235                           status	equ	0xFD8
  7236                           
  7237 ;; *************** function i2_lcdInst *****************
  7238 ;; Defined at:
  7239 ;;		line 26 in file "lcd.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;  data            1    wreg     unsigned char 
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;  data            1    2[COMRAM] unsigned char 
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg, status,2, status,0, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;Total ram usage:        1 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    1
  7260 ;; This function calls:
  7261 ;;		i2_lcdNibble
  7262 ;; This function is called by:
  7263 ;;		_isr
  7264 ;;		_read_colorsensor
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           	psect	text34
  7269  00252A                     __ptext34:
  7270                           	opt stack 0
  7271  00252A                     i2_lcdInst:
  7272                           	opt stack 24
  7273                           
  7274                           ;incstack = 0
  7275                           ;i2lcdInst@data stored from wreg
  7276  00252A  6E03               	movwf	i2lcdInst@data,c
  7277                           
  7278                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  7279  00252C  948C               	bcf	3980,2,c	;volatile
  7280                           
  7281                           ;lcd.c: 28: lcdNibble(data);
  7282  00252E  5003               	movf	i2lcdInst@data,w,c
  7283  002530  ECEC  F010         	call	i2_lcdNibble
  7284  002534  0012               	return		;funcret
  7285  002536                     __end_ofi2_lcdInst:
  7286                           	opt stack 0
  7287                           pclatu	equ	0xFFB
  7288                           pclath	equ	0xFFA
  7289                           tblptru	equ	0xFF8
  7290                           tblptrh	equ	0xFF7
  7291                           tblptrl	equ	0xFF6
  7292                           tablat	equ	0xFF5
  7293                           prodh	equ	0xFF4
  7294                           prodl	equ	0xFF3
  7295                           intcon	equ	0xFF2
  7296                           intcon2	equ	0xFF1
  7297                           intcon3	equ	0xFF0
  7298                           postinc0	equ	0xFEE
  7299                           fsr0h	equ	0xFEA
  7300                           fsr0l	equ	0xFE9
  7301                           wreg	equ	0xFE8
  7302                           fsr1h	equ	0xFE2
  7303                           fsr1l	equ	0xFE1
  7304                           indf2	equ	0xFDF
  7305                           postinc2	equ	0xFDE
  7306                           postdec2	equ	0xFDD
  7307                           fsr2h	equ	0xFDA
  7308                           fsr2l	equ	0xFD9
  7309                           status	equ	0xFD8
  7310                           
  7311 ;; *************** function i2_lcdNibble *****************
  7312 ;; Defined at:
  7313 ;;		line 36 in file "lcd.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;  data            1    wreg     unsigned char 
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;  data            1    1[COMRAM] unsigned char 
  7318 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  1    wreg      void 
  7321 ;; Registers used:
  7322 ;;		wreg, status,2, status,0
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;Total ram usage:        2 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; This function calls:
  7335 ;;		Nothing
  7336 ;; This function is called by:
  7337 ;;		i2_lcdInst
  7338 ;;		i2_putch
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text35
  7343  0021D8                     __ptext35:
  7344                           	opt stack 0
  7345  0021D8                     i2_lcdNibble:
  7346                           	opt stack 23
  7347                           
  7348                           ;incstack = 0
  7349                           ;i2lcdNibble@data stored from wreg
  7350  0021D8  6E02               	movwf	i2lcdNibble@data,c
  7351                           
  7352                           ;lcd.c: 38: char temp = data & 0xF0;
  7353  0021DA  5002               	movf	i2lcdNibble@data,w,c
  7354  0021DC  0BF0               	andlw	240
  7355  0021DE  6E01               	movwf	i2lcdNibble@temp,c
  7356                           
  7357                           ;lcd.c: 39: LATD = LATD & 0x0F;
  7358  0021E0  508C               	movf	3980,w,c	;volatile
  7359  0021E2  0B0F               	andlw	15
  7360  0021E4  6E8C               	movwf	3980,c	;volatile
  7361                           
  7362                           ;lcd.c: 40: LATD = temp | LATD;
  7363  0021E6  5001               	movf	i2lcdNibble@temp,w,c
  7364  0021E8  108C               	iorwf	3980,w,c	;volatile
  7365  0021EA  6E8C               	movwf	3980,c	;volatile
  7366                           
  7367                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7368  0021EC  968C               	bcf	3980,3,c	;volatile
  7369                           
  7370                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7371  0021EE  0E19               	movlw	25
  7372  0021F0                     i2u391_47:
  7373  0021F0  2EE8               	decfsz	wreg,f,c
  7374  0021F2  D7FE               	bra	i2u391_47
  7375                           
  7376                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  7377  0021F4  868C               	bsf	3980,3,c	;volatile
  7378                           
  7379                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7380  0021F6  0E19               	movlw	25
  7381  0021F8                     i2u392_47:
  7382  0021F8  2EE8               	decfsz	wreg,f,c
  7383  0021FA  D7FE               	bra	i2u392_47
  7384                           
  7385                           ;lcd.c: 47: data = data << 4;
  7386  0021FC  3802               	swapf	i2lcdNibble@data,w,c
  7387  0021FE  0BF0               	andlw	240
  7388  002200  6E02               	movwf	i2lcdNibble@data,c
  7389                           
  7390                           ;lcd.c: 49: temp = data & 0xF0;
  7391  002202  5002               	movf	i2lcdNibble@data,w,c
  7392  002204  0BF0               	andlw	240
  7393  002206  6E01               	movwf	i2lcdNibble@temp,c
  7394                           
  7395                           ;lcd.c: 50: LATD = LATD & 0x0F;
  7396  002208  508C               	movf	3980,w,c	;volatile
  7397  00220A  0B0F               	andlw	15
  7398  00220C  6E8C               	movwf	3980,c	;volatile
  7399                           
  7400                           ;lcd.c: 51: LATD = temp | LATD;
  7401  00220E  5001               	movf	i2lcdNibble@temp,w,c
  7402  002210  108C               	iorwf	3980,w,c	;volatile
  7403  002212  6E8C               	movwf	3980,c	;volatile
  7404                           
  7405                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  7406  002214  968C               	bcf	3980,3,c	;volatile
  7407                           
  7408                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7409  002216  0E19               	movlw	25
  7410  002218                     i2u393_47:
  7411  002218  2EE8               	decfsz	wreg,f,c
  7412  00221A  D7FE               	bra	i2u393_47
  7413                           
  7414                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  7415  00221C  868C               	bsf	3980,3,c	;volatile
  7416                           
  7417                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7418  00221E  0E19               	movlw	25
  7419  002220                     i2u394_47:
  7420  002220  2EE8               	decfsz	wreg,f,c
  7421  002222  D7FE               	bra	i2u394_47
  7422  002224  0012               	return		;funcret
  7423  002226                     __end_ofi2_lcdNibble:
  7424                           	opt stack 0
  7425                           pclatu	equ	0xFFB
  7426                           pclath	equ	0xFFA
  7427                           tblptru	equ	0xFF8
  7428                           tblptrh	equ	0xFF7
  7429                           tblptrl	equ	0xFF6
  7430                           tablat	equ	0xFF5
  7431                           prodh	equ	0xFF4
  7432                           prodl	equ	0xFF3
  7433                           intcon	equ	0xFF2
  7434                           intcon2	equ	0xFF1
  7435                           intcon3	equ	0xFF0
  7436                           postinc0	equ	0xFEE
  7437                           fsr0h	equ	0xFEA
  7438                           fsr0l	equ	0xFE9
  7439                           wreg	equ	0xFE8
  7440                           fsr1h	equ	0xFE2
  7441                           fsr1l	equ	0xFE1
  7442                           indf2	equ	0xFDF
  7443                           postinc2	equ	0xFDE
  7444                           postdec2	equ	0xFDD
  7445                           fsr2h	equ	0xFDA
  7446                           fsr2l	equ	0xFD9
  7447                           status	equ	0xFD8
  7448                           
  7449 ;; *************** function i2_I2C_Master_Write *****************
  7450 ;; Defined at:
  7451 ;;		line 47 in file "I2C.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  d               2    1[COMRAM] unsigned int 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;		None
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg, status,2, status,0, cstack
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;Total ram usage:        2 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:    1
  7472 ;; This function calls:
  7473 ;;		i2_I2C_Master_Wait
  7474 ;; This function is called by:
  7475 ;;		_read_time
  7476 ;;		_read_colorsensor
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           	psect	text36
  7481  002540                     __ptext36:
  7482                           	opt stack 0
  7483  002540                     i2_I2C_Master_Write:
  7484                           	opt stack 23
  7485                           
  7486                           ;I2C.c: 49: I2C_Master_Wait();
  7487                           
  7488                           ;incstack = 0
  7489  002540  EC76  F012         	call	i2_I2C_Master_Wait	;wreg free
  7490                           
  7491                           ;I2C.c: 50: SSPBUF = d;
  7492  002544  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  7493  002548  0012               	return		;funcret
  7494  00254A                     __end_ofi2_I2C_Master_Write:
  7495                           	opt stack 0
  7496                           pclatu	equ	0xFFB
  7497                           pclath	equ	0xFFA
  7498                           tblptru	equ	0xFF8
  7499                           tblptrh	equ	0xFF7
  7500                           tblptrl	equ	0xFF6
  7501                           tablat	equ	0xFF5
  7502                           prodh	equ	0xFF4
  7503                           prodl	equ	0xFF3
  7504                           intcon	equ	0xFF2
  7505                           intcon2	equ	0xFF1
  7506                           intcon3	equ	0xFF0
  7507                           postinc0	equ	0xFEE
  7508                           fsr0h	equ	0xFEA
  7509                           fsr0l	equ	0xFE9
  7510                           wreg	equ	0xFE8
  7511                           fsr1h	equ	0xFE2
  7512                           fsr1l	equ	0xFE1
  7513                           indf2	equ	0xFDF
  7514                           postinc2	equ	0xFDE
  7515                           postdec2	equ	0xFDD
  7516                           fsr2h	equ	0xFDA
  7517                           fsr2l	equ	0xFD9
  7518                           status	equ	0xFD8
  7519                           
  7520 ;; *************** function i2_I2C_Master_Stop *****************
  7521 ;; Defined at:
  7522 ;;		line 41 in file "I2C.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;		None
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;		None
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  1    wreg      void 
  7529 ;; Registers used:
  7530 ;;		wreg, status,2, status,0, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;Total ram usage:        0 bytes
  7541 ;; Hardware stack levels used:    1
  7542 ;; Hardware stack levels required when called:    1
  7543 ;; This function calls:
  7544 ;;		i2_I2C_Master_Wait
  7545 ;; This function is called by:
  7546 ;;		_read_time
  7547 ;;		_read_colorsensor
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text37
  7552  00255A                     __ptext37:
  7553                           	opt stack 0
  7554  00255A                     i2_I2C_Master_Stop:
  7555                           	opt stack 23
  7556                           
  7557                           ;I2C.c: 43: I2C_Master_Wait();
  7558                           
  7559                           ;incstack = 0
  7560  00255A  EC76  F012         	call	i2_I2C_Master_Wait	;wreg free
  7561                           
  7562                           ;I2C.c: 44: PEN = 1;
  7563  00255E  84C5               	bsf	4037,2,c	;volatile
  7564  002560  0012               	return		;funcret
  7565  002562                     __end_ofi2_I2C_Master_Stop:
  7566                           	opt stack 0
  7567                           pclatu	equ	0xFFB
  7568                           pclath	equ	0xFFA
  7569                           tblptru	equ	0xFF8
  7570                           tblptrh	equ	0xFF7
  7571                           tblptrl	equ	0xFF6
  7572                           tablat	equ	0xFF5
  7573                           prodh	equ	0xFF4
  7574                           prodl	equ	0xFF3
  7575                           intcon	equ	0xFF2
  7576                           intcon2	equ	0xFF1
  7577                           intcon3	equ	0xFF0
  7578                           postinc0	equ	0xFEE
  7579                           fsr0h	equ	0xFEA
  7580                           fsr0l	equ	0xFE9
  7581                           wreg	equ	0xFE8
  7582                           fsr1h	equ	0xFE2
  7583                           fsr1l	equ	0xFE1
  7584                           indf2	equ	0xFDF
  7585                           postinc2	equ	0xFDE
  7586                           postdec2	equ	0xFDD
  7587                           fsr2h	equ	0xFDA
  7588                           fsr2l	equ	0xFD9
  7589                           status	equ	0xFD8
  7590                           
  7591 ;; *************** function i2_I2C_Master_Start *****************
  7592 ;; Defined at:
  7593 ;;		line 29 in file "I2C.c"
  7594 ;; Parameters:    Size  Location     Type
  7595 ;;		None
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;		None
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  1    wreg      void 
  7600 ;; Registers used:
  7601 ;;		wreg, status,2, status,0, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;Total ram usage:        0 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    1
  7614 ;; This function calls:
  7615 ;;		i2_I2C_Master_Wait
  7616 ;; This function is called by:
  7617 ;;		_read_time
  7618 ;;		_read_colorsensor
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           	psect	text38
  7623  002562                     __ptext38:
  7624                           	opt stack 0
  7625  002562                     i2_I2C_Master_Start:
  7626                           	opt stack 23
  7627                           
  7628                           ;I2C.c: 31: I2C_Master_Wait();
  7629                           
  7630                           ;incstack = 0
  7631  002562  EC76  F012         	call	i2_I2C_Master_Wait	;wreg free
  7632                           
  7633                           ;I2C.c: 32: SEN = 1;
  7634  002566  80C5               	bsf	4037,0,c	;volatile
  7635  002568  0012               	return		;funcret
  7636  00256A                     __end_ofi2_I2C_Master_Start:
  7637                           	opt stack 0
  7638                           pclatu	equ	0xFFB
  7639                           pclath	equ	0xFFA
  7640                           tblptru	equ	0xFF8
  7641                           tblptrh	equ	0xFF7
  7642                           tblptrl	equ	0xFF6
  7643                           tablat	equ	0xFF5
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           intcon	equ	0xFF2
  7647                           intcon2	equ	0xFF1
  7648                           intcon3	equ	0xFF0
  7649                           postinc0	equ	0xFEE
  7650                           fsr0h	equ	0xFEA
  7651                           fsr0l	equ	0xFE9
  7652                           wreg	equ	0xFE8
  7653                           fsr1h	equ	0xFE2
  7654                           fsr1l	equ	0xFE1
  7655                           indf2	equ	0xFDF
  7656                           postinc2	equ	0xFDE
  7657                           postdec2	equ	0xFDD
  7658                           fsr2h	equ	0xFDA
  7659                           fsr2l	equ	0xFD9
  7660                           status	equ	0xFD8
  7661                           
  7662 ;; *************** function i2_I2C_Master_Read *****************
  7663 ;; Defined at:
  7664 ;;		line 53 in file "I2C.c"
  7665 ;; Parameters:    Size  Location     Type
  7666 ;;  a               1    wreg     unsigned char 
  7667 ;; Auto vars:     Size  Location     Type
  7668 ;;  a               1    1[COMRAM] unsigned char 
  7669 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  1    wreg      unsigned char 
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;Total ram usage:        2 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    1
  7686 ;; This function calls:
  7687 ;;		i2_I2C_Master_Wait
  7688 ;; This function is called by:
  7689 ;;		_read_time
  7690 ;;		_read_colorsensor
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	text39
  7695  002418                     __ptext39:
  7696                           	opt stack 0
  7697  002418                     i2_I2C_Master_Read:
  7698                           	opt stack 23
  7699                           
  7700                           ;incstack = 0
  7701                           ;i2I2C_Master_Read@a stored from wreg
  7702  002418  6E02               	movwf	i2I2C_Master_Read@a,c
  7703                           
  7704                           ;I2C.c: 55: unsigned char temp;
  7705                           ;I2C.c: 56: I2C_Master_Wait();
  7706  00241A  EC76  F012         	call	i2_I2C_Master_Wait	;wreg free
  7707                           
  7708                           ;I2C.c: 57: RCEN = 1;
  7709  00241E  86C5               	bsf	4037,3,c	;volatile
  7710                           
  7711                           ;I2C.c: 58: I2C_Master_Wait();
  7712  002420  EC76  F012         	call	i2_I2C_Master_Wait	;wreg free
  7713                           
  7714                           ;I2C.c: 59: temp = SSPBUF;
  7715  002424  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  7716                           
  7717                           ;I2C.c: 60: I2C_Master_Wait();
  7718  002428  EC76  F012         	call	i2_I2C_Master_Wait	;wreg free
  7719                           
  7720                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7721  00242C  5002               	movf	i2I2C_Master_Read@a,w,c
  7722  00242E  A4D8               	btfss	status,2,c
  7723  002430  D002               	goto	i2u336_40
  7724  002432  8AC5               	bsf	4037,5,c	;volatile
  7725  002434  D001               	goto	i2l3637
  7726  002436                     i2u336_40:
  7727  002436  9AC5               	bcf	4037,5,c	;volatile
  7728  002438                     i2l3637:
  7729                           
  7730                           ;I2C.c: 62: ACKEN = 1;
  7731  002438  88C5               	bsf	4037,4,c	;volatile
  7732                           
  7733                           ;I2C.c: 63: return temp;
  7734  00243A  5003               	movf	i2I2C_Master_Read@temp,w,c
  7735  00243C  0012               	return	
  7736  00243E                     __end_ofi2_I2C_Master_Read:
  7737                           	opt stack 0
  7738                           pclatu	equ	0xFFB
  7739                           pclath	equ	0xFFA
  7740                           tblptru	equ	0xFF8
  7741                           tblptrh	equ	0xFF7
  7742                           tblptrl	equ	0xFF6
  7743                           tablat	equ	0xFF5
  7744                           prodh	equ	0xFF4
  7745                           prodl	equ	0xFF3
  7746                           intcon	equ	0xFF2
  7747                           intcon2	equ	0xFF1
  7748                           intcon3	equ	0xFF0
  7749                           postinc0	equ	0xFEE
  7750                           fsr0h	equ	0xFEA
  7751                           fsr0l	equ	0xFE9
  7752                           wreg	equ	0xFE8
  7753                           fsr1h	equ	0xFE2
  7754                           fsr1l	equ	0xFE1
  7755                           indf2	equ	0xFDF
  7756                           postinc2	equ	0xFDE
  7757                           postdec2	equ	0xFDD
  7758                           fsr2h	equ	0xFDA
  7759                           fsr2l	equ	0xFD9
  7760                           status	equ	0xFD8
  7761                           
  7762 ;; *************** function i2_I2C_Master_Wait *****************
  7763 ;; Defined at:
  7764 ;;		line 24 in file "I2C.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;		None
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;		None
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  1    wreg      void 
  7771 ;; Registers used:
  7772 ;;		wreg, status,2, status,0
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7780 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7782 ;;Total ram usage:        1 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; This function calls:
  7785 ;;		Nothing
  7786 ;; This function is called by:
  7787 ;;		i2_I2C_Master_Start
  7788 ;;		i2_I2C_Master_Stop
  7789 ;;		i2_I2C_Master_Write
  7790 ;;		i2_I2C_Master_Read
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           	psect	text40
  7795  0024EC                     __ptext40:
  7796                           	opt stack 0
  7797  0024EC                     i2_I2C_Master_Wait:
  7798                           	opt stack 23
  7799  0024EC                     i2l34:
  7800  0024EC  B4C7               	btfsc	4039,2,c	;volatile
  7801  0024EE  D7FE               	goto	i2l34
  7802  0024F0  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  7803  0024F4  0E1F               	movlw	31
  7804  0024F6  1601               	andwf	??i2_I2C_Master_Wait,f,c
  7805  0024F8  B4D8               	btfsc	status,2,c
  7806  0024FA  0012               	return	
  7807  0024FC  D7F7               	goto	i2l34
  7808  0024FE                     __end_ofi2_I2C_Master_Wait:
  7809                           	opt stack 0
  7810                           pclatu	equ	0xFFB
  7811                           pclath	equ	0xFFA
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           intcon2	equ	0xFF1
  7820                           intcon3	equ	0xFF0
  7821                           postinc0	equ	0xFEE
  7822                           fsr0h	equ	0xFEA
  7823                           fsr0l	equ	0xFE9
  7824                           wreg	equ	0xFE8
  7825                           fsr1h	equ	0xFE2
  7826                           fsr1l	equ	0xFE1
  7827                           indf2	equ	0xFDF
  7828                           postinc2	equ	0xFDE
  7829                           postdec2	equ	0xFDD
  7830                           fsr2h	equ	0xFDA
  7831                           fsr2l	equ	0xFD9
  7832                           status	equ	0xFD8
  7833                           
  7834 ;; *************** function _dec_to_hex *****************
  7835 ;; Defined at:
  7836 ;;		line 230 in file "main.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;  num             2   98[COMRAM] int 
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;  quotient        2  112[COMRAM] int 
  7841 ;;  hexnum          2  110[COMRAM] int 
  7842 ;;  i               2  108[COMRAM] int 
  7843 ;;  temp            2  106[COMRAM] int 
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  2   98[COMRAM] int 
  7846 ;; Registers used:
  7847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7853 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;Total ram usage:       16 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    5
  7860 ;; This function calls:
  7861 ;;		___awdiv
  7862 ;;		___awtoft
  7863 ;;		___ftadd
  7864 ;;		___ftmul
  7865 ;;		___fttol
  7866 ;;		_pow
  7867 ;; This function is called by:
  7868 ;;		_isr
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           	psect	text41
  7873  00119E                     __ptext41:
  7874                           	opt stack 0
  7875  00119E                     _dec_to_hex:
  7876                           	opt stack 20
  7877                           
  7878                           ;main.c: 231: int i = 0, quotient = num, temp, hexnum = 0;
  7879                           
  7880                           ;incstack = 0
  7881  00119E  0E00               	movlw	0
  7882  0011A0  6E6E               	movwf	dec_to_hex@i+1,c
  7883  0011A2  0E00               	movlw	0
  7884  0011A4  6E6D               	movwf	dec_to_hex@i,c
  7885  0011A6  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  7886  0011AA  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  7887  0011AE  0E00               	movlw	0
  7888  0011B0  6E70               	movwf	dec_to_hex@hexnum+1,c
  7889  0011B2  0E00               	movlw	0
  7890  0011B4  6E6F               	movwf	dec_to_hex@hexnum,c
  7891                           
  7892                           ;main.c: 233: while (quotient != 0) {
  7893  0011B6  D068               	goto	i2l3959
  7894  0011B8                     i2l3947:
  7895                           
  7896                           ;main.c: 234: temp = quotient % 16;
  7897  0011B8  0E0F               	movlw	15
  7898  0011BA  1471               	andwf	dec_to_hex@quotient,w,c
  7899  0011BC  6E6B               	movwf	dec_to_hex@temp,c
  7900  0011BE  6A6C               	clrf	dec_to_hex@temp+1,c
  7901                           
  7902                           ;main.c: 236: hexnum += temp*pow(10,i);
  7903  0011C0  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  7904  0011C4  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  7905  0011C8  EC73  F011         	call	___awtoft	;wreg free
  7906  0011CC  C009  F065         	movff	?___awtoft,_dec_to_hex$1220
  7907  0011D0  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1220+1
  7908  0011D4  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1220+2
  7909                           
  7910                           ;main.c: 236: hexnum += temp*pow(10,i);
  7911  0011D8  C065  F055         	movff	_dec_to_hex$1220,pow@y
  7912  0011DC  C066  F056         	movff	_dec_to_hex$1220+1,pow@y+1
  7913  0011E0  C067  F057         	movff	_dec_to_hex$1220+2,pow@y+2
  7914  0011E4  0E00               	movlw	0
  7915  0011E6  6E52               	movwf	pow@x,c
  7916  0011E8  0E20               	movlw	32
  7917  0011EA  6E53               	movwf	pow@x+1,c
  7918  0011EC  0E41               	movlw	65
  7919  0011EE  6E54               	movwf	pow@x+2,c
  7920  0011F0  EC60  F006         	call	_pow	;wreg free
  7921  0011F4  C052  F068         	movff	?_pow,_dec_to_hex$1221
  7922  0011F8  C053  F069         	movff	?_pow+1,_dec_to_hex$1221+1
  7923  0011FC  C054  F06A         	movff	?_pow+2,_dec_to_hex$1221+2
  7924                           
  7925                           ;main.c: 236: hexnum += temp*pow(10,i);
  7926  001200  C068  F010         	movff	_dec_to_hex$1221,___ftmul@f2
  7927  001204  C069  F011         	movff	_dec_to_hex$1221+1,___ftmul@f2+1
  7928  001208  C06A  F012         	movff	_dec_to_hex$1221+2,___ftmul@f2+2
  7929  00120C  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  7930  001210  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  7931  001214  EC73  F011         	call	___awtoft	;wreg free
  7932  001218  C009  F00D         	movff	?___awtoft,___ftmul@f1
  7933  00121C  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  7934  001220  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  7935  001224  ECC7  F009         	call	___ftmul	;wreg free
  7936  001228  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  7937  00122C  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  7938  001230  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  7939  001234  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  7940  001238  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  7941  00123C  EC73  F011         	call	___awtoft	;wreg free
  7942  001240  C009  F01C         	movff	?___awtoft,___ftadd@f1
  7943  001244  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  7944  001248  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  7945  00124C  EC8A  F005         	call	___ftadd	;wreg free
  7946  001250  C01C  F028         	movff	?___ftadd,___fttol@f1
  7947  001254  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  7948  001258  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  7949  00125C  EC4D  F009         	call	___fttol	;wreg free
  7950  001260  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  7951  001264  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  7952                           
  7953                           ;main.c: 238: quotient = quotient / 16;
  7954  001268  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
  7955  00126C  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  7956  001270  0E00               	movlw	0
  7957  001272  6E04               	movwf	___awdiv@divisor+1,c
  7958  001274  0E10               	movlw	16
  7959  001276  6E03               	movwf	___awdiv@divisor,c
  7960  001278  ECEE  F00E         	call	___awdiv	;wreg free
  7961  00127C  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
  7962  001280  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  7963                           
  7964                           ;main.c: 239: i += 1;
  7965  001284  4A6D               	infsnz	dec_to_hex@i,f,c
  7966  001286  2A6E               	incf	dec_to_hex@i+1,f,c
  7967  001288                     i2l3959:
  7968  001288  5071               	movf	dec_to_hex@quotient,w,c
  7969  00128A  1072               	iorwf	dec_to_hex@quotient+1,w,c
  7970  00128C  A4D8               	btfss	status,2,c
  7971  00128E  D794               	goto	i2l3947
  7972                           
  7973                           ;main.c: 240: }
  7974                           ;main.c: 241: return hexnum;
  7975  001290  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  7976  001294  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  7977  001298  0012               	return		;funcret
  7978  00129A                     __end_of_dec_to_hex:
  7979                           	opt stack 0
  7980                           pclatu	equ	0xFFB
  7981                           pclath	equ	0xFFA
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           intcon2	equ	0xFF1
  7990                           intcon3	equ	0xFF0
  7991                           postinc0	equ	0xFEE
  7992                           fsr0h	equ	0xFEA
  7993                           fsr0l	equ	0xFE9
  7994                           wreg	equ	0xFE8
  7995                           fsr1h	equ	0xFE2
  7996                           fsr1l	equ	0xFE1
  7997                           indf2	equ	0xFDF
  7998                           postinc2	equ	0xFDE
  7999                           postdec2	equ	0xFDD
  8000                           fsr2h	equ	0xFDA
  8001                           fsr2l	equ	0xFD9
  8002                           status	equ	0xFD8
  8003                           
  8004 ;; *************** function _pow *****************
  8005 ;; Defined at:
  8006 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;  x               3   81[COMRAM] int 
  8009 ;;  y               3   84[COMRAM] int 
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;  yi              4   94[COMRAM] unsigned long 
  8012 ;;  sign            1   93[COMRAM] unsigned char 
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  3   81[COMRAM] unsigned char 
  8015 ;; Registers used:
  8016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8022 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;Total ram usage:       17 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    4
  8029 ;; This function calls:
  8030 ;;		___ftge
  8031 ;;		___ftmul
  8032 ;;		___ftneg
  8033 ;;		___fttol
  8034 ;;		___lltoft
  8035 ;;		_exp
  8036 ;;		_log
  8037 ;; This function is called by:
  8038 ;;		_dec_to_hex
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           	psect	text42
  8043  000CC0                     __ptext42:
  8044                           	opt stack 0
  8045  000CC0                     _pow:
  8046                           	opt stack 20
  8047                           
  8048                           ;incstack = 0
  8049  000CC0  0E00               	movlw	0
  8050  000CC2  6E5E               	movwf	pow@sign,c
  8051  000CC4  5052               	movf	pow@x,w,c
  8052  000CC6  1053               	iorwf	pow@x+1,w,c
  8053  000CC8  1054               	iorwf	pow@x+2,w,c
  8054  000CCA  A4D8               	btfss	status,2,c
  8055  000CCC  D01B               	goto	i2l3485
  8056  000CCE  0E00               	movlw	0
  8057  000CD0  6E01               	movwf	___ftge@ff1,c
  8058  000CD2  0E00               	movlw	0
  8059  000CD4  6E02               	movwf	___ftge@ff1+1,c
  8060  000CD6  0E00               	movlw	0
  8061  000CD8  6E03               	movwf	___ftge@ff1+2,c
  8062  000CDA  C055  F004         	movff	pow@y,___ftge@ff2
  8063  000CDE  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  8064  000CE2  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  8065  000CE6  ECA6  F00E         	call	___ftge	;wreg free
  8066  000CEA  A0D8               	btfss	status,0,c
  8067  000CEC  D004               	goto	i2l831
  8068  000CEE  0E00               	movlw	0
  8069  000CF0  6E79               	movwf	_errno+1,c
  8070  000CF2  0E21               	movlw	33
  8071  000CF4  6E78               	movwf	_errno,c
  8072  000CF6                     i2l831:
  8073  000CF6  0E00               	movlw	0
  8074  000CF8  6E52               	movwf	?_pow,c
  8075  000CFA  0E00               	movlw	0
  8076  000CFC  6E53               	movwf	?_pow+1,c
  8077  000CFE  0E00               	movlw	0
  8078  000D00  6E54               	movwf	?_pow+2,c
  8079  000D02  0012               	return	
  8080  000D04                     i2l3485:
  8081  000D04  5055               	movf	pow@y,w,c
  8082  000D06  1056               	iorwf	pow@y+1,w,c
  8083  000D08  1057               	iorwf	pow@y+2,w,c
  8084  000D0A  A4D8               	btfss	status,2,c
  8085  000D0C  D007               	goto	i2l3491
  8086  000D0E  0E00               	movlw	0
  8087  000D10  6E52               	movwf	?_pow,c
  8088  000D12  0E80               	movlw	128
  8089  000D14  6E53               	movwf	?_pow+1,c
  8090  000D16  0E3F               	movlw	63
  8091  000D18  6E54               	movwf	?_pow+2,c
  8092  000D1A  0012               	return	
  8093  000D1C                     i2l3491:
  8094  000D1C  AE54               	btfss	pow@x+2,7,c
  8095  000D1E  D040               	goto	i2l3503
  8096  000D20  C055  F028         	movff	pow@y,___fttol@f1
  8097  000D24  C056  F029         	movff	pow@y+1,___fttol@f1+1
  8098  000D28  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  8099  000D2C  EC4D  F009         	call	___fttol	;wreg free
  8100  000D30  C028  F05F         	movff	?___fttol,pow@yi
  8101  000D34  C029  F060         	movff	?___fttol+1,pow@yi+1
  8102  000D38  C02A  F061         	movff	?___fttol+2,pow@yi+2
  8103  000D3C  C02B  F062         	movff	?___fttol+3,pow@yi+3
  8104  000D40  C05F  F009         	movff	pow@yi,___lltoft@c
  8105  000D44  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  8106  000D48  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  8107  000D4C  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  8108  000D50  EC6D  F010         	call	___lltoft	;wreg free
  8109  000D54  5055               	movf	pow@y,w,c
  8110  000D56  1809               	xorwf	?___lltoft,w,c
  8111  000D58  E107               	bnz	i2u319_40
  8112  000D5A  5056               	movf	pow@y+1,w,c
  8113  000D5C  180A               	xorwf	?___lltoft+1,w,c
  8114  000D5E  E104               	bnz	i2u319_40
  8115  000D60  5057               	movf	pow@y+2,w,c
  8116  000D62  180B               	xorwf	?___lltoft+2,w,c
  8117  000D64  B4D8               	btfsc	status,2,c
  8118  000D66  D00B               	goto	i2l3499
  8119  000D68                     i2u319_40:
  8120  000D68  0E00               	movlw	0
  8121  000D6A  6E79               	movwf	_errno+1,c
  8122  000D6C  0E21               	movlw	33
  8123  000D6E  6E78               	movwf	_errno,c
  8124  000D70  0E00               	movlw	0
  8125  000D72  6E52               	movwf	?_pow,c
  8126  000D74  0E00               	movlw	0
  8127  000D76  6E53               	movwf	?_pow+1,c
  8128  000D78  0E00               	movlw	0
  8129  000D7A  6E54               	movwf	?_pow+2,c
  8130  000D7C  0012               	return	
  8131  000D7E                     i2l3499:
  8132  000D7E  505F               	movf	pow@yi,w,c
  8133  000D80  0B01               	andlw	1
  8134  000D82  6E5E               	movwf	pow@sign,c
  8135  000D84  C052  F001         	movff	pow@x,___ftneg@f1
  8136  000D88  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  8137  000D8C  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  8138  000D90  EC32  F012         	call	___ftneg	;wreg free
  8139  000D94  C001  F052         	movff	?___ftneg,pow@x
  8140  000D98  C002  F053         	movff	?___ftneg+1,pow@x+1
  8141  000D9C  C003  F054         	movff	?___ftneg+2,pow@x+2
  8142  000DA0                     i2l3503:
  8143  000DA0  C052  F034         	movff	pow@x,log@x
  8144  000DA4  C053  F035         	movff	pow@x+1,log@x+1
  8145  000DA8  C054  F036         	movff	pow@x+2,log@x+2
  8146  000DAC  ECBF  F007         	call	_log	;wreg free
  8147  000DB0  C034  F058         	movff	?_log,_pow$1222
  8148  000DB4  C035  F059         	movff	?_log+1,_pow$1222+1
  8149  000DB8  C036  F05A         	movff	?_log+2,_pow$1222+2
  8150  000DBC  C058  F00D         	movff	_pow$1222,___ftmul@f1
  8151  000DC0  C059  F00E         	movff	_pow$1222+1,___ftmul@f1+1
  8152  000DC4  C05A  F00F         	movff	_pow$1222+2,___ftmul@f1+2
  8153  000DC8  C055  F010         	movff	pow@y,___ftmul@f2
  8154  000DCC  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  8155  000DD0  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  8156  000DD4  ECC7  F009         	call	___ftmul	;wreg free
  8157  000DD8  C00D  F05B         	movff	?___ftmul,_pow$1223
  8158  000DDC  C00E  F05C         	movff	?___ftmul+1,_pow$1223+1
  8159  000DE0  C00F  F05D         	movff	?___ftmul+2,_pow$1223+2
  8160  000DE4  C05B  F049         	movff	_pow$1223,exp@x
  8161  000DE8  C05C  F04A         	movff	_pow$1223+1,exp@x+1
  8162  000DEC  C05D  F04B         	movff	_pow$1223+2,exp@x+2
  8163  000DF0  EC98  F004         	call	_exp	;wreg free
  8164  000DF4  C049  F052         	movff	?_exp,pow@x
  8165  000DF8  C04A  F053         	movff	?_exp+1,pow@x+1
  8166  000DFC  C04B  F054         	movff	?_exp+2,pow@x+2
  8167  000E00  505E               	movf	pow@sign,w,c
  8168  000E02  B4D8               	btfsc	status,2,c
  8169  000E04  D00F               	goto	i2l836
  8170  000E06  C052  F001         	movff	pow@x,___ftneg@f1
  8171  000E0A  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  8172  000E0E  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  8173  000E12  EC32  F012         	call	___ftneg	;wreg free
  8174  000E16  C001  F052         	movff	?___ftneg,?_pow
  8175  000E1A  C002  F053         	movff	?___ftneg+1,?_pow+1
  8176  000E1E  C003  F054         	movff	?___ftneg+2,?_pow+2
  8177  000E22  0012               	return	
  8178  000E24                     i2l836:
  8179  000E24  C052  F052         	movff	pow@x,?_pow
  8180  000E28  C053  F053         	movff	pow@x+1,?_pow+1
  8181  000E2C  C054  F054         	movff	pow@x+2,?_pow+2
  8182  000E30  0012               	return		;funcret
  8183  000E32                     __end_of_pow:
  8184                           	opt stack 0
  8185                           pclatu	equ	0xFFB
  8186                           pclath	equ	0xFFA
  8187                           tblptru	equ	0xFF8
  8188                           tblptrh	equ	0xFF7
  8189                           tblptrl	equ	0xFF6
  8190                           tablat	equ	0xFF5
  8191                           prodh	equ	0xFF4
  8192                           prodl	equ	0xFF3
  8193                           intcon	equ	0xFF2
  8194                           intcon2	equ	0xFF1
  8195                           intcon3	equ	0xFF0
  8196                           postinc0	equ	0xFEE
  8197                           fsr0h	equ	0xFEA
  8198                           fsr0l	equ	0xFE9
  8199                           wreg	equ	0xFE8
  8200                           fsr1h	equ	0xFE2
  8201                           fsr1l	equ	0xFE1
  8202                           indf2	equ	0xFDF
  8203                           postinc2	equ	0xFDE
  8204                           postdec2	equ	0xFDD
  8205                           fsr2h	equ	0xFDA
  8206                           fsr2l	equ	0xFD9
  8207                           status	equ	0xFD8
  8208                           
  8209 ;; *************** function _log *****************
  8210 ;; Defined at:
  8211 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;  x               3   51[COMRAM] unsigned char 
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  exponent        2   54[COMRAM] int 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  3   51[COMRAM] int 
  8218 ;; Registers used:
  8219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8225 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;Total ram usage:        5 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    3
  8232 ;; This function calls:
  8233 ;;		___awtoft
  8234 ;;		___ftadd
  8235 ;;		___ftmul
  8236 ;;		_eval_poly
  8237 ;;		_frexp
  8238 ;; This function is called by:
  8239 ;;		_pow
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           	psect	text43
  8244  000F7E                     __ptext43:
  8245                           	opt stack 0
  8246  000F7E                     _log:
  8247                           	opt stack 20
  8248                           
  8249                           ;incstack = 0
  8250  000F7E  AE36               	btfss	log@x+2,7,c
  8251  000F80  D00B               	goto	i2l3197
  8252  000F82  0E00               	movlw	0
  8253  000F84  6E79               	movwf	_errno+1,c
  8254  000F86  0E21               	movlw	33
  8255  000F88  6E78               	movwf	_errno,c
  8256  000F8A  0E00               	movlw	0
  8257  000F8C  6E34               	movwf	?_log,c
  8258  000F8E  0E00               	movlw	0
  8259  000F90  6E35               	movwf	?_log+1,c
  8260  000F92  0E00               	movlw	0
  8261  000F94  6E36               	movwf	?_log+2,c
  8262  000F96  0012               	return	
  8263  000F98                     i2l3197:
  8264  000F98  5034               	movf	log@x,w,c
  8265  000F9A  1035               	iorwf	log@x+1,w,c
  8266  000F9C  1036               	iorwf	log@x+2,w,c
  8267  000F9E  A4D8               	btfss	status,2,c
  8268  000FA0  D00B               	goto	i2l3203
  8269  000FA2  0E00               	movlw	0
  8270  000FA4  6E79               	movwf	_errno+1,c
  8271  000FA6  0E22               	movlw	34
  8272  000FA8  6E78               	movwf	_errno,c
  8273  000FAA  0E00               	movlw	0
  8274  000FAC  6E34               	movwf	?_log,c
  8275  000FAE  0E00               	movlw	0
  8276  000FB0  6E35               	movwf	?_log+1,c
  8277  000FB2  0E00               	movlw	0
  8278  000FB4  6E36               	movwf	?_log+2,c
  8279  000FB6  0012               	return	
  8280  000FB8                     i2l3203:
  8281  000FB8  0E00               	movlw	0
  8282  000FBA  6E10               	movwf	___ftmul@f2,c
  8283  000FBC  0E00               	movlw	0
  8284  000FBE  6E11               	movwf	___ftmul@f2+1,c
  8285  000FC0  0E40               	movlw	64
  8286  000FC2  6E12               	movwf	___ftmul@f2+2,c
  8287  000FC4  0E37               	movlw	low log@exponent
  8288  000FC6  6E04               	movwf	frexp@eptr,c
  8289  000FC8  0E00               	movlw	high log@exponent
  8290  000FCA  6E05               	movwf	frexp@eptr+1,c
  8291  000FCC  C034  F001         	movff	log@x,frexp@value
  8292  000FD0  C035  F002         	movff	log@x+1,frexp@value+1
  8293  000FD4  C036  F003         	movff	log@x+2,frexp@value+2
  8294  000FD8  EC5E  F00E         	call	_frexp	;wreg free
  8295  000FDC  C001  F00D         	movff	?_frexp,___ftmul@f1
  8296  000FE0  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  8297  000FE4  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  8298  000FE8  ECC7  F009         	call	___ftmul	;wreg free
  8299  000FEC  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  8300  000FF0  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  8301  000FF4  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  8302  000FF8  0E00               	movlw	0
  8303  000FFA  6E1F               	movwf	___ftadd@f2,c
  8304  000FFC  0E80               	movlw	128
  8305  000FFE  6E20               	movwf	___ftadd@f2+1,c
  8306  001000  0EBF               	movlw	191
  8307  001002  6E21               	movwf	___ftadd@f2+2,c
  8308  001004  EC8A  F005         	call	___ftadd	;wreg free
  8309  001008  C01C  F034         	movff	?___ftadd,log@x
  8310  00100C  C01D  F035         	movff	?___ftadd+1,log@x+1
  8311  001010  C01E  F036         	movff	?___ftadd+2,log@x+2
  8312  001014  0637               	decf	log@exponent,f,c
  8313  001016  A0D8               	btfss	status,0,c
  8314  001018  0638               	decf	log@exponent+1,f,c
  8315  00101A  C034  F028         	movff	log@x,eval_poly@x
  8316  00101E  C035  F029         	movff	log@x+1,eval_poly@x+1
  8317  001022  C036  F02A         	movff	log@x+2,eval_poly@x+2
  8318  001026  0E27               	movlw	low log@coeff
  8319  001028  6E2B               	movwf	eval_poly@d,c
  8320  00102A  0EFE               	movlw	high log@coeff
  8321  00102C  6E2C               	movwf	eval_poly@d+1,c
  8322  00102E  0E00               	movlw	0
  8323  001030  6E2E               	movwf	eval_poly@n+1,c
  8324  001032  0E08               	movlw	8
  8325  001034  6E2D               	movwf	eval_poly@n,c
  8326  001036  EC8C  F00B         	call	_eval_poly	;wreg free
  8327  00103A  C028  F034         	movff	?_eval_poly,log@x
  8328  00103E  C029  F035         	movff	?_eval_poly+1,log@x+1
  8329  001042  C02A  F036         	movff	?_eval_poly+2,log@x+2
  8330  001046  0E72               	movlw	114
  8331  001048  6E10               	movwf	___ftmul@f2,c
  8332  00104A  0E31               	movlw	49
  8333  00104C  6E11               	movwf	___ftmul@f2+1,c
  8334  00104E  0E3F               	movlw	63
  8335  001050  6E12               	movwf	___ftmul@f2+2,c
  8336  001052  C037  F009         	movff	log@exponent,___awtoft@c
  8337  001056  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  8338  00105A  EC73  F011         	call	___awtoft	;wreg free
  8339  00105E  C009  F00D         	movff	?___awtoft,___ftmul@f1
  8340  001062  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  8341  001066  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  8342  00106A  ECC7  F009         	call	___ftmul	;wreg free
  8343  00106E  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  8344  001072  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  8345  001076  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  8346  00107A  C034  F01F         	movff	log@x,___ftadd@f2
  8347  00107E  C035  F020         	movff	log@x+1,___ftadd@f2+1
  8348  001082  C036  F021         	movff	log@x+2,___ftadd@f2+2
  8349  001086  EC8A  F005         	call	___ftadd	;wreg free
  8350  00108A  C01C  F034         	movff	?___ftadd,?_log
  8351  00108E  C01D  F035         	movff	?___ftadd+1,?_log+1
  8352  001092  C01E  F036         	movff	?___ftadd+2,?_log+2
  8353  001096  0012               	return	
  8354  001098                     __end_of_log:
  8355                           	opt stack 0
  8356                           pclatu	equ	0xFFB
  8357                           pclath	equ	0xFFA
  8358                           tblptru	equ	0xFF8
  8359                           tblptrh	equ	0xFF7
  8360                           tblptrl	equ	0xFF6
  8361                           tablat	equ	0xFF5
  8362                           prodh	equ	0xFF4
  8363                           prodl	equ	0xFF3
  8364                           intcon	equ	0xFF2
  8365                           intcon2	equ	0xFF1
  8366                           intcon3	equ	0xFF0
  8367                           postinc0	equ	0xFEE
  8368                           fsr0h	equ	0xFEA
  8369                           fsr0l	equ	0xFE9
  8370                           wreg	equ	0xFE8
  8371                           fsr1h	equ	0xFE2
  8372                           fsr1l	equ	0xFE1
  8373                           indf2	equ	0xFDF
  8374                           postinc2	equ	0xFDE
  8375                           postdec2	equ	0xFDD
  8376                           fsr2h	equ	0xFDA
  8377                           fsr2l	equ	0xFD9
  8378                           status	equ	0xFD8
  8379                           
  8380 ;; *************** function _exp *****************
  8381 ;; Defined at:
  8382 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  x               3   72[COMRAM] int 
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;  exponent        2   78[COMRAM] int 
  8387 ;;  sign            1   80[COMRAM] unsigned char 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  3   72[COMRAM] unsigned char 
  8390 ;; Registers used:
  8391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8397 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8398 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8400 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8401 ;;Total ram usage:        9 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    3
  8404 ;; This function calls:
  8405 ;;		___awtoft
  8406 ;;		___ftdiv
  8407 ;;		___ftge
  8408 ;;		___ftmul
  8409 ;;		___ftneg
  8410 ;;		___ftsub
  8411 ;;		___fttol
  8412 ;;		_eval_poly
  8413 ;;		_floor
  8414 ;;		_ldexp
  8415 ;; This function is called by:
  8416 ;;		_pow
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           	psect	text44
  8421  000930                     __ptext44:
  8422                           	opt stack 0
  8423  000930                     _exp:
  8424                           	opt stack 20
  8425                           
  8426                           ;incstack = 0
  8427  000930  5049               	movf	exp@x,w,c
  8428  000932  104A               	iorwf	exp@x+1,w,c
  8429  000934  104B               	iorwf	exp@x+2,w,c
  8430  000936  A4D8               	btfss	status,2,c
  8431  000938  D007               	goto	i2l3219
  8432  00093A  0E00               	movlw	0
  8433  00093C  6E49               	movwf	?_exp,c
  8434  00093E  0E80               	movlw	128
  8435  000940  6E4A               	movwf	?_exp+1,c
  8436  000942  0E3F               	movlw	63
  8437  000944  6E4B               	movwf	?_exp+2,c
  8438  000946  0012               	return	
  8439  000948                     i2l3219:
  8440  000948  0E72               	movlw	114
  8441  00094A  6E01               	movwf	___ftge@ff1,c
  8442  00094C  0E31               	movlw	49
  8443  00094E  6E02               	movwf	___ftge@ff1+1,c
  8444  000950  0E44               	movlw	68
  8445  000952  6E03               	movwf	___ftge@ff1+2,c
  8446  000954  C049  F004         	movff	exp@x,___ftge@ff2
  8447  000958  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  8448  00095C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  8449  000960  ECA6  F00E         	call	___ftge	;wreg free
  8450  000964  B0D8               	btfsc	status,0,c
  8451  000966  D00B               	goto	i2l3225
  8452  000968  0E00               	movlw	0
  8453  00096A  6E79               	movwf	_errno+1,c
  8454  00096C  0E22               	movlw	34
  8455  00096E  6E78               	movwf	_errno,c
  8456  000970  0EFF               	movlw	255
  8457  000972  6E49               	movwf	?_exp,c
  8458  000974  0E7F               	movlw	127
  8459  000976  6E4A               	movwf	?_exp+1,c
  8460  000978  0E7F               	movlw	127
  8461  00097A  6E4B               	movwf	?_exp+2,c
  8462  00097C  0012               	return	
  8463  00097E                     i2l3225:
  8464  00097E  C049  F001         	movff	exp@x,___ftge@ff1
  8465  000982  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  8466  000986  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  8467  00098A  0E49               	movlw	73
  8468  00098C  6E04               	movwf	___ftge@ff2,c
  8469  00098E  0E3A               	movlw	58
  8470  000990  6E05               	movwf	___ftge@ff2+1,c
  8471  000992  0EC4               	movlw	196
  8472  000994  6E06               	movwf	___ftge@ff2+2,c
  8473  000996  ECA6  F00E         	call	___ftge	;wreg free
  8474  00099A  B0D8               	btfsc	status,0,c
  8475  00099C  D00B               	goto	i2l3231
  8476  00099E  0E00               	movlw	0
  8477  0009A0  6E79               	movwf	_errno+1,c
  8478  0009A2  0E22               	movlw	34
  8479  0009A4  6E78               	movwf	_errno,c
  8480  0009A6  0E00               	movlw	0
  8481  0009A8  6E49               	movwf	?_exp,c
  8482  0009AA  0E00               	movlw	0
  8483  0009AC  6E4A               	movwf	?_exp+1,c
  8484  0009AE  0E00               	movlw	0
  8485  0009B0  6E4B               	movwf	?_exp+2,c
  8486  0009B2  0012               	return	
  8487  0009B4                     i2l3231:
  8488  0009B4  AE4B               	btfss	exp@x+2,7,c
  8489  0009B6  D002               	goto	i2u275_40
  8490  0009B8  0E01               	movlw	1
  8491  0009BA  D001               	goto	i2u276_40
  8492  0009BC                     i2u275_40:
  8493  0009BC  0E00               	movlw	0
  8494  0009BE                     i2u276_40:
  8495  0009BE  6E51               	movwf	exp@sign,c
  8496  0009C0  5051               	movf	exp@sign,w,c
  8497  0009C2  B4D8               	btfsc	status,2,c
  8498  0009C4  D00E               	goto	i2l994
  8499  0009C6  C049  F001         	movff	exp@x,___ftneg@f1
  8500  0009CA  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  8501  0009CE  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  8502  0009D2  EC32  F012         	call	___ftneg	;wreg free
  8503  0009D6  C001  F049         	movff	?___ftneg,exp@x
  8504  0009DA  C002  F04A         	movff	?___ftneg+1,exp@x+1
  8505  0009DE  C003  F04B         	movff	?___ftneg+2,exp@x+2
  8506  0009E2                     i2l994:
  8507  0009E2  C049  F00D         	movff	exp@x,___ftmul@f1
  8508  0009E6  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  8509  0009EA  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  8510  0009EE  0EAA               	movlw	170
  8511  0009F0  6E10               	movwf	___ftmul@f2,c
  8512  0009F2  0EB8               	movlw	184
  8513  0009F4  6E11               	movwf	___ftmul@f2+1,c
  8514  0009F6  0E3F               	movlw	63
  8515  0009F8  6E12               	movwf	___ftmul@f2+2,c
  8516  0009FA  ECC7  F009         	call	___ftmul	;wreg free
  8517  0009FE  C00D  F049         	movff	?___ftmul,exp@x
  8518  000A02  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  8519  000A06  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  8520  000A0A  C049  F041         	movff	exp@x,floor@x
  8521  000A0E  C04A  F042         	movff	exp@x+1,floor@x+1
  8522  000A12  C04B  F043         	movff	exp@x+2,floor@x+2
  8523  000A16  ECB4  F00A         	call	_floor	;wreg free
  8524  000A1A  C041  F04C         	movff	?_floor,_exp$1224
  8525  000A1E  C042  F04D         	movff	?_floor+1,_exp$1224+1
  8526  000A22  C043  F04E         	movff	?_floor+2,_exp$1224+2
  8527  000A26  C04C  F028         	movff	_exp$1224,___fttol@f1
  8528  000A2A  C04D  F029         	movff	_exp$1224+1,___fttol@f1+1
  8529  000A2E  C04E  F02A         	movff	_exp$1224+2,___fttol@f1+2
  8530  000A32  EC4D  F009         	call	___fttol	;wreg free
  8531  000A36  C028  F04F         	movff	?___fttol,exp@exponent
  8532  000A3A  C029  F050         	movff	?___fttol+1,exp@exponent+1
  8533  000A3E  C049  F028         	movff	exp@x,___ftsub@f1
  8534  000A42  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  8535  000A46  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  8536  000A4A  C04F  F009         	movff	exp@exponent,___awtoft@c
  8537  000A4E  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  8538  000A52  EC73  F011         	call	___awtoft	;wreg free
  8539  000A56  C009  F02B         	movff	?___awtoft,___ftsub@f2
  8540  000A5A  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  8541  000A5E  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  8542  000A62  EC34  F011         	call	___ftsub	;wreg free
  8543  000A66  C028  F049         	movff	?___ftsub,exp@x
  8544  000A6A  C029  F04A         	movff	?___ftsub+1,exp@x+1
  8545  000A6E  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  8546  000A72  C049  F028         	movff	exp@x,eval_poly@x
  8547  000A76  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  8548  000A7A  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  8549  000A7E  0E09               	movlw	low exp@coeff
  8550  000A80  6E2B               	movwf	eval_poly@d,c
  8551  000A82  0EFE               	movlw	high exp@coeff
  8552  000A84  6E2C               	movwf	eval_poly@d+1,c
  8553  000A86  0E00               	movlw	0
  8554  000A88  6E2E               	movwf	eval_poly@n+1,c
  8555  000A8A  0E09               	movlw	9
  8556  000A8C  6E2D               	movwf	eval_poly@n,c
  8557  000A8E  EC8C  F00B         	call	_eval_poly	;wreg free
  8558  000A92  C028  F034         	movff	?_eval_poly,ldexp@value
  8559  000A96  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  8560  000A9A  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  8561  000A9E  C04F  F037         	movff	exp@exponent,ldexp@newexp
  8562  000AA2  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  8563  000AA6  EC5A  F00C         	call	_ldexp	;wreg free
  8564  000AAA  C034  F049         	movff	?_ldexp,exp@x
  8565  000AAE  C035  F04A         	movff	?_ldexp+1,exp@x+1
  8566  000AB2  C036  F04B         	movff	?_ldexp+2,exp@x+2
  8567  000AB6  5051               	movf	exp@sign,w,c
  8568  000AB8  B4D8               	btfsc	status,2,c
  8569  000ABA  D025               	goto	i2l995
  8570  000ABC  2849               	incf	exp@x,w,c
  8571  000ABE  E10E               	bnz	i2l3253
  8572  000AC0  0E7F               	movlw	127
  8573  000AC2  184A               	xorwf	exp@x+1,w,c
  8574  000AC4  E10B               	bnz	i2l3253
  8575  000AC6  0E7F               	movlw	127
  8576  000AC8  184B               	xorwf	exp@x+2,w,c
  8577  000ACA  A4D8               	btfss	status,2,c
  8578  000ACC  D007               	goto	i2l3253
  8579  000ACE  0E00               	movlw	0
  8580  000AD0  6E49               	movwf	?_exp,c
  8581  000AD2  0E00               	movlw	0
  8582  000AD4  6E4A               	movwf	?_exp+1,c
  8583  000AD6  0E00               	movlw	0
  8584  000AD8  6E4B               	movwf	?_exp+2,c
  8585  000ADA  0012               	return	
  8586  000ADC                     i2l3253:
  8587  000ADC  0E00               	movlw	0
  8588  000ADE  6E09               	movwf	___ftdiv@f1,c
  8589  000AE0  0E80               	movlw	128
  8590  000AE2  6E0A               	movwf	___ftdiv@f1+1,c
  8591  000AE4  0E3F               	movlw	63
  8592  000AE6  6E0B               	movwf	___ftdiv@f1+2,c
  8593  000AE8  C049  F00C         	movff	exp@x,___ftdiv@f2
  8594  000AEC  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  8595  000AF0  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  8596  000AF4  EC41  F00A         	call	___ftdiv	;wreg free
  8597  000AF8  C009  F049         	movff	?___ftdiv,?_exp
  8598  000AFC  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  8599  000B00  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  8600  000B04  0012               	return	
  8601  000B06                     i2l995:
  8602  000B06  C049  F049         	movff	exp@x,?_exp
  8603  000B0A  C04A  F04A         	movff	exp@x+1,?_exp+1
  8604  000B0E  C04B  F04B         	movff	exp@x+2,?_exp+2
  8605  000B12  0012               	return		;funcret
  8606  000B14                     __end_of_exp:
  8607                           	opt stack 0
  8608                           pclatu	equ	0xFFB
  8609                           pclath	equ	0xFFA
  8610                           tblptru	equ	0xFF8
  8611                           tblptrh	equ	0xFF7
  8612                           tblptrl	equ	0xFF6
  8613                           tablat	equ	0xFF5
  8614                           prodh	equ	0xFF4
  8615                           prodl	equ	0xFF3
  8616                           intcon	equ	0xFF2
  8617                           intcon2	equ	0xFF1
  8618                           intcon3	equ	0xFF0
  8619                           postinc0	equ	0xFEE
  8620                           fsr0h	equ	0xFEA
  8621                           fsr0l	equ	0xFE9
  8622                           wreg	equ	0xFE8
  8623                           fsr1h	equ	0xFE2
  8624                           fsr1l	equ	0xFE1
  8625                           indf2	equ	0xFDF
  8626                           postinc2	equ	0xFDE
  8627                           postdec2	equ	0xFDD
  8628                           fsr2h	equ	0xFDA
  8629                           fsr2l	equ	0xFD9
  8630                           status	equ	0xFD8
  8631                           
  8632 ;; *************** function _ldexp *****************
  8633 ;; Defined at:
  8634 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;  value           3   51[COMRAM] unsigned char 
  8637 ;;  newexp          2   54[COMRAM] int 
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;		None
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  3   51[COMRAM] int 
  8642 ;; Registers used:
  8643 ;;		wreg, status,2, status,0
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8649 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8652 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;Total ram usage:        7 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; This function calls:
  8656 ;;		Nothing
  8657 ;; This function is called by:
  8658 ;;		_exp
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           	psect	text45
  8663  0018B4                     __ptext45:
  8664                           	opt stack 0
  8665  0018B4                     _ldexp:
  8666                           	opt stack 22
  8667                           
  8668                           ;incstack = 0
  8669  0018B4  5034               	movf	ldexp@value,w,c
  8670  0018B6  1035               	iorwf	ldexp@value+1,w,c
  8671  0018B8  1036               	iorwf	ldexp@value+2,w,c
  8672  0018BA  A4D8               	btfss	status,2,c
  8673  0018BC  D007               	goto	i2l3069
  8674  0018BE  0E00               	movlw	0
  8675  0018C0  6E34               	movwf	?_ldexp,c
  8676  0018C2  0E00               	movlw	0
  8677  0018C4  6E35               	movwf	?_ldexp+1,c
  8678  0018C6  0E00               	movlw	0
  8679  0018C8  6E36               	movwf	?_ldexp+2,c
  8680  0018CA  0012               	return	
  8681  0018CC                     i2l3069:
  8682  0018CC  5036               	movf	ldexp@value+2,w,c
  8683  0018CE  0B7F               	andlw	127
  8684  0018D0  6E39               	movwf	??_ldexp& (0+255),c
  8685  0018D2  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  8686  0018D4  90D8               	bcf	status,0,c
  8687  0018D6  3639               	rlcf	??_ldexp,f,c
  8688  0018D8  363A               	rlcf	??_ldexp+1,f,c
  8689  0018DA  5039               	movf	??_ldexp,w,c
  8690  0018DC  2637               	addwf	ldexp@newexp,f,c
  8691  0018DE  503A               	movf	??_ldexp+1,w,c
  8692  0018E0  2238               	addwfc	ldexp@newexp+1,f,c
  8693  0018E2  AE35               	btfss	ldexp@value+1,7,c
  8694  0018E4  D003               	goto	i2u255_40
  8695  0018E6  6A39               	clrf	??_ldexp& (0+255),c
  8696  0018E8  2A39               	incf	??_ldexp& (0+255),f,c
  8697  0018EA  D001               	goto	i2u255_48
  8698  0018EC                     i2u255_40:
  8699  0018EC  6A39               	clrf	??_ldexp& (0+255),c
  8700  0018EE                     i2u255_48:
  8701  0018EE  5039               	movf	??_ldexp,w,c
  8702  0018F0  2637               	addwf	ldexp@newexp,f,c
  8703  0018F2  0E00               	movlw	0
  8704  0018F4  2238               	addwfc	ldexp@newexp+1,f,c
  8705  0018F6  AE38               	btfss	ldexp@newexp+1,7,c
  8706  0018F8  D00B               	goto	i2l3077
  8707  0018FA  0E00               	movlw	0
  8708  0018FC  6E79               	movwf	_errno+1,c
  8709  0018FE  0E22               	movlw	34
  8710  001900  6E78               	movwf	_errno,c
  8711  001902  0E00               	movlw	0
  8712  001904  6E34               	movwf	?_ldexp,c
  8713  001906  0E00               	movlw	0
  8714  001908  6E35               	movwf	?_ldexp+1,c
  8715  00190A  0E00               	movlw	0
  8716  00190C                     L4:
  8717  00190C  6E36               	movwf	?_ldexp+2,c
  8718  00190E  0012               	return	
  8719  001910                     i2l3077:
  8720  001910  BE38               	btfsc	ldexp@newexp+1,7,c
  8721  001912  D015               	goto	i2l3093
  8722  001914  0438               	decf	ldexp@newexp+1,w,c
  8723  001916  A0D8               	btfss	status,0,c
  8724  001918  D012               	goto	i2l3093
  8725  00191A  0E00               	movlw	0
  8726  00191C  6E79               	movwf	_errno+1,c
  8727  00191E  0E22               	movlw	34
  8728  001920  6E78               	movwf	_errno,c
  8729  001922  AE36               	btfss	ldexp@value+2,7,c
  8730  001924  D006               	goto	i2l3089
  8731  001926  0EFF               	movlw	255
  8732  001928  6E34               	movwf	?_ldexp,c
  8733  00192A  0E7F               	movlw	127
  8734  00192C  6E35               	movwf	?_ldexp+1,c
  8735  00192E  0EFF               	movlw	255
  8736  001930  D7ED               	goto	L4
  8737  001932                     i2l3089:
  8738  001932  0EFF               	movlw	255
  8739  001934  6E34               	movwf	?_ldexp,c
  8740  001936  0E7F               	movlw	127
  8741  001938  6E35               	movwf	?_ldexp+1,c
  8742  00193A  0E7F               	movlw	127
  8743  00193C  D7E7               	goto	L4
  8744  00193E                     i2l3093:
  8745  00193E  3438               	rlcf	ldexp@newexp+1,w,c
  8746  001940  3038               	rrcf	ldexp@newexp+1,w,c
  8747  001942  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  8748  001944  3037               	rrcf	ldexp@newexp,w,c
  8749  001946  6E39               	movwf	??_ldexp& (0+255),c
  8750  001948  5036               	movf	ldexp@value+2,w,c
  8751  00194A  1839               	xorwf	??_ldexp,w,c
  8752  00194C  0B80               	andlw	-128
  8753  00194E  1839               	xorwf	??_ldexp,w,c
  8754  001950  6E36               	movwf	ldexp@value+2,c
  8755  001952  C037  F039         	movff	ldexp@newexp,??_ldexp
  8756  001956  0E01               	movlw	1
  8757  001958  1639               	andwf	??_ldexp,f,c
  8758  00195A  3239               	rrcf	??_ldexp,f,c
  8759  00195C  3239               	rrcf	??_ldexp,f,c
  8760  00195E  5035               	movf	ldexp@value+1,w,c
  8761  001960  1839               	xorwf	??_ldexp,w,c
  8762  001962  0B7F               	andlw	-129
  8763  001964  1839               	xorwf	??_ldexp,w,c
  8764  001966  6E35               	movwf	ldexp@value+1,c
  8765  001968  C034  F034         	movff	ldexp@value,?_ldexp
  8766  00196C  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  8767  001970  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  8768  001974  0012               	return	
  8769  001976                     __end_of_ldexp:
  8770                           	opt stack 0
  8771                           pclatu	equ	0xFFB
  8772                           pclath	equ	0xFFA
  8773                           tblptru	equ	0xFF8
  8774                           tblptrh	equ	0xFF7
  8775                           tblptrl	equ	0xFF6
  8776                           tablat	equ	0xFF5
  8777                           prodh	equ	0xFF4
  8778                           prodl	equ	0xFF3
  8779                           intcon	equ	0xFF2
  8780                           intcon2	equ	0xFF1
  8781                           intcon3	equ	0xFF0
  8782                           postinc0	equ	0xFEE
  8783                           fsr0h	equ	0xFEA
  8784                           fsr0l	equ	0xFE9
  8785                           wreg	equ	0xFE8
  8786                           fsr1h	equ	0xFE2
  8787                           fsr1l	equ	0xFE1
  8788                           indf2	equ	0xFDF
  8789                           postinc2	equ	0xFDE
  8790                           postdec2	equ	0xFDD
  8791                           fsr2h	equ	0xFDA
  8792                           fsr2l	equ	0xFD9
  8793                           status	equ	0xFD8
  8794                           
  8795 ;; *************** function _floor *****************
  8796 ;; Defined at:
  8797 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  8798 ;; Parameters:    Size  Location     Type
  8799 ;;  x               3   64[COMRAM] int 
  8800 ;; Auto vars:     Size  Location     Type
  8801 ;;  i               3   67[COMRAM] int 
  8802 ;;  expon           2   70[COMRAM] int 
  8803 ;; Return value:  Size  Location     Type
  8804 ;;                  3   64[COMRAM] int 
  8805 ;; Registers used:
  8806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8812 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;Total ram usage:        8 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:    2
  8819 ;; This function calls:
  8820 ;;		___altoft
  8821 ;;		___ftadd
  8822 ;;		___ftge
  8823 ;;		___fttol
  8824 ;;		_frexp
  8825 ;; This function is called by:
  8826 ;;		_exp
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           	psect	text46
  8831  001568                     __ptext46:
  8832                           	opt stack 0
  8833  001568                     _floor:
  8834                           	opt stack 20
  8835                           
  8836                           ;incstack = 0
  8837  001568  C041  F001         	movff	floor@x,frexp@value
  8838  00156C  C042  F002         	movff	floor@x+1,frexp@value+1
  8839  001570  C043  F003         	movff	floor@x+2,frexp@value+2
  8840  001574  0E47               	movlw	low floor@expon
  8841  001576  6E04               	movwf	frexp@eptr,c
  8842  001578  0E00               	movlw	high floor@expon
  8843  00157A  6E05               	movwf	frexp@eptr+1,c
  8844  00157C  EC5E  F00E         	call	_frexp	;wreg free
  8845  001580  AE48               	btfss	floor@expon+1,7,c
  8846  001582  D010               	goto	i2l3047
  8847  001584  AE43               	btfss	floor@x+2,7,c
  8848  001586  D007               	goto	i2l3043
  8849  001588  0E00               	movlw	0
  8850  00158A  6E41               	movwf	?_floor,c
  8851  00158C  0E80               	movlw	128
  8852  00158E  6E42               	movwf	?_floor+1,c
  8853  001590  0EBF               	movlw	191
  8854  001592  6E43               	movwf	?_floor+2,c
  8855  001594  0012               	return	
  8856  001596                     i2l3043:
  8857  001596  0E00               	movlw	0
  8858  001598  6E41               	movwf	?_floor,c
  8859  00159A  0E00               	movlw	0
  8860  00159C  6E42               	movwf	?_floor+1,c
  8861  00159E  0E00               	movlw	0
  8862  0015A0  6E43               	movwf	?_floor+2,c
  8863  0015A2  0012               	return	
  8864  0015A4                     i2l3047:
  8865  0015A4  5048               	movf	floor@expon+1,w,c
  8866  0015A6  E104               	bnz	i2u251_40
  8867  0015A8  0E15               	movlw	21
  8868  0015AA  5C47               	subwf	floor@expon,w,c
  8869  0015AC  A0D8               	btfss	status,0,c
  8870  0015AE  D007               	goto	i2l3051
  8871  0015B0                     i2u251_40:
  8872  0015B0  C041  F041         	movff	floor@x,?_floor
  8873  0015B4  C042  F042         	movff	floor@x+1,?_floor+1
  8874  0015B8  C043  F043         	movff	floor@x+2,?_floor+2
  8875  0015BC  0012               	return	
  8876  0015BE                     i2l3051:
  8877  0015BE  C041  F028         	movff	floor@x,___fttol@f1
  8878  0015C2  C042  F029         	movff	floor@x+1,___fttol@f1+1
  8879  0015C6  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  8880  0015CA  EC4D  F009         	call	___fttol	;wreg free
  8881  0015CE  C028  F037         	movff	?___fttol,___altoft@c
  8882  0015D2  C029  F038         	movff	?___fttol+1,___altoft@c+1
  8883  0015D6  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  8884  0015DA  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  8885  0015DE  EC6C  F00F         	call	___altoft	;wreg free
  8886  0015E2  C037  F044         	movff	?___altoft,floor@i
  8887  0015E6  C038  F045         	movff	?___altoft+1,floor@i+1
  8888  0015EA  C039  F046         	movff	?___altoft+2,floor@i+2
  8889  0015EE  C041  F001         	movff	floor@x,___ftge@ff1
  8890  0015F2  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  8891  0015F6  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  8892  0015FA  C044  F004         	movff	floor@i,___ftge@ff2
  8893  0015FE  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  8894  001602  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  8895  001606  ECA6  F00E         	call	___ftge	;wreg free
  8896  00160A  B0D8               	btfsc	status,0,c
  8897  00160C  D015               	goto	i2l1005
  8898  00160E  C044  F01C         	movff	floor@i,___ftadd@f1
  8899  001612  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  8900  001616  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  8901  00161A  0E00               	movlw	0
  8902  00161C  6E1F               	movwf	___ftadd@f2,c
  8903  00161E  0E80               	movlw	128
  8904  001620  6E20               	movwf	___ftadd@f2+1,c
  8905  001622  0EBF               	movlw	191
  8906  001624  6E21               	movwf	___ftadd@f2+2,c
  8907  001626  EC8A  F005         	call	___ftadd	;wreg free
  8908  00162A  C01C  F041         	movff	?___ftadd,?_floor
  8909  00162E  C01D  F042         	movff	?___ftadd+1,?_floor+1
  8910  001632  C01E  F043         	movff	?___ftadd+2,?_floor+2
  8911  001636  0012               	return	
  8912  001638                     i2l1005:
  8913  001638  C044  F041         	movff	floor@i,?_floor
  8914  00163C  C045  F042         	movff	floor@i+1,?_floor+1
  8915  001640  C046  F043         	movff	floor@i+2,?_floor+2
  8916  001644  0012               	return		;funcret
  8917  001646                     __end_of_floor:
  8918                           	opt stack 0
  8919                           pclatu	equ	0xFFB
  8920                           pclath	equ	0xFFA
  8921                           tblptru	equ	0xFF8
  8922                           tblptrh	equ	0xFF7
  8923                           tblptrl	equ	0xFF6
  8924                           tablat	equ	0xFF5
  8925                           prodh	equ	0xFF4
  8926                           prodl	equ	0xFF3
  8927                           intcon	equ	0xFF2
  8928                           intcon2	equ	0xFF1
  8929                           intcon3	equ	0xFF0
  8930                           postinc0	equ	0xFEE
  8931                           fsr0h	equ	0xFEA
  8932                           fsr0l	equ	0xFE9
  8933                           wreg	equ	0xFE8
  8934                           fsr1h	equ	0xFE2
  8935                           fsr1l	equ	0xFE1
  8936                           indf2	equ	0xFDF
  8937                           postinc2	equ	0xFDE
  8938                           postdec2	equ	0xFDD
  8939                           fsr2h	equ	0xFDA
  8940                           fsr2l	equ	0xFD9
  8941                           status	equ	0xFD8
  8942                           
  8943 ;; *************** function _frexp *****************
  8944 ;; Defined at:
  8945 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;  value           3    0[COMRAM] int 
  8948 ;;  eptr            2    3[COMRAM] PTR int 
  8949 ;;		 -> log@exponent(2), floor@expon(2), 
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;		None
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  3    0[COMRAM] PTR int 
  8954 ;; Registers used:
  8955 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8961 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8963 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8964 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8965 ;;Total ram usage:        7 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; This function calls:
  8968 ;;		Nothing
  8969 ;; This function is called by:
  8970 ;;		_floor
  8971 ;;		_log
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           	psect	text47
  8976  001CBC                     __ptext47:
  8977                           	opt stack 0
  8978  001CBC                     _frexp:
  8979                           	opt stack 22
  8980                           
  8981                           ;incstack = 0
  8982  001CBC  5001               	movf	frexp@value,w,c
  8983  001CBE  1002               	iorwf	frexp@value+1,w,c
  8984  001CC0  1003               	iorwf	frexp@value+2,w,c
  8985  001CC2  A4D8               	btfss	status,2,c
  8986  001CC4  D00F               	goto	i2l2927
  8987  001CC6  C004  FFD9         	movff	frexp@eptr,fsr2l
  8988  001CCA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8989  001CCE  0E00               	movlw	0
  8990  001CD0  6EDE               	movwf	postinc2,c
  8991  001CD2  0E00               	movlw	0
  8992  001CD4  6EDD               	movwf	postdec2,c
  8993  001CD6  0E00               	movlw	0
  8994  001CD8  6E01               	movwf	?_frexp,c
  8995  001CDA  0E00               	movlw	0
  8996  001CDC  6E02               	movwf	?_frexp+1,c
  8997  001CDE  0E00               	movlw	0
  8998  001CE0  6E03               	movwf	?_frexp+2,c
  8999  001CE2  0012               	return	
  9000  001CE4                     i2l2927:
  9001  001CE4  5003               	movf	frexp@value+2,w,c
  9002  001CE6  0B7F               	andlw	127
  9003  001CE8  6E06               	movwf	??_frexp& (0+255),c
  9004  001CEA  6A07               	clrf	(??_frexp+1)& (0+255),c
  9005  001CEC  90D8               	bcf	status,0,c
  9006  001CEE  3606               	rlcf	??_frexp,f,c
  9007  001CF0  3607               	rlcf	??_frexp+1,f,c
  9008  001CF2  C004  FFD9         	movff	frexp@eptr,fsr2l
  9009  001CF6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9010  001CFA  C006  FFDE         	movff	??_frexp,postinc2
  9011  001CFE  C007  FFDD         	movff	??_frexp+1,postdec2
  9012  001D02  AE02               	btfss	frexp@value+1,7,c
  9013  001D04  D003               	goto	i2u240_40
  9014  001D06  6A06               	clrf	??_frexp& (0+255),c
  9015  001D08  2A06               	incf	??_frexp& (0+255),f,c
  9016  001D0A  D001               	goto	i2u240_48
  9017  001D0C                     i2u240_40:
  9018  001D0C  6A06               	clrf	??_frexp& (0+255),c
  9019  001D0E                     i2u240_48:
  9020  001D0E  5006               	movf	??_frexp,w,c
  9021  001D10  C004  FFD9         	movff	frexp@eptr,fsr2l
  9022  001D14  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9023  001D18  12DE               	iorwf	postinc2,f,c
  9024  001D1A  0E00               	movlw	0
  9025  001D1C  12DD               	iorwf	postdec2,f,c
  9026  001D1E  C004  FFD9         	movff	frexp@eptr,fsr2l
  9027  001D22  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9028  001D26  0E82               	movlw	130
  9029  001D28  26DE               	addwf	postinc2,f,c
  9030  001D2A  0EFF               	movlw	255
  9031  001D2C  22DD               	addwfc	postdec2,f,c
  9032  001D2E  8003               	bsf	frexp@value+2,0,c
  9033  001D30  8203               	bsf	frexp@value+2,1,c
  9034  001D32  8403               	bsf	frexp@value+2,2,c
  9035  001D34  8603               	bsf	frexp@value+2,3,c
  9036  001D36  8803               	bsf	frexp@value+2,4,c
  9037  001D38  8A03               	bsf	frexp@value+2,5,c
  9038  001D3A  9C03               	bcf	frexp@value+2,6,c
  9039  001D3C  9E02               	bcf	frexp@value+1,7,c
  9040  001D3E  C001  F001         	movff	frexp@value,?_frexp
  9041  001D42  C002  F002         	movff	frexp@value+1,?_frexp+1
  9042  001D46  C003  F003         	movff	frexp@value+2,?_frexp+2
  9043  001D4A  0012               	return	
  9044  001D4C                     __end_of_frexp:
  9045                           	opt stack 0
  9046                           pclatu	equ	0xFFB
  9047                           pclath	equ	0xFFA
  9048                           tblptru	equ	0xFF8
  9049                           tblptrh	equ	0xFF7
  9050                           tblptrl	equ	0xFF6
  9051                           tablat	equ	0xFF5
  9052                           prodh	equ	0xFF4
  9053                           prodl	equ	0xFF3
  9054                           intcon	equ	0xFF2
  9055                           intcon2	equ	0xFF1
  9056                           intcon3	equ	0xFF0
  9057                           postinc0	equ	0xFEE
  9058                           fsr0h	equ	0xFEA
  9059                           fsr0l	equ	0xFE9
  9060                           wreg	equ	0xFE8
  9061                           fsr1h	equ	0xFE2
  9062                           fsr1l	equ	0xFE1
  9063                           indf2	equ	0xFDF
  9064                           postinc2	equ	0xFDE
  9065                           postdec2	equ	0xFDD
  9066                           fsr2h	equ	0xFDA
  9067                           fsr2l	equ	0xFD9
  9068                           status	equ	0xFD8
  9069                           
  9070 ;; *************** function ___fttol *****************
  9071 ;; Defined at:
  9072 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9073 ;; Parameters:    Size  Location     Type
  9074 ;;  f1              3   39[COMRAM] float 
  9075 ;; Auto vars:     Size  Location     Type
  9076 ;;  lval            4   49[COMRAM] unsigned long 
  9077 ;;  exp1            1   53[COMRAM] unsigned char 
  9078 ;;  sign1           1   48[COMRAM] unsigned char 
  9079 ;; Return value:  Size  Location     Type
  9080 ;;                  4   39[COMRAM] long 
  9081 ;; Registers used:
  9082 ;;		wreg, status,2, status,0
  9083 ;; Tracked objects:
  9084 ;;		On entry : 0/0
  9085 ;;		On exit  : 0/0
  9086 ;;		Unchanged: 0/0
  9087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9088 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;Total ram usage:       15 bytes
  9093 ;; Hardware stack levels used:    1
  9094 ;; This function calls:
  9095 ;;		Nothing
  9096 ;; This function is called by:
  9097 ;;		_dec_to_hex
  9098 ;;		_pow
  9099 ;;		_exp
  9100 ;;		_floor
  9101 ;; This function uses a non-reentrant model
  9102 ;;
  9103                           
  9104                           	psect	text48
  9105  00129A                     __ptext48:
  9106                           	opt stack 0
  9107  00129A                     ___fttol:
  9108                           	opt stack 21
  9109                           
  9110                           ;incstack = 0
  9111  00129A  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  9112  00129E  6A2D               	clrf	(??___fttol+1)& (0+255),c
  9113  0012A0  6A2E               	clrf	(??___fttol+2)& (0+255),c
  9114  0012A2  3429               	rlcf	___fttol@f1+1,w,c
  9115  0012A4  362C               	rlcf	??___fttol& (0+255),f,c
  9116  0012A6  E301               	bnc	u231_41
  9117  0012A8  802D               	bsf	(??___fttol+1)& (0+255),0,c
  9118  0012AA                     u231_41:
  9119  0012AA  502C               	movf	??___fttol,w,c
  9120  0012AC  6E36               	movwf	___fttol@exp1,c
  9121  0012AE  5036               	movf	___fttol@exp1,w,c
  9122  0012B0  A4D8               	btfss	status,2,c
  9123  0012B2  D009               	goto	i2l2879
  9124  0012B4  0E00               	movlw	0
  9125  0012B6  6E28               	movwf	?___fttol,c
  9126  0012B8  0E00               	movlw	0
  9127  0012BA  6E29               	movwf	?___fttol+1,c
  9128  0012BC  0E00               	movlw	0
  9129  0012BE  6E2A               	movwf	?___fttol+2,c
  9130  0012C0  0E00               	movlw	0
  9131  0012C2  6E2B               	movwf	?___fttol+3,c
  9132  0012C4  0012               	return	
  9133  0012C6                     i2l2879:
  9134  0012C6  0E17               	movlw	23
  9135  0012C8  6E2C               	movwf	??___fttol& (0+255),c
  9136  0012CA  C028  F02D         	movff	___fttol@f1,??___fttol+1
  9137  0012CE  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  9138  0012D2  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  9139  0012D6  282C               	incf	??___fttol,w,c
  9140  0012D8  6E30               	movwf	(??___fttol+4)& (0+255),c
  9141  0012DA  D004               	goto	i2u233_40
  9142  0012DC                     i2u233_45:
  9143  0012DC  90D8               	bcf	status,0,c
  9144  0012DE  322F               	rrcf	??___fttol+3,f,c
  9145  0012E0  322E               	rrcf	??___fttol+2,f,c
  9146  0012E2  322D               	rrcf	??___fttol+1,f,c
  9147  0012E4                     i2u233_40:
  9148  0012E4  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  9149  0012E6  D7FA               	goto	i2u233_45
  9150  0012E8  502D               	movf	??___fttol+1,w,c
  9151  0012EA  6E31               	movwf	___fttol@sign1,c
  9152  0012EC  8E29               	bsf	___fttol@f1+1,7,c
  9153  0012EE  0EFF               	movlw	255
  9154  0012F0  1628               	andwf	___fttol@f1,f,c
  9155  0012F2  0EFF               	movlw	255
  9156  0012F4  1629               	andwf	___fttol@f1+1,f,c
  9157  0012F6  0E00               	movlw	0
  9158  0012F8  162A               	andwf	___fttol@f1+2,f,c
  9159  0012FA  5028               	movf	___fttol@f1,w,c
  9160  0012FC  6E32               	movwf	___fttol@lval,c
  9161  0012FE  5029               	movf	___fttol@f1+1,w,c
  9162  001300  6E33               	movwf	___fttol@lval+1,c
  9163  001302  502A               	movf	___fttol@f1+2,w,c
  9164  001304  6E34               	movwf	___fttol@lval+2,c
  9165  001306  6A35               	clrf	___fttol@lval+3,c
  9166  001308  0E8E               	movlw	142
  9167  00130A  5E36               	subwf	___fttol@exp1,f,c
  9168  00130C  AE36               	btfss	___fttol@exp1,7,c
  9169  00130E  D016               	goto	i2l2901
  9170  001310  5036               	movf	___fttol@exp1,w,c
  9171  001312  0A80               	xorlw	128
  9172  001314  0F8F               	addlw	143
  9173  001316  B0D8               	btfsc	status,0,c
  9174  001318  D009               	goto	i2l2897
  9175  00131A  0E00               	movlw	0
  9176  00131C  6E28               	movwf	?___fttol,c
  9177  00131E  0E00               	movlw	0
  9178  001320  6E29               	movwf	?___fttol+1,c
  9179  001322  0E00               	movlw	0
  9180  001324  6E2A               	movwf	?___fttol+2,c
  9181  001326  0E00               	movlw	0
  9182  001328  6E2B               	movwf	?___fttol+3,c
  9183  00132A  0012               	return	
  9184  00132C                     i2l2897:
  9185  00132C  90D8               	bcf	status,0,c
  9186  00132E  3235               	rrcf	___fttol@lval+3,f,c
  9187  001330  3234               	rrcf	___fttol@lval+2,f,c
  9188  001332  3233               	rrcf	___fttol@lval+1,f,c
  9189  001334  3232               	rrcf	___fttol@lval,f,c
  9190  001336  3E36               	incfsz	___fttol@exp1,f,c
  9191  001338  D7F9               	goto	i2l2897
  9192  00133A  D015               	goto	i2l2911
  9193  00133C                     i2l2901:
  9194  00133C  0E17               	movlw	23
  9195  00133E  6436               	cpfsgt	___fttol@exp1,c
  9196  001340  D00F               	goto	i2l2909
  9197  001342  0E00               	movlw	0
  9198  001344  6E28               	movwf	?___fttol,c
  9199  001346  0E00               	movlw	0
  9200  001348  6E29               	movwf	?___fttol+1,c
  9201  00134A  0E00               	movlw	0
  9202  00134C  6E2A               	movwf	?___fttol+2,c
  9203  00134E  0E00               	movlw	0
  9204  001350  6E2B               	movwf	?___fttol+3,c
  9205  001352  0012               	return	
  9206  001354                     i2l2907:
  9207  001354  90D8               	bcf	status,0,c
  9208  001356  3632               	rlcf	___fttol@lval,f,c
  9209  001358  3633               	rlcf	___fttol@lval+1,f,c
  9210  00135A  3634               	rlcf	___fttol@lval+2,f,c
  9211  00135C  3635               	rlcf	___fttol@lval+3,f,c
  9212  00135E  0636               	decf	___fttol@exp1,f,c
  9213  001360                     i2l2909:
  9214  001360  5036               	movf	___fttol@exp1,w,c
  9215  001362  A4D8               	btfss	status,2,c
  9216  001364  D7F7               	goto	i2l2907
  9217  001366                     i2l2911:
  9218  001366  5031               	movf	___fttol@sign1,w,c
  9219  001368  B4D8               	btfsc	status,2,c
  9220  00136A  D008               	goto	i2l2915
  9221  00136C  1E35               	comf	___fttol@lval+3,f,c
  9222  00136E  1E34               	comf	___fttol@lval+2,f,c
  9223  001370  1E33               	comf	___fttol@lval+1,f,c
  9224  001372  6C32               	negf	___fttol@lval,c
  9225  001374  0E00               	movlw	0
  9226  001376  2233               	addwfc	___fttol@lval+1,f,c
  9227  001378  2234               	addwfc	___fttol@lval+2,f,c
  9228  00137A  2235               	addwfc	___fttol@lval+3,f,c
  9229  00137C                     i2l2915:
  9230  00137C  C032  F028         	movff	___fttol@lval,?___fttol
  9231  001380  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  9232  001384  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  9233  001388  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  9234  00138C  0012               	return	
  9235  00138E                     __end_of___fttol:
  9236                           	opt stack 0
  9237                           pclatu	equ	0xFFB
  9238                           pclath	equ	0xFFA
  9239                           tblptru	equ	0xFF8
  9240                           tblptrh	equ	0xFF7
  9241                           tblptrl	equ	0xFF6
  9242                           tablat	equ	0xFF5
  9243                           prodh	equ	0xFF4
  9244                           prodl	equ	0xFF3
  9245                           intcon	equ	0xFF2
  9246                           intcon2	equ	0xFF1
  9247                           intcon3	equ	0xFF0
  9248                           postinc0	equ	0xFEE
  9249                           fsr0h	equ	0xFEA
  9250                           fsr0l	equ	0xFE9
  9251                           wreg	equ	0xFE8
  9252                           fsr1h	equ	0xFE2
  9253                           fsr1l	equ	0xFE1
  9254                           indf2	equ	0xFDF
  9255                           postinc2	equ	0xFDE
  9256                           postdec2	equ	0xFDD
  9257                           fsr2h	equ	0xFDA
  9258                           fsr2l	equ	0xFD9
  9259                           status	equ	0xFD8
  9260                           
  9261 ;; *************** function ___ftge *****************
  9262 ;; Defined at:
  9263 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;  ff1             3    0[COMRAM] float 
  9266 ;;  ff2             3    3[COMRAM] float 
  9267 ;; Auto vars:     Size  Location     Type
  9268 ;;		None
  9269 ;; Return value:  Size  Location     Type
  9270 ;;		None               void
  9271 ;; Registers used:
  9272 ;;		wreg, status,2, status,0
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9278 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;Total ram usage:        9 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; This function calls:
  9285 ;;		Nothing
  9286 ;; This function is called by:
  9287 ;;		_pow
  9288 ;;		_exp
  9289 ;;		_floor
  9290 ;; This function uses a non-reentrant model
  9291 ;;
  9292                           
  9293                           	psect	text49
  9294  001D4C                     __ptext49:
  9295                           	opt stack 0
  9296  001D4C                     ___ftge:
  9297                           	opt stack 21
  9298                           
  9299                           ;incstack = 0
  9300  001D4C  AE03               	btfss	___ftge@ff1+2,7,c
  9301  001D4E  D016               	goto	i2l2859
  9302  001D50  C001  F007         	movff	___ftge@ff1,??___ftge
  9303  001D54  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9304  001D58  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9305  001D5C  1E07               	comf	??___ftge,f,c
  9306  001D5E  1E08               	comf	??___ftge+1,f,c
  9307  001D60  1E09               	comf	??___ftge+2,f,c
  9308  001D62  2A07               	incf	??___ftge,f,c
  9309  001D64  0E00               	movlw	0
  9310  001D66  2208               	addwfc	??___ftge+1,f,c
  9311  001D68  2209               	addwfc	??___ftge+2,f,c
  9312  001D6A  0E00               	movlw	0
  9313  001D6C  2407               	addwf	??___ftge,w,c
  9314  001D6E  6E01               	movwf	___ftge@ff1,c
  9315  001D70  0E00               	movlw	0
  9316  001D72  2008               	addwfc	??___ftge+1,w,c
  9317  001D74  6E02               	movwf	___ftge@ff1+1,c
  9318  001D76  0E80               	movlw	128
  9319  001D78  2009               	addwfc	??___ftge+2,w,c
  9320  001D7A  6E03               	movwf	___ftge@ff1+2,c
  9321  001D7C                     i2l2859:
  9322  001D7C  AE06               	btfss	___ftge@ff2+2,7,c
  9323  001D7E  D016               	goto	i2l2863
  9324  001D80  C004  F007         	movff	___ftge@ff2,??___ftge
  9325  001D84  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9326  001D88  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9327  001D8C  1E07               	comf	??___ftge,f,c
  9328  001D8E  1E08               	comf	??___ftge+1,f,c
  9329  001D90  1E09               	comf	??___ftge+2,f,c
  9330  001D92  2A07               	incf	??___ftge,f,c
  9331  001D94  0E00               	movlw	0
  9332  001D96  2208               	addwfc	??___ftge+1,f,c
  9333  001D98  2209               	addwfc	??___ftge+2,f,c
  9334  001D9A  0E00               	movlw	0
  9335  001D9C  2407               	addwf	??___ftge,w,c
  9336  001D9E  6E04               	movwf	___ftge@ff2,c
  9337  001DA0  0E00               	movlw	0
  9338  001DA2  2008               	addwfc	??___ftge+1,w,c
  9339  001DA4  6E05               	movwf	___ftge@ff2+1,c
  9340  001DA6  0E80               	movlw	128
  9341  001DA8  2009               	addwfc	??___ftge+2,w,c
  9342  001DAA  6E06               	movwf	___ftge@ff2+2,c
  9343  001DAC                     i2l2863:
  9344  001DAC  0E00               	movlw	0
  9345  001DAE  1A01               	xorwf	___ftge@ff1,f,c
  9346  001DB0  0E00               	movlw	0
  9347  001DB2  1A02               	xorwf	___ftge@ff1+1,f,c
  9348  001DB4  0E80               	movlw	128
  9349  001DB6  1A03               	xorwf	___ftge@ff1+2,f,c
  9350  001DB8  0E00               	movlw	0
  9351  001DBA  1A04               	xorwf	___ftge@ff2,f,c
  9352  001DBC  0E00               	movlw	0
  9353  001DBE  1A05               	xorwf	___ftge@ff2+1,f,c
  9354  001DC0  0E80               	movlw	128
  9355  001DC2  1A06               	xorwf	___ftge@ff2+2,f,c
  9356  001DC4  5004               	movf	___ftge@ff2,w,c
  9357  001DC6  5C01               	subwf	___ftge@ff1,w,c
  9358  001DC8  5005               	movf	___ftge@ff2+1,w,c
  9359  001DCA  5802               	subwfb	___ftge@ff1+1,w,c
  9360  001DCC  5006               	movf	___ftge@ff2+2,w,c
  9361  001DCE  5803               	subwfb	___ftge@ff1+2,w,c
  9362  001DD0  B0D8               	btfsc	status,0,c
  9363  001DD2  D002               	goto	i2l2869
  9364  001DD4  90D8               	bcf	status,0,c
  9365  001DD6  0012               	return	
  9366  001DD8                     i2l2869:
  9367  001DD8  80D8               	bsf	status,0,c
  9368  001DDA  0012               	return	
  9369  001DDC                     __end_of___ftge:
  9370                           	opt stack 0
  9371                           pclatu	equ	0xFFB
  9372                           pclath	equ	0xFFA
  9373                           tblptru	equ	0xFF8
  9374                           tblptrh	equ	0xFF7
  9375                           tblptrl	equ	0xFF6
  9376                           tablat	equ	0xFF5
  9377                           prodh	equ	0xFF4
  9378                           prodl	equ	0xFF3
  9379                           intcon	equ	0xFF2
  9380                           intcon2	equ	0xFF1
  9381                           intcon3	equ	0xFF0
  9382                           postinc0	equ	0xFEE
  9383                           fsr0h	equ	0xFEA
  9384                           fsr0l	equ	0xFE9
  9385                           wreg	equ	0xFE8
  9386                           fsr1h	equ	0xFE2
  9387                           fsr1l	equ	0xFE1
  9388                           indf2	equ	0xFDF
  9389                           postinc2	equ	0xFDE
  9390                           postdec2	equ	0xFDD
  9391                           fsr2h	equ	0xFDA
  9392                           fsr2l	equ	0xFD9
  9393                           status	equ	0xFD8
  9394                           
  9395 ;; *************** function ___altoft *****************
  9396 ;; Defined at:
  9397 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;  c               4   54[COMRAM] long 
  9400 ;; Auto vars:     Size  Location     Type
  9401 ;;  sign            1   63[COMRAM] unsigned char 
  9402 ;;  exp             1   62[COMRAM] unsigned char 
  9403 ;; Return value:  Size  Location     Type
  9404 ;;                  3   54[COMRAM] float 
  9405 ;; Registers used:
  9406 ;;		wreg, status,2, status,0, cstack
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9412 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9414 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;Total ram usage:       10 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    1
  9419 ;; This function calls:
  9420 ;;		___ftpack
  9421 ;; This function is called by:
  9422 ;;		_floor
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           	psect	text50
  9427  001ED8                     __ptext50:
  9428                           	opt stack 0
  9429  001ED8                     ___altoft:
  9430                           	opt stack 20
  9431                           
  9432                           ;incstack = 0
  9433  001ED8  0E00               	movlw	0
  9434  001EDA  6E40               	movwf	___altoft@sign,c
  9435  001EDC  0E8E               	movlw	142
  9436  001EDE  6E3F               	movwf	___altoft@exp,c
  9437  001EE0  AE3A               	btfss	___altoft@c+3,7,c
  9438  001EE2  D011               	goto	i2l2731
  9439  001EE4  1E3A               	comf	___altoft@c+3,f,c
  9440  001EE6  1E39               	comf	___altoft@c+2,f,c
  9441  001EE8  1E38               	comf	___altoft@c+1,f,c
  9442  001EEA  6C37               	negf	___altoft@c,c
  9443  001EEC  0E00               	movlw	0
  9444  001EEE  2238               	addwfc	___altoft@c+1,f,c
  9445  001EF0  2239               	addwfc	___altoft@c+2,f,c
  9446  001EF2  223A               	addwfc	___altoft@c+3,f,c
  9447  001EF4  0E01               	movlw	1
  9448  001EF6  6E40               	movwf	___altoft@sign,c
  9449  001EF8  D006               	goto	i2l2731
  9450  001EFA                     i2l2729:
  9451  001EFA  90D8               	bcf	status,0,c
  9452  001EFC  323A               	rrcf	___altoft@c+3,f,c
  9453  001EFE  3239               	rrcf	___altoft@c+2,f,c
  9454  001F00  3238               	rrcf	___altoft@c+1,f,c
  9455  001F02  3237               	rrcf	___altoft@c,f,c
  9456  001F04  2A3F               	incf	___altoft@exp,f,c
  9457  001F06                     i2l2731:
  9458  001F06  0E00               	movlw	0
  9459  001F08  1437               	andwf	___altoft@c,w,c
  9460  001F0A  6E3B               	movwf	??___altoft& (0+255),c
  9461  001F0C  0E00               	movlw	0
  9462  001F0E  1438               	andwf	___altoft@c+1,w,c
  9463  001F10  6E3C               	movwf	(??___altoft+1)& (0+255),c
  9464  001F12  0E00               	movlw	0
  9465  001F14  1439               	andwf	___altoft@c+2,w,c
  9466  001F16  6E3D               	movwf	(??___altoft+2)& (0+255),c
  9467  001F18  0EFF               	movlw	255
  9468  001F1A  143A               	andwf	___altoft@c+3,w,c
  9469  001F1C  6E3E               	movwf	(??___altoft+3)& (0+255),c
  9470  001F1E  503B               	movf	??___altoft,w,c
  9471  001F20  103C               	iorwf	??___altoft+1,w,c
  9472  001F22  103D               	iorwf	??___altoft+2,w,c
  9473  001F24  103E               	iorwf	??___altoft+3,w,c
  9474  001F26  A4D8               	btfss	status,2,c
  9475  001F28  D7E8               	goto	i2l2729
  9476  001F2A  C037  F001         	movff	___altoft@c,___ftpack@arg
  9477  001F2E  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  9478  001F32  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  9479  001F36  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  9480  001F3A  C040  F005         	movff	___altoft@sign,___ftpack@sign
  9481  001F3E  EC19  F00D         	call	___ftpack	;wreg free
  9482  001F42  C001  F037         	movff	?___ftpack,?___altoft
  9483  001F46  C002  F038         	movff	?___ftpack+1,?___altoft+1
  9484  001F4A  C003  F039         	movff	?___ftpack+2,?___altoft+2
  9485  001F4E  0012               	return	
  9486  001F50                     __end_of___altoft:
  9487                           	opt stack 0
  9488                           pclatu	equ	0xFFB
  9489                           pclath	equ	0xFFA
  9490                           tblptru	equ	0xFF8
  9491                           tblptrh	equ	0xFF7
  9492                           tblptrl	equ	0xFF6
  9493                           tablat	equ	0xFF5
  9494                           prodh	equ	0xFF4
  9495                           prodl	equ	0xFF3
  9496                           intcon	equ	0xFF2
  9497                           intcon2	equ	0xFF1
  9498                           intcon3	equ	0xFF0
  9499                           postinc0	equ	0xFEE
  9500                           fsr0h	equ	0xFEA
  9501                           fsr0l	equ	0xFE9
  9502                           wreg	equ	0xFE8
  9503                           fsr1h	equ	0xFE2
  9504                           fsr1l	equ	0xFE1
  9505                           indf2	equ	0xFDF
  9506                           postinc2	equ	0xFDE
  9507                           postdec2	equ	0xFDD
  9508                           fsr2h	equ	0xFDA
  9509                           fsr2l	equ	0xFD9
  9510                           status	equ	0xFD8
  9511                           
  9512 ;; *************** function _eval_poly *****************
  9513 ;; Defined at:
  9514 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;  x               3   39[COMRAM] float 
  9517 ;;  d               2   42[COMRAM] PTR const 
  9518 ;;		 -> log@coeff(27), exp@coeff(30), 
  9519 ;;  n               2   44[COMRAM] int 
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  res             3   48[COMRAM] int 
  9522 ;; Return value:  Size  Location     Type
  9523 ;;                  3   39[COMRAM] int 
  9524 ;; Registers used:
  9525 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9531 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9532 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9533 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9534 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9535 ;;Total ram usage:       12 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    2
  9538 ;; This function calls:
  9539 ;;		___ftadd
  9540 ;;		___ftmul
  9541 ;;		i2___wmul
  9542 ;; This function is called by:
  9543 ;;		_exp
  9544 ;;		_log
  9545 ;; This function uses a non-reentrant model
  9546 ;;
  9547                           
  9548                           	psect	text51
  9549  001718                     __ptext51:
  9550                           	opt stack 0
  9551  001718                     _eval_poly:
  9552                           	opt stack 20
  9553                           
  9554                           ;incstack = 0
  9555  001718  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
  9556  00171C  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
  9557  001720  0E00               	movlw	0
  9558  001722  6E04               	movwf	i2___wmul@multiplicand+1,c
  9559  001724  0E03               	movlw	3
  9560  001726  6E03               	movwf	i2___wmul@multiplicand,c
  9561  001728  EC1F  F012         	call	i2___wmul	;wreg free
  9562  00172C  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  9563  001730  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  9564  001734  5001               	movf	?i2___wmul,w,c
  9565  001736  262F               	addwf	??_eval_poly,f,c
  9566  001738  5002               	movf	?i2___wmul+1,w,c
  9567  00173A  2230               	addwfc	??_eval_poly+1,f,c
  9568  00173C  C02F  FFF6         	movff	??_eval_poly,tblptrl
  9569  001740  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  9570  001744                     	if	0	;tblptru may be non-zero
  9571  001744                     	endif
  9572  001744                     	if	0	;tblptru may be non-zero
  9573  001744                     	endif
  9574  001744  0009               	tblrd		*+
  9575  001746  CFF5 F031          	movff	tablat,eval_poly@res
  9576  00174A  0009               	tblrd		*+
  9577  00174C  CFF5 F032          	movff	tablat,eval_poly@res+1
  9578  001750  000A               	tblrd		*-
  9579  001752  CFF5 F033          	movff	tablat,eval_poly@res+2
  9580  001756  D03E               	goto	i2l3061
  9581  001758                     i2l3059:
  9582  001758  C031  F010         	movff	eval_poly@res,___ftmul@f2
  9583  00175C  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  9584  001760  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  9585  001764  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  9586  001768  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  9587  00176C  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  9588  001770  ECC7  F009         	call	___ftmul	;wreg free
  9589  001774  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9590  001778  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9591  00177C  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9592  001780  0E00               	movlw	0
  9593  001782  6E04               	movwf	i2___wmul@multiplicand+1,c
  9594  001784  0E03               	movlw	3
  9595  001786  6E03               	movwf	i2___wmul@multiplicand,c
  9596  001788  062D               	decf	eval_poly@n,f,c
  9597  00178A  A0D8               	btfss	status,0,c
  9598  00178C  062E               	decf	eval_poly@n+1,f,c
  9599  00178E  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
  9600  001792  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
  9601  001796  EC1F  F012         	call	i2___wmul	;wreg free
  9602  00179A  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  9603  00179E  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  9604  0017A2  5001               	movf	?i2___wmul,w,c
  9605  0017A4  262F               	addwf	??_eval_poly,f,c
  9606  0017A6  5002               	movf	?i2___wmul+1,w,c
  9607  0017A8  2230               	addwfc	??_eval_poly+1,f,c
  9608  0017AA  C02F  FFF6         	movff	??_eval_poly,tblptrl
  9609  0017AE  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  9610  0017B2                     	if	0	;tblptru may be non-zero
  9611  0017B2                     	endif
  9612  0017B2                     	if	0	;tblptru may be non-zero
  9613  0017B2                     	endif
  9614  0017B2  0009               	tblrd		*+
  9615  0017B4  CFF5 F01F          	movff	tablat,___ftadd@f2
  9616  0017B8  0009               	tblrd		*+
  9617  0017BA  CFF5 F020          	movff	tablat,___ftadd@f2+1
  9618  0017BE  000A               	tblrd		*-
  9619  0017C0  CFF5 F021          	movff	tablat,___ftadd@f2+2
  9620  0017C4  EC8A  F005         	call	___ftadd	;wreg free
  9621  0017C8  C01C  F031         	movff	?___ftadd,eval_poly@res
  9622  0017CC  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  9623  0017D0  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  9624  0017D4                     i2l3061:
  9625  0017D4  502D               	movf	eval_poly@n,w,c
  9626  0017D6  102E               	iorwf	eval_poly@n+1,w,c
  9627  0017D8  A4D8               	btfss	status,2,c
  9628  0017DA  D7BE               	goto	i2l3059
  9629  0017DC  C031  F028         	movff	eval_poly@res,?_eval_poly
  9630  0017E0  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  9631  0017E4  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  9632  0017E8  0012               	return		;funcret
  9633  0017EA                     __end_of_eval_poly:
  9634                           	opt stack 0
  9635                           pclatu	equ	0xFFB
  9636                           pclath	equ	0xFFA
  9637                           tblptru	equ	0xFF8
  9638                           tblptrh	equ	0xFF7
  9639                           tblptrl	equ	0xFF6
  9640                           tablat	equ	0xFF5
  9641                           prodh	equ	0xFF4
  9642                           prodl	equ	0xFF3
  9643                           intcon	equ	0xFF2
  9644                           intcon2	equ	0xFF1
  9645                           intcon3	equ	0xFF0
  9646                           postinc0	equ	0xFEE
  9647                           fsr0h	equ	0xFEA
  9648                           fsr0l	equ	0xFE9
  9649                           wreg	equ	0xFE8
  9650                           fsr1h	equ	0xFE2
  9651                           fsr1l	equ	0xFE1
  9652                           indf2	equ	0xFDF
  9653                           postinc2	equ	0xFDE
  9654                           postdec2	equ	0xFDD
  9655                           fsr2h	equ	0xFDA
  9656                           fsr2l	equ	0xFD9
  9657                           status	equ	0xFD8
  9658                           
  9659 ;; *************** function i2___wmul *****************
  9660 ;; Defined at:
  9661 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;  multiplier      2    0[COMRAM] unsigned int 
  9664 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;  __wmul          2    4[COMRAM] unsigned int 
  9667 ;; Return value:  Size  Location     Type
  9668 ;;                  2    0[COMRAM] unsigned int 
  9669 ;; Registers used:
  9670 ;;		wreg, status,2, status,0, prodl, prodh
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9676 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;Total ram usage:        6 bytes
  9681 ;; Hardware stack levels used:    1
  9682 ;; This function calls:
  9683 ;;		Nothing
  9684 ;; This function is called by:
  9685 ;;		_isr
  9686 ;;		_eval_poly
  9687 ;;		i2_printf
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           	psect	text52
  9692  00243E                     __ptext52:
  9693                           	opt stack 0
  9694  00243E                     i2___wmul:
  9695                           	opt stack 24
  9696                           
  9697                           ;incstack = 0
  9698  00243E  5001               	movf	i2___wmul@multiplier,w,c
  9699  002440  0203               	mulwf	i2___wmul@multiplicand,c
  9700  002442  CFF3 F005          	movff	prodl,i2___wmul@product
  9701  002446  CFF4 F006          	movff	prodh,i2___wmul@product+1
  9702  00244A  5001               	movf	i2___wmul@multiplier,w,c
  9703  00244C  0204               	mulwf	i2___wmul@multiplicand+1,c
  9704  00244E  50F3               	movf	prodl,w,c
  9705  002450  2606               	addwf	i2___wmul@product+1,f,c
  9706  002452  5002               	movf	i2___wmul@multiplier+1,w,c
  9707  002454  0203               	mulwf	i2___wmul@multiplicand,c
  9708  002456  50F3               	movf	prodl,w,c
  9709  002458  2606               	addwf	i2___wmul@product+1,f,c
  9710  00245A  C005  F001         	movff	i2___wmul@product,?i2___wmul
  9711  00245E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  9712  002462  0012               	return	
  9713  002464                     __end_ofi2___wmul:
  9714                           	opt stack 0
  9715                           pclatu	equ	0xFFB
  9716                           pclath	equ	0xFFA
  9717                           tblptru	equ	0xFF8
  9718                           tblptrh	equ	0xFF7
  9719                           tblptrl	equ	0xFF6
  9720                           tablat	equ	0xFF5
  9721                           prodh	equ	0xFF4
  9722                           prodl	equ	0xFF3
  9723                           intcon	equ	0xFF2
  9724                           intcon2	equ	0xFF1
  9725                           intcon3	equ	0xFF0
  9726                           postinc0	equ	0xFEE
  9727                           fsr0h	equ	0xFEA
  9728                           fsr0l	equ	0xFE9
  9729                           wreg	equ	0xFE8
  9730                           fsr1h	equ	0xFE2
  9731                           fsr1l	equ	0xFE1
  9732                           indf2	equ	0xFDF
  9733                           postinc2	equ	0xFDE
  9734                           postdec2	equ	0xFDD
  9735                           fsr2h	equ	0xFDA
  9736                           fsr2l	equ	0xFD9
  9737                           status	equ	0xFD8
  9738                           
  9739 ;; *************** function ___ftmul *****************
  9740 ;; Defined at:
  9741 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  9742 ;; Parameters:    Size  Location     Type
  9743 ;;  f1              3   12[COMRAM] float 
  9744 ;;  f2              3   15[COMRAM] float 
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  9747 ;;  sign            1   26[COMRAM] unsigned char 
  9748 ;;  cntr            1   25[COMRAM] unsigned char 
  9749 ;;  exp             1   21[COMRAM] unsigned char 
  9750 ;; Return value:  Size  Location     Type
  9751 ;;                  3   12[COMRAM] float 
  9752 ;; Registers used:
  9753 ;;		wreg, status,2, status,0, cstack
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9759 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9761 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9762 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9763 ;;Total ram usage:       15 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    1
  9766 ;; This function calls:
  9767 ;;		___ftpack
  9768 ;; This function is called by:
  9769 ;;		_dec_to_hex
  9770 ;;		_pow
  9771 ;;		_exp
  9772 ;;		_log
  9773 ;;		_eval_poly
  9774 ;; This function uses a non-reentrant model
  9775 ;;
  9776                           
  9777                           	psect	text53
  9778  00138E                     __ptext53:
  9779                           	opt stack 0
  9780  00138E                     ___ftmul:
  9781                           	opt stack 20
  9782                           
  9783                           ;incstack = 0
  9784  00138E  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  9785  001392  6A14               	clrf	(??___ftmul+1)& (0+255),c
  9786  001394  6A15               	clrf	(??___ftmul+2)& (0+255),c
  9787  001396  340E               	rlcf	___ftmul@f1+1,w,c
  9788  001398  3613               	rlcf	??___ftmul& (0+255),f,c
  9789  00139A  E301               	bnc	u222_41
  9790  00139C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  9791  00139E                     u222_41:
  9792  00139E  5013               	movf	??___ftmul,w,c
  9793  0013A0  6E16               	movwf	___ftmul@exp,c
  9794  0013A2  5016               	movf	___ftmul@exp,w,c
  9795  0013A4  A4D8               	btfss	status,2,c
  9796  0013A6  D007               	goto	i2l2813
  9797  0013A8  0E00               	movlw	0
  9798  0013AA  6E0D               	movwf	?___ftmul,c
  9799  0013AC  0E00               	movlw	0
  9800  0013AE  6E0E               	movwf	?___ftmul+1,c
  9801  0013B0  0E00               	movlw	0
  9802  0013B2  6E0F               	movwf	?___ftmul+2,c
  9803  0013B4  0012               	return	
  9804  0013B6                     i2l2813:
  9805  0013B6  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  9806  0013BA  6A14               	clrf	(??___ftmul+1)& (0+255),c
  9807  0013BC  6A15               	clrf	(??___ftmul+2)& (0+255),c
  9808  0013BE  3411               	rlcf	___ftmul@f2+1,w,c
  9809  0013C0  3613               	rlcf	??___ftmul& (0+255),f,c
  9810  0013C2  E301               	bnc	u224_41
  9811  0013C4  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  9812  0013C6                     u224_41:
  9813  0013C6  5013               	movf	??___ftmul,w,c
  9814  0013C8  6E1B               	movwf	___ftmul@sign,c
  9815  0013CA  501B               	movf	___ftmul@sign,w,c
  9816  0013CC  A4D8               	btfss	status,2,c
  9817  0013CE  D007               	goto	i2l2819
  9818  0013D0  0E00               	movlw	0
  9819  0013D2  6E0D               	movwf	?___ftmul,c
  9820  0013D4  0E00               	movlw	0
  9821  0013D6  6E0E               	movwf	?___ftmul+1,c
  9822  0013D8  0E00               	movlw	0
  9823  0013DA  6E0F               	movwf	?___ftmul+2,c
  9824  0013DC  0012               	return	
  9825  0013DE                     i2l2819:
  9826  0013DE  501B               	movf	___ftmul@sign,w,c
  9827  0013E0  0F7B               	addlw	123
  9828  0013E2  2616               	addwf	___ftmul@exp,f,c
  9829  0013E4  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  9830  0013E8  5012               	movf	___ftmul@f2+2,w,c
  9831  0013EA  1A1B               	xorwf	___ftmul@sign,f,c
  9832  0013EC  0E80               	movlw	128
  9833  0013EE  161B               	andwf	___ftmul@sign,f,c
  9834  0013F0  8E0E               	bsf	___ftmul@f1+1,7,c
  9835  0013F2  8E11               	bsf	___ftmul@f2+1,7,c
  9836  0013F4  0EFF               	movlw	255
  9837  0013F6  1610               	andwf	___ftmul@f2,f,c
  9838  0013F8  0EFF               	movlw	255
  9839  0013FA  1611               	andwf	___ftmul@f2+1,f,c
  9840  0013FC  0E00               	movlw	0
  9841  0013FE  1612               	andwf	___ftmul@f2+2,f,c
  9842  001400  0E00               	movlw	0
  9843  001402  6E17               	movwf	___ftmul@f3_as_product,c
  9844  001404  0E00               	movlw	0
  9845  001406  6E18               	movwf	___ftmul@f3_as_product+1,c
  9846  001408  0E00               	movlw	0
  9847  00140A  6E19               	movwf	___ftmul@f3_as_product+2,c
  9848  00140C  0E07               	movlw	7
  9849  00140E  6E1A               	movwf	___ftmul@cntr,c
  9850  001410                     i2l2833:
  9851  001410  A00D               	btfss	___ftmul@f1,0,c
  9852  001412  D006               	goto	i2l2837
  9853  001414  5010               	movf	___ftmul@f2,w,c
  9854  001416  2617               	addwf	___ftmul@f3_as_product,f,c
  9855  001418  5011               	movf	___ftmul@f2+1,w,c
  9856  00141A  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  9857  00141C  5012               	movf	___ftmul@f2+2,w,c
  9858  00141E  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  9859  001420                     i2l2837:
  9860  001420  90D8               	bcf	status,0,c
  9861  001422  320F               	rrcf	___ftmul@f1+2,f,c
  9862  001424  320E               	rrcf	___ftmul@f1+1,f,c
  9863  001426  320D               	rrcf	___ftmul@f1,f,c
  9864  001428  90D8               	bcf	status,0,c
  9865  00142A  3610               	rlcf	___ftmul@f2,f,c
  9866  00142C  3611               	rlcf	___ftmul@f2+1,f,c
  9867  00142E  3612               	rlcf	___ftmul@f2+2,f,c
  9868  001430  2E1A               	decfsz	___ftmul@cntr,f,c
  9869  001432  D7EE               	goto	i2l2833
  9870  001434  0E09               	movlw	9
  9871  001436  6E1A               	movwf	___ftmul@cntr,c
  9872  001438                     i2l2843:
  9873  001438  A00D               	btfss	___ftmul@f1,0,c
  9874  00143A  D006               	goto	i2l2847
  9875  00143C  5010               	movf	___ftmul@f2,w,c
  9876  00143E  2617               	addwf	___ftmul@f3_as_product,f,c
  9877  001440  5011               	movf	___ftmul@f2+1,w,c
  9878  001442  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  9879  001444  5012               	movf	___ftmul@f2+2,w,c
  9880  001446  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  9881  001448                     i2l2847:
  9882  001448  90D8               	bcf	status,0,c
  9883  00144A  320F               	rrcf	___ftmul@f1+2,f,c
  9884  00144C  320E               	rrcf	___ftmul@f1+1,f,c
  9885  00144E  320D               	rrcf	___ftmul@f1,f,c
  9886  001450  90D8               	bcf	status,0,c
  9887  001452  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  9888  001454  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  9889  001456  3217               	rrcf	___ftmul@f3_as_product,f,c
  9890  001458  2E1A               	decfsz	___ftmul@cntr,f,c
  9891  00145A  D7EE               	goto	i2l2843
  9892  00145C  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9893  001460  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9894  001464  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9895  001468  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  9896  00146C  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  9897  001470  EC19  F00D         	call	___ftpack	;wreg free
  9898  001474  C001  F00D         	movff	?___ftpack,?___ftmul
  9899  001478  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  9900  00147C  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  9901  001480  0012               	return	
  9902  001482                     __end_of___ftmul:
  9903                           	opt stack 0
  9904                           pclatu	equ	0xFFB
  9905                           pclath	equ	0xFFA
  9906                           tblptru	equ	0xFF8
  9907                           tblptrh	equ	0xFF7
  9908                           tblptrl	equ	0xFF6
  9909                           tablat	equ	0xFF5
  9910                           prodh	equ	0xFF4
  9911                           prodl	equ	0xFF3
  9912                           intcon	equ	0xFF2
  9913                           intcon2	equ	0xFF1
  9914                           intcon3	equ	0xFF0
  9915                           postinc0	equ	0xFEE
  9916                           fsr0h	equ	0xFEA
  9917                           fsr0l	equ	0xFE9
  9918                           wreg	equ	0xFE8
  9919                           fsr1h	equ	0xFE2
  9920                           fsr1l	equ	0xFE1
  9921                           indf2	equ	0xFDF
  9922                           postinc2	equ	0xFDE
  9923                           postdec2	equ	0xFDD
  9924                           fsr2h	equ	0xFDA
  9925                           fsr2l	equ	0xFD9
  9926                           status	equ	0xFD8
  9927                           
  9928 ;; *************** function ___ftsub *****************
  9929 ;; Defined at:
  9930 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;  f1              3   39[COMRAM] float 
  9933 ;;  f2              3   42[COMRAM] float 
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;		None
  9936 ;; Return value:  Size  Location     Type
  9937 ;;                  3   39[COMRAM] float 
  9938 ;; Registers used:
  9939 ;;		wreg, status,2, status,0, cstack
  9940 ;; Tracked objects:
  9941 ;;		On entry : 0/0
  9942 ;;		On exit  : 0/0
  9943 ;;		Unchanged: 0/0
  9944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9945 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9948 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9949 ;;Total ram usage:        6 bytes
  9950 ;; Hardware stack levels used:    1
  9951 ;; Hardware stack levels required when called:    2
  9952 ;; This function calls:
  9953 ;;		___ftadd
  9954 ;; This function is called by:
  9955 ;;		_exp
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959                           	psect	text54
  9960  002268                     __ptext54:
  9961                           	opt stack 0
  9962  002268                     ___ftsub:
  9963                           	opt stack 20
  9964                           
  9965                           ;incstack = 0
  9966  002268  502B               	movf	___ftsub@f2,w,c
  9967  00226A  102C               	iorwf	___ftsub@f2+1,w,c
  9968  00226C  102D               	iorwf	___ftsub@f2+2,w,c
  9969  00226E  B4D8               	btfsc	status,2,c
  9970  002270  D006               	goto	i2l3013
  9971  002272  0E00               	movlw	0
  9972  002274  1A2B               	xorwf	___ftsub@f2,f,c
  9973  002276  0E00               	movlw	0
  9974  002278  1A2C               	xorwf	___ftsub@f2+1,f,c
  9975  00227A  0E80               	movlw	128
  9976  00227C  1A2D               	xorwf	___ftsub@f2+2,f,c
  9977  00227E                     i2l3013:
  9978  00227E  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  9979  002282  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  9980  002286  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  9981  00228A  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  9982  00228E  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  9983  002292  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  9984  002296  EC8A  F005         	call	___ftadd	;wreg free
  9985  00229A  C01C  F028         	movff	?___ftadd,?___ftsub
  9986  00229E  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  9987  0022A2  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  9988  0022A6  0012               	return	
  9989  0022A8                     __end_of___ftsub:
  9990                           	opt stack 0
  9991                           pclatu	equ	0xFFB
  9992                           pclath	equ	0xFFA
  9993                           tblptru	equ	0xFF8
  9994                           tblptrh	equ	0xFF7
  9995                           tblptrl	equ	0xFF6
  9996                           tablat	equ	0xFF5
  9997                           prodh	equ	0xFF4
  9998                           prodl	equ	0xFF3
  9999                           intcon	equ	0xFF2
 10000                           intcon2	equ	0xFF1
 10001                           intcon3	equ	0xFF0
 10002                           postinc0	equ	0xFEE
 10003                           fsr0h	equ	0xFEA
 10004                           fsr0l	equ	0xFE9
 10005                           wreg	equ	0xFE8
 10006                           fsr1h	equ	0xFE2
 10007                           fsr1l	equ	0xFE1
 10008                           indf2	equ	0xFDF
 10009                           postinc2	equ	0xFDE
 10010                           postdec2	equ	0xFDD
 10011                           fsr2h	equ	0xFDA
 10012                           fsr2l	equ	0xFD9
 10013                           status	equ	0xFD8
 10014                           
 10015 ;; *************** function ___ftadd *****************
 10016 ;; Defined at:
 10017 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;  f1              3   27[COMRAM] float 
 10020 ;;  f2              3   30[COMRAM] float 
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  exp1            1   38[COMRAM] unsigned char 
 10023 ;;  exp2            1   37[COMRAM] unsigned char 
 10024 ;;  sign            1   36[COMRAM] unsigned char 
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  3   27[COMRAM] float 
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0, cstack
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10034 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;Total ram usage:       12 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    1
 10041 ;; This function calls:
 10042 ;;		___ftpack
 10043 ;; This function is called by:
 10044 ;;		_dec_to_hex
 10045 ;;		___ftsub
 10046 ;;		_floor
 10047 ;;		_log
 10048 ;;		_eval_poly
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           	psect	text55
 10053  000B14                     __ptext55:
 10054                           	opt stack 0
 10055  000B14                     ___ftadd:
 10056                           	opt stack 20
 10057                           
 10058                           ;incstack = 0
 10059  000B14  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 10060  000B18  6A23               	clrf	(??___ftadd+1)& (0+255),c
 10061  000B1A  6A24               	clrf	(??___ftadd+2)& (0+255),c
 10062  000B1C  341D               	rlcf	___ftadd@f1+1,w,c
 10063  000B1E  3622               	rlcf	??___ftadd& (0+255),f,c
 10064  000B20  E301               	bnc	u201_41
 10065  000B22  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 10066  000B24                     u201_41:
 10067  000B24  5022               	movf	??___ftadd,w,c
 10068  000B26  6E27               	movwf	___ftadd@exp1,c
 10069  000B28  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 10070  000B2C  6A23               	clrf	(??___ftadd+1)& (0+255),c
 10071  000B2E  6A24               	clrf	(??___ftadd+2)& (0+255),c
 10072  000B30  3420               	rlcf	___ftadd@f2+1,w,c
 10073  000B32  3622               	rlcf	??___ftadd& (0+255),f,c
 10074  000B34  E301               	bnc	u202_41
 10075  000B36  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 10076  000B38                     u202_41:
 10077  000B38  5022               	movf	??___ftadd,w,c
 10078  000B3A  6E26               	movwf	___ftadd@exp2,c
 10079  000B3C  5027               	movf	___ftadd@exp1,w,c
 10080  000B3E  B4D8               	btfsc	status,2,c
 10081  000B40  D00B               	goto	i2l639
 10082  000B42  5026               	movf	___ftadd@exp2,w,c
 10083  000B44  5C27               	subwf	___ftadd@exp1,w,c
 10084  000B46  B0D8               	btfsc	status,0,c
 10085  000B48  D00E               	goto	i2l2745
 10086  000B4A  5027               	movf	___ftadd@exp1,w,c
 10087  000B4C  0800               	sublw	0
 10088  000B4E  2426               	addwf	___ftadd@exp2,w,c
 10089  000B50  6E22               	movwf	??___ftadd& (0+255),c
 10090  000B52  0E18               	movlw	24
 10091  000B54  6422               	cpfsgt	??___ftadd,c
 10092  000B56  D007               	goto	i2l2745
 10093  000B58                     i2l639:
 10094  000B58  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 10095  000B5C  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 10096  000B60  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 10097  000B64  0012               	return	
 10098  000B66                     i2l2745:
 10099  000B66  5026               	movf	___ftadd@exp2,w,c
 10100  000B68  B4D8               	btfsc	status,2,c
 10101  000B6A  D00B               	goto	i2l643
 10102  000B6C  5027               	movf	___ftadd@exp1,w,c
 10103  000B6E  5C26               	subwf	___ftadd@exp2,w,c
 10104  000B70  B0D8               	btfsc	status,0,c
 10105  000B72  D00E               	goto	i2l2751
 10106  000B74  5026               	movf	___ftadd@exp2,w,c
 10107  000B76  0800               	sublw	0
 10108  000B78  2427               	addwf	___ftadd@exp1,w,c
 10109  000B7A  6E22               	movwf	??___ftadd& (0+255),c
 10110  000B7C  0E18               	movlw	24
 10111  000B7E  6422               	cpfsgt	??___ftadd,c
 10112  000B80  D007               	goto	i2l2751
 10113  000B82                     i2l643:
 10114  000B82  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 10115  000B86  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 10116  000B8A  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 10117  000B8E  0012               	return	
 10118  000B90                     i2l2751:
 10119  000B90  0E06               	movlw	6
 10120  000B92  6E25               	movwf	___ftadd@sign,c
 10121  000B94  BE1E               	btfsc	___ftadd@f1+2,7,c
 10122  000B96  8E25               	bsf	___ftadd@sign,7,c
 10123  000B98  BE21               	btfsc	___ftadd@f2+2,7,c
 10124  000B9A  8C25               	bsf	___ftadd@sign,6,c
 10125  000B9C  8E1D               	bsf	___ftadd@f1+1,7,c
 10126  000B9E  0EFF               	movlw	255
 10127  000BA0  161C               	andwf	___ftadd@f1,f,c
 10128  000BA2  0EFF               	movlw	255
 10129  000BA4  161D               	andwf	___ftadd@f1+1,f,c
 10130  000BA6  0E00               	movlw	0
 10131  000BA8  161E               	andwf	___ftadd@f1+2,f,c
 10132  000BAA  8E20               	bsf	___ftadd@f2+1,7,c
 10133  000BAC  0EFF               	movlw	255
 10134  000BAE  161F               	andwf	___ftadd@f2,f,c
 10135  000BB0  0EFF               	movlw	255
 10136  000BB2  1620               	andwf	___ftadd@f2+1,f,c
 10137  000BB4  0E00               	movlw	0
 10138  000BB6  1621               	andwf	___ftadd@f2+2,f,c
 10139  000BB8  5026               	movf	___ftadd@exp2,w,c
 10140  000BBA  5C27               	subwf	___ftadd@exp1,w,c
 10141  000BBC  B0D8               	btfsc	status,0,c
 10142  000BBE  D01B               	goto	i2l2777
 10143  000BC0                     i2l2767:
 10144  000BC0  90D8               	bcf	status,0,c
 10145  000BC2  361F               	rlcf	___ftadd@f2,f,c
 10146  000BC4  3620               	rlcf	___ftadd@f2+1,f,c
 10147  000BC6  3621               	rlcf	___ftadd@f2+2,f,c
 10148  000BC8  0626               	decf	___ftadd@exp2,f,c
 10149  000BCA  5027               	movf	___ftadd@exp1,w,c
 10150  000BCC  1826               	xorwf	___ftadd@exp2,w,c
 10151  000BCE  B4D8               	btfsc	status,2,c
 10152  000BD0  D00D               	goto	i2l2775
 10153  000BD2  0625               	decf	___ftadd@sign,f,c
 10154  000BD4  C025  F022         	movff	___ftadd@sign,??___ftadd
 10155  000BD8  0E07               	movlw	7
 10156  000BDA  1622               	andwf	??___ftadd,f,c
 10157  000BDC  B4D8               	btfsc	status,2,c
 10158  000BDE  D006               	goto	i2l2775
 10159  000BE0  D7EF               	goto	i2l2767
 10160  000BE2                     i2l2773:
 10161  000BE2  90D8               	bcf	status,0,c
 10162  000BE4  321E               	rrcf	___ftadd@f1+2,f,c
 10163  000BE6  321D               	rrcf	___ftadd@f1+1,f,c
 10164  000BE8  321C               	rrcf	___ftadd@f1,f,c
 10165  000BEA  2A27               	incf	___ftadd@exp1,f,c
 10166  000BEC                     i2l2775:
 10167  000BEC  5026               	movf	___ftadd@exp2,w,c
 10168  000BEE  1827               	xorwf	___ftadd@exp1,w,c
 10169  000BF0  B4D8               	btfsc	status,2,c
 10170  000BF2  D01F               	goto	i2l654
 10171  000BF4  D7F6               	goto	i2l2773
 10172  000BF6                     i2l2777:
 10173  000BF6  5027               	movf	___ftadd@exp1,w,c
 10174  000BF8  5C26               	subwf	___ftadd@exp2,w,c
 10175  000BFA  B0D8               	btfsc	status,0,c
 10176  000BFC  D01A               	goto	i2l654
 10177  000BFE                     i2l2779:
 10178  000BFE  90D8               	bcf	status,0,c
 10179  000C00  361C               	rlcf	___ftadd@f1,f,c
 10180  000C02  361D               	rlcf	___ftadd@f1+1,f,c
 10181  000C04  361E               	rlcf	___ftadd@f1+2,f,c
 10182  000C06  0627               	decf	___ftadd@exp1,f,c
 10183  000C08  5027               	movf	___ftadd@exp1,w,c
 10184  000C0A  1826               	xorwf	___ftadd@exp2,w,c
 10185  000C0C  B4D8               	btfsc	status,2,c
 10186  000C0E  D00D               	goto	i2l2787
 10187  000C10  0625               	decf	___ftadd@sign,f,c
 10188  000C12  C025  F022         	movff	___ftadd@sign,??___ftadd
 10189  000C16  0E07               	movlw	7
 10190  000C18  1622               	andwf	??___ftadd,f,c
 10191  000C1A  B4D8               	btfsc	status,2,c
 10192  000C1C  D006               	goto	i2l2787
 10193  000C1E  D7EF               	goto	i2l2779
 10194  000C20                     i2l2785:
 10195  000C20  90D8               	bcf	status,0,c
 10196  000C22  3221               	rrcf	___ftadd@f2+2,f,c
 10197  000C24  3220               	rrcf	___ftadd@f2+1,f,c
 10198  000C26  321F               	rrcf	___ftadd@f2,f,c
 10199  000C28  2A26               	incf	___ftadd@exp2,f,c
 10200  000C2A                     i2l2787:
 10201  000C2A  5026               	movf	___ftadd@exp2,w,c
 10202  000C2C  1827               	xorwf	___ftadd@exp1,w,c
 10203  000C2E  A4D8               	btfss	status,2,c
 10204  000C30  D7F7               	goto	i2l2785
 10205  000C32                     i2l654:
 10206  000C32  AE25               	btfss	___ftadd@sign,7,c
 10207  000C34  D00C               	goto	i2l663
 10208  000C36  0EFF               	movlw	255
 10209  000C38  1A1C               	xorwf	___ftadd@f1,f,c
 10210  000C3A  0EFF               	movlw	255
 10211  000C3C  1A1D               	xorwf	___ftadd@f1+1,f,c
 10212  000C3E  0EFF               	movlw	255
 10213  000C40  1A1E               	xorwf	___ftadd@f1+2,f,c
 10214  000C42  0E01               	movlw	1
 10215  000C44  261C               	addwf	___ftadd@f1,f,c
 10216  000C46  0E00               	movlw	0
 10217  000C48  221D               	addwfc	___ftadd@f1+1,f,c
 10218  000C4A  0E00               	movlw	0
 10219  000C4C  221E               	addwfc	___ftadd@f1+2,f,c
 10220  000C4E                     i2l663:
 10221  000C4E  AC25               	btfss	___ftadd@sign,6,c
 10222  000C50  D00C               	goto	i2l2793
 10223  000C52  0EFF               	movlw	255
 10224  000C54  1A1F               	xorwf	___ftadd@f2,f,c
 10225  000C56  0EFF               	movlw	255
 10226  000C58  1A20               	xorwf	___ftadd@f2+1,f,c
 10227  000C5A  0EFF               	movlw	255
 10228  000C5C  1A21               	xorwf	___ftadd@f2+2,f,c
 10229  000C5E  0E01               	movlw	1
 10230  000C60  261F               	addwf	___ftadd@f2,f,c
 10231  000C62  0E00               	movlw	0
 10232  000C64  2220               	addwfc	___ftadd@f2+1,f,c
 10233  000C66  0E00               	movlw	0
 10234  000C68  2221               	addwfc	___ftadd@f2+2,f,c
 10235  000C6A                     i2l2793:
 10236  000C6A  0E00               	movlw	0
 10237  000C6C  6E25               	movwf	___ftadd@sign,c
 10238  000C6E  501C               	movf	___ftadd@f1,w,c
 10239  000C70  261F               	addwf	___ftadd@f2,f,c
 10240  000C72  501D               	movf	___ftadd@f1+1,w,c
 10241  000C74  2220               	addwfc	___ftadd@f2+1,f,c
 10242  000C76  501E               	movf	___ftadd@f1+2,w,c
 10243  000C78  2221               	addwfc	___ftadd@f2+2,f,c
 10244  000C7A  AE21               	btfss	___ftadd@f2+2,7,c
 10245  000C7C  D00E               	goto	i2l2803
 10246  000C7E  0EFF               	movlw	255
 10247  000C80  1A1F               	xorwf	___ftadd@f2,f,c
 10248  000C82  0EFF               	movlw	255
 10249  000C84  1A20               	xorwf	___ftadd@f2+1,f,c
 10250  000C86  0EFF               	movlw	255
 10251  000C88  1A21               	xorwf	___ftadd@f2+2,f,c
 10252  000C8A  0E01               	movlw	1
 10253  000C8C  261F               	addwf	___ftadd@f2,f,c
 10254  000C8E  0E00               	movlw	0
 10255  000C90  2220               	addwfc	___ftadd@f2+1,f,c
 10256  000C92  0E00               	movlw	0
 10257  000C94  2221               	addwfc	___ftadd@f2+2,f,c
 10258  000C96  0E01               	movlw	1
 10259  000C98  6E25               	movwf	___ftadd@sign,c
 10260  000C9A                     i2l2803:
 10261  000C9A  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 10262  000C9E  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 10263  000CA2  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 10264  000CA6  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 10265  000CAA  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 10266  000CAE  EC19  F00D         	call	___ftpack	;wreg free
 10267  000CB2  C001  F01C         	movff	?___ftpack,?___ftadd
 10268  000CB6  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 10269  000CBA  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 10270  000CBE  0012               	return	
 10271  000CC0                     __end_of___ftadd:
 10272                           	opt stack 0
 10273                           pclatu	equ	0xFFB
 10274                           pclath	equ	0xFFA
 10275                           tblptru	equ	0xFF8
 10276                           tblptrh	equ	0xFF7
 10277                           tblptrl	equ	0xFF6
 10278                           tablat	equ	0xFF5
 10279                           prodh	equ	0xFF4
 10280                           prodl	equ	0xFF3
 10281                           intcon	equ	0xFF2
 10282                           intcon2	equ	0xFF1
 10283                           intcon3	equ	0xFF0
 10284                           postinc0	equ	0xFEE
 10285                           fsr0h	equ	0xFEA
 10286                           fsr0l	equ	0xFE9
 10287                           wreg	equ	0xFE8
 10288                           fsr1h	equ	0xFE2
 10289                           fsr1l	equ	0xFE1
 10290                           indf2	equ	0xFDF
 10291                           postinc2	equ	0xFDE
 10292                           postdec2	equ	0xFDD
 10293                           fsr2h	equ	0xFDA
 10294                           fsr2l	equ	0xFD9
 10295                           status	equ	0xFD8
 10296                           
 10297 ;; *************** function ___ftneg *****************
 10298 ;; Defined at:
 10299 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;  f1              3    0[COMRAM] float 
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;		None
 10304 ;; Return value:  Size  Location     Type
 10305 ;;                  3    0[COMRAM] float 
 10306 ;; Registers used:
 10307 ;;		wreg, status,2, status,0
 10308 ;; Tracked objects:
 10309 ;;		On entry : 0/0
 10310 ;;		On exit  : 0/0
 10311 ;;		Unchanged: 0/0
 10312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10313 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10316 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10317 ;;Total ram usage:        3 bytes
 10318 ;; Hardware stack levels used:    1
 10319 ;; This function calls:
 10320 ;;		Nothing
 10321 ;; This function is called by:
 10322 ;;		_pow
 10323 ;;		_exp
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           	psect	text56
 10328  002464                     __ptext56:
 10329                           	opt stack 0
 10330  002464                     ___ftneg:
 10331                           	opt stack 22
 10332                           
 10333                           ;incstack = 0
 10334  002464  5001               	movf	___ftneg@f1,w,c
 10335  002466  1002               	iorwf	___ftneg@f1+1,w,c
 10336  002468  1003               	iorwf	___ftneg@f1+2,w,c
 10337  00246A  B4D8               	btfsc	status,2,c
 10338  00246C  D006               	goto	i2l696
 10339  00246E  0E00               	movlw	0
 10340  002470  1A01               	xorwf	___ftneg@f1,f,c
 10341  002472  0E00               	movlw	0
 10342  002474  1A02               	xorwf	___ftneg@f1+1,f,c
 10343  002476  0E80               	movlw	128
 10344  002478  1A03               	xorwf	___ftneg@f1+2,f,c
 10345  00247A                     i2l696:
 10346  00247A  C001  F001         	movff	___ftneg@f1,?___ftneg
 10347  00247E  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 10348  002482  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 10349  002486  0012               	return		;funcret
 10350  002488                     __end_of___ftneg:
 10351                           	opt stack 0
 10352                           pclatu	equ	0xFFB
 10353                           pclath	equ	0xFFA
 10354                           tblptru	equ	0xFF8
 10355                           tblptrh	equ	0xFF7
 10356                           tblptrl	equ	0xFF6
 10357                           tablat	equ	0xFF5
 10358                           prodh	equ	0xFF4
 10359                           prodl	equ	0xFF3
 10360                           intcon	equ	0xFF2
 10361                           intcon2	equ	0xFF1
 10362                           intcon3	equ	0xFF0
 10363                           postinc0	equ	0xFEE
 10364                           fsr0h	equ	0xFEA
 10365                           fsr0l	equ	0xFE9
 10366                           wreg	equ	0xFE8
 10367                           fsr1h	equ	0xFE2
 10368                           fsr1l	equ	0xFE1
 10369                           indf2	equ	0xFDF
 10370                           postinc2	equ	0xFDE
 10371                           postdec2	equ	0xFDD
 10372                           fsr2h	equ	0xFDA
 10373                           fsr2l	equ	0xFD9
 10374                           status	equ	0xFD8
 10375                           
 10376 ;; *************** function ___ftdiv *****************
 10377 ;; Defined at:
 10378 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10379 ;; Parameters:    Size  Location     Type
 10380 ;;  f1              3    8[COMRAM] float 
 10381 ;;  f2              3   11[COMRAM] float 
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;  f3              3   18[COMRAM] float 
 10384 ;;  sign            1   22[COMRAM] unsigned char 
 10385 ;;  exp             1   21[COMRAM] unsigned char 
 10386 ;;  cntr            1   17[COMRAM] unsigned char 
 10387 ;; Return value:  Size  Location     Type
 10388 ;;                  3    8[COMRAM] float 
 10389 ;; Registers used:
 10390 ;;		wreg, status,2, status,0, cstack
 10391 ;; Tracked objects:
 10392 ;;		On entry : 0/0
 10393 ;;		On exit  : 0/0
 10394 ;;		Unchanged: 0/0
 10395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10396 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10397 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10398 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10399 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10400 ;;Total ram usage:       15 bytes
 10401 ;; Hardware stack levels used:    1
 10402 ;; Hardware stack levels required when called:    1
 10403 ;; This function calls:
 10404 ;;		___ftpack
 10405 ;; This function is called by:
 10406 ;;		_exp
 10407 ;; This function uses a non-reentrant model
 10408 ;;
 10409                           
 10410                           	psect	text57
 10411  001482                     __ptext57:
 10412                           	opt stack 0
 10413  001482                     ___ftdiv:
 10414                           	opt stack 21
 10415                           
 10416                           ;incstack = 0
 10417  001482  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 10418  001486  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 10419  001488  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 10420  00148A  340A               	rlcf	___ftdiv@f1+1,w,c
 10421  00148C  360F               	rlcf	??___ftdiv& (0+255),f,c
 10422  00148E  E301               	bnc	u241_41
 10423  001490  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 10424  001492                     u241_41:
 10425  001492  500F               	movf	??___ftdiv,w,c
 10426  001494  6E16               	movwf	___ftdiv@exp,c
 10427  001496  5016               	movf	___ftdiv@exp,w,c
 10428  001498  A4D8               	btfss	status,2,c
 10429  00149A  D007               	goto	i2l2969
 10430  00149C  0E00               	movlw	0
 10431  00149E  6E09               	movwf	?___ftdiv,c
 10432  0014A0  0E00               	movlw	0
 10433  0014A2  6E0A               	movwf	?___ftdiv+1,c
 10434  0014A4  0E00               	movlw	0
 10435  0014A6  6E0B               	movwf	?___ftdiv+2,c
 10436  0014A8  0012               	return	
 10437  0014AA                     i2l2969:
 10438  0014AA  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 10439  0014AE  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 10440  0014B0  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 10441  0014B2  340D               	rlcf	___ftdiv@f2+1,w,c
 10442  0014B4  360F               	rlcf	??___ftdiv& (0+255),f,c
 10443  0014B6  E301               	bnc	u243_41
 10444  0014B8  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 10445  0014BA                     u243_41:
 10446  0014BA  500F               	movf	??___ftdiv,w,c
 10447  0014BC  6E17               	movwf	___ftdiv@sign,c
 10448  0014BE  5017               	movf	___ftdiv@sign,w,c
 10449  0014C0  A4D8               	btfss	status,2,c
 10450  0014C2  D007               	goto	i2l2975
 10451  0014C4  0E00               	movlw	0
 10452  0014C6  6E09               	movwf	?___ftdiv,c
 10453  0014C8  0E00               	movlw	0
 10454  0014CA  6E0A               	movwf	?___ftdiv+1,c
 10455  0014CC  0E00               	movlw	0
 10456  0014CE  6E0B               	movwf	?___ftdiv+2,c
 10457  0014D0  0012               	return	
 10458  0014D2                     i2l2975:
 10459  0014D2  0E00               	movlw	0
 10460  0014D4  6E13               	movwf	___ftdiv@f3,c
 10461  0014D6  0E00               	movlw	0
 10462  0014D8  6E14               	movwf	___ftdiv@f3+1,c
 10463  0014DA  0E00               	movlw	0
 10464  0014DC  6E15               	movwf	___ftdiv@f3+2,c
 10465  0014DE  5017               	movf	___ftdiv@sign,w,c
 10466  0014E0  0F89               	addlw	137
 10467  0014E2  5E16               	subwf	___ftdiv@exp,f,c
 10468  0014E4  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 10469  0014E8  500E               	movf	___ftdiv@f2+2,w,c
 10470  0014EA  1A17               	xorwf	___ftdiv@sign,f,c
 10471  0014EC  0E80               	movlw	128
 10472  0014EE  1617               	andwf	___ftdiv@sign,f,c
 10473  0014F0  8E0A               	bsf	___ftdiv@f1+1,7,c
 10474  0014F2  0EFF               	movlw	255
 10475  0014F4  1609               	andwf	___ftdiv@f1,f,c
 10476  0014F6  0EFF               	movlw	255
 10477  0014F8  160A               	andwf	___ftdiv@f1+1,f,c
 10478  0014FA  0E00               	movlw	0
 10479  0014FC  160B               	andwf	___ftdiv@f1+2,f,c
 10480  0014FE  8E0D               	bsf	___ftdiv@f2+1,7,c
 10481  001500  0EFF               	movlw	255
 10482  001502  160C               	andwf	___ftdiv@f2,f,c
 10483  001504  0EFF               	movlw	255
 10484  001506  160D               	andwf	___ftdiv@f2+1,f,c
 10485  001508  0E00               	movlw	0
 10486  00150A  160E               	andwf	___ftdiv@f2+2,f,c
 10487  00150C  0E18               	movlw	24
 10488  00150E  6E12               	movwf	___ftdiv@cntr,c
 10489  001510                     i2l2995:
 10490  001510  90D8               	bcf	status,0,c
 10491  001512  3613               	rlcf	___ftdiv@f3,f,c
 10492  001514  3614               	rlcf	___ftdiv@f3+1,f,c
 10493  001516  3615               	rlcf	___ftdiv@f3+2,f,c
 10494  001518  500C               	movf	___ftdiv@f2,w,c
 10495  00151A  5C09               	subwf	___ftdiv@f1,w,c
 10496  00151C  500D               	movf	___ftdiv@f2+1,w,c
 10497  00151E  580A               	subwfb	___ftdiv@f1+1,w,c
 10498  001520  500E               	movf	___ftdiv@f2+2,w,c
 10499  001522  580B               	subwfb	___ftdiv@f1+2,w,c
 10500  001524  A0D8               	btfss	status,0,c
 10501  001526  D007               	goto	i2l674
 10502  001528  500C               	movf	___ftdiv@f2,w,c
 10503  00152A  5E09               	subwf	___ftdiv@f1,f,c
 10504  00152C  500D               	movf	___ftdiv@f2+1,w,c
 10505  00152E  5A0A               	subwfb	___ftdiv@f1+1,f,c
 10506  001530  500E               	movf	___ftdiv@f2+2,w,c
 10507  001532  5A0B               	subwfb	___ftdiv@f1+2,f,c
 10508  001534  8013               	bsf	___ftdiv@f3,0,c
 10509  001536                     i2l674:
 10510  001536  90D8               	bcf	status,0,c
 10511  001538  3609               	rlcf	___ftdiv@f1,f,c
 10512  00153A  360A               	rlcf	___ftdiv@f1+1,f,c
 10513  00153C  360B               	rlcf	___ftdiv@f1+2,f,c
 10514  00153E  2E12               	decfsz	___ftdiv@cntr,f,c
 10515  001540  D7E7               	goto	i2l2995
 10516  001542  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 10517  001546  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10518  00154A  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10519  00154E  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 10520  001552  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 10521  001556  EC19  F00D         	call	___ftpack	;wreg free
 10522  00155A  C001  F009         	movff	?___ftpack,?___ftdiv
 10523  00155E  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 10524  001562  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 10525  001566  0012               	return	
 10526  001568                     __end_of___ftdiv:
 10527                           	opt stack 0
 10528                           pclatu	equ	0xFFB
 10529                           pclath	equ	0xFFA
 10530                           tblptru	equ	0xFF8
 10531                           tblptrh	equ	0xFF7
 10532                           tblptrl	equ	0xFF6
 10533                           tablat	equ	0xFF5
 10534                           prodh	equ	0xFF4
 10535                           prodl	equ	0xFF3
 10536                           intcon	equ	0xFF2
 10537                           intcon2	equ	0xFF1
 10538                           intcon3	equ	0xFF0
 10539                           postinc0	equ	0xFEE
 10540                           fsr0h	equ	0xFEA
 10541                           fsr0l	equ	0xFE9
 10542                           wreg	equ	0xFE8
 10543                           fsr1h	equ	0xFE2
 10544                           fsr1l	equ	0xFE1
 10545                           indf2	equ	0xFDF
 10546                           postinc2	equ	0xFDE
 10547                           postdec2	equ	0xFDD
 10548                           fsr2h	equ	0xFDA
 10549                           fsr2l	equ	0xFD9
 10550                           status	equ	0xFD8
 10551                           
 10552 ;; *************** function ___awtoft *****************
 10553 ;; Defined at:
 10554 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10555 ;; Parameters:    Size  Location     Type
 10556 ;;  c               2    8[COMRAM] int 
 10557 ;; Auto vars:     Size  Location     Type
 10558 ;;  sign            1   11[COMRAM] unsigned char 
 10559 ;; Return value:  Size  Location     Type
 10560 ;;                  3    8[COMRAM] float 
 10561 ;; Registers used:
 10562 ;;		wreg, status,2, status,0, cstack
 10563 ;; Tracked objects:
 10564 ;;		On entry : 0/0
 10565 ;;		On exit  : 0/0
 10566 ;;		Unchanged: 0/0
 10567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10568 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10571 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10572 ;;Total ram usage:        4 bytes
 10573 ;; Hardware stack levels used:    1
 10574 ;; Hardware stack levels required when called:    1
 10575 ;; This function calls:
 10576 ;;		___ftpack
 10577 ;; This function is called by:
 10578 ;;		_dec_to_hex
 10579 ;;		_exp
 10580 ;;		_log
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           	psect	text58
 10585  0022E6                     __ptext58:
 10586                           	opt stack 0
 10587  0022E6                     ___awtoft:
 10588                           	opt stack 21
 10589                           
 10590                           ;incstack = 0
 10591  0022E6  0E00               	movlw	0
 10592  0022E8  6E0C               	movwf	___awtoft@sign,c
 10593  0022EA  AE0A               	btfss	___awtoft@c+1,7,c
 10594  0022EC  D006               	goto	i2l3025
 10595  0022EE  6C09               	negf	___awtoft@c,c
 10596  0022F0  1E0A               	comf	___awtoft@c+1,f,c
 10597  0022F2  B0D8               	btfsc	status,0,c
 10598  0022F4  2A0A               	incf	___awtoft@c+1,f,c
 10599  0022F6  0E01               	movlw	1
 10600  0022F8  6E0C               	movwf	___awtoft@sign,c
 10601  0022FA                     i2l3025:
 10602  0022FA  C009  F001         	movff	___awtoft@c,___ftpack@arg
 10603  0022FE  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 10604  002302  6A03               	clrf	___ftpack@arg+2,c
 10605  002304  0E8E               	movlw	142
 10606  002306  6E04               	movwf	___ftpack@exp,c
 10607  002308  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 10608  00230C  EC19  F00D         	call	___ftpack	;wreg free
 10609  002310  C001  F009         	movff	?___ftpack,?___awtoft
 10610  002314  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 10611  002318  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 10612  00231C  0012               	return	
 10613  00231E                     __end_of___awtoft:
 10614                           	opt stack 0
 10615                           pclatu	equ	0xFFB
 10616                           pclath	equ	0xFFA
 10617                           tblptru	equ	0xFF8
 10618                           tblptrh	equ	0xFF7
 10619                           tblptrl	equ	0xFF6
 10620                           tablat	equ	0xFF5
 10621                           prodh	equ	0xFF4
 10622                           prodl	equ	0xFF3
 10623                           intcon	equ	0xFF2
 10624                           intcon2	equ	0xFF1
 10625                           intcon3	equ	0xFF0
 10626                           postinc0	equ	0xFEE
 10627                           fsr0h	equ	0xFEA
 10628                           fsr0l	equ	0xFE9
 10629                           wreg	equ	0xFE8
 10630                           fsr1h	equ	0xFE2
 10631                           fsr1l	equ	0xFE1
 10632                           indf2	equ	0xFDF
 10633                           postinc2	equ	0xFDE
 10634                           postdec2	equ	0xFDD
 10635                           fsr2h	equ	0xFDA
 10636                           fsr2l	equ	0xFD9
 10637                           status	equ	0xFD8
 10638                           
 10639 ;; *************** function ___lltoft *****************
 10640 ;; Defined at:
 10641 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;  c               4    8[COMRAM] unsigned long 
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  exp             1   16[COMRAM] unsigned char 
 10646 ;; Return value:  Size  Location     Type
 10647 ;;                  3    8[COMRAM] float 
 10648 ;; Registers used:
 10649 ;;		wreg, status,2, status,0, cstack
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10655 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10657 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10658 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10659 ;;Total ram usage:        9 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; Hardware stack levels required when called:    1
 10662 ;; This function calls:
 10663 ;;		___ftpack
 10664 ;; This function is called by:
 10665 ;;		_pow
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text59
 10670  0020DA                     __ptext59:
 10671                           	opt stack 0
 10672  0020DA                     ___lltoft:
 10673                           	opt stack 22
 10674                           
 10675                           ;incstack = 0
 10676  0020DA  0E8E               	movlw	142
 10677  0020DC  6E11               	movwf	___lltoft@exp,c
 10678  0020DE  D006               	goto	i2l3147
 10679  0020E0                     i2l3145:
 10680  0020E0  90D8               	bcf	status,0,c
 10681  0020E2  320C               	rrcf	___lltoft@c+3,f,c
 10682  0020E4  320B               	rrcf	___lltoft@c+2,f,c
 10683  0020E6  320A               	rrcf	___lltoft@c+1,f,c
 10684  0020E8  3209               	rrcf	___lltoft@c,f,c
 10685  0020EA  2A11               	incf	___lltoft@exp,f,c
 10686  0020EC                     i2l3147:
 10687  0020EC  0E00               	movlw	0
 10688  0020EE  1409               	andwf	___lltoft@c,w,c
 10689  0020F0  6E0D               	movwf	??___lltoft& (0+255),c
 10690  0020F2  0E00               	movlw	0
 10691  0020F4  140A               	andwf	___lltoft@c+1,w,c
 10692  0020F6  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 10693  0020F8  0E00               	movlw	0
 10694  0020FA  140B               	andwf	___lltoft@c+2,w,c
 10695  0020FC  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 10696  0020FE  0EFF               	movlw	255
 10697  002100  140C               	andwf	___lltoft@c+3,w,c
 10698  002102  6E10               	movwf	(??___lltoft+3)& (0+255),c
 10699  002104  500D               	movf	??___lltoft,w,c
 10700  002106  100E               	iorwf	??___lltoft+1,w,c
 10701  002108  100F               	iorwf	??___lltoft+2,w,c
 10702  00210A  1010               	iorwf	??___lltoft+3,w,c
 10703  00210C  A4D8               	btfss	status,2,c
 10704  00210E  D7E8               	goto	i2l3145
 10705  002110  C009  F001         	movff	___lltoft@c,___ftpack@arg
 10706  002114  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 10707  002118  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 10708  00211C  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 10709  002120  0E00               	movlw	0
 10710  002122  6E05               	movwf	___ftpack@sign,c
 10711  002124  EC19  F00D         	call	___ftpack	;wreg free
 10712  002128  C001  F009         	movff	?___ftpack,?___lltoft
 10713  00212C  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 10714  002130  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 10715  002134  0012               	return	
 10716  002136                     __end_of___lltoft:
 10717                           	opt stack 0
 10718                           pclatu	equ	0xFFB
 10719                           pclath	equ	0xFFA
 10720                           tblptru	equ	0xFF8
 10721                           tblptrh	equ	0xFF7
 10722                           tblptrl	equ	0xFF6
 10723                           tablat	equ	0xFF5
 10724                           prodh	equ	0xFF4
 10725                           prodl	equ	0xFF3
 10726                           intcon	equ	0xFF2
 10727                           intcon2	equ	0xFF1
 10728                           intcon3	equ	0xFF0
 10729                           postinc0	equ	0xFEE
 10730                           fsr0h	equ	0xFEA
 10731                           fsr0l	equ	0xFE9
 10732                           wreg	equ	0xFE8
 10733                           fsr1h	equ	0xFE2
 10734                           fsr1l	equ	0xFE1
 10735                           indf2	equ	0xFDF
 10736                           postinc2	equ	0xFDE
 10737                           postdec2	equ	0xFDD
 10738                           fsr2h	equ	0xFDA
 10739                           fsr2l	equ	0xFD9
 10740                           status	equ	0xFD8
 10741                           
 10742 ;; *************** function ___ftpack *****************
 10743 ;; Defined at:
 10744 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10745 ;; Parameters:    Size  Location     Type
 10746 ;;  arg             3    0[COMRAM] unsigned um
 10747 ;;  exp             1    3[COMRAM] unsigned char 
 10748 ;;  sign            1    4[COMRAM] unsigned char 
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;		None
 10751 ;; Return value:  Size  Location     Type
 10752 ;;                  3    0[COMRAM] float 
 10753 ;; Registers used:
 10754 ;;		wreg, status,2, status,0
 10755 ;; Tracked objects:
 10756 ;;		On entry : 0/0
 10757 ;;		On exit  : 0/0
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10760 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10762 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10763 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10764 ;;Total ram usage:        8 bytes
 10765 ;; Hardware stack levels used:    1
 10766 ;; This function calls:
 10767 ;;		Nothing
 10768 ;; This function is called by:
 10769 ;;		___altoft
 10770 ;;		___awtoft
 10771 ;;		___ftadd
 10772 ;;		___ftdiv
 10773 ;;		___ftmul
 10774 ;;		___lltoft
 10775 ;; This function uses a non-reentrant model
 10776 ;;
 10777                           
 10778                           	psect	text60
 10779  001A32                     __ptext60:
 10780                           	opt stack 0
 10781  001A32                     ___ftpack:
 10782                           	opt stack 20
 10783                           
 10784                           ;incstack = 0
 10785  001A32  5004               	movf	___ftpack@exp,w,c
 10786  001A34  B4D8               	btfsc	status,2,c
 10787  001A36  D005               	goto	i2l2689
 10788  001A38  5001               	movf	___ftpack@arg,w,c
 10789  001A3A  1002               	iorwf	___ftpack@arg+1,w,c
 10790  001A3C  1003               	iorwf	___ftpack@arg+2,w,c
 10791  001A3E  A4D8               	btfss	status,2,c
 10792  001A40  D00C               	goto	i2l2695
 10793  001A42                     i2l2689:
 10794  001A42  0E00               	movlw	0
 10795  001A44  6E01               	movwf	?___ftpack,c
 10796  001A46  0E00               	movlw	0
 10797  001A48  6E02               	movwf	?___ftpack+1,c
 10798  001A4A  0E00               	movlw	0
 10799  001A4C  6E03               	movwf	?___ftpack+2,c
 10800  001A4E  0012               	return	
 10801  001A50                     i2l2693:
 10802  001A50  2A04               	incf	___ftpack@exp,f,c
 10803  001A52  90D8               	bcf	status,0,c
 10804  001A54  3203               	rrcf	___ftpack@arg+2,f,c
 10805  001A56  3202               	rrcf	___ftpack@arg+1,f,c
 10806  001A58  3201               	rrcf	___ftpack@arg,f,c
 10807  001A5A                     i2l2695:
 10808  001A5A  0E00               	movlw	0
 10809  001A5C  1401               	andwf	___ftpack@arg,w,c
 10810  001A5E  6E06               	movwf	??___ftpack& (0+255),c
 10811  001A60  0E00               	movlw	0
 10812  001A62  1402               	andwf	___ftpack@arg+1,w,c
 10813  001A64  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10814  001A66  0EFE               	movlw	254
 10815  001A68  1403               	andwf	___ftpack@arg+2,w,c
 10816  001A6A  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10817  001A6C  5006               	movf	??___ftpack,w,c
 10818  001A6E  1007               	iorwf	??___ftpack+1,w,c
 10819  001A70  1008               	iorwf	??___ftpack+2,w,c
 10820  001A72  B4D8               	btfsc	status,2,c
 10821  001A74  D00C               	goto	i2l2701
 10822  001A76  D7EC               	goto	i2l2693
 10823  001A78                     i2l2697:
 10824  001A78  2A04               	incf	___ftpack@exp,f,c
 10825  001A7A  0E01               	movlw	1
 10826  001A7C  2601               	addwf	___ftpack@arg,f,c
 10827  001A7E  0E00               	movlw	0
 10828  001A80  2202               	addwfc	___ftpack@arg+1,f,c
 10829  001A82  0E00               	movlw	0
 10830  001A84  2203               	addwfc	___ftpack@arg+2,f,c
 10831  001A86  90D8               	bcf	status,0,c
 10832  001A88  3203               	rrcf	___ftpack@arg+2,f,c
 10833  001A8A  3202               	rrcf	___ftpack@arg+1,f,c
 10834  001A8C  3201               	rrcf	___ftpack@arg,f,c
 10835  001A8E                     i2l2701:
 10836  001A8E  0E00               	movlw	0
 10837  001A90  1401               	andwf	___ftpack@arg,w,c
 10838  001A92  6E06               	movwf	??___ftpack& (0+255),c
 10839  001A94  0E00               	movlw	0
 10840  001A96  1402               	andwf	___ftpack@arg+1,w,c
 10841  001A98  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10842  001A9A  0EFF               	movlw	255
 10843  001A9C  1403               	andwf	___ftpack@arg+2,w,c
 10844  001A9E  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10845  001AA0  5006               	movf	??___ftpack,w,c
 10846  001AA2  1007               	iorwf	??___ftpack+1,w,c
 10847  001AA4  1008               	iorwf	??___ftpack+2,w,c
 10848  001AA6  B4D8               	btfsc	status,2,c
 10849  001AA8  D006               	goto	i2l2705
 10850  001AAA  D7E6               	goto	i2l2697
 10851  001AAC                     i2l2703:
 10852  001AAC  0604               	decf	___ftpack@exp,f,c
 10853  001AAE  90D8               	bcf	status,0,c
 10854  001AB0  3601               	rlcf	___ftpack@arg,f,c
 10855  001AB2  3602               	rlcf	___ftpack@arg+1,f,c
 10856  001AB4  3603               	rlcf	___ftpack@arg+2,f,c
 10857  001AB6                     i2l2705:
 10858  001AB6  BE02               	btfsc	___ftpack@arg+1,7,c
 10859  001AB8  D003               	goto	i2l616
 10860  001ABA  0E02               	movlw	2
 10861  001ABC  6004               	cpfslt	___ftpack@exp,c
 10862  001ABE  D7F6               	goto	i2l2703
 10863  001AC0                     i2l616:
 10864  001AC0  A004               	btfss	___ftpack@exp,0,c
 10865  001AC2  9E02               	bcf	___ftpack@arg+1,7,c
 10866  001AC4  90D8               	bcf	status,0,c
 10867  001AC6  3204               	rrcf	___ftpack@exp,f,c
 10868  001AC8  5004               	movf	___ftpack@exp,w,c
 10869  001ACA  1203               	iorwf	___ftpack@arg+2,f,c
 10870  001ACC  5005               	movf	___ftpack@sign,w,c
 10871  001ACE  A4D8               	btfss	status,2,c
 10872  001AD0  8E03               	bsf	___ftpack@arg+2,7,c
 10873  001AD2  C001  F001         	movff	___ftpack@arg,?___ftpack
 10874  001AD6  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10875  001ADA  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10876  001ADE  0012               	return	
 10877  001AE0                     __end_of___ftpack:
 10878                           	opt stack 0
 10879                           pclatu	equ	0xFFB
 10880                           pclath	equ	0xFFA
 10881                           tblptru	equ	0xFF8
 10882                           tblptrh	equ	0xFF7
 10883                           tblptrl	equ	0xFF6
 10884                           tablat	equ	0xFF5
 10885                           prodh	equ	0xFF4
 10886                           prodl	equ	0xFF3
 10887                           intcon	equ	0xFF2
 10888                           intcon2	equ	0xFF1
 10889                           intcon3	equ	0xFF0
 10890                           postinc0	equ	0xFEE
 10891                           fsr0h	equ	0xFEA
 10892                           fsr0l	equ	0xFE9
 10893                           wreg	equ	0xFE8
 10894                           fsr1h	equ	0xFE2
 10895                           fsr1l	equ	0xFE1
 10896                           indf2	equ	0xFDF
 10897                           postinc2	equ	0xFDE
 10898                           postdec2	equ	0xFDD
 10899                           fsr2h	equ	0xFDA
 10900                           fsr2l	equ	0xFD9
 10901                           status	equ	0xFD8
 10902                           
 10903 ;; *************** function ___awdiv *****************
 10904 ;; Defined at:
 10905 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10906 ;; Parameters:    Size  Location     Type
 10907 ;;  dividend        2    0[COMRAM] int 
 10908 ;;  divisor         2    2[COMRAM] int 
 10909 ;; Auto vars:     Size  Location     Type
 10910 ;;  quotient        2    6[COMRAM] int 
 10911 ;;  sign            1    5[COMRAM] unsigned char 
 10912 ;;  counter         1    4[COMRAM] unsigned char 
 10913 ;; Return value:  Size  Location     Type
 10914 ;;                  2    0[COMRAM] int 
 10915 ;; Registers used:
 10916 ;;		wreg, status,2, status,0
 10917 ;; Tracked objects:
 10918 ;;		On entry : 0/0
 10919 ;;		On exit  : 0/0
 10920 ;;		Unchanged: 0/0
 10921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10922 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10923 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10925 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10926 ;;Total ram usage:        8 bytes
 10927 ;; Hardware stack levels used:    1
 10928 ;; This function calls:
 10929 ;;		Nothing
 10930 ;; This function is called by:
 10931 ;;		_dec_to_hex
 10932 ;; This function uses a non-reentrant model
 10933 ;;
 10934                           
 10935                           	psect	text61
 10936  001DDC                     __ptext61:
 10937                           	opt stack 0
 10938  001DDC                     ___awdiv:
 10939                           	opt stack 24
 10940                           
 10941                           ;incstack = 0
 10942  001DDC  0E00               	movlw	0
 10943  001DDE  6E06               	movwf	___awdiv@sign,c
 10944  001DE0  AE04               	btfss	___awdiv@divisor+1,7,c
 10945  001DE2  D006               	goto	i2l3523
 10946  001DE4  6C03               	negf	___awdiv@divisor,c
 10947  001DE6  1E04               	comf	___awdiv@divisor+1,f,c
 10948  001DE8  B0D8               	btfsc	status,0,c
 10949  001DEA  2A04               	incf	___awdiv@divisor+1,f,c
 10950  001DEC  0E01               	movlw	1
 10951  001DEE  6E06               	movwf	___awdiv@sign,c
 10952  001DF0                     i2l3523:
 10953  001DF0  AE02               	btfss	___awdiv@dividend+1,7,c
 10954  001DF2  D006               	goto	i2l3529
 10955  001DF4  6C01               	negf	___awdiv@dividend,c
 10956  001DF6  1E02               	comf	___awdiv@dividend+1,f,c
 10957  001DF8  B0D8               	btfsc	status,0,c
 10958  001DFA  2A02               	incf	___awdiv@dividend+1,f,c
 10959  001DFC  0E01               	movlw	1
 10960  001DFE  1A06               	xorwf	___awdiv@sign,f,c
 10961  001E00                     i2l3529:
 10962  001E00  0E00               	movlw	0
 10963  001E02  6E08               	movwf	___awdiv@quotient+1,c
 10964  001E04  0E00               	movlw	0
 10965  001E06  6E07               	movwf	___awdiv@quotient,c
 10966  001E08  5003               	movf	___awdiv@divisor,w,c
 10967  001E0A  1004               	iorwf	___awdiv@divisor+1,w,c
 10968  001E0C  B4D8               	btfsc	status,2,c
 10969  001E0E  D01C               	goto	i2l3551
 10970  001E10  0E01               	movlw	1
 10971  001E12  6E05               	movwf	___awdiv@counter,c
 10972  001E14  D004               	goto	i2l3537
 10973  001E16                     i2l3535:
 10974  001E16  90D8               	bcf	status,0,c
 10975  001E18  3603               	rlcf	___awdiv@divisor,f,c
 10976  001E1A  3604               	rlcf	___awdiv@divisor+1,f,c
 10977  001E1C  2A05               	incf	___awdiv@counter,f,c
 10978  001E1E                     i2l3537:
 10979  001E1E  AE04               	btfss	___awdiv@divisor+1,7,c
 10980  001E20  D7FA               	goto	i2l3535
 10981  001E22                     i2l3539:
 10982  001E22  90D8               	bcf	status,0,c
 10983  001E24  3607               	rlcf	___awdiv@quotient,f,c
 10984  001E26  3608               	rlcf	___awdiv@quotient+1,f,c
 10985  001E28  5003               	movf	___awdiv@divisor,w,c
 10986  001E2A  5C01               	subwf	___awdiv@dividend,w,c
 10987  001E2C  5004               	movf	___awdiv@divisor+1,w,c
 10988  001E2E  5802               	subwfb	___awdiv@dividend+1,w,c
 10989  001E30  A0D8               	btfss	status,0,c
 10990  001E32  D005               	goto	i2l3547
 10991  001E34  5003               	movf	___awdiv@divisor,w,c
 10992  001E36  5E01               	subwf	___awdiv@dividend,f,c
 10993  001E38  5004               	movf	___awdiv@divisor+1,w,c
 10994  001E3A  5A02               	subwfb	___awdiv@dividend+1,f,c
 10995  001E3C  8007               	bsf	___awdiv@quotient,0,c
 10996  001E3E                     i2l3547:
 10997  001E3E  90D8               	bcf	status,0,c
 10998  001E40  3204               	rrcf	___awdiv@divisor+1,f,c
 10999  001E42  3203               	rrcf	___awdiv@divisor,f,c
 11000  001E44  2E05               	decfsz	___awdiv@counter,f,c
 11001  001E46  D7ED               	goto	i2l3539
 11002  001E48                     i2l3551:
 11003  001E48  5006               	movf	___awdiv@sign,w,c
 11004  001E4A  B4D8               	btfsc	status,2,c
 11005  001E4C  D004               	goto	i2l3555
 11006  001E4E  6C07               	negf	___awdiv@quotient,c
 11007  001E50  1E08               	comf	___awdiv@quotient+1,f,c
 11008  001E52  B0D8               	btfsc	status,0,c
 11009  001E54  2A08               	incf	___awdiv@quotient+1,f,c
 11010  001E56                     i2l3555:
 11011  001E56  C007  F001         	movff	___awdiv@quotient,?___awdiv
 11012  001E5A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 11013  001E5E  0012               	return	
 11014  001E60                     __end_of___awdiv:
 11015                           	opt stack 0
 11016                           pclatu	equ	0xFFB
 11017                           pclath	equ	0xFFA
 11018                           tblptru	equ	0xFF8
 11019                           tblptrh	equ	0xFF7
 11020                           tblptrl	equ	0xFF6
 11021                           tablat	equ	0xFF5
 11022                           prodh	equ	0xFF4
 11023                           prodl	equ	0xFF3
 11024                           intcon	equ	0xFF2
 11025                           intcon2	equ	0xFF1
 11026                           intcon3	equ	0xFF0
 11027                           postinc0	equ	0xFEE
 11028                           fsr0h	equ	0xFEA
 11029                           fsr0l	equ	0xFE9
 11030                           wreg	equ	0xFE8
 11031                           fsr1h	equ	0xFE2
 11032                           fsr1l	equ	0xFE1
 11033                           indf2	equ	0xFDF
 11034                           postinc2	equ	0xFDE
 11035                           postdec2	equ	0xFDD
 11036                           fsr2h	equ	0xFDA
 11037                           fsr2l	equ	0xFD9
 11038                           status	equ	0xFD8
 11039                           pclatu	equ	0xFFB
 11040                           pclath	equ	0xFFA
 11041                           tblptru	equ	0xFF8
 11042                           tblptrh	equ	0xFF7
 11043                           tblptrl	equ	0xFF6
 11044                           tablat	equ	0xFF5
 11045                           prodh	equ	0xFF4
 11046                           prodl	equ	0xFF3
 11047                           intcon	equ	0xFF2
 11048                           intcon2	equ	0xFF1
 11049                           intcon3	equ	0xFF0
 11050                           postinc0	equ	0xFEE
 11051                           fsr0h	equ	0xFEA
 11052                           fsr0l	equ	0xFE9
 11053                           wreg	equ	0xFE8
 11054                           fsr1h	equ	0xFE2
 11055                           fsr1l	equ	0xFE1
 11056                           indf2	equ	0xFDF
 11057                           postinc2	equ	0xFDE
 11058                           postdec2	equ	0xFDD
 11059                           fsr2h	equ	0xFDA
 11060                           fsr2l	equ	0xFD9
 11061                           status	equ	0xFD8
 11062                           
 11063                           	psect	rparam
 11064  0000                     pclatu	equ	0xFFB
 11065                           pclath	equ	0xFFA
 11066                           tblptru	equ	0xFF8
 11067                           tblptrh	equ	0xFF7
 11068                           tblptrl	equ	0xFF6
 11069                           tablat	equ	0xFF5
 11070                           prodh	equ	0xFF4
 11071                           prodl	equ	0xFF3
 11072                           intcon	equ	0xFF2
 11073                           intcon2	equ	0xFF1
 11074                           intcon3	equ	0xFF0
 11075                           postinc0	equ	0xFEE
 11076                           fsr0h	equ	0xFEA
 11077                           fsr0l	equ	0xFE9
 11078                           wreg	equ	0xFE8
 11079                           fsr1h	equ	0xFE2
 11080                           fsr1l	equ	0xFE1
 11081                           indf2	equ	0xFDF
 11082                           postinc2	equ	0xFDE
 11083                           postdec2	equ	0xFDD
 11084                           fsr2h	equ	0xFDA
 11085                           fsr2l	equ	0xFD9
 11086                           status	equ	0xFD8
 11087                           
 11088                           	psect	temp
 11089  00007E                     btemp:
 11090                           	opt stack 0
 11091  00007E                     	ds	1
 11092  0000                     int$flags	set	btemp
 11093                           pclatu	equ	0xFFB
 11094                           pclath	equ	0xFFA
 11095                           tblptru	equ	0xFF8
 11096                           tblptrh	equ	0xFF7
 11097                           tblptrl	equ	0xFF6
 11098                           tablat	equ	0xFF5
 11099                           prodh	equ	0xFF4
 11100                           prodl	equ	0xFF3
 11101                           intcon	equ	0xFF2
 11102                           intcon2	equ	0xFF1
 11103                           intcon3	equ	0xFF0
 11104                           postinc0	equ	0xFEE
 11105                           fsr0h	equ	0xFEA
 11106                           fsr0l	equ	0xFE9
 11107                           wreg	equ	0xFE8
 11108                           fsr1h	equ	0xFE2
 11109                           fsr1l	equ	0xFE1
 11110                           indf2	equ	0xFDF
 11111                           postinc2	equ	0xFDE
 11112                           postdec2	equ	0xFDD
 11113                           fsr2h	equ	0xFDA
 11114                           fsr2l	equ	0xFD9
 11115                           status	equ	0xFD8


Data Sizes:
    Strings     444
    Constant    99
    Data        2
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     54      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_25(CODE[16]), STR_24(CODE[16]), STR_23(CODE[15]), STR_22(CODE[16]), 
		 -> STR_21(CODE[25]), STR_20(CODE[24]), STR_19(CODE[23]), STR_18(CODE[18]), 
		 -> STR_17(CODE[23]), STR_16(CODE[10]), STR_15(CODE[17]), STR_14(CODE[17]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), 
		 -> STR_5(CODE[23]), STR_4(CODE[23]), STR_3(CODE[10]), STR_2(CODE[17]), 
		 -> STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    _read_colorsensor->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack

Critical Paths under _main in BANK0

    _main->_bottle_time
    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   30967
                                             52 BANK0      2     2      0
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    4155
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    4155
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    4155
                                             50 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    4155
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    5016
                                             50 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     748
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          2     0      2    4241
                                             50 BANK0      2     0      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    4579
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4020
                                             28 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     593
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 21    21      0   75398
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                   _read_colorsensor
                          _read_time
                       _servo_rotate
                           i2___wmul
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) _servo_rotate                                         6     4      2     242
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     369
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) _read_colorsensor                                     6     6      0    2654
                                             30 COMRAM     6     6      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            27    23      4    2172
                                             12 COMRAM    18    14      4
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     256
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69271
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   57987
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   18906
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31474
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8283
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     36      46       5       54.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3      34        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Feb 26 16:15:33 2017

               ___altoft@exp 003F           i2_I2C_Master_Start 2562           i2_I2C_Master_Write 2540  
              ___altoft@sign 0040                           l34 24D8               ?_emergencystop 0001  
               ___awdiv@sign 0006          ___wmul@multiplicand 0092           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
               ___ftadd@exp1 0027                 ___ftadd@exp2 0026                 ___ftadd@sign 0025  
                        l354 0130                          l299 24BE                          l809 2010  
                        l746 1A20                          l799 1ECE                 __CFG_CPB$OFF 000000  
                        _PEN 007E2A                 __CFG_CPD$OFF 000000                          _SEN 007E28  
                        _PSA 007EAB          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        _exp 0930                          _log 0F7E                          _isr 0008  
                        _pow 0CC0                          _ptr 007A                 ___awmod@sign 0095  
                        prod 000FF3                          wreg 000FE8                 ?_bottle_time 00B2  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0012                 ___ftdiv@sign 0017  
               __CFG_WDT$OFF 000000                         l3133 240E                         l3161 1E8A  
                       l4041 1104                         l3171 1EC0                         l3163 1E90  
                       l4051 1122                         l4043 110A                         l3181 1FD8  
                       l3405 01C0                         l3421 01FC                         l4045 1110  
                       l3159 1E7E                         l3183 1FDE                         l3407 01C6  
                       l3423 020E                         l3351 0034                         l3335 23E6  
                       l4047 1116                         l4039 10FE                         l4055 1152  
                       l3601 19A4                         l3441 028C                         l3433 0268  
                       l3353 0046                         l4049 111C                         l4057 1180  
                       l3603 19B4                         l3187 2002                         l3179 1FCC  
                       l3435 0272                         l3371 00F8                         l3363 0080  
                       l3347 0020                         l3613 1A0E                         l3605 19BA  
                       l3461 0334                         l3453 02CE                         l3429 0230  
                       l3357 0050                         l3471 039C                         l3447 02A8  
                       l3391 0184                         l3375 00FE                         l3449 02B4  
                       l3457 02E2                         l3393 018A                         l3473 03A8  
                       l3571 1BB4                         l3459 02E8                         l3467 0382  
                       l3387 0168                         l3469 0394                         l3591 1C20  
                       l3583 1BFE                         l3575 1BC8                         l3567 1BA4  
                       l3911 0F3A                         l3831 1C70                         l3577 1BD4  
                       l3905 0F1A                         l3825 1C4E                         l3579 1BDA  
                       l3587 1C0C                         l3819 1C2C                         l3855 1682  
                       l3839 1C92                         l3881 0E62                         l3865 16AC  
                       l3875 0E34                         l3859 168C                         ?_exp 0049  
                       l3893 0EBE                         ?_log 0034                         l3887 0E90  
                       l3899 0EEC                         ?_isr 0001                         ?_pow 0052  
                       STR_1 FFDC                         STR_2 FEF2                         STR_3 FFEA  
                       STR_4 FEA1                         STR_5 FEB8                         STR_6 FF14  
                       STR_7 FF03                         STR_8 FF58                         STR_9 FF47  
                       _T0CS 007EAD                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u2900 23E4                         u3615 20AA                         u3807 21CC  
                       u3817 203A                         u3827 2042                         _RCEN 007E2B  
                       u3837 206C                         u3847 2074                         i2l34 24EC  
                       u3787 118E                         u3797 2190                         _TMR0 000FD6  
                       _RSEN 007E29                         _main 1098                 ___ftpack@arg 0001  
                       _keys FDDF                 ___ftpack@exp 0004                         _time 00B6  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 007E  
                       exp@x 0049                         log@x 0034                         isr@i 0075  
       ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004                         pow@x 0052  
                       pow@y 0055                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000              __end_ofi2_putch 252A  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 001A                 ___param_bank 000000  
               ___ftmul@sign 001B                  i2_lcdNibble 21D8                ?_bottle_count 0001  
               ___fttol@exp1 0036                        ??_exp 004C                        ??_log 0037  
               ___fttol@lval 0032                        ??_isr 0080                        ??_pow 0058  
           ?_I2C_Master_Init 009D             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                servo_rotate@i 0005                        ?_main 0001  
                      _ACKEN 007E2C                        _ACKDT 007E2D              __end_of___awdiv 1E60  
            __end_of___ftadd 0CC0                        STR_10 FF36                        STR_11 FF25  
                      STR_12 FF69                        STR_20 FE5B                        STR_13 FF8B  
                      STR_21 FE42                        STR_22 FFBD                        STR_14 FF7A  
                      STR_23 FFCD                        STR_15 FF9C                        STR_16 FFF4  
                      STR_24 FFAD                        STR_25 FFAD                        STR_17 FE8A  
                      STR_26 FEE1                        STR_18 FECF                        STR_19 FE73  
            __end_of___awmod 1C2A              __end_of___ftdiv 1568              __end_of___ftneg 2488  
            __end_of___lldiv 1A32              __end_of___ftmul 1482              ___awdiv@divisor 0003  
            __end_of___ftsub 22A8              __end_of___fttol 138E                        _T0PS0 007EA8  
                      _T0PS1 007EA9                        _T0PS2 007EAA              __end_of___lwdiv 1ED8  
            __end_of___lwmod 201A                        i2l220 0898                        i2l223 0894  
                      i2l224 0724                        i2l313 1B86                        i2l244 08F4  
                      i2l319 181C                        i2l354 04B2                        i2l616 1AC0  
                      i2l643 0B82                        i2l654 0C32                        i2l663 0C4E  
                      i2l639 0B58                        i2l831 0CF6                        i2l809 225E  
                      i2l674 1536                        i2l836 0E24                        i2l696 247A  
            ___awdiv@counter 0005                        i2l799 217E                        i2l994 09E2  
                      i2l995 0B06                        _PORTB 000F81                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
               ___lltoft@exp 0011              __end_of_lcdInst 251E               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 21D8  
             __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003                ___awtoft@sign 000C  
            __end_of_dpowers FDFA                        _floor 1568                        _etime 00BD  
                      _ldexp 18B4                        _frexp 1CBC                        _errno 0078  
            __end_of_isdigit 2418                ___ftpack@sign 0005                        _putch 24FE  
                      _stime 00C1                        pclath 000FFA                        tablat 000FF5  
                      pow@yi 005F              __end_of_timeset FE09             __end_ofi2___wmul 2464  
            __end_of_standby 2354                        status 000FD8               __CFG_PBADEN$ON 000000  
              i2printf@width 001C                  exp@exponent 004F             __end_ofi2_printf 06D2  
         __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042                  ldexp@newexp 0037  
            __initialization 22A8                  log@exponent 0037           __size_ofi2_lcdInst 000C  
            ??_emergencystop 00B2               ??_bottle_count 00B2                 __end_of_main 119E  
               __end_of_keys FDF0                   i2printf@ap 0016           __size_ofi2_isdigit 001E  
                     ??_main 00B4                ___fttol@sign1 0031                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0091           ??_I2C_Master_Start 0091  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0093  
                     ?_floor 0041                       ?_ldexp 0034                       ?_frexp 0001  
           __end_of___altoft 1F50                       _T08BIT 007EAE             ___awdiv@dividend 0001  
            i2lcdNibble@data 0002             __end_of___awtoft 231E                       ?_putch 0001  
           __end_of___ftpack 1AE0              i2lcdNibble@temp 0001             __end_of___lltoft 2136  
                     _INT1IE 007F83                       _INT1IF 007F80                       u201_41 0B24  
                     i2l1005 1638                       u202_41 0B38                       i2l3013 227E  
                     i2l3025 22FA                       i2l3051 15BE                       i2l3043 1596  
                     i2l3203 0FB8                       i2l3061 17D4                       i2l3047 15A4  
                     i2l3231 09B4                       i2l3311 2254                       i2l3303 2234  
                     i2l3145 20E0                       i2l3225 097E                       i2l3305 223C  
                     i2l3147 20EC                       i2l3059 1758                       i2l3219 0948  
                     i2l3307 2240                       i2l4115 0834                       i2l4107 081E  
                     i2l4123 0856                       i2l2701 1A8E                       i2l3093 193E  
                     i2l3077 1910                       i2l3069 18CC                       i2l3253 0ADC  
                     i2l4141 08C0                       i2l4117 0842                       i2l2703 1AAC  
                     i2l3503 0DA0                       i2l4151 08DE                       i2l4119 0850  
                     i2l4063 0712                       i2l2705 1AB6                       i2l3089 1932  
                     i2l3273 249E                       i2l3523 1DF0                       i2l2803 0C9A  
                     i2l2731 1F06                       i2l3283 214C                       i2l4147 08D6  
                     i2l4091 0800                       i2l4083 075A                       i2l2813 13B6  
                     u222_41 139E                       i2l2901 133C                       i2l3197 0F98  
                     i2l3285 2154                       i2l4085 0764                       i2l4077 0746  
                     i2l3535 1E16                       i2l3551 1E48                       i2l2751 0B90  
                     i2l2911 1366                       i2l3295 2174                       i2l3287 2158  
                     i2l4255 1B72                       i2l4095 0804                       i2l4079 074E  
                     i2l3537 1E1E                       i2l3529 1E00                       i2l2745 0B66  
                     i2l2833 1410                       i2l2729 1EFA                       i2l4257 1B7C  
                     i2l3555 1E56                       i2l3547 1E3E                       i2l3539 1E22  
                     i2l2843 1438                       i2l2819 13DE                       i2l2915 137C  
                     i2l2907 1354                       i2l3491 0D1C                       i2l3731 0584  
                     i2l3707 052A                       i2l3723 055A                       i2l2693 1A50  
                     i2l2773 0BE2                       i2l2837 1420                       i2l2909 1360  
                     u231_41 12AA                       i2l3485 0D04                       i2l3637 2438  
                     i2l3709 052E                       i2l3725 056A                       i2l3653 03E0  
                     i2l2695 1A5A                       i2l2775 0BEC                       i2l2767 0BC0  
                     i2l2847 1448                       i2l2863 1DAC                       i2l2927 1CE4  
                     i2l3751 05E4                       i2l3743 05C6                       i2l3735 05A8  
                     i2l3655 03EE                       i2l2697 1A78                       i2l2689 1A42  
                     i2l2793 0C6A                       i2l2785 0C20                       i2l2777 0BF6  
                     i2l3761 0610                       i2l3737 05B0                       i2l3673 0480  
                     i2l3665 0422                       i2l3649 03D0                       i2l2787 0C2A  
                     i2l2779 0BFE                       i2l2859 1D7C                       i2l3499 0D7E  
                     i2l3763 0654                       i2l3771 06AA                       i2l3755 05F8  
                     i2l3659 03F4                       u224_41 13C6                       i2l2869 1DD8  
                     i2l3773 06B0                       i2l3749 05DC                       i2l3693 04FA  
                     i2l3677 0484                       i2l3933 1F8C                       i2l2975 14D2  
                     i2l2879 12C6                       i2l3759 060A                       i2l3695 04FE  
                     i2l3775 06B8                       i2l2969 14AA                       i2l2897 132C  
                     i2l3769 069A                       i2l3689 04E0                       i2l3929 1F84  
                     i2l2995 1510                       i2l3947 11B8                       i2l3939 1FA8  
                     i2l3963 1AE2                       u241_41 1492                       i2l3965 1AEA  
                     i2l3959 1288                       i2l3975 1B1E                       i2l3977 1B26  
                     i2l3989 1B5A                       u243_41 14BA                       _TMR0IE 007F95  
                     _TMR0IF 007F92                    ??i2_putch 0003                       _TMR0ON 007EAF  
                     _SSPADD 000FC8                       _TRISC3 007CA3                       _TRISC4 007CA4  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000            ?_read_colorsensor 0001  
                     ___ftge 1D4C                       ___wmul 238A           ??_read_colorsensor 001F  
                  ??___awdiv 0005                    ??___ftadd 0022               __CFG_STVREN$ON 000000  
                  ??___awmod 0094                    ??___ftdiv 000F                    ??___ftneg 0004  
                  ??___lldiv 0098                    ??___ftmul 0013                    ??___ftsub 002E  
                  ??___fttol 002C                    ??___lwdiv 0094                    ??___lwmod 009B  
              dec_to_hex@num 0063                       clear_0 22C6                       clear_1 22D2  
           ___awdiv@quotient 0007              ___awmod@divisor 0092              ___awmod@counter 0094  
                  ??_lcdInst 0092                       _printf 0012                       floor@i 0044  
                     floor@x 0041        ___ftmul@f3_as_product 0017                    ??_initLCD 0093  
                  ??_isdigit 0090            __end_ofi2___lwdiv 2188                 __mediumconst FDDE  
          __end_ofi2___lwmod 2268                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                    ??_standby 00B2            __end_ofi2_lcdInst 2536  
          __end_ofi2_isdigit 24A6             __end_ofexp@coeff FE27         __size_of_bottle_time 0036  
           __end_oflog@coeff FE42                   __accesstop 0080      __end_of__initialization 22D8  
                 ___altoft@c 0037                   ___ftadd@f1 001C                   ___ftadd@f2 001F  
                 ___ftge@ff1 0001                   ___ftge@ff2 0004                 eval_poly@res 0031  
              ___rparam_used 000001                   ___ftdiv@f1 0009                   ___ftdiv@f2 000C  
                 ___ftdiv@f3 0013                   ___ftneg@f1 0001                   ___awtoft@c 0009  
                 ___ftmul@f1 000D                   ___ftmul@f2 0010                   ___ftsub@f1 0028  
                 ___ftsub@f2 002B                   ___fttol@f1 0028           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001                 __pidataBANK0 256A                   ___lltoft@c 0009  
              __end_of_floor 1646                __end_of_ldexp 1976                __end_of_frexp 1D4C  
              __end_of_putch 250E                  i2printf@idx 0015                  i2printf@val 0019  
         __size_of_date_time 00D2                    ?i2___wmul 0001           __size_of_lcdNibble 0060  
                i2putch@data 0003                    ?i2_printf 000D                      ??_floor 0044  
                    ??_ldexp 0039                      ??_frexp 0006         __end_of_bottle_count 0F7E  
                 _dec_to_hex 119E                      ??_putch 0092                   __pbssBANK0 00B6  
         __size_of_eval_poly 00D2           __size_of_read_time 0068                      ?___ftge 0001  
               ?i2_lcdNibble 0001                      ?___wmul 0090                    ?___altoft 0037  
                  ?___awtoft 0009                    ?___ftpack 0001                      ?_printf 009C  
         __size_of_operation 0092                    ?___lltoft 0009                   ??i2___wmul 0005  
                 ??i2_printf 0011                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7            __end_of_date_time 1718                      i2_putch 251E  
          _bottle_count_disp 00C4  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 207A  
__size_ofi2_I2C_Master_Write 000A                ?_operationend 0001                      __Hparam 0000  
                    __Lparam 0000              __size_of___ftge 0090                      ___awdiv 1DDC  
                    ___ftadd 0B14                      ___awmod 1B88                      ___ftdiv 1482  
                    ___ftneg 2464                      ___lldiv 1976              __size_of___wmul 0036  
                    ___ftmul 138E                      ___ftsub 2268                      ___fttol 129A  
                    ___lwdiv 1E60                      ___lwmod 1FB8                   _curr_state 00C3  
                 ??___altoft 003B                      __pcinit 22A8                   ??___awtoft 000C  
                 ??___ftpack 0006            __end_of_eval_poly 17EA                      __ramtop 1000  
                    _lcdInst 250E                   ??___lltoft 000D                      __ptext0 1098  
                    __ptext1 231E                      __ptext2 24C0                      __ptext3 1C2A  
                    __ptext4 2188                      __ptext5 24A6                      __ptext6 1646  
                    __ptext7 2536                      __ptext8 254A                      __ptext9 2552  
            __size_of_printf 03B4               dec_to_hex@temp 006B                      _initLCD 2188  
          __end_of_hexpowers FE02                i2_isdigit$782 0002                      _dpowers FDF0  
               __size_of_exp 01E4                 __size_of_log 011A                      _isdigit 23EE  
               __size_of_isr 0928                 __size_of_pow 0172             ___awmod@dividend 0090  
          __end_of_read_time 1FB8     __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E  
   __size_of_I2C_Master_Wait 0014                   date_time@i 00B2     __size_of_I2C_Master_Stop 0008  
                    _timeset FE02                      _standby 231E                  ?_dec_to_hex 0063  
             __pintcode_body 06D2         end_of_initialization 22D8                      exp@sign 0051  
  read_colorsensor@c_clear_h 0023    read_colorsensor@c_clear_l 0021                __Lmediumconst FDDE  
                    int_func 06D2          i2___wmul@multiplier 0001            __end_of_operation 1CBC  
             _operation_disp 00BF               ??_operationend 00B2    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0094                      pow@sign 005E  
            ___lldiv@counter 009C                      printf@c 00B1                      printf@f 009C  
           I2C_Master_Init@c 009D             I2C_Master_Read@a 0091                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE        __end_of_emergencystop 24C0  
              ?_servo_rotate 0001                    _PORTAbits 000F80                    _PORTEbits 000F84  
      __size_of_bottle_count 014C    __size_of_read_colorsensor 00CA            i2_I2C_Master_Read 2418  
          i2_I2C_Master_Wait 24EC            i2_I2C_Master_Stop 255A            i2___lwdiv@divisor 0003  
                  i2___lwdiv 2136                    i2___lwmod 2226            i2___lwdiv@counter 0007  
         ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001  
                 _start_time 007C                    i2_lcdInst 252A                  ___ftdiv@exp 0016  
                printf@width 00AF          ??i2_I2C_Master_Read 0002                    i2_isdigit 2488  
        ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002                  ___ftmul@exp 0016  
               _bottle_count 0E32               __end_of___ftge 1DDC               __end_of___wmul 23C0  
        __size_of_dec_to_hex 00FC               ??_servo_rotate 0003         __size_ofi2_lcdNibble 004E  
              i2lcdInst@data 0003                   floor@expon 0047             i2___wmul@product 0005  
             __end_of_printf 03C6                 i2printf@flag 001B    __end_ofi2_I2C_Master_Read 243E  
  __end_ofi2_I2C_Master_Wait 24FE                 i2printf@prec 0018          start_initialization 22A8  
  __end_ofi2_I2C_Master_Stop 2562                   eval_poly@d 002B                   eval_poly@n 002D  
                 eval_poly@x 0028            __size_ofi2___wmul 0026                   ldexp@value 0034  
                __end_of_exp 0B14                  __end_of_log 1098                  __end_of_isr 0930  
                __end_of_pow 0E32                    i2printf@c 001E                    i2printf@f 000D  
              ??_bottle_time 00B4        i2I2C_Master_Read@temp 0003                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 030C                   frexp@value 0001  
          ??_I2C_Master_Init 00A1            ??_I2C_Master_Read 0091            ??_I2C_Master_Wait 0090  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 0091                   ?i2_isdigit 0001  
                   ??___ftge 0007                     ??___wmul 0094                  __pdataBANK0 00C4  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 00A4            __size_of___altoft 0078  
                 read_time@i 0004            __size_of___awtoft 0038            __size_of___ftpack 00AE  
          __size_of___lltoft 005C                  __pbssCOMRAM 0076         __end_of_operationend 24D8  
              __pcstackBANK0 0080            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
                   ?i2_putch 0001          __end_of_bottle_time 238A             _I2C_Master_Start 2552  
        i2I2C_Master_Write@d 0002             _I2C_Master_Write 2536                    _date_time 1646  
           ___lwdiv@dividend 0090            __CFG_CCP2MX$PORTC 000000                    __pintcode 0008  
              __pmediumconst FDDE                    _lcdNibble 201A                     ?___awdiv 0001  
                   ?___ftadd 001C                     ?___awmod 0090                     ?___ftdiv 0009  
                   ?___ftneg 0001                     ?___lldiv 0090                     ?___ftmul 000D  
                   ?___ftsub 0028                     ?___fttol 0028                     ?___lwdiv 0090  
                   ?___lwmod 0097           servo_rotate@degree 0001                     ?_lcdInst 0001  
           dec_to_hex@hexnum 006F                     ?_initLCD 0001                     ?_isdigit 0001  
           _read_colorsensor 17EA   __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012  
                  _eval_poly 1718   __size_ofi2_I2C_Master_Stop 0008                    _hexpowers FDFA  
                   ?_standby 0001             ___lwdiv@quotient 0094               __size_of_floor 00DE  
             __size_of_ldexp 00C2               __size_of_frexp 0090                 ??_dec_to_hex 0065  
                ??i2___lwdiv 0005                  ??i2___lwmod 000C                    _read_time 1F50  
             __size_of_putch 0010   __end_ofi2_I2C_Master_Start 256A   __end_ofi2_I2C_Master_Write 254A  
                ??i2_lcdInst 0003         __end_of_servo_rotate 1B88               ___wmul@product 0094  
                   _LATDbits 000F8C                  ??i2_isdigit 0001                   ?_date_time 0001  
                   i2u240_40 1D0C                     i2u233_40 12E4                     i2u240_48 1D0E  
                   i2u233_45 12DC                     i2u251_40 15B0                     i2u255_40 18EC  
                   i2u319_40 0D68                     i2u255_48 18EE                     i2u336_40 2436  
                   i2u275_40 09BC                     i2u276_40 09BE                     i2u390_47 18A6  
                   i2u391_47 21F0                    _operation 1C2A                     i2u392_47 21F8  
                   i2u393_47 2218                     i2u385_47 08E6                     i2u394_47 2220  
                   i2u386_47 1AFE                     i2u387_47 1B0E                     i2u388_47 1B3A  
                   i2u389_47 1B4A             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
         __end_of_dec_to_hex 129A            ___wmul@multiplier 0090                     i2___wmul 243E  
              lcdNibble@data 0091                   printf@flag 00AE                lcdNibble@temp 0090  
                 printf@prec 00AB                   ?_eval_poly 0028                     i2_printf 03C6  
                _bottle_time 2354          I2C_Master_Read@temp 0092                   ?_read_time 0001  
         dec_to_hex@quotient 0071             __size_ofi2_putch 000C                    frexp@eptr 0004  
                   __Hrparam 0000                   ?_operation 0001                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000                  dec_to_hex@i 006D              bottle_time@time 00B2  
           __size_of___awdiv 0084             __size_of___ftadd 01AC             __size_of___awmod 00A2  
           __size_of___ftdiv 00E6             __size_of___ftneg 0024        i2___wmul@multiplicand 0003  
           __size_of___lldiv 00BC                     ___altoft 1ED8             __size_of___ftmul 00F4  
           __size_of___ftsub 0040             __size_of___fttol 00F4             __size_of___lwdiv 0078  
           __size_of___lwmod 0062        __size_of_operationend 0018                     ___awtoft 22E6  
                   ___ftpack 1A32                     ___lltoft 20DA                  _isdigit$782 0091  
         i2I2C_Master_Read@a 0002             __size_of_lcdInst 0010                     _exp$1224 004C  
            _I2C_Master_Init 207A              _I2C_Master_Read 23C0             __size_of_initLCD 0050  
            _I2C_Master_Wait 24D8                     _isr$1308 0073              _I2C_Master_Stop 254A  
           __size_of_isdigit 002A              ___lwdiv@divisor 0092              ___lwdiv@counter 0096  
                   __ptext10 23C0                     __ptext11 24D8                     __ptext20 250E  
                   __ptext12 2354                     __ptext21 201A                     __ptext13 0E32  
                   __ptext30 251E                     __ptext22 1B88                     __ptext14 0012  
                   __ptext31 2488                     __ptext23 207A                     __ptext15 24FE  
                   __ptext40 24EC                     __ptext32 2226                     __ptext24 1976  
                   __ptext16 23EE                     __ptext41 119E                     __ptext33 2136  
                   __ptext17 238A                     __ptext50 1ED8                     __ptext42 0CC0  
                   __ptext34 252A                     __ptext26 1AE0                     __ptext18 1FB8  
                   __ptext51 1718                     __ptext43 0F7E                     __ptext35 21D8  
                   __ptext27 1F50                     __ptext19 1E60                     __ptext60 1A32  
                   __ptext52 243E                     __ptext44 0930                     __ptext36 2540  
                   __ptext28 17EA                     __ptext61 1DDC                     __ptext53 138E  
                   __ptext45 18B4                     __ptext37 255A                     __ptext29 03C6  
                   __ptext54 2268                     __ptext46 1568                     __ptext38 2562  
                   __ptext55 0B14                     __ptext47 1CBC                     __ptext39 2418  
                   __ptext56 2464                     __ptext48 129A                     __ptext57 1482  
                   __ptext49 1D4C                     __ptext58 22E6                     __ptext59 20DA  
                   _end_time 0076             __size_of_standby 0036                     _pow$1222 0058  
                   _pow$1223 005B       __size_of_emergencystop 001A                __size_of_main 0106  
            _dec_to_hex$1220 0065              _dec_to_hex$1221 0068                  ??_date_time 00B2  
               _operationend 24C0                ??i2_lcdNibble 0001                  ??_lcdNibble 0090  
                   int$flags 007E                    printf@idx 00A8                    printf@val 00AC  
                   exp@coeff FE09                     log@coeff FE27                    putch@data 0092  
   __end_of_I2C_Master_Start 255A     __end_of_I2C_Master_Write 2540                   _INTCONbits 000FF2  
                ??_eval_poly 002F                     isdigit@c 0092        __size_of_servo_rotate 00A8  
                ??_read_time 0004                     intlevel2 0000             ___lwmod@dividend 0097  
           ___lldiv@dividend 0090     __end_of_read_colorsensor 18B4                  ??_operation 00B2  
                   printf@ap 00A9      __end_of_I2C_Master_Init 20DA      __end_of_I2C_Master_Read 23EE  
    __end_of_I2C_Master_Wait 24EC      __end_of_I2C_Master_Stop 2552                  lcdInst@data 0092  
              _emergencystop 24A6                 _servo_rotate 1AE0          __end_ofi2_lcdNibble 2226  
           ___lldiv@quotient 0098            I2C_Master_Write@d 0091              ___lwmod@divisor 0099  
            ___lwmod@counter 009B  



Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 20 00:37:53 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    82                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    83  0000                     
    84                           ; Version 1.40
    85                           ; Generated 01/12/2016 GMT
    86                           ; 
    87                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    88                           ; All rights reserved.
    89                           ; 
    90                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    91                           ; 
    92                           ; Redistribution and use in source and binary forms, with or without modification, are
    93                           ; permitted provided that the following conditions are met:
    94                           ; 
    95                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    96                           ;        conditions and the following disclaimer.
    97                           ; 
    98                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    99                           ;        of conditions and the following disclaimer in the documentation and/or other
   100                           ;        materials provided with the distribution.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC18F4620 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118  0000                     
   119                           	psect	idataBANK0
   120  002C30                     __pidataBANK0:
   121                           	opt stack 0
   122                           
   123                           ;initializer for _bottle_count_disp
   124  002C30  FFFF               	dw	65535
   125                           
   126                           	psect	mediumconst
   127  00FDA0                     __pmediumconst:
   128                           	opt stack 0
   129  00FDA0  00                 	db	0
   130  00FDA1                     _keys:
   131                           	opt stack 0
   132  00FDA1  31                 	db	49
   133  00FDA2  32                 	db	50
   134  00FDA3  33                 	db	51
   135  00FDA4  41                 	db	65
   136  00FDA5  34                 	db	52
   137  00FDA6  35                 	db	53
   138  00FDA7  36                 	db	54
   139  00FDA8  42                 	db	66
   140  00FDA9  37                 	db	55
   141  00FDAA  38                 	db	56
   142  00FDAB  39                 	db	57
   143  00FDAC  43                 	db	67
   144  00FDAD  2A                 	db	42
   145  00FDAE  30                 	db	48
   146  00FDAF  23                 	db	35
   147  00FDB0  44                 	db	68
   148  00FDB1  00                 	db	0
   149  00FDB2                     __end_of_keys:
   150                           	opt stack 0
   151  00FDB2                     _dpowers:
   152                           	opt stack 0
   153  00FDB2  0001               	dw	1
   154  00FDB4  000A               	dw	10
   155  00FDB6  0064               	dw	100
   156  00FDB8  03E8               	dw	1000
   157  00FDBA  2710               	dw	10000
   158  00FDBC                     __end_of_dpowers:
   159                           	opt stack 0
   160  00FDBC                     _hexpowers:
   161                           	opt stack 0
   162  00FDBC  0001               	dw	1
   163  00FDBE  0010               	dw	16
   164  00FDC0  0100               	dw	256
   165  00FDC2  1000               	dw	4096
   166  00FDC4                     __end_of_hexpowers:
   167                           	opt stack 0
   168  00FDC4                     _timeset:
   169                           	opt stack 0
   170  00FDC4  50                 	db	80
   171  00FDC5  35                 	db	53
   172  00FDC6  21                 	db	33
   173  00FDC7  08                 	db	8
   174  00FDC8  05                 	db	5
   175  00FDC9  02                 	db	2
   176  00FDCA  17                 	db	23
   177  00FDCB                     __end_of_timeset:
   178                           	opt stack 0
   179  00FDCB                     exp@coeff:
   180                           	opt stack 0
   181  00FDCB  00                 	db	0
   182  00FDCC  80                 	db	128
   183  00FDCD  3F                 	db	63
   184  00FDCE  72                 	db	114
   185  00FDCF  31                 	db	49
   186  00FDD0  3F                 	db	63
   187  00FDD1  FE                 	db	254
   188  00FDD2  75                 	db	117
   189  00FDD3  3E                 	db	62
   190  00FDD4  58                 	db	88
   191  00FDD5  63                 	db	99
   192  00FDD6  3D                 	db	61
   193  00FDD7  95                 	db	149
   194  00FDD8  1D                 	db	29
   195  00FDD9  3C                 	db	60
   196  00FDDA  C5                 	db	197
   197  00FDDB  AE                 	db	174
   198  00FDDC  3A                 	db	58
   199  00FDDD  79                 	db	121
   200  00FDDE  21                 	db	33
   201  00FDDF  39                 	db	57
   202  00FDE0  94                 	db	148
   203  00FDE1  80                 	db	128
   204  00FDE2  37                 	db	55
   205  00FDE3  93                 	db	147
   206  00FDE4  A7                 	db	167
   207  00FDE5  35                 	db	53
   208  00FDE6  56                 	db	86
   209  00FDE7  15                 	db	21
   210  00FDE8  34                 	db	52
   211  00FDE9                     __end_ofexp@coeff:
   212                           	opt stack 0
   213  00FDE9                     log@coeff:
   214                           	opt stack 0
   215  00FDE9  00                 	db	0
   216  00FDEA  00                 	db	0
   217  00FDEB  00                 	db	0
   218  00FDEC  00                 	db	0
   219  00FDED  80                 	db	128
   220  00FDEE  3F                 	db	63
   221  00FDEF  F0                 	db	240
   222  00FDF0  FF                 	db	255
   223  00FDF1  BE                 	db	190
   224  00FDF2  E2                 	db	226
   225  00FDF3  A9                 	db	169
   226  00FDF4  3E                 	db	62
   227  00FDF5  83                 	db	131
   228  00FDF6  76                 	db	118
   229  00FDF7  BE                 	db	190
   230  00FDF8  AE                 	db	174
   231  00FDF9  2B                 	db	43
   232  00FDFA  3E                 	db	62
   233  00FDFB  3C                 	db	60
   234  00FDFC  C3                 	db	195
   235  00FDFD  BD                 	db	189
   236  00FDFE  D2                 	db	210
   237  00FDFF  13                 	db	19
   238  00FE00  3D                 	db	61
   239  00FE01  78                 	db	120
   240  00FE02  D3                 	db	211
   241  00FE03  BB                 	db	187
   242  00FE04                     __end_oflog@coeff:
   243                           	opt stack 0
   244  0000                     _TMR0	set	4054
   245  0000                     _ADCON0	set	4034
   246  0000                     _ADCON1	set	4033
   247  0000                     _INTCONbits	set	4082
   248  0000                     _LATA	set	3977
   249  0000                     _LATAbits	set	3977
   250  0000                     _LATB	set	3978
   251  0000                     _LATC	set	3979
   252  0000                     _LATCbits	set	3979
   253  0000                     _LATD	set	3980
   254  0000                     _LATDbits	set	3980
   255  0000                     _LATE	set	3981
   256  0000                     _PORTAbits	set	3968
   257  0000                     _PORTB	set	3969
   258  0000                     _SSPADD	set	4040
   259  0000                     _SSPBUF	set	4041
   260  0000                     _SSPCON1	set	4038
   261  0000                     _SSPCON2	set	4037
   262  0000                     _SSPSTAT	set	4039
   263  0000                     _TRISA	set	3986
   264  0000                     _TRISB	set	3987
   265  0000                     _TRISC	set	3988
   266  0000                     _TRISD	set	3989
   267  0000                     _TRISE	set	3990
   268  0000                     _ACKDT	set	32301
   269  0000                     _ACKEN	set	32300
   270  0000                     _GIE	set	32663
   271  0000                     _INT0IE	set	32660
   272  0000                     _INT1IE	set	32643
   273  0000                     _INT1IF	set	32640
   274  0000                     _INT2IE	set	32644
   275  0000                     _PEN	set	32298
   276  0000                     _PSA	set	32427
   277  0000                     _RCEN	set	32299
   278  0000                     _RSEN	set	32297
   279  0000                     _SEN	set	32296
   280  0000                     _T08BIT	set	32430
   281  0000                     _T0CS	set	32429
   282  0000                     _T0PS0	set	32424
   283  0000                     _T0PS1	set	32425
   284  0000                     _T0PS2	set	32426
   285  0000                     _TMR0IE	set	32661
   286  0000                     _TMR0IF	set	32658
   287  0000                     _TMR0ON	set	32431
   288  0000                     _TRISC3	set	31907
   289  0000                     _TRISC4	set	31908
   290  0000                     _nRBPU	set	32655
   291  00FE04                     STR_28:
   292  00FE04  52                 	db	82	;'R'
   293  00FE05  25                 	db	37
   294  00FE06  64                 	db	100	;'d'
   295  00FE07  20                 	db	32
   296  00FE08  47                 	db	71	;'G'
   297  00FE09  25                 	db	37
   298  00FE0A  64                 	db	100	;'d'
   299  00FE0B  20                 	db	32
   300  00FE0C  42                 	db	66	;'B'
   301  00FE0D  25                 	db	37
   302  00FE0E  64                 	db	100	;'d'
   303  00FE0F  20                 	db	32
   304  00FE10  20                 	db	32
   305  00FE11  20                 	db	32
   306  00FE12  20                 	db	32
   307  00FE13  20                 	db	32
   308  00FE14  20                 	db	32
   309  00FE15  20                 	db	32
   310  00FE16  20                 	db	32
   311  00FE17  20                 	db	32
   312  00FE18  20                 	db	32
   313  00FE19  20                 	db	32
   314  00FE1A  20                 	db	32
   315  00FE1B  20                 	db	32
   316  00FE1C  20                 	db	32
   317  00FE1D  20                 	db	32
   318  00FE1E  20                 	db	32
   319  00FE1F  00                 	db	0
   320  00FE20                     STR_27:
   321  00FE20  52                 	db	82	;'R'
   322  00FE21  75                 	db	117	;'u'
   323  00FE22  6E                 	db	110	;'n'
   324  00FE23  6E                 	db	110	;'n'
   325  00FE24  69                 	db	105	;'i'
   326  00FE25  6E                 	db	110	;'n'
   327  00FE26  67                 	db	103	;'g'
   328  00FE27  7E                 	db	126
   329  00FE28  7E                 	db	126
   330  00FE29  7E                 	db	126
   331  00FE2A  20                 	db	32
   332  00FE2B  20                 	db	32
   333  00FE2C  20                 	db	32
   334  00FE2D  20                 	db	32
   335  00FE2E  20                 	db	32
   336  00FE2F  20                 	db	32
   337  00FE30  20                 	db	32
   338  00FE31  20                 	db	32
   339  00FE32  20                 	db	32
   340  00FE33  20                 	db	32
   341  00FE34  20                 	db	32
   342  00FE35  20                 	db	32
   343  00FE36  20                 	db	32
   344  00FE37  20                 	db	32
   345  00FE38  00                 	db	0
   346  00FE39                     STR_2:
   347  00FE39  47                 	db	71	;'G'
   348  00FE3A  25                 	db	37
   349  00FE3B  75                 	db	117	;'u'
   350  00FE3C  20                 	db	32
   351  00FE3D  42                 	db	66	;'B'
   352  00FE3E  25                 	db	37
   353  00FE3F  75                 	db	117	;'u'
   354  00FE40  20                 	db	32
   355  00FE41  20                 	db	32
   356  00FE42  20                 	db	32
   357  00FE43  20                 	db	32
   358  00FE44  20                 	db	32
   359  00FE45  20                 	db	32
   360  00FE46  20                 	db	32
   361  00FE47  20                 	db	32
   362  00FE48  20                 	db	32
   363  00FE49  20                 	db	32
   364  00FE4A  20                 	db	32
   365  00FE4B  20                 	db	32
   366  00FE4C  20                 	db	32
   367  00FE4D  20                 	db	32
   368  00FE4E  20                 	db	32
   369  00FE4F  20                 	db	32
   370  00FE50  00                 	db	0
   371  00FE51                     STR_1:
   372  00FE51  43                 	db	67	;'C'
   373  00FE52  25                 	db	37
   374  00FE53  75                 	db	117	;'u'
   375  00FE54  20                 	db	32
   376  00FE55  52                 	db	82	;'R'
   377  00FE56  25                 	db	37
   378  00FE57  75                 	db	117	;'u'
   379  00FE58  20                 	db	32
   380  00FE59  20                 	db	32
   381  00FE5A  20                 	db	32
   382  00FE5B  20                 	db	32
   383  00FE5C  20                 	db	32
   384  00FE5D  20                 	db	32
   385  00FE5E  20                 	db	32
   386  00FE5F  20                 	db	32
   387  00FE60  20                 	db	32
   388  00FE61  20                 	db	32
   389  00FE62  20                 	db	32
   390  00FE63  20                 	db	32
   391  00FE64  20                 	db	32
   392  00FE65  20                 	db	32
   393  00FE66  20                 	db	32
   394  00FE67  20                 	db	32
   395  00FE68  00                 	db	0
   396  00FE69                     STR_26:
   397  00FE69  52                 	db	82	;'R'
   398  00FE6A  75                 	db	117	;'u'
   399  00FE6B  6E                 	db	110	;'n'
   400  00FE6C  6E                 	db	110	;'n'
   401  00FE6D  69                 	db	105	;'i'
   402  00FE6E  6E                 	db	110	;'n'
   403  00FE6F  67                 	db	103	;'g'
   404  00FE70  7E                 	db	126
   405  00FE71  7E                 	db	126
   406  00FE72  20                 	db	32
   407  00FE73  20                 	db	32
   408  00FE74  20                 	db	32
   409  00FE75  20                 	db	32
   410  00FE76  20                 	db	32
   411  00FE77  20                 	db	32
   412  00FE78  20                 	db	32
   413  00FE79  20                 	db	32
   414  00FE7A  20                 	db	32
   415  00FE7B  20                 	db	32
   416  00FE7C  20                 	db	32
   417  00FE7D  20                 	db	32
   418  00FE7E  20                 	db	32
   419  00FE7F  20                 	db	32
   420  00FE80  00                 	db	0
   421  00FE81                     STR_25:
   422  00FE81  52                 	db	82	;'R'
   423  00FE82  75                 	db	117	;'u'
   424  00FE83  6E                 	db	110	;'n'
   425  00FE84  6E                 	db	110	;'n'
   426  00FE85  69                 	db	105	;'i'
   427  00FE86  6E                 	db	110	;'n'
   428  00FE87  67                 	db	103	;'g'
   429  00FE88  7E                 	db	126
   430  00FE89  20                 	db	32
   431  00FE8A  20                 	db	32
   432  00FE8B  20                 	db	32
   433  00FE8C  20                 	db	32
   434  00FE8D  20                 	db	32
   435  00FE8E  20                 	db	32
   436  00FE8F  20                 	db	32
   437  00FE90  20                 	db	32
   438  00FE91  20                 	db	32
   439  00FE92  20                 	db	32
   440  00FE93  20                 	db	32
   441  00FE94  20                 	db	32
   442  00FE95  20                 	db	32
   443  00FE96  20                 	db	32
   444  00FE97  00                 	db	0
   445  00FE98                     STR_23:
   446  00FE98  54                 	db	84	;'T'
   447  00FE99  6F                 	db	111	;'o'
   448  00FE9A  74                 	db	116	;'t'
   449  00FE9B  61                 	db	97	;'a'
   450  00FE9C  6C                 	db	108	;'l'
   451  00FE9D  20                 	db	32
   452  00FE9E  4F                 	db	79	;'O'
   453  00FE9F  70                 	db	112	;'p'
   454  00FEA0  65                 	db	101	;'e'
   455  00FEA1  72                 	db	114	;'r'
   456  00FEA2  61                 	db	97	;'a'
   457  00FEA3  74                 	db	116	;'t'
   458  00FEA4  69                 	db	105	;'i'
   459  00FEA5  6F                 	db	111	;'o'
   460  00FEA6  6E                 	db	110	;'n'
   461  00FEA7  20                 	db	32
   462  00FEA8  20                 	db	32
   463  00FEA9  20                 	db	32
   464  00FEAA  20                 	db	32
   465  00FEAB  20                 	db	32
   466  00FEAC  20                 	db	32
   467  00FEAD  20                 	db	32
   468  00FEAE  00                 	db	0
   469  00FEAF                     STR_10:
   470  00FEAF  44                 	db	68	;'D'
   471  00FEB0  61                 	db	97	;'a'
   472  00FEB1  74                 	db	116	;'t'
   473  00FEB2  65                 	db	101	;'e'
   474  00FEB3  3A                 	db	58	;':'
   475  00FEB4  20                 	db	32
   476  00FEB5  25                 	db	37
   477  00FEB6  30                 	db	48	;'0'
   478  00FEB7  32                 	db	50	;'2'
   479  00FEB8  78                 	db	120	;'x'
   480  00FEB9  2F                 	db	47
   481  00FEBA  25                 	db	37
   482  00FEBB  30                 	db	48	;'0'
   483  00FEBC  32                 	db	50	;'2'
   484  00FEBD  78                 	db	120	;'x'
   485  00FEBE  2F                 	db	47
   486  00FEBF  25                 	db	37
   487  00FEC0  30                 	db	48	;'0'
   488  00FEC1  32                 	db	50	;'2'
   489  00FEC2  78                 	db	120	;'x'
   490  00FEC3  20                 	db	32
   491  00FEC4  20                 	db	32
   492  00FEC5  00                 	db	0
   493  00FEC6                     STR_11:
   494  00FEC6  54                 	db	84	;'T'
   495  00FEC7  69                 	db	105	;'i'
   496  00FEC8  6D                 	db	109	;'m'
   497  00FEC9  65                 	db	101	;'e'
   498  00FECA  3A                 	db	58	;':'
   499  00FECB  20                 	db	32
   500  00FECC  25                 	db	37
   501  00FECD  30                 	db	48	;'0'
   502  00FECE  32                 	db	50	;'2'
   503  00FECF  78                 	db	120	;'x'
   504  00FED0  3A                 	db	58	;':'
   505  00FED1  25                 	db	37
   506  00FED2  30                 	db	48	;'0'
   507  00FED3  32                 	db	50	;'2'
   508  00FED4  78                 	db	120	;'x'
   509  00FED5  3A                 	db	58	;':'
   510  00FED6  25                 	db	37
   511  00FED7  30                 	db	48	;'0'
   512  00FED8  32                 	db	50	;'2'
   513  00FED9  78                 	db	120	;'x'
   514  00FEDA  20                 	db	32
   515  00FEDB  20                 	db	32
   516  00FEDC  00                 	db	0
   517  00FEDD                     STR_24:
   518  00FEDD  54                 	db	84	;'T'
   519  00FEDE  69                 	db	105	;'i'
   520  00FEDF  6D                 	db	109	;'m'
   521  00FEE0  65                 	db	101	;'e'
   522  00FEE1  3A                 	db	58	;':'
   523  00FEE2  20                 	db	32
   524  00FEE3  25                 	db	37
   525  00FEE4  64                 	db	100	;'d'
   526  00FEE5  20                 	db	32
   527  00FEE6  73                 	db	115	;'s'
   528  00FEE7  20                 	db	32
   529  00FEE8  20                 	db	32
   530  00FEE9  20                 	db	32
   531  00FEEA  20                 	db	32
   532  00FEEB  20                 	db	32
   533  00FEEC  20                 	db	32
   534  00FEED  20                 	db	32
   535  00FEEE  00                 	db	0
   536  00FEEF                     STR_14:
   537  00FEEF  59                 	db	89	;'Y'
   538  00FEF0  4F                 	db	79	;'O'
   539  00FEF1  50                 	db	80	;'P'
   540  00FEF2  2B                 	db	43
   541  00FEF3  43                 	db	67	;'C'
   542  00FEF4  41                 	db	65	;'A'
   543  00FEF5  50                 	db	80	;'P'
   544  00FEF6  2B                 	db	43
   545  00FEF7  4C                 	db	76	;'L'
   546  00FEF8  42                 	db	66	;'B'
   547  00FEF9  4C                 	db	76	;'L'
   548  00FEFA  3A                 	db	58	;':'
   549  00FEFB  20                 	db	32
   550  00FEFC  25                 	db	37
   551  00FEFD  64                 	db	100	;'d'
   552  00FEFE  20                 	db	32
   553  00FEFF  20                 	db	32
   554  00FF00  00                 	db	0
   555  00FF01                     STR_16:
   556  00FF01  59                 	db	89	;'Y'
   557  00FF02  4F                 	db	79	;'O'
   558  00FF03  50                 	db	80	;'P'
   559  00FF04  2D                 	db	45
   560  00FF05  43                 	db	67	;'C'
   561  00FF06  41                 	db	65	;'A'
   562  00FF07  50                 	db	80	;'P'
   563  00FF08  2B                 	db	43
   564  00FF09  4C                 	db	76	;'L'
   565  00FF0A  42                 	db	66	;'B'
   566  00FF0B  4C                 	db	76	;'L'
   567  00FF0C  3A                 	db	58	;':'
   568  00FF0D  20                 	db	32
   569  00FF0E  25                 	db	37
   570  00FF0F  64                 	db	100	;'d'
   571  00FF10  20                 	db	32
   572  00FF11  20                 	db	32
   573  00FF12  00                 	db	0
   574  00FF13                     STR_15:
   575  00FF13  59                 	db	89	;'Y'
   576  00FF14  4F                 	db	79	;'O'
   577  00FF15  50                 	db	80	;'P'
   578  00FF16  2B                 	db	43
   579  00FF17  43                 	db	67	;'C'
   580  00FF18  41                 	db	65	;'A'
   581  00FF19  50                 	db	80	;'P'
   582  00FF1A  2D                 	db	45
   583  00FF1B  4C                 	db	76	;'L'
   584  00FF1C  42                 	db	66	;'B'
   585  00FF1D  4C                 	db	76	;'L'
   586  00FF1E  3A                 	db	58	;':'
   587  00FF1F  20                 	db	32
   588  00FF20  25                 	db	37
   589  00FF21  64                 	db	100	;'d'
   590  00FF22  20                 	db	32
   591  00FF23  20                 	db	32
   592  00FF24  00                 	db	0
   593  00FF25                     STR_17:
   594  00FF25  59                 	db	89	;'Y'
   595  00FF26  4F                 	db	79	;'O'
   596  00FF27  50                 	db	80	;'P'
   597  00FF28  2D                 	db	45
   598  00FF29  43                 	db	67	;'C'
   599  00FF2A  41                 	db	65	;'A'
   600  00FF2B  50                 	db	80	;'P'
   601  00FF2C  2D                 	db	45
   602  00FF2D  4C                 	db	76	;'L'
   603  00FF2E  42                 	db	66	;'B'
   604  00FF2F  4C                 	db	76	;'L'
   605  00FF30  3A                 	db	58	;':'
   606  00FF31  20                 	db	32
   607  00FF32  25                 	db	37
   608  00FF33  64                 	db	100	;'d'
   609  00FF34  20                 	db	32
   610  00FF35  20                 	db	32
   611  00FF36  00                 	db	0
   612  00FF37                     STR_18:
   613  00FF37  45                 	db	69	;'E'
   614  00FF38  53                 	db	83	;'S'
   615  00FF39  4B                 	db	75	;'K'
   616  00FF3A  41                 	db	65	;'A'
   617  00FF3B  2B                 	db	43
   618  00FF3C  43                 	db	67	;'C'
   619  00FF3D  41                 	db	65	;'A'
   620  00FF3E  50                 	db	80	;'P'
   621  00FF3F  2B                 	db	43
   622  00FF40  4C                 	db	76	;'L'
   623  00FF41  42                 	db	66	;'B'
   624  00FF42  4C                 	db	76	;'L'
   625  00FF43  3A                 	db	58	;':'
   626  00FF44  20                 	db	32
   627  00FF45  25                 	db	37
   628  00FF46  64                 	db	100	;'d'
   629  00FF47  20                 	db	32
   630  00FF48  00                 	db	0
   631  00FF49                     STR_20:
   632  00FF49  45                 	db	69	;'E'
   633  00FF4A  53                 	db	83	;'S'
   634  00FF4B  4B                 	db	75	;'K'
   635  00FF4C  41                 	db	65	;'A'
   636  00FF4D  2D                 	db	45
   637  00FF4E  43                 	db	67	;'C'
   638  00FF4F  41                 	db	65	;'A'
   639  00FF50  50                 	db	80	;'P'
   640  00FF51  2B                 	db	43
   641  00FF52  4C                 	db	76	;'L'
   642  00FF53  42                 	db	66	;'B'
   643  00FF54  4C                 	db	76	;'L'
   644  00FF55  3A                 	db	58	;':'
   645  00FF56  20                 	db	32
   646  00FF57  25                 	db	37
   647  00FF58  64                 	db	100	;'d'
   648  00FF59  20                 	db	32
   649  00FF5A  00                 	db	0
   650  00FF5B                     STR_19:
   651  00FF5B  45                 	db	69	;'E'
   652  00FF5C  53                 	db	83	;'S'
   653  00FF5D  4B                 	db	75	;'K'
   654  00FF5E  41                 	db	65	;'A'
   655  00FF5F  2B                 	db	43
   656  00FF60  43                 	db	67	;'C'
   657  00FF61  41                 	db	65	;'A'
   658  00FF62  50                 	db	80	;'P'
   659  00FF63  2D                 	db	45
   660  00FF64  4C                 	db	76	;'L'
   661  00FF65  42                 	db	66	;'B'
   662  00FF66  4C                 	db	76	;'L'
   663  00FF67  3A                 	db	58	;':'
   664  00FF68  20                 	db	32
   665  00FF69  25                 	db	37
   666  00FF6A  64                 	db	100	;'d'
   667  00FF6B  20                 	db	32
   668  00FF6C  00                 	db	0
   669  00FF6D                     STR_21:
   670  00FF6D  45                 	db	69	;'E'
   671  00FF6E  53                 	db	83	;'S'
   672  00FF6F  4B                 	db	75	;'K'
   673  00FF70  41                 	db	65	;'A'
   674  00FF71  2D                 	db	45
   675  00FF72  43                 	db	67	;'C'
   676  00FF73  41                 	db	65	;'A'
   677  00FF74  50                 	db	80	;'P'
   678  00FF75  2D                 	db	45
   679  00FF76  4C                 	db	76	;'L'
   680  00FF77  42                 	db	66	;'B'
   681  00FF78  4C                 	db	76	;'L'
   682  00FF79  3A                 	db	58	;':'
   683  00FF7A  20                 	db	32
   684  00FF7B  25                 	db	37
   685  00FF7C  64                 	db	100	;'d'
   686  00FF7D  20                 	db	32
   687  00FF7E  00                 	db	0
   688  00FF7F                     STR_31:
   689  00FF7F  30                 	db	48	;'0'
   690  00FF80  31                 	db	49	;'1'
   691  00FF81  32                 	db	50	;'2'
   692  00FF82  33                 	db	51	;'3'
   693  00FF83  34                 	db	52	;'4'
   694  00FF84  35                 	db	53	;'5'
   695  00FF85  36                 	db	54	;'6'
   696  00FF86  37                 	db	55	;'7'
   697  00FF87  38                 	db	56	;'8'
   698  00FF88  39                 	db	57	;'9'
   699  00FF89  61                 	db	97	;'a'
   700  00FF8A  62                 	db	98	;'b'
   701  00FF8B  63                 	db	99	;'c'
   702  00FF8C  64                 	db	100	;'d'
   703  00FF8D  65                 	db	101	;'e'
   704  00FF8E  66                 	db	102	;'f'
   705  00FF8F  00                 	db	0
   706  00FF90                     STR_13:
   707  00FF90  54                 	db	84	;'T'
   708  00FF91  6F                 	db	111	;'o'
   709  00FF92  74                 	db	116	;'t'
   710  00FF93  61                 	db	97	;'a'
   711  00FF94  6C                 	db	108	;'l'
   712  00FF95  3A                 	db	58	;':'
   713  00FF96  20                 	db	32
   714  00FF97  25                 	db	37
   715  00FF98  64                 	db	100	;'d'
   716  00FF99  20                 	db	32
   717  00FF9A  20                 	db	32
   718  00FF9B  20                 	db	32
   719  00FF9C  20                 	db	32
   720  00FF9D  20                 	db	32
   721  00FF9E  20                 	db	32
   722  00FF9F  20                 	db	32
   723  00FFA0  00                 	db	0
   724  00FFA1                     STR_12:
   725  00FFA1  42                 	db	66	;'B'
   726  00FFA2  6F                 	db	111	;'o'
   727  00FFA3  74                 	db	116	;'t'
   728  00FFA4  74                 	db	116	;'t'
   729  00FFA5  6C                 	db	108	;'l'
   730  00FFA6  65                 	db	101	;'e'
   731  00FFA7  20                 	db	32
   732  00FFA8  43                 	db	67	;'C'
   733  00FFA9  6F                 	db	111	;'o'
   734  00FFAA  75                 	db	117	;'u'
   735  00FFAB  6E                 	db	110	;'n'
   736  00FFAC  74                 	db	116	;'t'
   737  00FFAD  20                 	db	32
   738  00FFAE  20                 	db	32
   739  00FFAF  20                 	db	32
   740  00FFB0  20                 	db	32
   741  00FFB1  00                 	db	0
   742  00FFB2                     STR_29:
   743  00FFB2  4F                 	db	79	;'O'
   744  00FFB3  70                 	db	112	;'p'
   745  00FFB4  65                 	db	101	;'e'
   746  00FFB5  72                 	db	114	;'r'
   747  00FFB6  61                 	db	97	;'a'
   748  00FFB7  74                 	db	116	;'t'
   749  00FFB8  69                 	db	105	;'i'
   750  00FFB9  6F                 	db	111	;'o'
   751  00FFBA  6E                 	db	110	;'n'
   752  00FFBB  20                 	db	32
   753  00FFBC  44                 	db	68	;'D'
   754  00FFBD  6F                 	db	111	;'o'
   755  00FFBE  6E                 	db	110	;'n'
   756  00FFBF  65                 	db	101	;'e'
   757  00FFC0  21                 	db	33
   758  00FFC1  00                 	db	0
   759  00FFC2                     STR_30:
   760  00FFC2  45                 	db	69	;'E'
   761  00FFC3  4D                 	db	77	;'M'
   762  00FFC4  45                 	db	69	;'E'
   763  00FFC5  52                 	db	82	;'R'
   764  00FFC6  47                 	db	71	;'G'
   765  00FFC7  45                 	db	69	;'E'
   766  00FFC8  4E                 	db	78	;'N'
   767  00FFC9  43                 	db	67	;'C'
   768  00FFCA  59                 	db	89	;'Y'
   769  00FFCB  20                 	db	32
   770  00FFCC  53                 	db	83	;'S'
   771  00FFCD  54                 	db	84	;'T'
   772  00FFCE  4F                 	db	79	;'O'
   773  00FFCF  50                 	db	80	;'P'
   774  00FFD0  00                 	db	0
   775  00FFD1                     STR_6:
   776  00FFD1  72                 	db	114	;'r'
   777  00FFD2  65                 	db	101	;'e'
   778  00FFD3  61                 	db	97	;'a'
   779  00FFD4  64                 	db	100	;'d'
   780  00FFD5  69                 	db	105	;'i'
   781  00FFD6  6E                 	db	110	;'n'
   782  00FFD7  67                 	db	103	;'g'
   783  00FFD8  20                 	db	32
   784  00FFD9  20                 	db	32
   785  00FFDA  20                 	db	32
   786  00FFDB  20                 	db	32
   787  00FFDC  20                 	db	32
   788  00FFDD  20                 	db	32
   789  00FFDE  00                 	db	0
   790  00FFDF                     STR_5:
   791  00FFDF  62                 	db	98	;'b'
   792  00FFE0  61                 	db	97	;'a'
   793  00FFE1  64                 	db	100	;'d'
   794  00FFE2  20                 	db	32
   795  00FFE3  69                 	db	105	;'i'
   796  00FFE4  6E                 	db	110	;'n'
   797  00FFE5  74                 	db	116	;'t'
   798  00FFE6  65                 	db	101	;'e'
   799  00FFE7  72                 	db	114	;'r'
   800  00FFE8  72                 	db	114	;'r'
   801  00FFE9  75                 	db	117	;'u'
   802  00FFEA  70                 	db	112	;'p'
   803  00FFEB  74                 	db	116	;'t'
   804  00FFEC  00                 	db	0
   805  00FFED                     STR_22:
   806  00FFED  45                 	db	69	;'E'
   807  00FFEE  52                 	db	82	;'R'
   808  00FFEF  52                 	db	82	;'R'
   809  00FFF0  4F                 	db	79	;'O'
   810  00FFF1  52                 	db	82	;'R'
   811  00FFF2  3A                 	db	58	;':'
   812  00FFF3  20                 	db	32
   813  00FFF4  25                 	db	37
   814  00FFF5  64                 	db	100	;'d'
   815  00FFF6  00                 	db	0
   816  00FFF7                     STR_7:
   817  00FFF7  25                 	db	37
   818  00FFF8  64                 	db	100	;'d'
   819  00FFF9  2C                 	db	44
   820  00FFFA  20                 	db	32
   821  00FFFB  25                 	db	37
   822  00FFFC  64                 	db	100	;'d'
   823  00FFFD  00                 	db	0
   824  0000                     
   825                           ; #config settings
   826  00FFFE  00                 	db	0	; dummy byte at the end
   827  0000                     
   828                           	psect	cinit
   829  00290E                     __pcinit:
   830                           	opt stack 0
   831  00290E                     start_initialization:
   832                           	opt stack 0
   833  00290E                     __initialization:
   834                           	opt stack 0
   835                           
   836                           ; Initialize objects allocated to BANK0 (2 bytes)
   837                           ; load TBLPTR registers with __pidataBANK0
   838  00290E  0E30               	movlw	low __pidataBANK0
   839  002910  6EF6               	movwf	tblptrl,c
   840  002912  0E2C               	movlw	high __pidataBANK0
   841  002914  6EF7               	movwf	tblptrh,c
   842  002916  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   843  002918  6EF8               	movwf	tblptru,c
   844  00291A  0009               	tblrd		*+	;fetch initializer
   845  00291C  CFF5 F0E9          	movff	tablat,__pdataBANK0
   846  002920  0009               	tblrd		*+	;fetch initializer
   847  002922  CFF5 F0EA          	movff	tablat,__pdataBANK0+1
   848                           
   849                           ; Clear objects allocated to BANK1 (22 bytes)
   850  002926  EE01  F000         	lfsr	0,__pbssBANK1
   851  00292A  0E16               	movlw	22
   852  00292C                     clear_0:
   853  00292C  6AEE               	clrf	postinc0,c
   854  00292E  06E8               	decf	wreg,f,c
   855  002930  E1FD               	bnz	clear_0
   856                           
   857                           ; Clear objects allocated to BANK0 (52 bytes)
   858  002932  EE00  F0B5         	lfsr	0,__pbssBANK0
   859  002936  0E34               	movlw	52
   860  002938                     clear_1:
   861  002938  6AEE               	clrf	postinc0,c
   862  00293A  06E8               	decf	wreg,f,c
   863  00293C  E1FD               	bnz	clear_1
   864                           
   865                           ; Clear objects allocated to COMRAM (8 bytes)
   866  00293E  EE00  F076         	lfsr	0,__pbssCOMRAM
   867  002942  0E08               	movlw	8
   868  002944                     clear_2:
   869  002944  6AEE               	clrf	postinc0,c
   870  002946  06E8               	decf	wreg,f,c
   871  002948  E1FD               	bnz	clear_2
   872  00294A                     end_of_initialization:
   873                           	opt stack 0
   874  00294A                     __end_of__initialization:
   875                           	opt stack 0
   876  00294A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   877  00294C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   878  00294E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   879  002950  6EF8               	movwf	tblptru,c
   880  002952  0100               	movlb	0
   881  002954  EF81  F00E         	goto	_main	;jump to C main() function
   882                           tblptru	equ	0xFF8
   883                           tblptrh	equ	0xFF7
   884                           tblptrl	equ	0xFF6
   885                           tablat	equ	0xFF5
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           
   889                           	psect	bssCOMRAM
   890  000076                     __pbssCOMRAM:
   891                           	opt stack 0
   892  000076                     _color:
   893                           	opt stack 0
   894  000076                     	ds	8
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           
   902                           	psect	bssBANK0
   903  0000B5                     __pbssBANK0:
   904                           	opt stack 0
   905  0000B5                     _time:
   906                           	opt stack 0
   907  0000B5                     	ds	7
   908  0000BC                     _testint:
   909                           	opt stack 0
   910  0000BC                     	ds	4
   911  0000C0                     _bottlequeue_head:
   912                           	opt stack 0
   913  0000C0                     	ds	2
   914  0000C2                     _bottlequeue_tail:
   915                           	opt stack 0
   916  0000C2                     	ds	2
   917  0000C4                     _end_time:
   918                           	opt stack 0
   919  0000C4                     	ds	2
   920  0000C6                     _errno:
   921                           	opt stack 0
   922  0000C6                     	ds	2
   923  0000C8                     _eska_count:
   924                           	opt stack 0
   925  0000C8                     	ds	2
   926  0000CA                     _eskacap_count:
   927                           	opt stack 0
   928  0000CA                     	ds	2
   929  0000CC                     _eskacaplbl_count:
   930                           	opt stack 0
   931  0000CC                     	ds	2
   932  0000CE                     _eskalbl_count:
   933                           	opt stack 0
   934  0000CE                     	ds	2
   935  0000D0                     _etime:
   936                           	opt stack 0
   937  0000D0                     	ds	2
   938  0000D2                     _nodedata:
   939                           	opt stack 0
   940  0000D2                     	ds	2
   941  0000D4                     _operation_disp:
   942                           	opt stack 0
   943  0000D4                     	ds	2
   944  0000D6                     _operation_time:
   945                           	opt stack 0
   946  0000D6                     	ds	2
   947  0000D8                     _start_time:
   948                           	opt stack 0
   949  0000D8                     	ds	2
   950  0000DA                     _stime:
   951                           	opt stack 0
   952  0000DA                     	ds	2
   953  0000DC                     _testflag:
   954                           	opt stack 0
   955  0000DC                     	ds	2
   956  0000DE                     _total_bottle_count:
   957                           	opt stack 0
   958  0000DE                     	ds	2
   959  0000E0                     _yop_count:
   960                           	opt stack 0
   961  0000E0                     	ds	2
   962  0000E2                     _yopcap_count:
   963                           	opt stack 0
   964  0000E2                     	ds	2
   965  0000E4                     _yopcaplbl_count:
   966                           	opt stack 0
   967  0000E4                     	ds	2
   968  0000E6                     _yoplbl_count:
   969                           	opt stack 0
   970  0000E6                     	ds	2
   971  0000E8                     _curr_state:
   972                           	opt stack 0
   973  0000E8                     	ds	1
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           
   981                           	psect	dataBANK0
   982  0000E9                     __pdataBANK0:
   983                           	opt stack 0
   984  0000E9                     _bottle_count_disp:
   985                           	opt stack 0
   986  0000E9                     	ds	2
   987                           tblptru	equ	0xFF8
   988                           tblptrh	equ	0xFF7
   989                           tblptrl	equ	0xFF6
   990                           tablat	equ	0xFF5
   991                           postinc0	equ	0xFEE
   992                           wreg	equ	0xFE8
   993                           
   994                           	psect	bssBANK1
   995  000100                     __pbssBANK1:
   996                           	opt stack 0
   997  000100                     _bottlequeue:
   998                           	opt stack 0
   999  000100                     	ds	22
  1000                           tblptru	equ	0xFF8
  1001                           tblptrh	equ	0xFF7
  1002                           tblptrl	equ	0xFF6
  1003                           tablat	equ	0xFF5
  1004                           postinc0	equ	0xFEE
  1005                           wreg	equ	0xFE8
  1006                           
  1007                           	psect	cstackBANK0
  1008  000080                     __pcstackBANK0:
  1009                           	opt stack 0
  1010  000080                     ??_isr:
  1011                           
  1012                           ; 1 bytes @ 0x0
  1013  000080                     	ds	16
  1014  000090                     ??_isdigit:
  1015  000090                     ??_I2C_Master_Wait:
  1016  000090                     ?___wmul:
  1017                           	opt stack 0
  1018  000090                     ?___awmod:
  1019                           	opt stack 0
  1020  000090                     ?___lwdiv:
  1021                           	opt stack 0
  1022  000090                     ?___lldiv:
  1023                           	opt stack 0
  1024  000090                     lcdNibble@temp:
  1025                           	opt stack 0
  1026  000090                     ___wmul@multiplier:
  1027                           	opt stack 0
  1028  000090                     ___awmod@dividend:
  1029                           	opt stack 0
  1030  000090                     ___lwdiv@dividend:
  1031                           	opt stack 0
  1032  000090                     ___lldiv@dividend:
  1033                           	opt stack 0
  1034                           
  1035                           ; 4 bytes @ 0x10
  1036  000090                     	ds	1
  1037  000091                     I2C_Master_Read@a:
  1038                           	opt stack 0
  1039  000091                     lcdNibble@data:
  1040                           	opt stack 0
  1041  000091                     _isdigit$818:
  1042                           	opt stack 0
  1043  000091                     I2C_Master_Write@d:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x11
  1047  000091                     	ds	1
  1048  000092                     I2C_Master_Read@temp:
  1049                           	opt stack 0
  1050  000092                     lcdInst@data:
  1051                           	opt stack 0
  1052  000092                     putch@data:
  1053                           	opt stack 0
  1054  000092                     isdigit@c:
  1055                           	opt stack 0
  1056  000092                     ___wmul@multiplicand:
  1057                           	opt stack 0
  1058  000092                     ___awmod@divisor:
  1059                           	opt stack 0
  1060  000092                     ___lwdiv@divisor:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x12
  1064  000092                     	ds	1
  1065  000093                     ??_read_colorsensor:
  1066  000093                     ??_I2C_ColorSens_Init:
  1067  000093                     ??_initLCD:
  1068                           
  1069                           ; 1 bytes @ 0x13
  1070  000093                     	ds	1
  1071  000094                     ___awmod@counter:
  1072                           	opt stack 0
  1073  000094                     ___wmul@product:
  1074                           	opt stack 0
  1075  000094                     ___lwdiv@quotient:
  1076                           	opt stack 0
  1077  000094                     ___lldiv@divisor:
  1078                           	opt stack 0
  1079                           
  1080                           ; 4 bytes @ 0x14
  1081  000094                     	ds	1
  1082  000095                     ___awmod@sign:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x15
  1086  000095                     	ds	1
  1087  000096                     ___lwdiv@counter:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x16
  1091  000096                     	ds	1
  1092  000097                     ?___lwmod:
  1093                           	opt stack 0
  1094  000097                     ___lwmod@dividend:
  1095                           	opt stack 0
  1096  000097                     read_colorsensor@color_low:
  1097                           	opt stack 0
  1098                           
  1099                           ; 4 bytes @ 0x17
  1100  000097                     	ds	1
  1101  000098                     ___lldiv@quotient:
  1102                           	opt stack 0
  1103                           
  1104                           ; 4 bytes @ 0x18
  1105  000098                     	ds	1
  1106  000099                     ___lwmod@divisor:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x19
  1110  000099                     	ds	2
  1111  00009B                     ___lwmod@counter:
  1112                           	opt stack 0
  1113  00009B                     read_colorsensor@color_high:
  1114                           	opt stack 0
  1115                           
  1116                           ; 4 bytes @ 0x1B
  1117  00009B                     	ds	1
  1118  00009C                     ?_printf:
  1119                           	opt stack 0
  1120  00009C                     ___lldiv@counter:
  1121                           	opt stack 0
  1122  00009C                     printf@f:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x1C
  1126  00009C                     	ds	1
  1127  00009D                     I2C_Master_Init@c:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x1D
  1131  00009D                     	ds	2
  1132  00009F                     read_colorsensor@i:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x1F
  1136  00009F                     	ds	2
  1137  0000A1                     ??_I2C_Master_Init:
  1138                           
  1139                           ; 1 bytes @ 0x21
  1140  0000A1                     	ds	3
  1141  0000A4                     ??_printf:
  1142                           
  1143                           ; 1 bytes @ 0x24
  1144  0000A4                     	ds	4
  1145  0000A8                     printf@idx:
  1146                           	opt stack 0
  1147                           
  1148                           ; 1 bytes @ 0x28
  1149  0000A8                     	ds	1
  1150  0000A9                     printf@ap:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x29
  1154  0000A9                     	ds	2
  1155  0000AB                     printf@prec:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x2B
  1159  0000AB                     	ds	1
  1160  0000AC                     printf@val:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x2C
  1164  0000AC                     	ds	2
  1165  0000AE                     printf@flag:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x2E
  1169  0000AE                     	ds	1
  1170  0000AF                     printf@width:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x2F
  1174  0000AF                     	ds	2
  1175  0000B1                     printf@c:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x31
  1179  0000B1                     	ds	1
  1180  0000B2                     ??_operation:
  1181  0000B2                     date_time@i:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0x32
  1185  0000B2                     	ds	2
  1186  0000B4                     ??_main:
  1187                           
  1188                           ; 1 bytes @ 0x34
  1189  0000B4                     	ds	1
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           postinc0	equ	0xFEE
  1195                           wreg	equ	0xFE8
  1196                           
  1197                           	psect	cstackCOMRAM
  1198  000001                     __pcstackCOMRAM:
  1199                           	opt stack 0
  1200  000001                     ??i2_I2C_Master_Wait:
  1201  000001                     ??i2_isdigit:
  1202  000001                     ?___awdiv:
  1203                           	opt stack 0
  1204  000001                     ?i2___wmul:
  1205                           	opt stack 0
  1206  000001                     ?i2___lwdiv:
  1207                           	opt stack 0
  1208  000001                     ?___ftpack:
  1209                           	opt stack 0
  1210  000001                     ?_frexp:
  1211                           	opt stack 0
  1212  000001                     ?___ftneg:
  1213                           	opt stack 0
  1214  000001                     i2lcdNibble@temp:
  1215                           	opt stack 0
  1216  000001                     servo_rotate0@degree:
  1217                           	opt stack 0
  1218  000001                     ___awdiv@dividend:
  1219                           	opt stack 0
  1220  000001                     i2___wmul@multiplier:
  1221                           	opt stack 0
  1222  000001                     i2___lwdiv@dividend:
  1223                           	opt stack 0
  1224  000001                     ___ftpack@arg:
  1225                           	opt stack 0
  1226  000001                     ___ftge@ff1:
  1227                           	opt stack 0
  1228  000001                     ___ftneg@f1:
  1229                           	opt stack 0
  1230  000001                     frexp@value:
  1231                           	opt stack 0
  1232                           
  1233                           ; 3 bytes @ 0x0
  1234  000001                     	ds	1
  1235  000002                     i2I2C_Master_Read@a:
  1236                           	opt stack 0
  1237  000002                     i2lcdNibble@data:
  1238                           	opt stack 0
  1239  000002                     i2_isdigit$818:
  1240                           	opt stack 0
  1241  000002                     i2I2C_Master_Write@d:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x1
  1245  000002                     	ds	1
  1246  000003                     ??_servo_rotate0:
  1247  000003                     i2I2C_Master_Read@temp:
  1248                           	opt stack 0
  1249  000003                     i2lcdInst@data:
  1250                           	opt stack 0
  1251  000003                     i2putch@data:
  1252                           	opt stack 0
  1253  000003                     i2isdigit@c:
  1254                           	opt stack 0
  1255  000003                     ___awdiv@divisor:
  1256                           	opt stack 0
  1257  000003                     i2___wmul@multiplicand:
  1258                           	opt stack 0
  1259  000003                     i2___lwdiv@divisor:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x2
  1263  000003                     	ds	1
  1264  000004                     ??i2_I2C_ColorSens_Init:
  1265  000004                     ??i2_read_colorsensor:
  1266  000004                     read_time@i:
  1267                           	opt stack 0
  1268  000004                     ___ftpack@exp:
  1269                           	opt stack 0
  1270  000004                     frexp@eptr:
  1271                           	opt stack 0
  1272  000004                     ___ftge@ff2:
  1273                           	opt stack 0
  1274                           
  1275                           ; 3 bytes @ 0x3
  1276  000004                     	ds	1
  1277  000005                     ___awdiv@counter:
  1278                           	opt stack 0
  1279  000005                     ___ftpack@sign:
  1280                           	opt stack 0
  1281  000005                     servo_rotate0@duty:
  1282                           	opt stack 0
  1283  000005                     i2___wmul@product:
  1284                           	opt stack 0
  1285  000005                     i2___lwdiv@quotient:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x4
  1289  000005                     	ds	1
  1290  000006                     ??___ftpack:
  1291  000006                     ??_frexp:
  1292  000006                     ___awdiv@sign:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x5
  1296  000006                     	ds	1
  1297  000007                     ??___ftge:
  1298  000007                     i2___lwdiv@counter:
  1299                           	opt stack 0
  1300  000007                     servo_rotate0@i:
  1301                           	opt stack 0
  1302  000007                     ___awdiv@quotient:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x6
  1306  000007                     	ds	1
  1307  000008                     ?i2___lwmod:
  1308                           	opt stack 0
  1309  000008                     i2___lwmod@dividend:
  1310                           	opt stack 0
  1311  000008                     i2read_colorsensor@color_low:
  1312                           	opt stack 0
  1313                           
  1314                           ; 4 bytes @ 0x7
  1315  000008                     	ds	1
  1316  000009                     ?___ftdiv:
  1317                           	opt stack 0
  1318  000009                     ?___awtoft:
  1319                           	opt stack 0
  1320  000009                     ?___lltoft:
  1321                           	opt stack 0
  1322  000009                     servo_rotate0@j:
  1323                           	opt stack 0
  1324  000009                     ___awtoft@c:
  1325                           	opt stack 0
  1326  000009                     ___ftdiv@f1:
  1327                           	opt stack 0
  1328  000009                     ___lltoft@c:
  1329                           	opt stack 0
  1330                           
  1331                           ; 4 bytes @ 0x8
  1332  000009                     	ds	1
  1333  00000A                     i2___lwmod@divisor:
  1334                           	opt stack 0
  1335                           
  1336                           ; 2 bytes @ 0x9
  1337  00000A                     	ds	2
  1338  00000C                     ___awtoft@sign:
  1339                           	opt stack 0
  1340  00000C                     i2___lwmod@counter:
  1341                           	opt stack 0
  1342  00000C                     ___ftdiv@f2:
  1343                           	opt stack 0
  1344  00000C                     i2read_colorsensor@color_high:
  1345                           	opt stack 0
  1346                           
  1347                           ; 4 bytes @ 0xB
  1348  00000C                     	ds	1
  1349  00000D                     ??___lltoft:
  1350  00000D                     ?i2_printf:
  1351                           	opt stack 0
  1352  00000D                     ?___ftmul:
  1353                           	opt stack 0
  1354  00000D                     i2printf@f:
  1355                           	opt stack 0
  1356  00000D                     ___ftmul@f1:
  1357                           	opt stack 0
  1358                           
  1359                           ; 3 bytes @ 0xC
  1360  00000D                     	ds	2
  1361  00000F                     ??___ftdiv:
  1362                           
  1363                           ; 1 bytes @ 0xE
  1364  00000F                     	ds	1
  1365  000010                     i2read_colorsensor@i:
  1366                           	opt stack 0
  1367  000010                     ___ftmul@f2:
  1368                           	opt stack 0
  1369                           
  1370                           ; 3 bytes @ 0xF
  1371  000010                     	ds	1
  1372  000011                     ___lltoft@exp:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x10
  1376  000011                     	ds	1
  1377  000012                     ___ftdiv@cntr:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x11
  1381  000012                     	ds	1
  1382  000013                     ??___ftmul:
  1383  000013                     ??i2_printf:
  1384  000013                     ___ftdiv@f3:
  1385                           	opt stack 0
  1386                           
  1387                           ; 3 bytes @ 0x12
  1388  000013                     	ds	3
  1389  000016                     ___ftdiv@exp:
  1390                           	opt stack 0
  1391  000016                     ___ftmul@exp:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x15
  1395  000016                     	ds	1
  1396  000017                     ___ftdiv@sign:
  1397                           	opt stack 0
  1398  000017                     i2printf@idx:
  1399                           	opt stack 0
  1400  000017                     ___ftmul@f3_as_product:
  1401                           	opt stack 0
  1402                           
  1403                           ; 3 bytes @ 0x16
  1404  000017                     	ds	1
  1405  000018                     i2printf@ap:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x17
  1409  000018                     	ds	2
  1410  00001A                     ___ftmul@cntr:
  1411                           	opt stack 0
  1412  00001A                     i2printf@prec:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x19
  1416  00001A                     	ds	1
  1417  00001B                     ___ftmul@sign:
  1418                           	opt stack 0
  1419  00001B                     i2printf@val:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x1A
  1423  00001B                     	ds	1
  1424  00001C                     ?___ftadd:
  1425                           	opt stack 0
  1426  00001C                     ___ftadd@f1:
  1427                           	opt stack 0
  1428                           
  1429                           ; 3 bytes @ 0x1B
  1430  00001C                     	ds	1
  1431  00001D                     i2printf@flag:
  1432                           	opt stack 0
  1433                           
  1434                           ; 1 bytes @ 0x1C
  1435  00001D                     	ds	1
  1436  00001E                     i2printf@width:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x1D
  1440  00001E                     	ds	1
  1441  00001F                     ___ftadd@f2:
  1442                           	opt stack 0
  1443                           
  1444                           ; 3 bytes @ 0x1E
  1445  00001F                     	ds	1
  1446  000020                     i2printf@c:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x1F
  1450  000020                     	ds	2
  1451  000022                     ??___ftadd:
  1452                           
  1453                           ; 1 bytes @ 0x21
  1454  000022                     	ds	3
  1455  000025                     ___ftadd@sign:
  1456                           	opt stack 0
  1457                           
  1458                           ; 1 bytes @ 0x24
  1459  000025                     	ds	1
  1460  000026                     ___ftadd@exp2:
  1461                           	opt stack 0
  1462                           
  1463                           ; 1 bytes @ 0x25
  1464  000026                     	ds	1
  1465  000027                     ___ftadd@exp1:
  1466                           	opt stack 0
  1467                           
  1468                           ; 1 bytes @ 0x26
  1469  000027                     	ds	1
  1470  000028                     ?___ftsub:
  1471                           	opt stack 0
  1472  000028                     ?_eval_poly:
  1473                           	opt stack 0
  1474  000028                     ?___fttol:
  1475                           	opt stack 0
  1476  000028                     ___ftsub@f1:
  1477                           	opt stack 0
  1478  000028                     ___fttol@f1:
  1479                           	opt stack 0
  1480  000028                     eval_poly@x:
  1481                           	opt stack 0
  1482                           
  1483                           ; 3 bytes @ 0x27
  1484  000028                     	ds	3
  1485  00002B                     eval_poly@d:
  1486                           	opt stack 0
  1487  00002B                     ___ftsub@f2:
  1488                           	opt stack 0
  1489                           
  1490                           ; 3 bytes @ 0x2A
  1491  00002B                     	ds	1
  1492  00002C                     ??___fttol:
  1493                           
  1494                           ; 1 bytes @ 0x2B
  1495  00002C                     	ds	1
  1496  00002D                     eval_poly@n:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x2C
  1500  00002D                     	ds	1
  1501  00002E                     
  1502                           ; 1 bytes @ 0x2D
  1503  00002E                     	ds	1
  1504  00002F                     ??_eval_poly:
  1505                           
  1506                           ; 1 bytes @ 0x2E
  1507  00002F                     	ds	2
  1508  000031                     ___fttol@sign1:
  1509                           	opt stack 0
  1510  000031                     eval_poly@res:
  1511                           	opt stack 0
  1512                           
  1513                           ; 3 bytes @ 0x30
  1514  000031                     	ds	1
  1515  000032                     ___fttol@lval:
  1516                           	opt stack 0
  1517                           
  1518                           ; 4 bytes @ 0x31
  1519  000032                     	ds	2
  1520  000034                     ?_log:
  1521                           	opt stack 0
  1522  000034                     ?_ldexp:
  1523                           	opt stack 0
  1524  000034                     ldexp@value:
  1525                           	opt stack 0
  1526  000034                     log@x:
  1527                           	opt stack 0
  1528                           
  1529                           ; 3 bytes @ 0x33
  1530  000034                     	ds	2
  1531  000036                     ___fttol@exp1:
  1532                           	opt stack 0
  1533                           
  1534                           ; 1 bytes @ 0x35
  1535  000036                     	ds	1
  1536  000037                     ?___altoft:
  1537                           	opt stack 0
  1538  000037                     ldexp@newexp:
  1539                           	opt stack 0
  1540  000037                     log@exponent:
  1541                           	opt stack 0
  1542  000037                     ___altoft@c:
  1543                           	opt stack 0
  1544                           
  1545                           ; 4 bytes @ 0x36
  1546  000037                     	ds	2
  1547  000039                     ??_ldexp:
  1548                           
  1549                           ; 1 bytes @ 0x38
  1550  000039                     	ds	2
  1551  00003B                     ??___altoft:
  1552                           
  1553                           ; 1 bytes @ 0x3A
  1554  00003B                     	ds	4
  1555  00003F                     ___altoft@exp:
  1556                           	opt stack 0
  1557                           
  1558                           ; 1 bytes @ 0x3E
  1559  00003F                     	ds	1
  1560  000040                     ___altoft@sign:
  1561                           	opt stack 0
  1562                           
  1563                           ; 1 bytes @ 0x3F
  1564  000040                     	ds	1
  1565  000041                     ?_floor:
  1566                           	opt stack 0
  1567  000041                     floor@x:
  1568                           	opt stack 0
  1569                           
  1570                           ; 3 bytes @ 0x40
  1571  000041                     	ds	3
  1572  000044                     floor@i:
  1573                           	opt stack 0
  1574                           
  1575                           ; 3 bytes @ 0x43
  1576  000044                     	ds	3
  1577  000047                     floor@expon:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x46
  1581  000047                     	ds	2
  1582  000049                     ?_exp:
  1583                           	opt stack 0
  1584  000049                     exp@x:
  1585                           	opt stack 0
  1586                           
  1587                           ; 3 bytes @ 0x48
  1588  000049                     	ds	3
  1589  00004C                     _exp$1267:
  1590                           	opt stack 0
  1591                           
  1592                           ; 3 bytes @ 0x4B
  1593  00004C                     	ds	3
  1594  00004F                     exp@exponent:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x4E
  1598  00004F                     	ds	2
  1599  000051                     exp@sign:
  1600                           	opt stack 0
  1601                           
  1602                           ; 1 bytes @ 0x50
  1603  000051                     	ds	1
  1604  000052                     ?_pow:
  1605                           	opt stack 0
  1606  000052                     pow@x:
  1607                           	opt stack 0
  1608                           
  1609                           ; 3 bytes @ 0x51
  1610  000052                     	ds	3
  1611  000055                     pow@y:
  1612                           	opt stack 0
  1613                           
  1614                           ; 3 bytes @ 0x54
  1615  000055                     	ds	3
  1616  000058                     _pow$1265:
  1617                           	opt stack 0
  1618                           
  1619                           ; 3 bytes @ 0x57
  1620  000058                     	ds	3
  1621  00005B                     _pow$1266:
  1622                           	opt stack 0
  1623                           
  1624                           ; 3 bytes @ 0x5A
  1625  00005B                     	ds	3
  1626  00005E                     pow@sign:
  1627                           	opt stack 0
  1628                           
  1629                           ; 1 bytes @ 0x5D
  1630  00005E                     	ds	1
  1631  00005F                     pow@yi:
  1632                           	opt stack 0
  1633                           
  1634                           ; 4 bytes @ 0x5E
  1635  00005F                     	ds	4
  1636  000063                     ?_dec_to_hex:
  1637                           	opt stack 0
  1638  000063                     dec_to_hex@num:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x62
  1642  000063                     	ds	2
  1643  000065                     _dec_to_hex$1263:
  1644                           	opt stack 0
  1645                           
  1646                           ; 3 bytes @ 0x64
  1647  000065                     	ds	3
  1648  000068                     _dec_to_hex$1264:
  1649                           	opt stack 0
  1650                           
  1651                           ; 3 bytes @ 0x67
  1652  000068                     	ds	3
  1653  00006B                     dec_to_hex@temp:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x6A
  1657  00006B                     	ds	2
  1658  00006D                     dec_to_hex@i:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x6C
  1662  00006D                     	ds	2
  1663  00006F                     dec_to_hex@hexnum:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x6E
  1667  00006F                     	ds	2
  1668  000071                     dec_to_hex@quotient:
  1669                           	opt stack 0
  1670                           
  1671                           ; 2 bytes @ 0x70
  1672  000071                     	ds	2
  1673  000073                     isr@i:
  1674                           	opt stack 0
  1675                           
  1676                           ; 1 bytes @ 0x72
  1677  000073                     	ds	1
  1678  000074                     _isr$1362:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x73
  1682  000074                     	ds	2
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           
  1690 ;;
  1691 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1692 ;;
  1693 ;; *************** function _main *****************
  1694 ;; Defined at:
  1695 ;;		line 90 in file "main.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;Total ram usage:        1 bytes
  1714 ;; Hardware stack levels required when called:   11
  1715 ;; This function calls:
  1716 ;;		_I2C_ColorSens_Init
  1717 ;;		_I2C_Master_Init
  1718 ;;		_bottle_count
  1719 ;;		_bottle_time
  1720 ;;		_date_time
  1721 ;;		_emergencystop
  1722 ;;		_initLCD
  1723 ;;		_operation
  1724 ;;		_operationend
  1725 ;;		_standby
  1726 ;; This function is called by:
  1727 ;;		Startup code after reset
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text0
  1732  001D02                     __ptext0:
  1733                           	opt stack 0
  1734  001D02                     _main:
  1735                           	opt stack 20
  1736                           
  1737                           ;main.c: 97: TRISA = 0b11111011;
  1738                           
  1739                           ;incstack = 0
  1740  001D02  0EFB               	movlw	251
  1741  001D04  6E92               	movwf	3986,c	;volatile
  1742                           
  1743                           ;main.c: 98: TRISB = 0xFF;
  1744  001D06  6893               	setf	3987,c	;volatile
  1745                           
  1746                           ;main.c: 99: TRISC = 0x00;
  1747  001D08  0E00               	movlw	0
  1748  001D0A  6E94               	movwf	3988,c	;volatile
  1749                           
  1750                           ;main.c: 100: TRISD = 0x00;
  1751  001D0C  0E00               	movlw	0
  1752  001D0E  6E95               	movwf	3989,c	;volatile
  1753                           
  1754                           ;main.c: 101: TRISE = 0x00;
  1755  001D10  0E00               	movlw	0
  1756  001D12  6E96               	movwf	3990,c	;volatile
  1757                           
  1758                           ;main.c: 103: LATA = 0x00;
  1759  001D14  0E00               	movlw	0
  1760  001D16  6E89               	movwf	3977,c	;volatile
  1761                           
  1762                           ;main.c: 104: LATB = 0x00;
  1763  001D18  0E00               	movlw	0
  1764  001D1A  6E8A               	movwf	3978,c	;volatile
  1765                           
  1766                           ;main.c: 105: LATC = 0x00;
  1767  001D1C  0E00               	movlw	0
  1768  001D1E  6E8B               	movwf	3979,c	;volatile
  1769                           
  1770                           ;main.c: 106: LATD = 0x00;
  1771  001D20  0E00               	movlw	0
  1772  001D22  6E8C               	movwf	3980,c	;volatile
  1773                           
  1774                           ;main.c: 107: LATE = 0x00;
  1775  001D24  0E00               	movlw	0
  1776  001D26  6E8D               	movwf	3981,c	;volatile
  1777                           
  1778                           ;main.c: 109: ADCON0 = 0x00;
  1779  001D28  0E00               	movlw	0
  1780  001D2A  6EC2               	movwf	4034,c	;volatile
  1781                           
  1782                           ;main.c: 110: ADCON1 = 0xFF;
  1783  001D2C  68C1               	setf	4033,c	;volatile
  1784                           
  1785                           ;main.c: 113: GIE = 1;
  1786  001D2E  8EF2               	bsf	intcon,7,c	;volatile
  1787                           
  1788                           ;main.c: 114: INT1IE = 1;
  1789  001D30  86F0               	bsf	intcon3,3,c	;volatile
  1790                           
  1791                           ;main.c: 115: INT0IE = 0;
  1792  001D32  98F2               	bcf	intcon,4,c	;volatile
  1793                           
  1794                           ;main.c: 117: INT2IE = 0;
  1795  001D34  98F0               	bcf	intcon3,4,c	;volatile
  1796                           
  1797                           ;main.c: 119: nRBPU = 0;
  1798  001D36  9EF1               	bcf	intcon2,7,c	;volatile
  1799                           
  1800                           ;main.c: 121: initLCD();
  1801  001D38  EC38  F014         	call	_initLCD	;wreg free
  1802                           
  1803                           ;main.c: 122: I2C_Master_Init(10000);
  1804  001D3C  0E10               	movlw	16
  1805  001D3E  0100               	movlb	0	; () banked
  1806  001D40  6F9D               	movwf	I2C_Master_Init@c& (0+255),b
  1807  001D42  0E27               	movlw	39
  1808  001D44  6F9E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1809  001D46  0E00               	movlw	0
  1810  001D48  6F9F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1811  001D4A  0E00               	movlw	0
  1812  001D4C  6FA0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1813  001D4E  ECB1  F013         	call	_I2C_Master_Init	;wreg free
  1814                           
  1815                           ;main.c: 123: I2C_ColorSens_Init();
  1816  001D52  ECCD  F008         	call	_I2C_ColorSens_Init	;wreg free
  1817                           
  1818                           ;main.c: 126: TMR0 = 0;
  1819  001D56  0E00               	movlw	0
  1820  001D58  6ED7               	movwf	4055,c	;volatile
  1821  001D5A  0E00               	movlw	0
  1822  001D5C  6ED6               	movwf	4054,c	;volatile
  1823                           
  1824                           ;main.c: 127: T08BIT = 0;
  1825  001D5E  9CD5               	bcf	4053,6,c	;volatile
  1826                           
  1827                           ;main.c: 128: T0CS = 0;
  1828  001D60  9AD5               	bcf	4053,5,c	;volatile
  1829                           
  1830                           ;main.c: 129: PSA = 0;
  1831  001D62  96D5               	bcf	4053,3,c	;volatile
  1832                           
  1833                           ;main.c: 130: T0PS2 = 1;
  1834  001D64  84D5               	bsf	4053,2,c	;volatile
  1835                           
  1836                           ;main.c: 131: T0PS1 = 1;
  1837  001D66  82D5               	bsf	4053,1,c	;volatile
  1838                           
  1839                           ;main.c: 132: T0PS0 = 1;
  1840  001D68  80D5               	bsf	4053,0,c	;volatile
  1841                           
  1842                           ;main.c: 136: curr_state = STANDBY;
  1843  001D6A  0E00               	movlw	0
  1844  001D6C  0100               	movlb	0	; () banked
  1845  001D6E  6FE8               	movwf	_curr_state& (0+255),b
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;main.c: 139: switch(curr_state){
  1849                           
  1850                           ;main.c: 138: while(1){
  1851  001D70  D015               	goto	l4580
  1852  001D72                     l4564:
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;main.c: 141: standby();
  1856  001D72  ECA2  F00D         	call	_standby	;wreg free
  1857                           
  1858                           ;main.c: 142: break;
  1859  001D76  D029               	goto	l4582
  1860  001D78                     l4566:
  1861                           
  1862                           ;main.c: 144: emergencystop();
  1863  001D78  ECA3  F015         	call	_emergencystop	;wreg free
  1864                           
  1865                           ;main.c: 145: break;
  1866  001D7C  D026               	goto	l4582
  1867  001D7E                     l4568:
  1868                           
  1869                           ;main.c: 147: operation();
  1870  001D7E  EC24  F010         	call	_operation	;wreg free
  1871                           
  1872                           ;main.c: 148: break;
  1873  001D82  D023               	goto	l4582
  1874  001D84                     l4570:
  1875                           
  1876                           ;main.c: 150: operationend();
  1877  001D84  ECC3  F015         	call	_operationend	;wreg free
  1878                           
  1879                           ;main.c: 151: break;
  1880  001D88  D020               	goto	l4582
  1881  001D8A                     l4572:
  1882                           
  1883                           ;main.c: 153: date_time();
  1884  001D8A  ECEF  F00E         	call	_date_time	;wreg free
  1885                           
  1886                           ;main.c: 154: break;
  1887  001D8E  D01D               	goto	l4582
  1888  001D90                     l4574:
  1889                           
  1890                           ;main.c: 156: bottle_count();
  1891  001D90  EC48  F007         	call	_bottle_count	;wreg free
  1892                           
  1893                           ;main.c: 157: break;
  1894  001D94  D01A               	goto	l4582
  1895  001D96                     l4576:
  1896                           
  1897                           ;main.c: 159: bottle_time();
  1898  001D96  EC09  F015         	call	_bottle_time	;wreg free
  1899                           
  1900                           ;main.c: 161: }
  1901                           
  1902                           ;main.c: 160: break;
  1903  001D9A  D017               	goto	l4582
  1904  001D9C                     l4580:
  1905  001D9C  0100               	movlb	0	; () banked
  1906  001D9E  51E8               	movf	_curr_state& (0+255),w,b
  1907                           
  1908                           ; Switch size 1, requested type "space"
  1909                           ; Number of cases is 7, Range of values is 0 to 6
  1910                           ; switch strategies available:
  1911                           ; Name         Instructions Cycles
  1912                           ; simple_byte           22    12 (average)
  1913                           ;	Chosen strategy is simple_byte
  1914  001DA0  0A00               	xorlw	0	; case 0
  1915  001DA2  B4D8               	btfsc	status,2,c
  1916  001DA4  D7E6               	goto	l4564
  1917  001DA6  0A01               	xorlw	1	; case 1
  1918  001DA8  B4D8               	btfsc	status,2,c
  1919  001DAA  D7E6               	goto	l4566
  1920  001DAC  0A03               	xorlw	3	; case 2
  1921  001DAE  B4D8               	btfsc	status,2,c
  1922  001DB0  D7E6               	goto	l4568
  1923  001DB2  0A01               	xorlw	1	; case 3
  1924  001DB4  B4D8               	btfsc	status,2,c
  1925  001DB6  D7E6               	goto	l4570
  1926  001DB8  0A07               	xorlw	7	; case 4
  1927  001DBA  B4D8               	btfsc	status,2,c
  1928  001DBC  D7E6               	goto	l4572
  1929  001DBE  0A01               	xorlw	1	; case 5
  1930  001DC0  B4D8               	btfsc	status,2,c
  1931  001DC2  D7E6               	goto	l4574
  1932  001DC4  0A03               	xorlw	3	; case 6
  1933  001DC6  B4D8               	btfsc	status,2,c
  1934  001DC8  D7E6               	goto	l4576
  1935  001DCA                     l4582:
  1936                           
  1937                           ;main.c: 162: _delay((unsigned long)((10)*(10000000/4000.0)));
  1938  001DCA  0E21               	movlw	33
  1939  001DCC  0100               	movlb	0	; () banked
  1940  001DCE  6FB4               	movwf	??_main& (0+255),b
  1941  001DD0  0E76               	movlw	118
  1942  001DD2                     u4147:
  1943  001DD2  2EE8               	decfsz	wreg,f,c
  1944  001DD4  D7FE               	bra	u4147
  1945  001DD6  2FB4               	decfsz	??_main& (0+255),f,b
  1946  001DD8  D7FC               	bra	u4147
  1947  001DDA  F000               	nop	
  1948  001DDC  D7DF               	goto	l4580
  1949  001DDE                     __end_of_main:
  1950                           	opt stack 0
  1951                           tblptru	equ	0xFF8
  1952                           tblptrh	equ	0xFF7
  1953                           tblptrl	equ	0xFF6
  1954                           tablat	equ	0xFF5
  1955                           intcon	equ	0xFF2
  1956                           intcon2	equ	0xFF1
  1957                           intcon3	equ	0xFF0
  1958                           postinc0	equ	0xFEE
  1959                           wreg	equ	0xFE8
  1960                           status	equ	0xFD8
  1961                           
  1962 ;; *************** function _standby *****************
  1963 ;; Defined at:
  1964 ;;		line 376 in file "main.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;		None
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;		None
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;Total ram usage:        0 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:   10
  1985 ;; This function calls:
  1986 ;;		_lcdInst
  1987 ;;		_printf
  1988 ;;		_read_colorsensor
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text1
  1995  001B44                     __ptext1:
  1996                           	opt stack 0
  1997  001B44                     _standby:
  1998                           	opt stack 20
  1999                           
  2000                           ;main.c: 377: read_colorsensor();
  2001                           
  2002                           ;incstack = 0
  2003  001B44  EC21  F00A         	call	_read_colorsensor	;wreg free
  2004                           
  2005                           ;main.c: 378: if(color[0]>20){
  2006  001B48  BE77               	btfsc	_color+1,7,c
  2007  001B4A  D035               	goto	l4098
  2008  001B4C  5077               	movf	_color+1,w,c
  2009  001B4E  E104               	bnz	u3600
  2010  001B50  0E15               	movlw	21
  2011  001B52  5C76               	subwf	_color,w,c
  2012  001B54  A0D8               	btfss	status,0,c
  2013  001B56  D02F               	goto	l4098
  2014  001B58                     u3600:
  2015                           
  2016                           ;main.c: 379: if(!testflag){
  2017  001B58  0100               	movlb	0	; () banked
  2018  001B5A  51DC               	movf	_testflag& (0+255),w,b
  2019  001B5C  0100               	movlb	0	; () banked
  2020  001B5E  11DD               	iorwf	(_testflag+1)& (0+255),w,b
  2021  001B60  A4D8               	btfss	status,2,c
  2022  001B62  D00A               	goto	l4092
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;main.c: 380: testint[0] = color[1];
  2026  001B64  C078  F0BC         	movff	_color+2,_testint
  2027  001B68  C079  F0BD         	movff	_color+3,_testint+1
  2028                           
  2029                           ; BSR set to: 0
  2030                           ;main.c: 381: testflag = 1;
  2031  001B6C  0E00               	movlw	0
  2032  001B6E  0100               	movlb	0	; () banked
  2033  001B70  6FDD               	movwf	(_testflag+1)& (0+255),b
  2034  001B72  0E01               	movlw	1
  2035  001B74  6FDC               	movwf	_testflag& (0+255),b
  2036                           
  2037                           ;main.c: 382: }
  2038  001B76  0012               	return	
  2039  001B78                     l4092:
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;main.c: 383: else{
  2043                           ;main.c: 384: lcdInst(0b10000000);
  2044  001B78  0E80               	movlw	128
  2045  001B7A  ECEA  F015         	call	_lcdInst
  2046                           
  2047                           ;main.c: 385: printf("reading      ");
  2048  001B7E  0ED1               	movlw	low STR_6
  2049  001B80  0100               	movlb	0	; () banked
  2050  001B82  6F9C               	movwf	printf@f& (0+255),b
  2051  001B84  0EFF               	movlw	high STR_6
  2052  001B86  0100               	movlb	0	; () banked
  2053  001B88  6F9D               	movwf	(printf@f+1)& (0+255),b
  2054  001B8A  ECFD  F001         	call	_printf	;wreg free
  2055                           
  2056                           ;main.c: 386: lcdInst(0b11000000);
  2057  001B8E  0EC0               	movlw	192
  2058  001B90  ECEA  F015         	call	_lcdInst
  2059                           
  2060                           ;main.c: 387: printf("%d, %d", color[0], color[1]);
  2061  001B94  0EF7               	movlw	low STR_7
  2062  001B96  0100               	movlb	0	; () banked
  2063  001B98  6F9C               	movwf	printf@f& (0+255),b
  2064  001B9A  0EFF               	movlw	high STR_7
  2065  001B9C  0100               	movlb	0	; () banked
  2066  001B9E  6F9D               	movwf	(printf@f+1)& (0+255),b
  2067  001BA0  C076  F09E         	movff	_color,?_printf+2
  2068  001BA4  C077  F09F         	movff	_color+1,?_printf+3
  2069  001BA8  C078  F0A0         	movff	_color+2,?_printf+4
  2070  001BAC  C079  F0A1         	movff	_color+3,?_printf+5
  2071  001BB0  ECFD  F001         	call	_printf	;wreg free
  2072                           
  2073                           ;main.c: 388: }
  2074                           ;main.c: 389: }
  2075  001BB4  0012               	return	
  2076  001BB6                     l4098:
  2077                           
  2078                           ;main.c: 390: else{
  2079                           ;main.c: 391: if(testflag){
  2080  001BB6  0100               	movlb	0	; () banked
  2081  001BB8  51DC               	movf	_testflag& (0+255),w,b
  2082  001BBA  0100               	movlb	0	; () banked
  2083  001BBC  11DD               	iorwf	(_testflag+1)& (0+255),w,b
  2084  001BBE  B4D8               	btfsc	status,2,c
  2085  001BC0  D00A               	goto	l4104
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;main.c: 392: testint[1] = color[1];
  2089  001BC2  C078  F0BE         	movff	_color+2,_testint+2
  2090  001BC6  C079  F0BF         	movff	_color+3,_testint+3
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;main.c: 393: testflag = 0;
  2094  001BCA  0E00               	movlw	0
  2095  001BCC  0100               	movlb	0	; () banked
  2096  001BCE  6FDD               	movwf	(_testflag+1)& (0+255),b
  2097  001BD0  0E00               	movlw	0
  2098  001BD2  6FDC               	movwf	_testflag& (0+255),b
  2099                           
  2100                           ;main.c: 394: }
  2101  001BD4  0012               	return	
  2102  001BD6                     l4104:
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;main.c: 395: else{
  2106                           ;main.c: 396: lcdInst(0b10000000);
  2107  001BD6  0E80               	movlw	128
  2108  001BD8  ECEA  F015         	call	_lcdInst
  2109                           
  2110                           ;main.c: 397: printf("%d, %d", testint[0], testint[1]);
  2111  001BDC  0EF7               	movlw	low STR_7
  2112  001BDE  0100               	movlb	0	; () banked
  2113  001BE0  6F9C               	movwf	printf@f& (0+255),b
  2114  001BE2  0EFF               	movlw	high STR_7
  2115  001BE4  0100               	movlb	0	; () banked
  2116  001BE6  6F9D               	movwf	(printf@f+1)& (0+255),b
  2117  001BE8  C0BC  F09E         	movff	_testint,?_printf+2
  2118  001BEC  C0BD  F09F         	movff	_testint+1,?_printf+3
  2119  001BF0  C0BE  F0A0         	movff	_testint+2,?_printf+4
  2120  001BF4  C0BF  F0A1         	movff	_testint+3,?_printf+5
  2121  001BF8  ECFD  F001         	call	_printf	;wreg free
  2122                           
  2123                           ;main.c: 398: lcdInst(0b11000000);
  2124  001BFC  0EC0               	movlw	192
  2125  001BFE  ECEA  F015         	call	_lcdInst
  2126                           
  2127                           ;main.c: 399: printf("%d, %d", color[0], color[1]);
  2128  001C02  0EF7               	movlw	low STR_7
  2129  001C04  0100               	movlb	0	; () banked
  2130  001C06  6F9C               	movwf	printf@f& (0+255),b
  2131  001C08  0EFF               	movlw	high STR_7
  2132  001C0A  0100               	movlb	0	; () banked
  2133  001C0C  6F9D               	movwf	(printf@f+1)& (0+255),b
  2134  001C0E  C076  F09E         	movff	_color,?_printf+2
  2135  001C12  C077  F09F         	movff	_color+1,?_printf+3
  2136  001C16  C078  F0A0         	movff	_color+2,?_printf+4
  2137  001C1A  C079  F0A1         	movff	_color+3,?_printf+5
  2138  001C1E  ECFD  F001         	call	_printf	;wreg free
  2139  001C22  0012               	return	
  2140  001C24                     __end_of_standby:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           intcon	equ	0xFF2
  2147                           intcon2	equ	0xFF1
  2148                           intcon3	equ	0xFF0
  2149                           postinc0	equ	0xFEE
  2150                           wreg	equ	0xFE8
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _operationend *****************
  2154 ;; Defined at:
  2155 ;;		line 547 in file "main.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;		None
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;		None
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      void 
  2162 ;; Registers used:
  2163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2173 ;;Total ram usage:        0 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:   10
  2176 ;; This function calls:
  2177 ;;		_lcdInst
  2178 ;;		_printf
  2179 ;; This function is called by:
  2180 ;;		_main
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text2
  2185  002B86                     __ptext2:
  2186                           	opt stack 0
  2187  002B86                     _operationend:
  2188                           	opt stack 20
  2189                           
  2190                           ;main.c: 548: lcdInst(0b10000000);
  2191                           
  2192                           ;incstack = 0
  2193  002B86  0E80               	movlw	128
  2194  002B88  ECEA  F015         	call	_lcdInst
  2195                           
  2196                           ;main.c: 549: printf("Operation Done!");
  2197  002B8C  0EB2               	movlw	low STR_29
  2198  002B8E  0100               	movlb	0	; () banked
  2199  002B90  6F9C               	movwf	printf@f& (0+255),b
  2200  002B92  0EFF               	movlw	high STR_29
  2201  002B94  0100               	movlb	0	; () banked
  2202  002B96  6F9D               	movwf	(printf@f+1)& (0+255),b
  2203  002B98  ECFD  F001         	call	_printf	;wreg free
  2204  002B9C  0012               	return	
  2205  002B9E                     __end_of_operationend:
  2206                           	opt stack 0
  2207                           tblptru	equ	0xFF8
  2208                           tblptrh	equ	0xFF7
  2209                           tblptrl	equ	0xFF6
  2210                           tablat	equ	0xFF5
  2211                           intcon	equ	0xFF2
  2212                           intcon2	equ	0xFF1
  2213                           intcon3	equ	0xFF0
  2214                           postinc0	equ	0xFEE
  2215                           wreg	equ	0xFE8
  2216                           status	equ	0xFD8
  2217                           
  2218 ;; *************** function _operation *****************
  2219 ;; Defined at:
  2220 ;;		line 522 in file "main.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;		None
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;		None
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  1    wreg      void 
  2227 ;; Registers used:
  2228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;Total ram usage:        2 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:   10
  2241 ;; This function calls:
  2242 ;;		_lcdInst
  2243 ;;		_printf
  2244 ;;		_read_colorsensor
  2245 ;; This function is called by:
  2246 ;;		_main
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text3
  2251  002048                     __ptext3:
  2252                           	opt stack 0
  2253  002048                     _operation:
  2254                           	opt stack 20
  2255                           
  2256                           ;main.c: 523: switch(operation_disp){
  2257                           
  2258                           ;incstack = 0
  2259  002048  D031               	goto	l4140
  2260  00204A                     l4120:
  2261                           
  2262                           ;main.c: 525: lcdInst(0b10000000);
  2263  00204A  0E80               	movlw	128
  2264  00204C  ECEA  F015         	call	_lcdInst
  2265                           
  2266                           ;main.c: 526: printf("Running~              ");
  2267  002050  0E81               	movlw	low STR_25
  2268  002052  0100               	movlb	0	; () banked
  2269  002054  6F9C               	movwf	printf@f& (0+255),b
  2270  002056  0EFE               	movlw	high STR_25
  2271  002058  0100               	movlb	0	; () banked
  2272  00205A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2273  00205C  ECFD  F001         	call	_printf	;wreg free
  2274                           
  2275                           ;main.c: 527: operation_disp = 1;
  2276  002060  0E00               	movlw	0
  2277  002062  0100               	movlb	0	; () banked
  2278  002064  6FD5               	movwf	(_operation_disp+1)& (0+255),b
  2279  002066  0E01               	movlw	1
  2280  002068  D01F               	goto	L2
  2281  00206A                     l4126:
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;main.c: 530: lcdInst(0b10000000);
  2285  00206A  0E80               	movlw	128
  2286  00206C  ECEA  F015         	call	_lcdInst
  2287                           
  2288                           ;main.c: 531: printf("Running~~              ");
  2289  002070  0E69               	movlw	low STR_26
  2290  002072  0100               	movlb	0	; () banked
  2291  002074  6F9C               	movwf	printf@f& (0+255),b
  2292  002076  0EFE               	movlw	high STR_26
  2293  002078  0100               	movlb	0	; () banked
  2294  00207A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2295  00207C  ECFD  F001         	call	_printf	;wreg free
  2296                           
  2297                           ;main.c: 532: operation_disp = 2;
  2298  002080  0E00               	movlw	0
  2299  002082  0100               	movlb	0	; () banked
  2300  002084  6FD5               	movwf	(_operation_disp+1)& (0+255),b
  2301  002086  0E02               	movlw	2
  2302  002088  D00F               	goto	L2
  2303  00208A                     l4132:
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;main.c: 535: lcdInst(0b10000000);
  2307  00208A  0E80               	movlw	128
  2308  00208C  ECEA  F015         	call	_lcdInst
  2309                           
  2310                           ;main.c: 536: printf("Running~~~              ");
  2311  002090  0E20               	movlw	low STR_27
  2312  002092  0100               	movlb	0	; () banked
  2313  002094  6F9C               	movwf	printf@f& (0+255),b
  2314  002096  0EFE               	movlw	high STR_27
  2315  002098  0100               	movlb	0	; () banked
  2316  00209A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2317  00209C  ECFD  F001         	call	_printf	;wreg free
  2318                           
  2319                           ;main.c: 537: operation_disp = 0;
  2320  0020A0  0E00               	movlw	0
  2321  0020A2  0100               	movlb	0	; () banked
  2322  0020A4  6FD5               	movwf	(_operation_disp+1)& (0+255),b
  2323  0020A6  0E00               	movlw	0
  2324  0020A8                     L2:
  2325  0020A8  6FD4               	movwf	_operation_disp& (0+255),b
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;main.c: 539: }
  2329                           
  2330                           ;main.c: 538: break;
  2331  0020AA  D014               	goto	l4142
  2332  0020AC                     l4140:
  2333  0020AC  C0D4  F0B2         	movff	_operation_disp,??_operation
  2334  0020B0  C0D5  F0B3         	movff	_operation_disp+1,??_operation+1
  2335                           
  2336                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2337                           ; Switch size 1, requested type "space"
  2338                           ; Number of cases is 1, Range of values is 0 to 0
  2339                           ; switch strategies available:
  2340                           ; Name         Instructions Cycles
  2341                           ; simple_byte            4     3 (average)
  2342                           ;	Chosen strategy is simple_byte
  2343  0020B4  0100               	movlb	0	; () banked
  2344  0020B6  51B3               	movf	(??_operation+1)& (0+255),w,b
  2345  0020B8  0A00               	xorlw	0	; case 0
  2346  0020BA  A4D8               	btfss	status,2,c
  2347  0020BC  D00B               	goto	l4142
  2348                           
  2349                           ; BSR set to: 0
  2350                           ; Switch size 1, requested type "space"
  2351                           ; Number of cases is 3, Range of values is 0 to 2
  2352                           ; switch strategies available:
  2353                           ; Name         Instructions Cycles
  2354                           ; simple_byte           10     6 (average)
  2355                           ;	Chosen strategy is simple_byte
  2356  0020BE  0100               	movlb	0	; () banked
  2357  0020C0  51B2               	movf	??_operation& (0+255),w,b
  2358  0020C2  0A00               	xorlw	0	; case 0
  2359  0020C4  B4D8               	btfsc	status,2,c
  2360  0020C6  D7C1               	goto	l4120
  2361  0020C8  0A01               	xorlw	1	; case 1
  2362  0020CA  B4D8               	btfsc	status,2,c
  2363  0020CC  D7CE               	goto	l4126
  2364  0020CE  0A03               	xorlw	3	; case 2
  2365  0020D0  B4D8               	btfsc	status,2,c
  2366  0020D2  D7DB               	goto	l4132
  2367  0020D4                     l4142:
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;main.c: 541: lcdInst(0b11000000);
  2371  0020D4  0EC0               	movlw	192
  2372  0020D6  ECEA  F015         	call	_lcdInst
  2373                           
  2374                           ;main.c: 542: read_colorsensor();
  2375  0020DA  EC21  F00A         	call	_read_colorsensor	;wreg free
  2376                           
  2377                           ;main.c: 543: printf("R%d G%d B%d                ", color[1], color[2], color[3]);
  2378  0020DE  0E04               	movlw	low STR_28
  2379  0020E0  0100               	movlb	0	; () banked
  2380  0020E2  6F9C               	movwf	printf@f& (0+255),b
  2381  0020E4  0EFE               	movlw	high STR_28
  2382  0020E6  0100               	movlb	0	; () banked
  2383  0020E8  6F9D               	movwf	(printf@f+1)& (0+255),b
  2384  0020EA  C078  F09E         	movff	_color+2,?_printf+2
  2385  0020EE  C079  F09F         	movff	_color+3,?_printf+3
  2386  0020F2  C07A  F0A0         	movff	_color+4,?_printf+4
  2387  0020F6  C07B  F0A1         	movff	_color+5,?_printf+5
  2388  0020FA  C07C  F0A2         	movff	_color+6,?_printf+6
  2389  0020FE  C07D  F0A3         	movff	_color+7,?_printf+7
  2390  002102  ECFD  F001         	call	_printf	;wreg free
  2391  002106  0012               	return	
  2392  002108                     __end_of_operation:
  2393                           	opt stack 0
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           intcon	equ	0xFF2
  2399                           intcon2	equ	0xFF1
  2400                           intcon3	equ	0xFF0
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           status	equ	0xFD8
  2404                           
  2405 ;; *************** function _read_colorsensor *****************
  2406 ;; Defined at:
  2407 ;;		line 602 in file "main.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;		None
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  color_high      4   27[BANK0 ] unsigned char [4]
  2412 ;;  color_low       4   23[BANK0 ] unsigned char [4]
  2413 ;;  i               2   31[BANK0 ] int 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      void 
  2416 ;; Registers used:
  2417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2427 ;;Total ram usage:       14 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    9
  2430 ;; This function calls:
  2431 ;;		_I2C_Master_Read
  2432 ;;		_I2C_Master_Start
  2433 ;;		_I2C_Master_Stop
  2434 ;;		_I2C_Master_Write
  2435 ;; This function is called by:
  2436 ;;		_standby
  2437 ;;		_operation
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text4
  2442  001442                     __ptext4:
  2443                           	opt stack 0
  2444  001442                     _read_colorsensor:
  2445                           	opt stack 20
  2446                           
  2447                           ;main.c: 607: unsigned char color_low[4];
  2448                           ;main.c: 608: unsigned char color_high[4];
  2449                           ;main.c: 609: int i;
  2450                           ;main.c: 612: I2C_Master_Start();
  2451                           
  2452                           ;incstack = 0
  2453  001442  EC0C  F016         	call	_I2C_Master_Start	;wreg free
  2454                           
  2455                           ;main.c: 613: I2C_Master_Write(0b01010010);
  2456  001446  0E00               	movlw	0
  2457  001448  0100               	movlb	0	; () banked
  2458  00144A  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2459  00144C  0E52               	movlw	82
  2460  00144E  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2461  001450  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  2462                           
  2463                           ;main.c: 614: I2C_Master_Write(0b10110100);
  2464  001454  0E00               	movlw	0
  2465  001456  0100               	movlb	0	; () banked
  2466  001458  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2467  00145A  0EB4               	movlw	180
  2468  00145C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2469  00145E  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  2470                           
  2471                           ;main.c: 615: I2C_Master_Start();
  2472  001462  EC0C  F016         	call	_I2C_Master_Start	;wreg free
  2473                           
  2474                           ;main.c: 616: I2C_Master_Write(0b01010011);
  2475  001466  0E00               	movlw	0
  2476  001468  0100               	movlb	0	; () banked
  2477  00146A  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2478  00146C  0E53               	movlw	83
  2479  00146E  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2480  001470  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  2481                           
  2482                           ;main.c: 617: for(i=0; i<3; i++){
  2483  001474  0E00               	movlw	0
  2484  001476  0100               	movlb	0	; () banked
  2485  001478  6FA0               	movwf	(read_colorsensor@i+1)& (0+255),b
  2486  00147A  0E00               	movlw	0
  2487  00147C  6F9F               	movwf	read_colorsensor@i& (0+255),b
  2488  00147E                     l3616:
  2489                           
  2490                           ; BSR set to: 0
  2491  00147E  0100               	movlb	0	; () banked
  2492  001480  BFA0               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2493  001482  D008               	goto	l3620
  2494  001484  0100               	movlb	0	; () banked
  2495  001486  51A0               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2496  001488  E121               	bnz	l3626
  2497  00148A  0E03               	movlw	3
  2498  00148C  0100               	movlb	0	; () banked
  2499  00148E  5D9F               	subwf	read_colorsensor@i& (0+255),w,b
  2500  001490  B0D8               	btfsc	status,0,c
  2501  001492  D01C               	goto	l3626
  2502  001494                     l3620:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;main.c: 618: color_low[i] = I2C_Master_Read(1);
  2506  001494  0E97               	movlw	low read_colorsensor@color_low
  2507  001496  0100               	movlb	0	; () banked
  2508  001498  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2509  00149A  6ED9               	movwf	fsr2l,c
  2510  00149C  0E00               	movlw	high read_colorsensor@color_low
  2511  00149E  0100               	movlb	0	; () banked
  2512  0014A0  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2513  0014A2  6EDA               	movwf	fsr2h,c
  2514  0014A4  0E01               	movlw	1
  2515  0014A6  EC3F  F015         	call	_I2C_Master_Read
  2516  0014AA  6EDF               	movwf	indf2,c
  2517                           
  2518                           ;main.c: 619: color_high[i] = I2C_Master_Read(1);
  2519  0014AC  0E9B               	movlw	low read_colorsensor@color_high
  2520  0014AE  0100               	movlb	0	; () banked
  2521  0014B0  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2522  0014B2  6ED9               	movwf	fsr2l,c
  2523  0014B4  0E00               	movlw	high read_colorsensor@color_high
  2524  0014B6  0100               	movlb	0	; () banked
  2525  0014B8  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2526  0014BA  6EDA               	movwf	fsr2h,c
  2527  0014BC  0E01               	movlw	1
  2528  0014BE  EC3F  F015         	call	_I2C_Master_Read
  2529  0014C2  6EDF               	movwf	indf2,c
  2530  0014C4  0100               	movlb	0	; () banked
  2531  0014C6  4B9F               	infsnz	read_colorsensor@i& (0+255),f,b
  2532  0014C8  2BA0               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2533  0014CA  D7D9               	goto	l3616
  2534  0014CC                     l3626:
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;main.c: 620: }
  2538                           ;main.c: 621: color_low[3] = I2C_Master_Read(1);
  2539  0014CC  0E01               	movlw	1
  2540  0014CE  EC3F  F015         	call	_I2C_Master_Read
  2541  0014D2  0100               	movlb	0	; () banked
  2542  0014D4  6F9A               	movwf	(read_colorsensor@color_low+3)& (0+255),b
  2543                           
  2544                           ;main.c: 622: color_high[3] = I2C_Master_Read(0);
  2545  0014D6  0E00               	movlw	0
  2546  0014D8  EC3F  F015         	call	_I2C_Master_Read
  2547  0014DC  0100               	movlb	0	; () banked
  2548  0014DE  6F9E               	movwf	(read_colorsensor@color_high+3)& (0+255),b
  2549                           
  2550                           ;main.c: 623: I2C_Master_Stop();
  2551  0014E0  EC08  F016         	call	_I2C_Master_Stop	;wreg free
  2552                           
  2553                           ;main.c: 625: for(i=0; i<4; i++){
  2554  0014E4  0E00               	movlw	0
  2555  0014E6  0100               	movlb	0	; () banked
  2556  0014E8  6FA0               	movwf	(read_colorsensor@i+1)& (0+255),b
  2557  0014EA  0E00               	movlw	0
  2558  0014EC  6F9F               	movwf	read_colorsensor@i& (0+255),b
  2559  0014EE                     l3630:
  2560                           
  2561                           ; BSR set to: 0
  2562  0014EE  0100               	movlb	0	; () banked
  2563  0014F0  BFA0               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2564  0014F2  D008               	goto	l3634
  2565  0014F4  0100               	movlb	0	; () banked
  2566  0014F6  51A0               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2567  0014F8  E139               	bnz	l398
  2568  0014FA  0E04               	movlw	4
  2569  0014FC  0100               	movlb	0	; () banked
  2570  0014FE  5D9F               	subwf	read_colorsensor@i& (0+255),w,b
  2571  001500  B0D8               	btfsc	status,0,c
  2572  001502  0012               	return	
  2573  001504                     l3634:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;main.c: 626: color[i] = (color_high[i] << 8)|(color_low[i]);
  2577  001504  0E9B               	movlw	low read_colorsensor@color_high
  2578  001506  0100               	movlb	0	; () banked
  2579  001508  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2580  00150A  6ED9               	movwf	fsr2l,c
  2581  00150C  0E00               	movlw	high read_colorsensor@color_high
  2582  00150E  0100               	movlb	0	; () banked
  2583  001510  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2584  001512  6EDA               	movwf	fsr2h,c
  2585  001514  50DF               	movf	indf2,w,c
  2586  001516  0100               	movlb	0	; () banked
  2587  001518  6F93               	movwf	??_read_colorsensor& (0+255),b
  2588  00151A  0100               	movlb	0	; () banked
  2589  00151C  5193               	movf	??_read_colorsensor& (0+255),w,b
  2590  00151E  0100               	movlb	0	; () banked
  2591  001520  6F95               	movwf	(??_read_colorsensor+2)& (0+255),b
  2592  001522  6B94               	clrf	(??_read_colorsensor+1)& (0+255),b
  2593  001524  0E97               	movlw	low read_colorsensor@color_low
  2594  001526  0100               	movlb	0	; () banked
  2595  001528  259F               	addwf	read_colorsensor@i& (0+255),w,b
  2596  00152A  6ED9               	movwf	fsr2l,c
  2597  00152C  0E00               	movlw	high read_colorsensor@color_low
  2598  00152E  0100               	movlb	0	; () banked
  2599  001530  21A0               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2600  001532  6EDA               	movwf	fsr2h,c
  2601  001534  50DF               	movf	indf2,w,c
  2602  001536  0100               	movlb	0	; () banked
  2603  001538  6F96               	movwf	(??_read_colorsensor+3)& (0+255),b
  2604  00153A  0100               	movlb	0	; () banked
  2605  00153C  5196               	movf	(??_read_colorsensor+3)& (0+255),w,b
  2606  00153E  0100               	movlb	0	; () banked
  2607  001540  1394               	iorwf	(??_read_colorsensor+1)& (0+255),f,b
  2608  001542  0E00               	movlw	0
  2609  001544  1395               	iorwf	(??_read_colorsensor+2)& (0+255),f,b
  2610  001546  90D8               	bcf	status,0,c
  2611  001548  0100               	movlb	0	; () banked
  2612  00154A  359F               	rlcf	read_colorsensor@i& (0+255),w,b
  2613  00154C  6ED9               	movwf	fsr2l,c
  2614  00154E  0100               	movlb	0	; () banked
  2615  001550  35A0               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2616  001552  6EDA               	movwf	fsr2h,c
  2617  001554  0E76               	movlw	low _color
  2618  001556  26D9               	addwf	fsr2l,f,c
  2619  001558  0E00               	movlw	high _color
  2620  00155A  22DA               	addwfc	fsr2h,f,c
  2621  00155C  C094  FFDE         	movff	??_read_colorsensor+1,postinc2
  2622  001560  C095  FFDD         	movff	??_read_colorsensor+2,postdec2
  2623                           
  2624                           ; BSR set to: 0
  2625  001564  0100               	movlb	0	; () banked
  2626  001566  4B9F               	infsnz	read_colorsensor@i& (0+255),f,b
  2627  001568  2BA0               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2628  00156A  D7C1               	goto	l3630
  2629  00156C                     l398:
  2630                           
  2631                           ; BSR set to: 0
  2632  00156C  0012               	return		;funcret
  2633  00156E                     __end_of_read_colorsensor:
  2634                           	opt stack 0
  2635                           tblptru	equ	0xFF8
  2636                           tblptrh	equ	0xFF7
  2637                           tblptrl	equ	0xFF6
  2638                           tablat	equ	0xFF5
  2639                           intcon	equ	0xFF2
  2640                           intcon2	equ	0xFF1
  2641                           intcon3	equ	0xFF0
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           indf2	equ	0xFDF
  2645                           postinc2	equ	0xFDE
  2646                           postdec2	equ	0xFDD
  2647                           fsr2h	equ	0xFDA
  2648                           fsr2l	equ	0xFD9
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _initLCD *****************
  2652 ;; Defined at:
  2653 ;;		line 14 in file "lcd.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;		None
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		wreg, status,2, status,0, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;Total ram usage:        1 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    9
  2674 ;; This function calls:
  2675 ;;		_lcdInst
  2676 ;; This function is called by:
  2677 ;;		_main
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           	psect	text5
  2682  002870                     __ptext5:
  2683                           	opt stack 0
  2684  002870                     _initLCD:
  2685                           	opt stack 21
  2686                           
  2687                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;incstack = 0
  2691  002870  0E31               	movlw	49
  2692  002872  0100               	movlb	0	; () banked
  2693  002874  6F93               	movwf	??_initLCD& (0+255),b
  2694  002876  0EB2               	movlw	178
  2695  002878                     u4157:
  2696  002878  2EE8               	decfsz	wreg,f,c
  2697  00287A  D7FE               	bra	u4157
  2698  00287C  2F93               	decfsz	??_initLCD& (0+255),f,b
  2699  00287E  D7FC               	bra	u4157
  2700  002880  F000               	nop	
  2701                           
  2702                           ;lcd.c: 16: lcdInst(0b00110011);
  2703  002882  0E33               	movlw	51
  2704  002884  ECEA  F015         	call	_lcdInst
  2705                           
  2706                           ;lcd.c: 17: lcdInst(0b00110011);
  2707  002888  0E33               	movlw	51
  2708  00288A  ECEA  F015         	call	_lcdInst
  2709                           
  2710                           ;lcd.c: 18: lcdInst(0b00110010);
  2711  00288E  0E32               	movlw	50
  2712  002890  ECEA  F015         	call	_lcdInst
  2713                           
  2714                           ;lcd.c: 19: lcdInst(0b00101000);
  2715  002894  0E28               	movlw	40
  2716  002896  ECEA  F015         	call	_lcdInst
  2717                           
  2718                           ;lcd.c: 20: lcdInst(0b00001111);
  2719  00289A  0E0F               	movlw	15
  2720  00289C  ECEA  F015         	call	_lcdInst
  2721                           
  2722                           ;lcd.c: 21: lcdInst(0b00000110);
  2723  0028A0  0E06               	movlw	6
  2724  0028A2  ECEA  F015         	call	_lcdInst
  2725                           
  2726                           ;lcd.c: 22: lcdInst(0b00000001);
  2727  0028A6  0E01               	movlw	1
  2728  0028A8  ECEA  F015         	call	_lcdInst
  2729                           
  2730                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2731  0028AC  0E31               	movlw	49
  2732  0028AE  0100               	movlb	0	; () banked
  2733  0028B0  6F93               	movwf	??_initLCD& (0+255),b
  2734  0028B2  0EB2               	movlw	178
  2735  0028B4                     u4167:
  2736  0028B4  2EE8               	decfsz	wreg,f,c
  2737  0028B6  D7FE               	bra	u4167
  2738  0028B8  2F93               	decfsz	??_initLCD& (0+255),f,b
  2739  0028BA  D7FC               	bra	u4167
  2740  0028BC  F000               	nop	
  2741  0028BE  0012               	return		;funcret
  2742  0028C0                     __end_of_initLCD:
  2743                           	opt stack 0
  2744                           tblptru	equ	0xFF8
  2745                           tblptrh	equ	0xFF7
  2746                           tblptrl	equ	0xFF6
  2747                           tablat	equ	0xFF5
  2748                           intcon	equ	0xFF2
  2749                           intcon2	equ	0xFF1
  2750                           intcon3	equ	0xFF0
  2751                           postinc0	equ	0xFEE
  2752                           wreg	equ	0xFE8
  2753                           indf2	equ	0xFDF
  2754                           postinc2	equ	0xFDE
  2755                           postdec2	equ	0xFDD
  2756                           fsr2h	equ	0xFDA
  2757                           fsr2l	equ	0xFD9
  2758                           status	equ	0xFD8
  2759                           
  2760 ;; *************** function _emergencystop *****************
  2761 ;; Defined at:
  2762 ;;		line 553 in file "main.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2780 ;;Total ram usage:        0 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:   10
  2783 ;; This function calls:
  2784 ;;		_lcdInst
  2785 ;;		_printf
  2786 ;; This function is called by:
  2787 ;;		_main
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text6
  2792  002B46                     __ptext6:
  2793                           	opt stack 0
  2794  002B46                     _emergencystop:
  2795                           	opt stack 20
  2796                           
  2797                           ;main.c: 554: (INTCONbits.GIE = 0);
  2798                           
  2799                           ;incstack = 0
  2800  002B46  9EF2               	bcf	intcon,7,c	;volatile
  2801                           
  2802                           ;main.c: 555: PORTAbits.RA2 = 0;
  2803  002B48  9480               	bcf	3968,2,c	;volatile
  2804                           
  2805                           ;main.c: 556: lcdInst(0b00000001);
  2806  002B4A  0E01               	movlw	1
  2807  002B4C  ECEA  F015         	call	_lcdInst
  2808                           
  2809                           ;main.c: 557: lcdInst(0b10000000);
  2810  002B50  0E80               	movlw	128
  2811  002B52  ECEA  F015         	call	_lcdInst
  2812                           
  2813                           ;main.c: 558: printf("EMERGENCY STOP");
  2814  002B56  0EC2               	movlw	low STR_30
  2815  002B58  0100               	movlb	0	; () banked
  2816  002B5A  6F9C               	movwf	printf@f& (0+255),b
  2817  002B5C  0EFF               	movlw	high STR_30
  2818  002B5E  0100               	movlb	0	; () banked
  2819  002B60  6F9D               	movwf	(printf@f+1)& (0+255),b
  2820  002B62  ECFD  F001         	call	_printf	;wreg free
  2821  002B66                     l355:
  2822  002B66  D7FF               	goto	l355
  2823  002B68                     __end_of_emergencystop:
  2824                           	opt stack 0
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           intcon	equ	0xFF2
  2830                           intcon2	equ	0xFF1
  2831                           intcon3	equ	0xFF0
  2832                           postinc0	equ	0xFEE
  2833                           wreg	equ	0xFE8
  2834                           indf2	equ	0xFDF
  2835                           postinc2	equ	0xFDE
  2836                           postdec2	equ	0xFDD
  2837                           fsr2h	equ	0xFDA
  2838                           fsr2l	equ	0xFD9
  2839                           status	equ	0xFD8
  2840                           
  2841 ;; *************** function _date_time *****************
  2842 ;; Defined at:
  2843 ;;		line 429 in file "main.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;		None
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  i               1   50[BANK0 ] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;Total ram usage:        1 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:   10
  2864 ;; This function calls:
  2865 ;;		_I2C_Master_Read
  2866 ;;		_I2C_Master_Start
  2867 ;;		_I2C_Master_Stop
  2868 ;;		_I2C_Master_Write
  2869 ;;		_lcdInst
  2870 ;;		_printf
  2871 ;; This function is called by:
  2872 ;;		_main
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text7
  2877  001DDE                     __ptext7:
  2878                           	opt stack 0
  2879  001DDE                     _date_time:
  2880                           	opt stack 20
  2881                           
  2882                           ;main.c: 431: I2C_Master_Start();
  2883                           
  2884                           ;incstack = 0
  2885  001DDE  EC0C  F016         	call	_I2C_Master_Start	;wreg free
  2886                           
  2887                           ;main.c: 432: I2C_Master_Write(0b11010000);
  2888  001DE2  0E00               	movlw	0
  2889  001DE4  0100               	movlb	0	; () banked
  2890  001DE6  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2891  001DE8  0ED0               	movlw	208
  2892  001DEA  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2893  001DEC  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  2894                           
  2895                           ;main.c: 433: I2C_Master_Write(0x00);
  2896  001DF0  0E00               	movlw	0
  2897  001DF2  0100               	movlb	0	; () banked
  2898  001DF4  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2899  001DF6  0E00               	movlw	0
  2900  001DF8  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2901  001DFA  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  2902                           
  2903                           ;main.c: 434: I2C_Master_Stop();
  2904  001DFE  EC08  F016         	call	_I2C_Master_Stop	;wreg free
  2905                           
  2906                           ;main.c: 437: I2C_Master_Start();
  2907  001E02  EC0C  F016         	call	_I2C_Master_Start	;wreg free
  2908                           
  2909                           ;main.c: 438: I2C_Master_Write(0b11010001);
  2910  001E06  0E00               	movlw	0
  2911  001E08  0100               	movlb	0	; () banked
  2912  001E0A  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2913  001E0C  0ED1               	movlw	209
  2914  001E0E  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2915  001E10  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  2916                           
  2917                           ;main.c: 439: for(unsigned char i=0;i<0x06;i++){
  2918  001E14  0E00               	movlw	0
  2919  001E16  0100               	movlb	0	; () banked
  2920  001E18  6FB2               	movwf	date_time@i& (0+255),b
  2921  001E1A                     l4164:
  2922                           
  2923                           ; BSR set to: 0
  2924  001E1A  0E05               	movlw	5
  2925  001E1C  0100               	movlb	0	; () banked
  2926  001E1E  65B2               	cpfsgt	date_time@i& (0+255),b
  2927  001E20  D001               	goto	l4168
  2928  001E22  D010               	goto	l4174
  2929  001E24                     l4168:
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;main.c: 440: time[i] = I2C_Master_Read(1);
  2933  001E24  0100               	movlb	0	; () banked
  2934  001E26  51B2               	movf	date_time@i& (0+255),w,b
  2935  001E28  0D01               	mullw	1
  2936  001E2A  0EB5               	movlw	low _time
  2937  001E2C  24F3               	addwf	prodl,w,c
  2938  001E2E  6ED9               	movwf	fsr2l,c
  2939  001E30  0E00               	movlw	high _time
  2940  001E32  20F4               	addwfc	prodh,w,c
  2941  001E34  6EDA               	movwf	fsr2h,c
  2942  001E36  0E01               	movlw	1
  2943  001E38  EC3F  F015         	call	_I2C_Master_Read
  2944  001E3C  6EDF               	movwf	indf2,c
  2945  001E3E  0100               	movlb	0	; () banked
  2946  001E40  2BB2               	incf	date_time@i& (0+255),f,b
  2947  001E42  D7EB               	goto	l4164
  2948  001E44                     l4174:
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;main.c: 441: }
  2952                           ;main.c: 442: time[6] = I2C_Master_Read(0);
  2953  001E44  0E00               	movlw	0
  2954  001E46  EC3F  F015         	call	_I2C_Master_Read
  2955  001E4A  0100               	movlb	0	; () banked
  2956  001E4C  6FBB               	movwf	(_time+6)& (0+255),b
  2957                           
  2958                           ;main.c: 443: I2C_Master_Stop();
  2959  001E4E  EC08  F016         	call	_I2C_Master_Stop	;wreg free
  2960                           
  2961                           ;main.c: 446: lcdInst(0b10000000);
  2962  001E52  0E80               	movlw	128
  2963  001E54  ECEA  F015         	call	_lcdInst
  2964                           
  2965                           ;main.c: 447: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2966  001E58  0EAF               	movlw	low STR_10
  2967  001E5A  0100               	movlb	0	; () banked
  2968  001E5C  6F9C               	movwf	printf@f& (0+255),b
  2969  001E5E  0EFE               	movlw	high STR_10
  2970  001E60  0100               	movlb	0	; () banked
  2971  001E62  6F9D               	movwf	(printf@f+1)& (0+255),b
  2972  001E64  C0BA  F09E         	movff	_time+5,?_printf+2
  2973  001E68  0100               	movlb	0	; () banked
  2974  001E6A  6B9F               	clrf	(?_printf+3)& (0+255),b
  2975  001E6C  C0B9  F0A0         	movff	_time+4,?_printf+4
  2976  001E70  0100               	movlb	0	; () banked
  2977  001E72  6BA1               	clrf	(?_printf+5)& (0+255),b
  2978  001E74  C0BB  F0A2         	movff	_time+6,?_printf+6
  2979  001E78  0100               	movlb	0	; () banked
  2980  001E7A  6BA3               	clrf	(?_printf+7)& (0+255),b
  2981  001E7C  ECFD  F001         	call	_printf	;wreg free
  2982                           
  2983                           ;main.c: 448: lcdInst(0b11000000);
  2984  001E80  0EC0               	movlw	192
  2985  001E82  ECEA  F015         	call	_lcdInst
  2986                           
  2987                           ;main.c: 449: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2988  001E86  0EC6               	movlw	low STR_11
  2989  001E88  0100               	movlb	0	; () banked
  2990  001E8A  6F9C               	movwf	printf@f& (0+255),b
  2991  001E8C  0EFE               	movlw	high STR_11
  2992  001E8E  0100               	movlb	0	; () banked
  2993  001E90  6F9D               	movwf	(printf@f+1)& (0+255),b
  2994  001E92  C0B7  F09E         	movff	_time+2,?_printf+2
  2995  001E96  0100               	movlb	0	; () banked
  2996  001E98  6B9F               	clrf	(?_printf+3)& (0+255),b
  2997  001E9A  C0B6  F0A0         	movff	_time+1,?_printf+4
  2998  001E9E  0100               	movlb	0	; () banked
  2999  001EA0  6BA1               	clrf	(?_printf+5)& (0+255),b
  3000  001EA2  C0B5  F0A2         	movff	_time,?_printf+6
  3001  001EA6  0100               	movlb	0	; () banked
  3002  001EA8  6BA3               	clrf	(?_printf+7)& (0+255),b
  3003  001EAA  ECFD  F001         	call	_printf	;wreg free
  3004  001EAE  0012               	return	
  3005  001EB0                     __end_of_date_time:
  3006                           	opt stack 0
  3007                           tblptru	equ	0xFF8
  3008                           tblptrh	equ	0xFF7
  3009                           tblptrl	equ	0xFF6
  3010                           tablat	equ	0xFF5
  3011                           prodh	equ	0xFF4
  3012                           prodl	equ	0xFF3
  3013                           intcon	equ	0xFF2
  3014                           intcon2	equ	0xFF1
  3015                           intcon3	equ	0xFF0
  3016                           postinc0	equ	0xFEE
  3017                           wreg	equ	0xFE8
  3018                           indf2	equ	0xFDF
  3019                           postinc2	equ	0xFDE
  3020                           postdec2	equ	0xFDD
  3021                           fsr2h	equ	0xFDA
  3022                           fsr2l	equ	0xFD9
  3023                           status	equ	0xFD8
  3024                           
  3025 ;; *************** function _I2C_Master_Read *****************
  3026 ;; Defined at:
  3027 ;;		line 105 in file "I2C.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  a               1    wreg     unsigned char 
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  a               1   17[BANK0 ] unsigned char 
  3032 ;;  temp            1   18[BANK0 ] unsigned char 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      unsigned char 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2, status,0, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;Total ram usage:        2 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    8
  3049 ;; This function calls:
  3050 ;;		_I2C_Master_Wait
  3051 ;; This function is called by:
  3052 ;;		_date_time
  3053 ;;		_read_colorsensor
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           	psect	text8
  3058  002A7E                     __ptext8:
  3059                           	opt stack 0
  3060  002A7E                     _I2C_Master_Read:
  3061                           	opt stack 20
  3062                           
  3063                           ;incstack = 0
  3064                           ;I2C_Master_Read@a stored from wreg
  3065  002A7E  0100               	movlb	0	; () banked
  3066  002A80  6F91               	movwf	I2C_Master_Read@a& (0+255),b
  3067                           
  3068                           ;I2C.c: 107: unsigned char temp;
  3069                           ;I2C.c: 108: I2C_Master_Wait();
  3070  002A82  ECCF  F015         	call	_I2C_Master_Wait	;wreg free
  3071                           
  3072                           ;I2C.c: 109: RCEN = 1;
  3073  002A86  86C5               	bsf	4037,3,c	;volatile
  3074                           
  3075                           ;I2C.c: 110: I2C_Master_Wait();
  3076  002A88  ECCF  F015         	call	_I2C_Master_Wait	;wreg free
  3077                           
  3078                           ;I2C.c: 111: temp = SSPBUF;
  3079  002A8C  CFC9 F092          	movff	4041,I2C_Master_Read@temp	;volatile
  3080                           
  3081                           ;I2C.c: 112: I2C_Master_Wait();
  3082  002A90  ECCF  F015         	call	_I2C_Master_Wait	;wreg free
  3083                           
  3084                           ;I2C.c: 113: ACKDT = (a)?0:1;
  3085  002A94  0100               	movlb	0	; () banked
  3086  002A96  5191               	movf	I2C_Master_Read@a& (0+255),w,b
  3087  002A98  0100               	movlb	0	; () banked
  3088  002A9A  A4D8               	btfss	status,2,c
  3089  002A9C  D002               	goto	u2780
  3090  002A9E  8AC5               	bsf	4037,5,c	;volatile
  3091  002AA0  D001               	goto	l3444
  3092  002AA2                     u2780:
  3093  002AA2  9AC5               	bcf	4037,5,c	;volatile
  3094  002AA4                     l3444:
  3095                           
  3096                           ;I2C.c: 114: ACKEN = 1;
  3097  002AA4  88C5               	bsf	4037,4,c	;volatile
  3098                           
  3099                           ;I2C.c: 115: return temp;
  3100  002AA6  0100               	movlb	0	; () banked
  3101  002AA8  5192               	movf	I2C_Master_Read@temp& (0+255),w,b
  3102  002AAA  0012               	return	
  3103  002AAC                     __end_of_I2C_Master_Read:
  3104                           	opt stack 0
  3105                           tblptru	equ	0xFF8
  3106                           tblptrh	equ	0xFF7
  3107                           tblptrl	equ	0xFF6
  3108                           tablat	equ	0xFF5
  3109                           prodh	equ	0xFF4
  3110                           prodl	equ	0xFF3
  3111                           intcon	equ	0xFF2
  3112                           intcon2	equ	0xFF1
  3113                           intcon3	equ	0xFF0
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           indf2	equ	0xFDF
  3117                           postinc2	equ	0xFDE
  3118                           postdec2	equ	0xFDD
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _bottle_time *****************
  3124 ;; Defined at:
  3125 ;;		line 514 in file "main.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;		None
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;Total ram usage:        0 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:   10
  3146 ;; This function calls:
  3147 ;;		_lcdInst
  3148 ;;		_printf
  3149 ;; This function is called by:
  3150 ;;		_main
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text9
  3155  002A12                     __ptext9:
  3156                           	opt stack 0
  3157  002A12                     _bottle_time:
  3158                           	opt stack 20
  3159                           
  3160                           ;main.c: 515: lcdInst(0b10000000);
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;incstack = 0
  3164  002A12  0E80               	movlw	128
  3165  002A14  ECEA  F015         	call	_lcdInst
  3166                           
  3167                           ;main.c: 516: printf("Total Operation       ");
  3168  002A18  0E98               	movlw	low STR_23
  3169  002A1A  0100               	movlb	0	; () banked
  3170  002A1C  6F9C               	movwf	printf@f& (0+255),b
  3171  002A1E  0EFE               	movlw	high STR_23
  3172  002A20  0100               	movlb	0	; () banked
  3173  002A22  6F9D               	movwf	(printf@f+1)& (0+255),b
  3174  002A24  ECFD  F001         	call	_printf	;wreg free
  3175                           
  3176                           ;main.c: 517: lcdInst(0b11000000);
  3177  002A28  0EC0               	movlw	192
  3178  002A2A  ECEA  F015         	call	_lcdInst
  3179                           
  3180                           ;main.c: 518: printf("Time: %d s       ", operation_time);
  3181  002A2E  0EDD               	movlw	low STR_24
  3182  002A30  0100               	movlb	0	; () banked
  3183  002A32  6F9C               	movwf	printf@f& (0+255),b
  3184  002A34  0EFE               	movlw	high STR_24
  3185  002A36  0100               	movlb	0	; () banked
  3186  002A38  6F9D               	movwf	(printf@f+1)& (0+255),b
  3187  002A3A  C0D6  F09E         	movff	_operation_time,?_printf+2
  3188  002A3E  C0D7  F09F         	movff	_operation_time+1,?_printf+3
  3189  002A42  ECFD  F001         	call	_printf	;wreg free
  3190  002A46  0012               	return	
  3191  002A48                     __end_of_bottle_time:
  3192                           	opt stack 0
  3193                           tblptru	equ	0xFF8
  3194                           tblptrh	equ	0xFF7
  3195                           tblptrl	equ	0xFF6
  3196                           tablat	equ	0xFF5
  3197                           prodh	equ	0xFF4
  3198                           prodl	equ	0xFF3
  3199                           intcon	equ	0xFF2
  3200                           intcon2	equ	0xFF1
  3201                           intcon3	equ	0xFF0
  3202                           postinc0	equ	0xFEE
  3203                           wreg	equ	0xFE8
  3204                           indf2	equ	0xFDF
  3205                           postinc2	equ	0xFDE
  3206                           postdec2	equ	0xFDD
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _bottle_count *****************
  3212 ;; Defined at:
  3213 ;;		line 472 in file "main.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;		None
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;		None
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      void 
  3220 ;; Registers used:
  3221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;Total ram usage:        0 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:   10
  3234 ;; This function calls:
  3235 ;;		___awmod
  3236 ;;		_lcdInst
  3237 ;;		_printf
  3238 ;; This function is called by:
  3239 ;;		_main
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           	psect	text10
  3244  000E90                     __ptext10:
  3245                           	opt stack 0
  3246  000E90                     _bottle_count:
  3247                           	opt stack 20
  3248                           
  3249                           ;main.c: 473: switch(bottle_count_disp % 5){
  3250                           
  3251                           ;incstack = 0
  3252  000E90  D0A7               	goto	l4220
  3253  000E92                     l4184:
  3254                           
  3255                           ;main.c: 475: lcdInst(0b10000000);
  3256  000E92  0E80               	movlw	128
  3257  000E94  ECEA  F015         	call	_lcdInst
  3258                           
  3259                           ;main.c: 476: printf("Bottle Count    ");
  3260  000E98  0EA1               	movlw	low STR_12
  3261  000E9A  0100               	movlb	0	; () banked
  3262  000E9C  6F9C               	movwf	printf@f& (0+255),b
  3263  000E9E  0EFF               	movlw	high STR_12
  3264  000EA0  0100               	movlb	0	; () banked
  3265  000EA2  6F9D               	movwf	(printf@f+1)& (0+255),b
  3266  000EA4  ECFD  F001         	call	_printf	;wreg free
  3267                           
  3268                           ;main.c: 477: lcdInst(0b11000000);
  3269  000EA8  0EC0               	movlw	192
  3270  000EAA  ECEA  F015         	call	_lcdInst
  3271                           
  3272                           ;main.c: 478: printf("Total: %d       ", total_bottle_count);
  3273  000EAE  0E90               	movlw	low STR_13
  3274  000EB0  0100               	movlb	0	; () banked
  3275  000EB2  6F9C               	movwf	printf@f& (0+255),b
  3276  000EB4  0EFF               	movlw	high STR_13
  3277  000EB6  0100               	movlb	0	; () banked
  3278  000EB8  6F9D               	movwf	(printf@f+1)& (0+255),b
  3279  000EBA  C0DE  F09E         	movff	_total_bottle_count,?_printf+2
  3280  000EBE  C0DF  F09F         	movff	_total_bottle_count+1,?_printf+3
  3281  000EC2  ECFD  F001         	call	_printf	;wreg free
  3282                           
  3283                           ;main.c: 479: break;
  3284  000EC6  0012               	return	
  3285  000EC8                     l4190:
  3286                           
  3287                           ;main.c: 481: lcdInst(0b10000000);
  3288  000EC8  0E80               	movlw	128
  3289  000ECA  ECEA  F015         	call	_lcdInst
  3290                           
  3291                           ;main.c: 482: printf("YOP+CAP+LBL: %d  ", yopcaplbl_count);
  3292  000ECE  0EEF               	movlw	low STR_14
  3293  000ED0  0100               	movlb	0	; () banked
  3294  000ED2  6F9C               	movwf	printf@f& (0+255),b
  3295  000ED4  0EFE               	movlw	high STR_14
  3296  000ED6  0100               	movlb	0	; () banked
  3297  000ED8  6F9D               	movwf	(printf@f+1)& (0+255),b
  3298  000EDA  C0E4  F09E         	movff	_yopcaplbl_count,?_printf+2
  3299  000EDE  C0E5  F09F         	movff	_yopcaplbl_count+1,?_printf+3
  3300  000EE2  ECFD  F001         	call	_printf	;wreg free
  3301                           
  3302                           ;main.c: 483: lcdInst(0b11000000);
  3303  000EE6  0EC0               	movlw	192
  3304  000EE8  ECEA  F015         	call	_lcdInst
  3305                           
  3306                           ;main.c: 484: printf("YOP+CAP-LBL: %d  ", yopcap_count);
  3307  000EEC  0E13               	movlw	low STR_15
  3308  000EEE  0100               	movlb	0	; () banked
  3309  000EF0  6F9C               	movwf	printf@f& (0+255),b
  3310  000EF2  0EFF               	movlw	high STR_15
  3311  000EF4  0100               	movlb	0	; () banked
  3312  000EF6  6F9D               	movwf	(printf@f+1)& (0+255),b
  3313  000EF8  C0E2  F09E         	movff	_yopcap_count,?_printf+2
  3314  000EFC  C0E3  F09F         	movff	_yopcap_count+1,?_printf+3
  3315  000F00  ECFD  F001         	call	_printf	;wreg free
  3316                           
  3317                           ;main.c: 485: break;
  3318  000F04  0012               	return	
  3319  000F06                     l4196:
  3320                           
  3321                           ;main.c: 487: lcdInst(0b10000000);
  3322  000F06  0E80               	movlw	128
  3323  000F08  ECEA  F015         	call	_lcdInst
  3324                           
  3325                           ;main.c: 488: printf("YOP-CAP+LBL: %d  ", yoplbl_count);
  3326  000F0C  0E01               	movlw	low STR_16
  3327  000F0E  0100               	movlb	0	; () banked
  3328  000F10  6F9C               	movwf	printf@f& (0+255),b
  3329  000F12  0EFF               	movlw	high STR_16
  3330  000F14  0100               	movlb	0	; () banked
  3331  000F16  6F9D               	movwf	(printf@f+1)& (0+255),b
  3332  000F18  C0E6  F09E         	movff	_yoplbl_count,?_printf+2
  3333  000F1C  C0E7  F09F         	movff	_yoplbl_count+1,?_printf+3
  3334  000F20  ECFD  F001         	call	_printf	;wreg free
  3335                           
  3336                           ;main.c: 489: lcdInst(0b11000000);
  3337  000F24  0EC0               	movlw	192
  3338  000F26  ECEA  F015         	call	_lcdInst
  3339                           
  3340                           ;main.c: 490: printf("YOP-CAP-LBL: %d  ", yop_count);
  3341  000F2A  0E25               	movlw	low STR_17
  3342  000F2C  0100               	movlb	0	; () banked
  3343  000F2E  6F9C               	movwf	printf@f& (0+255),b
  3344  000F30  0EFF               	movlw	high STR_17
  3345  000F32  0100               	movlb	0	; () banked
  3346  000F34  6F9D               	movwf	(printf@f+1)& (0+255),b
  3347  000F36  C0E0  F09E         	movff	_yop_count,?_printf+2
  3348  000F3A  C0E1  F09F         	movff	_yop_count+1,?_printf+3
  3349  000F3E  ECFD  F001         	call	_printf	;wreg free
  3350                           
  3351                           ;main.c: 491: break;
  3352  000F42  0012               	return	
  3353  000F44                     l4202:
  3354                           
  3355                           ;main.c: 493: lcdInst(0b10000000);
  3356  000F44  0E80               	movlw	128
  3357  000F46  ECEA  F015         	call	_lcdInst
  3358                           
  3359                           ;main.c: 494: printf("ESKA+CAP+LBL: %d ", eskacaplbl_count);
  3360  000F4A  0E37               	movlw	low STR_18
  3361  000F4C  0100               	movlb	0	; () banked
  3362  000F4E  6F9C               	movwf	printf@f& (0+255),b
  3363  000F50  0EFF               	movlw	high STR_18
  3364  000F52  0100               	movlb	0	; () banked
  3365  000F54  6F9D               	movwf	(printf@f+1)& (0+255),b
  3366  000F56  C0CC  F09E         	movff	_eskacaplbl_count,?_printf+2
  3367  000F5A  C0CD  F09F         	movff	_eskacaplbl_count+1,?_printf+3
  3368  000F5E  ECFD  F001         	call	_printf	;wreg free
  3369                           
  3370                           ;main.c: 495: lcdInst(0b11000000);
  3371  000F62  0EC0               	movlw	192
  3372  000F64  ECEA  F015         	call	_lcdInst
  3373                           
  3374                           ;main.c: 496: printf("ESKA+CAP-LBL: %d ", eskacap_count);
  3375  000F68  0E5B               	movlw	low STR_19
  3376  000F6A  0100               	movlb	0	; () banked
  3377  000F6C  6F9C               	movwf	printf@f& (0+255),b
  3378  000F6E  0EFF               	movlw	high STR_19
  3379  000F70  0100               	movlb	0	; () banked
  3380  000F72  6F9D               	movwf	(printf@f+1)& (0+255),b
  3381  000F74  C0CA  F09E         	movff	_eskacap_count,?_printf+2
  3382  000F78  C0CB  F09F         	movff	_eskacap_count+1,?_printf+3
  3383  000F7C  ECFD  F001         	call	_printf	;wreg free
  3384                           
  3385                           ;main.c: 497: break;
  3386  000F80  0012               	return	
  3387  000F82                     l4208:
  3388                           
  3389                           ;main.c: 499: lcdInst(0b10000000);
  3390  000F82  0E80               	movlw	128
  3391  000F84  ECEA  F015         	call	_lcdInst
  3392                           
  3393                           ;main.c: 500: printf("ESKA-CAP+LBL: %d ", eskalbl_count);
  3394  000F88  0E49               	movlw	low STR_20
  3395  000F8A  0100               	movlb	0	; () banked
  3396  000F8C  6F9C               	movwf	printf@f& (0+255),b
  3397  000F8E  0EFF               	movlw	high STR_20
  3398  000F90  0100               	movlb	0	; () banked
  3399  000F92  6F9D               	movwf	(printf@f+1)& (0+255),b
  3400  000F94  C0CE  F09E         	movff	_eskalbl_count,?_printf+2
  3401  000F98  C0CF  F09F         	movff	_eskalbl_count+1,?_printf+3
  3402  000F9C  ECFD  F001         	call	_printf	;wreg free
  3403                           
  3404                           ;main.c: 501: lcdInst(0b11000000);
  3405  000FA0  0EC0               	movlw	192
  3406  000FA2  ECEA  F015         	call	_lcdInst
  3407                           
  3408                           ;main.c: 502: printf("ESKA-CAP-LBL: %d ", eska_count);
  3409  000FA6  0E6D               	movlw	low STR_21
  3410  000FA8  0100               	movlb	0	; () banked
  3411  000FAA  6F9C               	movwf	printf@f& (0+255),b
  3412  000FAC  0EFF               	movlw	high STR_21
  3413  000FAE  0100               	movlb	0	; () banked
  3414  000FB0  6F9D               	movwf	(printf@f+1)& (0+255),b
  3415  000FB2  C0C8  F09E         	movff	_eska_count,?_printf+2
  3416  000FB6  C0C9  F09F         	movff	_eska_count+1,?_printf+3
  3417  000FBA  ECFD  F001         	call	_printf	;wreg free
  3418                           
  3419                           ;main.c: 503: break;
  3420  000FBE  0012               	return	
  3421  000FC0                     l4214:
  3422                           
  3423                           ;main.c: 506: lcdInst(0b10000000);
  3424  000FC0  0E80               	movlw	128
  3425  000FC2  ECEA  F015         	call	_lcdInst
  3426                           
  3427                           ;main.c: 507: printf("ERROR: %d", bottle_count_disp);
  3428  000FC6  0EED               	movlw	low STR_22
  3429  000FC8  0100               	movlb	0	; () banked
  3430  000FCA  6F9C               	movwf	printf@f& (0+255),b
  3431  000FCC  0EFF               	movlw	high STR_22
  3432  000FCE  0100               	movlb	0	; () banked
  3433  000FD0  6F9D               	movwf	(printf@f+1)& (0+255),b
  3434  000FD2  C0E9  F09E         	movff	_bottle_count_disp,?_printf+2
  3435  000FD6  C0EA  F09F         	movff	_bottle_count_disp+1,?_printf+3
  3436  000FDA  ECFD  F001         	call	_printf	;wreg free
  3437  000FDE  D7F0               	goto	l4214
  3438  000FE0                     l4220:
  3439  000FE0  C0E9  F090         	movff	_bottle_count_disp,___awmod@dividend
  3440  000FE4  C0EA  F091         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3441  000FE8  0E00               	movlw	0
  3442  000FEA  0100               	movlb	0	; () banked
  3443  000FEC  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3444  000FEE  0E05               	movlw	5
  3445  000FF0  6F92               	movwf	___awmod@divisor& (0+255),b
  3446  000FF2  EC39  F011         	call	___awmod	;wreg free
  3447                           
  3448                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3449                           ; Switch size 1, requested type "space"
  3450                           ; Number of cases is 1, Range of values is 0 to 0
  3451                           ; switch strategies available:
  3452                           ; Name         Instructions Cycles
  3453                           ; simple_byte            4     3 (average)
  3454                           ;	Chosen strategy is simple_byte
  3455  000FF6  0100               	movlb	0	; () banked
  3456  000FF8  5191               	movf	(?___awmod+1)& (0+255),w,b
  3457  000FFA  0A00               	xorlw	0	; case 0
  3458  000FFC  A4D8               	btfss	status,2,c
  3459  000FFE  D7E0               	goto	l4214
  3460                           
  3461                           ; BSR set to: 0
  3462                           ; Switch size 1, requested type "space"
  3463                           ; Number of cases is 5, Range of values is 0 to 4
  3464                           ; switch strategies available:
  3465                           ; Name         Instructions Cycles
  3466                           ; simple_byte           16     9 (average)
  3467                           ;	Chosen strategy is simple_byte
  3468  001000  0100               	movlb	0	; () banked
  3469  001002  5190               	movf	?___awmod& (0+255),w,b
  3470  001004  0A00               	xorlw	0	; case 0
  3471  001006  B4D8               	btfsc	status,2,c
  3472  001008  D744               	goto	l4184
  3473  00100A  0A01               	xorlw	1	; case 1
  3474  00100C  B4D8               	btfsc	status,2,c
  3475  00100E  D75C               	goto	l4190
  3476  001010  0A03               	xorlw	3	; case 2
  3477  001012  B4D8               	btfsc	status,2,c
  3478  001014  D778               	goto	l4196
  3479  001016  0A01               	xorlw	1	; case 3
  3480  001018  B4D8               	btfsc	status,2,c
  3481  00101A  D794               	goto	l4202
  3482  00101C  0A07               	xorlw	7	; case 4
  3483  00101E  B4D8               	btfsc	status,2,c
  3484  001020  D7B0               	goto	l4208
  3485  001022  D7CE               	goto	l4214
  3486  001024                     __end_of_bottle_count:
  3487                           	opt stack 0
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           intcon	equ	0xFF2
  3495                           intcon2	equ	0xFF1
  3496                           intcon3	equ	0xFF0
  3497                           postinc0	equ	0xFEE
  3498                           wreg	equ	0xFE8
  3499                           indf2	equ	0xFDF
  3500                           postinc2	equ	0xFDE
  3501                           postdec2	equ	0xFDD
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _printf *****************
  3507 ;; Defined at:
  3508 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3511 ;;		 -> STR_30(15), STR_29(16), STR_28(28), STR_27(25), 
  3512 ;;		 -> STR_26(24), STR_25(23), STR_24(18), STR_23(23), 
  3513 ;;		 -> STR_22(10), STR_21(18), STR_20(18), STR_19(18), 
  3514 ;;		 -> STR_18(18), STR_17(18), STR_16(18), STR_15(18), 
  3515 ;;		 -> STR_14(18), STR_13(17), STR_12(17), STR_11(23), 
  3516 ;;		 -> STR_10(23), STR_9(7), STR_8(7), STR_7(7), 
  3517 ;;		 -> STR_6(14), STR_5(14), STR_4(24), STR_3(24), 
  3518 ;;		 -> STR_2(24), STR_1(24), 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  idx             1   40[BANK0 ] unsigned char 
  3521 ;;  tmpval          4    0        struct .
  3522 ;;  cp              3    0        PTR const unsigned char 
  3523 ;;  width           2   47[BANK0 ] int 
  3524 ;;  val             2   44[BANK0 ] unsigned int 
  3525 ;;  ap              2   41[BANK0 ] PTR void [1]
  3526 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3527 ;;  len             2    0        unsigned int 
  3528 ;;  c               1   49[BANK0 ] char 
  3529 ;;  flag            1   46[BANK0 ] unsigned char 
  3530 ;;  prec            1   43[BANK0 ] char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  2   28[BANK0 ] int 
  3533 ;; Registers used:
  3534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3540 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;Total ram usage:       22 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    9
  3547 ;; This function calls:
  3548 ;;		___lwdiv
  3549 ;;		___lwmod
  3550 ;;		___wmul
  3551 ;;		_isdigit
  3552 ;;		_putch
  3553 ;; This function is called by:
  3554 ;;		_standby
  3555 ;;		_date_time
  3556 ;;		_bottle_count
  3557 ;;		_bottle_time
  3558 ;;		_operation
  3559 ;;		_operationend
  3560 ;;		_emergencystop
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text11
  3565  0003FA                     __ptext11:
  3566                           	opt stack 0
  3567  0003FA                     _printf:
  3568                           	opt stack 20
  3569                           
  3570                           ;doprnt.c: 466: va_list ap;
  3571                           ;doprnt.c: 499: signed char c;
  3572                           ;doprnt.c: 501: int width;
  3573                           ;doprnt.c: 506: signed char prec;
  3574                           ;doprnt.c: 508: unsigned char flag;
  3575                           ;doprnt.c: 523: union {
  3576                           ;doprnt.c: 524: unsigned long vd;
  3577                           ;doprnt.c: 525: double integ;
  3578                           ;doprnt.c: 526: } tmpval;
  3579                           ;doprnt.c: 528: unsigned int val;
  3580                           ;doprnt.c: 529: unsigned len;
  3581                           ;doprnt.c: 530: const char * cp;
  3582                           ;doprnt.c: 533: *ap = __va_start();
  3583                           
  3584                           ;incstack = 0
  3585  0003FA  0E9E               	movlw	low (?_printf+2)
  3586  0003FC  0100               	movlb	0	; () banked
  3587  0003FE  6FA9               	movwf	printf@ap& (0+255),b
  3588  000400  0E00               	movlw	high (?_printf+2)
  3589  000402  0100               	movlb	0	; () banked
  3590  000404  6FAA               	movwf	(printf@ap+1)& (0+255),b
  3591                           
  3592                           ;doprnt.c: 536: while(c = *f++) {
  3593  000406  D1D5               	goto	l3772
  3594  000408                     l3642:
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;doprnt.c: 538: if(c != '%')
  3598  000408  0E25               	movlw	37
  3599  00040A  0100               	movlb	0	; () banked
  3600  00040C  19B1               	xorwf	printf@c& (0+255),w,b
  3601  00040E  B4D8               	btfsc	status,2,c
  3602  000410  D005               	goto	l3646
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;doprnt.c: 540: {
  3606                           ;doprnt.c: 541: (putch(c) );
  3607  000412  0100               	movlb	0	; () banked
  3608  000414  51B1               	movf	printf@c& (0+255),w,b
  3609  000416  ECE2  F015         	call	_putch
  3610                           
  3611                           ;doprnt.c: 542: continue;
  3612  00041A  D1CB               	goto	l3772
  3613  00041C                     l3646:
  3614                           
  3615                           ;doprnt.c: 543: }
  3616                           ;doprnt.c: 546: width = 0;
  3617  00041C  0E00               	movlw	0
  3618  00041E  0100               	movlb	0	; () banked
  3619  000420  6FB0               	movwf	(printf@width+1)& (0+255),b
  3620  000422  0E00               	movlw	0
  3621  000424  6FAF               	movwf	printf@width& (0+255),b
  3622                           
  3623                           ;doprnt.c: 548: flag = 0;
  3624  000426  0E00               	movlw	0
  3625  000428  0100               	movlb	0	; () banked
  3626  00042A  6FAE               	movwf	printf@flag& (0+255),b
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;doprnt.c: 551: switch(*f) {
  3630                           
  3631                           ;doprnt.c: 550: for(;;) {
  3632  00042C  D005               	goto	l3652
  3633  00042E                     l3648:
  3634                           
  3635                           ;doprnt.c: 580: flag |= 0x04;
  3636  00042E  0100               	movlb	0	; () banked
  3637  000430  85AE               	bsf	printf@flag& (0+255),2,b
  3638                           
  3639                           ;doprnt.c: 581: f++;
  3640  000432  0100               	movlb	0	; () banked
  3641  000434  4B9C               	infsnz	printf@f& (0+255),f,b
  3642  000436  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3643  000438                     l3652:
  3644  000438  C09C  FFF6         	movff	printf@f,tblptrl
  3645  00043C  C09D  FFF7         	movff	printf@f+1,tblptrh
  3646  000440                     	if	0	;tblptru may be non-zero
  3647  000440                     	endif
  3648  000440                     	if	0	;tblptru may be non-zero
  3649  000440                     	endif
  3650  000440  0008               	tblrd		*
  3651  000442  50F5               	movf	tablat,w,c
  3652                           
  3653                           ; Switch size 1, requested type "space"
  3654                           ; Number of cases is 1, Range of values is 48 to 48
  3655                           ; switch strategies available:
  3656                           ; Name         Instructions Cycles
  3657                           ; simple_byte            4     3 (average)
  3658                           ;	Chosen strategy is simple_byte
  3659  000444  0A30               	xorlw	48	; case 48
  3660  000446  B4D8               	btfsc	status,2,c
  3661  000448  D7F2               	goto	l3648
  3662                           
  3663                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3664                           
  3665                           ;doprnt.c: 586: }
  3666                           
  3667                           ;doprnt.c: 585: break;
  3668  00044A  C09C  FFF6         	movff	printf@f,tblptrl
  3669  00044E  C09D  FFF7         	movff	printf@f+1,tblptrh
  3670  000452                     	if	0	;tblptru may be non-zero
  3671  000452                     	endif
  3672  000452                     	if	0	;tblptru may be non-zero
  3673  000452                     	endif
  3674  000452  0008               	tblrd		*
  3675  000454  50F5               	movf	tablat,w,c
  3676  000456  EC56  F015         	call	_isdigit
  3677  00045A  A0D8               	btfss	status,0,c
  3678  00045C  D048               	goto	l3672
  3679                           
  3680                           ;doprnt.c: 598: width = 0;
  3681  00045E  0E00               	movlw	0
  3682  000460  0100               	movlb	0	; () banked
  3683  000462  6FB0               	movwf	(printf@width+1)& (0+255),b
  3684  000464  0E00               	movlw	0
  3685  000466  6FAF               	movwf	printf@width& (0+255),b
  3686  000468                     l3658:
  3687                           
  3688                           ;doprnt.c: 600: width *= 10;
  3689  000468  C0AF  F090         	movff	printf@width,___wmul@multiplier
  3690  00046C  C0B0  F091         	movff	printf@width+1,___wmul@multiplier+1
  3691  000470  0E00               	movlw	0
  3692  000472  0100               	movlb	0	; () banked
  3693  000474  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3694  000476  0E0A               	movlw	10
  3695  000478  6F92               	movwf	___wmul@multiplicand& (0+255),b
  3696  00047A  EC24  F015         	call	___wmul	;wreg free
  3697  00047E  C090  F0AF         	movff	?___wmul,printf@width
  3698  000482  C091  F0B0         	movff	?___wmul+1,printf@width+1
  3699                           
  3700                           ;doprnt.c: 601: width += *f++ - '0';
  3701  000486  0ED0               	movlw	208
  3702  000488  0100               	movlb	0	; () banked
  3703  00048A  6FA4               	movwf	??_printf& (0+255),b
  3704  00048C  0EFF               	movlw	255
  3705  00048E  0100               	movlb	0	; () banked
  3706  000490  6FA5               	movwf	(??_printf+1)& (0+255),b
  3707  000492  C09C  FFF6         	movff	printf@f,tblptrl
  3708  000496  C09D  FFF7         	movff	printf@f+1,tblptrh
  3709  00049A                     	if	0	;tblptru may be non-zero
  3710  00049A                     	endif
  3711  00049A                     	if	0	;tblptru may be non-zero
  3712  00049A                     	endif
  3713  00049A  0008               	tblrd		*
  3714  00049C  50F5               	movf	tablat,w,c
  3715  00049E  0100               	movlb	0	; () banked
  3716  0004A0  6FA6               	movwf	(??_printf+2)& (0+255),b
  3717  0004A2  6BA7               	clrf	(??_printf+3)& (0+255),b
  3718  0004A4  0100               	movlb	0	; () banked
  3719  0004A6  51A4               	movf	??_printf& (0+255),w,b
  3720  0004A8  0100               	movlb	0	; () banked
  3721  0004AA  27A6               	addwf	(??_printf+2)& (0+255),f,b
  3722  0004AC  0100               	movlb	0	; () banked
  3723  0004AE  51A5               	movf	(??_printf+1)& (0+255),w,b
  3724  0004B0  0100               	movlb	0	; () banked
  3725  0004B2  23A7               	addwfc	(??_printf+3)& (0+255),f,b
  3726  0004B4  0100               	movlb	0	; () banked
  3727  0004B6  51A6               	movf	(??_printf+2)& (0+255),w,b
  3728  0004B8  0100               	movlb	0	; () banked
  3729  0004BA  27AF               	addwf	printf@width& (0+255),f,b
  3730  0004BC  0100               	movlb	0	; () banked
  3731  0004BE  51A7               	movf	(??_printf+3)& (0+255),w,b
  3732  0004C0  0100               	movlb	0	; () banked
  3733  0004C2  23B0               	addwfc	(printf@width+1)& (0+255),f,b
  3734                           
  3735                           ; BSR set to: 0
  3736  0004C4  0100               	movlb	0	; () banked
  3737  0004C6  4B9C               	infsnz	printf@f& (0+255),f,b
  3738  0004C8  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3742  0004CA  C09C  FFF6         	movff	printf@f,tblptrl
  3743  0004CE  C09D  FFF7         	movff	printf@f+1,tblptrh
  3744  0004D2                     	if	0	;tblptru may be non-zero
  3745  0004D2                     	endif
  3746  0004D2                     	if	0	;tblptru may be non-zero
  3747  0004D2                     	endif
  3748  0004D2  0008               	tblrd		*
  3749  0004D4  50F5               	movf	tablat,w,c
  3750  0004D6  EC56  F015         	call	_isdigit
  3751  0004DA  A0D8               	btfss	status,0,c
  3752  0004DC  D008               	goto	l3672
  3753  0004DE  D7C4               	goto	l3658
  3754  0004E0                     l3666:
  3755                           
  3756                           ;doprnt.c: 721: flag |= 0x80;
  3757  0004E0  0100               	movlb	0	; () banked
  3758  0004E2  8FAE               	bsf	printf@flag& (0+255),7,b
  3759                           
  3760                           ;doprnt.c: 723: break;
  3761  0004E4  D020               	goto	l3674
  3762  0004E6                     l3668:
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;doprnt.c: 818: flag |= 0xC0;
  3766  0004E6  0EC0               	movlw	192
  3767  0004E8  0100               	movlb	0	; () banked
  3768  0004EA  13AE               	iorwf	printf@flag& (0+255),f,b
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;doprnt.c: 822: }
  3772                           
  3773                           ;doprnt.c: 819: break;
  3774  0004EC  D01C               	goto	l3674
  3775  0004EE                     l3672:
  3776  0004EE  C09C  FFF6         	movff	printf@f,tblptrl
  3777  0004F2  C09D  FFF7         	movff	printf@f+1,tblptrh
  3778  0004F6  0100               	movlb	0	; () banked
  3779  0004F8  4B9C               	infsnz	printf@f& (0+255),f,b
  3780  0004FA  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3781  0004FC                     	if	0	;tblptru may be non-zero
  3782  0004FC                     	endif
  3783  0004FC                     	if	0	;tblptru may be non-zero
  3784  0004FC                     	endif
  3785  0004FC  0008               	tblrd		*
  3786  0004FE  CFF5 F0B1          	movff	tablat,printf@c
  3787  000502  0100               	movlb	0	; () banked
  3788  000504  51B1               	movf	printf@c& (0+255),w,b
  3789                           
  3790                           ; Switch size 1, requested type "space"
  3791                           ; Number of cases is 5, Range of values is 0 to 120
  3792                           ; switch strategies available:
  3793                           ; Name         Instructions Cycles
  3794                           ; simple_byte           16     9 (average)
  3795                           ;	Chosen strategy is simple_byte
  3796  000506  0A00               	xorlw	0	; case 0
  3797  000508  B4D8               	btfsc	status,2,c
  3798  00050A  0012               	return	
  3799  00050C  0A64               	xorlw	100	; case 100
  3800  00050E  B4D8               	btfsc	status,2,c
  3801  000510  D00A               	goto	l3674
  3802  000512  0A0D               	xorlw	13	; case 105
  3803  000514  B4D8               	btfsc	status,2,c
  3804  000516  D007               	goto	l3674
  3805  000518  0A1C               	xorlw	28	; case 117
  3806  00051A  B4D8               	btfsc	status,2,c
  3807  00051C  D7E4               	goto	l3668
  3808  00051E  0A0D               	xorlw	13	; case 120
  3809  000520  B4D8               	btfsc	status,2,c
  3810  000522  D7DE               	goto	l3666
  3811  000524  D146               	goto	l3772
  3812  000526                     l3674:
  3813                           
  3814                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  3815  000526  C0AE  F0A4         	movff	printf@flag,??_printf
  3816  00052A  0EC0               	movlw	192
  3817  00052C  0100               	movlb	0	; () banked
  3818  00052E  17A4               	andwf	??_printf& (0+255),f,b
  3819  000530  A4D8               	btfss	status,2,c
  3820  000532  D019               	goto	l3686
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;doprnt.c: 1253: {
  3824                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3825  000534  C0A9  FFD9         	movff	printf@ap,fsr2l
  3826  000538  C0AA  FFDA         	movff	printf@ap+1,fsr2h
  3827  00053C  CFDE F0AC          	movff	postinc2,printf@val
  3828  000540  CFDD F0AD          	movff	postdec2,printf@val+1
  3829                           
  3830                           ; BSR set to: 0
  3831  000544  0E02               	movlw	2
  3832  000546  0100               	movlb	0	; () banked
  3833  000548  27A9               	addwf	printf@ap& (0+255),f,b
  3834  00054A  0E00               	movlw	0
  3835  00054C  23AA               	addwfc	(printf@ap+1)& (0+255),f,b
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;doprnt.c: 1261: if((int)val < 0) {
  3839  00054E  0100               	movlb	0	; () banked
  3840  000550  AFAD               	btfss	(printf@val+1)& (0+255),7,b
  3841  000552  D053               	goto	l3720
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;doprnt.c: 1262: flag |= 0x03;
  3845  000554  0E03               	movlw	3
  3846  000556  0100               	movlb	0	; () banked
  3847  000558  13AE               	iorwf	printf@flag& (0+255),f,b
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;doprnt.c: 1263: val = -val;
  3851  00055A  0100               	movlb	0	; () banked
  3852  00055C  6DAC               	negf	printf@val& (0+255),b
  3853  00055E  1FAD               	comf	(printf@val+1)& (0+255),f,b
  3854  000560  B0D8               	btfsc	status,0,c
  3855  000562  2BAD               	incf	(printf@val+1)& (0+255),f,b
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;doprnt.c: 1264: }
  3859                           ;doprnt.c: 1266: }
  3860  000564  D04A               	goto	l3720
  3861  000566                     l3686:
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;doprnt.c: 1268: else
  3865                           ;doprnt.c: 1273: {
  3866                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3867  000566  C0A9  FFD9         	movff	printf@ap,fsr2l
  3868  00056A  C0AA  FFDA         	movff	printf@ap+1,fsr2h
  3869  00056E  CFDE F0AC          	movff	postinc2,printf@val
  3870  000572  CFDD F0AD          	movff	postdec2,printf@val+1
  3871                           
  3872                           ; BSR set to: 0
  3873  000576  0E02               	movlw	2
  3874  000578  0100               	movlb	0	; () banked
  3875  00057A  27A9               	addwf	printf@ap& (0+255),f,b
  3876  00057C  0E00               	movlw	0
  3877  00057E  23AA               	addwfc	(printf@ap+1)& (0+255),f,b
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;doprnt.c: 1287: }
  3881                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3882  000580  D03C               	goto	l3720
  3883  000582                     l3690:
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;doprnt.c: 1302: case 0xC0:
  3887                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3888  000582  0E01               	movlw	1
  3889  000584  0100               	movlb	0	; () banked
  3890  000586  6FB1               	movwf	printf@c& (0+255),b
  3891  000588                     l3692:
  3892                           
  3893                           ; BSR set to: 0
  3894  000588  0E05               	movlw	5
  3895  00058A  0100               	movlb	0	; () banked
  3896  00058C  19B1               	xorwf	printf@c& (0+255),w,b
  3897  00058E  B4D8               	btfsc	status,2,c
  3898  000590  D040               	goto	l3722
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;doprnt.c: 1306: if(val < dpowers[c])
  3902                           
  3903                           ; BSR set to: 0
  3904                           
  3905                           ; BSR set to: 0
  3906  000592  0100               	movlb	0	; () banked
  3907  000594  51B1               	movf	printf@c& (0+255),w,b
  3908  000596  0D02               	mullw	2
  3909  000598  0EB2               	movlw	low _dpowers
  3910  00059A  24F3               	addwf	prodl,w,c
  3911  00059C  6EF6               	movwf	tblptrl,c
  3912  00059E  0EFD               	movlw	high _dpowers
  3913  0005A0  20F4               	addwfc	prodh,w,c
  3914  0005A2  6EF7               	movwf	tblptrh,c
  3915  0005A4                     	if	0	;There are less than 3 active tblptr bytes
  3916  0005A4                     	endif
  3917  0005A4  0009               	tblrd		*+
  3918  0005A6  50F5               	movf	tablat,w,c
  3919  0005A8  0100               	movlb	0	; () banked
  3920  0005AA  5DAC               	subwf	printf@val& (0+255),w,b
  3921  0005AC  0009               	tblrd		*+
  3922  0005AE  50F5               	movf	tablat,w,c
  3923  0005B0  0100               	movlb	0	; () banked
  3924  0005B2  59AD               	subwfb	(printf@val+1)& (0+255),w,b
  3925  0005B4  A0D8               	btfss	status,0,c
  3926  0005B6  D02D               	goto	l3722
  3927                           
  3928                           ; BSR set to: 0
  3929                           
  3930                           ; BSR set to: 0
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;doprnt.c: 1307: break;
  3934  0005B8  0100               	movlb	0	; () banked
  3935  0005BA  2BB1               	incf	printf@c& (0+255),f,b
  3936  0005BC  D7E5               	goto	l3692
  3937  0005BE                     l3704:
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3941  0005BE  0E01               	movlw	1
  3942  0005C0  0100               	movlb	0	; () banked
  3943  0005C2  6FB1               	movwf	printf@c& (0+255),b
  3944  0005C4                     l3706:
  3945                           
  3946                           ; BSR set to: 0
  3947  0005C4  0E04               	movlw	4
  3948  0005C6  0100               	movlb	0	; () banked
  3949  0005C8  19B1               	xorwf	printf@c& (0+255),w,b
  3950  0005CA  B4D8               	btfsc	status,2,c
  3951  0005CC  D022               	goto	l3722
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3955                           
  3956                           ; BSR set to: 0
  3957                           
  3958                           ; BSR set to: 0
  3959  0005CE  0100               	movlb	0	; () banked
  3960  0005D0  51B1               	movf	printf@c& (0+255),w,b
  3961  0005D2  0D02               	mullw	2
  3962  0005D4  0EBC               	movlw	low _hexpowers
  3963  0005D6  24F3               	addwf	prodl,w,c
  3964  0005D8  6EF6               	movwf	tblptrl,c
  3965  0005DA  0EFD               	movlw	high _hexpowers
  3966  0005DC  20F4               	addwfc	prodh,w,c
  3967  0005DE  6EF7               	movwf	tblptrh,c
  3968  0005E0                     	if	0	;There are less than 3 active tblptr bytes
  3969  0005E0                     	endif
  3970  0005E0  0009               	tblrd		*+
  3971  0005E2  50F5               	movf	tablat,w,c
  3972  0005E4  0100               	movlb	0	; () banked
  3973  0005E6  5DAC               	subwf	printf@val& (0+255),w,b
  3974  0005E8  0009               	tblrd		*+
  3975  0005EA  50F5               	movf	tablat,w,c
  3976  0005EC  0100               	movlb	0	; () banked
  3977  0005EE  59AD               	subwfb	(printf@val+1)& (0+255),w,b
  3978  0005F0  A0D8               	btfss	status,0,c
  3979  0005F2  D00F               	goto	l3722
  3980                           
  3981                           ; BSR set to: 0
  3982                           
  3983                           ; BSR set to: 0
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;doprnt.c: 1318: break;
  3987  0005F4  0100               	movlb	0	; () banked
  3988  0005F6  2BB1               	incf	printf@c& (0+255),f,b
  3989  0005F8  D7E5               	goto	l3706
  3990  0005FA                     l3720:
  3991                           
  3992                           ; BSR set to: 0
  3993  0005FA  0100               	movlb	0	; () banked
  3994  0005FC  51AE               	movf	printf@flag& (0+255),w,b
  3995  0005FE  0BC0               	andlw	192
  3996                           
  3997                           ; Switch size 1, requested type "space"
  3998                           ; Number of cases is 3, Range of values is 0 to 192
  3999                           ; switch strategies available:
  4000                           ; Name         Instructions Cycles
  4001                           ; simple_byte           10     6 (average)
  4002                           ;	Chosen strategy is simple_byte
  4003  000600  0A00               	xorlw	0	; case 0
  4004  000602  B4D8               	btfsc	status,2,c
  4005  000604  D7BE               	goto	l3690
  4006  000606  0A80               	xorlw	128	; case 128
  4007  000608  B4D8               	btfsc	status,2,c
  4008  00060A  D7D9               	goto	l3704
  4009  00060C  0A40               	xorlw	64	; case 192
  4010  00060E  B4D8               	btfsc	status,2,c
  4011  000610  D7B8               	goto	l3690
  4012  000612                     l3722:
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4016  000612  0100               	movlb	0	; () banked
  4017  000614  51AF               	movf	printf@width& (0+255),w,b
  4018  000616  0100               	movlb	0	; () banked
  4019  000618  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  4020  00061A  B4D8               	btfsc	status,2,c
  4021  00061C  D00B               	goto	l3728
  4022                           
  4023                           ; BSR set to: 0
  4024  00061E  C0AE  F0A4         	movff	printf@flag,??_printf
  4025  000622  0E03               	movlw	3
  4026  000624  0100               	movlb	0	; () banked
  4027  000626  17A4               	andwf	??_printf& (0+255),f,b
  4028  000628  B4D8               	btfsc	status,2,c
  4029  00062A  D004               	goto	l3728
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;doprnt.c: 1346: width--;
  4033  00062C  0100               	movlb	0	; () banked
  4034  00062E  07AF               	decf	printf@width& (0+255),f,b
  4035  000630  A0D8               	btfss	status,0,c
  4036  000632  07B0               	decf	(printf@width+1)& (0+255),f,b
  4037  000634                     l3728:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;doprnt.c: 1381: if(width > c)
  4041  000634  0E80               	movlw	128
  4042  000636  0100               	movlb	0	; () banked
  4043  000638  BFB1               	btfsc	printf@c& (0+255),7,b
  4044  00063A  0E7F               	movlw	127
  4045  00063C  0100               	movlb	0	; () banked
  4046  00063E  6FA4               	movwf	??_printf& (0+255),b
  4047  000640  0100               	movlb	0	; () banked
  4048  000642  51AF               	movf	printf@width& (0+255),w,b
  4049  000644  0100               	movlb	0	; () banked
  4050  000646  5DB1               	subwf	printf@c& (0+255),w,b
  4051  000648  0100               	movlb	0	; () banked
  4052  00064A  51B0               	movf	(printf@width+1)& (0+255),w,b
  4053  00064C  0A80               	xorlw	128
  4054  00064E  0100               	movlb	0	; () banked
  4055  000650  59A4               	subwfb	??_printf& (0+255),w,b
  4056  000652  B0D8               	btfsc	status,0,c
  4057  000654  D00B               	goto	l3732
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;doprnt.c: 1382: width -= c;
  4061  000656  0100               	movlb	0	; () banked
  4062  000658  51B1               	movf	printf@c& (0+255),w,b
  4063  00065A  0100               	movlb	0	; () banked
  4064  00065C  5FAF               	subwf	printf@width& (0+255),f,b
  4065  00065E  0E00               	movlw	0
  4066  000660  0100               	movlb	0	; () banked
  4067  000662  BFB1               	btfsc	printf@c& (0+255),7,b
  4068  000664  0EFF               	movlw	255
  4069  000666  0100               	movlb	0	; () banked
  4070  000668  5BB0               	subwfb	(printf@width+1)& (0+255),f,b
  4071  00066A  D005               	goto	l3734
  4072  00066C                     l3732:
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;doprnt.c: 1383: else
  4076                           ;doprnt.c: 1384: width = 0;
  4077  00066C  0E00               	movlw	0
  4078  00066E  0100               	movlb	0	; () banked
  4079  000670  6FB0               	movwf	(printf@width+1)& (0+255),b
  4080  000672  0E00               	movlw	0
  4081  000674  6FAF               	movwf	printf@width& (0+255),b
  4082  000676                     l3734:
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;doprnt.c: 1387: if(flag & 0x04) {
  4086  000676  0100               	movlb	0	; () banked
  4087  000678  A5AE               	btfss	printf@flag& (0+255),2,b
  4088  00067A  D018               	goto	l3746
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;doprnt.c: 1392: if(flag & 0x03)
  4092  00067C  C0AE  F0A4         	movff	printf@flag,??_printf
  4093  000680  0E03               	movlw	3
  4094  000682  0100               	movlb	0	; () banked
  4095  000684  17A4               	andwf	??_printf& (0+255),f,b
  4096  000686  B4D8               	btfsc	status,2,c
  4097  000688  D003               	goto	l3740
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;doprnt.c: 1393: (putch('-') );
  4101  00068A  0E2D               	movlw	45
  4102  00068C  ECE2  F015         	call	_putch
  4103  000690                     l3740:
  4104                           
  4105                           ;doprnt.c: 1415: if(width)
  4106  000690  0100               	movlb	0	; () banked
  4107  000692  51AF               	movf	printf@width& (0+255),w,b
  4108  000694  0100               	movlb	0	; () banked
  4109  000696  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  4110  000698  B4D8               	btfsc	status,2,c
  4111  00069A  D025               	goto	l3756
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;doprnt.c: 1417: (putch('0') );
  4115                           
  4116                           ; BSR set to: 0
  4117                           
  4118                           ;doprnt.c: 1416: do
  4119  00069C  0E30               	movlw	48
  4120  00069E  ECE2  F015         	call	_putch
  4121                           
  4122                           ;doprnt.c: 1418: while(--width);
  4123  0006A2  0100               	movlb	0	; () banked
  4124  0006A4  07AF               	decf	printf@width& (0+255),f,b
  4125  0006A6  A0D8               	btfss	status,0,c
  4126  0006A8  07B0               	decf	(printf@width+1)& (0+255),f,b
  4127  0006AA  D7F2               	goto	l3740
  4128  0006AC                     l3746:
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;doprnt.c: 1422: {
  4132                           ;doprnt.c: 1424: if(width
  4133                           ;doprnt.c: 1428: )
  4134  0006AC  0100               	movlb	0	; () banked
  4135  0006AE  51AF               	movf	printf@width& (0+255),w,b
  4136  0006B0  0100               	movlb	0	; () banked
  4137  0006B2  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  4138  0006B4  B4D8               	btfsc	status,2,c
  4139  0006B6  D00D               	goto	l3752
  4140  0006B8                     l3748:
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;doprnt.c: 1430: (putch(' ') );
  4144  0006B8  0E20               	movlw	32
  4145  0006BA  ECE2  F015         	call	_putch
  4146                           
  4147                           ;doprnt.c: 1431: while(--width);
  4148  0006BE  0100               	movlb	0	; () banked
  4149  0006C0  07AF               	decf	printf@width& (0+255),f,b
  4150  0006C2  A0D8               	btfss	status,0,c
  4151  0006C4  07B0               	decf	(printf@width+1)& (0+255),f,b
  4152  0006C6  0100               	movlb	0	; () banked
  4153  0006C8  51AF               	movf	printf@width& (0+255),w,b
  4154  0006CA  0100               	movlb	0	; () banked
  4155  0006CC  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  4156  0006CE  A4D8               	btfss	status,2,c
  4157  0006D0  D7F3               	goto	l3748
  4158  0006D2                     l3752:
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;doprnt.c: 1438: if(flag & 0x03)
  4162  0006D2  C0AE  F0A4         	movff	printf@flag,??_printf
  4163  0006D6  0E03               	movlw	3
  4164  0006D8  0100               	movlb	0	; () banked
  4165  0006DA  17A4               	andwf	??_printf& (0+255),f,b
  4166  0006DC  B4D8               	btfsc	status,2,c
  4167  0006DE  D003               	goto	l3756
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;doprnt.c: 1439: (putch('-') );
  4171  0006E0  0E2D               	movlw	45
  4172  0006E2  ECE2  F015         	call	_putch
  4173  0006E6                     l3756:
  4174                           
  4175                           ;doprnt.c: 1469: }
  4176                           ;doprnt.c: 1472: prec = c;
  4177  0006E6  C0B1  F0AB         	movff	printf@c,printf@prec
  4178                           
  4179                           ;doprnt.c: 1474: while(prec--) {
  4180  0006EA  D05D               	goto	l3770
  4181  0006EC                     l3758:
  4182                           
  4183                           ;doprnt.c: 1486: case 0xC0:
  4184                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4185  0006EC  0100               	movlb	0	; () banked
  4186  0006EE  51AB               	movf	printf@prec& (0+255),w,b
  4187  0006F0  0D02               	mullw	2
  4188  0006F2  0EB2               	movlw	low _dpowers
  4189  0006F4  24F3               	addwf	prodl,w,c
  4190  0006F6  6EF6               	movwf	tblptrl,c
  4191  0006F8  0EFD               	movlw	high _dpowers
  4192  0006FA  20F4               	addwfc	prodh,w,c
  4193  0006FC  6EF7               	movwf	tblptrh,c
  4194  0006FE                     	if	0	;There are less than 3 active tblptr bytes
  4195  0006FE                     	endif
  4196  0006FE  0009               	tblrd		*+
  4197  000700  CFF5 F092          	movff	tablat,___lwdiv@divisor
  4198  000704  000A               	tblrd		*-
  4199  000706  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  4200  00070A  C0AC  F090         	movff	printf@val,___lwdiv@dividend
  4201  00070E  C0AD  F091         	movff	printf@val+1,___lwdiv@dividend+1
  4202  000712  ECA4  F012         	call	___lwdiv	;wreg free
  4203  000716  C090  F097         	movff	?___lwdiv,___lwmod@dividend
  4204  00071A  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
  4205  00071E  0E00               	movlw	0
  4206  000720  0100               	movlb	0	; () banked
  4207  000722  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4208  000724  0E0A               	movlw	10
  4209  000726  6F99               	movwf	___lwmod@divisor& (0+255),b
  4210  000728  EC50  F013         	call	___lwmod	;wreg free
  4211  00072C  0100               	movlb	0	; () banked
  4212  00072E  5197               	movf	?___lwmod& (0+255),w,b
  4213  000730  0F30               	addlw	48
  4214  000732  0100               	movlb	0	; () banked
  4215  000734  6FB1               	movwf	printf@c& (0+255),b
  4216                           
  4217                           ;doprnt.c: 1491: break;
  4218  000736  D033               	goto	l3768
  4219  000738                     l3760:
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;doprnt.c: 1499: {
  4223                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4224  000738  C0AC  F090         	movff	printf@val,___lwdiv@dividend
  4225  00073C  C0AD  F091         	movff	printf@val+1,___lwdiv@dividend+1
  4226  000740  0100               	movlb	0	; () banked
  4227  000742  51AB               	movf	printf@prec& (0+255),w,b
  4228  000744  0D02               	mullw	2
  4229  000746  0EBC               	movlw	low _hexpowers
  4230  000748  24F3               	addwf	prodl,w,c
  4231  00074A  6EF6               	movwf	tblptrl,c
  4232  00074C  0EFD               	movlw	high _hexpowers
  4233  00074E  20F4               	addwfc	prodh,w,c
  4234  000750  6EF7               	movwf	tblptrh,c
  4235  000752                     	if	0	;There are less than 3 active tblptr bytes
  4236  000752                     	endif
  4237  000752  0009               	tblrd		*+
  4238  000754  CFF5 F092          	movff	tablat,___lwdiv@divisor
  4239  000758  000A               	tblrd		*-
  4240  00075A  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  4241  00075E  ECA4  F012         	call	___lwdiv	;wreg free
  4242  000762  0100               	movlb	0	; () banked
  4243  000764  5190               	movf	?___lwdiv& (0+255),w,b
  4244  000766  0B0F               	andlw	15
  4245  000768  0100               	movlb	0	; () banked
  4246  00076A  6FA8               	movwf	printf@idx& (0+255),b
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4250  00076C  0100               	movlb	0	; () banked
  4251  00076E  51A8               	movf	printf@idx& (0+255),w,b
  4252  000770  0D01               	mullw	1
  4253  000772  0E7F               	movlw	low STR_31
  4254  000774  24F3               	addwf	prodl,w,c
  4255  000776  6EF6               	movwf	tblptrl,c
  4256  000778  0EFF               	movlw	high STR_31
  4257  00077A  20F4               	addwfc	prodh,w,c
  4258  00077C  6EF7               	movwf	tblptrh,c
  4259  00077E                     	if	0	;There are less than 3 active tblptr bytes
  4260  00077E                     	endif
  4261  00077E  0008               	tblrd		*
  4262  000780  CFF5 F0B1          	movff	tablat,printf@c
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;doprnt.c: 1523: }
  4266                           
  4267                           ;doprnt.c: 1508: }
  4268                           ;doprnt.c: 1510: break;
  4269  000784  D00C               	goto	l3768
  4270  000786                     l3766:
  4271  000786  0100               	movlb	0	; () banked
  4272  000788  51AE               	movf	printf@flag& (0+255),w,b
  4273  00078A  0BC0               	andlw	192
  4274                           
  4275                           ; Switch size 1, requested type "space"
  4276                           ; Number of cases is 3, Range of values is 0 to 192
  4277                           ; switch strategies available:
  4278                           ; Name         Instructions Cycles
  4279                           ; simple_byte           10     6 (average)
  4280                           ;	Chosen strategy is simple_byte
  4281  00078C  0A00               	xorlw	0	; case 0
  4282  00078E  B4D8               	btfsc	status,2,c
  4283  000790  D7AD               	goto	l3758
  4284  000792  0A80               	xorlw	128	; case 128
  4285  000794  B4D8               	btfsc	status,2,c
  4286  000796  D7D0               	goto	l3760
  4287  000798  0A40               	xorlw	64	; case 192
  4288  00079A  B4D8               	btfsc	status,2,c
  4289  00079C  D7A7               	goto	l3758
  4290  00079E                     l3768:
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;doprnt.c: 1524: (putch(c) );
  4294  00079E  0100               	movlb	0	; () banked
  4295  0007A0  51B1               	movf	printf@c& (0+255),w,b
  4296  0007A2  ECE2  F015         	call	_putch
  4297  0007A6                     l3770:
  4298  0007A6  0100               	movlb	0	; () banked
  4299  0007A8  07AB               	decf	printf@prec& (0+255),f,b
  4300  0007AA  0100               	movlb	0	; () banked
  4301  0007AC  29AB               	incf	printf@prec& (0+255),w,b
  4302  0007AE  A4D8               	btfss	status,2,c
  4303  0007B0  D7EA               	goto	l3766
  4304  0007B2                     l3772:
  4305  0007B2  C09C  FFF6         	movff	printf@f,tblptrl
  4306  0007B6  C09D  FFF7         	movff	printf@f+1,tblptrh
  4307  0007BA  0100               	movlb	0	; () banked
  4308  0007BC  4B9C               	infsnz	printf@f& (0+255),f,b
  4309  0007BE  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4310  0007C0                     	if	0	;tblptru may be non-zero
  4311  0007C0                     	endif
  4312  0007C0                     	if	0	;tblptru may be non-zero
  4313  0007C0                     	endif
  4314  0007C0  0008               	tblrd		*
  4315  0007C2  CFF5 F0B1          	movff	tablat,printf@c
  4316  0007C6  0100               	movlb	0	; () banked
  4317  0007C8  51B1               	movf	printf@c& (0+255),w,b
  4318  0007CA  B4D8               	btfsc	status,2,c
  4319  0007CC  0012               	return	
  4320  0007CE  D61C               	goto	l3642
  4321  0007D0                     __end_of_printf:
  4322                           	opt stack 0
  4323                           tblptru	equ	0xFF8
  4324                           tblptrh	equ	0xFF7
  4325                           tblptrl	equ	0xFF6
  4326                           tablat	equ	0xFF5
  4327                           prodh	equ	0xFF4
  4328                           prodl	equ	0xFF3
  4329                           intcon	equ	0xFF2
  4330                           intcon2	equ	0xFF1
  4331                           intcon3	equ	0xFF0
  4332                           postinc0	equ	0xFEE
  4333                           wreg	equ	0xFE8
  4334                           indf2	equ	0xFDF
  4335                           postinc2	equ	0xFDE
  4336                           postdec2	equ	0xFDD
  4337                           fsr2h	equ	0xFDA
  4338                           fsr2l	equ	0xFD9
  4339                           status	equ	0xFD8
  4340                           
  4341 ;; *************** function _putch *****************
  4342 ;; Defined at:
  4343 ;;		line 31 in file "lcd.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  data            1    wreg     unsigned char 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  data            1   18[BANK0 ] unsigned char 
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;Total ram usage:        1 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    8
  4364 ;; This function calls:
  4365 ;;		_lcdNibble
  4366 ;; This function is called by:
  4367 ;;		_printf
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text12
  4372  002BC4                     __ptext12:
  4373                           	opt stack 0
  4374  002BC4                     _putch:
  4375                           	opt stack 20
  4376                           
  4377                           ;incstack = 0
  4378                           ;putch@data stored from wreg
  4379  002BC4  0100               	movlb	0	; () banked
  4380  002BC6  6F92               	movwf	putch@data& (0+255),b
  4381                           
  4382                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4383  002BC8  848C               	bsf	3980,2,c	;volatile
  4384                           
  4385                           ;lcd.c: 33: lcdNibble(data);
  4386  002BCA  0100               	movlb	0	; () banked
  4387  002BCC  5192               	movf	putch@data& (0+255),w,b
  4388  002BCE  EC81  F013         	call	_lcdNibble
  4389  002BD2  0012               	return		;funcret
  4390  002BD4                     __end_of_putch:
  4391                           	opt stack 0
  4392                           tblptru	equ	0xFF8
  4393                           tblptrh	equ	0xFF7
  4394                           tblptrl	equ	0xFF6
  4395                           tablat	equ	0xFF5
  4396                           prodh	equ	0xFF4
  4397                           prodl	equ	0xFF3
  4398                           intcon	equ	0xFF2
  4399                           intcon2	equ	0xFF1
  4400                           intcon3	equ	0xFF0
  4401                           postinc0	equ	0xFEE
  4402                           wreg	equ	0xFE8
  4403                           indf2	equ	0xFDF
  4404                           postinc2	equ	0xFDE
  4405                           postdec2	equ	0xFDD
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410 ;; *************** function _isdigit *****************
  4411 ;; Defined at:
  4412 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;  c               1    wreg     unsigned char 
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;  c               1   18[BANK0 ] unsigned char 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;		None               void
  4419 ;; Registers used:
  4420 ;;		wreg, status,2, status,0
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;Total ram usage:        3 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    7
  4433 ;; This function calls:
  4434 ;;		Nothing
  4435 ;; This function is called by:
  4436 ;;		_printf
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text13
  4441  002AAC                     __ptext13:
  4442                           	opt stack 0
  4443  002AAC                     _isdigit:
  4444                           	opt stack 21
  4445                           
  4446                           ;incstack = 0
  4447                           ;isdigit@c stored from wreg
  4448  002AAC  0100               	movlb	0	; () banked
  4449  002AAE  6F92               	movwf	isdigit@c& (0+255),b
  4450  002AB0  0E00               	movlw	0
  4451  002AB2  0100               	movlb	0	; () banked
  4452  002AB4  6F91               	movwf	_isdigit$818& (0+255),b
  4453                           
  4454                           ; BSR set to: 0
  4455  002AB6  0E3A               	movlw	58
  4456  002AB8  0100               	movlb	0	; () banked
  4457  002ABA  6192               	cpfslt	isdigit@c& (0+255),b
  4458  002ABC  D007               	goto	l3462
  4459                           
  4460                           ; BSR set to: 0
  4461  002ABE  0E2F               	movlw	47
  4462  002AC0  0100               	movlb	0	; () banked
  4463  002AC2  6592               	cpfsgt	isdigit@c& (0+255),b
  4464  002AC4  D003               	goto	l3462
  4465                           
  4466                           ; BSR set to: 0
  4467  002AC6  0E01               	movlw	1
  4468  002AC8  0100               	movlb	0	; () banked
  4469  002ACA  6F91               	movwf	_isdigit$818& (0+255),b
  4470  002ACC                     l3462:
  4471                           
  4472                           ; BSR set to: 0
  4473  002ACC  C091  F090         	movff	_isdigit$818,??_isdigit
  4474  002AD0  0100               	movlb	0	; () banked
  4475  002AD2  3190               	rrcf	??_isdigit& (0+255),w,b
  4476  002AD4  0012               	return	
  4477  002AD6                     __end_of_isdigit:
  4478                           	opt stack 0
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           prodh	equ	0xFF4
  4484                           prodl	equ	0xFF3
  4485                           intcon	equ	0xFF2
  4486                           intcon2	equ	0xFF1
  4487                           intcon3	equ	0xFF0
  4488                           postinc0	equ	0xFEE
  4489                           wreg	equ	0xFE8
  4490                           indf2	equ	0xFDF
  4491                           postinc2	equ	0xFDE
  4492                           postdec2	equ	0xFDD
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497 ;; *************** function ___wmul *****************
  4498 ;; Defined at:
  4499 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4502 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;  product         2   20[BANK0 ] unsigned int 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  2   16[BANK0 ] unsigned int 
  4507 ;; Registers used:
  4508 ;;		wreg, status,2, status,0, prodl, prodh
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4514 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;Total ram usage:        6 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    7
  4521 ;; This function calls:
  4522 ;;		Nothing
  4523 ;; This function is called by:
  4524 ;;		_printf
  4525 ;;		_servo_rotate1
  4526 ;;		_servo_rotate2
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text14
  4531  002A48                     __ptext14:
  4532                           	opt stack 0
  4533  002A48                     ___wmul:
  4534                           	opt stack 21
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;incstack = 0
  4538  002A48  0100               	movlb	0	; () banked
  4539  002A4A  5190               	movf	___wmul@multiplier& (0+255),w,b
  4540  002A4C  0100               	movlb	0	; () banked
  4541  002A4E  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4542  002A50  CFF3 F094          	movff	prodl,___wmul@product
  4543  002A54  CFF4 F095          	movff	prodh,___wmul@product+1
  4544  002A58  0100               	movlb	0	; () banked
  4545  002A5A  5190               	movf	___wmul@multiplier& (0+255),w,b
  4546  002A5C  0100               	movlb	0	; () banked
  4547  002A5E  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4548  002A60  50F3               	movf	prodl,w,c
  4549  002A62  0100               	movlb	0	; () banked
  4550  002A64  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4551  002A66  0100               	movlb	0	; () banked
  4552  002A68  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4553  002A6A  0100               	movlb	0	; () banked
  4554  002A6C  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4555  002A6E  50F3               	movf	prodl,w,c
  4556  002A70  0100               	movlb	0	; () banked
  4557  002A72  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4558                           
  4559                           ; BSR set to: 0
  4560  002A74  C094  F090         	movff	___wmul@product,?___wmul
  4561  002A78  C095  F091         	movff	___wmul@product+1,?___wmul+1
  4562  002A7C  0012               	return	
  4563  002A7E                     __end_of___wmul:
  4564                           	opt stack 0
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           intcon	equ	0xFF2
  4572                           intcon2	equ	0xFF1
  4573                           intcon3	equ	0xFF0
  4574                           postinc0	equ	0xFEE
  4575                           wreg	equ	0xFE8
  4576                           indf2	equ	0xFDF
  4577                           postinc2	equ	0xFDE
  4578                           postdec2	equ	0xFDD
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8
  4582                           
  4583 ;; *************** function ___lwmod *****************
  4584 ;; Defined at:
  4585 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;  dividend        2   23[BANK0 ] unsigned int 
  4588 ;;  divisor         2   25[BANK0 ] unsigned int 
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  counter         1   27[BANK0 ] unsigned char 
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  2   23[BANK0 ] unsigned int 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4600 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;Total ram usage:        5 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    7
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_printf
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text15
  4615  0026A0                     __ptext15:
  4616                           	opt stack 0
  4617  0026A0                     ___lwmod:
  4618                           	opt stack 21
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;incstack = 0
  4622  0026A0  0100               	movlb	0	; () banked
  4623  0026A2  5199               	movf	___lwmod@divisor& (0+255),w,b
  4624  0026A4  0100               	movlb	0	; () banked
  4625  0026A6  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4626  0026A8  B4D8               	btfsc	status,2,c
  4627  0026AA  D026               	goto	l888
  4628                           
  4629                           ; BSR set to: 0
  4630  0026AC  0E01               	movlw	1
  4631  0026AE  0100               	movlb	0	; () banked
  4632  0026B0  6F9B               	movwf	___lwmod@counter& (0+255),b
  4633  0026B2  D006               	goto	l3510
  4634  0026B4                     l3508:
  4635                           
  4636                           ; BSR set to: 0
  4637  0026B4  0100               	movlb	0	; () banked
  4638  0026B6  90D8               	bcf	status,0,c
  4639  0026B8  3799               	rlcf	___lwmod@divisor& (0+255),f,b
  4640  0026BA  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4641  0026BC  0100               	movlb	0	; () banked
  4642  0026BE  2B9B               	incf	___lwmod@counter& (0+255),f,b
  4643  0026C0                     l3510:
  4644                           
  4645                           ; BSR set to: 0
  4646  0026C0  0100               	movlb	0	; () banked
  4647  0026C2  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4648  0026C4  D7F7               	goto	l3508
  4649  0026C6                     l3512:
  4650                           
  4651                           ; BSR set to: 0
  4652  0026C6  0100               	movlb	0	; () banked
  4653  0026C8  5199               	movf	___lwmod@divisor& (0+255),w,b
  4654  0026CA  0100               	movlb	0	; () banked
  4655  0026CC  5D97               	subwf	___lwmod@dividend& (0+255),w,b
  4656  0026CE  0100               	movlb	0	; () banked
  4657  0026D0  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4658  0026D2  0100               	movlb	0	; () banked
  4659  0026D4  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4660  0026D6  A0D8               	btfss	status,0,c
  4661  0026D8  D008               	goto	l3516
  4662                           
  4663                           ; BSR set to: 0
  4664  0026DA  0100               	movlb	0	; () banked
  4665  0026DC  5199               	movf	___lwmod@divisor& (0+255),w,b
  4666  0026DE  0100               	movlb	0	; () banked
  4667  0026E0  5F97               	subwf	___lwmod@dividend& (0+255),f,b
  4668  0026E2  0100               	movlb	0	; () banked
  4669  0026E4  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4670  0026E6  0100               	movlb	0	; () banked
  4671  0026E8  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4672  0026EA                     l3516:
  4673                           
  4674                           ; BSR set to: 0
  4675  0026EA  0100               	movlb	0	; () banked
  4676  0026EC  90D8               	bcf	status,0,c
  4677  0026EE  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4678  0026F0  3399               	rrcf	___lwmod@divisor& (0+255),f,b
  4679                           
  4680                           ; BSR set to: 0
  4681  0026F2  0100               	movlb	0	; () banked
  4682  0026F4  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  4683  0026F6  D7E7               	goto	l3512
  4684  0026F8                     l888:
  4685                           
  4686                           ; BSR set to: 0
  4687  0026F8  C097  F097         	movff	___lwmod@dividend,?___lwmod
  4688  0026FC  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
  4689                           
  4690                           ; BSR set to: 0
  4691  002700  0012               	return		;funcret
  4692  002702                     __end_of___lwmod:
  4693                           	opt stack 0
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           intcon	equ	0xFF2
  4701                           intcon2	equ	0xFF1
  4702                           intcon3	equ	0xFF0
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           indf2	equ	0xFDF
  4706                           postinc2	equ	0xFDE
  4707                           postdec2	equ	0xFDD
  4708                           fsr2h	equ	0xFDA
  4709                           fsr2l	equ	0xFD9
  4710                           status	equ	0xFD8
  4711                           
  4712 ;; *************** function ___lwdiv *****************
  4713 ;; Defined at:
  4714 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  dividend        2   16[BANK0 ] unsigned int 
  4717 ;;  divisor         2   18[BANK0 ] unsigned int 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  quotient        2   20[BANK0 ] unsigned int 
  4720 ;;  counter         1   22[BANK0 ] unsigned char 
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  2   16[BANK0 ] unsigned int 
  4723 ;; Registers used:
  4724 ;;		wreg, status,2, status,0
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4730 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;Total ram usage:        7 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    7
  4737 ;; This function calls:
  4738 ;;		Nothing
  4739 ;; This function is called by:
  4740 ;;		_printf
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text16
  4745  002548                     __ptext16:
  4746                           	opt stack 0
  4747  002548                     ___lwdiv:
  4748                           	opt stack 21
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;incstack = 0
  4752  002548  0E00               	movlw	0
  4753  00254A  0100               	movlb	0	; () banked
  4754  00254C  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4755  00254E  0E00               	movlw	0
  4756  002550  6F94               	movwf	___lwdiv@quotient& (0+255),b
  4757                           
  4758                           ; BSR set to: 0
  4759  002552  0100               	movlb	0	; () banked
  4760  002554  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4761  002556  0100               	movlb	0	; () banked
  4762  002558  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4763  00255A  B4D8               	btfsc	status,2,c
  4764  00255C  D02C               	goto	l878
  4765                           
  4766                           ; BSR set to: 0
  4767  00255E  0E01               	movlw	1
  4768  002560  0100               	movlb	0	; () banked
  4769  002562  6F96               	movwf	___lwdiv@counter& (0+255),b
  4770  002564  D006               	goto	l3490
  4771  002566                     l3488:
  4772                           
  4773                           ; BSR set to: 0
  4774  002566  0100               	movlb	0	; () banked
  4775  002568  90D8               	bcf	status,0,c
  4776  00256A  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
  4777  00256C  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4778  00256E  0100               	movlb	0	; () banked
  4779  002570  2B96               	incf	___lwdiv@counter& (0+255),f,b
  4780  002572                     l3490:
  4781                           
  4782                           ; BSR set to: 0
  4783  002572  0100               	movlb	0	; () banked
  4784  002574  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4785  002576  D7F7               	goto	l3488
  4786  002578                     l3492:
  4787                           
  4788                           ; BSR set to: 0
  4789  002578  0100               	movlb	0	; () banked
  4790  00257A  90D8               	bcf	status,0,c
  4791  00257C  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  4792  00257E  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4793                           
  4794                           ; BSR set to: 0
  4795  002580  0100               	movlb	0	; () banked
  4796  002582  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4797  002584  0100               	movlb	0	; () banked
  4798  002586  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
  4799  002588  0100               	movlb	0	; () banked
  4800  00258A  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4801  00258C  0100               	movlb	0	; () banked
  4802  00258E  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4803  002590  A0D8               	btfss	status,0,c
  4804  002592  D00A               	goto	l3500
  4805                           
  4806                           ; BSR set to: 0
  4807  002594  0100               	movlb	0	; () banked
  4808  002596  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4809  002598  0100               	movlb	0	; () banked
  4810  00259A  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
  4811  00259C  0100               	movlb	0	; () banked
  4812  00259E  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4813  0025A0  0100               	movlb	0	; () banked
  4814  0025A2  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4815                           
  4816                           ; BSR set to: 0
  4817  0025A4  0100               	movlb	0	; () banked
  4818  0025A6  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  4819  0025A8                     l3500:
  4820                           
  4821                           ; BSR set to: 0
  4822  0025A8  0100               	movlb	0	; () banked
  4823  0025AA  90D8               	bcf	status,0,c
  4824  0025AC  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4825  0025AE  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
  4826                           
  4827                           ; BSR set to: 0
  4828  0025B0  0100               	movlb	0	; () banked
  4829  0025B2  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  4830  0025B4  D7E1               	goto	l3492
  4831  0025B6                     l878:
  4832                           
  4833                           ; BSR set to: 0
  4834  0025B6  C094  F090         	movff	___lwdiv@quotient,?___lwdiv
  4835  0025BA  C095  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4836                           
  4837                           ; BSR set to: 0
  4838  0025BE  0012               	return		;funcret
  4839  0025C0                     __end_of___lwdiv:
  4840                           	opt stack 0
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           intcon	equ	0xFF2
  4848                           intcon2	equ	0xFF1
  4849                           intcon3	equ	0xFF0
  4850                           postinc0	equ	0xFEE
  4851                           wreg	equ	0xFE8
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           postdec2	equ	0xFDD
  4855                           fsr2h	equ	0xFDA
  4856                           fsr2l	equ	0xFD9
  4857                           status	equ	0xFD8
  4858                           
  4859 ;; *************** function _lcdInst *****************
  4860 ;; Defined at:
  4861 ;;		line 26 in file "lcd.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  data            1    wreg     unsigned char 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;  data            1   18[BANK0 ] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;Total ram usage:        1 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    8
  4882 ;; This function calls:
  4883 ;;		_lcdNibble
  4884 ;; This function is called by:
  4885 ;;		_initLCD
  4886 ;;		_standby
  4887 ;;		_date_time
  4888 ;;		_bottle_count
  4889 ;;		_bottle_time
  4890 ;;		_operation
  4891 ;;		_operationend
  4892 ;;		_emergencystop
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text17
  4897  002BD4                     __ptext17:
  4898                           	opt stack 0
  4899  002BD4                     _lcdInst:
  4900                           	opt stack 21
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;incstack = 0
  4904                           ;lcdInst@data stored from wreg
  4905  002BD4  0100               	movlb	0	; () banked
  4906  002BD6  6F92               	movwf	lcdInst@data& (0+255),b
  4907                           
  4908                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4909  002BD8  948C               	bcf	3980,2,c	;volatile
  4910                           
  4911                           ;lcd.c: 28: lcdNibble(data);
  4912  002BDA  0100               	movlb	0	; () banked
  4913  002BDC  5192               	movf	lcdInst@data& (0+255),w,b
  4914  002BDE  EC81  F013         	call	_lcdNibble
  4915  002BE2  0012               	return		;funcret
  4916  002BE4                     __end_of_lcdInst:
  4917                           	opt stack 0
  4918                           tblptru	equ	0xFF8
  4919                           tblptrh	equ	0xFF7
  4920                           tblptrl	equ	0xFF6
  4921                           tablat	equ	0xFF5
  4922                           prodh	equ	0xFF4
  4923                           prodl	equ	0xFF3
  4924                           intcon	equ	0xFF2
  4925                           intcon2	equ	0xFF1
  4926                           intcon3	equ	0xFF0
  4927                           postinc0	equ	0xFEE
  4928                           wreg	equ	0xFE8
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           postdec2	equ	0xFDD
  4932                           fsr2h	equ	0xFDA
  4933                           fsr2l	equ	0xFD9
  4934                           status	equ	0xFD8
  4935                           
  4936 ;; *************** function _lcdNibble *****************
  4937 ;; Defined at:
  4938 ;;		line 36 in file "lcd.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;  data            1    wreg     unsigned char 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  data            1   17[BANK0 ] unsigned char 
  4943 ;;  temp            1   16[BANK0 ] unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg, status,2, status,0
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;Total ram usage:        2 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    7
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_lcdInst
  4964 ;;		_putch
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text18
  4969  002702                     __ptext18:
  4970                           	opt stack 0
  4971  002702                     _lcdNibble:
  4972                           	opt stack 20
  4973                           
  4974                           ;incstack = 0
  4975                           ;lcdNibble@data stored from wreg
  4976  002702  0100               	movlb	0	; () banked
  4977  002704  6F91               	movwf	lcdNibble@data& (0+255),b
  4978                           
  4979                           ;lcd.c: 38: char temp = data & 0xF0;
  4980  002706  0100               	movlb	0	; () banked
  4981  002708  5191               	movf	lcdNibble@data& (0+255),w,b
  4982  00270A  0BF0               	andlw	240
  4983  00270C  0100               	movlb	0	; () banked
  4984  00270E  6F90               	movwf	lcdNibble@temp& (0+255),b
  4985                           
  4986                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4987  002710  508C               	movf	3980,w,c	;volatile
  4988  002712  0B0F               	andlw	15
  4989  002714  6E8C               	movwf	3980,c	;volatile
  4990                           
  4991                           ;lcd.c: 40: LATD = temp | LATD;
  4992  002716  0100               	movlb	0	; () banked
  4993  002718  5190               	movf	lcdNibble@temp& (0+255),w,b
  4994  00271A  108C               	iorwf	3980,w,c	;volatile
  4995  00271C  6E8C               	movwf	3980,c	;volatile
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4999  00271E  968C               	bcf	3980,3,c	;volatile
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5003  002720  0E19               	movlw	25
  5004  002722                     u4177:
  5005  002722  2EE8               	decfsz	wreg,f,c
  5006  002724  D7FE               	bra	u4177
  5007                           
  5008                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  5009  002726  868C               	bsf	3980,3,c	;volatile
  5010                           
  5011                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5012  002728  0E19               	movlw	25
  5013  00272A                     u4187:
  5014  00272A  2EE8               	decfsz	wreg,f,c
  5015  00272C  D7FE               	bra	u4187
  5016                           
  5017                           ;lcd.c: 47: data = data << 4;
  5018  00272E  0100               	movlb	0	; () banked
  5019  002730  3991               	swapf	lcdNibble@data& (0+255),w,b
  5020  002732  0BF0               	andlw	240
  5021  002734  0100               	movlb	0	; () banked
  5022  002736  6F91               	movwf	lcdNibble@data& (0+255),b
  5023                           
  5024                           ;lcd.c: 49: temp = data & 0xF0;
  5025  002738  0100               	movlb	0	; () banked
  5026  00273A  5191               	movf	lcdNibble@data& (0+255),w,b
  5027  00273C  0BF0               	andlw	240
  5028  00273E  0100               	movlb	0	; () banked
  5029  002740  6F90               	movwf	lcdNibble@temp& (0+255),b
  5030                           
  5031                           ;lcd.c: 50: LATD = LATD & 0x0F;
  5032  002742  508C               	movf	3980,w,c	;volatile
  5033  002744  0B0F               	andlw	15
  5034  002746  6E8C               	movwf	3980,c	;volatile
  5035                           
  5036                           ;lcd.c: 51: LATD = temp | LATD;
  5037  002748  0100               	movlb	0	; () banked
  5038  00274A  5190               	movf	lcdNibble@temp& (0+255),w,b
  5039  00274C  108C               	iorwf	3980,w,c	;volatile
  5040  00274E  6E8C               	movwf	3980,c	;volatile
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  5044  002750  968C               	bcf	3980,3,c	;volatile
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5048  002752  0E19               	movlw	25
  5049  002754                     u4197:
  5050  002754  2EE8               	decfsz	wreg,f,c
  5051  002756  D7FE               	bra	u4197
  5052                           
  5053                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  5054  002758  868C               	bsf	3980,3,c	;volatile
  5055                           
  5056                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5057  00275A  0E19               	movlw	25
  5058  00275C                     u4207:
  5059  00275C  2EE8               	decfsz	wreg,f,c
  5060  00275E  D7FE               	bra	u4207
  5061  002760  0012               	return		;funcret
  5062  002762                     __end_of_lcdNibble:
  5063                           	opt stack 0
  5064                           tblptru	equ	0xFF8
  5065                           tblptrh	equ	0xFF7
  5066                           tblptrl	equ	0xFF6
  5067                           tablat	equ	0xFF5
  5068                           prodh	equ	0xFF4
  5069                           prodl	equ	0xFF3
  5070                           intcon	equ	0xFF2
  5071                           intcon2	equ	0xFF1
  5072                           intcon3	equ	0xFF0
  5073                           postinc0	equ	0xFEE
  5074                           wreg	equ	0xFE8
  5075                           indf2	equ	0xFDF
  5076                           postinc2	equ	0xFDE
  5077                           postdec2	equ	0xFDD
  5078                           fsr2h	equ	0xFDA
  5079                           fsr2l	equ	0xFD9
  5080                           status	equ	0xFD8
  5081                           
  5082 ;; *************** function ___awmod *****************
  5083 ;; Defined at:
  5084 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  dividend        2   16[BANK0 ] int 
  5087 ;;  divisor         2   18[BANK0 ] int 
  5088 ;; Auto vars:     Size  Location     Type
  5089 ;;  sign            1   21[BANK0 ] unsigned char 
  5090 ;;  counter         1   20[BANK0 ] unsigned char 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  2   16[BANK0 ] int 
  5093 ;; Registers used:
  5094 ;;		wreg, status,2, status,0
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5100 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;Total ram usage:        6 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    7
  5107 ;; This function calls:
  5108 ;;		Nothing
  5109 ;; This function is called by:
  5110 ;;		_bottle_count
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text19
  5115  002272                     __ptext19:
  5116                           	opt stack 0
  5117  002272                     ___awmod:
  5118                           	opt stack 22
  5119                           
  5120                           ;incstack = 0
  5121  002272  0E00               	movlw	0
  5122  002274  0100               	movlb	0	; () banked
  5123  002276  6F95               	movwf	___awmod@sign& (0+255),b
  5124                           
  5125                           ; BSR set to: 0
  5126  002278  0100               	movlb	0	; () banked
  5127  00227A  AF91               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5128  00227C  D008               	goto	l3866
  5129                           
  5130                           ; BSR set to: 0
  5131  00227E  0100               	movlb	0	; () banked
  5132  002280  6D90               	negf	___awmod@dividend& (0+255),b
  5133  002282  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  5134  002284  B0D8               	btfsc	status,0,c
  5135  002286  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  5136                           
  5137                           ; BSR set to: 0
  5138  002288  0E01               	movlw	1
  5139  00228A  0100               	movlb	0	; () banked
  5140  00228C  6F95               	movwf	___awmod@sign& (0+255),b
  5141  00228E                     l3866:
  5142                           
  5143                           ; BSR set to: 0
  5144  00228E  0100               	movlb	0	; () banked
  5145  002290  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5146  002292  D005               	goto	l3870
  5147                           
  5148                           ; BSR set to: 0
  5149  002294  0100               	movlb	0	; () banked
  5150  002296  6D92               	negf	___awmod@divisor& (0+255),b
  5151  002298  1F93               	comf	(___awmod@divisor+1)& (0+255),f,b
  5152  00229A  B0D8               	btfsc	status,0,c
  5153  00229C  2B93               	incf	(___awmod@divisor+1)& (0+255),f,b
  5154  00229E                     l3870:
  5155                           
  5156                           ; BSR set to: 0
  5157  00229E  0100               	movlb	0	; () banked
  5158  0022A0  5192               	movf	___awmod@divisor& (0+255),w,b
  5159  0022A2  0100               	movlb	0	; () banked
  5160  0022A4  1193               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5161  0022A6  B4D8               	btfsc	status,2,c
  5162  0022A8  D026               	goto	l3886
  5163                           
  5164                           ; BSR set to: 0
  5165  0022AA  0E01               	movlw	1
  5166  0022AC  0100               	movlb	0	; () banked
  5167  0022AE  6F94               	movwf	___awmod@counter& (0+255),b
  5168  0022B0  D006               	goto	l3876
  5169  0022B2                     l3874:
  5170                           
  5171                           ; BSR set to: 0
  5172  0022B2  0100               	movlb	0	; () banked
  5173  0022B4  90D8               	bcf	status,0,c
  5174  0022B6  3792               	rlcf	___awmod@divisor& (0+255),f,b
  5175  0022B8  3793               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5176  0022BA  0100               	movlb	0	; () banked
  5177  0022BC  2B94               	incf	___awmod@counter& (0+255),f,b
  5178  0022BE                     l3876:
  5179                           
  5180                           ; BSR set to: 0
  5181  0022BE  0100               	movlb	0	; () banked
  5182  0022C0  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5183  0022C2  D7F7               	goto	l3874
  5184  0022C4                     l3878:
  5185                           
  5186                           ; BSR set to: 0
  5187  0022C4  0100               	movlb	0	; () banked
  5188  0022C6  5192               	movf	___awmod@divisor& (0+255),w,b
  5189  0022C8  0100               	movlb	0	; () banked
  5190  0022CA  5D90               	subwf	___awmod@dividend& (0+255),w,b
  5191  0022CC  0100               	movlb	0	; () banked
  5192  0022CE  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  5193  0022D0  0100               	movlb	0	; () banked
  5194  0022D2  5991               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5195  0022D4  A0D8               	btfss	status,0,c
  5196  0022D6  D008               	goto	l3882
  5197                           
  5198                           ; BSR set to: 0
  5199  0022D8  0100               	movlb	0	; () banked
  5200  0022DA  5192               	movf	___awmod@divisor& (0+255),w,b
  5201  0022DC  0100               	movlb	0	; () banked
  5202  0022DE  5F90               	subwf	___awmod@dividend& (0+255),f,b
  5203  0022E0  0100               	movlb	0	; () banked
  5204  0022E2  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  5205  0022E4  0100               	movlb	0	; () banked
  5206  0022E6  5B91               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5207  0022E8                     l3882:
  5208                           
  5209                           ; BSR set to: 0
  5210  0022E8  0100               	movlb	0	; () banked
  5211  0022EA  90D8               	bcf	status,0,c
  5212  0022EC  3393               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5213  0022EE  3392               	rrcf	___awmod@divisor& (0+255),f,b
  5214                           
  5215                           ; BSR set to: 0
  5216  0022F0  0100               	movlb	0	; () banked
  5217  0022F2  2F94               	decfsz	___awmod@counter& (0+255),f,b
  5218  0022F4  D7E7               	goto	l3878
  5219  0022F6                     l3886:
  5220                           
  5221                           ; BSR set to: 0
  5222  0022F6  0100               	movlb	0	; () banked
  5223  0022F8  5195               	movf	___awmod@sign& (0+255),w,b
  5224  0022FA  0100               	movlb	0	; () banked
  5225  0022FC  B4D8               	btfsc	status,2,c
  5226  0022FE  D005               	goto	l3890
  5227                           
  5228                           ; BSR set to: 0
  5229  002300  0100               	movlb	0	; () banked
  5230  002302  6D90               	negf	___awmod@dividend& (0+255),b
  5231  002304  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  5232  002306  B0D8               	btfsc	status,0,c
  5233  002308  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  5234  00230A                     l3890:
  5235                           
  5236                           ; BSR set to: 0
  5237  00230A  C090  F090         	movff	___awmod@dividend,?___awmod
  5238  00230E  C091  F091         	movff	___awmod@dividend+1,?___awmod+1
  5239  002312  0012               	return	
  5240  002314                     __end_of___awmod:
  5241                           	opt stack 0
  5242                           tblptru	equ	0xFF8
  5243                           tblptrh	equ	0xFF7
  5244                           tblptrl	equ	0xFF6
  5245                           tablat	equ	0xFF5
  5246                           prodh	equ	0xFF4
  5247                           prodl	equ	0xFF3
  5248                           intcon	equ	0xFF2
  5249                           intcon2	equ	0xFF1
  5250                           intcon3	equ	0xFF0
  5251                           postinc0	equ	0xFEE
  5252                           wreg	equ	0xFE8
  5253                           indf2	equ	0xFDF
  5254                           postinc2	equ	0xFDE
  5255                           postdec2	equ	0xFDD
  5256                           fsr2h	equ	0xFDA
  5257                           fsr2l	equ	0xFD9
  5258                           status	equ	0xFD8
  5259                           
  5260 ;; *************** function _I2C_Master_Init *****************
  5261 ;; Defined at:
  5262 ;;		line 14 in file "I2C.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;  c               4   29[BANK0 ] const unsigned long 
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;		None
  5267 ;; Return value:  Size  Location     Type
  5268 ;;                  1    wreg      void 
  5269 ;; Registers used:
  5270 ;;		wreg, status,2, status,0, cstack
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5276 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;Total ram usage:        8 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; Hardware stack levels required when called:    8
  5283 ;; This function calls:
  5284 ;;		___lldiv
  5285 ;; This function is called by:
  5286 ;;		_main
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           	psect	text20
  5291  002762                     __ptext20:
  5292                           	opt stack 0
  5293  002762                     _I2C_Master_Init:
  5294                           	opt stack 22
  5295                           
  5296                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;incstack = 0
  5300  002762  0E00               	movlw	0
  5301  002764  6EC7               	movwf	4039,c	;volatile
  5302                           
  5303                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  5304  002766  0E28               	movlw	40
  5305  002768  6EC6               	movwf	4038,c	;volatile
  5306                           
  5307                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  5308  00276A  0E00               	movlw	0
  5309  00276C  6EC5               	movwf	4037,c	;volatile
  5310                           
  5311                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
  5312  00276E  0E80               	movlw	128
  5313  002770  0100               	movlb	0	; () banked
  5314  002772  6F90               	movwf	___lldiv@dividend& (0+255),b
  5315  002774  0E96               	movlw	150
  5316  002776  6F91               	movwf	(___lldiv@dividend+1)& (0+255),b
  5317  002778  0E98               	movlw	152
  5318  00277A  6F92               	movwf	(___lldiv@dividend+2)& (0+255),b
  5319  00277C  0E00               	movlw	0
  5320  00277E  6F93               	movwf	(___lldiv@dividend+3)& (0+255),b
  5321  002780  C09D  F0A1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5322  002784  C09E  F0A2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5323  002788  C09F  F0A3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5324  00278C  C0A0  F0A4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5325  002790  0E02               	movlw	2
  5326  002792                     u3595:
  5327  002792  90D8               	bcf	status,0,c
  5328  002794  0100               	movlb	0	; () banked
  5329  002796  37A1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5330  002798  37A2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5331  00279A  37A3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5332  00279C  37A4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5333  00279E  2EE8               	decfsz	wreg,f,c
  5334  0027A0  D7F8               	goto	u3595
  5335  0027A2  C0A1  F094         	movff	??_I2C_Master_Init,___lldiv@divisor
  5336  0027A6  C0A2  F095         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5337  0027AA  C0A3  F096         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5338  0027AE  C0A4  F097         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5339  0027B2  EC84  F010         	call	___lldiv	;wreg free
  5340  0027B6  0100               	movlb	0	; () banked
  5341  0027B8  0590               	decf	?___lldiv& (0+255),w,b
  5342  0027BA  6EC8               	movwf	4040,c	;volatile
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;I2C.c: 21: TRISC3 = 1;
  5346  0027BC  8694               	bsf	3988,3,c	;volatile
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;I2C.c: 22: TRISC4 = 1;
  5350  0027BE  8894               	bsf	3988,4,c	;volatile
  5351                           
  5352                           ; BSR set to: 0
  5353  0027C0  0012               	return		;funcret
  5354  0027C2                     __end_of_I2C_Master_Init:
  5355                           	opt stack 0
  5356                           tblptru	equ	0xFF8
  5357                           tblptrh	equ	0xFF7
  5358                           tblptrl	equ	0xFF6
  5359                           tablat	equ	0xFF5
  5360                           prodh	equ	0xFF4
  5361                           prodl	equ	0xFF3
  5362                           intcon	equ	0xFF2
  5363                           intcon2	equ	0xFF1
  5364                           intcon3	equ	0xFF0
  5365                           postinc0	equ	0xFEE
  5366                           wreg	equ	0xFE8
  5367                           indf2	equ	0xFDF
  5368                           postinc2	equ	0xFDE
  5369                           postdec2	equ	0xFDD
  5370                           fsr2h	equ	0xFDA
  5371                           fsr2l	equ	0xFD9
  5372                           status	equ	0xFD8
  5373                           
  5374 ;; *************** function ___lldiv *****************
  5375 ;; Defined at:
  5376 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;  dividend        4   16[BANK0 ] unsigned long 
  5379 ;;  divisor         4   20[BANK0 ] unsigned long 
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;  quotient        4   24[BANK0 ] unsigned long 
  5382 ;;  counter         1   28[BANK0 ] unsigned char 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  4   16[BANK0 ] unsigned long 
  5385 ;; Registers used:
  5386 ;;		wreg, status,2, status,0
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5392 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5393 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;Total ram usage:       13 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    7
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		_I2C_Master_Init
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           	psect	text21
  5407  002108                     __ptext21:
  5408                           	opt stack 0
  5409  002108                     ___lldiv:
  5410                           	opt stack 22
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;incstack = 0
  5414  002108  0E00               	movlw	0
  5415  00210A  0100               	movlb	0	; () banked
  5416  00210C  6F98               	movwf	___lldiv@quotient& (0+255),b
  5417  00210E  0E00               	movlw	0
  5418  002110  6F99               	movwf	(___lldiv@quotient+1)& (0+255),b
  5419  002112  0E00               	movlw	0
  5420  002114  6F9A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5421  002116  0E00               	movlw	0
  5422  002118  6F9B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5423                           
  5424                           ; BSR set to: 0
  5425  00211A  0100               	movlb	0	; () banked
  5426  00211C  5194               	movf	___lldiv@divisor& (0+255),w,b
  5427  00211E  0100               	movlb	0	; () banked
  5428  002120  1195               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5429  002122  0100               	movlb	0	; () banked
  5430  002124  1196               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5431  002126  0100               	movlb	0	; () banked
  5432  002128  1197               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5433  00212A  B4D8               	btfsc	status,2,c
  5434  00212C  D042               	goto	l825
  5435                           
  5436                           ; BSR set to: 0
  5437  00212E  0E01               	movlw	1
  5438  002130  0100               	movlb	0	; () banked
  5439  002132  6F9C               	movwf	___lldiv@counter& (0+255),b
  5440  002134  D008               	goto	l3902
  5441  002136                     l3900:
  5442                           
  5443                           ; BSR set to: 0
  5444  002136  0100               	movlb	0	; () banked
  5445  002138  90D8               	bcf	status,0,c
  5446  00213A  3794               	rlcf	___lldiv@divisor& (0+255),f,b
  5447  00213C  3795               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5448  00213E  3796               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5449  002140  3797               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5450  002142  0100               	movlb	0	; () banked
  5451  002144  2B9C               	incf	___lldiv@counter& (0+255),f,b
  5452  002146                     l3902:
  5453                           
  5454                           ; BSR set to: 0
  5455  002146  0100               	movlb	0	; () banked
  5456  002148  AF97               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5457  00214A  D7F5               	goto	l3900
  5458  00214C                     l3904:
  5459                           
  5460                           ; BSR set to: 0
  5461  00214C  0100               	movlb	0	; () banked
  5462  00214E  90D8               	bcf	status,0,c
  5463  002150  3798               	rlcf	___lldiv@quotient& (0+255),f,b
  5464  002152  3799               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5465  002154  379A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5466  002156  379B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5467                           
  5468                           ; BSR set to: 0
  5469  002158  0100               	movlb	0	; () banked
  5470  00215A  5194               	movf	___lldiv@divisor& (0+255),w,b
  5471  00215C  0100               	movlb	0	; () banked
  5472  00215E  5D90               	subwf	___lldiv@dividend& (0+255),w,b
  5473  002160  0100               	movlb	0	; () banked
  5474  002162  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5475  002164  0100               	movlb	0	; () banked
  5476  002166  5991               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5477  002168  0100               	movlb	0	; () banked
  5478  00216A  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5479  00216C  0100               	movlb	0	; () banked
  5480  00216E  5992               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5481  002170  0100               	movlb	0	; () banked
  5482  002172  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5483  002174  0100               	movlb	0	; () banked
  5484  002176  5993               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5485  002178  A0D8               	btfss	status,0,c
  5486  00217A  D012               	goto	l3912
  5487                           
  5488                           ; BSR set to: 0
  5489  00217C  0100               	movlb	0	; () banked
  5490  00217E  5194               	movf	___lldiv@divisor& (0+255),w,b
  5491  002180  0100               	movlb	0	; () banked
  5492  002182  5F90               	subwf	___lldiv@dividend& (0+255),f,b
  5493  002184  0100               	movlb	0	; () banked
  5494  002186  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5495  002188  0100               	movlb	0	; () banked
  5496  00218A  5B91               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5497  00218C  0100               	movlb	0	; () banked
  5498  00218E  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5499  002190  0100               	movlb	0	; () banked
  5500  002192  5B92               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5501  002194  0100               	movlb	0	; () banked
  5502  002196  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5503  002198  0100               	movlb	0	; () banked
  5504  00219A  5B93               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5505                           
  5506                           ; BSR set to: 0
  5507  00219C  0100               	movlb	0	; () banked
  5508  00219E  8198               	bsf	___lldiv@quotient& (0+255),0,b
  5509  0021A0                     l3912:
  5510                           
  5511                           ; BSR set to: 0
  5512  0021A0  0100               	movlb	0	; () banked
  5513  0021A2  90D8               	bcf	status,0,c
  5514  0021A4  3397               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5515  0021A6  3396               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5516  0021A8  3395               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5517  0021AA  3394               	rrcf	___lldiv@divisor& (0+255),f,b
  5518                           
  5519                           ; BSR set to: 0
  5520  0021AC  0100               	movlb	0	; () banked
  5521  0021AE  2F9C               	decfsz	___lldiv@counter& (0+255),f,b
  5522  0021B0  D7CD               	goto	l3904
  5523  0021B2                     l825:
  5524                           
  5525                           ; BSR set to: 0
  5526  0021B2  C098  F090         	movff	___lldiv@quotient,?___lldiv
  5527  0021B6  C099  F091         	movff	___lldiv@quotient+1,?___lldiv+1
  5528  0021BA  C09A  F092         	movff	___lldiv@quotient+2,?___lldiv+2
  5529  0021BE  C09B  F093         	movff	___lldiv@quotient+3,?___lldiv+3
  5530                           
  5531                           ; BSR set to: 0
  5532  0021C2  0012               	return		;funcret
  5533  0021C4                     __end_of___lldiv:
  5534                           	opt stack 0
  5535                           tblptru	equ	0xFF8
  5536                           tblptrh	equ	0xFF7
  5537                           tblptrl	equ	0xFF6
  5538                           tablat	equ	0xFF5
  5539                           prodh	equ	0xFF4
  5540                           prodl	equ	0xFF3
  5541                           intcon	equ	0xFF2
  5542                           intcon2	equ	0xFF1
  5543                           intcon3	equ	0xFF0
  5544                           postinc0	equ	0xFEE
  5545                           wreg	equ	0xFE8
  5546                           indf2	equ	0xFDF
  5547                           postinc2	equ	0xFDE
  5548                           postdec2	equ	0xFDD
  5549                           fsr2h	equ	0xFDA
  5550                           fsr2l	equ	0xFD9
  5551                           status	equ	0xFD8
  5552                           
  5553 ;; *************** function _I2C_ColorSens_Init *****************
  5554 ;; Defined at:
  5555 ;;		line 54 in file "I2C.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;		None
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;		None
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  1    wreg      void 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0, cstack
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;Total ram usage:        1 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    9
  5576 ;; This function calls:
  5577 ;;		_I2C_Master_Start
  5578 ;;		_I2C_Master_Stop
  5579 ;;		_I2C_Master_Write
  5580 ;; This function is called by:
  5581 ;;		_main
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           	psect	text22
  5586  00119A                     __ptext22:
  5587                           	opt stack 0
  5588  00119A                     _I2C_ColorSens_Init:
  5589                           	opt stack 21
  5590                           
  5591                           ;I2C.c: 55: I2C_Master_Start();
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;incstack = 0
  5595  00119A  EC0C  F016         	call	_I2C_Master_Start	;wreg free
  5596                           
  5597                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  5598  00119E  0E00               	movlw	0
  5599  0011A0  0100               	movlb	0	; () banked
  5600  0011A2  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5601  0011A4  0E52               	movlw	82
  5602  0011A6  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5603  0011A8  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5604                           
  5605                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  5606  0011AC  0E00               	movlw	0
  5607  0011AE  0100               	movlb	0	; () banked
  5608  0011B0  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5609  0011B2  0E80               	movlw	128
  5610  0011B4  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5611  0011B6  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5612                           
  5613                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  5614  0011BA  0E00               	movlw	0
  5615  0011BC  0100               	movlb	0	; () banked
  5616  0011BE  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5617  0011C0  0E01               	movlw	1
  5618  0011C2  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5619  0011C4  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5620                           
  5621                           ;I2C.c: 59: I2C_Master_Stop();
  5622  0011C8  EC08  F016         	call	_I2C_Master_Stop	;wreg free
  5623                           
  5624                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  5625  0011CC  0E0A               	movlw	10
  5626  0011CE  0100               	movlb	0	; () banked
  5627  0011D0  6F93               	movwf	??_I2C_ColorSens_Init& (0+255),b
  5628  0011D2  0EBC               	movlw	188
  5629  0011D4                     u4217:
  5630  0011D4  2EE8               	decfsz	wreg,f,c
  5631  0011D6  D7FE               	bra	u4217
  5632  0011D8  2F93               	decfsz	??_I2C_ColorSens_Init& (0+255),f,b
  5633  0011DA  D7FC               	bra	u4217
  5634  0011DC  F000               	nop	
  5635                           
  5636                           ;I2C.c: 63: I2C_Master_Start();
  5637  0011DE  EC0C  F016         	call	_I2C_Master_Start	;wreg free
  5638                           
  5639                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  5640  0011E2  0E00               	movlw	0
  5641  0011E4  0100               	movlb	0	; () banked
  5642  0011E6  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5643  0011E8  0E52               	movlw	82
  5644  0011EA  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5645  0011EC  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5646                           
  5647                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  5648  0011F0  0E00               	movlw	0
  5649  0011F2  0100               	movlb	0	; () banked
  5650  0011F4  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5651  0011F6  0E80               	movlw	128
  5652  0011F8  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5653  0011FA  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5654                           
  5655                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
  5656  0011FE  0E00               	movlw	0
  5657  001200  0100               	movlb	0	; () banked
  5658  001202  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5659  001204  0E03               	movlw	3
  5660  001206  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5661  001208  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5662                           
  5663                           ;I2C.c: 67: I2C_Master_Stop();
  5664  00120C  EC08  F016         	call	_I2C_Master_Stop	;wreg free
  5665                           
  5666                           ;I2C.c: 69: I2C_Master_Start();
  5667  001210  EC0C  F016         	call	_I2C_Master_Start	;wreg free
  5668                           
  5669                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  5670  001214  0E00               	movlw	0
  5671  001216  0100               	movlb	0	; () banked
  5672  001218  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5673  00121A  0E52               	movlw	82
  5674  00121C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5675  00121E  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5676                           
  5677                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  5678  001222  0E00               	movlw	0
  5679  001224  0100               	movlb	0	; () banked
  5680  001226  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5681  001228  0E8F               	movlw	143
  5682  00122A  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5683  00122C  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5684                           
  5685                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  5686  001230  0E00               	movlw	0
  5687  001232  0100               	movlb	0	; () banked
  5688  001234  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5689  001236  0E02               	movlw	2
  5690  001238  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5691  00123A  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5692                           
  5693                           ;I2C.c: 73: I2C_Master_Stop();
  5694  00123E  EC08  F016         	call	_I2C_Master_Stop	;wreg free
  5695                           
  5696                           ;I2C.c: 75: I2C_Master_Start();
  5697  001242  EC0C  F016         	call	_I2C_Master_Start	;wreg free
  5698                           
  5699                           ;I2C.c: 76: I2C_Master_Write(0b01010010);
  5700  001246  0E00               	movlw	0
  5701  001248  0100               	movlb	0	; () banked
  5702  00124A  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5703  00124C  0E52               	movlw	82
  5704  00124E  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5705  001250  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5706                           
  5707                           ;I2C.c: 77: I2C_Master_Write(0b10100100);
  5708  001254  0E00               	movlw	0
  5709  001256  0100               	movlb	0	; () banked
  5710  001258  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5711  00125A  0EA4               	movlw	164
  5712  00125C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5713  00125E  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5714                           
  5715                           ;I2C.c: 78: I2C_Master_Write(0x00);
  5716  001262  0E00               	movlw	0
  5717  001264  0100               	movlb	0	; () banked
  5718  001266  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5719  001268  0E00               	movlw	0
  5720  00126A  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5721  00126C  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5722                           
  5723                           ;I2C.c: 79: I2C_Master_Write(0x00);
  5724  001270  0E00               	movlw	0
  5725  001272  0100               	movlb	0	; () banked
  5726  001274  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5727  001276  0E00               	movlw	0
  5728  001278  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5729  00127A  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5730                           
  5731                           ;I2C.c: 80: I2C_Master_Write(0x00);
  5732  00127E  0E00               	movlw	0
  5733  001280  0100               	movlb	0	; () banked
  5734  001282  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5735  001284  0E00               	movlw	0
  5736  001286  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5737  001288  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5738                           
  5739                           ;I2C.c: 81: I2C_Master_Write(0b01001010);
  5740  00128C  0E00               	movlw	0
  5741  00128E  0100               	movlb	0	; () banked
  5742  001290  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5743  001292  0E4A               	movlw	74
  5744  001294  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5745  001296  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5746                           
  5747                           ;I2C.c: 82: I2C_Master_Stop();
  5748  00129A  EC08  F016         	call	_I2C_Master_Stop	;wreg free
  5749                           
  5750                           ;I2C.c: 84: I2C_Master_Start();
  5751  00129E  EC0C  F016         	call	_I2C_Master_Start	;wreg free
  5752                           
  5753                           ;I2C.c: 85: I2C_Master_Write(0b01010010);
  5754  0012A2  0E00               	movlw	0
  5755  0012A4  0100               	movlb	0	; () banked
  5756  0012A6  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5757  0012A8  0E52               	movlw	82
  5758  0012AA  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5759  0012AC  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5760                           
  5761                           ;I2C.c: 86: I2C_Master_Write(0b10001100);
  5762  0012B0  0E00               	movlw	0
  5763  0012B2  0100               	movlb	0	; () banked
  5764  0012B4  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5765  0012B6  0E8C               	movlw	140
  5766  0012B8  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5767  0012BA  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5768                           
  5769                           ;I2C.c: 87: I2C_Master_Write(0b00000001);
  5770  0012BE  0E00               	movlw	0
  5771  0012C0  0100               	movlb	0	; () banked
  5772  0012C2  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5773  0012C4  0E01               	movlw	1
  5774  0012C6  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5775  0012C8  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5776                           
  5777                           ;I2C.c: 88: I2C_Master_Stop();
  5778  0012CC  EC08  F016         	call	_I2C_Master_Stop	;wreg free
  5779                           
  5780                           ;I2C.c: 90: I2C_Master_Start();
  5781  0012D0  EC0C  F016         	call	_I2C_Master_Start	;wreg free
  5782                           
  5783                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
  5784  0012D4  0E00               	movlw	0
  5785  0012D6  0100               	movlb	0	; () banked
  5786  0012D8  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5787  0012DA  0E52               	movlw	82
  5788  0012DC  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5789  0012DE  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5790                           
  5791                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
  5792  0012E2  0E00               	movlw	0
  5793  0012E4  0100               	movlb	0	; () banked
  5794  0012E6  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5795  0012E8  0E81               	movlw	129
  5796  0012EA  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5797  0012EC  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5798                           
  5799                           ;I2C.c: 93: I2C_Master_Write(0b11111110);
  5800  0012F0  0E00               	movlw	0
  5801  0012F2  0100               	movlb	0	; () banked
  5802  0012F4  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5803  0012F6  0EFE               	movlw	254
  5804  0012F8  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5805  0012FA  ECFE  F015         	call	_I2C_Master_Write	;wreg free
  5806                           
  5807                           ;I2C.c: 94: I2C_Master_Stop();
  5808  0012FE  EC08  F016         	call	_I2C_Master_Stop	;wreg free
  5809  001302  0012               	return		;funcret
  5810  001304                     __end_of_I2C_ColorSens_Init:
  5811                           	opt stack 0
  5812                           tblptru	equ	0xFF8
  5813                           tblptrh	equ	0xFF7
  5814                           tblptrl	equ	0xFF6
  5815                           tablat	equ	0xFF5
  5816                           prodh	equ	0xFF4
  5817                           prodl	equ	0xFF3
  5818                           intcon	equ	0xFF2
  5819                           intcon2	equ	0xFF1
  5820                           intcon3	equ	0xFF0
  5821                           postinc0	equ	0xFEE
  5822                           wreg	equ	0xFE8
  5823                           indf2	equ	0xFDF
  5824                           postinc2	equ	0xFDE
  5825                           postdec2	equ	0xFDD
  5826                           fsr2h	equ	0xFDA
  5827                           fsr2l	equ	0xFD9
  5828                           status	equ	0xFD8
  5829                           
  5830 ;; *************** function _I2C_Master_Write *****************
  5831 ;; Defined at:
  5832 ;;		line 48 in file "I2C.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;  d               2   17[BANK0 ] unsigned int 
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;		None
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  1    wreg      void 
  5839 ;; Registers used:
  5840 ;;		wreg, status,2, status,0, cstack
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5846 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;Total ram usage:        2 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; Hardware stack levels required when called:    8
  5853 ;; This function calls:
  5854 ;;		_I2C_Master_Wait
  5855 ;; This function is called by:
  5856 ;;		_I2C_ColorSens_Init
  5857 ;;		_date_time
  5858 ;;		_read_colorsensor
  5859 ;;		_I2C_ColorSens_ClearInt
  5860 ;;		_set_time
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           	psect	text23
  5865  002BFC                     __ptext23:
  5866                           	opt stack 0
  5867  002BFC                     _I2C_Master_Write:
  5868                           	opt stack 20
  5869                           
  5870                           ;I2C.c: 50: I2C_Master_Wait();
  5871                           
  5872                           ;incstack = 0
  5873  002BFC  ECCF  F015         	call	_I2C_Master_Wait	;wreg free
  5874                           
  5875                           ;I2C.c: 51: SSPBUF = d;
  5876  002C00  C091  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5877  002C04  0012               	return		;funcret
  5878  002C06                     __end_of_I2C_Master_Write:
  5879                           	opt stack 0
  5880                           tblptru	equ	0xFF8
  5881                           tblptrh	equ	0xFF7
  5882                           tblptrl	equ	0xFF6
  5883                           tablat	equ	0xFF5
  5884                           prodh	equ	0xFF4
  5885                           prodl	equ	0xFF3
  5886                           intcon	equ	0xFF2
  5887                           intcon2	equ	0xFF1
  5888                           intcon3	equ	0xFF0
  5889                           postinc0	equ	0xFEE
  5890                           wreg	equ	0xFE8
  5891                           indf2	equ	0xFDF
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function _I2C_Master_Stop *****************
  5899 ;; Defined at:
  5900 ;;		line 42 in file "I2C.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      void 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;Total ram usage:        0 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    8
  5921 ;; This function calls:
  5922 ;;		_I2C_Master_Wait
  5923 ;; This function is called by:
  5924 ;;		_I2C_ColorSens_Init
  5925 ;;		_date_time
  5926 ;;		_read_colorsensor
  5927 ;;		_I2C_ColorSens_ClearInt
  5928 ;;		_set_time
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text24
  5933  002C10                     __ptext24:
  5934                           	opt stack 0
  5935  002C10                     _I2C_Master_Stop:
  5936                           	opt stack 20
  5937                           
  5938                           ;I2C.c: 44: I2C_Master_Wait();
  5939                           
  5940                           ;incstack = 0
  5941  002C10  ECCF  F015         	call	_I2C_Master_Wait	;wreg free
  5942                           
  5943                           ;I2C.c: 45: PEN = 1;
  5944  002C14  84C5               	bsf	4037,2,c	;volatile
  5945  002C16  0012               	return		;funcret
  5946  002C18                     __end_of_I2C_Master_Stop:
  5947                           	opt stack 0
  5948                           tblptru	equ	0xFF8
  5949                           tblptrh	equ	0xFF7
  5950                           tblptrl	equ	0xFF6
  5951                           tablat	equ	0xFF5
  5952                           prodh	equ	0xFF4
  5953                           prodl	equ	0xFF3
  5954                           intcon	equ	0xFF2
  5955                           intcon2	equ	0xFF1
  5956                           intcon3	equ	0xFF0
  5957                           postinc0	equ	0xFEE
  5958                           wreg	equ	0xFE8
  5959                           indf2	equ	0xFDF
  5960                           postinc2	equ	0xFDE
  5961                           postdec2	equ	0xFDD
  5962                           fsr2h	equ	0xFDA
  5963                           fsr2l	equ	0xFD9
  5964                           status	equ	0xFD8
  5965                           
  5966 ;; *************** function _I2C_Master_Start *****************
  5967 ;; Defined at:
  5968 ;;		line 30 in file "I2C.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;		None
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;		None
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  1    wreg      void 
  5975 ;; Registers used:
  5976 ;;		wreg, status,2, status,0, cstack
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;Total ram usage:        0 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; Hardware stack levels required when called:    8
  5989 ;; This function calls:
  5990 ;;		_I2C_Master_Wait
  5991 ;; This function is called by:
  5992 ;;		_I2C_ColorSens_Init
  5993 ;;		_date_time
  5994 ;;		_read_colorsensor
  5995 ;;		_I2C_ColorSens_ClearInt
  5996 ;;		_set_time
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           	psect	text25
  6001  002C18                     __ptext25:
  6002                           	opt stack 0
  6003  002C18                     _I2C_Master_Start:
  6004                           	opt stack 20
  6005                           
  6006                           ;I2C.c: 32: I2C_Master_Wait();
  6007                           
  6008                           ;incstack = 0
  6009  002C18  ECCF  F015         	call	_I2C_Master_Wait	;wreg free
  6010                           
  6011                           ;I2C.c: 33: SEN = 1;
  6012  002C1C  80C5               	bsf	4037,0,c	;volatile
  6013  002C1E  0012               	return		;funcret
  6014  002C20                     __end_of_I2C_Master_Start:
  6015                           	opt stack 0
  6016                           tblptru	equ	0xFF8
  6017                           tblptrh	equ	0xFF7
  6018                           tblptrl	equ	0xFF6
  6019                           tablat	equ	0xFF5
  6020                           prodh	equ	0xFF4
  6021                           prodl	equ	0xFF3
  6022                           intcon	equ	0xFF2
  6023                           intcon2	equ	0xFF1
  6024                           intcon3	equ	0xFF0
  6025                           postinc0	equ	0xFEE
  6026                           wreg	equ	0xFE8
  6027                           indf2	equ	0xFDF
  6028                           postinc2	equ	0xFDE
  6029                           postdec2	equ	0xFDD
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function _I2C_Master_Wait *****************
  6035 ;; Defined at:
  6036 ;;		line 25 in file "I2C.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;		None
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;		None
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  1    wreg      void 
  6043 ;; Registers used:
  6044 ;;		wreg, status,2, status,0
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;Total ram usage:        1 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    7
  6057 ;; This function calls:
  6058 ;;		Nothing
  6059 ;; This function is called by:
  6060 ;;		_I2C_Master_Start
  6061 ;;		_I2C_Master_Stop
  6062 ;;		_I2C_Master_Write
  6063 ;;		_I2C_Master_Read
  6064 ;;		_I2C_Master_RepeatedStart
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text26
  6069  002B9E                     __ptext26:
  6070                           	opt stack 0
  6071  002B9E                     _I2C_Master_Wait:
  6072                           	opt stack 20
  6073  002B9E                     l34:
  6074  002B9E  B4C7               	btfsc	4039,2,c	;volatile
  6075  002BA0  D7FE               	goto	l34
  6076  002BA2  CFC5 F090          	movff	4037,??_I2C_Master_Wait	;volatile
  6077  002BA6  0E1F               	movlw	31
  6078  002BA8  0100               	movlb	0	; () banked
  6079  002BAA  1790               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6080  002BAC  B4D8               	btfsc	status,2,c
  6081  002BAE  0012               	return	
  6082  002BB0  D7F6               	goto	l34
  6083  002BB2                     __end_of_I2C_Master_Wait:
  6084                           	opt stack 0
  6085                           tblptru	equ	0xFF8
  6086                           tblptrh	equ	0xFF7
  6087                           tblptrl	equ	0xFF6
  6088                           tablat	equ	0xFF5
  6089                           prodh	equ	0xFF4
  6090                           prodl	equ	0xFF3
  6091                           intcon	equ	0xFF2
  6092                           intcon2	equ	0xFF1
  6093                           intcon3	equ	0xFF0
  6094                           postinc0	equ	0xFEE
  6095                           wreg	equ	0xFE8
  6096                           indf2	equ	0xFDF
  6097                           postinc2	equ	0xFDE
  6098                           postdec2	equ	0xFDD
  6099                           fsr2h	equ	0xFDA
  6100                           fsr2l	equ	0xFD9
  6101                           status	equ	0xFD8
  6102                           
  6103 ;; *************** function _isr *****************
  6104 ;; Defined at:
  6105 ;;		line 168 in file "main.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;		None
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;  i               1  114[COMRAM] unsigned char 
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      void 
  6112 ;; Registers used:
  6113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;Total ram usage:       19 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    6
  6126 ;; This function calls:
  6127 ;;		_dec_to_hex
  6128 ;;		_read_time
  6129 ;;		_servo_rotate0
  6130 ;;		i2_I2C_ColorSens_Init
  6131 ;;		i2___wmul
  6132 ;;		i2_lcdInst
  6133 ;;		i2_printf
  6134 ;;		i2_read_colorsensor
  6135 ;; This function is called by:
  6136 ;;		Interrupt level 2
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           	psect	intcode
  6141  000008                     __pintcode:
  6142                           	opt stack 0
  6143  000008                     _isr:
  6144                           	opt stack 20
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;incstack = 0
  6148  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6149  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           intcon	equ	0xFF2
  6157                           intcon2	equ	0xFF1
  6158                           intcon3	equ	0xFF0
  6159                           postinc0	equ	0xFEE
  6160                           wreg	equ	0xFE8
  6161                           indf2	equ	0xFDF
  6162                           postinc2	equ	0xFDE
  6163                           postdec2	equ	0xFDD
  6164                           fsr2h	equ	0xFDA
  6165                           fsr2l	equ	0xFD9
  6166                           status	equ	0xFD8
  6167                           
  6168                           	psect	intcode_body
  6169  000012                     __pintcode_body:
  6170                           	opt stack 20
  6171  000012                     int_func:
  6172                           	opt stack 20
  6173  000012  0006               	pop		; remove dummy address from shadow register refresh
  6174  000014  CFFA F082          	movff	pclath,??_isr+2
  6175  000018  CFFB F083          	movff	pclatu,??_isr+3
  6176  00001C  CFE9 F084          	movff	fsr0l,??_isr+4
  6177  000020  CFEA F085          	movff	fsr0h,??_isr+5
  6178  000024  CFE1 F086          	movff	fsr1l,??_isr+6
  6179  000028  CFE2 F087          	movff	fsr1h,??_isr+7
  6180  00002C  CFD9 F088          	movff	fsr2l,??_isr+8
  6181  000030  CFDA F089          	movff	fsr2h,??_isr+9
  6182  000034  CFF3 F08A          	movff	prodl,??_isr+10
  6183  000038  CFF4 F08B          	movff	prodh,??_isr+11
  6184  00003C  CFF6 F08C          	movff	tblptrl,??_isr+12
  6185  000040  CFF7 F08D          	movff	tblptrh,??_isr+13
  6186  000044  CFF8 F08E          	movff	tblptru,??_isr+14
  6187  000048  CFF5 F08F          	movff	tablat,??_isr+15
  6188                           
  6189                           ;main.c: 169: if (INT1IF) {
  6190  00004C  B0F0               	btfsc	intcon3,0,c	;volatile
  6191  00004E  D115               	goto	i2l4674
  6192  000050  D13B               	goto	i2l268
  6193  000052                     i2l270:
  6194                           
  6195                           ;main.c: 172: bottle_count_disp = -1;
  6196  000052  0100               	movlb	0	; () banked
  6197  000054  69E9               	setf	_bottle_count_disp& (0+255),b
  6198  000056  69EA               	setf	(_bottle_count_disp+1)& (0+255),b
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;main.c: 173: curr_state = STANDBY;
  6202  000058  0E00               	movlw	0
  6203  00005A  0100               	movlb	0	; () banked
  6204  00005C  6FE8               	movwf	_curr_state& (0+255),b
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;main.c: 174: I2C_ColorSens_Init();
  6208  00005E  EC82  F009         	call	i2_I2C_ColorSens_Init	;wreg free
  6209                           
  6210                           ;main.c: 175: break;
  6211  000062  D130               	goto	i2l271
  6212  000064                     i2l272:
  6213                           
  6214                           ;main.c: 177: LATAbits.LATA2 = 1;
  6215  000064  8489               	bsf	3977,2,c	;volatile
  6216                           
  6217                           ;main.c: 180: TMR0IE = 1;
  6218  000066  8AF2               	bsf	intcon,5,c	;volatile
  6219                           
  6220                           ;main.c: 181: TMR0ON = 1;
  6221  000068  8ED5               	bsf	4053,7,c	;volatile
  6222                           
  6223                           ;main.c: 182: TMR0 = 0;
  6224  00006A  0E00               	movlw	0
  6225  00006C  6ED7               	movwf	4055,c	;volatile
  6226  00006E  0E00               	movlw	0
  6227  000070  6ED6               	movwf	4054,c	;volatile
  6228                           
  6229                           ;main.c: 184: read_time();
  6230  000072  EC1C  F013         	call	_read_time	;wreg free
  6231                           
  6232                           ;main.c: 185: start_time[1] = time[1];
  6233  000076  C0B6  F0D9         	movff	_time+1,_start_time+1
  6234                           
  6235                           ;main.c: 186: start_time[0] = time[0];
  6236  00007A  C0B5  F0D8         	movff	_time,_start_time
  6237                           
  6238                           ;main.c: 188: bottlequeue_head = bottlequeue_tail = 0;
  6239  00007E  0E00               	movlw	0
  6240  000080  0100               	movlb	0	; () banked
  6241  000082  6FC3               	movwf	(_bottlequeue_tail+1)& (0+255),b
  6242  000084  0E00               	movlw	0
  6243  000086  6FC2               	movwf	_bottlequeue_tail& (0+255),b
  6244  000088  C0C2  F0C0         	movff	_bottlequeue_tail,_bottlequeue_head
  6245  00008C  C0C3  F0C1         	movff	_bottlequeue_tail+1,_bottlequeue_head+1
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;main.c: 190: lcdInst(0b00000001);
  6249  000090  0E01               	movlw	1
  6250  000092  ECF8  F015         	call	i2_lcdInst
  6251                           
  6252                           ;main.c: 191: bottle_count_disp = -1;
  6253  000096  0100               	movlb	0	; () banked
  6254  000098  69E9               	setf	_bottle_count_disp& (0+255),b
  6255  00009A  69EA               	setf	(_bottle_count_disp+1)& (0+255),b
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;main.c: 192: curr_state = OPERATION;
  6259  00009C  0E02               	movlw	2
  6260  00009E  D0DC               	goto	L7
  6261  0000A0                     i2l4608:
  6262                           
  6263                           ;main.c: 195: bottle_count_disp += 1;
  6264  0000A0  0100               	movlb	0	; () banked
  6265  0000A2  4BE9               	infsnz	_bottle_count_disp& (0+255),f,b
  6266  0000A4  2BEA               	incf	(_bottle_count_disp+1)& (0+255),f,b
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;main.c: 196: curr_state = BOTTLECOUNT;
  6270  0000A6  0E05               	movlw	5
  6271  0000A8  0100               	movlb	0	; () banked
  6272  0000AA  6FE8               	movwf	_curr_state& (0+255),b
  6273  0000AC                     i2l4612:
  6274  0000AC  0E1F               	movlw	31
  6275  0000AE  1881               	xorwf	3969,w,c	;volatile
  6276  0000B0  A4D8               	btfss	status,2,c
  6277  0000B2  D108               	goto	i2l271
  6278  0000B4  D7FB               	goto	i2l4612
  6279  0000B6                     i2l4614:
  6280                           
  6281                           ;main.c: 200: operation_time = etime - stime;
  6282  0000B6  C0DA  F080         	movff	_stime,??_isr
  6283  0000BA  C0DB  F081         	movff	_stime+1,??_isr+1
  6284  0000BE  0100               	movlb	0	; () banked
  6285  0000C0  1F80               	comf	??_isr& (0+255),f,b
  6286  0000C2  1F81               	comf	(??_isr+1)& (0+255),f,b
  6287  0000C4  4B80               	infsnz	??_isr& (0+255),f,b
  6288  0000C6  2B81               	incf	(??_isr+1)& (0+255),f,b
  6289  0000C8  0100               	movlb	0	; () banked
  6290  0000CA  51D0               	movf	_etime& (0+255),w,b
  6291  0000CC  0100               	movlb	0	; () banked
  6292  0000CE  2580               	addwf	??_isr& (0+255),w,b
  6293  0000D0  0100               	movlb	0	; () banked
  6294  0000D2  6FD6               	movwf	_operation_time& (0+255),b
  6295  0000D4  0100               	movlb	0	; () banked
  6296  0000D6  51D1               	movf	(_etime+1)& (0+255),w,b
  6297  0000D8  0100               	movlb	0	; () banked
  6298  0000DA  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6299  0000DC  0100               	movlb	0	; () banked
  6300  0000DE  6FD7               	movwf	(_operation_time+1)& (0+255),b
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;main.c: 201: bottle_count_disp = -1;
  6304  0000E0  0100               	movlb	0	; () banked
  6305  0000E2  69E9               	setf	_bottle_count_disp& (0+255),b
  6306  0000E4  69EA               	setf	(_bottle_count_disp+1)& (0+255),b
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;main.c: 202: curr_state = BOTTLETIME;
  6310  0000E6  0E06               	movlw	6
  6311  0000E8  D0B7               	goto	L7
  6312  0000EA                     i2l278:
  6313                           
  6314                           ;main.c: 205: bottle_count_disp = -1;
  6315  0000EA  0100               	movlb	0	; () banked
  6316  0000EC  69E9               	setf	_bottle_count_disp& (0+255),b
  6317  0000EE  69EA               	setf	(_bottle_count_disp+1)& (0+255),b
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;main.c: 206: curr_state = DATETIME;
  6321  0000F0  0E04               	movlw	4
  6322  0000F2  D0B2               	goto	L7
  6323  0000F4                     i2l279:
  6324                           
  6325                           ;main.c: 209: LATAbits.LATA2 = 0;
  6326  0000F4  9489               	bcf	3977,2,c	;volatile
  6327                           
  6328                           ;main.c: 210: INT0IE = 0;
  6329  0000F6  98F2               	bcf	intcon,4,c	;volatile
  6330                           
  6331                           ;main.c: 211: INT2IE = 0;
  6332  0000F8  98F0               	bcf	intcon3,4,c	;volatile
  6333                           
  6334                           ;main.c: 212: TMR0IE = 0;
  6335  0000FA  9AF2               	bcf	intcon,5,c	;volatile
  6336                           
  6337                           ;main.c: 213: TMR0ON = 0;
  6338  0000FC  9ED5               	bcf	4053,7,c	;volatile
  6339                           
  6340                           ;main.c: 215: read_time();
  6341  0000FE  EC1C  F013         	call	_read_time	;wreg free
  6342                           
  6343                           ;main.c: 216: end_time[1] = time[1];
  6344  000102  C0B6  F0C5         	movff	_time+1,_end_time+1
  6345                           
  6346                           ;main.c: 217: end_time[0] = time[0];
  6347  000106  C0B5  F0C4         	movff	_time,_end_time
  6348                           
  6349                           ;main.c: 218: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6350  00010A  C0D9  F063         	movff	_start_time+1,dec_to_hex@num
  6351  00010E  6A64               	clrf	dec_to_hex@num+1,c
  6352  000110  EC46  F00B         	call	_dec_to_hex	;wreg free
  6353  000114  C063  F074         	movff	?_dec_to_hex,_isr$1362
  6354  000118  C064  F075         	movff	?_dec_to_hex+1,_isr$1362+1
  6355                           
  6356                           ;main.c: 218: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6357  00011C  C074  F001         	movff	_isr$1362,i2___wmul@multiplier
  6358  000120  C075  F002         	movff	_isr$1362+1,i2___wmul@multiplier+1
  6359  000124  0E00               	movlw	0
  6360  000126  6E04               	movwf	i2___wmul@multiplicand+1,c
  6361  000128  0E3C               	movlw	60
  6362  00012A  6E03               	movwf	i2___wmul@multiplicand,c
  6363  00012C  EC7E  F015         	call	i2___wmul	;wreg free
  6364  000130  C001  F080         	movff	?i2___wmul,??_isr
  6365  000134  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6366  000138  C0D8  F063         	movff	_start_time,dec_to_hex@num
  6367  00013C  6A64               	clrf	dec_to_hex@num+1,c
  6368  00013E  EC46  F00B         	call	_dec_to_hex	;wreg free
  6369  000142  5063               	movf	?_dec_to_hex,w,c
  6370  000144  0100               	movlb	0	; () banked
  6371  000146  2580               	addwf	??_isr& (0+255),w,b
  6372  000148  0100               	movlb	0	; () banked
  6373  00014A  6FDA               	movwf	_stime& (0+255),b
  6374  00014C  5064               	movf	?_dec_to_hex+1,w,c
  6375  00014E  0100               	movlb	0	; () banked
  6376  000150  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6377  000152  0100               	movlb	0	; () banked
  6378  000154  6FDB               	movwf	(_stime+1)& (0+255),b
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;main.c: 219: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6382  000156  C0C5  F063         	movff	_end_time+1,dec_to_hex@num
  6383  00015A  6A64               	clrf	dec_to_hex@num+1,c
  6384  00015C  EC46  F00B         	call	_dec_to_hex	;wreg free
  6385  000160  C063  F074         	movff	?_dec_to_hex,_isr$1362
  6386  000164  C064  F075         	movff	?_dec_to_hex+1,_isr$1362+1
  6387                           
  6388                           ;main.c: 219: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6389  000168  C074  F001         	movff	_isr$1362,i2___wmul@multiplier
  6390  00016C  C075  F002         	movff	_isr$1362+1,i2___wmul@multiplier+1
  6391  000170  0E00               	movlw	0
  6392  000172  6E04               	movwf	i2___wmul@multiplicand+1,c
  6393  000174  0E3C               	movlw	60
  6394  000176  6E03               	movwf	i2___wmul@multiplicand,c
  6395  000178  EC7E  F015         	call	i2___wmul	;wreg free
  6396  00017C  C001  F080         	movff	?i2___wmul,??_isr
  6397  000180  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6398  000184  C0C4  F063         	movff	_end_time,dec_to_hex@num
  6399  000188  6A64               	clrf	dec_to_hex@num+1,c
  6400  00018A  EC46  F00B         	call	_dec_to_hex	;wreg free
  6401  00018E  5063               	movf	?_dec_to_hex,w,c
  6402  000190  0100               	movlb	0	; () banked
  6403  000192  2580               	addwf	??_isr& (0+255),w,b
  6404  000194  0100               	movlb	0	; () banked
  6405  000196  6FD0               	movwf	_etime& (0+255),b
  6406  000198  5064               	movf	?_dec_to_hex+1,w,c
  6407  00019A  0100               	movlb	0	; () banked
  6408  00019C  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6409  00019E  0100               	movlb	0	; () banked
  6410  0001A0  6FD1               	movwf	(_etime+1)& (0+255),b
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;main.c: 220: lcdInst(0b00000001);
  6414  0001A2  0E01               	movlw	1
  6415  0001A4  ECF8  F015         	call	i2_lcdInst
  6416                           
  6417                           ;main.c: 221: bottle_count_disp = -1;
  6418  0001A8  0100               	movlb	0	; () banked
  6419  0001AA  69E9               	setf	_bottle_count_disp& (0+255),b
  6420  0001AC  69EA               	setf	(_bottle_count_disp+1)& (0+255),b
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;main.c: 222: curr_state = OPERATIONEND;
  6424  0001AE  0E03               	movlw	3
  6425  0001B0  D053               	goto	L7
  6426  0001B2                     i2l4642:
  6427                           
  6428                           ;main.c: 225: read_colorsensor();
  6429  0001B2  ECB8  F00C         	call	i2_read_colorsensor	;wreg free
  6430                           
  6431                           ;main.c: 226: lcdInst(0b10000000);
  6432  0001B6  0E80               	movlw	128
  6433  0001B8  ECF8  F015         	call	i2_lcdInst
  6434                           
  6435                           ;main.c: 227: printf("C%u R%u                ", color[0], color[1]);
  6436  0001BC  0E51               	movlw	low STR_1
  6437  0001BE  6E0D               	movwf	i2printf@f,c
  6438  0001C0  0EFE               	movlw	high STR_1
  6439  0001C2  6E0E               	movwf	i2printf@f+1,c
  6440  0001C4  C076  F00F         	movff	_color,?i2_printf+2
  6441  0001C8  C077  F010         	movff	_color+1,?i2_printf+3
  6442  0001CC  C078  F011         	movff	_color+2,?i2_printf+4
  6443  0001D0  C079  F012         	movff	_color+3,?i2_printf+5
  6444  0001D4  ECE8  F003         	call	i2_printf	;wreg free
  6445                           
  6446                           ;main.c: 228: lcdInst(0b11000000);
  6447  0001D8  0EC0               	movlw	192
  6448  0001DA  ECF8  F015         	call	i2_lcdInst
  6449                           
  6450                           ;main.c: 229: printf("G%u B%u                ", color[2], color[3]);
  6451  0001DE  0E39               	movlw	low STR_2
  6452  0001E0  6E0D               	movwf	i2printf@f,c
  6453  0001E2  0EFE               	movlw	high STR_2
  6454  0001E4  6E0E               	movwf	i2printf@f+1,c
  6455  0001E6  C07A  F00F         	movff	_color+4,?i2_printf+2
  6456  0001EA  C07B  F010         	movff	_color+5,?i2_printf+3
  6457  0001EE  C07C  F011         	movff	_color+6,?i2_printf+4
  6458  0001F2  C07D  F012         	movff	_color+7,?i2_printf+5
  6459  0001F6  ECE8  F003         	call	i2_printf	;wreg free
  6460                           
  6461                           ;main.c: 230: break;
  6462  0001FA  D064               	goto	i2l271
  6463  0001FC                     i2l4652:
  6464                           
  6465                           ;main.c: 232: read_colorsensor();
  6466  0001FC  ECB8  F00C         	call	i2_read_colorsensor	;wreg free
  6467                           
  6468                           ;main.c: 233: lcdInst(0b10000000);
  6469  000200  0E80               	movlw	128
  6470  000202  ECF8  F015         	call	i2_lcdInst
  6471                           
  6472                           ;main.c: 234: printf("C%u R%u                ", color[0], color[1]);
  6473  000206  0E51               	movlw	low STR_1
  6474  000208  6E0D               	movwf	i2printf@f,c
  6475  00020A  0EFE               	movlw	high STR_1
  6476  00020C  6E0E               	movwf	i2printf@f+1,c
  6477  00020E  C076  F00F         	movff	_color,?i2_printf+2
  6478  000212  C077  F010         	movff	_color+1,?i2_printf+3
  6479  000216  C078  F011         	movff	_color+2,?i2_printf+4
  6480  00021A  C079  F012         	movff	_color+3,?i2_printf+5
  6481  00021E  ECE8  F003         	call	i2_printf	;wreg free
  6482                           
  6483                           ;main.c: 235: lcdInst(0b11000000);
  6484  000222  0EC0               	movlw	192
  6485  000224  ECF8  F015         	call	i2_lcdInst
  6486                           
  6487                           ;main.c: 236: printf("G%u B%u                ", color[2], color[3]);
  6488  000228  0E39               	movlw	low STR_2
  6489  00022A  6E0D               	movwf	i2printf@f,c
  6490  00022C  0EFE               	movlw	high STR_2
  6491  00022E  6E0E               	movwf	i2printf@f+1,c
  6492  000230  C07A  F00F         	movff	_color+4,?i2_printf+2
  6493  000234  C07B  F010         	movff	_color+5,?i2_printf+3
  6494  000238  C07C  F011         	movff	_color+6,?i2_printf+4
  6495  00023C  C07D  F012         	movff	_color+7,?i2_printf+5
  6496  000240  ECE8  F003         	call	i2_printf	;wreg free
  6497                           
  6498                           ;main.c: 237: break;
  6499  000244  D03F               	goto	i2l271
  6500  000246                     i2l4662:
  6501                           
  6502                           ;main.c: 239: curr_state = STANDBY;
  6503  000246  0E00               	movlw	0
  6504  000248  D007               	goto	L7
  6505  00024A                     i2l283:
  6506                           
  6507                           ;main.c: 242: LATAbits.LATA2 = 0;
  6508  00024A  9489               	bcf	3977,2,c	;volatile
  6509                           
  6510                           ;main.c: 243: (INTCONbits.GIE = 0);
  6511  00024C  9EF2               	bcf	intcon,7,c	;volatile
  6512                           
  6513                           ;main.c: 244: TMR0ON = 0;
  6514  00024E  9ED5               	bcf	4053,7,c	;volatile
  6515                           
  6516                           ;main.c: 245: lcdInst(0b00000001);
  6517  000250  0E01               	movlw	1
  6518  000252  ECF8  F015         	call	i2_lcdInst
  6519                           
  6520                           ;main.c: 246: curr_state = EMERGENCYSTOP;
  6521  000256  0E01               	movlw	1
  6522  000258                     L7:
  6523  000258  0100               	movlb	0	; () banked
  6524  00025A  6FE8               	movwf	_curr_state& (0+255),b
  6525                           
  6526                           ;main.c: 247: break;
  6527  00025C  D033               	goto	i2l271
  6528  00025E                     i2l4668:
  6529                           
  6530                           ;main.c: 249: servo_rotate0(1);
  6531  00025E  0E00               	movlw	0
  6532  000260  6E02               	movwf	servo_rotate0@degree+1,c
  6533  000262  0E01               	movlw	1
  6534  000264  6E01               	movwf	servo_rotate0@degree,c
  6535  000266  EC8A  F011         	call	_servo_rotate0	;wreg free
  6536                           
  6537                           ;main.c: 250: break;
  6538  00026A  D02C               	goto	i2l271
  6539  00026C                     i2l4670:
  6540                           
  6541                           ;main.c: 252: servo_rotate0(2);
  6542  00026C  0E00               	movlw	0
  6543  00026E  6E02               	movwf	servo_rotate0@degree+1,c
  6544  000270  0E02               	movlw	2
  6545  000272  6E01               	movwf	servo_rotate0@degree,c
  6546  000274  EC8A  F011         	call	_servo_rotate0	;wreg free
  6547                           
  6548                           ;main.c: 254: }
  6549                           
  6550                           ;main.c: 253: break;
  6551  000278  D025               	goto	i2l271
  6552  00027A                     i2l4674:
  6553  00027A  5081               	movf	3969,w,c	;volatile
  6554                           
  6555                           ; Switch size 1, requested type "space"
  6556                           ; Number of cases is 12, Range of values is 15 to 239
  6557                           ; switch strategies available:
  6558                           ; Name         Instructions Cycles
  6559                           ; simple_byte           37    19 (average)
  6560                           ;	Chosen strategy is simple_byte
  6561  00027C  0A0F               	xorlw	15	; case 15
  6562  00027E  B4D8               	btfsc	status,2,c
  6563  000280  D6F1               	goto	i2l272
  6564  000282  0A10               	xorlw	16	; case 31
  6565  000284  B4D8               	btfsc	status,2,c
  6566  000286  D70C               	goto	i2l4608
  6567  000288  0A30               	xorlw	48	; case 47
  6568  00028A  B4D8               	btfsc	status,2,c
  6569  00028C  D714               	goto	i2l4614
  6570  00028E  0A10               	xorlw	16	; case 63
  6571  000290  B4D8               	btfsc	status,2,c
  6572  000292  D72B               	goto	i2l278
  6573  000294  0A70               	xorlw	112	; case 79
  6574  000296  B4D8               	btfsc	status,2,c
  6575  000298  D72D               	goto	i2l279
  6576  00029A  0A14               	xorlw	20	; case 91
  6577  00029C  B4D8               	btfsc	status,2,c
  6578  00029E  D7AE               	goto	i2l4652
  6579  0002A0  0A04               	xorlw	4	; case 95
  6580  0002A2  B4D8               	btfsc	status,2,c
  6581  0002A4  D786               	goto	i2l4642
  6582  0002A6  0A20               	xorlw	32	; case 127
  6583  0002A8  B4D8               	btfsc	status,2,c
  6584  0002AA  D7D9               	goto	i2l4668
  6585  0002AC  0AC0               	xorlw	192	; case 191
  6586  0002AE  B4D8               	btfsc	status,2,c
  6587  0002B0  D7DD               	goto	i2l4670
  6588  0002B2  0A70               	xorlw	112	; case 207
  6589  0002B4  B4D8               	btfsc	status,2,c
  6590  0002B6  D7C9               	goto	i2l283
  6591  0002B8  0A24               	xorlw	36	; case 235
  6592  0002BA  B4D8               	btfsc	status,2,c
  6593  0002BC  D7C4               	goto	i2l4662
  6594  0002BE  0A04               	xorlw	4	; case 239
  6595  0002C0  B4D8               	btfsc	status,2,c
  6596  0002C2  D6C7               	goto	i2l270
  6597  0002C4                     i2l271:
  6598                           
  6599                           ;main.c: 255: INT1IF = 0;
  6600  0002C4  90F0               	bcf	intcon3,0,c	;volatile
  6601                           
  6602                           ;main.c: 256: }
  6603  0002C6  D07B               	goto	i2l294
  6604  0002C8                     i2l268:
  6605                           
  6606                           ;main.c: 353: else if (TMR0IF){
  6607  0002C8  A4F2               	btfss	intcon,2,c	;volatile
  6608  0002CA  D05F               	goto	i2l4700
  6609                           
  6610                           ;main.c: 354: LATAbits.LATA2 = 0;
  6611  0002CC  9489               	bcf	3977,2,c	;volatile
  6612                           
  6613                           ;main.c: 355: TMR0ON = 0;
  6614  0002CE  9ED5               	bcf	4053,7,c	;volatile
  6615                           
  6616                           ;main.c: 356: read_time();
  6617  0002D0  EC1C  F013         	call	_read_time	;wreg free
  6618                           
  6619                           ;main.c: 357: end_time[1] = time[1];
  6620  0002D4  C0B6  F0C5         	movff	_time+1,_end_time+1
  6621                           
  6622                           ;main.c: 358: end_time[0] = time[0];
  6623  0002D8  C0B5  F0C4         	movff	_time,_end_time
  6624                           
  6625                           ;main.c: 359: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6626  0002DC  C0D9  F063         	movff	_start_time+1,dec_to_hex@num
  6627  0002E0  6A64               	clrf	dec_to_hex@num+1,c
  6628  0002E2  EC46  F00B         	call	_dec_to_hex	;wreg free
  6629  0002E6  C063  F074         	movff	?_dec_to_hex,_isr$1362
  6630  0002EA  C064  F075         	movff	?_dec_to_hex+1,_isr$1362+1
  6631                           
  6632                           ;main.c: 359: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6633  0002EE  C074  F001         	movff	_isr$1362,i2___wmul@multiplier
  6634  0002F2  C075  F002         	movff	_isr$1362+1,i2___wmul@multiplier+1
  6635  0002F6  0E00               	movlw	0
  6636  0002F8  6E04               	movwf	i2___wmul@multiplicand+1,c
  6637  0002FA  0E3C               	movlw	60
  6638  0002FC  6E03               	movwf	i2___wmul@multiplicand,c
  6639  0002FE  EC7E  F015         	call	i2___wmul	;wreg free
  6640  000302  C001  F080         	movff	?i2___wmul,??_isr
  6641  000306  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6642  00030A  C0D8  F063         	movff	_start_time,dec_to_hex@num
  6643  00030E  6A64               	clrf	dec_to_hex@num+1,c
  6644  000310  EC46  F00B         	call	_dec_to_hex	;wreg free
  6645  000314  5063               	movf	?_dec_to_hex,w,c
  6646  000316  0100               	movlb	0	; () banked
  6647  000318  2580               	addwf	??_isr& (0+255),w,b
  6648  00031A  0100               	movlb	0	; () banked
  6649  00031C  6FDA               	movwf	_stime& (0+255),b
  6650  00031E  5064               	movf	?_dec_to_hex+1,w,c
  6651  000320  0100               	movlb	0	; () banked
  6652  000322  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6653  000324  0100               	movlb	0	; () banked
  6654  000326  6FDB               	movwf	(_stime+1)& (0+255),b
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;main.c: 360: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6658  000328  C0C5  F063         	movff	_end_time+1,dec_to_hex@num
  6659  00032C  6A64               	clrf	dec_to_hex@num+1,c
  6660  00032E  EC46  F00B         	call	_dec_to_hex	;wreg free
  6661  000332  C063  F074         	movff	?_dec_to_hex,_isr$1362
  6662  000336  C064  F075         	movff	?_dec_to_hex+1,_isr$1362+1
  6663                           
  6664                           ;main.c: 360: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6665  00033A  C074  F001         	movff	_isr$1362,i2___wmul@multiplier
  6666  00033E  C075  F002         	movff	_isr$1362+1,i2___wmul@multiplier+1
  6667  000342  0E00               	movlw	0
  6668  000344  6E04               	movwf	i2___wmul@multiplicand+1,c
  6669  000346  0E3C               	movlw	60
  6670  000348  6E03               	movwf	i2___wmul@multiplicand,c
  6671  00034A  EC7E  F015         	call	i2___wmul	;wreg free
  6672  00034E  C001  F080         	movff	?i2___wmul,??_isr
  6673  000352  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6674  000356  C0C4  F063         	movff	_end_time,dec_to_hex@num
  6675  00035A  6A64               	clrf	dec_to_hex@num+1,c
  6676  00035C  EC46  F00B         	call	_dec_to_hex	;wreg free
  6677  000360  5063               	movf	?_dec_to_hex,w,c
  6678  000362  0100               	movlb	0	; () banked
  6679  000364  2580               	addwf	??_isr& (0+255),w,b
  6680  000366  0100               	movlb	0	; () banked
  6681  000368  6FD0               	movwf	_etime& (0+255),b
  6682  00036A  5064               	movf	?_dec_to_hex+1,w,c
  6683  00036C  0100               	movlb	0	; () banked
  6684  00036E  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6685  000370  0100               	movlb	0	; () banked
  6686  000372  6FD1               	movwf	(_etime+1)& (0+255),b
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;main.c: 361: lcdInst(0b00000001);
  6690  000374  0E01               	movlw	1
  6691  000376  ECF8  F015         	call	i2_lcdInst
  6692                           
  6693                           ;main.c: 362: curr_state = OPERATIONEND;
  6694  00037A  0E03               	movlw	3
  6695  00037C  0100               	movlb	0	; () banked
  6696  00037E  6FE8               	movwf	_curr_state& (0+255),b
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;main.c: 363: bottle_count_disp = -1;
  6700  000380  0100               	movlb	0	; () banked
  6701  000382  69E9               	setf	_bottle_count_disp& (0+255),b
  6702  000384  69EA               	setf	(_bottle_count_disp+1)& (0+255),b
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;main.c: 364: TMR0IF = 0;
  6706  000386  94F2               	bcf	intcon,2,c	;volatile
  6707                           
  6708                           ;main.c: 365: }
  6709  000388  D01A               	goto	i2l294
  6710  00038A                     i2l4700:
  6711                           
  6712                           ;main.c: 368: lcdInst(0b10000000);
  6713  00038A  0E80               	movlw	128
  6714  00038C  ECF8  F015         	call	i2_lcdInst
  6715                           
  6716                           ;main.c: 369: printf("bad interrupt");
  6717  000390  0EDF               	movlw	low STR_5
  6718  000392  6E0D               	movwf	i2printf@f,c
  6719  000394  0EFF               	movlw	high STR_5
  6720  000396  6E0E               	movwf	i2printf@f+1,c
  6721  000398  ECE8  F003         	call	i2_printf	;wreg free
  6722                           
  6723                           ;main.c: 370: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  6724  00039C  0E00               	movlw	0
  6725  00039E  6E73               	movwf	isr@i,c
  6726  0003A0                     i2l4706:
  6727  0003A0  0E63               	movlw	99
  6728  0003A2  6473               	cpfsgt	isr@i,c
  6729  0003A4  D001               	goto	i2l4710
  6730  0003A6  D7F1               	goto	i2l4700
  6731  0003A8                     i2l4710:
  6732  0003A8  0E21               	movlw	33
  6733  0003AA  0100               	movlb	0	; () banked
  6734  0003AC  6F80               	movwf	??_isr& (0+255),b
  6735  0003AE  0E76               	movlw	118
  6736  0003B0                     i2u422_47:
  6737  0003B0  2EE8               	decfsz	wreg,f,c
  6738  0003B2  D7FE               	bra	i2u422_47
  6739  0003B4  2F80               	decfsz	??_isr& (0+255),f,b
  6740  0003B6  D7FC               	bra	i2u422_47
  6741  0003B8  F000               	nop	
  6742  0003BA  2A73               	incf	isr@i,f,c
  6743  0003BC  D7F1               	goto	i2l4706
  6744  0003BE                     i2l294:
  6745  0003BE  C08F  FFF5         	movff	??_isr+15,tablat
  6746  0003C2  C08E  FFF8         	movff	??_isr+14,tblptru
  6747  0003C6  C08D  FFF7         	movff	??_isr+13,tblptrh
  6748  0003CA  C08C  FFF6         	movff	??_isr+12,tblptrl
  6749  0003CE  C08B  FFF4         	movff	??_isr+11,prodh
  6750  0003D2  C08A  FFF3         	movff	??_isr+10,prodl
  6751  0003D6  C089  FFDA         	movff	??_isr+9,fsr2h
  6752  0003DA  C088  FFD9         	movff	??_isr+8,fsr2l
  6753  0003DE  C087  FFE2         	movff	??_isr+7,fsr1h
  6754  0003E2  C086  FFE1         	movff	??_isr+6,fsr1l
  6755  0003E6  C085  FFEA         	movff	??_isr+5,fsr0h
  6756  0003EA  C084  FFE9         	movff	??_isr+4,fsr0l
  6757  0003EE  C083  FFFB         	movff	??_isr+3,pclatu
  6758  0003F2  C082  FFFA         	movff	??_isr+2,pclath
  6759  0003F6  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6760  0003F8  0011               	retfie		f
  6761  0003FA                     __end_of_isr:
  6762                           	opt stack 0
  6763                           pclatu	equ	0xFFB
  6764                           pclath	equ	0xFFA
  6765                           tblptru	equ	0xFF8
  6766                           tblptrh	equ	0xFF7
  6767                           tblptrl	equ	0xFF6
  6768                           tablat	equ	0xFF5
  6769                           prodh	equ	0xFF4
  6770                           prodl	equ	0xFF3
  6771                           intcon	equ	0xFF2
  6772                           intcon2	equ	0xFF1
  6773                           intcon3	equ	0xFF0
  6774                           postinc0	equ	0xFEE
  6775                           fsr0h	equ	0xFEA
  6776                           fsr0l	equ	0xFE9
  6777                           wreg	equ	0xFE8
  6778                           fsr1h	equ	0xFE2
  6779                           fsr1l	equ	0xFE1
  6780                           indf2	equ	0xFDF
  6781                           postinc2	equ	0xFDE
  6782                           postdec2	equ	0xFDD
  6783                           fsr2h	equ	0xFDA
  6784                           fsr2l	equ	0xFD9
  6785                           status	equ	0xFD8
  6786                           
  6787 ;; *************** function i2_read_colorsensor *****************
  6788 ;; Defined at:
  6789 ;;		line 602 in file "main.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;		None
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  read_colorse    4   11[COMRAM] unsigned char [4]
  6794 ;;  read_colorse    4    7[COMRAM] unsigned char [4]
  6795 ;;  read_colorse    2   15[COMRAM] int 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      void 
  6798 ;; Registers used:
  6799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6806 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6809 ;;Total ram usage:       14 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    2
  6812 ;; This function calls:
  6813 ;;		i2_I2C_Master_Read
  6814 ;;		i2_I2C_Master_Start
  6815 ;;		i2_I2C_Master_Stop
  6816 ;;		i2_I2C_Master_Write
  6817 ;; This function is called by:
  6818 ;;		_isr
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text28
  6823  001970                     __ptext28:
  6824                           	opt stack 0
  6825  001970                     i2_read_colorsensor:
  6826                           	opt stack 23
  6827                           
  6828                           ;main.c: 607: unsigned char color_low[4];
  6829                           ;main.c: 608: unsigned char color_high[4];
  6830                           ;main.c: 609: int i;
  6831                           ;main.c: 612: I2C_Master_Start();
  6832                           
  6833                           ;incstack = 0
  6834  001970  EC14  F016         	call	i2_I2C_Master_Start	;wreg free
  6835                           
  6836                           ;main.c: 613: I2C_Master_Write(0b01010010);
  6837  001974  0E00               	movlw	0
  6838  001976  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6839  001978  0E52               	movlw	82
  6840  00197A  6E02               	movwf	i2I2C_Master_Write@d,c
  6841  00197C  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  6842                           
  6843                           ;main.c: 614: I2C_Master_Write(0b10110100);
  6844  001980  0E00               	movlw	0
  6845  001982  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6846  001984  0EB4               	movlw	180
  6847  001986  6E02               	movwf	i2I2C_Master_Write@d,c
  6848  001988  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  6849                           
  6850                           ;main.c: 615: I2C_Master_Start();
  6851  00198C  EC14  F016         	call	i2_I2C_Master_Start	;wreg free
  6852                           
  6853                           ;main.c: 616: I2C_Master_Write(0b01010011);
  6854  001990  0E00               	movlw	0
  6855  001992  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6856  001994  0E53               	movlw	83
  6857  001996  6E02               	movwf	i2I2C_Master_Write@d,c
  6858  001998  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  6859                           
  6860                           ;main.c: 617: for(i=0; i<3; i++){
  6861  00199C  0E00               	movlw	0
  6862  00199E  6E11               	movwf	i2read_colorsensor@i+1,c
  6863  0019A0  0E00               	movlw	0
  6864  0019A2  6E10               	movwf	i2read_colorsensor@i,c
  6865  0019A4                     i2l4362:
  6866  0019A4  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  6867  0019A6  D006               	goto	i2l4366
  6868  0019A8  5011               	movf	i2read_colorsensor@i+1,w,c
  6869  0019AA  E11B               	bnz	i2l4372
  6870  0019AC  0E03               	movlw	3
  6871  0019AE  5C10               	subwf	i2read_colorsensor@i,w,c
  6872  0019B0  B0D8               	btfsc	status,0,c
  6873  0019B2  D017               	goto	i2l4372
  6874  0019B4                     i2l4366:
  6875                           
  6876                           ;main.c: 618: color_low[i] = I2C_Master_Read(1);
  6877  0019B4  0E08               	movlw	low i2read_colorsensor@color_low
  6878  0019B6  2410               	addwf	i2read_colorsensor@i,w,c
  6879  0019B8  6ED9               	movwf	fsr2l,c
  6880  0019BA  0E00               	movlw	high i2read_colorsensor@color_low
  6881  0019BC  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6882  0019BE  6EDA               	movwf	fsr2h,c
  6883  0019C0  0E01               	movlw	1
  6884  0019C2  EC6B  F015         	call	i2_I2C_Master_Read
  6885  0019C6  6EDF               	movwf	indf2,c
  6886                           
  6887                           ;main.c: 619: color_high[i] = I2C_Master_Read(1);
  6888  0019C8  0E0C               	movlw	low i2read_colorsensor@color_high
  6889  0019CA  2410               	addwf	i2read_colorsensor@i,w,c
  6890  0019CC  6ED9               	movwf	fsr2l,c
  6891  0019CE  0E00               	movlw	high i2read_colorsensor@color_high
  6892  0019D0  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6893  0019D2  6EDA               	movwf	fsr2h,c
  6894  0019D4  0E01               	movlw	1
  6895  0019D6  EC6B  F015         	call	i2_I2C_Master_Read
  6896  0019DA  6EDF               	movwf	indf2,c
  6897  0019DC  4A10               	infsnz	i2read_colorsensor@i,f,c
  6898  0019DE  2A11               	incf	i2read_colorsensor@i+1,f,c
  6899  0019E0  D7E1               	goto	i2l4362
  6900  0019E2                     i2l4372:
  6901                           
  6902                           ;main.c: 620: }
  6903                           ;main.c: 621: color_low[3] = I2C_Master_Read(1);
  6904  0019E2  0E01               	movlw	1
  6905  0019E4  EC6B  F015         	call	i2_I2C_Master_Read
  6906  0019E8  6E0B               	movwf	i2read_colorsensor@color_low+3,c
  6907                           
  6908                           ;main.c: 622: color_high[3] = I2C_Master_Read(0);
  6909  0019EA  0E00               	movlw	0
  6910  0019EC  EC6B  F015         	call	i2_I2C_Master_Read
  6911  0019F0  6E0F               	movwf	i2read_colorsensor@color_high+3,c
  6912                           
  6913                           ;main.c: 623: I2C_Master_Stop();
  6914  0019F2  EC10  F016         	call	i2_I2C_Master_Stop	;wreg free
  6915                           
  6916                           ;main.c: 625: for(i=0; i<4; i++){
  6917  0019F6  0E00               	movlw	0
  6918  0019F8  6E11               	movwf	i2read_colorsensor@i+1,c
  6919  0019FA  0E00               	movlw	0
  6920  0019FC  6E10               	movwf	i2read_colorsensor@i,c
  6921  0019FE                     i2l4376:
  6922  0019FE  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  6923  001A00  D006               	goto	i2l4380
  6924  001A02  5011               	movf	i2read_colorsensor@i+1,w,c
  6925  001A04  E12B               	bnz	i2l398
  6926  001A06  0E04               	movlw	4
  6927  001A08  5C10               	subwf	i2read_colorsensor@i,w,c
  6928  001A0A  B0D8               	btfsc	status,0,c
  6929  001A0C  0012               	return	
  6930  001A0E                     i2l4380:
  6931                           
  6932                           ;main.c: 626: color[i] = (color_high[i] << 8)|(color_low[i]);
  6933  001A0E  0E0C               	movlw	low i2read_colorsensor@color_high
  6934  001A10  2410               	addwf	i2read_colorsensor@i,w,c
  6935  001A12  6ED9               	movwf	fsr2l,c
  6936  001A14  0E00               	movlw	high i2read_colorsensor@color_high
  6937  001A16  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6938  001A18  6EDA               	movwf	fsr2h,c
  6939  001A1A  50DF               	movf	indf2,w,c
  6940  001A1C  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6941  001A1E  5004               	movf	??i2_read_colorsensor,w,c
  6942  001A20  6E06               	movwf	(??i2_read_colorsensor+2)& (0+255),c
  6943  001A22  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  6944  001A24  0E08               	movlw	low i2read_colorsensor@color_low
  6945  001A26  2410               	addwf	i2read_colorsensor@i,w,c
  6946  001A28  6ED9               	movwf	fsr2l,c
  6947  001A2A  0E00               	movlw	high i2read_colorsensor@color_low
  6948  001A2C  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6949  001A2E  6EDA               	movwf	fsr2h,c
  6950  001A30  50DF               	movf	indf2,w,c
  6951  001A32  6E07               	movwf	(??i2_read_colorsensor+3)& (0+255),c
  6952  001A34  5007               	movf	??i2_read_colorsensor+3,w,c
  6953  001A36  1205               	iorwf	??i2_read_colorsensor+1,f,c
  6954  001A38  0E00               	movlw	0
  6955  001A3A  1206               	iorwf	??i2_read_colorsensor+2,f,c
  6956  001A3C  90D8               	bcf	status,0,c
  6957  001A3E  3410               	rlcf	i2read_colorsensor@i,w,c
  6958  001A40  6ED9               	movwf	fsr2l,c
  6959  001A42  3411               	rlcf	i2read_colorsensor@i+1,w,c
  6960  001A44  6EDA               	movwf	fsr2h,c
  6961  001A46  0E76               	movlw	low _color
  6962  001A48  26D9               	addwf	fsr2l,f,c
  6963  001A4A  0E00               	movlw	high _color
  6964  001A4C  22DA               	addwfc	fsr2h,f,c
  6965  001A4E  C005  FFDE         	movff	??i2_read_colorsensor+1,postinc2
  6966  001A52  C006  FFDD         	movff	??i2_read_colorsensor+2,postdec2
  6967  001A56  4A10               	infsnz	i2read_colorsensor@i,f,c
  6968  001A58  2A11               	incf	i2read_colorsensor@i+1,f,c
  6969  001A5A  D7D1               	goto	i2l4376
  6970  001A5C                     i2l398:
  6971  001A5C  0012               	return		;funcret
  6972  001A5E                     __end_ofi2_read_colorsensor:
  6973                           	opt stack 0
  6974                           pclatu	equ	0xFFB
  6975                           pclath	equ	0xFFA
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           intcon2	equ	0xFF1
  6984                           intcon3	equ	0xFF0
  6985                           postinc0	equ	0xFEE
  6986                           fsr0h	equ	0xFEA
  6987                           fsr0l	equ	0xFE9
  6988                           wreg	equ	0xFE8
  6989                           fsr1h	equ	0xFE2
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function i2_printf *****************
  6999 ;; Defined at:
  7000 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7003 ;;		 -> STR_30(15), STR_29(16), STR_28(28), STR_27(25), 
  7004 ;;		 -> STR_26(24), STR_25(23), STR_24(18), STR_23(23), 
  7005 ;;		 -> STR_22(10), STR_21(18), STR_20(18), STR_19(18), 
  7006 ;;		 -> STR_18(18), STR_17(18), STR_16(18), STR_15(18), 
  7007 ;;		 -> STR_14(18), STR_13(17), STR_12(17), STR_11(23), 
  7008 ;;		 -> STR_10(23), STR_9(7), STR_8(7), STR_7(7), 
  7009 ;;		 -> STR_6(14), STR_5(14), STR_4(24), STR_3(24), 
  7010 ;;		 -> STR_2(24), STR_1(24), 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  printf          4    0        struct .
  7013 ;;  printf          3    0        PTR const unsigned char 
  7014 ;;  printf          2   29[COMRAM] int 
  7015 ;;  printf          2   26[COMRAM] unsigned int 
  7016 ;;  printf          2   23[COMRAM] PTR void [1]
  7017 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7018 ;;  printf          2    0        unsigned int 
  7019 ;;  printf          1   31[COMRAM] char 
  7020 ;;  printf          1   28[COMRAM] unsigned char 
  7021 ;;  printf          1   25[COMRAM] char 
  7022 ;;  printf          1   22[COMRAM] unsigned char 
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  2   12[COMRAM] int 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7032 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;Total ram usage:       20 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    2
  7039 ;; This function calls:
  7040 ;;		i2___lwdiv
  7041 ;;		i2___lwmod
  7042 ;;		i2___wmul
  7043 ;;		i2_isdigit
  7044 ;;		i2_putch
  7045 ;; This function is called by:
  7046 ;;		_isr
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text29
  7051  0007D0                     __ptext29:
  7052                           	opt stack 0
  7053  0007D0                     i2_printf:
  7054                           	opt stack 23
  7055                           
  7056                           ;doprnt.c: 466: va_list ap;
  7057                           ;doprnt.c: 499: signed char c;
  7058                           ;doprnt.c: 501: int width;
  7059                           ;doprnt.c: 506: signed char prec;
  7060                           ;doprnt.c: 508: unsigned char flag;
  7061                           ;doprnt.c: 523: union {
  7062                           ;doprnt.c: 524: unsigned long vd;
  7063                           ;doprnt.c: 525: double integ;
  7064                           ;doprnt.c: 526: } tmpval;
  7065                           ;doprnt.c: 528: unsigned int val;
  7066                           ;doprnt.c: 529: unsigned len;
  7067                           ;doprnt.c: 530: const char * cp;
  7068                           ;doprnt.c: 533: *ap = __va_start();
  7069                           
  7070                           ;incstack = 0
  7071  0007D0  0E0F               	movlw	low (?i2_printf+2)
  7072  0007D2  6E18               	movwf	i2printf@ap,c
  7073  0007D4  0E00               	movlw	high (?i2_printf+2)
  7074  0007D6  6E19               	movwf	i2printf@ap+1,c
  7075                           
  7076                           ;doprnt.c: 536: while(c = *f++) {
  7077  0007D8  D184               	goto	i2l4518
  7078  0007DA                     i2l4388:
  7079                           
  7080                           ;doprnt.c: 538: if(c != '%')
  7081  0007DA  0E25               	movlw	37
  7082  0007DC  1820               	xorwf	i2printf@c,w,c
  7083  0007DE  B4D8               	btfsc	status,2,c
  7084  0007E0  D004               	goto	i2l4392
  7085                           
  7086                           ;doprnt.c: 540: {
  7087                           ;doprnt.c: 541: (putch(c) );
  7088  0007E2  5020               	movf	i2printf@c,w,c
  7089  0007E4  ECF2  F015         	call	i2_putch
  7090                           
  7091                           ;doprnt.c: 542: continue;
  7092  0007E8  D17C               	goto	i2l4518
  7093  0007EA                     i2l4392:
  7094                           
  7095                           ;doprnt.c: 543: }
  7096                           ;doprnt.c: 546: width = 0;
  7097  0007EA  0E00               	movlw	0
  7098  0007EC  6E1F               	movwf	i2printf@width+1,c
  7099  0007EE  0E00               	movlw	0
  7100  0007F0  6E1E               	movwf	i2printf@width,c
  7101                           
  7102                           ;doprnt.c: 548: flag = 0;
  7103  0007F2  0E00               	movlw	0
  7104  0007F4  6E1D               	movwf	i2printf@flag,c
  7105                           
  7106                           ;doprnt.c: 551: switch(*f) {
  7107                           
  7108                           ;doprnt.c: 550: for(;;) {
  7109  0007F6  D003               	goto	i2l4398
  7110  0007F8                     i2l4394:
  7111                           
  7112                           ;doprnt.c: 580: flag |= 0x04;
  7113  0007F8  841D               	bsf	i2printf@flag,2,c
  7114                           
  7115                           ;doprnt.c: 581: f++;
  7116  0007FA  4A0D               	infsnz	i2printf@f,f,c
  7117  0007FC  2A0E               	incf	i2printf@f+1,f,c
  7118  0007FE                     i2l4398:
  7119  0007FE  C00D  FFF6         	movff	i2printf@f,tblptrl
  7120  000802  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7121  000806                     	if	0	;tblptru may be non-zero
  7122  000806                     	endif
  7123  000806                     	if	0	;tblptru may be non-zero
  7124  000806                     	endif
  7125  000806  0008               	tblrd		*
  7126  000808  50F5               	movf	tablat,w,c
  7127                           
  7128                           ; Switch size 1, requested type "space"
  7129                           ; Number of cases is 1, Range of values is 48 to 48
  7130                           ; switch strategies available:
  7131                           ; Name         Instructions Cycles
  7132                           ; simple_byte            4     3 (average)
  7133                           ;	Chosen strategy is simple_byte
  7134  00080A  0A30               	xorlw	48	; case 48
  7135  00080C  B4D8               	btfsc	status,2,c
  7136  00080E  D7F4               	goto	i2l4394
  7137                           
  7138                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7139                           
  7140                           ;doprnt.c: 586: }
  7141                           
  7142                           ;doprnt.c: 585: break;
  7143  000810  C00D  FFF6         	movff	i2printf@f,tblptrl
  7144  000814  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7145  000818                     	if	0	;tblptru may be non-zero
  7146  000818                     	endif
  7147  000818                     	if	0	;tblptru may be non-zero
  7148  000818                     	endif
  7149  000818  0008               	tblrd		*
  7150  00081A  50F5               	movf	tablat,w,c
  7151  00081C  ECB4  F015         	call	i2_isdigit
  7152  000820  A0D8               	btfss	status,0,c
  7153  000822  D038               	goto	i2l4418
  7154                           
  7155                           ;doprnt.c: 598: width = 0;
  7156  000824  0E00               	movlw	0
  7157  000826  6E1F               	movwf	i2printf@width+1,c
  7158  000828  0E00               	movlw	0
  7159  00082A  6E1E               	movwf	i2printf@width,c
  7160  00082C                     i2l4404:
  7161                           
  7162                           ;doprnt.c: 600: width *= 10;
  7163  00082C  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  7164  000830  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7165  000834  0E00               	movlw	0
  7166  000836  6E04               	movwf	i2___wmul@multiplicand+1,c
  7167  000838  0E0A               	movlw	10
  7168  00083A  6E03               	movwf	i2___wmul@multiplicand,c
  7169  00083C  EC7E  F015         	call	i2___wmul	;wreg free
  7170  000840  C001  F01E         	movff	?i2___wmul,i2printf@width
  7171  000844  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  7172                           
  7173                           ;doprnt.c: 601: width += *f++ - '0';
  7174  000848  0ED0               	movlw	208
  7175  00084A  6E13               	movwf	??i2_printf& (0+255),c
  7176  00084C  0EFF               	movlw	255
  7177  00084E  6E14               	movwf	(??i2_printf+1)& (0+255),c
  7178  000850  C00D  FFF6         	movff	i2printf@f,tblptrl
  7179  000854  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7180  000858                     	if	0	;tblptru may be non-zero
  7181  000858                     	endif
  7182  000858                     	if	0	;tblptru may be non-zero
  7183  000858                     	endif
  7184  000858  0008               	tblrd		*
  7185  00085A  50F5               	movf	tablat,w,c
  7186  00085C  6E15               	movwf	(??i2_printf+2)& (0+255),c
  7187  00085E  6A16               	clrf	(??i2_printf+3)& (0+255),c
  7188  000860  5013               	movf	??i2_printf,w,c
  7189  000862  2615               	addwf	??i2_printf+2,f,c
  7190  000864  5014               	movf	??i2_printf+1,w,c
  7191  000866  2216               	addwfc	??i2_printf+3,f,c
  7192  000868  5015               	movf	??i2_printf+2,w,c
  7193  00086A  261E               	addwf	i2printf@width,f,c
  7194  00086C  5016               	movf	??i2_printf+3,w,c
  7195  00086E  221F               	addwfc	i2printf@width+1,f,c
  7196  000870  4A0D               	infsnz	i2printf@f,f,c
  7197  000872  2A0E               	incf	i2printf@f+1,f,c
  7198                           
  7199                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7200  000874  C00D  FFF6         	movff	i2printf@f,tblptrl
  7201  000878  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7202  00087C                     	if	0	;tblptru may be non-zero
  7203  00087C                     	endif
  7204  00087C                     	if	0	;tblptru may be non-zero
  7205  00087C                     	endif
  7206  00087C  0008               	tblrd		*
  7207  00087E  50F5               	movf	tablat,w,c
  7208  000880  ECB4  F015         	call	i2_isdigit
  7209  000884  A0D8               	btfss	status,0,c
  7210  000886  D006               	goto	i2l4418
  7211  000888  D7D1               	goto	i2l4404
  7212  00088A                     i2l4412:
  7213                           
  7214                           ;doprnt.c: 721: flag |= 0x80;
  7215  00088A  8E1D               	bsf	i2printf@flag,7,c
  7216                           
  7217                           ;doprnt.c: 723: break;
  7218  00088C  D01D               	goto	i2l4420
  7219  00088E                     i2l4414:
  7220                           
  7221                           ;doprnt.c: 818: flag |= 0xC0;
  7222  00088E  0EC0               	movlw	192
  7223  000890  121D               	iorwf	i2printf@flag,f,c
  7224                           
  7225                           ;doprnt.c: 822: }
  7226                           
  7227                           ;doprnt.c: 819: break;
  7228  000892  D01A               	goto	i2l4420
  7229  000894                     i2l4418:
  7230  000894  C00D  FFF6         	movff	i2printf@f,tblptrl
  7231  000898  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7232  00089C  4A0D               	infsnz	i2printf@f,f,c
  7233  00089E  2A0E               	incf	i2printf@f+1,f,c
  7234  0008A0                     	if	0	;tblptru may be non-zero
  7235  0008A0                     	endif
  7236  0008A0                     	if	0	;tblptru may be non-zero
  7237  0008A0                     	endif
  7238  0008A0  0008               	tblrd		*
  7239  0008A2  CFF5 F020          	movff	tablat,i2printf@c
  7240  0008A6  5020               	movf	i2printf@c,w,c
  7241                           
  7242                           ; Switch size 1, requested type "space"
  7243                           ; Number of cases is 5, Range of values is 0 to 120
  7244                           ; switch strategies available:
  7245                           ; Name         Instructions Cycles
  7246                           ; simple_byte           16     9 (average)
  7247                           ;	Chosen strategy is simple_byte
  7248  0008A8  0A00               	xorlw	0	; case 0
  7249  0008AA  B4D8               	btfsc	status,2,c
  7250  0008AC  0012               	return	
  7251  0008AE  0A64               	xorlw	100	; case 100
  7252  0008B0  B4D8               	btfsc	status,2,c
  7253  0008B2  D00A               	goto	i2l4420
  7254  0008B4  0A0D               	xorlw	13	; case 105
  7255  0008B6  B4D8               	btfsc	status,2,c
  7256  0008B8  D007               	goto	i2l4420
  7257  0008BA  0A1C               	xorlw	28	; case 117
  7258  0008BC  B4D8               	btfsc	status,2,c
  7259  0008BE  D7E7               	goto	i2l4414
  7260  0008C0  0A0D               	xorlw	13	; case 120
  7261  0008C2  B4D8               	btfsc	status,2,c
  7262  0008C4  D7E2               	goto	i2l4412
  7263  0008C6  D10D               	goto	i2l4518
  7264  0008C8                     i2l4420:
  7265                           
  7266                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7267  0008C8  C01D  F013         	movff	i2printf@flag,??i2_printf
  7268  0008CC  0EC0               	movlw	192
  7269  0008CE  1613               	andwf	??i2_printf,f,c
  7270  0008D0  A4D8               	btfss	status,2,c
  7271  0008D2  D015               	goto	i2l4432
  7272                           
  7273                           ;doprnt.c: 1253: {
  7274                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7275  0008D4  C018  FFD9         	movff	i2printf@ap,fsr2l
  7276  0008D8  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7277  0008DC  CFDE F01B          	movff	postinc2,i2printf@val
  7278  0008E0  CFDD F01C          	movff	postdec2,i2printf@val+1
  7279  0008E4  0E02               	movlw	2
  7280  0008E6  2618               	addwf	i2printf@ap,f,c
  7281  0008E8  0E00               	movlw	0
  7282  0008EA  2219               	addwfc	i2printf@ap+1,f,c
  7283                           
  7284                           ;doprnt.c: 1261: if((int)val < 0) {
  7285  0008EC  AE1C               	btfss	i2printf@val+1,7,c
  7286  0008EE  D044               	goto	i2l4466
  7287                           
  7288                           ;doprnt.c: 1262: flag |= 0x03;
  7289  0008F0  0E03               	movlw	3
  7290  0008F2  121D               	iorwf	i2printf@flag,f,c
  7291                           
  7292                           ;doprnt.c: 1263: val = -val;
  7293  0008F4  6C1B               	negf	i2printf@val,c
  7294  0008F6  1E1C               	comf	i2printf@val+1,f,c
  7295  0008F8  B0D8               	btfsc	status,0,c
  7296  0008FA  2A1C               	incf	i2printf@val+1,f,c
  7297                           
  7298                           ;doprnt.c: 1264: }
  7299                           ;doprnt.c: 1266: }
  7300  0008FC  D03D               	goto	i2l4466
  7301  0008FE                     i2l4432:
  7302                           
  7303                           ;doprnt.c: 1268: else
  7304                           ;doprnt.c: 1273: {
  7305                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7306  0008FE  C018  FFD9         	movff	i2printf@ap,fsr2l
  7307  000902  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7308  000906  CFDE F01B          	movff	postinc2,i2printf@val
  7309  00090A  CFDD F01C          	movff	postdec2,i2printf@val+1
  7310  00090E  0E02               	movlw	2
  7311  000910  2618               	addwf	i2printf@ap,f,c
  7312  000912  0E00               	movlw	0
  7313  000914  2219               	addwfc	i2printf@ap+1,f,c
  7314                           
  7315                           ;doprnt.c: 1287: }
  7316                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7317  000916  D030               	goto	i2l4466
  7318  000918                     i2l4436:
  7319                           
  7320                           ;doprnt.c: 1302: case 0xC0:
  7321                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7322  000918  0E01               	movlw	1
  7323  00091A  6E20               	movwf	i2printf@c,c
  7324  00091C                     i2l4438:
  7325  00091C  0E05               	movlw	5
  7326  00091E  1820               	xorwf	i2printf@c,w,c
  7327  000920  B4D8               	btfsc	status,2,c
  7328  000922  D035               	goto	i2l4468
  7329                           
  7330                           ;doprnt.c: 1306: if(val < dpowers[c])
  7331  000924  5020               	movf	i2printf@c,w,c
  7332  000926  0D02               	mullw	2
  7333  000928  0EB2               	movlw	low _dpowers
  7334  00092A  24F3               	addwf	prodl,w,c
  7335  00092C  6EF6               	movwf	tblptrl,c
  7336  00092E  0EFD               	movlw	high _dpowers
  7337  000930  20F4               	addwfc	prodh,w,c
  7338  000932  6EF7               	movwf	tblptrh,c
  7339  000934                     	if	0	;There are less than 3 active tblptr bytes
  7340  000934                     	endif
  7341  000934  0009               	tblrd		*+
  7342  000936  50F5               	movf	tablat,w,c
  7343  000938  5C1B               	subwf	i2printf@val,w,c
  7344  00093A  0009               	tblrd		*+
  7345  00093C  50F5               	movf	tablat,w,c
  7346  00093E  581C               	subwfb	i2printf@val+1,w,c
  7347  000940  A0D8               	btfss	status,0,c
  7348  000942  D025               	goto	i2l4468
  7349                           
  7350                           ;doprnt.c: 1307: break;
  7351  000944  2A20               	incf	i2printf@c,f,c
  7352  000946  D7EA               	goto	i2l4438
  7353  000948                     i2l4450:
  7354                           
  7355                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7356  000948  0E01               	movlw	1
  7357  00094A  6E20               	movwf	i2printf@c,c
  7358  00094C                     i2l4452:
  7359  00094C  0E04               	movlw	4
  7360  00094E  1820               	xorwf	i2printf@c,w,c
  7361  000950  B4D8               	btfsc	status,2,c
  7362  000952  D01D               	goto	i2l4468
  7363                           
  7364                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7365  000954  5020               	movf	i2printf@c,w,c
  7366  000956  0D02               	mullw	2
  7367  000958  0EBC               	movlw	low _hexpowers
  7368  00095A  24F3               	addwf	prodl,w,c
  7369  00095C  6EF6               	movwf	tblptrl,c
  7370  00095E  0EFD               	movlw	high _hexpowers
  7371  000960  20F4               	addwfc	prodh,w,c
  7372  000962  6EF7               	movwf	tblptrh,c
  7373  000964                     	if	0	;There are less than 3 active tblptr bytes
  7374  000964                     	endif
  7375  000964  0009               	tblrd		*+
  7376  000966  50F5               	movf	tablat,w,c
  7377  000968  5C1B               	subwf	i2printf@val,w,c
  7378  00096A  0009               	tblrd		*+
  7379  00096C  50F5               	movf	tablat,w,c
  7380  00096E  581C               	subwfb	i2printf@val+1,w,c
  7381  000970  A0D8               	btfss	status,0,c
  7382  000972  D00D               	goto	i2l4468
  7383                           
  7384                           ;doprnt.c: 1318: break;
  7385  000974  2A20               	incf	i2printf@c,f,c
  7386  000976  D7EA               	goto	i2l4452
  7387  000978                     i2l4466:
  7388  000978  501D               	movf	i2printf@flag,w,c
  7389  00097A  0BC0               	andlw	192
  7390                           
  7391                           ; Switch size 1, requested type "space"
  7392                           ; Number of cases is 3, Range of values is 0 to 192
  7393                           ; switch strategies available:
  7394                           ; Name         Instructions Cycles
  7395                           ; simple_byte           10     6 (average)
  7396                           ;	Chosen strategy is simple_byte
  7397  00097C  0A00               	xorlw	0	; case 0
  7398  00097E  B4D8               	btfsc	status,2,c
  7399  000980  D7CB               	goto	i2l4436
  7400  000982  0A80               	xorlw	128	; case 128
  7401  000984  B4D8               	btfsc	status,2,c
  7402  000986  D7E0               	goto	i2l4450
  7403  000988  0A40               	xorlw	64	; case 192
  7404  00098A  B4D8               	btfsc	status,2,c
  7405  00098C  D7C5               	goto	i2l4436
  7406  00098E                     i2l4468:
  7407                           
  7408                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7409  00098E  501E               	movf	i2printf@width,w,c
  7410  000990  101F               	iorwf	i2printf@width+1,w,c
  7411  000992  B4D8               	btfsc	status,2,c
  7412  000994  D009               	goto	i2l4474
  7413  000996  C01D  F013         	movff	i2printf@flag,??i2_printf
  7414  00099A  0E03               	movlw	3
  7415  00099C  1613               	andwf	??i2_printf,f,c
  7416  00099E  B4D8               	btfsc	status,2,c
  7417  0009A0  D003               	goto	i2l4474
  7418                           
  7419                           ;doprnt.c: 1346: width--;
  7420  0009A2  061E               	decf	i2printf@width,f,c
  7421  0009A4  A0D8               	btfss	status,0,c
  7422  0009A6  061F               	decf	i2printf@width+1,f,c
  7423  0009A8                     i2l4474:
  7424                           
  7425                           ;doprnt.c: 1381: if(width > c)
  7426  0009A8  0E80               	movlw	128
  7427  0009AA  BE20               	btfsc	i2printf@c,7,c
  7428  0009AC  0E7F               	movlw	127
  7429  0009AE  6E13               	movwf	??i2_printf& (0+255),c
  7430  0009B0  501E               	movf	i2printf@width,w,c
  7431  0009B2  5C20               	subwf	i2printf@c,w,c
  7432  0009B4  501F               	movf	i2printf@width+1,w,c
  7433  0009B6  0A80               	xorlw	128
  7434  0009B8  5813               	subwfb	??i2_printf& (0+255),w,c
  7435  0009BA  B0D8               	btfsc	status,0,c
  7436  0009BC  D007               	goto	i2l4478
  7437                           
  7438                           ;doprnt.c: 1382: width -= c;
  7439  0009BE  5020               	movf	i2printf@c,w,c
  7440  0009C0  5E1E               	subwf	i2printf@width,f,c
  7441  0009C2  0E00               	movlw	0
  7442  0009C4  BE20               	btfsc	i2printf@c,7,c
  7443  0009C6  0EFF               	movlw	255
  7444  0009C8  5A1F               	subwfb	i2printf@width+1,f,c
  7445  0009CA  D004               	goto	i2l4480
  7446  0009CC                     i2l4478:
  7447                           
  7448                           ;doprnt.c: 1383: else
  7449                           ;doprnt.c: 1384: width = 0;
  7450  0009CC  0E00               	movlw	0
  7451  0009CE  6E1F               	movwf	i2printf@width+1,c
  7452  0009D0  0E00               	movlw	0
  7453  0009D2  6E1E               	movwf	i2printf@width,c
  7454  0009D4                     i2l4480:
  7455                           
  7456                           ;doprnt.c: 1387: if(flag & 0x04) {
  7457  0009D4  A41D               	btfss	i2printf@flag,2,c
  7458  0009D6  D014               	goto	i2l4492
  7459                           
  7460                           ;doprnt.c: 1392: if(flag & 0x03)
  7461  0009D8  C01D  F013         	movff	i2printf@flag,??i2_printf
  7462  0009DC  0E03               	movlw	3
  7463  0009DE  1613               	andwf	??i2_printf,f,c
  7464  0009E0  B4D8               	btfsc	status,2,c
  7465  0009E2  D003               	goto	i2l4486
  7466                           
  7467                           ;doprnt.c: 1393: (putch('-') );
  7468  0009E4  0E2D               	movlw	45
  7469  0009E6  ECF2  F015         	call	i2_putch
  7470  0009EA                     i2l4486:
  7471                           
  7472                           ;doprnt.c: 1415: if(width)
  7473  0009EA  501E               	movf	i2printf@width,w,c
  7474  0009EC  101F               	iorwf	i2printf@width+1,w,c
  7475  0009EE  B4D8               	btfsc	status,2,c
  7476  0009F0  D01E               	goto	i2l4502
  7477                           
  7478                           ;doprnt.c: 1417: (putch('0') );
  7479                           
  7480                           ;doprnt.c: 1416: do
  7481  0009F2  0E30               	movlw	48
  7482  0009F4  ECF2  F015         	call	i2_putch
  7483                           
  7484                           ;doprnt.c: 1418: while(--width);
  7485  0009F8  061E               	decf	i2printf@width,f,c
  7486  0009FA  A0D8               	btfss	status,0,c
  7487  0009FC  061F               	decf	i2printf@width+1,f,c
  7488  0009FE  D7F5               	goto	i2l4486
  7489  000A00                     i2l4492:
  7490                           
  7491                           ;doprnt.c: 1422: {
  7492                           ;doprnt.c: 1424: if(width
  7493                           ;doprnt.c: 1428: )
  7494  000A00  501E               	movf	i2printf@width,w,c
  7495  000A02  101F               	iorwf	i2printf@width+1,w,c
  7496  000A04  B4D8               	btfsc	status,2,c
  7497  000A06  D00A               	goto	i2l4498
  7498  000A08                     i2l4494:
  7499                           
  7500                           ;doprnt.c: 1430: (putch(' ') );
  7501  000A08  0E20               	movlw	32
  7502  000A0A  ECF2  F015         	call	i2_putch
  7503                           
  7504                           ;doprnt.c: 1431: while(--width);
  7505  000A0E  061E               	decf	i2printf@width,f,c
  7506  000A10  A0D8               	btfss	status,0,c
  7507  000A12  061F               	decf	i2printf@width+1,f,c
  7508  000A14  501E               	movf	i2printf@width,w,c
  7509  000A16  101F               	iorwf	i2printf@width+1,w,c
  7510  000A18  A4D8               	btfss	status,2,c
  7511  000A1A  D7F6               	goto	i2l4494
  7512  000A1C                     i2l4498:
  7513                           
  7514                           ;doprnt.c: 1438: if(flag & 0x03)
  7515  000A1C  C01D  F013         	movff	i2printf@flag,??i2_printf
  7516  000A20  0E03               	movlw	3
  7517  000A22  1613               	andwf	??i2_printf,f,c
  7518  000A24  B4D8               	btfsc	status,2,c
  7519  000A26  D003               	goto	i2l4502
  7520                           
  7521                           ;doprnt.c: 1439: (putch('-') );
  7522  000A28  0E2D               	movlw	45
  7523  000A2A  ECF2  F015         	call	i2_putch
  7524  000A2E                     i2l4502:
  7525                           
  7526                           ;doprnt.c: 1469: }
  7527                           ;doprnt.c: 1472: prec = c;
  7528  000A2E  C020  F01A         	movff	i2printf@c,i2printf@prec
  7529                           
  7530                           ;doprnt.c: 1474: while(prec--) {
  7531  000A32  D053               	goto	i2l4516
  7532  000A34                     i2l4504:
  7533                           
  7534                           ;doprnt.c: 1486: case 0xC0:
  7535                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7536  000A34  501A               	movf	i2printf@prec,w,c
  7537  000A36  0D02               	mullw	2
  7538  000A38  0EB2               	movlw	low _dpowers
  7539  000A3A  24F3               	addwf	prodl,w,c
  7540  000A3C  6EF6               	movwf	tblptrl,c
  7541  000A3E  0EFD               	movlw	high _dpowers
  7542  000A40  20F4               	addwfc	prodh,w,c
  7543  000A42  6EF7               	movwf	tblptrh,c
  7544  000A44                     	if	0	;There are less than 3 active tblptr bytes
  7545  000A44                     	endif
  7546  000A44  0009               	tblrd		*+
  7547  000A46  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7548  000A4A  000A               	tblrd		*-
  7549  000A4C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7550  000A50  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7551  000A54  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7552  000A58  EC0F  F014         	call	i2___lwdiv	;wreg free
  7553  000A5C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7554  000A60  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7555  000A64  0E00               	movlw	0
  7556  000A66  6E0B               	movwf	i2___lwmod@divisor+1,c
  7557  000A68  0E0A               	movlw	10
  7558  000A6A  6E0A               	movwf	i2___lwmod@divisor,c
  7559  000A6C  ECAC  F014         	call	i2___lwmod	;wreg free
  7560  000A70  5008               	movf	?i2___lwmod,w,c
  7561  000A72  0F30               	addlw	48
  7562  000A74  6E20               	movwf	i2printf@c,c
  7563                           
  7564                           ;doprnt.c: 1491: break;
  7565  000A76  D02E               	goto	i2l4514
  7566  000A78                     i2l4506:
  7567                           
  7568                           ;doprnt.c: 1499: {
  7569                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7570  000A78  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7571  000A7C  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7572  000A80  501A               	movf	i2printf@prec,w,c
  7573  000A82  0D02               	mullw	2
  7574  000A84  0EBC               	movlw	low _hexpowers
  7575  000A86  24F3               	addwf	prodl,w,c
  7576  000A88  6EF6               	movwf	tblptrl,c
  7577  000A8A  0EFD               	movlw	high _hexpowers
  7578  000A8C  20F4               	addwfc	prodh,w,c
  7579  000A8E  6EF7               	movwf	tblptrh,c
  7580  000A90                     	if	0	;There are less than 3 active tblptr bytes
  7581  000A90                     	endif
  7582  000A90  0009               	tblrd		*+
  7583  000A92  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7584  000A96  000A               	tblrd		*-
  7585  000A98  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7586  000A9C  EC0F  F014         	call	i2___lwdiv	;wreg free
  7587  000AA0  5001               	movf	?i2___lwdiv,w,c
  7588  000AA2  0B0F               	andlw	15
  7589  000AA4  6E17               	movwf	i2printf@idx,c
  7590                           
  7591                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7592  000AA6  5017               	movf	i2printf@idx,w,c
  7593  000AA8  0D01               	mullw	1
  7594  000AAA  0E7F               	movlw	low STR_31
  7595  000AAC  24F3               	addwf	prodl,w,c
  7596  000AAE  6EF6               	movwf	tblptrl,c
  7597  000AB0  0EFF               	movlw	high STR_31
  7598  000AB2  20F4               	addwfc	prodh,w,c
  7599  000AB4  6EF7               	movwf	tblptrh,c
  7600  000AB6                     	if	0	;There are less than 3 active tblptr bytes
  7601  000AB6                     	endif
  7602  000AB6  0008               	tblrd		*
  7603  000AB8  CFF5 F020          	movff	tablat,i2printf@c
  7604                           
  7605                           ;doprnt.c: 1523: }
  7606                           
  7607                           ;doprnt.c: 1508: }
  7608                           ;doprnt.c: 1510: break;
  7609  000ABC  D00B               	goto	i2l4514
  7610  000ABE                     i2l4512:
  7611  000ABE  501D               	movf	i2printf@flag,w,c
  7612  000AC0  0BC0               	andlw	192
  7613                           
  7614                           ; Switch size 1, requested type "space"
  7615                           ; Number of cases is 3, Range of values is 0 to 192
  7616                           ; switch strategies available:
  7617                           ; Name         Instructions Cycles
  7618                           ; simple_byte           10     6 (average)
  7619                           ;	Chosen strategy is simple_byte
  7620  000AC2  0A00               	xorlw	0	; case 0
  7621  000AC4  B4D8               	btfsc	status,2,c
  7622  000AC6  D7B6               	goto	i2l4504
  7623  000AC8  0A80               	xorlw	128	; case 128
  7624  000ACA  B4D8               	btfsc	status,2,c
  7625  000ACC  D7D5               	goto	i2l4506
  7626  000ACE  0A40               	xorlw	64	; case 192
  7627  000AD0  B4D8               	btfsc	status,2,c
  7628  000AD2  D7B0               	goto	i2l4504
  7629  000AD4                     i2l4514:
  7630                           
  7631                           ;doprnt.c: 1524: (putch(c) );
  7632  000AD4  5020               	movf	i2printf@c,w,c
  7633  000AD6  ECF2  F015         	call	i2_putch
  7634  000ADA                     i2l4516:
  7635  000ADA  061A               	decf	i2printf@prec,f,c
  7636  000ADC  281A               	incf	i2printf@prec,w,c
  7637  000ADE  A4D8               	btfss	status,2,c
  7638  000AE0  D7EE               	goto	i2l4512
  7639  000AE2                     i2l4518:
  7640  000AE2  C00D  FFF6         	movff	i2printf@f,tblptrl
  7641  000AE6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7642  000AEA  4A0D               	infsnz	i2printf@f,f,c
  7643  000AEC  2A0E               	incf	i2printf@f+1,f,c
  7644  000AEE                     	if	0	;tblptru may be non-zero
  7645  000AEE                     	endif
  7646  000AEE                     	if	0	;tblptru may be non-zero
  7647  000AEE                     	endif
  7648  000AEE  0008               	tblrd		*
  7649  000AF0  CFF5 F020          	movff	tablat,i2printf@c
  7650  000AF4  5020               	movf	i2printf@c,w,c
  7651  000AF6  B4D8               	btfsc	status,2,c
  7652  000AF8  0012               	return	
  7653  000AFA  D66F               	goto	i2l4388
  7654  000AFC                     __end_ofi2_printf:
  7655                           	opt stack 0
  7656                           pclatu	equ	0xFFB
  7657                           pclath	equ	0xFFA
  7658                           tblptru	equ	0xFF8
  7659                           tblptrh	equ	0xFF7
  7660                           tblptrl	equ	0xFF6
  7661                           tablat	equ	0xFF5
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           intcon	equ	0xFF2
  7665                           intcon2	equ	0xFF1
  7666                           intcon3	equ	0xFF0
  7667                           postinc0	equ	0xFEE
  7668                           fsr0h	equ	0xFEA
  7669                           fsr0l	equ	0xFE9
  7670                           wreg	equ	0xFE8
  7671                           fsr1h	equ	0xFE2
  7672                           fsr1l	equ	0xFE1
  7673                           indf2	equ	0xFDF
  7674                           postinc2	equ	0xFDE
  7675                           postdec2	equ	0xFDD
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680 ;; *************** function i2_putch *****************
  7681 ;; Defined at:
  7682 ;;		line 31 in file "lcd.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;  data            1    wreg     unsigned char 
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  data            1    2[COMRAM] unsigned char 
  7687 ;; Return value:  Size  Location     Type
  7688 ;;                  1    wreg      void 
  7689 ;; Registers used:
  7690 ;;		wreg, status,2, status,0, cstack
  7691 ;; Tracked objects:
  7692 ;;		On entry : 0/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;Total ram usage:        1 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; Hardware stack levels required when called:    1
  7703 ;; This function calls:
  7704 ;;		i2_lcdNibble
  7705 ;; This function is called by:
  7706 ;;		i2_printf
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           	psect	text30
  7711  002BE4                     __ptext30:
  7712                           	opt stack 0
  7713  002BE4                     i2_putch:
  7714                           	opt stack 23
  7715                           
  7716                           ;incstack = 0
  7717                           ;i2putch@data stored from wreg
  7718  002BE4  6E03               	movwf	i2putch@data,c
  7719                           
  7720                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7721  002BE6  848C               	bsf	3980,2,c	;volatile
  7722                           
  7723                           ;lcd.c: 33: lcdNibble(data);
  7724  002BE8  5003               	movf	i2putch@data,w,c
  7725  002BEA  EC60  F014         	call	i2_lcdNibble
  7726  002BEE  0012               	return		;funcret
  7727  002BF0                     __end_ofi2_putch:
  7728                           	opt stack 0
  7729                           pclatu	equ	0xFFB
  7730                           pclath	equ	0xFFA
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           prodh	equ	0xFF4
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           intcon2	equ	0xFF1
  7739                           intcon3	equ	0xFF0
  7740                           postinc0	equ	0xFEE
  7741                           fsr0h	equ	0xFEA
  7742                           fsr0l	equ	0xFE9
  7743                           wreg	equ	0xFE8
  7744                           fsr1h	equ	0xFE2
  7745                           fsr1l	equ	0xFE1
  7746                           indf2	equ	0xFDF
  7747                           postinc2	equ	0xFDE
  7748                           postdec2	equ	0xFDD
  7749                           fsr2h	equ	0xFDA
  7750                           fsr2l	equ	0xFD9
  7751                           status	equ	0xFD8
  7752                           
  7753 ;; *************** function i2_isdigit *****************
  7754 ;; Defined at:
  7755 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  c               1    wreg     unsigned char 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  c               1    2[COMRAM] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;		None               void
  7762 ;; Registers used:
  7763 ;;		wreg, status,2, status,0
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;Total ram usage:        3 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		i2_printf
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text31
  7783  002B68                     __ptext31:
  7784                           	opt stack 0
  7785  002B68                     i2_isdigit:
  7786                           	opt stack 24
  7787                           
  7788                           ;incstack = 0
  7789                           ;i2isdigit@c stored from wreg
  7790  002B68  6E03               	movwf	i2isdigit@c,c
  7791  002B6A  0E00               	movlw	0
  7792  002B6C  6E02               	movwf	i2_isdigit$818,c
  7793  002B6E  0E3A               	movlw	58
  7794  002B70  6003               	cpfslt	i2isdigit@c,c
  7795  002B72  D005               	goto	i2l3954
  7796  002B74  0E2F               	movlw	47
  7797  002B76  6403               	cpfsgt	i2isdigit@c,c
  7798  002B78  D002               	goto	i2l3954
  7799  002B7A  0E01               	movlw	1
  7800  002B7C  6E02               	movwf	i2_isdigit$818,c
  7801  002B7E                     i2l3954:
  7802  002B7E  C002  F001         	movff	i2_isdigit$818,??i2_isdigit
  7803  002B82  3001               	rrcf	??i2_isdigit,w,c
  7804  002B84  0012               	return	
  7805  002B86                     __end_ofi2_isdigit:
  7806                           	opt stack 0
  7807                           pclatu	equ	0xFFB
  7808                           pclath	equ	0xFFA
  7809                           tblptru	equ	0xFF8
  7810                           tblptrh	equ	0xFF7
  7811                           tblptrl	equ	0xFF6
  7812                           tablat	equ	0xFF5
  7813                           prodh	equ	0xFF4
  7814                           prodl	equ	0xFF3
  7815                           intcon	equ	0xFF2
  7816                           intcon2	equ	0xFF1
  7817                           intcon3	equ	0xFF0
  7818                           postinc0	equ	0xFEE
  7819                           fsr0h	equ	0xFEA
  7820                           fsr0l	equ	0xFE9
  7821                           wreg	equ	0xFE8
  7822                           fsr1h	equ	0xFE2
  7823                           fsr1l	equ	0xFE1
  7824                           indf2	equ	0xFDF
  7825                           postinc2	equ	0xFDE
  7826                           postdec2	equ	0xFDD
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function i2___lwmod *****************
  7832 ;; Defined at:
  7833 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  dividend        2    7[COMRAM] unsigned int 
  7836 ;;  divisor         2    9[COMRAM] unsigned int 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  2    7[COMRAM] unsigned int 
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;Total ram usage:        5 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		i2_printf
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text32
  7862  002958                     __ptext32:
  7863                           	opt stack 0
  7864  002958                     i2___lwmod:
  7865                           	opt stack 24
  7866                           
  7867                           ;incstack = 0
  7868  002958  500A               	movf	i2___lwmod@divisor,w,c
  7869  00295A  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7870  00295C  B4D8               	btfsc	status,2,c
  7871  00295E  D018               	goto	i2l888
  7872  002960  0E01               	movlw	1
  7873  002962  6E0C               	movwf	i2___lwmod@counter,c
  7874  002964  D004               	goto	i2l3986
  7875  002966                     i2l3984:
  7876  002966  90D8               	bcf	status,0,c
  7877  002968  360A               	rlcf	i2___lwmod@divisor,f,c
  7878  00296A  360B               	rlcf	i2___lwmod@divisor+1,f,c
  7879  00296C  2A0C               	incf	i2___lwmod@counter,f,c
  7880  00296E                     i2l3986:
  7881  00296E  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  7882  002970  D7FA               	goto	i2l3984
  7883  002972                     i2l3988:
  7884  002972  500A               	movf	i2___lwmod@divisor,w,c
  7885  002974  5C08               	subwf	i2___lwmod@dividend,w,c
  7886  002976  500B               	movf	i2___lwmod@divisor+1,w,c
  7887  002978  5809               	subwfb	i2___lwmod@dividend+1,w,c
  7888  00297A  A0D8               	btfss	status,0,c
  7889  00297C  D004               	goto	i2l3992
  7890  00297E  500A               	movf	i2___lwmod@divisor,w,c
  7891  002980  5E08               	subwf	i2___lwmod@dividend,f,c
  7892  002982  500B               	movf	i2___lwmod@divisor+1,w,c
  7893  002984  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  7894  002986                     i2l3992:
  7895  002986  90D8               	bcf	status,0,c
  7896  002988  320B               	rrcf	i2___lwmod@divisor+1,f,c
  7897  00298A  320A               	rrcf	i2___lwmod@divisor,f,c
  7898  00298C  2E0C               	decfsz	i2___lwmod@counter,f,c
  7899  00298E  D7F1               	goto	i2l3988
  7900  002990                     i2l888:
  7901  002990  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  7902  002994  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7903  002998  0012               	return		;funcret
  7904  00299A                     __end_ofi2___lwmod:
  7905                           	opt stack 0
  7906                           pclatu	equ	0xFFB
  7907                           pclath	equ	0xFFA
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           intcon	equ	0xFF2
  7915                           intcon2	equ	0xFF1
  7916                           intcon3	equ	0xFF0
  7917                           postinc0	equ	0xFEE
  7918                           fsr0h	equ	0xFEA
  7919                           fsr0l	equ	0xFE9
  7920                           wreg	equ	0xFE8
  7921                           fsr1h	equ	0xFE2
  7922                           fsr1l	equ	0xFE1
  7923                           indf2	equ	0xFDF
  7924                           postinc2	equ	0xFDE
  7925                           postdec2	equ	0xFDD
  7926                           fsr2h	equ	0xFDA
  7927                           fsr2l	equ	0xFD9
  7928                           status	equ	0xFD8
  7929                           
  7930 ;; *************** function i2___lwdiv *****************
  7931 ;; Defined at:
  7932 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7933 ;; Parameters:    Size  Location     Type
  7934 ;;  dividend        2    0[COMRAM] unsigned int 
  7935 ;;  divisor         2    2[COMRAM] unsigned int 
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7938 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  2    0[COMRAM] unsigned int 
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7949 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;Total ram usage:        7 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; This function calls:
  7955 ;;		Nothing
  7956 ;; This function is called by:
  7957 ;;		i2_printf
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           	psect	text33
  7962  00281E                     __ptext33:
  7963                           	opt stack 0
  7964  00281E                     i2___lwdiv:
  7965                           	opt stack 24
  7966                           
  7967                           ;incstack = 0
  7968  00281E  0E00               	movlw	0
  7969  002820  6E06               	movwf	i2___lwdiv@quotient+1,c
  7970  002822  0E00               	movlw	0
  7971  002824  6E05               	movwf	i2___lwdiv@quotient,c
  7972  002826  5003               	movf	i2___lwdiv@divisor,w,c
  7973  002828  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7974  00282A  B4D8               	btfsc	status,2,c
  7975  00282C  D01C               	goto	i2l878
  7976  00282E  0E01               	movlw	1
  7977  002830  6E07               	movwf	i2___lwdiv@counter,c
  7978  002832  D004               	goto	i2l3966
  7979  002834                     i2l3964:
  7980  002834  90D8               	bcf	status,0,c
  7981  002836  3603               	rlcf	i2___lwdiv@divisor,f,c
  7982  002838  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7983  00283A  2A07               	incf	i2___lwdiv@counter,f,c
  7984  00283C                     i2l3966:
  7985  00283C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7986  00283E  D7FA               	goto	i2l3964
  7987  002840                     i2l3968:
  7988  002840  90D8               	bcf	status,0,c
  7989  002842  3605               	rlcf	i2___lwdiv@quotient,f,c
  7990  002844  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7991  002846  5003               	movf	i2___lwdiv@divisor,w,c
  7992  002848  5C01               	subwf	i2___lwdiv@dividend,w,c
  7993  00284A  5004               	movf	i2___lwdiv@divisor+1,w,c
  7994  00284C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7995  00284E  A0D8               	btfss	status,0,c
  7996  002850  D005               	goto	i2l3976
  7997  002852  5003               	movf	i2___lwdiv@divisor,w,c
  7998  002854  5E01               	subwf	i2___lwdiv@dividend,f,c
  7999  002856  5004               	movf	i2___lwdiv@divisor+1,w,c
  8000  002858  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8001  00285A  8005               	bsf	i2___lwdiv@quotient,0,c
  8002  00285C                     i2l3976:
  8003  00285C  90D8               	bcf	status,0,c
  8004  00285E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8005  002860  3203               	rrcf	i2___lwdiv@divisor,f,c
  8006  002862  2E07               	decfsz	i2___lwdiv@counter,f,c
  8007  002864  D7ED               	goto	i2l3968
  8008  002866                     i2l878:
  8009  002866  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8010  00286A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8011  00286E  0012               	return		;funcret
  8012  002870                     __end_ofi2___lwdiv:
  8013                           	opt stack 0
  8014                           pclatu	equ	0xFFB
  8015                           pclath	equ	0xFFA
  8016                           tblptru	equ	0xFF8
  8017                           tblptrh	equ	0xFF7
  8018                           tblptrl	equ	0xFF6
  8019                           tablat	equ	0xFF5
  8020                           prodh	equ	0xFF4
  8021                           prodl	equ	0xFF3
  8022                           intcon	equ	0xFF2
  8023                           intcon2	equ	0xFF1
  8024                           intcon3	equ	0xFF0
  8025                           postinc0	equ	0xFEE
  8026                           fsr0h	equ	0xFEA
  8027                           fsr0l	equ	0xFE9
  8028                           wreg	equ	0xFE8
  8029                           fsr1h	equ	0xFE2
  8030                           fsr1l	equ	0xFE1
  8031                           indf2	equ	0xFDF
  8032                           postinc2	equ	0xFDE
  8033                           postdec2	equ	0xFDD
  8034                           fsr2h	equ	0xFDA
  8035                           fsr2l	equ	0xFD9
  8036                           status	equ	0xFD8
  8037                           
  8038 ;; *************** function i2_lcdInst *****************
  8039 ;; Defined at:
  8040 ;;		line 26 in file "lcd.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;  data            1    wreg     unsigned char 
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;  data            1    2[COMRAM] unsigned char 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      void 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2, status,0, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8058 ;;Total ram usage:        1 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    1
  8061 ;; This function calls:
  8062 ;;		i2_lcdNibble
  8063 ;; This function is called by:
  8064 ;;		_isr
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text34
  8069  002BF0                     __ptext34:
  8070                           	opt stack 0
  8071  002BF0                     i2_lcdInst:
  8072                           	opt stack 24
  8073                           
  8074                           ;incstack = 0
  8075                           ;i2lcdInst@data stored from wreg
  8076  002BF0  6E03               	movwf	i2lcdInst@data,c
  8077                           
  8078                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  8079  002BF2  948C               	bcf	3980,2,c	;volatile
  8080                           
  8081                           ;lcd.c: 28: lcdNibble(data);
  8082  002BF4  5003               	movf	i2lcdInst@data,w,c
  8083  002BF6  EC60  F014         	call	i2_lcdNibble
  8084  002BFA  0012               	return		;funcret
  8085  002BFC                     __end_ofi2_lcdInst:
  8086                           	opt stack 0
  8087                           pclatu	equ	0xFFB
  8088                           pclath	equ	0xFFA
  8089                           tblptru	equ	0xFF8
  8090                           tblptrh	equ	0xFF7
  8091                           tblptrl	equ	0xFF6
  8092                           tablat	equ	0xFF5
  8093                           prodh	equ	0xFF4
  8094                           prodl	equ	0xFF3
  8095                           intcon	equ	0xFF2
  8096                           intcon2	equ	0xFF1
  8097                           intcon3	equ	0xFF0
  8098                           postinc0	equ	0xFEE
  8099                           fsr0h	equ	0xFEA
  8100                           fsr0l	equ	0xFE9
  8101                           wreg	equ	0xFE8
  8102                           fsr1h	equ	0xFE2
  8103                           fsr1l	equ	0xFE1
  8104                           indf2	equ	0xFDF
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           
  8111 ;; *************** function i2_lcdNibble *****************
  8112 ;; Defined at:
  8113 ;;		line 36 in file "lcd.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  data            1    wreg     unsigned char 
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;  data            1    1[COMRAM] unsigned char 
  8118 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      void 
  8121 ;; Registers used:
  8122 ;;		wreg, status,2, status,0
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;Total ram usage:        2 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; This function calls:
  8135 ;;		Nothing
  8136 ;; This function is called by:
  8137 ;;		i2_lcdInst
  8138 ;;		i2_putch
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text35
  8143  0028C0                     __ptext35:
  8144                           	opt stack 0
  8145  0028C0                     i2_lcdNibble:
  8146                           	opt stack 23
  8147                           
  8148                           ;incstack = 0
  8149                           ;i2lcdNibble@data stored from wreg
  8150  0028C0  6E02               	movwf	i2lcdNibble@data,c
  8151                           
  8152                           ;lcd.c: 38: char temp = data & 0xF0;
  8153  0028C2  5002               	movf	i2lcdNibble@data,w,c
  8154  0028C4  0BF0               	andlw	240
  8155  0028C6  6E01               	movwf	i2lcdNibble@temp,c
  8156                           
  8157                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8158  0028C8  508C               	movf	3980,w,c	;volatile
  8159  0028CA  0B0F               	andlw	15
  8160  0028CC  6E8C               	movwf	3980,c	;volatile
  8161                           
  8162                           ;lcd.c: 40: LATD = temp | LATD;
  8163  0028CE  5001               	movf	i2lcdNibble@temp,w,c
  8164  0028D0  108C               	iorwf	3980,w,c	;volatile
  8165  0028D2  6E8C               	movwf	3980,c	;volatile
  8166                           
  8167                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  8168  0028D4  968C               	bcf	3980,3,c	;volatile
  8169                           
  8170                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8171  0028D6  0E19               	movlw	25
  8172  0028D8                     i2u423_47:
  8173  0028D8  2EE8               	decfsz	wreg,f,c
  8174  0028DA  D7FE               	bra	i2u423_47
  8175                           
  8176                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  8177  0028DC  868C               	bsf	3980,3,c	;volatile
  8178                           
  8179                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8180  0028DE  0E19               	movlw	25
  8181  0028E0                     i2u424_47:
  8182  0028E0  2EE8               	decfsz	wreg,f,c
  8183  0028E2  D7FE               	bra	i2u424_47
  8184                           
  8185                           ;lcd.c: 47: data = data << 4;
  8186  0028E4  3802               	swapf	i2lcdNibble@data,w,c
  8187  0028E6  0BF0               	andlw	240
  8188  0028E8  6E02               	movwf	i2lcdNibble@data,c
  8189                           
  8190                           ;lcd.c: 49: temp = data & 0xF0;
  8191  0028EA  5002               	movf	i2lcdNibble@data,w,c
  8192  0028EC  0BF0               	andlw	240
  8193  0028EE  6E01               	movwf	i2lcdNibble@temp,c
  8194                           
  8195                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8196  0028F0  508C               	movf	3980,w,c	;volatile
  8197  0028F2  0B0F               	andlw	15
  8198  0028F4  6E8C               	movwf	3980,c	;volatile
  8199                           
  8200                           ;lcd.c: 51: LATD = temp | LATD;
  8201  0028F6  5001               	movf	i2lcdNibble@temp,w,c
  8202  0028F8  108C               	iorwf	3980,w,c	;volatile
  8203  0028FA  6E8C               	movwf	3980,c	;volatile
  8204                           
  8205                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8206  0028FC  968C               	bcf	3980,3,c	;volatile
  8207                           
  8208                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8209  0028FE  0E19               	movlw	25
  8210  002900                     i2u425_47:
  8211  002900  2EE8               	decfsz	wreg,f,c
  8212  002902  D7FE               	bra	i2u425_47
  8213                           
  8214                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8215  002904  868C               	bsf	3980,3,c	;volatile
  8216                           
  8217                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8218  002906  0E19               	movlw	25
  8219  002908                     i2u426_47:
  8220  002908  2EE8               	decfsz	wreg,f,c
  8221  00290A  D7FE               	bra	i2u426_47
  8222  00290C  0012               	return		;funcret
  8223  00290E                     __end_ofi2_lcdNibble:
  8224                           	opt stack 0
  8225                           pclatu	equ	0xFFB
  8226                           pclath	equ	0xFFA
  8227                           tblptru	equ	0xFF8
  8228                           tblptrh	equ	0xFF7
  8229                           tblptrl	equ	0xFF6
  8230                           tablat	equ	0xFF5
  8231                           prodh	equ	0xFF4
  8232                           prodl	equ	0xFF3
  8233                           intcon	equ	0xFF2
  8234                           intcon2	equ	0xFF1
  8235                           intcon3	equ	0xFF0
  8236                           postinc0	equ	0xFEE
  8237                           fsr0h	equ	0xFEA
  8238                           fsr0l	equ	0xFE9
  8239                           wreg	equ	0xFE8
  8240                           fsr1h	equ	0xFE2
  8241                           fsr1l	equ	0xFE1
  8242                           indf2	equ	0xFDF
  8243                           postinc2	equ	0xFDE
  8244                           postdec2	equ	0xFDD
  8245                           fsr2h	equ	0xFDA
  8246                           fsr2l	equ	0xFD9
  8247                           status	equ	0xFD8
  8248                           
  8249 ;; *************** function i2_I2C_ColorSens_Init *****************
  8250 ;; Defined at:
  8251 ;;		line 54 in file "I2C.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;		None
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;		None
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  1    wreg      void 
  8258 ;; Registers used:
  8259 ;;		wreg, status,2, status,0, cstack
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8269 ;;Total ram usage:        1 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:    2
  8272 ;; This function calls:
  8273 ;;		i2_I2C_Master_Start
  8274 ;;		i2_I2C_Master_Stop
  8275 ;;		i2_I2C_Master_Write
  8276 ;; This function is called by:
  8277 ;;		_isr
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281                           	psect	text36
  8282  001304                     __ptext36:
  8283                           	opt stack 0
  8284  001304                     i2_I2C_ColorSens_Init:
  8285                           	opt stack 23
  8286                           
  8287                           ;I2C.c: 55: I2C_Master_Start();
  8288                           
  8289                           ;incstack = 0
  8290  001304  EC14  F016         	call	i2_I2C_Master_Start	;wreg free
  8291                           
  8292                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  8293  001308  0E00               	movlw	0
  8294  00130A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8295  00130C  0E52               	movlw	82
  8296  00130E  6E02               	movwf	i2I2C_Master_Write@d,c
  8297  001310  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8298                           
  8299                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  8300  001314  0E00               	movlw	0
  8301  001316  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8302  001318  0E80               	movlw	128
  8303  00131A  6E02               	movwf	i2I2C_Master_Write@d,c
  8304  00131C  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8305                           
  8306                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  8307  001320  0E00               	movlw	0
  8308  001322  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8309  001324  0E01               	movlw	1
  8310  001326  6E02               	movwf	i2I2C_Master_Write@d,c
  8311  001328  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8312                           
  8313                           ;I2C.c: 59: I2C_Master_Stop();
  8314  00132C  EC10  F016         	call	i2_I2C_Master_Stop	;wreg free
  8315                           
  8316                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  8317  001330  0E0A               	movlw	10
  8318  001332  6E04               	movwf	??i2_I2C_ColorSens_Init& (0+255),c
  8319  001334  0EBC               	movlw	188
  8320  001336                     i2u427_47:
  8321  001336  2EE8               	decfsz	wreg,f,c
  8322  001338  D7FE               	bra	i2u427_47
  8323  00133A  2E04               	decfsz	??i2_I2C_ColorSens_Init& (0+255),f,c
  8324  00133C  D7FC               	bra	i2u427_47
  8325  00133E  D000               	nop2	
  8326                           
  8327                           ;I2C.c: 63: I2C_Master_Start();
  8328  001340  EC14  F016         	call	i2_I2C_Master_Start	;wreg free
  8329                           
  8330                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  8331  001344  0E00               	movlw	0
  8332  001346  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8333  001348  0E52               	movlw	82
  8334  00134A  6E02               	movwf	i2I2C_Master_Write@d,c
  8335  00134C  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8336                           
  8337                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  8338  001350  0E00               	movlw	0
  8339  001352  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8340  001354  0E80               	movlw	128
  8341  001356  6E02               	movwf	i2I2C_Master_Write@d,c
  8342  001358  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8343                           
  8344                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
  8345  00135C  0E00               	movlw	0
  8346  00135E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8347  001360  0E03               	movlw	3
  8348  001362  6E02               	movwf	i2I2C_Master_Write@d,c
  8349  001364  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8350                           
  8351                           ;I2C.c: 67: I2C_Master_Stop();
  8352  001368  EC10  F016         	call	i2_I2C_Master_Stop	;wreg free
  8353                           
  8354                           ;I2C.c: 69: I2C_Master_Start();
  8355  00136C  EC14  F016         	call	i2_I2C_Master_Start	;wreg free
  8356                           
  8357                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  8358  001370  0E00               	movlw	0
  8359  001372  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8360  001374  0E52               	movlw	82
  8361  001376  6E02               	movwf	i2I2C_Master_Write@d,c
  8362  001378  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8363                           
  8364                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  8365  00137C  0E00               	movlw	0
  8366  00137E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8367  001380  0E8F               	movlw	143
  8368  001382  6E02               	movwf	i2I2C_Master_Write@d,c
  8369  001384  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8370                           
  8371                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  8372  001388  0E00               	movlw	0
  8373  00138A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8374  00138C  0E02               	movlw	2
  8375  00138E  6E02               	movwf	i2I2C_Master_Write@d,c
  8376  001390  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8377                           
  8378                           ;I2C.c: 73: I2C_Master_Stop();
  8379  001394  EC10  F016         	call	i2_I2C_Master_Stop	;wreg free
  8380                           
  8381                           ;I2C.c: 75: I2C_Master_Start();
  8382  001398  EC14  F016         	call	i2_I2C_Master_Start	;wreg free
  8383                           
  8384                           ;I2C.c: 76: I2C_Master_Write(0b01010010);
  8385  00139C  0E00               	movlw	0
  8386  00139E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8387  0013A0  0E52               	movlw	82
  8388  0013A2  6E02               	movwf	i2I2C_Master_Write@d,c
  8389  0013A4  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8390                           
  8391                           ;I2C.c: 77: I2C_Master_Write(0b10100100);
  8392  0013A8  0E00               	movlw	0
  8393  0013AA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8394  0013AC  0EA4               	movlw	164
  8395  0013AE  6E02               	movwf	i2I2C_Master_Write@d,c
  8396  0013B0  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8397                           
  8398                           ;I2C.c: 78: I2C_Master_Write(0x00);
  8399  0013B4  0E00               	movlw	0
  8400  0013B6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8401  0013B8  0E00               	movlw	0
  8402  0013BA  6E02               	movwf	i2I2C_Master_Write@d,c
  8403  0013BC  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8404                           
  8405                           ;I2C.c: 79: I2C_Master_Write(0x00);
  8406  0013C0  0E00               	movlw	0
  8407  0013C2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8408  0013C4  0E00               	movlw	0
  8409  0013C6  6E02               	movwf	i2I2C_Master_Write@d,c
  8410  0013C8  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8411                           
  8412                           ;I2C.c: 80: I2C_Master_Write(0x00);
  8413  0013CC  0E00               	movlw	0
  8414  0013CE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8415  0013D0  0E00               	movlw	0
  8416  0013D2  6E02               	movwf	i2I2C_Master_Write@d,c
  8417  0013D4  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8418                           
  8419                           ;I2C.c: 81: I2C_Master_Write(0b01001010);
  8420  0013D8  0E00               	movlw	0
  8421  0013DA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8422  0013DC  0E4A               	movlw	74
  8423  0013DE  6E02               	movwf	i2I2C_Master_Write@d,c
  8424  0013E0  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8425                           
  8426                           ;I2C.c: 82: I2C_Master_Stop();
  8427  0013E4  EC10  F016         	call	i2_I2C_Master_Stop	;wreg free
  8428                           
  8429                           ;I2C.c: 84: I2C_Master_Start();
  8430  0013E8  EC14  F016         	call	i2_I2C_Master_Start	;wreg free
  8431                           
  8432                           ;I2C.c: 85: I2C_Master_Write(0b01010010);
  8433  0013EC  0E00               	movlw	0
  8434  0013EE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8435  0013F0  0E52               	movlw	82
  8436  0013F2  6E02               	movwf	i2I2C_Master_Write@d,c
  8437  0013F4  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8438                           
  8439                           ;I2C.c: 86: I2C_Master_Write(0b10001100);
  8440  0013F8  0E00               	movlw	0
  8441  0013FA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8442  0013FC  0E8C               	movlw	140
  8443  0013FE  6E02               	movwf	i2I2C_Master_Write@d,c
  8444  001400  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8445                           
  8446                           ;I2C.c: 87: I2C_Master_Write(0b00000001);
  8447  001404  0E00               	movlw	0
  8448  001406  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8449  001408  0E01               	movlw	1
  8450  00140A  6E02               	movwf	i2I2C_Master_Write@d,c
  8451  00140C  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8452                           
  8453                           ;I2C.c: 88: I2C_Master_Stop();
  8454  001410  EC10  F016         	call	i2_I2C_Master_Stop	;wreg free
  8455                           
  8456                           ;I2C.c: 90: I2C_Master_Start();
  8457  001414  EC14  F016         	call	i2_I2C_Master_Start	;wreg free
  8458                           
  8459                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
  8460  001418  0E00               	movlw	0
  8461  00141A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8462  00141C  0E52               	movlw	82
  8463  00141E  6E02               	movwf	i2I2C_Master_Write@d,c
  8464  001420  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8465                           
  8466                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
  8467  001424  0E00               	movlw	0
  8468  001426  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8469  001428  0E81               	movlw	129
  8470  00142A  6E02               	movwf	i2I2C_Master_Write@d,c
  8471  00142C  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8472                           
  8473                           ;I2C.c: 93: I2C_Master_Write(0b11111110);
  8474  001430  0E00               	movlw	0
  8475  001432  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8476  001434  0EFE               	movlw	254
  8477  001436  6E02               	movwf	i2I2C_Master_Write@d,c
  8478  001438  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8479                           
  8480                           ;I2C.c: 94: I2C_Master_Stop();
  8481  00143C  EC10  F016         	call	i2_I2C_Master_Stop	;wreg free
  8482  001440  0012               	return		;funcret
  8483  001442                     __end_ofi2_I2C_ColorSens_Init:
  8484                           	opt stack 0
  8485                           pclatu	equ	0xFFB
  8486                           pclath	equ	0xFFA
  8487                           tblptru	equ	0xFF8
  8488                           tblptrh	equ	0xFF7
  8489                           tblptrl	equ	0xFF6
  8490                           tablat	equ	0xFF5
  8491                           prodh	equ	0xFF4
  8492                           prodl	equ	0xFF3
  8493                           intcon	equ	0xFF2
  8494                           intcon2	equ	0xFF1
  8495                           intcon3	equ	0xFF0
  8496                           postinc0	equ	0xFEE
  8497                           fsr0h	equ	0xFEA
  8498                           fsr0l	equ	0xFE9
  8499                           wreg	equ	0xFE8
  8500                           fsr1h	equ	0xFE2
  8501                           fsr1l	equ	0xFE1
  8502                           indf2	equ	0xFDF
  8503                           postinc2	equ	0xFDE
  8504                           postdec2	equ	0xFDD
  8505                           fsr2h	equ	0xFDA
  8506                           fsr2l	equ	0xFD9
  8507                           status	equ	0xFD8
  8508                           
  8509 ;; *************** function _servo_rotate0 *****************
  8510 ;; Defined at:
  8511 ;;		line 563 in file "main.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;  degree          2    0[COMRAM] int 
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;  j               2    8[COMRAM] unsigned int 
  8516 ;;  i               2    6[COMRAM] unsigned int 
  8517 ;;  duty            2    4[COMRAM] int 
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  1    wreg      void 
  8520 ;; Registers used:
  8521 ;;		wreg, status,2, status,0
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;Total ram usage:       10 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; This function calls:
  8534 ;;		Nothing
  8535 ;; This function is called by:
  8536 ;;		_isr
  8537 ;; This function uses a non-reentrant model
  8538 ;;
  8539                           
  8540                           	psect	text37
  8541  002314                     __ptext37:
  8542                           	opt stack 0
  8543  002314                     _servo_rotate0:
  8544                           	opt stack 25
  8545                           
  8546                           ;main.c: 564: unsigned int i;
  8547                           ;main.c: 565: unsigned int j;
  8548                           ;main.c: 566: int duty = degree;
  8549                           
  8550                           ;incstack = 0
  8551  002314  C001  F005         	movff	servo_rotate0@degree,servo_rotate0@duty
  8552  002318  C002  F006         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  8553                           
  8554                           ;main.c: 567: for (i=0; i<50; i++) {
  8555  00231C  0E00               	movlw	0
  8556  00231E  6E08               	movwf	servo_rotate0@i+1,c
  8557  002320  0E00               	movlw	0
  8558  002322  6E07               	movwf	servo_rotate0@i,c
  8559  002324                     i2l4274:
  8560  002324  5008               	movf	servo_rotate0@i+1,w,c
  8561  002326  E13D               	bnz	i2l369
  8562  002328  0E32               	movlw	50
  8563  00232A  5C07               	subwf	servo_rotate0@i,w,c
  8564  00232C  B0D8               	btfsc	status,0,c
  8565  00232E  0012               	return	
  8566                           
  8567                           ;main.c: 568: LATCbits.LATC0 = 1;
  8568  002330  808B               	bsf	3979,0,c	;volatile
  8569                           
  8570                           ;main.c: 569: for(j=0; j<duty; j++) _delay((unsigned long)((1)*(10000000/4000.0)));
  8571  002332  0E00               	movlw	0
  8572  002334  6E0A               	movwf	servo_rotate0@j+1,c
  8573  002336  0E00               	movlw	0
  8574  002338  6E09               	movwf	servo_rotate0@j,c
  8575  00233A  D009               	goto	i2l363
  8576  00233C                     i2l4280:
  8577  00233C  0E04               	movlw	4
  8578  00233E  6E03               	movwf	??_servo_rotate0& (0+255),c
  8579  002340  0E3E               	movlw	62
  8580  002342                     i2u428_47:
  8581  002342  2EE8               	decfsz	wreg,f,c
  8582  002344  D7FE               	bra	i2u428_47
  8583  002346  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8584  002348  D7FC               	bra	i2u428_47
  8585  00234A  4A09               	infsnz	servo_rotate0@j,f,c
  8586  00234C  2A0A               	incf	servo_rotate0@j+1,f,c
  8587  00234E                     i2l363:
  8588  00234E  5005               	movf	servo_rotate0@duty,w,c
  8589  002350  5C09               	subwf	servo_rotate0@j,w,c
  8590  002352  5006               	movf	servo_rotate0@duty+1,w,c
  8591  002354  580A               	subwfb	servo_rotate0@j+1,w,c
  8592  002356  A0D8               	btfss	status,0,c
  8593  002358  D7F1               	goto	i2l4280
  8594                           
  8595                           ;main.c: 570: LATCbits.LATC0 = 0;
  8596  00235A  908B               	bcf	3979,0,c	;volatile
  8597                           
  8598                           ;main.c: 571: for(j=0; j<(20 - duty); j++) _delay((unsigned long)((1)*(10000000/4000.0))
      +                          );
  8599  00235C  0E00               	movlw	0
  8600  00235E  6E0A               	movwf	servo_rotate0@j+1,c
  8601  002360  0E00               	movlw	0
  8602  002362  6E09               	movwf	servo_rotate0@j,c
  8603  002364  D009               	goto	i2l366
  8604  002366                     i2l4286:
  8605  002366  0E04               	movlw	4
  8606  002368  6E03               	movwf	??_servo_rotate0& (0+255),c
  8607  00236A  0E3E               	movlw	62
  8608  00236C                     i2u429_47:
  8609  00236C  2EE8               	decfsz	wreg,f,c
  8610  00236E  D7FE               	bra	i2u429_47
  8611  002370  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8612  002372  D7FC               	bra	i2u429_47
  8613  002374  4A09               	infsnz	servo_rotate0@j,f,c
  8614  002376  2A0A               	incf	servo_rotate0@j+1,f,c
  8615  002378                     i2l366:
  8616  002378  C005  F003         	movff	servo_rotate0@duty,??_servo_rotate0
  8617  00237C  C006  F004         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  8618  002380  1E03               	comf	??_servo_rotate0,f,c
  8619  002382  1E04               	comf	??_servo_rotate0+1,f,c
  8620  002384  4A03               	infsnz	??_servo_rotate0,f,c
  8621  002386  2A04               	incf	??_servo_rotate0+1,f,c
  8622  002388  0E14               	movlw	20
  8623  00238A  2603               	addwf	??_servo_rotate0,f,c
  8624  00238C  0E00               	movlw	0
  8625  00238E  2204               	addwfc	??_servo_rotate0+1,f,c
  8626  002390  5003               	movf	??_servo_rotate0,w,c
  8627  002392  5C09               	subwf	servo_rotate0@j,w,c
  8628  002394  5004               	movf	??_servo_rotate0+1,w,c
  8629  002396  580A               	subwfb	servo_rotate0@j+1,w,c
  8630  002398  A0D8               	btfss	status,0,c
  8631  00239A  D7E5               	goto	i2l4286
  8632  00239C  4A07               	infsnz	servo_rotate0@i,f,c
  8633  00239E  2A08               	incf	servo_rotate0@i+1,f,c
  8634  0023A0  D7C1               	goto	i2l4274
  8635  0023A2                     i2l369:
  8636  0023A2  0012               	return		;funcret
  8637  0023A4                     __end_of_servo_rotate0:
  8638                           	opt stack 0
  8639                           pclatu	equ	0xFFB
  8640                           pclath	equ	0xFFA
  8641                           tblptru	equ	0xFF8
  8642                           tblptrh	equ	0xFF7
  8643                           tblptrl	equ	0xFF6
  8644                           tablat	equ	0xFF5
  8645                           prodh	equ	0xFF4
  8646                           prodl	equ	0xFF3
  8647                           intcon	equ	0xFF2
  8648                           intcon2	equ	0xFF1
  8649                           intcon3	equ	0xFF0
  8650                           postinc0	equ	0xFEE
  8651                           fsr0h	equ	0xFEA
  8652                           fsr0l	equ	0xFE9
  8653                           wreg	equ	0xFE8
  8654                           fsr1h	equ	0xFE2
  8655                           fsr1l	equ	0xFE1
  8656                           indf2	equ	0xFDF
  8657                           postinc2	equ	0xFDE
  8658                           postdec2	equ	0xFDD
  8659                           fsr2h	equ	0xFDA
  8660                           fsr2l	equ	0xFD9
  8661                           status	equ	0xFD8
  8662                           
  8663 ;; *************** function _read_time *****************
  8664 ;; Defined at:
  8665 ;;		line 454 in file "main.c"
  8666 ;; Parameters:    Size  Location     Type
  8667 ;;		None
  8668 ;; Auto vars:     Size  Location     Type
  8669 ;;  i               1    3[COMRAM] unsigned char 
  8670 ;; Return value:  Size  Location     Type
  8671 ;;                  1    wreg      void 
  8672 ;; Registers used:
  8673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8674 ;; Tracked objects:
  8675 ;;		On entry : 0/0
  8676 ;;		On exit  : 0/0
  8677 ;;		Unchanged: 0/0
  8678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8683 ;;Total ram usage:        1 bytes
  8684 ;; Hardware stack levels used:    1
  8685 ;; Hardware stack levels required when called:    2
  8686 ;; This function calls:
  8687 ;;		i2_I2C_Master_Read
  8688 ;;		i2_I2C_Master_Start
  8689 ;;		i2_I2C_Master_Stop
  8690 ;;		i2_I2C_Master_Write
  8691 ;; This function is called by:
  8692 ;;		_isr
  8693 ;; This function uses a non-reentrant model
  8694 ;;
  8695                           
  8696                           	psect	text38
  8697  002638                     __ptext38:
  8698                           	opt stack 0
  8699  002638                     _read_time:
  8700                           	opt stack 23
  8701                           
  8702                           ;main.c: 456: I2C_Master_Start();
  8703                           
  8704                           ;incstack = 0
  8705  002638  EC14  F016         	call	i2_I2C_Master_Start	;wreg free
  8706                           
  8707                           ;main.c: 457: I2C_Master_Write(0b11010000);
  8708  00263C  0E00               	movlw	0
  8709  00263E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8710  002640  0ED0               	movlw	208
  8711  002642  6E02               	movwf	i2I2C_Master_Write@d,c
  8712  002644  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8713                           
  8714                           ;main.c: 458: I2C_Master_Write(0x00);
  8715  002648  0E00               	movlw	0
  8716  00264A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8717  00264C  0E00               	movlw	0
  8718  00264E  6E02               	movwf	i2I2C_Master_Write@d,c
  8719  002650  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8720                           
  8721                           ;main.c: 459: I2C_Master_Stop();
  8722  002654  EC10  F016         	call	i2_I2C_Master_Stop	;wreg free
  8723                           
  8724                           ;main.c: 462: I2C_Master_Start();
  8725  002658  EC14  F016         	call	i2_I2C_Master_Start	;wreg free
  8726                           
  8727                           ;main.c: 463: I2C_Master_Write(0b11010001);
  8728  00265C  0E00               	movlw	0
  8729  00265E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8730  002660  0ED1               	movlw	209
  8731  002662  6E02               	movwf	i2I2C_Master_Write@d,c
  8732  002664  EC03  F016         	call	i2_I2C_Master_Write	;wreg free
  8733                           
  8734                           ;main.c: 464: for(unsigned char i=0;i<0x06;i++){
  8735  002668  0E00               	movlw	0
  8736  00266A  6E04               	movwf	read_time@i,c
  8737  00266C                     i2l4238:
  8738  00266C  0E05               	movlw	5
  8739  00266E  6404               	cpfsgt	read_time@i,c
  8740  002670  D001               	goto	i2l4242
  8741  002672  D00E               	goto	i2l4248
  8742  002674                     i2l4242:
  8743                           
  8744                           ;main.c: 465: time[i] = I2C_Master_Read(1);
  8745  002674  5004               	movf	read_time@i,w,c
  8746  002676  0D01               	mullw	1
  8747  002678  0EB5               	movlw	low _time
  8748  00267A  24F3               	addwf	prodl,w,c
  8749  00267C  6ED9               	movwf	fsr2l,c
  8750  00267E  0E00               	movlw	high _time
  8751  002680  20F4               	addwfc	prodh,w,c
  8752  002682  6EDA               	movwf	fsr2h,c
  8753  002684  0E01               	movlw	1
  8754  002686  EC6B  F015         	call	i2_I2C_Master_Read
  8755  00268A  6EDF               	movwf	indf2,c
  8756  00268C  2A04               	incf	read_time@i,f,c
  8757  00268E  D7EE               	goto	i2l4238
  8758  002690                     i2l4248:
  8759                           
  8760                           ;main.c: 466: }
  8761                           ;main.c: 467: time[6] = I2C_Master_Read(0);
  8762  002690  0E00               	movlw	0
  8763  002692  EC6B  F015         	call	i2_I2C_Master_Read
  8764  002696  0100               	movlb	0	; () banked
  8765  002698  6FBB               	movwf	(_time+6)& (0+255),b
  8766                           
  8767                           ;main.c: 468: I2C_Master_Stop();
  8768  00269A  EC10  F016         	call	i2_I2C_Master_Stop	;wreg free
  8769  00269E  0012               	return	
  8770  0026A0                     __end_of_read_time:
  8771                           	opt stack 0
  8772                           pclatu	equ	0xFFB
  8773                           pclath	equ	0xFFA
  8774                           tblptru	equ	0xFF8
  8775                           tblptrh	equ	0xFF7
  8776                           tblptrl	equ	0xFF6
  8777                           tablat	equ	0xFF5
  8778                           prodh	equ	0xFF4
  8779                           prodl	equ	0xFF3
  8780                           intcon	equ	0xFF2
  8781                           intcon2	equ	0xFF1
  8782                           intcon3	equ	0xFF0
  8783                           postinc0	equ	0xFEE
  8784                           fsr0h	equ	0xFEA
  8785                           fsr0l	equ	0xFE9
  8786                           wreg	equ	0xFE8
  8787                           fsr1h	equ	0xFE2
  8788                           fsr1l	equ	0xFE1
  8789                           indf2	equ	0xFDF
  8790                           postinc2	equ	0xFDE
  8791                           postdec2	equ	0xFDD
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796 ;; *************** function i2_I2C_Master_Write *****************
  8797 ;; Defined at:
  8798 ;;		line 48 in file "I2C.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;  d               2    1[COMRAM] unsigned int 
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;		None
  8803 ;; Return value:  Size  Location     Type
  8804 ;;                  1    wreg      void 
  8805 ;; Registers used:
  8806 ;;		wreg, status,2, status,0, cstack
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8812 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;Total ram usage:        2 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:    1
  8819 ;; This function calls:
  8820 ;;		i2_I2C_Master_Wait
  8821 ;; This function is called by:
  8822 ;;		_read_time
  8823 ;;		i2_I2C_ColorSens_Init
  8824 ;;		i2_read_colorsensor
  8825 ;; This function uses a non-reentrant model
  8826 ;;
  8827                           
  8828                           	psect	text39
  8829  002C06                     __ptext39:
  8830                           	opt stack 0
  8831  002C06                     i2_I2C_Master_Write:
  8832                           	opt stack 23
  8833                           
  8834                           ;I2C.c: 50: I2C_Master_Wait();
  8835                           
  8836                           ;incstack = 0
  8837  002C06  ECD9  F015         	call	i2_I2C_Master_Wait	;wreg free
  8838                           
  8839                           ;I2C.c: 51: SSPBUF = d;
  8840  002C0A  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  8841  002C0E  0012               	return		;funcret
  8842  002C10                     __end_ofi2_I2C_Master_Write:
  8843                           	opt stack 0
  8844                           pclatu	equ	0xFFB
  8845                           pclath	equ	0xFFA
  8846                           tblptru	equ	0xFF8
  8847                           tblptrh	equ	0xFF7
  8848                           tblptrl	equ	0xFF6
  8849                           tablat	equ	0xFF5
  8850                           prodh	equ	0xFF4
  8851                           prodl	equ	0xFF3
  8852                           intcon	equ	0xFF2
  8853                           intcon2	equ	0xFF1
  8854                           intcon3	equ	0xFF0
  8855                           postinc0	equ	0xFEE
  8856                           fsr0h	equ	0xFEA
  8857                           fsr0l	equ	0xFE9
  8858                           wreg	equ	0xFE8
  8859                           fsr1h	equ	0xFE2
  8860                           fsr1l	equ	0xFE1
  8861                           indf2	equ	0xFDF
  8862                           postinc2	equ	0xFDE
  8863                           postdec2	equ	0xFDD
  8864                           fsr2h	equ	0xFDA
  8865                           fsr2l	equ	0xFD9
  8866                           status	equ	0xFD8
  8867                           
  8868 ;; *************** function i2_I2C_Master_Stop *****************
  8869 ;; Defined at:
  8870 ;;		line 42 in file "I2C.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;		None
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;		None
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      void 
  8877 ;; Registers used:
  8878 ;;		wreg, status,2, status,0, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;Total ram usage:        0 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    1
  8891 ;; This function calls:
  8892 ;;		i2_I2C_Master_Wait
  8893 ;; This function is called by:
  8894 ;;		_read_time
  8895 ;;		i2_I2C_ColorSens_Init
  8896 ;;		i2_read_colorsensor
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           	psect	text40
  8901  002C20                     __ptext40:
  8902                           	opt stack 0
  8903  002C20                     i2_I2C_Master_Stop:
  8904                           	opt stack 23
  8905                           
  8906                           ;I2C.c: 44: I2C_Master_Wait();
  8907                           
  8908                           ;incstack = 0
  8909  002C20  ECD9  F015         	call	i2_I2C_Master_Wait	;wreg free
  8910                           
  8911                           ;I2C.c: 45: PEN = 1;
  8912  002C24  84C5               	bsf	4037,2,c	;volatile
  8913  002C26  0012               	return		;funcret
  8914  002C28                     __end_ofi2_I2C_Master_Stop:
  8915                           	opt stack 0
  8916                           pclatu	equ	0xFFB
  8917                           pclath	equ	0xFFA
  8918                           tblptru	equ	0xFF8
  8919                           tblptrh	equ	0xFF7
  8920                           tblptrl	equ	0xFF6
  8921                           tablat	equ	0xFF5
  8922                           prodh	equ	0xFF4
  8923                           prodl	equ	0xFF3
  8924                           intcon	equ	0xFF2
  8925                           intcon2	equ	0xFF1
  8926                           intcon3	equ	0xFF0
  8927                           postinc0	equ	0xFEE
  8928                           fsr0h	equ	0xFEA
  8929                           fsr0l	equ	0xFE9
  8930                           wreg	equ	0xFE8
  8931                           fsr1h	equ	0xFE2
  8932                           fsr1l	equ	0xFE1
  8933                           indf2	equ	0xFDF
  8934                           postinc2	equ	0xFDE
  8935                           postdec2	equ	0xFDD
  8936                           fsr2h	equ	0xFDA
  8937                           fsr2l	equ	0xFD9
  8938                           status	equ	0xFD8
  8939                           
  8940 ;; *************** function i2_I2C_Master_Start *****************
  8941 ;; Defined at:
  8942 ;;		line 30 in file "I2C.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  1    wreg      void 
  8949 ;; Registers used:
  8950 ;;		wreg, status,2, status,0, cstack
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;Total ram usage:        0 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    1
  8963 ;; This function calls:
  8964 ;;		i2_I2C_Master_Wait
  8965 ;; This function is called by:
  8966 ;;		_read_time
  8967 ;;		i2_I2C_ColorSens_Init
  8968 ;;		i2_read_colorsensor
  8969 ;; This function uses a non-reentrant model
  8970 ;;
  8971                           
  8972                           	psect	text41
  8973  002C28                     __ptext41:
  8974                           	opt stack 0
  8975  002C28                     i2_I2C_Master_Start:
  8976                           	opt stack 23
  8977                           
  8978                           ;I2C.c: 32: I2C_Master_Wait();
  8979                           
  8980                           ;incstack = 0
  8981  002C28  ECD9  F015         	call	i2_I2C_Master_Wait	;wreg free
  8982                           
  8983                           ;I2C.c: 33: SEN = 1;
  8984  002C2C  80C5               	bsf	4037,0,c	;volatile
  8985  002C2E  0012               	return		;funcret
  8986  002C30                     __end_ofi2_I2C_Master_Start:
  8987                           	opt stack 0
  8988                           pclatu	equ	0xFFB
  8989                           pclath	equ	0xFFA
  8990                           tblptru	equ	0xFF8
  8991                           tblptrh	equ	0xFF7
  8992                           tblptrl	equ	0xFF6
  8993                           tablat	equ	0xFF5
  8994                           prodh	equ	0xFF4
  8995                           prodl	equ	0xFF3
  8996                           intcon	equ	0xFF2
  8997                           intcon2	equ	0xFF1
  8998                           intcon3	equ	0xFF0
  8999                           postinc0	equ	0xFEE
  9000                           fsr0h	equ	0xFEA
  9001                           fsr0l	equ	0xFE9
  9002                           wreg	equ	0xFE8
  9003                           fsr1h	equ	0xFE2
  9004                           fsr1l	equ	0xFE1
  9005                           indf2	equ	0xFDF
  9006                           postinc2	equ	0xFDE
  9007                           postdec2	equ	0xFDD
  9008                           fsr2h	equ	0xFDA
  9009                           fsr2l	equ	0xFD9
  9010                           status	equ	0xFD8
  9011                           
  9012 ;; *************** function i2_I2C_Master_Read *****************
  9013 ;; Defined at:
  9014 ;;		line 105 in file "I2C.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;  a               1    wreg     unsigned char 
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;  a               1    1[COMRAM] unsigned char 
  9019 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9020 ;; Return value:  Size  Location     Type
  9021 ;;                  1    wreg      unsigned char 
  9022 ;; Registers used:
  9023 ;;		wreg, status,2, status,0, cstack
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9032 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9033 ;;Total ram usage:        2 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; Hardware stack levels required when called:    1
  9036 ;; This function calls:
  9037 ;;		i2_I2C_Master_Wait
  9038 ;; This function is called by:
  9039 ;;		_read_time
  9040 ;;		i2_read_colorsensor
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           	psect	text42
  9045  002AD6                     __ptext42:
  9046                           	opt stack 0
  9047  002AD6                     i2_I2C_Master_Read:
  9048                           	opt stack 23
  9049                           
  9050                           ;incstack = 0
  9051                           ;i2I2C_Master_Read@a stored from wreg
  9052  002AD6  6E02               	movwf	i2I2C_Master_Read@a,c
  9053                           
  9054                           ;I2C.c: 107: unsigned char temp;
  9055                           ;I2C.c: 108: I2C_Master_Wait();
  9056  002AD8  ECD9  F015         	call	i2_I2C_Master_Wait	;wreg free
  9057                           
  9058                           ;I2C.c: 109: RCEN = 1;
  9059  002ADC  86C5               	bsf	4037,3,c	;volatile
  9060                           
  9061                           ;I2C.c: 110: I2C_Master_Wait();
  9062  002ADE  ECD9  F015         	call	i2_I2C_Master_Wait	;wreg free
  9063                           
  9064                           ;I2C.c: 111: temp = SSPBUF;
  9065  002AE2  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9066                           
  9067                           ;I2C.c: 112: I2C_Master_Wait();
  9068  002AE6  ECD9  F015         	call	i2_I2C_Master_Wait	;wreg free
  9069                           
  9070                           ;I2C.c: 113: ACKDT = (a)?0:1;
  9071  002AEA  5002               	movf	i2I2C_Master_Read@a,w,c
  9072  002AEC  A4D8               	btfss	status,2,c
  9073  002AEE  D002               	goto	i2u349_40
  9074  002AF0  8AC5               	bsf	4037,5,c	;volatile
  9075  002AF2  D001               	goto	i2l3936
  9076  002AF4                     i2u349_40:
  9077  002AF4  9AC5               	bcf	4037,5,c	;volatile
  9078  002AF6                     i2l3936:
  9079                           
  9080                           ;I2C.c: 114: ACKEN = 1;
  9081  002AF6  88C5               	bsf	4037,4,c	;volatile
  9082                           
  9083                           ;I2C.c: 115: return temp;
  9084  002AF8  5003               	movf	i2I2C_Master_Read@temp,w,c
  9085  002AFA  0012               	return	
  9086  002AFC                     __end_ofi2_I2C_Master_Read:
  9087                           	opt stack 0
  9088                           pclatu	equ	0xFFB
  9089                           pclath	equ	0xFFA
  9090                           tblptru	equ	0xFF8
  9091                           tblptrh	equ	0xFF7
  9092                           tblptrl	equ	0xFF6
  9093                           tablat	equ	0xFF5
  9094                           prodh	equ	0xFF4
  9095                           prodl	equ	0xFF3
  9096                           intcon	equ	0xFF2
  9097                           intcon2	equ	0xFF1
  9098                           intcon3	equ	0xFF0
  9099                           postinc0	equ	0xFEE
  9100                           fsr0h	equ	0xFEA
  9101                           fsr0l	equ	0xFE9
  9102                           wreg	equ	0xFE8
  9103                           fsr1h	equ	0xFE2
  9104                           fsr1l	equ	0xFE1
  9105                           indf2	equ	0xFDF
  9106                           postinc2	equ	0xFDE
  9107                           postdec2	equ	0xFDD
  9108                           fsr2h	equ	0xFDA
  9109                           fsr2l	equ	0xFD9
  9110                           status	equ	0xFD8
  9111                           
  9112 ;; *************** function i2_I2C_Master_Wait *****************
  9113 ;; Defined at:
  9114 ;;		line 25 in file "I2C.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;		None
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;		None
  9119 ;; Return value:  Size  Location     Type
  9120 ;;                  1    wreg      void 
  9121 ;; Registers used:
  9122 ;;		wreg, status,2, status,0
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9130 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;Total ram usage:        1 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; This function calls:
  9135 ;;		Nothing
  9136 ;; This function is called by:
  9137 ;;		i2_I2C_Master_Start
  9138 ;;		i2_I2C_Master_Stop
  9139 ;;		i2_I2C_Master_Write
  9140 ;;		i2_I2C_Master_Read
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           	psect	text43
  9145  002BB2                     __ptext43:
  9146                           	opt stack 0
  9147  002BB2                     i2_I2C_Master_Wait:
  9148                           	opt stack 23
  9149  002BB2                     i2l34:
  9150  002BB2  B4C7               	btfsc	4039,2,c	;volatile
  9151  002BB4  D7FE               	goto	i2l34
  9152  002BB6  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  9153  002BBA  0E1F               	movlw	31
  9154  002BBC  1601               	andwf	??i2_I2C_Master_Wait,f,c
  9155  002BBE  B4D8               	btfsc	status,2,c
  9156  002BC0  0012               	return	
  9157  002BC2  D7F7               	goto	i2l34
  9158  002BC4                     __end_ofi2_I2C_Master_Wait:
  9159                           	opt stack 0
  9160                           pclatu	equ	0xFFB
  9161                           pclath	equ	0xFFA
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           intcon2	equ	0xFF1
  9170                           intcon3	equ	0xFF0
  9171                           postinc0	equ	0xFEE
  9172                           fsr0h	equ	0xFEA
  9173                           fsr0l	equ	0xFE9
  9174                           wreg	equ	0xFE8
  9175                           fsr1h	equ	0xFE2
  9176                           fsr1l	equ	0xFE1
  9177                           indf2	equ	0xFDF
  9178                           postinc2	equ	0xFDE
  9179                           postdec2	equ	0xFDD
  9180                           fsr2h	equ	0xFDA
  9181                           fsr2l	equ	0xFD9
  9182                           status	equ	0xFD8
  9183                           
  9184 ;; *************** function _dec_to_hex *****************
  9185 ;; Defined at:
  9186 ;;		line 415 in file "main.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;  num             2   98[COMRAM] int 
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;  quotient        2  112[COMRAM] int 
  9191 ;;  hexnum          2  110[COMRAM] int 
  9192 ;;  i               2  108[COMRAM] int 
  9193 ;;  temp            2  106[COMRAM] int 
  9194 ;; Return value:  Size  Location     Type
  9195 ;;                  2   98[COMRAM] int 
  9196 ;; Registers used:
  9197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9198 ;; Tracked objects:
  9199 ;;		On entry : 0/0
  9200 ;;		On exit  : 0/0
  9201 ;;		Unchanged: 0/0
  9202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9206 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;Total ram usage:       16 bytes
  9208 ;; Hardware stack levels used:    1
  9209 ;; Hardware stack levels required when called:    5
  9210 ;; This function calls:
  9211 ;;		___awdiv
  9212 ;;		___awtoft
  9213 ;;		___ftadd
  9214 ;;		___ftmul
  9215 ;;		___fttol
  9216 ;;		_pow
  9217 ;; This function is called by:
  9218 ;;		_isr
  9219 ;; This function uses a non-reentrant model
  9220 ;;
  9221                           
  9222                           	psect	text44
  9223  00168C                     __ptext44:
  9224                           	opt stack 0
  9225  00168C                     _dec_to_hex:
  9226                           	opt stack 20
  9227                           
  9228                           ;main.c: 416: int i = 0, quotient = num, temp, hexnum = 0;
  9229                           
  9230                           ;incstack = 0
  9231  00168C  0E00               	movlw	0
  9232  00168E  6E6E               	movwf	dec_to_hex@i+1,c
  9233  001690  0E00               	movlw	0
  9234  001692  6E6D               	movwf	dec_to_hex@i,c
  9235  001694  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  9236  001698  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  9237  00169C  0E00               	movlw	0
  9238  00169E  6E70               	movwf	dec_to_hex@hexnum+1,c
  9239  0016A0  0E00               	movlw	0
  9240  0016A2  6E6F               	movwf	dec_to_hex@hexnum,c
  9241                           
  9242                           ;main.c: 418: while (quotient != 0) {
  9243  0016A4  D068               	goto	i2l4268
  9244  0016A6                     i2l4256:
  9245                           
  9246                           ;main.c: 419: temp = quotient % 16;
  9247  0016A6  0E0F               	movlw	15
  9248  0016A8  1471               	andwf	dec_to_hex@quotient,w,c
  9249  0016AA  6E6B               	movwf	dec_to_hex@temp,c
  9250  0016AC  6A6C               	clrf	dec_to_hex@temp+1,c
  9251                           
  9252                           ;main.c: 421: hexnum += temp*pow(10,i);
  9253  0016AE  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  9254  0016B2  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  9255  0016B6  ECED  F014         	call	___awtoft	;wreg free
  9256  0016BA  C009  F065         	movff	?___awtoft,_dec_to_hex$1263
  9257  0016BE  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1263+1
  9258  0016C2  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1263+2
  9259                           
  9260                           ;main.c: 421: hexnum += temp*pow(10,i);
  9261  0016C6  C065  F055         	movff	_dec_to_hex$1263,pow@y
  9262  0016CA  C066  F056         	movff	_dec_to_hex$1263+1,pow@y+1
  9263  0016CE  C067  F057         	movff	_dec_to_hex$1263+2,pow@y+2
  9264  0016D2  0E00               	movlw	0
  9265  0016D4  6E52               	movwf	pow@x,c
  9266  0016D6  0E20               	movlw	32
  9267  0016D8  6E53               	movwf	pow@x+1,c
  9268  0016DA  0E41               	movlw	65
  9269  0016DC  6E54               	movwf	pow@x+2,c
  9270  0016DE  EC12  F008         	call	_pow	;wreg free
  9271  0016E2  C052  F068         	movff	?_pow,_dec_to_hex$1264
  9272  0016E6  C053  F069         	movff	?_pow+1,_dec_to_hex$1264+1
  9273  0016EA  C054  F06A         	movff	?_pow+2,_dec_to_hex$1264+2
  9274                           
  9275                           ;main.c: 421: hexnum += temp*pow(10,i);
  9276  0016EE  C068  F010         	movff	_dec_to_hex$1264,___ftmul@f2
  9277  0016F2  C069  F011         	movff	_dec_to_hex$1264+1,___ftmul@f2+1
  9278  0016F6  C06A  F012         	movff	_dec_to_hex$1264+2,___ftmul@f2+2
  9279  0016FA  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  9280  0016FE  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  9281  001702  ECED  F014         	call	___awtoft	;wreg free
  9282  001706  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9283  00170A  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9284  00170E  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9285  001712  EC3E  F00C         	call	___ftmul	;wreg free
  9286  001716  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  9287  00171A  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  9288  00171E  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  9289  001722  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  9290  001726  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  9291  00172A  ECED  F014         	call	___awtoft	;wreg free
  9292  00172E  C009  F01C         	movff	?___awtoft,___ftadd@f1
  9293  001732  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  9294  001736  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  9295  00173A  EC72  F006         	call	___ftadd	;wreg free
  9296  00173E  C01C  F028         	movff	?___ftadd,___fttol@f1
  9297  001742  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  9298  001746  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  9299  00174A  ECC4  F00B         	call	___fttol	;wreg free
  9300  00174E  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  9301  001752  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  9302                           
  9303                           ;main.c: 423: quotient = quotient / 16;
  9304  001756  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
  9305  00175A  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  9306  00175E  0E00               	movlw	0
  9307  001760  6E04               	movwf	___awdiv@divisor+1,c
  9308  001762  0E10               	movlw	16
  9309  001764  6E03               	movwf	___awdiv@divisor,c
  9310  001766  EC62  F012         	call	___awdiv	;wreg free
  9311  00176A  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
  9312  00176E  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  9313                           
  9314                           ;main.c: 424: i += 1;
  9315  001772  4A6D               	infsnz	dec_to_hex@i,f,c
  9316  001774  2A6E               	incf	dec_to_hex@i+1,f,c
  9317  001776                     i2l4268:
  9318  001776  5071               	movf	dec_to_hex@quotient,w,c
  9319  001778  1072               	iorwf	dec_to_hex@quotient+1,w,c
  9320  00177A  A4D8               	btfss	status,2,c
  9321  00177C  D794               	goto	i2l4256
  9322                           
  9323                           ;main.c: 425: }
  9324                           ;main.c: 426: return hexnum;
  9325  00177E  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  9326  001782  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  9327  001786  0012               	return		;funcret
  9328  001788                     __end_of_dec_to_hex:
  9329                           	opt stack 0
  9330                           pclatu	equ	0xFFB
  9331                           pclath	equ	0xFFA
  9332                           tblptru	equ	0xFF8
  9333                           tblptrh	equ	0xFF7
  9334                           tblptrl	equ	0xFF6
  9335                           tablat	equ	0xFF5
  9336                           prodh	equ	0xFF4
  9337                           prodl	equ	0xFF3
  9338                           intcon	equ	0xFF2
  9339                           intcon2	equ	0xFF1
  9340                           intcon3	equ	0xFF0
  9341                           postinc0	equ	0xFEE
  9342                           fsr0h	equ	0xFEA
  9343                           fsr0l	equ	0xFE9
  9344                           wreg	equ	0xFE8
  9345                           fsr1h	equ	0xFE2
  9346                           fsr1l	equ	0xFE1
  9347                           indf2	equ	0xFDF
  9348                           postinc2	equ	0xFDE
  9349                           postdec2	equ	0xFDD
  9350                           fsr2h	equ	0xFDA
  9351                           fsr2l	equ	0xFD9
  9352                           status	equ	0xFD8
  9353                           
  9354 ;; *************** function _pow *****************
  9355 ;; Defined at:
  9356 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;  x               3   81[COMRAM] int 
  9359 ;;  y               3   84[COMRAM] int 
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;  yi              4   94[COMRAM] unsigned long 
  9362 ;;  sign            1   93[COMRAM] unsigned char 
  9363 ;; Return value:  Size  Location     Type
  9364 ;;                  3   81[COMRAM] unsigned char 
  9365 ;; Registers used:
  9366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9372 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9375 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9376 ;;Total ram usage:       17 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    4
  9379 ;; This function calls:
  9380 ;;		___ftge
  9381 ;;		___ftmul
  9382 ;;		___ftneg
  9383 ;;		___fttol
  9384 ;;		___lltoft
  9385 ;;		_exp
  9386 ;;		_log
  9387 ;; This function is called by:
  9388 ;;		_dec_to_hex
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           	psect	text45
  9393  001024                     __ptext45:
  9394                           	opt stack 0
  9395  001024                     _pow:
  9396                           	opt stack 20
  9397                           
  9398                           ;incstack = 0
  9399  001024  0E00               	movlw	0
  9400  001026  6E5E               	movwf	pow@sign,c
  9401  001028  5052               	movf	pow@x,w,c
  9402  00102A  1053               	iorwf	pow@x+1,w,c
  9403  00102C  1054               	iorwf	pow@x+2,w,c
  9404  00102E  A4D8               	btfss	status,2,c
  9405  001030  D01C               	goto	i2l3784
  9406  001032  0E00               	movlw	0
  9407  001034  6E01               	movwf	___ftge@ff1,c
  9408  001036  0E00               	movlw	0
  9409  001038  6E02               	movwf	___ftge@ff1+1,c
  9410  00103A  0E00               	movlw	0
  9411  00103C  6E03               	movwf	___ftge@ff1+2,c
  9412  00103E  C055  F004         	movff	pow@y,___ftge@ff2
  9413  001042  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  9414  001046  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  9415  00104A  EC1A  F012         	call	___ftge	;wreg free
  9416  00104E  A0D8               	btfss	status,0,c
  9417  001050  D005               	goto	i2l910
  9418  001052  0E00               	movlw	0
  9419  001054  0100               	movlb	0	; () banked
  9420  001056  6FC7               	movwf	(_errno+1)& (0+255),b
  9421  001058  0E21               	movlw	33
  9422  00105A  6FC6               	movwf	_errno& (0+255),b
  9423  00105C                     i2l910:
  9424  00105C  0E00               	movlw	0
  9425  00105E  6E52               	movwf	?_pow,c
  9426  001060  0E00               	movlw	0
  9427  001062  6E53               	movwf	?_pow+1,c
  9428  001064  0E00               	movlw	0
  9429  001066  6E54               	movwf	?_pow+2,c
  9430  001068  0012               	return	
  9431  00106A                     i2l3784:
  9432  00106A  5055               	movf	pow@y,w,c
  9433  00106C  1056               	iorwf	pow@y+1,w,c
  9434  00106E  1057               	iorwf	pow@y+2,w,c
  9435  001070  A4D8               	btfss	status,2,c
  9436  001072  D007               	goto	i2l3790
  9437  001074  0E00               	movlw	0
  9438  001076  6E52               	movwf	?_pow,c
  9439  001078  0E80               	movlw	128
  9440  00107A  6E53               	movwf	?_pow+1,c
  9441  00107C  0E3F               	movlw	63
  9442  00107E  6E54               	movwf	?_pow+2,c
  9443  001080  0012               	return	
  9444  001082                     i2l3790:
  9445  001082  AE54               	btfss	pow@x+2,7,c
  9446  001084  D041               	goto	i2l3802
  9447  001086  C055  F028         	movff	pow@y,___fttol@f1
  9448  00108A  C056  F029         	movff	pow@y+1,___fttol@f1+1
  9449  00108E  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  9450  001092  ECC4  F00B         	call	___fttol	;wreg free
  9451  001096  C028  F05F         	movff	?___fttol,pow@yi
  9452  00109A  C029  F060         	movff	?___fttol+1,pow@yi+1
  9453  00109E  C02A  F061         	movff	?___fttol+2,pow@yi+2
  9454  0010A2  C02B  F062         	movff	?___fttol+3,pow@yi+3
  9455  0010A6  C05F  F009         	movff	pow@yi,___lltoft@c
  9456  0010AA  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  9457  0010AE  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  9458  0010B2  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  9459  0010B6  ECE1  F013         	call	___lltoft	;wreg free
  9460  0010BA  5055               	movf	pow@y,w,c
  9461  0010BC  1809               	xorwf	?___lltoft,w,c
  9462  0010BE  E107               	bnz	i2u332_40
  9463  0010C0  5056               	movf	pow@y+1,w,c
  9464  0010C2  180A               	xorwf	?___lltoft+1,w,c
  9465  0010C4  E104               	bnz	i2u332_40
  9466  0010C6  5057               	movf	pow@y+2,w,c
  9467  0010C8  180B               	xorwf	?___lltoft+2,w,c
  9468  0010CA  B4D8               	btfsc	status,2,c
  9469  0010CC  D00C               	goto	i2l3798
  9470  0010CE                     i2u332_40:
  9471  0010CE  0E00               	movlw	0
  9472  0010D0  0100               	movlb	0	; () banked
  9473  0010D2  6FC7               	movwf	(_errno+1)& (0+255),b
  9474  0010D4  0E21               	movlw	33
  9475  0010D6  6FC6               	movwf	_errno& (0+255),b
  9476  0010D8  0E00               	movlw	0
  9477  0010DA  6E52               	movwf	?_pow,c
  9478  0010DC  0E00               	movlw	0
  9479  0010DE  6E53               	movwf	?_pow+1,c
  9480  0010E0  0E00               	movlw	0
  9481  0010E2  6E54               	movwf	?_pow+2,c
  9482                           
  9483                           ; BSR set to: 0
  9484  0010E4  0012               	return	
  9485  0010E6                     i2l3798:
  9486  0010E6  505F               	movf	pow@yi,w,c
  9487  0010E8  0B01               	andlw	1
  9488  0010EA  6E5E               	movwf	pow@sign,c
  9489  0010EC  C052  F001         	movff	pow@x,___ftneg@f1
  9490  0010F0  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9491  0010F4  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9492  0010F8  EC91  F015         	call	___ftneg	;wreg free
  9493  0010FC  C001  F052         	movff	?___ftneg,pow@x
  9494  001100  C002  F053         	movff	?___ftneg+1,pow@x+1
  9495  001104  C003  F054         	movff	?___ftneg+2,pow@x+2
  9496  001108                     i2l3802:
  9497  001108  C052  F034         	movff	pow@x,log@x
  9498  00110C  C053  F035         	movff	pow@x+1,log@x+1
  9499  001110  C054  F036         	movff	pow@x+2,log@x+2
  9500  001114  ECB7  F00A         	call	_log	;wreg free
  9501  001118  C034  F058         	movff	?_log,_pow$1265
  9502  00111C  C035  F059         	movff	?_log+1,_pow$1265+1
  9503  001120  C036  F05A         	movff	?_log+2,_pow$1265+2
  9504  001124  C058  F00D         	movff	_pow$1265,___ftmul@f1
  9505  001128  C059  F00E         	movff	_pow$1265+1,___ftmul@f1+1
  9506  00112C  C05A  F00F         	movff	_pow$1265+2,___ftmul@f1+2
  9507  001130  C055  F010         	movff	pow@y,___ftmul@f2
  9508  001134  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  9509  001138  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  9510  00113C  EC3E  F00C         	call	___ftmul	;wreg free
  9511  001140  C00D  F05B         	movff	?___ftmul,_pow$1266
  9512  001144  C00E  F05C         	movff	?___ftmul+1,_pow$1266+1
  9513  001148  C00F  F05D         	movff	?___ftmul+2,_pow$1266+2
  9514  00114C  C05B  F049         	movff	_pow$1266,exp@x
  9515  001150  C05C  F04A         	movff	_pow$1266+1,exp@x+1
  9516  001154  C05D  F04B         	movff	_pow$1266+2,exp@x+2
  9517  001158  EC7E  F005         	call	_exp	;wreg free
  9518  00115C  C049  F052         	movff	?_exp,pow@x
  9519  001160  C04A  F053         	movff	?_exp+1,pow@x+1
  9520  001164  C04B  F054         	movff	?_exp+2,pow@x+2
  9521  001168  505E               	movf	pow@sign,w,c
  9522  00116A  B4D8               	btfsc	status,2,c
  9523  00116C  D00F               	goto	i2l915
  9524  00116E  C052  F001         	movff	pow@x,___ftneg@f1
  9525  001172  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9526  001176  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9527  00117A  EC91  F015         	call	___ftneg	;wreg free
  9528  00117E  C001  F052         	movff	?___ftneg,?_pow
  9529  001182  C002  F053         	movff	?___ftneg+1,?_pow+1
  9530  001186  C003  F054         	movff	?___ftneg+2,?_pow+2
  9531  00118A  0012               	return	
  9532  00118C                     i2l915:
  9533  00118C  C052  F052         	movff	pow@x,?_pow
  9534  001190  C053  F053         	movff	pow@x+1,?_pow+1
  9535  001194  C054  F054         	movff	pow@x+2,?_pow+2
  9536  001198  0012               	return		;funcret
  9537  00119A                     __end_of_pow:
  9538                           	opt stack 0
  9539                           pclatu	equ	0xFFB
  9540                           pclath	equ	0xFFA
  9541                           tblptru	equ	0xFF8
  9542                           tblptrh	equ	0xFF7
  9543                           tblptrl	equ	0xFF6
  9544                           tablat	equ	0xFF5
  9545                           prodh	equ	0xFF4
  9546                           prodl	equ	0xFF3
  9547                           intcon	equ	0xFF2
  9548                           intcon2	equ	0xFF1
  9549                           intcon3	equ	0xFF0
  9550                           postinc0	equ	0xFEE
  9551                           fsr0h	equ	0xFEA
  9552                           fsr0l	equ	0xFE9
  9553                           wreg	equ	0xFE8
  9554                           fsr1h	equ	0xFE2
  9555                           fsr1l	equ	0xFE1
  9556                           indf2	equ	0xFDF
  9557                           postinc2	equ	0xFDE
  9558                           postdec2	equ	0xFDD
  9559                           fsr2h	equ	0xFDA
  9560                           fsr2l	equ	0xFD9
  9561                           status	equ	0xFD8
  9562                           
  9563 ;; *************** function _log *****************
  9564 ;; Defined at:
  9565 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;  x               3   51[COMRAM] unsigned char 
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;  exponent        2   54[COMRAM] int 
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  3   51[COMRAM] int 
  9572 ;; Registers used:
  9573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9579 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9583 ;;Total ram usage:        5 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    3
  9586 ;; This function calls:
  9587 ;;		___awtoft
  9588 ;;		___ftadd
  9589 ;;		___ftmul
  9590 ;;		_eval_poly
  9591 ;;		_frexp
  9592 ;; This function is called by:
  9593 ;;		_pow
  9594 ;; This function uses a non-reentrant model
  9595 ;;
  9596                           
  9597                           	psect	text46
  9598  00156E                     __ptext46:
  9599                           	opt stack 0
  9600  00156E                     _log:
  9601                           	opt stack 20
  9602                           
  9603                           ;incstack = 0
  9604  00156E  AE36               	btfss	log@x+2,7,c
  9605  001570  D00C               	goto	i2l3526
  9606  001572  0E00               	movlw	0
  9607  001574  0100               	movlb	0	; () banked
  9608  001576  6FC7               	movwf	(_errno+1)& (0+255),b
  9609  001578  0E21               	movlw	33
  9610  00157A  6FC6               	movwf	_errno& (0+255),b
  9611  00157C  0E00               	movlw	0
  9612  00157E  6E34               	movwf	?_log,c
  9613  001580  0E00               	movlw	0
  9614  001582  6E35               	movwf	?_log+1,c
  9615  001584  0E00               	movlw	0
  9616  001586  6E36               	movwf	?_log+2,c
  9617                           
  9618                           ; BSR set to: 0
  9619  001588  0012               	return	
  9620  00158A                     i2l3526:
  9621  00158A  5034               	movf	log@x,w,c
  9622  00158C  1035               	iorwf	log@x+1,w,c
  9623  00158E  1036               	iorwf	log@x+2,w,c
  9624  001590  A4D8               	btfss	status,2,c
  9625  001592  D00C               	goto	i2l3532
  9626  001594  0E00               	movlw	0
  9627  001596  0100               	movlb	0	; () banked
  9628  001598  6FC7               	movwf	(_errno+1)& (0+255),b
  9629  00159A  0E22               	movlw	34
  9630  00159C  6FC6               	movwf	_errno& (0+255),b
  9631  00159E  0E00               	movlw	0
  9632  0015A0  6E34               	movwf	?_log,c
  9633  0015A2  0E00               	movlw	0
  9634  0015A4  6E35               	movwf	?_log+1,c
  9635  0015A6  0E00               	movlw	0
  9636  0015A8  6E36               	movwf	?_log+2,c
  9637                           
  9638                           ; BSR set to: 0
  9639  0015AA  0012               	return	
  9640  0015AC                     i2l3532:
  9641  0015AC  0E00               	movlw	0
  9642  0015AE  6E10               	movwf	___ftmul@f2,c
  9643  0015B0  0E00               	movlw	0
  9644  0015B2  6E11               	movwf	___ftmul@f2+1,c
  9645  0015B4  0E40               	movlw	64
  9646  0015B6  6E12               	movwf	___ftmul@f2+2,c
  9647  0015B8  0E37               	movlw	low log@exponent
  9648  0015BA  6E04               	movwf	frexp@eptr,c
  9649  0015BC  0E00               	movlw	high log@exponent
  9650  0015BE  6E05               	movwf	frexp@eptr+1,c
  9651  0015C0  C034  F001         	movff	log@x,frexp@value
  9652  0015C4  C035  F002         	movff	log@x+1,frexp@value+1
  9653  0015C8  C036  F003         	movff	log@x+2,frexp@value+2
  9654  0015CC  ECD2  F011         	call	_frexp	;wreg free
  9655  0015D0  C001  F00D         	movff	?_frexp,___ftmul@f1
  9656  0015D4  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  9657  0015D8  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  9658  0015DC  EC3E  F00C         	call	___ftmul	;wreg free
  9659  0015E0  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9660  0015E4  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9661  0015E8  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9662  0015EC  0E00               	movlw	0
  9663  0015EE  6E1F               	movwf	___ftadd@f2,c
  9664  0015F0  0E80               	movlw	128
  9665  0015F2  6E20               	movwf	___ftadd@f2+1,c
  9666  0015F4  0EBF               	movlw	191
  9667  0015F6  6E21               	movwf	___ftadd@f2+2,c
  9668  0015F8  EC72  F006         	call	___ftadd	;wreg free
  9669  0015FC  C01C  F034         	movff	?___ftadd,log@x
  9670  001600  C01D  F035         	movff	?___ftadd+1,log@x+1
  9671  001604  C01E  F036         	movff	?___ftadd+2,log@x+2
  9672  001608  0637               	decf	log@exponent,f,c
  9673  00160A  A0D8               	btfss	status,0,c
  9674  00160C  0638               	decf	log@exponent+1,f,c
  9675  00160E  C034  F028         	movff	log@x,eval_poly@x
  9676  001612  C035  F029         	movff	log@x+1,eval_poly@x+1
  9677  001616  C036  F02A         	movff	log@x+2,eval_poly@x+2
  9678  00161A  0EE9               	movlw	low log@coeff
  9679  00161C  6E2B               	movwf	eval_poly@d,c
  9680  00161E  0EFD               	movlw	high log@coeff
  9681  001620  6E2C               	movwf	eval_poly@d+1,c
  9682  001622  0E00               	movlw	0
  9683  001624  6E2E               	movwf	eval_poly@n+1,c
  9684  001626  0E08               	movlw	8
  9685  001628  6E2D               	movwf	eval_poly@n,c
  9686  00162A  EC58  F00F         	call	_eval_poly	;wreg free
  9687  00162E  C028  F034         	movff	?_eval_poly,log@x
  9688  001632  C029  F035         	movff	?_eval_poly+1,log@x+1
  9689  001636  C02A  F036         	movff	?_eval_poly+2,log@x+2
  9690  00163A  0E72               	movlw	114
  9691  00163C  6E10               	movwf	___ftmul@f2,c
  9692  00163E  0E31               	movlw	49
  9693  001640  6E11               	movwf	___ftmul@f2+1,c
  9694  001642  0E3F               	movlw	63
  9695  001644  6E12               	movwf	___ftmul@f2+2,c
  9696  001646  C037  F009         	movff	log@exponent,___awtoft@c
  9697  00164A  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  9698  00164E  ECED  F014         	call	___awtoft	;wreg free
  9699  001652  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9700  001656  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9701  00165A  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9702  00165E  EC3E  F00C         	call	___ftmul	;wreg free
  9703  001662  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9704  001666  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9705  00166A  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9706  00166E  C034  F01F         	movff	log@x,___ftadd@f2
  9707  001672  C035  F020         	movff	log@x+1,___ftadd@f2+1
  9708  001676  C036  F021         	movff	log@x+2,___ftadd@f2+2
  9709  00167A  EC72  F006         	call	___ftadd	;wreg free
  9710  00167E  C01C  F034         	movff	?___ftadd,?_log
  9711  001682  C01D  F035         	movff	?___ftadd+1,?_log+1
  9712  001686  C01E  F036         	movff	?___ftadd+2,?_log+2
  9713  00168A  0012               	return	
  9714  00168C                     __end_of_log:
  9715                           	opt stack 0
  9716                           pclatu	equ	0xFFB
  9717                           pclath	equ	0xFFA
  9718                           tblptru	equ	0xFF8
  9719                           tblptrh	equ	0xFF7
  9720                           tblptrl	equ	0xFF6
  9721                           tablat	equ	0xFF5
  9722                           prodh	equ	0xFF4
  9723                           prodl	equ	0xFF3
  9724                           intcon	equ	0xFF2
  9725                           intcon2	equ	0xFF1
  9726                           intcon3	equ	0xFF0
  9727                           postinc0	equ	0xFEE
  9728                           fsr0h	equ	0xFEA
  9729                           fsr0l	equ	0xFE9
  9730                           wreg	equ	0xFE8
  9731                           fsr1h	equ	0xFE2
  9732                           fsr1l	equ	0xFE1
  9733                           indf2	equ	0xFDF
  9734                           postinc2	equ	0xFDE
  9735                           postdec2	equ	0xFDD
  9736                           fsr2h	equ	0xFDA
  9737                           fsr2l	equ	0xFD9
  9738                           status	equ	0xFD8
  9739                           
  9740 ;; *************** function _exp *****************
  9741 ;; Defined at:
  9742 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;  x               3   72[COMRAM] int 
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;  exponent        2   78[COMRAM] int 
  9747 ;;  sign            1   80[COMRAM] unsigned char 
  9748 ;; Return value:  Size  Location     Type
  9749 ;;                  3   72[COMRAM] unsigned char 
  9750 ;; Registers used:
  9751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9752 ;; Tracked objects:
  9753 ;;		On entry : 0/0
  9754 ;;		On exit  : 0/0
  9755 ;;		Unchanged: 0/0
  9756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9757 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9758 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9761 ;;Total ram usage:        9 bytes
  9762 ;; Hardware stack levels used:    1
  9763 ;; Hardware stack levels required when called:    3
  9764 ;; This function calls:
  9765 ;;		___awtoft
  9766 ;;		___ftdiv
  9767 ;;		___ftge
  9768 ;;		___ftmul
  9769 ;;		___ftneg
  9770 ;;		___ftsub
  9771 ;;		___fttol
  9772 ;;		_eval_poly
  9773 ;;		_floor
  9774 ;;		_ldexp
  9775 ;; This function is called by:
  9776 ;;		_pow
  9777 ;; This function uses a non-reentrant model
  9778 ;;
  9779                           
  9780                           	psect	text47
  9781  000AFC                     __ptext47:
  9782                           	opt stack 0
  9783  000AFC                     _exp:
  9784                           	opt stack 20
  9785                           
  9786                           ;incstack = 0
  9787  000AFC  5049               	movf	exp@x,w,c
  9788  000AFE  104A               	iorwf	exp@x+1,w,c
  9789  000B00  104B               	iorwf	exp@x+2,w,c
  9790  000B02  A4D8               	btfss	status,2,c
  9791  000B04  D007               	goto	i2l3548
  9792  000B06  0E00               	movlw	0
  9793  000B08  6E49               	movwf	?_exp,c
  9794  000B0A  0E80               	movlw	128
  9795  000B0C  6E4A               	movwf	?_exp+1,c
  9796  000B0E  0E3F               	movlw	63
  9797  000B10  6E4B               	movwf	?_exp+2,c
  9798  000B12  0012               	return	
  9799  000B14                     i2l3548:
  9800  000B14  0E72               	movlw	114
  9801  000B16  6E01               	movwf	___ftge@ff1,c
  9802  000B18  0E31               	movlw	49
  9803  000B1A  6E02               	movwf	___ftge@ff1+1,c
  9804  000B1C  0E44               	movlw	68
  9805  000B1E  6E03               	movwf	___ftge@ff1+2,c
  9806  000B20  C049  F004         	movff	exp@x,___ftge@ff2
  9807  000B24  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  9808  000B28  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  9809  000B2C  EC1A  F012         	call	___ftge	;wreg free
  9810  000B30  B0D8               	btfsc	status,0,c
  9811  000B32  D00C               	goto	i2l3554
  9812  000B34  0E00               	movlw	0
  9813  000B36  0100               	movlb	0	; () banked
  9814  000B38  6FC7               	movwf	(_errno+1)& (0+255),b
  9815  000B3A  0E22               	movlw	34
  9816  000B3C  6FC6               	movwf	_errno& (0+255),b
  9817  000B3E  0EFF               	movlw	255
  9818  000B40  6E49               	movwf	?_exp,c
  9819  000B42  0E7F               	movlw	127
  9820  000B44  6E4A               	movwf	?_exp+1,c
  9821  000B46  0E7F               	movlw	127
  9822  000B48  6E4B               	movwf	?_exp+2,c
  9823                           
  9824                           ; BSR set to: 0
  9825  000B4A  0012               	return	
  9826  000B4C                     i2l3554:
  9827  000B4C  C049  F001         	movff	exp@x,___ftge@ff1
  9828  000B50  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  9829  000B54  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  9830  000B58  0E49               	movlw	73
  9831  000B5A  6E04               	movwf	___ftge@ff2,c
  9832  000B5C  0E3A               	movlw	58
  9833  000B5E  6E05               	movwf	___ftge@ff2+1,c
  9834  000B60  0EC4               	movlw	196
  9835  000B62  6E06               	movwf	___ftge@ff2+2,c
  9836  000B64  EC1A  F012         	call	___ftge	;wreg free
  9837  000B68  B0D8               	btfsc	status,0,c
  9838  000B6A  D00C               	goto	i2l3560
  9839  000B6C  0E00               	movlw	0
  9840  000B6E  0100               	movlb	0	; () banked
  9841  000B70  6FC7               	movwf	(_errno+1)& (0+255),b
  9842  000B72  0E22               	movlw	34
  9843  000B74  6FC6               	movwf	_errno& (0+255),b
  9844  000B76  0E00               	movlw	0
  9845  000B78  6E49               	movwf	?_exp,c
  9846  000B7A  0E00               	movlw	0
  9847  000B7C  6E4A               	movwf	?_exp+1,c
  9848  000B7E  0E00               	movlw	0
  9849  000B80  6E4B               	movwf	?_exp+2,c
  9850                           
  9851                           ; BSR set to: 0
  9852  000B82  0012               	return	
  9853  000B84                     i2l3560:
  9854  000B84  AE4B               	btfss	exp@x+2,7,c
  9855  000B86  D002               	goto	i2u294_40
  9856  000B88  0E01               	movlw	1
  9857  000B8A  D001               	goto	i2u295_40
  9858  000B8C                     i2u294_40:
  9859  000B8C  0E00               	movlw	0
  9860  000B8E                     i2u295_40:
  9861  000B8E  6E51               	movwf	exp@sign,c
  9862  000B90  5051               	movf	exp@sign,w,c
  9863  000B92  B4D8               	btfsc	status,2,c
  9864  000B94  D00E               	goto	i2l1073
  9865  000B96  C049  F001         	movff	exp@x,___ftneg@f1
  9866  000B9A  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  9867  000B9E  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  9868  000BA2  EC91  F015         	call	___ftneg	;wreg free
  9869  000BA6  C001  F049         	movff	?___ftneg,exp@x
  9870  000BAA  C002  F04A         	movff	?___ftneg+1,exp@x+1
  9871  000BAE  C003  F04B         	movff	?___ftneg+2,exp@x+2
  9872  000BB2                     i2l1073:
  9873  000BB2  C049  F00D         	movff	exp@x,___ftmul@f1
  9874  000BB6  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  9875  000BBA  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  9876  000BBE  0EAA               	movlw	170
  9877  000BC0  6E10               	movwf	___ftmul@f2,c
  9878  000BC2  0EB8               	movlw	184
  9879  000BC4  6E11               	movwf	___ftmul@f2+1,c
  9880  000BC6  0E3F               	movlw	63
  9881  000BC8  6E12               	movwf	___ftmul@f2+2,c
  9882  000BCA  EC3E  F00C         	call	___ftmul	;wreg free
  9883  000BCE  C00D  F049         	movff	?___ftmul,exp@x
  9884  000BD2  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  9885  000BD6  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  9886  000BDA  C049  F041         	movff	exp@x,floor@x
  9887  000BDE  C04A  F042         	movff	exp@x+1,floor@x+1
  9888  000BE2  C04B  F043         	movff	exp@x+2,floor@x+2
  9889  000BE6  EC12  F00E         	call	_floor	;wreg free
  9890  000BEA  C041  F04C         	movff	?_floor,_exp$1267
  9891  000BEE  C042  F04D         	movff	?_floor+1,_exp$1267+1
  9892  000BF2  C043  F04E         	movff	?_floor+2,_exp$1267+2
  9893  000BF6  C04C  F028         	movff	_exp$1267,___fttol@f1
  9894  000BFA  C04D  F029         	movff	_exp$1267+1,___fttol@f1+1
  9895  000BFE  C04E  F02A         	movff	_exp$1267+2,___fttol@f1+2
  9896  000C02  ECC4  F00B         	call	___fttol	;wreg free
  9897  000C06  C028  F04F         	movff	?___fttol,exp@exponent
  9898  000C0A  C029  F050         	movff	?___fttol+1,exp@exponent+1
  9899  000C0E  C049  F028         	movff	exp@x,___ftsub@f1
  9900  000C12  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  9901  000C16  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  9902  000C1A  C04F  F009         	movff	exp@exponent,___awtoft@c
  9903  000C1E  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  9904  000C22  ECED  F014         	call	___awtoft	;wreg free
  9905  000C26  C009  F02B         	movff	?___awtoft,___ftsub@f2
  9906  000C2A  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  9907  000C2E  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  9908  000C32  ECCD  F014         	call	___ftsub	;wreg free
  9909  000C36  C028  F049         	movff	?___ftsub,exp@x
  9910  000C3A  C029  F04A         	movff	?___ftsub+1,exp@x+1
  9911  000C3E  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  9912  000C42  C049  F028         	movff	exp@x,eval_poly@x
  9913  000C46  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  9914  000C4A  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  9915  000C4E  0ECB               	movlw	low exp@coeff
  9916  000C50  6E2B               	movwf	eval_poly@d,c
  9917  000C52  0EFD               	movlw	high exp@coeff
  9918  000C54  6E2C               	movwf	eval_poly@d+1,c
  9919  000C56  0E00               	movlw	0
  9920  000C58  6E2E               	movwf	eval_poly@n+1,c
  9921  000C5A  0E09               	movlw	9
  9922  000C5C  6E2D               	movwf	eval_poly@n,c
  9923  000C5E  EC58  F00F         	call	_eval_poly	;wreg free
  9924  000C62  C028  F034         	movff	?_eval_poly,ldexp@value
  9925  000C66  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  9926  000C6A  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  9927  000C6E  C04F  F037         	movff	exp@exponent,ldexp@newexp
  9928  000C72  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  9929  000C76  ECC1  F00F         	call	_ldexp	;wreg free
  9930  000C7A  C034  F049         	movff	?_ldexp,exp@x
  9931  000C7E  C035  F04A         	movff	?_ldexp+1,exp@x+1
  9932  000C82  C036  F04B         	movff	?_ldexp+2,exp@x+2
  9933  000C86  5051               	movf	exp@sign,w,c
  9934  000C88  B4D8               	btfsc	status,2,c
  9935  000C8A  D025               	goto	i2l1074
  9936  000C8C  2849               	incf	exp@x,w,c
  9937  000C8E  E10E               	bnz	i2l3582
  9938  000C90  0E7F               	movlw	127
  9939  000C92  184A               	xorwf	exp@x+1,w,c
  9940  000C94  E10B               	bnz	i2l3582
  9941  000C96  0E7F               	movlw	127
  9942  000C98  184B               	xorwf	exp@x+2,w,c
  9943  000C9A  A4D8               	btfss	status,2,c
  9944  000C9C  D007               	goto	i2l3582
  9945  000C9E  0E00               	movlw	0
  9946  000CA0  6E49               	movwf	?_exp,c
  9947  000CA2  0E00               	movlw	0
  9948  000CA4  6E4A               	movwf	?_exp+1,c
  9949  000CA6  0E00               	movlw	0
  9950  000CA8  6E4B               	movwf	?_exp+2,c
  9951  000CAA  0012               	return	
  9952  000CAC                     i2l3582:
  9953  000CAC  0E00               	movlw	0
  9954  000CAE  6E09               	movwf	___ftdiv@f1,c
  9955  000CB0  0E80               	movlw	128
  9956  000CB2  6E0A               	movwf	___ftdiv@f1+1,c
  9957  000CB4  0E3F               	movlw	63
  9958  000CB6  6E0B               	movwf	___ftdiv@f1+2,c
  9959  000CB8  C049  F00C         	movff	exp@x,___ftdiv@f2
  9960  000CBC  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  9961  000CC0  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  9962  000CC4  EC2F  F00D         	call	___ftdiv	;wreg free
  9963  000CC8  C009  F049         	movff	?___ftdiv,?_exp
  9964  000CCC  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  9965  000CD0  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  9966  000CD4  0012               	return	
  9967  000CD6                     i2l1074:
  9968  000CD6  C049  F049         	movff	exp@x,?_exp
  9969  000CDA  C04A  F04A         	movff	exp@x+1,?_exp+1
  9970  000CDE  C04B  F04B         	movff	exp@x+2,?_exp+2
  9971  000CE2  0012               	return		;funcret
  9972  000CE4                     __end_of_exp:
  9973                           	opt stack 0
  9974                           pclatu	equ	0xFFB
  9975                           pclath	equ	0xFFA
  9976                           tblptru	equ	0xFF8
  9977                           tblptrh	equ	0xFF7
  9978                           tblptrl	equ	0xFF6
  9979                           tablat	equ	0xFF5
  9980                           prodh	equ	0xFF4
  9981                           prodl	equ	0xFF3
  9982                           intcon	equ	0xFF2
  9983                           intcon2	equ	0xFF1
  9984                           intcon3	equ	0xFF0
  9985                           postinc0	equ	0xFEE
  9986                           fsr0h	equ	0xFEA
  9987                           fsr0l	equ	0xFE9
  9988                           wreg	equ	0xFE8
  9989                           fsr1h	equ	0xFE2
  9990                           fsr1l	equ	0xFE1
  9991                           indf2	equ	0xFDF
  9992                           postinc2	equ	0xFDE
  9993                           postdec2	equ	0xFDD
  9994                           fsr2h	equ	0xFDA
  9995                           fsr2l	equ	0xFD9
  9996                           status	equ	0xFD8
  9997                           
  9998 ;; *************** function _ldexp *****************
  9999 ;; Defined at:
 10000 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;  value           3   51[COMRAM] unsigned char 
 10003 ;;  newexp          2   54[COMRAM] int 
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;		None
 10006 ;; Return value:  Size  Location     Type
 10007 ;;                  3   51[COMRAM] int 
 10008 ;; Registers used:
 10009 ;;		wreg, status,2, status,0
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 0/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10015 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10017 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10018 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10019 ;;Total ram usage:        7 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; This function calls:
 10022 ;;		Nothing
 10023 ;; This function is called by:
 10024 ;;		_exp
 10025 ;; This function uses a non-reentrant model
 10026 ;;
 10027                           
 10028                           	psect	text48
 10029  001F82                     __ptext48:
 10030                           	opt stack 0
 10031  001F82                     _ldexp:
 10032                           	opt stack 22
 10033                           
 10034                           ;incstack = 0
 10035  001F82  5034               	movf	ldexp@value,w,c
 10036  001F84  1035               	iorwf	ldexp@value+1,w,c
 10037  001F86  1036               	iorwf	ldexp@value+2,w,c
 10038  001F88  A4D8               	btfss	status,2,c
 10039  001F8A  D007               	goto	i2l3394
 10040  001F8C  0E00               	movlw	0
 10041  001F8E  6E34               	movwf	?_ldexp,c
 10042  001F90  0E00               	movlw	0
 10043  001F92  6E35               	movwf	?_ldexp+1,c
 10044  001F94  0E00               	movlw	0
 10045  001F96  6E36               	movwf	?_ldexp+2,c
 10046  001F98  0012               	return	
 10047  001F9A                     i2l3394:
 10048  001F9A  5036               	movf	ldexp@value+2,w,c
 10049  001F9C  0B7F               	andlw	127
 10050  001F9E  6E39               	movwf	??_ldexp& (0+255),c
 10051  001FA0  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 10052  001FA2  90D8               	bcf	status,0,c
 10053  001FA4  3639               	rlcf	??_ldexp,f,c
 10054  001FA6  363A               	rlcf	??_ldexp+1,f,c
 10055  001FA8  5039               	movf	??_ldexp,w,c
 10056  001FAA  2637               	addwf	ldexp@newexp,f,c
 10057  001FAC  503A               	movf	??_ldexp+1,w,c
 10058  001FAE  2238               	addwfc	ldexp@newexp+1,f,c
 10059  001FB0  AE35               	btfss	ldexp@value+1,7,c
 10060  001FB2  D003               	goto	i2u274_40
 10061  001FB4  6A39               	clrf	??_ldexp& (0+255),c
 10062  001FB6  2A39               	incf	??_ldexp& (0+255),f,c
 10063  001FB8  D001               	goto	i2u274_48
 10064  001FBA                     i2u274_40:
 10065  001FBA  6A39               	clrf	??_ldexp& (0+255),c
 10066  001FBC                     i2u274_48:
 10067  001FBC  5039               	movf	??_ldexp,w,c
 10068  001FBE  2637               	addwf	ldexp@newexp,f,c
 10069  001FC0  0E00               	movlw	0
 10070  001FC2  2238               	addwfc	ldexp@newexp+1,f,c
 10071  001FC4  AE38               	btfss	ldexp@newexp+1,7,c
 10072  001FC6  D00C               	goto	i2l3402
 10073  001FC8  0E00               	movlw	0
 10074  001FCA  0100               	movlb	0	; () banked
 10075  001FCC  6FC7               	movwf	(_errno+1)& (0+255),b
 10076  001FCE  0E22               	movlw	34
 10077  001FD0  6FC6               	movwf	_errno& (0+255),b
 10078  001FD2  0E00               	movlw	0
 10079  001FD4  6E34               	movwf	?_ldexp,c
 10080  001FD6  0E00               	movlw	0
 10081  001FD8  6E35               	movwf	?_ldexp+1,c
 10082  001FDA  0E00               	movlw	0
 10083  001FDC                     L8:
 10084  001FDC  6E36               	movwf	?_ldexp+2,c
 10085                           
 10086                           ; BSR set to: 0
 10087  001FDE  0012               	return	
 10088  001FE0                     i2l3402:
 10089  001FE0  BE38               	btfsc	ldexp@newexp+1,7,c
 10090  001FE2  D016               	goto	i2l3418
 10091  001FE4  0438               	decf	ldexp@newexp+1,w,c
 10092  001FE6  A0D8               	btfss	status,0,c
 10093  001FE8  D013               	goto	i2l3418
 10094  001FEA  0E00               	movlw	0
 10095  001FEC  0100               	movlb	0	; () banked
 10096  001FEE  6FC7               	movwf	(_errno+1)& (0+255),b
 10097  001FF0  0E22               	movlw	34
 10098  001FF2  6FC6               	movwf	_errno& (0+255),b
 10099                           
 10100                           ; BSR set to: 0
 10101  001FF4  AE36               	btfss	ldexp@value+2,7,c
 10102  001FF6  D006               	goto	i2l3414
 10103                           
 10104                           ; BSR set to: 0
 10105  001FF8  0EFF               	movlw	255
 10106  001FFA  6E34               	movwf	?_ldexp,c
 10107  001FFC  0E7F               	movlw	127
 10108  001FFE  6E35               	movwf	?_ldexp+1,c
 10109  002000  0EFF               	movlw	255
 10110  002002  D7EC               	goto	L8
 10111  002004                     i2l3414:
 10112                           
 10113                           ; BSR set to: 0
 10114  002004  0EFF               	movlw	255
 10115  002006  6E34               	movwf	?_ldexp,c
 10116  002008  0E7F               	movlw	127
 10117  00200A  6E35               	movwf	?_ldexp+1,c
 10118  00200C  0E7F               	movlw	127
 10119  00200E  D7E6               	goto	L8
 10120  002010                     i2l3418:
 10121  002010  3438               	rlcf	ldexp@newexp+1,w,c
 10122  002012  3038               	rrcf	ldexp@newexp+1,w,c
 10123  002014  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 10124  002016  3037               	rrcf	ldexp@newexp,w,c
 10125  002018  6E39               	movwf	??_ldexp& (0+255),c
 10126  00201A  5036               	movf	ldexp@value+2,w,c
 10127  00201C  1839               	xorwf	??_ldexp,w,c
 10128  00201E  0B80               	andlw	-128
 10129  002020  1839               	xorwf	??_ldexp,w,c
 10130  002022  6E36               	movwf	ldexp@value+2,c
 10131  002024  C037  F039         	movff	ldexp@newexp,??_ldexp
 10132  002028  0E01               	movlw	1
 10133  00202A  1639               	andwf	??_ldexp,f,c
 10134  00202C  3239               	rrcf	??_ldexp,f,c
 10135  00202E  3239               	rrcf	??_ldexp,f,c
 10136  002030  5035               	movf	ldexp@value+1,w,c
 10137  002032  1839               	xorwf	??_ldexp,w,c
 10138  002034  0B7F               	andlw	-129
 10139  002036  1839               	xorwf	??_ldexp,w,c
 10140  002038  6E35               	movwf	ldexp@value+1,c
 10141  00203A  C034  F034         	movff	ldexp@value,?_ldexp
 10142  00203E  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 10143  002042  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 10144  002046  0012               	return	
 10145  002048                     __end_of_ldexp:
 10146                           	opt stack 0
 10147                           pclatu	equ	0xFFB
 10148                           pclath	equ	0xFFA
 10149                           tblptru	equ	0xFF8
 10150                           tblptrh	equ	0xFF7
 10151                           tblptrl	equ	0xFF6
 10152                           tablat	equ	0xFF5
 10153                           prodh	equ	0xFF4
 10154                           prodl	equ	0xFF3
 10155                           intcon	equ	0xFF2
 10156                           intcon2	equ	0xFF1
 10157                           intcon3	equ	0xFF0
 10158                           postinc0	equ	0xFEE
 10159                           fsr0h	equ	0xFEA
 10160                           fsr0l	equ	0xFE9
 10161                           wreg	equ	0xFE8
 10162                           fsr1h	equ	0xFE2
 10163                           fsr1l	equ	0xFE1
 10164                           indf2	equ	0xFDF
 10165                           postinc2	equ	0xFDE
 10166                           postdec2	equ	0xFDD
 10167                           fsr2h	equ	0xFDA
 10168                           fsr2l	equ	0xFD9
 10169                           status	equ	0xFD8
 10170                           
 10171 ;; *************** function _floor *****************
 10172 ;; Defined at:
 10173 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 10174 ;; Parameters:    Size  Location     Type
 10175 ;;  x               3   64[COMRAM] int 
 10176 ;; Auto vars:     Size  Location     Type
 10177 ;;  i               3   67[COMRAM] int 
 10178 ;;  expon           2   70[COMRAM] int 
 10179 ;; Return value:  Size  Location     Type
 10180 ;;                  3   64[COMRAM] int 
 10181 ;; Registers used:
 10182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10183 ;; Tracked objects:
 10184 ;;		On entry : 0/0
 10185 ;;		On exit  : 0/0
 10186 ;;		Unchanged: 0/0
 10187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10188 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10189 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10191 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10192 ;;Total ram usage:        8 bytes
 10193 ;; Hardware stack levels used:    1
 10194 ;; Hardware stack levels required when called:    2
 10195 ;; This function calls:
 10196 ;;		___altoft
 10197 ;;		___ftadd
 10198 ;;		___ftge
 10199 ;;		___fttol
 10200 ;;		_frexp
 10201 ;; This function is called by:
 10202 ;;		_exp
 10203 ;; This function uses a non-reentrant model
 10204 ;;
 10205                           
 10206                           	psect	text49
 10207  001C24                     __ptext49:
 10208                           	opt stack 0
 10209  001C24                     _floor:
 10210                           	opt stack 20
 10211                           
 10212                           ;incstack = 0
 10213  001C24  C041  F001         	movff	floor@x,frexp@value
 10214  001C28  C042  F002         	movff	floor@x+1,frexp@value+1
 10215  001C2C  C043  F003         	movff	floor@x+2,frexp@value+2
 10216  001C30  0E47               	movlw	low floor@expon
 10217  001C32  6E04               	movwf	frexp@eptr,c
 10218  001C34  0E00               	movlw	high floor@expon
 10219  001C36  6E05               	movwf	frexp@eptr+1,c
 10220  001C38  ECD2  F011         	call	_frexp	;wreg free
 10221  001C3C  AE48               	btfss	floor@expon+1,7,c
 10222  001C3E  D010               	goto	i2l3372
 10223  001C40  AE43               	btfss	floor@x+2,7,c
 10224  001C42  D007               	goto	i2l3368
 10225  001C44  0E00               	movlw	0
 10226  001C46  6E41               	movwf	?_floor,c
 10227  001C48  0E80               	movlw	128
 10228  001C4A  6E42               	movwf	?_floor+1,c
 10229  001C4C  0EBF               	movlw	191
 10230  001C4E  6E43               	movwf	?_floor+2,c
 10231  001C50  0012               	return	
 10232  001C52                     i2l3368:
 10233  001C52  0E00               	movlw	0
 10234  001C54  6E41               	movwf	?_floor,c
 10235  001C56  0E00               	movlw	0
 10236  001C58  6E42               	movwf	?_floor+1,c
 10237  001C5A  0E00               	movlw	0
 10238  001C5C  6E43               	movwf	?_floor+2,c
 10239  001C5E  0012               	return	
 10240  001C60                     i2l3372:
 10241  001C60  5048               	movf	floor@expon+1,w,c
 10242  001C62  E104               	bnz	i2u270_40
 10243  001C64  0E15               	movlw	21
 10244  001C66  5C47               	subwf	floor@expon,w,c
 10245  001C68  A0D8               	btfss	status,0,c
 10246  001C6A  D007               	goto	i2l3376
 10247  001C6C                     i2u270_40:
 10248  001C6C  C041  F041         	movff	floor@x,?_floor
 10249  001C70  C042  F042         	movff	floor@x+1,?_floor+1
 10250  001C74  C043  F043         	movff	floor@x+2,?_floor+2
 10251  001C78  0012               	return	
 10252  001C7A                     i2l3376:
 10253  001C7A  C041  F028         	movff	floor@x,___fttol@f1
 10254  001C7E  C042  F029         	movff	floor@x+1,___fttol@f1+1
 10255  001C82  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 10256  001C86  ECC4  F00B         	call	___fttol	;wreg free
 10257  001C8A  C028  F037         	movff	?___fttol,___altoft@c
 10258  001C8E  C029  F038         	movff	?___fttol+1,___altoft@c+1
 10259  001C92  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 10260  001C96  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 10261  001C9A  ECE0  F012         	call	___altoft	;wreg free
 10262  001C9E  C037  F044         	movff	?___altoft,floor@i
 10263  001CA2  C038  F045         	movff	?___altoft+1,floor@i+1
 10264  001CA6  C039  F046         	movff	?___altoft+2,floor@i+2
 10265  001CAA  C041  F001         	movff	floor@x,___ftge@ff1
 10266  001CAE  C042  F002         	movff	floor@x+1,___ftge@ff1+1
 10267  001CB2  C043  F003         	movff	floor@x+2,___ftge@ff1+2
 10268  001CB6  C044  F004         	movff	floor@i,___ftge@ff2
 10269  001CBA  C045  F005         	movff	floor@i+1,___ftge@ff2+1
 10270  001CBE  C046  F006         	movff	floor@i+2,___ftge@ff2+2
 10271  001CC2  EC1A  F012         	call	___ftge	;wreg free
 10272  001CC6  B0D8               	btfsc	status,0,c
 10273  001CC8  D015               	goto	i2l1084
 10274  001CCA  C044  F01C         	movff	floor@i,___ftadd@f1
 10275  001CCE  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 10276  001CD2  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 10277  001CD6  0E00               	movlw	0
 10278  001CD8  6E1F               	movwf	___ftadd@f2,c
 10279  001CDA  0E80               	movlw	128
 10280  001CDC  6E20               	movwf	___ftadd@f2+1,c
 10281  001CDE  0EBF               	movlw	191
 10282  001CE0  6E21               	movwf	___ftadd@f2+2,c
 10283  001CE2  EC72  F006         	call	___ftadd	;wreg free
 10284  001CE6  C01C  F041         	movff	?___ftadd,?_floor
 10285  001CEA  C01D  F042         	movff	?___ftadd+1,?_floor+1
 10286  001CEE  C01E  F043         	movff	?___ftadd+2,?_floor+2
 10287  001CF2  0012               	return	
 10288  001CF4                     i2l1084:
 10289  001CF4  C044  F041         	movff	floor@i,?_floor
 10290  001CF8  C045  F042         	movff	floor@i+1,?_floor+1
 10291  001CFC  C046  F043         	movff	floor@i+2,?_floor+2
 10292  001D00  0012               	return		;funcret
 10293  001D02                     __end_of_floor:
 10294                           	opt stack 0
 10295                           pclatu	equ	0xFFB
 10296                           pclath	equ	0xFFA
 10297                           tblptru	equ	0xFF8
 10298                           tblptrh	equ	0xFF7
 10299                           tblptrl	equ	0xFF6
 10300                           tablat	equ	0xFF5
 10301                           prodh	equ	0xFF4
 10302                           prodl	equ	0xFF3
 10303                           intcon	equ	0xFF2
 10304                           intcon2	equ	0xFF1
 10305                           intcon3	equ	0xFF0
 10306                           postinc0	equ	0xFEE
 10307                           fsr0h	equ	0xFEA
 10308                           fsr0l	equ	0xFE9
 10309                           wreg	equ	0xFE8
 10310                           fsr1h	equ	0xFE2
 10311                           fsr1l	equ	0xFE1
 10312                           indf2	equ	0xFDF
 10313                           postinc2	equ	0xFDE
 10314                           postdec2	equ	0xFDD
 10315                           fsr2h	equ	0xFDA
 10316                           fsr2l	equ	0xFD9
 10317                           status	equ	0xFD8
 10318                           
 10319 ;; *************** function _frexp *****************
 10320 ;; Defined at:
 10321 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;  value           3    0[COMRAM] int 
 10324 ;;  eptr            2    3[COMRAM] PTR int 
 10325 ;;		 -> log@exponent(2), floor@expon(2), 
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;		None
 10328 ;; Return value:  Size  Location     Type
 10329 ;;                  3    0[COMRAM] PTR int 
 10330 ;; Registers used:
 10331 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10332 ;; Tracked objects:
 10333 ;;		On entry : 0/0
 10334 ;;		On exit  : 0/0
 10335 ;;		Unchanged: 0/0
 10336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10337 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10339 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10340 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10341 ;;Total ram usage:        7 bytes
 10342 ;; Hardware stack levels used:    1
 10343 ;; This function calls:
 10344 ;;		Nothing
 10345 ;; This function is called by:
 10346 ;;		_floor
 10347 ;;		_log
 10348 ;; This function uses a non-reentrant model
 10349 ;;
 10350                           
 10351                           	psect	text50
 10352  0023A4                     __ptext50:
 10353                           	opt stack 0
 10354  0023A4                     _frexp:
 10355                           	opt stack 22
 10356                           
 10357                           ;incstack = 0
 10358  0023A4  5001               	movf	frexp@value,w,c
 10359  0023A6  1002               	iorwf	frexp@value+1,w,c
 10360  0023A8  1003               	iorwf	frexp@value+2,w,c
 10361  0023AA  A4D8               	btfss	status,2,c
 10362  0023AC  D00F               	goto	i2l3248
 10363  0023AE  C004  FFD9         	movff	frexp@eptr,fsr2l
 10364  0023B2  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10365  0023B6  0E00               	movlw	0
 10366  0023B8  6EDE               	movwf	postinc2,c
 10367  0023BA  0E00               	movlw	0
 10368  0023BC  6EDD               	movwf	postdec2,c
 10369  0023BE  0E00               	movlw	0
 10370  0023C0  6E01               	movwf	?_frexp,c
 10371  0023C2  0E00               	movlw	0
 10372  0023C4  6E02               	movwf	?_frexp+1,c
 10373  0023C6  0E00               	movlw	0
 10374  0023C8  6E03               	movwf	?_frexp+2,c
 10375  0023CA  0012               	return	
 10376  0023CC                     i2l3248:
 10377  0023CC  5003               	movf	frexp@value+2,w,c
 10378  0023CE  0B7F               	andlw	127
 10379  0023D0  6E06               	movwf	??_frexp& (0+255),c
 10380  0023D2  6A07               	clrf	(??_frexp+1)& (0+255),c
 10381  0023D4  90D8               	bcf	status,0,c
 10382  0023D6  3606               	rlcf	??_frexp,f,c
 10383  0023D8  3607               	rlcf	??_frexp+1,f,c
 10384  0023DA  C004  FFD9         	movff	frexp@eptr,fsr2l
 10385  0023DE  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10386  0023E2  C006  FFDE         	movff	??_frexp,postinc2
 10387  0023E6  C007  FFDD         	movff	??_frexp+1,postdec2
 10388  0023EA  AE02               	btfss	frexp@value+1,7,c
 10389  0023EC  D003               	goto	i2u257_40
 10390  0023EE  6A06               	clrf	??_frexp& (0+255),c
 10391  0023F0  2A06               	incf	??_frexp& (0+255),f,c
 10392  0023F2  D001               	goto	i2u257_48
 10393  0023F4                     i2u257_40:
 10394  0023F4  6A06               	clrf	??_frexp& (0+255),c
 10395  0023F6                     i2u257_48:
 10396  0023F6  5006               	movf	??_frexp,w,c
 10397  0023F8  C004  FFD9         	movff	frexp@eptr,fsr2l
 10398  0023FC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10399  002400  12DE               	iorwf	postinc2,f,c
 10400  002402  0E00               	movlw	0
 10401  002404  12DD               	iorwf	postdec2,f,c
 10402  002406  C004  FFD9         	movff	frexp@eptr,fsr2l
 10403  00240A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10404  00240E  0E82               	movlw	130
 10405  002410  26DE               	addwf	postinc2,f,c
 10406  002412  0EFF               	movlw	255
 10407  002414  22DD               	addwfc	postdec2,f,c
 10408  002416  8003               	bsf	frexp@value+2,0,c
 10409  002418  8203               	bsf	frexp@value+2,1,c
 10410  00241A  8403               	bsf	frexp@value+2,2,c
 10411  00241C  8603               	bsf	frexp@value+2,3,c
 10412  00241E  8803               	bsf	frexp@value+2,4,c
 10413  002420  8A03               	bsf	frexp@value+2,5,c
 10414  002422  9C03               	bcf	frexp@value+2,6,c
 10415  002424  9E02               	bcf	frexp@value+1,7,c
 10416  002426  C001  F001         	movff	frexp@value,?_frexp
 10417  00242A  C002  F002         	movff	frexp@value+1,?_frexp+1
 10418  00242E  C003  F003         	movff	frexp@value+2,?_frexp+2
 10419  002432  0012               	return	
 10420  002434                     __end_of_frexp:
 10421                           	opt stack 0
 10422                           pclatu	equ	0xFFB
 10423                           pclath	equ	0xFFA
 10424                           tblptru	equ	0xFF8
 10425                           tblptrh	equ	0xFF7
 10426                           tblptrl	equ	0xFF6
 10427                           tablat	equ	0xFF5
 10428                           prodh	equ	0xFF4
 10429                           prodl	equ	0xFF3
 10430                           intcon	equ	0xFF2
 10431                           intcon2	equ	0xFF1
 10432                           intcon3	equ	0xFF0
 10433                           postinc0	equ	0xFEE
 10434                           fsr0h	equ	0xFEA
 10435                           fsr0l	equ	0xFE9
 10436                           wreg	equ	0xFE8
 10437                           fsr1h	equ	0xFE2
 10438                           fsr1l	equ	0xFE1
 10439                           indf2	equ	0xFDF
 10440                           postinc2	equ	0xFDE
 10441                           postdec2	equ	0xFDD
 10442                           fsr2h	equ	0xFDA
 10443                           fsr2l	equ	0xFD9
 10444                           status	equ	0xFD8
 10445                           
 10446 ;; *************** function ___fttol *****************
 10447 ;; Defined at:
 10448 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;  f1              3   39[COMRAM] float 
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;  lval            4   49[COMRAM] unsigned long 
 10453 ;;  exp1            1   53[COMRAM] unsigned char 
 10454 ;;  sign1           1   48[COMRAM] unsigned char 
 10455 ;; Return value:  Size  Location     Type
 10456 ;;                  4   39[COMRAM] long 
 10457 ;; Registers used:
 10458 ;;		wreg, status,2, status,0
 10459 ;; Tracked objects:
 10460 ;;		On entry : 0/0
 10461 ;;		On exit  : 0/0
 10462 ;;		Unchanged: 0/0
 10463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10464 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10465 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10466 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10467 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10468 ;;Total ram usage:       15 bytes
 10469 ;; Hardware stack levels used:    1
 10470 ;; This function calls:
 10471 ;;		Nothing
 10472 ;; This function is called by:
 10473 ;;		_dec_to_hex
 10474 ;;		_pow
 10475 ;;		_exp
 10476 ;;		_floor
 10477 ;; This function uses a non-reentrant model
 10478 ;;
 10479                           
 10480                           	psect	text51
 10481  001788                     __ptext51:
 10482                           	opt stack 0
 10483  001788                     ___fttol:
 10484                           	opt stack 21
 10485                           
 10486                           ;incstack = 0
 10487  001788  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 10488  00178C  6A2D               	clrf	(??___fttol+1)& (0+255),c
 10489  00178E  6A2E               	clrf	(??___fttol+2)& (0+255),c
 10490  001790  3429               	rlcf	___fttol@f1+1,w,c
 10491  001792  362C               	rlcf	??___fttol& (0+255),f,c
 10492  001794  E301               	bnc	u248_41
 10493  001796  802D               	bsf	(??___fttol+1)& (0+255),0,c
 10494  001798                     u248_41:
 10495  001798  502C               	movf	??___fttol,w,c
 10496  00179A  6E36               	movwf	___fttol@exp1,c
 10497  00179C  5036               	movf	___fttol@exp1,w,c
 10498  00179E  A4D8               	btfss	status,2,c
 10499  0017A0  D009               	goto	i2l3200
 10500  0017A2  0E00               	movlw	0
 10501  0017A4  6E28               	movwf	?___fttol,c
 10502  0017A6  0E00               	movlw	0
 10503  0017A8  6E29               	movwf	?___fttol+1,c
 10504  0017AA  0E00               	movlw	0
 10505  0017AC  6E2A               	movwf	?___fttol+2,c
 10506  0017AE  0E00               	movlw	0
 10507  0017B0  6E2B               	movwf	?___fttol+3,c
 10508  0017B2  0012               	return	
 10509  0017B4                     i2l3200:
 10510  0017B4  0E17               	movlw	23
 10511  0017B6  6E2C               	movwf	??___fttol& (0+255),c
 10512  0017B8  C028  F02D         	movff	___fttol@f1,??___fttol+1
 10513  0017BC  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 10514  0017C0  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 10515  0017C4  282C               	incf	??___fttol,w,c
 10516  0017C6  6E30               	movwf	(??___fttol+4)& (0+255),c
 10517  0017C8  D004               	goto	i2u250_40
 10518  0017CA                     i2u250_45:
 10519  0017CA  90D8               	bcf	status,0,c
 10520  0017CC  322F               	rrcf	??___fttol+3,f,c
 10521  0017CE  322E               	rrcf	??___fttol+2,f,c
 10522  0017D0  322D               	rrcf	??___fttol+1,f,c
 10523  0017D2                     i2u250_40:
 10524  0017D2  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 10525  0017D4  D7FA               	goto	i2u250_45
 10526  0017D6  502D               	movf	??___fttol+1,w,c
 10527  0017D8  6E31               	movwf	___fttol@sign1,c
 10528  0017DA  8E29               	bsf	___fttol@f1+1,7,c
 10529  0017DC  0EFF               	movlw	255
 10530  0017DE  1628               	andwf	___fttol@f1,f,c
 10531  0017E0  0EFF               	movlw	255
 10532  0017E2  1629               	andwf	___fttol@f1+1,f,c
 10533  0017E4  0E00               	movlw	0
 10534  0017E6  162A               	andwf	___fttol@f1+2,f,c
 10535  0017E8  5028               	movf	___fttol@f1,w,c
 10536  0017EA  6E32               	movwf	___fttol@lval,c
 10537  0017EC  5029               	movf	___fttol@f1+1,w,c
 10538  0017EE  6E33               	movwf	___fttol@lval+1,c
 10539  0017F0  502A               	movf	___fttol@f1+2,w,c
 10540  0017F2  6E34               	movwf	___fttol@lval+2,c
 10541  0017F4  6A35               	clrf	___fttol@lval+3,c
 10542  0017F6  0E8E               	movlw	142
 10543  0017F8  5E36               	subwf	___fttol@exp1,f,c
 10544  0017FA  AE36               	btfss	___fttol@exp1,7,c
 10545  0017FC  D016               	goto	i2l3222
 10546  0017FE  5036               	movf	___fttol@exp1,w,c
 10547  001800  0A80               	xorlw	128
 10548  001802  0F8F               	addlw	143
 10549  001804  B0D8               	btfsc	status,0,c
 10550  001806  D009               	goto	i2l3218
 10551  001808  0E00               	movlw	0
 10552  00180A  6E28               	movwf	?___fttol,c
 10553  00180C  0E00               	movlw	0
 10554  00180E  6E29               	movwf	?___fttol+1,c
 10555  001810  0E00               	movlw	0
 10556  001812  6E2A               	movwf	?___fttol+2,c
 10557  001814  0E00               	movlw	0
 10558  001816  6E2B               	movwf	?___fttol+3,c
 10559  001818  0012               	return	
 10560  00181A                     i2l3218:
 10561  00181A  90D8               	bcf	status,0,c
 10562  00181C  3235               	rrcf	___fttol@lval+3,f,c
 10563  00181E  3234               	rrcf	___fttol@lval+2,f,c
 10564  001820  3233               	rrcf	___fttol@lval+1,f,c
 10565  001822  3232               	rrcf	___fttol@lval,f,c
 10566  001824  3E36               	incfsz	___fttol@exp1,f,c
 10567  001826  D7F9               	goto	i2l3218
 10568  001828  D015               	goto	i2l3232
 10569  00182A                     i2l3222:
 10570  00182A  0E17               	movlw	23
 10571  00182C  6436               	cpfsgt	___fttol@exp1,c
 10572  00182E  D00F               	goto	i2l3230
 10573  001830  0E00               	movlw	0
 10574  001832  6E28               	movwf	?___fttol,c
 10575  001834  0E00               	movlw	0
 10576  001836  6E29               	movwf	?___fttol+1,c
 10577  001838  0E00               	movlw	0
 10578  00183A  6E2A               	movwf	?___fttol+2,c
 10579  00183C  0E00               	movlw	0
 10580  00183E  6E2B               	movwf	?___fttol+3,c
 10581  001840  0012               	return	
 10582  001842                     i2l3228:
 10583  001842  90D8               	bcf	status,0,c
 10584  001844  3632               	rlcf	___fttol@lval,f,c
 10585  001846  3633               	rlcf	___fttol@lval+1,f,c
 10586  001848  3634               	rlcf	___fttol@lval+2,f,c
 10587  00184A  3635               	rlcf	___fttol@lval+3,f,c
 10588  00184C  0636               	decf	___fttol@exp1,f,c
 10589  00184E                     i2l3230:
 10590  00184E  5036               	movf	___fttol@exp1,w,c
 10591  001850  A4D8               	btfss	status,2,c
 10592  001852  D7F7               	goto	i2l3228
 10593  001854                     i2l3232:
 10594  001854  5031               	movf	___fttol@sign1,w,c
 10595  001856  B4D8               	btfsc	status,2,c
 10596  001858  D008               	goto	i2l3236
 10597  00185A  1E35               	comf	___fttol@lval+3,f,c
 10598  00185C  1E34               	comf	___fttol@lval+2,f,c
 10599  00185E  1E33               	comf	___fttol@lval+1,f,c
 10600  001860  6C32               	negf	___fttol@lval,c
 10601  001862  0E00               	movlw	0
 10602  001864  2233               	addwfc	___fttol@lval+1,f,c
 10603  001866  2234               	addwfc	___fttol@lval+2,f,c
 10604  001868  2235               	addwfc	___fttol@lval+3,f,c
 10605  00186A                     i2l3236:
 10606  00186A  C032  F028         	movff	___fttol@lval,?___fttol
 10607  00186E  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 10608  001872  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 10609  001876  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 10610  00187A  0012               	return	
 10611  00187C                     __end_of___fttol:
 10612                           	opt stack 0
 10613                           pclatu	equ	0xFFB
 10614                           pclath	equ	0xFFA
 10615                           tblptru	equ	0xFF8
 10616                           tblptrh	equ	0xFF7
 10617                           tblptrl	equ	0xFF6
 10618                           tablat	equ	0xFF5
 10619                           prodh	equ	0xFF4
 10620                           prodl	equ	0xFF3
 10621                           intcon	equ	0xFF2
 10622                           intcon2	equ	0xFF1
 10623                           intcon3	equ	0xFF0
 10624                           postinc0	equ	0xFEE
 10625                           fsr0h	equ	0xFEA
 10626                           fsr0l	equ	0xFE9
 10627                           wreg	equ	0xFE8
 10628                           fsr1h	equ	0xFE2
 10629                           fsr1l	equ	0xFE1
 10630                           indf2	equ	0xFDF
 10631                           postinc2	equ	0xFDE
 10632                           postdec2	equ	0xFDD
 10633                           fsr2h	equ	0xFDA
 10634                           fsr2l	equ	0xFD9
 10635                           status	equ	0xFD8
 10636                           
 10637 ;; *************** function ___ftge *****************
 10638 ;; Defined at:
 10639 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10640 ;; Parameters:    Size  Location     Type
 10641 ;;  ff1             3    0[COMRAM] float 
 10642 ;;  ff2             3    3[COMRAM] float 
 10643 ;; Auto vars:     Size  Location     Type
 10644 ;;		None
 10645 ;; Return value:  Size  Location     Type
 10646 ;;		None               void
 10647 ;; Registers used:
 10648 ;;		wreg, status,2, status,0
 10649 ;; Tracked objects:
 10650 ;;		On entry : 0/0
 10651 ;;		On exit  : 0/0
 10652 ;;		Unchanged: 0/0
 10653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10654 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10656 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10657 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10658 ;;Total ram usage:        9 bytes
 10659 ;; Hardware stack levels used:    1
 10660 ;; This function calls:
 10661 ;;		Nothing
 10662 ;; This function is called by:
 10663 ;;		_pow
 10664 ;;		_exp
 10665 ;;		_floor
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text52
 10670  002434                     __ptext52:
 10671                           	opt stack 0
 10672  002434                     ___ftge:
 10673                           	opt stack 21
 10674                           
 10675                           ;incstack = 0
 10676  002434  AE03               	btfss	___ftge@ff1+2,7,c
 10677  002436  D016               	goto	i2l3180
 10678  002438  C001  F007         	movff	___ftge@ff1,??___ftge
 10679  00243C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 10680  002440  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 10681  002444  1E07               	comf	??___ftge,f,c
 10682  002446  1E08               	comf	??___ftge+1,f,c
 10683  002448  1E09               	comf	??___ftge+2,f,c
 10684  00244A  2A07               	incf	??___ftge,f,c
 10685  00244C  0E00               	movlw	0
 10686  00244E  2208               	addwfc	??___ftge+1,f,c
 10687  002450  2209               	addwfc	??___ftge+2,f,c
 10688  002452  0E00               	movlw	0
 10689  002454  2407               	addwf	??___ftge,w,c
 10690  002456  6E01               	movwf	___ftge@ff1,c
 10691  002458  0E00               	movlw	0
 10692  00245A  2008               	addwfc	??___ftge+1,w,c
 10693  00245C  6E02               	movwf	___ftge@ff1+1,c
 10694  00245E  0E80               	movlw	128
 10695  002460  2009               	addwfc	??___ftge+2,w,c
 10696  002462  6E03               	movwf	___ftge@ff1+2,c
 10697  002464                     i2l3180:
 10698  002464  AE06               	btfss	___ftge@ff2+2,7,c
 10699  002466  D016               	goto	i2l3184
 10700  002468  C004  F007         	movff	___ftge@ff2,??___ftge
 10701  00246C  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 10702  002470  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 10703  002474  1E07               	comf	??___ftge,f,c
 10704  002476  1E08               	comf	??___ftge+1,f,c
 10705  002478  1E09               	comf	??___ftge+2,f,c
 10706  00247A  2A07               	incf	??___ftge,f,c
 10707  00247C  0E00               	movlw	0
 10708  00247E  2208               	addwfc	??___ftge+1,f,c
 10709  002480  2209               	addwfc	??___ftge+2,f,c
 10710  002482  0E00               	movlw	0
 10711  002484  2407               	addwf	??___ftge,w,c
 10712  002486  6E04               	movwf	___ftge@ff2,c
 10713  002488  0E00               	movlw	0
 10714  00248A  2008               	addwfc	??___ftge+1,w,c
 10715  00248C  6E05               	movwf	___ftge@ff2+1,c
 10716  00248E  0E80               	movlw	128
 10717  002490  2009               	addwfc	??___ftge+2,w,c
 10718  002492  6E06               	movwf	___ftge@ff2+2,c
 10719  002494                     i2l3184:
 10720  002494  0E00               	movlw	0
 10721  002496  1A01               	xorwf	___ftge@ff1,f,c
 10722  002498  0E00               	movlw	0
 10723  00249A  1A02               	xorwf	___ftge@ff1+1,f,c
 10724  00249C  0E80               	movlw	128
 10725  00249E  1A03               	xorwf	___ftge@ff1+2,f,c
 10726  0024A0  0E00               	movlw	0
 10727  0024A2  1A04               	xorwf	___ftge@ff2,f,c
 10728  0024A4  0E00               	movlw	0
 10729  0024A6  1A05               	xorwf	___ftge@ff2+1,f,c
 10730  0024A8  0E80               	movlw	128
 10731  0024AA  1A06               	xorwf	___ftge@ff2+2,f,c
 10732  0024AC  5004               	movf	___ftge@ff2,w,c
 10733  0024AE  5C01               	subwf	___ftge@ff1,w,c
 10734  0024B0  5005               	movf	___ftge@ff2+1,w,c
 10735  0024B2  5802               	subwfb	___ftge@ff1+1,w,c
 10736  0024B4  5006               	movf	___ftge@ff2+2,w,c
 10737  0024B6  5803               	subwfb	___ftge@ff1+2,w,c
 10738  0024B8  B0D8               	btfsc	status,0,c
 10739  0024BA  D002               	goto	i2l3190
 10740  0024BC  90D8               	bcf	status,0,c
 10741  0024BE  0012               	return	
 10742  0024C0                     i2l3190:
 10743  0024C0  80D8               	bsf	status,0,c
 10744  0024C2  0012               	return	
 10745  0024C4                     __end_of___ftge:
 10746                           	opt stack 0
 10747                           pclatu	equ	0xFFB
 10748                           pclath	equ	0xFFA
 10749                           tblptru	equ	0xFF8
 10750                           tblptrh	equ	0xFF7
 10751                           tblptrl	equ	0xFF6
 10752                           tablat	equ	0xFF5
 10753                           prodh	equ	0xFF4
 10754                           prodl	equ	0xFF3
 10755                           intcon	equ	0xFF2
 10756                           intcon2	equ	0xFF1
 10757                           intcon3	equ	0xFF0
 10758                           postinc0	equ	0xFEE
 10759                           fsr0h	equ	0xFEA
 10760                           fsr0l	equ	0xFE9
 10761                           wreg	equ	0xFE8
 10762                           fsr1h	equ	0xFE2
 10763                           fsr1l	equ	0xFE1
 10764                           indf2	equ	0xFDF
 10765                           postinc2	equ	0xFDE
 10766                           postdec2	equ	0xFDD
 10767                           fsr2h	equ	0xFDA
 10768                           fsr2l	equ	0xFD9
 10769                           status	equ	0xFD8
 10770                           
 10771 ;; *************** function ___altoft *****************
 10772 ;; Defined at:
 10773 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 10774 ;; Parameters:    Size  Location     Type
 10775 ;;  c               4   54[COMRAM] long 
 10776 ;; Auto vars:     Size  Location     Type
 10777 ;;  sign            1   63[COMRAM] unsigned char 
 10778 ;;  exp             1   62[COMRAM] unsigned char 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  3   54[COMRAM] float 
 10781 ;; Registers used:
 10782 ;;		wreg, status,2, status,0, cstack
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10788 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10790 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10791 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10792 ;;Total ram usage:       10 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; Hardware stack levels required when called:    1
 10795 ;; This function calls:
 10796 ;;		___ftpack
 10797 ;; This function is called by:
 10798 ;;		_floor
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           	psect	text53
 10803  0025C0                     __ptext53:
 10804                           	opt stack 0
 10805  0025C0                     ___altoft:
 10806                           	opt stack 20
 10807                           
 10808                           ;incstack = 0
 10809  0025C0  0E00               	movlw	0
 10810  0025C2  6E40               	movwf	___altoft@sign,c
 10811  0025C4  0E8E               	movlw	142
 10812  0025C6  6E3F               	movwf	___altoft@exp,c
 10813  0025C8  AE3A               	btfss	___altoft@c+3,7,c
 10814  0025CA  D011               	goto	i2l3052
 10815  0025CC  1E3A               	comf	___altoft@c+3,f,c
 10816  0025CE  1E39               	comf	___altoft@c+2,f,c
 10817  0025D0  1E38               	comf	___altoft@c+1,f,c
 10818  0025D2  6C37               	negf	___altoft@c,c
 10819  0025D4  0E00               	movlw	0
 10820  0025D6  2238               	addwfc	___altoft@c+1,f,c
 10821  0025D8  2239               	addwfc	___altoft@c+2,f,c
 10822  0025DA  223A               	addwfc	___altoft@c+3,f,c
 10823  0025DC  0E01               	movlw	1
 10824  0025DE  6E40               	movwf	___altoft@sign,c
 10825  0025E0  D006               	goto	i2l3052
 10826  0025E2                     i2l3050:
 10827  0025E2  90D8               	bcf	status,0,c
 10828  0025E4  323A               	rrcf	___altoft@c+3,f,c
 10829  0025E6  3239               	rrcf	___altoft@c+2,f,c
 10830  0025E8  3238               	rrcf	___altoft@c+1,f,c
 10831  0025EA  3237               	rrcf	___altoft@c,f,c
 10832  0025EC  2A3F               	incf	___altoft@exp,f,c
 10833  0025EE                     i2l3052:
 10834  0025EE  0E00               	movlw	0
 10835  0025F0  1437               	andwf	___altoft@c,w,c
 10836  0025F2  6E3B               	movwf	??___altoft& (0+255),c
 10837  0025F4  0E00               	movlw	0
 10838  0025F6  1438               	andwf	___altoft@c+1,w,c
 10839  0025F8  6E3C               	movwf	(??___altoft+1)& (0+255),c
 10840  0025FA  0E00               	movlw	0
 10841  0025FC  1439               	andwf	___altoft@c+2,w,c
 10842  0025FE  6E3D               	movwf	(??___altoft+2)& (0+255),c
 10843  002600  0EFF               	movlw	255
 10844  002602  143A               	andwf	___altoft@c+3,w,c
 10845  002604  6E3E               	movwf	(??___altoft+3)& (0+255),c
 10846  002606  503B               	movf	??___altoft,w,c
 10847  002608  103C               	iorwf	??___altoft+1,w,c
 10848  00260A  103D               	iorwf	??___altoft+2,w,c
 10849  00260C  103E               	iorwf	??___altoft+3,w,c
 10850  00260E  A4D8               	btfss	status,2,c
 10851  002610  D7E8               	goto	i2l3050
 10852  002612  C037  F001         	movff	___altoft@c,___ftpack@arg
 10853  002616  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 10854  00261A  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 10855  00261E  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 10856  002622  C040  F005         	movff	___altoft@sign,___ftpack@sign
 10857  002626  ECE2  F010         	call	___ftpack	;wreg free
 10858  00262A  C001  F037         	movff	?___ftpack,?___altoft
 10859  00262E  C002  F038         	movff	?___ftpack+1,?___altoft+1
 10860  002632  C003  F039         	movff	?___ftpack+2,?___altoft+2
 10861  002636  0012               	return	
 10862  002638                     __end_of___altoft:
 10863                           	opt stack 0
 10864                           pclatu	equ	0xFFB
 10865                           pclath	equ	0xFFA
 10866                           tblptru	equ	0xFF8
 10867                           tblptrh	equ	0xFF7
 10868                           tblptrl	equ	0xFF6
 10869                           tablat	equ	0xFF5
 10870                           prodh	equ	0xFF4
 10871                           prodl	equ	0xFF3
 10872                           intcon	equ	0xFF2
 10873                           intcon2	equ	0xFF1
 10874                           intcon3	equ	0xFF0
 10875                           postinc0	equ	0xFEE
 10876                           fsr0h	equ	0xFEA
 10877                           fsr0l	equ	0xFE9
 10878                           wreg	equ	0xFE8
 10879                           fsr1h	equ	0xFE2
 10880                           fsr1l	equ	0xFE1
 10881                           indf2	equ	0xFDF
 10882                           postinc2	equ	0xFDE
 10883                           postdec2	equ	0xFDD
 10884                           fsr2h	equ	0xFDA
 10885                           fsr2l	equ	0xFD9
 10886                           status	equ	0xFD8
 10887                           
 10888 ;; *************** function _eval_poly *****************
 10889 ;; Defined at:
 10890 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;  x               3   39[COMRAM] float 
 10893 ;;  d               2   42[COMRAM] PTR const 
 10894 ;;		 -> log@coeff(27), exp@coeff(30), 
 10895 ;;  n               2   44[COMRAM] int 
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;  res             3   48[COMRAM] int 
 10898 ;; Return value:  Size  Location     Type
 10899 ;;                  3   39[COMRAM] int 
 10900 ;; Registers used:
 10901 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10902 ;; Tracked objects:
 10903 ;;		On entry : 0/0
 10904 ;;		On exit  : 0/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10907 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10911 ;;Total ram usage:       12 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    2
 10914 ;; This function calls:
 10915 ;;		___ftadd
 10916 ;;		___ftmul
 10917 ;;		i2___wmul
 10918 ;; This function is called by:
 10919 ;;		_exp
 10920 ;;		_log
 10921 ;; This function uses a non-reentrant model
 10922 ;;
 10923                           
 10924                           	psect	text54
 10925  001EB0                     __ptext54:
 10926                           	opt stack 0
 10927  001EB0                     _eval_poly:
 10928                           	opt stack 20
 10929                           
 10930                           ;incstack = 0
 10931  001EB0  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 10932  001EB4  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 10933  001EB8  0E00               	movlw	0
 10934  001EBA  6E04               	movwf	i2___wmul@multiplicand+1,c
 10935  001EBC  0E03               	movlw	3
 10936  001EBE  6E03               	movwf	i2___wmul@multiplicand,c
 10937  001EC0  EC7E  F015         	call	i2___wmul	;wreg free
 10938  001EC4  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 10939  001EC8  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10940  001ECC  5001               	movf	?i2___wmul,w,c
 10941  001ECE  262F               	addwf	??_eval_poly,f,c
 10942  001ED0  5002               	movf	?i2___wmul+1,w,c
 10943  001ED2  2230               	addwfc	??_eval_poly+1,f,c
 10944  001ED4  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10945  001ED8  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10946  001EDC                     	if	0	;tblptru may be non-zero
 10947  001EDC                     	endif
 10948  001EDC                     	if	0	;tblptru may be non-zero
 10949  001EDC                     	endif
 10950  001EDC  0009               	tblrd		*+
 10951  001EDE  CFF5 F031          	movff	tablat,eval_poly@res
 10952  001EE2  0009               	tblrd		*+
 10953  001EE4  CFF5 F032          	movff	tablat,eval_poly@res+1
 10954  001EE8  000A               	tblrd		*-
 10955  001EEA  CFF5 F033          	movff	tablat,eval_poly@res+2
 10956  001EEE  D03E               	goto	i2l3386
 10957  001EF0                     i2l3384:
 10958  001EF0  C031  F010         	movff	eval_poly@res,___ftmul@f2
 10959  001EF4  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 10960  001EF8  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 10961  001EFC  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 10962  001F00  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 10963  001F04  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 10964  001F08  EC3E  F00C         	call	___ftmul	;wreg free
 10965  001F0C  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10966  001F10  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10967  001F14  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10968  001F18  0E00               	movlw	0
 10969  001F1A  6E04               	movwf	i2___wmul@multiplicand+1,c
 10970  001F1C  0E03               	movlw	3
 10971  001F1E  6E03               	movwf	i2___wmul@multiplicand,c
 10972  001F20  062D               	decf	eval_poly@n,f,c
 10973  001F22  A0D8               	btfss	status,0,c
 10974  001F24  062E               	decf	eval_poly@n+1,f,c
 10975  001F26  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 10976  001F2A  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 10977  001F2E  EC7E  F015         	call	i2___wmul	;wreg free
 10978  001F32  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 10979  001F36  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10980  001F3A  5001               	movf	?i2___wmul,w,c
 10981  001F3C  262F               	addwf	??_eval_poly,f,c
 10982  001F3E  5002               	movf	?i2___wmul+1,w,c
 10983  001F40  2230               	addwfc	??_eval_poly+1,f,c
 10984  001F42  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10985  001F46  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10986  001F4A                     	if	0	;tblptru may be non-zero
 10987  001F4A                     	endif
 10988  001F4A                     	if	0	;tblptru may be non-zero
 10989  001F4A                     	endif
 10990  001F4A  0009               	tblrd		*+
 10991  001F4C  CFF5 F01F          	movff	tablat,___ftadd@f2
 10992  001F50  0009               	tblrd		*+
 10993  001F52  CFF5 F020          	movff	tablat,___ftadd@f2+1
 10994  001F56  000A               	tblrd		*-
 10995  001F58  CFF5 F021          	movff	tablat,___ftadd@f2+2
 10996  001F5C  EC72  F006         	call	___ftadd	;wreg free
 10997  001F60  C01C  F031         	movff	?___ftadd,eval_poly@res
 10998  001F64  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 10999  001F68  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 11000  001F6C                     i2l3386:
 11001  001F6C  502D               	movf	eval_poly@n,w,c
 11002  001F6E  102E               	iorwf	eval_poly@n+1,w,c
 11003  001F70  A4D8               	btfss	status,2,c
 11004  001F72  D7BE               	goto	i2l3384
 11005  001F74  C031  F028         	movff	eval_poly@res,?_eval_poly
 11006  001F78  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 11007  001F7C  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 11008  001F80  0012               	return		;funcret
 11009  001F82                     __end_of_eval_poly:
 11010                           	opt stack 0
 11011                           pclatu	equ	0xFFB
 11012                           pclath	equ	0xFFA
 11013                           tblptru	equ	0xFF8
 11014                           tblptrh	equ	0xFF7
 11015                           tblptrl	equ	0xFF6
 11016                           tablat	equ	0xFF5
 11017                           prodh	equ	0xFF4
 11018                           prodl	equ	0xFF3
 11019                           intcon	equ	0xFF2
 11020                           intcon2	equ	0xFF1
 11021                           intcon3	equ	0xFF0
 11022                           postinc0	equ	0xFEE
 11023                           fsr0h	equ	0xFEA
 11024                           fsr0l	equ	0xFE9
 11025                           wreg	equ	0xFE8
 11026                           fsr1h	equ	0xFE2
 11027                           fsr1l	equ	0xFE1
 11028                           indf2	equ	0xFDF
 11029                           postinc2	equ	0xFDE
 11030                           postdec2	equ	0xFDD
 11031                           fsr2h	equ	0xFDA
 11032                           fsr2l	equ	0xFD9
 11033                           status	equ	0xFD8
 11034                           
 11035 ;; *************** function i2___wmul *****************
 11036 ;; Defined at:
 11037 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;  multiplier      2    0[COMRAM] unsigned int 
 11040 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11041 ;; Auto vars:     Size  Location     Type
 11042 ;;  __wmul          2    4[COMRAM] unsigned int 
 11043 ;; Return value:  Size  Location     Type
 11044 ;;                  2    0[COMRAM] unsigned int 
 11045 ;; Registers used:
 11046 ;;		wreg, status,2, status,0, prodl, prodh
 11047 ;; Tracked objects:
 11048 ;;		On entry : 0/0
 11049 ;;		On exit  : 0/0
 11050 ;;		Unchanged: 0/0
 11051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11052 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11053 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11055 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11056 ;;Total ram usage:        6 bytes
 11057 ;; Hardware stack levels used:    1
 11058 ;; This function calls:
 11059 ;;		Nothing
 11060 ;; This function is called by:
 11061 ;;		_isr
 11062 ;;		_eval_poly
 11063 ;;		i2_printf
 11064 ;; This function uses a non-reentrant model
 11065 ;;
 11066                           
 11067                           	psect	text55
 11068  002AFC                     __ptext55:
 11069                           	opt stack 0
 11070  002AFC                     i2___wmul:
 11071                           	opt stack 24
 11072                           
 11073                           ;incstack = 0
 11074  002AFC  5001               	movf	i2___wmul@multiplier,w,c
 11075  002AFE  0203               	mulwf	i2___wmul@multiplicand,c
 11076  002B00  CFF3 F005          	movff	prodl,i2___wmul@product
 11077  002B04  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11078  002B08  5001               	movf	i2___wmul@multiplier,w,c
 11079  002B0A  0204               	mulwf	i2___wmul@multiplicand+1,c
 11080  002B0C  50F3               	movf	prodl,w,c
 11081  002B0E  2606               	addwf	i2___wmul@product+1,f,c
 11082  002B10  5002               	movf	i2___wmul@multiplier+1,w,c
 11083  002B12  0203               	mulwf	i2___wmul@multiplicand,c
 11084  002B14  50F3               	movf	prodl,w,c
 11085  002B16  2606               	addwf	i2___wmul@product+1,f,c
 11086  002B18  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11087  002B1C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11088  002B20  0012               	return	
 11089  002B22                     __end_ofi2___wmul:
 11090                           	opt stack 0
 11091                           pclatu	equ	0xFFB
 11092                           pclath	equ	0xFFA
 11093                           tblptru	equ	0xFF8
 11094                           tblptrh	equ	0xFF7
 11095                           tblptrl	equ	0xFF6
 11096                           tablat	equ	0xFF5
 11097                           prodh	equ	0xFF4
 11098                           prodl	equ	0xFF3
 11099                           intcon	equ	0xFF2
 11100                           intcon2	equ	0xFF1
 11101                           intcon3	equ	0xFF0
 11102                           postinc0	equ	0xFEE
 11103                           fsr0h	equ	0xFEA
 11104                           fsr0l	equ	0xFE9
 11105                           wreg	equ	0xFE8
 11106                           fsr1h	equ	0xFE2
 11107                           fsr1l	equ	0xFE1
 11108                           indf2	equ	0xFDF
 11109                           postinc2	equ	0xFDE
 11110                           postdec2	equ	0xFDD
 11111                           fsr2h	equ	0xFDA
 11112                           fsr2l	equ	0xFD9
 11113                           status	equ	0xFD8
 11114                           
 11115 ;; *************** function ___ftmul *****************
 11116 ;; Defined at:
 11117 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11118 ;; Parameters:    Size  Location     Type
 11119 ;;  f1              3   12[COMRAM] float 
 11120 ;;  f2              3   15[COMRAM] float 
 11121 ;; Auto vars:     Size  Location     Type
 11122 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 11123 ;;  sign            1   26[COMRAM] unsigned char 
 11124 ;;  cntr            1   25[COMRAM] unsigned char 
 11125 ;;  exp             1   21[COMRAM] unsigned char 
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  3   12[COMRAM] float 
 11128 ;; Registers used:
 11129 ;;		wreg, status,2, status,0, cstack
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11135 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11139 ;;Total ram usage:       15 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    1
 11142 ;; This function calls:
 11143 ;;		___ftpack
 11144 ;; This function is called by:
 11145 ;;		_dec_to_hex
 11146 ;;		_pow
 11147 ;;		_exp
 11148 ;;		_log
 11149 ;;		_eval_poly
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           	psect	text56
 11154  00187C                     __ptext56:
 11155                           	opt stack 0
 11156  00187C                     ___ftmul:
 11157                           	opt stack 20
 11158                           
 11159                           ;incstack = 0
 11160  00187C  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 11161  001880  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11162  001882  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11163  001884  340E               	rlcf	___ftmul@f1+1,w,c
 11164  001886  3613               	rlcf	??___ftmul& (0+255),f,c
 11165  001888  E301               	bnc	u239_41
 11166  00188A  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11167  00188C                     u239_41:
 11168  00188C  5013               	movf	??___ftmul,w,c
 11169  00188E  6E16               	movwf	___ftmul@exp,c
 11170  001890  5016               	movf	___ftmul@exp,w,c
 11171  001892  A4D8               	btfss	status,2,c
 11172  001894  D007               	goto	i2l3134
 11173  001896  0E00               	movlw	0
 11174  001898  6E0D               	movwf	?___ftmul,c
 11175  00189A  0E00               	movlw	0
 11176  00189C  6E0E               	movwf	?___ftmul+1,c
 11177  00189E  0E00               	movlw	0
 11178  0018A0  6E0F               	movwf	?___ftmul+2,c
 11179  0018A2  0012               	return	
 11180  0018A4                     i2l3134:
 11181  0018A4  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 11182  0018A8  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11183  0018AA  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11184  0018AC  3411               	rlcf	___ftmul@f2+1,w,c
 11185  0018AE  3613               	rlcf	??___ftmul& (0+255),f,c
 11186  0018B0  E301               	bnc	u241_41
 11187  0018B2  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11188  0018B4                     u241_41:
 11189  0018B4  5013               	movf	??___ftmul,w,c
 11190  0018B6  6E1B               	movwf	___ftmul@sign,c
 11191  0018B8  501B               	movf	___ftmul@sign,w,c
 11192  0018BA  A4D8               	btfss	status,2,c
 11193  0018BC  D007               	goto	i2l3140
 11194  0018BE  0E00               	movlw	0
 11195  0018C0  6E0D               	movwf	?___ftmul,c
 11196  0018C2  0E00               	movlw	0
 11197  0018C4  6E0E               	movwf	?___ftmul+1,c
 11198  0018C6  0E00               	movlw	0
 11199  0018C8  6E0F               	movwf	?___ftmul+2,c
 11200  0018CA  0012               	return	
 11201  0018CC                     i2l3140:
 11202  0018CC  501B               	movf	___ftmul@sign,w,c
 11203  0018CE  0F7B               	addlw	123
 11204  0018D0  2616               	addwf	___ftmul@exp,f,c
 11205  0018D2  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 11206  0018D6  5012               	movf	___ftmul@f2+2,w,c
 11207  0018D8  1A1B               	xorwf	___ftmul@sign,f,c
 11208  0018DA  0E80               	movlw	128
 11209  0018DC  161B               	andwf	___ftmul@sign,f,c
 11210  0018DE  8E0E               	bsf	___ftmul@f1+1,7,c
 11211  0018E0  8E11               	bsf	___ftmul@f2+1,7,c
 11212  0018E2  0EFF               	movlw	255
 11213  0018E4  1610               	andwf	___ftmul@f2,f,c
 11214  0018E6  0EFF               	movlw	255
 11215  0018E8  1611               	andwf	___ftmul@f2+1,f,c
 11216  0018EA  0E00               	movlw	0
 11217  0018EC  1612               	andwf	___ftmul@f2+2,f,c
 11218  0018EE  0E00               	movlw	0
 11219  0018F0  6E17               	movwf	___ftmul@f3_as_product,c
 11220  0018F2  0E00               	movlw	0
 11221  0018F4  6E18               	movwf	___ftmul@f3_as_product+1,c
 11222  0018F6  0E00               	movlw	0
 11223  0018F8  6E19               	movwf	___ftmul@f3_as_product+2,c
 11224  0018FA  0E07               	movlw	7
 11225  0018FC  6E1A               	movwf	___ftmul@cntr,c
 11226  0018FE                     i2l3154:
 11227  0018FE  A00D               	btfss	___ftmul@f1,0,c
 11228  001900  D006               	goto	i2l3158
 11229  001902  5010               	movf	___ftmul@f2,w,c
 11230  001904  2617               	addwf	___ftmul@f3_as_product,f,c
 11231  001906  5011               	movf	___ftmul@f2+1,w,c
 11232  001908  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11233  00190A  5012               	movf	___ftmul@f2+2,w,c
 11234  00190C  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11235  00190E                     i2l3158:
 11236  00190E  90D8               	bcf	status,0,c
 11237  001910  320F               	rrcf	___ftmul@f1+2,f,c
 11238  001912  320E               	rrcf	___ftmul@f1+1,f,c
 11239  001914  320D               	rrcf	___ftmul@f1,f,c
 11240  001916  90D8               	bcf	status,0,c
 11241  001918  3610               	rlcf	___ftmul@f2,f,c
 11242  00191A  3611               	rlcf	___ftmul@f2+1,f,c
 11243  00191C  3612               	rlcf	___ftmul@f2+2,f,c
 11244  00191E  2E1A               	decfsz	___ftmul@cntr,f,c
 11245  001920  D7EE               	goto	i2l3154
 11246  001922  0E09               	movlw	9
 11247  001924  6E1A               	movwf	___ftmul@cntr,c
 11248  001926                     i2l3164:
 11249  001926  A00D               	btfss	___ftmul@f1,0,c
 11250  001928  D006               	goto	i2l3168
 11251  00192A  5010               	movf	___ftmul@f2,w,c
 11252  00192C  2617               	addwf	___ftmul@f3_as_product,f,c
 11253  00192E  5011               	movf	___ftmul@f2+1,w,c
 11254  001930  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11255  001932  5012               	movf	___ftmul@f2+2,w,c
 11256  001934  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11257  001936                     i2l3168:
 11258  001936  90D8               	bcf	status,0,c
 11259  001938  320F               	rrcf	___ftmul@f1+2,f,c
 11260  00193A  320E               	rrcf	___ftmul@f1+1,f,c
 11261  00193C  320D               	rrcf	___ftmul@f1,f,c
 11262  00193E  90D8               	bcf	status,0,c
 11263  001940  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 11264  001942  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 11265  001944  3217               	rrcf	___ftmul@f3_as_product,f,c
 11266  001946  2E1A               	decfsz	___ftmul@cntr,f,c
 11267  001948  D7EE               	goto	i2l3164
 11268  00194A  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 11269  00194E  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11270  001952  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11271  001956  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 11272  00195A  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 11273  00195E  ECE2  F010         	call	___ftpack	;wreg free
 11274  001962  C001  F00D         	movff	?___ftpack,?___ftmul
 11275  001966  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 11276  00196A  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 11277  00196E  0012               	return	
 11278  001970                     __end_of___ftmul:
 11279                           	opt stack 0
 11280                           pclatu	equ	0xFFB
 11281                           pclath	equ	0xFFA
 11282                           tblptru	equ	0xFF8
 11283                           tblptrh	equ	0xFF7
 11284                           tblptrl	equ	0xFF6
 11285                           tablat	equ	0xFF5
 11286                           prodh	equ	0xFF4
 11287                           prodl	equ	0xFF3
 11288                           intcon	equ	0xFF2
 11289                           intcon2	equ	0xFF1
 11290                           intcon3	equ	0xFF0
 11291                           postinc0	equ	0xFEE
 11292                           fsr0h	equ	0xFEA
 11293                           fsr0l	equ	0xFE9
 11294                           wreg	equ	0xFE8
 11295                           fsr1h	equ	0xFE2
 11296                           fsr1l	equ	0xFE1
 11297                           indf2	equ	0xFDF
 11298                           postinc2	equ	0xFDE
 11299                           postdec2	equ	0xFDD
 11300                           fsr2h	equ	0xFDA
 11301                           fsr2l	equ	0xFD9
 11302                           status	equ	0xFD8
 11303                           
 11304 ;; *************** function ___ftsub *****************
 11305 ;; Defined at:
 11306 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 11307 ;; Parameters:    Size  Location     Type
 11308 ;;  f1              3   39[COMRAM] float 
 11309 ;;  f2              3   42[COMRAM] float 
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;		None
 11312 ;; Return value:  Size  Location     Type
 11313 ;;                  3   39[COMRAM] float 
 11314 ;; Registers used:
 11315 ;;		wreg, status,2, status,0, cstack
 11316 ;; Tracked objects:
 11317 ;;		On entry : 0/0
 11318 ;;		On exit  : 0/0
 11319 ;;		Unchanged: 0/0
 11320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11321 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11324 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11325 ;;Total ram usage:        6 bytes
 11326 ;; Hardware stack levels used:    1
 11327 ;; Hardware stack levels required when called:    2
 11328 ;; This function calls:
 11329 ;;		___ftadd
 11330 ;; This function is called by:
 11331 ;;		_exp
 11332 ;; This function uses a non-reentrant model
 11333 ;;
 11334                           
 11335                           	psect	text57
 11336  00299A                     __ptext57:
 11337                           	opt stack 0
 11338  00299A                     ___ftsub:
 11339                           	opt stack 20
 11340                           
 11341                           ;incstack = 0
 11342  00299A  502B               	movf	___ftsub@f2,w,c
 11343  00299C  102C               	iorwf	___ftsub@f2+1,w,c
 11344  00299E  102D               	iorwf	___ftsub@f2+2,w,c
 11345  0029A0  B4D8               	btfsc	status,2,c
 11346  0029A2  D006               	goto	i2l3338
 11347  0029A4  0E00               	movlw	0
 11348  0029A6  1A2B               	xorwf	___ftsub@f2,f,c
 11349  0029A8  0E00               	movlw	0
 11350  0029AA  1A2C               	xorwf	___ftsub@f2+1,f,c
 11351  0029AC  0E80               	movlw	128
 11352  0029AE  1A2D               	xorwf	___ftsub@f2+2,f,c
 11353  0029B0                     i2l3338:
 11354  0029B0  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 11355  0029B4  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 11356  0029B8  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 11357  0029BC  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 11358  0029C0  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 11359  0029C4  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 11360  0029C8  EC72  F006         	call	___ftadd	;wreg free
 11361  0029CC  C01C  F028         	movff	?___ftadd,?___ftsub
 11362  0029D0  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 11363  0029D4  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 11364  0029D8  0012               	return	
 11365  0029DA                     __end_of___ftsub:
 11366                           	opt stack 0
 11367                           pclatu	equ	0xFFB
 11368                           pclath	equ	0xFFA
 11369                           tblptru	equ	0xFF8
 11370                           tblptrh	equ	0xFF7
 11371                           tblptrl	equ	0xFF6
 11372                           tablat	equ	0xFF5
 11373                           prodh	equ	0xFF4
 11374                           prodl	equ	0xFF3
 11375                           intcon	equ	0xFF2
 11376                           intcon2	equ	0xFF1
 11377                           intcon3	equ	0xFF0
 11378                           postinc0	equ	0xFEE
 11379                           fsr0h	equ	0xFEA
 11380                           fsr0l	equ	0xFE9
 11381                           wreg	equ	0xFE8
 11382                           fsr1h	equ	0xFE2
 11383                           fsr1l	equ	0xFE1
 11384                           indf2	equ	0xFDF
 11385                           postinc2	equ	0xFDE
 11386                           postdec2	equ	0xFDD
 11387                           fsr2h	equ	0xFDA
 11388                           fsr2l	equ	0xFD9
 11389                           status	equ	0xFD8
 11390                           
 11391 ;; *************** function ___ftadd *****************
 11392 ;; Defined at:
 11393 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;  f1              3   27[COMRAM] float 
 11396 ;;  f2              3   30[COMRAM] float 
 11397 ;; Auto vars:     Size  Location     Type
 11398 ;;  exp1            1   38[COMRAM] unsigned char 
 11399 ;;  exp2            1   37[COMRAM] unsigned char 
 11400 ;;  sign            1   36[COMRAM] unsigned char 
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  3   27[COMRAM] float 
 11403 ;; Registers used:
 11404 ;;		wreg, status,2, status,0, cstack
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11410 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11412 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11413 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11414 ;;Total ram usage:       12 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    1
 11417 ;; This function calls:
 11418 ;;		___ftpack
 11419 ;; This function is called by:
 11420 ;;		_dec_to_hex
 11421 ;;		___ftsub
 11422 ;;		_floor
 11423 ;;		_log
 11424 ;;		_eval_poly
 11425 ;; This function uses a non-reentrant model
 11426 ;;
 11427                           
 11428                           	psect	text58
 11429  000CE4                     __ptext58:
 11430                           	opt stack 0
 11431  000CE4                     ___ftadd:
 11432                           	opt stack 20
 11433                           
 11434                           ;incstack = 0
 11435  000CE4  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 11436  000CE8  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11437  000CEA  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11438  000CEC  341D               	rlcf	___ftadd@f1+1,w,c
 11439  000CEE  3622               	rlcf	??___ftadd& (0+255),f,c
 11440  000CF0  E301               	bnc	u218_41
 11441  000CF2  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11442  000CF4                     u218_41:
 11443  000CF4  5022               	movf	??___ftadd,w,c
 11444  000CF6  6E27               	movwf	___ftadd@exp1,c
 11445  000CF8  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 11446  000CFC  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11447  000CFE  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11448  000D00  3420               	rlcf	___ftadd@f2+1,w,c
 11449  000D02  3622               	rlcf	??___ftadd& (0+255),f,c
 11450  000D04  E301               	bnc	u219_41
 11451  000D06  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11452  000D08                     u219_41:
 11453  000D08  5022               	movf	??___ftadd,w,c
 11454  000D0A  6E26               	movwf	___ftadd@exp2,c
 11455  000D0C  5027               	movf	___ftadd@exp1,w,c
 11456  000D0E  B4D8               	btfsc	status,2,c
 11457  000D10  D00B               	goto	i2l718
 11458  000D12  5026               	movf	___ftadd@exp2,w,c
 11459  000D14  5C27               	subwf	___ftadd@exp1,w,c
 11460  000D16  B0D8               	btfsc	status,0,c
 11461  000D18  D00E               	goto	i2l3066
 11462  000D1A  5027               	movf	___ftadd@exp1,w,c
 11463  000D1C  0800               	sublw	0
 11464  000D1E  2426               	addwf	___ftadd@exp2,w,c
 11465  000D20  6E22               	movwf	??___ftadd& (0+255),c
 11466  000D22  0E18               	movlw	24
 11467  000D24  6422               	cpfsgt	??___ftadd,c
 11468  000D26  D007               	goto	i2l3066
 11469  000D28                     i2l718:
 11470  000D28  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 11471  000D2C  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 11472  000D30  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 11473  000D34  0012               	return	
 11474  000D36                     i2l3066:
 11475  000D36  5026               	movf	___ftadd@exp2,w,c
 11476  000D38  B4D8               	btfsc	status,2,c
 11477  000D3A  D00B               	goto	i2l722
 11478  000D3C  5027               	movf	___ftadd@exp1,w,c
 11479  000D3E  5C26               	subwf	___ftadd@exp2,w,c
 11480  000D40  B0D8               	btfsc	status,0,c
 11481  000D42  D00E               	goto	i2l3072
 11482  000D44  5026               	movf	___ftadd@exp2,w,c
 11483  000D46  0800               	sublw	0
 11484  000D48  2427               	addwf	___ftadd@exp1,w,c
 11485  000D4A  6E22               	movwf	??___ftadd& (0+255),c
 11486  000D4C  0E18               	movlw	24
 11487  000D4E  6422               	cpfsgt	??___ftadd,c
 11488  000D50  D007               	goto	i2l3072
 11489  000D52                     i2l722:
 11490  000D52  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 11491  000D56  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 11492  000D5A  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 11493  000D5E  0012               	return	
 11494  000D60                     i2l3072:
 11495  000D60  0E06               	movlw	6
 11496  000D62  6E25               	movwf	___ftadd@sign,c
 11497  000D64  BE1E               	btfsc	___ftadd@f1+2,7,c
 11498  000D66  8E25               	bsf	___ftadd@sign,7,c
 11499  000D68  BE21               	btfsc	___ftadd@f2+2,7,c
 11500  000D6A  8C25               	bsf	___ftadd@sign,6,c
 11501  000D6C  8E1D               	bsf	___ftadd@f1+1,7,c
 11502  000D6E  0EFF               	movlw	255
 11503  000D70  161C               	andwf	___ftadd@f1,f,c
 11504  000D72  0EFF               	movlw	255
 11505  000D74  161D               	andwf	___ftadd@f1+1,f,c
 11506  000D76  0E00               	movlw	0
 11507  000D78  161E               	andwf	___ftadd@f1+2,f,c
 11508  000D7A  8E20               	bsf	___ftadd@f2+1,7,c
 11509  000D7C  0EFF               	movlw	255
 11510  000D7E  161F               	andwf	___ftadd@f2,f,c
 11511  000D80  0EFF               	movlw	255
 11512  000D82  1620               	andwf	___ftadd@f2+1,f,c
 11513  000D84  0E00               	movlw	0
 11514  000D86  1621               	andwf	___ftadd@f2+2,f,c
 11515  000D88  5026               	movf	___ftadd@exp2,w,c
 11516  000D8A  5C27               	subwf	___ftadd@exp1,w,c
 11517  000D8C  B0D8               	btfsc	status,0,c
 11518  000D8E  D01B               	goto	i2l3098
 11519  000D90                     i2l3088:
 11520  000D90  90D8               	bcf	status,0,c
 11521  000D92  361F               	rlcf	___ftadd@f2,f,c
 11522  000D94  3620               	rlcf	___ftadd@f2+1,f,c
 11523  000D96  3621               	rlcf	___ftadd@f2+2,f,c
 11524  000D98  0626               	decf	___ftadd@exp2,f,c
 11525  000D9A  5027               	movf	___ftadd@exp1,w,c
 11526  000D9C  1826               	xorwf	___ftadd@exp2,w,c
 11527  000D9E  B4D8               	btfsc	status,2,c
 11528  000DA0  D00D               	goto	i2l3096
 11529  000DA2  0625               	decf	___ftadd@sign,f,c
 11530  000DA4  C025  F022         	movff	___ftadd@sign,??___ftadd
 11531  000DA8  0E07               	movlw	7
 11532  000DAA  1622               	andwf	??___ftadd,f,c
 11533  000DAC  B4D8               	btfsc	status,2,c
 11534  000DAE  D006               	goto	i2l3096
 11535  000DB0  D7EF               	goto	i2l3088
 11536  000DB2                     i2l3094:
 11537  000DB2  90D8               	bcf	status,0,c
 11538  000DB4  321E               	rrcf	___ftadd@f1+2,f,c
 11539  000DB6  321D               	rrcf	___ftadd@f1+1,f,c
 11540  000DB8  321C               	rrcf	___ftadd@f1,f,c
 11541  000DBA  2A27               	incf	___ftadd@exp1,f,c
 11542  000DBC                     i2l3096:
 11543  000DBC  5026               	movf	___ftadd@exp2,w,c
 11544  000DBE  1827               	xorwf	___ftadd@exp1,w,c
 11545  000DC0  B4D8               	btfsc	status,2,c
 11546  000DC2  D01F               	goto	i2l733
 11547  000DC4  D7F6               	goto	i2l3094
 11548  000DC6                     i2l3098:
 11549  000DC6  5027               	movf	___ftadd@exp1,w,c
 11550  000DC8  5C26               	subwf	___ftadd@exp2,w,c
 11551  000DCA  B0D8               	btfsc	status,0,c
 11552  000DCC  D01A               	goto	i2l733
 11553  000DCE                     i2l3100:
 11554  000DCE  90D8               	bcf	status,0,c
 11555  000DD0  361C               	rlcf	___ftadd@f1,f,c
 11556  000DD2  361D               	rlcf	___ftadd@f1+1,f,c
 11557  000DD4  361E               	rlcf	___ftadd@f1+2,f,c
 11558  000DD6  0627               	decf	___ftadd@exp1,f,c
 11559  000DD8  5027               	movf	___ftadd@exp1,w,c
 11560  000DDA  1826               	xorwf	___ftadd@exp2,w,c
 11561  000DDC  B4D8               	btfsc	status,2,c
 11562  000DDE  D00D               	goto	i2l3108
 11563  000DE0  0625               	decf	___ftadd@sign,f,c
 11564  000DE2  C025  F022         	movff	___ftadd@sign,??___ftadd
 11565  000DE6  0E07               	movlw	7
 11566  000DE8  1622               	andwf	??___ftadd,f,c
 11567  000DEA  B4D8               	btfsc	status,2,c
 11568  000DEC  D006               	goto	i2l3108
 11569  000DEE  D7EF               	goto	i2l3100
 11570  000DF0                     i2l3106:
 11571  000DF0  90D8               	bcf	status,0,c
 11572  000DF2  3221               	rrcf	___ftadd@f2+2,f,c
 11573  000DF4  3220               	rrcf	___ftadd@f2+1,f,c
 11574  000DF6  321F               	rrcf	___ftadd@f2,f,c
 11575  000DF8  2A26               	incf	___ftadd@exp2,f,c
 11576  000DFA                     i2l3108:
 11577  000DFA  5026               	movf	___ftadd@exp2,w,c
 11578  000DFC  1827               	xorwf	___ftadd@exp1,w,c
 11579  000DFE  A4D8               	btfss	status,2,c
 11580  000E00  D7F7               	goto	i2l3106
 11581  000E02                     i2l733:
 11582  000E02  AE25               	btfss	___ftadd@sign,7,c
 11583  000E04  D00C               	goto	i2l742
 11584  000E06  0EFF               	movlw	255
 11585  000E08  1A1C               	xorwf	___ftadd@f1,f,c
 11586  000E0A  0EFF               	movlw	255
 11587  000E0C  1A1D               	xorwf	___ftadd@f1+1,f,c
 11588  000E0E  0EFF               	movlw	255
 11589  000E10  1A1E               	xorwf	___ftadd@f1+2,f,c
 11590  000E12  0E01               	movlw	1
 11591  000E14  261C               	addwf	___ftadd@f1,f,c
 11592  000E16  0E00               	movlw	0
 11593  000E18  221D               	addwfc	___ftadd@f1+1,f,c
 11594  000E1A  0E00               	movlw	0
 11595  000E1C  221E               	addwfc	___ftadd@f1+2,f,c
 11596  000E1E                     i2l742:
 11597  000E1E  AC25               	btfss	___ftadd@sign,6,c
 11598  000E20  D00C               	goto	i2l3114
 11599  000E22  0EFF               	movlw	255
 11600  000E24  1A1F               	xorwf	___ftadd@f2,f,c
 11601  000E26  0EFF               	movlw	255
 11602  000E28  1A20               	xorwf	___ftadd@f2+1,f,c
 11603  000E2A  0EFF               	movlw	255
 11604  000E2C  1A21               	xorwf	___ftadd@f2+2,f,c
 11605  000E2E  0E01               	movlw	1
 11606  000E30  261F               	addwf	___ftadd@f2,f,c
 11607  000E32  0E00               	movlw	0
 11608  000E34  2220               	addwfc	___ftadd@f2+1,f,c
 11609  000E36  0E00               	movlw	0
 11610  000E38  2221               	addwfc	___ftadd@f2+2,f,c
 11611  000E3A                     i2l3114:
 11612  000E3A  0E00               	movlw	0
 11613  000E3C  6E25               	movwf	___ftadd@sign,c
 11614  000E3E  501C               	movf	___ftadd@f1,w,c
 11615  000E40  261F               	addwf	___ftadd@f2,f,c
 11616  000E42  501D               	movf	___ftadd@f1+1,w,c
 11617  000E44  2220               	addwfc	___ftadd@f2+1,f,c
 11618  000E46  501E               	movf	___ftadd@f1+2,w,c
 11619  000E48  2221               	addwfc	___ftadd@f2+2,f,c
 11620  000E4A  AE21               	btfss	___ftadd@f2+2,7,c
 11621  000E4C  D00E               	goto	i2l3124
 11622  000E4E  0EFF               	movlw	255
 11623  000E50  1A1F               	xorwf	___ftadd@f2,f,c
 11624  000E52  0EFF               	movlw	255
 11625  000E54  1A20               	xorwf	___ftadd@f2+1,f,c
 11626  000E56  0EFF               	movlw	255
 11627  000E58  1A21               	xorwf	___ftadd@f2+2,f,c
 11628  000E5A  0E01               	movlw	1
 11629  000E5C  261F               	addwf	___ftadd@f2,f,c
 11630  000E5E  0E00               	movlw	0
 11631  000E60  2220               	addwfc	___ftadd@f2+1,f,c
 11632  000E62  0E00               	movlw	0
 11633  000E64  2221               	addwfc	___ftadd@f2+2,f,c
 11634  000E66  0E01               	movlw	1
 11635  000E68  6E25               	movwf	___ftadd@sign,c
 11636  000E6A                     i2l3124:
 11637  000E6A  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 11638  000E6E  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11639  000E72  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11640  000E76  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 11641  000E7A  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 11642  000E7E  ECE2  F010         	call	___ftpack	;wreg free
 11643  000E82  C001  F01C         	movff	?___ftpack,?___ftadd
 11644  000E86  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 11645  000E8A  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 11646  000E8E  0012               	return	
 11647  000E90                     __end_of___ftadd:
 11648                           	opt stack 0
 11649                           pclatu	equ	0xFFB
 11650                           pclath	equ	0xFFA
 11651                           tblptru	equ	0xFF8
 11652                           tblptrh	equ	0xFF7
 11653                           tblptrl	equ	0xFF6
 11654                           tablat	equ	0xFF5
 11655                           prodh	equ	0xFF4
 11656                           prodl	equ	0xFF3
 11657                           intcon	equ	0xFF2
 11658                           intcon2	equ	0xFF1
 11659                           intcon3	equ	0xFF0
 11660                           postinc0	equ	0xFEE
 11661                           fsr0h	equ	0xFEA
 11662                           fsr0l	equ	0xFE9
 11663                           wreg	equ	0xFE8
 11664                           fsr1h	equ	0xFE2
 11665                           fsr1l	equ	0xFE1
 11666                           indf2	equ	0xFDF
 11667                           postinc2	equ	0xFDE
 11668                           postdec2	equ	0xFDD
 11669                           fsr2h	equ	0xFDA
 11670                           fsr2l	equ	0xFD9
 11671                           status	equ	0xFD8
 11672                           
 11673 ;; *************** function ___ftneg *****************
 11674 ;; Defined at:
 11675 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 11676 ;; Parameters:    Size  Location     Type
 11677 ;;  f1              3    0[COMRAM] float 
 11678 ;; Auto vars:     Size  Location     Type
 11679 ;;		None
 11680 ;; Return value:  Size  Location     Type
 11681 ;;                  3    0[COMRAM] float 
 11682 ;; Registers used:
 11683 ;;		wreg, status,2, status,0
 11684 ;; Tracked objects:
 11685 ;;		On entry : 0/0
 11686 ;;		On exit  : 0/0
 11687 ;;		Unchanged: 0/0
 11688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11689 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11692 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11693 ;;Total ram usage:        3 bytes
 11694 ;; Hardware stack levels used:    1
 11695 ;; This function calls:
 11696 ;;		Nothing
 11697 ;; This function is called by:
 11698 ;;		_pow
 11699 ;;		_exp
 11700 ;; This function uses a non-reentrant model
 11701 ;;
 11702                           
 11703                           	psect	text59
 11704  002B22                     __ptext59:
 11705                           	opt stack 0
 11706  002B22                     ___ftneg:
 11707                           	opt stack 22
 11708                           
 11709                           ;incstack = 0
 11710  002B22  5001               	movf	___ftneg@f1,w,c
 11711  002B24  1002               	iorwf	___ftneg@f1+1,w,c
 11712  002B26  1003               	iorwf	___ftneg@f1+2,w,c
 11713  002B28  B4D8               	btfsc	status,2,c
 11714  002B2A  D006               	goto	i2l775
 11715  002B2C  0E00               	movlw	0
 11716  002B2E  1A01               	xorwf	___ftneg@f1,f,c
 11717  002B30  0E00               	movlw	0
 11718  002B32  1A02               	xorwf	___ftneg@f1+1,f,c
 11719  002B34  0E80               	movlw	128
 11720  002B36  1A03               	xorwf	___ftneg@f1+2,f,c
 11721  002B38                     i2l775:
 11722  002B38  C001  F001         	movff	___ftneg@f1,?___ftneg
 11723  002B3C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 11724  002B40  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 11725  002B44  0012               	return		;funcret
 11726  002B46                     __end_of___ftneg:
 11727                           	opt stack 0
 11728                           pclatu	equ	0xFFB
 11729                           pclath	equ	0xFFA
 11730                           tblptru	equ	0xFF8
 11731                           tblptrh	equ	0xFF7
 11732                           tblptrl	equ	0xFF6
 11733                           tablat	equ	0xFF5
 11734                           prodh	equ	0xFF4
 11735                           prodl	equ	0xFF3
 11736                           intcon	equ	0xFF2
 11737                           intcon2	equ	0xFF1
 11738                           intcon3	equ	0xFF0
 11739                           postinc0	equ	0xFEE
 11740                           fsr0h	equ	0xFEA
 11741                           fsr0l	equ	0xFE9
 11742                           wreg	equ	0xFE8
 11743                           fsr1h	equ	0xFE2
 11744                           fsr1l	equ	0xFE1
 11745                           indf2	equ	0xFDF
 11746                           postinc2	equ	0xFDE
 11747                           postdec2	equ	0xFDD
 11748                           fsr2h	equ	0xFDA
 11749                           fsr2l	equ	0xFD9
 11750                           status	equ	0xFD8
 11751                           
 11752 ;; *************** function ___ftdiv *****************
 11753 ;; Defined at:
 11754 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11755 ;; Parameters:    Size  Location     Type
 11756 ;;  f1              3    8[COMRAM] float 
 11757 ;;  f2              3   11[COMRAM] float 
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;  f3              3   18[COMRAM] float 
 11760 ;;  sign            1   22[COMRAM] unsigned char 
 11761 ;;  exp             1   21[COMRAM] unsigned char 
 11762 ;;  cntr            1   17[COMRAM] unsigned char 
 11763 ;; Return value:  Size  Location     Type
 11764 ;;                  3    8[COMRAM] float 
 11765 ;; Registers used:
 11766 ;;		wreg, status,2, status,0, cstack
 11767 ;; Tracked objects:
 11768 ;;		On entry : 0/0
 11769 ;;		On exit  : 0/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11772 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11773 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11774 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11775 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11776 ;;Total ram usage:       15 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    1
 11779 ;; This function calls:
 11780 ;;		___ftpack
 11781 ;; This function is called by:
 11782 ;;		_exp
 11783 ;; This function uses a non-reentrant model
 11784 ;;
 11785                           
 11786                           	psect	text60
 11787  001A5E                     __ptext60:
 11788                           	opt stack 0
 11789  001A5E                     ___ftdiv:
 11790                           	opt stack 21
 11791                           
 11792                           ;incstack = 0
 11793  001A5E  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 11794  001A62  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 11795  001A64  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 11796  001A66  340A               	rlcf	___ftdiv@f1+1,w,c
 11797  001A68  360F               	rlcf	??___ftdiv& (0+255),f,c
 11798  001A6A  E301               	bnc	u260_41
 11799  001A6C  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 11800  001A6E                     u260_41:
 11801  001A6E  500F               	movf	??___ftdiv,w,c
 11802  001A70  6E16               	movwf	___ftdiv@exp,c
 11803  001A72  5016               	movf	___ftdiv@exp,w,c
 11804  001A74  A4D8               	btfss	status,2,c
 11805  001A76  D007               	goto	i2l3294
 11806  001A78  0E00               	movlw	0
 11807  001A7A  6E09               	movwf	?___ftdiv,c
 11808  001A7C  0E00               	movlw	0
 11809  001A7E  6E0A               	movwf	?___ftdiv+1,c
 11810  001A80  0E00               	movlw	0
 11811  001A82  6E0B               	movwf	?___ftdiv+2,c
 11812  001A84  0012               	return	
 11813  001A86                     i2l3294:
 11814  001A86  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 11815  001A8A  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 11816  001A8C  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 11817  001A8E  340D               	rlcf	___ftdiv@f2+1,w,c
 11818  001A90  360F               	rlcf	??___ftdiv& (0+255),f,c
 11819  001A92  E301               	bnc	u262_41
 11820  001A94  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 11821  001A96                     u262_41:
 11822  001A96  500F               	movf	??___ftdiv,w,c
 11823  001A98  6E17               	movwf	___ftdiv@sign,c
 11824  001A9A  5017               	movf	___ftdiv@sign,w,c
 11825  001A9C  A4D8               	btfss	status,2,c
 11826  001A9E  D007               	goto	i2l3300
 11827  001AA0  0E00               	movlw	0
 11828  001AA2  6E09               	movwf	?___ftdiv,c
 11829  001AA4  0E00               	movlw	0
 11830  001AA6  6E0A               	movwf	?___ftdiv+1,c
 11831  001AA8  0E00               	movlw	0
 11832  001AAA  6E0B               	movwf	?___ftdiv+2,c
 11833  001AAC  0012               	return	
 11834  001AAE                     i2l3300:
 11835  001AAE  0E00               	movlw	0
 11836  001AB0  6E13               	movwf	___ftdiv@f3,c
 11837  001AB2  0E00               	movlw	0
 11838  001AB4  6E14               	movwf	___ftdiv@f3+1,c
 11839  001AB6  0E00               	movlw	0
 11840  001AB8  6E15               	movwf	___ftdiv@f3+2,c
 11841  001ABA  5017               	movf	___ftdiv@sign,w,c
 11842  001ABC  0F89               	addlw	137
 11843  001ABE  5E16               	subwf	___ftdiv@exp,f,c
 11844  001AC0  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 11845  001AC4  500E               	movf	___ftdiv@f2+2,w,c
 11846  001AC6  1A17               	xorwf	___ftdiv@sign,f,c
 11847  001AC8  0E80               	movlw	128
 11848  001ACA  1617               	andwf	___ftdiv@sign,f,c
 11849  001ACC  8E0A               	bsf	___ftdiv@f1+1,7,c
 11850  001ACE  0EFF               	movlw	255
 11851  001AD0  1609               	andwf	___ftdiv@f1,f,c
 11852  001AD2  0EFF               	movlw	255
 11853  001AD4  160A               	andwf	___ftdiv@f1+1,f,c
 11854  001AD6  0E00               	movlw	0
 11855  001AD8  160B               	andwf	___ftdiv@f1+2,f,c
 11856  001ADA  8E0D               	bsf	___ftdiv@f2+1,7,c
 11857  001ADC  0EFF               	movlw	255
 11858  001ADE  160C               	andwf	___ftdiv@f2,f,c
 11859  001AE0  0EFF               	movlw	255
 11860  001AE2  160D               	andwf	___ftdiv@f2+1,f,c
 11861  001AE4  0E00               	movlw	0
 11862  001AE6  160E               	andwf	___ftdiv@f2+2,f,c
 11863  001AE8  0E18               	movlw	24
 11864  001AEA  6E12               	movwf	___ftdiv@cntr,c
 11865  001AEC                     i2l3320:
 11866  001AEC  90D8               	bcf	status,0,c
 11867  001AEE  3613               	rlcf	___ftdiv@f3,f,c
 11868  001AF0  3614               	rlcf	___ftdiv@f3+1,f,c
 11869  001AF2  3615               	rlcf	___ftdiv@f3+2,f,c
 11870  001AF4  500C               	movf	___ftdiv@f2,w,c
 11871  001AF6  5C09               	subwf	___ftdiv@f1,w,c
 11872  001AF8  500D               	movf	___ftdiv@f2+1,w,c
 11873  001AFA  580A               	subwfb	___ftdiv@f1+1,w,c
 11874  001AFC  500E               	movf	___ftdiv@f2+2,w,c
 11875  001AFE  580B               	subwfb	___ftdiv@f1+2,w,c
 11876  001B00  A0D8               	btfss	status,0,c
 11877  001B02  D007               	goto	i2l753
 11878  001B04  500C               	movf	___ftdiv@f2,w,c
 11879  001B06  5E09               	subwf	___ftdiv@f1,f,c
 11880  001B08  500D               	movf	___ftdiv@f2+1,w,c
 11881  001B0A  5A0A               	subwfb	___ftdiv@f1+1,f,c
 11882  001B0C  500E               	movf	___ftdiv@f2+2,w,c
 11883  001B0E  5A0B               	subwfb	___ftdiv@f1+2,f,c
 11884  001B10  8013               	bsf	___ftdiv@f3,0,c
 11885  001B12                     i2l753:
 11886  001B12  90D8               	bcf	status,0,c
 11887  001B14  3609               	rlcf	___ftdiv@f1,f,c
 11888  001B16  360A               	rlcf	___ftdiv@f1+1,f,c
 11889  001B18  360B               	rlcf	___ftdiv@f1+2,f,c
 11890  001B1A  2E12               	decfsz	___ftdiv@cntr,f,c
 11891  001B1C  D7E7               	goto	i2l3320
 11892  001B1E  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 11893  001B22  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11894  001B26  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11895  001B2A  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 11896  001B2E  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 11897  001B32  ECE2  F010         	call	___ftpack	;wreg free
 11898  001B36  C001  F009         	movff	?___ftpack,?___ftdiv
 11899  001B3A  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 11900  001B3E  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 11901  001B42  0012               	return	
 11902  001B44                     __end_of___ftdiv:
 11903                           	opt stack 0
 11904                           pclatu	equ	0xFFB
 11905                           pclath	equ	0xFFA
 11906                           tblptru	equ	0xFF8
 11907                           tblptrh	equ	0xFF7
 11908                           tblptrl	equ	0xFF6
 11909                           tablat	equ	0xFF5
 11910                           prodh	equ	0xFF4
 11911                           prodl	equ	0xFF3
 11912                           intcon	equ	0xFF2
 11913                           intcon2	equ	0xFF1
 11914                           intcon3	equ	0xFF0
 11915                           postinc0	equ	0xFEE
 11916                           fsr0h	equ	0xFEA
 11917                           fsr0l	equ	0xFE9
 11918                           wreg	equ	0xFE8
 11919                           fsr1h	equ	0xFE2
 11920                           fsr1l	equ	0xFE1
 11921                           indf2	equ	0xFDF
 11922                           postinc2	equ	0xFDE
 11923                           postdec2	equ	0xFDD
 11924                           fsr2h	equ	0xFDA
 11925                           fsr2l	equ	0xFD9
 11926                           status	equ	0xFD8
 11927                           
 11928 ;; *************** function ___awtoft *****************
 11929 ;; Defined at:
 11930 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11931 ;; Parameters:    Size  Location     Type
 11932 ;;  c               2    8[COMRAM] int 
 11933 ;; Auto vars:     Size  Location     Type
 11934 ;;  sign            1   11[COMRAM] unsigned char 
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  3    8[COMRAM] float 
 11937 ;; Registers used:
 11938 ;;		wreg, status,2, status,0, cstack
 11939 ;; Tracked objects:
 11940 ;;		On entry : 0/0
 11941 ;;		On exit  : 0/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11944 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11947 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11948 ;;Total ram usage:        4 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    1
 11951 ;; This function calls:
 11952 ;;		___ftpack
 11953 ;; This function is called by:
 11954 ;;		_dec_to_hex
 11955 ;;		_exp
 11956 ;;		_log
 11957 ;; This function uses a non-reentrant model
 11958 ;;
 11959                           
 11960                           	psect	text61
 11961  0029DA                     __ptext61:
 11962                           	opt stack 0
 11963  0029DA                     ___awtoft:
 11964                           	opt stack 21
 11965                           
 11966                           ;incstack = 0
 11967  0029DA  0E00               	movlw	0
 11968  0029DC  6E0C               	movwf	___awtoft@sign,c
 11969  0029DE  AE0A               	btfss	___awtoft@c+1,7,c
 11970  0029E0  D006               	goto	i2l3350
 11971  0029E2  6C09               	negf	___awtoft@c,c
 11972  0029E4  1E0A               	comf	___awtoft@c+1,f,c
 11973  0029E6  B0D8               	btfsc	status,0,c
 11974  0029E8  2A0A               	incf	___awtoft@c+1,f,c
 11975  0029EA  0E01               	movlw	1
 11976  0029EC  6E0C               	movwf	___awtoft@sign,c
 11977  0029EE                     i2l3350:
 11978  0029EE  C009  F001         	movff	___awtoft@c,___ftpack@arg
 11979  0029F2  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 11980  0029F6  6A03               	clrf	___ftpack@arg+2,c
 11981  0029F8  0E8E               	movlw	142
 11982  0029FA  6E04               	movwf	___ftpack@exp,c
 11983  0029FC  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 11984  002A00  ECE2  F010         	call	___ftpack	;wreg free
 11985  002A04  C001  F009         	movff	?___ftpack,?___awtoft
 11986  002A08  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 11987  002A0C  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 11988  002A10  0012               	return	
 11989  002A12                     __end_of___awtoft:
 11990                           	opt stack 0
 11991                           pclatu	equ	0xFFB
 11992                           pclath	equ	0xFFA
 11993                           tblptru	equ	0xFF8
 11994                           tblptrh	equ	0xFF7
 11995                           tblptrl	equ	0xFF6
 11996                           tablat	equ	0xFF5
 11997                           prodh	equ	0xFF4
 11998                           prodl	equ	0xFF3
 11999                           intcon	equ	0xFF2
 12000                           intcon2	equ	0xFF1
 12001                           intcon3	equ	0xFF0
 12002                           postinc0	equ	0xFEE
 12003                           fsr0h	equ	0xFEA
 12004                           fsr0l	equ	0xFE9
 12005                           wreg	equ	0xFE8
 12006                           fsr1h	equ	0xFE2
 12007                           fsr1l	equ	0xFE1
 12008                           indf2	equ	0xFDF
 12009                           postinc2	equ	0xFDE
 12010                           postdec2	equ	0xFDD
 12011                           fsr2h	equ	0xFDA
 12012                           fsr2l	equ	0xFD9
 12013                           status	equ	0xFD8
 12014                           
 12015 ;; *************** function ___lltoft *****************
 12016 ;; Defined at:
 12017 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 12018 ;; Parameters:    Size  Location     Type
 12019 ;;  c               4    8[COMRAM] unsigned long 
 12020 ;; Auto vars:     Size  Location     Type
 12021 ;;  exp             1   16[COMRAM] unsigned char 
 12022 ;; Return value:  Size  Location     Type
 12023 ;;                  3    8[COMRAM] float 
 12024 ;; Registers used:
 12025 ;;		wreg, status,2, status,0, cstack
 12026 ;; Tracked objects:
 12027 ;;		On entry : 0/0
 12028 ;;		On exit  : 0/0
 12029 ;;		Unchanged: 0/0
 12030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12031 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12033 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12034 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12035 ;;Total ram usage:        9 bytes
 12036 ;; Hardware stack levels used:    1
 12037 ;; Hardware stack levels required when called:    1
 12038 ;; This function calls:
 12039 ;;		___ftpack
 12040 ;; This function is called by:
 12041 ;;		_pow
 12042 ;; This function uses a non-reentrant model
 12043 ;;
 12044                           
 12045                           	psect	text62
 12046  0027C2                     __ptext62:
 12047                           	opt stack 0
 12048  0027C2                     ___lltoft:
 12049                           	opt stack 22
 12050                           
 12051                           ;incstack = 0
 12052  0027C2  0E8E               	movlw	142
 12053  0027C4  6E11               	movwf	___lltoft@exp,c
 12054  0027C6  D006               	goto	i2l3476
 12055  0027C8                     i2l3474:
 12056  0027C8  90D8               	bcf	status,0,c
 12057  0027CA  320C               	rrcf	___lltoft@c+3,f,c
 12058  0027CC  320B               	rrcf	___lltoft@c+2,f,c
 12059  0027CE  320A               	rrcf	___lltoft@c+1,f,c
 12060  0027D0  3209               	rrcf	___lltoft@c,f,c
 12061  0027D2  2A11               	incf	___lltoft@exp,f,c
 12062  0027D4                     i2l3476:
 12063  0027D4  0E00               	movlw	0
 12064  0027D6  1409               	andwf	___lltoft@c,w,c
 12065  0027D8  6E0D               	movwf	??___lltoft& (0+255),c
 12066  0027DA  0E00               	movlw	0
 12067  0027DC  140A               	andwf	___lltoft@c+1,w,c
 12068  0027DE  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12069  0027E0  0E00               	movlw	0
 12070  0027E2  140B               	andwf	___lltoft@c+2,w,c
 12071  0027E4  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12072  0027E6  0EFF               	movlw	255
 12073  0027E8  140C               	andwf	___lltoft@c+3,w,c
 12074  0027EA  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12075  0027EC  500D               	movf	??___lltoft,w,c
 12076  0027EE  100E               	iorwf	??___lltoft+1,w,c
 12077  0027F0  100F               	iorwf	??___lltoft+2,w,c
 12078  0027F2  1010               	iorwf	??___lltoft+3,w,c
 12079  0027F4  A4D8               	btfss	status,2,c
 12080  0027F6  D7E8               	goto	i2l3474
 12081  0027F8  C009  F001         	movff	___lltoft@c,___ftpack@arg
 12082  0027FC  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 12083  002800  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 12084  002804  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 12085  002808  0E00               	movlw	0
 12086  00280A  6E05               	movwf	___ftpack@sign,c
 12087  00280C  ECE2  F010         	call	___ftpack	;wreg free
 12088  002810  C001  F009         	movff	?___ftpack,?___lltoft
 12089  002814  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 12090  002818  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 12091  00281C  0012               	return	
 12092  00281E                     __end_of___lltoft:
 12093                           	opt stack 0
 12094                           pclatu	equ	0xFFB
 12095                           pclath	equ	0xFFA
 12096                           tblptru	equ	0xFF8
 12097                           tblptrh	equ	0xFF7
 12098                           tblptrl	equ	0xFF6
 12099                           tablat	equ	0xFF5
 12100                           prodh	equ	0xFF4
 12101                           prodl	equ	0xFF3
 12102                           intcon	equ	0xFF2
 12103                           intcon2	equ	0xFF1
 12104                           intcon3	equ	0xFF0
 12105                           postinc0	equ	0xFEE
 12106                           fsr0h	equ	0xFEA
 12107                           fsr0l	equ	0xFE9
 12108                           wreg	equ	0xFE8
 12109                           fsr1h	equ	0xFE2
 12110                           fsr1l	equ	0xFE1
 12111                           indf2	equ	0xFDF
 12112                           postinc2	equ	0xFDE
 12113                           postdec2	equ	0xFDD
 12114                           fsr2h	equ	0xFDA
 12115                           fsr2l	equ	0xFD9
 12116                           status	equ	0xFD8
 12117                           
 12118 ;; *************** function ___ftpack *****************
 12119 ;; Defined at:
 12120 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12121 ;; Parameters:    Size  Location     Type
 12122 ;;  arg             3    0[COMRAM] unsigned um
 12123 ;;  exp             1    3[COMRAM] unsigned char 
 12124 ;;  sign            1    4[COMRAM] unsigned char 
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;		None
 12127 ;; Return value:  Size  Location     Type
 12128 ;;                  3    0[COMRAM] float 
 12129 ;; Registers used:
 12130 ;;		wreg, status,2, status,0
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12136 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12138 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12139 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12140 ;;Total ram usage:        8 bytes
 12141 ;; Hardware stack levels used:    1
 12142 ;; This function calls:
 12143 ;;		Nothing
 12144 ;; This function is called by:
 12145 ;;		___altoft
 12146 ;;		___awtoft
 12147 ;;		___ftadd
 12148 ;;		___ftdiv
 12149 ;;		___ftmul
 12150 ;;		___lltoft
 12151 ;; This function uses a non-reentrant model
 12152 ;;
 12153                           
 12154                           	psect	text63
 12155  0021C4                     __ptext63:
 12156                           	opt stack 0
 12157  0021C4                     ___ftpack:
 12158                           	opt stack 20
 12159                           
 12160                           ;incstack = 0
 12161  0021C4  5004               	movf	___ftpack@exp,w,c
 12162  0021C6  B4D8               	btfsc	status,2,c
 12163  0021C8  D005               	goto	i2l3010
 12164  0021CA  5001               	movf	___ftpack@arg,w,c
 12165  0021CC  1002               	iorwf	___ftpack@arg+1,w,c
 12166  0021CE  1003               	iorwf	___ftpack@arg+2,w,c
 12167  0021D0  A4D8               	btfss	status,2,c
 12168  0021D2  D00C               	goto	i2l3016
 12169  0021D4                     i2l3010:
 12170  0021D4  0E00               	movlw	0
 12171  0021D6  6E01               	movwf	?___ftpack,c
 12172  0021D8  0E00               	movlw	0
 12173  0021DA  6E02               	movwf	?___ftpack+1,c
 12174  0021DC  0E00               	movlw	0
 12175  0021DE  6E03               	movwf	?___ftpack+2,c
 12176  0021E0  0012               	return	
 12177  0021E2                     i2l3014:
 12178  0021E2  2A04               	incf	___ftpack@exp,f,c
 12179  0021E4  90D8               	bcf	status,0,c
 12180  0021E6  3203               	rrcf	___ftpack@arg+2,f,c
 12181  0021E8  3202               	rrcf	___ftpack@arg+1,f,c
 12182  0021EA  3201               	rrcf	___ftpack@arg,f,c
 12183  0021EC                     i2l3016:
 12184  0021EC  0E00               	movlw	0
 12185  0021EE  1401               	andwf	___ftpack@arg,w,c
 12186  0021F0  6E06               	movwf	??___ftpack& (0+255),c
 12187  0021F2  0E00               	movlw	0
 12188  0021F4  1402               	andwf	___ftpack@arg+1,w,c
 12189  0021F6  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12190  0021F8  0EFE               	movlw	254
 12191  0021FA  1403               	andwf	___ftpack@arg+2,w,c
 12192  0021FC  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12193  0021FE  5006               	movf	??___ftpack,w,c
 12194  002200  1007               	iorwf	??___ftpack+1,w,c
 12195  002202  1008               	iorwf	??___ftpack+2,w,c
 12196  002204  B4D8               	btfsc	status,2,c
 12197  002206  D00C               	goto	i2l3022
 12198  002208  D7EC               	goto	i2l3014
 12199  00220A                     i2l3018:
 12200  00220A  2A04               	incf	___ftpack@exp,f,c
 12201  00220C  0E01               	movlw	1
 12202  00220E  2601               	addwf	___ftpack@arg,f,c
 12203  002210  0E00               	movlw	0
 12204  002212  2202               	addwfc	___ftpack@arg+1,f,c
 12205  002214  0E00               	movlw	0
 12206  002216  2203               	addwfc	___ftpack@arg+2,f,c
 12207  002218  90D8               	bcf	status,0,c
 12208  00221A  3203               	rrcf	___ftpack@arg+2,f,c
 12209  00221C  3202               	rrcf	___ftpack@arg+1,f,c
 12210  00221E  3201               	rrcf	___ftpack@arg,f,c
 12211  002220                     i2l3022:
 12212  002220  0E00               	movlw	0
 12213  002222  1401               	andwf	___ftpack@arg,w,c
 12214  002224  6E06               	movwf	??___ftpack& (0+255),c
 12215  002226  0E00               	movlw	0
 12216  002228  1402               	andwf	___ftpack@arg+1,w,c
 12217  00222A  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12218  00222C  0EFF               	movlw	255
 12219  00222E  1403               	andwf	___ftpack@arg+2,w,c
 12220  002230  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12221  002232  5006               	movf	??___ftpack,w,c
 12222  002234  1007               	iorwf	??___ftpack+1,w,c
 12223  002236  1008               	iorwf	??___ftpack+2,w,c
 12224  002238  B4D8               	btfsc	status,2,c
 12225  00223A  D006               	goto	i2l3026
 12226  00223C  D7E6               	goto	i2l3018
 12227  00223E                     i2l3024:
 12228  00223E  0604               	decf	___ftpack@exp,f,c
 12229  002240  90D8               	bcf	status,0,c
 12230  002242  3601               	rlcf	___ftpack@arg,f,c
 12231  002244  3602               	rlcf	___ftpack@arg+1,f,c
 12232  002246  3603               	rlcf	___ftpack@arg+2,f,c
 12233  002248                     i2l3026:
 12234  002248  BE02               	btfsc	___ftpack@arg+1,7,c
 12235  00224A  D003               	goto	i2l695
 12236  00224C  0E02               	movlw	2
 12237  00224E  6004               	cpfslt	___ftpack@exp,c
 12238  002250  D7F6               	goto	i2l3024
 12239  002252                     i2l695:
 12240  002252  A004               	btfss	___ftpack@exp,0,c
 12241  002254  9E02               	bcf	___ftpack@arg+1,7,c
 12242  002256  90D8               	bcf	status,0,c
 12243  002258  3204               	rrcf	___ftpack@exp,f,c
 12244  00225A  5004               	movf	___ftpack@exp,w,c
 12245  00225C  1203               	iorwf	___ftpack@arg+2,f,c
 12246  00225E  5005               	movf	___ftpack@sign,w,c
 12247  002260  A4D8               	btfss	status,2,c
 12248  002262  8E03               	bsf	___ftpack@arg+2,7,c
 12249  002264  C001  F001         	movff	___ftpack@arg,?___ftpack
 12250  002268  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 12251  00226C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 12252  002270  0012               	return	
 12253  002272                     __end_of___ftpack:
 12254                           	opt stack 0
 12255                           pclatu	equ	0xFFB
 12256                           pclath	equ	0xFFA
 12257                           tblptru	equ	0xFF8
 12258                           tblptrh	equ	0xFF7
 12259                           tblptrl	equ	0xFF6
 12260                           tablat	equ	0xFF5
 12261                           prodh	equ	0xFF4
 12262                           prodl	equ	0xFF3
 12263                           intcon	equ	0xFF2
 12264                           intcon2	equ	0xFF1
 12265                           intcon3	equ	0xFF0
 12266                           postinc0	equ	0xFEE
 12267                           fsr0h	equ	0xFEA
 12268                           fsr0l	equ	0xFE9
 12269                           wreg	equ	0xFE8
 12270                           fsr1h	equ	0xFE2
 12271                           fsr1l	equ	0xFE1
 12272                           indf2	equ	0xFDF
 12273                           postinc2	equ	0xFDE
 12274                           postdec2	equ	0xFDD
 12275                           fsr2h	equ	0xFDA
 12276                           fsr2l	equ	0xFD9
 12277                           status	equ	0xFD8
 12278                           
 12279 ;; *************** function ___awdiv *****************
 12280 ;; Defined at:
 12281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12282 ;; Parameters:    Size  Location     Type
 12283 ;;  dividend        2    0[COMRAM] int 
 12284 ;;  divisor         2    2[COMRAM] int 
 12285 ;; Auto vars:     Size  Location     Type
 12286 ;;  quotient        2    6[COMRAM] int 
 12287 ;;  sign            1    5[COMRAM] unsigned char 
 12288 ;;  counter         1    4[COMRAM] unsigned char 
 12289 ;; Return value:  Size  Location     Type
 12290 ;;                  2    0[COMRAM] int 
 12291 ;; Registers used:
 12292 ;;		wreg, status,2, status,0
 12293 ;; Tracked objects:
 12294 ;;		On entry : 0/0
 12295 ;;		On exit  : 0/0
 12296 ;;		Unchanged: 0/0
 12297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12298 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12299 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12301 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12302 ;;Total ram usage:        8 bytes
 12303 ;; Hardware stack levels used:    1
 12304 ;; This function calls:
 12305 ;;		Nothing
 12306 ;; This function is called by:
 12307 ;;		_dec_to_hex
 12308 ;;		_servo_rotate1
 12309 ;;		_servo_rotate2
 12310 ;; This function uses a non-reentrant model
 12311 ;;
 12312                           
 12313                           	psect	text64
 12314  0024C4                     __ptext64:
 12315                           	opt stack 0
 12316  0024C4                     ___awdiv:
 12317                           	opt stack 24
 12318                           
 12319                           ;incstack = 0
 12320  0024C4  0E00               	movlw	0
 12321  0024C6  6E06               	movwf	___awdiv@sign,c
 12322  0024C8  AE04               	btfss	___awdiv@divisor+1,7,c
 12323  0024CA  D006               	goto	i2l3822
 12324  0024CC  6C03               	negf	___awdiv@divisor,c
 12325  0024CE  1E04               	comf	___awdiv@divisor+1,f,c
 12326  0024D0  B0D8               	btfsc	status,0,c
 12327  0024D2  2A04               	incf	___awdiv@divisor+1,f,c
 12328  0024D4  0E01               	movlw	1
 12329  0024D6  6E06               	movwf	___awdiv@sign,c
 12330  0024D8                     i2l3822:
 12331  0024D8  AE02               	btfss	___awdiv@dividend+1,7,c
 12332  0024DA  D006               	goto	i2l3828
 12333  0024DC  6C01               	negf	___awdiv@dividend,c
 12334  0024DE  1E02               	comf	___awdiv@dividend+1,f,c
 12335  0024E0  B0D8               	btfsc	status,0,c
 12336  0024E2  2A02               	incf	___awdiv@dividend+1,f,c
 12337  0024E4  0E01               	movlw	1
 12338  0024E6  1A06               	xorwf	___awdiv@sign,f,c
 12339  0024E8                     i2l3828:
 12340  0024E8  0E00               	movlw	0
 12341  0024EA  6E08               	movwf	___awdiv@quotient+1,c
 12342  0024EC  0E00               	movlw	0
 12343  0024EE  6E07               	movwf	___awdiv@quotient,c
 12344  0024F0  5003               	movf	___awdiv@divisor,w,c
 12345  0024F2  1004               	iorwf	___awdiv@divisor+1,w,c
 12346  0024F4  B4D8               	btfsc	status,2,c
 12347  0024F6  D01C               	goto	i2l3850
 12348  0024F8  0E01               	movlw	1
 12349  0024FA  6E05               	movwf	___awdiv@counter,c
 12350  0024FC  D004               	goto	i2l3836
 12351  0024FE                     i2l3834:
 12352  0024FE  90D8               	bcf	status,0,c
 12353  002500  3603               	rlcf	___awdiv@divisor,f,c
 12354  002502  3604               	rlcf	___awdiv@divisor+1,f,c
 12355  002504  2A05               	incf	___awdiv@counter,f,c
 12356  002506                     i2l3836:
 12357  002506  AE04               	btfss	___awdiv@divisor+1,7,c
 12358  002508  D7FA               	goto	i2l3834
 12359  00250A                     i2l3838:
 12360  00250A  90D8               	bcf	status,0,c
 12361  00250C  3607               	rlcf	___awdiv@quotient,f,c
 12362  00250E  3608               	rlcf	___awdiv@quotient+1,f,c
 12363  002510  5003               	movf	___awdiv@divisor,w,c
 12364  002512  5C01               	subwf	___awdiv@dividend,w,c
 12365  002514  5004               	movf	___awdiv@divisor+1,w,c
 12366  002516  5802               	subwfb	___awdiv@dividend+1,w,c
 12367  002518  A0D8               	btfss	status,0,c
 12368  00251A  D005               	goto	i2l3846
 12369  00251C  5003               	movf	___awdiv@divisor,w,c
 12370  00251E  5E01               	subwf	___awdiv@dividend,f,c
 12371  002520  5004               	movf	___awdiv@divisor+1,w,c
 12372  002522  5A02               	subwfb	___awdiv@dividend+1,f,c
 12373  002524  8007               	bsf	___awdiv@quotient,0,c
 12374  002526                     i2l3846:
 12375  002526  90D8               	bcf	status,0,c
 12376  002528  3204               	rrcf	___awdiv@divisor+1,f,c
 12377  00252A  3203               	rrcf	___awdiv@divisor,f,c
 12378  00252C  2E05               	decfsz	___awdiv@counter,f,c
 12379  00252E  D7ED               	goto	i2l3838
 12380  002530                     i2l3850:
 12381  002530  5006               	movf	___awdiv@sign,w,c
 12382  002532  B4D8               	btfsc	status,2,c
 12383  002534  D004               	goto	i2l3854
 12384  002536  6C07               	negf	___awdiv@quotient,c
 12385  002538  1E08               	comf	___awdiv@quotient+1,f,c
 12386  00253A  B0D8               	btfsc	status,0,c
 12387  00253C  2A08               	incf	___awdiv@quotient+1,f,c
 12388  00253E                     i2l3854:
 12389  00253E  C007  F001         	movff	___awdiv@quotient,?___awdiv
 12390  002542  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 12391  002546  0012               	return	
 12392  002548                     __end_of___awdiv:
 12393                           	opt stack 0
 12394                           pclatu	equ	0xFFB
 12395                           pclath	equ	0xFFA
 12396                           tblptru	equ	0xFF8
 12397                           tblptrh	equ	0xFF7
 12398                           tblptrl	equ	0xFF6
 12399                           tablat	equ	0xFF5
 12400                           prodh	equ	0xFF4
 12401                           prodl	equ	0xFF3
 12402                           intcon	equ	0xFF2
 12403                           intcon2	equ	0xFF1
 12404                           intcon3	equ	0xFF0
 12405                           postinc0	equ	0xFEE
 12406                           fsr0h	equ	0xFEA
 12407                           fsr0l	equ	0xFE9
 12408                           wreg	equ	0xFE8
 12409                           fsr1h	equ	0xFE2
 12410                           fsr1l	equ	0xFE1
 12411                           indf2	equ	0xFDF
 12412                           postinc2	equ	0xFDE
 12413                           postdec2	equ	0xFDD
 12414                           fsr2h	equ	0xFDA
 12415                           fsr2l	equ	0xFD9
 12416                           status	equ	0xFD8
 12417                           pclatu	equ	0xFFB
 12418                           pclath	equ	0xFFA
 12419                           tblptru	equ	0xFF8
 12420                           tblptrh	equ	0xFF7
 12421                           tblptrl	equ	0xFF6
 12422                           tablat	equ	0xFF5
 12423                           prodh	equ	0xFF4
 12424                           prodl	equ	0xFF3
 12425                           intcon	equ	0xFF2
 12426                           intcon2	equ	0xFF1
 12427                           intcon3	equ	0xFF0
 12428                           postinc0	equ	0xFEE
 12429                           fsr0h	equ	0xFEA
 12430                           fsr0l	equ	0xFE9
 12431                           wreg	equ	0xFE8
 12432                           fsr1h	equ	0xFE2
 12433                           fsr1l	equ	0xFE1
 12434                           indf2	equ	0xFDF
 12435                           postinc2	equ	0xFDE
 12436                           postdec2	equ	0xFDD
 12437                           fsr2h	equ	0xFDA
 12438                           fsr2l	equ	0xFD9
 12439                           status	equ	0xFD8
 12440                           
 12441                           	psect	rparam
 12442  0000                     pclatu	equ	0xFFB
 12443                           pclath	equ	0xFFA
 12444                           tblptru	equ	0xFF8
 12445                           tblptrh	equ	0xFF7
 12446                           tblptrl	equ	0xFF6
 12447                           tablat	equ	0xFF5
 12448                           prodh	equ	0xFF4
 12449                           prodl	equ	0xFF3
 12450                           intcon	equ	0xFF2
 12451                           intcon2	equ	0xFF1
 12452                           intcon3	equ	0xFF0
 12453                           postinc0	equ	0xFEE
 12454                           fsr0h	equ	0xFEA
 12455                           fsr0l	equ	0xFE9
 12456                           wreg	equ	0xFE8
 12457                           fsr1h	equ	0xFE2
 12458                           fsr1l	equ	0xFE1
 12459                           indf2	equ	0xFDF
 12460                           postinc2	equ	0xFDE
 12461                           postdec2	equ	0xFDD
 12462                           fsr2h	equ	0xFDA
 12463                           fsr2l	equ	0xFD9
 12464                           status	equ	0xFD8
 12465                           
 12466                           	psect	temp
 12467  00007E                     btemp:
 12468                           	opt stack 0
 12469  00007E                     	ds	1
 12470  0000                     int$flags	set	btemp
 12471                           pclatu	equ	0xFFB
 12472                           pclath	equ	0xFFA
 12473                           tblptru	equ	0xFF8
 12474                           tblptrh	equ	0xFF7
 12475                           tblptrl	equ	0xFF6
 12476                           tablat	equ	0xFF5
 12477                           prodh	equ	0xFF4
 12478                           prodl	equ	0xFF3
 12479                           intcon	equ	0xFF2
 12480                           intcon2	equ	0xFF1
 12481                           intcon3	equ	0xFF0
 12482                           postinc0	equ	0xFEE
 12483                           fsr0h	equ	0xFEA
 12484                           fsr0l	equ	0xFE9
 12485                           wreg	equ	0xFE8
 12486                           fsr1h	equ	0xFE2
 12487                           fsr1l	equ	0xFE1
 12488                           indf2	equ	0xFDF
 12489                           postinc2	equ	0xFDE
 12490                           postdec2	equ	0xFDD
 12491                           fsr2h	equ	0xFDA
 12492                           fsr2l	equ	0xFD9
 12493                           status	equ	0xFD8


Data Sizes:
    Strings     506
    Constant    99
    Data        2
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     53     107
    BANK1           256      0      22
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_30(CODE[15]), STR_29(CODE[16]), STR_28(CODE[28]), STR_27(CODE[25]), 
		 -> STR_26(CODE[24]), STR_25(CODE[23]), STR_24(CODE[18]), STR_23(CODE[23]), 
		 -> STR_22(CODE[10]), STR_21(CODE[18]), STR_20(CODE[18]), STR_19(CODE[18]), 
		 -> STR_18(CODE[18]), STR_17(CODE[18]), STR_16(CODE[18]), STR_15(CODE[18]), 
		 -> STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[23]), 
		 -> STR_10(CODE[23]), STR_9(CODE[7]), STR_8(CODE[7]), STR_7(CODE[7]), 
		 -> STR_6(CODE[14]), STR_5(CODE[14]), STR_4(CODE[24]), STR_3(CODE[24]), 
		 -> STR_2(CODE[24]), STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2_I2C_ColorSens_Init->i2_I2C_Master_Write
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   44662
                                             52 BANK0      1     1      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    7479
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    4832
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    7479
                                             50 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    14    14      0    2647
                                             19 BANK0     14    14      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    4832
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    7193
                                             50 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    4832
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    5256
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4697
                                             28 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1001
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   1     1      0    2248
                                             19 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    2248
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   76343
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
               i2_I2C_ColorSens_Init
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  14    14      0    1103
                                              3 COMRAM    14    14      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    2329
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) i2_I2C_ColorSens_Init                                 1     1      0     724
                                              3 COMRAM     1     1      0
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2     289
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     837
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     724
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69991
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58195
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   19010
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31578
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8387
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     521
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     684
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
   i2_I2C_ColorSens_Init
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      16       7        8.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     35      6B       5       83.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FE      34        0.0%
DATA                 0      0      FE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 20 00:37:53 2017

                 ___altoft@exp 003F             i2_I2C_Master_Start 2C28             i2_I2C_Master_Write 2C06  
                ___altoft@sign 0040                             l34 2B9E                 ?_emergencystop 0001  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0092             i2___lwdiv@dividend 0001  
                  __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                    __CFG_OSC$HS 000000  
                 ___ftadd@exp1 0027                   ___ftadd@exp2 0026                   ___ftadd@sign 0025  
                          l355 2B66                            l398 156C                            l825 21B2  
                          l878 25B6                            l888 26F8                            _GIE 007F97  
                 __CFG_CPB$OFF 000000                            _PEN 007E2A                   __CFG_CPD$OFF 000000  
                          _SEN 007E28                            _PSA 007EAB            ?i2_I2C_Master_Start 0001  
          ?i2_I2C_Master_Write 0002                            _exp 0AFC                            _log 156E  
                          _isr 0008                            _pow 1024                   ___awmod@sign 0095  
                          prod 000FF3                            wreg 000FE8                   ?_bottle_time 0001  
                 __CFG_LVP$OFF 000000                   ___ftdiv@cntr 0012                   ___ftdiv@sign 0017  
                 __CFG_WDT$OFF 000000                           l4120 204A                           l4104 1BD6  
                         l4202 0F44                           l3500 25A8                           l4220 0FE0  
                         l4132 208A                           l4140 20AC                           l3510 26C0  
                         l4214 0FC0                           l4126 206A                           l4142 20D4  
                         l3512 26C6                           l4208 0F82                           l3516 26EA  
                         l3508 26B4                           l3444 2AA4                           l4164 1E1A  
                         l3620 1494                           l4092 1B78                           l3462 2ACC  
                         l4190 0EC8                           l4174 1E44                           l3630 14EE  
                         l3704 05BE                           l3720 05FA                           l4184 0E92  
                         l4168 1E24                           l3616 147E                           l3490 2572  
                         l3706 05C4                           l3722 0612                           l3642 0408  
                         l3634 1504                           l3626 14CC                           l4098 1BB6  
                         l3900 2136                           l3492 2578                           l3740 0690  
                         l3732 066C                           l3652 0438                           l4196 0F06  
                         l3902 2146                           l3734 0676                           l3646 041C  
                         l3912 21A0                           l3904 214C                           l3488 2566  
                         l3760 0738                           l3752 06D2                           l3728 0634  
                         l3672 04EE                           l3648 042E                           l3770 07A6  
                         l3746 06AC                           l3690 0582                           l3666 04E0  
                         l3674 0526                           l3658 0468                           l4570 1D84  
                         l3748 06B8                           l3756 06E6                           l3692 0588  
                         l3668 04E6                           l3772 07B2                           l4572 1D8A  
                         l4564 1D72                           l4580 1D9C                           l3870 229E  
                         l3758 06EC                           l3766 0786                           l3686 0566  
                         l4574 1D90                           l4566 1D78                           l4582 1DCA  
                         l3768 079E                           l4576 1D96                           l4568 1D7E  
                         l3890 230A                           l3882 22E8                           l3874 22B2  
                         l3866 228E                           l3876 22BE                           ?_exp 0049  
                         ?_log 0034                           l3878 22C4                           l3886 22F6  
                         ?_isr 0001                           ?_pow 0052             i2_read_colorsensor 1970  
                         STR_1 FE51                           STR_2 FE39                           STR_3 FE51  
                         STR_4 FE39                           STR_5 FFDF                           STR_6 FFD1  
                         STR_7 FFF7                           STR_8 FFF7                           STR_9 FFF7  
                         _T0CS 007EAD                           _LATA 000F89                           _LATB 000F8A  
                         _LATC 000F8B                           _LATD 000F8C                           _LATE 000F8D  
                         u4207 275C                           u3600 1B58                           u4217 11D4  
                         u4147 1DD2                           u4157 2878                           u4167 28B4  
                         u4177 2722                           u4187 272A                           u2780 2AA2  
                         u4197 2754                           u3595 2792                           _RCEN 007E2B  
                         i2l34 2BB2                           _TMR0 000FD6                           _RSEN 007E29  
                         _main 1D02                   ___ftpack@arg 0001                           _keys FDA1  
                 ___ftpack@exp 0004                           _time 00B5                           fsr0h 000FEA  
                         fsr1h 000FE2             i2___lwdiv@quotient 0005                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 007E                           exp@x 0049  
                         log@x 0034                           isr@i 0073           ??i2_I2C_Master_Start 0002  
         ??i2_I2C_Master_Write 0004                           pow@x 0052                           pow@y 0055  
                         prodh 000FF4                           prodl 000FF3                           start 000E  
          ?i2_read_colorsensor 0001                  __CFG_IESO$OFF 000000                __end_ofi2_putch 2BF0  
                __CFG_MCLRE$ON 000000                   ___ftmul@cntr 001A                   ___param_bank 000000  
                 ___ftmul@sign 001B                    i2_lcdNibble 28C0                  ?_bottle_count 0001  
                 ___fttol@exp1 0036                          ??_exp 004C                          ??_log 0037  
                 ___fttol@lval 0032                          ??_isr 0080                          ??_pow 0058  
                _eskacap_count 00CA               ?_I2C_Master_Init 009D               ?_I2C_Master_Read 0001  
             ?_I2C_Master_Wait 0001               ?_I2C_Master_Stop 0001                          ?_main 0001  
                        _ACKEN 007E2C                          _ACKDT 007E2D                __end_of___awdiv 2548  
              __end_of___ftadd 0E90                          STR_10 FEAF                          STR_11 FEC6  
                        STR_12 FFA1                          STR_20 FF49                          STR_13 FF90  
                        STR_21 FF6D                          STR_22 FFED                          STR_30 FFC2  
                        STR_14 FEEF                          STR_31 FF7F                          STR_15 FF13  
                        STR_23 FE98                          STR_16 FF01                          STR_24 FEDD  
                        STR_17 FF25                          STR_25 FE81                          STR_18 FF37  
                        STR_26 FE69                          STR_19 FF5B                          STR_27 FE20  
                        STR_28 FE04                __end_of___awmod 2314                          STR_29 FFB2  
              __end_of___ftdiv 1B44                __end_of___ftneg 2B46                __end_of___lldiv 21C4  
              __end_of___ftmul 1970                ___awdiv@divisor 0003                __end_of___ftsub 29DA  
              __end_of___fttol 187C                          _T0PS0 007EA8                          _T0PS1 007EA9  
                        _T0PS2 007EAA                __end_of___lwdiv 25C0                __end_of___lwmod 2702  
                        i2l270 0052                          i2l271 02C4                          i2l272 0064  
                        i2l363 234E                          i2l283 024A                          i2l268 02C8  
                        i2l366 2378                          i2l294 03BE                          i2l278 00EA  
                        i2l279 00F4                          i2l369 23A2                          i2l722 0D52  
                        i2l733 0E02                          i2l742 0E1E                          i2l718 0D28  
                        i2l910 105C                          i2l398 1A5C                          i2l753 1B12  
                        i2l915 118C                          i2l695 2252                          i2l775 2B38  
              ___awdiv@counter 0005                          i2l878 2866                          i2l888 2990  
         ??i2_read_colorsensor 0004                          _PORTB 000F81                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96                ??_servo_rotate0 0003                  __CFG_PWRT$OFF 000000  
                __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000              read_colorsensor@i 009F  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                   ___lltoft@exp 0011  
              __end_of_lcdInst 2BE4                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                        _nRBPU 007F8F                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                __end_of_initLCD 28C0                 __CFG_EBTRB$OFF 000000  
                   i2isdigit@c 0003                  ___awtoft@sign 000C                __end_of_dpowers FDBC  
                        _color 0076                          _floor 1C24                          _etime 00D0  
                        _ldexp 1F82                          _frexp 23A4                          _errno 00C6  
              __end_of_isdigit 2AD6                  ___ftpack@sign 0005                          _putch 2BC4  
                        _stime 00DA                          pclath 000FFA                          tablat 000FF5  
                _eskalbl_count 00CE                          pow@yi 005F                __end_of_timeset FDCB  
             __end_ofi2___wmul 2B22                __end_of_standby 1C24                          status 000FD8  
               __CFG_PBADEN$ON 000000                  i2printf@width 001E                    exp@exponent 004F  
             __end_ofi2_printf 0AFC             __size_ofi2___lwdiv 0052             __size_ofi2___lwmod 0042  
                  ldexp@newexp 0037                __initialization 290E                    log@exponent 0037  
           __size_ofi2_lcdInst 000C                ??_emergencystop 00B2                 ??_bottle_count 00B2  
                 __end_of_main 1DDE                   __end_of_keys FDB2                     i2printf@ap 0018  
           __size_ofi2_isdigit 001E   __end_ofi2_I2C_ColorSens_Init 1442                         ??_main 00B4  
                ___fttol@sign1 0031                  __activetblptr 000002              ?_I2C_Master_Start 0001  
            ?_I2C_Master_Write 0091                 servo_rotate0@i 0007                 servo_rotate0@j 0009  
           ??_I2C_Master_Start 0091                         _ADCON0 000FC2                         _ADCON1 000FC1  
           ??_I2C_Master_Write 0093                         ?_floor 0041                         ?_ldexp 0034  
                       ?_frexp 0001               __end_of___altoft 2638                         _T08BIT 007EAE  
             ___awdiv@dividend 0001                i2lcdNibble@data 0002               __end_of___awtoft 2A12  
                       ?_putch 0001               __end_of___ftpack 2272                i2lcdNibble@temp 0001  
             __end_of___lltoft 281E                         _INT0IE 007F94                         _INT1IE 007F83  
                       _INT1IF 007F80                         _INT2IE 007F84                         i2l1073 0BB2  
                       i2l3010 21D4                         i2l1074 0CD6                         i2l3100 0DCE  
                       i2l1084 1CF4                         i2l3022 2220                         i2l3014 21E2  
                       i2l3024 223E                         i2l3016 21EC                         i2l3200 17B4  
                       i2l3026 2248                         i2l3018 220A                         i2l3114 0E3A  
                       i2l3106 0DF0                         i2l3050 25E2                         i2l3300 1AAE  
                       i2l3124 0E6A                         i2l3108 0DFA                         i2l3140 18CC  
                       i2l3052 25EE                         i2l3134 18A4                         i2l3230 184E  
                       i2l3222 182A                         i2l3320 1AEC                         i2l3072 0D60  
                       i2l3232 1854                         i2l3066 0D36                         i2l3154 18FE  
                       i2l3218 181A                         i2l3402 1FE0                         i2l3164 1926  
                       i2l3180 2464                         i2l3236 186A                         i2l3228 1842  
                       i2l3350 29EE                         i2l3094 0DB2                         i2l3158 190E  
                       i2l3190 24C0                         i2l3414 2004                         i2l3096 0DBC  
                       i2l3088 0D90                         i2l3168 1936                         i2l3184 2494  
                       i2l3248 23CC                         i2l3098 0DC6                         i2l3338 29B0  
                       i2l3418 2010                         i2l4242 2674                         i2l3372 1C60  
                       i2l3532 15AC                         i2l4412 088A                         i2l4420 08C8  
                       i2l4404 082C                         i2l3294 1A86                         i2l3526 158A  
                       i2l4238 266C                         i2l4502 0A2E                         i2l4414 088E  
                       i2l3384 1EF0                         i2l3376 1C7A                         i2l3368 1C52  
                       i2l3560 0B84                         i2l4256 16A6                         i2l4248 2690  
                       i2l4280 233C                         i2l4504 0A34                         i2l4512 0ABE  
                       i2l4432 08FE                         i2l3474 27C8                         i2l3386 1F6C  
                       i2l3394 1F9A                         i2l3554 0B4C                         i2l3802 1108  
                       i2l4274 2324                         i2l4506 0A78                         i2l4514 0AD4  
                       i2l4450 0948                         i2l4418 0894                         i2l4362 19A4  
                       i2l3476 27D4                         i2l3548 0B14                         i2l4268 1776  
                       i2l4516 0ADA                         i2l4452 094C                         i2l4436 0918  
                       i2l4380 1A0E                         i2l4372 19E2                         i2l4700 038A  
                       i2l4612 00AC                         i2l3822 24D8                         i2l3582 0CAC  
                       i2l4286 2366                         i2l4438 091C                         i2l4518 0AE2  
                       i2l4366 19B4                         i2l4710 03A8                         i2l4614 00B6  
                       i2l4480 09D4                         i2l4392 07EA                         i2l4376 19FE  
                       i2l4608 00A0                         i2l3834 24FE                         i2l3850 2530  
                       i2l4474 09A8                         i2l4466 0978                         i2l4394 07F8  
                       i2l4706 03A0                         i2l4642 01B2                         i2l3836 2506  
                       i2l3828 24E8                         i2l4492 0A00                         i2l4468 098E  
                       i2l4388 07DA                         i2l4652 01FC                         i2l3854 253E  
                       i2l3846 2526                         i2l3838 250A                         i2l3790 1082  
                       i2l4494 0A08                         i2l4486 09EA                         i2l4478 09CC  
                       i2l4398 07FE                         i2l4670 026C                         i2l4662 0246  
                       i2l3784 106A                         i2l3936 2AF6                         i2l3954 2B7E  
                       i2l4498 0A1C                         i2l4674 027A                         i2l3964 2834  
                       i2l4668 025E                         u241_41 18B4                         i2l3798 10E6  
                       i2l3966 283C                         i2l3976 285C                         i2l3968 2840  
                       i2l3992 2986                         i2l3984 2966                         i2l3986 296E  
                       i2l3988 2972                         u218_41 0CF4                         u219_41 0D08  
                       u260_41 1A6E                         u262_41 1A96                         u239_41 188C  
                       u248_41 1798                         _TMR0IE 007F95                         _TMR0IF 007F92  
                    ??i2_putch 0003                         _TMR0ON 007EAF                         _SSPADD 000FC8  
                       _TRISC3 007CA3                         _TRISC4 007CA4                         _SSPBUF 000FC9  
               __CFG_XINST$OFF 000000              ?_read_colorsensor 0001                         ___ftge 2434  
                 _yopcap_count 00E2                         ___wmul 2A48             ??_read_colorsensor 0093  
                    ??___awdiv 0005                      ??___ftadd 0022                 __CFG_STVREN$ON 000000  
                    ??___awmod 0094                      ??___ftdiv 000F                      ??___ftneg 0004  
                    ??___lldiv 0098                      ??___ftmul 0013                      ??___ftsub 002E  
                    ??___fttol 002C                      ??___lwdiv 0094                      ??___lwmod 009B  
                dec_to_hex@num 0063                         clear_0 292C                         clear_1 2938  
                       clear_2 2944               ___awdiv@quotient 0007                ___awmod@divisor 0092  
              ___awmod@counter 0094                      ??_lcdInst 0092                         _printf 03FA  
                       floor@i 0044                         floor@x 0041          ___ftmul@f3_as_product 0017  
                    ??_initLCD 0093                      ??_isdigit 0090              __end_ofi2___lwdiv 2870  
                 __mediumconst FDA0              __end_ofi2___lwmod 299A                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                      ??_standby 00B2  
            __end_ofi2_lcdInst 2BFC                   _yoplbl_count 00E6              __end_ofi2_isdigit 2B86  
             __end_ofexp@coeff FDE9           __size_of_bottle_time 0036               __end_oflog@coeff FE04  
                   __accesstop 0080        __end_of__initialization 294A                     ___altoft@c 0037  
                   ___ftadd@f1 001C                     ___ftadd@f2 001F                     ___ftge@ff1 0001  
                   ___ftge@ff2 0004                   eval_poly@res 0031                  ___rparam_used 000001  
                   ___ftdiv@f1 0009                     ___ftdiv@f2 000C                     ___ftdiv@f3 0013  
                   ___ftneg@f1 0001                     ___awtoft@c 0009                     ___ftmul@f1 000D  
                   ___ftmul@f2 0010                     ___ftsub@f1 0028                     ___ftsub@f2 002B  
                   ___fttol@f1 0028             i2___lwmod@dividend 0008                 __pcstackCOMRAM 0001  
                 __pidataBANK0 2C30                     ___lltoft@c 0009                  __end_of_floor 1D02  
                __end_of_ldexp 2048                  __end_of_frexp 2434                  __end_of_putch 2BD4  
                  i2printf@idx 0017                    i2printf@val 001B             __size_of_date_time 00D2  
          servo_rotate0@degree 0001                      ?i2___wmul 0001             __size_of_lcdNibble 0060  
                  i2putch@data 0003                      ?i2_printf 000D    __size_of_I2C_ColorSens_Init 016A  
                      ??_floor 0044                        ??_ldexp 0039                        ??_frexp 0006  
         __end_of_bottle_count 1024                     _dec_to_hex 168C                        ??_putch 0092  
                   __pbssBANK0 00B5                     __pbssBANK1 0100             __size_of_eval_poly 00D2  
         i2_I2C_ColorSens_Init 1304              servo_rotate0@duty 0005             __size_of_read_time 0068  
                      ?___ftge 0001                   ?i2_lcdNibble 0001                        ?___wmul 0090  
                    ?___altoft 0037                      ?___awtoft 0009                      ?___ftpack 0001  
                      ?_printf 009C             __size_of_operation 00C0                      ?___lltoft 0009  
                   ??i2___wmul 0005                     ??i2_printf 0013                        _SSPCON1 000FC6  
                      _SSPCON2 000FC5                        _SSPSTAT 000FC7              __end_of_date_time 1EB0  
        ?i2_I2C_ColorSens_Init 0001                     _eska_count 00C8                        i2_putch 2BE4  
            _bottle_count_disp 00E9    __size_ofi2_I2C_Master_Start 0008              __end_of_lcdNibble 2762  
  __size_ofi2_I2C_Master_Write 000A                  ?_operationend 0001                        __Hparam 0000  
                      __Lparam 0000                __size_of___ftge 0090                        ___awdiv 24C4  
                      ___ftadd 0CE4                        ___awmod 2272                        ___ftdiv 1A5E  
                      ___ftneg 2B22                        ___lldiv 2108                __size_of___wmul 0036  
                      ___ftmul 187C                        ___ftsub 299A                        ___fttol 1788  
                      ___lwdiv 2548                        ___lwmod 26A0                     _curr_state 00E8  
                   ??___altoft 003B                        __pcinit 290E                     ??___awtoft 000C  
                   ??___ftpack 0006              __end_of_eval_poly 1F82                        __ramtop 1000  
                      _lcdInst 2BD4                     ??___lltoft 000D                        __ptext0 1D02  
                      __ptext1 1B44                        __ptext2 2B86                        __ptext3 2048  
                      __ptext4 1442                        __ptext5 2870                        __ptext6 2B46  
                      __ptext7 1DDE                        __ptext8 2A7E                        __ptext9 2A12  
              __size_of_printf 03D6                 dec_to_hex@temp 006B                        _initLCD 2870  
            __end_of_hexpowers FDC4                  i2_isdigit$818 0002                        _dpowers FDB2  
                 __size_of_exp 01E8                   __size_of_log 011E                        _isdigit 2AAC  
                 __size_of_isr 03F2    __size_ofi2_read_colorsensor 00EE                   __size_of_pow 0176  
             ___awmod@dividend 0090              __end_of_read_time 26A0       __size_of_I2C_Master_Init 0060  
     __size_of_I2C_Master_Read 002E       __size_of_I2C_Master_Wait 0014                     date_time@i 00B2  
     __size_of_I2C_Master_Stop 0008          __end_of_servo_rotate0 23A4                        _timeset FDC4  
                      _testint 00BC                        _standby 1B44                    ?_dec_to_hex 0063  
               __pintcode_body 0012           end_of_initialization 294A                        exp@sign 0051  
                __Lmediumconst FDA0                        int_func 0012            i2___wmul@multiplier 0001  
            __end_of_operation 2108                 _operation_disp 00D4                 _operation_time 00D6  
               ??_operationend 00B2      __size_of_I2C_Master_Start 0008      __size_of_I2C_Master_Write 000A  
              ___lldiv@divisor 0094                        pow@sign 005E                ___lldiv@counter 009C  
                      printf@c 00B1                        printf@f 009C               I2C_Master_Init@c 009D  
             I2C_Master_Read@a 0091                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE          __end_of_emergencystop 2B68                      _PORTAbits 000F80  
        __size_of_bottle_count 0194      __size_of_read_colorsensor 012C      read_colorsensor@color_low 0097  
            i2_I2C_Master_Read 2AD6              i2_I2C_Master_Wait 2BB2              i2_I2C_Master_Stop 2C20  
            i2___lwdiv@divisor 0003                      i2___lwdiv 281E                      i2___lwmod 2958  
            i2___lwdiv@counter 0007             ?i2_I2C_Master_Read 0001             ?i2_I2C_Master_Wait 0001  
       ??i2_I2C_ColorSens_Init 0004   i2read_colorsensor@color_high 000C             ?i2_I2C_Master_Stop 0001  
                   _start_time 00D8                      i2_lcdInst 2BF0                    ___ftdiv@exp 0016  
                  printf@width 00AF            ??i2_I2C_Master_Read 0002                      i2_isdigit 2B68  
          ??i2_I2C_Master_Wait 0001            ??i2_I2C_Master_Stop 0002                    ___ftmul@exp 0016  
                 _bottle_count 0E90                 __end_of___ftge 24C4                 __end_of___wmul 2A7E  
          __size_of_dec_to_hex 00FC           __size_ofi2_lcdNibble 004E             _total_bottle_count 00DE  
                i2lcdInst@data 0003                     floor@expon 0047               i2___wmul@product 0005  
               __end_of_printf 07D0                   i2printf@flag 001D      __end_ofi2_I2C_Master_Read 2AFC  
    __end_ofi2_I2C_Master_Wait 2BC4                   i2printf@prec 001A            start_initialization 290E  
    __end_ofi2_I2C_Master_Stop 2C28                     eval_poly@d 002B                     eval_poly@n 002D  
                   eval_poly@x 0028              __size_ofi2___wmul 0026                     ldexp@value 0034  
                  __end_of_exp 0CE4                    __end_of_log 168C                    __end_of_isr 03FA  
                  __end_of_pow 119A                      i2printf@c 0020                      i2printf@f 000D  
                ??_bottle_time 00B2          i2I2C_Master_Read@temp 0003                     ?i2___lwdiv 0001  
                   ?i2___lwmod 0008              __size_ofi2_printf 032C                     frexp@value 0001  
            ??_I2C_Master_Init 00A1              ??_I2C_Master_Read 0091              ??_I2C_Master_Wait 0090  
                   ?i2_lcdInst 0001              ??_I2C_Master_Stop 0091     read_colorsensor@color_high 009B  
                   ?i2_isdigit 0001                       ??___ftge 0007                       ??___wmul 0094  
                  __pdataBANK0 00E9               __CFG_LPT1OSC$OFF 000000                       ??_printf 00A4  
            __size_of___altoft 0078                     read_time@i 0004              __size_of___awtoft 0038  
            __size_of___ftpack 00AE              __size_of___lltoft 005C     __end_of_I2C_ColorSens_Init 1304  
                  __pbssCOMRAM 0076           __end_of_operationend 2B9E                  __pcstackBANK0 0080  
            i2___lwmod@divisor 000A              i2___lwmod@counter 000C                       ?i2_putch 0001  
          __end_of_bottle_time 2A48               _I2C_Master_Start 2C18            i2I2C_Master_Write@d 0002  
             _I2C_Master_Write 2BFC               _eskacaplbl_count 00CC                      _date_time 1DDE  
             ___lwdiv@dividend 0090              __CFG_CCP2MX$PORTC 000000                      __pintcode 0008  
                __pmediumconst FDA0                      _lcdNibble 2702                _yopcaplbl_count 00E4  
                     ?___awdiv 0001                       ?___ftadd 001C                       ?___awmod 0090  
                     ?___ftdiv 0009                       ?___ftneg 0001                       ?___lldiv 0090  
                     ?___ftmul 000D                       ?___ftsub 0028                       ?___fttol 0028  
                     ?___lwdiv 0090                       ?___lwmod 0097                       ?_lcdInst 0001  
             dec_to_hex@hexnum 006F                       ?_initLCD 0001                       ?_isdigit 0001  
             _read_colorsensor 1442     __size_ofi2_I2C_Master_Read 0026     __size_ofi2_I2C_Master_Wait 0012  
                    _eval_poly 1EB0     __size_ofi2_I2C_Master_Stop 0008                      _hexpowers FDBC  
                     ?_standby 0001               ___lwdiv@quotient 0094                 __size_of_floor 00DE  
               __size_of_ldexp 00C6                 __size_of_frexp 0090                   ??_dec_to_hex 0065  
                  ??i2___lwdiv 0005                    ??i2___lwmod 000C                      _read_time 2638  
               __size_of_putch 0010     __end_ofi2_I2C_Master_Start 2C30     __end_ofi2_I2C_Master_Write 2C10  
                  ??i2_lcdInst 0003                 ___wmul@product 0094                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                    ??i2_isdigit 0001  
                   ?_date_time 0001                       i2u250_40 17D2                       i2u250_45 17CA  
                     i2u332_40 10CE                       i2u270_40 1C6C                       i2u422_47 03B0  
                     i2u423_47 28D8                       i2u424_47 28E0                       i2u257_40 23F4  
                     i2u425_47 2900                       i2u257_48 23F6                       i2u274_40 1FBA  
                     i2u426_47 2908                       i2u274_48 1FBC                       i2u427_47 1336  
                     i2u428_47 2342                       i2u349_40 2AF4                       i2u429_47 236C  
                     i2u294_40 0B8C                       i2u295_40 0B8E                      _operation 2048  
             __CFG_WDTPS$32768 000000                     ?_lcdNibble 0001             __end_of_dec_to_hex 1788  
   __end_ofi2_read_colorsensor 1A5E              ___wmul@multiplier 0090                       i2___wmul 2AFC  
                lcdNibble@data 0091                     printf@flag 00AE                  lcdNibble@temp 0090  
                   printf@prec 00AB                     ?_eval_poly 0028                       i2_printf 07D0  
                  _bottle_time 2A12            I2C_Master_Read@temp 0092                      _yop_count 00E0  
                   ?_read_time 0001             dec_to_hex@quotient 0071                    _bottlequeue 0100  
             __size_ofi2_putch 000C                      frexp@eptr 0004                       __Hrparam 0000  
          i2read_colorsensor@i 0010                     ?_operation 0001                       __Lrparam 0000  
           __CFG_BOREN$SBORDIS 000000                    dec_to_hex@i 006D         __size_of_servo_rotate0 0090  
             __size_of___awdiv 0084               __size_of___ftadd 01AC               __size_of___awmod 00A2  
             __size_of___ftdiv 00E6               __size_of___ftneg 0024          i2___wmul@multiplicand 0003  
             __size_of___lldiv 00BC                       ___altoft 25C0               __size_of___ftmul 00F4  
             __size_of___ftsub 0040               __size_of___fttol 00F4               __size_of___lwdiv 0078  
             __size_of___lwmod 0062          __size_of_operationend 0018                       ___awtoft 29DA  
                     ___ftpack 21C4                       ___lltoft 27C2                    _isdigit$818 0091  
           i2I2C_Master_Read@a 0002               __size_of_lcdInst 0010                       _exp$1267 004C  
              _I2C_Master_Init 2762                _I2C_Master_Read 2A7E               __size_of_initLCD 0050  
              _I2C_Master_Wait 2B9E                _I2C_Master_Stop 2C10                       _isr$1362 0074  
             __size_of_isdigit 002A                ___lwdiv@divisor 0092                ___lwdiv@counter 0096  
                     __ptext10 0E90                       __ptext11 03FA                       __ptext20 2762  
                     __ptext12 2BC4                       __ptext21 2108                       __ptext13 2AAC  
                     __ptext30 2BE4                       __ptext22 119A                       __ptext14 2A48  
                     __ptext31 2B68                       __ptext23 2BFC                       __ptext15 26A0  
                     __ptext40 2C20                       __ptext32 2958                       __ptext24 2C10  
                     __ptext16 2548                       __ptext41 2C28                       __ptext33 281E  
                     __ptext25 2C18                       __ptext17 2BD4                       __ptext50 23A4  
                     __ptext42 2AD6                       __ptext34 2BF0                       __ptext26 2B9E  
                     __ptext18 2702                       __ptext51 1788                       __ptext43 2BB2  
                     __ptext35 28C0                       __ptext19 2272                       __ptext60 1A5E  
                     __ptext52 2434                       __ptext44 168C                       __ptext36 1304  
                     __ptext28 1970                       __ptext61 29DA                       __ptext53 25C0  
                     __ptext45 1024                       __ptext37 2314                       __ptext29 07D0  
                     __ptext62 27C2                       __ptext54 1EB0                       __ptext46 156E  
                     __ptext38 2638                       __ptext63 21C4                       __ptext55 2AFC  
                     __ptext47 0AFC                       __ptext39 2C06                       __ptext64 24C4  
                     __ptext56 187C                       __ptext48 1F82                       __ptext57 299A  
                     __ptext49 1C24                       __ptext58 0CE4                       __ptext59 2B22  
                     _end_time 00C4               __size_of_standby 00E0                       _pow$1265 0058  
                     _pow$1266 005B         __size_of_emergencystop 0022                  __size_of_main 00DC  
__size_ofi2_I2C_ColorSens_Init 013E                       _nodedata 00D2                _dec_to_hex$1263 0065  
              _dec_to_hex$1264 0068                    ??_date_time 00B2                   _operationend 2B86  
                ??i2_lcdNibble 0001                    ??_lcdNibble 0090                       _testflag 00DC  
                     int$flags 007E                      printf@idx 00A8                      printf@val 00AC  
                     exp@coeff FDCB                       log@coeff FDE9               _bottlequeue_head 00C0  
                    putch@data 0092       __end_of_I2C_Master_Start 2C20               _bottlequeue_tail 00C2  
     __end_of_I2C_Master_Write 2C06                     _INTCONbits 000FF2                    ??_eval_poly 002F  
                     isdigit@c 0092                  _servo_rotate0 2314                    ??_read_time 0004  
                     intlevel2 0000               ___lwmod@dividend 0097               ___lldiv@dividend 0090  
           _I2C_ColorSens_Init 119A       __end_of_read_colorsensor 156E                    ??_operation 00B2  
          ?_I2C_ColorSens_Init 0001                       printf@ap 00A9        __end_of_I2C_Master_Init 27C2  
      __end_of_I2C_Master_Read 2AAC        __end_of_I2C_Master_Wait 2BB2        __end_of_I2C_Master_Stop 2C18  
                  lcdInst@data 0092                  _emergencystop 2B46            __end_ofi2_lcdNibble 290E  
             ___lldiv@quotient 0098              I2C_Master_Write@d 0091                ___lwmod@divisor 0099  
  i2read_colorsensor@color_low 0008                ___lwmod@counter 009B           ??_I2C_ColorSens_Init 0093  
               ?_servo_rotate0 0001  
